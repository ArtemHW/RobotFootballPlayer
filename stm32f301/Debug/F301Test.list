
F301Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007478  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08007608  08007608  00017608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800777c  0800777c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800777c  0800777c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800777c  0800777c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800777c  0800777c  0001777c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007780  08007780  00017780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007784  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002334  20000010  08007794  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002344  08007794  00022344  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a1bb  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003baa  00000000  00000000  0003a23e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001688  00000000  00000000  0003dde8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001196  00000000  00000000  0003f470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018ea4  00000000  00000000  00040606  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ba4f  00000000  00000000  000594aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00099b6e  00000000  00000000  00074ef9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005e5c  00000000  00000000  0010ea68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  001148c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080075f0 	.word	0x080075f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080075f0 	.word	0x080075f0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <sendATCommand>:

#include <espATcommands.h>


void sendATCommand(UART_HandleTypeDef *huart, const char* atcom, int sizeOfAT, char* response, int sizeOfResp, int delayms)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b086      	sub	sp, #24
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	60f8      	str	r0, [r7, #12]
 80001ec:	60b9      	str	r1, [r7, #8]
 80001ee:	607a      	str	r2, [r7, #4]
 80001f0:	603b      	str	r3, [r7, #0]
//	if(atcom[sizeOfAT-1] == '\0') {
//		sizeOfAT -= 1;
//	}
	for(uint8_t i = 0; i < sizeOfAT; i++) {
 80001f2:	2300      	movs	r3, #0
 80001f4:	75fb      	strb	r3, [r7, #23]
 80001f6:	e00b      	b.n	8000210 <sendATCommand+0x2c>
		if(atcom[i] == '\0') {
 80001f8:	7dfb      	ldrb	r3, [r7, #23]
 80001fa:	68ba      	ldr	r2, [r7, #8]
 80001fc:	4413      	add	r3, r2
 80001fe:	781b      	ldrb	r3, [r3, #0]
 8000200:	2b00      	cmp	r3, #0
 8000202:	d102      	bne.n	800020a <sendATCommand+0x26>
			sizeOfAT = i + 1;
 8000204:	7dfb      	ldrb	r3, [r7, #23]
 8000206:	3301      	adds	r3, #1
 8000208:	607b      	str	r3, [r7, #4]
	for(uint8_t i = 0; i < sizeOfAT; i++) {
 800020a:	7dfb      	ldrb	r3, [r7, #23]
 800020c:	3301      	adds	r3, #1
 800020e:	75fb      	strb	r3, [r7, #23]
 8000210:	7dfb      	ldrb	r3, [r7, #23]
 8000212:	687a      	ldr	r2, [r7, #4]
 8000214:	429a      	cmp	r2, r3
 8000216:	dcef      	bgt.n	80001f8 <sendATCommand+0x14>
		}
	}
	for(uint8_t i = 0; i < sizeOfResp; i++) {
 8000218:	2300      	movs	r3, #0
 800021a:	75bb      	strb	r3, [r7, #22]
 800021c:	e007      	b.n	800022e <sendATCommand+0x4a>
		response[i] = 0;
 800021e:	7dbb      	ldrb	r3, [r7, #22]
 8000220:	683a      	ldr	r2, [r7, #0]
 8000222:	4413      	add	r3, r2
 8000224:	2200      	movs	r2, #0
 8000226:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < sizeOfResp; i++) {
 8000228:	7dbb      	ldrb	r3, [r7, #22]
 800022a:	3301      	adds	r3, #1
 800022c:	75bb      	strb	r3, [r7, #22]
 800022e:	7dbb      	ldrb	r3, [r7, #22]
 8000230:	6a3a      	ldr	r2, [r7, #32]
 8000232:	429a      	cmp	r2, r3
 8000234:	dcf3      	bgt.n	800021e <sendATCommand+0x3a>
	}
	HAL_UART_Transmit(huart, atcom, sizeOfAT, delayms);
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	b29a      	uxth	r2, r3
 800023a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800023c:	68b9      	ldr	r1, [r7, #8]
 800023e:	68f8      	ldr	r0, [r7, #12]
 8000240:	f003 ff58 	bl	80040f4 <HAL_UART_Transmit>
	HAL_UART_Receive(huart, response, sizeOfResp, delayms);
 8000244:	6a3b      	ldr	r3, [r7, #32]
 8000246:	b29a      	uxth	r2, r3
 8000248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800024a:	6839      	ldr	r1, [r7, #0]
 800024c:	68f8      	ldr	r0, [r7, #12]
 800024e:	f003 ffdb 	bl	8004208 <HAL_UART_Receive>
}
 8000252:	bf00      	nop
 8000254:	3718      	adds	r7, #24
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
	...

0800025c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800025c:	b480      	push	{r7}
 800025e:	b085      	sub	sp, #20
 8000260:	af00      	add	r7, sp, #0
 8000262:	60f8      	str	r0, [r7, #12]
 8000264:	60b9      	str	r1, [r7, #8]
 8000266:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	4a07      	ldr	r2, [pc, #28]	; (8000288 <vApplicationGetIdleTaskMemory+0x2c>)
 800026c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800026e:	68bb      	ldr	r3, [r7, #8]
 8000270:	4a06      	ldr	r2, [pc, #24]	; (800028c <vApplicationGetIdleTaskMemory+0x30>)
 8000272:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	2280      	movs	r2, #128	; 0x80
 8000278:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800027a:	bf00      	nop
 800027c:	3714      	adds	r7, #20
 800027e:	46bd      	mov	sp, r7
 8000280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000284:	4770      	bx	lr
 8000286:	bf00      	nop
 8000288:	2000002c 	.word	0x2000002c
 800028c:	20000084 	.word	0x20000084

08000290 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000290:	b480      	push	{r7}
 8000292:	b085      	sub	sp, #20
 8000294:	af00      	add	r7, sp, #0
 8000296:	60f8      	str	r0, [r7, #12]
 8000298:	60b9      	str	r1, [r7, #8]
 800029a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	4a07      	ldr	r2, [pc, #28]	; (80002bc <vApplicationGetTimerTaskMemory+0x2c>)
 80002a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80002a2:	68bb      	ldr	r3, [r7, #8]
 80002a4:	4a06      	ldr	r2, [pc, #24]	; (80002c0 <vApplicationGetTimerTaskMemory+0x30>)
 80002a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002ae:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80002b0:	bf00      	nop
 80002b2:	3714      	adds	r7, #20
 80002b4:	46bd      	mov	sp, r7
 80002b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ba:	4770      	bx	lr
 80002bc:	20000284 	.word	0x20000284
 80002c0:	200002dc 	.word	0x200002dc

080002c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002c4:	b5b0      	push	{r4, r5, r7, lr}
 80002c6:	b09c      	sub	sp, #112	; 0x70
 80002c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002ca:	f000 ffdf 	bl	800128c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ce:	f000 f879 	bl	80003c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002d2:	f000 f999 	bl	8000608 <MX_GPIO_Init>
  MX_ADC1_Init();
 80002d6:	f000 f8cd 	bl	8000474 <MX_ADC1_Init>
  MX_SPI2_Init();
 80002da:	f000 f927 	bl	800052c <MX_SPI2_Init>
  MX_USART3_UART_Init();
 80002de:	f000 f963 	bl	80005a8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  ADC1_configuration();
 80002e2:	f000 fa3d 	bl	8000760 <ADC1_configuration>
  TIM1_configuration();
 80002e6:	f000 fb19 	bl	800091c <TIM1_configuration>
  TIM2_configuration();
 80002ea:	f000 fb83 	bl	80009f4 <TIM2_configuration>


  pc13EventGroup = xEventGroupCreate();
 80002ee:	f004 fc1f 	bl	8004b30 <xEventGroupCreate>
 80002f2:	4603      	mov	r3, r0
 80002f4:	4a29      	ldr	r2, [pc, #164]	; (800039c <main+0xd8>)
 80002f6:	6013      	str	r3, [r2, #0]
  pc14EventGroup = xEventGroupCreate();
 80002f8:	f004 fc1a 	bl	8004b30 <xEventGroupCreate>
 80002fc:	4603      	mov	r3, r0
 80002fe:	4a28      	ldr	r2, [pc, #160]	; (80003a0 <main+0xdc>)
 8000300:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of PS_Measure */
  osThreadDef(PS_Measure, psMeasure, osPriorityNormal, 0, 128);
 8000302:	4b28      	ldr	r3, [pc, #160]	; (80003a4 <main+0xe0>)
 8000304:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000308:	461d      	mov	r5, r3
 800030a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800030c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800030e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000312:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PS_MeasureHandle = osThreadCreate(osThread(PS_Measure), NULL);
 8000316:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800031a:	2100      	movs	r1, #0
 800031c:	4618      	mov	r0, r3
 800031e:	f004 fba7 	bl	8004a70 <osThreadCreate>
 8000322:	4603      	mov	r3, r0
 8000324:	4a20      	ldr	r2, [pc, #128]	; (80003a8 <main+0xe4>)
 8000326:	6013      	str	r3, [r2, #0]

  /* definition and creation of PC_13_LED */
  osThreadDef(PC_13_LED, pc13LedCntrl, osPriorityNormal, 0, 128);
 8000328:	4b20      	ldr	r3, [pc, #128]	; (80003ac <main+0xe8>)
 800032a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800032e:	461d      	mov	r5, r3
 8000330:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000332:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000334:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000338:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PC_13_LEDHandle = osThreadCreate(osThread(PC_13_LED), NULL);
 800033c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000340:	2100      	movs	r1, #0
 8000342:	4618      	mov	r0, r3
 8000344:	f004 fb94 	bl	8004a70 <osThreadCreate>
 8000348:	4603      	mov	r3, r0
 800034a:	4a19      	ldr	r2, [pc, #100]	; (80003b0 <main+0xec>)
 800034c:	6013      	str	r3, [r2, #0]

  /* definition and creation of PC_14_LED */
  osThreadDef(PC_14_LED, pc14LedCntrl, osPriorityNormal, 0, 128);
 800034e:	4b19      	ldr	r3, [pc, #100]	; (80003b4 <main+0xf0>)
 8000350:	f107 041c 	add.w	r4, r7, #28
 8000354:	461d      	mov	r5, r3
 8000356:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000358:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800035a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800035e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PC_14_LEDHandle = osThreadCreate(osThread(PC_14_LED), NULL);
 8000362:	f107 031c 	add.w	r3, r7, #28
 8000366:	2100      	movs	r1, #0
 8000368:	4618      	mov	r0, r3
 800036a:	f004 fb81 	bl	8004a70 <osThreadCreate>
 800036e:	4603      	mov	r3, r0
 8000370:	4a11      	ldr	r2, [pc, #68]	; (80003b8 <main+0xf4>)
 8000372:	6013      	str	r3, [r2, #0]

  /* definition and creation of EspCommunication */
  osThreadDef(EspCommunication, espCommunication, osPriorityNormal, 0, 256);
 8000374:	4b11      	ldr	r3, [pc, #68]	; (80003bc <main+0xf8>)
 8000376:	463c      	mov	r4, r7
 8000378:	461d      	mov	r5, r3
 800037a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800037c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800037e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000382:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EspCommunicationHandle = osThreadCreate(osThread(EspCommunication), NULL);
 8000386:	463b      	mov	r3, r7
 8000388:	2100      	movs	r1, #0
 800038a:	4618      	mov	r0, r3
 800038c:	f004 fb70 	bl	8004a70 <osThreadCreate>
 8000390:	4603      	mov	r3, r0
 8000392:	4a0b      	ldr	r2, [pc, #44]	; (80003c0 <main+0xfc>)
 8000394:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000396:	f004 fb64 	bl	8004a62 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800039a:	e7fe      	b.n	800039a <main+0xd6>
 800039c:	2000083c 	.word	0x2000083c
 80003a0:	20000840 	.word	0x20000840
 80003a4:	08007614 	.word	0x08007614
 80003a8:	20000818 	.word	0x20000818
 80003ac:	0800763c 	.word	0x0800763c
 80003b0:	2000081c 	.word	0x2000081c
 80003b4:	08007664 	.word	0x08007664
 80003b8:	20000820 	.word	0x20000820
 80003bc:	08007694 	.word	0x08007694
 80003c0:	20000824 	.word	0x20000824

080003c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b09c      	sub	sp, #112	; 0x70
 80003c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80003ce:	2228      	movs	r2, #40	; 0x28
 80003d0:	2100      	movs	r1, #0
 80003d2:	4618      	mov	r0, r3
 80003d4:	f007 f8d2 	bl	800757c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80003dc:	2200      	movs	r2, #0
 80003de:	601a      	str	r2, [r3, #0]
 80003e0:	605a      	str	r2, [r3, #4]
 80003e2:	609a      	str	r2, [r3, #8]
 80003e4:	60da      	str	r2, [r3, #12]
 80003e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003e8:	1d3b      	adds	r3, r7, #4
 80003ea:	2230      	movs	r2, #48	; 0x30
 80003ec:	2100      	movs	r1, #0
 80003ee:	4618      	mov	r0, r3
 80003f0:	f007 f8c4 	bl	800757c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003f4:	2302      	movs	r3, #2
 80003f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003f8:	2301      	movs	r3, #1
 80003fa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003fc:	2310      	movs	r3, #16
 80003fe:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000400:	2302      	movs	r3, #2
 8000402:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000404:	2300      	movs	r3, #0
 8000406:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000408:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800040c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800040e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000412:	4618      	mov	r0, r3
 8000414:	f001 fec2 	bl	800219c <HAL_RCC_OscConfig>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800041e:	f000 fd3d 	bl	8000e9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000422:	230f      	movs	r3, #15
 8000424:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000426:	2302      	movs	r3, #2
 8000428:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800042a:	2300      	movs	r3, #0
 800042c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800042e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000432:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000434:	2300      	movs	r3, #0
 8000436:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000438:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800043c:	2102      	movs	r1, #2
 800043e:	4618      	mov	r0, r3
 8000440:	f002 feea 	bl	8003218 <HAL_RCC_ClockConfig>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800044a:	f000 fd27 	bl	8000e9c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC1;
 800044e:	2380      	movs	r3, #128	; 0x80
 8000450:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV2;
 8000452:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000456:	61fb      	str	r3, [r7, #28]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000458:	1d3b      	adds	r3, r7, #4
 800045a:	4618      	mov	r0, r3
 800045c:	f003 f944 	bl	80036e8 <HAL_RCCEx_PeriphCLKConfig>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000466:	f000 fd19 	bl	8000e9c <Error_Handler>
  }
}
 800046a:	bf00      	nop
 800046c:	3770      	adds	r7, #112	; 0x70
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
	...

08000474 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b086      	sub	sp, #24
 8000478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800047a:	463b      	mov	r3, r7
 800047c:	2200      	movs	r2, #0
 800047e:	601a      	str	r2, [r3, #0]
 8000480:	605a      	str	r2, [r3, #4]
 8000482:	609a      	str	r2, [r3, #8]
 8000484:	60da      	str	r2, [r3, #12]
 8000486:	611a      	str	r2, [r3, #16]
 8000488:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800048a:	4b27      	ldr	r3, [pc, #156]	; (8000528 <MX_ADC1_Init+0xb4>)
 800048c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000490:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000492:	4b25      	ldr	r3, [pc, #148]	; (8000528 <MX_ADC1_Init+0xb4>)
 8000494:	2200      	movs	r2, #0
 8000496:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000498:	4b23      	ldr	r3, [pc, #140]	; (8000528 <MX_ADC1_Init+0xb4>)
 800049a:	2200      	movs	r2, #0
 800049c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800049e:	4b22      	ldr	r3, [pc, #136]	; (8000528 <MX_ADC1_Init+0xb4>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80004a4:	4b20      	ldr	r3, [pc, #128]	; (8000528 <MX_ADC1_Init+0xb4>)
 80004a6:	2201      	movs	r2, #1
 80004a8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004aa:	4b1f      	ldr	r3, [pc, #124]	; (8000528 <MX_ADC1_Init+0xb4>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004b2:	4b1d      	ldr	r3, [pc, #116]	; (8000528 <MX_ADC1_Init+0xb4>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004b8:	4b1b      	ldr	r3, [pc, #108]	; (8000528 <MX_ADC1_Init+0xb4>)
 80004ba:	2201      	movs	r2, #1
 80004bc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004be:	4b1a      	ldr	r3, [pc, #104]	; (8000528 <MX_ADC1_Init+0xb4>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80004c4:	4b18      	ldr	r3, [pc, #96]	; (8000528 <MX_ADC1_Init+0xb4>)
 80004c6:	2201      	movs	r2, #1
 80004c8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80004ca:	4b17      	ldr	r3, [pc, #92]	; (8000528 <MX_ADC1_Init+0xb4>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004d2:	4b15      	ldr	r3, [pc, #84]	; (8000528 <MX_ADC1_Init+0xb4>)
 80004d4:	2204      	movs	r2, #4
 80004d6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80004d8:	4b13      	ldr	r3, [pc, #76]	; (8000528 <MX_ADC1_Init+0xb4>)
 80004da:	2200      	movs	r2, #0
 80004dc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80004de:	4b12      	ldr	r3, [pc, #72]	; (8000528 <MX_ADC1_Init+0xb4>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004e4:	4810      	ldr	r0, [pc, #64]	; (8000528 <MX_ADC1_Init+0xb4>)
 80004e6:	f000 ff2b 	bl	8001340 <HAL_ADC_Init>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d001      	beq.n	80004f4 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 80004f0:	f000 fcd4 	bl	8000e9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80004f4:	2303      	movs	r3, #3
 80004f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004f8:	2301      	movs	r3, #1
 80004fa:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004fc:	2300      	movs	r3, #0
 80004fe:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000500:	2300      	movs	r3, #0
 8000502:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000504:	2300      	movs	r3, #0
 8000506:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000508:	2300      	movs	r3, #0
 800050a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800050c:	463b      	mov	r3, r7
 800050e:	4619      	mov	r1, r3
 8000510:	4805      	ldr	r0, [pc, #20]	; (8000528 <MX_ADC1_Init+0xb4>)
 8000512:	f001 f89b 	bl	800164c <HAL_ADC_ConfigChannel>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800051c:	f000 fcbe 	bl	8000e9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000520:	bf00      	nop
 8000522:	3718      	adds	r7, #24
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	200006dc 	.word	0x200006dc

0800052c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000530:	4b1b      	ldr	r3, [pc, #108]	; (80005a0 <MX_SPI2_Init+0x74>)
 8000532:	4a1c      	ldr	r2, [pc, #112]	; (80005a4 <MX_SPI2_Init+0x78>)
 8000534:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000536:	4b1a      	ldr	r3, [pc, #104]	; (80005a0 <MX_SPI2_Init+0x74>)
 8000538:	f44f 7282 	mov.w	r2, #260	; 0x104
 800053c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 800053e:	4b18      	ldr	r3, [pc, #96]	; (80005a0 <MX_SPI2_Init+0x74>)
 8000540:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000544:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000546:	4b16      	ldr	r3, [pc, #88]	; (80005a0 <MX_SPI2_Init+0x74>)
 8000548:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800054c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800054e:	4b14      	ldr	r3, [pc, #80]	; (80005a0 <MX_SPI2_Init+0x74>)
 8000550:	2202      	movs	r2, #2
 8000552:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000554:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <MX_SPI2_Init+0x74>)
 8000556:	2201      	movs	r2, #1
 8000558:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800055a:	4b11      	ldr	r3, [pc, #68]	; (80005a0 <MX_SPI2_Init+0x74>)
 800055c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000560:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000562:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <MX_SPI2_Init+0x74>)
 8000564:	2220      	movs	r2, #32
 8000566:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000568:	4b0d      	ldr	r3, [pc, #52]	; (80005a0 <MX_SPI2_Init+0x74>)
 800056a:	2200      	movs	r2, #0
 800056c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800056e:	4b0c      	ldr	r3, [pc, #48]	; (80005a0 <MX_SPI2_Init+0x74>)
 8000570:	2200      	movs	r2, #0
 8000572:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000574:	4b0a      	ldr	r3, [pc, #40]	; (80005a0 <MX_SPI2_Init+0x74>)
 8000576:	2200      	movs	r2, #0
 8000578:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800057a:	4b09      	ldr	r3, [pc, #36]	; (80005a0 <MX_SPI2_Init+0x74>)
 800057c:	2207      	movs	r2, #7
 800057e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000580:	4b07      	ldr	r3, [pc, #28]	; (80005a0 <MX_SPI2_Init+0x74>)
 8000582:	2200      	movs	r2, #0
 8000584:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000586:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <MX_SPI2_Init+0x74>)
 8000588:	2200      	movs	r2, #0
 800058a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800058c:	4804      	ldr	r0, [pc, #16]	; (80005a0 <MX_SPI2_Init+0x74>)
 800058e:	f003 fa2f 	bl	80039f0 <HAL_SPI_Init>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8000598:	f000 fc80 	bl	8000e9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800059c:	bf00      	nop
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	2000072c 	.word	0x2000072c
 80005a4:	40003800 	.word	0x40003800

080005a8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80005ac:	4b14      	ldr	r3, [pc, #80]	; (8000600 <MX_USART3_UART_Init+0x58>)
 80005ae:	4a15      	ldr	r2, [pc, #84]	; (8000604 <MX_USART3_UART_Init+0x5c>)
 80005b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80005b2:	4b13      	ldr	r3, [pc, #76]	; (8000600 <MX_USART3_UART_Init+0x58>)
 80005b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80005ba:	4b11      	ldr	r3, [pc, #68]	; (8000600 <MX_USART3_UART_Init+0x58>)
 80005bc:	2200      	movs	r2, #0
 80005be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80005c0:	4b0f      	ldr	r3, [pc, #60]	; (8000600 <MX_USART3_UART_Init+0x58>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80005c6:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <MX_USART3_UART_Init+0x58>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80005cc:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <MX_USART3_UART_Init+0x58>)
 80005ce:	220c      	movs	r2, #12
 80005d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005d2:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <MX_USART3_UART_Init+0x58>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80005d8:	4b09      	ldr	r3, [pc, #36]	; (8000600 <MX_USART3_UART_Init+0x58>)
 80005da:	2200      	movs	r2, #0
 80005dc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005de:	4b08      	ldr	r3, [pc, #32]	; (8000600 <MX_USART3_UART_Init+0x58>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005e4:	4b06      	ldr	r3, [pc, #24]	; (8000600 <MX_USART3_UART_Init+0x58>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80005ea:	4805      	ldr	r0, [pc, #20]	; (8000600 <MX_USART3_UART_Init+0x58>)
 80005ec:	f003 fd34 	bl	8004058 <HAL_UART_Init>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80005f6:	f000 fc51 	bl	8000e9c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000790 	.word	0x20000790
 8000604:	40004800 	.word	0x40004800

08000608 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b088      	sub	sp, #32
 800060c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060e:	f107 030c 	add.w	r3, r7, #12
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
 800061c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061e:	4b4d      	ldr	r3, [pc, #308]	; (8000754 <MX_GPIO_Init+0x14c>)
 8000620:	695b      	ldr	r3, [r3, #20]
 8000622:	4a4c      	ldr	r2, [pc, #304]	; (8000754 <MX_GPIO_Init+0x14c>)
 8000624:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000628:	6153      	str	r3, [r2, #20]
 800062a:	4b4a      	ldr	r3, [pc, #296]	; (8000754 <MX_GPIO_Init+0x14c>)
 800062c:	695b      	ldr	r3, [r3, #20]
 800062e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000636:	4b47      	ldr	r3, [pc, #284]	; (8000754 <MX_GPIO_Init+0x14c>)
 8000638:	695b      	ldr	r3, [r3, #20]
 800063a:	4a46      	ldr	r2, [pc, #280]	; (8000754 <MX_GPIO_Init+0x14c>)
 800063c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000640:	6153      	str	r3, [r2, #20]
 8000642:	4b44      	ldr	r3, [pc, #272]	; (8000754 <MX_GPIO_Init+0x14c>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800064e:	4b41      	ldr	r3, [pc, #260]	; (8000754 <MX_GPIO_Init+0x14c>)
 8000650:	695b      	ldr	r3, [r3, #20]
 8000652:	4a40      	ldr	r2, [pc, #256]	; (8000754 <MX_GPIO_Init+0x14c>)
 8000654:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000658:	6153      	str	r3, [r2, #20]
 800065a:	4b3e      	ldr	r3, [pc, #248]	; (8000754 <MX_GPIO_Init+0x14c>)
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000662:	603b      	str	r3, [r7, #0]
 8000664:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800066c:	483a      	ldr	r0, [pc, #232]	; (8000758 <MX_GPIO_Init+0x150>)
 800066e:	f001 fd59 	bl	8002124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN12_Pin|_1A_Pin|_2A_Pin|EN34_Pin
 8000672:	2200      	movs	r2, #0
 8000674:	21f8      	movs	r1, #248	; 0xf8
 8000676:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800067a:	f001 fd53 	bl	8002124 <HAL_GPIO_WritePin>
                          |_3A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, _4A_Pin|RST_ESP_Pin|EN_ESP_Pin|SPI2_CS_L_Pin
 800067e:	2200      	movs	r2, #0
 8000680:	f245 0107 	movw	r1, #20487	; 0x5007
 8000684:	4835      	ldr	r0, [pc, #212]	; (800075c <MX_GPIO_Init+0x154>)
 8000686:	f001 fd4d 	bl	8002124 <HAL_GPIO_WritePin>
                          |SPI2_CS_R_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800068a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800068e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000690:	2301      	movs	r3, #1
 8000692:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000698:	2300      	movs	r3, #0
 800069a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	4619      	mov	r1, r3
 80006a2:	482d      	ldr	r0, [pc, #180]	; (8000758 <MX_GPIO_Init+0x150>)
 80006a4:	f001 fbcc 	bl	8001e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN12_Pin EN34_Pin */
  GPIO_InitStruct.Pin = EN12_Pin|EN34_Pin;
 80006a8:	2348      	movs	r3, #72	; 0x48
 80006aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ac:	2301      	movs	r3, #1
 80006ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	4619      	mov	r1, r3
 80006be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c2:	f001 fbbd 	bl	8001e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : _1A_Pin _2A_Pin _3A_Pin */
  GPIO_InitStruct.Pin = _1A_Pin|_2A_Pin|_3A_Pin;
 80006c6:	23b0      	movs	r3, #176	; 0xb0
 80006c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ca:	2301      	movs	r3, #1
 80006cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ce:	2300      	movs	r3, #0
 80006d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80006d2:	2301      	movs	r3, #1
 80006d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d6:	f107 030c 	add.w	r3, r7, #12
 80006da:	4619      	mov	r1, r3
 80006dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e0:	f001 fbae 	bl	8001e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : _4A_Pin SPI2_CS_L_Pin SPI2_CS_R_Pin */
  GPIO_InitStruct.Pin = _4A_Pin|SPI2_CS_L_Pin|SPI2_CS_R_Pin;
 80006e4:	f245 0301 	movw	r3, #20481	; 0x5001
 80006e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ea:	2301      	movs	r3, #1
 80006ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	2300      	movs	r3, #0
 80006f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80006f2:	2301      	movs	r3, #1
 80006f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f6:	f107 030c 	add.w	r3, r7, #12
 80006fa:	4619      	mov	r1, r3
 80006fc:	4817      	ldr	r0, [pc, #92]	; (800075c <MX_GPIO_Init+0x154>)
 80006fe:	f001 fb9f 	bl	8001e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : RST_ESP_Pin EN_ESP_Pin */
  GPIO_InitStruct.Pin = RST_ESP_Pin|EN_ESP_Pin;
 8000702:	2306      	movs	r3, #6
 8000704:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000706:	2301      	movs	r3, #1
 8000708:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	2300      	movs	r3, #0
 800070c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070e:	2300      	movs	r3, #0
 8000710:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000712:	f107 030c 	add.w	r3, r7, #12
 8000716:	4619      	mov	r1, r3
 8000718:	4810      	ldr	r0, [pc, #64]	; (800075c <MX_GPIO_Init+0x154>)
 800071a:	f001 fb91 	bl	8001e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800071e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000722:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000724:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000728:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072a:	2300      	movs	r3, #0
 800072c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072e:	f107 030c 	add.w	r3, r7, #12
 8000732:	4619      	mov	r1, r3
 8000734:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000738:	f001 fb82 	bl	8001e40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800073c:	2200      	movs	r2, #0
 800073e:	2105      	movs	r1, #5
 8000740:	2028      	movs	r0, #40	; 0x28
 8000742:	f001 fb53 	bl	8001dec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000746:	2028      	movs	r0, #40	; 0x28
 8000748:	f001 fb6c 	bl	8001e24 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800074c:	bf00      	nop
 800074e:	3720      	adds	r7, #32
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40021000 	.word	0x40021000
 8000758:	48000800 	.word	0x48000800
 800075c:	48000400 	.word	0x48000400

08000760 <ADC1_configuration>:

/* USER CODE BEGIN 4 */
void ADC1_configuration(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
	//NVIC configuration
	NVIC->IP[11] |= 0x70; //Priority 7
 8000764:	4b68      	ldr	r3, [pc, #416]	; (8000908 <ADC1_configuration+0x1a8>)
 8000766:	f893 330b 	ldrb.w	r3, [r3, #779]	; 0x30b
 800076a:	b2db      	uxtb	r3, r3
 800076c:	4a66      	ldr	r2, [pc, #408]	; (8000908 <ADC1_configuration+0x1a8>)
 800076e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000772:	b2db      	uxtb	r3, r3
 8000774:	f882 330b 	strb.w	r3, [r2, #779]	; 0x30b
	NVIC->ISER[0] |= (1<<11); //Enable DMA1 channel 1 interrupt
 8000778:	4b63      	ldr	r3, [pc, #396]	; (8000908 <ADC1_configuration+0x1a8>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a62      	ldr	r2, [pc, #392]	; (8000908 <ADC1_configuration+0x1a8>)
 800077e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000782:	6013      	str	r3, [r2, #0]
	NVIC->IP[18] |= 0x70; //Priority 7
 8000784:	4b60      	ldr	r3, [pc, #384]	; (8000908 <ADC1_configuration+0x1a8>)
 8000786:	f893 3312 	ldrb.w	r3, [r3, #786]	; 0x312
 800078a:	b2db      	uxtb	r3, r3
 800078c:	4a5e      	ldr	r2, [pc, #376]	; (8000908 <ADC1_configuration+0x1a8>)
 800078e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000792:	b2db      	uxtb	r3, r3
 8000794:	f882 3312 	strb.w	r3, [r2, #786]	; 0x312
	NVIC->ISER[0] |= (1<<18); //Enable ADC1 global interrupt
 8000798:	4b5b      	ldr	r3, [pc, #364]	; (8000908 <ADC1_configuration+0x1a8>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a5a      	ldr	r2, [pc, #360]	; (8000908 <ADC1_configuration+0x1a8>)
 800079e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007a2:	6013      	str	r3, [r2, #0]
	//DMA configuration for ADC1
	RCC->AHBENR |= RCC_AHBENR_DMA1EN; // Enable the DMA1 clock
 80007a4:	4b59      	ldr	r3, [pc, #356]	; (800090c <ADC1_configuration+0x1ac>)
 80007a6:	695b      	ldr	r3, [r3, #20]
 80007a8:	4a58      	ldr	r2, [pc, #352]	; (800090c <ADC1_configuration+0x1ac>)
 80007aa:	f043 0301 	orr.w	r3, r3, #1
 80007ae:	6153      	str	r3, [r2, #20]
	DMA1_Channel1->CCR &= ~DMA_CCR_EN;
 80007b0:	4b57      	ldr	r3, [pc, #348]	; (8000910 <ADC1_configuration+0x1b0>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a56      	ldr	r2, [pc, #344]	; (8000910 <ADC1_configuration+0x1b0>)
 80007b6:	f023 0301 	bic.w	r3, r3, #1
 80007ba:	6013      	str	r3, [r2, #0]

	DMA1_Channel1->CCR |= (1<<10); // Bits 11:10 MSIZE[1:0]: Memory size  01: 16-bits
 80007bc:	4b54      	ldr	r3, [pc, #336]	; (8000910 <ADC1_configuration+0x1b0>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a53      	ldr	r2, [pc, #332]	; (8000910 <ADC1_configuration+0x1b0>)
 80007c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007c6:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= (1<<8); // Bits 9:8 PSIZE[1:0]: Peripheral size  01: 16-bits
 80007c8:	4b51      	ldr	r3, [pc, #324]	; (8000910 <ADC1_configuration+0x1b0>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a50      	ldr	r2, [pc, #320]	; (8000910 <ADC1_configuration+0x1b0>)
 80007ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007d2:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= DMA_CCR_MINC;
 80007d4:	4b4e      	ldr	r3, [pc, #312]	; (8000910 <ADC1_configuration+0x1b0>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a4d      	ldr	r2, [pc, #308]	; (8000910 <ADC1_configuration+0x1b0>)
 80007da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007de:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= DMA_CCR_CIRC;
 80007e0:	4b4b      	ldr	r3, [pc, #300]	; (8000910 <ADC1_configuration+0x1b0>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a4a      	ldr	r2, [pc, #296]	; (8000910 <ADC1_configuration+0x1b0>)
 80007e6:	f043 0320 	orr.w	r3, r3, #32
 80007ea:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= DMA_CCR_TCIE;
 80007ec:	4b48      	ldr	r3, [pc, #288]	; (8000910 <ADC1_configuration+0x1b0>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a47      	ldr	r2, [pc, #284]	; (8000910 <ADC1_configuration+0x1b0>)
 80007f2:	f043 0302 	orr.w	r3, r3, #2
 80007f6:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR &= ~DMA_CCR_HTIE;
 80007f8:	4b45      	ldr	r3, [pc, #276]	; (8000910 <ADC1_configuration+0x1b0>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a44      	ldr	r2, [pc, #272]	; (8000910 <ADC1_configuration+0x1b0>)
 80007fe:	f023 0304 	bic.w	r3, r3, #4
 8000802:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR &= ~DMA_CCR_TEIE;
 8000804:	4b42      	ldr	r3, [pc, #264]	; (8000910 <ADC1_configuration+0x1b0>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a41      	ldr	r2, [pc, #260]	; (8000910 <ADC1_configuration+0x1b0>)
 800080a:	f023 0308 	bic.w	r3, r3, #8
 800080e:	6013      	str	r3, [r2, #0]

	DMA1_Channel1->CNDTR = 10;
 8000810:	4b3f      	ldr	r3, [pc, #252]	; (8000910 <ADC1_configuration+0x1b0>)
 8000812:	220a      	movs	r2, #10
 8000814:	605a      	str	r2, [r3, #4]
	DMA1_Channel1->CPAR = &(ADC1->DR);
 8000816:	4b3e      	ldr	r3, [pc, #248]	; (8000910 <ADC1_configuration+0x1b0>)
 8000818:	4a3e      	ldr	r2, [pc, #248]	; (8000914 <ADC1_configuration+0x1b4>)
 800081a:	609a      	str	r2, [r3, #8]
	DMA1_Channel1->CMAR = &batteryVoltage[0];
 800081c:	4b3c      	ldr	r3, [pc, #240]	; (8000910 <ADC1_configuration+0x1b0>)
 800081e:	4a3e      	ldr	r2, [pc, #248]	; (8000918 <ADC1_configuration+0x1b8>)
 8000820:	60da      	str	r2, [r3, #12]
//	ADC1->CR |= ADC_CR_ADEN;
//	while((ADC1->ISR & ADC_ISR_ADRDY) != ADC_ISR_ADRDY) __asm__ volatile("NOP");
//	ADC1->CR |= ADC_CR_ADSTART;
//	HAL_Delay(20);
//	DMA1_Channel1->CCR |= DMA_CCR_EN;
	__asm__ volatile("NOP");
 8000822:	bf00      	nop
	if(batteryVoltage[0] == 0) {
 8000824:	4b3c      	ldr	r3, [pc, #240]	; (8000918 <ADC1_configuration+0x1b8>)
 8000826:	881b      	ldrh	r3, [r3, #0]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d16a      	bne.n	8000902 <ADC1_configuration+0x1a2>
		if((ADC1->CR & ADC_CR_ADEN) == ADC_CR_ADEN) {
 800082c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000830:	689b      	ldr	r3, [r3, #8]
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	2b01      	cmp	r3, #1
 8000838:	d12d      	bne.n	8000896 <ADC1_configuration+0x136>
			DMA1_Channel1->CCR &= ~DMA_CCR_EN;
 800083a:	4b35      	ldr	r3, [pc, #212]	; (8000910 <ADC1_configuration+0x1b0>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4a34      	ldr	r2, [pc, #208]	; (8000910 <ADC1_configuration+0x1b0>)
 8000840:	f023 0301 	bic.w	r3, r3, #1
 8000844:	6013      	str	r3, [r2, #0]
			ADC1->CR |= ADC_CR_ADSTP;
 8000846:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800084a:	689b      	ldr	r3, [r3, #8]
 800084c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000850:	f043 0310 	orr.w	r3, r3, #16
 8000854:	6093      	str	r3, [r2, #8]
			while((ADC1->CR & ADC_CR_ADSTP) == ADC_CR_ADSTP) __asm__ volatile("NOP");
 8000856:	e000      	b.n	800085a <ADC1_configuration+0xfa>
 8000858:	bf00      	nop
 800085a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800085e:	689b      	ldr	r3, [r3, #8]
 8000860:	f003 0310 	and.w	r3, r3, #16
 8000864:	2b10      	cmp	r3, #16
 8000866:	d0f7      	beq.n	8000858 <ADC1_configuration+0xf8>
			HAL_Delay(5);
 8000868:	2005      	movs	r0, #5
 800086a:	f000 fd45 	bl	80012f8 <HAL_Delay>
			ADC1->CR |= ADC_CR_ADDIS;
 800086e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000872:	689b      	ldr	r3, [r3, #8]
 8000874:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000878:	f043 0302 	orr.w	r3, r3, #2
 800087c:	6093      	str	r3, [r2, #8]
			while((ADC1->CR & ADC_CR_ADDIS) == ADC_CR_ADDIS) __asm__ volatile("NOP");
 800087e:	e000      	b.n	8000882 <ADC1_configuration+0x122>
 8000880:	bf00      	nop
 8000882:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000886:	689b      	ldr	r3, [r3, #8]
 8000888:	f003 0302 	and.w	r3, r3, #2
 800088c:	2b02      	cmp	r3, #2
 800088e:	d0f7      	beq.n	8000880 <ADC1_configuration+0x120>
			HAL_Delay(20);
 8000890:	2014      	movs	r0, #20
 8000892:	f000 fd31 	bl	80012f8 <HAL_Delay>
		}
		MX_ADC1_Init();
 8000896:	f7ff fded 	bl	8000474 <MX_ADC1_Init>
		ADC1->CFGR |= ADC_CFGR_DMACFG;
 800089a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800089e:	68db      	ldr	r3, [r3, #12]
 80008a0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008a4:	f043 0302 	orr.w	r3, r3, #2
 80008a8:	60d3      	str	r3, [r2, #12]
		ADC1->CFGR |= ADC_CFGR_DMAEN;
 80008aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80008ae:	68db      	ldr	r3, [r3, #12]
 80008b0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008b4:	f043 0301 	orr.w	r3, r3, #1
 80008b8:	60d3      	str	r3, [r2, #12]
		ADC1->CR |= ADC_CR_ADEN;
 80008ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80008be:	689b      	ldr	r3, [r3, #8]
 80008c0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	6093      	str	r3, [r2, #8]
		while((ADC1->ISR & ADC_ISR_ADRDY) != ADC_ISR_ADRDY) __asm__ volatile("NOP");
 80008ca:	e000      	b.n	80008ce <ADC1_configuration+0x16e>
 80008cc:	bf00      	nop
 80008ce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f003 0301 	and.w	r3, r3, #1
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d1f7      	bne.n	80008cc <ADC1_configuration+0x16c>
		ADC1->CR |= ADC_CR_ADSTART;
 80008dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80008e0:	689b      	ldr	r3, [r3, #8]
 80008e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008e6:	f043 0304 	orr.w	r3, r3, #4
 80008ea:	6093      	str	r3, [r2, #8]
		HAL_Delay(20);
 80008ec:	2014      	movs	r0, #20
 80008ee:	f000 fd03 	bl	80012f8 <HAL_Delay>
		DMA1_Channel1->CCR |= DMA_CCR_EN;
 80008f2:	4b07      	ldr	r3, [pc, #28]	; (8000910 <ADC1_configuration+0x1b0>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a06      	ldr	r2, [pc, #24]	; (8000910 <ADC1_configuration+0x1b0>)
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	6013      	str	r3, [r2, #0]
		__asm__ volatile("NOP");
 80008fe:	bf00      	nop
	}
	return;
 8000900:	bf00      	nop
 8000902:	bf00      	nop
}
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	e000e100 	.word	0xe000e100
 800090c:	40021000 	.word	0x40021000
 8000910:	40020008 	.word	0x40020008
 8000914:	50000040 	.word	0x50000040
 8000918:	20000828 	.word	0x20000828

0800091c <TIM1_configuration>:

void TIM1_configuration(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
    // Enable the TIM1 clock
    RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8000920:	4b32      	ldr	r3, [pc, #200]	; (80009ec <TIM1_configuration+0xd0>)
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	4a31      	ldr	r2, [pc, #196]	; (80009ec <TIM1_configuration+0xd0>)
 8000926:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800092a:	6193      	str	r3, [r2, #24]

    // Configure GPIO pins for TIM1 PA9-CH2 and PA8-CH1
    GPIOA->MODER |= (1<<17);
 800092c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000936:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800093a:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (1<<19);
 800093c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000946:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800094a:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR |= (1<<17); //Pull-down
 800094c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000950:	68db      	ldr	r3, [r3, #12]
 8000952:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000956:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800095a:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR |= (1<<19); //Pull-down
 800095c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000960:	68db      	ldr	r3, [r3, #12]
 8000962:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000966:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800096a:	60d3      	str	r3, [r2, #12]
    GPIOA->AFR[1] |= (6); //AF6
 800096c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000972:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000976:	f043 0306 	orr.w	r3, r3, #6
 800097a:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOA->AFR[1] |= (6<<4); //AF6
 800097c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000982:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000986:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800098a:	6253      	str	r3, [r2, #36]	; 0x24

    // Configure TIM1
	TIM1->CR1 |= TIM_CR1_ARPE; //ARPE: Auto-reload preload enable
 800098c:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <TIM1_configuration+0xd4>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a17      	ldr	r2, [pc, #92]	; (80009f0 <TIM1_configuration+0xd4>)
 8000992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000996:	6013      	str	r3, [r2, #0]
	TIM1->SMCR |= (TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0); // Encoder mode 3
 8000998:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <TIM1_configuration+0xd4>)
 800099a:	689b      	ldr	r3, [r3, #8]
 800099c:	4a14      	ldr	r2, [pc, #80]	; (80009f0 <TIM1_configuration+0xd4>)
 800099e:	f043 0303 	orr.w	r3, r3, #3
 80009a2:	6093      	str	r3, [r2, #8]

	TIM1->CCMR1 |= (1<<0);
 80009a4:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <TIM1_configuration+0xd4>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	4a11      	ldr	r2, [pc, #68]	; (80009f0 <TIM1_configuration+0xd4>)
 80009aa:	f043 0301 	orr.w	r3, r3, #1
 80009ae:	6193      	str	r3, [r2, #24]
	TIM1->CCMR1 |= (1<<8);
 80009b0:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <TIM1_configuration+0xd4>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	4a0e      	ldr	r2, [pc, #56]	; (80009f0 <TIM1_configuration+0xd4>)
 80009b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ba:	6193      	str	r3, [r2, #24]
	TIM1->CCER |= (1<<0);
 80009bc:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <TIM1_configuration+0xd4>)
 80009be:	6a1b      	ldr	r3, [r3, #32]
 80009c0:	4a0b      	ldr	r2, [pc, #44]	; (80009f0 <TIM1_configuration+0xd4>)
 80009c2:	f043 0301 	orr.w	r3, r3, #1
 80009c6:	6213      	str	r3, [r2, #32]
	TIM1->CCER |= (1<<4);
 80009c8:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <TIM1_configuration+0xd4>)
 80009ca:	6a1b      	ldr	r3, [r3, #32]
 80009cc:	4a08      	ldr	r2, [pc, #32]	; (80009f0 <TIM1_configuration+0xd4>)
 80009ce:	f043 0310 	orr.w	r3, r3, #16
 80009d2:	6213      	str	r3, [r2, #32]
//
//    // Set priority for the TIM1 interrupt
//    NVIC_SetPriority(TIM1_CC_IRQHandler, 5); // Adjust priority as needed

    // Enable the TIM1 counter
    TIM1->CR1 |= TIM_CR1_CEN;
 80009d4:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <TIM1_configuration+0xd4>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a05      	ldr	r2, [pc, #20]	; (80009f0 <TIM1_configuration+0xd4>)
 80009da:	f043 0301 	orr.w	r3, r3, #1
 80009de:	6013      	str	r3, [r2, #0]
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	40021000 	.word	0x40021000
 80009f0:	40012c00 	.word	0x40012c00

080009f4 <TIM2_configuration>:

void TIM2_configuration(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
    // Enable the TIM2 clock
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80009f8:	4b39      	ldr	r3, [pc, #228]	; (8000ae0 <TIM2_configuration+0xec>)
 80009fa:	69db      	ldr	r3, [r3, #28]
 80009fc:	4a38      	ldr	r2, [pc, #224]	; (8000ae0 <TIM2_configuration+0xec>)
 80009fe:	f043 0301 	orr.w	r3, r3, #1
 8000a02:	61d3      	str	r3, [r2, #28]

    // Configure GPIO pins for TIM2 PA1-CH2 and PA0-CH1
    GPIOA->MODER |= (1<<1);
 8000a04:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a0e:	f043 0302 	orr.w	r3, r3, #2
 8000a12:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (1<<3);
 8000a14:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a1e:	f043 0308 	orr.w	r3, r3, #8
 8000a22:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR |= (1<<1); //Pull-down
 8000a24:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a28:	68db      	ldr	r3, [r3, #12]
 8000a2a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a2e:	f043 0302 	orr.w	r3, r3, #2
 8000a32:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR |= (1<<3); //Pull-down
 8000a34:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a38:	68db      	ldr	r3, [r3, #12]
 8000a3a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a3e:	f043 0308 	orr.w	r3, r3, #8
 8000a42:	60d3      	str	r3, [r2, #12]
    GPIOA->AFR[0] |= (1); //AF1
 8000a44:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a48:	6a1b      	ldr	r3, [r3, #32]
 8000a4a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a4e:	f043 0301 	orr.w	r3, r3, #1
 8000a52:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (1<<4); //AF1
 8000a54:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a58:	6a1b      	ldr	r3, [r3, #32]
 8000a5a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a5e:	f043 0310 	orr.w	r3, r3, #16
 8000a62:	6213      	str	r3, [r2, #32]

    // Configure TIM2
	TIM2->CR1 |= TIM_CR1_ARPE; //ARPE: Auto-reload preload enable
 8000a64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a72:	6013      	str	r3, [r2, #0]
	TIM2->SMCR |= (TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0); // Encoder mode 3
 8000a74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a78:	689b      	ldr	r3, [r3, #8]
 8000a7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a7e:	f043 0303 	orr.w	r3, r3, #3
 8000a82:	6093      	str	r3, [r2, #8]

	TIM2->CCMR1 |= (1<<0);
 8000a84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a88:	699b      	ldr	r3, [r3, #24]
 8000a8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a8e:	f043 0301 	orr.w	r3, r3, #1
 8000a92:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= (1<<8);
 8000a94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a98:	699b      	ldr	r3, [r3, #24]
 8000a9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aa2:	6193      	str	r3, [r2, #24]
	TIM2->CCER |= (1<<0);
 8000aa4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000aa8:	6a1b      	ldr	r3, [r3, #32]
 8000aaa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aae:	f043 0301 	orr.w	r3, r3, #1
 8000ab2:	6213      	str	r3, [r2, #32]
	TIM2->CCER |= (1<<4);
 8000ab4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ab8:	6a1b      	ldr	r3, [r3, #32]
 8000aba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000abe:	f043 0310 	orr.w	r3, r3, #16
 8000ac2:	6213      	str	r3, [r2, #32]


    // Enable the TIM2 counter
    TIM2->CR1 |= TIM_CR1_CEN;
 8000ac4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ace:	f043 0301 	orr.w	r3, r3, #1
 8000ad2:	6013      	str	r3, [r2, #0]
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	40021000 	.word	0x40021000

08000ae4 <psMeasure>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_psMeasure */
void psMeasure(void const * argument)
{
 8000ae4:	b590      	push	{r4, r7, lr}
 8000ae6:	b08d      	sub	sp, #52	; 0x34
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	char measureResult[30];
	memset(measureResult, ' ', sizeof(measureResult));
 8000aec:	f107 030c 	add.w	r3, r7, #12
 8000af0:	221e      	movs	r2, #30
 8000af2:	2120      	movs	r1, #32
 8000af4:	4618      	mov	r0, r3
 8000af6:	f006 fd41 	bl	800757c <memset>
  /* Infinite loop */
  for(;;)
  {
    osDelay(8);
 8000afa:	2008      	movs	r0, #8
 8000afc:	f004 f804 	bl	8004b08 <osDelay>
    uint16_t avrBatVoltage = 0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	85fb      	strh	r3, [r7, #46]	; 0x2e
    for(uint8_t i = 0; i < (sizeof(batteryVoltage)/sizeof(batteryVoltage[0])); i++) {
 8000b04:	2300      	movs	r3, #0
 8000b06:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8000b0a:	e00c      	b.n	8000b26 <psMeasure+0x42>
    	avrBatVoltage += batteryVoltage[i];
 8000b0c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000b10:	4a45      	ldr	r2, [pc, #276]	; (8000c28 <psMeasure+0x144>)
 8000b12:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000b16:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000b18:	4413      	add	r3, r2
 8000b1a:	85fb      	strh	r3, [r7, #46]	; 0x2e
    for(uint8_t i = 0; i < (sizeof(batteryVoltage)/sizeof(batteryVoltage[0])); i++) {
 8000b1c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000b20:	3301      	adds	r3, #1
 8000b22:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8000b26:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000b2a:	2b09      	cmp	r3, #9
 8000b2c:	d9ee      	bls.n	8000b0c <psMeasure+0x28>
    }
    avrBatVoltage = avrBatVoltage / (sizeof(batteryVoltage)/sizeof(batteryVoltage[0]));
 8000b2e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000b30:	4a3e      	ldr	r2, [pc, #248]	; (8000c2c <psMeasure+0x148>)
 8000b32:	fba2 2303 	umull	r2, r3, r2, r3
 8000b36:	08db      	lsrs	r3, r3, #3
 8000b38:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if(avrBatVoltage > BATMAXV) {
 8000b3a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000b3c:	f640 0298 	movw	r2, #2200	; 0x898
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d92a      	bls.n	8000b9a <psMeasure+0xb6>
    	memset(measureResult, ' ', sizeof(measureResult));
 8000b44:	f107 030c 	add.w	r3, r7, #12
 8000b48:	221e      	movs	r2, #30
 8000b4a:	2120      	movs	r1, #32
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f006 fd15 	bl	800757c <memset>
    	strcpy(measureResult, "Voltage > MAX");
 8000b52:	f107 030c 	add.w	r3, r7, #12
 8000b56:	4a36      	ldr	r2, [pc, #216]	; (8000c30 <psMeasure+0x14c>)
 8000b58:	461c      	mov	r4, r3
 8000b5a:	4613      	mov	r3, r2
 8000b5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b5e:	c407      	stmia	r4!, {r0, r1, r2}
 8000b60:	8023      	strh	r3, [r4, #0]
    	xEventGroupClearBits(pc13EventGroup, 0xFFFFFF);
 8000b62:	4b34      	ldr	r3, [pc, #208]	; (8000c34 <psMeasure+0x150>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f003 fffa 	bl	8004b64 <xEventGroupClearBits>
    	xEventGroupSetBits(pc13EventGroup, 0x1);
 8000b70:	4b30      	ldr	r3, [pc, #192]	; (8000c34 <psMeasure+0x150>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2101      	movs	r1, #1
 8000b76:	4618      	mov	r0, r3
 8000b78:	f004 f82c 	bl	8004bd4 <xEventGroupSetBits>
    	xEventGroupClearBits(pc14EventGroup, 0xFFFFFF);
 8000b7c:	4b2e      	ldr	r3, [pc, #184]	; (8000c38 <psMeasure+0x154>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8000b84:	4618      	mov	r0, r3
 8000b86:	f003 ffed 	bl	8004b64 <xEventGroupClearBits>
    	xEventGroupSetBits(pc14EventGroup, 0x1);
 8000b8a:	4b2b      	ldr	r3, [pc, #172]	; (8000c38 <psMeasure+0x154>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	2101      	movs	r1, #1
 8000b90:	4618      	mov	r0, r3
 8000b92:	f004 f81f 	bl	8004bd4 <xEventGroupSetBits>
    	__asm__ volatile("NOP");
 8000b96:	bf00      	nop
 8000b98:	e7af      	b.n	8000afa <psMeasure+0x16>
    } else if(avrBatVoltage < BATMINV) {
 8000b9a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000b9c:	f640 023d 	movw	r2, #2109	; 0x83d
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d82a      	bhi.n	8000bfa <psMeasure+0x116>
    	memset(measureResult, ' ', sizeof(measureResult));
 8000ba4:	f107 030c 	add.w	r3, r7, #12
 8000ba8:	221e      	movs	r2, #30
 8000baa:	2120      	movs	r1, #32
 8000bac:	4618      	mov	r0, r3
 8000bae:	f006 fce5 	bl	800757c <memset>
    	strcpy(measureResult, "Voltage < MIN");
 8000bb2:	f107 030c 	add.w	r3, r7, #12
 8000bb6:	4a21      	ldr	r2, [pc, #132]	; (8000c3c <psMeasure+0x158>)
 8000bb8:	461c      	mov	r4, r3
 8000bba:	4613      	mov	r3, r2
 8000bbc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bbe:	c407      	stmia	r4!, {r0, r1, r2}
 8000bc0:	8023      	strh	r3, [r4, #0]
    	xEventGroupClearBits(pc13EventGroup, 0xFFFFFF);
 8000bc2:	4b1c      	ldr	r3, [pc, #112]	; (8000c34 <psMeasure+0x150>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f003 ffca 	bl	8004b64 <xEventGroupClearBits>
    	xEventGroupSetBits(pc13EventGroup, 0x2);
 8000bd0:	4b18      	ldr	r3, [pc, #96]	; (8000c34 <psMeasure+0x150>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2102      	movs	r1, #2
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f003 fffc 	bl	8004bd4 <xEventGroupSetBits>
    	xEventGroupClearBits(pc14EventGroup, 0xFFFFFF);
 8000bdc:	4b16      	ldr	r3, [pc, #88]	; (8000c38 <psMeasure+0x154>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8000be4:	4618      	mov	r0, r3
 8000be6:	f003 ffbd 	bl	8004b64 <xEventGroupClearBits>
    	xEventGroupSetBits(pc14EventGroup, 0x2);
 8000bea:	4b13      	ldr	r3, [pc, #76]	; (8000c38 <psMeasure+0x154>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2102      	movs	r1, #2
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f003 ffef 	bl	8004bd4 <xEventGroupSetBits>
    	__asm__ volatile("NOP");
 8000bf6:	bf00      	nop
 8000bf8:	e77f      	b.n	8000afa <psMeasure+0x16>
    } else {
    	memset(measureResult, ' ', sizeof(measureResult));
 8000bfa:	f107 030c 	add.w	r3, r7, #12
 8000bfe:	221e      	movs	r2, #30
 8000c00:	2120      	movs	r1, #32
 8000c02:	4618      	mov	r0, r3
 8000c04:	f006 fcba 	bl	800757c <memset>
    	xEventGroupClearBits(pc13EventGroup, 0xFFFFFF);
 8000c08:	4b0a      	ldr	r3, [pc, #40]	; (8000c34 <psMeasure+0x150>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8000c10:	4618      	mov	r0, r3
 8000c12:	f003 ffa7 	bl	8004b64 <xEventGroupClearBits>
    	xEventGroupClearBits(pc14EventGroup, 0xFFFFFF);
 8000c16:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <psMeasure+0x154>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f003 ffa0 	bl	8004b64 <xEventGroupClearBits>
    	__asm__ volatile("NOP");
 8000c24:	bf00      	nop
  {
 8000c26:	e768      	b.n	8000afa <psMeasure+0x16>
 8000c28:	20000828 	.word	0x20000828
 8000c2c:	cccccccd 	.word	0xcccccccd
 8000c30:	080076b0 	.word	0x080076b0
 8000c34:	2000083c 	.word	0x2000083c
 8000c38:	20000840 	.word	0x20000840
 8000c3c:	080076c0 	.word	0x080076c0

08000c40 <pc13LedCntrl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pc13LedCntrl */
void pc13LedCntrl(void const * argument)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN pc13LedCntrl */
	EventBits_t eventBits;
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c48:	2001      	movs	r0, #1
 8000c4a:	f003 ff5d 	bl	8004b08 <osDelay>
    eventBits = xEventGroupGetBits(pc13EventGroup);
 8000c4e:	4b18      	ldr	r3, [pc, #96]	; (8000cb0 <pc13LedCntrl+0x70>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	2100      	movs	r1, #0
 8000c54:	4618      	mov	r0, r3
 8000c56:	f003 ff85 	bl	8004b64 <xEventGroupClearBits>
 8000c5a:	60f8      	str	r0, [r7, #12]
    switch (eventBits) {
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d003      	beq.n	8000c6a <pc13LedCntrl+0x2a>
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	2b02      	cmp	r3, #2
 8000c66:	d00b      	beq.n	8000c80 <pc13LedCntrl+0x40>
 8000c68:	e015      	b.n	8000c96 <pc13LedCntrl+0x56>
		case 0x1:
			osDelay(100);
 8000c6a:	2064      	movs	r0, #100	; 0x64
 8000c6c:	f003 ff4c 	bl	8004b08 <osDelay>
			GPIOC->ODR ^= GPIO_ODR_13;
 8000c70:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <pc13LedCntrl+0x74>)
 8000c72:	695b      	ldr	r3, [r3, #20]
 8000c74:	4a0f      	ldr	r2, [pc, #60]	; (8000cb4 <pc13LedCntrl+0x74>)
 8000c76:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000c7a:	6153      	str	r3, [r2, #20]
			__asm__ volatile("NOP");
 8000c7c:	bf00      	nop
			break;
 8000c7e:	e015      	b.n	8000cac <pc13LedCntrl+0x6c>
		case 0x2:
			osDelay(200);
 8000c80:	20c8      	movs	r0, #200	; 0xc8
 8000c82:	f003 ff41 	bl	8004b08 <osDelay>
			GPIOC->ODR ^= GPIO_ODR_13;
 8000c86:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <pc13LedCntrl+0x74>)
 8000c88:	695b      	ldr	r3, [r3, #20]
 8000c8a:	4a0a      	ldr	r2, [pc, #40]	; (8000cb4 <pc13LedCntrl+0x74>)
 8000c8c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000c90:	6153      	str	r3, [r2, #20]
			__asm__ volatile("NOP");
 8000c92:	bf00      	nop
			break;
 8000c94:	e00a      	b.n	8000cac <pc13LedCntrl+0x6c>
		default:
			GPIOC->ODR &= ~GPIO_ODR_13;
 8000c96:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <pc13LedCntrl+0x74>)
 8000c98:	695b      	ldr	r3, [r3, #20]
 8000c9a:	4a06      	ldr	r2, [pc, #24]	; (8000cb4 <pc13LedCntrl+0x74>)
 8000c9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000ca0:	6153      	str	r3, [r2, #20]
			osDelay(5);
 8000ca2:	2005      	movs	r0, #5
 8000ca4:	f003 ff30 	bl	8004b08 <osDelay>
			__asm__ volatile("NOP");
 8000ca8:	bf00      	nop
			break;
 8000caa:	bf00      	nop
    osDelay(1);
 8000cac:	e7cc      	b.n	8000c48 <pc13LedCntrl+0x8>
 8000cae:	bf00      	nop
 8000cb0:	2000083c 	.word	0x2000083c
 8000cb4:	48000800 	.word	0x48000800

08000cb8 <pc14LedCntrl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pc14LedCntrl */
void pc14LedCntrl(void const * argument)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN pc14LedCntrl */
	EventBits_t eventBits;
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	f003 ff21 	bl	8004b08 <osDelay>
    eventBits = xEventGroupGetBits(pc14EventGroup);
 8000cc6:	4b18      	ldr	r3, [pc, #96]	; (8000d28 <pc14LedCntrl+0x70>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2100      	movs	r1, #0
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f003 ff49 	bl	8004b64 <xEventGroupClearBits>
 8000cd2:	60f8      	str	r0, [r7, #12]
    switch (eventBits) {
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d003      	beq.n	8000ce2 <pc14LedCntrl+0x2a>
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	2b02      	cmp	r3, #2
 8000cde:	d00b      	beq.n	8000cf8 <pc14LedCntrl+0x40>
 8000ce0:	e015      	b.n	8000d0e <pc14LedCntrl+0x56>
		case 0x1:
			osDelay(100);
 8000ce2:	2064      	movs	r0, #100	; 0x64
 8000ce4:	f003 ff10 	bl	8004b08 <osDelay>
			GPIOC->ODR ^= GPIO_ODR_14;
 8000ce8:	4b10      	ldr	r3, [pc, #64]	; (8000d2c <pc14LedCntrl+0x74>)
 8000cea:	695b      	ldr	r3, [r3, #20]
 8000cec:	4a0f      	ldr	r2, [pc, #60]	; (8000d2c <pc14LedCntrl+0x74>)
 8000cee:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 8000cf2:	6153      	str	r3, [r2, #20]
			__asm__ volatile("NOP");
 8000cf4:	bf00      	nop
			break;
 8000cf6:	e015      	b.n	8000d24 <pc14LedCntrl+0x6c>
		case 0x2:
			osDelay(200);
 8000cf8:	20c8      	movs	r0, #200	; 0xc8
 8000cfa:	f003 ff05 	bl	8004b08 <osDelay>
			GPIOC->ODR ^= GPIO_ODR_14;
 8000cfe:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <pc14LedCntrl+0x74>)
 8000d00:	695b      	ldr	r3, [r3, #20]
 8000d02:	4a0a      	ldr	r2, [pc, #40]	; (8000d2c <pc14LedCntrl+0x74>)
 8000d04:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 8000d08:	6153      	str	r3, [r2, #20]
			__asm__ volatile("NOP");
 8000d0a:	bf00      	nop
			break;
 8000d0c:	e00a      	b.n	8000d24 <pc14LedCntrl+0x6c>
		default:
			GPIOC->ODR &= ~GPIO_ODR_14;
 8000d0e:	4b07      	ldr	r3, [pc, #28]	; (8000d2c <pc14LedCntrl+0x74>)
 8000d10:	695b      	ldr	r3, [r3, #20]
 8000d12:	4a06      	ldr	r2, [pc, #24]	; (8000d2c <pc14LedCntrl+0x74>)
 8000d14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000d18:	6153      	str	r3, [r2, #20]
			osDelay(5);
 8000d1a:	2005      	movs	r0, #5
 8000d1c:	f003 fef4 	bl	8004b08 <osDelay>
			__asm__ volatile("NOP");
 8000d20:	bf00      	nop
			break;
 8000d22:	bf00      	nop
    osDelay(1);
 8000d24:	e7cc      	b.n	8000cc0 <pc14LedCntrl+0x8>
 8000d26:	bf00      	nop
 8000d28:	20000840 	.word	0x20000840
 8000d2c:	48000800 	.word	0x48000800

08000d30 <espCommunication>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_espCommunication */
void espCommunication(void const * argument)
{
 8000d30:	b5b0      	push	{r4, r5, r7, lr}
 8000d32:	b0b0      	sub	sp, #192	; 0xc0
 8000d34:	af02      	add	r7, sp, #8
 8000d36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN espCommunication */
	vTaskDelay( pdMS_TO_TICKS( 100 ) );
 8000d38:	2064      	movs	r0, #100	; 0x64
 8000d3a:	f004 fef7 	bl	8005b2c <vTaskDelay>
	  GPIOB->ODR |= (1<<1);
 8000d3e:	4b47      	ldr	r3, [pc, #284]	; (8000e5c <espCommunication+0x12c>)
 8000d40:	695b      	ldr	r3, [r3, #20]
 8000d42:	4a46      	ldr	r2, [pc, #280]	; (8000e5c <espCommunication+0x12c>)
 8000d44:	f043 0302 	orr.w	r3, r3, #2
 8000d48:	6153      	str	r3, [r2, #20]
	  GPIOB->ODR |= (1<<2);
 8000d4a:	4b44      	ldr	r3, [pc, #272]	; (8000e5c <espCommunication+0x12c>)
 8000d4c:	695b      	ldr	r3, [r3, #20]
 8000d4e:	4a43      	ldr	r2, [pc, #268]	; (8000e5c <espCommunication+0x12c>)
 8000d50:	f043 0304 	orr.w	r3, r3, #4
 8000d54:	6153      	str	r3, [r2, #20]
	  char txBuffer[80] = {'A', 'T', '\r', '\n'};
 8000d56:	4a42      	ldr	r2, [pc, #264]	; (8000e60 <espCommunication+0x130>)
 8000d58:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d5c:	6810      	ldr	r0, [r2, #0]
 8000d5e:	6018      	str	r0, [r3, #0]
 8000d60:	7912      	ldrb	r2, [r2, #4]
 8000d62:	711a      	strb	r2, [r3, #4]
 8000d64:	f107 0369 	add.w	r3, r7, #105	; 0x69
 8000d68:	224b      	movs	r2, #75	; 0x4b
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f006 fc05 	bl	800757c <memset>
	  char rxBuffer[80];
	  char controlAnsw[] = "AT\r\r\n\r\nOK\r\n";
 8000d72:	4a3c      	ldr	r2, [pc, #240]	; (8000e64 <espCommunication+0x134>)
 8000d74:	f107 0308 	add.w	r3, r7, #8
 8000d78:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d7a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	  while(strcmp(rxBuffer, controlAnsw) != 0) {
 8000d7e:	e022      	b.n	8000dc6 <espCommunication+0x96>
		  for(uint8_t i = 0; i < sizeof(rxBuffer); i++) {
 8000d80:	2300      	movs	r3, #0
 8000d82:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 8000d86:	e00b      	b.n	8000da0 <espCommunication+0x70>
			  rxBuffer[i] = 0;
 8000d88:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8000d8c:	33b8      	adds	r3, #184	; 0xb8
 8000d8e:	443b      	add	r3, r7
 8000d90:	2200      	movs	r2, #0
 8000d92:	f803 2ca4 	strb.w	r2, [r3, #-164]
		  for(uint8_t i = 0; i < sizeof(rxBuffer); i++) {
 8000d96:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 8000da0:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8000da4:	2b4f      	cmp	r3, #79	; 0x4f
 8000da6:	d9ef      	bls.n	8000d88 <espCommunication+0x58>
		  }
		  HAL_UART_Transmit(&huart3, txBuffer, sizeof(txBuffer), 250);
 8000da8:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8000dac:	23fa      	movs	r3, #250	; 0xfa
 8000dae:	2250      	movs	r2, #80	; 0x50
 8000db0:	482d      	ldr	r0, [pc, #180]	; (8000e68 <espCommunication+0x138>)
 8000db2:	f003 f99f 	bl	80040f4 <HAL_UART_Transmit>
		  HAL_UART_Receive(&huart3, rxBuffer, sizeof(rxBuffer), 250);
 8000db6:	f107 0114 	add.w	r1, r7, #20
 8000dba:	23fa      	movs	r3, #250	; 0xfa
 8000dbc:	2250      	movs	r2, #80	; 0x50
 8000dbe:	482a      	ldr	r0, [pc, #168]	; (8000e68 <espCommunication+0x138>)
 8000dc0:	f003 fa22 	bl	8004208 <HAL_UART_Receive>
		  __asm__ volatile("NOP");
 8000dc4:	bf00      	nop
	  while(strcmp(rxBuffer, controlAnsw) != 0) {
 8000dc6:	f107 0208 	add.w	r2, r7, #8
 8000dca:	f107 0314 	add.w	r3, r7, #20
 8000dce:	4611      	mov	r1, r2
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff f9fd 	bl	80001d0 <strcmp>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d1d1      	bne.n	8000d80 <espCommunication+0x50>
	  }
	  sendATCommand(&huart3, "ATE0\r\n", 6 , rxBuffer, sizeof(rxBuffer), 250);
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	22fa      	movs	r2, #250	; 0xfa
 8000de2:	9201      	str	r2, [sp, #4]
 8000de4:	2250      	movs	r2, #80	; 0x50
 8000de6:	9200      	str	r2, [sp, #0]
 8000de8:	2206      	movs	r2, #6
 8000dea:	4920      	ldr	r1, [pc, #128]	; (8000e6c <espCommunication+0x13c>)
 8000dec:	481e      	ldr	r0, [pc, #120]	; (8000e68 <espCommunication+0x138>)
 8000dee:	f7ff f9f9 	bl	80001e4 <sendATCommand>
	  sendATCommand(&huart3, "AT+CWMODE=1\r\n", 13 , rxBuffer, sizeof(rxBuffer), 250);
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	22fa      	movs	r2, #250	; 0xfa
 8000df8:	9201      	str	r2, [sp, #4]
 8000dfa:	2250      	movs	r2, #80	; 0x50
 8000dfc:	9200      	str	r2, [sp, #0]
 8000dfe:	220d      	movs	r2, #13
 8000e00:	491b      	ldr	r1, [pc, #108]	; (8000e70 <espCommunication+0x140>)
 8000e02:	4819      	ldr	r0, [pc, #100]	; (8000e68 <espCommunication+0x138>)
 8000e04:	f7ff f9ee 	bl	80001e4 <sendATCommand>
	  memset(txBuffer, '\0', sizeof(txBuffer));
 8000e08:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e0c:	2250      	movs	r2, #80	; 0x50
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4618      	mov	r0, r3
 8000e12:	f006 fbb3 	bl	800757c <memset>
	  strcpy(txBuffer, "AT+CWJAP_CUR=\"RedmiGiGidra\",\"DimaDimaDimon\"\r\n");
 8000e16:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e1a:	4a16      	ldr	r2, [pc, #88]	; (8000e74 <espCommunication+0x144>)
 8000e1c:	461c      	mov	r4, r3
 8000e1e:	4615      	mov	r5, r2
 8000e20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e28:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000e2c:	c407      	stmia	r4!, {r0, r1, r2}
 8000e2e:	8023      	strh	r3, [r4, #0]
	  sendATCommand(&huart3, txBuffer, sizeof(txBuffer) , rxBuffer, sizeof(rxBuffer), 10000);
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8000e38:	f242 7210 	movw	r2, #10000	; 0x2710
 8000e3c:	9201      	str	r2, [sp, #4]
 8000e3e:	2250      	movs	r2, #80	; 0x50
 8000e40:	9200      	str	r2, [sp, #0]
 8000e42:	2250      	movs	r2, #80	; 0x50
 8000e44:	4808      	ldr	r0, [pc, #32]	; (8000e68 <espCommunication+0x138>)
 8000e46:	f7ff f9cd 	bl	80001e4 <sendATCommand>
	  vTaskDelay( pdMS_TO_TICKS( 2000 ) );
 8000e4a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e4e:	f004 fe6d 	bl	8005b2c <vTaskDelay>
	  __asm__ volatile("NOP");
 8000e52:	bf00      	nop

  /* Infinite loop */
  for(;;)
  {
	  vTaskDelay( pdMS_TO_TICKS( 100 ) );
 8000e54:	2064      	movs	r0, #100	; 0x64
 8000e56:	f004 fe69 	bl	8005b2c <vTaskDelay>
 8000e5a:	e7fb      	b.n	8000e54 <espCommunication+0x124>
 8000e5c:	48000400 	.word	0x48000400
 8000e60:	08007718 	.word	0x08007718
 8000e64:	08007720 	.word	0x08007720
 8000e68:	20000790 	.word	0x20000790
 8000e6c:	080076d0 	.word	0x080076d0
 8000e70:	080076d8 	.word	0x080076d8
 8000e74:	080076e8 	.word	0x080076e8

08000e78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a04      	ldr	r2, [pc, #16]	; (8000e98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d101      	bne.n	8000e8e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e8a:	f000 fa15 	bl	80012b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40001000 	.word	0x40001000

08000e9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea0:	b672      	cpsid	i
}
 8000ea2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <Error_Handler+0x8>
	...

08000ea8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eae:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <HAL_MspInit+0x4c>)
 8000eb0:	699b      	ldr	r3, [r3, #24]
 8000eb2:	4a10      	ldr	r2, [pc, #64]	; (8000ef4 <HAL_MspInit+0x4c>)
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	6193      	str	r3, [r2, #24]
 8000eba:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <HAL_MspInit+0x4c>)
 8000ebc:	699b      	ldr	r3, [r3, #24]
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	607b      	str	r3, [r7, #4]
 8000ec4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec6:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <HAL_MspInit+0x4c>)
 8000ec8:	69db      	ldr	r3, [r3, #28]
 8000eca:	4a0a      	ldr	r2, [pc, #40]	; (8000ef4 <HAL_MspInit+0x4c>)
 8000ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ed0:	61d3      	str	r3, [r2, #28]
 8000ed2:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <HAL_MspInit+0x4c>)
 8000ed4:	69db      	ldr	r3, [r3, #28]
 8000ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eda:	603b      	str	r3, [r7, #0]
 8000edc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	210f      	movs	r1, #15
 8000ee2:	f06f 0001 	mvn.w	r0, #1
 8000ee6:	f000 ff81 	bl	8001dec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40021000 	.word	0x40021000

08000ef8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08a      	sub	sp, #40	; 0x28
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f18:	d124      	bne.n	8000f64 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f1a:	4b14      	ldr	r3, [pc, #80]	; (8000f6c <HAL_ADC_MspInit+0x74>)
 8000f1c:	695b      	ldr	r3, [r3, #20]
 8000f1e:	4a13      	ldr	r2, [pc, #76]	; (8000f6c <HAL_ADC_MspInit+0x74>)
 8000f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f24:	6153      	str	r3, [r2, #20]
 8000f26:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <HAL_ADC_MspInit+0x74>)
 8000f28:	695b      	ldr	r3, [r3, #20]
 8000f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f32:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <HAL_ADC_MspInit+0x74>)
 8000f34:	695b      	ldr	r3, [r3, #20]
 8000f36:	4a0d      	ldr	r2, [pc, #52]	; (8000f6c <HAL_ADC_MspInit+0x74>)
 8000f38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f3c:	6153      	str	r3, [r2, #20]
 8000f3e:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <HAL_ADC_MspInit+0x74>)
 8000f40:	695b      	ldr	r3, [r3, #20]
 8000f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f4a:	2304      	movs	r3, #4
 8000f4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f56:	f107 0314 	add.w	r3, r7, #20
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f60:	f000 ff6e 	bl	8001e40 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f64:	bf00      	nop
 8000f66:	3728      	adds	r7, #40	; 0x28
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40021000 	.word	0x40021000

08000f70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08a      	sub	sp, #40	; 0x28
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a17      	ldr	r2, [pc, #92]	; (8000fec <HAL_SPI_MspInit+0x7c>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d128      	bne.n	8000fe4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f92:	4b17      	ldr	r3, [pc, #92]	; (8000ff0 <HAL_SPI_MspInit+0x80>)
 8000f94:	69db      	ldr	r3, [r3, #28]
 8000f96:	4a16      	ldr	r2, [pc, #88]	; (8000ff0 <HAL_SPI_MspInit+0x80>)
 8000f98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f9c:	61d3      	str	r3, [r2, #28]
 8000f9e:	4b14      	ldr	r3, [pc, #80]	; (8000ff0 <HAL_SPI_MspInit+0x80>)
 8000fa0:	69db      	ldr	r3, [r3, #28]
 8000fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fa6:	613b      	str	r3, [r7, #16]
 8000fa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000faa:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <HAL_SPI_MspInit+0x80>)
 8000fac:	695b      	ldr	r3, [r3, #20]
 8000fae:	4a10      	ldr	r2, [pc, #64]	; (8000ff0 <HAL_SPI_MspInit+0x80>)
 8000fb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fb4:	6153      	str	r3, [r2, #20]
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <HAL_SPI_MspInit+0x80>)
 8000fb8:	695b      	ldr	r3, [r3, #20]
 8000fba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000fc2:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000fc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fd4:	2305      	movs	r3, #5
 8000fd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <HAL_SPI_MspInit+0x84>)
 8000fe0:	f000 ff2e 	bl	8001e40 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000fe4:	bf00      	nop
 8000fe6:	3728      	adds	r7, #40	; 0x28
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40003800 	.word	0x40003800
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	48000400 	.word	0x48000400

08000ff8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	; 0x28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a17      	ldr	r2, [pc, #92]	; (8001074 <HAL_UART_MspInit+0x7c>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d128      	bne.n	800106c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800101a:	4b17      	ldr	r3, [pc, #92]	; (8001078 <HAL_UART_MspInit+0x80>)
 800101c:	69db      	ldr	r3, [r3, #28]
 800101e:	4a16      	ldr	r2, [pc, #88]	; (8001078 <HAL_UART_MspInit+0x80>)
 8001020:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001024:	61d3      	str	r3, [r2, #28]
 8001026:	4b14      	ldr	r3, [pc, #80]	; (8001078 <HAL_UART_MspInit+0x80>)
 8001028:	69db      	ldr	r3, [r3, #28]
 800102a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800102e:	613b      	str	r3, [r7, #16]
 8001030:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001032:	4b11      	ldr	r3, [pc, #68]	; (8001078 <HAL_UART_MspInit+0x80>)
 8001034:	695b      	ldr	r3, [r3, #20]
 8001036:	4a10      	ldr	r2, [pc, #64]	; (8001078 <HAL_UART_MspInit+0x80>)
 8001038:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800103c:	6153      	str	r3, [r2, #20]
 800103e:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <HAL_UART_MspInit+0x80>)
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800104a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800104e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001050:	2302      	movs	r3, #2
 8001052:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001058:	2303      	movs	r3, #3
 800105a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800105c:	2307      	movs	r3, #7
 800105e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	4619      	mov	r1, r3
 8001066:	4805      	ldr	r0, [pc, #20]	; (800107c <HAL_UART_MspInit+0x84>)
 8001068:	f000 feea 	bl	8001e40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800106c:	bf00      	nop
 800106e:	3728      	adds	r7, #40	; 0x28
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40004800 	.word	0x40004800
 8001078:	40021000 	.word	0x40021000
 800107c:	48000400 	.word	0x48000400

08001080 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08e      	sub	sp, #56	; 0x38
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001088:	2300      	movs	r3, #0
 800108a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800108c:	2300      	movs	r3, #0
 800108e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001090:	4b33      	ldr	r3, [pc, #204]	; (8001160 <HAL_InitTick+0xe0>)
 8001092:	69db      	ldr	r3, [r3, #28]
 8001094:	4a32      	ldr	r2, [pc, #200]	; (8001160 <HAL_InitTick+0xe0>)
 8001096:	f043 0310 	orr.w	r3, r3, #16
 800109a:	61d3      	str	r3, [r2, #28]
 800109c:	4b30      	ldr	r3, [pc, #192]	; (8001160 <HAL_InitTick+0xe0>)
 800109e:	69db      	ldr	r3, [r3, #28]
 80010a0:	f003 0310 	and.w	r3, r3, #16
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010a8:	f107 0210 	add.w	r2, r7, #16
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	4611      	mov	r1, r2
 80010b2:	4618      	mov	r0, r3
 80010b4:	f002 fae6 	bl	8003684 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80010b8:	6a3b      	ldr	r3, [r7, #32]
 80010ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80010bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d103      	bne.n	80010ca <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80010c2:	f002 fa9b 	bl	80035fc <HAL_RCC_GetPCLK1Freq>
 80010c6:	6378      	str	r0, [r7, #52]	; 0x34
 80010c8:	e004      	b.n	80010d4 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80010ca:	f002 fa97 	bl	80035fc <HAL_RCC_GetPCLK1Freq>
 80010ce:	4603      	mov	r3, r0
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010d6:	4a23      	ldr	r2, [pc, #140]	; (8001164 <HAL_InitTick+0xe4>)
 80010d8:	fba2 2303 	umull	r2, r3, r2, r3
 80010dc:	0c9b      	lsrs	r3, r3, #18
 80010de:	3b01      	subs	r3, #1
 80010e0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80010e2:	4b21      	ldr	r3, [pc, #132]	; (8001168 <HAL_InitTick+0xe8>)
 80010e4:	4a21      	ldr	r2, [pc, #132]	; (800116c <HAL_InitTick+0xec>)
 80010e6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80010e8:	4b1f      	ldr	r3, [pc, #124]	; (8001168 <HAL_InitTick+0xe8>)
 80010ea:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010ee:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80010f0:	4a1d      	ldr	r2, [pc, #116]	; (8001168 <HAL_InitTick+0xe8>)
 80010f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010f4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80010f6:	4b1c      	ldr	r3, [pc, #112]	; (8001168 <HAL_InitTick+0xe8>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010fc:	4b1a      	ldr	r3, [pc, #104]	; (8001168 <HAL_InitTick+0xe8>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001102:	4b19      	ldr	r3, [pc, #100]	; (8001168 <HAL_InitTick+0xe8>)
 8001104:	2200      	movs	r2, #0
 8001106:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001108:	4817      	ldr	r0, [pc, #92]	; (8001168 <HAL_InitTick+0xe8>)
 800110a:	f002 fd1c 	bl	8003b46 <HAL_TIM_Base_Init>
 800110e:	4603      	mov	r3, r0
 8001110:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001114:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001118:	2b00      	cmp	r3, #0
 800111a:	d11b      	bne.n	8001154 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800111c:	4812      	ldr	r0, [pc, #72]	; (8001168 <HAL_InitTick+0xe8>)
 800111e:	f002 fd73 	bl	8003c08 <HAL_TIM_Base_Start_IT>
 8001122:	4603      	mov	r3, r0
 8001124:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001128:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800112c:	2b00      	cmp	r3, #0
 800112e:	d111      	bne.n	8001154 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001130:	2036      	movs	r0, #54	; 0x36
 8001132:	f000 fe77 	bl	8001e24 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2b0f      	cmp	r3, #15
 800113a:	d808      	bhi.n	800114e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800113c:	2200      	movs	r2, #0
 800113e:	6879      	ldr	r1, [r7, #4]
 8001140:	2036      	movs	r0, #54	; 0x36
 8001142:	f000 fe53 	bl	8001dec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001146:	4a0a      	ldr	r2, [pc, #40]	; (8001170 <HAL_InitTick+0xf0>)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6013      	str	r3, [r2, #0]
 800114c:	e002      	b.n	8001154 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001154:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001158:	4618      	mov	r0, r3
 800115a:	3738      	adds	r7, #56	; 0x38
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40021000 	.word	0x40021000
 8001164:	431bde83 	.word	0x431bde83
 8001168:	20000844 	.word	0x20000844
 800116c:	40001000 	.word	0x40001000
 8001170:	20000004 	.word	0x20000004

08001174 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001178:	e7fe      	b.n	8001178 <NMI_Handler+0x4>

0800117a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800117a:	b480      	push	{r7}
 800117c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800117e:	e7fe      	b.n	800117e <HardFault_Handler+0x4>

08001180 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001184:	e7fe      	b.n	8001184 <MemManage_Handler+0x4>

08001186 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001186:	b480      	push	{r7}
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800118a:	e7fe      	b.n	800118a <BusFault_Handler+0x4>

0800118c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001190:	e7fe      	b.n	8001190 <UsageFault_Handler+0x4>

08001192 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80011a4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80011a8:	f000 ffd4 	bl	8002154 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80011ac:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80011b0:	f000 ffd0 	bl	8002154 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80011bc:	4802      	ldr	r0, [pc, #8]	; (80011c8 <TIM6_DAC_IRQHandler+0x10>)
 80011be:	f002 fd77 	bl	8003cb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000844 	.word	0x20000844

080011cc <DMA1_Channel1_IRQHandler>:

/* USER CODE BEGIN 1 */
void DMA1_Channel1_IRQHandler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
	__asm__ volatile("NOP");
 80011d0:	bf00      	nop
	DMA1->IFCR |= DMA_IFCR_CGIF1;
 80011d2:	4b06      	ldr	r3, [pc, #24]	; (80011ec <DMA1_Channel1_IRQHandler+0x20>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	4a05      	ldr	r2, [pc, #20]	; (80011ec <DMA1_Channel1_IRQHandler+0x20>)
 80011d8:	f043 0301 	orr.w	r3, r3, #1
 80011dc:	6053      	str	r3, [r2, #4]
	__asm__ volatile("NOP");
 80011de:	bf00      	nop
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	40020000 	.word	0x40020000

080011f0 <ADC1_IRQHandler>:

void ADC1_IRQHandler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
	__asm__ volatile("NOP");
 80011f4:	bf00      	nop
	ADC1->ISR |= ADC_ISR_AWD1;
 80011f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001200:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001204:	6013      	str	r3, [r2, #0]
	__asm__ volatile("NOP");
 8001206:	bf00      	nop
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
	...

08001214 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <SystemInit+0x20>)
 800121a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800121e:	4a05      	ldr	r2, [pc, #20]	; (8001234 <SystemInit+0x20>)
 8001220:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001224:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001238:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001270 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800123c:	f7ff ffea 	bl	8001214 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001240:	480c      	ldr	r0, [pc, #48]	; (8001274 <LoopForever+0x6>)
  ldr r1, =_edata
 8001242:	490d      	ldr	r1, [pc, #52]	; (8001278 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001244:	4a0d      	ldr	r2, [pc, #52]	; (800127c <LoopForever+0xe>)
  movs r3, #0
 8001246:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001248:	e002      	b.n	8001250 <LoopCopyDataInit>

0800124a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800124a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800124c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800124e:	3304      	adds	r3, #4

08001250 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001250:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001252:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001254:	d3f9      	bcc.n	800124a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001256:	4a0a      	ldr	r2, [pc, #40]	; (8001280 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001258:	4c0a      	ldr	r4, [pc, #40]	; (8001284 <LoopForever+0x16>)
  movs r3, #0
 800125a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800125c:	e001      	b.n	8001262 <LoopFillZerobss>

0800125e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800125e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001260:	3204      	adds	r2, #4

08001262 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001262:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001264:	d3fb      	bcc.n	800125e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001266:	f006 f991 	bl	800758c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800126a:	f7ff f82b 	bl	80002c4 <main>

0800126e <LoopForever>:

LoopForever:
    b LoopForever
 800126e:	e7fe      	b.n	800126e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001270:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001274:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001278:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800127c:	08007784 	.word	0x08007784
  ldr r2, =_sbss
 8001280:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001284:	20002344 	.word	0x20002344

08001288 <COMP2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001288:	e7fe      	b.n	8001288 <COMP2_IRQHandler>
	...

0800128c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001290:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <HAL_Init+0x28>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a07      	ldr	r2, [pc, #28]	; (80012b4 <HAL_Init+0x28>)
 8001296:	f043 0310 	orr.w	r3, r3, #16
 800129a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800129c:	2003      	movs	r0, #3
 800129e:	f000 fd9a 	bl	8001dd6 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012a2:	2004      	movs	r0, #4
 80012a4:	f7ff feec 	bl	8001080 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012a8:	f7ff fdfe 	bl	8000ea8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40022000 	.word	0x40022000

080012b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012bc:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <HAL_IncTick+0x20>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	461a      	mov	r2, r3
 80012c2:	4b06      	ldr	r3, [pc, #24]	; (80012dc <HAL_IncTick+0x24>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4413      	add	r3, r2
 80012c8:	4a04      	ldr	r2, [pc, #16]	; (80012dc <HAL_IncTick+0x24>)
 80012ca:	6013      	str	r3, [r2, #0]
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	20000008 	.word	0x20000008
 80012dc:	20000890 	.word	0x20000890

080012e0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  return uwTick;  
 80012e4:	4b03      	ldr	r3, [pc, #12]	; (80012f4 <HAL_GetTick+0x14>)
 80012e6:	681b      	ldr	r3, [r3, #0]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	20000890 	.word	0x20000890

080012f8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001300:	f7ff ffee 	bl	80012e0 <HAL_GetTick>
 8001304:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001310:	d005      	beq.n	800131e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001312:	4b0a      	ldr	r3, [pc, #40]	; (800133c <HAL_Delay+0x44>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	461a      	mov	r2, r3
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	4413      	add	r3, r2
 800131c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800131e:	bf00      	nop
 8001320:	f7ff ffde 	bl	80012e0 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	68fa      	ldr	r2, [r7, #12]
 800132c:	429a      	cmp	r2, r3
 800132e:	d8f7      	bhi.n	8001320 <HAL_Delay+0x28>
  {
  }
}
 8001330:	bf00      	nop
 8001332:	bf00      	nop
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20000008 	.word	0x20000008

08001340 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b09a      	sub	sp, #104	; 0x68
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001348:	2300      	movs	r3, #0
 800134a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800134e:	2300      	movs	r3, #0
 8001350:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001352:	2300      	movs	r3, #0
 8001354:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d101      	bne.n	8001360 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e169      	b.n	8001634 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	691b      	ldr	r3, [r3, #16]
 8001364:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	f003 0310 	and.w	r3, r3, #16
 800136e:	2b00      	cmp	r3, #0
 8001370:	d176      	bne.n	8001460 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	2b00      	cmp	r3, #0
 8001378:	d152      	bne.n	8001420 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2200      	movs	r2, #0
 8001390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f7ff fdaf 	bl	8000ef8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d13b      	bne.n	8001420 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f000 fc01 	bl	8001bb0 <ADC_Disable>
 80013ae:	4603      	mov	r3, r0
 80013b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b8:	f003 0310 	and.w	r3, r3, #16
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d12f      	bne.n	8001420 <HAL_ADC_Init+0xe0>
 80013c0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d12b      	bne.n	8001420 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013cc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80013d0:	f023 0302 	bic.w	r3, r3, #2
 80013d4:	f043 0202 	orr.w	r2, r3, #2
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	689a      	ldr	r2, [r3, #8]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013ea:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	689a      	ldr	r2, [r3, #8]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80013fa:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013fc:	4b8f      	ldr	r3, [pc, #572]	; (800163c <HAL_ADC_Init+0x2fc>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a8f      	ldr	r2, [pc, #572]	; (8001640 <HAL_ADC_Init+0x300>)
 8001402:	fba2 2303 	umull	r2, r3, r2, r3
 8001406:	0c9a      	lsrs	r2, r3, #18
 8001408:	4613      	mov	r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	4413      	add	r3, r2
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001412:	e002      	b.n	800141a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	3b01      	subs	r3, #1
 8001418:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d1f9      	bne.n	8001414 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d007      	beq.n	800143e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001438:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800143c:	d110      	bne.n	8001460 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	f023 0312 	bic.w	r3, r3, #18
 8001446:	f043 0210 	orr.w	r2, r3, #16
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001452:	f043 0201 	orr.w	r2, r3, #1
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001464:	f003 0310 	and.w	r3, r3, #16
 8001468:	2b00      	cmp	r3, #0
 800146a:	f040 80d6 	bne.w	800161a <HAL_ADC_Init+0x2da>
 800146e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001472:	2b00      	cmp	r3, #0
 8001474:	f040 80d1 	bne.w	800161a <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001482:	2b00      	cmp	r3, #0
 8001484:	f040 80c9 	bne.w	800161a <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001490:	f043 0202 	orr.w	r2, r3, #2
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001498:	4b6a      	ldr	r3, [pc, #424]	; (8001644 <HAL_ADC_Init+0x304>)
 800149a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800149c:	2300      	movs	r3, #0
 800149e:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f003 0303 	and.w	r3, r3, #3
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d108      	bne.n	80014c0 <HAL_ADC_Init+0x180>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d101      	bne.n	80014c0 <HAL_ADC_Init+0x180>
 80014bc:	2301      	movs	r3, #1
 80014be:	e000      	b.n	80014c2 <HAL_ADC_Init+0x182>
 80014c0:	2300      	movs	r3, #0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d11c      	bne.n	8001500 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80014c6:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d010      	beq.n	80014ee <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f003 0303 	and.w	r3, r3, #3
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d107      	bne.n	80014e8 <HAL_ADC_Init+0x1a8>
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d101      	bne.n	80014e8 <HAL_ADC_Init+0x1a8>
 80014e4:	2301      	movs	r3, #1
 80014e6:	e000      	b.n	80014ea <HAL_ADC_Init+0x1aa>
 80014e8:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d108      	bne.n	8001500 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80014ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	431a      	orrs	r2, r3
 80014fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014fe:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	7e5b      	ldrb	r3, [r3, #25]
 8001504:	035b      	lsls	r3, r3, #13
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800150a:	2a01      	cmp	r2, #1
 800150c:	d002      	beq.n	8001514 <HAL_ADC_Init+0x1d4>
 800150e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001512:	e000      	b.n	8001516 <HAL_ADC_Init+0x1d6>
 8001514:	2200      	movs	r2, #0
 8001516:	431a      	orrs	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	431a      	orrs	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	4313      	orrs	r3, r2
 8001524:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001526:	4313      	orrs	r3, r2
 8001528:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001530:	2b01      	cmp	r3, #1
 8001532:	d11b      	bne.n	800156c <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	7e5b      	ldrb	r3, [r3, #25]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d109      	bne.n	8001550 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001540:	3b01      	subs	r3, #1
 8001542:	045a      	lsls	r2, r3, #17
 8001544:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001546:	4313      	orrs	r3, r2
 8001548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800154c:	663b      	str	r3, [r7, #96]	; 0x60
 800154e:	e00d      	b.n	800156c <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001554:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001558:	f043 0220 	orr.w	r2, r3, #32
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001564:	f043 0201 	orr.w	r2, r3, #1
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001570:	2b01      	cmp	r3, #1
 8001572:	d007      	beq.n	8001584 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800157c:	4313      	orrs	r3, r2
 800157e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001580:	4313      	orrs	r3, r2
 8001582:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f003 030c 	and.w	r3, r3, #12
 800158e:	2b00      	cmp	r3, #0
 8001590:	d114      	bne.n	80015bc <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	6812      	ldr	r2, [r2, #0]
 800159c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80015a0:	f023 0302 	bic.w	r3, r3, #2
 80015a4:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	7e1b      	ldrb	r3, [r3, #24]
 80015aa:	039a      	lsls	r2, r3, #14
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	4313      	orrs	r3, r2
 80015b6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80015b8:	4313      	orrs	r3, r2
 80015ba:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	68da      	ldr	r2, [r3, #12]
 80015c2:	4b21      	ldr	r3, [pc, #132]	; (8001648 <HAL_ADC_Init+0x308>)
 80015c4:	4013      	ands	r3, r2
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	6812      	ldr	r2, [r2, #0]
 80015ca:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80015cc:	430b      	orrs	r3, r1
 80015ce:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	691b      	ldr	r3, [r3, #16]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d10c      	bne.n	80015f2 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	f023 010f 	bic.w	r1, r3, #15
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	69db      	ldr	r3, [r3, #28]
 80015e6:	1e5a      	subs	r2, r3, #1
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	430a      	orrs	r2, r1
 80015ee:	631a      	str	r2, [r3, #48]	; 0x30
 80015f0:	e007      	b.n	8001602 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f022 020f 	bic.w	r2, r2, #15
 8001600:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160c:	f023 0303 	bic.w	r3, r3, #3
 8001610:	f043 0201 	orr.w	r2, r3, #1
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	641a      	str	r2, [r3, #64]	; 0x40
 8001618:	e00a      	b.n	8001630 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161e:	f023 0312 	bic.w	r3, r3, #18
 8001622:	f043 0210 	orr.w	r2, r3, #16
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800162a:	2301      	movs	r3, #1
 800162c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001630:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001634:	4618      	mov	r0, r3
 8001636:	3768      	adds	r7, #104	; 0x68
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	20000000 	.word	0x20000000
 8001640:	431bde83 	.word	0x431bde83
 8001644:	50000300 	.word	0x50000300
 8001648:	fff0c007 	.word	0xfff0c007

0800164c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800164c:	b480      	push	{r7}
 800164e:	b09b      	sub	sp, #108	; 0x6c
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001656:	2300      	movs	r3, #0
 8001658:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800165c:	2300      	movs	r3, #0
 800165e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001666:	2b01      	cmp	r3, #1
 8001668:	d101      	bne.n	800166e <HAL_ADC_ConfigChannel+0x22>
 800166a:	2302      	movs	r3, #2
 800166c:	e295      	b.n	8001b9a <HAL_ADC_ConfigChannel+0x54e>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2201      	movs	r2, #1
 8001672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	f003 0304 	and.w	r3, r3, #4
 8001680:	2b00      	cmp	r3, #0
 8001682:	f040 8279 	bne.w	8001b78 <HAL_ADC_ConfigChannel+0x52c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b04      	cmp	r3, #4
 800168c:	d81c      	bhi.n	80016c8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	4613      	mov	r3, r2
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	4413      	add	r3, r2
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	461a      	mov	r2, r3
 80016a2:	231f      	movs	r3, #31
 80016a4:	4093      	lsls	r3, r2
 80016a6:	43db      	mvns	r3, r3
 80016a8:	4019      	ands	r1, r3
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	6818      	ldr	r0, [r3, #0]
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685a      	ldr	r2, [r3, #4]
 80016b2:	4613      	mov	r3, r2
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	4413      	add	r3, r2
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	fa00 f203 	lsl.w	r2, r0, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	430a      	orrs	r2, r1
 80016c4:	631a      	str	r2, [r3, #48]	; 0x30
 80016c6:	e063      	b.n	8001790 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	2b09      	cmp	r3, #9
 80016ce:	d81e      	bhi.n	800170e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685a      	ldr	r2, [r3, #4]
 80016da:	4613      	mov	r3, r2
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	4413      	add	r3, r2
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	3b1e      	subs	r3, #30
 80016e4:	221f      	movs	r2, #31
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43db      	mvns	r3, r3
 80016ec:	4019      	ands	r1, r3
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	6818      	ldr	r0, [r3, #0]
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685a      	ldr	r2, [r3, #4]
 80016f6:	4613      	mov	r3, r2
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	4413      	add	r3, r2
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	3b1e      	subs	r3, #30
 8001700:	fa00 f203 	lsl.w	r2, r0, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	430a      	orrs	r2, r1
 800170a:	635a      	str	r2, [r3, #52]	; 0x34
 800170c:	e040      	b.n	8001790 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	2b0e      	cmp	r3, #14
 8001714:	d81e      	bhi.n	8001754 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685a      	ldr	r2, [r3, #4]
 8001720:	4613      	mov	r3, r2
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	4413      	add	r3, r2
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	3b3c      	subs	r3, #60	; 0x3c
 800172a:	221f      	movs	r2, #31
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	43db      	mvns	r3, r3
 8001732:	4019      	ands	r1, r3
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	6818      	ldr	r0, [r3, #0]
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685a      	ldr	r2, [r3, #4]
 800173c:	4613      	mov	r3, r2
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	4413      	add	r3, r2
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	3b3c      	subs	r3, #60	; 0x3c
 8001746:	fa00 f203 	lsl.w	r2, r0, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	430a      	orrs	r2, r1
 8001750:	639a      	str	r2, [r3, #56]	; 0x38
 8001752:	e01d      	b.n	8001790 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685a      	ldr	r2, [r3, #4]
 800175e:	4613      	mov	r3, r2
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	4413      	add	r3, r2
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	3b5a      	subs	r3, #90	; 0x5a
 8001768:	221f      	movs	r2, #31
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	43db      	mvns	r3, r3
 8001770:	4019      	ands	r1, r3
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	6818      	ldr	r0, [r3, #0]
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685a      	ldr	r2, [r3, #4]
 800177a:	4613      	mov	r3, r2
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	4413      	add	r3, r2
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	3b5a      	subs	r3, #90	; 0x5a
 8001784:	fa00 f203 	lsl.w	r2, r0, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	430a      	orrs	r2, r1
 800178e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f003 030c 	and.w	r3, r3, #12
 800179a:	2b00      	cmp	r3, #0
 800179c:	f040 80e5 	bne.w	800196a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2b09      	cmp	r3, #9
 80017a6:	d91c      	bls.n	80017e2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	6999      	ldr	r1, [r3, #24]
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	4613      	mov	r3, r2
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	4413      	add	r3, r2
 80017b8:	3b1e      	subs	r3, #30
 80017ba:	2207      	movs	r2, #7
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	43db      	mvns	r3, r3
 80017c2:	4019      	ands	r1, r3
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	6898      	ldr	r0, [r3, #8]
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	4613      	mov	r3, r2
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	4413      	add	r3, r2
 80017d2:	3b1e      	subs	r3, #30
 80017d4:	fa00 f203 	lsl.w	r2, r0, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	430a      	orrs	r2, r1
 80017de:	619a      	str	r2, [r3, #24]
 80017e0:	e019      	b.n	8001816 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	6959      	ldr	r1, [r3, #20]
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	4613      	mov	r3, r2
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	4413      	add	r3, r2
 80017f2:	2207      	movs	r2, #7
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	43db      	mvns	r3, r3
 80017fa:	4019      	ands	r1, r3
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	6898      	ldr	r0, [r3, #8]
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	4613      	mov	r3, r2
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	4413      	add	r3, r2
 800180a:	fa00 f203 	lsl.w	r2, r0, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	430a      	orrs	r2, r1
 8001814:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	695a      	ldr	r2, [r3, #20]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	08db      	lsrs	r3, r3, #3
 8001822:	f003 0303 	and.w	r3, r3, #3
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	3b01      	subs	r3, #1
 8001834:	2b03      	cmp	r3, #3
 8001836:	d84f      	bhi.n	80018d8 <HAL_ADC_ConfigChannel+0x28c>
 8001838:	a201      	add	r2, pc, #4	; (adr r2, 8001840 <HAL_ADC_ConfigChannel+0x1f4>)
 800183a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800183e:	bf00      	nop
 8001840:	08001851 	.word	0x08001851
 8001844:	08001873 	.word	0x08001873
 8001848:	08001895 	.word	0x08001895
 800184c:	080018b7 	.word	0x080018b7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001856:	4b97      	ldr	r3, [pc, #604]	; (8001ab4 <HAL_ADC_ConfigChannel+0x468>)
 8001858:	4013      	ands	r3, r2
 800185a:	683a      	ldr	r2, [r7, #0]
 800185c:	6812      	ldr	r2, [r2, #0]
 800185e:	0691      	lsls	r1, r2, #26
 8001860:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001862:	430a      	orrs	r2, r1
 8001864:	431a      	orrs	r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800186e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001870:	e07b      	b.n	800196a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001878:	4b8e      	ldr	r3, [pc, #568]	; (8001ab4 <HAL_ADC_ConfigChannel+0x468>)
 800187a:	4013      	ands	r3, r2
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	6812      	ldr	r2, [r2, #0]
 8001880:	0691      	lsls	r1, r2, #26
 8001882:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001884:	430a      	orrs	r2, r1
 8001886:	431a      	orrs	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001890:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001892:	e06a      	b.n	800196a <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800189a:	4b86      	ldr	r3, [pc, #536]	; (8001ab4 <HAL_ADC_ConfigChannel+0x468>)
 800189c:	4013      	ands	r3, r2
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	6812      	ldr	r2, [r2, #0]
 80018a2:	0691      	lsls	r1, r2, #26
 80018a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018a6:	430a      	orrs	r2, r1
 80018a8:	431a      	orrs	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80018b2:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80018b4:	e059      	b.n	800196a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80018bc:	4b7d      	ldr	r3, [pc, #500]	; (8001ab4 <HAL_ADC_ConfigChannel+0x468>)
 80018be:	4013      	ands	r3, r2
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	6812      	ldr	r2, [r2, #0]
 80018c4:	0691      	lsls	r1, r2, #26
 80018c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018c8:	430a      	orrs	r2, r1
 80018ca:	431a      	orrs	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80018d4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80018d6:	e048      	b.n	800196a <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	069b      	lsls	r3, r3, #26
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d107      	bne.n	80018fc <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018fa:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001902:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	069b      	lsls	r3, r3, #26
 800190c:	429a      	cmp	r2, r3
 800190e:	d107      	bne.n	8001920 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800191e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001926:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	069b      	lsls	r3, r3, #26
 8001930:	429a      	cmp	r2, r3
 8001932:	d107      	bne.n	8001944 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001942:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800194a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	069b      	lsls	r3, r3, #26
 8001954:	429a      	cmp	r2, r3
 8001956:	d107      	bne.n	8001968 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001966:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001968:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f003 0303 	and.w	r3, r3, #3
 8001974:	2b01      	cmp	r3, #1
 8001976:	d108      	bne.n	800198a <HAL_ADC_ConfigChannel+0x33e>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	2b01      	cmp	r3, #1
 8001984:	d101      	bne.n	800198a <HAL_ADC_ConfigChannel+0x33e>
 8001986:	2301      	movs	r3, #1
 8001988:	e000      	b.n	800198c <HAL_ADC_ConfigChannel+0x340>
 800198a:	2300      	movs	r3, #0
 800198c:	2b00      	cmp	r3, #0
 800198e:	f040 80fe 	bne.w	8001b8e <HAL_ADC_ConfigChannel+0x542>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d00f      	beq.n	80019ba <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2201      	movs	r2, #1
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	43da      	mvns	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	400a      	ands	r2, r1
 80019b4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80019b8:	e049      	b.n	8001a4e <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2201      	movs	r2, #1
 80019c8:	409a      	lsls	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	430a      	orrs	r2, r1
 80019d0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2b09      	cmp	r3, #9
 80019da:	d91c      	bls.n	8001a16 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6999      	ldr	r1, [r3, #24]
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	4613      	mov	r3, r2
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	4413      	add	r3, r2
 80019ec:	3b1b      	subs	r3, #27
 80019ee:	2207      	movs	r2, #7
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	4019      	ands	r1, r3
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	6898      	ldr	r0, [r3, #8]
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	4613      	mov	r3, r2
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	4413      	add	r3, r2
 8001a06:	3b1b      	subs	r3, #27
 8001a08:	fa00 f203 	lsl.w	r2, r0, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	430a      	orrs	r2, r1
 8001a12:	619a      	str	r2, [r3, #24]
 8001a14:	e01b      	b.n	8001a4e <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	6959      	ldr	r1, [r3, #20]
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	1c5a      	adds	r2, r3, #1
 8001a22:	4613      	mov	r3, r2
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	4413      	add	r3, r2
 8001a28:	2207      	movs	r2, #7
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	4019      	ands	r1, r3
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	6898      	ldr	r0, [r3, #8]
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	1c5a      	adds	r2, r3, #1
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	4413      	add	r3, r2
 8001a42:	fa00 f203 	lsl.w	r2, r0, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a4e:	4b1a      	ldr	r3, [pc, #104]	; (8001ab8 <HAL_ADC_ConfigChannel+0x46c>)
 8001a50:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2b10      	cmp	r3, #16
 8001a58:	d105      	bne.n	8001a66 <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001a5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d014      	beq.n	8001a90 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001a6a:	2b11      	cmp	r3, #17
 8001a6c:	d105      	bne.n	8001a7a <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001a6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d00a      	beq.n	8001a90 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001a7e:	2b12      	cmp	r3, #18
 8001a80:	f040 8085 	bne.w	8001b8e <HAL_ADC_ConfigChannel+0x542>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001a84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d17e      	bne.n	8001b8e <HAL_ADC_ConfigChannel+0x542>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001a90:	2300      	movs	r3, #0
 8001a92:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f003 0303 	and.w	r3, r3, #3
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d10c      	bne.n	8001abc <HAL_ADC_ConfigChannel+0x470>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d105      	bne.n	8001abc <HAL_ADC_ConfigChannel+0x470>
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e004      	b.n	8001abe <HAL_ADC_ConfigChannel+0x472>
 8001ab4:	83fff000 	.word	0x83fff000
 8001ab8:	50000300 	.word	0x50000300
 8001abc:	2300      	movs	r3, #0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d150      	bne.n	8001b64 <HAL_ADC_ConfigChannel+0x518>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001ac2:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d010      	beq.n	8001aea <HAL_ADC_ConfigChannel+0x49e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f003 0303 	and.w	r3, r3, #3
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d107      	bne.n	8001ae4 <HAL_ADC_ConfigChannel+0x498>
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0301 	and.w	r3, r3, #1
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d101      	bne.n	8001ae4 <HAL_ADC_ConfigChannel+0x498>
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e000      	b.n	8001ae6 <HAL_ADC_ConfigChannel+0x49a>
 8001ae4:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d13c      	bne.n	8001b64 <HAL_ADC_ConfigChannel+0x518>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2b10      	cmp	r3, #16
 8001af0:	d11d      	bne.n	8001b2e <HAL_ADC_ConfigChannel+0x4e2>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001afa:	d118      	bne.n	8001b2e <HAL_ADC_ConfigChannel+0x4e2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001afc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001b04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b06:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b08:	4b27      	ldr	r3, [pc, #156]	; (8001ba8 <HAL_ADC_ConfigChannel+0x55c>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a27      	ldr	r2, [pc, #156]	; (8001bac <HAL_ADC_ConfigChannel+0x560>)
 8001b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b12:	0c9a      	lsrs	r2, r3, #18
 8001b14:	4613      	mov	r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	4413      	add	r3, r2
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b1e:	e002      	b.n	8001b26 <HAL_ADC_ConfigChannel+0x4da>
          {
            wait_loop_index--;
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	3b01      	subs	r3, #1
 8001b24:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1f9      	bne.n	8001b20 <HAL_ADC_ConfigChannel+0x4d4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b2c:	e02e      	b.n	8001b8c <HAL_ADC_ConfigChannel+0x540>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2b11      	cmp	r3, #17
 8001b34:	d10b      	bne.n	8001b4e <HAL_ADC_ConfigChannel+0x502>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b3e:	d106      	bne.n	8001b4e <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001b40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001b48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b4a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b4c:	e01e      	b.n	8001b8c <HAL_ADC_ConfigChannel+0x540>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2b12      	cmp	r3, #18
 8001b54:	d11a      	bne.n	8001b8c <HAL_ADC_ConfigChannel+0x540>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001b56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001b5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b60:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b62:	e013      	b.n	8001b8c <HAL_ADC_ConfigChannel+0x540>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b68:	f043 0220 	orr.w	r2, r3, #32
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001b76:	e00a      	b.n	8001b8e <HAL_ADC_ConfigChannel+0x542>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7c:	f043 0220 	orr.w	r2, r3, #32
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001b8a:	e000      	b.n	8001b8e <HAL_ADC_ConfigChannel+0x542>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b8c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001b96:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	376c      	adds	r7, #108	; 0x6c
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	20000000 	.word	0x20000000
 8001bac:	431bde83 	.word	0x431bde83

08001bb0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f003 0303 	and.w	r3, r3, #3
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d108      	bne.n	8001bdc <ADC_Disable+0x2c>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d101      	bne.n	8001bdc <ADC_Disable+0x2c>
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e000      	b.n	8001bde <ADC_Disable+0x2e>
 8001bdc:	2300      	movs	r3, #0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d047      	beq.n	8001c72 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f003 030d 	and.w	r3, r3, #13
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d10f      	bne.n	8001c10 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	689a      	ldr	r2, [r3, #8]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f042 0202 	orr.w	r2, r2, #2
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2203      	movs	r2, #3
 8001c06:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001c08:	f7ff fb6a 	bl	80012e0 <HAL_GetTick>
 8001c0c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001c0e:	e029      	b.n	8001c64 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c14:	f043 0210 	orr.w	r2, r3, #16
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c20:	f043 0201 	orr.w	r2, r3, #1
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e023      	b.n	8001c74 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001c2c:	f7ff fb58 	bl	80012e0 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d914      	bls.n	8001c64 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f003 0301 	and.w	r3, r3, #1
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d10d      	bne.n	8001c64 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4c:	f043 0210 	orr.w	r2, r3, #16
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c58:	f043 0201 	orr.w	r2, r3, #1
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e007      	b.n	8001c74 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d0dc      	beq.n	8001c2c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c8c:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c92:	68ba      	ldr	r2, [r7, #8]
 8001c94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c98:	4013      	ands	r3, r2
 8001c9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ca4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cae:	4a04      	ldr	r2, [pc, #16]	; (8001cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	60d3      	str	r3, [r2, #12]
}
 8001cb4:	bf00      	nop
 8001cb6:	3714      	adds	r7, #20
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	e000ed00 	.word	0xe000ed00

08001cc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cc8:	4b04      	ldr	r3, [pc, #16]	; (8001cdc <__NVIC_GetPriorityGrouping+0x18>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	0a1b      	lsrs	r3, r3, #8
 8001cce:	f003 0307 	and.w	r3, r3, #7
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	db0b      	blt.n	8001d0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cf2:	79fb      	ldrb	r3, [r7, #7]
 8001cf4:	f003 021f 	and.w	r2, r3, #31
 8001cf8:	4907      	ldr	r1, [pc, #28]	; (8001d18 <__NVIC_EnableIRQ+0x38>)
 8001cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfe:	095b      	lsrs	r3, r3, #5
 8001d00:	2001      	movs	r0, #1
 8001d02:	fa00 f202 	lsl.w	r2, r0, r2
 8001d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d0a:	bf00      	nop
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	e000e100 	.word	0xe000e100

08001d1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	6039      	str	r1, [r7, #0]
 8001d26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	db0a      	blt.n	8001d46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	b2da      	uxtb	r2, r3
 8001d34:	490c      	ldr	r1, [pc, #48]	; (8001d68 <__NVIC_SetPriority+0x4c>)
 8001d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3a:	0112      	lsls	r2, r2, #4
 8001d3c:	b2d2      	uxtb	r2, r2
 8001d3e:	440b      	add	r3, r1
 8001d40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d44:	e00a      	b.n	8001d5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	4908      	ldr	r1, [pc, #32]	; (8001d6c <__NVIC_SetPriority+0x50>)
 8001d4c:	79fb      	ldrb	r3, [r7, #7]
 8001d4e:	f003 030f 	and.w	r3, r3, #15
 8001d52:	3b04      	subs	r3, #4
 8001d54:	0112      	lsls	r2, r2, #4
 8001d56:	b2d2      	uxtb	r2, r2
 8001d58:	440b      	add	r3, r1
 8001d5a:	761a      	strb	r2, [r3, #24]
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	e000e100 	.word	0xe000e100
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b089      	sub	sp, #36	; 0x24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	f1c3 0307 	rsb	r3, r3, #7
 8001d8a:	2b04      	cmp	r3, #4
 8001d8c:	bf28      	it	cs
 8001d8e:	2304      	movcs	r3, #4
 8001d90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	3304      	adds	r3, #4
 8001d96:	2b06      	cmp	r3, #6
 8001d98:	d902      	bls.n	8001da0 <NVIC_EncodePriority+0x30>
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	3b03      	subs	r3, #3
 8001d9e:	e000      	b.n	8001da2 <NVIC_EncodePriority+0x32>
 8001da0:	2300      	movs	r3, #0
 8001da2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da4:	f04f 32ff 	mov.w	r2, #4294967295
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43da      	mvns	r2, r3
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	401a      	ands	r2, r3
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001db8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc2:	43d9      	mvns	r1, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc8:	4313      	orrs	r3, r2
         );
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3724      	adds	r7, #36	; 0x24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b082      	sub	sp, #8
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f7ff ff4c 	bl	8001c7c <__NVIC_SetPriorityGrouping>
}
 8001de4:	bf00      	nop
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	607a      	str	r2, [r7, #4]
 8001df8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dfe:	f7ff ff61 	bl	8001cc4 <__NVIC_GetPriorityGrouping>
 8001e02:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	68b9      	ldr	r1, [r7, #8]
 8001e08:	6978      	ldr	r0, [r7, #20]
 8001e0a:	f7ff ffb1 	bl	8001d70 <NVIC_EncodePriority>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e14:	4611      	mov	r1, r2
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff ff80 	bl	8001d1c <__NVIC_SetPriority>
}
 8001e1c:	bf00      	nop
 8001e1e:	3718      	adds	r7, #24
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff ff54 	bl	8001ce0 <__NVIC_EnableIRQ>
}
 8001e38:	bf00      	nop
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b087      	sub	sp, #28
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e4e:	e14e      	b.n	80020ee <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	2101      	movs	r1, #1
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f000 8140 	beq.w	80020e8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f003 0303 	and.w	r3, r3, #3
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d005      	beq.n	8001e80 <HAL_GPIO_Init+0x40>
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f003 0303 	and.w	r3, r3, #3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d130      	bne.n	8001ee2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	2203      	movs	r2, #3
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	43db      	mvns	r3, r3
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	4013      	ands	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	68da      	ldr	r2, [r3, #12]
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	091b      	lsrs	r3, r3, #4
 8001ecc:	f003 0201 	and.w	r2, r3, #1
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f003 0303 	and.w	r3, r3, #3
 8001eea:	2b03      	cmp	r3, #3
 8001eec:	d017      	beq.n	8001f1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	2203      	movs	r2, #3
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43db      	mvns	r3, r3
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	4013      	ands	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	689a      	ldr	r2, [r3, #8]
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f003 0303 	and.w	r3, r3, #3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d123      	bne.n	8001f72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	08da      	lsrs	r2, r3, #3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	3208      	adds	r2, #8
 8001f32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	220f      	movs	r2, #15
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	43db      	mvns	r3, r3
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	691a      	ldr	r2, [r3, #16]
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	f003 0307 	and.w	r3, r3, #7
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	08da      	lsrs	r2, r3, #3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	3208      	adds	r2, #8
 8001f6c:	6939      	ldr	r1, [r7, #16]
 8001f6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	2203      	movs	r2, #3
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	43db      	mvns	r3, r3
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	4013      	ands	r3, r2
 8001f88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f003 0203 	and.w	r2, r3, #3
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f000 809a 	beq.w	80020e8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fb4:	4b55      	ldr	r3, [pc, #340]	; (800210c <HAL_GPIO_Init+0x2cc>)
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	4a54      	ldr	r2, [pc, #336]	; (800210c <HAL_GPIO_Init+0x2cc>)
 8001fba:	f043 0301 	orr.w	r3, r3, #1
 8001fbe:	6193      	str	r3, [r2, #24]
 8001fc0:	4b52      	ldr	r3, [pc, #328]	; (800210c <HAL_GPIO_Init+0x2cc>)
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	60bb      	str	r3, [r7, #8]
 8001fca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001fcc:	4a50      	ldr	r2, [pc, #320]	; (8002110 <HAL_GPIO_Init+0x2d0>)
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	089b      	lsrs	r3, r3, #2
 8001fd2:	3302      	adds	r3, #2
 8001fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	f003 0303 	and.w	r3, r3, #3
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	220f      	movs	r2, #15
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	4013      	ands	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ff6:	d013      	beq.n	8002020 <HAL_GPIO_Init+0x1e0>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a46      	ldr	r2, [pc, #280]	; (8002114 <HAL_GPIO_Init+0x2d4>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d00d      	beq.n	800201c <HAL_GPIO_Init+0x1dc>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a45      	ldr	r2, [pc, #276]	; (8002118 <HAL_GPIO_Init+0x2d8>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d007      	beq.n	8002018 <HAL_GPIO_Init+0x1d8>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a44      	ldr	r2, [pc, #272]	; (800211c <HAL_GPIO_Init+0x2dc>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d101      	bne.n	8002014 <HAL_GPIO_Init+0x1d4>
 8002010:	2303      	movs	r3, #3
 8002012:	e006      	b.n	8002022 <HAL_GPIO_Init+0x1e2>
 8002014:	2305      	movs	r3, #5
 8002016:	e004      	b.n	8002022 <HAL_GPIO_Init+0x1e2>
 8002018:	2302      	movs	r3, #2
 800201a:	e002      	b.n	8002022 <HAL_GPIO_Init+0x1e2>
 800201c:	2301      	movs	r3, #1
 800201e:	e000      	b.n	8002022 <HAL_GPIO_Init+0x1e2>
 8002020:	2300      	movs	r3, #0
 8002022:	697a      	ldr	r2, [r7, #20]
 8002024:	f002 0203 	and.w	r2, r2, #3
 8002028:	0092      	lsls	r2, r2, #2
 800202a:	4093      	lsls	r3, r2
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	4313      	orrs	r3, r2
 8002030:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002032:	4937      	ldr	r1, [pc, #220]	; (8002110 <HAL_GPIO_Init+0x2d0>)
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	089b      	lsrs	r3, r3, #2
 8002038:	3302      	adds	r3, #2
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002040:	4b37      	ldr	r3, [pc, #220]	; (8002120 <HAL_GPIO_Init+0x2e0>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	43db      	mvns	r3, r3
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	4013      	ands	r3, r2
 800204e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d003      	beq.n	8002064 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	4313      	orrs	r3, r2
 8002062:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002064:	4a2e      	ldr	r2, [pc, #184]	; (8002120 <HAL_GPIO_Init+0x2e0>)
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800206a:	4b2d      	ldr	r3, [pc, #180]	; (8002120 <HAL_GPIO_Init+0x2e0>)
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	43db      	mvns	r3, r3
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	4013      	ands	r3, r2
 8002078:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	4313      	orrs	r3, r2
 800208c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800208e:	4a24      	ldr	r2, [pc, #144]	; (8002120 <HAL_GPIO_Init+0x2e0>)
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002094:	4b22      	ldr	r3, [pc, #136]	; (8002120 <HAL_GPIO_Init+0x2e0>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	43db      	mvns	r3, r3
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	4013      	ands	r3, r2
 80020a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d003      	beq.n	80020b8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80020b8:	4a19      	ldr	r2, [pc, #100]	; (8002120 <HAL_GPIO_Init+0x2e0>)
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020be:	4b18      	ldr	r3, [pc, #96]	; (8002120 <HAL_GPIO_Init+0x2e0>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	43db      	mvns	r3, r3
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	4013      	ands	r3, r2
 80020cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d003      	beq.n	80020e2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	4313      	orrs	r3, r2
 80020e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80020e2:	4a0f      	ldr	r2, [pc, #60]	; (8002120 <HAL_GPIO_Init+0x2e0>)
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	3301      	adds	r3, #1
 80020ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	fa22 f303 	lsr.w	r3, r2, r3
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f47f aea9 	bne.w	8001e50 <HAL_GPIO_Init+0x10>
  }
}
 80020fe:	bf00      	nop
 8002100:	bf00      	nop
 8002102:	371c      	adds	r7, #28
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	40021000 	.word	0x40021000
 8002110:	40010000 	.word	0x40010000
 8002114:	48000400 	.word	0x48000400
 8002118:	48000800 	.word	0x48000800
 800211c:	48000c00 	.word	0x48000c00
 8002120:	40010400 	.word	0x40010400

08002124 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	460b      	mov	r3, r1
 800212e:	807b      	strh	r3, [r7, #2]
 8002130:	4613      	mov	r3, r2
 8002132:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002134:	787b      	ldrb	r3, [r7, #1]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d003      	beq.n	8002142 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800213a:	887a      	ldrh	r2, [r7, #2]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002140:	e002      	b.n	8002148 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002142:	887a      	ldrh	r2, [r7, #2]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	4603      	mov	r3, r0
 800215c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800215e:	4b08      	ldr	r3, [pc, #32]	; (8002180 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002160:	695a      	ldr	r2, [r3, #20]
 8002162:	88fb      	ldrh	r3, [r7, #6]
 8002164:	4013      	ands	r3, r2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d006      	beq.n	8002178 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800216a:	4a05      	ldr	r2, [pc, #20]	; (8002180 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800216c:	88fb      	ldrh	r3, [r7, #6]
 800216e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002170:	88fb      	ldrh	r3, [r7, #6]
 8002172:	4618      	mov	r0, r3
 8002174:	f000 f806 	bl	8002184 <HAL_GPIO_EXTI_Callback>
  }
}
 8002178:	bf00      	nop
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	40010400 	.word	0x40010400

08002184 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	4603      	mov	r3, r0
 800218c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
	...

0800219c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021ac:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d102      	bne.n	80021c2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	f001 b823 	b.w	8003208 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f000 817d 	beq.w	80024d2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80021d8:	4bbc      	ldr	r3, [pc, #752]	; (80024cc <HAL_RCC_OscConfig+0x330>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f003 030c 	and.w	r3, r3, #12
 80021e0:	2b04      	cmp	r3, #4
 80021e2:	d00c      	beq.n	80021fe <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021e4:	4bb9      	ldr	r3, [pc, #740]	; (80024cc <HAL_RCC_OscConfig+0x330>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 030c 	and.w	r3, r3, #12
 80021ec:	2b08      	cmp	r3, #8
 80021ee:	d15c      	bne.n	80022aa <HAL_RCC_OscConfig+0x10e>
 80021f0:	4bb6      	ldr	r3, [pc, #728]	; (80024cc <HAL_RCC_OscConfig+0x330>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021fc:	d155      	bne.n	80022aa <HAL_RCC_OscConfig+0x10e>
 80021fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002202:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002206:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800220a:	fa93 f3a3 	rbit	r3, r3
 800220e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002212:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002216:	fab3 f383 	clz	r3, r3
 800221a:	b2db      	uxtb	r3, r3
 800221c:	095b      	lsrs	r3, r3, #5
 800221e:	b2db      	uxtb	r3, r3
 8002220:	f043 0301 	orr.w	r3, r3, #1
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b01      	cmp	r3, #1
 8002228:	d102      	bne.n	8002230 <HAL_RCC_OscConfig+0x94>
 800222a:	4ba8      	ldr	r3, [pc, #672]	; (80024cc <HAL_RCC_OscConfig+0x330>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	e015      	b.n	800225c <HAL_RCC_OscConfig+0xc0>
 8002230:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002234:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002238:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800223c:	fa93 f3a3 	rbit	r3, r3
 8002240:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002244:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002248:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800224c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002250:	fa93 f3a3 	rbit	r3, r3
 8002254:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002258:	4b9c      	ldr	r3, [pc, #624]	; (80024cc <HAL_RCC_OscConfig+0x330>)
 800225a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002260:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002264:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002268:	fa92 f2a2 	rbit	r2, r2
 800226c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002270:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002274:	fab2 f282 	clz	r2, r2
 8002278:	b2d2      	uxtb	r2, r2
 800227a:	f042 0220 	orr.w	r2, r2, #32
 800227e:	b2d2      	uxtb	r2, r2
 8002280:	f002 021f 	and.w	r2, r2, #31
 8002284:	2101      	movs	r1, #1
 8002286:	fa01 f202 	lsl.w	r2, r1, r2
 800228a:	4013      	ands	r3, r2
 800228c:	2b00      	cmp	r3, #0
 800228e:	f000 811f 	beq.w	80024d0 <HAL_RCC_OscConfig+0x334>
 8002292:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002296:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f040 8116 	bne.w	80024d0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	f000 bfaf 	b.w	8003208 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022ba:	d106      	bne.n	80022ca <HAL_RCC_OscConfig+0x12e>
 80022bc:	4b83      	ldr	r3, [pc, #524]	; (80024cc <HAL_RCC_OscConfig+0x330>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a82      	ldr	r2, [pc, #520]	; (80024cc <HAL_RCC_OscConfig+0x330>)
 80022c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c6:	6013      	str	r3, [r2, #0]
 80022c8:	e036      	b.n	8002338 <HAL_RCC_OscConfig+0x19c>
 80022ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d10c      	bne.n	80022f4 <HAL_RCC_OscConfig+0x158>
 80022da:	4b7c      	ldr	r3, [pc, #496]	; (80024cc <HAL_RCC_OscConfig+0x330>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a7b      	ldr	r2, [pc, #492]	; (80024cc <HAL_RCC_OscConfig+0x330>)
 80022e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022e4:	6013      	str	r3, [r2, #0]
 80022e6:	4b79      	ldr	r3, [pc, #484]	; (80024cc <HAL_RCC_OscConfig+0x330>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a78      	ldr	r2, [pc, #480]	; (80024cc <HAL_RCC_OscConfig+0x330>)
 80022ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022f0:	6013      	str	r3, [r2, #0]
 80022f2:	e021      	b.n	8002338 <HAL_RCC_OscConfig+0x19c>
 80022f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002304:	d10c      	bne.n	8002320 <HAL_RCC_OscConfig+0x184>
 8002306:	4b71      	ldr	r3, [pc, #452]	; (80024cc <HAL_RCC_OscConfig+0x330>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a70      	ldr	r2, [pc, #448]	; (80024cc <HAL_RCC_OscConfig+0x330>)
 800230c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002310:	6013      	str	r3, [r2, #0]
 8002312:	4b6e      	ldr	r3, [pc, #440]	; (80024cc <HAL_RCC_OscConfig+0x330>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a6d      	ldr	r2, [pc, #436]	; (80024cc <HAL_RCC_OscConfig+0x330>)
 8002318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800231c:	6013      	str	r3, [r2, #0]
 800231e:	e00b      	b.n	8002338 <HAL_RCC_OscConfig+0x19c>
 8002320:	4b6a      	ldr	r3, [pc, #424]	; (80024cc <HAL_RCC_OscConfig+0x330>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a69      	ldr	r2, [pc, #420]	; (80024cc <HAL_RCC_OscConfig+0x330>)
 8002326:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800232a:	6013      	str	r3, [r2, #0]
 800232c:	4b67      	ldr	r3, [pc, #412]	; (80024cc <HAL_RCC_OscConfig+0x330>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a66      	ldr	r2, [pc, #408]	; (80024cc <HAL_RCC_OscConfig+0x330>)
 8002332:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002336:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002338:	4b64      	ldr	r3, [pc, #400]	; (80024cc <HAL_RCC_OscConfig+0x330>)
 800233a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233c:	f023 020f 	bic.w	r2, r3, #15
 8002340:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002344:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	495f      	ldr	r1, [pc, #380]	; (80024cc <HAL_RCC_OscConfig+0x330>)
 800234e:	4313      	orrs	r3, r2
 8002350:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002352:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002356:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d059      	beq.n	8002416 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002362:	f7fe ffbd 	bl	80012e0 <HAL_GetTick>
 8002366:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800236a:	e00a      	b.n	8002382 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800236c:	f7fe ffb8 	bl	80012e0 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b64      	cmp	r3, #100	; 0x64
 800237a:	d902      	bls.n	8002382 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	f000 bf43 	b.w	8003208 <HAL_RCC_OscConfig+0x106c>
 8002382:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002386:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800238e:	fa93 f3a3 	rbit	r3, r3
 8002392:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002396:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800239a:	fab3 f383 	clz	r3, r3
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	095b      	lsrs	r3, r3, #5
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	f043 0301 	orr.w	r3, r3, #1
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d102      	bne.n	80023b4 <HAL_RCC_OscConfig+0x218>
 80023ae:	4b47      	ldr	r3, [pc, #284]	; (80024cc <HAL_RCC_OscConfig+0x330>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	e015      	b.n	80023e0 <HAL_RCC_OscConfig+0x244>
 80023b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023b8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023bc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80023c0:	fa93 f3a3 	rbit	r3, r3
 80023c4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80023c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023cc:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80023d0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80023d4:	fa93 f3a3 	rbit	r3, r3
 80023d8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80023dc:	4b3b      	ldr	r3, [pc, #236]	; (80024cc <HAL_RCC_OscConfig+0x330>)
 80023de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023e4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80023e8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80023ec:	fa92 f2a2 	rbit	r2, r2
 80023f0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80023f4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80023f8:	fab2 f282 	clz	r2, r2
 80023fc:	b2d2      	uxtb	r2, r2
 80023fe:	f042 0220 	orr.w	r2, r2, #32
 8002402:	b2d2      	uxtb	r2, r2
 8002404:	f002 021f 	and.w	r2, r2, #31
 8002408:	2101      	movs	r1, #1
 800240a:	fa01 f202 	lsl.w	r2, r1, r2
 800240e:	4013      	ands	r3, r2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d0ab      	beq.n	800236c <HAL_RCC_OscConfig+0x1d0>
 8002414:	e05d      	b.n	80024d2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002416:	f7fe ff63 	bl	80012e0 <HAL_GetTick>
 800241a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800241e:	e00a      	b.n	8002436 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002420:	f7fe ff5e 	bl	80012e0 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b64      	cmp	r3, #100	; 0x64
 800242e:	d902      	bls.n	8002436 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	f000 bee9 	b.w	8003208 <HAL_RCC_OscConfig+0x106c>
 8002436:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800243a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002442:	fa93 f3a3 	rbit	r3, r3
 8002446:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800244a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800244e:	fab3 f383 	clz	r3, r3
 8002452:	b2db      	uxtb	r3, r3
 8002454:	095b      	lsrs	r3, r3, #5
 8002456:	b2db      	uxtb	r3, r3
 8002458:	f043 0301 	orr.w	r3, r3, #1
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b01      	cmp	r3, #1
 8002460:	d102      	bne.n	8002468 <HAL_RCC_OscConfig+0x2cc>
 8002462:	4b1a      	ldr	r3, [pc, #104]	; (80024cc <HAL_RCC_OscConfig+0x330>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	e015      	b.n	8002494 <HAL_RCC_OscConfig+0x2f8>
 8002468:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800246c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002470:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002474:	fa93 f3a3 	rbit	r3, r3
 8002478:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800247c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002480:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002484:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002488:	fa93 f3a3 	rbit	r3, r3
 800248c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002490:	4b0e      	ldr	r3, [pc, #56]	; (80024cc <HAL_RCC_OscConfig+0x330>)
 8002492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002494:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002498:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800249c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80024a0:	fa92 f2a2 	rbit	r2, r2
 80024a4:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80024a8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80024ac:	fab2 f282 	clz	r2, r2
 80024b0:	b2d2      	uxtb	r2, r2
 80024b2:	f042 0220 	orr.w	r2, r2, #32
 80024b6:	b2d2      	uxtb	r2, r2
 80024b8:	f002 021f 	and.w	r2, r2, #31
 80024bc:	2101      	movs	r1, #1
 80024be:	fa01 f202 	lsl.w	r2, r1, r2
 80024c2:	4013      	ands	r3, r2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1ab      	bne.n	8002420 <HAL_RCC_OscConfig+0x284>
 80024c8:	e003      	b.n	80024d2 <HAL_RCC_OscConfig+0x336>
 80024ca:	bf00      	nop
 80024cc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f000 817d 	beq.w	80027e2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80024e8:	4ba6      	ldr	r3, [pc, #664]	; (8002784 <HAL_RCC_OscConfig+0x5e8>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f003 030c 	and.w	r3, r3, #12
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d00b      	beq.n	800250c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80024f4:	4ba3      	ldr	r3, [pc, #652]	; (8002784 <HAL_RCC_OscConfig+0x5e8>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f003 030c 	and.w	r3, r3, #12
 80024fc:	2b08      	cmp	r3, #8
 80024fe:	d172      	bne.n	80025e6 <HAL_RCC_OscConfig+0x44a>
 8002500:	4ba0      	ldr	r3, [pc, #640]	; (8002784 <HAL_RCC_OscConfig+0x5e8>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d16c      	bne.n	80025e6 <HAL_RCC_OscConfig+0x44a>
 800250c:	2302      	movs	r3, #2
 800250e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002512:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002516:	fa93 f3a3 	rbit	r3, r3
 800251a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800251e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002522:	fab3 f383 	clz	r3, r3
 8002526:	b2db      	uxtb	r3, r3
 8002528:	095b      	lsrs	r3, r3, #5
 800252a:	b2db      	uxtb	r3, r3
 800252c:	f043 0301 	orr.w	r3, r3, #1
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b01      	cmp	r3, #1
 8002534:	d102      	bne.n	800253c <HAL_RCC_OscConfig+0x3a0>
 8002536:	4b93      	ldr	r3, [pc, #588]	; (8002784 <HAL_RCC_OscConfig+0x5e8>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	e013      	b.n	8002564 <HAL_RCC_OscConfig+0x3c8>
 800253c:	2302      	movs	r3, #2
 800253e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002542:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002546:	fa93 f3a3 	rbit	r3, r3
 800254a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800254e:	2302      	movs	r3, #2
 8002550:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002554:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002558:	fa93 f3a3 	rbit	r3, r3
 800255c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002560:	4b88      	ldr	r3, [pc, #544]	; (8002784 <HAL_RCC_OscConfig+0x5e8>)
 8002562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002564:	2202      	movs	r2, #2
 8002566:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800256a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800256e:	fa92 f2a2 	rbit	r2, r2
 8002572:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002576:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800257a:	fab2 f282 	clz	r2, r2
 800257e:	b2d2      	uxtb	r2, r2
 8002580:	f042 0220 	orr.w	r2, r2, #32
 8002584:	b2d2      	uxtb	r2, r2
 8002586:	f002 021f 	and.w	r2, r2, #31
 800258a:	2101      	movs	r1, #1
 800258c:	fa01 f202 	lsl.w	r2, r1, r2
 8002590:	4013      	ands	r3, r2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00a      	beq.n	80025ac <HAL_RCC_OscConfig+0x410>
 8002596:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800259a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d002      	beq.n	80025ac <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	f000 be2e 	b.w	8003208 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ac:	4b75      	ldr	r3, [pc, #468]	; (8002784 <HAL_RCC_OscConfig+0x5e8>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	695b      	ldr	r3, [r3, #20]
 80025c0:	21f8      	movs	r1, #248	; 0xf8
 80025c2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80025ca:	fa91 f1a1 	rbit	r1, r1
 80025ce:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80025d2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80025d6:	fab1 f181 	clz	r1, r1
 80025da:	b2c9      	uxtb	r1, r1
 80025dc:	408b      	lsls	r3, r1
 80025de:	4969      	ldr	r1, [pc, #420]	; (8002784 <HAL_RCC_OscConfig+0x5e8>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025e4:	e0fd      	b.n	80027e2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f000 8088 	beq.w	8002708 <HAL_RCC_OscConfig+0x56c>
 80025f8:	2301      	movs	r3, #1
 80025fa:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fe:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002602:	fa93 f3a3 	rbit	r3, r3
 8002606:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800260a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800260e:	fab3 f383 	clz	r3, r3
 8002612:	b2db      	uxtb	r3, r3
 8002614:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002618:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	461a      	mov	r2, r3
 8002620:	2301      	movs	r3, #1
 8002622:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002624:	f7fe fe5c 	bl	80012e0 <HAL_GetTick>
 8002628:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800262c:	e00a      	b.n	8002644 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800262e:	f7fe fe57 	bl	80012e0 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d902      	bls.n	8002644 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	f000 bde2 	b.w	8003208 <HAL_RCC_OscConfig+0x106c>
 8002644:	2302      	movs	r3, #2
 8002646:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800264e:	fa93 f3a3 	rbit	r3, r3
 8002652:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002656:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800265a:	fab3 f383 	clz	r3, r3
 800265e:	b2db      	uxtb	r3, r3
 8002660:	095b      	lsrs	r3, r3, #5
 8002662:	b2db      	uxtb	r3, r3
 8002664:	f043 0301 	orr.w	r3, r3, #1
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b01      	cmp	r3, #1
 800266c:	d102      	bne.n	8002674 <HAL_RCC_OscConfig+0x4d8>
 800266e:	4b45      	ldr	r3, [pc, #276]	; (8002784 <HAL_RCC_OscConfig+0x5e8>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	e013      	b.n	800269c <HAL_RCC_OscConfig+0x500>
 8002674:	2302      	movs	r3, #2
 8002676:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800267e:	fa93 f3a3 	rbit	r3, r3
 8002682:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002686:	2302      	movs	r3, #2
 8002688:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800268c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002690:	fa93 f3a3 	rbit	r3, r3
 8002694:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002698:	4b3a      	ldr	r3, [pc, #232]	; (8002784 <HAL_RCC_OscConfig+0x5e8>)
 800269a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269c:	2202      	movs	r2, #2
 800269e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80026a2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80026a6:	fa92 f2a2 	rbit	r2, r2
 80026aa:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80026ae:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80026b2:	fab2 f282 	clz	r2, r2
 80026b6:	b2d2      	uxtb	r2, r2
 80026b8:	f042 0220 	orr.w	r2, r2, #32
 80026bc:	b2d2      	uxtb	r2, r2
 80026be:	f002 021f 	and.w	r2, r2, #31
 80026c2:	2101      	movs	r1, #1
 80026c4:	fa01 f202 	lsl.w	r2, r1, r2
 80026c8:	4013      	ands	r3, r2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d0af      	beq.n	800262e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ce:	4b2d      	ldr	r3, [pc, #180]	; (8002784 <HAL_RCC_OscConfig+0x5e8>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	21f8      	movs	r1, #248	; 0xf8
 80026e4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80026ec:	fa91 f1a1 	rbit	r1, r1
 80026f0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80026f4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80026f8:	fab1 f181 	clz	r1, r1
 80026fc:	b2c9      	uxtb	r1, r1
 80026fe:	408b      	lsls	r3, r1
 8002700:	4920      	ldr	r1, [pc, #128]	; (8002784 <HAL_RCC_OscConfig+0x5e8>)
 8002702:	4313      	orrs	r3, r2
 8002704:	600b      	str	r3, [r1, #0]
 8002706:	e06c      	b.n	80027e2 <HAL_RCC_OscConfig+0x646>
 8002708:	2301      	movs	r3, #1
 800270a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002712:	fa93 f3a3 	rbit	r3, r3
 8002716:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800271a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800271e:	fab3 f383 	clz	r3, r3
 8002722:	b2db      	uxtb	r3, r3
 8002724:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002728:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	461a      	mov	r2, r3
 8002730:	2300      	movs	r3, #0
 8002732:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002734:	f7fe fdd4 	bl	80012e0 <HAL_GetTick>
 8002738:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800273c:	e00a      	b.n	8002754 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800273e:	f7fe fdcf 	bl	80012e0 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d902      	bls.n	8002754 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	f000 bd5a 	b.w	8003208 <HAL_RCC_OscConfig+0x106c>
 8002754:	2302      	movs	r3, #2
 8002756:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800275e:	fa93 f3a3 	rbit	r3, r3
 8002762:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002766:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800276a:	fab3 f383 	clz	r3, r3
 800276e:	b2db      	uxtb	r3, r3
 8002770:	095b      	lsrs	r3, r3, #5
 8002772:	b2db      	uxtb	r3, r3
 8002774:	f043 0301 	orr.w	r3, r3, #1
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b01      	cmp	r3, #1
 800277c:	d104      	bne.n	8002788 <HAL_RCC_OscConfig+0x5ec>
 800277e:	4b01      	ldr	r3, [pc, #4]	; (8002784 <HAL_RCC_OscConfig+0x5e8>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	e015      	b.n	80027b0 <HAL_RCC_OscConfig+0x614>
 8002784:	40021000 	.word	0x40021000
 8002788:	2302      	movs	r3, #2
 800278a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002792:	fa93 f3a3 	rbit	r3, r3
 8002796:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800279a:	2302      	movs	r3, #2
 800279c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80027a0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80027a4:	fa93 f3a3 	rbit	r3, r3
 80027a8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80027ac:	4bc8      	ldr	r3, [pc, #800]	; (8002ad0 <HAL_RCC_OscConfig+0x934>)
 80027ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b0:	2202      	movs	r2, #2
 80027b2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80027b6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80027ba:	fa92 f2a2 	rbit	r2, r2
 80027be:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80027c2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80027c6:	fab2 f282 	clz	r2, r2
 80027ca:	b2d2      	uxtb	r2, r2
 80027cc:	f042 0220 	orr.w	r2, r2, #32
 80027d0:	b2d2      	uxtb	r2, r2
 80027d2:	f002 021f 	and.w	r2, r2, #31
 80027d6:	2101      	movs	r1, #1
 80027d8:	fa01 f202 	lsl.w	r2, r1, r2
 80027dc:	4013      	ands	r3, r2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1ad      	bne.n	800273e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0308 	and.w	r3, r3, #8
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f000 8110 	beq.w	8002a18 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d079      	beq.n	80028fc <HAL_RCC_OscConfig+0x760>
 8002808:	2301      	movs	r3, #1
 800280a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002812:	fa93 f3a3 	rbit	r3, r3
 8002816:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800281a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800281e:	fab3 f383 	clz	r3, r3
 8002822:	b2db      	uxtb	r3, r3
 8002824:	461a      	mov	r2, r3
 8002826:	4bab      	ldr	r3, [pc, #684]	; (8002ad4 <HAL_RCC_OscConfig+0x938>)
 8002828:	4413      	add	r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	461a      	mov	r2, r3
 800282e:	2301      	movs	r3, #1
 8002830:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002832:	f7fe fd55 	bl	80012e0 <HAL_GetTick>
 8002836:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800283a:	e00a      	b.n	8002852 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800283c:	f7fe fd50 	bl	80012e0 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d902      	bls.n	8002852 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	f000 bcdb 	b.w	8003208 <HAL_RCC_OscConfig+0x106c>
 8002852:	2302      	movs	r3, #2
 8002854:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002858:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800285c:	fa93 f3a3 	rbit	r3, r3
 8002860:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002864:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002868:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800286c:	2202      	movs	r2, #2
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002874:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	fa93 f2a3 	rbit	r2, r3
 800287e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002882:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800288c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002890:	2202      	movs	r2, #2
 8002892:	601a      	str	r2, [r3, #0]
 8002894:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002898:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	fa93 f2a3 	rbit	r2, r3
 80028a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80028aa:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ac:	4b88      	ldr	r3, [pc, #544]	; (8002ad0 <HAL_RCC_OscConfig+0x934>)
 80028ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80028b8:	2102      	movs	r1, #2
 80028ba:	6019      	str	r1, [r3, #0]
 80028bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	fa93 f1a3 	rbit	r1, r3
 80028ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ce:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80028d2:	6019      	str	r1, [r3, #0]
  return result;
 80028d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	fab3 f383 	clz	r3, r3
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	f003 031f 	and.w	r3, r3, #31
 80028ee:	2101      	movs	r1, #1
 80028f0:	fa01 f303 	lsl.w	r3, r1, r3
 80028f4:	4013      	ands	r3, r2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0a0      	beq.n	800283c <HAL_RCC_OscConfig+0x6a0>
 80028fa:	e08d      	b.n	8002a18 <HAL_RCC_OscConfig+0x87c>
 80028fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002900:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002904:	2201      	movs	r2, #1
 8002906:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002908:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800290c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	fa93 f2a3 	rbit	r2, r3
 8002916:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800291a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800291e:	601a      	str	r2, [r3, #0]
  return result;
 8002920:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002924:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002928:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800292a:	fab3 f383 	clz	r3, r3
 800292e:	b2db      	uxtb	r3, r3
 8002930:	461a      	mov	r2, r3
 8002932:	4b68      	ldr	r3, [pc, #416]	; (8002ad4 <HAL_RCC_OscConfig+0x938>)
 8002934:	4413      	add	r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	461a      	mov	r2, r3
 800293a:	2300      	movs	r3, #0
 800293c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800293e:	f7fe fccf 	bl	80012e0 <HAL_GetTick>
 8002942:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002946:	e00a      	b.n	800295e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002948:	f7fe fcca 	bl	80012e0 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	2b02      	cmp	r3, #2
 8002956:	d902      	bls.n	800295e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	f000 bc55 	b.w	8003208 <HAL_RCC_OscConfig+0x106c>
 800295e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002962:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002966:	2202      	movs	r2, #2
 8002968:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800296e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	fa93 f2a3 	rbit	r2, r3
 8002978:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800297c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002980:	601a      	str	r2, [r3, #0]
 8002982:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002986:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800298a:	2202      	movs	r2, #2
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002992:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	fa93 f2a3 	rbit	r2, r3
 800299c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80029a4:	601a      	str	r2, [r3, #0]
 80029a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80029ae:	2202      	movs	r2, #2
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	fa93 f2a3 	rbit	r2, r3
 80029c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80029c8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029ca:	4b41      	ldr	r3, [pc, #260]	; (8002ad0 <HAL_RCC_OscConfig+0x934>)
 80029cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80029d6:	2102      	movs	r1, #2
 80029d8:	6019      	str	r1, [r3, #0]
 80029da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029de:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	fa93 f1a3 	rbit	r1, r3
 80029e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ec:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80029f0:	6019      	str	r1, [r3, #0]
  return result;
 80029f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	fab3 f383 	clz	r3, r3
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	f003 031f 	and.w	r3, r3, #31
 8002a0c:	2101      	movs	r1, #1
 8002a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a12:	4013      	ands	r3, r2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d197      	bne.n	8002948 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a1c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0304 	and.w	r3, r3, #4
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f000 81a1 	beq.w	8002d70 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a34:	4b26      	ldr	r3, [pc, #152]	; (8002ad0 <HAL_RCC_OscConfig+0x934>)
 8002a36:	69db      	ldr	r3, [r3, #28]
 8002a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d116      	bne.n	8002a6e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a40:	4b23      	ldr	r3, [pc, #140]	; (8002ad0 <HAL_RCC_OscConfig+0x934>)
 8002a42:	69db      	ldr	r3, [r3, #28]
 8002a44:	4a22      	ldr	r2, [pc, #136]	; (8002ad0 <HAL_RCC_OscConfig+0x934>)
 8002a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a4a:	61d3      	str	r3, [r2, #28]
 8002a4c:	4b20      	ldr	r3, [pc, #128]	; (8002ad0 <HAL_RCC_OscConfig+0x934>)
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002a54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a58:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002a5c:	601a      	str	r2, [r3, #0]
 8002a5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a62:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002a66:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a6e:	4b1a      	ldr	r3, [pc, #104]	; (8002ad8 <HAL_RCC_OscConfig+0x93c>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d11a      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a7a:	4b17      	ldr	r3, [pc, #92]	; (8002ad8 <HAL_RCC_OscConfig+0x93c>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a16      	ldr	r2, [pc, #88]	; (8002ad8 <HAL_RCC_OscConfig+0x93c>)
 8002a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a84:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a86:	f7fe fc2b 	bl	80012e0 <HAL_GetTick>
 8002a8a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a8e:	e009      	b.n	8002aa4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a90:	f7fe fc26 	bl	80012e0 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b64      	cmp	r3, #100	; 0x64
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e3b1      	b.n	8003208 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa4:	4b0c      	ldr	r3, [pc, #48]	; (8002ad8 <HAL_RCC_OscConfig+0x93c>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d0ef      	beq.n	8002a90 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ab0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ab4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d10d      	bne.n	8002adc <HAL_RCC_OscConfig+0x940>
 8002ac0:	4b03      	ldr	r3, [pc, #12]	; (8002ad0 <HAL_RCC_OscConfig+0x934>)
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	4a02      	ldr	r2, [pc, #8]	; (8002ad0 <HAL_RCC_OscConfig+0x934>)
 8002ac6:	f043 0301 	orr.w	r3, r3, #1
 8002aca:	6213      	str	r3, [r2, #32]
 8002acc:	e03c      	b.n	8002b48 <HAL_RCC_OscConfig+0x9ac>
 8002ace:	bf00      	nop
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	10908120 	.word	0x10908120
 8002ad8:	40007000 	.word	0x40007000
 8002adc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d10c      	bne.n	8002b06 <HAL_RCC_OscConfig+0x96a>
 8002aec:	4bc1      	ldr	r3, [pc, #772]	; (8002df4 <HAL_RCC_OscConfig+0xc58>)
 8002aee:	6a1b      	ldr	r3, [r3, #32]
 8002af0:	4ac0      	ldr	r2, [pc, #768]	; (8002df4 <HAL_RCC_OscConfig+0xc58>)
 8002af2:	f023 0301 	bic.w	r3, r3, #1
 8002af6:	6213      	str	r3, [r2, #32]
 8002af8:	4bbe      	ldr	r3, [pc, #760]	; (8002df4 <HAL_RCC_OscConfig+0xc58>)
 8002afa:	6a1b      	ldr	r3, [r3, #32]
 8002afc:	4abd      	ldr	r2, [pc, #756]	; (8002df4 <HAL_RCC_OscConfig+0xc58>)
 8002afe:	f023 0304 	bic.w	r3, r3, #4
 8002b02:	6213      	str	r3, [r2, #32]
 8002b04:	e020      	b.n	8002b48 <HAL_RCC_OscConfig+0x9ac>
 8002b06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	2b05      	cmp	r3, #5
 8002b14:	d10c      	bne.n	8002b30 <HAL_RCC_OscConfig+0x994>
 8002b16:	4bb7      	ldr	r3, [pc, #732]	; (8002df4 <HAL_RCC_OscConfig+0xc58>)
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	4ab6      	ldr	r2, [pc, #728]	; (8002df4 <HAL_RCC_OscConfig+0xc58>)
 8002b1c:	f043 0304 	orr.w	r3, r3, #4
 8002b20:	6213      	str	r3, [r2, #32]
 8002b22:	4bb4      	ldr	r3, [pc, #720]	; (8002df4 <HAL_RCC_OscConfig+0xc58>)
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	4ab3      	ldr	r2, [pc, #716]	; (8002df4 <HAL_RCC_OscConfig+0xc58>)
 8002b28:	f043 0301 	orr.w	r3, r3, #1
 8002b2c:	6213      	str	r3, [r2, #32]
 8002b2e:	e00b      	b.n	8002b48 <HAL_RCC_OscConfig+0x9ac>
 8002b30:	4bb0      	ldr	r3, [pc, #704]	; (8002df4 <HAL_RCC_OscConfig+0xc58>)
 8002b32:	6a1b      	ldr	r3, [r3, #32]
 8002b34:	4aaf      	ldr	r2, [pc, #700]	; (8002df4 <HAL_RCC_OscConfig+0xc58>)
 8002b36:	f023 0301 	bic.w	r3, r3, #1
 8002b3a:	6213      	str	r3, [r2, #32]
 8002b3c:	4bad      	ldr	r3, [pc, #692]	; (8002df4 <HAL_RCC_OscConfig+0xc58>)
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	4aac      	ldr	r2, [pc, #688]	; (8002df4 <HAL_RCC_OscConfig+0xc58>)
 8002b42:	f023 0304 	bic.w	r3, r3, #4
 8002b46:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b4c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f000 8081 	beq.w	8002c5c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b5a:	f7fe fbc1 	bl	80012e0 <HAL_GetTick>
 8002b5e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b62:	e00b      	b.n	8002b7c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b64:	f7fe fbbc 	bl	80012e0 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d901      	bls.n	8002b7c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e345      	b.n	8003208 <HAL_RCC_OscConfig+0x106c>
 8002b7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b80:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002b84:	2202      	movs	r2, #2
 8002b86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b8c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	fa93 f2a3 	rbit	r2, r3
 8002b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b9a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ba4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002ba8:	2202      	movs	r2, #2
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	fa93 f2a3 	rbit	r2, r3
 8002bba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bbe:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002bc2:	601a      	str	r2, [r3, #0]
  return result;
 8002bc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bc8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002bcc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bce:	fab3 f383 	clz	r3, r3
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	095b      	lsrs	r3, r3, #5
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	f043 0302 	orr.w	r3, r3, #2
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d102      	bne.n	8002be8 <HAL_RCC_OscConfig+0xa4c>
 8002be2:	4b84      	ldr	r3, [pc, #528]	; (8002df4 <HAL_RCC_OscConfig+0xc58>)
 8002be4:	6a1b      	ldr	r3, [r3, #32]
 8002be6:	e013      	b.n	8002c10 <HAL_RCC_OscConfig+0xa74>
 8002be8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bec:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002bf0:	2202      	movs	r2, #2
 8002bf2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	fa93 f2a3 	rbit	r2, r3
 8002c02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c06:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	4b79      	ldr	r3, [pc, #484]	; (8002df4 <HAL_RCC_OscConfig+0xc58>)
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c10:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c14:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002c18:	2102      	movs	r1, #2
 8002c1a:	6011      	str	r1, [r2, #0]
 8002c1c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c20:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002c24:	6812      	ldr	r2, [r2, #0]
 8002c26:	fa92 f1a2 	rbit	r1, r2
 8002c2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c2e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002c32:	6011      	str	r1, [r2, #0]
  return result;
 8002c34:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c38:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002c3c:	6812      	ldr	r2, [r2, #0]
 8002c3e:	fab2 f282 	clz	r2, r2
 8002c42:	b2d2      	uxtb	r2, r2
 8002c44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c48:	b2d2      	uxtb	r2, r2
 8002c4a:	f002 021f 	and.w	r2, r2, #31
 8002c4e:	2101      	movs	r1, #1
 8002c50:	fa01 f202 	lsl.w	r2, r1, r2
 8002c54:	4013      	ands	r3, r2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d084      	beq.n	8002b64 <HAL_RCC_OscConfig+0x9c8>
 8002c5a:	e07f      	b.n	8002d5c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c5c:	f7fe fb40 	bl	80012e0 <HAL_GetTick>
 8002c60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c64:	e00b      	b.n	8002c7e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c66:	f7fe fb3b 	bl	80012e0 <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e2c4      	b.n	8003208 <HAL_RCC_OscConfig+0x106c>
 8002c7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c82:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002c86:	2202      	movs	r2, #2
 8002c88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c8e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	fa93 f2a3 	rbit	r2, r3
 8002c98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c9c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002ca0:	601a      	str	r2, [r3, #0]
 8002ca2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ca6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002caa:	2202      	movs	r2, #2
 8002cac:	601a      	str	r2, [r3, #0]
 8002cae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cb2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	fa93 f2a3 	rbit	r2, r3
 8002cbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002cc4:	601a      	str	r2, [r3, #0]
  return result;
 8002cc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cca:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002cce:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cd0:	fab3 f383 	clz	r3, r3
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	095b      	lsrs	r3, r3, #5
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	f043 0302 	orr.w	r3, r3, #2
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d102      	bne.n	8002cea <HAL_RCC_OscConfig+0xb4e>
 8002ce4:	4b43      	ldr	r3, [pc, #268]	; (8002df4 <HAL_RCC_OscConfig+0xc58>)
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	e013      	b.n	8002d12 <HAL_RCC_OscConfig+0xb76>
 8002cea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cee:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cfa:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	fa93 f2a3 	rbit	r2, r3
 8002d04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d08:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002d0c:	601a      	str	r2, [r3, #0]
 8002d0e:	4b39      	ldr	r3, [pc, #228]	; (8002df4 <HAL_RCC_OscConfig+0xc58>)
 8002d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d12:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d16:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002d1a:	2102      	movs	r1, #2
 8002d1c:	6011      	str	r1, [r2, #0]
 8002d1e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d22:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002d26:	6812      	ldr	r2, [r2, #0]
 8002d28:	fa92 f1a2 	rbit	r1, r2
 8002d2c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d30:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002d34:	6011      	str	r1, [r2, #0]
  return result;
 8002d36:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d3a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002d3e:	6812      	ldr	r2, [r2, #0]
 8002d40:	fab2 f282 	clz	r2, r2
 8002d44:	b2d2      	uxtb	r2, r2
 8002d46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d4a:	b2d2      	uxtb	r2, r2
 8002d4c:	f002 021f 	and.w	r2, r2, #31
 8002d50:	2101      	movs	r1, #1
 8002d52:	fa01 f202 	lsl.w	r2, r1, r2
 8002d56:	4013      	ands	r3, r2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d184      	bne.n	8002c66 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d5c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d105      	bne.n	8002d70 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d64:	4b23      	ldr	r3, [pc, #140]	; (8002df4 <HAL_RCC_OscConfig+0xc58>)
 8002d66:	69db      	ldr	r3, [r3, #28]
 8002d68:	4a22      	ldr	r2, [pc, #136]	; (8002df4 <HAL_RCC_OscConfig+0xc58>)
 8002d6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d6e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d74:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	69db      	ldr	r3, [r3, #28]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 8242 	beq.w	8003206 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d82:	4b1c      	ldr	r3, [pc, #112]	; (8002df4 <HAL_RCC_OscConfig+0xc58>)
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f003 030c 	and.w	r3, r3, #12
 8002d8a:	2b08      	cmp	r3, #8
 8002d8c:	f000 8213 	beq.w	80031b6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d94:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	69db      	ldr	r3, [r3, #28]
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	f040 8162 	bne.w	8003066 <HAL_RCC_OscConfig+0xeca>
 8002da2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002daa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002dae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	fa93 f2a3 	rbit	r2, r3
 8002dbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002dc6:	601a      	str	r2, [r3, #0]
  return result;
 8002dc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dcc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002dd0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dd2:	fab3 f383 	clz	r3, r3
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ddc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	461a      	mov	r2, r3
 8002de4:	2300      	movs	r3, #0
 8002de6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de8:	f7fe fa7a 	bl	80012e0 <HAL_GetTick>
 8002dec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002df0:	e00c      	b.n	8002e0c <HAL_RCC_OscConfig+0xc70>
 8002df2:	bf00      	nop
 8002df4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002df8:	f7fe fa72 	bl	80012e0 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d901      	bls.n	8002e0c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e1fd      	b.n	8003208 <HAL_RCC_OscConfig+0x106c>
 8002e0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e10:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002e14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e1e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	fa93 f2a3 	rbit	r2, r3
 8002e28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e2c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002e30:	601a      	str	r2, [r3, #0]
  return result;
 8002e32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e36:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002e3a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e3c:	fab3 f383 	clz	r3, r3
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	095b      	lsrs	r3, r3, #5
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	f043 0301 	orr.w	r3, r3, #1
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d102      	bne.n	8002e56 <HAL_RCC_OscConfig+0xcba>
 8002e50:	4bb0      	ldr	r3, [pc, #704]	; (8003114 <HAL_RCC_OscConfig+0xf78>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	e027      	b.n	8002ea6 <HAL_RCC_OscConfig+0xd0a>
 8002e56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e5a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002e5e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e68:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	fa93 f2a3 	rbit	r2, r3
 8002e72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e76:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e80:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002e84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e88:	601a      	str	r2, [r3, #0]
 8002e8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e8e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	fa93 f2a3 	rbit	r2, r3
 8002e98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e9c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002ea0:	601a      	str	r2, [r3, #0]
 8002ea2:	4b9c      	ldr	r3, [pc, #624]	; (8003114 <HAL_RCC_OscConfig+0xf78>)
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002eaa:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002eae:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002eb2:	6011      	str	r1, [r2, #0]
 8002eb4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002eb8:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002ebc:	6812      	ldr	r2, [r2, #0]
 8002ebe:	fa92 f1a2 	rbit	r1, r2
 8002ec2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ec6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002eca:	6011      	str	r1, [r2, #0]
  return result;
 8002ecc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ed0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002ed4:	6812      	ldr	r2, [r2, #0]
 8002ed6:	fab2 f282 	clz	r2, r2
 8002eda:	b2d2      	uxtb	r2, r2
 8002edc:	f042 0220 	orr.w	r2, r2, #32
 8002ee0:	b2d2      	uxtb	r2, r2
 8002ee2:	f002 021f 	and.w	r2, r2, #31
 8002ee6:	2101      	movs	r1, #1
 8002ee8:	fa01 f202 	lsl.w	r2, r1, r2
 8002eec:	4013      	ands	r3, r2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d182      	bne.n	8002df8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ef2:	4b88      	ldr	r3, [pc, #544]	; (8003114 <HAL_RCC_OscConfig+0xf78>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002efa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002efe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002f06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	6a1b      	ldr	r3, [r3, #32]
 8002f12:	430b      	orrs	r3, r1
 8002f14:	497f      	ldr	r1, [pc, #508]	; (8003114 <HAL_RCC_OscConfig+0xf78>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	604b      	str	r3, [r1, #4]
 8002f1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f1e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002f22:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f2c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	fa93 f2a3 	rbit	r2, r3
 8002f36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f3a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002f3e:	601a      	str	r2, [r3, #0]
  return result;
 8002f40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f44:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002f48:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f4a:	fab3 f383 	clz	r3, r3
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f54:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f60:	f7fe f9be 	bl	80012e0 <HAL_GetTick>
 8002f64:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f68:	e009      	b.n	8002f7e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f6a:	f7fe f9b9 	bl	80012e0 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e144      	b.n	8003208 <HAL_RCC_OscConfig+0x106c>
 8002f7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f82:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002f86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f90:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	fa93 f2a3 	rbit	r2, r3
 8002f9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f9e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002fa2:	601a      	str	r2, [r3, #0]
  return result;
 8002fa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002fac:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fae:	fab3 f383 	clz	r3, r3
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	095b      	lsrs	r3, r3, #5
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	f043 0301 	orr.w	r3, r3, #1
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d102      	bne.n	8002fc8 <HAL_RCC_OscConfig+0xe2c>
 8002fc2:	4b54      	ldr	r3, [pc, #336]	; (8003114 <HAL_RCC_OscConfig+0xf78>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	e027      	b.n	8003018 <HAL_RCC_OscConfig+0xe7c>
 8002fc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fcc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002fd0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fda:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	fa93 f2a3 	rbit	r2, r3
 8002fe4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fe8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002fec:	601a      	str	r2, [r3, #0]
 8002fee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ff2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002ff6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003000:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	fa93 f2a3 	rbit	r2, r3
 800300a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800300e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003012:	601a      	str	r2, [r3, #0]
 8003014:	4b3f      	ldr	r3, [pc, #252]	; (8003114 <HAL_RCC_OscConfig+0xf78>)
 8003016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003018:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800301c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003020:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003024:	6011      	str	r1, [r2, #0]
 8003026:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800302a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800302e:	6812      	ldr	r2, [r2, #0]
 8003030:	fa92 f1a2 	rbit	r1, r2
 8003034:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003038:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800303c:	6011      	str	r1, [r2, #0]
  return result;
 800303e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003042:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003046:	6812      	ldr	r2, [r2, #0]
 8003048:	fab2 f282 	clz	r2, r2
 800304c:	b2d2      	uxtb	r2, r2
 800304e:	f042 0220 	orr.w	r2, r2, #32
 8003052:	b2d2      	uxtb	r2, r2
 8003054:	f002 021f 	and.w	r2, r2, #31
 8003058:	2101      	movs	r1, #1
 800305a:	fa01 f202 	lsl.w	r2, r1, r2
 800305e:	4013      	ands	r3, r2
 8003060:	2b00      	cmp	r3, #0
 8003062:	d082      	beq.n	8002f6a <HAL_RCC_OscConfig+0xdce>
 8003064:	e0cf      	b.n	8003206 <HAL_RCC_OscConfig+0x106a>
 8003066:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800306a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800306e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003072:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003074:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003078:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	fa93 f2a3 	rbit	r2, r3
 8003082:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003086:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800308a:	601a      	str	r2, [r3, #0]
  return result;
 800308c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003090:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003094:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003096:	fab3 f383 	clz	r3, r3
 800309a:	b2db      	uxtb	r3, r3
 800309c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030a0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	461a      	mov	r2, r3
 80030a8:	2300      	movs	r3, #0
 80030aa:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ac:	f7fe f918 	bl	80012e0 <HAL_GetTick>
 80030b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030b4:	e009      	b.n	80030ca <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030b6:	f7fe f913 	bl	80012e0 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e09e      	b.n	8003208 <HAL_RCC_OscConfig+0x106c>
 80030ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ce:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80030d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030dc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	fa93 f2a3 	rbit	r2, r3
 80030e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ea:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80030ee:	601a      	str	r2, [r3, #0]
  return result;
 80030f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80030f8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030fa:	fab3 f383 	clz	r3, r3
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	095b      	lsrs	r3, r3, #5
 8003102:	b2db      	uxtb	r3, r3
 8003104:	f043 0301 	orr.w	r3, r3, #1
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b01      	cmp	r3, #1
 800310c:	d104      	bne.n	8003118 <HAL_RCC_OscConfig+0xf7c>
 800310e:	4b01      	ldr	r3, [pc, #4]	; (8003114 <HAL_RCC_OscConfig+0xf78>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	e029      	b.n	8003168 <HAL_RCC_OscConfig+0xfcc>
 8003114:	40021000 	.word	0x40021000
 8003118:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800311c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003120:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003124:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003126:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800312a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	fa93 f2a3 	rbit	r2, r3
 8003134:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003138:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800313c:	601a      	str	r2, [r3, #0]
 800313e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003142:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003146:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800314a:	601a      	str	r2, [r3, #0]
 800314c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003150:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	fa93 f2a3 	rbit	r2, r3
 800315a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800315e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003162:	601a      	str	r2, [r3, #0]
 8003164:	4b2b      	ldr	r3, [pc, #172]	; (8003214 <HAL_RCC_OscConfig+0x1078>)
 8003166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003168:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800316c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003170:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003174:	6011      	str	r1, [r2, #0]
 8003176:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800317a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800317e:	6812      	ldr	r2, [r2, #0]
 8003180:	fa92 f1a2 	rbit	r1, r2
 8003184:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003188:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800318c:	6011      	str	r1, [r2, #0]
  return result;
 800318e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003192:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003196:	6812      	ldr	r2, [r2, #0]
 8003198:	fab2 f282 	clz	r2, r2
 800319c:	b2d2      	uxtb	r2, r2
 800319e:	f042 0220 	orr.w	r2, r2, #32
 80031a2:	b2d2      	uxtb	r2, r2
 80031a4:	f002 021f 	and.w	r2, r2, #31
 80031a8:	2101      	movs	r1, #1
 80031aa:	fa01 f202 	lsl.w	r2, r1, r2
 80031ae:	4013      	ands	r3, r2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d180      	bne.n	80030b6 <HAL_RCC_OscConfig+0xf1a>
 80031b4:	e027      	b.n	8003206 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	69db      	ldr	r3, [r3, #28]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d101      	bne.n	80031ca <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e01e      	b.n	8003208 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031ca:	4b12      	ldr	r3, [pc, #72]	; (8003214 <HAL_RCC_OscConfig+0x1078>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80031d2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80031d6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6a1b      	ldr	r3, [r3, #32]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d10b      	bne.n	8003202 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80031ea:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80031ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80031fe:	429a      	cmp	r2, r3
 8003200:	d001      	beq.n	8003206 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e000      	b.n	8003208 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	40021000 	.word	0x40021000

08003218 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b09e      	sub	sp, #120	; 0x78
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003222:	2300      	movs	r3, #0
 8003224:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d101      	bne.n	8003230 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e162      	b.n	80034f6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003230:	4b90      	ldr	r3, [pc, #576]	; (8003474 <HAL_RCC_ClockConfig+0x25c>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0307 	and.w	r3, r3, #7
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	429a      	cmp	r2, r3
 800323c:	d910      	bls.n	8003260 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800323e:	4b8d      	ldr	r3, [pc, #564]	; (8003474 <HAL_RCC_ClockConfig+0x25c>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f023 0207 	bic.w	r2, r3, #7
 8003246:	498b      	ldr	r1, [pc, #556]	; (8003474 <HAL_RCC_ClockConfig+0x25c>)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	4313      	orrs	r3, r2
 800324c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800324e:	4b89      	ldr	r3, [pc, #548]	; (8003474 <HAL_RCC_ClockConfig+0x25c>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0307 	and.w	r3, r3, #7
 8003256:	683a      	ldr	r2, [r7, #0]
 8003258:	429a      	cmp	r2, r3
 800325a:	d001      	beq.n	8003260 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e14a      	b.n	80034f6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0302 	and.w	r3, r3, #2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d008      	beq.n	800327e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800326c:	4b82      	ldr	r3, [pc, #520]	; (8003478 <HAL_RCC_ClockConfig+0x260>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	497f      	ldr	r1, [pc, #508]	; (8003478 <HAL_RCC_ClockConfig+0x260>)
 800327a:	4313      	orrs	r3, r2
 800327c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b00      	cmp	r3, #0
 8003288:	f000 80dc 	beq.w	8003444 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d13c      	bne.n	800330e <HAL_RCC_ClockConfig+0xf6>
 8003294:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003298:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800329a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800329c:	fa93 f3a3 	rbit	r3, r3
 80032a0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80032a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032a4:	fab3 f383 	clz	r3, r3
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	095b      	lsrs	r3, r3, #5
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	f043 0301 	orr.w	r3, r3, #1
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d102      	bne.n	80032be <HAL_RCC_ClockConfig+0xa6>
 80032b8:	4b6f      	ldr	r3, [pc, #444]	; (8003478 <HAL_RCC_ClockConfig+0x260>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	e00f      	b.n	80032de <HAL_RCC_ClockConfig+0xc6>
 80032be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032c2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032c6:	fa93 f3a3 	rbit	r3, r3
 80032ca:	667b      	str	r3, [r7, #100]	; 0x64
 80032cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032d0:	663b      	str	r3, [r7, #96]	; 0x60
 80032d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032d4:	fa93 f3a3 	rbit	r3, r3
 80032d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032da:	4b67      	ldr	r3, [pc, #412]	; (8003478 <HAL_RCC_ClockConfig+0x260>)
 80032dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80032e2:	65ba      	str	r2, [r7, #88]	; 0x58
 80032e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032e6:	fa92 f2a2 	rbit	r2, r2
 80032ea:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80032ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80032ee:	fab2 f282 	clz	r2, r2
 80032f2:	b2d2      	uxtb	r2, r2
 80032f4:	f042 0220 	orr.w	r2, r2, #32
 80032f8:	b2d2      	uxtb	r2, r2
 80032fa:	f002 021f 	and.w	r2, r2, #31
 80032fe:	2101      	movs	r1, #1
 8003300:	fa01 f202 	lsl.w	r2, r1, r2
 8003304:	4013      	ands	r3, r2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d17b      	bne.n	8003402 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e0f3      	b.n	80034f6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	2b02      	cmp	r3, #2
 8003314:	d13c      	bne.n	8003390 <HAL_RCC_ClockConfig+0x178>
 8003316:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800331a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800331e:	fa93 f3a3 	rbit	r3, r3
 8003322:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003324:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003326:	fab3 f383 	clz	r3, r3
 800332a:	b2db      	uxtb	r3, r3
 800332c:	095b      	lsrs	r3, r3, #5
 800332e:	b2db      	uxtb	r3, r3
 8003330:	f043 0301 	orr.w	r3, r3, #1
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b01      	cmp	r3, #1
 8003338:	d102      	bne.n	8003340 <HAL_RCC_ClockConfig+0x128>
 800333a:	4b4f      	ldr	r3, [pc, #316]	; (8003478 <HAL_RCC_ClockConfig+0x260>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	e00f      	b.n	8003360 <HAL_RCC_ClockConfig+0x148>
 8003340:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003344:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003346:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003348:	fa93 f3a3 	rbit	r3, r3
 800334c:	647b      	str	r3, [r7, #68]	; 0x44
 800334e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003352:	643b      	str	r3, [r7, #64]	; 0x40
 8003354:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003356:	fa93 f3a3 	rbit	r3, r3
 800335a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800335c:	4b46      	ldr	r3, [pc, #280]	; (8003478 <HAL_RCC_ClockConfig+0x260>)
 800335e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003360:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003364:	63ba      	str	r2, [r7, #56]	; 0x38
 8003366:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003368:	fa92 f2a2 	rbit	r2, r2
 800336c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800336e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003370:	fab2 f282 	clz	r2, r2
 8003374:	b2d2      	uxtb	r2, r2
 8003376:	f042 0220 	orr.w	r2, r2, #32
 800337a:	b2d2      	uxtb	r2, r2
 800337c:	f002 021f 	and.w	r2, r2, #31
 8003380:	2101      	movs	r1, #1
 8003382:	fa01 f202 	lsl.w	r2, r1, r2
 8003386:	4013      	ands	r3, r2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d13a      	bne.n	8003402 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e0b2      	b.n	80034f6 <HAL_RCC_ClockConfig+0x2de>
 8003390:	2302      	movs	r3, #2
 8003392:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003396:	fa93 f3a3 	rbit	r3, r3
 800339a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800339c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800339e:	fab3 f383 	clz	r3, r3
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	095b      	lsrs	r3, r3, #5
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	f043 0301 	orr.w	r3, r3, #1
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d102      	bne.n	80033b8 <HAL_RCC_ClockConfig+0x1a0>
 80033b2:	4b31      	ldr	r3, [pc, #196]	; (8003478 <HAL_RCC_ClockConfig+0x260>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	e00d      	b.n	80033d4 <HAL_RCC_ClockConfig+0x1bc>
 80033b8:	2302      	movs	r3, #2
 80033ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033be:	fa93 f3a3 	rbit	r3, r3
 80033c2:	627b      	str	r3, [r7, #36]	; 0x24
 80033c4:	2302      	movs	r3, #2
 80033c6:	623b      	str	r3, [r7, #32]
 80033c8:	6a3b      	ldr	r3, [r7, #32]
 80033ca:	fa93 f3a3 	rbit	r3, r3
 80033ce:	61fb      	str	r3, [r7, #28]
 80033d0:	4b29      	ldr	r3, [pc, #164]	; (8003478 <HAL_RCC_ClockConfig+0x260>)
 80033d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d4:	2202      	movs	r2, #2
 80033d6:	61ba      	str	r2, [r7, #24]
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	fa92 f2a2 	rbit	r2, r2
 80033de:	617a      	str	r2, [r7, #20]
  return result;
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	fab2 f282 	clz	r2, r2
 80033e6:	b2d2      	uxtb	r2, r2
 80033e8:	f042 0220 	orr.w	r2, r2, #32
 80033ec:	b2d2      	uxtb	r2, r2
 80033ee:	f002 021f 	and.w	r2, r2, #31
 80033f2:	2101      	movs	r1, #1
 80033f4:	fa01 f202 	lsl.w	r2, r1, r2
 80033f8:	4013      	ands	r3, r2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e079      	b.n	80034f6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003402:	4b1d      	ldr	r3, [pc, #116]	; (8003478 <HAL_RCC_ClockConfig+0x260>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f023 0203 	bic.w	r2, r3, #3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	491a      	ldr	r1, [pc, #104]	; (8003478 <HAL_RCC_ClockConfig+0x260>)
 8003410:	4313      	orrs	r3, r2
 8003412:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003414:	f7fd ff64 	bl	80012e0 <HAL_GetTick>
 8003418:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800341a:	e00a      	b.n	8003432 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800341c:	f7fd ff60 	bl	80012e0 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	f241 3288 	movw	r2, #5000	; 0x1388
 800342a:	4293      	cmp	r3, r2
 800342c:	d901      	bls.n	8003432 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e061      	b.n	80034f6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003432:	4b11      	ldr	r3, [pc, #68]	; (8003478 <HAL_RCC_ClockConfig+0x260>)
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f003 020c 	and.w	r2, r3, #12
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	429a      	cmp	r2, r3
 8003442:	d1eb      	bne.n	800341c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003444:	4b0b      	ldr	r3, [pc, #44]	; (8003474 <HAL_RCC_ClockConfig+0x25c>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0307 	and.w	r3, r3, #7
 800344c:	683a      	ldr	r2, [r7, #0]
 800344e:	429a      	cmp	r2, r3
 8003450:	d214      	bcs.n	800347c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003452:	4b08      	ldr	r3, [pc, #32]	; (8003474 <HAL_RCC_ClockConfig+0x25c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f023 0207 	bic.w	r2, r3, #7
 800345a:	4906      	ldr	r1, [pc, #24]	; (8003474 <HAL_RCC_ClockConfig+0x25c>)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	4313      	orrs	r3, r2
 8003460:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003462:	4b04      	ldr	r3, [pc, #16]	; (8003474 <HAL_RCC_ClockConfig+0x25c>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0307 	and.w	r3, r3, #7
 800346a:	683a      	ldr	r2, [r7, #0]
 800346c:	429a      	cmp	r2, r3
 800346e:	d005      	beq.n	800347c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e040      	b.n	80034f6 <HAL_RCC_ClockConfig+0x2de>
 8003474:	40022000 	.word	0x40022000
 8003478:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0304 	and.w	r3, r3, #4
 8003484:	2b00      	cmp	r3, #0
 8003486:	d008      	beq.n	800349a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003488:	4b1d      	ldr	r3, [pc, #116]	; (8003500 <HAL_RCC_ClockConfig+0x2e8>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	491a      	ldr	r1, [pc, #104]	; (8003500 <HAL_RCC_ClockConfig+0x2e8>)
 8003496:	4313      	orrs	r3, r2
 8003498:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0308 	and.w	r3, r3, #8
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d009      	beq.n	80034ba <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034a6:	4b16      	ldr	r3, [pc, #88]	; (8003500 <HAL_RCC_ClockConfig+0x2e8>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	4912      	ldr	r1, [pc, #72]	; (8003500 <HAL_RCC_ClockConfig+0x2e8>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80034ba:	f000 f829 	bl	8003510 <HAL_RCC_GetSysClockFreq>
 80034be:	4601      	mov	r1, r0
 80034c0:	4b0f      	ldr	r3, [pc, #60]	; (8003500 <HAL_RCC_ClockConfig+0x2e8>)
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034c8:	22f0      	movs	r2, #240	; 0xf0
 80034ca:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034cc:	693a      	ldr	r2, [r7, #16]
 80034ce:	fa92 f2a2 	rbit	r2, r2
 80034d2:	60fa      	str	r2, [r7, #12]
  return result;
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	fab2 f282 	clz	r2, r2
 80034da:	b2d2      	uxtb	r2, r2
 80034dc:	40d3      	lsrs	r3, r2
 80034de:	4a09      	ldr	r2, [pc, #36]	; (8003504 <HAL_RCC_ClockConfig+0x2ec>)
 80034e0:	5cd3      	ldrb	r3, [r2, r3]
 80034e2:	fa21 f303 	lsr.w	r3, r1, r3
 80034e6:	4a08      	ldr	r2, [pc, #32]	; (8003508 <HAL_RCC_ClockConfig+0x2f0>)
 80034e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80034ea:	4b08      	ldr	r3, [pc, #32]	; (800350c <HAL_RCC_ClockConfig+0x2f4>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7fd fdc6 	bl	8001080 <HAL_InitTick>
  
  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3778      	adds	r7, #120	; 0x78
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	40021000 	.word	0x40021000
 8003504:	08007744 	.word	0x08007744
 8003508:	20000000 	.word	0x20000000
 800350c:	20000004 	.word	0x20000004

08003510 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003510:	b480      	push	{r7}
 8003512:	b08b      	sub	sp, #44	; 0x2c
 8003514:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003516:	2300      	movs	r3, #0
 8003518:	61fb      	str	r3, [r7, #28]
 800351a:	2300      	movs	r3, #0
 800351c:	61bb      	str	r3, [r7, #24]
 800351e:	2300      	movs	r3, #0
 8003520:	627b      	str	r3, [r7, #36]	; 0x24
 8003522:	2300      	movs	r3, #0
 8003524:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003526:	2300      	movs	r3, #0
 8003528:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800352a:	4b29      	ldr	r3, [pc, #164]	; (80035d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	f003 030c 	and.w	r3, r3, #12
 8003536:	2b04      	cmp	r3, #4
 8003538:	d002      	beq.n	8003540 <HAL_RCC_GetSysClockFreq+0x30>
 800353a:	2b08      	cmp	r3, #8
 800353c:	d003      	beq.n	8003546 <HAL_RCC_GetSysClockFreq+0x36>
 800353e:	e03c      	b.n	80035ba <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003540:	4b24      	ldr	r3, [pc, #144]	; (80035d4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003542:	623b      	str	r3, [r7, #32]
      break;
 8003544:	e03c      	b.n	80035c0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800354c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003550:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003552:	68ba      	ldr	r2, [r7, #8]
 8003554:	fa92 f2a2 	rbit	r2, r2
 8003558:	607a      	str	r2, [r7, #4]
  return result;
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	fab2 f282 	clz	r2, r2
 8003560:	b2d2      	uxtb	r2, r2
 8003562:	40d3      	lsrs	r3, r2
 8003564:	4a1c      	ldr	r2, [pc, #112]	; (80035d8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003566:	5cd3      	ldrb	r3, [r2, r3]
 8003568:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800356a:	4b19      	ldr	r3, [pc, #100]	; (80035d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800356c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356e:	f003 030f 	and.w	r3, r3, #15
 8003572:	220f      	movs	r2, #15
 8003574:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	fa92 f2a2 	rbit	r2, r2
 800357c:	60fa      	str	r2, [r7, #12]
  return result;
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	fab2 f282 	clz	r2, r2
 8003584:	b2d2      	uxtb	r2, r2
 8003586:	40d3      	lsrs	r3, r2
 8003588:	4a14      	ldr	r2, [pc, #80]	; (80035dc <HAL_RCC_GetSysClockFreq+0xcc>)
 800358a:	5cd3      	ldrb	r3, [r2, r3]
 800358c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d008      	beq.n	80035aa <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003598:	4a0e      	ldr	r2, [pc, #56]	; (80035d4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	fbb2 f2f3 	udiv	r2, r2, r3
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	fb02 f303 	mul.w	r3, r2, r3
 80035a6:	627b      	str	r3, [r7, #36]	; 0x24
 80035a8:	e004      	b.n	80035b4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	4a0c      	ldr	r2, [pc, #48]	; (80035e0 <HAL_RCC_GetSysClockFreq+0xd0>)
 80035ae:	fb02 f303 	mul.w	r3, r2, r3
 80035b2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80035b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b6:	623b      	str	r3, [r7, #32]
      break;
 80035b8:	e002      	b.n	80035c0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035ba:	4b06      	ldr	r3, [pc, #24]	; (80035d4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80035bc:	623b      	str	r3, [r7, #32]
      break;
 80035be:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035c0:	6a3b      	ldr	r3, [r7, #32]
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	372c      	adds	r7, #44	; 0x2c
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	40021000 	.word	0x40021000
 80035d4:	007a1200 	.word	0x007a1200
 80035d8:	0800775c 	.word	0x0800775c
 80035dc:	0800776c 	.word	0x0800776c
 80035e0:	003d0900 	.word	0x003d0900

080035e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035e4:	b480      	push	{r7}
 80035e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035e8:	4b03      	ldr	r3, [pc, #12]	; (80035f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80035ea:	681b      	ldr	r3, [r3, #0]
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	20000000 	.word	0x20000000

080035fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003602:	f7ff ffef 	bl	80035e4 <HAL_RCC_GetHCLKFreq>
 8003606:	4601      	mov	r1, r0
 8003608:	4b0b      	ldr	r3, [pc, #44]	; (8003638 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003610:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003614:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	fa92 f2a2 	rbit	r2, r2
 800361c:	603a      	str	r2, [r7, #0]
  return result;
 800361e:	683a      	ldr	r2, [r7, #0]
 8003620:	fab2 f282 	clz	r2, r2
 8003624:	b2d2      	uxtb	r2, r2
 8003626:	40d3      	lsrs	r3, r2
 8003628:	4a04      	ldr	r2, [pc, #16]	; (800363c <HAL_RCC_GetPCLK1Freq+0x40>)
 800362a:	5cd3      	ldrb	r3, [r2, r3]
 800362c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003630:	4618      	mov	r0, r3
 8003632:	3708      	adds	r7, #8
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}
 8003638:	40021000 	.word	0x40021000
 800363c:	08007754 	.word	0x08007754

08003640 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003646:	f7ff ffcd 	bl	80035e4 <HAL_RCC_GetHCLKFreq>
 800364a:	4601      	mov	r1, r0
 800364c:	4b0b      	ldr	r3, [pc, #44]	; (800367c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003654:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003658:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	fa92 f2a2 	rbit	r2, r2
 8003660:	603a      	str	r2, [r7, #0]
  return result;
 8003662:	683a      	ldr	r2, [r7, #0]
 8003664:	fab2 f282 	clz	r2, r2
 8003668:	b2d2      	uxtb	r2, r2
 800366a:	40d3      	lsrs	r3, r2
 800366c:	4a04      	ldr	r2, [pc, #16]	; (8003680 <HAL_RCC_GetPCLK2Freq+0x40>)
 800366e:	5cd3      	ldrb	r3, [r2, r3]
 8003670:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003674:	4618      	mov	r0, r3
 8003676:	3708      	adds	r7, #8
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	40021000 	.word	0x40021000
 8003680:	08007754 	.word	0x08007754

08003684 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	220f      	movs	r2, #15
 8003692:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003694:	4b12      	ldr	r3, [pc, #72]	; (80036e0 <HAL_RCC_GetClockConfig+0x5c>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f003 0203 	and.w	r2, r3, #3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80036a0:	4b0f      	ldr	r3, [pc, #60]	; (80036e0 <HAL_RCC_GetClockConfig+0x5c>)
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80036ac:	4b0c      	ldr	r3, [pc, #48]	; (80036e0 <HAL_RCC_GetClockConfig+0x5c>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80036b8:	4b09      	ldr	r3, [pc, #36]	; (80036e0 <HAL_RCC_GetClockConfig+0x5c>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	08db      	lsrs	r3, r3, #3
 80036be:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80036c6:	4b07      	ldr	r3, [pc, #28]	; (80036e4 <HAL_RCC_GetClockConfig+0x60>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0207 	and.w	r2, r3, #7
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	601a      	str	r2, [r3, #0]
}
 80036d2:	bf00      	nop
 80036d4:	370c      	adds	r7, #12
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	40021000 	.word	0x40021000
 80036e4:	40022000 	.word	0x40022000

080036e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b092      	sub	sp, #72	; 0x48
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036f0:	2300      	movs	r3, #0
 80036f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80036f4:	2300      	movs	r3, #0
 80036f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80036f8:	2300      	movs	r3, #0
 80036fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003706:	2b00      	cmp	r3, #0
 8003708:	f000 80d4 	beq.w	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800370c:	4b4e      	ldr	r3, [pc, #312]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800370e:	69db      	ldr	r3, [r3, #28]
 8003710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d10e      	bne.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003718:	4b4b      	ldr	r3, [pc, #300]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800371a:	69db      	ldr	r3, [r3, #28]
 800371c:	4a4a      	ldr	r2, [pc, #296]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800371e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003722:	61d3      	str	r3, [r2, #28]
 8003724:	4b48      	ldr	r3, [pc, #288]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003726:	69db      	ldr	r3, [r3, #28]
 8003728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800372c:	60bb      	str	r3, [r7, #8]
 800372e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003730:	2301      	movs	r3, #1
 8003732:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003736:	4b45      	ldr	r3, [pc, #276]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373e:	2b00      	cmp	r3, #0
 8003740:	d118      	bne.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003742:	4b42      	ldr	r3, [pc, #264]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a41      	ldr	r2, [pc, #260]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800374c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800374e:	f7fd fdc7 	bl	80012e0 <HAL_GetTick>
 8003752:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003754:	e008      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003756:	f7fd fdc3 	bl	80012e0 <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	2b64      	cmp	r3, #100	; 0x64
 8003762:	d901      	bls.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e13c      	b.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003768:	4b38      	ldr	r3, [pc, #224]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003770:	2b00      	cmp	r3, #0
 8003772:	d0f0      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003774:	4b34      	ldr	r3, [pc, #208]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003776:	6a1b      	ldr	r3, [r3, #32]
 8003778:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800377c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800377e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003780:	2b00      	cmp	r3, #0
 8003782:	f000 8084 	beq.w	800388e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800378e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003790:	429a      	cmp	r2, r3
 8003792:	d07c      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003794:	4b2c      	ldr	r3, [pc, #176]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003796:	6a1b      	ldr	r3, [r3, #32]
 8003798:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800379c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800379e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a6:	fa93 f3a3 	rbit	r3, r3
 80037aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80037ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037ae:	fab3 f383 	clz	r3, r3
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	461a      	mov	r2, r3
 80037b6:	4b26      	ldr	r3, [pc, #152]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80037b8:	4413      	add	r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	461a      	mov	r2, r3
 80037be:	2301      	movs	r3, #1
 80037c0:	6013      	str	r3, [r2, #0]
 80037c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ca:	fa93 f3a3 	rbit	r3, r3
 80037ce:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80037d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037d2:	fab3 f383 	clz	r3, r3
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	461a      	mov	r2, r3
 80037da:	4b1d      	ldr	r3, [pc, #116]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80037dc:	4413      	add	r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	461a      	mov	r2, r3
 80037e2:	2300      	movs	r3, #0
 80037e4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80037e6:	4a18      	ldr	r2, [pc, #96]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037ea:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80037ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d04b      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f6:	f7fd fd73 	bl	80012e0 <HAL_GetTick>
 80037fa:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037fc:	e00a      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037fe:	f7fd fd6f 	bl	80012e0 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	f241 3288 	movw	r2, #5000	; 0x1388
 800380c:	4293      	cmp	r3, r2
 800380e:	d901      	bls.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e0e6      	b.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8003814:	2302      	movs	r3, #2
 8003816:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800381a:	fa93 f3a3 	rbit	r3, r3
 800381e:	627b      	str	r3, [r7, #36]	; 0x24
 8003820:	2302      	movs	r3, #2
 8003822:	623b      	str	r3, [r7, #32]
 8003824:	6a3b      	ldr	r3, [r7, #32]
 8003826:	fa93 f3a3 	rbit	r3, r3
 800382a:	61fb      	str	r3, [r7, #28]
  return result;
 800382c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800382e:	fab3 f383 	clz	r3, r3
 8003832:	b2db      	uxtb	r3, r3
 8003834:	095b      	lsrs	r3, r3, #5
 8003836:	b2db      	uxtb	r3, r3
 8003838:	f043 0302 	orr.w	r3, r3, #2
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b02      	cmp	r3, #2
 8003840:	d108      	bne.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003842:	4b01      	ldr	r3, [pc, #4]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003844:	6a1b      	ldr	r3, [r3, #32]
 8003846:	e00d      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003848:	40021000 	.word	0x40021000
 800384c:	40007000 	.word	0x40007000
 8003850:	10908100 	.word	0x10908100
 8003854:	2302      	movs	r3, #2
 8003856:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	fa93 f3a3 	rbit	r3, r3
 800385e:	617b      	str	r3, [r7, #20]
 8003860:	4b62      	ldr	r3, [pc, #392]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003864:	2202      	movs	r2, #2
 8003866:	613a      	str	r2, [r7, #16]
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	fa92 f2a2 	rbit	r2, r2
 800386e:	60fa      	str	r2, [r7, #12]
  return result;
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	fab2 f282 	clz	r2, r2
 8003876:	b2d2      	uxtb	r2, r2
 8003878:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800387c:	b2d2      	uxtb	r2, r2
 800387e:	f002 021f 	and.w	r2, r2, #31
 8003882:	2101      	movs	r1, #1
 8003884:	fa01 f202 	lsl.w	r2, r1, r2
 8003888:	4013      	ands	r3, r2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d0b7      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800388e:	4b57      	ldr	r3, [pc, #348]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	4954      	ldr	r1, [pc, #336]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800389c:	4313      	orrs	r3, r2
 800389e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80038a0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d105      	bne.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038a8:	4b50      	ldr	r3, [pc, #320]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80038aa:	69db      	ldr	r3, [r3, #28]
 80038ac:	4a4f      	ldr	r2, [pc, #316]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80038ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038b2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0301 	and.w	r3, r3, #1
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d008      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038c0:	4b4a      	ldr	r3, [pc, #296]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80038c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c4:	f023 0203 	bic.w	r2, r3, #3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	4947      	ldr	r1, [pc, #284]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0320 	and.w	r3, r3, #32
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d008      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038de:	4b43      	ldr	r3, [pc, #268]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80038e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e2:	f023 0210 	bic.w	r2, r3, #16
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	4940      	ldr	r1, [pc, #256]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d008      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038fc:	4b3b      	ldr	r3, [pc, #236]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80038fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003900:	f023 0220 	bic.w	r2, r3, #32
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	4938      	ldr	r1, [pc, #224]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800390a:	4313      	orrs	r3, r2
 800390c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d008      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800391a:	4b34      	ldr	r3, [pc, #208]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800391c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	4931      	ldr	r1, [pc, #196]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003928:	4313      	orrs	r3, r2
 800392a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003934:	2b00      	cmp	r3, #0
 8003936:	d008      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003938:	4b2c      	ldr	r3, [pc, #176]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	69db      	ldr	r3, [r3, #28]
 8003944:	4929      	ldr	r1, [pc, #164]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003946:	4313      	orrs	r3, r2
 8003948:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003952:	2b00      	cmp	r3, #0
 8003954:	d008      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003956:	4b25      	ldr	r3, [pc, #148]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	4922      	ldr	r1, [pc, #136]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003964:	4313      	orrs	r3, r2
 8003966:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d008      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003974:	4b1d      	ldr	r3, [pc, #116]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003978:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	491a      	ldr	r1, [pc, #104]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003982:	4313      	orrs	r3, r2
 8003984:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d008      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003992:	4b16      	ldr	r3, [pc, #88]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003996:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399e:	4913      	ldr	r1, [pc, #76]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d008      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80039b0:	4b0e      	ldr	r3, [pc, #56]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80039b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039bc:	490b      	ldr	r1, [pc, #44]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d008      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80039ce:	4b07      	ldr	r3, [pc, #28]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80039d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039da:	4904      	ldr	r1, [pc, #16]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3748      	adds	r7, #72	; 0x48
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	40021000 	.word	0x40021000

080039f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d101      	bne.n	8003a02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e09d      	b.n	8003b3e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d108      	bne.n	8003a1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a12:	d009      	beq.n	8003a28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	61da      	str	r2, [r3, #28]
 8003a1a:	e005      	b.n	8003a28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d106      	bne.n	8003a48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f7fd fa94 	bl	8000f70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a5e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a68:	d902      	bls.n	8003a70 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	60fb      	str	r3, [r7, #12]
 8003a6e:	e002      	b.n	8003a76 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003a70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a74:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003a7e:	d007      	beq.n	8003a90 <HAL_SPI_Init+0xa0>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a88:	d002      	beq.n	8003a90 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	431a      	orrs	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	695b      	ldr	r3, [r3, #20]
 8003ab0:	f003 0301 	and.w	r3, r3, #1
 8003ab4:	431a      	orrs	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003abe:	431a      	orrs	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	69db      	ldr	r3, [r3, #28]
 8003ac4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ac8:	431a      	orrs	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad2:	ea42 0103 	orr.w	r1, r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ada:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	0c1b      	lsrs	r3, r3, #16
 8003aec:	f003 0204 	and.w	r2, r3, #4
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af4:	f003 0310 	and.w	r3, r3, #16
 8003af8:	431a      	orrs	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003afe:	f003 0308 	and.w	r3, r3, #8
 8003b02:	431a      	orrs	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003b0c:	ea42 0103 	orr.w	r1, r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	69da      	ldr	r2, [r3, #28]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b2c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b082      	sub	sp, #8
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d101      	bne.n	8003b58 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e049      	b.n	8003bec <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d106      	bne.n	8003b72 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 f841 	bl	8003bf4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2202      	movs	r2, #2
 8003b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	3304      	adds	r3, #4
 8003b82:	4619      	mov	r1, r3
 8003b84:	4610      	mov	r0, r2
 8003b86:	f000 f9db 	bl	8003f40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3708      	adds	r7, #8
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d001      	beq.n	8003c20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e03b      	b.n	8003c98 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2202      	movs	r2, #2
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68da      	ldr	r2, [r3, #12]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f042 0201 	orr.w	r2, r2, #1
 8003c36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a19      	ldr	r2, [pc, #100]	; (8003ca4 <HAL_TIM_Base_Start_IT+0x9c>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d009      	beq.n	8003c56 <HAL_TIM_Base_Start_IT+0x4e>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c4a:	d004      	beq.n	8003c56 <HAL_TIM_Base_Start_IT+0x4e>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a15      	ldr	r2, [pc, #84]	; (8003ca8 <HAL_TIM_Base_Start_IT+0xa0>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d115      	bne.n	8003c82 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	689a      	ldr	r2, [r3, #8]
 8003c5c:	4b13      	ldr	r3, [pc, #76]	; (8003cac <HAL_TIM_Base_Start_IT+0xa4>)
 8003c5e:	4013      	ands	r3, r2
 8003c60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2b06      	cmp	r3, #6
 8003c66:	d015      	beq.n	8003c94 <HAL_TIM_Base_Start_IT+0x8c>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c6e:	d011      	beq.n	8003c94 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f042 0201 	orr.w	r2, r2, #1
 8003c7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c80:	e008      	b.n	8003c94 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f042 0201 	orr.w	r2, r2, #1
 8003c90:	601a      	str	r2, [r3, #0]
 8003c92:	e000      	b.n	8003c96 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c94:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c96:	2300      	movs	r3, #0
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3714      	adds	r7, #20
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr
 8003ca4:	40012c00 	.word	0x40012c00
 8003ca8:	40014000 	.word	0x40014000
 8003cac:	00010007 	.word	0x00010007

08003cb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d122      	bne.n	8003d0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d11b      	bne.n	8003d0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f06f 0202 	mvn.w	r2, #2
 8003cdc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	f003 0303 	and.w	r3, r3, #3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d003      	beq.n	8003cfa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 f905 	bl	8003f02 <HAL_TIM_IC_CaptureCallback>
 8003cf8:	e005      	b.n	8003d06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f8f7 	bl	8003eee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f000 f908 	bl	8003f16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	f003 0304 	and.w	r3, r3, #4
 8003d16:	2b04      	cmp	r3, #4
 8003d18:	d122      	bne.n	8003d60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	f003 0304 	and.w	r3, r3, #4
 8003d24:	2b04      	cmp	r3, #4
 8003d26:	d11b      	bne.n	8003d60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f06f 0204 	mvn.w	r2, #4
 8003d30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2202      	movs	r2, #2
 8003d36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d003      	beq.n	8003d4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 f8db 	bl	8003f02 <HAL_TIM_IC_CaptureCallback>
 8003d4c:	e005      	b.n	8003d5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 f8cd 	bl	8003eee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 f8de 	bl	8003f16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	f003 0308 	and.w	r3, r3, #8
 8003d6a:	2b08      	cmp	r3, #8
 8003d6c:	d122      	bne.n	8003db4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	f003 0308 	and.w	r3, r3, #8
 8003d78:	2b08      	cmp	r3, #8
 8003d7a:	d11b      	bne.n	8003db4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f06f 0208 	mvn.w	r2, #8
 8003d84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2204      	movs	r2, #4
 8003d8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	f003 0303 	and.w	r3, r3, #3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d003      	beq.n	8003da2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 f8b1 	bl	8003f02 <HAL_TIM_IC_CaptureCallback>
 8003da0:	e005      	b.n	8003dae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 f8a3 	bl	8003eee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 f8b4 	bl	8003f16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	f003 0310 	and.w	r3, r3, #16
 8003dbe:	2b10      	cmp	r3, #16
 8003dc0:	d122      	bne.n	8003e08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	f003 0310 	and.w	r3, r3, #16
 8003dcc:	2b10      	cmp	r3, #16
 8003dce:	d11b      	bne.n	8003e08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f06f 0210 	mvn.w	r2, #16
 8003dd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2208      	movs	r2, #8
 8003dde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	69db      	ldr	r3, [r3, #28]
 8003de6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 f887 	bl	8003f02 <HAL_TIM_IC_CaptureCallback>
 8003df4:	e005      	b.n	8003e02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 f879 	bl	8003eee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f000 f88a 	bl	8003f16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	f003 0301 	and.w	r3, r3, #1
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d10e      	bne.n	8003e34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	f003 0301 	and.w	r3, r3, #1
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d107      	bne.n	8003e34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f06f 0201 	mvn.w	r2, #1
 8003e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f7fd f822 	bl	8000e78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e3e:	2b80      	cmp	r3, #128	; 0x80
 8003e40:	d10e      	bne.n	8003e60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e4c:	2b80      	cmp	r3, #128	; 0x80
 8003e4e:	d107      	bne.n	8003e60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f8e8 	bl	8004030 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e6e:	d10e      	bne.n	8003e8e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e7a:	2b80      	cmp	r3, #128	; 0x80
 8003e7c:	d107      	bne.n	8003e8e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003e86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 f8db 	bl	8004044 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e98:	2b40      	cmp	r3, #64	; 0x40
 8003e9a:	d10e      	bne.n	8003eba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea6:	2b40      	cmp	r3, #64	; 0x40
 8003ea8:	d107      	bne.n	8003eba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003eb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 f838 	bl	8003f2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	f003 0320 	and.w	r3, r3, #32
 8003ec4:	2b20      	cmp	r3, #32
 8003ec6:	d10e      	bne.n	8003ee6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	f003 0320 	and.w	r3, r3, #32
 8003ed2:	2b20      	cmp	r3, #32
 8003ed4:	d107      	bne.n	8003ee6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f06f 0220 	mvn.w	r2, #32
 8003ede:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 f89b 	bl	800401c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ee6:	bf00      	nop
 8003ee8:	3708      	adds	r7, #8
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ef6:	bf00      	nop
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr

08003f16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f16:	b480      	push	{r7}
 8003f18:	b083      	sub	sp, #12
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f1e:	bf00      	nop
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr

08003f2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	b083      	sub	sp, #12
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f32:	bf00      	nop
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
	...

08003f40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b085      	sub	sp, #20
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a2e      	ldr	r2, [pc, #184]	; (800400c <TIM_Base_SetConfig+0xcc>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d003      	beq.n	8003f60 <TIM_Base_SetConfig+0x20>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f5e:	d108      	bne.n	8003f72 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a25      	ldr	r2, [pc, #148]	; (800400c <TIM_Base_SetConfig+0xcc>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d00f      	beq.n	8003f9a <TIM_Base_SetConfig+0x5a>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f80:	d00b      	beq.n	8003f9a <TIM_Base_SetConfig+0x5a>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a22      	ldr	r2, [pc, #136]	; (8004010 <TIM_Base_SetConfig+0xd0>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d007      	beq.n	8003f9a <TIM_Base_SetConfig+0x5a>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a21      	ldr	r2, [pc, #132]	; (8004014 <TIM_Base_SetConfig+0xd4>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d003      	beq.n	8003f9a <TIM_Base_SetConfig+0x5a>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a20      	ldr	r2, [pc, #128]	; (8004018 <TIM_Base_SetConfig+0xd8>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d108      	bne.n	8003fac <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fa0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	689a      	ldr	r2, [r3, #8]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a0e      	ldr	r2, [pc, #56]	; (800400c <TIM_Base_SetConfig+0xcc>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d00b      	beq.n	8003ff0 <TIM_Base_SetConfig+0xb0>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a0d      	ldr	r2, [pc, #52]	; (8004010 <TIM_Base_SetConfig+0xd0>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d007      	beq.n	8003ff0 <TIM_Base_SetConfig+0xb0>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a0c      	ldr	r2, [pc, #48]	; (8004014 <TIM_Base_SetConfig+0xd4>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d003      	beq.n	8003ff0 <TIM_Base_SetConfig+0xb0>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a0b      	ldr	r2, [pc, #44]	; (8004018 <TIM_Base_SetConfig+0xd8>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d103      	bne.n	8003ff8 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	691a      	ldr	r2, [r3, #16]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	615a      	str	r2, [r3, #20]
}
 8003ffe:	bf00      	nop
 8004000:	3714      	adds	r7, #20
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	40012c00 	.word	0x40012c00
 8004010:	40014000 	.word	0x40014000
 8004014:	40014400 	.word	0x40014400
 8004018:	40014800 	.word	0x40014800

0800401c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004038:	bf00      	nop
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800404c:	bf00      	nop
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d101      	bne.n	800406a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e040      	b.n	80040ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800406e:	2b00      	cmp	r3, #0
 8004070:	d106      	bne.n	8004080 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f7fc ffbc 	bl	8000ff8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2224      	movs	r2, #36	; 0x24
 8004084:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f022 0201 	bic.w	r2, r2, #1
 8004094:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f980 	bl	800439c <UART_SetConfig>
 800409c:	4603      	mov	r3, r0
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d101      	bne.n	80040a6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e022      	b.n	80040ec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d002      	beq.n	80040b4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 faaa 	bl	8004608 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	685a      	ldr	r2, [r3, #4]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	689a      	ldr	r2, [r3, #8]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f042 0201 	orr.w	r2, r2, #1
 80040e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 fb31 	bl	800474c <UART_CheckIdleState>
 80040ea:	4603      	mov	r3, r0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3708      	adds	r7, #8
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b08a      	sub	sp, #40	; 0x28
 80040f8:	af02      	add	r7, sp, #8
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	603b      	str	r3, [r7, #0]
 8004100:	4613      	mov	r3, r2
 8004102:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004108:	2b20      	cmp	r3, #32
 800410a:	d178      	bne.n	80041fe <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d002      	beq.n	8004118 <HAL_UART_Transmit+0x24>
 8004112:	88fb      	ldrh	r3, [r7, #6]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d101      	bne.n	800411c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e071      	b.n	8004200 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2200      	movs	r2, #0
 8004120:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2221      	movs	r2, #33	; 0x21
 8004128:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800412a:	f7fd f8d9 	bl	80012e0 <HAL_GetTick>
 800412e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	88fa      	ldrh	r2, [r7, #6]
 8004134:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	88fa      	ldrh	r2, [r7, #6]
 800413c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004148:	d108      	bne.n	800415c <HAL_UART_Transmit+0x68>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d104      	bne.n	800415c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004152:	2300      	movs	r3, #0
 8004154:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	61bb      	str	r3, [r7, #24]
 800415a:	e003      	b.n	8004164 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004160:	2300      	movs	r3, #0
 8004162:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004164:	e030      	b.n	80041c8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	9300      	str	r3, [sp, #0]
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	2200      	movs	r2, #0
 800416e:	2180      	movs	r1, #128	; 0x80
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	f000 fb93 	bl	800489c <UART_WaitOnFlagUntilTimeout>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d004      	beq.n	8004186 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2220      	movs	r2, #32
 8004180:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e03c      	b.n	8004200 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d10b      	bne.n	80041a4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	881a      	ldrh	r2, [r3, #0]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004198:	b292      	uxth	r2, r2
 800419a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	3302      	adds	r3, #2
 80041a0:	61bb      	str	r3, [r7, #24]
 80041a2:	e008      	b.n	80041b6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	781a      	ldrb	r2, [r3, #0]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	b292      	uxth	r2, r2
 80041ae:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	3301      	adds	r3, #1
 80041b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80041bc:	b29b      	uxth	r3, r3
 80041be:	3b01      	subs	r3, #1
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d1c8      	bne.n	8004166 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	9300      	str	r3, [sp, #0]
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	2200      	movs	r2, #0
 80041dc:	2140      	movs	r1, #64	; 0x40
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f000 fb5c 	bl	800489c <UART_WaitOnFlagUntilTimeout>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d004      	beq.n	80041f4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2220      	movs	r2, #32
 80041ee:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e005      	b.n	8004200 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2220      	movs	r2, #32
 80041f8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80041fa:	2300      	movs	r3, #0
 80041fc:	e000      	b.n	8004200 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80041fe:	2302      	movs	r3, #2
  }
}
 8004200:	4618      	mov	r0, r3
 8004202:	3720      	adds	r7, #32
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b08a      	sub	sp, #40	; 0x28
 800420c:	af02      	add	r7, sp, #8
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	603b      	str	r3, [r7, #0]
 8004214:	4613      	mov	r3, r2
 8004216:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800421e:	2b20      	cmp	r3, #32
 8004220:	f040 80b6 	bne.w	8004390 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d002      	beq.n	8004230 <HAL_UART_Receive+0x28>
 800422a:	88fb      	ldrh	r3, [r7, #6]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d101      	bne.n	8004234 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e0ae      	b.n	8004392 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2222      	movs	r2, #34	; 0x22
 8004240:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800424a:	f7fd f849 	bl	80012e0 <HAL_GetTick>
 800424e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	88fa      	ldrh	r2, [r7, #6]
 8004254:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	88fa      	ldrh	r2, [r7, #6]
 800425c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004268:	d10e      	bne.n	8004288 <HAL_UART_Receive+0x80>
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d105      	bne.n	800427e <HAL_UART_Receive+0x76>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004278:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800427c:	e02d      	b.n	80042da <HAL_UART_Receive+0xd2>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	22ff      	movs	r2, #255	; 0xff
 8004282:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004286:	e028      	b.n	80042da <HAL_UART_Receive+0xd2>
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d10d      	bne.n	80042ac <HAL_UART_Receive+0xa4>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d104      	bne.n	80042a2 <HAL_UART_Receive+0x9a>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	22ff      	movs	r2, #255	; 0xff
 800429c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80042a0:	e01b      	b.n	80042da <HAL_UART_Receive+0xd2>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	227f      	movs	r2, #127	; 0x7f
 80042a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80042aa:	e016      	b.n	80042da <HAL_UART_Receive+0xd2>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042b4:	d10d      	bne.n	80042d2 <HAL_UART_Receive+0xca>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d104      	bne.n	80042c8 <HAL_UART_Receive+0xc0>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	227f      	movs	r2, #127	; 0x7f
 80042c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80042c6:	e008      	b.n	80042da <HAL_UART_Receive+0xd2>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	223f      	movs	r2, #63	; 0x3f
 80042cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80042d0:	e003      	b.n	80042da <HAL_UART_Receive+0xd2>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80042e0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042ea:	d108      	bne.n	80042fe <HAL_UART_Receive+0xf6>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d104      	bne.n	80042fe <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80042f4:	2300      	movs	r3, #0
 80042f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	61bb      	str	r3, [r7, #24]
 80042fc:	e003      	b.n	8004306 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004302:	2300      	movs	r3, #0
 8004304:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004306:	e037      	b.n	8004378 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	9300      	str	r3, [sp, #0]
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	2200      	movs	r2, #0
 8004310:	2120      	movs	r1, #32
 8004312:	68f8      	ldr	r0, [r7, #12]
 8004314:	f000 fac2 	bl	800489c <UART_WaitOnFlagUntilTimeout>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d005      	beq.n	800432a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2220      	movs	r2, #32
 8004322:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e033      	b.n	8004392 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d10c      	bne.n	800434a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004336:	b29a      	uxth	r2, r3
 8004338:	8a7b      	ldrh	r3, [r7, #18]
 800433a:	4013      	ands	r3, r2
 800433c:	b29a      	uxth	r2, r3
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	3302      	adds	r3, #2
 8004346:	61bb      	str	r3, [r7, #24]
 8004348:	e00d      	b.n	8004366 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004350:	b29b      	uxth	r3, r3
 8004352:	b2da      	uxtb	r2, r3
 8004354:	8a7b      	ldrh	r3, [r7, #18]
 8004356:	b2db      	uxtb	r3, r3
 8004358:	4013      	ands	r3, r2
 800435a:	b2da      	uxtb	r2, r3
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	3301      	adds	r3, #1
 8004364:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800436c:	b29b      	uxth	r3, r3
 800436e:	3b01      	subs	r3, #1
 8004370:	b29a      	uxth	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800437e:	b29b      	uxth	r3, r3
 8004380:	2b00      	cmp	r3, #0
 8004382:	d1c1      	bne.n	8004308 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2220      	movs	r2, #32
 8004388:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800438c:	2300      	movs	r3, #0
 800438e:	e000      	b.n	8004392 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8004390:	2302      	movs	r3, #2
  }
}
 8004392:	4618      	mov	r0, r3
 8004394:	3720      	adds	r7, #32
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
	...

0800439c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b088      	sub	sp, #32
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80043a4:	2300      	movs	r3, #0
 80043a6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	689a      	ldr	r2, [r3, #8]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	431a      	orrs	r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	431a      	orrs	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	69db      	ldr	r3, [r3, #28]
 80043bc:	4313      	orrs	r3, r2
 80043be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	4b8a      	ldr	r3, [pc, #552]	; (80045f0 <UART_SetConfig+0x254>)
 80043c8:	4013      	ands	r3, r2
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	6812      	ldr	r2, [r2, #0]
 80043ce:	6979      	ldr	r1, [r7, #20]
 80043d0:	430b      	orrs	r3, r1
 80043d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68da      	ldr	r2, [r3, #12]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	430a      	orrs	r2, r1
 80043e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a1b      	ldr	r3, [r3, #32]
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	697a      	ldr	r2, [r7, #20]
 800440a:	430a      	orrs	r2, r1
 800440c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a78      	ldr	r2, [pc, #480]	; (80045f4 <UART_SetConfig+0x258>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d120      	bne.n	800445a <UART_SetConfig+0xbe>
 8004418:	4b77      	ldr	r3, [pc, #476]	; (80045f8 <UART_SetConfig+0x25c>)
 800441a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441c:	f003 0303 	and.w	r3, r3, #3
 8004420:	2b03      	cmp	r3, #3
 8004422:	d817      	bhi.n	8004454 <UART_SetConfig+0xb8>
 8004424:	a201      	add	r2, pc, #4	; (adr r2, 800442c <UART_SetConfig+0x90>)
 8004426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800442a:	bf00      	nop
 800442c:	0800443d 	.word	0x0800443d
 8004430:	08004449 	.word	0x08004449
 8004434:	0800444f 	.word	0x0800444f
 8004438:	08004443 	.word	0x08004443
 800443c:	2300      	movs	r3, #0
 800443e:	77fb      	strb	r3, [r7, #31]
 8004440:	e01d      	b.n	800447e <UART_SetConfig+0xe2>
 8004442:	2302      	movs	r3, #2
 8004444:	77fb      	strb	r3, [r7, #31]
 8004446:	e01a      	b.n	800447e <UART_SetConfig+0xe2>
 8004448:	2304      	movs	r3, #4
 800444a:	77fb      	strb	r3, [r7, #31]
 800444c:	e017      	b.n	800447e <UART_SetConfig+0xe2>
 800444e:	2308      	movs	r3, #8
 8004450:	77fb      	strb	r3, [r7, #31]
 8004452:	e014      	b.n	800447e <UART_SetConfig+0xe2>
 8004454:	2310      	movs	r3, #16
 8004456:	77fb      	strb	r3, [r7, #31]
 8004458:	e011      	b.n	800447e <UART_SetConfig+0xe2>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a67      	ldr	r2, [pc, #412]	; (80045fc <UART_SetConfig+0x260>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d102      	bne.n	800446a <UART_SetConfig+0xce>
 8004464:	2300      	movs	r3, #0
 8004466:	77fb      	strb	r3, [r7, #31]
 8004468:	e009      	b.n	800447e <UART_SetConfig+0xe2>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a64      	ldr	r2, [pc, #400]	; (8004600 <UART_SetConfig+0x264>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d102      	bne.n	800447a <UART_SetConfig+0xde>
 8004474:	2300      	movs	r3, #0
 8004476:	77fb      	strb	r3, [r7, #31]
 8004478:	e001      	b.n	800447e <UART_SetConfig+0xe2>
 800447a:	2310      	movs	r3, #16
 800447c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	69db      	ldr	r3, [r3, #28]
 8004482:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004486:	d15a      	bne.n	800453e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004488:	7ffb      	ldrb	r3, [r7, #31]
 800448a:	2b08      	cmp	r3, #8
 800448c:	d827      	bhi.n	80044de <UART_SetConfig+0x142>
 800448e:	a201      	add	r2, pc, #4	; (adr r2, 8004494 <UART_SetConfig+0xf8>)
 8004490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004494:	080044b9 	.word	0x080044b9
 8004498:	080044c1 	.word	0x080044c1
 800449c:	080044c9 	.word	0x080044c9
 80044a0:	080044df 	.word	0x080044df
 80044a4:	080044cf 	.word	0x080044cf
 80044a8:	080044df 	.word	0x080044df
 80044ac:	080044df 	.word	0x080044df
 80044b0:	080044df 	.word	0x080044df
 80044b4:	080044d7 	.word	0x080044d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044b8:	f7ff f8a0 	bl	80035fc <HAL_RCC_GetPCLK1Freq>
 80044bc:	61b8      	str	r0, [r7, #24]
        break;
 80044be:	e013      	b.n	80044e8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044c0:	f7ff f8be 	bl	8003640 <HAL_RCC_GetPCLK2Freq>
 80044c4:	61b8      	str	r0, [r7, #24]
        break;
 80044c6:	e00f      	b.n	80044e8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044c8:	4b4e      	ldr	r3, [pc, #312]	; (8004604 <UART_SetConfig+0x268>)
 80044ca:	61bb      	str	r3, [r7, #24]
        break;
 80044cc:	e00c      	b.n	80044e8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044ce:	f7ff f81f 	bl	8003510 <HAL_RCC_GetSysClockFreq>
 80044d2:	61b8      	str	r0, [r7, #24]
        break;
 80044d4:	e008      	b.n	80044e8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044da:	61bb      	str	r3, [r7, #24]
        break;
 80044dc:	e004      	b.n	80044e8 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80044de:	2300      	movs	r3, #0
 80044e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	77bb      	strb	r3, [r7, #30]
        break;
 80044e6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d074      	beq.n	80045d8 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	005a      	lsls	r2, r3, #1
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	085b      	lsrs	r3, r3, #1
 80044f8:	441a      	add	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004502:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	2b0f      	cmp	r3, #15
 8004508:	d916      	bls.n	8004538 <UART_SetConfig+0x19c>
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004510:	d212      	bcs.n	8004538 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	b29b      	uxth	r3, r3
 8004516:	f023 030f 	bic.w	r3, r3, #15
 800451a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	085b      	lsrs	r3, r3, #1
 8004520:	b29b      	uxth	r3, r3
 8004522:	f003 0307 	and.w	r3, r3, #7
 8004526:	b29a      	uxth	r2, r3
 8004528:	89fb      	ldrh	r3, [r7, #14]
 800452a:	4313      	orrs	r3, r2
 800452c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	89fa      	ldrh	r2, [r7, #14]
 8004534:	60da      	str	r2, [r3, #12]
 8004536:	e04f      	b.n	80045d8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	77bb      	strb	r3, [r7, #30]
 800453c:	e04c      	b.n	80045d8 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800453e:	7ffb      	ldrb	r3, [r7, #31]
 8004540:	2b08      	cmp	r3, #8
 8004542:	d828      	bhi.n	8004596 <UART_SetConfig+0x1fa>
 8004544:	a201      	add	r2, pc, #4	; (adr r2, 800454c <UART_SetConfig+0x1b0>)
 8004546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800454a:	bf00      	nop
 800454c:	08004571 	.word	0x08004571
 8004550:	08004579 	.word	0x08004579
 8004554:	08004581 	.word	0x08004581
 8004558:	08004597 	.word	0x08004597
 800455c:	08004587 	.word	0x08004587
 8004560:	08004597 	.word	0x08004597
 8004564:	08004597 	.word	0x08004597
 8004568:	08004597 	.word	0x08004597
 800456c:	0800458f 	.word	0x0800458f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004570:	f7ff f844 	bl	80035fc <HAL_RCC_GetPCLK1Freq>
 8004574:	61b8      	str	r0, [r7, #24]
        break;
 8004576:	e013      	b.n	80045a0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004578:	f7ff f862 	bl	8003640 <HAL_RCC_GetPCLK2Freq>
 800457c:	61b8      	str	r0, [r7, #24]
        break;
 800457e:	e00f      	b.n	80045a0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004580:	4b20      	ldr	r3, [pc, #128]	; (8004604 <UART_SetConfig+0x268>)
 8004582:	61bb      	str	r3, [r7, #24]
        break;
 8004584:	e00c      	b.n	80045a0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004586:	f7fe ffc3 	bl	8003510 <HAL_RCC_GetSysClockFreq>
 800458a:	61b8      	str	r0, [r7, #24]
        break;
 800458c:	e008      	b.n	80045a0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800458e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004592:	61bb      	str	r3, [r7, #24]
        break;
 8004594:	e004      	b.n	80045a0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004596:	2300      	movs	r3, #0
 8004598:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	77bb      	strb	r3, [r7, #30]
        break;
 800459e:	bf00      	nop
    }

    if (pclk != 0U)
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d018      	beq.n	80045d8 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	085a      	lsrs	r2, r3, #1
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	441a      	add	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	2b0f      	cmp	r3, #15
 80045be:	d909      	bls.n	80045d4 <UART_SetConfig+0x238>
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045c6:	d205      	bcs.n	80045d4 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	60da      	str	r2, [r3, #12]
 80045d2:	e001      	b.n	80045d8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80045e4:	7fbb      	ldrb	r3, [r7, #30]
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3720      	adds	r7, #32
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	efff69f3 	.word	0xefff69f3
 80045f4:	40013800 	.word	0x40013800
 80045f8:	40021000 	.word	0x40021000
 80045fc:	40004400 	.word	0x40004400
 8004600:	40004800 	.word	0x40004800
 8004604:	007a1200 	.word	0x007a1200

08004608 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004614:	f003 0301 	and.w	r3, r3, #1
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00a      	beq.n	8004632 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	430a      	orrs	r2, r1
 8004630:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00a      	beq.n	8004654 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	430a      	orrs	r2, r1
 8004652:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004658:	f003 0304 	and.w	r3, r3, #4
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00a      	beq.n	8004676 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467a:	f003 0308 	and.w	r3, r3, #8
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00a      	beq.n	8004698 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	430a      	orrs	r2, r1
 8004696:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469c:	f003 0310 	and.w	r3, r3, #16
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00a      	beq.n	80046ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	430a      	orrs	r2, r1
 80046b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046be:	f003 0320 	and.w	r3, r3, #32
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00a      	beq.n	80046dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	430a      	orrs	r2, r1
 80046da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d01a      	beq.n	800471e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	430a      	orrs	r2, r1
 80046fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004702:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004706:	d10a      	bne.n	800471e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	430a      	orrs	r2, r1
 800471c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00a      	beq.n	8004740 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	430a      	orrs	r2, r1
 800473e:	605a      	str	r2, [r3, #4]
  }
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b098      	sub	sp, #96	; 0x60
 8004750:	af02      	add	r7, sp, #8
 8004752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800475c:	f7fc fdc0 	bl	80012e0 <HAL_GetTick>
 8004760:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0308 	and.w	r3, r3, #8
 800476c:	2b08      	cmp	r3, #8
 800476e:	d12e      	bne.n	80047ce <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004770:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004774:	9300      	str	r3, [sp, #0]
 8004776:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004778:	2200      	movs	r2, #0
 800477a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f88c 	bl	800489c <UART_WaitOnFlagUntilTimeout>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d021      	beq.n	80047ce <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004792:	e853 3f00 	ldrex	r3, [r3]
 8004796:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800479a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800479e:	653b      	str	r3, [r7, #80]	; 0x50
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	461a      	mov	r2, r3
 80047a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047a8:	647b      	str	r3, [r7, #68]	; 0x44
 80047aa:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80047ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047b0:	e841 2300 	strex	r3, r2, [r1]
 80047b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80047b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d1e6      	bne.n	800478a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2220      	movs	r2, #32
 80047c0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e062      	b.n	8004894 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0304 	and.w	r3, r3, #4
 80047d8:	2b04      	cmp	r3, #4
 80047da:	d149      	bne.n	8004870 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047e0:	9300      	str	r3, [sp, #0]
 80047e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047e4:	2200      	movs	r2, #0
 80047e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 f856 	bl	800489c <UART_WaitOnFlagUntilTimeout>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d03c      	beq.n	8004870 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fe:	e853 3f00 	ldrex	r3, [r3]
 8004802:	623b      	str	r3, [r7, #32]
   return(result);
 8004804:	6a3b      	ldr	r3, [r7, #32]
 8004806:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800480a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	461a      	mov	r2, r3
 8004812:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004814:	633b      	str	r3, [r7, #48]	; 0x30
 8004816:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004818:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800481a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800481c:	e841 2300 	strex	r3, r2, [r1]
 8004820:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004824:	2b00      	cmp	r3, #0
 8004826:	d1e6      	bne.n	80047f6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	3308      	adds	r3, #8
 800482e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	e853 3f00 	ldrex	r3, [r3]
 8004836:	60fb      	str	r3, [r7, #12]
   return(result);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f023 0301 	bic.w	r3, r3, #1
 800483e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	3308      	adds	r3, #8
 8004846:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004848:	61fa      	str	r2, [r7, #28]
 800484a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800484c:	69b9      	ldr	r1, [r7, #24]
 800484e:	69fa      	ldr	r2, [r7, #28]
 8004850:	e841 2300 	strex	r3, r2, [r1]
 8004854:	617b      	str	r3, [r7, #20]
   return(result);
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d1e5      	bne.n	8004828 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2220      	movs	r2, #32
 8004860:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e011      	b.n	8004894 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2220      	movs	r2, #32
 8004874:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2220      	movs	r2, #32
 800487a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004892:	2300      	movs	r3, #0
}
 8004894:	4618      	mov	r0, r3
 8004896:	3758      	adds	r7, #88	; 0x58
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	603b      	str	r3, [r7, #0]
 80048a8:	4613      	mov	r3, r2
 80048aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048ac:	e049      	b.n	8004942 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b4:	d045      	beq.n	8004942 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048b6:	f7fc fd13 	bl	80012e0 <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	69ba      	ldr	r2, [r7, #24]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d302      	bcc.n	80048cc <UART_WaitOnFlagUntilTimeout+0x30>
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d101      	bne.n	80048d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e048      	b.n	8004962 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0304 	and.w	r3, r3, #4
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d031      	beq.n	8004942 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	69db      	ldr	r3, [r3, #28]
 80048e4:	f003 0308 	and.w	r3, r3, #8
 80048e8:	2b08      	cmp	r3, #8
 80048ea:	d110      	bne.n	800490e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2208      	movs	r2, #8
 80048f2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80048f4:	68f8      	ldr	r0, [r7, #12]
 80048f6:	f000 f838 	bl	800496a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2208      	movs	r2, #8
 80048fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e029      	b.n	8004962 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	69db      	ldr	r3, [r3, #28]
 8004914:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004918:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800491c:	d111      	bne.n	8004942 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004926:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004928:	68f8      	ldr	r0, [r7, #12]
 800492a:	f000 f81e 	bl	800496a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2220      	movs	r2, #32
 8004932:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e00f      	b.n	8004962 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	69da      	ldr	r2, [r3, #28]
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	4013      	ands	r3, r2
 800494c:	68ba      	ldr	r2, [r7, #8]
 800494e:	429a      	cmp	r2, r3
 8004950:	bf0c      	ite	eq
 8004952:	2301      	moveq	r3, #1
 8004954:	2300      	movne	r3, #0
 8004956:	b2db      	uxtb	r3, r3
 8004958:	461a      	mov	r2, r3
 800495a:	79fb      	ldrb	r3, [r7, #7]
 800495c:	429a      	cmp	r2, r3
 800495e:	d0a6      	beq.n	80048ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3710      	adds	r7, #16
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}

0800496a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800496a:	b480      	push	{r7}
 800496c:	b095      	sub	sp, #84	; 0x54
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800497a:	e853 3f00 	ldrex	r3, [r3]
 800497e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004982:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004986:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	461a      	mov	r2, r3
 800498e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004990:	643b      	str	r3, [r7, #64]	; 0x40
 8004992:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004994:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004996:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004998:	e841 2300 	strex	r3, r2, [r1]
 800499c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800499e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d1e6      	bne.n	8004972 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	3308      	adds	r3, #8
 80049aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ac:	6a3b      	ldr	r3, [r7, #32]
 80049ae:	e853 3f00 	ldrex	r3, [r3]
 80049b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	f023 0301 	bic.w	r3, r3, #1
 80049ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	3308      	adds	r3, #8
 80049c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049cc:	e841 2300 	strex	r3, r2, [r1]
 80049d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1e5      	bne.n	80049a4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d118      	bne.n	8004a12 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	e853 3f00 	ldrex	r3, [r3]
 80049ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	f023 0310 	bic.w	r3, r3, #16
 80049f4:	647b      	str	r3, [r7, #68]	; 0x44
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	461a      	mov	r2, r3
 80049fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049fe:	61bb      	str	r3, [r7, #24]
 8004a00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a02:	6979      	ldr	r1, [r7, #20]
 8004a04:	69ba      	ldr	r2, [r7, #24]
 8004a06:	e841 2300 	strex	r3, r2, [r1]
 8004a0a:	613b      	str	r3, [r7, #16]
   return(result);
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1e6      	bne.n	80049e0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2220      	movs	r2, #32
 8004a16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004a26:	bf00      	nop
 8004a28:	3754      	adds	r7, #84	; 0x54
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr

08004a32 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004a32:	b480      	push	{r7}
 8004a34:	b085      	sub	sp, #20
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	4603      	mov	r3, r0
 8004a3a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004a40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a44:	2b84      	cmp	r3, #132	; 0x84
 8004a46:	d005      	beq.n	8004a54 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004a48:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	4413      	add	r3, r2
 8004a50:	3303      	adds	r3, #3
 8004a52:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004a54:	68fb      	ldr	r3, [r7, #12]
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3714      	adds	r7, #20
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr

08004a62 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004a62:	b580      	push	{r7, lr}
 8004a64:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004a66:	f001 f895 	bl	8005b94 <vTaskStartScheduler>
  
  return osOK;
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a72:	b089      	sub	sp, #36	; 0x24
 8004a74:	af04      	add	r7, sp, #16
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d020      	beq.n	8004ac4 <osThreadCreate+0x54>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d01c      	beq.n	8004ac4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685c      	ldr	r4, [r3, #4]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	691e      	ldr	r6, [r3, #16]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7ff ffc8 	bl	8004a32 <makeFreeRtosPriority>
 8004aa2:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	695b      	ldr	r3, [r3, #20]
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004aac:	9202      	str	r2, [sp, #8]
 8004aae:	9301      	str	r3, [sp, #4]
 8004ab0:	9100      	str	r1, [sp, #0]
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	4632      	mov	r2, r6
 8004ab6:	4629      	mov	r1, r5
 8004ab8:	4620      	mov	r0, r4
 8004aba:	f000 fead 	bl	8005818 <xTaskCreateStatic>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	60fb      	str	r3, [r7, #12]
 8004ac2:	e01c      	b.n	8004afe <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685c      	ldr	r4, [r3, #4]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ad0:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f7ff ffaa 	bl	8004a32 <makeFreeRtosPriority>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	f107 030c 	add.w	r3, r7, #12
 8004ae4:	9301      	str	r3, [sp, #4]
 8004ae6:	9200      	str	r2, [sp, #0]
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	4632      	mov	r2, r6
 8004aec:	4629      	mov	r1, r5
 8004aee:	4620      	mov	r0, r4
 8004af0:	f000 feee 	bl	80058d0 <xTaskCreate>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d001      	beq.n	8004afe <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004afa:	2300      	movs	r3, #0
 8004afc:	e000      	b.n	8004b00 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004afe:	68fb      	ldr	r3, [r7, #12]
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3714      	adds	r7, #20
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004b08 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d001      	beq.n	8004b1e <osDelay+0x16>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	e000      	b.n	8004b20 <osDelay+0x18>
 8004b1e:	2301      	movs	r3, #1
 8004b20:	4618      	mov	r0, r3
 8004b22:	f001 f803 	bl	8005b2c <vTaskDelay>
  
  return osOK;
 8004b26:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3710      	adds	r7, #16
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8004b36:	201c      	movs	r0, #28
 8004b38:	f002 fb46 	bl	80071c8 <pvPortMalloc>
 8004b3c:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d00a      	beq.n	8004b5a <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	3304      	adds	r3, #4
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f000 f8cb 	bl	8004cea <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8004b5a:	687b      	ldr	r3, [r7, #4]
	}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3708      	adds	r7, #8
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <xEventGroupClearBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b086      	sub	sp, #24
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d10a      	bne.n	8004b8e <xEventGroupClearBits+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b7c:	f383 8811 	msr	BASEPRI, r3
 8004b80:	f3bf 8f6f 	isb	sy
 8004b84:	f3bf 8f4f 	dsb	sy
 8004b88:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004b8a:	bf00      	nop
 8004b8c:	e7fe      	b.n	8004b8c <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00a      	beq.n	8004bae <xEventGroupClearBits+0x4a>
	__asm volatile
 8004b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b9c:	f383 8811 	msr	BASEPRI, r3
 8004ba0:	f3bf 8f6f 	isb	sy
 8004ba4:	f3bf 8f4f 	dsb	sy
 8004ba8:	60bb      	str	r3, [r7, #8]
}
 8004baa:	bf00      	nop
 8004bac:	e7fe      	b.n	8004bac <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8004bae:	f002 f9e9 	bl	8006f84 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	43db      	mvns	r3, r3
 8004bc0:	401a      	ands	r2, r3
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8004bc6:	f002 fa0d 	bl	8006fe4 <vPortExitCritical>

	return uxReturn;
 8004bca:	693b      	ldr	r3, [r7, #16]
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3718      	adds	r7, #24
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b08e      	sub	sp, #56	; 0x38
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8004bde:	2300      	movs	r3, #0
 8004be0:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8004be6:	2300      	movs	r3, #0
 8004be8:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d10a      	bne.n	8004c06 <xEventGroupSetBits+0x32>
	__asm volatile
 8004bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf4:	f383 8811 	msr	BASEPRI, r3
 8004bf8:	f3bf 8f6f 	isb	sy
 8004bfc:	f3bf 8f4f 	dsb	sy
 8004c00:	613b      	str	r3, [r7, #16]
}
 8004c02:	bf00      	nop
 8004c04:	e7fe      	b.n	8004c04 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00a      	beq.n	8004c26 <xEventGroupSetBits+0x52>
	__asm volatile
 8004c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c14:	f383 8811 	msr	BASEPRI, r3
 8004c18:	f3bf 8f6f 	isb	sy
 8004c1c:	f3bf 8f4f 	dsb	sy
 8004c20:	60fb      	str	r3, [r7, #12]
}
 8004c22:	bf00      	nop
 8004c24:	e7fe      	b.n	8004c24 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8004c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c28:	3304      	adds	r3, #4
 8004c2a:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2e:	3308      	adds	r3, #8
 8004c30:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8004c32:	f001 f815 	bl	8005c60 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8004c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8004c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	431a      	orrs	r2, r3
 8004c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c46:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8004c48:	e03c      	b.n	8004cc4 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8004c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8004c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8004c56:	2300      	movs	r3, #0
 8004c58:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004c60:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004c68:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d108      	bne.n	8004c86 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8004c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d00b      	beq.n	8004c98 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8004c80:	2301      	movs	r3, #1
 8004c82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c84:	e008      	b.n	8004c98 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8004c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	69ba      	ldr	r2, [r7, #24]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d101      	bne.n	8004c98 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8004c94:	2301      	movs	r3, #1
 8004c96:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8004c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d010      	beq.n	8004cc0 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d003      	beq.n	8004cb0 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8004ca8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8004cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004cb8:	4619      	mov	r1, r3
 8004cba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004cbc:	f001 fa56 	bl	800616c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8004cc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cc6:	6a3b      	ldr	r3, [r7, #32]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d1be      	bne.n	8004c4a <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8004ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd2:	43db      	mvns	r3, r3
 8004cd4:	401a      	ands	r2, r3
 8004cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd8:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8004cda:	f000 ffcf 	bl	8005c7c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8004cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce0:	681b      	ldr	r3, [r3, #0]
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3738      	adds	r7, #56	; 0x38
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004cea:	b480      	push	{r7}
 8004cec:	b083      	sub	sp, #12
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f103 0208 	add.w	r2, r3, #8
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f04f 32ff 	mov.w	r2, #4294967295
 8004d02:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f103 0208 	add.w	r2, r3, #8
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f103 0208 	add.w	r2, r3, #8
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004d1e:	bf00      	nop
 8004d20:	370c      	adds	r7, #12
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr

08004d2a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004d2a:	b480      	push	{r7}
 8004d2c:	b083      	sub	sp, #12
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004d38:	bf00      	nop
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	689a      	ldr	r2, [r3, #8]
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	683a      	ldr	r2, [r7, #0]
 8004d68:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	683a      	ldr	r2, [r7, #0]
 8004d6e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	1c5a      	adds	r2, r3, #1
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	601a      	str	r2, [r3, #0]
}
 8004d80:	bf00      	nop
 8004d82:	3714      	adds	r7, #20
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b085      	sub	sp, #20
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da2:	d103      	bne.n	8004dac <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	691b      	ldr	r3, [r3, #16]
 8004da8:	60fb      	str	r3, [r7, #12]
 8004daa:	e00c      	b.n	8004dc6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	3308      	adds	r3, #8
 8004db0:	60fb      	str	r3, [r7, #12]
 8004db2:	e002      	b.n	8004dba <vListInsert+0x2e>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	60fb      	str	r3, [r7, #12]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68ba      	ldr	r2, [r7, #8]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d2f6      	bcs.n	8004db4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	685a      	ldr	r2, [r3, #4]
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	683a      	ldr	r2, [r7, #0]
 8004dd4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	683a      	ldr	r2, [r7, #0]
 8004de0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	1c5a      	adds	r2, r3, #1
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	601a      	str	r2, [r3, #0]
}
 8004df2:	bf00      	nop
 8004df4:	3714      	adds	r7, #20
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr

08004dfe <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004dfe:	b480      	push	{r7}
 8004e00:	b085      	sub	sp, #20
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	6892      	ldr	r2, [r2, #8]
 8004e14:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	6852      	ldr	r2, [r2, #4]
 8004e1e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d103      	bne.n	8004e32 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	689a      	ldr	r2, [r3, #8]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	1e5a      	subs	r2, r3, #1
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3714      	adds	r7, #20
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
	...

08004e54 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d10a      	bne.n	8004e7e <xQueueGenericReset+0x2a>
	__asm volatile
 8004e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e6c:	f383 8811 	msr	BASEPRI, r3
 8004e70:	f3bf 8f6f 	isb	sy
 8004e74:	f3bf 8f4f 	dsb	sy
 8004e78:	60bb      	str	r3, [r7, #8]
}
 8004e7a:	bf00      	nop
 8004e7c:	e7fe      	b.n	8004e7c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004e7e:	f002 f881 	bl	8006f84 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e8a:	68f9      	ldr	r1, [r7, #12]
 8004e8c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004e8e:	fb01 f303 	mul.w	r3, r1, r3
 8004e92:	441a      	add	r2, r3
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	68f9      	ldr	r1, [r7, #12]
 8004eb2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004eb4:	fb01 f303 	mul.w	r3, r1, r3
 8004eb8:	441a      	add	r2, r3
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	22ff      	movs	r2, #255	; 0xff
 8004ec2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	22ff      	movs	r2, #255	; 0xff
 8004eca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d114      	bne.n	8004efe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d01a      	beq.n	8004f12 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	3310      	adds	r3, #16
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f001 f8e1 	bl	80060a8 <xTaskRemoveFromEventList>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d012      	beq.n	8004f12 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004eec:	4b0c      	ldr	r3, [pc, #48]	; (8004f20 <xQueueGenericReset+0xcc>)
 8004eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ef2:	601a      	str	r2, [r3, #0]
 8004ef4:	f3bf 8f4f 	dsb	sy
 8004ef8:	f3bf 8f6f 	isb	sy
 8004efc:	e009      	b.n	8004f12 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	3310      	adds	r3, #16
 8004f02:	4618      	mov	r0, r3
 8004f04:	f7ff fef1 	bl	8004cea <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	3324      	adds	r3, #36	; 0x24
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f7ff feec 	bl	8004cea <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004f12:	f002 f867 	bl	8006fe4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004f16:	2301      	movs	r3, #1
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3710      	adds	r7, #16
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	e000ed04 	.word	0xe000ed04

08004f24 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b08e      	sub	sp, #56	; 0x38
 8004f28:	af02      	add	r7, sp, #8
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]
 8004f30:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d10a      	bne.n	8004f4e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f3c:	f383 8811 	msr	BASEPRI, r3
 8004f40:	f3bf 8f6f 	isb	sy
 8004f44:	f3bf 8f4f 	dsb	sy
 8004f48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004f4a:	bf00      	nop
 8004f4c:	e7fe      	b.n	8004f4c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d10a      	bne.n	8004f6a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f58:	f383 8811 	msr	BASEPRI, r3
 8004f5c:	f3bf 8f6f 	isb	sy
 8004f60:	f3bf 8f4f 	dsb	sy
 8004f64:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004f66:	bf00      	nop
 8004f68:	e7fe      	b.n	8004f68 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d002      	beq.n	8004f76 <xQueueGenericCreateStatic+0x52>
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d001      	beq.n	8004f7a <xQueueGenericCreateStatic+0x56>
 8004f76:	2301      	movs	r3, #1
 8004f78:	e000      	b.n	8004f7c <xQueueGenericCreateStatic+0x58>
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d10a      	bne.n	8004f96 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f84:	f383 8811 	msr	BASEPRI, r3
 8004f88:	f3bf 8f6f 	isb	sy
 8004f8c:	f3bf 8f4f 	dsb	sy
 8004f90:	623b      	str	r3, [r7, #32]
}
 8004f92:	bf00      	nop
 8004f94:	e7fe      	b.n	8004f94 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d102      	bne.n	8004fa2 <xQueueGenericCreateStatic+0x7e>
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d101      	bne.n	8004fa6 <xQueueGenericCreateStatic+0x82>
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e000      	b.n	8004fa8 <xQueueGenericCreateStatic+0x84>
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d10a      	bne.n	8004fc2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb0:	f383 8811 	msr	BASEPRI, r3
 8004fb4:	f3bf 8f6f 	isb	sy
 8004fb8:	f3bf 8f4f 	dsb	sy
 8004fbc:	61fb      	str	r3, [r7, #28]
}
 8004fbe:	bf00      	nop
 8004fc0:	e7fe      	b.n	8004fc0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004fc2:	2348      	movs	r3, #72	; 0x48
 8004fc4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	2b48      	cmp	r3, #72	; 0x48
 8004fca:	d00a      	beq.n	8004fe2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd0:	f383 8811 	msr	BASEPRI, r3
 8004fd4:	f3bf 8f6f 	isb	sy
 8004fd8:	f3bf 8f4f 	dsb	sy
 8004fdc:	61bb      	str	r3, [r7, #24]
}
 8004fde:	bf00      	nop
 8004fe0:	e7fe      	b.n	8004fe0 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00d      	beq.n	8005008 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004ff4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ffa:	9300      	str	r3, [sp, #0]
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	68b9      	ldr	r1, [r7, #8]
 8005002:	68f8      	ldr	r0, [r7, #12]
 8005004:	f000 f805 	bl	8005012 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800500a:	4618      	mov	r0, r3
 800500c:	3730      	adds	r7, #48	; 0x30
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}

08005012 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005012:	b580      	push	{r7, lr}
 8005014:	b084      	sub	sp, #16
 8005016:	af00      	add	r7, sp, #0
 8005018:	60f8      	str	r0, [r7, #12]
 800501a:	60b9      	str	r1, [r7, #8]
 800501c:	607a      	str	r2, [r7, #4]
 800501e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d103      	bne.n	800502e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	69ba      	ldr	r2, [r7, #24]
 800502a:	601a      	str	r2, [r3, #0]
 800502c:	e002      	b.n	8005034 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	68ba      	ldr	r2, [r7, #8]
 800503e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005040:	2101      	movs	r1, #1
 8005042:	69b8      	ldr	r0, [r7, #24]
 8005044:	f7ff ff06 	bl	8004e54 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005048:	bf00      	nop
 800504a:	3710      	adds	r7, #16
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b08e      	sub	sp, #56	; 0x38
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]
 800505c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800505e:	2300      	movs	r3, #0
 8005060:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005068:	2b00      	cmp	r3, #0
 800506a:	d10a      	bne.n	8005082 <xQueueGenericSend+0x32>
	__asm volatile
 800506c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005070:	f383 8811 	msr	BASEPRI, r3
 8005074:	f3bf 8f6f 	isb	sy
 8005078:	f3bf 8f4f 	dsb	sy
 800507c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800507e:	bf00      	nop
 8005080:	e7fe      	b.n	8005080 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d103      	bne.n	8005090 <xQueueGenericSend+0x40>
 8005088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508c:	2b00      	cmp	r3, #0
 800508e:	d101      	bne.n	8005094 <xQueueGenericSend+0x44>
 8005090:	2301      	movs	r3, #1
 8005092:	e000      	b.n	8005096 <xQueueGenericSend+0x46>
 8005094:	2300      	movs	r3, #0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d10a      	bne.n	80050b0 <xQueueGenericSend+0x60>
	__asm volatile
 800509a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800509e:	f383 8811 	msr	BASEPRI, r3
 80050a2:	f3bf 8f6f 	isb	sy
 80050a6:	f3bf 8f4f 	dsb	sy
 80050aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80050ac:	bf00      	nop
 80050ae:	e7fe      	b.n	80050ae <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d103      	bne.n	80050be <xQueueGenericSend+0x6e>
 80050b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d101      	bne.n	80050c2 <xQueueGenericSend+0x72>
 80050be:	2301      	movs	r3, #1
 80050c0:	e000      	b.n	80050c4 <xQueueGenericSend+0x74>
 80050c2:	2300      	movs	r3, #0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d10a      	bne.n	80050de <xQueueGenericSend+0x8e>
	__asm volatile
 80050c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050cc:	f383 8811 	msr	BASEPRI, r3
 80050d0:	f3bf 8f6f 	isb	sy
 80050d4:	f3bf 8f4f 	dsb	sy
 80050d8:	623b      	str	r3, [r7, #32]
}
 80050da:	bf00      	nop
 80050dc:	e7fe      	b.n	80050dc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80050de:	f001 fa07 	bl	80064f0 <xTaskGetSchedulerState>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d102      	bne.n	80050ee <xQueueGenericSend+0x9e>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d101      	bne.n	80050f2 <xQueueGenericSend+0xa2>
 80050ee:	2301      	movs	r3, #1
 80050f0:	e000      	b.n	80050f4 <xQueueGenericSend+0xa4>
 80050f2:	2300      	movs	r3, #0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d10a      	bne.n	800510e <xQueueGenericSend+0xbe>
	__asm volatile
 80050f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050fc:	f383 8811 	msr	BASEPRI, r3
 8005100:	f3bf 8f6f 	isb	sy
 8005104:	f3bf 8f4f 	dsb	sy
 8005108:	61fb      	str	r3, [r7, #28]
}
 800510a:	bf00      	nop
 800510c:	e7fe      	b.n	800510c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800510e:	f001 ff39 	bl	8006f84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005114:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800511a:	429a      	cmp	r2, r3
 800511c:	d302      	bcc.n	8005124 <xQueueGenericSend+0xd4>
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	2b02      	cmp	r3, #2
 8005122:	d129      	bne.n	8005178 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005124:	683a      	ldr	r2, [r7, #0]
 8005126:	68b9      	ldr	r1, [r7, #8]
 8005128:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800512a:	f000 fa07 	bl	800553c <prvCopyDataToQueue>
 800512e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005134:	2b00      	cmp	r3, #0
 8005136:	d010      	beq.n	800515a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800513a:	3324      	adds	r3, #36	; 0x24
 800513c:	4618      	mov	r0, r3
 800513e:	f000 ffb3 	bl	80060a8 <xTaskRemoveFromEventList>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d013      	beq.n	8005170 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005148:	4b3f      	ldr	r3, [pc, #252]	; (8005248 <xQueueGenericSend+0x1f8>)
 800514a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800514e:	601a      	str	r2, [r3, #0]
 8005150:	f3bf 8f4f 	dsb	sy
 8005154:	f3bf 8f6f 	isb	sy
 8005158:	e00a      	b.n	8005170 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800515a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800515c:	2b00      	cmp	r3, #0
 800515e:	d007      	beq.n	8005170 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005160:	4b39      	ldr	r3, [pc, #228]	; (8005248 <xQueueGenericSend+0x1f8>)
 8005162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005166:	601a      	str	r2, [r3, #0]
 8005168:	f3bf 8f4f 	dsb	sy
 800516c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005170:	f001 ff38 	bl	8006fe4 <vPortExitCritical>
				return pdPASS;
 8005174:	2301      	movs	r3, #1
 8005176:	e063      	b.n	8005240 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d103      	bne.n	8005186 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800517e:	f001 ff31 	bl	8006fe4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005182:	2300      	movs	r3, #0
 8005184:	e05c      	b.n	8005240 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005188:	2b00      	cmp	r3, #0
 800518a:	d106      	bne.n	800519a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800518c:	f107 0314 	add.w	r3, r7, #20
 8005190:	4618      	mov	r0, r3
 8005192:	f001 f84d 	bl	8006230 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005196:	2301      	movs	r3, #1
 8005198:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800519a:	f001 ff23 	bl	8006fe4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800519e:	f000 fd5f 	bl	8005c60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80051a2:	f001 feef 	bl	8006f84 <vPortEnterCritical>
 80051a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051ac:	b25b      	sxtb	r3, r3
 80051ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051b2:	d103      	bne.n	80051bc <xQueueGenericSend+0x16c>
 80051b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b6:	2200      	movs	r2, #0
 80051b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051c2:	b25b      	sxtb	r3, r3
 80051c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c8:	d103      	bne.n	80051d2 <xQueueGenericSend+0x182>
 80051ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051d2:	f001 ff07 	bl	8006fe4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80051d6:	1d3a      	adds	r2, r7, #4
 80051d8:	f107 0314 	add.w	r3, r7, #20
 80051dc:	4611      	mov	r1, r2
 80051de:	4618      	mov	r0, r3
 80051e0:	f001 f83c 	bl	800625c <xTaskCheckForTimeOut>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d124      	bne.n	8005234 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80051ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051ec:	f000 fa9e 	bl	800572c <prvIsQueueFull>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d018      	beq.n	8005228 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80051f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f8:	3310      	adds	r3, #16
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	4611      	mov	r1, r2
 80051fe:	4618      	mov	r0, r3
 8005200:	f000 ff02 	bl	8006008 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005204:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005206:	f000 fa29 	bl	800565c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800520a:	f000 fd37 	bl	8005c7c <xTaskResumeAll>
 800520e:	4603      	mov	r3, r0
 8005210:	2b00      	cmp	r3, #0
 8005212:	f47f af7c 	bne.w	800510e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005216:	4b0c      	ldr	r3, [pc, #48]	; (8005248 <xQueueGenericSend+0x1f8>)
 8005218:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800521c:	601a      	str	r2, [r3, #0]
 800521e:	f3bf 8f4f 	dsb	sy
 8005222:	f3bf 8f6f 	isb	sy
 8005226:	e772      	b.n	800510e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005228:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800522a:	f000 fa17 	bl	800565c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800522e:	f000 fd25 	bl	8005c7c <xTaskResumeAll>
 8005232:	e76c      	b.n	800510e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005234:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005236:	f000 fa11 	bl	800565c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800523a:	f000 fd1f 	bl	8005c7c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800523e:	2300      	movs	r3, #0
		}
	}
}
 8005240:	4618      	mov	r0, r3
 8005242:	3738      	adds	r7, #56	; 0x38
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}
 8005248:	e000ed04 	.word	0xe000ed04

0800524c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b08e      	sub	sp, #56	; 0x38
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	607a      	str	r2, [r7, #4]
 8005258:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800525e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005260:	2b00      	cmp	r3, #0
 8005262:	d10a      	bne.n	800527a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005268:	f383 8811 	msr	BASEPRI, r3
 800526c:	f3bf 8f6f 	isb	sy
 8005270:	f3bf 8f4f 	dsb	sy
 8005274:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005276:	bf00      	nop
 8005278:	e7fe      	b.n	8005278 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d103      	bne.n	8005288 <xQueueGenericSendFromISR+0x3c>
 8005280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005284:	2b00      	cmp	r3, #0
 8005286:	d101      	bne.n	800528c <xQueueGenericSendFromISR+0x40>
 8005288:	2301      	movs	r3, #1
 800528a:	e000      	b.n	800528e <xQueueGenericSendFromISR+0x42>
 800528c:	2300      	movs	r3, #0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d10a      	bne.n	80052a8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005296:	f383 8811 	msr	BASEPRI, r3
 800529a:	f3bf 8f6f 	isb	sy
 800529e:	f3bf 8f4f 	dsb	sy
 80052a2:	623b      	str	r3, [r7, #32]
}
 80052a4:	bf00      	nop
 80052a6:	e7fe      	b.n	80052a6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d103      	bne.n	80052b6 <xQueueGenericSendFromISR+0x6a>
 80052ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d101      	bne.n	80052ba <xQueueGenericSendFromISR+0x6e>
 80052b6:	2301      	movs	r3, #1
 80052b8:	e000      	b.n	80052bc <xQueueGenericSendFromISR+0x70>
 80052ba:	2300      	movs	r3, #0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d10a      	bne.n	80052d6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80052c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c4:	f383 8811 	msr	BASEPRI, r3
 80052c8:	f3bf 8f6f 	isb	sy
 80052cc:	f3bf 8f4f 	dsb	sy
 80052d0:	61fb      	str	r3, [r7, #28]
}
 80052d2:	bf00      	nop
 80052d4:	e7fe      	b.n	80052d4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80052d6:	f001 ff37 	bl	8007148 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80052da:	f3ef 8211 	mrs	r2, BASEPRI
 80052de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e2:	f383 8811 	msr	BASEPRI, r3
 80052e6:	f3bf 8f6f 	isb	sy
 80052ea:	f3bf 8f4f 	dsb	sy
 80052ee:	61ba      	str	r2, [r7, #24]
 80052f0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80052f2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80052f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80052f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052fe:	429a      	cmp	r2, r3
 8005300:	d302      	bcc.n	8005308 <xQueueGenericSendFromISR+0xbc>
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	2b02      	cmp	r3, #2
 8005306:	d12c      	bne.n	8005362 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800530a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800530e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005312:	683a      	ldr	r2, [r7, #0]
 8005314:	68b9      	ldr	r1, [r7, #8]
 8005316:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005318:	f000 f910 	bl	800553c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800531c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005324:	d112      	bne.n	800534c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532a:	2b00      	cmp	r3, #0
 800532c:	d016      	beq.n	800535c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800532e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005330:	3324      	adds	r3, #36	; 0x24
 8005332:	4618      	mov	r0, r3
 8005334:	f000 feb8 	bl	80060a8 <xTaskRemoveFromEventList>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00e      	beq.n	800535c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00b      	beq.n	800535c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	601a      	str	r2, [r3, #0]
 800534a:	e007      	b.n	800535c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800534c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005350:	3301      	adds	r3, #1
 8005352:	b2db      	uxtb	r3, r3
 8005354:	b25a      	sxtb	r2, r3
 8005356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005358:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800535c:	2301      	movs	r3, #1
 800535e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005360:	e001      	b.n	8005366 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005362:	2300      	movs	r3, #0
 8005364:	637b      	str	r3, [r7, #52]	; 0x34
 8005366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005368:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005370:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005374:	4618      	mov	r0, r3
 8005376:	3738      	adds	r7, #56	; 0x38
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b08c      	sub	sp, #48	; 0x30
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005388:	2300      	movs	r3, #0
 800538a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005392:	2b00      	cmp	r3, #0
 8005394:	d10a      	bne.n	80053ac <xQueueReceive+0x30>
	__asm volatile
 8005396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539a:	f383 8811 	msr	BASEPRI, r3
 800539e:	f3bf 8f6f 	isb	sy
 80053a2:	f3bf 8f4f 	dsb	sy
 80053a6:	623b      	str	r3, [r7, #32]
}
 80053a8:	bf00      	nop
 80053aa:	e7fe      	b.n	80053aa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d103      	bne.n	80053ba <xQueueReceive+0x3e>
 80053b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d101      	bne.n	80053be <xQueueReceive+0x42>
 80053ba:	2301      	movs	r3, #1
 80053bc:	e000      	b.n	80053c0 <xQueueReceive+0x44>
 80053be:	2300      	movs	r3, #0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d10a      	bne.n	80053da <xQueueReceive+0x5e>
	__asm volatile
 80053c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c8:	f383 8811 	msr	BASEPRI, r3
 80053cc:	f3bf 8f6f 	isb	sy
 80053d0:	f3bf 8f4f 	dsb	sy
 80053d4:	61fb      	str	r3, [r7, #28]
}
 80053d6:	bf00      	nop
 80053d8:	e7fe      	b.n	80053d8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053da:	f001 f889 	bl	80064f0 <xTaskGetSchedulerState>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d102      	bne.n	80053ea <xQueueReceive+0x6e>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d101      	bne.n	80053ee <xQueueReceive+0x72>
 80053ea:	2301      	movs	r3, #1
 80053ec:	e000      	b.n	80053f0 <xQueueReceive+0x74>
 80053ee:	2300      	movs	r3, #0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d10a      	bne.n	800540a <xQueueReceive+0x8e>
	__asm volatile
 80053f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f8:	f383 8811 	msr	BASEPRI, r3
 80053fc:	f3bf 8f6f 	isb	sy
 8005400:	f3bf 8f4f 	dsb	sy
 8005404:	61bb      	str	r3, [r7, #24]
}
 8005406:	bf00      	nop
 8005408:	e7fe      	b.n	8005408 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800540a:	f001 fdbb 	bl	8006f84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800540e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005412:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005416:	2b00      	cmp	r3, #0
 8005418:	d01f      	beq.n	800545a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800541a:	68b9      	ldr	r1, [r7, #8]
 800541c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800541e:	f000 f8f7 	bl	8005610 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005424:	1e5a      	subs	r2, r3, #1
 8005426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005428:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800542a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d00f      	beq.n	8005452 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005434:	3310      	adds	r3, #16
 8005436:	4618      	mov	r0, r3
 8005438:	f000 fe36 	bl	80060a8 <xTaskRemoveFromEventList>
 800543c:	4603      	mov	r3, r0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d007      	beq.n	8005452 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005442:	4b3d      	ldr	r3, [pc, #244]	; (8005538 <xQueueReceive+0x1bc>)
 8005444:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005448:	601a      	str	r2, [r3, #0]
 800544a:	f3bf 8f4f 	dsb	sy
 800544e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005452:	f001 fdc7 	bl	8006fe4 <vPortExitCritical>
				return pdPASS;
 8005456:	2301      	movs	r3, #1
 8005458:	e069      	b.n	800552e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d103      	bne.n	8005468 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005460:	f001 fdc0 	bl	8006fe4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005464:	2300      	movs	r3, #0
 8005466:	e062      	b.n	800552e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800546a:	2b00      	cmp	r3, #0
 800546c:	d106      	bne.n	800547c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800546e:	f107 0310 	add.w	r3, r7, #16
 8005472:	4618      	mov	r0, r3
 8005474:	f000 fedc 	bl	8006230 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005478:	2301      	movs	r3, #1
 800547a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800547c:	f001 fdb2 	bl	8006fe4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005480:	f000 fbee 	bl	8005c60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005484:	f001 fd7e 	bl	8006f84 <vPortEnterCritical>
 8005488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800548a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800548e:	b25b      	sxtb	r3, r3
 8005490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005494:	d103      	bne.n	800549e <xQueueReceive+0x122>
 8005496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005498:	2200      	movs	r2, #0
 800549a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800549e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054a4:	b25b      	sxtb	r3, r3
 80054a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054aa:	d103      	bne.n	80054b4 <xQueueReceive+0x138>
 80054ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054b4:	f001 fd96 	bl	8006fe4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054b8:	1d3a      	adds	r2, r7, #4
 80054ba:	f107 0310 	add.w	r3, r7, #16
 80054be:	4611      	mov	r1, r2
 80054c0:	4618      	mov	r0, r3
 80054c2:	f000 fecb 	bl	800625c <xTaskCheckForTimeOut>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d123      	bne.n	8005514 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80054cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054ce:	f000 f917 	bl	8005700 <prvIsQueueEmpty>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d017      	beq.n	8005508 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80054d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054da:	3324      	adds	r3, #36	; 0x24
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	4611      	mov	r1, r2
 80054e0:	4618      	mov	r0, r3
 80054e2:	f000 fd91 	bl	8006008 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80054e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054e8:	f000 f8b8 	bl	800565c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80054ec:	f000 fbc6 	bl	8005c7c <xTaskResumeAll>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d189      	bne.n	800540a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80054f6:	4b10      	ldr	r3, [pc, #64]	; (8005538 <xQueueReceive+0x1bc>)
 80054f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054fc:	601a      	str	r2, [r3, #0]
 80054fe:	f3bf 8f4f 	dsb	sy
 8005502:	f3bf 8f6f 	isb	sy
 8005506:	e780      	b.n	800540a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005508:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800550a:	f000 f8a7 	bl	800565c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800550e:	f000 fbb5 	bl	8005c7c <xTaskResumeAll>
 8005512:	e77a      	b.n	800540a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005514:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005516:	f000 f8a1 	bl	800565c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800551a:	f000 fbaf 	bl	8005c7c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800551e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005520:	f000 f8ee 	bl	8005700 <prvIsQueueEmpty>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	f43f af6f 	beq.w	800540a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800552c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800552e:	4618      	mov	r0, r3
 8005530:	3730      	adds	r7, #48	; 0x30
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	e000ed04 	.word	0xe000ed04

0800553c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b086      	sub	sp, #24
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005548:	2300      	movs	r3, #0
 800554a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005550:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005556:	2b00      	cmp	r3, #0
 8005558:	d10d      	bne.n	8005576 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d14d      	bne.n	80055fe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	4618      	mov	r0, r3
 8005568:	f000 ffe0 	bl	800652c <xTaskPriorityDisinherit>
 800556c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	605a      	str	r2, [r3, #4]
 8005574:	e043      	b.n	80055fe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d119      	bne.n	80055b0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6898      	ldr	r0, [r3, #8]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005584:	461a      	mov	r2, r3
 8005586:	68b9      	ldr	r1, [r7, #8]
 8005588:	f002 f824 	bl	80075d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	689a      	ldr	r2, [r3, #8]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005594:	441a      	add	r2, r3
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	689a      	ldr	r2, [r3, #8]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d32b      	bcc.n	80055fe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	609a      	str	r2, [r3, #8]
 80055ae:	e026      	b.n	80055fe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	68d8      	ldr	r0, [r3, #12]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b8:	461a      	mov	r2, r3
 80055ba:	68b9      	ldr	r1, [r7, #8]
 80055bc:	f002 f80a 	bl	80075d4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	68da      	ldr	r2, [r3, #12]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c8:	425b      	negs	r3, r3
 80055ca:	441a      	add	r2, r3
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	68da      	ldr	r2, [r3, #12]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d207      	bcs.n	80055ec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	685a      	ldr	r2, [r3, #4]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e4:	425b      	negs	r3, r3
 80055e6:	441a      	add	r2, r3
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d105      	bne.n	80055fe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d002      	beq.n	80055fe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	3b01      	subs	r3, #1
 80055fc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	1c5a      	adds	r2, r3, #1
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005606:	697b      	ldr	r3, [r7, #20]
}
 8005608:	4618      	mov	r0, r3
 800560a:	3718      	adds	r7, #24
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b082      	sub	sp, #8
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561e:	2b00      	cmp	r3, #0
 8005620:	d018      	beq.n	8005654 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	68da      	ldr	r2, [r3, #12]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562a:	441a      	add	r2, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	68da      	ldr	r2, [r3, #12]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	429a      	cmp	r2, r3
 800563a:	d303      	bcc.n	8005644 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	68d9      	ldr	r1, [r3, #12]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564c:	461a      	mov	r2, r3
 800564e:	6838      	ldr	r0, [r7, #0]
 8005650:	f001 ffc0 	bl	80075d4 <memcpy>
	}
}
 8005654:	bf00      	nop
 8005656:	3708      	adds	r7, #8
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005664:	f001 fc8e 	bl	8006f84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800566e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005670:	e011      	b.n	8005696 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005676:	2b00      	cmp	r3, #0
 8005678:	d012      	beq.n	80056a0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	3324      	adds	r3, #36	; 0x24
 800567e:	4618      	mov	r0, r3
 8005680:	f000 fd12 	bl	80060a8 <xTaskRemoveFromEventList>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d001      	beq.n	800568e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800568a:	f000 fe49 	bl	8006320 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800568e:	7bfb      	ldrb	r3, [r7, #15]
 8005690:	3b01      	subs	r3, #1
 8005692:	b2db      	uxtb	r3, r3
 8005694:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800569a:	2b00      	cmp	r3, #0
 800569c:	dce9      	bgt.n	8005672 <prvUnlockQueue+0x16>
 800569e:	e000      	b.n	80056a2 <prvUnlockQueue+0x46>
					break;
 80056a0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	22ff      	movs	r2, #255	; 0xff
 80056a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80056aa:	f001 fc9b 	bl	8006fe4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80056ae:	f001 fc69 	bl	8006f84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056b8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80056ba:	e011      	b.n	80056e0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d012      	beq.n	80056ea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	3310      	adds	r3, #16
 80056c8:	4618      	mov	r0, r3
 80056ca:	f000 fced 	bl	80060a8 <xTaskRemoveFromEventList>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d001      	beq.n	80056d8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80056d4:	f000 fe24 	bl	8006320 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80056d8:	7bbb      	ldrb	r3, [r7, #14]
 80056da:	3b01      	subs	r3, #1
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80056e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	dce9      	bgt.n	80056bc <prvUnlockQueue+0x60>
 80056e8:	e000      	b.n	80056ec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80056ea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	22ff      	movs	r2, #255	; 0xff
 80056f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80056f4:	f001 fc76 	bl	8006fe4 <vPortExitCritical>
}
 80056f8:	bf00      	nop
 80056fa:	3710      	adds	r7, #16
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005708:	f001 fc3c 	bl	8006f84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005710:	2b00      	cmp	r3, #0
 8005712:	d102      	bne.n	800571a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005714:	2301      	movs	r3, #1
 8005716:	60fb      	str	r3, [r7, #12]
 8005718:	e001      	b.n	800571e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800571a:	2300      	movs	r3, #0
 800571c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800571e:	f001 fc61 	bl	8006fe4 <vPortExitCritical>

	return xReturn;
 8005722:	68fb      	ldr	r3, [r7, #12]
}
 8005724:	4618      	mov	r0, r3
 8005726:	3710      	adds	r7, #16
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005734:	f001 fc26 	bl	8006f84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005740:	429a      	cmp	r2, r3
 8005742:	d102      	bne.n	800574a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005744:	2301      	movs	r3, #1
 8005746:	60fb      	str	r3, [r7, #12]
 8005748:	e001      	b.n	800574e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800574a:	2300      	movs	r3, #0
 800574c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800574e:	f001 fc49 	bl	8006fe4 <vPortExitCritical>

	return xReturn;
 8005752:	68fb      	ldr	r3, [r7, #12]
}
 8005754:	4618      	mov	r0, r3
 8005756:	3710      	adds	r7, #16
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800575c:	b480      	push	{r7}
 800575e:	b085      	sub	sp, #20
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005766:	2300      	movs	r3, #0
 8005768:	60fb      	str	r3, [r7, #12]
 800576a:	e014      	b.n	8005796 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800576c:	4a0f      	ldr	r2, [pc, #60]	; (80057ac <vQueueAddToRegistry+0x50>)
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d10b      	bne.n	8005790 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005778:	490c      	ldr	r1, [pc, #48]	; (80057ac <vQueueAddToRegistry+0x50>)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	683a      	ldr	r2, [r7, #0]
 800577e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005782:	4a0a      	ldr	r2, [pc, #40]	; (80057ac <vQueueAddToRegistry+0x50>)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	00db      	lsls	r3, r3, #3
 8005788:	4413      	add	r3, r2
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800578e:	e006      	b.n	800579e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	3301      	adds	r3, #1
 8005794:	60fb      	str	r3, [r7, #12]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2b07      	cmp	r3, #7
 800579a:	d9e7      	bls.n	800576c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800579c:	bf00      	nop
 800579e:	bf00      	nop
 80057a0:	3714      	adds	r7, #20
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop
 80057ac:	20000894 	.word	0x20000894

080057b0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b086      	sub	sp, #24
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80057c0:	f001 fbe0 	bl	8006f84 <vPortEnterCritical>
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057ca:	b25b      	sxtb	r3, r3
 80057cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057d0:	d103      	bne.n	80057da <vQueueWaitForMessageRestricted+0x2a>
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057e0:	b25b      	sxtb	r3, r3
 80057e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e6:	d103      	bne.n	80057f0 <vQueueWaitForMessageRestricted+0x40>
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057f0:	f001 fbf8 	bl	8006fe4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d106      	bne.n	800580a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	3324      	adds	r3, #36	; 0x24
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	68b9      	ldr	r1, [r7, #8]
 8005804:	4618      	mov	r0, r3
 8005806:	f000 fc23 	bl	8006050 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800580a:	6978      	ldr	r0, [r7, #20]
 800580c:	f7ff ff26 	bl	800565c <prvUnlockQueue>
	}
 8005810:	bf00      	nop
 8005812:	3718      	adds	r7, #24
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005818:	b580      	push	{r7, lr}
 800581a:	b08e      	sub	sp, #56	; 0x38
 800581c:	af04      	add	r7, sp, #16
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	607a      	str	r2, [r7, #4]
 8005824:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005828:	2b00      	cmp	r3, #0
 800582a:	d10a      	bne.n	8005842 <xTaskCreateStatic+0x2a>
	__asm volatile
 800582c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005830:	f383 8811 	msr	BASEPRI, r3
 8005834:	f3bf 8f6f 	isb	sy
 8005838:	f3bf 8f4f 	dsb	sy
 800583c:	623b      	str	r3, [r7, #32]
}
 800583e:	bf00      	nop
 8005840:	e7fe      	b.n	8005840 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005844:	2b00      	cmp	r3, #0
 8005846:	d10a      	bne.n	800585e <xTaskCreateStatic+0x46>
	__asm volatile
 8005848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800584c:	f383 8811 	msr	BASEPRI, r3
 8005850:	f3bf 8f6f 	isb	sy
 8005854:	f3bf 8f4f 	dsb	sy
 8005858:	61fb      	str	r3, [r7, #28]
}
 800585a:	bf00      	nop
 800585c:	e7fe      	b.n	800585c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800585e:	2358      	movs	r3, #88	; 0x58
 8005860:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	2b58      	cmp	r3, #88	; 0x58
 8005866:	d00a      	beq.n	800587e <xTaskCreateStatic+0x66>
	__asm volatile
 8005868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800586c:	f383 8811 	msr	BASEPRI, r3
 8005870:	f3bf 8f6f 	isb	sy
 8005874:	f3bf 8f4f 	dsb	sy
 8005878:	61bb      	str	r3, [r7, #24]
}
 800587a:	bf00      	nop
 800587c:	e7fe      	b.n	800587c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800587e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005880:	2b00      	cmp	r3, #0
 8005882:	d01e      	beq.n	80058c2 <xTaskCreateStatic+0xaa>
 8005884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005886:	2b00      	cmp	r3, #0
 8005888:	d01b      	beq.n	80058c2 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800588a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800588c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800588e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005890:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005892:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005896:	2202      	movs	r2, #2
 8005898:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800589c:	2300      	movs	r3, #0
 800589e:	9303      	str	r3, [sp, #12]
 80058a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a2:	9302      	str	r3, [sp, #8]
 80058a4:	f107 0314 	add.w	r3, r7, #20
 80058a8:	9301      	str	r3, [sp, #4]
 80058aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ac:	9300      	str	r3, [sp, #0]
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	68b9      	ldr	r1, [r7, #8]
 80058b4:	68f8      	ldr	r0, [r7, #12]
 80058b6:	f000 f850 	bl	800595a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80058ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80058bc:	f000 f8cc 	bl	8005a58 <prvAddNewTaskToReadyList>
 80058c0:	e001      	b.n	80058c6 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80058c2:	2300      	movs	r3, #0
 80058c4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80058c6:	697b      	ldr	r3, [r7, #20]
	}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3728      	adds	r7, #40	; 0x28
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b08c      	sub	sp, #48	; 0x30
 80058d4:	af04      	add	r7, sp, #16
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	603b      	str	r3, [r7, #0]
 80058dc:	4613      	mov	r3, r2
 80058de:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058e0:	88fb      	ldrh	r3, [r7, #6]
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	4618      	mov	r0, r3
 80058e6:	f001 fc6f 	bl	80071c8 <pvPortMalloc>
 80058ea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d00e      	beq.n	8005910 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80058f2:	2058      	movs	r0, #88	; 0x58
 80058f4:	f001 fc68 	bl	80071c8 <pvPortMalloc>
 80058f8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d003      	beq.n	8005908 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	697a      	ldr	r2, [r7, #20]
 8005904:	631a      	str	r2, [r3, #48]	; 0x30
 8005906:	e005      	b.n	8005914 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005908:	6978      	ldr	r0, [r7, #20]
 800590a:	f001 fd21 	bl	8007350 <vPortFree>
 800590e:	e001      	b.n	8005914 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005910:	2300      	movs	r3, #0
 8005912:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d017      	beq.n	800594a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005922:	88fa      	ldrh	r2, [r7, #6]
 8005924:	2300      	movs	r3, #0
 8005926:	9303      	str	r3, [sp, #12]
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	9302      	str	r3, [sp, #8]
 800592c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800592e:	9301      	str	r3, [sp, #4]
 8005930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005932:	9300      	str	r3, [sp, #0]
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	68b9      	ldr	r1, [r7, #8]
 8005938:	68f8      	ldr	r0, [r7, #12]
 800593a:	f000 f80e 	bl	800595a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800593e:	69f8      	ldr	r0, [r7, #28]
 8005940:	f000 f88a 	bl	8005a58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005944:	2301      	movs	r3, #1
 8005946:	61bb      	str	r3, [r7, #24]
 8005948:	e002      	b.n	8005950 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800594a:	f04f 33ff 	mov.w	r3, #4294967295
 800594e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005950:	69bb      	ldr	r3, [r7, #24]
	}
 8005952:	4618      	mov	r0, r3
 8005954:	3720      	adds	r7, #32
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}

0800595a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800595a:	b580      	push	{r7, lr}
 800595c:	b088      	sub	sp, #32
 800595e:	af00      	add	r7, sp, #0
 8005960:	60f8      	str	r0, [r7, #12]
 8005962:	60b9      	str	r1, [r7, #8]
 8005964:	607a      	str	r2, [r7, #4]
 8005966:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800596a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005972:	3b01      	subs	r3, #1
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	4413      	add	r3, r2
 8005978:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	f023 0307 	bic.w	r3, r3, #7
 8005980:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	f003 0307 	and.w	r3, r3, #7
 8005988:	2b00      	cmp	r3, #0
 800598a:	d00a      	beq.n	80059a2 <prvInitialiseNewTask+0x48>
	__asm volatile
 800598c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005990:	f383 8811 	msr	BASEPRI, r3
 8005994:	f3bf 8f6f 	isb	sy
 8005998:	f3bf 8f4f 	dsb	sy
 800599c:	617b      	str	r3, [r7, #20]
}
 800599e:	bf00      	nop
 80059a0:	e7fe      	b.n	80059a0 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80059a2:	2300      	movs	r3, #0
 80059a4:	61fb      	str	r3, [r7, #28]
 80059a6:	e012      	b.n	80059ce <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80059a8:	68ba      	ldr	r2, [r7, #8]
 80059aa:	69fb      	ldr	r3, [r7, #28]
 80059ac:	4413      	add	r3, r2
 80059ae:	7819      	ldrb	r1, [r3, #0]
 80059b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	4413      	add	r3, r2
 80059b6:	3334      	adds	r3, #52	; 0x34
 80059b8:	460a      	mov	r2, r1
 80059ba:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80059bc:	68ba      	ldr	r2, [r7, #8]
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	4413      	add	r3, r2
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d006      	beq.n	80059d6 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80059c8:	69fb      	ldr	r3, [r7, #28]
 80059ca:	3301      	adds	r3, #1
 80059cc:	61fb      	str	r3, [r7, #28]
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	2b11      	cmp	r3, #17
 80059d2:	d9e9      	bls.n	80059a8 <prvInitialiseNewTask+0x4e>
 80059d4:	e000      	b.n	80059d8 <prvInitialiseNewTask+0x7e>
		{
			break;
 80059d6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80059d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059da:	2200      	movs	r2, #0
 80059dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80059e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e2:	2b06      	cmp	r3, #6
 80059e4:	d901      	bls.n	80059ea <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80059e6:	2306      	movs	r3, #6
 80059e8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80059ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059ee:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80059f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059f4:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 80059f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f8:	2200      	movs	r2, #0
 80059fa:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80059fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fe:	3304      	adds	r3, #4
 8005a00:	4618      	mov	r0, r3
 8005a02:	f7ff f992 	bl	8004d2a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a08:	3318      	adds	r3, #24
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7ff f98d 	bl	8004d2a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a14:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a18:	f1c3 0207 	rsb	r2, r3, #7
 8005a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a24:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a28:	2200      	movs	r2, #0
 8005a2a:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005a34:	683a      	ldr	r2, [r7, #0]
 8005a36:	68f9      	ldr	r1, [r7, #12]
 8005a38:	69b8      	ldr	r0, [r7, #24]
 8005a3a:	f001 f975 	bl	8006d28 <pxPortInitialiseStack>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a42:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d002      	beq.n	8005a50 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a4e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a50:	bf00      	nop
 8005a52:	3720      	adds	r7, #32
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b082      	sub	sp, #8
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005a60:	f001 fa90 	bl	8006f84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005a64:	4b2a      	ldr	r3, [pc, #168]	; (8005b10 <prvAddNewTaskToReadyList+0xb8>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	3301      	adds	r3, #1
 8005a6a:	4a29      	ldr	r2, [pc, #164]	; (8005b10 <prvAddNewTaskToReadyList+0xb8>)
 8005a6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005a6e:	4b29      	ldr	r3, [pc, #164]	; (8005b14 <prvAddNewTaskToReadyList+0xbc>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d109      	bne.n	8005a8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005a76:	4a27      	ldr	r2, [pc, #156]	; (8005b14 <prvAddNewTaskToReadyList+0xbc>)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005a7c:	4b24      	ldr	r3, [pc, #144]	; (8005b10 <prvAddNewTaskToReadyList+0xb8>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d110      	bne.n	8005aa6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005a84:	f000 fc70 	bl	8006368 <prvInitialiseTaskLists>
 8005a88:	e00d      	b.n	8005aa6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005a8a:	4b23      	ldr	r3, [pc, #140]	; (8005b18 <prvAddNewTaskToReadyList+0xc0>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d109      	bne.n	8005aa6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005a92:	4b20      	ldr	r3, [pc, #128]	; (8005b14 <prvAddNewTaskToReadyList+0xbc>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d802      	bhi.n	8005aa6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005aa0:	4a1c      	ldr	r2, [pc, #112]	; (8005b14 <prvAddNewTaskToReadyList+0xbc>)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005aa6:	4b1d      	ldr	r3, [pc, #116]	; (8005b1c <prvAddNewTaskToReadyList+0xc4>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	3301      	adds	r3, #1
 8005aac:	4a1b      	ldr	r2, [pc, #108]	; (8005b1c <prvAddNewTaskToReadyList+0xc4>)
 8005aae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	409a      	lsls	r2, r3
 8005ab8:	4b19      	ldr	r3, [pc, #100]	; (8005b20 <prvAddNewTaskToReadyList+0xc8>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	4a18      	ldr	r2, [pc, #96]	; (8005b20 <prvAddNewTaskToReadyList+0xc8>)
 8005ac0:	6013      	str	r3, [r2, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	4413      	add	r3, r2
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	4a15      	ldr	r2, [pc, #84]	; (8005b24 <prvAddNewTaskToReadyList+0xcc>)
 8005ad0:	441a      	add	r2, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	3304      	adds	r3, #4
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	4610      	mov	r0, r2
 8005ada:	f7ff f933 	bl	8004d44 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005ade:	f001 fa81 	bl	8006fe4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005ae2:	4b0d      	ldr	r3, [pc, #52]	; (8005b18 <prvAddNewTaskToReadyList+0xc0>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00e      	beq.n	8005b08 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005aea:	4b0a      	ldr	r3, [pc, #40]	; (8005b14 <prvAddNewTaskToReadyList+0xbc>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d207      	bcs.n	8005b08 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005af8:	4b0b      	ldr	r3, [pc, #44]	; (8005b28 <prvAddNewTaskToReadyList+0xd0>)
 8005afa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005afe:	601a      	str	r2, [r3, #0]
 8005b00:	f3bf 8f4f 	dsb	sy
 8005b04:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b08:	bf00      	nop
 8005b0a:	3708      	adds	r7, #8
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	200009d4 	.word	0x200009d4
 8005b14:	200008d4 	.word	0x200008d4
 8005b18:	200009e0 	.word	0x200009e0
 8005b1c:	200009f0 	.word	0x200009f0
 8005b20:	200009dc 	.word	0x200009dc
 8005b24:	200008d8 	.word	0x200008d8
 8005b28:	e000ed04 	.word	0xe000ed04

08005b2c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005b34:	2300      	movs	r3, #0
 8005b36:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d017      	beq.n	8005b6e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005b3e:	4b13      	ldr	r3, [pc, #76]	; (8005b8c <vTaskDelay+0x60>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00a      	beq.n	8005b5c <vTaskDelay+0x30>
	__asm volatile
 8005b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b4a:	f383 8811 	msr	BASEPRI, r3
 8005b4e:	f3bf 8f6f 	isb	sy
 8005b52:	f3bf 8f4f 	dsb	sy
 8005b56:	60bb      	str	r3, [r7, #8]
}
 8005b58:	bf00      	nop
 8005b5a:	e7fe      	b.n	8005b5a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005b5c:	f000 f880 	bl	8005c60 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005b60:	2100      	movs	r1, #0
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 fd68 	bl	8006638 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005b68:	f000 f888 	bl	8005c7c <xTaskResumeAll>
 8005b6c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d107      	bne.n	8005b84 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005b74:	4b06      	ldr	r3, [pc, #24]	; (8005b90 <vTaskDelay+0x64>)
 8005b76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b7a:	601a      	str	r2, [r3, #0]
 8005b7c:	f3bf 8f4f 	dsb	sy
 8005b80:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005b84:	bf00      	nop
 8005b86:	3710      	adds	r7, #16
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	200009fc 	.word	0x200009fc
 8005b90:	e000ed04 	.word	0xe000ed04

08005b94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b08a      	sub	sp, #40	; 0x28
 8005b98:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005ba2:	463a      	mov	r2, r7
 8005ba4:	1d39      	adds	r1, r7, #4
 8005ba6:	f107 0308 	add.w	r3, r7, #8
 8005baa:	4618      	mov	r0, r3
 8005bac:	f7fa fb56 	bl	800025c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005bb0:	6839      	ldr	r1, [r7, #0]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	68ba      	ldr	r2, [r7, #8]
 8005bb6:	9202      	str	r2, [sp, #8]
 8005bb8:	9301      	str	r3, [sp, #4]
 8005bba:	2300      	movs	r3, #0
 8005bbc:	9300      	str	r3, [sp, #0]
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	460a      	mov	r2, r1
 8005bc2:	4921      	ldr	r1, [pc, #132]	; (8005c48 <vTaskStartScheduler+0xb4>)
 8005bc4:	4821      	ldr	r0, [pc, #132]	; (8005c4c <vTaskStartScheduler+0xb8>)
 8005bc6:	f7ff fe27 	bl	8005818 <xTaskCreateStatic>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	4a20      	ldr	r2, [pc, #128]	; (8005c50 <vTaskStartScheduler+0xbc>)
 8005bce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005bd0:	4b1f      	ldr	r3, [pc, #124]	; (8005c50 <vTaskStartScheduler+0xbc>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d002      	beq.n	8005bde <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	617b      	str	r3, [r7, #20]
 8005bdc:	e001      	b.n	8005be2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005bde:	2300      	movs	r3, #0
 8005be0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d102      	bne.n	8005bee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005be8:	f000 fd8c 	bl	8006704 <xTimerCreateTimerTask>
 8005bec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d116      	bne.n	8005c22 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf8:	f383 8811 	msr	BASEPRI, r3
 8005bfc:	f3bf 8f6f 	isb	sy
 8005c00:	f3bf 8f4f 	dsb	sy
 8005c04:	613b      	str	r3, [r7, #16]
}
 8005c06:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005c08:	4b12      	ldr	r3, [pc, #72]	; (8005c54 <vTaskStartScheduler+0xc0>)
 8005c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8005c0e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005c10:	4b11      	ldr	r3, [pc, #68]	; (8005c58 <vTaskStartScheduler+0xc4>)
 8005c12:	2201      	movs	r2, #1
 8005c14:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005c16:	4b11      	ldr	r3, [pc, #68]	; (8005c5c <vTaskStartScheduler+0xc8>)
 8005c18:	2200      	movs	r2, #0
 8005c1a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005c1c:	f001 f910 	bl	8006e40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005c20:	e00e      	b.n	8005c40 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c28:	d10a      	bne.n	8005c40 <vTaskStartScheduler+0xac>
	__asm volatile
 8005c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c2e:	f383 8811 	msr	BASEPRI, r3
 8005c32:	f3bf 8f6f 	isb	sy
 8005c36:	f3bf 8f4f 	dsb	sy
 8005c3a:	60fb      	str	r3, [r7, #12]
}
 8005c3c:	bf00      	nop
 8005c3e:	e7fe      	b.n	8005c3e <vTaskStartScheduler+0xaa>
}
 8005c40:	bf00      	nop
 8005c42:	3718      	adds	r7, #24
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	0800772c 	.word	0x0800772c
 8005c4c:	08006339 	.word	0x08006339
 8005c50:	200009f8 	.word	0x200009f8
 8005c54:	200009f4 	.word	0x200009f4
 8005c58:	200009e0 	.word	0x200009e0
 8005c5c:	200009d8 	.word	0x200009d8

08005c60 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005c60:	b480      	push	{r7}
 8005c62:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005c64:	4b04      	ldr	r3, [pc, #16]	; (8005c78 <vTaskSuspendAll+0x18>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	3301      	adds	r3, #1
 8005c6a:	4a03      	ldr	r2, [pc, #12]	; (8005c78 <vTaskSuspendAll+0x18>)
 8005c6c:	6013      	str	r3, [r2, #0]
}
 8005c6e:	bf00      	nop
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr
 8005c78:	200009fc 	.word	0x200009fc

08005c7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005c82:	2300      	movs	r3, #0
 8005c84:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005c86:	2300      	movs	r3, #0
 8005c88:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005c8a:	4b41      	ldr	r3, [pc, #260]	; (8005d90 <xTaskResumeAll+0x114>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d10a      	bne.n	8005ca8 <xTaskResumeAll+0x2c>
	__asm volatile
 8005c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c96:	f383 8811 	msr	BASEPRI, r3
 8005c9a:	f3bf 8f6f 	isb	sy
 8005c9e:	f3bf 8f4f 	dsb	sy
 8005ca2:	603b      	str	r3, [r7, #0]
}
 8005ca4:	bf00      	nop
 8005ca6:	e7fe      	b.n	8005ca6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005ca8:	f001 f96c 	bl	8006f84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005cac:	4b38      	ldr	r3, [pc, #224]	; (8005d90 <xTaskResumeAll+0x114>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	3b01      	subs	r3, #1
 8005cb2:	4a37      	ldr	r2, [pc, #220]	; (8005d90 <xTaskResumeAll+0x114>)
 8005cb4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cb6:	4b36      	ldr	r3, [pc, #216]	; (8005d90 <xTaskResumeAll+0x114>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d161      	bne.n	8005d82 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005cbe:	4b35      	ldr	r3, [pc, #212]	; (8005d94 <xTaskResumeAll+0x118>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d05d      	beq.n	8005d82 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005cc6:	e02e      	b.n	8005d26 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005cc8:	4b33      	ldr	r3, [pc, #204]	; (8005d98 <xTaskResumeAll+0x11c>)
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	3318      	adds	r3, #24
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f7ff f892 	bl	8004dfe <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	3304      	adds	r3, #4
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7ff f88d 	bl	8004dfe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce8:	2201      	movs	r2, #1
 8005cea:	409a      	lsls	r2, r3
 8005cec:	4b2b      	ldr	r3, [pc, #172]	; (8005d9c <xTaskResumeAll+0x120>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	4a2a      	ldr	r2, [pc, #168]	; (8005d9c <xTaskResumeAll+0x120>)
 8005cf4:	6013      	str	r3, [r2, #0]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cfa:	4613      	mov	r3, r2
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	4413      	add	r3, r2
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	4a27      	ldr	r2, [pc, #156]	; (8005da0 <xTaskResumeAll+0x124>)
 8005d04:	441a      	add	r2, r3
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	3304      	adds	r3, #4
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	4610      	mov	r0, r2
 8005d0e:	f7ff f819 	bl	8004d44 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d16:	4b23      	ldr	r3, [pc, #140]	; (8005da4 <xTaskResumeAll+0x128>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d302      	bcc.n	8005d26 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005d20:	4b21      	ldr	r3, [pc, #132]	; (8005da8 <xTaskResumeAll+0x12c>)
 8005d22:	2201      	movs	r2, #1
 8005d24:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d26:	4b1c      	ldr	r3, [pc, #112]	; (8005d98 <xTaskResumeAll+0x11c>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d1cc      	bne.n	8005cc8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d001      	beq.n	8005d38 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005d34:	f000 fbb6 	bl	80064a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005d38:	4b1c      	ldr	r3, [pc, #112]	; (8005dac <xTaskResumeAll+0x130>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d010      	beq.n	8005d66 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005d44:	f000 f846 	bl	8005dd4 <xTaskIncrementTick>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d002      	beq.n	8005d54 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005d4e:	4b16      	ldr	r3, [pc, #88]	; (8005da8 <xTaskResumeAll+0x12c>)
 8005d50:	2201      	movs	r2, #1
 8005d52:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	3b01      	subs	r3, #1
 8005d58:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d1f1      	bne.n	8005d44 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005d60:	4b12      	ldr	r3, [pc, #72]	; (8005dac <xTaskResumeAll+0x130>)
 8005d62:	2200      	movs	r2, #0
 8005d64:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005d66:	4b10      	ldr	r3, [pc, #64]	; (8005da8 <xTaskResumeAll+0x12c>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d009      	beq.n	8005d82 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005d72:	4b0f      	ldr	r3, [pc, #60]	; (8005db0 <xTaskResumeAll+0x134>)
 8005d74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d78:	601a      	str	r2, [r3, #0]
 8005d7a:	f3bf 8f4f 	dsb	sy
 8005d7e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d82:	f001 f92f 	bl	8006fe4 <vPortExitCritical>

	return xAlreadyYielded;
 8005d86:	68bb      	ldr	r3, [r7, #8]
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3710      	adds	r7, #16
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	200009fc 	.word	0x200009fc
 8005d94:	200009d4 	.word	0x200009d4
 8005d98:	20000994 	.word	0x20000994
 8005d9c:	200009dc 	.word	0x200009dc
 8005da0:	200008d8 	.word	0x200008d8
 8005da4:	200008d4 	.word	0x200008d4
 8005da8:	200009e8 	.word	0x200009e8
 8005dac:	200009e4 	.word	0x200009e4
 8005db0:	e000ed04 	.word	0xe000ed04

08005db4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005dba:	4b05      	ldr	r3, [pc, #20]	; (8005dd0 <xTaskGetTickCount+0x1c>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005dc0:	687b      	ldr	r3, [r7, #4]
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	370c      	adds	r7, #12
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	200009d8 	.word	0x200009d8

08005dd4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b086      	sub	sp, #24
 8005dd8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005dde:	4b51      	ldr	r3, [pc, #324]	; (8005f24 <xTaskIncrementTick+0x150>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	f040 808d 	bne.w	8005f02 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005de8:	4b4f      	ldr	r3, [pc, #316]	; (8005f28 <xTaskIncrementTick+0x154>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	3301      	adds	r3, #1
 8005dee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005df0:	4a4d      	ldr	r2, [pc, #308]	; (8005f28 <xTaskIncrementTick+0x154>)
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d120      	bne.n	8005e3e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005dfc:	4b4b      	ldr	r3, [pc, #300]	; (8005f2c <xTaskIncrementTick+0x158>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00a      	beq.n	8005e1c <xTaskIncrementTick+0x48>
	__asm volatile
 8005e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e0a:	f383 8811 	msr	BASEPRI, r3
 8005e0e:	f3bf 8f6f 	isb	sy
 8005e12:	f3bf 8f4f 	dsb	sy
 8005e16:	603b      	str	r3, [r7, #0]
}
 8005e18:	bf00      	nop
 8005e1a:	e7fe      	b.n	8005e1a <xTaskIncrementTick+0x46>
 8005e1c:	4b43      	ldr	r3, [pc, #268]	; (8005f2c <xTaskIncrementTick+0x158>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	60fb      	str	r3, [r7, #12]
 8005e22:	4b43      	ldr	r3, [pc, #268]	; (8005f30 <xTaskIncrementTick+0x15c>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a41      	ldr	r2, [pc, #260]	; (8005f2c <xTaskIncrementTick+0x158>)
 8005e28:	6013      	str	r3, [r2, #0]
 8005e2a:	4a41      	ldr	r2, [pc, #260]	; (8005f30 <xTaskIncrementTick+0x15c>)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6013      	str	r3, [r2, #0]
 8005e30:	4b40      	ldr	r3, [pc, #256]	; (8005f34 <xTaskIncrementTick+0x160>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	3301      	adds	r3, #1
 8005e36:	4a3f      	ldr	r2, [pc, #252]	; (8005f34 <xTaskIncrementTick+0x160>)
 8005e38:	6013      	str	r3, [r2, #0]
 8005e3a:	f000 fb33 	bl	80064a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005e3e:	4b3e      	ldr	r3, [pc, #248]	; (8005f38 <xTaskIncrementTick+0x164>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	693a      	ldr	r2, [r7, #16]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d34d      	bcc.n	8005ee4 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e48:	4b38      	ldr	r3, [pc, #224]	; (8005f2c <xTaskIncrementTick+0x158>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d101      	bne.n	8005e56 <xTaskIncrementTick+0x82>
 8005e52:	2301      	movs	r3, #1
 8005e54:	e000      	b.n	8005e58 <xTaskIncrementTick+0x84>
 8005e56:	2300      	movs	r3, #0
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d004      	beq.n	8005e66 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e5c:	4b36      	ldr	r3, [pc, #216]	; (8005f38 <xTaskIncrementTick+0x164>)
 8005e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8005e62:	601a      	str	r2, [r3, #0]
					break;
 8005e64:	e03e      	b.n	8005ee4 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005e66:	4b31      	ldr	r3, [pc, #196]	; (8005f2c <xTaskIncrementTick+0x158>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005e76:	693a      	ldr	r2, [r7, #16]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d203      	bcs.n	8005e86 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005e7e:	4a2e      	ldr	r2, [pc, #184]	; (8005f38 <xTaskIncrementTick+0x164>)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6013      	str	r3, [r2, #0]
						break;
 8005e84:	e02e      	b.n	8005ee4 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	3304      	adds	r3, #4
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f7fe ffb7 	bl	8004dfe <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d004      	beq.n	8005ea2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	3318      	adds	r3, #24
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f7fe ffae 	bl	8004dfe <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	409a      	lsls	r2, r3
 8005eaa:	4b24      	ldr	r3, [pc, #144]	; (8005f3c <xTaskIncrementTick+0x168>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	4a22      	ldr	r2, [pc, #136]	; (8005f3c <xTaskIncrementTick+0x168>)
 8005eb2:	6013      	str	r3, [r2, #0]
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eb8:	4613      	mov	r3, r2
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	4413      	add	r3, r2
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	4a1f      	ldr	r2, [pc, #124]	; (8005f40 <xTaskIncrementTick+0x16c>)
 8005ec2:	441a      	add	r2, r3
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	3304      	adds	r3, #4
 8005ec8:	4619      	mov	r1, r3
 8005eca:	4610      	mov	r0, r2
 8005ecc:	f7fe ff3a 	bl	8004d44 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ed4:	4b1b      	ldr	r3, [pc, #108]	; (8005f44 <xTaskIncrementTick+0x170>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d3b4      	bcc.n	8005e48 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ee2:	e7b1      	b.n	8005e48 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005ee4:	4b17      	ldr	r3, [pc, #92]	; (8005f44 <xTaskIncrementTick+0x170>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eea:	4915      	ldr	r1, [pc, #84]	; (8005f40 <xTaskIncrementTick+0x16c>)
 8005eec:	4613      	mov	r3, r2
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	4413      	add	r3, r2
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	440b      	add	r3, r1
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d907      	bls.n	8005f0c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8005efc:	2301      	movs	r3, #1
 8005efe:	617b      	str	r3, [r7, #20]
 8005f00:	e004      	b.n	8005f0c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005f02:	4b11      	ldr	r3, [pc, #68]	; (8005f48 <xTaskIncrementTick+0x174>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	3301      	adds	r3, #1
 8005f08:	4a0f      	ldr	r2, [pc, #60]	; (8005f48 <xTaskIncrementTick+0x174>)
 8005f0a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005f0c:	4b0f      	ldr	r3, [pc, #60]	; (8005f4c <xTaskIncrementTick+0x178>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d001      	beq.n	8005f18 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8005f14:	2301      	movs	r3, #1
 8005f16:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005f18:	697b      	ldr	r3, [r7, #20]
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3718      	adds	r7, #24
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	200009fc 	.word	0x200009fc
 8005f28:	200009d8 	.word	0x200009d8
 8005f2c:	2000098c 	.word	0x2000098c
 8005f30:	20000990 	.word	0x20000990
 8005f34:	200009ec 	.word	0x200009ec
 8005f38:	200009f4 	.word	0x200009f4
 8005f3c:	200009dc 	.word	0x200009dc
 8005f40:	200008d8 	.word	0x200008d8
 8005f44:	200008d4 	.word	0x200008d4
 8005f48:	200009e4 	.word	0x200009e4
 8005f4c:	200009e8 	.word	0x200009e8

08005f50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005f50:	b480      	push	{r7}
 8005f52:	b087      	sub	sp, #28
 8005f54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005f56:	4b27      	ldr	r3, [pc, #156]	; (8005ff4 <vTaskSwitchContext+0xa4>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d003      	beq.n	8005f66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005f5e:	4b26      	ldr	r3, [pc, #152]	; (8005ff8 <vTaskSwitchContext+0xa8>)
 8005f60:	2201      	movs	r2, #1
 8005f62:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005f64:	e03f      	b.n	8005fe6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8005f66:	4b24      	ldr	r3, [pc, #144]	; (8005ff8 <vTaskSwitchContext+0xa8>)
 8005f68:	2200      	movs	r2, #0
 8005f6a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005f6c:	4b23      	ldr	r3, [pc, #140]	; (8005ffc <vTaskSwitchContext+0xac>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	fab3 f383 	clz	r3, r3
 8005f78:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005f7a:	7afb      	ldrb	r3, [r7, #11]
 8005f7c:	f1c3 031f 	rsb	r3, r3, #31
 8005f80:	617b      	str	r3, [r7, #20]
 8005f82:	491f      	ldr	r1, [pc, #124]	; (8006000 <vTaskSwitchContext+0xb0>)
 8005f84:	697a      	ldr	r2, [r7, #20]
 8005f86:	4613      	mov	r3, r2
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	4413      	add	r3, r2
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	440b      	add	r3, r1
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d10a      	bne.n	8005fac <vTaskSwitchContext+0x5c>
	__asm volatile
 8005f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f9a:	f383 8811 	msr	BASEPRI, r3
 8005f9e:	f3bf 8f6f 	isb	sy
 8005fa2:	f3bf 8f4f 	dsb	sy
 8005fa6:	607b      	str	r3, [r7, #4]
}
 8005fa8:	bf00      	nop
 8005faa:	e7fe      	b.n	8005faa <vTaskSwitchContext+0x5a>
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	4613      	mov	r3, r2
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	4413      	add	r3, r2
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	4a12      	ldr	r2, [pc, #72]	; (8006000 <vTaskSwitchContext+0xb0>)
 8005fb8:	4413      	add	r3, r2
 8005fba:	613b      	str	r3, [r7, #16]
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	685a      	ldr	r2, [r3, #4]
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	605a      	str	r2, [r3, #4]
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	685a      	ldr	r2, [r3, #4]
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	3308      	adds	r3, #8
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d104      	bne.n	8005fdc <vTaskSwitchContext+0x8c>
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	685a      	ldr	r2, [r3, #4]
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	605a      	str	r2, [r3, #4]
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	4a08      	ldr	r2, [pc, #32]	; (8006004 <vTaskSwitchContext+0xb4>)
 8005fe4:	6013      	str	r3, [r2, #0]
}
 8005fe6:	bf00      	nop
 8005fe8:	371c      	adds	r7, #28
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	200009fc 	.word	0x200009fc
 8005ff8:	200009e8 	.word	0x200009e8
 8005ffc:	200009dc 	.word	0x200009dc
 8006000:	200008d8 	.word	0x200008d8
 8006004:	200008d4 	.word	0x200008d4

08006008 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d10a      	bne.n	800602e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601c:	f383 8811 	msr	BASEPRI, r3
 8006020:	f3bf 8f6f 	isb	sy
 8006024:	f3bf 8f4f 	dsb	sy
 8006028:	60fb      	str	r3, [r7, #12]
}
 800602a:	bf00      	nop
 800602c:	e7fe      	b.n	800602c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800602e:	4b07      	ldr	r3, [pc, #28]	; (800604c <vTaskPlaceOnEventList+0x44>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	3318      	adds	r3, #24
 8006034:	4619      	mov	r1, r3
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f7fe fea8 	bl	8004d8c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800603c:	2101      	movs	r1, #1
 800603e:	6838      	ldr	r0, [r7, #0]
 8006040:	f000 fafa 	bl	8006638 <prvAddCurrentTaskToDelayedList>
}
 8006044:	bf00      	nop
 8006046:	3710      	adds	r7, #16
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}
 800604c:	200008d4 	.word	0x200008d4

08006050 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006050:	b580      	push	{r7, lr}
 8006052:	b086      	sub	sp, #24
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d10a      	bne.n	8006078 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006066:	f383 8811 	msr	BASEPRI, r3
 800606a:	f3bf 8f6f 	isb	sy
 800606e:	f3bf 8f4f 	dsb	sy
 8006072:	617b      	str	r3, [r7, #20]
}
 8006074:	bf00      	nop
 8006076:	e7fe      	b.n	8006076 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006078:	4b0a      	ldr	r3, [pc, #40]	; (80060a4 <vTaskPlaceOnEventListRestricted+0x54>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	3318      	adds	r3, #24
 800607e:	4619      	mov	r1, r3
 8006080:	68f8      	ldr	r0, [r7, #12]
 8006082:	f7fe fe5f 	bl	8004d44 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d002      	beq.n	8006092 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800608c:	f04f 33ff 	mov.w	r3, #4294967295
 8006090:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006092:	6879      	ldr	r1, [r7, #4]
 8006094:	68b8      	ldr	r0, [r7, #8]
 8006096:	f000 facf 	bl	8006638 <prvAddCurrentTaskToDelayedList>
	}
 800609a:	bf00      	nop
 800609c:	3718      	adds	r7, #24
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	200008d4 	.word	0x200008d4

080060a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b086      	sub	sp, #24
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d10a      	bne.n	80060d4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80060be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c2:	f383 8811 	msr	BASEPRI, r3
 80060c6:	f3bf 8f6f 	isb	sy
 80060ca:	f3bf 8f4f 	dsb	sy
 80060ce:	60fb      	str	r3, [r7, #12]
}
 80060d0:	bf00      	nop
 80060d2:	e7fe      	b.n	80060d2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	3318      	adds	r3, #24
 80060d8:	4618      	mov	r0, r3
 80060da:	f7fe fe90 	bl	8004dfe <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060de:	4b1d      	ldr	r3, [pc, #116]	; (8006154 <xTaskRemoveFromEventList+0xac>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d11c      	bne.n	8006120 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	3304      	adds	r3, #4
 80060ea:	4618      	mov	r0, r3
 80060ec:	f7fe fe87 	bl	8004dfe <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f4:	2201      	movs	r2, #1
 80060f6:	409a      	lsls	r2, r3
 80060f8:	4b17      	ldr	r3, [pc, #92]	; (8006158 <xTaskRemoveFromEventList+0xb0>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	4a16      	ldr	r2, [pc, #88]	; (8006158 <xTaskRemoveFromEventList+0xb0>)
 8006100:	6013      	str	r3, [r2, #0]
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006106:	4613      	mov	r3, r2
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	4413      	add	r3, r2
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	4a13      	ldr	r2, [pc, #76]	; (800615c <xTaskRemoveFromEventList+0xb4>)
 8006110:	441a      	add	r2, r3
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	3304      	adds	r3, #4
 8006116:	4619      	mov	r1, r3
 8006118:	4610      	mov	r0, r2
 800611a:	f7fe fe13 	bl	8004d44 <vListInsertEnd>
 800611e:	e005      	b.n	800612c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	3318      	adds	r3, #24
 8006124:	4619      	mov	r1, r3
 8006126:	480e      	ldr	r0, [pc, #56]	; (8006160 <xTaskRemoveFromEventList+0xb8>)
 8006128:	f7fe fe0c 	bl	8004d44 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006130:	4b0c      	ldr	r3, [pc, #48]	; (8006164 <xTaskRemoveFromEventList+0xbc>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006136:	429a      	cmp	r2, r3
 8006138:	d905      	bls.n	8006146 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800613a:	2301      	movs	r3, #1
 800613c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800613e:	4b0a      	ldr	r3, [pc, #40]	; (8006168 <xTaskRemoveFromEventList+0xc0>)
 8006140:	2201      	movs	r2, #1
 8006142:	601a      	str	r2, [r3, #0]
 8006144:	e001      	b.n	800614a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006146:	2300      	movs	r3, #0
 8006148:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800614a:	697b      	ldr	r3, [r7, #20]
}
 800614c:	4618      	mov	r0, r3
 800614e:	3718      	adds	r7, #24
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}
 8006154:	200009fc 	.word	0x200009fc
 8006158:	200009dc 	.word	0x200009dc
 800615c:	200008d8 	.word	0x200008d8
 8006160:	20000994 	.word	0x20000994
 8006164:	200008d4 	.word	0x200008d4
 8006168:	200009e8 	.word	0x200009e8

0800616c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b086      	sub	sp, #24
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8006176:	4b29      	ldr	r3, [pc, #164]	; (800621c <vTaskRemoveFromUnorderedEventList+0xb0>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d10a      	bne.n	8006194 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800617e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006182:	f383 8811 	msr	BASEPRI, r3
 8006186:	f3bf 8f6f 	isb	sy
 800618a:	f3bf 8f4f 	dsb	sy
 800618e:	613b      	str	r3, [r7, #16]
}
 8006190:	bf00      	nop
 8006192:	e7fe      	b.n	8006192 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d10a      	bne.n	80061c0 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 80061aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ae:	f383 8811 	msr	BASEPRI, r3
 80061b2:	f3bf 8f6f 	isb	sy
 80061b6:	f3bf 8f4f 	dsb	sy
 80061ba:	60fb      	str	r3, [r7, #12]
}
 80061bc:	bf00      	nop
 80061be:	e7fe      	b.n	80061be <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f7fe fe1c 	bl	8004dfe <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	3304      	adds	r3, #4
 80061ca:	4618      	mov	r0, r3
 80061cc:	f7fe fe17 	bl	8004dfe <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d4:	2201      	movs	r2, #1
 80061d6:	409a      	lsls	r2, r3
 80061d8:	4b11      	ldr	r3, [pc, #68]	; (8006220 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4313      	orrs	r3, r2
 80061de:	4a10      	ldr	r2, [pc, #64]	; (8006220 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80061e0:	6013      	str	r3, [r2, #0]
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061e6:	4613      	mov	r3, r2
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	4413      	add	r3, r2
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	4a0d      	ldr	r2, [pc, #52]	; (8006224 <vTaskRemoveFromUnorderedEventList+0xb8>)
 80061f0:	441a      	add	r2, r3
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	3304      	adds	r3, #4
 80061f6:	4619      	mov	r1, r3
 80061f8:	4610      	mov	r0, r2
 80061fa:	f7fe fda3 	bl	8004d44 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006202:	4b09      	ldr	r3, [pc, #36]	; (8006228 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006208:	429a      	cmp	r2, r3
 800620a:	d902      	bls.n	8006212 <vTaskRemoveFromUnorderedEventList+0xa6>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800620c:	4b07      	ldr	r3, [pc, #28]	; (800622c <vTaskRemoveFromUnorderedEventList+0xc0>)
 800620e:	2201      	movs	r2, #1
 8006210:	601a      	str	r2, [r3, #0]
	}
}
 8006212:	bf00      	nop
 8006214:	3718      	adds	r7, #24
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop
 800621c:	200009fc 	.word	0x200009fc
 8006220:	200009dc 	.word	0x200009dc
 8006224:	200008d8 	.word	0x200008d8
 8006228:	200008d4 	.word	0x200008d4
 800622c:	200009e8 	.word	0x200009e8

08006230 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006238:	4b06      	ldr	r3, [pc, #24]	; (8006254 <vTaskInternalSetTimeOutState+0x24>)
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006240:	4b05      	ldr	r3, [pc, #20]	; (8006258 <vTaskInternalSetTimeOutState+0x28>)
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	605a      	str	r2, [r3, #4]
}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr
 8006254:	200009ec 	.word	0x200009ec
 8006258:	200009d8 	.word	0x200009d8

0800625c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b088      	sub	sp, #32
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d10a      	bne.n	8006282 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800626c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006270:	f383 8811 	msr	BASEPRI, r3
 8006274:	f3bf 8f6f 	isb	sy
 8006278:	f3bf 8f4f 	dsb	sy
 800627c:	613b      	str	r3, [r7, #16]
}
 800627e:	bf00      	nop
 8006280:	e7fe      	b.n	8006280 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d10a      	bne.n	800629e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800628c:	f383 8811 	msr	BASEPRI, r3
 8006290:	f3bf 8f6f 	isb	sy
 8006294:	f3bf 8f4f 	dsb	sy
 8006298:	60fb      	str	r3, [r7, #12]
}
 800629a:	bf00      	nop
 800629c:	e7fe      	b.n	800629c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800629e:	f000 fe71 	bl	8006f84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80062a2:	4b1d      	ldr	r3, [pc, #116]	; (8006318 <xTaskCheckForTimeOut+0xbc>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	69ba      	ldr	r2, [r7, #24]
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ba:	d102      	bne.n	80062c2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80062bc:	2300      	movs	r3, #0
 80062be:	61fb      	str	r3, [r7, #28]
 80062c0:	e023      	b.n	800630a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	4b15      	ldr	r3, [pc, #84]	; (800631c <xTaskCheckForTimeOut+0xc0>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d007      	beq.n	80062de <xTaskCheckForTimeOut+0x82>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	69ba      	ldr	r2, [r7, #24]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d302      	bcc.n	80062de <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80062d8:	2301      	movs	r3, #1
 80062da:	61fb      	str	r3, [r7, #28]
 80062dc:	e015      	b.n	800630a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	697a      	ldr	r2, [r7, #20]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d20b      	bcs.n	8006300 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	1ad2      	subs	r2, r2, r3
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f7ff ff9b 	bl	8006230 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80062fa:	2300      	movs	r3, #0
 80062fc:	61fb      	str	r3, [r7, #28]
 80062fe:	e004      	b.n	800630a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	2200      	movs	r2, #0
 8006304:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006306:	2301      	movs	r3, #1
 8006308:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800630a:	f000 fe6b 	bl	8006fe4 <vPortExitCritical>

	return xReturn;
 800630e:	69fb      	ldr	r3, [r7, #28]
}
 8006310:	4618      	mov	r0, r3
 8006312:	3720      	adds	r7, #32
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	200009d8 	.word	0x200009d8
 800631c:	200009ec 	.word	0x200009ec

08006320 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006320:	b480      	push	{r7}
 8006322:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006324:	4b03      	ldr	r3, [pc, #12]	; (8006334 <vTaskMissedYield+0x14>)
 8006326:	2201      	movs	r2, #1
 8006328:	601a      	str	r2, [r3, #0]
}
 800632a:	bf00      	nop
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr
 8006334:	200009e8 	.word	0x200009e8

08006338 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b082      	sub	sp, #8
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006340:	f000 f852 	bl	80063e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006344:	4b06      	ldr	r3, [pc, #24]	; (8006360 <prvIdleTask+0x28>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2b01      	cmp	r3, #1
 800634a:	d9f9      	bls.n	8006340 <prvIdleTask+0x8>
			{
				taskYIELD();
 800634c:	4b05      	ldr	r3, [pc, #20]	; (8006364 <prvIdleTask+0x2c>)
 800634e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006352:	601a      	str	r2, [r3, #0]
 8006354:	f3bf 8f4f 	dsb	sy
 8006358:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800635c:	e7f0      	b.n	8006340 <prvIdleTask+0x8>
 800635e:	bf00      	nop
 8006360:	200008d8 	.word	0x200008d8
 8006364:	e000ed04 	.word	0xe000ed04

08006368 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800636e:	2300      	movs	r3, #0
 8006370:	607b      	str	r3, [r7, #4]
 8006372:	e00c      	b.n	800638e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	4613      	mov	r3, r2
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	4413      	add	r3, r2
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	4a12      	ldr	r2, [pc, #72]	; (80063c8 <prvInitialiseTaskLists+0x60>)
 8006380:	4413      	add	r3, r2
 8006382:	4618      	mov	r0, r3
 8006384:	f7fe fcb1 	bl	8004cea <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	3301      	adds	r3, #1
 800638c:	607b      	str	r3, [r7, #4]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2b06      	cmp	r3, #6
 8006392:	d9ef      	bls.n	8006374 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006394:	480d      	ldr	r0, [pc, #52]	; (80063cc <prvInitialiseTaskLists+0x64>)
 8006396:	f7fe fca8 	bl	8004cea <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800639a:	480d      	ldr	r0, [pc, #52]	; (80063d0 <prvInitialiseTaskLists+0x68>)
 800639c:	f7fe fca5 	bl	8004cea <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80063a0:	480c      	ldr	r0, [pc, #48]	; (80063d4 <prvInitialiseTaskLists+0x6c>)
 80063a2:	f7fe fca2 	bl	8004cea <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80063a6:	480c      	ldr	r0, [pc, #48]	; (80063d8 <prvInitialiseTaskLists+0x70>)
 80063a8:	f7fe fc9f 	bl	8004cea <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80063ac:	480b      	ldr	r0, [pc, #44]	; (80063dc <prvInitialiseTaskLists+0x74>)
 80063ae:	f7fe fc9c 	bl	8004cea <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80063b2:	4b0b      	ldr	r3, [pc, #44]	; (80063e0 <prvInitialiseTaskLists+0x78>)
 80063b4:	4a05      	ldr	r2, [pc, #20]	; (80063cc <prvInitialiseTaskLists+0x64>)
 80063b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80063b8:	4b0a      	ldr	r3, [pc, #40]	; (80063e4 <prvInitialiseTaskLists+0x7c>)
 80063ba:	4a05      	ldr	r2, [pc, #20]	; (80063d0 <prvInitialiseTaskLists+0x68>)
 80063bc:	601a      	str	r2, [r3, #0]
}
 80063be:	bf00      	nop
 80063c0:	3708      	adds	r7, #8
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	200008d8 	.word	0x200008d8
 80063cc:	20000964 	.word	0x20000964
 80063d0:	20000978 	.word	0x20000978
 80063d4:	20000994 	.word	0x20000994
 80063d8:	200009a8 	.word	0x200009a8
 80063dc:	200009c0 	.word	0x200009c0
 80063e0:	2000098c 	.word	0x2000098c
 80063e4:	20000990 	.word	0x20000990

080063e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80063ee:	e019      	b.n	8006424 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80063f0:	f000 fdc8 	bl	8006f84 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80063f4:	4b10      	ldr	r3, [pc, #64]	; (8006438 <prvCheckTasksWaitingTermination+0x50>)
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	3304      	adds	r3, #4
 8006400:	4618      	mov	r0, r3
 8006402:	f7fe fcfc 	bl	8004dfe <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006406:	4b0d      	ldr	r3, [pc, #52]	; (800643c <prvCheckTasksWaitingTermination+0x54>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	3b01      	subs	r3, #1
 800640c:	4a0b      	ldr	r2, [pc, #44]	; (800643c <prvCheckTasksWaitingTermination+0x54>)
 800640e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006410:	4b0b      	ldr	r3, [pc, #44]	; (8006440 <prvCheckTasksWaitingTermination+0x58>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	3b01      	subs	r3, #1
 8006416:	4a0a      	ldr	r2, [pc, #40]	; (8006440 <prvCheckTasksWaitingTermination+0x58>)
 8006418:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800641a:	f000 fde3 	bl	8006fe4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 f810 	bl	8006444 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006424:	4b06      	ldr	r3, [pc, #24]	; (8006440 <prvCheckTasksWaitingTermination+0x58>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d1e1      	bne.n	80063f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800642c:	bf00      	nop
 800642e:	bf00      	nop
 8006430:	3708      	adds	r7, #8
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop
 8006438:	200009a8 	.word	0x200009a8
 800643c:	200009d4 	.word	0x200009d4
 8006440:	200009bc 	.word	0x200009bc

08006444 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006444:	b580      	push	{r7, lr}
 8006446:	b084      	sub	sp, #16
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8006452:	2b00      	cmp	r3, #0
 8006454:	d108      	bne.n	8006468 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800645a:	4618      	mov	r0, r3
 800645c:	f000 ff78 	bl	8007350 <vPortFree>
				vPortFree( pxTCB );
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 ff75 	bl	8007350 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006466:	e018      	b.n	800649a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800646e:	2b01      	cmp	r3, #1
 8006470:	d103      	bne.n	800647a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 ff6c 	bl	8007350 <vPortFree>
	}
 8006478:	e00f      	b.n	800649a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8006480:	2b02      	cmp	r3, #2
 8006482:	d00a      	beq.n	800649a <prvDeleteTCB+0x56>
	__asm volatile
 8006484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006488:	f383 8811 	msr	BASEPRI, r3
 800648c:	f3bf 8f6f 	isb	sy
 8006490:	f3bf 8f4f 	dsb	sy
 8006494:	60fb      	str	r3, [r7, #12]
}
 8006496:	bf00      	nop
 8006498:	e7fe      	b.n	8006498 <prvDeleteTCB+0x54>
	}
 800649a:	bf00      	nop
 800649c:	3710      	adds	r7, #16
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
	...

080064a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064aa:	4b0f      	ldr	r3, [pc, #60]	; (80064e8 <prvResetNextTaskUnblockTime+0x44>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d101      	bne.n	80064b8 <prvResetNextTaskUnblockTime+0x14>
 80064b4:	2301      	movs	r3, #1
 80064b6:	e000      	b.n	80064ba <prvResetNextTaskUnblockTime+0x16>
 80064b8:	2300      	movs	r3, #0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d004      	beq.n	80064c8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80064be:	4b0b      	ldr	r3, [pc, #44]	; (80064ec <prvResetNextTaskUnblockTime+0x48>)
 80064c0:	f04f 32ff 	mov.w	r2, #4294967295
 80064c4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80064c6:	e008      	b.n	80064da <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80064c8:	4b07      	ldr	r3, [pc, #28]	; (80064e8 <prvResetNextTaskUnblockTime+0x44>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	4a05      	ldr	r2, [pc, #20]	; (80064ec <prvResetNextTaskUnblockTime+0x48>)
 80064d8:	6013      	str	r3, [r2, #0]
}
 80064da:	bf00      	nop
 80064dc:	370c      	adds	r7, #12
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr
 80064e6:	bf00      	nop
 80064e8:	2000098c 	.word	0x2000098c
 80064ec:	200009f4 	.word	0x200009f4

080064f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80064f6:	4b0b      	ldr	r3, [pc, #44]	; (8006524 <xTaskGetSchedulerState+0x34>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d102      	bne.n	8006504 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80064fe:	2301      	movs	r3, #1
 8006500:	607b      	str	r3, [r7, #4]
 8006502:	e008      	b.n	8006516 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006504:	4b08      	ldr	r3, [pc, #32]	; (8006528 <xTaskGetSchedulerState+0x38>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d102      	bne.n	8006512 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800650c:	2302      	movs	r3, #2
 800650e:	607b      	str	r3, [r7, #4]
 8006510:	e001      	b.n	8006516 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006512:	2300      	movs	r3, #0
 8006514:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006516:	687b      	ldr	r3, [r7, #4]
	}
 8006518:	4618      	mov	r0, r3
 800651a:	370c      	adds	r7, #12
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr
 8006524:	200009e0 	.word	0x200009e0
 8006528:	200009fc 	.word	0x200009fc

0800652c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800652c:	b580      	push	{r7, lr}
 800652e:	b086      	sub	sp, #24
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006538:	2300      	movs	r3, #0
 800653a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d06e      	beq.n	8006620 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006542:	4b3a      	ldr	r3, [pc, #232]	; (800662c <xTaskPriorityDisinherit+0x100>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	693a      	ldr	r2, [r7, #16]
 8006548:	429a      	cmp	r2, r3
 800654a:	d00a      	beq.n	8006562 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800654c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006550:	f383 8811 	msr	BASEPRI, r3
 8006554:	f3bf 8f6f 	isb	sy
 8006558:	f3bf 8f4f 	dsb	sy
 800655c:	60fb      	str	r3, [r7, #12]
}
 800655e:	bf00      	nop
 8006560:	e7fe      	b.n	8006560 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006566:	2b00      	cmp	r3, #0
 8006568:	d10a      	bne.n	8006580 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800656a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800656e:	f383 8811 	msr	BASEPRI, r3
 8006572:	f3bf 8f6f 	isb	sy
 8006576:	f3bf 8f4f 	dsb	sy
 800657a:	60bb      	str	r3, [r7, #8]
}
 800657c:	bf00      	nop
 800657e:	e7fe      	b.n	800657e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006584:	1e5a      	subs	r2, r3, #1
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006592:	429a      	cmp	r2, r3
 8006594:	d044      	beq.n	8006620 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800659a:	2b00      	cmp	r3, #0
 800659c:	d140      	bne.n	8006620 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	3304      	adds	r3, #4
 80065a2:	4618      	mov	r0, r3
 80065a4:	f7fe fc2b 	bl	8004dfe <uxListRemove>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d115      	bne.n	80065da <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065b2:	491f      	ldr	r1, [pc, #124]	; (8006630 <xTaskPriorityDisinherit+0x104>)
 80065b4:	4613      	mov	r3, r2
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	4413      	add	r3, r2
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	440b      	add	r3, r1
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d10a      	bne.n	80065da <xTaskPriorityDisinherit+0xae>
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c8:	2201      	movs	r2, #1
 80065ca:	fa02 f303 	lsl.w	r3, r2, r3
 80065ce:	43da      	mvns	r2, r3
 80065d0:	4b18      	ldr	r3, [pc, #96]	; (8006634 <xTaskPriorityDisinherit+0x108>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4013      	ands	r3, r2
 80065d6:	4a17      	ldr	r2, [pc, #92]	; (8006634 <xTaskPriorityDisinherit+0x108>)
 80065d8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e6:	f1c3 0207 	rsb	r2, r3, #7
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f2:	2201      	movs	r2, #1
 80065f4:	409a      	lsls	r2, r3
 80065f6:	4b0f      	ldr	r3, [pc, #60]	; (8006634 <xTaskPriorityDisinherit+0x108>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	4a0d      	ldr	r2, [pc, #52]	; (8006634 <xTaskPriorityDisinherit+0x108>)
 80065fe:	6013      	str	r3, [r2, #0]
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006604:	4613      	mov	r3, r2
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	4413      	add	r3, r2
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	4a08      	ldr	r2, [pc, #32]	; (8006630 <xTaskPriorityDisinherit+0x104>)
 800660e:	441a      	add	r2, r3
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	3304      	adds	r3, #4
 8006614:	4619      	mov	r1, r3
 8006616:	4610      	mov	r0, r2
 8006618:	f7fe fb94 	bl	8004d44 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800661c:	2301      	movs	r3, #1
 800661e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006620:	697b      	ldr	r3, [r7, #20]
	}
 8006622:	4618      	mov	r0, r3
 8006624:	3718      	adds	r7, #24
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	200008d4 	.word	0x200008d4
 8006630:	200008d8 	.word	0x200008d8
 8006634:	200009dc 	.word	0x200009dc

08006638 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006642:	4b29      	ldr	r3, [pc, #164]	; (80066e8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006648:	4b28      	ldr	r3, [pc, #160]	; (80066ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	3304      	adds	r3, #4
 800664e:	4618      	mov	r0, r3
 8006650:	f7fe fbd5 	bl	8004dfe <uxListRemove>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d10b      	bne.n	8006672 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800665a:	4b24      	ldr	r3, [pc, #144]	; (80066ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006660:	2201      	movs	r2, #1
 8006662:	fa02 f303 	lsl.w	r3, r2, r3
 8006666:	43da      	mvns	r2, r3
 8006668:	4b21      	ldr	r3, [pc, #132]	; (80066f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4013      	ands	r3, r2
 800666e:	4a20      	ldr	r2, [pc, #128]	; (80066f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006670:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006678:	d10a      	bne.n	8006690 <prvAddCurrentTaskToDelayedList+0x58>
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d007      	beq.n	8006690 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006680:	4b1a      	ldr	r3, [pc, #104]	; (80066ec <prvAddCurrentTaskToDelayedList+0xb4>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	3304      	adds	r3, #4
 8006686:	4619      	mov	r1, r3
 8006688:	481a      	ldr	r0, [pc, #104]	; (80066f4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800668a:	f7fe fb5b 	bl	8004d44 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800668e:	e026      	b.n	80066de <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4413      	add	r3, r2
 8006696:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006698:	4b14      	ldr	r3, [pc, #80]	; (80066ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	68ba      	ldr	r2, [r7, #8]
 800669e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80066a0:	68ba      	ldr	r2, [r7, #8]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d209      	bcs.n	80066bc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066a8:	4b13      	ldr	r3, [pc, #76]	; (80066f8 <prvAddCurrentTaskToDelayedList+0xc0>)
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	4b0f      	ldr	r3, [pc, #60]	; (80066ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	3304      	adds	r3, #4
 80066b2:	4619      	mov	r1, r3
 80066b4:	4610      	mov	r0, r2
 80066b6:	f7fe fb69 	bl	8004d8c <vListInsert>
}
 80066ba:	e010      	b.n	80066de <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066bc:	4b0f      	ldr	r3, [pc, #60]	; (80066fc <prvAddCurrentTaskToDelayedList+0xc4>)
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	4b0a      	ldr	r3, [pc, #40]	; (80066ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	3304      	adds	r3, #4
 80066c6:	4619      	mov	r1, r3
 80066c8:	4610      	mov	r0, r2
 80066ca:	f7fe fb5f 	bl	8004d8c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80066ce:	4b0c      	ldr	r3, [pc, #48]	; (8006700 <prvAddCurrentTaskToDelayedList+0xc8>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	68ba      	ldr	r2, [r7, #8]
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d202      	bcs.n	80066de <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80066d8:	4a09      	ldr	r2, [pc, #36]	; (8006700 <prvAddCurrentTaskToDelayedList+0xc8>)
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	6013      	str	r3, [r2, #0]
}
 80066de:	bf00      	nop
 80066e0:	3710      	adds	r7, #16
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	200009d8 	.word	0x200009d8
 80066ec:	200008d4 	.word	0x200008d4
 80066f0:	200009dc 	.word	0x200009dc
 80066f4:	200009c0 	.word	0x200009c0
 80066f8:	20000990 	.word	0x20000990
 80066fc:	2000098c 	.word	0x2000098c
 8006700:	200009f4 	.word	0x200009f4

08006704 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b08a      	sub	sp, #40	; 0x28
 8006708:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800670a:	2300      	movs	r3, #0
 800670c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800670e:	f000 facb 	bl	8006ca8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006712:	4b1c      	ldr	r3, [pc, #112]	; (8006784 <xTimerCreateTimerTask+0x80>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d021      	beq.n	800675e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800671a:	2300      	movs	r3, #0
 800671c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800671e:	2300      	movs	r3, #0
 8006720:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006722:	1d3a      	adds	r2, r7, #4
 8006724:	f107 0108 	add.w	r1, r7, #8
 8006728:	f107 030c 	add.w	r3, r7, #12
 800672c:	4618      	mov	r0, r3
 800672e:	f7f9 fdaf 	bl	8000290 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006732:	6879      	ldr	r1, [r7, #4]
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	9202      	str	r2, [sp, #8]
 800673a:	9301      	str	r3, [sp, #4]
 800673c:	2302      	movs	r3, #2
 800673e:	9300      	str	r3, [sp, #0]
 8006740:	2300      	movs	r3, #0
 8006742:	460a      	mov	r2, r1
 8006744:	4910      	ldr	r1, [pc, #64]	; (8006788 <xTimerCreateTimerTask+0x84>)
 8006746:	4811      	ldr	r0, [pc, #68]	; (800678c <xTimerCreateTimerTask+0x88>)
 8006748:	f7ff f866 	bl	8005818 <xTaskCreateStatic>
 800674c:	4603      	mov	r3, r0
 800674e:	4a10      	ldr	r2, [pc, #64]	; (8006790 <xTimerCreateTimerTask+0x8c>)
 8006750:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006752:	4b0f      	ldr	r3, [pc, #60]	; (8006790 <xTimerCreateTimerTask+0x8c>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d001      	beq.n	800675e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800675a:	2301      	movs	r3, #1
 800675c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d10a      	bne.n	800677a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006768:	f383 8811 	msr	BASEPRI, r3
 800676c:	f3bf 8f6f 	isb	sy
 8006770:	f3bf 8f4f 	dsb	sy
 8006774:	613b      	str	r3, [r7, #16]
}
 8006776:	bf00      	nop
 8006778:	e7fe      	b.n	8006778 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800677a:	697b      	ldr	r3, [r7, #20]
}
 800677c:	4618      	mov	r0, r3
 800677e:	3718      	adds	r7, #24
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}
 8006784:	20000a30 	.word	0x20000a30
 8006788:	08007734 	.word	0x08007734
 800678c:	080068b1 	.word	0x080068b1
 8006790:	20000a34 	.word	0x20000a34

08006794 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b08a      	sub	sp, #40	; 0x28
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	607a      	str	r2, [r7, #4]
 80067a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80067a2:	2300      	movs	r3, #0
 80067a4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d10a      	bne.n	80067c2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80067ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b0:	f383 8811 	msr	BASEPRI, r3
 80067b4:	f3bf 8f6f 	isb	sy
 80067b8:	f3bf 8f4f 	dsb	sy
 80067bc:	623b      	str	r3, [r7, #32]
}
 80067be:	bf00      	nop
 80067c0:	e7fe      	b.n	80067c0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80067c2:	4b1a      	ldr	r3, [pc, #104]	; (800682c <xTimerGenericCommand+0x98>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d02a      	beq.n	8006820 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	2b05      	cmp	r3, #5
 80067da:	dc18      	bgt.n	800680e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80067dc:	f7ff fe88 	bl	80064f0 <xTaskGetSchedulerState>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b02      	cmp	r3, #2
 80067e4:	d109      	bne.n	80067fa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80067e6:	4b11      	ldr	r3, [pc, #68]	; (800682c <xTimerGenericCommand+0x98>)
 80067e8:	6818      	ldr	r0, [r3, #0]
 80067ea:	f107 0110 	add.w	r1, r7, #16
 80067ee:	2300      	movs	r3, #0
 80067f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067f2:	f7fe fc2d 	bl	8005050 <xQueueGenericSend>
 80067f6:	6278      	str	r0, [r7, #36]	; 0x24
 80067f8:	e012      	b.n	8006820 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80067fa:	4b0c      	ldr	r3, [pc, #48]	; (800682c <xTimerGenericCommand+0x98>)
 80067fc:	6818      	ldr	r0, [r3, #0]
 80067fe:	f107 0110 	add.w	r1, r7, #16
 8006802:	2300      	movs	r3, #0
 8006804:	2200      	movs	r2, #0
 8006806:	f7fe fc23 	bl	8005050 <xQueueGenericSend>
 800680a:	6278      	str	r0, [r7, #36]	; 0x24
 800680c:	e008      	b.n	8006820 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800680e:	4b07      	ldr	r3, [pc, #28]	; (800682c <xTimerGenericCommand+0x98>)
 8006810:	6818      	ldr	r0, [r3, #0]
 8006812:	f107 0110 	add.w	r1, r7, #16
 8006816:	2300      	movs	r3, #0
 8006818:	683a      	ldr	r2, [r7, #0]
 800681a:	f7fe fd17 	bl	800524c <xQueueGenericSendFromISR>
 800681e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006822:	4618      	mov	r0, r3
 8006824:	3728      	adds	r7, #40	; 0x28
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	20000a30 	.word	0x20000a30

08006830 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b088      	sub	sp, #32
 8006834:	af02      	add	r7, sp, #8
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800683a:	4b1c      	ldr	r3, [pc, #112]	; (80068ac <prvProcessExpiredTimer+0x7c>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	3304      	adds	r3, #4
 8006848:	4618      	mov	r0, r3
 800684a:	f7fe fad8 	bl	8004dfe <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	69db      	ldr	r3, [r3, #28]
 8006852:	2b01      	cmp	r3, #1
 8006854:	d122      	bne.n	800689c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	699a      	ldr	r2, [r3, #24]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	18d1      	adds	r1, r2, r3
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	683a      	ldr	r2, [r7, #0]
 8006862:	6978      	ldr	r0, [r7, #20]
 8006864:	f000 f8c8 	bl	80069f8 <prvInsertTimerInActiveList>
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d016      	beq.n	800689c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800686e:	2300      	movs	r3, #0
 8006870:	9300      	str	r3, [sp, #0]
 8006872:	2300      	movs	r3, #0
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	2100      	movs	r1, #0
 8006878:	6978      	ldr	r0, [r7, #20]
 800687a:	f7ff ff8b 	bl	8006794 <xTimerGenericCommand>
 800687e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d10a      	bne.n	800689c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8006886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800688a:	f383 8811 	msr	BASEPRI, r3
 800688e:	f3bf 8f6f 	isb	sy
 8006892:	f3bf 8f4f 	dsb	sy
 8006896:	60fb      	str	r3, [r7, #12]
}
 8006898:	bf00      	nop
 800689a:	e7fe      	b.n	800689a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a0:	6978      	ldr	r0, [r7, #20]
 80068a2:	4798      	blx	r3
}
 80068a4:	bf00      	nop
 80068a6:	3718      	adds	r7, #24
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}
 80068ac:	20000a28 	.word	0x20000a28

080068b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80068b8:	f107 0308 	add.w	r3, r7, #8
 80068bc:	4618      	mov	r0, r3
 80068be:	f000 f857 	bl	8006970 <prvGetNextExpireTime>
 80068c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	4619      	mov	r1, r3
 80068c8:	68f8      	ldr	r0, [r7, #12]
 80068ca:	f000 f803 	bl	80068d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80068ce:	f000 f8d5 	bl	8006a7c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80068d2:	e7f1      	b.n	80068b8 <prvTimerTask+0x8>

080068d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80068de:	f7ff f9bf 	bl	8005c60 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80068e2:	f107 0308 	add.w	r3, r7, #8
 80068e6:	4618      	mov	r0, r3
 80068e8:	f000 f866 	bl	80069b8 <prvSampleTimeNow>
 80068ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d130      	bne.n	8006956 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d10a      	bne.n	8006910 <prvProcessTimerOrBlockTask+0x3c>
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	429a      	cmp	r2, r3
 8006900:	d806      	bhi.n	8006910 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006902:	f7ff f9bb 	bl	8005c7c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006906:	68f9      	ldr	r1, [r7, #12]
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f7ff ff91 	bl	8006830 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800690e:	e024      	b.n	800695a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d008      	beq.n	8006928 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006916:	4b13      	ldr	r3, [pc, #76]	; (8006964 <prvProcessTimerOrBlockTask+0x90>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	2b00      	cmp	r3, #0
 800691e:	bf0c      	ite	eq
 8006920:	2301      	moveq	r3, #1
 8006922:	2300      	movne	r3, #0
 8006924:	b2db      	uxtb	r3, r3
 8006926:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006928:	4b0f      	ldr	r3, [pc, #60]	; (8006968 <prvProcessTimerOrBlockTask+0x94>)
 800692a:	6818      	ldr	r0, [r3, #0]
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	1ad3      	subs	r3, r2, r3
 8006932:	683a      	ldr	r2, [r7, #0]
 8006934:	4619      	mov	r1, r3
 8006936:	f7fe ff3b 	bl	80057b0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800693a:	f7ff f99f 	bl	8005c7c <xTaskResumeAll>
 800693e:	4603      	mov	r3, r0
 8006940:	2b00      	cmp	r3, #0
 8006942:	d10a      	bne.n	800695a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006944:	4b09      	ldr	r3, [pc, #36]	; (800696c <prvProcessTimerOrBlockTask+0x98>)
 8006946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800694a:	601a      	str	r2, [r3, #0]
 800694c:	f3bf 8f4f 	dsb	sy
 8006950:	f3bf 8f6f 	isb	sy
}
 8006954:	e001      	b.n	800695a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006956:	f7ff f991 	bl	8005c7c <xTaskResumeAll>
}
 800695a:	bf00      	nop
 800695c:	3710      	adds	r7, #16
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	20000a2c 	.word	0x20000a2c
 8006968:	20000a30 	.word	0x20000a30
 800696c:	e000ed04 	.word	0xe000ed04

08006970 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006970:	b480      	push	{r7}
 8006972:	b085      	sub	sp, #20
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006978:	4b0e      	ldr	r3, [pc, #56]	; (80069b4 <prvGetNextExpireTime+0x44>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	2b00      	cmp	r3, #0
 8006980:	bf0c      	ite	eq
 8006982:	2301      	moveq	r3, #1
 8006984:	2300      	movne	r3, #0
 8006986:	b2db      	uxtb	r3, r3
 8006988:	461a      	mov	r2, r3
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d105      	bne.n	80069a2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006996:	4b07      	ldr	r3, [pc, #28]	; (80069b4 <prvGetNextExpireTime+0x44>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	60fb      	str	r3, [r7, #12]
 80069a0:	e001      	b.n	80069a6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80069a2:	2300      	movs	r3, #0
 80069a4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80069a6:	68fb      	ldr	r3, [r7, #12]
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3714      	adds	r7, #20
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr
 80069b4:	20000a28 	.word	0x20000a28

080069b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80069c0:	f7ff f9f8 	bl	8005db4 <xTaskGetTickCount>
 80069c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80069c6:	4b0b      	ldr	r3, [pc, #44]	; (80069f4 <prvSampleTimeNow+0x3c>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	68fa      	ldr	r2, [r7, #12]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d205      	bcs.n	80069dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80069d0:	f000 f908 	bl	8006be4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2201      	movs	r2, #1
 80069d8:	601a      	str	r2, [r3, #0]
 80069da:	e002      	b.n	80069e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80069e2:	4a04      	ldr	r2, [pc, #16]	; (80069f4 <prvSampleTimeNow+0x3c>)
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80069e8:	68fb      	ldr	r3, [r7, #12]
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3710      	adds	r7, #16
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	20000a38 	.word	0x20000a38

080069f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b086      	sub	sp, #24
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	607a      	str	r2, [r7, #4]
 8006a04:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006a06:	2300      	movs	r3, #0
 8006a08:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	68ba      	ldr	r2, [r7, #8]
 8006a0e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	68fa      	ldr	r2, [r7, #12]
 8006a14:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006a16:	68ba      	ldr	r2, [r7, #8]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d812      	bhi.n	8006a44 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	1ad2      	subs	r2, r2, r3
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	699b      	ldr	r3, [r3, #24]
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d302      	bcc.n	8006a32 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	617b      	str	r3, [r7, #20]
 8006a30:	e01b      	b.n	8006a6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006a32:	4b10      	ldr	r3, [pc, #64]	; (8006a74 <prvInsertTimerInActiveList+0x7c>)
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	3304      	adds	r3, #4
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	4610      	mov	r0, r2
 8006a3e:	f7fe f9a5 	bl	8004d8c <vListInsert>
 8006a42:	e012      	b.n	8006a6a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d206      	bcs.n	8006a5a <prvInsertTimerInActiveList+0x62>
 8006a4c:	68ba      	ldr	r2, [r7, #8]
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d302      	bcc.n	8006a5a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006a54:	2301      	movs	r3, #1
 8006a56:	617b      	str	r3, [r7, #20]
 8006a58:	e007      	b.n	8006a6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006a5a:	4b07      	ldr	r3, [pc, #28]	; (8006a78 <prvInsertTimerInActiveList+0x80>)
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	3304      	adds	r3, #4
 8006a62:	4619      	mov	r1, r3
 8006a64:	4610      	mov	r0, r2
 8006a66:	f7fe f991 	bl	8004d8c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006a6a:	697b      	ldr	r3, [r7, #20]
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3718      	adds	r7, #24
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}
 8006a74:	20000a2c 	.word	0x20000a2c
 8006a78:	20000a28 	.word	0x20000a28

08006a7c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b08e      	sub	sp, #56	; 0x38
 8006a80:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006a82:	e09d      	b.n	8006bc0 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	da18      	bge.n	8006abc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006a8a:	1d3b      	adds	r3, r7, #4
 8006a8c:	3304      	adds	r3, #4
 8006a8e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d10a      	bne.n	8006aac <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a9a:	f383 8811 	msr	BASEPRI, r3
 8006a9e:	f3bf 8f6f 	isb	sy
 8006aa2:	f3bf 8f4f 	dsb	sy
 8006aa6:	61fb      	str	r3, [r7, #28]
}
 8006aa8:	bf00      	nop
 8006aaa:	e7fe      	b.n	8006aaa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ab2:	6850      	ldr	r0, [r2, #4]
 8006ab4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ab6:	6892      	ldr	r2, [r2, #8]
 8006ab8:	4611      	mov	r1, r2
 8006aba:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	db7e      	blt.n	8006bc0 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac8:	695b      	ldr	r3, [r3, #20]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d004      	beq.n	8006ad8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad0:	3304      	adds	r3, #4
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f7fe f993 	bl	8004dfe <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006ad8:	463b      	mov	r3, r7
 8006ada:	4618      	mov	r0, r3
 8006adc:	f7ff ff6c 	bl	80069b8 <prvSampleTimeNow>
 8006ae0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2b09      	cmp	r3, #9
 8006ae6:	d86a      	bhi.n	8006bbe <prvProcessReceivedCommands+0x142>
 8006ae8:	a201      	add	r2, pc, #4	; (adr r2, 8006af0 <prvProcessReceivedCommands+0x74>)
 8006aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aee:	bf00      	nop
 8006af0:	08006b19 	.word	0x08006b19
 8006af4:	08006b19 	.word	0x08006b19
 8006af8:	08006b19 	.word	0x08006b19
 8006afc:	08006bc1 	.word	0x08006bc1
 8006b00:	08006b75 	.word	0x08006b75
 8006b04:	08006bad 	.word	0x08006bad
 8006b08:	08006b19 	.word	0x08006b19
 8006b0c:	08006b19 	.word	0x08006b19
 8006b10:	08006bc1 	.word	0x08006bc1
 8006b14:	08006b75 	.word	0x08006b75
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006b18:	68ba      	ldr	r2, [r7, #8]
 8006b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b1c:	699b      	ldr	r3, [r3, #24]
 8006b1e:	18d1      	adds	r1, r2, r3
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b26:	f7ff ff67 	bl	80069f8 <prvInsertTimerInActiveList>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d047      	beq.n	8006bc0 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b36:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b3a:	69db      	ldr	r3, [r3, #28]
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d13f      	bne.n	8006bc0 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006b40:	68ba      	ldr	r2, [r7, #8]
 8006b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b44:	699b      	ldr	r3, [r3, #24]
 8006b46:	441a      	add	r2, r3
 8006b48:	2300      	movs	r3, #0
 8006b4a:	9300      	str	r3, [sp, #0]
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	2100      	movs	r1, #0
 8006b50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b52:	f7ff fe1f 	bl	8006794 <xTimerGenericCommand>
 8006b56:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006b58:	6a3b      	ldr	r3, [r7, #32]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d130      	bne.n	8006bc0 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8006b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b62:	f383 8811 	msr	BASEPRI, r3
 8006b66:	f3bf 8f6f 	isb	sy
 8006b6a:	f3bf 8f4f 	dsb	sy
 8006b6e:	61bb      	str	r3, [r7, #24]
}
 8006b70:	bf00      	nop
 8006b72:	e7fe      	b.n	8006b72 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006b74:	68ba      	ldr	r2, [r7, #8]
 8006b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b78:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7c:	699b      	ldr	r3, [r3, #24]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d10a      	bne.n	8006b98 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8006b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b86:	f383 8811 	msr	BASEPRI, r3
 8006b8a:	f3bf 8f6f 	isb	sy
 8006b8e:	f3bf 8f4f 	dsb	sy
 8006b92:	617b      	str	r3, [r7, #20]
}
 8006b94:	bf00      	nop
 8006b96:	e7fe      	b.n	8006b96 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b9a:	699a      	ldr	r2, [r3, #24]
 8006b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9e:	18d1      	adds	r1, r2, r3
 8006ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ba4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ba6:	f7ff ff27 	bl	80069f8 <prvInsertTimerInActiveList>
					break;
 8006baa:	e009      	b.n	8006bc0 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d104      	bne.n	8006bc0 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8006bb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bb8:	f000 fbca 	bl	8007350 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006bbc:	e000      	b.n	8006bc0 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8006bbe:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006bc0:	4b07      	ldr	r3, [pc, #28]	; (8006be0 <prvProcessReceivedCommands+0x164>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	1d39      	adds	r1, r7, #4
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f7fe fbd7 	bl	800537c <xQueueReceive>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	f47f af57 	bne.w	8006a84 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006bd6:	bf00      	nop
 8006bd8:	bf00      	nop
 8006bda:	3730      	adds	r7, #48	; 0x30
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	20000a30 	.word	0x20000a30

08006be4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b088      	sub	sp, #32
 8006be8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006bea:	e045      	b.n	8006c78 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006bec:	4b2c      	ldr	r3, [pc, #176]	; (8006ca0 <prvSwitchTimerLists+0xbc>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006bf6:	4b2a      	ldr	r3, [pc, #168]	; (8006ca0 <prvSwitchTimerLists+0xbc>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	68db      	ldr	r3, [r3, #12]
 8006bfc:	68db      	ldr	r3, [r3, #12]
 8006bfe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	3304      	adds	r3, #4
 8006c04:	4618      	mov	r0, r3
 8006c06:	f7fe f8fa 	bl	8004dfe <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0e:	68f8      	ldr	r0, [r7, #12]
 8006c10:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	69db      	ldr	r3, [r3, #28]
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d12e      	bne.n	8006c78 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	699b      	ldr	r3, [r3, #24]
 8006c1e:	693a      	ldr	r2, [r7, #16]
 8006c20:	4413      	add	r3, r2
 8006c22:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006c24:	68ba      	ldr	r2, [r7, #8]
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d90e      	bls.n	8006c4a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	68ba      	ldr	r2, [r7, #8]
 8006c30:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006c38:	4b19      	ldr	r3, [pc, #100]	; (8006ca0 <prvSwitchTimerLists+0xbc>)
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	3304      	adds	r3, #4
 8006c40:	4619      	mov	r1, r3
 8006c42:	4610      	mov	r0, r2
 8006c44:	f7fe f8a2 	bl	8004d8c <vListInsert>
 8006c48:	e016      	b.n	8006c78 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	9300      	str	r3, [sp, #0]
 8006c4e:	2300      	movs	r3, #0
 8006c50:	693a      	ldr	r2, [r7, #16]
 8006c52:	2100      	movs	r1, #0
 8006c54:	68f8      	ldr	r0, [r7, #12]
 8006c56:	f7ff fd9d 	bl	8006794 <xTimerGenericCommand>
 8006c5a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d10a      	bne.n	8006c78 <prvSwitchTimerLists+0x94>
	__asm volatile
 8006c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c66:	f383 8811 	msr	BASEPRI, r3
 8006c6a:	f3bf 8f6f 	isb	sy
 8006c6e:	f3bf 8f4f 	dsb	sy
 8006c72:	603b      	str	r3, [r7, #0]
}
 8006c74:	bf00      	nop
 8006c76:	e7fe      	b.n	8006c76 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c78:	4b09      	ldr	r3, [pc, #36]	; (8006ca0 <prvSwitchTimerLists+0xbc>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d1b4      	bne.n	8006bec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006c82:	4b07      	ldr	r3, [pc, #28]	; (8006ca0 <prvSwitchTimerLists+0xbc>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006c88:	4b06      	ldr	r3, [pc, #24]	; (8006ca4 <prvSwitchTimerLists+0xc0>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a04      	ldr	r2, [pc, #16]	; (8006ca0 <prvSwitchTimerLists+0xbc>)
 8006c8e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006c90:	4a04      	ldr	r2, [pc, #16]	; (8006ca4 <prvSwitchTimerLists+0xc0>)
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	6013      	str	r3, [r2, #0]
}
 8006c96:	bf00      	nop
 8006c98:	3718      	adds	r7, #24
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	20000a28 	.word	0x20000a28
 8006ca4:	20000a2c 	.word	0x20000a2c

08006ca8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b082      	sub	sp, #8
 8006cac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006cae:	f000 f969 	bl	8006f84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006cb2:	4b15      	ldr	r3, [pc, #84]	; (8006d08 <prvCheckForValidListAndQueue+0x60>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d120      	bne.n	8006cfc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006cba:	4814      	ldr	r0, [pc, #80]	; (8006d0c <prvCheckForValidListAndQueue+0x64>)
 8006cbc:	f7fe f815 	bl	8004cea <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006cc0:	4813      	ldr	r0, [pc, #76]	; (8006d10 <prvCheckForValidListAndQueue+0x68>)
 8006cc2:	f7fe f812 	bl	8004cea <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006cc6:	4b13      	ldr	r3, [pc, #76]	; (8006d14 <prvCheckForValidListAndQueue+0x6c>)
 8006cc8:	4a10      	ldr	r2, [pc, #64]	; (8006d0c <prvCheckForValidListAndQueue+0x64>)
 8006cca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006ccc:	4b12      	ldr	r3, [pc, #72]	; (8006d18 <prvCheckForValidListAndQueue+0x70>)
 8006cce:	4a10      	ldr	r2, [pc, #64]	; (8006d10 <prvCheckForValidListAndQueue+0x68>)
 8006cd0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	9300      	str	r3, [sp, #0]
 8006cd6:	4b11      	ldr	r3, [pc, #68]	; (8006d1c <prvCheckForValidListAndQueue+0x74>)
 8006cd8:	4a11      	ldr	r2, [pc, #68]	; (8006d20 <prvCheckForValidListAndQueue+0x78>)
 8006cda:	2110      	movs	r1, #16
 8006cdc:	200a      	movs	r0, #10
 8006cde:	f7fe f921 	bl	8004f24 <xQueueGenericCreateStatic>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	4a08      	ldr	r2, [pc, #32]	; (8006d08 <prvCheckForValidListAndQueue+0x60>)
 8006ce6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006ce8:	4b07      	ldr	r3, [pc, #28]	; (8006d08 <prvCheckForValidListAndQueue+0x60>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d005      	beq.n	8006cfc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006cf0:	4b05      	ldr	r3, [pc, #20]	; (8006d08 <prvCheckForValidListAndQueue+0x60>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	490b      	ldr	r1, [pc, #44]	; (8006d24 <prvCheckForValidListAndQueue+0x7c>)
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f7fe fd30 	bl	800575c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006cfc:	f000 f972 	bl	8006fe4 <vPortExitCritical>
}
 8006d00:	bf00      	nop
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	20000a30 	.word	0x20000a30
 8006d0c:	20000a00 	.word	0x20000a00
 8006d10:	20000a14 	.word	0x20000a14
 8006d14:	20000a28 	.word	0x20000a28
 8006d18:	20000a2c 	.word	0x20000a2c
 8006d1c:	20000adc 	.word	0x20000adc
 8006d20:	20000a3c 	.word	0x20000a3c
 8006d24:	0800773c 	.word	0x0800773c

08006d28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b085      	sub	sp, #20
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	3b04      	subs	r3, #4
 8006d38:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006d40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	3b04      	subs	r3, #4
 8006d46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	f023 0201 	bic.w	r2, r3, #1
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	3b04      	subs	r3, #4
 8006d56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006d58:	4a0c      	ldr	r2, [pc, #48]	; (8006d8c <pxPortInitialiseStack+0x64>)
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	3b14      	subs	r3, #20
 8006d62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	3b04      	subs	r3, #4
 8006d6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f06f 0202 	mvn.w	r2, #2
 8006d76:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	3b20      	subs	r3, #32
 8006d7c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3714      	adds	r7, #20
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr
 8006d8c:	08006d91 	.word	0x08006d91

08006d90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006d90:	b480      	push	{r7}
 8006d92:	b085      	sub	sp, #20
 8006d94:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006d96:	2300      	movs	r3, #0
 8006d98:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006d9a:	4b12      	ldr	r3, [pc, #72]	; (8006de4 <prvTaskExitError+0x54>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006da2:	d00a      	beq.n	8006dba <prvTaskExitError+0x2a>
	__asm volatile
 8006da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da8:	f383 8811 	msr	BASEPRI, r3
 8006dac:	f3bf 8f6f 	isb	sy
 8006db0:	f3bf 8f4f 	dsb	sy
 8006db4:	60fb      	str	r3, [r7, #12]
}
 8006db6:	bf00      	nop
 8006db8:	e7fe      	b.n	8006db8 <prvTaskExitError+0x28>
	__asm volatile
 8006dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dbe:	f383 8811 	msr	BASEPRI, r3
 8006dc2:	f3bf 8f6f 	isb	sy
 8006dc6:	f3bf 8f4f 	dsb	sy
 8006dca:	60bb      	str	r3, [r7, #8]
}
 8006dcc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006dce:	bf00      	nop
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d0fc      	beq.n	8006dd0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006dd6:	bf00      	nop
 8006dd8:	bf00      	nop
 8006dda:	3714      	adds	r7, #20
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr
 8006de4:	2000000c 	.word	0x2000000c
	...

08006df0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006df0:	4b07      	ldr	r3, [pc, #28]	; (8006e10 <pxCurrentTCBConst2>)
 8006df2:	6819      	ldr	r1, [r3, #0]
 8006df4:	6808      	ldr	r0, [r1, #0]
 8006df6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dfa:	f380 8809 	msr	PSP, r0
 8006dfe:	f3bf 8f6f 	isb	sy
 8006e02:	f04f 0000 	mov.w	r0, #0
 8006e06:	f380 8811 	msr	BASEPRI, r0
 8006e0a:	4770      	bx	lr
 8006e0c:	f3af 8000 	nop.w

08006e10 <pxCurrentTCBConst2>:
 8006e10:	200008d4 	.word	0x200008d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006e14:	bf00      	nop
 8006e16:	bf00      	nop

08006e18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006e18:	4808      	ldr	r0, [pc, #32]	; (8006e3c <prvPortStartFirstTask+0x24>)
 8006e1a:	6800      	ldr	r0, [r0, #0]
 8006e1c:	6800      	ldr	r0, [r0, #0]
 8006e1e:	f380 8808 	msr	MSP, r0
 8006e22:	f04f 0000 	mov.w	r0, #0
 8006e26:	f380 8814 	msr	CONTROL, r0
 8006e2a:	b662      	cpsie	i
 8006e2c:	b661      	cpsie	f
 8006e2e:	f3bf 8f4f 	dsb	sy
 8006e32:	f3bf 8f6f 	isb	sy
 8006e36:	df00      	svc	0
 8006e38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006e3a:	bf00      	nop
 8006e3c:	e000ed08 	.word	0xe000ed08

08006e40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b086      	sub	sp, #24
 8006e44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006e46:	4b46      	ldr	r3, [pc, #280]	; (8006f60 <xPortStartScheduler+0x120>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a46      	ldr	r2, [pc, #280]	; (8006f64 <xPortStartScheduler+0x124>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d10a      	bne.n	8006e66 <xPortStartScheduler+0x26>
	__asm volatile
 8006e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e54:	f383 8811 	msr	BASEPRI, r3
 8006e58:	f3bf 8f6f 	isb	sy
 8006e5c:	f3bf 8f4f 	dsb	sy
 8006e60:	613b      	str	r3, [r7, #16]
}
 8006e62:	bf00      	nop
 8006e64:	e7fe      	b.n	8006e64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006e66:	4b3e      	ldr	r3, [pc, #248]	; (8006f60 <xPortStartScheduler+0x120>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a3f      	ldr	r2, [pc, #252]	; (8006f68 <xPortStartScheduler+0x128>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d10a      	bne.n	8006e86 <xPortStartScheduler+0x46>
	__asm volatile
 8006e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e74:	f383 8811 	msr	BASEPRI, r3
 8006e78:	f3bf 8f6f 	isb	sy
 8006e7c:	f3bf 8f4f 	dsb	sy
 8006e80:	60fb      	str	r3, [r7, #12]
}
 8006e82:	bf00      	nop
 8006e84:	e7fe      	b.n	8006e84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006e86:	4b39      	ldr	r3, [pc, #228]	; (8006f6c <xPortStartScheduler+0x12c>)
 8006e88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	22ff      	movs	r2, #255	; 0xff
 8006e96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006ea0:	78fb      	ldrb	r3, [r7, #3]
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006ea8:	b2da      	uxtb	r2, r3
 8006eaa:	4b31      	ldr	r3, [pc, #196]	; (8006f70 <xPortStartScheduler+0x130>)
 8006eac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006eae:	4b31      	ldr	r3, [pc, #196]	; (8006f74 <xPortStartScheduler+0x134>)
 8006eb0:	2207      	movs	r2, #7
 8006eb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006eb4:	e009      	b.n	8006eca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006eb6:	4b2f      	ldr	r3, [pc, #188]	; (8006f74 <xPortStartScheduler+0x134>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	3b01      	subs	r3, #1
 8006ebc:	4a2d      	ldr	r2, [pc, #180]	; (8006f74 <xPortStartScheduler+0x134>)
 8006ebe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006ec0:	78fb      	ldrb	r3, [r7, #3]
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	005b      	lsls	r3, r3, #1
 8006ec6:	b2db      	uxtb	r3, r3
 8006ec8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006eca:	78fb      	ldrb	r3, [r7, #3]
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ed2:	2b80      	cmp	r3, #128	; 0x80
 8006ed4:	d0ef      	beq.n	8006eb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006ed6:	4b27      	ldr	r3, [pc, #156]	; (8006f74 <xPortStartScheduler+0x134>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f1c3 0307 	rsb	r3, r3, #7
 8006ede:	2b04      	cmp	r3, #4
 8006ee0:	d00a      	beq.n	8006ef8 <xPortStartScheduler+0xb8>
	__asm volatile
 8006ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee6:	f383 8811 	msr	BASEPRI, r3
 8006eea:	f3bf 8f6f 	isb	sy
 8006eee:	f3bf 8f4f 	dsb	sy
 8006ef2:	60bb      	str	r3, [r7, #8]
}
 8006ef4:	bf00      	nop
 8006ef6:	e7fe      	b.n	8006ef6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006ef8:	4b1e      	ldr	r3, [pc, #120]	; (8006f74 <xPortStartScheduler+0x134>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	021b      	lsls	r3, r3, #8
 8006efe:	4a1d      	ldr	r2, [pc, #116]	; (8006f74 <xPortStartScheduler+0x134>)
 8006f00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006f02:	4b1c      	ldr	r3, [pc, #112]	; (8006f74 <xPortStartScheduler+0x134>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006f0a:	4a1a      	ldr	r2, [pc, #104]	; (8006f74 <xPortStartScheduler+0x134>)
 8006f0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	b2da      	uxtb	r2, r3
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006f16:	4b18      	ldr	r3, [pc, #96]	; (8006f78 <xPortStartScheduler+0x138>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a17      	ldr	r2, [pc, #92]	; (8006f78 <xPortStartScheduler+0x138>)
 8006f1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006f20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006f22:	4b15      	ldr	r3, [pc, #84]	; (8006f78 <xPortStartScheduler+0x138>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a14      	ldr	r2, [pc, #80]	; (8006f78 <xPortStartScheduler+0x138>)
 8006f28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006f2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006f2e:	f000 f8dd 	bl	80070ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006f32:	4b12      	ldr	r3, [pc, #72]	; (8006f7c <xPortStartScheduler+0x13c>)
 8006f34:	2200      	movs	r2, #0
 8006f36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006f38:	f000 f8fc 	bl	8007134 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006f3c:	4b10      	ldr	r3, [pc, #64]	; (8006f80 <xPortStartScheduler+0x140>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a0f      	ldr	r2, [pc, #60]	; (8006f80 <xPortStartScheduler+0x140>)
 8006f42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006f46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006f48:	f7ff ff66 	bl	8006e18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006f4c:	f7ff f800 	bl	8005f50 <vTaskSwitchContext>
	prvTaskExitError();
 8006f50:	f7ff ff1e 	bl	8006d90 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006f54:	2300      	movs	r3, #0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3718      	adds	r7, #24
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	bf00      	nop
 8006f60:	e000ed00 	.word	0xe000ed00
 8006f64:	410fc271 	.word	0x410fc271
 8006f68:	410fc270 	.word	0x410fc270
 8006f6c:	e000e400 	.word	0xe000e400
 8006f70:	20000b24 	.word	0x20000b24
 8006f74:	20000b28 	.word	0x20000b28
 8006f78:	e000ed20 	.word	0xe000ed20
 8006f7c:	2000000c 	.word	0x2000000c
 8006f80:	e000ef34 	.word	0xe000ef34

08006f84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
	__asm volatile
 8006f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f8e:	f383 8811 	msr	BASEPRI, r3
 8006f92:	f3bf 8f6f 	isb	sy
 8006f96:	f3bf 8f4f 	dsb	sy
 8006f9a:	607b      	str	r3, [r7, #4]
}
 8006f9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006f9e:	4b0f      	ldr	r3, [pc, #60]	; (8006fdc <vPortEnterCritical+0x58>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	4a0d      	ldr	r2, [pc, #52]	; (8006fdc <vPortEnterCritical+0x58>)
 8006fa6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006fa8:	4b0c      	ldr	r3, [pc, #48]	; (8006fdc <vPortEnterCritical+0x58>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d10f      	bne.n	8006fd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006fb0:	4b0b      	ldr	r3, [pc, #44]	; (8006fe0 <vPortEnterCritical+0x5c>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00a      	beq.n	8006fd0 <vPortEnterCritical+0x4c>
	__asm volatile
 8006fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fbe:	f383 8811 	msr	BASEPRI, r3
 8006fc2:	f3bf 8f6f 	isb	sy
 8006fc6:	f3bf 8f4f 	dsb	sy
 8006fca:	603b      	str	r3, [r7, #0]
}
 8006fcc:	bf00      	nop
 8006fce:	e7fe      	b.n	8006fce <vPortEnterCritical+0x4a>
	}
}
 8006fd0:	bf00      	nop
 8006fd2:	370c      	adds	r7, #12
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr
 8006fdc:	2000000c 	.word	0x2000000c
 8006fe0:	e000ed04 	.word	0xe000ed04

08006fe4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b083      	sub	sp, #12
 8006fe8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006fea:	4b12      	ldr	r3, [pc, #72]	; (8007034 <vPortExitCritical+0x50>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d10a      	bne.n	8007008 <vPortExitCritical+0x24>
	__asm volatile
 8006ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff6:	f383 8811 	msr	BASEPRI, r3
 8006ffa:	f3bf 8f6f 	isb	sy
 8006ffe:	f3bf 8f4f 	dsb	sy
 8007002:	607b      	str	r3, [r7, #4]
}
 8007004:	bf00      	nop
 8007006:	e7fe      	b.n	8007006 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007008:	4b0a      	ldr	r3, [pc, #40]	; (8007034 <vPortExitCritical+0x50>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	3b01      	subs	r3, #1
 800700e:	4a09      	ldr	r2, [pc, #36]	; (8007034 <vPortExitCritical+0x50>)
 8007010:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007012:	4b08      	ldr	r3, [pc, #32]	; (8007034 <vPortExitCritical+0x50>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d105      	bne.n	8007026 <vPortExitCritical+0x42>
 800701a:	2300      	movs	r3, #0
 800701c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	f383 8811 	msr	BASEPRI, r3
}
 8007024:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007026:	bf00      	nop
 8007028:	370c      	adds	r7, #12
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr
 8007032:	bf00      	nop
 8007034:	2000000c 	.word	0x2000000c
	...

08007040 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007040:	f3ef 8009 	mrs	r0, PSP
 8007044:	f3bf 8f6f 	isb	sy
 8007048:	4b15      	ldr	r3, [pc, #84]	; (80070a0 <pxCurrentTCBConst>)
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	f01e 0f10 	tst.w	lr, #16
 8007050:	bf08      	it	eq
 8007052:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007056:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800705a:	6010      	str	r0, [r2, #0]
 800705c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007060:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007064:	f380 8811 	msr	BASEPRI, r0
 8007068:	f3bf 8f4f 	dsb	sy
 800706c:	f3bf 8f6f 	isb	sy
 8007070:	f7fe ff6e 	bl	8005f50 <vTaskSwitchContext>
 8007074:	f04f 0000 	mov.w	r0, #0
 8007078:	f380 8811 	msr	BASEPRI, r0
 800707c:	bc09      	pop	{r0, r3}
 800707e:	6819      	ldr	r1, [r3, #0]
 8007080:	6808      	ldr	r0, [r1, #0]
 8007082:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007086:	f01e 0f10 	tst.w	lr, #16
 800708a:	bf08      	it	eq
 800708c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007090:	f380 8809 	msr	PSP, r0
 8007094:	f3bf 8f6f 	isb	sy
 8007098:	4770      	bx	lr
 800709a:	bf00      	nop
 800709c:	f3af 8000 	nop.w

080070a0 <pxCurrentTCBConst>:
 80070a0:	200008d4 	.word	0x200008d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80070a4:	bf00      	nop
 80070a6:	bf00      	nop

080070a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
	__asm volatile
 80070ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b2:	f383 8811 	msr	BASEPRI, r3
 80070b6:	f3bf 8f6f 	isb	sy
 80070ba:	f3bf 8f4f 	dsb	sy
 80070be:	607b      	str	r3, [r7, #4]
}
 80070c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80070c2:	f7fe fe87 	bl	8005dd4 <xTaskIncrementTick>
 80070c6:	4603      	mov	r3, r0
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d003      	beq.n	80070d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80070cc:	4b06      	ldr	r3, [pc, #24]	; (80070e8 <SysTick_Handler+0x40>)
 80070ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070d2:	601a      	str	r2, [r3, #0]
 80070d4:	2300      	movs	r3, #0
 80070d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	f383 8811 	msr	BASEPRI, r3
}
 80070de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80070e0:	bf00      	nop
 80070e2:	3708      	adds	r7, #8
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}
 80070e8:	e000ed04 	.word	0xe000ed04

080070ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80070ec:	b480      	push	{r7}
 80070ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80070f0:	4b0b      	ldr	r3, [pc, #44]	; (8007120 <vPortSetupTimerInterrupt+0x34>)
 80070f2:	2200      	movs	r2, #0
 80070f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80070f6:	4b0b      	ldr	r3, [pc, #44]	; (8007124 <vPortSetupTimerInterrupt+0x38>)
 80070f8:	2200      	movs	r2, #0
 80070fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80070fc:	4b0a      	ldr	r3, [pc, #40]	; (8007128 <vPortSetupTimerInterrupt+0x3c>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a0a      	ldr	r2, [pc, #40]	; (800712c <vPortSetupTimerInterrupt+0x40>)
 8007102:	fba2 2303 	umull	r2, r3, r2, r3
 8007106:	099b      	lsrs	r3, r3, #6
 8007108:	4a09      	ldr	r2, [pc, #36]	; (8007130 <vPortSetupTimerInterrupt+0x44>)
 800710a:	3b01      	subs	r3, #1
 800710c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800710e:	4b04      	ldr	r3, [pc, #16]	; (8007120 <vPortSetupTimerInterrupt+0x34>)
 8007110:	2207      	movs	r2, #7
 8007112:	601a      	str	r2, [r3, #0]
}
 8007114:	bf00      	nop
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr
 800711e:	bf00      	nop
 8007120:	e000e010 	.word	0xe000e010
 8007124:	e000e018 	.word	0xe000e018
 8007128:	20000000 	.word	0x20000000
 800712c:	10624dd3 	.word	0x10624dd3
 8007130:	e000e014 	.word	0xe000e014

08007134 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007134:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007144 <vPortEnableVFP+0x10>
 8007138:	6801      	ldr	r1, [r0, #0]
 800713a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800713e:	6001      	str	r1, [r0, #0]
 8007140:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007142:	bf00      	nop
 8007144:	e000ed88 	.word	0xe000ed88

08007148 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007148:	b480      	push	{r7}
 800714a:	b085      	sub	sp, #20
 800714c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800714e:	f3ef 8305 	mrs	r3, IPSR
 8007152:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2b0f      	cmp	r3, #15
 8007158:	d914      	bls.n	8007184 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800715a:	4a17      	ldr	r2, [pc, #92]	; (80071b8 <vPortValidateInterruptPriority+0x70>)
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	4413      	add	r3, r2
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007164:	4b15      	ldr	r3, [pc, #84]	; (80071bc <vPortValidateInterruptPriority+0x74>)
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	7afa      	ldrb	r2, [r7, #11]
 800716a:	429a      	cmp	r2, r3
 800716c:	d20a      	bcs.n	8007184 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800716e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007172:	f383 8811 	msr	BASEPRI, r3
 8007176:	f3bf 8f6f 	isb	sy
 800717a:	f3bf 8f4f 	dsb	sy
 800717e:	607b      	str	r3, [r7, #4]
}
 8007180:	bf00      	nop
 8007182:	e7fe      	b.n	8007182 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007184:	4b0e      	ldr	r3, [pc, #56]	; (80071c0 <vPortValidateInterruptPriority+0x78>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800718c:	4b0d      	ldr	r3, [pc, #52]	; (80071c4 <vPortValidateInterruptPriority+0x7c>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	429a      	cmp	r2, r3
 8007192:	d90a      	bls.n	80071aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007198:	f383 8811 	msr	BASEPRI, r3
 800719c:	f3bf 8f6f 	isb	sy
 80071a0:	f3bf 8f4f 	dsb	sy
 80071a4:	603b      	str	r3, [r7, #0]
}
 80071a6:	bf00      	nop
 80071a8:	e7fe      	b.n	80071a8 <vPortValidateInterruptPriority+0x60>
	}
 80071aa:	bf00      	nop
 80071ac:	3714      	adds	r7, #20
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr
 80071b6:	bf00      	nop
 80071b8:	e000e3f0 	.word	0xe000e3f0
 80071bc:	20000b24 	.word	0x20000b24
 80071c0:	e000ed0c 	.word	0xe000ed0c
 80071c4:	20000b28 	.word	0x20000b28

080071c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b08a      	sub	sp, #40	; 0x28
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80071d0:	2300      	movs	r3, #0
 80071d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80071d4:	f7fe fd44 	bl	8005c60 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80071d8:	4b58      	ldr	r3, [pc, #352]	; (800733c <pvPortMalloc+0x174>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d101      	bne.n	80071e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80071e0:	f000 f910 	bl	8007404 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80071e4:	4b56      	ldr	r3, [pc, #344]	; (8007340 <pvPortMalloc+0x178>)
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4013      	ands	r3, r2
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	f040 808e 	bne.w	800730e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d01d      	beq.n	8007234 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80071f8:	2208      	movs	r2, #8
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4413      	add	r3, r2
 80071fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f003 0307 	and.w	r3, r3, #7
 8007206:	2b00      	cmp	r3, #0
 8007208:	d014      	beq.n	8007234 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f023 0307 	bic.w	r3, r3, #7
 8007210:	3308      	adds	r3, #8
 8007212:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f003 0307 	and.w	r3, r3, #7
 800721a:	2b00      	cmp	r3, #0
 800721c:	d00a      	beq.n	8007234 <pvPortMalloc+0x6c>
	__asm volatile
 800721e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007222:	f383 8811 	msr	BASEPRI, r3
 8007226:	f3bf 8f6f 	isb	sy
 800722a:	f3bf 8f4f 	dsb	sy
 800722e:	617b      	str	r3, [r7, #20]
}
 8007230:	bf00      	nop
 8007232:	e7fe      	b.n	8007232 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d069      	beq.n	800730e <pvPortMalloc+0x146>
 800723a:	4b42      	ldr	r3, [pc, #264]	; (8007344 <pvPortMalloc+0x17c>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	429a      	cmp	r2, r3
 8007242:	d864      	bhi.n	800730e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007244:	4b40      	ldr	r3, [pc, #256]	; (8007348 <pvPortMalloc+0x180>)
 8007246:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007248:	4b3f      	ldr	r3, [pc, #252]	; (8007348 <pvPortMalloc+0x180>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800724e:	e004      	b.n	800725a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007252:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800725a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	429a      	cmp	r2, r3
 8007262:	d903      	bls.n	800726c <pvPortMalloc+0xa4>
 8007264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d1f1      	bne.n	8007250 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800726c:	4b33      	ldr	r3, [pc, #204]	; (800733c <pvPortMalloc+0x174>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007272:	429a      	cmp	r2, r3
 8007274:	d04b      	beq.n	800730e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007276:	6a3b      	ldr	r3, [r7, #32]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	2208      	movs	r2, #8
 800727c:	4413      	add	r3, r2
 800727e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	6a3b      	ldr	r3, [r7, #32]
 8007286:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728a:	685a      	ldr	r2, [r3, #4]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	1ad2      	subs	r2, r2, r3
 8007290:	2308      	movs	r3, #8
 8007292:	005b      	lsls	r3, r3, #1
 8007294:	429a      	cmp	r2, r3
 8007296:	d91f      	bls.n	80072d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4413      	add	r3, r2
 800729e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	f003 0307 	and.w	r3, r3, #7
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d00a      	beq.n	80072c0 <pvPortMalloc+0xf8>
	__asm volatile
 80072aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ae:	f383 8811 	msr	BASEPRI, r3
 80072b2:	f3bf 8f6f 	isb	sy
 80072b6:	f3bf 8f4f 	dsb	sy
 80072ba:	613b      	str	r3, [r7, #16]
}
 80072bc:	bf00      	nop
 80072be:	e7fe      	b.n	80072be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80072c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c2:	685a      	ldr	r2, [r3, #4]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	1ad2      	subs	r2, r2, r3
 80072c8:	69bb      	ldr	r3, [r7, #24]
 80072ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80072cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80072d2:	69b8      	ldr	r0, [r7, #24]
 80072d4:	f000 f8f8 	bl	80074c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80072d8:	4b1a      	ldr	r3, [pc, #104]	; (8007344 <pvPortMalloc+0x17c>)
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	1ad3      	subs	r3, r2, r3
 80072e2:	4a18      	ldr	r2, [pc, #96]	; (8007344 <pvPortMalloc+0x17c>)
 80072e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80072e6:	4b17      	ldr	r3, [pc, #92]	; (8007344 <pvPortMalloc+0x17c>)
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	4b18      	ldr	r3, [pc, #96]	; (800734c <pvPortMalloc+0x184>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d203      	bcs.n	80072fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80072f2:	4b14      	ldr	r3, [pc, #80]	; (8007344 <pvPortMalloc+0x17c>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a15      	ldr	r2, [pc, #84]	; (800734c <pvPortMalloc+0x184>)
 80072f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80072fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fc:	685a      	ldr	r2, [r3, #4]
 80072fe:	4b10      	ldr	r3, [pc, #64]	; (8007340 <pvPortMalloc+0x178>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	431a      	orrs	r2, r3
 8007304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007306:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730a:	2200      	movs	r2, #0
 800730c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800730e:	f7fe fcb5 	bl	8005c7c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007312:	69fb      	ldr	r3, [r7, #28]
 8007314:	f003 0307 	and.w	r3, r3, #7
 8007318:	2b00      	cmp	r3, #0
 800731a:	d00a      	beq.n	8007332 <pvPortMalloc+0x16a>
	__asm volatile
 800731c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007320:	f383 8811 	msr	BASEPRI, r3
 8007324:	f3bf 8f6f 	isb	sy
 8007328:	f3bf 8f4f 	dsb	sy
 800732c:	60fb      	str	r3, [r7, #12]
}
 800732e:	bf00      	nop
 8007330:	e7fe      	b.n	8007330 <pvPortMalloc+0x168>
	return pvReturn;
 8007332:	69fb      	ldr	r3, [r7, #28]
}
 8007334:	4618      	mov	r0, r3
 8007336:	3728      	adds	r7, #40	; 0x28
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}
 800733c:	20002334 	.word	0x20002334
 8007340:	20002340 	.word	0x20002340
 8007344:	20002338 	.word	0x20002338
 8007348:	2000232c 	.word	0x2000232c
 800734c:	2000233c 	.word	0x2000233c

08007350 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b086      	sub	sp, #24
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d048      	beq.n	80073f4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007362:	2308      	movs	r3, #8
 8007364:	425b      	negs	r3, r3
 8007366:	697a      	ldr	r2, [r7, #20]
 8007368:	4413      	add	r3, r2
 800736a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	685a      	ldr	r2, [r3, #4]
 8007374:	4b21      	ldr	r3, [pc, #132]	; (80073fc <vPortFree+0xac>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4013      	ands	r3, r2
 800737a:	2b00      	cmp	r3, #0
 800737c:	d10a      	bne.n	8007394 <vPortFree+0x44>
	__asm volatile
 800737e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007382:	f383 8811 	msr	BASEPRI, r3
 8007386:	f3bf 8f6f 	isb	sy
 800738a:	f3bf 8f4f 	dsb	sy
 800738e:	60fb      	str	r3, [r7, #12]
}
 8007390:	bf00      	nop
 8007392:	e7fe      	b.n	8007392 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d00a      	beq.n	80073b2 <vPortFree+0x62>
	__asm volatile
 800739c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a0:	f383 8811 	msr	BASEPRI, r3
 80073a4:	f3bf 8f6f 	isb	sy
 80073a8:	f3bf 8f4f 	dsb	sy
 80073ac:	60bb      	str	r3, [r7, #8]
}
 80073ae:	bf00      	nop
 80073b0:	e7fe      	b.n	80073b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	685a      	ldr	r2, [r3, #4]
 80073b6:	4b11      	ldr	r3, [pc, #68]	; (80073fc <vPortFree+0xac>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4013      	ands	r3, r2
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d019      	beq.n	80073f4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d115      	bne.n	80073f4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	685a      	ldr	r2, [r3, #4]
 80073cc:	4b0b      	ldr	r3, [pc, #44]	; (80073fc <vPortFree+0xac>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	43db      	mvns	r3, r3
 80073d2:	401a      	ands	r2, r3
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80073d8:	f7fe fc42 	bl	8005c60 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	685a      	ldr	r2, [r3, #4]
 80073e0:	4b07      	ldr	r3, [pc, #28]	; (8007400 <vPortFree+0xb0>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4413      	add	r3, r2
 80073e6:	4a06      	ldr	r2, [pc, #24]	; (8007400 <vPortFree+0xb0>)
 80073e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80073ea:	6938      	ldr	r0, [r7, #16]
 80073ec:	f000 f86c 	bl	80074c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80073f0:	f7fe fc44 	bl	8005c7c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80073f4:	bf00      	nop
 80073f6:	3718      	adds	r7, #24
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	20002340 	.word	0x20002340
 8007400:	20002338 	.word	0x20002338

08007404 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007404:	b480      	push	{r7}
 8007406:	b085      	sub	sp, #20
 8007408:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800740a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800740e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007410:	4b27      	ldr	r3, [pc, #156]	; (80074b0 <prvHeapInit+0xac>)
 8007412:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f003 0307 	and.w	r3, r3, #7
 800741a:	2b00      	cmp	r3, #0
 800741c:	d00c      	beq.n	8007438 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	3307      	adds	r3, #7
 8007422:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f023 0307 	bic.w	r3, r3, #7
 800742a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800742c:	68ba      	ldr	r2, [r7, #8]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	1ad3      	subs	r3, r2, r3
 8007432:	4a1f      	ldr	r2, [pc, #124]	; (80074b0 <prvHeapInit+0xac>)
 8007434:	4413      	add	r3, r2
 8007436:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800743c:	4a1d      	ldr	r2, [pc, #116]	; (80074b4 <prvHeapInit+0xb0>)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007442:	4b1c      	ldr	r3, [pc, #112]	; (80074b4 <prvHeapInit+0xb0>)
 8007444:	2200      	movs	r2, #0
 8007446:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	68ba      	ldr	r2, [r7, #8]
 800744c:	4413      	add	r3, r2
 800744e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007450:	2208      	movs	r2, #8
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	1a9b      	subs	r3, r3, r2
 8007456:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f023 0307 	bic.w	r3, r3, #7
 800745e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	4a15      	ldr	r2, [pc, #84]	; (80074b8 <prvHeapInit+0xb4>)
 8007464:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007466:	4b14      	ldr	r3, [pc, #80]	; (80074b8 <prvHeapInit+0xb4>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	2200      	movs	r2, #0
 800746c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800746e:	4b12      	ldr	r3, [pc, #72]	; (80074b8 <prvHeapInit+0xb4>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	2200      	movs	r2, #0
 8007474:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	68fa      	ldr	r2, [r7, #12]
 800747e:	1ad2      	subs	r2, r2, r3
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007484:	4b0c      	ldr	r3, [pc, #48]	; (80074b8 <prvHeapInit+0xb4>)
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	4a0a      	ldr	r2, [pc, #40]	; (80074bc <prvHeapInit+0xb8>)
 8007492:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	4a09      	ldr	r2, [pc, #36]	; (80074c0 <prvHeapInit+0xbc>)
 800749a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800749c:	4b09      	ldr	r3, [pc, #36]	; (80074c4 <prvHeapInit+0xc0>)
 800749e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80074a2:	601a      	str	r2, [r3, #0]
}
 80074a4:	bf00      	nop
 80074a6:	3714      	adds	r7, #20
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr
 80074b0:	20000b2c 	.word	0x20000b2c
 80074b4:	2000232c 	.word	0x2000232c
 80074b8:	20002334 	.word	0x20002334
 80074bc:	2000233c 	.word	0x2000233c
 80074c0:	20002338 	.word	0x20002338
 80074c4:	20002340 	.word	0x20002340

080074c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80074c8:	b480      	push	{r7}
 80074ca:	b085      	sub	sp, #20
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80074d0:	4b28      	ldr	r3, [pc, #160]	; (8007574 <prvInsertBlockIntoFreeList+0xac>)
 80074d2:	60fb      	str	r3, [r7, #12]
 80074d4:	e002      	b.n	80074dc <prvInsertBlockIntoFreeList+0x14>
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	60fb      	str	r3, [r7, #12]
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d8f7      	bhi.n	80074d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	68ba      	ldr	r2, [r7, #8]
 80074f0:	4413      	add	r3, r2
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d108      	bne.n	800750a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	685a      	ldr	r2, [r3, #4]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	441a      	add	r2, r3
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	68ba      	ldr	r2, [r7, #8]
 8007514:	441a      	add	r2, r3
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	429a      	cmp	r2, r3
 800751c:	d118      	bne.n	8007550 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	4b15      	ldr	r3, [pc, #84]	; (8007578 <prvInsertBlockIntoFreeList+0xb0>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	429a      	cmp	r2, r3
 8007528:	d00d      	beq.n	8007546 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	685a      	ldr	r2, [r3, #4]
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	441a      	add	r2, r3
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	601a      	str	r2, [r3, #0]
 8007544:	e008      	b.n	8007558 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007546:	4b0c      	ldr	r3, [pc, #48]	; (8007578 <prvInsertBlockIntoFreeList+0xb0>)
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	601a      	str	r2, [r3, #0]
 800754e:	e003      	b.n	8007558 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007558:	68fa      	ldr	r2, [r7, #12]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	429a      	cmp	r2, r3
 800755e:	d002      	beq.n	8007566 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007566:	bf00      	nop
 8007568:	3714      	adds	r7, #20
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr
 8007572:	bf00      	nop
 8007574:	2000232c 	.word	0x2000232c
 8007578:	20002334 	.word	0x20002334

0800757c <memset>:
 800757c:	4402      	add	r2, r0
 800757e:	4603      	mov	r3, r0
 8007580:	4293      	cmp	r3, r2
 8007582:	d100      	bne.n	8007586 <memset+0xa>
 8007584:	4770      	bx	lr
 8007586:	f803 1b01 	strb.w	r1, [r3], #1
 800758a:	e7f9      	b.n	8007580 <memset+0x4>

0800758c <__libc_init_array>:
 800758c:	b570      	push	{r4, r5, r6, lr}
 800758e:	4d0d      	ldr	r5, [pc, #52]	; (80075c4 <__libc_init_array+0x38>)
 8007590:	4c0d      	ldr	r4, [pc, #52]	; (80075c8 <__libc_init_array+0x3c>)
 8007592:	1b64      	subs	r4, r4, r5
 8007594:	10a4      	asrs	r4, r4, #2
 8007596:	2600      	movs	r6, #0
 8007598:	42a6      	cmp	r6, r4
 800759a:	d109      	bne.n	80075b0 <__libc_init_array+0x24>
 800759c:	4d0b      	ldr	r5, [pc, #44]	; (80075cc <__libc_init_array+0x40>)
 800759e:	4c0c      	ldr	r4, [pc, #48]	; (80075d0 <__libc_init_array+0x44>)
 80075a0:	f000 f826 	bl	80075f0 <_init>
 80075a4:	1b64      	subs	r4, r4, r5
 80075a6:	10a4      	asrs	r4, r4, #2
 80075a8:	2600      	movs	r6, #0
 80075aa:	42a6      	cmp	r6, r4
 80075ac:	d105      	bne.n	80075ba <__libc_init_array+0x2e>
 80075ae:	bd70      	pop	{r4, r5, r6, pc}
 80075b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80075b4:	4798      	blx	r3
 80075b6:	3601      	adds	r6, #1
 80075b8:	e7ee      	b.n	8007598 <__libc_init_array+0xc>
 80075ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80075be:	4798      	blx	r3
 80075c0:	3601      	adds	r6, #1
 80075c2:	e7f2      	b.n	80075aa <__libc_init_array+0x1e>
 80075c4:	0800777c 	.word	0x0800777c
 80075c8:	0800777c 	.word	0x0800777c
 80075cc:	0800777c 	.word	0x0800777c
 80075d0:	08007780 	.word	0x08007780

080075d4 <memcpy>:
 80075d4:	440a      	add	r2, r1
 80075d6:	4291      	cmp	r1, r2
 80075d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80075dc:	d100      	bne.n	80075e0 <memcpy+0xc>
 80075de:	4770      	bx	lr
 80075e0:	b510      	push	{r4, lr}
 80075e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075ea:	4291      	cmp	r1, r2
 80075ec:	d1f9      	bne.n	80075e2 <memcpy+0xe>
 80075ee:	bd10      	pop	{r4, pc}

080075f0 <_init>:
 80075f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075f2:	bf00      	nop
 80075f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075f6:	bc08      	pop	{r3}
 80075f8:	469e      	mov	lr, r3
 80075fa:	4770      	bx	lr

080075fc <_fini>:
 80075fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075fe:	bf00      	nop
 8007600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007602:	bc08      	pop	{r3}
 8007604:	469e      	mov	lr, r3
 8007606:	4770      	bx	lr
