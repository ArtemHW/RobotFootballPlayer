
F301Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ecf8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b8  0800ee88  0800ee88  0001ee88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f640  0800f640  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800f640  0800f640  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f640  0800f640  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f640  0800f640  0001f640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f644  0800f644  0001f644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800f648  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002108  200001e8  0800f830  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200022f0  0800f830  000222f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d089  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000043bc  00000000  00000000  0003d2e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018d8  00000000  00000000  000416a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000134f  00000000  00000000  00042f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a55d  00000000  00000000  000442c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e9b4  00000000  00000000  0005e824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009cb08  00000000  00000000  0007d1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007bc0  00000000  00000000  00119ce0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  001218a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ee70 	.word	0x0800ee70

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800ee70 	.word	0x0800ee70

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <adxl345_bw_rate_setup>:
 * @param  CS_port - CS port address
 * @param  CS_pin - CS pin number
 * @param  rate - Desired output data rate
 */
void adxl345_bw_rate_setup(SPI_HandleTypeDef* hspi, GPIO_TypeDef * CS_port, uint32_t CS_pin, uint8_t rate)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	60f8      	str	r0, [r7, #12]
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	607a      	str	r2, [r7, #4]
 8000c74:	70fb      	strb	r3, [r7, #3]
	uint8_t instr = BW_RATE;
 8000c76:	232c      	movs	r3, #44	; 0x2c
 8000c78:	757b      	strb	r3, [r7, #21]
	uint16_t temp;
	temp = hspi->Instance->DR;
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	82fb      	strh	r3, [r7, #22]
	CS_port->ODR &= ~(1<<CS_pin);
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	695b      	ldr	r3, [r3, #20]
 8000c86:	2101      	movs	r1, #1
 8000c88:	687a      	ldr	r2, [r7, #4]
 8000c8a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c8e:	43d2      	mvns	r2, r2
 8000c90:	401a      	ands	r2, r3
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(hspi, &instr, 1, 100);
 8000c96:	f107 0115 	add.w	r1, r7, #21
 8000c9a:	2364      	movs	r3, #100	; 0x64
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	68f8      	ldr	r0, [r7, #12]
 8000ca0:	f005 fd63 	bl	800676a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &rate, 1, 100);
 8000ca4:	1cf9      	adds	r1, r7, #3
 8000ca6:	2364      	movs	r3, #100	; 0x64
 8000ca8:	2201      	movs	r2, #1
 8000caa:	68f8      	ldr	r0, [r7, #12]
 8000cac:	f005 fd5d 	bl	800676a <HAL_SPI_Transmit>
	CS_port->ODR |= (1<<CS_pin);
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	695b      	ldr	r3, [r3, #20]
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	fa01 f202 	lsl.w	r2, r1, r2
 8000cbc:	431a      	orrs	r2, r3
 8000cbe:	68bb      	ldr	r3, [r7, #8]
 8000cc0:	615a      	str	r2, [r3, #20]
}
 8000cc2:	bf00      	nop
 8000cc4:	3718      	adds	r7, #24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <adxl345_measure_mode>:
 *               the configuration information for SPI module.
 * @param  CS_port - CS port address
 * @param  CS_pin - CS pin number
 */
void adxl345_measure_mode(SPI_HandleTypeDef* hspi, GPIO_TypeDef * CS_port, uint32_t CS_pin)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b086      	sub	sp, #24
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	60f8      	str	r0, [r7, #12]
 8000cd2:	60b9      	str	r1, [r7, #8]
 8000cd4:	607a      	str	r2, [r7, #4]
	uint8_t register_data = 0;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	757b      	strb	r3, [r7, #21]
	uint8_t instr = POWER_CTL | (1<<7);
 8000cda:	23ad      	movs	r3, #173	; 0xad
 8000cdc:	753b      	strb	r3, [r7, #20]
	uint16_t temp;
	temp = hspi->Instance->DR; //Clearing buffer
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	82fb      	strh	r3, [r7, #22]
	CS_port->ODR &= ~(1<<CS_pin);
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	695b      	ldr	r3, [r3, #20]
 8000cea:	2101      	movs	r1, #1
 8000cec:	687a      	ldr	r2, [r7, #4]
 8000cee:	fa01 f202 	lsl.w	r2, r1, r2
 8000cf2:	43d2      	mvns	r2, r2
 8000cf4:	401a      	ands	r2, r3
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(hspi, &instr, 1, 100);
 8000cfa:	f107 0114 	add.w	r1, r7, #20
 8000cfe:	2364      	movs	r3, #100	; 0x64
 8000d00:	2201      	movs	r2, #1
 8000d02:	68f8      	ldr	r0, [r7, #12]
 8000d04:	f005 fd31 	bl	800676a <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, &register_data, 1, 100);
 8000d08:	f107 0115 	add.w	r1, r7, #21
 8000d0c:	2364      	movs	r3, #100	; 0x64
 8000d0e:	2201      	movs	r2, #1
 8000d10:	68f8      	ldr	r0, [r7, #12]
 8000d12:	f005 fe9f 	bl	8006a54 <HAL_SPI_Receive>
	CS_port->ODR |= (1<<CS_pin);
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	695b      	ldr	r3, [r3, #20]
 8000d1a:	2101      	movs	r1, #1
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d22:	431a      	orrs	r2, r3
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	615a      	str	r2, [r3, #20]
	register_data |= (1<<3);
 8000d28:	7d7b      	ldrb	r3, [r7, #21]
 8000d2a:	f043 0308 	orr.w	r3, r3, #8
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	757b      	strb	r3, [r7, #21]
	instr = POWER_CTL;
 8000d32:	232d      	movs	r3, #45	; 0x2d
 8000d34:	753b      	strb	r3, [r7, #20]
	CS_port->ODR &= ~(1<<CS_pin);
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	695b      	ldr	r3, [r3, #20]
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	687a      	ldr	r2, [r7, #4]
 8000d3e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d42:	43d2      	mvns	r2, r2
 8000d44:	401a      	ands	r2, r3
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(hspi, &instr, 1, 100);
 8000d4a:	f107 0114 	add.w	r1, r7, #20
 8000d4e:	2364      	movs	r3, #100	; 0x64
 8000d50:	2201      	movs	r2, #1
 8000d52:	68f8      	ldr	r0, [r7, #12]
 8000d54:	f005 fd09 	bl	800676a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &register_data, 1, 100);
 8000d58:	f107 0115 	add.w	r1, r7, #21
 8000d5c:	2364      	movs	r3, #100	; 0x64
 8000d5e:	2201      	movs	r2, #1
 8000d60:	68f8      	ldr	r0, [r7, #12]
 8000d62:	f005 fd02 	bl	800676a <HAL_SPI_Transmit>
	CS_port->ODR |= (1<<CS_pin);
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	695b      	ldr	r3, [r3, #20]
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	687a      	ldr	r2, [r7, #4]
 8000d6e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d72:	431a      	orrs	r2, r3
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	615a      	str	r2, [r3, #20]
	//test
	temp = hspi->Instance->DR; //Clearing buffer
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	68db      	ldr	r3, [r3, #12]
 8000d7e:	82fb      	strh	r3, [r7, #22]
	register_data = 0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	757b      	strb	r3, [r7, #21]
	instr = POWER_CTL | (1<<7);
 8000d84:	23ad      	movs	r3, #173	; 0xad
 8000d86:	753b      	strb	r3, [r7, #20]
	CS_port->ODR &= ~(1<<CS_pin);
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	695b      	ldr	r3, [r3, #20]
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	687a      	ldr	r2, [r7, #4]
 8000d90:	fa01 f202 	lsl.w	r2, r1, r2
 8000d94:	43d2      	mvns	r2, r2
 8000d96:	401a      	ands	r2, r3
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(hspi, &instr, 1, 100);
 8000d9c:	f107 0114 	add.w	r1, r7, #20
 8000da0:	2364      	movs	r3, #100	; 0x64
 8000da2:	2201      	movs	r2, #1
 8000da4:	68f8      	ldr	r0, [r7, #12]
 8000da6:	f005 fce0 	bl	800676a <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, &register_data, 1, 100);
 8000daa:	f107 0115 	add.w	r1, r7, #21
 8000dae:	2364      	movs	r3, #100	; 0x64
 8000db0:	2201      	movs	r2, #1
 8000db2:	68f8      	ldr	r0, [r7, #12]
 8000db4:	f005 fe4e 	bl	8006a54 <HAL_SPI_Receive>
	CS_port->ODR |= (1<<CS_pin);
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	695b      	ldr	r3, [r3, #20]
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	fa01 f202 	lsl.w	r2, r1, r2
 8000dc4:	431a      	orrs	r2, r3
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	615a      	str	r2, [r3, #20]
}
 8000dca:	bf00      	nop
 8000dcc:	3718      	adds	r7, #24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <adxl345_data_format>:
 * @param  CS_port - CS port address
 * @param  CS_pin - CS pin number
 * @param  data_format - Information for the accelerometer DATA_FORMAT register
 */
void adxl345_data_format(SPI_HandleTypeDef* hspi, GPIO_TypeDef * CS_port, uint32_t CS_pin, uint8_t data_format)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b086      	sub	sp, #24
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	60f8      	str	r0, [r7, #12]
 8000dda:	60b9      	str	r1, [r7, #8]
 8000ddc:	607a      	str	r2, [r7, #4]
 8000dde:	70fb      	strb	r3, [r7, #3]
	uint8_t instr = DATA_FORMAT;
 8000de0:	2331      	movs	r3, #49	; 0x31
 8000de2:	75fb      	strb	r3, [r7, #23]
	CS_port->ODR &= ~(1<<CS_pin);
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	695b      	ldr	r3, [r3, #20]
 8000de8:	2101      	movs	r1, #1
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	fa01 f202 	lsl.w	r2, r1, r2
 8000df0:	43d2      	mvns	r2, r2
 8000df2:	401a      	ands	r2, r3
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(hspi, &instr, 1, 100);
 8000df8:	f107 0117 	add.w	r1, r7, #23
 8000dfc:	2364      	movs	r3, #100	; 0x64
 8000dfe:	2201      	movs	r2, #1
 8000e00:	68f8      	ldr	r0, [r7, #12]
 8000e02:	f005 fcb2 	bl	800676a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &data_format, 1, 100);
 8000e06:	1cf9      	adds	r1, r7, #3
 8000e08:	2364      	movs	r3, #100	; 0x64
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	68f8      	ldr	r0, [r7, #12]
 8000e0e:	f005 fcac 	bl	800676a <HAL_SPI_Transmit>
	CS_port->ODR |= (1<<CS_pin);
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	695b      	ldr	r3, [r3, #20]
 8000e16:	2101      	movs	r1, #1
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e1e:	431a      	orrs	r2, r3
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	615a      	str	r2, [r3, #20]
}
 8000e24:	bf00      	nop
 8000e26:	3718      	adds	r7, #24
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <adxl345_read_data>:
 * @param  CS_port - CS port address
 * @param  CS_pin - CS pin number
 * @param  buffer - Pointer to the buffer where you want to put the received data
 */
void adxl345_read_data(SPI_HandleTypeDef* hspi, GPIO_TypeDef * CS_port, uint32_t CS_pin, uint8_t* buffer)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
 8000e38:	603b      	str	r3, [r7, #0]
	uint8_t instr = DATAX0 | (1<<7) | (1<<6);
 8000e3a:	23f2      	movs	r3, #242	; 0xf2
 8000e3c:	757b      	strb	r3, [r7, #21]
	uint16_t temp;
	temp = hspi->Instance->DR; //Clearing buffer
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	82fb      	strh	r3, [r7, #22]
	CS_port->ODR &= ~(1<<CS_pin);
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	695b      	ldr	r3, [r3, #20]
 8000e4a:	2101      	movs	r1, #1
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e52:	43d2      	mvns	r2, r2
 8000e54:	401a      	ands	r2, r3
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(hspi, &instr, 1, 100);
 8000e5a:	f107 0115 	add.w	r1, r7, #21
 8000e5e:	2364      	movs	r3, #100	; 0x64
 8000e60:	2201      	movs	r2, #1
 8000e62:	68f8      	ldr	r0, [r7, #12]
 8000e64:	f005 fc81 	bl	800676a <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, buffer, 6, 100);
 8000e68:	2364      	movs	r3, #100	; 0x64
 8000e6a:	2206      	movs	r2, #6
 8000e6c:	6839      	ldr	r1, [r7, #0]
 8000e6e:	68f8      	ldr	r0, [r7, #12]
 8000e70:	f005 fdf0 	bl	8006a54 <HAL_SPI_Receive>
	CS_port->ODR |= (1<<CS_pin);
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	695b      	ldr	r3, [r3, #20]
 8000e78:	2101      	movs	r1, #1
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e80:	431a      	orrs	r2, r3
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	615a      	str	r2, [r3, #20]
}
 8000e86:	bf00      	nop
 8000e88:	3718      	adds	r7, #24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <sendATCommand>:

#include <espATcommands.h>
extern uint32_t debugVar;

void sendATCommand(UART_HandleTypeDef *huart, const char* atcom, int sizeOfAT, int delayms)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b086      	sub	sp, #24
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	60f8      	str	r0, [r7, #12]
 8000e96:	60b9      	str	r1, [r7, #8]
 8000e98:	607a      	str	r2, [r7, #4]
 8000e9a:	603b      	str	r3, [r7, #0]
	for(uint16_t i = 0; i < sizeOfAT; i++) {
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	82fb      	strh	r3, [r7, #22]
 8000ea0:	e00a      	b.n	8000eb8 <sendATCommand+0x2a>
		if(atcom[i] == '\0') {
 8000ea2:	8afb      	ldrh	r3, [r7, #22]
 8000ea4:	68ba      	ldr	r2, [r7, #8]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d101      	bne.n	8000eb2 <sendATCommand+0x24>
			sizeOfAT = i;
 8000eae:	8afb      	ldrh	r3, [r7, #22]
 8000eb0:	607b      	str	r3, [r7, #4]
	for(uint16_t i = 0; i < sizeOfAT; i++) {
 8000eb2:	8afb      	ldrh	r3, [r7, #22]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	82fb      	strh	r3, [r7, #22]
 8000eb8:	8afb      	ldrh	r3, [r7, #22]
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	dcf0      	bgt.n	8000ea2 <sendATCommand+0x14>
		}
	}
	HAL_UART_Transmit(huart, atcom, sizeOfAT, delayms);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	68b9      	ldr	r1, [r7, #8]
 8000ec8:	68f8      	ldr	r0, [r7, #12]
 8000eca:	f006 ff6f 	bl	8007dac <HAL_UART_Transmit>
}
 8000ece:	bf00      	nop
 8000ed0:	3718      	adds	r7, #24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <receiveAnswer>:

void receiveAnswer(UART_HandleTypeDef *huart, char* response, int sizeOfResp, int delayms)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b086      	sub	sp, #24
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	60f8      	str	r0, [r7, #12]
 8000ede:	60b9      	str	r1, [r7, #8]
 8000ee0:	607a      	str	r2, [r7, #4]
 8000ee2:	603b      	str	r3, [r7, #0]
	for(uint16_t i = 0; i < sizeOfResp; i++) {
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	82fb      	strh	r3, [r7, #22]
 8000ee8:	e007      	b.n	8000efa <receiveAnswer+0x24>
		response[i] = 0;
 8000eea:	8afb      	ldrh	r3, [r7, #22]
 8000eec:	68ba      	ldr	r2, [r7, #8]
 8000eee:	4413      	add	r3, r2
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i < sizeOfResp; i++) {
 8000ef4:	8afb      	ldrh	r3, [r7, #22]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	82fb      	strh	r3, [r7, #22]
 8000efa:	8afb      	ldrh	r3, [r7, #22]
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	dcf3      	bgt.n	8000eea <receiveAnswer+0x14>
	}
	HAL_UART_Receive(huart, response, sizeOfResp, delayms);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	b29a      	uxth	r2, r3
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	68b9      	ldr	r1, [r7, #8]
 8000f0a:	68f8      	ldr	r0, [r7, #12]
 8000f0c:	f006 ffd8 	bl	8007ec0 <HAL_UART_Receive>
}
 8000f10:	bf00      	nop
 8000f12:	3718      	adds	r7, #24
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <atSend_USART3_DMA>:
	resp = HAL_UART_Transmit_DMA(huart, (uint8_t*)pData, sizeof(pData)-1);
	__asm__ volatile("NOP");
}

uint8_t atSend_USART3_DMA(const uint8_t *pData, uint16_t amount)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	460b      	mov	r3, r1
 8000f22:	807b      	strh	r3, [r7, #2]
	if((DMA1_Channel2->CCR & DMA_CCR_EN) == DMA_CCR_EN) {
 8000f24:	4b25      	ldr	r3, [pc, #148]	; (8000fbc <atSend_USART3_DMA+0xa4>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f003 0301 	and.w	r3, r3, #1
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d129      	bne.n	8000f84 <atSend_USART3_DMA+0x6c>
		if((DMA1_Channel2->CNDTR) != 0) {
 8000f30:	4b22      	ldr	r3, [pc, #136]	; (8000fbc <atSend_USART3_DMA+0xa4>)
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <atSend_USART3_DMA+0x24>
			return 1;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e039      	b.n	8000fb0 <atSend_USART3_DMA+0x98>
		} else if((DMA1_Channel2->CCR & DMA_CCR_TCIE) != DMA_CCR_TCIE) {
 8000f3c:	4b1f      	ldr	r3, [pc, #124]	; (8000fbc <atSend_USART3_DMA+0xa4>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f003 0302 	and.w	r3, r3, #2
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d01d      	beq.n	8000f84 <atSend_USART3_DMA+0x6c>
			DMA1_Channel2->CCR &= ~DMA_CCR_EN;
 8000f48:	4b1c      	ldr	r3, [pc, #112]	; (8000fbc <atSend_USART3_DMA+0xa4>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a1b      	ldr	r2, [pc, #108]	; (8000fbc <atSend_USART3_DMA+0xa4>)
 8000f4e:	f023 0301 	bic.w	r3, r3, #1
 8000f52:	6013      	str	r3, [r2, #0]
			USART3->CR3 &= ~USART_CR3_DMAT;
 8000f54:	4b1a      	ldr	r3, [pc, #104]	; (8000fc0 <atSend_USART3_DMA+0xa8>)
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	4a19      	ldr	r2, [pc, #100]	; (8000fc0 <atSend_USART3_DMA+0xa8>)
 8000f5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000f5e:	6093      	str	r3, [r2, #8]
			if((DMA1->ISR & DMA_ISR_TCIF2) == DMA_ISR_TCIF2) {
 8000f60:	4b18      	ldr	r3, [pc, #96]	; (8000fc4 <atSend_USART3_DMA+0xac>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f003 0320 	and.w	r3, r3, #32
 8000f68:	2b20      	cmp	r3, #32
 8000f6a:	d105      	bne.n	8000f78 <atSend_USART3_DMA+0x60>
				DMA1->IFCR |= DMA_IFCR_CTCIF2;
 8000f6c:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <atSend_USART3_DMA+0xac>)
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	4a14      	ldr	r2, [pc, #80]	; (8000fc4 <atSend_USART3_DMA+0xac>)
 8000f72:	f043 0320 	orr.w	r3, r3, #32
 8000f76:	6053      	str	r3, [r2, #4]
			}
			DMA1_Channel2->CCR |= DMA_CCR_TCIE;
 8000f78:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <atSend_USART3_DMA+0xa4>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a0f      	ldr	r2, [pc, #60]	; (8000fbc <atSend_USART3_DMA+0xa4>)
 8000f7e:	f043 0302 	orr.w	r3, r3, #2
 8000f82:	6013      	str	r3, [r2, #0]
		}
	}
	USART3->CR3 |= USART_CR3_DMAT;
 8000f84:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <atSend_USART3_DMA+0xa8>)
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	4a0d      	ldr	r2, [pc, #52]	; (8000fc0 <atSend_USART3_DMA+0xa8>)
 8000f8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f8e:	6093      	str	r3, [r2, #8]

	DMA1_Channel2->CNDTR = amount;
 8000f90:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <atSend_USART3_DMA+0xa4>)
 8000f92:	887b      	ldrh	r3, [r7, #2]
 8000f94:	6053      	str	r3, [r2, #4]
	DMA1_Channel2->CPAR = (uint32_t)&(USART3->TDR);
 8000f96:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <atSend_USART3_DMA+0xa4>)
 8000f98:	4a0b      	ldr	r2, [pc, #44]	; (8000fc8 <atSend_USART3_DMA+0xb0>)
 8000f9a:	609a      	str	r2, [r3, #8]
	DMA1_Channel2->CMAR = (uint32_t)pData;
 8000f9c:	4a07      	ldr	r2, [pc, #28]	; (8000fbc <atSend_USART3_DMA+0xa4>)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	60d3      	str	r3, [r2, #12]

	DMA1_Channel2->CCR |= DMA_CCR_EN;
 8000fa2:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <atSend_USART3_DMA+0xa4>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a05      	ldr	r2, [pc, #20]	; (8000fbc <atSend_USART3_DMA+0xa4>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	6013      	str	r3, [r2, #0]
	return 0;
 8000fae:	2300      	movs	r3, #0
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	4002001c 	.word	0x4002001c
 8000fc0:	40004800 	.word	0x40004800
 8000fc4:	40020000 	.word	0x40020000
 8000fc8:	40004828 	.word	0x40004828
 8000fcc:	00000000 	.word	0x00000000

08000fd0 <parseFloat>:

float parseFloat(const char *buffer, uint16_t startIndex)
{
 8000fd0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000fd4:	b084      	sub	sp, #16
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
 8000fda:	460b      	mov	r3, r1
 8000fdc:	807b      	strh	r3, [r7, #2]
    float value = 0.0f;
 8000fde:	f04f 0300 	mov.w	r3, #0
 8000fe2:	60fb      	str	r3, [r7, #12]
    uint8_t decimalFlag = 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	72fb      	strb	r3, [r7, #11]
    uint8_t decimalPlaces = 0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	72bb      	strb	r3, [r7, #10]

    for (uint16_t i = startIndex; buffer[i % ESPRXBUFFERSIZE] != '_'; i++) {
 8000fec:	887b      	ldrh	r3, [r7, #2]
 8000fee:	813b      	strh	r3, [r7, #8]
 8000ff0:	e0c7      	b.n	8001182 <parseFloat+0x1b2>
        if (buffer[i % ESPRXBUFFERSIZE] == '.') {
 8000ff2:	893a      	ldrh	r2, [r7, #8]
 8000ff4:	4b7a      	ldr	r3, [pc, #488]	; (80011e0 <parseFloat+0x210>)
 8000ff6:	fba3 1302 	umull	r1, r3, r3, r2
 8000ffa:	1ad1      	subs	r1, r2, r3
 8000ffc:	0849      	lsrs	r1, r1, #1
 8000ffe:	440b      	add	r3, r1
 8001000:	0a19      	lsrs	r1, r3, #8
 8001002:	460b      	mov	r3, r1
 8001004:	025b      	lsls	r3, r3, #9
 8001006:	1a5b      	subs	r3, r3, r1
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	b29b      	uxth	r3, r3
 800100c:	461a      	mov	r2, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4413      	add	r3, r2
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b2e      	cmp	r3, #46	; 0x2e
 8001016:	d104      	bne.n	8001022 <parseFloat+0x52>
            decimalFlag |= (1<<0);
 8001018:	7afb      	ldrb	r3, [r7, #11]
 800101a:	f043 0301 	orr.w	r3, r3, #1
 800101e:	72fb      	strb	r3, [r7, #11]
 8001020:	e0a2      	b.n	8001168 <parseFloat+0x198>
        } else if (buffer[i % ESPRXBUFFERSIZE] == '-') {
 8001022:	893a      	ldrh	r2, [r7, #8]
 8001024:	4b6e      	ldr	r3, [pc, #440]	; (80011e0 <parseFloat+0x210>)
 8001026:	fba3 1302 	umull	r1, r3, r3, r2
 800102a:	1ad1      	subs	r1, r2, r3
 800102c:	0849      	lsrs	r1, r1, #1
 800102e:	440b      	add	r3, r1
 8001030:	0a19      	lsrs	r1, r3, #8
 8001032:	460b      	mov	r3, r1
 8001034:	025b      	lsls	r3, r3, #9
 8001036:	1a5b      	subs	r3, r3, r1
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	b29b      	uxth	r3, r3
 800103c:	461a      	mov	r2, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4413      	add	r3, r2
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b2d      	cmp	r3, #45	; 0x2d
 8001046:	d104      	bne.n	8001052 <parseFloat+0x82>
            decimalFlag |= (1<<1);
 8001048:	7afb      	ldrb	r3, [r7, #11]
 800104a:	f043 0302 	orr.w	r3, r3, #2
 800104e:	72fb      	strb	r3, [r7, #11]
 8001050:	e08a      	b.n	8001168 <parseFloat+0x198>
        } else if (buffer[i % ESPRXBUFFERSIZE] >= '0' && buffer[i % ESPRXBUFFERSIZE] <= '9') {
 8001052:	893a      	ldrh	r2, [r7, #8]
 8001054:	4b62      	ldr	r3, [pc, #392]	; (80011e0 <parseFloat+0x210>)
 8001056:	fba3 1302 	umull	r1, r3, r3, r2
 800105a:	1ad1      	subs	r1, r2, r3
 800105c:	0849      	lsrs	r1, r1, #1
 800105e:	440b      	add	r3, r1
 8001060:	0a19      	lsrs	r1, r3, #8
 8001062:	460b      	mov	r3, r1
 8001064:	025b      	lsls	r3, r3, #9
 8001066:	1a5b      	subs	r3, r3, r1
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	b29b      	uxth	r3, r3
 800106c:	461a      	mov	r2, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4413      	add	r3, r2
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b2f      	cmp	r3, #47	; 0x2f
 8001076:	d977      	bls.n	8001168 <parseFloat+0x198>
 8001078:	893a      	ldrh	r2, [r7, #8]
 800107a:	4b59      	ldr	r3, [pc, #356]	; (80011e0 <parseFloat+0x210>)
 800107c:	fba3 1302 	umull	r1, r3, r3, r2
 8001080:	1ad1      	subs	r1, r2, r3
 8001082:	0849      	lsrs	r1, r1, #1
 8001084:	440b      	add	r3, r1
 8001086:	0a19      	lsrs	r1, r3, #8
 8001088:	460b      	mov	r3, r1
 800108a:	025b      	lsls	r3, r3, #9
 800108c:	1a5b      	subs	r3, r3, r1
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	b29b      	uxth	r3, r3
 8001092:	461a      	mov	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4413      	add	r3, r2
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b39      	cmp	r3, #57	; 0x39
 800109c:	d864      	bhi.n	8001168 <parseFloat+0x198>
            if ((decimalFlag & (1<<0)) == (1<<0)) {
 800109e:	7afb      	ldrb	r3, [r7, #11]
 80010a0:	f003 0301 	and.w	r3, r3, #1
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d03f      	beq.n	8001128 <parseFloat+0x158>
                decimalPlaces++;
 80010a8:	7abb      	ldrb	r3, [r7, #10]
 80010aa:	3301      	adds	r3, #1
 80010ac:	72bb      	strb	r3, [r7, #10]
                value = value + (buffer[i % ESPRXBUFFERSIZE] - '0') / pow(10, decimalPlaces);
 80010ae:	68f8      	ldr	r0, [r7, #12]
 80010b0:	f7ff fa5a 	bl	8000568 <__aeabi_f2d>
 80010b4:	4604      	mov	r4, r0
 80010b6:	460d      	mov	r5, r1
 80010b8:	893a      	ldrh	r2, [r7, #8]
 80010ba:	4b49      	ldr	r3, [pc, #292]	; (80011e0 <parseFloat+0x210>)
 80010bc:	fba3 1302 	umull	r1, r3, r3, r2
 80010c0:	1ad1      	subs	r1, r2, r3
 80010c2:	0849      	lsrs	r1, r1, #1
 80010c4:	440b      	add	r3, r1
 80010c6:	0a19      	lsrs	r1, r3, #8
 80010c8:	460b      	mov	r3, r1
 80010ca:	025b      	lsls	r3, r3, #9
 80010cc:	1a5b      	subs	r3, r3, r1
 80010ce:	1ad3      	subs	r3, r2, r3
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	461a      	mov	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4413      	add	r3, r2
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	3b30      	subs	r3, #48	; 0x30
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff fa31 	bl	8000544 <__aeabi_i2d>
 80010e2:	4680      	mov	r8, r0
 80010e4:	4689      	mov	r9, r1
 80010e6:	7abb      	ldrb	r3, [r7, #10]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff fa1b 	bl	8000524 <__aeabi_ui2d>
 80010ee:	4602      	mov	r2, r0
 80010f0:	460b      	mov	r3, r1
 80010f2:	ec43 2b11 	vmov	d1, r2, r3
 80010f6:	ed9f 0b38 	vldr	d0, [pc, #224]	; 80011d8 <parseFloat+0x208>
 80010fa:	f00c ff7f 	bl	800dffc <pow>
 80010fe:	ec53 2b10 	vmov	r2, r3, d0
 8001102:	4640      	mov	r0, r8
 8001104:	4649      	mov	r1, r9
 8001106:	f7ff fbb1 	bl	800086c <__aeabi_ddiv>
 800110a:	4602      	mov	r2, r0
 800110c:	460b      	mov	r3, r1
 800110e:	4620      	mov	r0, r4
 8001110:	4629      	mov	r1, r5
 8001112:	f7ff f8cb 	bl	80002ac <__adddf3>
 8001116:	4602      	mov	r2, r0
 8001118:	460b      	mov	r3, r1
 800111a:	4610      	mov	r0, r2
 800111c:	4619      	mov	r1, r3
 800111e:	f7ff fd53 	bl	8000bc8 <__aeabi_d2f>
 8001122:	4603      	mov	r3, r0
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	e01f      	b.n	8001168 <parseFloat+0x198>
            } else {
                value = value * 10 + (buffer[i % ESPRXBUFFERSIZE] - '0');
 8001128:	edd7 7a03 	vldr	s15, [r7, #12]
 800112c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001130:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001134:	893a      	ldrh	r2, [r7, #8]
 8001136:	4b2a      	ldr	r3, [pc, #168]	; (80011e0 <parseFloat+0x210>)
 8001138:	fba3 1302 	umull	r1, r3, r3, r2
 800113c:	1ad1      	subs	r1, r2, r3
 800113e:	0849      	lsrs	r1, r1, #1
 8001140:	440b      	add	r3, r1
 8001142:	0a19      	lsrs	r1, r3, #8
 8001144:	460b      	mov	r3, r1
 8001146:	025b      	lsls	r3, r3, #9
 8001148:	1a5b      	subs	r3, r3, r1
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	b29b      	uxth	r3, r3
 800114e:	461a      	mov	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4413      	add	r3, r2
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	3b30      	subs	r3, #48	; 0x30
 8001158:	ee07 3a90 	vmov	s15, r3
 800115c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001160:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001164:	edc7 7a03 	vstr	s15, [r7, #12]
            }
        }
        if(value > 50) {
 8001168:	edd7 7a03 	vldr	s15, [r7, #12]
 800116c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80011e4 <parseFloat+0x214>
 8001170:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001178:	dd00      	ble.n	800117c <parseFloat+0x1ac>
        	__asm__ volatile("NOP");
 800117a:	bf00      	nop
    for (uint16_t i = startIndex; buffer[i % ESPRXBUFFERSIZE] != '_'; i++) {
 800117c:	893b      	ldrh	r3, [r7, #8]
 800117e:	3301      	adds	r3, #1
 8001180:	813b      	strh	r3, [r7, #8]
 8001182:	893a      	ldrh	r2, [r7, #8]
 8001184:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <parseFloat+0x210>)
 8001186:	fba3 1302 	umull	r1, r3, r3, r2
 800118a:	1ad1      	subs	r1, r2, r3
 800118c:	0849      	lsrs	r1, r1, #1
 800118e:	440b      	add	r3, r1
 8001190:	0a19      	lsrs	r1, r3, #8
 8001192:	460b      	mov	r3, r1
 8001194:	025b      	lsls	r3, r3, #9
 8001196:	1a5b      	subs	r3, r3, r1
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	b29b      	uxth	r3, r3
 800119c:	461a      	mov	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4413      	add	r3, r2
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b5f      	cmp	r3, #95	; 0x5f
 80011a6:	f47f af24 	bne.w	8000ff2 <parseFloat+0x22>
        }
    }

    if((decimalFlag & (1<<1)) == (1<<1)) {
 80011aa:	7afb      	ldrb	r3, [r7, #11]
 80011ac:	f003 0302 	and.w	r3, r3, #2
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d005      	beq.n	80011c0 <parseFloat+0x1f0>
    	value *= -1.0f;
 80011b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80011b8:	eef1 7a67 	vneg.f32	s15, s15
 80011bc:	edc7 7a03 	vstr	s15, [r7, #12]
    }

    return value;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	ee07 3a90 	vmov	s15, r3
}
 80011c6:	eeb0 0a67 	vmov.f32	s0, s15
 80011ca:	3710      	adds	r7, #16
 80011cc:	46bd      	mov	sp, r7
 80011ce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80011d2:	bf00      	nop
 80011d4:	f3af 8000 	nop.w
 80011d8:	00000000 	.word	0x00000000
 80011dc:	40240000 	.word	0x40240000
 80011e0:	00804021 	.word	0x00804021
 80011e4:	42480000 	.word	0x42480000

080011e8 <espRecon>:

void espRecon(UART_HandleTypeDef *huart)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b0a2      	sub	sp, #136	; 0x88
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	char pData[100];
	debugVar = 122;
 80011f0:	4b38      	ldr	r3, [pc, #224]	; (80012d4 <espRecon+0xec>)
 80011f2:	227a      	movs	r2, #122	; 0x7a
 80011f4:	601a      	str	r2, [r3, #0]

	sprintf(pData, "AT+CIPCLOSE\r\n");
 80011f6:	f107 0320 	add.w	r3, r7, #32
 80011fa:	4937      	ldr	r1, [pc, #220]	; (80012d8 <espRecon+0xf0>)
 80011fc:	4618      	mov	r0, r3
 80011fe:	f00a fda3 	bl	800bd48 <siprintf>
	HAL_UART_Transmit(huart, pData, strlen(pData), 250);
 8001202:	f107 0320 	add.w	r3, r7, #32
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff f842 	bl	8000290 <strlen>
 800120c:	4603      	mov	r3, r0
 800120e:	b29a      	uxth	r2, r3
 8001210:	f107 0120 	add.w	r1, r7, #32
 8001214:	23fa      	movs	r3, #250	; 0xfa
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f006 fdc8 	bl	8007dac <HAL_UART_Transmit>
	vTaskDelay(50);
 800121c:	2032      	movs	r0, #50	; 0x32
 800121e:	f008 fb05 	bl	800982c <vTaskDelay>

	debugVar = 123;
 8001222:	4b2c      	ldr	r3, [pc, #176]	; (80012d4 <espRecon+0xec>)
 8001224:	227b      	movs	r2, #123	; 0x7b
 8001226:	601a      	str	r2, [r3, #0]

	sprintf(pData, "AT+CIPSTART=\"TCP\",\"192.168.137.1\",8080\r\n");
 8001228:	f107 0320 	add.w	r3, r7, #32
 800122c:	492b      	ldr	r1, [pc, #172]	; (80012dc <espRecon+0xf4>)
 800122e:	4618      	mov	r0, r3
 8001230:	f00a fd8a 	bl	800bd48 <siprintf>
	HAL_UART_Transmit(huart, pData, strlen(pData), 250);
 8001234:	f107 0320 	add.w	r3, r7, #32
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff f829 	bl	8000290 <strlen>
 800123e:	4603      	mov	r3, r0
 8001240:	b29a      	uxth	r2, r3
 8001242:	f107 0120 	add.w	r1, r7, #32
 8001246:	23fa      	movs	r3, #250	; 0xfa
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f006 fdaf 	bl	8007dac <HAL_UART_Transmit>
	vTaskDelay(40);
 800124e:	2028      	movs	r0, #40	; 0x28
 8001250:	f008 faec 	bl	800982c <vTaskDelay>

	debugVar = 124;
 8001254:	4b1f      	ldr	r3, [pc, #124]	; (80012d4 <espRecon+0xec>)
 8001256:	227c      	movs	r2, #124	; 0x7c
 8001258:	601a      	str	r2, [r3, #0]
	// Creating the entire GET request string
	sprintf(pData, "GET /robot HTTP/1.1\r\n"
 800125a:	f107 0320 	add.w	r3, r7, #32
 800125e:	4920      	ldr	r1, [pc, #128]	; (80012e0 <espRecon+0xf8>)
 8001260:	4618      	mov	r0, r3
 8001262:	f00a fd71 	bl	800bd48 <siprintf>
					  "Host: 192.168.137.1\r\n");
	int getRequestLength = strlen(pData);
 8001266:	f107 0320 	add.w	r3, r7, #32
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff f810 	bl	8000290 <strlen>
 8001270:	4603      	mov	r3, r0
 8001272:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	char pDataBuf[20];
	sprintf(pDataBuf, "AT+CIPSEND=%d\r\n", getRequestLength);
 8001276:	f107 030c 	add.w	r3, r7, #12
 800127a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800127e:	4919      	ldr	r1, [pc, #100]	; (80012e4 <espRecon+0xfc>)
 8001280:	4618      	mov	r0, r3
 8001282:	f00a fd61 	bl	800bd48 <siprintf>
	debugVar = 125;
 8001286:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <espRecon+0xec>)
 8001288:	227d      	movs	r2, #125	; 0x7d
 800128a:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(huart, pDataBuf, strlen(pDataBuf), 250);
 800128c:	f107 030c 	add.w	r3, r7, #12
 8001290:	4618      	mov	r0, r3
 8001292:	f7fe fffd 	bl	8000290 <strlen>
 8001296:	4603      	mov	r3, r0
 8001298:	b29a      	uxth	r2, r3
 800129a:	f107 010c 	add.w	r1, r7, #12
 800129e:	23fa      	movs	r3, #250	; 0xfa
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f006 fd83 	bl	8007dac <HAL_UART_Transmit>
	vTaskDelay(10);
 80012a6:	200a      	movs	r0, #10
 80012a8:	f008 fac0 	bl	800982c <vTaskDelay>
	debugVar = 126;
 80012ac:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <espRecon+0xec>)
 80012ae:	227e      	movs	r2, #126	; 0x7e
 80012b0:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(huart, pData, getRequestLength, 250);
 80012b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80012b6:	b29a      	uxth	r2, r3
 80012b8:	f107 0120 	add.w	r1, r7, #32
 80012bc:	23fa      	movs	r3, #250	; 0xfa
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f006 fd74 	bl	8007dac <HAL_UART_Transmit>
	vTaskDelay(50);
 80012c4:	2032      	movs	r0, #50	; 0x32
 80012c6:	f008 fab1 	bl	800982c <vTaskDelay>
}
 80012ca:	bf00      	nop
 80012cc:	3788      	adds	r7, #136	; 0x88
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000f94 	.word	0x20000f94
 80012d8:	0800ee88 	.word	0x0800ee88
 80012dc:	0800ee98 	.word	0x0800ee98
 80012e0:	0800eec4 	.word	0x0800eec4
 80012e4:	0800eef0 	.word	0x0800eef0

080012e8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4a07      	ldr	r2, [pc, #28]	; (8001314 <vApplicationGetIdleTaskMemory+0x2c>)
 80012f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	4a06      	ldr	r2, [pc, #24]	; (8001318 <vApplicationGetIdleTaskMemory+0x30>)
 80012fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2260      	movs	r2, #96	; 0x60
 8001304:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001306:	bf00      	nop
 8001308:	3714      	adds	r7, #20
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	20000204 	.word	0x20000204
 8001318:	2000025c 	.word	0x2000025c

0800131c <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	4a07      	ldr	r2, [pc, #28]	; (8001348 <vApplicationGetTimerTaskMemory+0x2c>)
 800132c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	4a06      	ldr	r2, [pc, #24]	; (800134c <vApplicationGetTimerTaskMemory+0x30>)
 8001332:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	22c0      	movs	r2, #192	; 0xc0
 8001338:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800133a:	bf00      	nop
 800133c:	3714      	adds	r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	200003dc 	.word	0x200003dc
 800134c:	20000434 	.word	0x20000434

08001350 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800135a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135e:	2b00      	cmp	r3, #0
 8001360:	db0b      	blt.n	800137a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	f003 021f 	and.w	r2, r3, #31
 8001368:	4907      	ldr	r1, [pc, #28]	; (8001388 <__NVIC_EnableIRQ+0x38>)
 800136a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136e:	095b      	lsrs	r3, r3, #5
 8001370:	2001      	movs	r0, #1
 8001372:	fa00 f202 	lsl.w	r2, r0, r2
 8001376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	e000e100 	.word	0xe000e100

0800138c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139a:	2b00      	cmp	r3, #0
 800139c:	db12      	blt.n	80013c4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	f003 021f 	and.w	r2, r3, #31
 80013a4:	490a      	ldr	r1, [pc, #40]	; (80013d0 <__NVIC_DisableIRQ+0x44>)
 80013a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013aa:	095b      	lsrs	r3, r3, #5
 80013ac:	2001      	movs	r0, #1
 80013ae:	fa00 f202 	lsl.w	r2, r0, r2
 80013b2:	3320      	adds	r3, #32
 80013b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80013b8:	f3bf 8f4f 	dsb	sy
}
 80013bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013be:	f3bf 8f6f 	isb	sy
}
 80013c2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	e000e100 	.word	0xe000e100

080013d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	6039      	str	r1, [r7, #0]
 80013de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	db0a      	blt.n	80013fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	b2da      	uxtb	r2, r3
 80013ec:	490c      	ldr	r1, [pc, #48]	; (8001420 <__NVIC_SetPriority+0x4c>)
 80013ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f2:	0112      	lsls	r2, r2, #4
 80013f4:	b2d2      	uxtb	r2, r2
 80013f6:	440b      	add	r3, r1
 80013f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013fc:	e00a      	b.n	8001414 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	b2da      	uxtb	r2, r3
 8001402:	4908      	ldr	r1, [pc, #32]	; (8001424 <__NVIC_SetPriority+0x50>)
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	f003 030f 	and.w	r3, r3, #15
 800140a:	3b04      	subs	r3, #4
 800140c:	0112      	lsls	r2, r2, #4
 800140e:	b2d2      	uxtb	r2, r2
 8001410:	440b      	add	r3, r1
 8001412:	761a      	strb	r2, [r3, #24]
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	e000e100 	.word	0xe000e100
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001428:	b5b0      	push	{r4, r5, r7, lr}
 800142a:	b0a6      	sub	sp, #152	; 0x98
 800142c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	avrBatVoltage = 0;
 800142e:	4bb5      	ldr	r3, [pc, #724]	; (8001704 <main+0x2dc>)
 8001430:	2200      	movs	r2, #0
 8001432:	801a      	strh	r2, [r3, #0]
	BatChargeState = 0;
 8001434:	4bb4      	ldr	r3, [pc, #720]	; (8001708 <main+0x2e0>)
 8001436:	2200      	movs	r2, #0
 8001438:	701a      	strb	r2, [r3, #0]

//	EncoderR.timeNew = 0;
//	EncoderR.timeOld = 0;
//	EncoderR.timeUpdate = 0;
	EncoderR.positionNew = 0;
 800143a:	4bb4      	ldr	r3, [pc, #720]	; (800170c <main+0x2e4>)
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
	EncoderR.positionOld = 0;
 8001440:	4bb2      	ldr	r3, [pc, #712]	; (800170c <main+0x2e4>)
 8001442:	2200      	movs	r2, #0
 8001444:	605a      	str	r2, [r3, #4]
	EncoderR.posCntUpdate = 0;
 8001446:	4bb1      	ldr	r3, [pc, #708]	; (800170c <main+0x2e4>)
 8001448:	2200      	movs	r2, #0
 800144a:	721a      	strb	r2, [r3, #8]
	EncoderR.rpm = 0;
 800144c:	4baf      	ldr	r3, [pc, #700]	; (800170c <main+0x2e4>)
 800144e:	2200      	movs	r2, #0
 8001450:	60da      	str	r2, [r3, #12]
	EncoderR.pulses = 0;
 8001452:	4bae      	ldr	r3, [pc, #696]	; (800170c <main+0x2e4>)
 8001454:	2200      	movs	r2, #0
 8001456:	611a      	str	r2, [r3, #16]
	EncoderR.sumPulses = 0;
 8001458:	4bac      	ldr	r3, [pc, #688]	; (800170c <main+0x2e4>)
 800145a:	2200      	movs	r2, #0
 800145c:	615a      	str	r2, [r3, #20]
	EncoderR.iter = 0;
 800145e:	4bab      	ldr	r3, [pc, #684]	; (800170c <main+0x2e4>)
 8001460:	2200      	movs	r2, #0
 8001462:	619a      	str	r2, [r3, #24]

//	EncoderL.timeNew = 0;
//	EncoderL.timeOld = 0;
//	EncoderL.timeUpdate = 0;
	EncoderL.positionNew = 0;
 8001464:	4baa      	ldr	r3, [pc, #680]	; (8001710 <main+0x2e8>)
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
	EncoderL.positionOld = 0;
 800146a:	4ba9      	ldr	r3, [pc, #676]	; (8001710 <main+0x2e8>)
 800146c:	2200      	movs	r2, #0
 800146e:	605a      	str	r2, [r3, #4]
	EncoderL.posCntUpdate = 0;
 8001470:	4ba7      	ldr	r3, [pc, #668]	; (8001710 <main+0x2e8>)
 8001472:	2200      	movs	r2, #0
 8001474:	721a      	strb	r2, [r3, #8]
	EncoderL.rpm = 0;
 8001476:	4ba6      	ldr	r3, [pc, #664]	; (8001710 <main+0x2e8>)
 8001478:	2200      	movs	r2, #0
 800147a:	60da      	str	r2, [r3, #12]
	EncoderL.pulses = 0;
 800147c:	4ba4      	ldr	r3, [pc, #656]	; (8001710 <main+0x2e8>)
 800147e:	2200      	movs	r2, #0
 8001480:	611a      	str	r2, [r3, #16]

	SoftPwmR.errorValue = 0;
 8001482:	4ba4      	ldr	r3, [pc, #656]	; (8001714 <main+0x2ec>)
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
	SoftPwmR.sumValue = 0;
 8001488:	4ba2      	ldr	r3, [pc, #648]	; (8001714 <main+0x2ec>)
 800148a:	f04f 0200 	mov.w	r2, #0
 800148e:	605a      	str	r2, [r3, #4]
	SoftPwmR.pValue = 0;
 8001490:	4ba0      	ldr	r3, [pc, #640]	; (8001714 <main+0x2ec>)
 8001492:	f04f 0200 	mov.w	r2, #0
 8001496:	609a      	str	r2, [r3, #8]
	SoftPwmR.iValue = 0;
 8001498:	4b9e      	ldr	r3, [pc, #632]	; (8001714 <main+0x2ec>)
 800149a:	f04f 0200 	mov.w	r2, #0
 800149e:	60da      	str	r2, [r3, #12]
	SoftPwmR.pwmFloatValue = 0;
 80014a0:	4b9c      	ldr	r3, [pc, #624]	; (8001714 <main+0x2ec>)
 80014a2:	f04f 0200 	mov.w	r2, #0
 80014a6:	611a      	str	r2, [r3, #16]
	SoftPwmR.WheelSpeed = 0;
 80014a8:	4b9a      	ldr	r3, [pc, #616]	; (8001714 <main+0x2ec>)
 80014aa:	f04f 0200 	mov.w	r2, #0
 80014ae:	615a      	str	r2, [r3, #20]
	SoftPwmR.reqValueTemp = 0;
 80014b0:	4b98      	ldr	r3, [pc, #608]	; (8001714 <main+0x2ec>)
 80014b2:	f04f 0200 	mov.w	r2, #0
 80014b6:	619a      	str	r2, [r3, #24]
	SoftPwmR.curValue = 0;
 80014b8:	4b96      	ldr	r3, [pc, #600]	; (8001714 <main+0x2ec>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	621a      	str	r2, [r3, #32]
	SoftPwmR.reqValue = 0;
 80014be:	4b95      	ldr	r3, [pc, #596]	; (8001714 <main+0x2ec>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	61da      	str	r2, [r3, #28]
	SoftPwmR.pwmValue = 0;
 80014c4:	4b93      	ldr	r3, [pc, #588]	; (8001714 <main+0x2ec>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	625a      	str	r2, [r3, #36]	; 0x24
	SoftPwmR.status = 0;
 80014ca:	4b92      	ldr	r3, [pc, #584]	; (8001714 <main+0x2ec>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	SoftPwmR.sumVal = 0;
 80014d2:	4b90      	ldr	r3, [pc, #576]	; (8001714 <main+0x2ec>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	62da      	str	r2, [r3, #44]	; 0x2c
	SoftPwmR.pVal = 0;
 80014d8:	4b8e      	ldr	r3, [pc, #568]	; (8001714 <main+0x2ec>)
 80014da:	2200      	movs	r2, #0
 80014dc:	631a      	str	r2, [r3, #48]	; 0x30
	SoftPwmR.iVal = 0;
 80014de:	4b8d      	ldr	r3, [pc, #564]	; (8001714 <main+0x2ec>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	635a      	str	r2, [r3, #52]	; 0x34

	SoftPwmL.errorValue = 0;
 80014e4:	4b8c      	ldr	r3, [pc, #560]	; (8001718 <main+0x2f0>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
	SoftPwmL.sumValue = 0;
 80014ea:	4b8b      	ldr	r3, [pc, #556]	; (8001718 <main+0x2f0>)
 80014ec:	f04f 0200 	mov.w	r2, #0
 80014f0:	605a      	str	r2, [r3, #4]
	SoftPwmL.pValue = 0;
 80014f2:	4b89      	ldr	r3, [pc, #548]	; (8001718 <main+0x2f0>)
 80014f4:	f04f 0200 	mov.w	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]
	SoftPwmL.iValue = 0;
 80014fa:	4b87      	ldr	r3, [pc, #540]	; (8001718 <main+0x2f0>)
 80014fc:	f04f 0200 	mov.w	r2, #0
 8001500:	60da      	str	r2, [r3, #12]
	SoftPwmL.pwmFloatValue = 0;
 8001502:	4b85      	ldr	r3, [pc, #532]	; (8001718 <main+0x2f0>)
 8001504:	f04f 0200 	mov.w	r2, #0
 8001508:	611a      	str	r2, [r3, #16]
	SoftPwmL.WheelSpeed = 0;
 800150a:	4b83      	ldr	r3, [pc, #524]	; (8001718 <main+0x2f0>)
 800150c:	f04f 0200 	mov.w	r2, #0
 8001510:	615a      	str	r2, [r3, #20]
	SoftPwmL.reqValueTemp = 0;
 8001512:	4b81      	ldr	r3, [pc, #516]	; (8001718 <main+0x2f0>)
 8001514:	f04f 0200 	mov.w	r2, #0
 8001518:	619a      	str	r2, [r3, #24]
	SoftPwmL.curValue = 0;
 800151a:	4b7f      	ldr	r3, [pc, #508]	; (8001718 <main+0x2f0>)
 800151c:	2200      	movs	r2, #0
 800151e:	621a      	str	r2, [r3, #32]
	SoftPwmL.reqValue = 0;
 8001520:	4b7d      	ldr	r3, [pc, #500]	; (8001718 <main+0x2f0>)
 8001522:	2200      	movs	r2, #0
 8001524:	61da      	str	r2, [r3, #28]
	SoftPwmL.pwmValue = 0;
 8001526:	4b7c      	ldr	r3, [pc, #496]	; (8001718 <main+0x2f0>)
 8001528:	2200      	movs	r2, #0
 800152a:	625a      	str	r2, [r3, #36]	; 0x24
	SoftPwmL.status = 0;
 800152c:	4b7a      	ldr	r3, [pc, #488]	; (8001718 <main+0x2f0>)
 800152e:	2200      	movs	r2, #0
 8001530:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	SoftPwmL.sumVal = 0;
 8001534:	4b78      	ldr	r3, [pc, #480]	; (8001718 <main+0x2f0>)
 8001536:	2200      	movs	r2, #0
 8001538:	62da      	str	r2, [r3, #44]	; 0x2c
	SoftPwmL.pVal = 0;
 800153a:	4b77      	ldr	r3, [pc, #476]	; (8001718 <main+0x2f0>)
 800153c:	2200      	movs	r2, #0
 800153e:	631a      	str	r2, [r3, #48]	; 0x30
	SoftPwmL.iVal = 0;
 8001540:	4b75      	ldr	r3, [pc, #468]	; (8001718 <main+0x2f0>)
 8001542:	2200      	movs	r2, #0
 8001544:	635a      	str	r2, [r3, #52]	; 0x34

	kToRpm = (1000*60)/10240;
 8001546:	4b75      	ldr	r3, [pc, #468]	; (800171c <main+0x2f4>)
 8001548:	4a75      	ldr	r2, [pc, #468]	; (8001720 <main+0x2f8>)
 800154a:	601a      	str	r2, [r3, #0]

	memset(txBuffer, '\0', sizeof(txBuffer));
 800154c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8001550:	2100      	movs	r1, #0
 8001552:	4874      	ldr	r0, [pc, #464]	; (8001724 <main+0x2fc>)
 8001554:	f00a fc5b 	bl	800be0e <memset>
	memset(rxBuffer, '\0', sizeof(rxBuffer));
 8001558:	f240 12ff 	movw	r2, #511	; 0x1ff
 800155c:	2100      	movs	r1, #0
 800155e:	4872      	ldr	r0, [pc, #456]	; (8001728 <main+0x300>)
 8001560:	f00a fc55 	bl	800be0e <memset>
	rxBufferHead = 0;
 8001564:	4b71      	ldr	r3, [pc, #452]	; (800172c <main+0x304>)
 8001566:	2200      	movs	r2, #0
 8001568:	801a      	strh	r2, [r3, #0]
	memset(rxBufferCopy, '\0', sizeof(rxBufferCopy));
 800156a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800156e:	2100      	movs	r1, #0
 8001570:	486f      	ldr	r0, [pc, #444]	; (8001730 <main+0x308>)
 8001572:	f00a fc4c 	bl	800be0e <memset>

//	joyX = 0;
//	joyY = 0;
	tSpeed = 0;
 8001576:	4b6f      	ldr	r3, [pc, #444]	; (8001734 <main+0x30c>)
 8001578:	f04f 0200 	mov.w	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
	aSpeed = 0;
 800157e:	4b6e      	ldr	r3, [pc, #440]	; (8001738 <main+0x310>)
 8001580:	f04f 0200 	mov.w	r2, #0
 8001584:	601a      	str	r2, [r3, #0]

	memset(accelValueR, '0', sizeof(accelValueR));
 8001586:	2206      	movs	r2, #6
 8001588:	2130      	movs	r1, #48	; 0x30
 800158a:	486c      	ldr	r0, [pc, #432]	; (800173c <main+0x314>)
 800158c:	f00a fc3f 	bl	800be0e <memset>
	memset(accelValueL, '0', sizeof(accelValueL));
 8001590:	2206      	movs	r2, #6
 8001592:	2130      	movs	r1, #48	; 0x30
 8001594:	486a      	ldr	r0, [pc, #424]	; (8001740 <main+0x318>)
 8001596:	f00a fc3a 	bl	800be0e <memset>

	debugVar = 0;
 800159a:	4b6a      	ldr	r3, [pc, #424]	; (8001744 <main+0x31c>)
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
	debugVar2 = 0;
 80015a0:	4b69      	ldr	r3, [pc, #420]	; (8001748 <main+0x320>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]

	cycle_count = 0;
 80015a6:	4b69      	ldr	r3, [pc, #420]	; (800174c <main+0x324>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015ac:	f002 fb76 	bl	8003c9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015b0:	f000 f906 	bl	80017c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015b4:	f000 faca 	bl	8001b4c <MX_GPIO_Init>
  MX_DMA_Init();
 80015b8:	f000 faa2 	bl	8001b00 <MX_DMA_Init>
  MX_ADC1_Init();
 80015bc:	f000 f95e 	bl	800187c <MX_ADC1_Init>
  MX_SPI2_Init();
 80015c0:	f000 f9b8 	bl	8001934 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 80015c4:	f000 fa6c 	bl	8001aa0 <MX_USART3_UART_Init>
  MX_TIM15_Init();
 80015c8:	f000 f9f2 	bl	80019b0 <MX_TIM15_Init>
  MX_TIM17_Init();
 80015cc:	f000 fa42 	bl	8001a54 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  ADC1_configuration();
 80015d0:	f000 fb68 	bl	8001ca4 <ADC1_configuration>
  TIM1_configuration();
 80015d4:	f000 fc38 	bl	8001e48 <TIM1_configuration>
  TIM2_configuration();
 80015d8:	f000 fcac 	bl	8001f34 <TIM2_configuration>
  TIM17_additional_configuration();
 80015dc:	f000 fd58 	bl	8002090 <TIM17_additional_configuration>
  TIM15_additional_configuration();
 80015e0:	f000 fd30 	bl	8002044 <TIM15_additional_configuration>
  USART3_additional_configuration();
 80015e4:	f000 fd6e 	bl	80020c4 <USART3_additional_configuration>

  GPIOA->ODR |= (1<<6); //EN34
 80015e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80015ec:	695b      	ldr	r3, [r3, #20]
 80015ee:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80015f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015f6:	6153      	str	r3, [r2, #20]
  GPIOA->ODR |= (1<<3); //EN12
 80015f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80015fc:	695b      	ldr	r3, [r3, #20]
 80015fe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001602:	f043 0308 	orr.w	r3, r3, #8
 8001606:	6153      	str	r3, [r2, #20]

  DWT->CTRL |= (1<<0);  //Enable cycle counter
 8001608:	4b51      	ldr	r3, [pc, #324]	; (8001750 <main+0x328>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a50      	ldr	r2, [pc, #320]	; (8001750 <main+0x328>)
 800160e:	f043 0301 	orr.w	r3, r3, #1
 8001612:	6013      	str	r3, [r2, #0]
  DWT->CTRL |= (1<<0);  //Enable cycle counter
 8001614:	4b4e      	ldr	r3, [pc, #312]	; (8001750 <main+0x328>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a4d      	ldr	r2, [pc, #308]	; (8001750 <main+0x328>)
 800161a:	f043 0301 	orr.w	r3, r3, #1
 800161e:	6013      	str	r3, [r2, #0]


  pc13EventGroup = xEventGroupCreate();
 8001620:	f007 f8e2 	bl	80087e8 <xEventGroupCreate>
 8001624:	4603      	mov	r3, r0
 8001626:	4a4b      	ldr	r2, [pc, #300]	; (8001754 <main+0x32c>)
 8001628:	6013      	str	r3, [r2, #0]
  pc14EventGroup = xEventGroupCreate();
 800162a:	f007 f8dd 	bl	80087e8 <xEventGroupCreate>
 800162e:	4603      	mov	r3, r0
 8001630:	4a49      	ldr	r2, [pc, #292]	; (8001758 <main+0x330>)
 8001632:	6013      	str	r3, [r2, #0]
  timerFdsEventGroup = xEventGroupCreate();
 8001634:	f007 f8d8 	bl	80087e8 <xEventGroupCreate>
 8001638:	4603      	mov	r3, r0
 800163a:	4a48      	ldr	r2, [pc, #288]	; (800175c <main+0x334>)
 800163c:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  timerForDataSending = xTimerCreate("TimerForDataSending", pdMS_TO_TICKS(211), pdTRUE, 1, timerForSendDataCallback); //211
 800163e:	4b48      	ldr	r3, [pc, #288]	; (8001760 <main+0x338>)
 8001640:	9300      	str	r3, [sp, #0]
 8001642:	2301      	movs	r3, #1
 8001644:	2201      	movs	r2, #1
 8001646:	21d3      	movs	r1, #211	; 0xd3
 8001648:	4846      	ldr	r0, [pc, #280]	; (8001764 <main+0x33c>)
 800164a:	f008 ff23 	bl	800a494 <xTimerCreate>
 800164e:	4603      	mov	r3, r0
 8001650:	4a45      	ldr	r2, [pc, #276]	; (8001768 <main+0x340>)
 8001652:	6013      	str	r3, [r2, #0]
  xTimerStart(timerForDataSending, portMAX_DELAY);
 8001654:	4b44      	ldr	r3, [pc, #272]	; (8001768 <main+0x340>)
 8001656:	681c      	ldr	r4, [r3, #0]
 8001658:	f008 fa2c 	bl	8009ab4 <xTaskGetTickCount>
 800165c:	4602      	mov	r2, r0
 800165e:	f04f 33ff 	mov.w	r3, #4294967295
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	2300      	movs	r3, #0
 8001666:	2101      	movs	r1, #1
 8001668:	4620      	mov	r0, r4
 800166a:	f008 ff67 	bl	800a53c <xTimerGenericCommand>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of PS_Measure */
  osThreadDef(PS_Measure, psMeasure, osPriorityNormal, 0, 96);
 800166e:	4b3f      	ldr	r3, [pc, #252]	; (800176c <main+0x344>)
 8001670:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8001674:	461d      	mov	r5, r3
 8001676:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001678:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800167a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800167e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PS_MeasureHandle = osThreadCreate(osThread(PS_Measure), NULL);
 8001682:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001686:	2100      	movs	r1, #0
 8001688:	4618      	mov	r0, r3
 800168a:	f007 f84d 	bl	8008728 <osThreadCreate>
 800168e:	4603      	mov	r3, r0
 8001690:	4a37      	ldr	r2, [pc, #220]	; (8001770 <main+0x348>)
 8001692:	6013      	str	r3, [r2, #0]

  /* definition and creation of PC_13_LED */
  osThreadDef(PC_13_LED, pc13LedCntrl, osPriorityNormal, 0, 96);
 8001694:	4b37      	ldr	r3, [pc, #220]	; (8001774 <main+0x34c>)
 8001696:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800169a:	461d      	mov	r5, r3
 800169c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800169e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PC_13_LEDHandle = osThreadCreate(osThread(PC_13_LED), NULL);
 80016a8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80016ac:	2100      	movs	r1, #0
 80016ae:	4618      	mov	r0, r3
 80016b0:	f007 f83a 	bl	8008728 <osThreadCreate>
 80016b4:	4603      	mov	r3, r0
 80016b6:	4a30      	ldr	r2, [pc, #192]	; (8001778 <main+0x350>)
 80016b8:	6013      	str	r3, [r2, #0]

  /* definition and creation of PC_14_LED */
  osThreadDef(PC_14_LED, pc14LedCntrl, osPriorityNormal, 0, 96);
 80016ba:	4b30      	ldr	r3, [pc, #192]	; (800177c <main+0x354>)
 80016bc:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80016c0:	461d      	mov	r5, r3
 80016c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PC_14_LEDHandle = osThreadCreate(osThread(PC_14_LED), NULL);
 80016ce:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80016d2:	2100      	movs	r1, #0
 80016d4:	4618      	mov	r0, r3
 80016d6:	f007 f827 	bl	8008728 <osThreadCreate>
 80016da:	4603      	mov	r3, r0
 80016dc:	4a28      	ldr	r2, [pc, #160]	; (8001780 <main+0x358>)
 80016de:	6013      	str	r3, [r2, #0]

  /* definition and creation of EspCommunication */
  osThreadDef(EspCommunication, espCommunication, osPriorityAboveNormal, 0, 256);
 80016e0:	4b28      	ldr	r3, [pc, #160]	; (8001784 <main+0x35c>)
 80016e2:	f107 0420 	add.w	r4, r7, #32
 80016e6:	461d      	mov	r5, r3
 80016e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EspCommunicationHandle = osThreadCreate(osThread(EspCommunication), NULL);
 80016f4:	f107 0320 	add.w	r3, r7, #32
 80016f8:	2100      	movs	r1, #0
 80016fa:	4618      	mov	r0, r3
 80016fc:	f007 f814 	bl	8008728 <osThreadCreate>
 8001700:	4603      	mov	r3, r0
 8001702:	e041      	b.n	8001788 <main+0x360>
 8001704:	200009b8 	.word	0x200009b8
 8001708:	200009ba 	.word	0x200009ba
 800170c:	200009c4 	.word	0x200009c4
 8001710:	200009e0 	.word	0x200009e0
 8001714:	200009fc 	.word	0x200009fc
 8001718:	20000a34 	.word	0x20000a34
 800171c:	20000a6c 	.word	0x20000a6c
 8001720:	40a00000 	.word	0x40a00000
 8001724:	20000a70 	.word	0x20000a70
 8001728:	20000c70 	.word	0x20000c70
 800172c:	20000e70 	.word	0x20000e70
 8001730:	20000e74 	.word	0x20000e74
 8001734:	20000f7c 	.word	0x20000f7c
 8001738:	20000f80 	.word	0x20000f80
 800173c:	20000f84 	.word	0x20000f84
 8001740:	20000f8c 	.word	0x20000f8c
 8001744:	20000f94 	.word	0x20000f94
 8001748:	20000f98 	.word	0x20000f98
 800174c:	20000f9c 	.word	0x20000f9c
 8001750:	e0001000 	.word	0xe0001000
 8001754:	200009bc 	.word	0x200009bc
 8001758:	200009c0 	.word	0x200009c0
 800175c:	20000f78 	.word	0x20000f78
 8001760:	080021f1 	.word	0x080021f1
 8001764:	0800ef00 	.word	0x0800ef00
 8001768:	20000f74 	.word	0x20000f74
 800176c:	0800ef20 	.word	0x0800ef20
 8001770:	20000990 	.word	0x20000990
 8001774:	0800ef48 	.word	0x0800ef48
 8001778:	20000994 	.word	0x20000994
 800177c:	0800ef70 	.word	0x0800ef70
 8001780:	20000998 	.word	0x20000998
 8001784:	0800efa0 	.word	0x0800efa0
 8001788:	4a0a      	ldr	r2, [pc, #40]	; (80017b4 <main+0x38c>)
 800178a:	6013      	str	r3, [r2, #0]

  /* definition and creation of Accelerometer */
  osThreadDef(Accelerometer, accelerometer, osPriorityNormal, 0, 96);
 800178c:	4b0a      	ldr	r3, [pc, #40]	; (80017b8 <main+0x390>)
 800178e:	1d3c      	adds	r4, r7, #4
 8001790:	461d      	mov	r5, r3
 8001792:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001794:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001796:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800179a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  AccelerometerHandle = osThreadCreate(osThread(Accelerometer), NULL);
 800179e:	1d3b      	adds	r3, r7, #4
 80017a0:	2100      	movs	r1, #0
 80017a2:	4618      	mov	r0, r3
 80017a4:	f006 ffc0 	bl	8008728 <osThreadCreate>
 80017a8:	4603      	mov	r3, r0
 80017aa:	4a04      	ldr	r2, [pc, #16]	; (80017bc <main+0x394>)
 80017ac:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80017ae:	f006 ffb4 	bl	800871a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80017b2:	e7fe      	b.n	80017b2 <main+0x38a>
 80017b4:	2000099c 	.word	0x2000099c
 80017b8:	0800efcc 	.word	0x0800efcc
 80017bc:	200009a0 	.word	0x200009a0

080017c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b09c      	sub	sp, #112	; 0x70
 80017c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017ca:	2228      	movs	r2, #40	; 0x28
 80017cc:	2100      	movs	r1, #0
 80017ce:	4618      	mov	r0, r3
 80017d0:	f00a fb1d 	bl	800be0e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	60da      	str	r2, [r3, #12]
 80017e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017e4:	1d3b      	adds	r3, r7, #4
 80017e6:	2230      	movs	r2, #48	; 0x30
 80017e8:	2100      	movs	r1, #0
 80017ea:	4618      	mov	r0, r3
 80017ec:	f00a fb0f 	bl	800be0e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017f0:	2302      	movs	r3, #2
 80017f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017f4:	2301      	movs	r3, #1
 80017f6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017f8:	2310      	movs	r3, #16
 80017fa:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017fc:	2302      	movs	r3, #2
 80017fe:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001800:	2300      	movs	r3, #0
 8001802:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001804:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001808:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800180a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800180e:	4618      	mov	r0, r3
 8001810:	f003 fad6 	bl	8004dc0 <HAL_RCC_OscConfig>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800181a:	f001 fafb 	bl	8002e14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800181e:	230f      	movs	r3, #15
 8001820:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001822:	2302      	movs	r3, #2
 8001824:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001826:	2300      	movs	r3, #0
 8001828:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800182a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800182e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001830:	2300      	movs	r3, #0
 8001832:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001834:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001838:	2102      	movs	r1, #2
 800183a:	4618      	mov	r0, r3
 800183c:	f004 fafe 	bl	8005e3c <HAL_RCC_ClockConfig>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001846:	f001 fae5 	bl	8002e14 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM15|RCC_PERIPHCLK_TIM17
 800184a:	4b0b      	ldr	r3, [pc, #44]	; (8001878 <SystemClock_Config+0xb8>)
 800184c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC1;
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 800184e:	2300      	movs	r3, #0
 8001850:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
 8001852:	2300      	movs	r3, #0
 8001854:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV2;
 8001856:	f44f 7388 	mov.w	r3, #272	; 0x110
 800185a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800185c:	1d3b      	adds	r3, r7, #4
 800185e:	4618      	mov	r0, r3
 8001860:	f004 fd54 	bl	800630c <HAL_RCCEx_PeriphCLKConfig>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800186a:	f001 fad3 	bl	8002e14 <Error_Handler>
  }
}
 800186e:	bf00      	nop
 8001870:	3770      	adds	r7, #112	; 0x70
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	00140080 	.word	0x00140080

0800187c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001882:	463b      	mov	r3, r7
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	611a      	str	r2, [r3, #16]
 8001890:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001892:	4b27      	ldr	r3, [pc, #156]	; (8001930 <MX_ADC1_Init+0xb4>)
 8001894:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001898:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800189a:	4b25      	ldr	r3, [pc, #148]	; (8001930 <MX_ADC1_Init+0xb4>)
 800189c:	2200      	movs	r2, #0
 800189e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80018a0:	4b23      	ldr	r3, [pc, #140]	; (8001930 <MX_ADC1_Init+0xb4>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80018a6:	4b22      	ldr	r3, [pc, #136]	; (8001930 <MX_ADC1_Init+0xb4>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80018ac:	4b20      	ldr	r3, [pc, #128]	; (8001930 <MX_ADC1_Init+0xb4>)
 80018ae:	2201      	movs	r2, #1
 80018b0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018b2:	4b1f      	ldr	r3, [pc, #124]	; (8001930 <MX_ADC1_Init+0xb4>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018ba:	4b1d      	ldr	r3, [pc, #116]	; (8001930 <MX_ADC1_Init+0xb4>)
 80018bc:	2200      	movs	r2, #0
 80018be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018c0:	4b1b      	ldr	r3, [pc, #108]	; (8001930 <MX_ADC1_Init+0xb4>)
 80018c2:	2201      	movs	r2, #1
 80018c4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018c6:	4b1a      	ldr	r3, [pc, #104]	; (8001930 <MX_ADC1_Init+0xb4>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80018cc:	4b18      	ldr	r3, [pc, #96]	; (8001930 <MX_ADC1_Init+0xb4>)
 80018ce:	2201      	movs	r2, #1
 80018d0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80018d2:	4b17      	ldr	r3, [pc, #92]	; (8001930 <MX_ADC1_Init+0xb4>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018da:	4b15      	ldr	r3, [pc, #84]	; (8001930 <MX_ADC1_Init+0xb4>)
 80018dc:	2204      	movs	r2, #4
 80018de:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80018e0:	4b13      	ldr	r3, [pc, #76]	; (8001930 <MX_ADC1_Init+0xb4>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80018e6:	4b12      	ldr	r3, [pc, #72]	; (8001930 <MX_ADC1_Init+0xb4>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018ec:	4810      	ldr	r0, [pc, #64]	; (8001930 <MX_ADC1_Init+0xb4>)
 80018ee:	f002 fa2f 	bl	8003d50 <HAL_ADC_Init>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 80018f8:	f001 fa8c 	bl	8002e14 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80018fc:	2303      	movs	r3, #3
 80018fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001900:	2301      	movs	r3, #1
 8001902:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001904:	2300      	movs	r3, #0
 8001906:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001908:	2300      	movs	r3, #0
 800190a:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800190c:	2300      	movs	r3, #0
 800190e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001914:	463b      	mov	r3, r7
 8001916:	4619      	mov	r1, r3
 8001918:	4805      	ldr	r0, [pc, #20]	; (8001930 <MX_ADC1_Init+0xb4>)
 800191a:	f002 fb9f 	bl	800405c <HAL_ADC_ConfigChannel>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001924:	f001 fa76 	bl	8002e14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001928:	bf00      	nop
 800192a:	3718      	adds	r7, #24
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	20000734 	.word	0x20000734

08001934 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001938:	4b1b      	ldr	r3, [pc, #108]	; (80019a8 <MX_SPI2_Init+0x74>)
 800193a:	4a1c      	ldr	r2, [pc, #112]	; (80019ac <MX_SPI2_Init+0x78>)
 800193c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800193e:	4b1a      	ldr	r3, [pc, #104]	; (80019a8 <MX_SPI2_Init+0x74>)
 8001940:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001944:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8001946:	4b18      	ldr	r3, [pc, #96]	; (80019a8 <MX_SPI2_Init+0x74>)
 8001948:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800194c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800194e:	4b16      	ldr	r3, [pc, #88]	; (80019a8 <MX_SPI2_Init+0x74>)
 8001950:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001954:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001956:	4b14      	ldr	r3, [pc, #80]	; (80019a8 <MX_SPI2_Init+0x74>)
 8001958:	2202      	movs	r2, #2
 800195a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800195c:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <MX_SPI2_Init+0x74>)
 800195e:	2201      	movs	r2, #1
 8001960:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001962:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <MX_SPI2_Init+0x74>)
 8001964:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001968:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800196a:	4b0f      	ldr	r3, [pc, #60]	; (80019a8 <MX_SPI2_Init+0x74>)
 800196c:	2220      	movs	r2, #32
 800196e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001970:	4b0d      	ldr	r3, [pc, #52]	; (80019a8 <MX_SPI2_Init+0x74>)
 8001972:	2200      	movs	r2, #0
 8001974:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001976:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <MX_SPI2_Init+0x74>)
 8001978:	2200      	movs	r2, #0
 800197a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800197c:	4b0a      	ldr	r3, [pc, #40]	; (80019a8 <MX_SPI2_Init+0x74>)
 800197e:	2200      	movs	r2, #0
 8001980:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001982:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <MX_SPI2_Init+0x74>)
 8001984:	2207      	movs	r2, #7
 8001986:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001988:	4b07      	ldr	r3, [pc, #28]	; (80019a8 <MX_SPI2_Init+0x74>)
 800198a:	2200      	movs	r2, #0
 800198c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800198e:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <MX_SPI2_Init+0x74>)
 8001990:	2200      	movs	r2, #0
 8001992:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001994:	4804      	ldr	r0, [pc, #16]	; (80019a8 <MX_SPI2_Init+0x74>)
 8001996:	f004 fe3d 	bl	8006614 <HAL_SPI_Init>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 80019a0:	f001 fa38 	bl	8002e14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80019a4:	bf00      	nop
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20000784 	.word	0x20000784
 80019ac:	40003800 	.word	0x40003800

080019b0 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b088      	sub	sp, #32
 80019b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019b6:	f107 0310 	add.w	r3, r7, #16
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	605a      	str	r2, [r3, #4]
 80019c0:	609a      	str	r2, [r3, #8]
 80019c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019c4:	1d3b      	adds	r3, r7, #4
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	605a      	str	r2, [r3, #4]
 80019cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80019ce:	4b1f      	ldr	r3, [pc, #124]	; (8001a4c <MX_TIM15_Init+0x9c>)
 80019d0:	4a1f      	ldr	r2, [pc, #124]	; (8001a50 <MX_TIM15_Init+0xa0>)
 80019d2:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 10;
 80019d4:	4b1d      	ldr	r3, [pc, #116]	; (8001a4c <MX_TIM15_Init+0x9c>)
 80019d6:	220a      	movs	r2, #10
 80019d8:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019da:	4b1c      	ldr	r3, [pc, #112]	; (8001a4c <MX_TIM15_Init+0x9c>)
 80019dc:	2200      	movs	r2, #0
 80019de:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 400;
 80019e0:	4b1a      	ldr	r3, [pc, #104]	; (8001a4c <MX_TIM15_Init+0x9c>)
 80019e2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80019e6:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019e8:	4b18      	ldr	r3, [pc, #96]	; (8001a4c <MX_TIM15_Init+0x9c>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80019ee:	4b17      	ldr	r3, [pc, #92]	; (8001a4c <MX_TIM15_Init+0x9c>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019f4:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <MX_TIM15_Init+0x9c>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80019fa:	4814      	ldr	r0, [pc, #80]	; (8001a4c <MX_TIM15_Init+0x9c>)
 80019fc:	f005 fd40 	bl	8007480 <HAL_TIM_Base_Init>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8001a06:	f001 fa05 	bl	8002e14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a0e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001a10:	f107 0310 	add.w	r3, r7, #16
 8001a14:	4619      	mov	r1, r3
 8001a16:	480d      	ldr	r0, [pc, #52]	; (8001a4c <MX_TIM15_Init+0x9c>)
 8001a18:	f005 fefd 	bl	8007816 <HAL_TIM_ConfigClockSource>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8001a22:	f001 f9f7 	bl	8002e14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a26:	2300      	movs	r3, #0
 8001a28:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001a2e:	1d3b      	adds	r3, r7, #4
 8001a30:	4619      	mov	r1, r3
 8001a32:	4806      	ldr	r0, [pc, #24]	; (8001a4c <MX_TIM15_Init+0x9c>)
 8001a34:	f006 f8e8 	bl	8007c08 <HAL_TIMEx_MasterConfigSynchronization>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8001a3e:	f001 f9e9 	bl	8002e14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001a42:	bf00      	nop
 8001a44:	3720      	adds	r7, #32
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	200007e8 	.word	0x200007e8
 8001a50:	40014000 	.word	0x40014000

08001a54 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001a58:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <MX_TIM17_Init+0x44>)
 8001a5a:	4a10      	ldr	r2, [pc, #64]	; (8001a9c <MX_TIM17_Init+0x48>)
 8001a5c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 639;
 8001a5e:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <MX_TIM17_Init+0x44>)
 8001a60:	f240 227f 	movw	r2, #639	; 0x27f
 8001a64:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a66:	4b0c      	ldr	r3, [pc, #48]	; (8001a98 <MX_TIM17_Init+0x44>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 100;
 8001a6c:	4b0a      	ldr	r3, [pc, #40]	; (8001a98 <MX_TIM17_Init+0x44>)
 8001a6e:	2264      	movs	r2, #100	; 0x64
 8001a70:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a72:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <MX_TIM17_Init+0x44>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001a78:	4b07      	ldr	r3, [pc, #28]	; (8001a98 <MX_TIM17_Init+0x44>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a7e:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <MX_TIM17_Init+0x44>)
 8001a80:	2280      	movs	r2, #128	; 0x80
 8001a82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001a84:	4804      	ldr	r0, [pc, #16]	; (8001a98 <MX_TIM17_Init+0x44>)
 8001a86:	f005 fcfb 	bl	8007480 <HAL_TIM_Base_Init>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8001a90:	f001 f9c0 	bl	8002e14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001a94:	bf00      	nop
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	20000834 	.word	0x20000834
 8001a9c:	40014800 	.word	0x40014800

08001aa0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001aa4:	4b14      	ldr	r3, [pc, #80]	; (8001af8 <MX_USART3_UART_Init+0x58>)
 8001aa6:	4a15      	ldr	r2, [pc, #84]	; (8001afc <MX_USART3_UART_Init+0x5c>)
 8001aa8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 8001aaa:	4b13      	ldr	r3, [pc, #76]	; (8001af8 <MX_USART3_UART_Init+0x58>)
 8001aac:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001ab0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ab2:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <MX_USART3_UART_Init+0x58>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ab8:	4b0f      	ldr	r3, [pc, #60]	; (8001af8 <MX_USART3_UART_Init+0x58>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001abe:	4b0e      	ldr	r3, [pc, #56]	; (8001af8 <MX_USART3_UART_Init+0x58>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ac4:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <MX_USART3_UART_Init+0x58>)
 8001ac6:	220c      	movs	r2, #12
 8001ac8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aca:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <MX_USART3_UART_Init+0x58>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ad0:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <MX_USART3_UART_Init+0x58>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ad6:	4b08      	ldr	r3, [pc, #32]	; (8001af8 <MX_USART3_UART_Init+0x58>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001adc:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <MX_USART3_UART_Init+0x58>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ae2:	4805      	ldr	r0, [pc, #20]	; (8001af8 <MX_USART3_UART_Init+0x58>)
 8001ae4:	f006 f914 	bl	8007d10 <HAL_UART_Init>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001aee:	f001 f991 	bl	8002e14 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20000880 	.word	0x20000880
 8001afc:	40004800 	.word	0x40004800

08001b00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b06:	4b10      	ldr	r3, [pc, #64]	; (8001b48 <MX_DMA_Init+0x48>)
 8001b08:	695b      	ldr	r3, [r3, #20]
 8001b0a:	4a0f      	ldr	r2, [pc, #60]	; (8001b48 <MX_DMA_Init+0x48>)
 8001b0c:	f043 0301 	orr.w	r3, r3, #1
 8001b10:	6153      	str	r3, [r2, #20]
 8001b12:	4b0d      	ldr	r3, [pc, #52]	; (8001b48 <MX_DMA_Init+0x48>)
 8001b14:	695b      	ldr	r3, [r3, #20]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	607b      	str	r3, [r7, #4]
 8001b1c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001b1e:	2200      	movs	r2, #0
 8001b20:	2105      	movs	r1, #5
 8001b22:	200c      	movs	r0, #12
 8001b24:	f002 fe6a 	bl	80047fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001b28:	200c      	movs	r0, #12
 8001b2a:	f002 fe83 	bl	8004834 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8001b2e:	2200      	movs	r2, #0
 8001b30:	2105      	movs	r1, #5
 8001b32:	200d      	movs	r0, #13
 8001b34:	f002 fe62 	bl	80047fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001b38:	200d      	movs	r0, #13
 8001b3a:	f002 fe7b 	bl	8004834 <HAL_NVIC_EnableIRQ>

}
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40021000 	.word	0x40021000

08001b4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b088      	sub	sp, #32
 8001b50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b52:	f107 030c 	add.w	r3, r7, #12
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	605a      	str	r2, [r3, #4]
 8001b5c:	609a      	str	r2, [r3, #8]
 8001b5e:	60da      	str	r2, [r3, #12]
 8001b60:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b62:	4b4d      	ldr	r3, [pc, #308]	; (8001c98 <MX_GPIO_Init+0x14c>)
 8001b64:	695b      	ldr	r3, [r3, #20]
 8001b66:	4a4c      	ldr	r2, [pc, #304]	; (8001c98 <MX_GPIO_Init+0x14c>)
 8001b68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001b6c:	6153      	str	r3, [r2, #20]
 8001b6e:	4b4a      	ldr	r3, [pc, #296]	; (8001c98 <MX_GPIO_Init+0x14c>)
 8001b70:	695b      	ldr	r3, [r3, #20]
 8001b72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b76:	60bb      	str	r3, [r7, #8]
 8001b78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7a:	4b47      	ldr	r3, [pc, #284]	; (8001c98 <MX_GPIO_Init+0x14c>)
 8001b7c:	695b      	ldr	r3, [r3, #20]
 8001b7e:	4a46      	ldr	r2, [pc, #280]	; (8001c98 <MX_GPIO_Init+0x14c>)
 8001b80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b84:	6153      	str	r3, [r2, #20]
 8001b86:	4b44      	ldr	r3, [pc, #272]	; (8001c98 <MX_GPIO_Init+0x14c>)
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8e:	607b      	str	r3, [r7, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b92:	4b41      	ldr	r3, [pc, #260]	; (8001c98 <MX_GPIO_Init+0x14c>)
 8001b94:	695b      	ldr	r3, [r3, #20]
 8001b96:	4a40      	ldr	r2, [pc, #256]	; (8001c98 <MX_GPIO_Init+0x14c>)
 8001b98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b9c:	6153      	str	r3, [r2, #20]
 8001b9e:	4b3e      	ldr	r3, [pc, #248]	; (8001c98 <MX_GPIO_Init+0x14c>)
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ba6:	603b      	str	r3, [r7, #0]
 8001ba8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001baa:	2200      	movs	r2, #0
 8001bac:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001bb0:	483a      	ldr	r0, [pc, #232]	; (8001c9c <MX_GPIO_Init+0x150>)
 8001bb2:	f003 f8c9 	bl	8004d48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN12_Pin|_1A_Pin|_2A_Pin|EN34_Pin
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	21f8      	movs	r1, #248	; 0xf8
 8001bba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bbe:	f003 f8c3 	bl	8004d48 <HAL_GPIO_WritePin>
                          |_3A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, _4A_Pin|RST_ESP_Pin|EN_ESP_Pin|SPI2_CS_L_Pin
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f245 0107 	movw	r1, #20487	; 0x5007
 8001bc8:	4835      	ldr	r0, [pc, #212]	; (8001ca0 <MX_GPIO_Init+0x154>)
 8001bca:	f003 f8bd 	bl	8004d48 <HAL_GPIO_WritePin>
                          |SPI2_CS_R_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001bce:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001bd2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001be0:	f107 030c 	add.w	r3, r7, #12
 8001be4:	4619      	mov	r1, r3
 8001be6:	482d      	ldr	r0, [pc, #180]	; (8001c9c <MX_GPIO_Init+0x150>)
 8001be8:	f002 ff3c 	bl	8004a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN12_Pin _1A_Pin _2A_Pin EN34_Pin
                           _3A_Pin */
  GPIO_InitStruct.Pin = EN12_Pin|_1A_Pin|_2A_Pin|EN34_Pin
 8001bec:	23f8      	movs	r3, #248	; 0xf8
 8001bee:	60fb      	str	r3, [r7, #12]
                          |_3A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bfc:	f107 030c 	add.w	r3, r7, #12
 8001c00:	4619      	mov	r1, r3
 8001c02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c06:	f002 ff2d 	bl	8004a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : _4A_Pin */
  GPIO_InitStruct.Pin = _4A_Pin;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c16:	2303      	movs	r3, #3
 8001c18:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(_4A_GPIO_Port, &GPIO_InitStruct);
 8001c1a:	f107 030c 	add.w	r3, r7, #12
 8001c1e:	4619      	mov	r1, r3
 8001c20:	481f      	ldr	r0, [pc, #124]	; (8001ca0 <MX_GPIO_Init+0x154>)
 8001c22:	f002 ff1f 	bl	8004a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : RST_ESP_Pin EN_ESP_Pin */
  GPIO_InitStruct.Pin = RST_ESP_Pin|EN_ESP_Pin;
 8001c26:	2306      	movs	r3, #6
 8001c28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c32:	2300      	movs	r3, #0
 8001c34:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c36:	f107 030c 	add.w	r3, r7, #12
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4818      	ldr	r0, [pc, #96]	; (8001ca0 <MX_GPIO_Init+0x154>)
 8001c3e:	f002 ff11 	bl	8004a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_CS_L_Pin SPI2_CS_R_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_L_Pin|SPI2_CS_R_Pin;
 8001c42:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001c46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001c50:	2301      	movs	r3, #1
 8001c52:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c54:	f107 030c 	add.w	r3, r7, #12
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4811      	ldr	r0, [pc, #68]	; (8001ca0 <MX_GPIO_Init+0x154>)
 8001c5c:	f002 ff02 	bl	8004a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001c60:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c66:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c70:	f107 030c 	add.w	r3, r7, #12
 8001c74:	4619      	mov	r1, r3
 8001c76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c7a:	f002 fef3 	bl	8004a64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001c7e:	2200      	movs	r2, #0
 8001c80:	2105      	movs	r1, #5
 8001c82:	2028      	movs	r0, #40	; 0x28
 8001c84:	f002 fdba 	bl	80047fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c88:	2028      	movs	r0, #40	; 0x28
 8001c8a:	f002 fdd3 	bl	8004834 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c8e:	bf00      	nop
 8001c90:	3720      	adds	r7, #32
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	48000800 	.word	0x48000800
 8001ca0:	48000400 	.word	0x48000400

08001ca4 <ADC1_configuration>:

/* USER CODE BEGIN 4 */
void ADC1_configuration(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
	//NVIC configuration
	NVIC->IP[11] |= 0x70; //Priority 7
 8001ca8:	4b62      	ldr	r3, [pc, #392]	; (8001e34 <ADC1_configuration+0x190>)
 8001caa:	f893 330b 	ldrb.w	r3, [r3, #779]	; 0x30b
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	4a60      	ldr	r2, [pc, #384]	; (8001e34 <ADC1_configuration+0x190>)
 8001cb2:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	f882 330b 	strb.w	r3, [r2, #779]	; 0x30b
//	NVIC->ISER[0] |= (1<<11); //Enable DMA1 channel 1 interrupt
	NVIC->IP[18] |= 0x70; //Priority 7
 8001cbc:	4b5d      	ldr	r3, [pc, #372]	; (8001e34 <ADC1_configuration+0x190>)
 8001cbe:	f893 3312 	ldrb.w	r3, [r3, #786]	; 0x312
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	4a5b      	ldr	r2, [pc, #364]	; (8001e34 <ADC1_configuration+0x190>)
 8001cc6:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	f882 3312 	strb.w	r3, [r2, #786]	; 0x312
//	NVIC->ISER[0] |= (1<<18); //Enable ADC1 global interrupt
	//DMA configuration for ADC1
	RCC->AHBENR |= RCC_AHBENR_DMA1EN; // Enable the DMA1 clock
 8001cd0:	4b59      	ldr	r3, [pc, #356]	; (8001e38 <ADC1_configuration+0x194>)
 8001cd2:	695b      	ldr	r3, [r3, #20]
 8001cd4:	4a58      	ldr	r2, [pc, #352]	; (8001e38 <ADC1_configuration+0x194>)
 8001cd6:	f043 0301 	orr.w	r3, r3, #1
 8001cda:	6153      	str	r3, [r2, #20]
	DMA1_Channel1->CCR &= ~DMA_CCR_EN;
 8001cdc:	4b57      	ldr	r3, [pc, #348]	; (8001e3c <ADC1_configuration+0x198>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a56      	ldr	r2, [pc, #344]	; (8001e3c <ADC1_configuration+0x198>)
 8001ce2:	f023 0301 	bic.w	r3, r3, #1
 8001ce6:	6013      	str	r3, [r2, #0]

	DMA1_Channel1->CCR |= (1<<10); // Bits 11:10 MSIZE[1:0]: Memory size  01: 16-bits
 8001ce8:	4b54      	ldr	r3, [pc, #336]	; (8001e3c <ADC1_configuration+0x198>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a53      	ldr	r2, [pc, #332]	; (8001e3c <ADC1_configuration+0x198>)
 8001cee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cf2:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= (1<<8); // Bits 9:8 PSIZE[1:0]: Peripheral size  01: 16-bits
 8001cf4:	4b51      	ldr	r3, [pc, #324]	; (8001e3c <ADC1_configuration+0x198>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a50      	ldr	r2, [pc, #320]	; (8001e3c <ADC1_configuration+0x198>)
 8001cfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cfe:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= DMA_CCR_MINC;
 8001d00:	4b4e      	ldr	r3, [pc, #312]	; (8001e3c <ADC1_configuration+0x198>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a4d      	ldr	r2, [pc, #308]	; (8001e3c <ADC1_configuration+0x198>)
 8001d06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d0a:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= DMA_CCR_CIRC;
 8001d0c:	4b4b      	ldr	r3, [pc, #300]	; (8001e3c <ADC1_configuration+0x198>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a4a      	ldr	r2, [pc, #296]	; (8001e3c <ADC1_configuration+0x198>)
 8001d12:	f043 0320 	orr.w	r3, r3, #32
 8001d16:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= DMA_CCR_TCIE;
 8001d18:	4b48      	ldr	r3, [pc, #288]	; (8001e3c <ADC1_configuration+0x198>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a47      	ldr	r2, [pc, #284]	; (8001e3c <ADC1_configuration+0x198>)
 8001d1e:	f043 0302 	orr.w	r3, r3, #2
 8001d22:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR &= ~DMA_CCR_HTIE;
 8001d24:	4b45      	ldr	r3, [pc, #276]	; (8001e3c <ADC1_configuration+0x198>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a44      	ldr	r2, [pc, #272]	; (8001e3c <ADC1_configuration+0x198>)
 8001d2a:	f023 0304 	bic.w	r3, r3, #4
 8001d2e:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR &= ~DMA_CCR_TEIE;
 8001d30:	4b42      	ldr	r3, [pc, #264]	; (8001e3c <ADC1_configuration+0x198>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a41      	ldr	r2, [pc, #260]	; (8001e3c <ADC1_configuration+0x198>)
 8001d36:	f023 0308 	bic.w	r3, r3, #8
 8001d3a:	6013      	str	r3, [r2, #0]

	DMA1_Channel1->CNDTR = 10;
 8001d3c:	4b3f      	ldr	r3, [pc, #252]	; (8001e3c <ADC1_configuration+0x198>)
 8001d3e:	220a      	movs	r2, #10
 8001d40:	605a      	str	r2, [r3, #4]
	DMA1_Channel1->CPAR = (uint32_t)&(ADC1->DR);
 8001d42:	4b3e      	ldr	r3, [pc, #248]	; (8001e3c <ADC1_configuration+0x198>)
 8001d44:	4a3e      	ldr	r2, [pc, #248]	; (8001e40 <ADC1_configuration+0x19c>)
 8001d46:	609a      	str	r2, [r3, #8]
	DMA1_Channel1->CMAR = (uint32_t)&batteryVoltage[0];
 8001d48:	4b3c      	ldr	r3, [pc, #240]	; (8001e3c <ADC1_configuration+0x198>)
 8001d4a:	4a3e      	ldr	r2, [pc, #248]	; (8001e44 <ADC1_configuration+0x1a0>)
 8001d4c:	60da      	str	r2, [r3, #12]
//	ADC1->CR |= ADC_CR_ADEN;
//	while((ADC1->ISR & ADC_ISR_ADRDY) != ADC_ISR_ADRDY) __asm__ volatile("NOP");
//	ADC1->CR |= ADC_CR_ADSTART;
//	HAL_Delay(20);
//	DMA1_Channel1->CCR |= DMA_CCR_EN;
	__asm__ volatile("NOP");
 8001d4e:	bf00      	nop
	if(batteryVoltage[0] == 0) {
 8001d50:	4b3c      	ldr	r3, [pc, #240]	; (8001e44 <ADC1_configuration+0x1a0>)
 8001d52:	881b      	ldrh	r3, [r3, #0]
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d16a      	bne.n	8001e30 <ADC1_configuration+0x18c>
		if((ADC1->CR & ADC_CR_ADEN) == ADC_CR_ADEN) {
 8001d5a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f003 0301 	and.w	r3, r3, #1
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d12d      	bne.n	8001dc4 <ADC1_configuration+0x120>
			DMA1_Channel1->CCR &= ~DMA_CCR_EN;
 8001d68:	4b34      	ldr	r3, [pc, #208]	; (8001e3c <ADC1_configuration+0x198>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a33      	ldr	r2, [pc, #204]	; (8001e3c <ADC1_configuration+0x198>)
 8001d6e:	f023 0301 	bic.w	r3, r3, #1
 8001d72:	6013      	str	r3, [r2, #0]
			ADC1->CR |= ADC_CR_ADSTP;
 8001d74:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001d7e:	f043 0310 	orr.w	r3, r3, #16
 8001d82:	6093      	str	r3, [r2, #8]
			while((ADC1->CR & ADC_CR_ADSTP) == ADC_CR_ADSTP) __asm__ volatile("NOP");
 8001d84:	e000      	b.n	8001d88 <ADC1_configuration+0xe4>
 8001d86:	bf00      	nop
 8001d88:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f003 0310 	and.w	r3, r3, #16
 8001d92:	2b10      	cmp	r3, #16
 8001d94:	d0f7      	beq.n	8001d86 <ADC1_configuration+0xe2>
			HAL_Delay(5);
 8001d96:	2005      	movs	r0, #5
 8001d98:	f001 ffb6 	bl	8003d08 <HAL_Delay>
			ADC1->CR |= ADC_CR_ADDIS;
 8001d9c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001da6:	f043 0302 	orr.w	r3, r3, #2
 8001daa:	6093      	str	r3, [r2, #8]
			while((ADC1->CR & ADC_CR_ADDIS) == ADC_CR_ADDIS) __asm__ volatile("NOP");
 8001dac:	e000      	b.n	8001db0 <ADC1_configuration+0x10c>
 8001dae:	bf00      	nop
 8001db0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d0f7      	beq.n	8001dae <ADC1_configuration+0x10a>
			HAL_Delay(20);
 8001dbe:	2014      	movs	r0, #20
 8001dc0:	f001 ffa2 	bl	8003d08 <HAL_Delay>
		}
		MX_ADC1_Init();
 8001dc4:	f7ff fd5a 	bl	800187c <MX_ADC1_Init>
		ADC1->CFGR |= ADC_CFGR_DMACFG;
 8001dc8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001dd2:	f043 0302 	orr.w	r3, r3, #2
 8001dd6:	60d3      	str	r3, [r2, #12]
		ADC1->CFGR |= ADC_CFGR_DMAEN;
 8001dd8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	60d3      	str	r3, [r2, #12]
		ADC1->CR |= ADC_CR_ADEN;
 8001de8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001df2:	f043 0301 	orr.w	r3, r3, #1
 8001df6:	6093      	str	r3, [r2, #8]
		while((ADC1->ISR & ADC_ISR_ADRDY) != ADC_ISR_ADRDY) __asm__ volatile("NOP");
 8001df8:	e000      	b.n	8001dfc <ADC1_configuration+0x158>
 8001dfa:	bf00      	nop
 8001dfc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d1f7      	bne.n	8001dfa <ADC1_configuration+0x156>
		ADC1->CR |= ADC_CR_ADSTART;
 8001e0a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001e14:	f043 0304 	orr.w	r3, r3, #4
 8001e18:	6093      	str	r3, [r2, #8]
		HAL_Delay(20);
 8001e1a:	2014      	movs	r0, #20
 8001e1c:	f001 ff74 	bl	8003d08 <HAL_Delay>
		DMA1_Channel1->CCR |= DMA_CCR_EN;
 8001e20:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <ADC1_configuration+0x198>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a05      	ldr	r2, [pc, #20]	; (8001e3c <ADC1_configuration+0x198>)
 8001e26:	f043 0301 	orr.w	r3, r3, #1
 8001e2a:	6013      	str	r3, [r2, #0]
		__asm__ volatile("NOP");
 8001e2c:	bf00      	nop
	}
	return;
 8001e2e:	bf00      	nop
 8001e30:	bf00      	nop
}
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	e000e100 	.word	0xe000e100
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	40020008 	.word	0x40020008
 8001e40:	50000040 	.word	0x50000040
 8001e44:	200009a4 	.word	0x200009a4

08001e48 <TIM1_configuration>:

void TIM1_configuration(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
    // Enable the TIM1 clock
    RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8001e4c:	4b37      	ldr	r3, [pc, #220]	; (8001f2c <TIM1_configuration+0xe4>)
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	4a36      	ldr	r2, [pc, #216]	; (8001f2c <TIM1_configuration+0xe4>)
 8001e52:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e56:	6193      	str	r3, [r2, #24]

    // Configure GPIO pins for TIM1 PA9-CH2 and PA8-CH1
    GPIOA->MODER |= (1<<17);
 8001e58:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001e62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e66:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (1<<19);
 8001e68:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001e72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001e76:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR |= (1<<17); //Pull-down
 8001e78:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001e82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e86:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR |= (1<<19); //Pull-down
 8001e88:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001e92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001e96:	60d3      	str	r3, [r2, #12]
    GPIOA->AFR[1] |= (6); //AF6
 8001e98:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001ea2:	f043 0306 	orr.w	r3, r3, #6
 8001ea6:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOA->AFR[1] |= (6<<4); //AF6
 8001ea8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eae:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001eb2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001eb6:	6253      	str	r3, [r2, #36]	; 0x24

    // Configure TIM1
	TIM1->CR1 |= TIM_CR1_ARPE; //ARPE: Auto-reload preload enable
 8001eb8:	4b1d      	ldr	r3, [pc, #116]	; (8001f30 <TIM1_configuration+0xe8>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a1c      	ldr	r2, [pc, #112]	; (8001f30 <TIM1_configuration+0xe8>)
 8001ebe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ec2:	6013      	str	r3, [r2, #0]
	TIM1->SMCR |= (TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0); // Encoder mode 3
 8001ec4:	4b1a      	ldr	r3, [pc, #104]	; (8001f30 <TIM1_configuration+0xe8>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	4a19      	ldr	r2, [pc, #100]	; (8001f30 <TIM1_configuration+0xe8>)
 8001eca:	f043 0303 	orr.w	r3, r3, #3
 8001ece:	6093      	str	r3, [r2, #8]
	TIM1->DIER |= TIM_DIER_UIE; //UIE: Update interrupt enable
 8001ed0:	4b17      	ldr	r3, [pc, #92]	; (8001f30 <TIM1_configuration+0xe8>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	4a16      	ldr	r2, [pc, #88]	; (8001f30 <TIM1_configuration+0xe8>)
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	60d3      	str	r3, [r2, #12]

	TIM1->CCMR1 |= (1<<0);
 8001edc:	4b14      	ldr	r3, [pc, #80]	; (8001f30 <TIM1_configuration+0xe8>)
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	4a13      	ldr	r2, [pc, #76]	; (8001f30 <TIM1_configuration+0xe8>)
 8001ee2:	f043 0301 	orr.w	r3, r3, #1
 8001ee6:	6193      	str	r3, [r2, #24]
	TIM1->CCMR1 |= (1<<8);
 8001ee8:	4b11      	ldr	r3, [pc, #68]	; (8001f30 <TIM1_configuration+0xe8>)
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	4a10      	ldr	r2, [pc, #64]	; (8001f30 <TIM1_configuration+0xe8>)
 8001eee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ef2:	6193      	str	r3, [r2, #24]
	TIM1->CCER |= (1<<0);
 8001ef4:	4b0e      	ldr	r3, [pc, #56]	; (8001f30 <TIM1_configuration+0xe8>)
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	4a0d      	ldr	r2, [pc, #52]	; (8001f30 <TIM1_configuration+0xe8>)
 8001efa:	f043 0301 	orr.w	r3, r3, #1
 8001efe:	6213      	str	r3, [r2, #32]
	TIM1->CCER |= (1<<4);
 8001f00:	4b0b      	ldr	r3, [pc, #44]	; (8001f30 <TIM1_configuration+0xe8>)
 8001f02:	6a1b      	ldr	r3, [r3, #32]
 8001f04:	4a0a      	ldr	r2, [pc, #40]	; (8001f30 <TIM1_configuration+0xe8>)
 8001f06:	f043 0310 	orr.w	r3, r3, #16
 8001f0a:	6213      	str	r3, [r2, #32]

    // Enable the TIM1 interrupt
    NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001f0c:	2019      	movs	r0, #25
 8001f0e:	f7ff fa1f 	bl	8001350 <__NVIC_EnableIRQ>

    // Set priority for the TIM1 interrupt
    NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5); // Adjust priority as needed
 8001f12:	2105      	movs	r1, #5
 8001f14:	2019      	movs	r0, #25
 8001f16:	f7ff fa5d 	bl	80013d4 <__NVIC_SetPriority>

//    TIM1->CNT = PRELOADENC;
//    TIM1->PSC = 7; //7+1 = 8
    // Enable the TIM1 counter
    TIM1->CR1 |= TIM_CR1_CEN;
 8001f1a:	4b05      	ldr	r3, [pc, #20]	; (8001f30 <TIM1_configuration+0xe8>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a04      	ldr	r2, [pc, #16]	; (8001f30 <TIM1_configuration+0xe8>)
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	6013      	str	r3, [r2, #0]
}
 8001f26:	bf00      	nop
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	40012c00 	.word	0x40012c00

08001f34 <TIM2_configuration>:

void TIM2_configuration(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
    // Enable the TIM2 clock
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001f38:	4b41      	ldr	r3, [pc, #260]	; (8002040 <TIM2_configuration+0x10c>)
 8001f3a:	69db      	ldr	r3, [r3, #28]
 8001f3c:	4a40      	ldr	r2, [pc, #256]	; (8002040 <TIM2_configuration+0x10c>)
 8001f3e:	f043 0301 	orr.w	r3, r3, #1
 8001f42:	61d3      	str	r3, [r2, #28]

    // Configure GPIO pins for TIM2 PA1-CH2 and PA0-CH1
    GPIOA->MODER |= (1<<1);
 8001f44:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001f4e:	f043 0302 	orr.w	r3, r3, #2
 8001f52:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (1<<3);
 8001f54:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001f5e:	f043 0308 	orr.w	r3, r3, #8
 8001f62:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR |= (1<<1); //Pull-down
 8001f64:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001f6e:	f043 0302 	orr.w	r3, r3, #2
 8001f72:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR |= (1<<3); //Pull-down
 8001f74:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001f7e:	f043 0308 	orr.w	r3, r3, #8
 8001f82:	60d3      	str	r3, [r2, #12]
    GPIOA->AFR[0] |= (1); //AF1
 8001f84:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001f88:	6a1b      	ldr	r3, [r3, #32]
 8001f8a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001f8e:	f043 0301 	orr.w	r3, r3, #1
 8001f92:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (1<<4); //AF1
 8001f94:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001f98:	6a1b      	ldr	r3, [r3, #32]
 8001f9a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001f9e:	f043 0310 	orr.w	r3, r3, #16
 8001fa2:	6213      	str	r3, [r2, #32]

    // Configure TIM2
	TIM2->CR1 |= TIM_CR1_ARPE; //ARPE: Auto-reload preload enable
 8001fa4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fb2:	6013      	str	r3, [r2, #0]
	TIM2->SMCR |= (TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0); // Encoder mode 3
 8001fb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fbe:	f043 0303 	orr.w	r3, r3, #3
 8001fc2:	6093      	str	r3, [r2, #8]
	TIM2->DIER |= TIM_DIER_UIE; //UIE: Update interrupt enable
 8001fc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fce:	f043 0301 	orr.w	r3, r3, #1
 8001fd2:	60d3      	str	r3, [r2, #12]

	TIM2->CCMR1 |= (1<<0);
 8001fd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fde:	f043 0301 	orr.w	r3, r3, #1
 8001fe2:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= (1<<8);
 8001fe4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ff2:	6193      	str	r3, [r2, #24]
	TIM2->CCER |= (1<<0);
 8001ff4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
 8001ffa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ffe:	f043 0301 	orr.w	r3, r3, #1
 8002002:	6213      	str	r3, [r2, #32]
	TIM2->CCER |= (1<<4);
 8002004:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002008:	6a1b      	ldr	r3, [r3, #32]
 800200a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800200e:	f043 0310 	orr.w	r3, r3, #16
 8002012:	6213      	str	r3, [r2, #32]

//	TIM2->PSC = 7; //7+1 = 8
	TIM2->ARR = 0xFFFF; //65535
 8002014:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002018:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800201c:	62da      	str	r2, [r3, #44]	; 0x2c

    // Enable the TIM2 interrupt
    NVIC_EnableIRQ(TIM2_IRQn);
 800201e:	201c      	movs	r0, #28
 8002020:	f7ff f996 	bl	8001350 <__NVIC_EnableIRQ>

    // Set priority for the TIM2 interrupt
    NVIC_SetPriority(TIM2_IRQn, 5); // Adjust priority as needed
 8002024:	2105      	movs	r1, #5
 8002026:	201c      	movs	r0, #28
 8002028:	f7ff f9d4 	bl	80013d4 <__NVIC_SetPriority>

    // Enable the TIM2 counter
    TIM2->CR1 |= TIM_CR1_CEN;
 800202c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002036:	f043 0301 	orr.w	r3, r3, #1
 800203a:	6013      	str	r3, [r2, #0]
}
 800203c:	bf00      	nop
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40021000 	.word	0x40021000

08002044 <TIM15_additional_configuration>:

void TIM15_additional_configuration(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
	TIM15->DIER |= TIM_DIER_CC1IE;
 8002048:	4b10      	ldr	r3, [pc, #64]	; (800208c <TIM15_additional_configuration+0x48>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	4a0f      	ldr	r2, [pc, #60]	; (800208c <TIM15_additional_configuration+0x48>)
 800204e:	f043 0302 	orr.w	r3, r3, #2
 8002052:	60d3      	str	r3, [r2, #12]
	TIM15->DIER |= TIM_DIER_CC2IE;
 8002054:	4b0d      	ldr	r3, [pc, #52]	; (800208c <TIM15_additional_configuration+0x48>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	4a0c      	ldr	r2, [pc, #48]	; (800208c <TIM15_additional_configuration+0x48>)
 800205a:	f043 0304 	orr.w	r3, r3, #4
 800205e:	60d3      	str	r3, [r2, #12]
	TIM15->DIER |= TIM_DIER_UIE; //UIE: Update interrupt enable
 8002060:	4b0a      	ldr	r3, [pc, #40]	; (800208c <TIM15_additional_configuration+0x48>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	4a09      	ldr	r2, [pc, #36]	; (800208c <TIM15_additional_configuration+0x48>)
 8002066:	f043 0301 	orr.w	r3, r3, #1
 800206a:	60d3      	str	r3, [r2, #12]

    // Enable the TIM15 interrupt
    NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800206c:	2018      	movs	r0, #24
 800206e:	f7ff f96f 	bl	8001350 <__NVIC_EnableIRQ>
    // Set priority for the TIM15 interrupt
    NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 5);
 8002072:	2105      	movs	r1, #5
 8002074:	2018      	movs	r0, #24
 8002076:	f7ff f9ad 	bl	80013d4 <__NVIC_SetPriority>

	TIM15->CR1 |= TIM_CR1_CEN;
 800207a:	4b04      	ldr	r3, [pc, #16]	; (800208c <TIM15_additional_configuration+0x48>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a03      	ldr	r2, [pc, #12]	; (800208c <TIM15_additional_configuration+0x48>)
 8002080:	f043 0301 	orr.w	r3, r3, #1
 8002084:	6013      	str	r3, [r2, #0]
}
 8002086:	bf00      	nop
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40014000 	.word	0x40014000

08002090 <TIM17_additional_configuration>:

void TIM17_additional_configuration(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
	TIM17->DIER |= TIM_DIER_UIE; //UIE: Update interrupt enable
 8002094:	4b0a      	ldr	r3, [pc, #40]	; (80020c0 <TIM17_additional_configuration+0x30>)
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	4a09      	ldr	r2, [pc, #36]	; (80020c0 <TIM17_additional_configuration+0x30>)
 800209a:	f043 0301 	orr.w	r3, r3, #1
 800209e:	60d3      	str	r3, [r2, #12]

    // Enable the TIM17 interrupt
    NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80020a0:	201a      	movs	r0, #26
 80020a2:	f7ff f955 	bl	8001350 <__NVIC_EnableIRQ>
    // Set priority for the TIM17 interrupt
    NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 5);
 80020a6:	2105      	movs	r1, #5
 80020a8:	201a      	movs	r0, #26
 80020aa:	f7ff f993 	bl	80013d4 <__NVIC_SetPriority>

	TIM17->CR1 |= TIM_CR1_CEN;
 80020ae:	4b04      	ldr	r3, [pc, #16]	; (80020c0 <TIM17_additional_configuration+0x30>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a03      	ldr	r2, [pc, #12]	; (80020c0 <TIM17_additional_configuration+0x30>)
 80020b4:	f043 0301 	orr.w	r3, r3, #1
 80020b8:	6013      	str	r3, [r2, #0]
}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	40014800 	.word	0x40014800

080020c4 <USART3_additional_configuration>:

void USART3_additional_configuration(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
	//DMA configuration for UART3
	RCC->AHBENR |= RCC_AHBENR_DMA1EN; // Enable the DMA1 clock
 80020c8:	4b41      	ldr	r3, [pc, #260]	; (80021d0 <USART3_additional_configuration+0x10c>)
 80020ca:	695b      	ldr	r3, [r3, #20]
 80020cc:	4a40      	ldr	r2, [pc, #256]	; (80021d0 <USART3_additional_configuration+0x10c>)
 80020ce:	f043 0301 	orr.w	r3, r3, #1
 80020d2:	6153      	str	r3, [r2, #20]

	DMA1_Channel3->CCR &= ~DMA_CCR_EN;
 80020d4:	4b3f      	ldr	r3, [pc, #252]	; (80021d4 <USART3_additional_configuration+0x110>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a3e      	ldr	r2, [pc, #248]	; (80021d4 <USART3_additional_configuration+0x110>)
 80020da:	f023 0301 	bic.w	r3, r3, #1
 80020de:	6013      	str	r3, [r2, #0]

	DMA1_Channel3->CCR |= DMA_CCR_MINC;
 80020e0:	4b3c      	ldr	r3, [pc, #240]	; (80021d4 <USART3_additional_configuration+0x110>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a3b      	ldr	r2, [pc, #236]	; (80021d4 <USART3_additional_configuration+0x110>)
 80020e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020ea:	6013      	str	r3, [r2, #0]
	DMA1_Channel3->CCR |= DMA_CCR_CIRC;
 80020ec:	4b39      	ldr	r3, [pc, #228]	; (80021d4 <USART3_additional_configuration+0x110>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a38      	ldr	r2, [pc, #224]	; (80021d4 <USART3_additional_configuration+0x110>)
 80020f2:	f043 0320 	orr.w	r3, r3, #32
 80020f6:	6013      	str	r3, [r2, #0]
	DMA1_Channel3->CCR &= ~DMA_CCR_TCIE;
 80020f8:	4b36      	ldr	r3, [pc, #216]	; (80021d4 <USART3_additional_configuration+0x110>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a35      	ldr	r2, [pc, #212]	; (80021d4 <USART3_additional_configuration+0x110>)
 80020fe:	f023 0302 	bic.w	r3, r3, #2
 8002102:	6013      	str	r3, [r2, #0]
	DMA1_Channel3->CCR &= ~DMA_CCR_HTIE;
 8002104:	4b33      	ldr	r3, [pc, #204]	; (80021d4 <USART3_additional_configuration+0x110>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a32      	ldr	r2, [pc, #200]	; (80021d4 <USART3_additional_configuration+0x110>)
 800210a:	f023 0304 	bic.w	r3, r3, #4
 800210e:	6013      	str	r3, [r2, #0]
	DMA1_Channel3->CCR &= ~DMA_CCR_TEIE;
 8002110:	4b30      	ldr	r3, [pc, #192]	; (80021d4 <USART3_additional_configuration+0x110>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a2f      	ldr	r2, [pc, #188]	; (80021d4 <USART3_additional_configuration+0x110>)
 8002116:	f023 0308 	bic.w	r3, r3, #8
 800211a:	6013      	str	r3, [r2, #0]

	DMA1_Channel3->CNDTR = ESPRXBUFFERSIZE;
 800211c:	4b2d      	ldr	r3, [pc, #180]	; (80021d4 <USART3_additional_configuration+0x110>)
 800211e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002122:	605a      	str	r2, [r3, #4]
	DMA1_Channel3->CPAR = (uint32_t)&(USART3->RDR);
 8002124:	4b2b      	ldr	r3, [pc, #172]	; (80021d4 <USART3_additional_configuration+0x110>)
 8002126:	4a2c      	ldr	r2, [pc, #176]	; (80021d8 <USART3_additional_configuration+0x114>)
 8002128:	609a      	str	r2, [r3, #8]
	DMA1_Channel3->CMAR = (uint32_t)&rxBuffer[0];
 800212a:	4b2a      	ldr	r3, [pc, #168]	; (80021d4 <USART3_additional_configuration+0x110>)
 800212c:	4a2b      	ldr	r2, [pc, #172]	; (80021dc <USART3_additional_configuration+0x118>)
 800212e:	60da      	str	r2, [r3, #12]

	USART3->CR3 &= ~USART_CR3_DMAR;
 8002130:	4b2b      	ldr	r3, [pc, #172]	; (80021e0 <USART3_additional_configuration+0x11c>)
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	4a2a      	ldr	r2, [pc, #168]	; (80021e0 <USART3_additional_configuration+0x11c>)
 8002136:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800213a:	6093      	str	r3, [r2, #8]
	DMA1_Channel3->CCR &= ~DMA_CCR_EN;
 800213c:	4b25      	ldr	r3, [pc, #148]	; (80021d4 <USART3_additional_configuration+0x110>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a24      	ldr	r2, [pc, #144]	; (80021d4 <USART3_additional_configuration+0x110>)
 8002142:	f023 0301 	bic.w	r3, r3, #1
 8002146:	6013      	str	r3, [r2, #0]

	DMA1_Channel2->CCR &= ~DMA_CCR_EN;
 8002148:	4b26      	ldr	r3, [pc, #152]	; (80021e4 <USART3_additional_configuration+0x120>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a25      	ldr	r2, [pc, #148]	; (80021e4 <USART3_additional_configuration+0x120>)
 800214e:	f023 0301 	bic.w	r3, r3, #1
 8002152:	6013      	str	r3, [r2, #0]

	DMA1_Channel2->CCR |= DMA_CCR_MINC;
 8002154:	4b23      	ldr	r3, [pc, #140]	; (80021e4 <USART3_additional_configuration+0x120>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a22      	ldr	r2, [pc, #136]	; (80021e4 <USART3_additional_configuration+0x120>)
 800215a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800215e:	6013      	str	r3, [r2, #0]
	DMA1_Channel2->CCR &= ~DMA_CCR_CIRC;
 8002160:	4b20      	ldr	r3, [pc, #128]	; (80021e4 <USART3_additional_configuration+0x120>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a1f      	ldr	r2, [pc, #124]	; (80021e4 <USART3_additional_configuration+0x120>)
 8002166:	f023 0320 	bic.w	r3, r3, #32
 800216a:	6013      	str	r3, [r2, #0]
	DMA1_Channel2->CCR |= DMA_CCR_DIR;
 800216c:	4b1d      	ldr	r3, [pc, #116]	; (80021e4 <USART3_additional_configuration+0x120>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a1c      	ldr	r2, [pc, #112]	; (80021e4 <USART3_additional_configuration+0x120>)
 8002172:	f043 0310 	orr.w	r3, r3, #16
 8002176:	6013      	str	r3, [r2, #0]
	DMA1_Channel2->CCR |= DMA_CCR_TCIE;
 8002178:	4b1a      	ldr	r3, [pc, #104]	; (80021e4 <USART3_additional_configuration+0x120>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a19      	ldr	r2, [pc, #100]	; (80021e4 <USART3_additional_configuration+0x120>)
 800217e:	f043 0302 	orr.w	r3, r3, #2
 8002182:	6013      	str	r3, [r2, #0]
	DMA1_Channel2->CCR &= ~DMA_CCR_HTIE;
 8002184:	4b17      	ldr	r3, [pc, #92]	; (80021e4 <USART3_additional_configuration+0x120>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a16      	ldr	r2, [pc, #88]	; (80021e4 <USART3_additional_configuration+0x120>)
 800218a:	f023 0304 	bic.w	r3, r3, #4
 800218e:	6013      	str	r3, [r2, #0]
	DMA1_Channel2->CCR &= ~DMA_CCR_TEIE;
 8002190:	4b14      	ldr	r3, [pc, #80]	; (80021e4 <USART3_additional_configuration+0x120>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a13      	ldr	r2, [pc, #76]	; (80021e4 <USART3_additional_configuration+0x120>)
 8002196:	f023 0308 	bic.w	r3, r3, #8
 800219a:	6013      	str	r3, [r2, #0]

	DMA1_Channel2->CNDTR = 0;
 800219c:	4b11      	ldr	r3, [pc, #68]	; (80021e4 <USART3_additional_configuration+0x120>)
 800219e:	2200      	movs	r2, #0
 80021a0:	605a      	str	r2, [r3, #4]
	DMA1_Channel2->CPAR = (uint32_t)&(USART3->TDR);
 80021a2:	4b10      	ldr	r3, [pc, #64]	; (80021e4 <USART3_additional_configuration+0x120>)
 80021a4:	4a10      	ldr	r2, [pc, #64]	; (80021e8 <USART3_additional_configuration+0x124>)
 80021a6:	609a      	str	r2, [r3, #8]
	DMA1_Channel2->CMAR = (uint32_t)&txBuffer[0];
 80021a8:	4b0e      	ldr	r3, [pc, #56]	; (80021e4 <USART3_additional_configuration+0x120>)
 80021aa:	4a10      	ldr	r2, [pc, #64]	; (80021ec <USART3_additional_configuration+0x128>)
 80021ac:	60da      	str	r2, [r3, #12]

	USART3->CR3 &= ~USART_CR3_DMAT;
 80021ae:	4b0c      	ldr	r3, [pc, #48]	; (80021e0 <USART3_additional_configuration+0x11c>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	4a0b      	ldr	r2, [pc, #44]	; (80021e0 <USART3_additional_configuration+0x11c>)
 80021b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021b8:	6093      	str	r3, [r2, #8]
	DMA1_Channel2->CCR &= ~DMA_CCR_EN;
 80021ba:	4b0a      	ldr	r3, [pc, #40]	; (80021e4 <USART3_additional_configuration+0x120>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a09      	ldr	r2, [pc, #36]	; (80021e4 <USART3_additional_configuration+0x120>)
 80021c0:	f023 0301 	bic.w	r3, r3, #1
 80021c4:	6013      	str	r3, [r2, #0]
}
 80021c6:	bf00      	nop
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	40021000 	.word	0x40021000
 80021d4:	40020030 	.word	0x40020030
 80021d8:	40004824 	.word	0x40004824
 80021dc:	20000c70 	.word	0x20000c70
 80021e0:	40004800 	.word	0x40004800
 80021e4:	4002001c 	.word	0x4002001c
 80021e8:	40004828 	.word	0x40004828
 80021ec:	20000a70 	.word	0x20000a70

080021f0 <timerForSendDataCallback>:

void timerForSendDataCallback(TimerHandle_t xTimer)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
	xEventGroupSetBits(timerFdsEventGroup, 0x1);
 80021f8:	4b04      	ldr	r3, [pc, #16]	; (800220c <timerForSendDataCallback+0x1c>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2101      	movs	r1, #1
 80021fe:	4618      	mov	r0, r3
 8002200:	f006 fb68 	bl	80088d4 <xEventGroupSetBits>
}
 8002204:	bf00      	nop
 8002206:	3708      	adds	r7, #8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	20000f78 	.word	0x20000f78

08002210 <psMeasure>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_psMeasure */
void psMeasure(void const * argument)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
    osDelay(8);
 8002218:	2008      	movs	r0, #8
 800221a:	f006 fad1 	bl	80087c0 <osDelay>

    for(uint8_t i = 0; i < (sizeof(batteryVoltage)/sizeof(batteryVoltage[0])); i++) {
 800221e:	2300      	movs	r3, #0
 8002220:	73fb      	strb	r3, [r7, #15]
 8002222:	e00d      	b.n	8002240 <psMeasure+0x30>
    	avrBatVoltage += batteryVoltage[i];
 8002224:	7bfb      	ldrb	r3, [r7, #15]
 8002226:	4a42      	ldr	r2, [pc, #264]	; (8002330 <psMeasure+0x120>)
 8002228:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800222c:	b29a      	uxth	r2, r3
 800222e:	4b41      	ldr	r3, [pc, #260]	; (8002334 <psMeasure+0x124>)
 8002230:	881b      	ldrh	r3, [r3, #0]
 8002232:	4413      	add	r3, r2
 8002234:	b29a      	uxth	r2, r3
 8002236:	4b3f      	ldr	r3, [pc, #252]	; (8002334 <psMeasure+0x124>)
 8002238:	801a      	strh	r2, [r3, #0]
    for(uint8_t i = 0; i < (sizeof(batteryVoltage)/sizeof(batteryVoltage[0])); i++) {
 800223a:	7bfb      	ldrb	r3, [r7, #15]
 800223c:	3301      	adds	r3, #1
 800223e:	73fb      	strb	r3, [r7, #15]
 8002240:	7bfb      	ldrb	r3, [r7, #15]
 8002242:	2b09      	cmp	r3, #9
 8002244:	d9ee      	bls.n	8002224 <psMeasure+0x14>
    }
    avrBatVoltage = avrBatVoltage / (sizeof(batteryVoltage)/sizeof(batteryVoltage[0]));
 8002246:	4b3b      	ldr	r3, [pc, #236]	; (8002334 <psMeasure+0x124>)
 8002248:	881b      	ldrh	r3, [r3, #0]
 800224a:	4a3b      	ldr	r2, [pc, #236]	; (8002338 <psMeasure+0x128>)
 800224c:	fba2 2303 	umull	r2, r3, r2, r3
 8002250:	08db      	lsrs	r3, r3, #3
 8002252:	b29a      	uxth	r2, r3
 8002254:	4b37      	ldr	r3, [pc, #220]	; (8002334 <psMeasure+0x124>)
 8002256:	801a      	strh	r2, [r3, #0]
    BatChargeState = ((float)(avrBatVoltage - BATMINV)/(BATMAXV - BATMINV))*100;
 8002258:	4b36      	ldr	r3, [pc, #216]	; (8002334 <psMeasure+0x124>)
 800225a:	881b      	ldrh	r3, [r3, #0]
 800225c:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8002260:	ee07 3a90 	vmov	s15, r3
 8002264:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002268:	eddf 6a34 	vldr	s13, [pc, #208]	; 800233c <psMeasure+0x12c>
 800226c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002270:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8002340 <psMeasure+0x130>
 8002274:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002278:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800227c:	edc7 7a00 	vstr	s15, [r7]
 8002280:	783b      	ldrb	r3, [r7, #0]
 8002282:	b2da      	uxtb	r2, r3
 8002284:	4b2f      	ldr	r3, [pc, #188]	; (8002344 <psMeasure+0x134>)
 8002286:	701a      	strb	r2, [r3, #0]

    if(avrBatVoltage > BATMAXV) {
 8002288:	4b2a      	ldr	r3, [pc, #168]	; (8002334 <psMeasure+0x124>)
 800228a:	881b      	ldrh	r3, [r3, #0]
 800228c:	f640 1251 	movw	r2, #2385	; 0x951
 8002290:	4293      	cmp	r3, r2
 8002292:	d91b      	bls.n	80022cc <psMeasure+0xbc>
    	xEventGroupClearBits(pc13EventGroup, 0xFFFFFF);
 8002294:	4b2c      	ldr	r3, [pc, #176]	; (8002348 <psMeasure+0x138>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800229c:	4618      	mov	r0, r3
 800229e:	f006 fabd 	bl	800881c <xEventGroupClearBits>
    	xEventGroupSetBits(pc13EventGroup, OVERVOLTAGEONLED);
 80022a2:	4b29      	ldr	r3, [pc, #164]	; (8002348 <psMeasure+0x138>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2101      	movs	r1, #1
 80022a8:	4618      	mov	r0, r3
 80022aa:	f006 fb13 	bl	80088d4 <xEventGroupSetBits>
    	xEventGroupClearBits(pc14EventGroup, 0xFFFFFF);
 80022ae:	4b27      	ldr	r3, [pc, #156]	; (800234c <psMeasure+0x13c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80022b6:	4618      	mov	r0, r3
 80022b8:	f006 fab0 	bl	800881c <xEventGroupClearBits>
    	xEventGroupSetBits(pc14EventGroup, OVERVOLTAGEONLED);
 80022bc:	4b23      	ldr	r3, [pc, #140]	; (800234c <psMeasure+0x13c>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2101      	movs	r1, #1
 80022c2:	4618      	mov	r0, r3
 80022c4:	f006 fb06 	bl	80088d4 <xEventGroupSetBits>
    	__asm__ volatile("NOP");
 80022c8:	bf00      	nop
 80022ca:	e7a5      	b.n	8002218 <psMeasure+0x8>
    } else if(avrBatVoltage < BATMINV) {
 80022cc:	4b19      	ldr	r3, [pc, #100]	; (8002334 <psMeasure+0x124>)
 80022ce:	881b      	ldrh	r3, [r3, #0]
 80022d0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80022d4:	d21b      	bcs.n	800230e <psMeasure+0xfe>
    	xEventGroupClearBits(pc13EventGroup, 0xFFFFFF);
 80022d6:	4b1c      	ldr	r3, [pc, #112]	; (8002348 <psMeasure+0x138>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80022de:	4618      	mov	r0, r3
 80022e0:	f006 fa9c 	bl	800881c <xEventGroupClearBits>
    	xEventGroupSetBits(pc13EventGroup, UNDERVOLTAGEONLED);
 80022e4:	4b18      	ldr	r3, [pc, #96]	; (8002348 <psMeasure+0x138>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2102      	movs	r1, #2
 80022ea:	4618      	mov	r0, r3
 80022ec:	f006 faf2 	bl	80088d4 <xEventGroupSetBits>
    	xEventGroupClearBits(pc14EventGroup, 0xFFFFFF);
 80022f0:	4b16      	ldr	r3, [pc, #88]	; (800234c <psMeasure+0x13c>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80022f8:	4618      	mov	r0, r3
 80022fa:	f006 fa8f 	bl	800881c <xEventGroupClearBits>
    	xEventGroupSetBits(pc14EventGroup, UNDERVOLTAGEONLED);
 80022fe:	4b13      	ldr	r3, [pc, #76]	; (800234c <psMeasure+0x13c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2102      	movs	r1, #2
 8002304:	4618      	mov	r0, r3
 8002306:	f006 fae5 	bl	80088d4 <xEventGroupSetBits>
    	__asm__ volatile("NOP");
 800230a:	bf00      	nop
 800230c:	e784      	b.n	8002218 <psMeasure+0x8>
    } else {
    	xEventGroupClearBits(pc13EventGroup, 0xFFFFFF);
 800230e:	4b0e      	ldr	r3, [pc, #56]	; (8002348 <psMeasure+0x138>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8002316:	4618      	mov	r0, r3
 8002318:	f006 fa80 	bl	800881c <xEventGroupClearBits>
    	xEventGroupClearBits(pc14EventGroup, 0xFFFFFF);
 800231c:	4b0b      	ldr	r3, [pc, #44]	; (800234c <psMeasure+0x13c>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8002324:	4618      	mov	r0, r3
 8002326:	f006 fa79 	bl	800881c <xEventGroupClearBits>
    	__asm__ volatile("NOP");
 800232a:	bf00      	nop
    osDelay(8);
 800232c:	e774      	b.n	8002218 <psMeasure+0x8>
 800232e:	bf00      	nop
 8002330:	200009a4 	.word	0x200009a4
 8002334:	200009b8 	.word	0x200009b8
 8002338:	cccccccd 	.word	0xcccccccd
 800233c:	43c08000 	.word	0x43c08000
 8002340:	42c80000 	.word	0x42c80000
 8002344:	200009ba 	.word	0x200009ba
 8002348:	200009bc 	.word	0x200009bc
 800234c:	200009c0 	.word	0x200009c0

08002350 <pc13LedCntrl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pc13LedCntrl */
void pc13LedCntrl(void const * argument)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN pc13LedCntrl */
	EventBits_t eventBits;
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002358:	2001      	movs	r0, #1
 800235a:	f006 fa31 	bl	80087c0 <osDelay>
    eventBits = xEventGroupGetBits(pc13EventGroup);
 800235e:	4b18      	ldr	r3, [pc, #96]	; (80023c0 <pc13LedCntrl+0x70>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2100      	movs	r1, #0
 8002364:	4618      	mov	r0, r3
 8002366:	f006 fa59 	bl	800881c <xEventGroupClearBits>
 800236a:	60f8      	str	r0, [r7, #12]
    switch (eventBits) {
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d003      	beq.n	800237a <pc13LedCntrl+0x2a>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2b02      	cmp	r3, #2
 8002376:	d00b      	beq.n	8002390 <pc13LedCntrl+0x40>
 8002378:	e016      	b.n	80023a8 <pc13LedCntrl+0x58>
		case OVERVOLTAGEONLED:
			osDelay(200);
 800237a:	20c8      	movs	r0, #200	; 0xc8
 800237c:	f006 fa20 	bl	80087c0 <osDelay>
			GPIOC->ODR ^= GPIO_ODR_13;
 8002380:	4b10      	ldr	r3, [pc, #64]	; (80023c4 <pc13LedCntrl+0x74>)
 8002382:	695b      	ldr	r3, [r3, #20]
 8002384:	4a0f      	ldr	r2, [pc, #60]	; (80023c4 <pc13LedCntrl+0x74>)
 8002386:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800238a:	6153      	str	r3, [r2, #20]
			__asm__ volatile("NOP");
 800238c:	bf00      	nop
			break;
 800238e:	e016      	b.n	80023be <pc13LedCntrl+0x6e>
		case UNDERVOLTAGEONLED:
			osDelay(300);
 8002390:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002394:	f006 fa14 	bl	80087c0 <osDelay>
			GPIOC->ODR ^= GPIO_ODR_13;
 8002398:	4b0a      	ldr	r3, [pc, #40]	; (80023c4 <pc13LedCntrl+0x74>)
 800239a:	695b      	ldr	r3, [r3, #20]
 800239c:	4a09      	ldr	r2, [pc, #36]	; (80023c4 <pc13LedCntrl+0x74>)
 800239e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80023a2:	6153      	str	r3, [r2, #20]
			__asm__ volatile("NOP");
 80023a4:	bf00      	nop
			break;
 80023a6:	e00a      	b.n	80023be <pc13LedCntrl+0x6e>
		default:
			GPIOC->ODR &= ~GPIO_ODR_13;
 80023a8:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <pc13LedCntrl+0x74>)
 80023aa:	695b      	ldr	r3, [r3, #20]
 80023ac:	4a05      	ldr	r2, [pc, #20]	; (80023c4 <pc13LedCntrl+0x74>)
 80023ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80023b2:	6153      	str	r3, [r2, #20]
			osDelay(200);
 80023b4:	20c8      	movs	r0, #200	; 0xc8
 80023b6:	f006 fa03 	bl	80087c0 <osDelay>
			__asm__ volatile("NOP");
 80023ba:	bf00      	nop
			break;
 80023bc:	bf00      	nop
    osDelay(1);
 80023be:	e7cb      	b.n	8002358 <pc13LedCntrl+0x8>
 80023c0:	200009bc 	.word	0x200009bc
 80023c4:	48000800 	.word	0x48000800

080023c8 <pc14LedCntrl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pc14LedCntrl */
void pc14LedCntrl(void const * argument)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN pc14LedCntrl */
	EventBits_t eventBits;
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80023d0:	2001      	movs	r0, #1
 80023d2:	f006 f9f5 	bl	80087c0 <osDelay>
    eventBits = xEventGroupGetBits(pc14EventGroup);
 80023d6:	4b18      	ldr	r3, [pc, #96]	; (8002438 <pc14LedCntrl+0x70>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2100      	movs	r1, #0
 80023dc:	4618      	mov	r0, r3
 80023de:	f006 fa1d 	bl	800881c <xEventGroupClearBits>
 80023e2:	60f8      	str	r0, [r7, #12]
    switch (eventBits) {
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d003      	beq.n	80023f2 <pc14LedCntrl+0x2a>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d00b      	beq.n	8002408 <pc14LedCntrl+0x40>
 80023f0:	e016      	b.n	8002420 <pc14LedCntrl+0x58>
		case OVERVOLTAGEONLED:
			osDelay(200);
 80023f2:	20c8      	movs	r0, #200	; 0xc8
 80023f4:	f006 f9e4 	bl	80087c0 <osDelay>
			GPIOC->ODR ^= GPIO_ODR_14;
 80023f8:	4b10      	ldr	r3, [pc, #64]	; (800243c <pc14LedCntrl+0x74>)
 80023fa:	695b      	ldr	r3, [r3, #20]
 80023fc:	4a0f      	ldr	r2, [pc, #60]	; (800243c <pc14LedCntrl+0x74>)
 80023fe:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 8002402:	6153      	str	r3, [r2, #20]
			__asm__ volatile("NOP");
 8002404:	bf00      	nop
			break;
 8002406:	e016      	b.n	8002436 <pc14LedCntrl+0x6e>
		case UNDERVOLTAGEONLED:
			osDelay(300);
 8002408:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800240c:	f006 f9d8 	bl	80087c0 <osDelay>
			GPIOC->ODR ^= GPIO_ODR_14;
 8002410:	4b0a      	ldr	r3, [pc, #40]	; (800243c <pc14LedCntrl+0x74>)
 8002412:	695b      	ldr	r3, [r3, #20]
 8002414:	4a09      	ldr	r2, [pc, #36]	; (800243c <pc14LedCntrl+0x74>)
 8002416:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 800241a:	6153      	str	r3, [r2, #20]
			__asm__ volatile("NOP");
 800241c:	bf00      	nop
			break;
 800241e:	e00a      	b.n	8002436 <pc14LedCntrl+0x6e>
		default:
			GPIOC->ODR &= ~GPIO_ODR_14;
 8002420:	4b06      	ldr	r3, [pc, #24]	; (800243c <pc14LedCntrl+0x74>)
 8002422:	695b      	ldr	r3, [r3, #20]
 8002424:	4a05      	ldr	r2, [pc, #20]	; (800243c <pc14LedCntrl+0x74>)
 8002426:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800242a:	6153      	str	r3, [r2, #20]
			osDelay(200);
 800242c:	20c8      	movs	r0, #200	; 0xc8
 800242e:	f006 f9c7 	bl	80087c0 <osDelay>
			__asm__ volatile("NOP");
 8002432:	bf00      	nop
			break;
 8002434:	bf00      	nop
    osDelay(1);
 8002436:	e7cb      	b.n	80023d0 <pc14LedCntrl+0x8>
 8002438:	200009c0 	.word	0x200009c0
 800243c:	48000800 	.word	0x48000800

08002440 <espCommunication>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_espCommunication */
void espCommunication(void const * argument)
{
 8002440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002444:	b0aa      	sub	sp, #168	; 0xa8
 8002446:	af12      	add	r7, sp, #72	; 0x48
 8002448:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* USER CODE BEGIN espCommunication */
	vTaskDelay( pdMS_TO_TICKS( 600 ) );
 800244a:	f44f 7016 	mov.w	r0, #600	; 0x258
 800244e:	f007 f9ed 	bl	800982c <vTaskDelay>
	NVIC_DisableIRQ(TIM1_BRK_TIM15_IRQn);
 8002452:	2018      	movs	r0, #24
 8002454:	f7fe ff9a 	bl	800138c <__NVIC_DisableIRQ>
	taskENTER_CRITICAL();
 8002458:	f008 fc64 	bl	800ad24 <vPortEnterCritical>
	  GPIOB->ODR |= (1<<1); //RST_ESP
 800245c:	4bab      	ldr	r3, [pc, #684]	; (800270c <espCommunication+0x2cc>)
 800245e:	695b      	ldr	r3, [r3, #20]
 8002460:	4aaa      	ldr	r2, [pc, #680]	; (800270c <espCommunication+0x2cc>)
 8002462:	f043 0302 	orr.w	r3, r3, #2
 8002466:	6153      	str	r3, [r2, #20]
	  GPIOB->ODR |= (1<<2); //EN_ESP
 8002468:	4ba8      	ldr	r3, [pc, #672]	; (800270c <espCommunication+0x2cc>)
 800246a:	695b      	ldr	r3, [r3, #20]
 800246c:	4aa7      	ldr	r2, [pc, #668]	; (800270c <espCommunication+0x2cc>)
 800246e:	f043 0304 	orr.w	r3, r3, #4
 8002472:	6153      	str	r3, [r2, #20]
	  sprintf(txBuffer, "AT\r\n");
 8002474:	49a6      	ldr	r1, [pc, #664]	; (8002710 <espCommunication+0x2d0>)
 8002476:	48a7      	ldr	r0, [pc, #668]	; (8002714 <espCommunication+0x2d4>)
 8002478:	f009 fc66 	bl	800bd48 <siprintf>
	  char controlAnsw[] = "AT\r\r\n\r\nOK\r\n";
 800247c:	4aa6      	ldr	r2, [pc, #664]	; (8002718 <espCommunication+0x2d8>)
 800247e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002482:	ca07      	ldmia	r2, {r0, r1, r2}
 8002484:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	  while(strcmp(rxBuffer, controlAnsw) != 0) {
 8002488:	e019      	b.n	80024be <espCommunication+0x7e>
		  HAL_UART_Transmit(&huart3, (uint8_t*)txBuffer, strlen(txBuffer), 250);
 800248a:	48a2      	ldr	r0, [pc, #648]	; (8002714 <espCommunication+0x2d4>)
 800248c:	f7fd ff00 	bl	8000290 <strlen>
 8002490:	4603      	mov	r3, r0
 8002492:	b29a      	uxth	r2, r3
 8002494:	23fa      	movs	r3, #250	; 0xfa
 8002496:	499f      	ldr	r1, [pc, #636]	; (8002714 <espCommunication+0x2d4>)
 8002498:	48a0      	ldr	r0, [pc, #640]	; (800271c <espCommunication+0x2dc>)
 800249a:	f005 fc87 	bl	8007dac <HAL_UART_Transmit>
		  HAL_UART_Receive(&huart3, (uint8_t*)rxBuffer, strlen(controlAnsw), 250);
 800249e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7fd fef4 	bl	8000290 <strlen>
 80024a8:	4603      	mov	r3, r0
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	23fa      	movs	r3, #250	; 0xfa
 80024ae:	499c      	ldr	r1, [pc, #624]	; (8002720 <espCommunication+0x2e0>)
 80024b0:	489a      	ldr	r0, [pc, #616]	; (800271c <espCommunication+0x2dc>)
 80024b2:	f005 fd05 	bl	8007ec0 <HAL_UART_Receive>
		  vTaskDelay( pdMS_TO_TICKS( 100 ) );
 80024b6:	2064      	movs	r0, #100	; 0x64
 80024b8:	f007 f9b8 	bl	800982c <vTaskDelay>
		  __asm__ volatile("NOP");
 80024bc:	bf00      	nop
	  while(strcmp(rxBuffer, controlAnsw) != 0) {
 80024be:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80024c2:	4619      	mov	r1, r3
 80024c4:	4896      	ldr	r0, [pc, #600]	; (8002720 <espCommunication+0x2e0>)
 80024c6:	f7fd fe83 	bl	80001d0 <strcmp>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1dc      	bne.n	800248a <espCommunication+0x4a>
	  }

	  sprintf(txBuffer, "AT+CWMODE_CUR=1\r\n");
 80024d0:	4994      	ldr	r1, [pc, #592]	; (8002724 <espCommunication+0x2e4>)
 80024d2:	4890      	ldr	r0, [pc, #576]	; (8002714 <espCommunication+0x2d4>)
 80024d4:	f009 fc38 	bl	800bd48 <siprintf>
	  sendATCommand(&huart3, "AT+CWMODE_CUR=1\r\n", strlen(txBuffer) , 250);
 80024d8:	488e      	ldr	r0, [pc, #568]	; (8002714 <espCommunication+0x2d4>)
 80024da:	f7fd fed9 	bl	8000290 <strlen>
 80024de:	4603      	mov	r3, r0
 80024e0:	461a      	mov	r2, r3
 80024e2:	23fa      	movs	r3, #250	; 0xfa
 80024e4:	498f      	ldr	r1, [pc, #572]	; (8002724 <espCommunication+0x2e4>)
 80024e6:	488d      	ldr	r0, [pc, #564]	; (800271c <espCommunication+0x2dc>)
 80024e8:	f7fe fcd1 	bl	8000e8e <sendATCommand>
	  receiveAnswer(&huart3, rxBuffer, sizeof(rxBuffer), 250);
 80024ec:	23fa      	movs	r3, #250	; 0xfa
 80024ee:	f240 12ff 	movw	r2, #511	; 0x1ff
 80024f2:	498b      	ldr	r1, [pc, #556]	; (8002720 <espCommunication+0x2e0>)
 80024f4:	4889      	ldr	r0, [pc, #548]	; (800271c <espCommunication+0x2dc>)
 80024f6:	f7fe fcee 	bl	8000ed6 <receiveAnswer>

	  sprintf(txBuffer, "AT+CWJAP_CUR=\"RedmiGiGidra\",\"DimaDimaDimon\"\r\n");
 80024fa:	498b      	ldr	r1, [pc, #556]	; (8002728 <espCommunication+0x2e8>)
 80024fc:	4885      	ldr	r0, [pc, #532]	; (8002714 <espCommunication+0x2d4>)
 80024fe:	f009 fc23 	bl	800bd48 <siprintf>
	  sendATCommand(&huart3, txBuffer, strlen(txBuffer), 1000);
 8002502:	4884      	ldr	r0, [pc, #528]	; (8002714 <espCommunication+0x2d4>)
 8002504:	f7fd fec4 	bl	8000290 <strlen>
 8002508:	4603      	mov	r3, r0
 800250a:	461a      	mov	r2, r3
 800250c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002510:	4980      	ldr	r1, [pc, #512]	; (8002714 <espCommunication+0x2d4>)
 8002512:	4882      	ldr	r0, [pc, #520]	; (800271c <espCommunication+0x2dc>)
 8002514:	f7fe fcbb 	bl	8000e8e <sendATCommand>
	  receiveAnswer(&huart3, rxBuffer, sizeof(rxBuffer), 10000);
 8002518:	f242 7310 	movw	r3, #10000	; 0x2710
 800251c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002520:	497f      	ldr	r1, [pc, #508]	; (8002720 <espCommunication+0x2e0>)
 8002522:	487e      	ldr	r0, [pc, #504]	; (800271c <espCommunication+0x2dc>)
 8002524:	f7fe fcd7 	bl	8000ed6 <receiveAnswer>

	  taskEXIT_CRITICAL();
 8002528:	f008 fc2c 	bl	800ad84 <vPortExitCritical>

	  memset(rxBuffer, '\0', sizeof(rxBuffer));
 800252c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002530:	2100      	movs	r1, #0
 8002532:	487b      	ldr	r0, [pc, #492]	; (8002720 <espCommunication+0x2e0>)
 8002534:	f009 fc6b 	bl	800be0e <memset>
	  USART3->CR3 |= USART_CR3_DMAR;
 8002538:	4b7c      	ldr	r3, [pc, #496]	; (800272c <espCommunication+0x2ec>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	4a7b      	ldr	r2, [pc, #492]	; (800272c <espCommunication+0x2ec>)
 800253e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002542:	6093      	str	r3, [r2, #8]
	  DMA1_Channel3->CCR |= DMA_CCR_EN; //Starting continuous DMA on RX
 8002544:	4b7a      	ldr	r3, [pc, #488]	; (8002730 <espCommunication+0x2f0>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a79      	ldr	r2, [pc, #484]	; (8002730 <espCommunication+0x2f0>)
 800254a:	f043 0301 	orr.w	r3, r3, #1
 800254e:	6013      	str	r3, [r2, #0]

	  vTaskDelay( pdMS_TO_TICKS( 2000 ) );
 8002550:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002554:	f007 f96a 	bl	800982c <vTaskDelay>

	  sprintf(txBuffer, "ATE0\r\n");
 8002558:	4976      	ldr	r1, [pc, #472]	; (8002734 <espCommunication+0x2f4>)
 800255a:	486e      	ldr	r0, [pc, #440]	; (8002714 <espCommunication+0x2d4>)
 800255c:	f009 fbf4 	bl	800bd48 <siprintf>
	  sendATCommand(&huart3, txBuffer, strlen(txBuffer), 250);
 8002560:	486c      	ldr	r0, [pc, #432]	; (8002714 <espCommunication+0x2d4>)
 8002562:	f7fd fe95 	bl	8000290 <strlen>
 8002566:	4603      	mov	r3, r0
 8002568:	461a      	mov	r2, r3
 800256a:	23fa      	movs	r3, #250	; 0xfa
 800256c:	4969      	ldr	r1, [pc, #420]	; (8002714 <espCommunication+0x2d4>)
 800256e:	486b      	ldr	r0, [pc, #428]	; (800271c <espCommunication+0x2dc>)
 8002570:	f7fe fc8d 	bl	8000e8e <sendATCommand>
	  vTaskDelay( pdMS_TO_TICKS( 100 ) );
 8002574:	2064      	movs	r0, #100	; 0x64
 8002576:	f007 f959 	bl	800982c <vTaskDelay>

	  sprintf(txBuffer, "AT+CIPCLOSE\r\n");
 800257a:	496f      	ldr	r1, [pc, #444]	; (8002738 <espCommunication+0x2f8>)
 800257c:	4865      	ldr	r0, [pc, #404]	; (8002714 <espCommunication+0x2d4>)
 800257e:	f009 fbe3 	bl	800bd48 <siprintf>
	  sendATCommand(&huart3, txBuffer, strlen(txBuffer), 250);
 8002582:	4864      	ldr	r0, [pc, #400]	; (8002714 <espCommunication+0x2d4>)
 8002584:	f7fd fe84 	bl	8000290 <strlen>
 8002588:	4603      	mov	r3, r0
 800258a:	461a      	mov	r2, r3
 800258c:	23fa      	movs	r3, #250	; 0xfa
 800258e:	4961      	ldr	r1, [pc, #388]	; (8002714 <espCommunication+0x2d4>)
 8002590:	4862      	ldr	r0, [pc, #392]	; (800271c <espCommunication+0x2dc>)
 8002592:	f7fe fc7c 	bl	8000e8e <sendATCommand>
	  vTaskDelay( pdMS_TO_TICKS( 250 ) );
 8002596:	20fa      	movs	r0, #250	; 0xfa
 8002598:	f007 f948 	bl	800982c <vTaskDelay>

	  sprintf(txBuffer, "AT+CIPSTART=\"TCP\",\"192.168.137.1\",8080\r\n");
 800259c:	4967      	ldr	r1, [pc, #412]	; (800273c <espCommunication+0x2fc>)
 800259e:	485d      	ldr	r0, [pc, #372]	; (8002714 <espCommunication+0x2d4>)
 80025a0:	f009 fbd2 	bl	800bd48 <siprintf>
	  sendATCommand(&huart3, txBuffer, strlen(txBuffer), 250);
 80025a4:	485b      	ldr	r0, [pc, #364]	; (8002714 <espCommunication+0x2d4>)
 80025a6:	f7fd fe73 	bl	8000290 <strlen>
 80025aa:	4603      	mov	r3, r0
 80025ac:	461a      	mov	r2, r3
 80025ae:	23fa      	movs	r3, #250	; 0xfa
 80025b0:	4958      	ldr	r1, [pc, #352]	; (8002714 <espCommunication+0x2d4>)
 80025b2:	485a      	ldr	r0, [pc, #360]	; (800271c <espCommunication+0x2dc>)
 80025b4:	f7fe fc6b 	bl	8000e8e <sendATCommand>
	  vTaskDelay( pdMS_TO_TICKS( 40 ) );
 80025b8:	2028      	movs	r0, #40	; 0x28
 80025ba:	f007 f937 	bl	800982c <vTaskDelay>

	  memset(txBuffer, '\0', sizeof(txBuffer));
 80025be:	f240 12ff 	movw	r2, #511	; 0x1ff
 80025c2:	2100      	movs	r1, #0
 80025c4:	4853      	ldr	r0, [pc, #332]	; (8002714 <espCommunication+0x2d4>)
 80025c6:	f009 fc22 	bl	800be0e <memset>
      // Creating the entire GET request string
	  sprintf(txBuffer, "GET /robot HTTP/1.1\r\n"
 80025ca:	495d      	ldr	r1, [pc, #372]	; (8002740 <espCommunication+0x300>)
 80025cc:	4851      	ldr	r0, [pc, #324]	; (8002714 <espCommunication+0x2d4>)
 80025ce:	f009 fbbb 	bl	800bd48 <siprintf>
						  "Host: 192.168.137.1\r\n");
	  int getRequestLength = strlen(txBuffer);
 80025d2:	4850      	ldr	r0, [pc, #320]	; (8002714 <espCommunication+0x2d4>)
 80025d4:	f7fd fe5c 	bl	8000290 <strlen>
 80025d8:	4603      	mov	r3, r0
 80025da:	65bb      	str	r3, [r7, #88]	; 0x58
	  char pDataBuf[20];
	  sprintf(pDataBuf, "AT+CIPSEND=%d\r\n", getRequestLength);
 80025dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80025e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80025e2:	4958      	ldr	r1, [pc, #352]	; (8002744 <espCommunication+0x304>)
 80025e4:	4618      	mov	r0, r3
 80025e6:	f009 fbaf 	bl	800bd48 <siprintf>
	  sendATCommand(&huart3, pDataBuf, sizeof(pDataBuf), 250);
 80025ea:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80025ee:	23fa      	movs	r3, #250	; 0xfa
 80025f0:	2214      	movs	r2, #20
 80025f2:	484a      	ldr	r0, [pc, #296]	; (800271c <espCommunication+0x2dc>)
 80025f4:	f7fe fc4b 	bl	8000e8e <sendATCommand>
	  vTaskDelay( pdMS_TO_TICKS( 10 ) );
 80025f8:	200a      	movs	r0, #10
 80025fa:	f007 f917 	bl	800982c <vTaskDelay>
	  sendATCommand(&huart3, txBuffer, getRequestLength, 250);
 80025fe:	23fa      	movs	r3, #250	; 0xfa
 8002600:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002602:	4944      	ldr	r1, [pc, #272]	; (8002714 <espCommunication+0x2d4>)
 8002604:	4845      	ldr	r0, [pc, #276]	; (800271c <espCommunication+0x2dc>)
 8002606:	f7fe fc42 	bl	8000e8e <sendATCommand>

	  memset(txBuffer, '\0', sizeof(txBuffer));
 800260a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800260e:	2100      	movs	r1, #0
 8002610:	4840      	ldr	r0, [pc, #256]	; (8002714 <espCommunication+0x2d4>)
 8002612:	f009 fbfc 	bl	800be0e <memset>
	  vTaskDelay( pdMS_TO_TICKS( 50 ) );
 8002616:	2032      	movs	r0, #50	; 0x32
 8002618:	f007 f908 	bl	800982c <vTaskDelay>

	  NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800261c:	2018      	movs	r0, #24
 800261e:	f7fe fe97 	bl	8001350 <__NVIC_EnableIRQ>
	  __asm__ volatile("NOP");
 8002622:	bf00      	nop

  /* Infinite loop */
  for(;;)
  {
	  debugVar = 1;
 8002624:	4b48      	ldr	r3, [pc, #288]	; (8002748 <espCommunication+0x308>)
 8002626:	2201      	movs	r2, #1
 8002628:	601a      	str	r2, [r3, #0]
	  // Calculate the number of bytes received since the last processing
//	  uint8_t receivedBytes = 0;
	  if((ESPRXBUFFERSIZE - DMA1_Channel3->CNDTR) < rxBufferHead) {
 800262a:	4b41      	ldr	r3, [pc, #260]	; (8002730 <espCommunication+0x2f0>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f5c3 73ff 	rsb	r3, r3, #510	; 0x1fe
 8002632:	3301      	adds	r3, #1
 8002634:	4a45      	ldr	r2, [pc, #276]	; (800274c <espCommunication+0x30c>)
 8002636:	8812      	ldrh	r2, [r2, #0]
 8002638:	b292      	uxth	r2, r2
 800263a:	4293      	cmp	r3, r2
 800263c:	d218      	bcs.n	8002670 <espCommunication+0x230>
		  receivedBytes = (ESPRXBUFFERSIZE - rxBufferHead + ESPRXBUFFERSIZE - DMA1_Channel3->CNDTR) % ESPRXBUFFERSIZE;
 800263e:	4b43      	ldr	r3, [pc, #268]	; (800274c <espCommunication+0x30c>)
 8002640:	881b      	ldrh	r3, [r3, #0]
 8002642:	b29b      	uxth	r3, r3
 8002644:	461a      	mov	r2, r3
 8002646:	4b3a      	ldr	r3, [pc, #232]	; (8002730 <espCommunication+0x2f0>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	4413      	add	r3, r2
 800264c:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8002650:	3302      	adds	r3, #2
 8002652:	4a3f      	ldr	r2, [pc, #252]	; (8002750 <espCommunication+0x310>)
 8002654:	fba2 1203 	umull	r1, r2, r2, r3
 8002658:	1a99      	subs	r1, r3, r2
 800265a:	0849      	lsrs	r1, r1, #1
 800265c:	440a      	add	r2, r1
 800265e:	0a11      	lsrs	r1, r2, #8
 8002660:	460a      	mov	r2, r1
 8002662:	0252      	lsls	r2, r2, #9
 8002664:	1a52      	subs	r2, r2, r1
 8002666:	1a99      	subs	r1, r3, r2
 8002668:	b2ca      	uxtb	r2, r1
 800266a:	4b3a      	ldr	r3, [pc, #232]	; (8002754 <espCommunication+0x314>)
 800266c:	701a      	strb	r2, [r3, #0]
 800266e:	e016      	b.n	800269e <espCommunication+0x25e>
	  } else {
		  receivedBytes = (ESPRXBUFFERSIZE - DMA1_Channel3->CNDTR -rxBufferHead) % ESPRXBUFFERSIZE;
 8002670:	4b2f      	ldr	r3, [pc, #188]	; (8002730 <espCommunication+0x2f0>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	4a35      	ldr	r2, [pc, #212]	; (800274c <espCommunication+0x30c>)
 8002676:	8812      	ldrh	r2, [r2, #0]
 8002678:	b292      	uxth	r2, r2
 800267a:	4413      	add	r3, r2
 800267c:	f5c3 73ff 	rsb	r3, r3, #510	; 0x1fe
 8002680:	3301      	adds	r3, #1
 8002682:	4a33      	ldr	r2, [pc, #204]	; (8002750 <espCommunication+0x310>)
 8002684:	fba2 1203 	umull	r1, r2, r2, r3
 8002688:	1a99      	subs	r1, r3, r2
 800268a:	0849      	lsrs	r1, r1, #1
 800268c:	440a      	add	r2, r1
 800268e:	0a11      	lsrs	r1, r2, #8
 8002690:	460a      	mov	r2, r1
 8002692:	0252      	lsls	r2, r2, #9
 8002694:	1a52      	subs	r2, r2, r1
 8002696:	1a99      	subs	r1, r3, r2
 8002698:	b2ca      	uxtb	r2, r1
 800269a:	4b2e      	ldr	r3, [pc, #184]	; (8002754 <espCommunication+0x314>)
 800269c:	701a      	strb	r2, [r3, #0]
	  }

	  uint16_t sizeRxBufCopy = sizeof(rxBufferCopy);
 800269e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026a2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	  memset(rxBufferCopy, '\0', sizeRxBufCopy);
 80026a6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80026aa:	461a      	mov	r2, r3
 80026ac:	2100      	movs	r1, #0
 80026ae:	482a      	ldr	r0, [pc, #168]	; (8002758 <espCommunication+0x318>)
 80026b0:	f009 fbad 	bl	800be0e <memset>
	  for(uint16_t i = 0; i < receivedBytes; i++) {
 80026b4:	2300      	movs	r3, #0
 80026b6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80026ba:	e019      	b.n	80026f0 <espCommunication+0x2b0>
		  rxBufferCopy[i] = rxBuffer[(rxBufferHead + i)%sizeRxBufCopy];
 80026bc:	4b23      	ldr	r3, [pc, #140]	; (800274c <espCommunication+0x30c>)
 80026be:	881b      	ldrh	r3, [r3, #0]
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	461a      	mov	r2, r3
 80026c4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80026c8:	4413      	add	r3, r2
 80026ca:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 80026ce:	fb93 f1f2 	sdiv	r1, r3, r2
 80026d2:	fb01 f202 	mul.w	r2, r1, r2
 80026d6:	1a9a      	subs	r2, r3, r2
 80026d8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80026dc:	4910      	ldr	r1, [pc, #64]	; (8002720 <espCommunication+0x2e0>)
 80026de:	5c8a      	ldrb	r2, [r1, r2]
 80026e0:	b2d1      	uxtb	r1, r2
 80026e2:	4a1d      	ldr	r2, [pc, #116]	; (8002758 <espCommunication+0x318>)
 80026e4:	54d1      	strb	r1, [r2, r3]
	  for(uint16_t i = 0; i < receivedBytes; i++) {
 80026e6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80026ea:	3301      	adds	r3, #1
 80026ec:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80026f0:	4b18      	ldr	r3, [pc, #96]	; (8002754 <espCommunication+0x314>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d3de      	bcc.n	80026bc <espCommunication+0x27c>
	  }

	  debugVar = 5;
 80026fe:	4b12      	ldr	r3, [pc, #72]	; (8002748 <espCommunication+0x308>)
 8002700:	2205      	movs	r2, #5
 8002702:	601a      	str	r2, [r3, #0]

	  // Process the received data
	  for(uint16_t i = 0; i < receivedBytes; i++) {
 8002704:	2300      	movs	r3, #0
 8002706:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800270a:	e22b      	b.n	8002b64 <espCommunication+0x724>
 800270c:	48000400 	.word	0x48000400
 8002710:	0800efe8 	.word	0x0800efe8
 8002714:	20000a70 	.word	0x20000a70
 8002718:	0800f240 	.word	0x0800f240
 800271c:	20000880 	.word	0x20000880
 8002720:	20000c70 	.word	0x20000c70
 8002724:	0800eff0 	.word	0x0800eff0
 8002728:	0800f004 	.word	0x0800f004
 800272c:	40004800 	.word	0x40004800
 8002730:	40020030 	.word	0x40020030
 8002734:	0800f034 	.word	0x0800f034
 8002738:	0800f03c 	.word	0x0800f03c
 800273c:	0800f04c 	.word	0x0800f04c
 8002740:	0800f078 	.word	0x0800f078
 8002744:	0800f0a4 	.word	0x0800f0a4
 8002748:	20000f94 	.word	0x20000f94
 800274c:	20000e70 	.word	0x20000e70
 8002750:	00804021 	.word	0x00804021
 8002754:	20000e72 	.word	0x20000e72
 8002758:	20000e74 	.word	0x20000e74
		  debugVar = 6;
 800275c:	4b9a      	ldr	r3, [pc, #616]	; (80029c8 <espCommunication+0x588>)
 800275e:	2206      	movs	r2, #6
 8002760:	601a      	str	r2, [r3, #0]
		  debugVar2 = i;
 8002762:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002766:	4a99      	ldr	r2, [pc, #612]	; (80029cc <espCommunication+0x58c>)
 8002768:	6013      	str	r3, [r2, #0]
		  if((rxBuffer[(rxBufferHead + i)%ESPRXBUFFERSIZE] == 'T') &&
 800276a:	4b99      	ldr	r3, [pc, #612]	; (80029d0 <espCommunication+0x590>)
 800276c:	881b      	ldrh	r3, [r3, #0]
 800276e:	b29b      	uxth	r3, r3
 8002770:	461a      	mov	r2, r3
 8002772:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002776:	441a      	add	r2, r3
 8002778:	4b96      	ldr	r3, [pc, #600]	; (80029d4 <espCommunication+0x594>)
 800277a:	fb83 1302 	smull	r1, r3, r3, r2
 800277e:	4413      	add	r3, r2
 8002780:	1219      	asrs	r1, r3, #8
 8002782:	17d3      	asrs	r3, r2, #31
 8002784:	1ac9      	subs	r1, r1, r3
 8002786:	460b      	mov	r3, r1
 8002788:	025b      	lsls	r3, r3, #9
 800278a:	1a5b      	subs	r3, r3, r1
 800278c:	1ad1      	subs	r1, r2, r3
 800278e:	4b92      	ldr	r3, [pc, #584]	; (80029d8 <espCommunication+0x598>)
 8002790:	5c5b      	ldrb	r3, [r3, r1]
 8002792:	b2db      	uxtb	r3, r3
 8002794:	2b54      	cmp	r3, #84	; 0x54
 8002796:	f040 8098 	bne.w	80028ca <espCommunication+0x48a>
		     (rxBuffer[(rxBufferHead + i + 1)%ESPRXBUFFERSIZE] == 'S') &&
 800279a:	4b8d      	ldr	r3, [pc, #564]	; (80029d0 <espCommunication+0x590>)
 800279c:	881b      	ldrh	r3, [r3, #0]
 800279e:	b29b      	uxth	r3, r3
 80027a0:	461a      	mov	r2, r3
 80027a2:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80027a6:	4413      	add	r3, r2
 80027a8:	1c5a      	adds	r2, r3, #1
 80027aa:	4b8a      	ldr	r3, [pc, #552]	; (80029d4 <espCommunication+0x594>)
 80027ac:	fb83 1302 	smull	r1, r3, r3, r2
 80027b0:	4413      	add	r3, r2
 80027b2:	1219      	asrs	r1, r3, #8
 80027b4:	17d3      	asrs	r3, r2, #31
 80027b6:	1ac9      	subs	r1, r1, r3
 80027b8:	460b      	mov	r3, r1
 80027ba:	025b      	lsls	r3, r3, #9
 80027bc:	1a5b      	subs	r3, r3, r1
 80027be:	1ad1      	subs	r1, r2, r3
 80027c0:	4b85      	ldr	r3, [pc, #532]	; (80029d8 <espCommunication+0x598>)
 80027c2:	5c5b      	ldrb	r3, [r3, r1]
 80027c4:	b2db      	uxtb	r3, r3
		  if((rxBuffer[(rxBufferHead + i)%ESPRXBUFFERSIZE] == 'T') &&
 80027c6:	2b53      	cmp	r3, #83	; 0x53
 80027c8:	d17f      	bne.n	80028ca <espCommunication+0x48a>
			 (rxBuffer[(rxBufferHead + i + 2)%ESPRXBUFFERSIZE] == 'P')) {
 80027ca:	4b81      	ldr	r3, [pc, #516]	; (80029d0 <espCommunication+0x590>)
 80027cc:	881b      	ldrh	r3, [r3, #0]
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	461a      	mov	r2, r3
 80027d2:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80027d6:	4413      	add	r3, r2
 80027d8:	1c9a      	adds	r2, r3, #2
 80027da:	4b7e      	ldr	r3, [pc, #504]	; (80029d4 <espCommunication+0x594>)
 80027dc:	fb83 1302 	smull	r1, r3, r3, r2
 80027e0:	4413      	add	r3, r2
 80027e2:	1219      	asrs	r1, r3, #8
 80027e4:	17d3      	asrs	r3, r2, #31
 80027e6:	1ac9      	subs	r1, r1, r3
 80027e8:	460b      	mov	r3, r1
 80027ea:	025b      	lsls	r3, r3, #9
 80027ec:	1a5b      	subs	r3, r3, r1
 80027ee:	1ad1      	subs	r1, r2, r3
 80027f0:	4b79      	ldr	r3, [pc, #484]	; (80029d8 <espCommunication+0x598>)
 80027f2:	5c5b      	ldrb	r3, [r3, r1]
 80027f4:	b2db      	uxtb	r3, r3
		     (rxBuffer[(rxBufferHead + i + 1)%ESPRXBUFFERSIZE] == 'S') &&
 80027f6:	2b50      	cmp	r3, #80	; 0x50
 80027f8:	d167      	bne.n	80028ca <espCommunication+0x48a>
			  if(rxBuffer[(rxBufferHead + i + 3)%ESPRXBUFFERSIZE] == '-') {
 80027fa:	4b75      	ldr	r3, [pc, #468]	; (80029d0 <espCommunication+0x590>)
 80027fc:	881b      	ldrh	r3, [r3, #0]
 80027fe:	b29b      	uxth	r3, r3
 8002800:	461a      	mov	r2, r3
 8002802:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002806:	4413      	add	r3, r2
 8002808:	1cda      	adds	r2, r3, #3
 800280a:	4b72      	ldr	r3, [pc, #456]	; (80029d4 <espCommunication+0x594>)
 800280c:	fb83 1302 	smull	r1, r3, r3, r2
 8002810:	4413      	add	r3, r2
 8002812:	1219      	asrs	r1, r3, #8
 8002814:	17d3      	asrs	r3, r2, #31
 8002816:	1ac9      	subs	r1, r1, r3
 8002818:	460b      	mov	r3, r1
 800281a:	025b      	lsls	r3, r3, #9
 800281c:	1a5b      	subs	r3, r3, r1
 800281e:	1ad1      	subs	r1, r2, r3
 8002820:	4b6d      	ldr	r3, [pc, #436]	; (80029d8 <espCommunication+0x598>)
 8002822:	5c5b      	ldrb	r3, [r3, r1]
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b2d      	cmp	r3, #45	; 0x2d
 8002828:	d119      	bne.n	800285e <espCommunication+0x41e>
				  if(rxBuffer[(rxBufferHead + i + 8)%ESPRXBUFFERSIZE] != '_') continue;
 800282a:	4b69      	ldr	r3, [pc, #420]	; (80029d0 <espCommunication+0x590>)
 800282c:	881b      	ldrh	r3, [r3, #0]
 800282e:	b29b      	uxth	r3, r3
 8002830:	461a      	mov	r2, r3
 8002832:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002836:	4413      	add	r3, r2
 8002838:	f103 0208 	add.w	r2, r3, #8
 800283c:	4b65      	ldr	r3, [pc, #404]	; (80029d4 <espCommunication+0x594>)
 800283e:	fb83 1302 	smull	r1, r3, r3, r2
 8002842:	4413      	add	r3, r2
 8002844:	1219      	asrs	r1, r3, #8
 8002846:	17d3      	asrs	r3, r2, #31
 8002848:	1ac9      	subs	r1, r1, r3
 800284a:	460b      	mov	r3, r1
 800284c:	025b      	lsls	r3, r3, #9
 800284e:	1a5b      	subs	r3, r3, r1
 8002850:	1ad1      	subs	r1, r2, r3
 8002852:	4b61      	ldr	r3, [pc, #388]	; (80029d8 <espCommunication+0x598>)
 8002854:	5c5b      	ldrb	r3, [r3, r1]
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b5f      	cmp	r3, #95	; 0x5f
 800285a:	d019      	beq.n	8002890 <espCommunication+0x450>
 800285c:	e17d      	b.n	8002b5a <espCommunication+0x71a>
			  } else {
				  if(rxBuffer[(rxBufferHead + i + 7)%ESPRXBUFFERSIZE] != '_') continue;
 800285e:	4b5c      	ldr	r3, [pc, #368]	; (80029d0 <espCommunication+0x590>)
 8002860:	881b      	ldrh	r3, [r3, #0]
 8002862:	b29b      	uxth	r3, r3
 8002864:	461a      	mov	r2, r3
 8002866:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800286a:	4413      	add	r3, r2
 800286c:	1dda      	adds	r2, r3, #7
 800286e:	4b59      	ldr	r3, [pc, #356]	; (80029d4 <espCommunication+0x594>)
 8002870:	fb83 1302 	smull	r1, r3, r3, r2
 8002874:	4413      	add	r3, r2
 8002876:	1219      	asrs	r1, r3, #8
 8002878:	17d3      	asrs	r3, r2, #31
 800287a:	1ac9      	subs	r1, r1, r3
 800287c:	460b      	mov	r3, r1
 800287e:	025b      	lsls	r3, r3, #9
 8002880:	1a5b      	subs	r3, r3, r1
 8002882:	1ad1      	subs	r1, r2, r3
 8002884:	4b54      	ldr	r3, [pc, #336]	; (80029d8 <espCommunication+0x598>)
 8002886:	5c5b      	ldrb	r3, [r3, r1]
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b5f      	cmp	r3, #95	; 0x5f
 800288c:	f040 8162 	bne.w	8002b54 <espCommunication+0x714>
			  }
			  tSpeed = parseFloat(rxBuffer, ((rxBufferHead + i + 3)%ESPRXBUFFERSIZE));
 8002890:	4b4f      	ldr	r3, [pc, #316]	; (80029d0 <espCommunication+0x590>)
 8002892:	881b      	ldrh	r3, [r3, #0]
 8002894:	b29b      	uxth	r3, r3
 8002896:	461a      	mov	r2, r3
 8002898:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800289c:	4413      	add	r3, r2
 800289e:	1cda      	adds	r2, r3, #3
 80028a0:	4b4c      	ldr	r3, [pc, #304]	; (80029d4 <espCommunication+0x594>)
 80028a2:	fb83 1302 	smull	r1, r3, r3, r2
 80028a6:	4413      	add	r3, r2
 80028a8:	1219      	asrs	r1, r3, #8
 80028aa:	17d3      	asrs	r3, r2, #31
 80028ac:	1ac9      	subs	r1, r1, r3
 80028ae:	460b      	mov	r3, r1
 80028b0:	025b      	lsls	r3, r3, #9
 80028b2:	1a5b      	subs	r3, r3, r1
 80028b4:	1ad1      	subs	r1, r2, r3
 80028b6:	b28b      	uxth	r3, r1
 80028b8:	4619      	mov	r1, r3
 80028ba:	4847      	ldr	r0, [pc, #284]	; (80029d8 <espCommunication+0x598>)
 80028bc:	f7fe fb88 	bl	8000fd0 <parseFloat>
 80028c0:	eef0 7a40 	vmov.f32	s15, s0
 80028c4:	4b45      	ldr	r3, [pc, #276]	; (80029dc <espCommunication+0x59c>)
 80028c6:	edc3 7a00 	vstr	s15, [r3]
		  }
		  debugVar = 10;
 80028ca:	4b3f      	ldr	r3, [pc, #252]	; (80029c8 <espCommunication+0x588>)
 80028cc:	220a      	movs	r2, #10
 80028ce:	601a      	str	r2, [r3, #0]
		  if((rxBuffer[(rxBufferHead + i)%ESPRXBUFFERSIZE] == 'A') &&
 80028d0:	4b3f      	ldr	r3, [pc, #252]	; (80029d0 <espCommunication+0x590>)
 80028d2:	881b      	ldrh	r3, [r3, #0]
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	461a      	mov	r2, r3
 80028d8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80028dc:	441a      	add	r2, r3
 80028de:	4b3d      	ldr	r3, [pc, #244]	; (80029d4 <espCommunication+0x594>)
 80028e0:	fb83 1302 	smull	r1, r3, r3, r2
 80028e4:	4413      	add	r3, r2
 80028e6:	1219      	asrs	r1, r3, #8
 80028e8:	17d3      	asrs	r3, r2, #31
 80028ea:	1ac9      	subs	r1, r1, r3
 80028ec:	460b      	mov	r3, r1
 80028ee:	025b      	lsls	r3, r3, #9
 80028f0:	1a5b      	subs	r3, r3, r1
 80028f2:	1ad1      	subs	r1, r2, r3
 80028f4:	4b38      	ldr	r3, [pc, #224]	; (80029d8 <espCommunication+0x598>)
 80028f6:	5c5b      	ldrb	r3, [r3, r1]
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b41      	cmp	r3, #65	; 0x41
 80028fc:	f040 80a6 	bne.w	8002a4c <espCommunication+0x60c>
		     (rxBuffer[(rxBufferHead + i + 1)%ESPRXBUFFERSIZE] == 'S') &&
 8002900:	4b33      	ldr	r3, [pc, #204]	; (80029d0 <espCommunication+0x590>)
 8002902:	881b      	ldrh	r3, [r3, #0]
 8002904:	b29b      	uxth	r3, r3
 8002906:	461a      	mov	r2, r3
 8002908:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800290c:	4413      	add	r3, r2
 800290e:	1c5a      	adds	r2, r3, #1
 8002910:	4b30      	ldr	r3, [pc, #192]	; (80029d4 <espCommunication+0x594>)
 8002912:	fb83 1302 	smull	r1, r3, r3, r2
 8002916:	4413      	add	r3, r2
 8002918:	1219      	asrs	r1, r3, #8
 800291a:	17d3      	asrs	r3, r2, #31
 800291c:	1ac9      	subs	r1, r1, r3
 800291e:	460b      	mov	r3, r1
 8002920:	025b      	lsls	r3, r3, #9
 8002922:	1a5b      	subs	r3, r3, r1
 8002924:	1ad1      	subs	r1, r2, r3
 8002926:	4b2c      	ldr	r3, [pc, #176]	; (80029d8 <espCommunication+0x598>)
 8002928:	5c5b      	ldrb	r3, [r3, r1]
 800292a:	b2db      	uxtb	r3, r3
		  if((rxBuffer[(rxBufferHead + i)%ESPRXBUFFERSIZE] == 'A') &&
 800292c:	2b53      	cmp	r3, #83	; 0x53
 800292e:	f040 808d 	bne.w	8002a4c <espCommunication+0x60c>
			 (rxBuffer[(rxBufferHead + i + 2)%ESPRXBUFFERSIZE] == 'P')) {
 8002932:	4b27      	ldr	r3, [pc, #156]	; (80029d0 <espCommunication+0x590>)
 8002934:	881b      	ldrh	r3, [r3, #0]
 8002936:	b29b      	uxth	r3, r3
 8002938:	461a      	mov	r2, r3
 800293a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800293e:	4413      	add	r3, r2
 8002940:	1c9a      	adds	r2, r3, #2
 8002942:	4b24      	ldr	r3, [pc, #144]	; (80029d4 <espCommunication+0x594>)
 8002944:	fb83 1302 	smull	r1, r3, r3, r2
 8002948:	4413      	add	r3, r2
 800294a:	1219      	asrs	r1, r3, #8
 800294c:	17d3      	asrs	r3, r2, #31
 800294e:	1ac9      	subs	r1, r1, r3
 8002950:	460b      	mov	r3, r1
 8002952:	025b      	lsls	r3, r3, #9
 8002954:	1a5b      	subs	r3, r3, r1
 8002956:	1ad1      	subs	r1, r2, r3
 8002958:	4b1f      	ldr	r3, [pc, #124]	; (80029d8 <espCommunication+0x598>)
 800295a:	5c5b      	ldrb	r3, [r3, r1]
 800295c:	b2db      	uxtb	r3, r3
		     (rxBuffer[(rxBufferHead + i + 1)%ESPRXBUFFERSIZE] == 'S') &&
 800295e:	2b50      	cmp	r3, #80	; 0x50
 8002960:	d174      	bne.n	8002a4c <espCommunication+0x60c>
			  if(rxBuffer[(rxBufferHead + i + 3)%ESPRXBUFFERSIZE] == '-') {
 8002962:	4b1b      	ldr	r3, [pc, #108]	; (80029d0 <espCommunication+0x590>)
 8002964:	881b      	ldrh	r3, [r3, #0]
 8002966:	b29b      	uxth	r3, r3
 8002968:	461a      	mov	r2, r3
 800296a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800296e:	4413      	add	r3, r2
 8002970:	1cda      	adds	r2, r3, #3
 8002972:	4b18      	ldr	r3, [pc, #96]	; (80029d4 <espCommunication+0x594>)
 8002974:	fb83 1302 	smull	r1, r3, r3, r2
 8002978:	4413      	add	r3, r2
 800297a:	1219      	asrs	r1, r3, #8
 800297c:	17d3      	asrs	r3, r2, #31
 800297e:	1ac9      	subs	r1, r1, r3
 8002980:	460b      	mov	r3, r1
 8002982:	025b      	lsls	r3, r3, #9
 8002984:	1a5b      	subs	r3, r3, r1
 8002986:	1ad1      	subs	r1, r2, r3
 8002988:	4b13      	ldr	r3, [pc, #76]	; (80029d8 <espCommunication+0x598>)
 800298a:	5c5b      	ldrb	r3, [r3, r1]
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b2d      	cmp	r3, #45	; 0x2d
 8002990:	d126      	bne.n	80029e0 <espCommunication+0x5a0>
				  if(rxBuffer[(rxBufferHead + i + 8)%ESPRXBUFFERSIZE] != '_') continue;
 8002992:	4b0f      	ldr	r3, [pc, #60]	; (80029d0 <espCommunication+0x590>)
 8002994:	881b      	ldrh	r3, [r3, #0]
 8002996:	b29b      	uxth	r3, r3
 8002998:	461a      	mov	r2, r3
 800299a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800299e:	4413      	add	r3, r2
 80029a0:	f103 0208 	add.w	r2, r3, #8
 80029a4:	4b0b      	ldr	r3, [pc, #44]	; (80029d4 <espCommunication+0x594>)
 80029a6:	fb83 1302 	smull	r1, r3, r3, r2
 80029aa:	4413      	add	r3, r2
 80029ac:	1219      	asrs	r1, r3, #8
 80029ae:	17d3      	asrs	r3, r2, #31
 80029b0:	1ac9      	subs	r1, r1, r3
 80029b2:	460b      	mov	r3, r1
 80029b4:	025b      	lsls	r3, r3, #9
 80029b6:	1a5b      	subs	r3, r3, r1
 80029b8:	1ad1      	subs	r1, r2, r3
 80029ba:	4b07      	ldr	r3, [pc, #28]	; (80029d8 <espCommunication+0x598>)
 80029bc:	5c5b      	ldrb	r3, [r3, r1]
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	2b5f      	cmp	r3, #95	; 0x5f
 80029c2:	d026      	beq.n	8002a12 <espCommunication+0x5d2>
 80029c4:	e0c9      	b.n	8002b5a <espCommunication+0x71a>
 80029c6:	bf00      	nop
 80029c8:	20000f94 	.word	0x20000f94
 80029cc:	20000f98 	.word	0x20000f98
 80029d0:	20000e70 	.word	0x20000e70
 80029d4:	80402011 	.word	0x80402011
 80029d8:	20000c70 	.word	0x20000c70
 80029dc:	20000f7c 	.word	0x20000f7c
			  } else {
				  if(rxBuffer[(rxBufferHead + i + 7)%ESPRXBUFFERSIZE] != '_') continue;
 80029e0:	4bab      	ldr	r3, [pc, #684]	; (8002c90 <espCommunication+0x850>)
 80029e2:	881b      	ldrh	r3, [r3, #0]
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	461a      	mov	r2, r3
 80029e8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80029ec:	4413      	add	r3, r2
 80029ee:	1dda      	adds	r2, r3, #7
 80029f0:	4ba8      	ldr	r3, [pc, #672]	; (8002c94 <espCommunication+0x854>)
 80029f2:	fb83 1302 	smull	r1, r3, r3, r2
 80029f6:	4413      	add	r3, r2
 80029f8:	1219      	asrs	r1, r3, #8
 80029fa:	17d3      	asrs	r3, r2, #31
 80029fc:	1ac9      	subs	r1, r1, r3
 80029fe:	460b      	mov	r3, r1
 8002a00:	025b      	lsls	r3, r3, #9
 8002a02:	1a5b      	subs	r3, r3, r1
 8002a04:	1ad1      	subs	r1, r2, r3
 8002a06:	4ba4      	ldr	r3, [pc, #656]	; (8002c98 <espCommunication+0x858>)
 8002a08:	5c5b      	ldrb	r3, [r3, r1]
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	2b5f      	cmp	r3, #95	; 0x5f
 8002a0e:	f040 80a3 	bne.w	8002b58 <espCommunication+0x718>
			  }
			  aSpeed = parseFloat(rxBuffer, ((rxBufferHead + i + 3)%ESPRXBUFFERSIZE));
 8002a12:	4b9f      	ldr	r3, [pc, #636]	; (8002c90 <espCommunication+0x850>)
 8002a14:	881b      	ldrh	r3, [r3, #0]
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	461a      	mov	r2, r3
 8002a1a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002a1e:	4413      	add	r3, r2
 8002a20:	1cda      	adds	r2, r3, #3
 8002a22:	4b9c      	ldr	r3, [pc, #624]	; (8002c94 <espCommunication+0x854>)
 8002a24:	fb83 1302 	smull	r1, r3, r3, r2
 8002a28:	4413      	add	r3, r2
 8002a2a:	1219      	asrs	r1, r3, #8
 8002a2c:	17d3      	asrs	r3, r2, #31
 8002a2e:	1ac9      	subs	r1, r1, r3
 8002a30:	460b      	mov	r3, r1
 8002a32:	025b      	lsls	r3, r3, #9
 8002a34:	1a5b      	subs	r3, r3, r1
 8002a36:	1ad1      	subs	r1, r2, r3
 8002a38:	b28b      	uxth	r3, r1
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	4896      	ldr	r0, [pc, #600]	; (8002c98 <espCommunication+0x858>)
 8002a3e:	f7fe fac7 	bl	8000fd0 <parseFloat>
 8002a42:	eef0 7a40 	vmov.f32	s15, s0
 8002a46:	4b95      	ldr	r3, [pc, #596]	; (8002c9c <espCommunication+0x85c>)
 8002a48:	edc3 7a00 	vstr	s15, [r3]
		  }

		  debugVar = 12;
 8002a4c:	4b94      	ldr	r3, [pc, #592]	; (8002ca0 <espCommunication+0x860>)
 8002a4e:	220c      	movs	r2, #12
 8002a50:	601a      	str	r2, [r3, #0]
		  if((rxBuffer[(rxBufferHead + i)%ESPRXBUFFERSIZE] == 'E') &&
 8002a52:	4b8f      	ldr	r3, [pc, #572]	; (8002c90 <espCommunication+0x850>)
 8002a54:	881b      	ldrh	r3, [r3, #0]
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	461a      	mov	r2, r3
 8002a5a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002a5e:	441a      	add	r2, r3
 8002a60:	4b8c      	ldr	r3, [pc, #560]	; (8002c94 <espCommunication+0x854>)
 8002a62:	fb83 1302 	smull	r1, r3, r3, r2
 8002a66:	4413      	add	r3, r2
 8002a68:	1219      	asrs	r1, r3, #8
 8002a6a:	17d3      	asrs	r3, r2, #31
 8002a6c:	1ac9      	subs	r1, r1, r3
 8002a6e:	460b      	mov	r3, r1
 8002a70:	025b      	lsls	r3, r3, #9
 8002a72:	1a5b      	subs	r3, r3, r1
 8002a74:	1ad1      	subs	r1, r2, r3
 8002a76:	4b88      	ldr	r3, [pc, #544]	; (8002c98 <espCommunication+0x858>)
 8002a78:	5c5b      	ldrb	r3, [r3, r1]
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b45      	cmp	r3, #69	; 0x45
 8002a7e:	d165      	bne.n	8002b4c <espCommunication+0x70c>
		     (rxBuffer[(rxBufferHead + i + 1)%ESPRXBUFFERSIZE] == 'R') &&
 8002a80:	4b83      	ldr	r3, [pc, #524]	; (8002c90 <espCommunication+0x850>)
 8002a82:	881b      	ldrh	r3, [r3, #0]
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	461a      	mov	r2, r3
 8002a88:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002a8c:	4413      	add	r3, r2
 8002a8e:	1c5a      	adds	r2, r3, #1
 8002a90:	4b80      	ldr	r3, [pc, #512]	; (8002c94 <espCommunication+0x854>)
 8002a92:	fb83 1302 	smull	r1, r3, r3, r2
 8002a96:	4413      	add	r3, r2
 8002a98:	1219      	asrs	r1, r3, #8
 8002a9a:	17d3      	asrs	r3, r2, #31
 8002a9c:	1ac9      	subs	r1, r1, r3
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	025b      	lsls	r3, r3, #9
 8002aa2:	1a5b      	subs	r3, r3, r1
 8002aa4:	1ad1      	subs	r1, r2, r3
 8002aa6:	4b7c      	ldr	r3, [pc, #496]	; (8002c98 <espCommunication+0x858>)
 8002aa8:	5c5b      	ldrb	r3, [r3, r1]
 8002aaa:	b2db      	uxtb	r3, r3
		  if((rxBuffer[(rxBufferHead + i)%ESPRXBUFFERSIZE] == 'E') &&
 8002aac:	2b52      	cmp	r3, #82	; 0x52
 8002aae:	d14d      	bne.n	8002b4c <espCommunication+0x70c>
			 (rxBuffer[(rxBufferHead + i + 2)%ESPRXBUFFERSIZE] == 'R') &&
 8002ab0:	4b77      	ldr	r3, [pc, #476]	; (8002c90 <espCommunication+0x850>)
 8002ab2:	881b      	ldrh	r3, [r3, #0]
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002abc:	4413      	add	r3, r2
 8002abe:	1c9a      	adds	r2, r3, #2
 8002ac0:	4b74      	ldr	r3, [pc, #464]	; (8002c94 <espCommunication+0x854>)
 8002ac2:	fb83 1302 	smull	r1, r3, r3, r2
 8002ac6:	4413      	add	r3, r2
 8002ac8:	1219      	asrs	r1, r3, #8
 8002aca:	17d3      	asrs	r3, r2, #31
 8002acc:	1ac9      	subs	r1, r1, r3
 8002ace:	460b      	mov	r3, r1
 8002ad0:	025b      	lsls	r3, r3, #9
 8002ad2:	1a5b      	subs	r3, r3, r1
 8002ad4:	1ad1      	subs	r1, r2, r3
 8002ad6:	4b70      	ldr	r3, [pc, #448]	; (8002c98 <espCommunication+0x858>)
 8002ad8:	5c5b      	ldrb	r3, [r3, r1]
 8002ada:	b2db      	uxtb	r3, r3
		     (rxBuffer[(rxBufferHead + i + 1)%ESPRXBUFFERSIZE] == 'R') &&
 8002adc:	2b52      	cmp	r3, #82	; 0x52
 8002ade:	d135      	bne.n	8002b4c <espCommunication+0x70c>
			 (rxBuffer[(rxBufferHead + i + 3)%ESPRXBUFFERSIZE] == 'O') &&
 8002ae0:	4b6b      	ldr	r3, [pc, #428]	; (8002c90 <espCommunication+0x850>)
 8002ae2:	881b      	ldrh	r3, [r3, #0]
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002aec:	4413      	add	r3, r2
 8002aee:	1cda      	adds	r2, r3, #3
 8002af0:	4b68      	ldr	r3, [pc, #416]	; (8002c94 <espCommunication+0x854>)
 8002af2:	fb83 1302 	smull	r1, r3, r3, r2
 8002af6:	4413      	add	r3, r2
 8002af8:	1219      	asrs	r1, r3, #8
 8002afa:	17d3      	asrs	r3, r2, #31
 8002afc:	1ac9      	subs	r1, r1, r3
 8002afe:	460b      	mov	r3, r1
 8002b00:	025b      	lsls	r3, r3, #9
 8002b02:	1a5b      	subs	r3, r3, r1
 8002b04:	1ad1      	subs	r1, r2, r3
 8002b06:	4b64      	ldr	r3, [pc, #400]	; (8002c98 <espCommunication+0x858>)
 8002b08:	5c5b      	ldrb	r3, [r3, r1]
 8002b0a:	b2db      	uxtb	r3, r3
			 (rxBuffer[(rxBufferHead + i + 2)%ESPRXBUFFERSIZE] == 'R') &&
 8002b0c:	2b4f      	cmp	r3, #79	; 0x4f
 8002b0e:	d11d      	bne.n	8002b4c <espCommunication+0x70c>
			 (rxBuffer[(rxBufferHead + i + 4)%ESPRXBUFFERSIZE] == 'R')) {
 8002b10:	4b5f      	ldr	r3, [pc, #380]	; (8002c90 <espCommunication+0x850>)
 8002b12:	881b      	ldrh	r3, [r3, #0]
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	461a      	mov	r2, r3
 8002b18:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002b1c:	4413      	add	r3, r2
 8002b1e:	1d1a      	adds	r2, r3, #4
 8002b20:	4b5c      	ldr	r3, [pc, #368]	; (8002c94 <espCommunication+0x854>)
 8002b22:	fb83 1302 	smull	r1, r3, r3, r2
 8002b26:	4413      	add	r3, r2
 8002b28:	1219      	asrs	r1, r3, #8
 8002b2a:	17d3      	asrs	r3, r2, #31
 8002b2c:	1ac9      	subs	r1, r1, r3
 8002b2e:	460b      	mov	r3, r1
 8002b30:	025b      	lsls	r3, r3, #9
 8002b32:	1a5b      	subs	r3, r3, r1
 8002b34:	1ad1      	subs	r1, r2, r3
 8002b36:	4b58      	ldr	r3, [pc, #352]	; (8002c98 <espCommunication+0x858>)
 8002b38:	5c5b      	ldrb	r3, [r3, r1]
 8002b3a:	b2db      	uxtb	r3, r3
			 (rxBuffer[(rxBufferHead + i + 3)%ESPRXBUFFERSIZE] == 'O') &&
 8002b3c:	2b52      	cmp	r3, #82	; 0x52
 8002b3e:	d105      	bne.n	8002b4c <espCommunication+0x70c>
			  debugVar = 121;
 8002b40:	4b57      	ldr	r3, [pc, #348]	; (8002ca0 <espCommunication+0x860>)
 8002b42:	2279      	movs	r2, #121	; 0x79
 8002b44:	601a      	str	r2, [r3, #0]
			  espRecon(&huart3);
 8002b46:	4857      	ldr	r0, [pc, #348]	; (8002ca4 <espCommunication+0x864>)
 8002b48:	f7fe fb4e 	bl	80011e8 <espRecon>
		  }
		  debugVar = 13;
 8002b4c:	4b54      	ldr	r3, [pc, #336]	; (8002ca0 <espCommunication+0x860>)
 8002b4e:	220d      	movs	r2, #13
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	e002      	b.n	8002b5a <espCommunication+0x71a>
				  if(rxBuffer[(rxBufferHead + i + 7)%ESPRXBUFFERSIZE] != '_') continue;
 8002b54:	bf00      	nop
 8002b56:	e000      	b.n	8002b5a <espCommunication+0x71a>
				  if(rxBuffer[(rxBufferHead + i + 7)%ESPRXBUFFERSIZE] != '_') continue;
 8002b58:	bf00      	nop
	  for(uint16_t i = 0; i < receivedBytes; i++) {
 8002b5a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002b5e:	3301      	adds	r3, #1
 8002b60:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8002b64:	4b50      	ldr	r3, [pc, #320]	; (8002ca8 <espCommunication+0x868>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	f4ff adf4 	bcc.w	800275c <espCommunication+0x31c>
	  }


	  debugVar = 15;
 8002b74:	4b4a      	ldr	r3, [pc, #296]	; (8002ca0 <espCommunication+0x860>)
 8002b76:	220f      	movs	r2, #15
 8002b78:	601a      	str	r2, [r3, #0]
      // Update the buffer head index
      rxBufferHead = ((rxBufferHead + receivedBytes) % ESPRXBUFFERSIZE);
 8002b7a:	4b45      	ldr	r3, [pc, #276]	; (8002c90 <espCommunication+0x850>)
 8002b7c:	881b      	ldrh	r3, [r3, #0]
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	461a      	mov	r2, r3
 8002b82:	4b49      	ldr	r3, [pc, #292]	; (8002ca8 <espCommunication+0x868>)
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	441a      	add	r2, r3
 8002b88:	4b42      	ldr	r3, [pc, #264]	; (8002c94 <espCommunication+0x854>)
 8002b8a:	fb83 1302 	smull	r1, r3, r3, r2
 8002b8e:	4413      	add	r3, r2
 8002b90:	1219      	asrs	r1, r3, #8
 8002b92:	17d3      	asrs	r3, r2, #31
 8002b94:	1ac9      	subs	r1, r1, r3
 8002b96:	460b      	mov	r3, r1
 8002b98:	025b      	lsls	r3, r3, #9
 8002b9a:	1a5b      	subs	r3, r3, r1
 8002b9c:	1ad1      	subs	r1, r2, r3
 8002b9e:	b28a      	uxth	r2, r1
 8002ba0:	4b3b      	ldr	r3, [pc, #236]	; (8002c90 <espCommunication+0x850>)
 8002ba2:	801a      	strh	r2, [r3, #0]

      if(xEventGroupGetBitsFromISR(timerFdsEventGroup) == 0x1) {
 8002ba4:	4b41      	ldr	r3, [pc, #260]	; (8002cac <espCommunication+0x86c>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f005 fe6f 	bl	800888c <xEventGroupGetBitsFromISR>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	f040 80c2 	bne.w	8002d3a <espCommunication+0x8fa>
    	  debugVar = 20;
 8002bb6:	4b3a      	ldr	r3, [pc, #232]	; (8002ca0 <espCommunication+0x860>)
 8002bb8:	2214      	movs	r2, #20
 8002bba:	601a      	str	r2, [r3, #0]
    	    // Create the JSON content with variable values
    	    sprintf(txBuffer, "POST /robot_data HTTP/1.1\r\n"
 8002bbc:	4b3c      	ldr	r3, [pc, #240]	; (8002cb0 <espCommunication+0x870>)
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	4698      	mov	r8, r3
 8002bc2:	4b3c      	ldr	r3, [pc, #240]	; (8002cb4 <espCommunication+0x874>)
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bc8:	4b3b      	ldr	r3, [pc, #236]	; (8002cb8 <espCommunication+0x878>)
 8002bca:	68da      	ldr	r2, [r3, #12]
 8002bcc:	627a      	str	r2, [r7, #36]	; 0x24
 8002bce:	4b3b      	ldr	r3, [pc, #236]	; (8002cbc <espCommunication+0x87c>)
 8002bd0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002bd2:	6239      	str	r1, [r7, #32]
 8002bd4:	4b3a      	ldr	r3, [pc, #232]	; (8002cc0 <espCommunication+0x880>)
 8002bd6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002bd8:	61f8      	str	r0, [r7, #28]
 8002bda:	4b3a      	ldr	r3, [pc, #232]	; (8002cc4 <espCommunication+0x884>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7fd fcc2 	bl	8000568 <__aeabi_f2d>
 8002be4:	4604      	mov	r4, r0
 8002be6:	460d      	mov	r5, r1
 8002be8:	4b2c      	ldr	r3, [pc, #176]	; (8002c9c <espCommunication+0x85c>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7fd fcbb 	bl	8000568 <__aeabi_f2d>
 8002bf2:	4b32      	ldr	r3, [pc, #200]	; (8002cbc <espCommunication+0x87c>)
 8002bf4:	69de      	ldr	r6, [r3, #28]
 8002bf6:	61be      	str	r6, [r7, #24]
 8002bf8:	4b31      	ldr	r3, [pc, #196]	; (8002cc0 <espCommunication+0x880>)
 8002bfa:	69db      	ldr	r3, [r3, #28]
 8002bfc:	617b      	str	r3, [r7, #20]
    	                         "Host: 192.168.137.1\r\n"
    	                         "Content-Type: application/json\r\n"
//    	                         "Content-Length: %d\r\n\r\n"
    	                         "{\"avrBatVoltage\": \"%d\", \"EncoderR.rpm\": \"%d\", \"EncoderL.rpm\": \"%d\", \"SoftPwmR.pwmValue\": \"%d\", \"SoftPwmL.pwmValue\": \"%d\", \"tSpeed\": \"%f\", \"aSpeed\": \"%f\", \"rReqValue\": \"%d\", \"lReqValue\": \"%d\", \"accelRX\": \"%d\", \"accelRY\": \"%d\", \"accelRZ\": \"%d\", \"accelLX\": \"%d\", \"accelLY\": \"%d\", \"accelLZ\": \"%d\", \"cycle_count\": \"%d\"}",
								 BatChargeState, EncoderR.rpm, EncoderL.rpm, SoftPwmR.pwmValue, SoftPwmL.pwmValue, tSpeed, aSpeed, SoftPwmR.reqValue, SoftPwmL.reqValue, accelValueR[0], accelValueR[1], accelValueR[2], accelValueL[0], accelValueL[1], accelValueL[2], cycle_count);
 8002bfe:	4b32      	ldr	r3, [pc, #200]	; (8002cc8 <espCommunication+0x888>)
 8002c00:	f9b3 3000 	ldrsh.w	r3, [r3]
    	    sprintf(txBuffer, "POST /robot_data HTTP/1.1\r\n"
 8002c04:	613b      	str	r3, [r7, #16]
								 BatChargeState, EncoderR.rpm, EncoderL.rpm, SoftPwmR.pwmValue, SoftPwmL.pwmValue, tSpeed, aSpeed, SoftPwmR.reqValue, SoftPwmL.reqValue, accelValueR[0], accelValueR[1], accelValueR[2], accelValueL[0], accelValueL[1], accelValueL[2], cycle_count);
 8002c06:	4b30      	ldr	r3, [pc, #192]	; (8002cc8 <espCommunication+0x888>)
 8002c08:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    	    sprintf(txBuffer, "POST /robot_data HTTP/1.1\r\n"
 8002c0c:	60fb      	str	r3, [r7, #12]
								 BatChargeState, EncoderR.rpm, EncoderL.rpm, SoftPwmR.pwmValue, SoftPwmL.pwmValue, tSpeed, aSpeed, SoftPwmR.reqValue, SoftPwmL.reqValue, accelValueR[0], accelValueR[1], accelValueR[2], accelValueL[0], accelValueL[1], accelValueL[2], cycle_count);
 8002c0e:	4b2e      	ldr	r3, [pc, #184]	; (8002cc8 <espCommunication+0x888>)
 8002c10:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    	    sprintf(txBuffer, "POST /robot_data HTTP/1.1\r\n"
 8002c14:	60bb      	str	r3, [r7, #8]
								 BatChargeState, EncoderR.rpm, EncoderL.rpm, SoftPwmR.pwmValue, SoftPwmL.pwmValue, tSpeed, aSpeed, SoftPwmR.reqValue, SoftPwmL.reqValue, accelValueR[0], accelValueR[1], accelValueR[2], accelValueL[0], accelValueL[1], accelValueL[2], cycle_count);
 8002c16:	4b2d      	ldr	r3, [pc, #180]	; (8002ccc <espCommunication+0x88c>)
 8002c18:	f9b3 3000 	ldrsh.w	r3, [r3]
    	    sprintf(txBuffer, "POST /robot_data HTTP/1.1\r\n"
 8002c1c:	607b      	str	r3, [r7, #4]
								 BatChargeState, EncoderR.rpm, EncoderL.rpm, SoftPwmR.pwmValue, SoftPwmL.pwmValue, tSpeed, aSpeed, SoftPwmR.reqValue, SoftPwmL.reqValue, accelValueR[0], accelValueR[1], accelValueR[2], accelValueL[0], accelValueL[1], accelValueL[2], cycle_count);
 8002c1e:	4b2b      	ldr	r3, [pc, #172]	; (8002ccc <espCommunication+0x88c>)
 8002c20:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    	    sprintf(txBuffer, "POST /robot_data HTTP/1.1\r\n"
 8002c24:	461e      	mov	r6, r3
								 BatChargeState, EncoderR.rpm, EncoderL.rpm, SoftPwmR.pwmValue, SoftPwmL.pwmValue, tSpeed, aSpeed, SoftPwmR.reqValue, SoftPwmL.reqValue, accelValueR[0], accelValueR[1], accelValueR[2], accelValueL[0], accelValueL[1], accelValueL[2], cycle_count);
 8002c26:	4b29      	ldr	r3, [pc, #164]	; (8002ccc <espCommunication+0x88c>)
 8002c28:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    	    sprintf(txBuffer, "POST /robot_data HTTP/1.1\r\n"
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	4b28      	ldr	r3, [pc, #160]	; (8002cd0 <espCommunication+0x890>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	9310      	str	r3, [sp, #64]	; 0x40
 8002c34:	920f      	str	r2, [sp, #60]	; 0x3c
 8002c36:	960e      	str	r6, [sp, #56]	; 0x38
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	920d      	str	r2, [sp, #52]	; 0x34
 8002c3c:	68ba      	ldr	r2, [r7, #8]
 8002c3e:	920c      	str	r2, [sp, #48]	; 0x30
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	920b      	str	r2, [sp, #44]	; 0x2c
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	920a      	str	r2, [sp, #40]	; 0x28
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	9309      	str	r3, [sp, #36]	; 0x24
 8002c4c:	69be      	ldr	r6, [r7, #24]
 8002c4e:	9608      	str	r6, [sp, #32]
 8002c50:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002c54:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8002c58:	69f8      	ldr	r0, [r7, #28]
 8002c5a:	9002      	str	r0, [sp, #8]
 8002c5c:	6a39      	ldr	r1, [r7, #32]
 8002c5e:	9101      	str	r1, [sp, #4]
 8002c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c62:	9200      	str	r2, [sp, #0]
 8002c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c66:	4642      	mov	r2, r8
 8002c68:	491a      	ldr	r1, [pc, #104]	; (8002cd4 <espCommunication+0x894>)
 8002c6a:	481b      	ldr	r0, [pc, #108]	; (8002cd8 <espCommunication+0x898>)
 8002c6c:	f009 f86c 	bl	800bd48 <siprintf>

    	    // Calculate the number of characters in the POST request
    	    int postRequestLength = strlen(txBuffer);
 8002c70:	4819      	ldr	r0, [pc, #100]	; (8002cd8 <espCommunication+0x898>)
 8002c72:	f7fd fb0d 	bl	8000290 <strlen>
 8002c76:	4603      	mov	r3, r0
 8002c78:	653b      	str	r3, [r7, #80]	; 0x50
    	    debugVar = 25;
 8002c7a:	4b09      	ldr	r3, [pc, #36]	; (8002ca0 <espCommunication+0x860>)
 8002c7c:	2219      	movs	r2, #25
 8002c7e:	601a      	str	r2, [r3, #0]
    	  sprintf(pDataBuf, "AT+CIPSEND=%d\r\n", postRequestLength);
 8002c80:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c84:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002c86:	4915      	ldr	r1, [pc, #84]	; (8002cdc <espCommunication+0x89c>)
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f009 f85d 	bl	800bd48 <siprintf>
    	  while(atSend_USART3_DMA(pDataBuf, strlen(pDataBuf)) != 0) {
 8002c8e:	e02a      	b.n	8002ce6 <espCommunication+0x8a6>
 8002c90:	20000e70 	.word	0x20000e70
 8002c94:	80402011 	.word	0x80402011
 8002c98:	20000c70 	.word	0x20000c70
 8002c9c:	20000f80 	.word	0x20000f80
 8002ca0:	20000f94 	.word	0x20000f94
 8002ca4:	20000880 	.word	0x20000880
 8002ca8:	20000e72 	.word	0x20000e72
 8002cac:	20000f78 	.word	0x20000f78
 8002cb0:	200009ba 	.word	0x200009ba
 8002cb4:	200009c4 	.word	0x200009c4
 8002cb8:	200009e0 	.word	0x200009e0
 8002cbc:	200009fc 	.word	0x200009fc
 8002cc0:	20000a34 	.word	0x20000a34
 8002cc4:	20000f7c 	.word	0x20000f7c
 8002cc8:	20000f84 	.word	0x20000f84
 8002ccc:	20000f8c 	.word	0x20000f8c
 8002cd0:	20000f9c 	.word	0x20000f9c
 8002cd4:	0800f0b4 	.word	0x0800f0b4
 8002cd8:	20000a70 	.word	0x20000a70
 8002cdc:	0800f0a4 	.word	0x0800f0a4
    	    vTaskDelay( pdMS_TO_TICKS( 10 ) );
 8002ce0:	200a      	movs	r0, #10
 8002ce2:	f006 fda3 	bl	800982c <vTaskDelay>
    	  while(atSend_USART3_DMA(pDataBuf, strlen(pDataBuf)) != 0) {
 8002ce6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7fd fad0 	bl	8000290 <strlen>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002cf8:	4611      	mov	r1, r2
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7fe f90c 	bl	8000f18 <atSend_USART3_DMA>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1ec      	bne.n	8002ce0 <espCommunication+0x8a0>
    	  }
    	  debugVar = 30;
 8002d06:	4b0f      	ldr	r3, [pc, #60]	; (8002d44 <espCommunication+0x904>)
 8002d08:	221e      	movs	r2, #30
 8002d0a:	601a      	str	r2, [r3, #0]
    	  while(atSend_USART3_DMA(txBuffer, postRequestLength) != 0) {
 8002d0c:	e002      	b.n	8002d14 <espCommunication+0x8d4>
    	    vTaskDelay( pdMS_TO_TICKS( 10 ) );
 8002d0e:	200a      	movs	r0, #10
 8002d10:	f006 fd8c 	bl	800982c <vTaskDelay>
    	  while(atSend_USART3_DMA(txBuffer, postRequestLength) != 0) {
 8002d14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	4619      	mov	r1, r3
 8002d1a:	480b      	ldr	r0, [pc, #44]	; (8002d48 <espCommunication+0x908>)
 8002d1c:	f7fe f8fc 	bl	8000f18 <atSend_USART3_DMA>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1f3      	bne.n	8002d0e <espCommunication+0x8ce>
    	  }
    	  debugVar = 35;
 8002d26:	4b07      	ldr	r3, [pc, #28]	; (8002d44 <espCommunication+0x904>)
 8002d28:	2223      	movs	r2, #35	; 0x23
 8002d2a:	601a      	str	r2, [r3, #0]
    	  xEventGroupClearBits(timerFdsEventGroup, 0xFFFFFF);
 8002d2c:	4b07      	ldr	r3, [pc, #28]	; (8002d4c <espCommunication+0x90c>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8002d34:	4618      	mov	r0, r3
 8002d36:	f005 fd71 	bl	800881c <xEventGroupClearBits>
      }

	  vTaskDelay( pdMS_TO_TICKS( 25 ) );
 8002d3a:	2019      	movs	r0, #25
 8002d3c:	f006 fd76 	bl	800982c <vTaskDelay>
  {
 8002d40:	e470      	b.n	8002624 <espCommunication+0x1e4>
 8002d42:	bf00      	nop
 8002d44:	20000f94 	.word	0x20000f94
 8002d48:	20000a70 	.word	0x20000a70
 8002d4c:	20000f78 	.word	0x20000f78

08002d50 <accelerometer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_accelerometer */
void accelerometer(void const * argument)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN accelerometer */
	vTaskDelay(120);
 8002d58:	2078      	movs	r0, #120	; 0x78
 8002d5a:	f006 fd67 	bl	800982c <vTaskDelay>
	adxl345_bw_rate_setup(&hspi2, GPIOB, 14, 0xA);
 8002d5e:	230a      	movs	r3, #10
 8002d60:	220e      	movs	r2, #14
 8002d62:	491f      	ldr	r1, [pc, #124]	; (8002de0 <accelerometer+0x90>)
 8002d64:	481f      	ldr	r0, [pc, #124]	; (8002de4 <accelerometer+0x94>)
 8002d66:	f7fd ff7f 	bl	8000c68 <adxl345_bw_rate_setup>
	vTaskDelay(20);
 8002d6a:	2014      	movs	r0, #20
 8002d6c:	f006 fd5e 	bl	800982c <vTaskDelay>
	adxl345_data_format(&hspi2, GPIOB, 14, 0x42);
 8002d70:	2342      	movs	r3, #66	; 0x42
 8002d72:	220e      	movs	r2, #14
 8002d74:	491a      	ldr	r1, [pc, #104]	; (8002de0 <accelerometer+0x90>)
 8002d76:	481b      	ldr	r0, [pc, #108]	; (8002de4 <accelerometer+0x94>)
 8002d78:	f7fe f82b 	bl	8000dd2 <adxl345_data_format>
	vTaskDelay(20);
 8002d7c:	2014      	movs	r0, #20
 8002d7e:	f006 fd55 	bl	800982c <vTaskDelay>
	adxl345_measure_mode(&hspi2, GPIOB, 14);
 8002d82:	220e      	movs	r2, #14
 8002d84:	4916      	ldr	r1, [pc, #88]	; (8002de0 <accelerometer+0x90>)
 8002d86:	4817      	ldr	r0, [pc, #92]	; (8002de4 <accelerometer+0x94>)
 8002d88:	f7fd ff9f 	bl	8000cca <adxl345_measure_mode>
	vTaskDelay(20);
 8002d8c:	2014      	movs	r0, #20
 8002d8e:	f006 fd4d 	bl	800982c <vTaskDelay>
	adxl345_bw_rate_setup(&hspi2, GPIOB, 12, 0xA);
 8002d92:	230a      	movs	r3, #10
 8002d94:	220c      	movs	r2, #12
 8002d96:	4912      	ldr	r1, [pc, #72]	; (8002de0 <accelerometer+0x90>)
 8002d98:	4812      	ldr	r0, [pc, #72]	; (8002de4 <accelerometer+0x94>)
 8002d9a:	f7fd ff65 	bl	8000c68 <adxl345_bw_rate_setup>
	vTaskDelay(20);
 8002d9e:	2014      	movs	r0, #20
 8002da0:	f006 fd44 	bl	800982c <vTaskDelay>
	adxl345_data_format(&hspi2, GPIOB, 12, 0x42);
 8002da4:	2342      	movs	r3, #66	; 0x42
 8002da6:	220c      	movs	r2, #12
 8002da8:	490d      	ldr	r1, [pc, #52]	; (8002de0 <accelerometer+0x90>)
 8002daa:	480e      	ldr	r0, [pc, #56]	; (8002de4 <accelerometer+0x94>)
 8002dac:	f7fe f811 	bl	8000dd2 <adxl345_data_format>
	vTaskDelay(20);
 8002db0:	2014      	movs	r0, #20
 8002db2:	f006 fd3b 	bl	800982c <vTaskDelay>
	adxl345_measure_mode(&hspi2, GPIOB, 12);
 8002db6:	220c      	movs	r2, #12
 8002db8:	4909      	ldr	r1, [pc, #36]	; (8002de0 <accelerometer+0x90>)
 8002dba:	480a      	ldr	r0, [pc, #40]	; (8002de4 <accelerometer+0x94>)
 8002dbc:	f7fd ff85 	bl	8000cca <adxl345_measure_mode>
  /* Infinite loop */
  for(;;)
  {
	  adxl345_read_data(&hspi2, GPIOB, 14, (uint8_t*)accelValueR);
 8002dc0:	4b09      	ldr	r3, [pc, #36]	; (8002de8 <accelerometer+0x98>)
 8002dc2:	220e      	movs	r2, #14
 8002dc4:	4906      	ldr	r1, [pc, #24]	; (8002de0 <accelerometer+0x90>)
 8002dc6:	4807      	ldr	r0, [pc, #28]	; (8002de4 <accelerometer+0x94>)
 8002dc8:	f7fe f830 	bl	8000e2c <adxl345_read_data>
	  adxl345_read_data(&hspi2, GPIOB, 12, (uint8_t*)accelValueL);
 8002dcc:	4b07      	ldr	r3, [pc, #28]	; (8002dec <accelerometer+0x9c>)
 8002dce:	220c      	movs	r2, #12
 8002dd0:	4903      	ldr	r1, [pc, #12]	; (8002de0 <accelerometer+0x90>)
 8002dd2:	4804      	ldr	r0, [pc, #16]	; (8002de4 <accelerometer+0x94>)
 8002dd4:	f7fe f82a 	bl	8000e2c <adxl345_read_data>
	  vTaskDelay(20);
 8002dd8:	2014      	movs	r0, #20
 8002dda:	f006 fd27 	bl	800982c <vTaskDelay>
	  adxl345_read_data(&hspi2, GPIOB, 14, (uint8_t*)accelValueR);
 8002dde:	e7ef      	b.n	8002dc0 <accelerometer+0x70>
 8002de0:	48000400 	.word	0x48000400
 8002de4:	20000784 	.word	0x20000784
 8002de8:	20000f84 	.word	0x20000f84
 8002dec:	20000f8c 	.word	0x20000f8c

08002df0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a04      	ldr	r2, [pc, #16]	; (8002e10 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d101      	bne.n	8002e06 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002e02:	f000 ff61 	bl	8003cc8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002e06:	bf00      	nop
 8002e08:	3708      	adds	r7, #8
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	40001000 	.word	0x40001000

08002e14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002e18:	b672      	cpsid	i
}
 8002e1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e1c:	e7fe      	b.n	8002e1c <Error_Handler+0x8>
	...

08002e20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e26:	4b11      	ldr	r3, [pc, #68]	; (8002e6c <HAL_MspInit+0x4c>)
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	4a10      	ldr	r2, [pc, #64]	; (8002e6c <HAL_MspInit+0x4c>)
 8002e2c:	f043 0301 	orr.w	r3, r3, #1
 8002e30:	6193      	str	r3, [r2, #24]
 8002e32:	4b0e      	ldr	r3, [pc, #56]	; (8002e6c <HAL_MspInit+0x4c>)
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	607b      	str	r3, [r7, #4]
 8002e3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e3e:	4b0b      	ldr	r3, [pc, #44]	; (8002e6c <HAL_MspInit+0x4c>)
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	4a0a      	ldr	r2, [pc, #40]	; (8002e6c <HAL_MspInit+0x4c>)
 8002e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e48:	61d3      	str	r3, [r2, #28]
 8002e4a:	4b08      	ldr	r3, [pc, #32]	; (8002e6c <HAL_MspInit+0x4c>)
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e52:	603b      	str	r3, [r7, #0]
 8002e54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002e56:	2200      	movs	r2, #0
 8002e58:	210f      	movs	r1, #15
 8002e5a:	f06f 0001 	mvn.w	r0, #1
 8002e5e:	f001 fccd 	bl	80047fc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e62:	bf00      	nop
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	40021000 	.word	0x40021000

08002e70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b08a      	sub	sp, #40	; 0x28
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e78:	f107 0314 	add.w	r3, r7, #20
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	605a      	str	r2, [r3, #4]
 8002e82:	609a      	str	r2, [r3, #8]
 8002e84:	60da      	str	r2, [r3, #12]
 8002e86:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e90:	d124      	bne.n	8002edc <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002e92:	4b14      	ldr	r3, [pc, #80]	; (8002ee4 <HAL_ADC_MspInit+0x74>)
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	4a13      	ldr	r2, [pc, #76]	; (8002ee4 <HAL_ADC_MspInit+0x74>)
 8002e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e9c:	6153      	str	r3, [r2, #20]
 8002e9e:	4b11      	ldr	r3, [pc, #68]	; (8002ee4 <HAL_ADC_MspInit+0x74>)
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ea6:	613b      	str	r3, [r7, #16]
 8002ea8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eaa:	4b0e      	ldr	r3, [pc, #56]	; (8002ee4 <HAL_ADC_MspInit+0x74>)
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	4a0d      	ldr	r2, [pc, #52]	; (8002ee4 <HAL_ADC_MspInit+0x74>)
 8002eb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eb4:	6153      	str	r3, [r2, #20]
 8002eb6:	4b0b      	ldr	r3, [pc, #44]	; (8002ee4 <HAL_ADC_MspInit+0x74>)
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ebe:	60fb      	str	r3, [r7, #12]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002ec2:	2304      	movs	r3, #4
 8002ec4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ece:	f107 0314 	add.w	r3, r7, #20
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ed8:	f001 fdc4 	bl	8004a64 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002edc:	bf00      	nop
 8002ede:	3728      	adds	r7, #40	; 0x28
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	40021000 	.word	0x40021000

08002ee8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b08a      	sub	sp, #40	; 0x28
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef0:	f107 0314 	add.w	r3, r7, #20
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	605a      	str	r2, [r3, #4]
 8002efa:	609a      	str	r2, [r3, #8]
 8002efc:	60da      	str	r2, [r3, #12]
 8002efe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a17      	ldr	r2, [pc, #92]	; (8002f64 <HAL_SPI_MspInit+0x7c>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d128      	bne.n	8002f5c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002f0a:	4b17      	ldr	r3, [pc, #92]	; (8002f68 <HAL_SPI_MspInit+0x80>)
 8002f0c:	69db      	ldr	r3, [r3, #28]
 8002f0e:	4a16      	ldr	r2, [pc, #88]	; (8002f68 <HAL_SPI_MspInit+0x80>)
 8002f10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f14:	61d3      	str	r3, [r2, #28]
 8002f16:	4b14      	ldr	r3, [pc, #80]	; (8002f68 <HAL_SPI_MspInit+0x80>)
 8002f18:	69db      	ldr	r3, [r3, #28]
 8002f1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f1e:	613b      	str	r3, [r7, #16]
 8002f20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f22:	4b11      	ldr	r3, [pc, #68]	; (8002f68 <HAL_SPI_MspInit+0x80>)
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	4a10      	ldr	r2, [pc, #64]	; (8002f68 <HAL_SPI_MspInit+0x80>)
 8002f28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f2c:	6153      	str	r3, [r2, #20]
 8002f2e:	4b0e      	ldr	r3, [pc, #56]	; (8002f68 <HAL_SPI_MspInit+0x80>)
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f36:	60fb      	str	r3, [r7, #12]
 8002f38:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002f3a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002f3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f40:	2302      	movs	r3, #2
 8002f42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f44:	2300      	movs	r3, #0
 8002f46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f4c:	2305      	movs	r3, #5
 8002f4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f50:	f107 0314 	add.w	r3, r7, #20
 8002f54:	4619      	mov	r1, r3
 8002f56:	4805      	ldr	r0, [pc, #20]	; (8002f6c <HAL_SPI_MspInit+0x84>)
 8002f58:	f001 fd84 	bl	8004a64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002f5c:	bf00      	nop
 8002f5e:	3728      	adds	r7, #40	; 0x28
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40003800 	.word	0x40003800
 8002f68:	40021000 	.word	0x40021000
 8002f6c:	48000400 	.word	0x48000400

08002f70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a13      	ldr	r2, [pc, #76]	; (8002fcc <HAL_TIM_Base_MspInit+0x5c>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d10c      	bne.n	8002f9c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002f82:	4b13      	ldr	r3, [pc, #76]	; (8002fd0 <HAL_TIM_Base_MspInit+0x60>)
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	4a12      	ldr	r2, [pc, #72]	; (8002fd0 <HAL_TIM_Base_MspInit+0x60>)
 8002f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f8c:	6193      	str	r3, [r2, #24]
 8002f8e:	4b10      	ldr	r3, [pc, #64]	; (8002fd0 <HAL_TIM_Base_MspInit+0x60>)
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f96:	60fb      	str	r3, [r7, #12]
 8002f98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002f9a:	e010      	b.n	8002fbe <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM17)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a0c      	ldr	r2, [pc, #48]	; (8002fd4 <HAL_TIM_Base_MspInit+0x64>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d10b      	bne.n	8002fbe <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002fa6:	4b0a      	ldr	r3, [pc, #40]	; (8002fd0 <HAL_TIM_Base_MspInit+0x60>)
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	4a09      	ldr	r2, [pc, #36]	; (8002fd0 <HAL_TIM_Base_MspInit+0x60>)
 8002fac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fb0:	6193      	str	r3, [r2, #24]
 8002fb2:	4b07      	ldr	r3, [pc, #28]	; (8002fd0 <HAL_TIM_Base_MspInit+0x60>)
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fba:	60bb      	str	r3, [r7, #8]
 8002fbc:	68bb      	ldr	r3, [r7, #8]
}
 8002fbe:	bf00      	nop
 8002fc0:	3714      	adds	r7, #20
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	40014000 	.word	0x40014000
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	40014800 	.word	0x40014800

08002fd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b08a      	sub	sp, #40	; 0x28
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe0:	f107 0314 	add.w	r3, r7, #20
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	605a      	str	r2, [r3, #4]
 8002fea:	609a      	str	r2, [r3, #8]
 8002fec:	60da      	str	r2, [r3, #12]
 8002fee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a3e      	ldr	r2, [pc, #248]	; (80030f0 <HAL_UART_MspInit+0x118>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d176      	bne.n	80030e8 <HAL_UART_MspInit+0x110>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002ffa:	4b3e      	ldr	r3, [pc, #248]	; (80030f4 <HAL_UART_MspInit+0x11c>)
 8002ffc:	69db      	ldr	r3, [r3, #28]
 8002ffe:	4a3d      	ldr	r2, [pc, #244]	; (80030f4 <HAL_UART_MspInit+0x11c>)
 8003000:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003004:	61d3      	str	r3, [r2, #28]
 8003006:	4b3b      	ldr	r3, [pc, #236]	; (80030f4 <HAL_UART_MspInit+0x11c>)
 8003008:	69db      	ldr	r3, [r3, #28]
 800300a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800300e:	613b      	str	r3, [r7, #16]
 8003010:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003012:	4b38      	ldr	r3, [pc, #224]	; (80030f4 <HAL_UART_MspInit+0x11c>)
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	4a37      	ldr	r2, [pc, #220]	; (80030f4 <HAL_UART_MspInit+0x11c>)
 8003018:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800301c:	6153      	str	r3, [r2, #20]
 800301e:	4b35      	ldr	r3, [pc, #212]	; (80030f4 <HAL_UART_MspInit+0x11c>)
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003026:	60fb      	str	r3, [r7, #12]
 8003028:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800302a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800302e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003030:	2302      	movs	r3, #2
 8003032:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003034:	2300      	movs	r3, #0
 8003036:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003038:	2303      	movs	r3, #3
 800303a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800303c:	2307      	movs	r3, #7
 800303e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003040:	f107 0314 	add.w	r3, r7, #20
 8003044:	4619      	mov	r1, r3
 8003046:	482c      	ldr	r0, [pc, #176]	; (80030f8 <HAL_UART_MspInit+0x120>)
 8003048:	f001 fd0c 	bl	8004a64 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 800304c:	4b2b      	ldr	r3, [pc, #172]	; (80030fc <HAL_UART_MspInit+0x124>)
 800304e:	4a2c      	ldr	r2, [pc, #176]	; (8003100 <HAL_UART_MspInit+0x128>)
 8003050:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003052:	4b2a      	ldr	r3, [pc, #168]	; (80030fc <HAL_UART_MspInit+0x124>)
 8003054:	2200      	movs	r2, #0
 8003056:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003058:	4b28      	ldr	r3, [pc, #160]	; (80030fc <HAL_UART_MspInit+0x124>)
 800305a:	2200      	movs	r2, #0
 800305c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800305e:	4b27      	ldr	r3, [pc, #156]	; (80030fc <HAL_UART_MspInit+0x124>)
 8003060:	2280      	movs	r2, #128	; 0x80
 8003062:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003064:	4b25      	ldr	r3, [pc, #148]	; (80030fc <HAL_UART_MspInit+0x124>)
 8003066:	2200      	movs	r2, #0
 8003068:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800306a:	4b24      	ldr	r3, [pc, #144]	; (80030fc <HAL_UART_MspInit+0x124>)
 800306c:	2200      	movs	r2, #0
 800306e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8003070:	4b22      	ldr	r3, [pc, #136]	; (80030fc <HAL_UART_MspInit+0x124>)
 8003072:	2220      	movs	r2, #32
 8003074:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003076:	4b21      	ldr	r3, [pc, #132]	; (80030fc <HAL_UART_MspInit+0x124>)
 8003078:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800307c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800307e:	481f      	ldr	r0, [pc, #124]	; (80030fc <HAL_UART_MspInit+0x124>)
 8003080:	f001 fbe6 	bl	8004850 <HAL_DMA_Init>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 800308a:	f7ff fec3 	bl	8002e14 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a1a      	ldr	r2, [pc, #104]	; (80030fc <HAL_UART_MspInit+0x124>)
 8003092:	675a      	str	r2, [r3, #116]	; 0x74
 8003094:	4a19      	ldr	r2, [pc, #100]	; (80030fc <HAL_UART_MspInit+0x124>)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 800309a:	4b1a      	ldr	r3, [pc, #104]	; (8003104 <HAL_UART_MspInit+0x12c>)
 800309c:	4a1a      	ldr	r2, [pc, #104]	; (8003108 <HAL_UART_MspInit+0x130>)
 800309e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030a0:	4b18      	ldr	r3, [pc, #96]	; (8003104 <HAL_UART_MspInit+0x12c>)
 80030a2:	2210      	movs	r2, #16
 80030a4:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030a6:	4b17      	ldr	r3, [pc, #92]	; (8003104 <HAL_UART_MspInit+0x12c>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80030ac:	4b15      	ldr	r3, [pc, #84]	; (8003104 <HAL_UART_MspInit+0x12c>)
 80030ae:	2280      	movs	r2, #128	; 0x80
 80030b0:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030b2:	4b14      	ldr	r3, [pc, #80]	; (8003104 <HAL_UART_MspInit+0x12c>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030b8:	4b12      	ldr	r3, [pc, #72]	; (8003104 <HAL_UART_MspInit+0x12c>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80030be:	4b11      	ldr	r3, [pc, #68]	; (8003104 <HAL_UART_MspInit+0x12c>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80030c4:	4b0f      	ldr	r3, [pc, #60]	; (8003104 <HAL_UART_MspInit+0x12c>)
 80030c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80030ca:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80030cc:	480d      	ldr	r0, [pc, #52]	; (8003104 <HAL_UART_MspInit+0x12c>)
 80030ce:	f001 fbbf 	bl	8004850 <HAL_DMA_Init>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d001      	beq.n	80030dc <HAL_UART_MspInit+0x104>
    {
      Error_Handler();
 80030d8:	f7ff fe9c 	bl	8002e14 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a09      	ldr	r2, [pc, #36]	; (8003104 <HAL_UART_MspInit+0x12c>)
 80030e0:	671a      	str	r2, [r3, #112]	; 0x70
 80030e2:	4a08      	ldr	r2, [pc, #32]	; (8003104 <HAL_UART_MspInit+0x12c>)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80030e8:	bf00      	nop
 80030ea:	3728      	adds	r7, #40	; 0x28
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	40004800 	.word	0x40004800
 80030f4:	40021000 	.word	0x40021000
 80030f8:	48000400 	.word	0x48000400
 80030fc:	20000908 	.word	0x20000908
 8003100:	40020030 	.word	0x40020030
 8003104:	2000094c 	.word	0x2000094c
 8003108:	4002001c 	.word	0x4002001c

0800310c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b08e      	sub	sp, #56	; 0x38
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003114:	2300      	movs	r3, #0
 8003116:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003118:	2300      	movs	r3, #0
 800311a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800311c:	4b33      	ldr	r3, [pc, #204]	; (80031ec <HAL_InitTick+0xe0>)
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	4a32      	ldr	r2, [pc, #200]	; (80031ec <HAL_InitTick+0xe0>)
 8003122:	f043 0310 	orr.w	r3, r3, #16
 8003126:	61d3      	str	r3, [r2, #28]
 8003128:	4b30      	ldr	r3, [pc, #192]	; (80031ec <HAL_InitTick+0xe0>)
 800312a:	69db      	ldr	r3, [r3, #28]
 800312c:	f003 0310 	and.w	r3, r3, #16
 8003130:	60fb      	str	r3, [r7, #12]
 8003132:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003134:	f107 0210 	add.w	r2, r7, #16
 8003138:	f107 0314 	add.w	r3, r7, #20
 800313c:	4611      	mov	r1, r2
 800313e:	4618      	mov	r0, r3
 8003140:	f003 f8b2 	bl	80062a8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003144:	6a3b      	ldr	r3, [r7, #32]
 8003146:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800314a:	2b00      	cmp	r3, #0
 800314c:	d103      	bne.n	8003156 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800314e:	f003 f867 	bl	8006220 <HAL_RCC_GetPCLK1Freq>
 8003152:	6378      	str	r0, [r7, #52]	; 0x34
 8003154:	e004      	b.n	8003160 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003156:	f003 f863 	bl	8006220 <HAL_RCC_GetPCLK1Freq>
 800315a:	4603      	mov	r3, r0
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003162:	4a23      	ldr	r2, [pc, #140]	; (80031f0 <HAL_InitTick+0xe4>)
 8003164:	fba2 2303 	umull	r2, r3, r2, r3
 8003168:	0c9b      	lsrs	r3, r3, #18
 800316a:	3b01      	subs	r3, #1
 800316c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800316e:	4b21      	ldr	r3, [pc, #132]	; (80031f4 <HAL_InitTick+0xe8>)
 8003170:	4a21      	ldr	r2, [pc, #132]	; (80031f8 <HAL_InitTick+0xec>)
 8003172:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003174:	4b1f      	ldr	r3, [pc, #124]	; (80031f4 <HAL_InitTick+0xe8>)
 8003176:	f240 32e7 	movw	r2, #999	; 0x3e7
 800317a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800317c:	4a1d      	ldr	r2, [pc, #116]	; (80031f4 <HAL_InitTick+0xe8>)
 800317e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003180:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003182:	4b1c      	ldr	r3, [pc, #112]	; (80031f4 <HAL_InitTick+0xe8>)
 8003184:	2200      	movs	r2, #0
 8003186:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003188:	4b1a      	ldr	r3, [pc, #104]	; (80031f4 <HAL_InitTick+0xe8>)
 800318a:	2200      	movs	r2, #0
 800318c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800318e:	4b19      	ldr	r3, [pc, #100]	; (80031f4 <HAL_InitTick+0xe8>)
 8003190:	2200      	movs	r2, #0
 8003192:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003194:	4817      	ldr	r0, [pc, #92]	; (80031f4 <HAL_InitTick+0xe8>)
 8003196:	f004 f973 	bl	8007480 <HAL_TIM_Base_Init>
 800319a:	4603      	mov	r3, r0
 800319c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80031a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d11b      	bne.n	80031e0 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80031a8:	4812      	ldr	r0, [pc, #72]	; (80031f4 <HAL_InitTick+0xe8>)
 80031aa:	f004 f9c1 	bl	8007530 <HAL_TIM_Base_Start_IT>
 80031ae:	4603      	mov	r3, r0
 80031b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80031b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d111      	bne.n	80031e0 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80031bc:	2036      	movs	r0, #54	; 0x36
 80031be:	f001 fb39 	bl	8004834 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2b0f      	cmp	r3, #15
 80031c6:	d808      	bhi.n	80031da <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80031c8:	2200      	movs	r2, #0
 80031ca:	6879      	ldr	r1, [r7, #4]
 80031cc:	2036      	movs	r0, #54	; 0x36
 80031ce:	f001 fb15 	bl	80047fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80031d2:	4a0a      	ldr	r2, [pc, #40]	; (80031fc <HAL_InitTick+0xf0>)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6013      	str	r3, [r2, #0]
 80031d8:	e002      	b.n	80031e0 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80031e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3738      	adds	r7, #56	; 0x38
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	40021000 	.word	0x40021000
 80031f0:	431bde83 	.word	0x431bde83
 80031f4:	20000fa0 	.word	0x20000fa0
 80031f8:	40001000 	.word	0x40001000
 80031fc:	20000004 	.word	0x20000004

08003200 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003204:	e7fe      	b.n	8003204 <NMI_Handler+0x4>
	...

08003208 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	GPIOC->ODR &= ~GPIO_ODR_13;
 800320e:	4b0b      	ldr	r3, [pc, #44]	; (800323c <HardFault_Handler+0x34>)
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	4a0a      	ldr	r2, [pc, #40]	; (800323c <HardFault_Handler+0x34>)
 8003214:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003218:	6153      	str	r3, [r2, #20]
	uint16_t cntLed = 0;
 800321a:	2300      	movs	r3, #0
 800321c:	80fb      	strh	r3, [r7, #6]

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  if(cntLed == 60000) {
 800321e:	88fb      	ldrh	r3, [r7, #6]
 8003220:	f64e 2260 	movw	r2, #60000	; 0xea60
 8003224:	4293      	cmp	r3, r2
 8003226:	d105      	bne.n	8003234 <HardFault_Handler+0x2c>
		  GPIOC->ODR ^= GPIO_ODR_14;
 8003228:	4b04      	ldr	r3, [pc, #16]	; (800323c <HardFault_Handler+0x34>)
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	4a03      	ldr	r2, [pc, #12]	; (800323c <HardFault_Handler+0x34>)
 800322e:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 8003232:	6153      	str	r3, [r2, #20]
	  }
	  cntLed++;
 8003234:	88fb      	ldrh	r3, [r7, #6]
 8003236:	3301      	adds	r3, #1
 8003238:	80fb      	strh	r3, [r7, #6]
	  if(cntLed == 60000) {
 800323a:	e7f0      	b.n	800321e <HardFault_Handler+0x16>
 800323c:	48000800 	.word	0x48000800

08003240 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003244:	e7fe      	b.n	8003244 <MemManage_Handler+0x4>

08003246 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003246:	b480      	push	{r7}
 8003248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800324a:	e7fe      	b.n	800324a <BusFault_Handler+0x4>

0800324c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003250:	e7fe      	b.n	8003250 <UsageFault_Handler+0x4>

08003252 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003252:	b480      	push	{r7}
 8003254:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003256:	bf00      	nop
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */
	DMA1_Channel2->CCR &= ~DMA_CCR_EN;
 8003264:	4b08      	ldr	r3, [pc, #32]	; (8003288 <DMA1_Channel2_IRQHandler+0x28>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a07      	ldr	r2, [pc, #28]	; (8003288 <DMA1_Channel2_IRQHandler+0x28>)
 800326a:	f023 0301 	bic.w	r3, r3, #1
 800326e:	6013      	str	r3, [r2, #0]
	USART3->CR3 &= ~USART_CR3_DMAT;
 8003270:	4b06      	ldr	r3, [pc, #24]	; (800328c <DMA1_Channel2_IRQHandler+0x2c>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	4a05      	ldr	r2, [pc, #20]	; (800328c <DMA1_Channel2_IRQHandler+0x2c>)
 8003276:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800327a:	6093      	str	r3, [r2, #8]
  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800327c:	4804      	ldr	r0, [pc, #16]	; (8003290 <DMA1_Channel2_IRQHandler+0x30>)
 800327e:	f001 fb2e 	bl	80048de <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003282:	bf00      	nop
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	4002001c 	.word	0x4002001c
 800328c:	40004800 	.word	0x40004800
 8003290:	2000094c 	.word	0x2000094c

08003294 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003298:	4802      	ldr	r0, [pc, #8]	; (80032a4 <DMA1_Channel3_IRQHandler+0x10>)
 800329a:	f001 fb20 	bl	80048de <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800329e:	bf00      	nop
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	20000908 	.word	0x20000908

080032a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80032ac:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80032b0:	f001 fd62 	bl	8004d78 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80032b4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80032b8:	f001 fd5e 	bl	8004d78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80032bc:	bf00      	nop
 80032be:	bd80      	pop	{r7, pc}

080032c0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80032c4:	4802      	ldr	r0, [pc, #8]	; (80032d0 <TIM6_DAC_IRQHandler+0x10>)
 80032c6:	f004 f987 	bl	80075d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80032ca:	bf00      	nop
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	20000fa0 	.word	0x20000fa0

080032d4 <DMA1_Channel1_IRQHandler>:

/* USER CODE BEGIN 1 */
void DMA1_Channel1_IRQHandler(void)
{
 80032d4:	b480      	push	{r7}
 80032d6:	af00      	add	r7, sp, #0
	__asm__ volatile("NOP");
 80032d8:	bf00      	nop
	DMA1->IFCR |= DMA_IFCR_CGIF1;
 80032da:	4b06      	ldr	r3, [pc, #24]	; (80032f4 <DMA1_Channel1_IRQHandler+0x20>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	4a05      	ldr	r2, [pc, #20]	; (80032f4 <DMA1_Channel1_IRQHandler+0x20>)
 80032e0:	f043 0301 	orr.w	r3, r3, #1
 80032e4:	6053      	str	r3, [r2, #4]
	__asm__ volatile("NOP");
 80032e6:	bf00      	nop
}
 80032e8:	bf00      	nop
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	40020000 	.word	0x40020000

080032f8 <ADC1_IRQHandler>:

void ADC1_IRQHandler(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	af00      	add	r7, sp, #0
	__asm__ volatile("NOP");
 80032fc:	bf00      	nop
	ADC1->ISR |= ADC_ISR_AWD1;
 80032fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800330c:	6013      	str	r3, [r2, #0]
	__asm__ volatile("NOP");
 800330e:	bf00      	nop
}
 8003310:	bf00      	nop
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
	...

0800331c <TIM1_UP_TIM16_IRQHandler>:

void TIM1_UP_TIM16_IRQHandler(void)
{
 800331c:	b480      	push	{r7}
 800331e:	af00      	add	r7, sp, #0
	if((TIM1->SR & TIM_SR_UIF) == TIM_SR_UIF) {
 8003320:	4b09      	ldr	r3, [pc, #36]	; (8003348 <TIM1_UP_TIM16_IRQHandler+0x2c>)
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	2b01      	cmp	r3, #1
 800332a:	d108      	bne.n	800333e <TIM1_UP_TIM16_IRQHandler+0x22>
		EncoderR.posCntUpdate = POSUPDATED;
 800332c:	4b07      	ldr	r3, [pc, #28]	; (800334c <TIM1_UP_TIM16_IRQHandler+0x30>)
 800332e:	2201      	movs	r2, #1
 8003330:	721a      	strb	r2, [r3, #8]
		TIM1->SR &= ~(TIM_SR_UIF);
 8003332:	4b05      	ldr	r3, [pc, #20]	; (8003348 <TIM1_UP_TIM16_IRQHandler+0x2c>)
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	4a04      	ldr	r2, [pc, #16]	; (8003348 <TIM1_UP_TIM16_IRQHandler+0x2c>)
 8003338:	f023 0301 	bic.w	r3, r3, #1
 800333c:	6113      	str	r3, [r2, #16]
	}
}
 800333e:	bf00      	nop
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr
 8003348:	40012c00 	.word	0x40012c00
 800334c:	200009c4 	.word	0x200009c4

08003350 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
	EncoderL.posCntUpdate = POSUPDATED;
 8003354:	4b07      	ldr	r3, [pc, #28]	; (8003374 <TIM2_IRQHandler+0x24>)
 8003356:	2201      	movs	r2, #1
 8003358:	721a      	strb	r2, [r3, #8]
	TIM2->SR &= ~(TIM_SR_UIF);
 800335a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003364:	f023 0301 	bic.w	r3, r3, #1
 8003368:	6113      	str	r3, [r2, #16]
}
 800336a:	bf00      	nop
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	200009e0 	.word	0x200009e0

08003378 <TIM1_BRK_TIM15_IRQHandler>:

void TIM1_BRK_TIM15_IRQHandler(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
	if((TIM15->SR & TIM_SR_UIF) == TIM_SR_UIF) {
 800337c:	4b59      	ldr	r3, [pc, #356]	; (80034e4 <TIM1_BRK_TIM15_IRQHandler+0x16c>)
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	f003 0301 	and.w	r3, r3, #1
 8003384:	2b01      	cmp	r3, #1
 8003386:	d12c      	bne.n	80033e2 <TIM1_BRK_TIM15_IRQHandler+0x6a>
		__asm__ volatile("NOP");
 8003388:	bf00      	nop

		GPIOA->ODR &= ~(1<<7); //_3A
 800338a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003394:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003398:	6153      	str	r3, [r2, #20]
		GPIOB->ODR &= ~(1<<0); //_4A
 800339a:	4b53      	ldr	r3, [pc, #332]	; (80034e8 <TIM1_BRK_TIM15_IRQHandler+0x170>)
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	4a52      	ldr	r2, [pc, #328]	; (80034e8 <TIM1_BRK_TIM15_IRQHandler+0x170>)
 80033a0:	f023 0301 	bic.w	r3, r3, #1
 80033a4:	6153      	str	r3, [r2, #20]

		GPIOA->ODR &= ~(1<<4); //_1A
 80033a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80033b0:	f023 0310 	bic.w	r3, r3, #16
 80033b4:	6153      	str	r3, [r2, #20]
		GPIOA->ODR &= ~(1<<5); //_2A
 80033b6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80033ba:	695b      	ldr	r3, [r3, #20]
 80033bc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80033c0:	f023 0320 	bic.w	r3, r3, #32
 80033c4:	6153      	str	r3, [r2, #20]

		TIM15->SR &= ~(TIM_SR_UIF);
 80033c6:	4b47      	ldr	r3, [pc, #284]	; (80034e4 <TIM1_BRK_TIM15_IRQHandler+0x16c>)
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	4a46      	ldr	r2, [pc, #280]	; (80034e4 <TIM1_BRK_TIM15_IRQHandler+0x16c>)
 80033cc:	f023 0301 	bic.w	r3, r3, #1
 80033d0:	6113      	str	r3, [r2, #16]
		if((TIM15->SR & TIM_SR_UIF) == 0) {
 80033d2:	4b44      	ldr	r3, [pc, #272]	; (80034e4 <TIM1_BRK_TIM15_IRQHandler+0x16c>)
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d100      	bne.n	80033e0 <TIM1_BRK_TIM15_IRQHandler+0x68>
			__asm__ volatile("NOP");
 80033de:	bf00      	nop
		}
		__asm__ volatile("NOP");
 80033e0:	bf00      	nop
	}

	if((TIM15->SR & TIM_SR_CC1IF) == TIM_SR_CC1IF) {
 80033e2:	4b40      	ldr	r3, [pc, #256]	; (80034e4 <TIM1_BRK_TIM15_IRQHandler+0x16c>)
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d135      	bne.n	800345a <TIM1_BRK_TIM15_IRQHandler+0xe2>
		__asm__ volatile("NOP");
 80033ee:	bf00      	nop

		if(SoftPwmR.status == 1) {
 80033f0:	4b3e      	ldr	r3, [pc, #248]	; (80034ec <TIM1_BRK_TIM15_IRQHandler+0x174>)
 80033f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d10e      	bne.n	8003418 <TIM1_BRK_TIM15_IRQHandler+0xa0>
			GPIOA->ODR |= (1<<7); //_3A
 80033fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80033fe:	695b      	ldr	r3, [r3, #20]
 8003400:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003408:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~(1<<0); //_4A
 800340a:	4b37      	ldr	r3, [pc, #220]	; (80034e8 <TIM1_BRK_TIM15_IRQHandler+0x170>)
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	4a36      	ldr	r2, [pc, #216]	; (80034e8 <TIM1_BRK_TIM15_IRQHandler+0x170>)
 8003410:	f023 0301 	bic.w	r3, r3, #1
 8003414:	6153      	str	r3, [r2, #20]
 8003416:	e012      	b.n	800343e <TIM1_BRK_TIM15_IRQHandler+0xc6>
		} else if(SoftPwmR.status == 2) {
 8003418:	4b34      	ldr	r3, [pc, #208]	; (80034ec <TIM1_BRK_TIM15_IRQHandler+0x174>)
 800341a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800341e:	2b02      	cmp	r3, #2
 8003420:	d10d      	bne.n	800343e <TIM1_BRK_TIM15_IRQHandler+0xc6>
			GPIOA->ODR &= ~(1<<7); //_3A
 8003422:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003426:	695b      	ldr	r3, [r3, #20]
 8003428:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800342c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003430:	6153      	str	r3, [r2, #20]
			GPIOB->ODR |= (1<<0); //_4A
 8003432:	4b2d      	ldr	r3, [pc, #180]	; (80034e8 <TIM1_BRK_TIM15_IRQHandler+0x170>)
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	4a2c      	ldr	r2, [pc, #176]	; (80034e8 <TIM1_BRK_TIM15_IRQHandler+0x170>)
 8003438:	f043 0301 	orr.w	r3, r3, #1
 800343c:	6153      	str	r3, [r2, #20]
		}

		TIM15->SR &= ~(TIM_SR_CC1IF);
 800343e:	4b29      	ldr	r3, [pc, #164]	; (80034e4 <TIM1_BRK_TIM15_IRQHandler+0x16c>)
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	4a28      	ldr	r2, [pc, #160]	; (80034e4 <TIM1_BRK_TIM15_IRQHandler+0x16c>)
 8003444:	f023 0302 	bic.w	r3, r3, #2
 8003448:	6113      	str	r3, [r2, #16]
		if((TIM15->SR & TIM_SR_CC1IF) == 0) {
 800344a:	4b26      	ldr	r3, [pc, #152]	; (80034e4 <TIM1_BRK_TIM15_IRQHandler+0x16c>)
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d100      	bne.n	8003458 <TIM1_BRK_TIM15_IRQHandler+0xe0>
			__asm__ volatile("NOP");
 8003456:	bf00      	nop
		}
		__asm__ volatile("NOP");
 8003458:	bf00      	nop
	}

	if((TIM15->SR & TIM_SR_CC2IF) == TIM_SR_CC2IF) {
 800345a:	4b22      	ldr	r3, [pc, #136]	; (80034e4 <TIM1_BRK_TIM15_IRQHandler+0x16c>)
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	f003 0304 	and.w	r3, r3, #4
 8003462:	2b04      	cmp	r3, #4
 8003464:	d139      	bne.n	80034da <TIM1_BRK_TIM15_IRQHandler+0x162>
		__asm__ volatile("NOP");
 8003466:	bf00      	nop

		if(SoftPwmL.status == 1) {
 8003468:	4b21      	ldr	r3, [pc, #132]	; (80034f0 <TIM1_BRK_TIM15_IRQHandler+0x178>)
 800346a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800346e:	2b01      	cmp	r3, #1
 8003470:	d110      	bne.n	8003494 <TIM1_BRK_TIM15_IRQHandler+0x11c>
			GPIOA->ODR &= ~(1<<4); //_1A
 8003472:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003476:	695b      	ldr	r3, [r3, #20]
 8003478:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800347c:	f023 0310 	bic.w	r3, r3, #16
 8003480:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (1<<5); //_2A
 8003482:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003486:	695b      	ldr	r3, [r3, #20]
 8003488:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800348c:	f043 0320 	orr.w	r3, r3, #32
 8003490:	6153      	str	r3, [r2, #20]
 8003492:	e014      	b.n	80034be <TIM1_BRK_TIM15_IRQHandler+0x146>
		} else if(SoftPwmL.status == 2) {
 8003494:	4b16      	ldr	r3, [pc, #88]	; (80034f0 <TIM1_BRK_TIM15_IRQHandler+0x178>)
 8003496:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800349a:	2b02      	cmp	r3, #2
 800349c:	d10f      	bne.n	80034be <TIM1_BRK_TIM15_IRQHandler+0x146>
			GPIOA->ODR |= (1<<4); //_1A
 800349e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80034a2:	695b      	ldr	r3, [r3, #20]
 80034a4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80034a8:	f043 0310 	orr.w	r3, r3, #16
 80034ac:	6153      	str	r3, [r2, #20]
			GPIOA->ODR &= ~(1<<5); //_2A
 80034ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80034b2:	695b      	ldr	r3, [r3, #20]
 80034b4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80034b8:	f023 0320 	bic.w	r3, r3, #32
 80034bc:	6153      	str	r3, [r2, #20]
		}


		TIM15->SR &= ~(TIM_SR_CC2IF);
 80034be:	4b09      	ldr	r3, [pc, #36]	; (80034e4 <TIM1_BRK_TIM15_IRQHandler+0x16c>)
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	4a08      	ldr	r2, [pc, #32]	; (80034e4 <TIM1_BRK_TIM15_IRQHandler+0x16c>)
 80034c4:	f023 0304 	bic.w	r3, r3, #4
 80034c8:	6113      	str	r3, [r2, #16]
		if((TIM15->SR & TIM_SR_CC2IF) == 0) {
 80034ca:	4b06      	ldr	r3, [pc, #24]	; (80034e4 <TIM1_BRK_TIM15_IRQHandler+0x16c>)
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	f003 0304 	and.w	r3, r3, #4
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d100      	bne.n	80034d8 <TIM1_BRK_TIM15_IRQHandler+0x160>
			__asm__ volatile("NOP");
 80034d6:	bf00      	nop
		}
		__asm__ volatile("NOP");
 80034d8:	bf00      	nop
	}
}
 80034da:	bf00      	nop
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr
 80034e4:	40014000 	.word	0x40014000
 80034e8:	48000400 	.word	0x48000400
 80034ec:	200009fc 	.word	0x200009fc
 80034f0:	20000a34 	.word	0x20000a34
 80034f4:	00000000 	.word	0x00000000

080034f8 <TIM1_TRG_COM_TIM17_IRQHandler>:

void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80034f8:	b5b0      	push	{r4, r5, r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
	if((TIM17->SR & TIM_SR_UIF) == TIM_SR_UIF) {
 80034fe:	4ba6      	ldr	r3, [pc, #664]	; (8003798 <TIM1_TRG_COM_TIM17_IRQHandler+0x2a0>)
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b01      	cmp	r3, #1
 8003508:	f040 8290 	bne.w	8003a2c <TIM1_TRG_COM_TIM17_IRQHandler+0x534>
		  uint32_t start_cycle = DWT->CYCCNT;
 800350c:	4ba3      	ldr	r3, [pc, #652]	; (800379c <TIM1_TRG_COM_TIM17_IRQHandler+0x2a4>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	607b      	str	r3, [r7, #4]

		EncoderR.pulses = TIM1->CNT;
 8003512:	4ba3      	ldr	r3, [pc, #652]	; (80037a0 <TIM1_TRG_COM_TIM17_IRQHandler+0x2a8>)
 8003514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003516:	461a      	mov	r2, r3
 8003518:	4ba2      	ldr	r3, [pc, #648]	; (80037a4 <TIM1_TRG_COM_TIM17_IRQHandler+0x2ac>)
 800351a:	611a      	str	r2, [r3, #16]
		if(EncoderR.pulses > 32767) {
 800351c:	4ba1      	ldr	r3, [pc, #644]	; (80037a4 <TIM1_TRG_COM_TIM17_IRQHandler+0x2ac>)
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003524:	db07      	blt.n	8003536 <TIM1_TRG_COM_TIM17_IRQHandler+0x3e>
			EncoderR.pulses = (65535 - EncoderR.pulses);
 8003526:	4b9f      	ldr	r3, [pc, #636]	; (80037a4 <TIM1_TRG_COM_TIM17_IRQHandler+0x2ac>)
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800352e:	33ff      	adds	r3, #255	; 0xff
 8003530:	4a9c      	ldr	r2, [pc, #624]	; (80037a4 <TIM1_TRG_COM_TIM17_IRQHandler+0x2ac>)
 8003532:	6113      	str	r3, [r2, #16]
 8003534:	e004      	b.n	8003540 <TIM1_TRG_COM_TIM17_IRQHandler+0x48>
		} else {
			EncoderR.pulses = -EncoderR.pulses;
 8003536:	4b9b      	ldr	r3, [pc, #620]	; (80037a4 <TIM1_TRG_COM_TIM17_IRQHandler+0x2ac>)
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	425b      	negs	r3, r3
 800353c:	4a99      	ldr	r2, [pc, #612]	; (80037a4 <TIM1_TRG_COM_TIM17_IRQHandler+0x2ac>)
 800353e:	6113      	str	r3, [r2, #16]
		}
		TIM1->EGR |= TIM_EGR_UG;
 8003540:	4b97      	ldr	r3, [pc, #604]	; (80037a0 <TIM1_TRG_COM_TIM17_IRQHandler+0x2a8>)
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	4a96      	ldr	r2, [pc, #600]	; (80037a0 <TIM1_TRG_COM_TIM17_IRQHandler+0x2a8>)
 8003546:	f043 0301 	orr.w	r3, r3, #1
 800354a:	6153      	str	r3, [r2, #20]
//		EncoderR.sumPulses += EncoderR.pulses;
//		if((EncoderR.pulses > 5) || (EncoderR.pulses < -5)) EncoderR.iter += 1;
		EncoderR.rpm = (EncoderR.pulses * 1000 * 60) / 10240; //RPM
 800354c:	4b95      	ldr	r3, [pc, #596]	; (80037a4 <TIM1_TRG_COM_TIM17_IRQHandler+0x2ac>)
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	f64e 2260 	movw	r2, #60000	; 0xea60
 8003554:	fb02 f303 	mul.w	r3, r2, r3
 8003558:	4a93      	ldr	r2, [pc, #588]	; (80037a8 <TIM1_TRG_COM_TIM17_IRQHandler+0x2b0>)
 800355a:	fb82 1203 	smull	r1, r2, r2, r3
 800355e:	1312      	asrs	r2, r2, #12
 8003560:	17db      	asrs	r3, r3, #31
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	4a8f      	ldr	r2, [pc, #572]	; (80037a4 <TIM1_TRG_COM_TIM17_IRQHandler+0x2ac>)
 8003566:	60d3      	str	r3, [r2, #12]


//		if(TIM2->CNT > TIM2->ARR) {
//		  TIM2->EGR |= TIM_EGR_UG;
//		}
		EncoderL.pulses = TIM2->CNT;
 8003568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800356c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356e:	461a      	mov	r2, r3
 8003570:	4b8e      	ldr	r3, [pc, #568]	; (80037ac <TIM1_TRG_COM_TIM17_IRQHandler+0x2b4>)
 8003572:	611a      	str	r2, [r3, #16]
		if(EncoderL.pulses > 32767) {
 8003574:	4b8d      	ldr	r3, [pc, #564]	; (80037ac <TIM1_TRG_COM_TIM17_IRQHandler+0x2b4>)
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800357c:	db06      	blt.n	800358c <TIM1_TRG_COM_TIM17_IRQHandler+0x94>
			EncoderL.pulses = -(65535 - EncoderL.pulses);
 800357e:	4b8b      	ldr	r3, [pc, #556]	; (80037ac <TIM1_TRG_COM_TIM17_IRQHandler+0x2b4>)
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8003586:	3bff      	subs	r3, #255	; 0xff
 8003588:	4a88      	ldr	r2, [pc, #544]	; (80037ac <TIM1_TRG_COM_TIM17_IRQHandler+0x2b4>)
 800358a:	6113      	str	r3, [r2, #16]
		}
		TIM2->EGR |= TIM_EGR_UG;
 800358c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003596:	f043 0301 	orr.w	r3, r3, #1
 800359a:	6153      	str	r3, [r2, #20]
		EncoderL.rpm = (EncoderL.pulses * 1000 * 60) / 10240; //RPM
 800359c:	4b83      	ldr	r3, [pc, #524]	; (80037ac <TIM1_TRG_COM_TIM17_IRQHandler+0x2b4>)
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	f64e 2260 	movw	r2, #60000	; 0xea60
 80035a4:	fb02 f303 	mul.w	r3, r2, r3
 80035a8:	4a7f      	ldr	r2, [pc, #508]	; (80037a8 <TIM1_TRG_COM_TIM17_IRQHandler+0x2b0>)
 80035aa:	fb82 1203 	smull	r1, r2, r2, r3
 80035ae:	1312      	asrs	r2, r2, #12
 80035b0:	17db      	asrs	r3, r3, #31
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	4a7d      	ldr	r2, [pc, #500]	; (80037ac <TIM1_TRG_COM_TIM17_IRQHandler+0x2b4>)
 80035b6:	60d3      	str	r3, [r2, #12]
//		  SoftPwmR.status = 1;
//		} else {
//		  SoftPwmR.status = 0;
//		}

		SoftPwmR.WheelSpeed = tSpeed - aSpeed*DISBETWHEELS/2;
 80035b8:	4b7d      	ldr	r3, [pc, #500]	; (80037b0 <TIM1_TRG_COM_TIM17_IRQHandler+0x2b8>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4618      	mov	r0, r3
 80035be:	f7fc ffd3 	bl	8000568 <__aeabi_f2d>
 80035c2:	4604      	mov	r4, r0
 80035c4:	460d      	mov	r5, r1
 80035c6:	4b7b      	ldr	r3, [pc, #492]	; (80037b4 <TIM1_TRG_COM_TIM17_IRQHandler+0x2bc>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7fc ffcc 	bl	8000568 <__aeabi_f2d>
 80035d0:	a36d      	add	r3, pc, #436	; (adr r3, 8003788 <TIM1_TRG_COM_TIM17_IRQHandler+0x290>)
 80035d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d6:	f7fd f81f 	bl	8000618 <__aeabi_dmul>
 80035da:	4602      	mov	r2, r0
 80035dc:	460b      	mov	r3, r1
 80035de:	4610      	mov	r0, r2
 80035e0:	4619      	mov	r1, r3
 80035e2:	f04f 0200 	mov.w	r2, #0
 80035e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80035ea:	f7fd f93f 	bl	800086c <__aeabi_ddiv>
 80035ee:	4602      	mov	r2, r0
 80035f0:	460b      	mov	r3, r1
 80035f2:	4620      	mov	r0, r4
 80035f4:	4629      	mov	r1, r5
 80035f6:	f7fc fe57 	bl	80002a8 <__aeabi_dsub>
 80035fa:	4602      	mov	r2, r0
 80035fc:	460b      	mov	r3, r1
 80035fe:	4610      	mov	r0, r2
 8003600:	4619      	mov	r1, r3
 8003602:	f7fd fae1 	bl	8000bc8 <__aeabi_d2f>
 8003606:	4603      	mov	r3, r0
 8003608:	4a6b      	ldr	r2, [pc, #428]	; (80037b8 <TIM1_TRG_COM_TIM17_IRQHandler+0x2c0>)
 800360a:	6153      	str	r3, [r2, #20]
		SoftPwmR.reqValueTemp = ((SoftPwmR.WheelSpeed)/(2*3.14*RWHEEL))*10240/1000;
 800360c:	4b6a      	ldr	r3, [pc, #424]	; (80037b8 <TIM1_TRG_COM_TIM17_IRQHandler+0x2c0>)
 800360e:	695b      	ldr	r3, [r3, #20]
 8003610:	4618      	mov	r0, r3
 8003612:	f7fc ffa9 	bl	8000568 <__aeabi_f2d>
 8003616:	a35e      	add	r3, pc, #376	; (adr r3, 8003790 <TIM1_TRG_COM_TIM17_IRQHandler+0x298>)
 8003618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800361c:	f7fd f926 	bl	800086c <__aeabi_ddiv>
 8003620:	4602      	mov	r2, r0
 8003622:	460b      	mov	r3, r1
 8003624:	4610      	mov	r0, r2
 8003626:	4619      	mov	r1, r3
 8003628:	f04f 0200 	mov.w	r2, #0
 800362c:	4b63      	ldr	r3, [pc, #396]	; (80037bc <TIM1_TRG_COM_TIM17_IRQHandler+0x2c4>)
 800362e:	f7fc fff3 	bl	8000618 <__aeabi_dmul>
 8003632:	4602      	mov	r2, r0
 8003634:	460b      	mov	r3, r1
 8003636:	4610      	mov	r0, r2
 8003638:	4619      	mov	r1, r3
 800363a:	f04f 0200 	mov.w	r2, #0
 800363e:	4b60      	ldr	r3, [pc, #384]	; (80037c0 <TIM1_TRG_COM_TIM17_IRQHandler+0x2c8>)
 8003640:	f7fd f914 	bl	800086c <__aeabi_ddiv>
 8003644:	4602      	mov	r2, r0
 8003646:	460b      	mov	r3, r1
 8003648:	4610      	mov	r0, r2
 800364a:	4619      	mov	r1, r3
 800364c:	f7fd fabc 	bl	8000bc8 <__aeabi_d2f>
 8003650:	4603      	mov	r3, r0
 8003652:	4a59      	ldr	r2, [pc, #356]	; (80037b8 <TIM1_TRG_COM_TIM17_IRQHandler+0x2c0>)
 8003654:	6193      	str	r3, [r2, #24]
		if((SoftPwmR.reqValueTemp >= - 4) && (SoftPwmR.reqValueTemp <= 4)) {
 8003656:	4b58      	ldr	r3, [pc, #352]	; (80037b8 <TIM1_TRG_COM_TIM17_IRQHandler+0x2c0>)
 8003658:	edd3 7a06 	vldr	s15, [r3, #24]
 800365c:	eeb9 7a00 	vmov.f32	s14, #144	; 0xc0800000 -4.0
 8003660:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003668:	db0e      	blt.n	8003688 <TIM1_TRG_COM_TIM17_IRQHandler+0x190>
 800366a:	4b53      	ldr	r3, [pc, #332]	; (80037b8 <TIM1_TRG_COM_TIM17_IRQHandler+0x2c0>)
 800366c:	edd3 7a06 	vldr	s15, [r3, #24]
 8003670:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003674:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800367c:	d804      	bhi.n	8003688 <TIM1_TRG_COM_TIM17_IRQHandler+0x190>
			SoftPwmR.reqValueTemp = 0;
 800367e:	4b4e      	ldr	r3, [pc, #312]	; (80037b8 <TIM1_TRG_COM_TIM17_IRQHandler+0x2c0>)
 8003680:	f04f 0200 	mov.w	r2, #0
 8003684:	619a      	str	r2, [r3, #24]
 8003686:	e01a      	b.n	80036be <TIM1_TRG_COM_TIM17_IRQHandler+0x1c6>
		} else if((SoftPwmR.reqValueTemp > MAXPULSES)) {
 8003688:	4b4b      	ldr	r3, [pc, #300]	; (80037b8 <TIM1_TRG_COM_TIM17_IRQHandler+0x2c0>)
 800368a:	edd3 7a06 	vldr	s15, [r3, #24]
 800368e:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80037c4 <TIM1_TRG_COM_TIM17_IRQHandler+0x2cc>
 8003692:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800369a:	dd03      	ble.n	80036a4 <TIM1_TRG_COM_TIM17_IRQHandler+0x1ac>
			SoftPwmR.reqValueTemp = MAXPULSES;
 800369c:	4b46      	ldr	r3, [pc, #280]	; (80037b8 <TIM1_TRG_COM_TIM17_IRQHandler+0x2c0>)
 800369e:	4a4a      	ldr	r2, [pc, #296]	; (80037c8 <TIM1_TRG_COM_TIM17_IRQHandler+0x2d0>)
 80036a0:	619a      	str	r2, [r3, #24]
 80036a2:	e00c      	b.n	80036be <TIM1_TRG_COM_TIM17_IRQHandler+0x1c6>
		} else if((SoftPwmR.reqValueTemp < -MAXPULSES)) {
 80036a4:	4b44      	ldr	r3, [pc, #272]	; (80037b8 <TIM1_TRG_COM_TIM17_IRQHandler+0x2c0>)
 80036a6:	edd3 7a06 	vldr	s15, [r3, #24]
 80036aa:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80037cc <TIM1_TRG_COM_TIM17_IRQHandler+0x2d4>
 80036ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036b6:	d502      	bpl.n	80036be <TIM1_TRG_COM_TIM17_IRQHandler+0x1c6>
			SoftPwmR.reqValueTemp = -MAXPULSES;
 80036b8:	4b3f      	ldr	r3, [pc, #252]	; (80037b8 <TIM1_TRG_COM_TIM17_IRQHandler+0x2c0>)
 80036ba:	4a45      	ldr	r2, [pc, #276]	; (80037d0 <TIM1_TRG_COM_TIM17_IRQHandler+0x2d8>)
 80036bc:	619a      	str	r2, [r3, #24]
		}
		SoftPwmR.reqValue = (int16_t)SoftPwmR.reqValueTemp;
 80036be:	4b3e      	ldr	r3, [pc, #248]	; (80037b8 <TIM1_TRG_COM_TIM17_IRQHandler+0x2c0>)
 80036c0:	edd3 7a06 	vldr	s15, [r3, #24]
 80036c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036c8:	ee17 3a90 	vmov	r3, s15
 80036cc:	b21b      	sxth	r3, r3
 80036ce:	461a      	mov	r2, r3
 80036d0:	4b39      	ldr	r3, [pc, #228]	; (80037b8 <TIM1_TRG_COM_TIM17_IRQHandler+0x2c0>)
 80036d2:	61da      	str	r2, [r3, #28]

		SoftPwmR.curValue = EncoderR.pulses;
 80036d4:	4b33      	ldr	r3, [pc, #204]	; (80037a4 <TIM1_TRG_COM_TIM17_IRQHandler+0x2ac>)
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	4a37      	ldr	r2, [pc, #220]	; (80037b8 <TIM1_TRG_COM_TIM17_IRQHandler+0x2c0>)
 80036da:	6213      	str	r3, [r2, #32]
		SoftPwmR.errorValue = (SoftPwmR.reqValue - SoftPwmR.curValue)*1000000;
 80036dc:	4b36      	ldr	r3, [pc, #216]	; (80037b8 <TIM1_TRG_COM_TIM17_IRQHandler+0x2c0>)
 80036de:	69da      	ldr	r2, [r3, #28]
 80036e0:	4b35      	ldr	r3, [pc, #212]	; (80037b8 <TIM1_TRG_COM_TIM17_IRQHandler+0x2c0>)
 80036e2:	6a1b      	ldr	r3, [r3, #32]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	4a3b      	ldr	r2, [pc, #236]	; (80037d4 <TIM1_TRG_COM_TIM17_IRQHandler+0x2dc>)
 80036e8:	fb02 f303 	mul.w	r3, r2, r3
 80036ec:	4a32      	ldr	r2, [pc, #200]	; (80037b8 <TIM1_TRG_COM_TIM17_IRQHandler+0x2c0>)
 80036ee:	6013      	str	r3, [r2, #0]
//		SoftPwmR.pValue = KP * SoftPwmR.errorValue;
//		SoftPwmR.iValue += KI * SoftPwmR.errorValue;
		SoftPwmR.pVal = SoftPwmR.errorValue / KPI * KPM;
 80036f0:	4b31      	ldr	r3, [pc, #196]	; (80037b8 <TIM1_TRG_COM_TIM17_IRQHandler+0x2c0>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a38      	ldr	r2, [pc, #224]	; (80037d8 <TIM1_TRG_COM_TIM17_IRQHandler+0x2e0>)
 80036f6:	fb82 1203 	smull	r1, r2, r2, r3
 80036fa:	1212      	asrs	r2, r2, #8
 80036fc:	17db      	asrs	r3, r3, #31
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	4a2d      	ldr	r2, [pc, #180]	; (80037b8 <TIM1_TRG_COM_TIM17_IRQHandler+0x2c0>)
 8003702:	6313      	str	r3, [r2, #48]	; 0x30
//		if((SoftPwmR.iValue <= 4) && (SoftPwmR.iValue >= -4)) {
//			SoftPwmR.sumValue = SoftPwmR.pValue;
//		} else {
//			SoftPwmR.sumValue = (SoftPwmR.pValue + SoftPwmR.iValue);
//		}
		SoftPwmR.sumVal += (SoftPwmR.pVal + SoftPwmR.iVal);
 8003704:	4b2c      	ldr	r3, [pc, #176]	; (80037b8 <TIM1_TRG_COM_TIM17_IRQHandler+0x2c0>)
 8003706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003708:	4b2b      	ldr	r3, [pc, #172]	; (80037b8 <TIM1_TRG_COM_TIM17_IRQHandler+0x2c0>)
 800370a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800370c:	4b2a      	ldr	r3, [pc, #168]	; (80037b8 <TIM1_TRG_COM_TIM17_IRQHandler+0x2c0>)
 800370e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003710:	440b      	add	r3, r1
 8003712:	4413      	add	r3, r2
 8003714:	4a28      	ldr	r2, [pc, #160]	; (80037b8 <TIM1_TRG_COM_TIM17_IRQHandler+0x2c0>)
 8003716:	62d3      	str	r3, [r2, #44]	; 0x2c
//		SoftPwmR.pwmFloatValue += ((((float)SoftPwmR.sumValue)/((float)MAXRPM))*PWMVAL);
//		if(SoftPwmR.pwmFloatValue > PWMVAL) SoftPwmR.pwmFloatValue = PWMVAL;
//		else if(SoftPwmR.pwmFloatValue < -PWMVAL) SoftPwmR.pwmFloatValue = -PWMVAL;
//		SoftPwmR.pwmValue = (int16_t)SoftPwmR.pwmFloatValue;
		SoftPwmR.pwmValue = ((SoftPwmR.sumVal / ((MAXPULSES*1000000)/1000))*PWMVAL)/1000;
 8003718:	4b27      	ldr	r3, [pc, #156]	; (80037b8 <TIM1_TRG_COM_TIM17_IRQHandler+0x2c0>)
 800371a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371c:	4a2f      	ldr	r2, [pc, #188]	; (80037dc <TIM1_TRG_COM_TIM17_IRQHandler+0x2e4>)
 800371e:	fb82 1203 	smull	r1, r2, r2, r3
 8003722:	441a      	add	r2, r3
 8003724:	1412      	asrs	r2, r2, #16
 8003726:	17db      	asrs	r3, r3, #31
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800372e:	fb02 f303 	mul.w	r3, r2, r3
 8003732:	4a2b      	ldr	r2, [pc, #172]	; (80037e0 <TIM1_TRG_COM_TIM17_IRQHandler+0x2e8>)
 8003734:	fb82 1203 	smull	r1, r2, r2, r3
 8003738:	1192      	asrs	r2, r2, #6
 800373a:	17db      	asrs	r3, r3, #31
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	4a1e      	ldr	r2, [pc, #120]	; (80037b8 <TIM1_TRG_COM_TIM17_IRQHandler+0x2c0>)
 8003740:	6253      	str	r3, [r2, #36]	; 0x24
		if(SoftPwmR.pwmValue > PWMVAL) SoftPwmR.pwmValue = PWMVAL;
 8003742:	4b1d      	ldr	r3, [pc, #116]	; (80037b8 <TIM1_TRG_COM_TIM17_IRQHandler+0x2c0>)
 8003744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003746:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800374a:	dd04      	ble.n	8003756 <TIM1_TRG_COM_TIM17_IRQHandler+0x25e>
 800374c:	4b1a      	ldr	r3, [pc, #104]	; (80037b8 <TIM1_TRG_COM_TIM17_IRQHandler+0x2c0>)
 800374e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003752:	625a      	str	r2, [r3, #36]	; 0x24
 8003754:	e007      	b.n	8003766 <TIM1_TRG_COM_TIM17_IRQHandler+0x26e>
		else if(SoftPwmR.pwmValue < -PWMVAL) SoftPwmR.pwmValue = -PWMVAL;
 8003756:	4b18      	ldr	r3, [pc, #96]	; (80037b8 <TIM1_TRG_COM_TIM17_IRQHandler+0x2c0>)
 8003758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375a:	f513 7fc8 	cmn.w	r3, #400	; 0x190
 800375e:	da02      	bge.n	8003766 <TIM1_TRG_COM_TIM17_IRQHandler+0x26e>
 8003760:	4b15      	ldr	r3, [pc, #84]	; (80037b8 <TIM1_TRG_COM_TIM17_IRQHandler+0x2c0>)
 8003762:	4a20      	ldr	r2, [pc, #128]	; (80037e4 <TIM1_TRG_COM_TIM17_IRQHandler+0x2ec>)
 8003764:	625a      	str	r2, [r3, #36]	; 0x24
//		  if(SoftPwmR.pwmValue < 0) {
//			  SoftPwmR.pwmFloatValue += 1;
//		  }
//		}

		if(SoftPwmR.pwmValue < 0) {
 8003766:	4b14      	ldr	r3, [pc, #80]	; (80037b8 <TIM1_TRG_COM_TIM17_IRQHandler+0x2c0>)
 8003768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376a:	2b00      	cmp	r3, #0
 800376c:	da3e      	bge.n	80037ec <TIM1_TRG_COM_TIM17_IRQHandler+0x2f4>
		  TIM15->CCR1 = TIM15->ARR - SoftPwmR.pwmValue*(-1);
 800376e:	4b1e      	ldr	r3, [pc, #120]	; (80037e8 <TIM1_TRG_COM_TIM17_IRQHandler+0x2f0>)
 8003770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003772:	4a11      	ldr	r2, [pc, #68]	; (80037b8 <TIM1_TRG_COM_TIM17_IRQHandler+0x2c0>)
 8003774:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003776:	4611      	mov	r1, r2
 8003778:	4a1b      	ldr	r2, [pc, #108]	; (80037e8 <TIM1_TRG_COM_TIM17_IRQHandler+0x2f0>)
 800377a:	440b      	add	r3, r1
 800377c:	6353      	str	r3, [r2, #52]	; 0x34
		  SoftPwmR.status = 2;
 800377e:	4b0e      	ldr	r3, [pc, #56]	; (80037b8 <TIM1_TRG_COM_TIM17_IRQHandler+0x2c0>)
 8003780:	2202      	movs	r2, #2
 8003782:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8003786:	e046      	b.n	8003816 <TIM1_TRG_COM_TIM17_IRQHandler+0x31e>
 8003788:	1eb851ec 	.word	0x1eb851ec
 800378c:	3fb1eb85 	.word	0x3fb1eb85
 8003790:	09d49519 	.word	0x09d49519
 8003794:	3fbc2268 	.word	0x3fbc2268
 8003798:	40014800 	.word	0x40014800
 800379c:	e0001000 	.word	0xe0001000
 80037a0:	40012c00 	.word	0x40012c00
 80037a4:	200009c4 	.word	0x200009c4
 80037a8:	66666667 	.word	0x66666667
 80037ac:	200009e0 	.word	0x200009e0
 80037b0:	20000f7c 	.word	0x20000f7c
 80037b4:	20000f80 	.word	0x20000f80
 80037b8:	200009fc 	.word	0x200009fc
 80037bc:	40c40000 	.word	0x40c40000
 80037c0:	408f4000 	.word	0x408f4000
 80037c4:	42aa0000 	.word	0x42aa0000
 80037c8:	42aa0000 	.word	0x42aa0000
 80037cc:	c2aa0000 	.word	0xc2aa0000
 80037d0:	c2aa0000 	.word	0xc2aa0000
 80037d4:	000f4240 	.word	0x000f4240
 80037d8:	4a4dc96f 	.word	0x4a4dc96f
 80037dc:	c56106eb 	.word	0xc56106eb
 80037e0:	10624dd3 	.word	0x10624dd3
 80037e4:	fffffe70 	.word	0xfffffe70
 80037e8:	40014000 	.word	0x40014000
		} else if(SoftPwmR.pwmValue > 0){
 80037ec:	4b96      	ldr	r3, [pc, #600]	; (8003a48 <TIM1_TRG_COM_TIM17_IRQHandler+0x550>)
 80037ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	dd0c      	ble.n	800380e <TIM1_TRG_COM_TIM17_IRQHandler+0x316>
		  TIM15->CCR1 = TIM15->ARR - SoftPwmR.pwmValue;
 80037f4:	4b95      	ldr	r3, [pc, #596]	; (8003a4c <TIM1_TRG_COM_TIM17_IRQHandler+0x554>)
 80037f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f8:	4a93      	ldr	r2, [pc, #588]	; (8003a48 <TIM1_TRG_COM_TIM17_IRQHandler+0x550>)
 80037fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037fc:	4611      	mov	r1, r2
 80037fe:	4a93      	ldr	r2, [pc, #588]	; (8003a4c <TIM1_TRG_COM_TIM17_IRQHandler+0x554>)
 8003800:	1a5b      	subs	r3, r3, r1
 8003802:	6353      	str	r3, [r2, #52]	; 0x34
		  SoftPwmR.status = 1;
 8003804:	4b90      	ldr	r3, [pc, #576]	; (8003a48 <TIM1_TRG_COM_TIM17_IRQHandler+0x550>)
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800380c:	e003      	b.n	8003816 <TIM1_TRG_COM_TIM17_IRQHandler+0x31e>
		} else {
		  SoftPwmR.status = 0;
 800380e:	4b8e      	ldr	r3, [pc, #568]	; (8003a48 <TIM1_TRG_COM_TIM17_IRQHandler+0x550>)
 8003810:	2200      	movs	r2, #0
 8003812:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}

//		uint32_t end_cycle = DWT->CYCCNT;
//		cycle_count = end_cycle - start_cycle;

		SoftPwmL.WheelSpeed = tSpeed + aSpeed*DISBETWHEELS/2;
 8003816:	4b8e      	ldr	r3, [pc, #568]	; (8003a50 <TIM1_TRG_COM_TIM17_IRQHandler+0x558>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4618      	mov	r0, r3
 800381c:	f7fc fea4 	bl	8000568 <__aeabi_f2d>
 8003820:	4604      	mov	r4, r0
 8003822:	460d      	mov	r5, r1
 8003824:	4b8b      	ldr	r3, [pc, #556]	; (8003a54 <TIM1_TRG_COM_TIM17_IRQHandler+0x55c>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4618      	mov	r0, r3
 800382a:	f7fc fe9d 	bl	8000568 <__aeabi_f2d>
 800382e:	a382      	add	r3, pc, #520	; (adr r3, 8003a38 <TIM1_TRG_COM_TIM17_IRQHandler+0x540>)
 8003830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003834:	f7fc fef0 	bl	8000618 <__aeabi_dmul>
 8003838:	4602      	mov	r2, r0
 800383a:	460b      	mov	r3, r1
 800383c:	4610      	mov	r0, r2
 800383e:	4619      	mov	r1, r3
 8003840:	f04f 0200 	mov.w	r2, #0
 8003844:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003848:	f7fd f810 	bl	800086c <__aeabi_ddiv>
 800384c:	4602      	mov	r2, r0
 800384e:	460b      	mov	r3, r1
 8003850:	4620      	mov	r0, r4
 8003852:	4629      	mov	r1, r5
 8003854:	f7fc fd2a 	bl	80002ac <__adddf3>
 8003858:	4602      	mov	r2, r0
 800385a:	460b      	mov	r3, r1
 800385c:	4610      	mov	r0, r2
 800385e:	4619      	mov	r1, r3
 8003860:	f7fd f9b2 	bl	8000bc8 <__aeabi_d2f>
 8003864:	4603      	mov	r3, r0
 8003866:	4a7c      	ldr	r2, [pc, #496]	; (8003a58 <TIM1_TRG_COM_TIM17_IRQHandler+0x560>)
 8003868:	6153      	str	r3, [r2, #20]
		SoftPwmL.reqValueTemp = ((SoftPwmL.WheelSpeed)/(2*3.14*RWHEEL))*10240/1000;
 800386a:	4b7b      	ldr	r3, [pc, #492]	; (8003a58 <TIM1_TRG_COM_TIM17_IRQHandler+0x560>)
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	4618      	mov	r0, r3
 8003870:	f7fc fe7a 	bl	8000568 <__aeabi_f2d>
 8003874:	a372      	add	r3, pc, #456	; (adr r3, 8003a40 <TIM1_TRG_COM_TIM17_IRQHandler+0x548>)
 8003876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800387a:	f7fc fff7 	bl	800086c <__aeabi_ddiv>
 800387e:	4602      	mov	r2, r0
 8003880:	460b      	mov	r3, r1
 8003882:	4610      	mov	r0, r2
 8003884:	4619      	mov	r1, r3
 8003886:	f04f 0200 	mov.w	r2, #0
 800388a:	4b74      	ldr	r3, [pc, #464]	; (8003a5c <TIM1_TRG_COM_TIM17_IRQHandler+0x564>)
 800388c:	f7fc fec4 	bl	8000618 <__aeabi_dmul>
 8003890:	4602      	mov	r2, r0
 8003892:	460b      	mov	r3, r1
 8003894:	4610      	mov	r0, r2
 8003896:	4619      	mov	r1, r3
 8003898:	f04f 0200 	mov.w	r2, #0
 800389c:	4b70      	ldr	r3, [pc, #448]	; (8003a60 <TIM1_TRG_COM_TIM17_IRQHandler+0x568>)
 800389e:	f7fc ffe5 	bl	800086c <__aeabi_ddiv>
 80038a2:	4602      	mov	r2, r0
 80038a4:	460b      	mov	r3, r1
 80038a6:	4610      	mov	r0, r2
 80038a8:	4619      	mov	r1, r3
 80038aa:	f7fd f98d 	bl	8000bc8 <__aeabi_d2f>
 80038ae:	4603      	mov	r3, r0
 80038b0:	4a69      	ldr	r2, [pc, #420]	; (8003a58 <TIM1_TRG_COM_TIM17_IRQHandler+0x560>)
 80038b2:	6193      	str	r3, [r2, #24]
		if((SoftPwmL.reqValueTemp >= - 4) && (SoftPwmL.reqValueTemp <= 4)) {
 80038b4:	4b68      	ldr	r3, [pc, #416]	; (8003a58 <TIM1_TRG_COM_TIM17_IRQHandler+0x560>)
 80038b6:	edd3 7a06 	vldr	s15, [r3, #24]
 80038ba:	eeb9 7a00 	vmov.f32	s14, #144	; 0xc0800000 -4.0
 80038be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038c6:	db0e      	blt.n	80038e6 <TIM1_TRG_COM_TIM17_IRQHandler+0x3ee>
 80038c8:	4b63      	ldr	r3, [pc, #396]	; (8003a58 <TIM1_TRG_COM_TIM17_IRQHandler+0x560>)
 80038ca:	edd3 7a06 	vldr	s15, [r3, #24]
 80038ce:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80038d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038da:	d804      	bhi.n	80038e6 <TIM1_TRG_COM_TIM17_IRQHandler+0x3ee>
			SoftPwmL.reqValueTemp = 0;
 80038dc:	4b5e      	ldr	r3, [pc, #376]	; (8003a58 <TIM1_TRG_COM_TIM17_IRQHandler+0x560>)
 80038de:	f04f 0200 	mov.w	r2, #0
 80038e2:	619a      	str	r2, [r3, #24]
 80038e4:	e01a      	b.n	800391c <TIM1_TRG_COM_TIM17_IRQHandler+0x424>
		} else if((SoftPwmL.reqValueTemp > MAXPULSES)) {
 80038e6:	4b5c      	ldr	r3, [pc, #368]	; (8003a58 <TIM1_TRG_COM_TIM17_IRQHandler+0x560>)
 80038e8:	edd3 7a06 	vldr	s15, [r3, #24]
 80038ec:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8003a64 <TIM1_TRG_COM_TIM17_IRQHandler+0x56c>
 80038f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038f8:	dd03      	ble.n	8003902 <TIM1_TRG_COM_TIM17_IRQHandler+0x40a>
			SoftPwmL.reqValueTemp = MAXPULSES;
 80038fa:	4b57      	ldr	r3, [pc, #348]	; (8003a58 <TIM1_TRG_COM_TIM17_IRQHandler+0x560>)
 80038fc:	4a5a      	ldr	r2, [pc, #360]	; (8003a68 <TIM1_TRG_COM_TIM17_IRQHandler+0x570>)
 80038fe:	619a      	str	r2, [r3, #24]
 8003900:	e00c      	b.n	800391c <TIM1_TRG_COM_TIM17_IRQHandler+0x424>
		} else if((SoftPwmL.reqValueTemp < -MAXPULSES)) {
 8003902:	4b55      	ldr	r3, [pc, #340]	; (8003a58 <TIM1_TRG_COM_TIM17_IRQHandler+0x560>)
 8003904:	edd3 7a06 	vldr	s15, [r3, #24]
 8003908:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8003a6c <TIM1_TRG_COM_TIM17_IRQHandler+0x574>
 800390c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003914:	d502      	bpl.n	800391c <TIM1_TRG_COM_TIM17_IRQHandler+0x424>
			SoftPwmL.reqValueTemp = -MAXPULSES;
 8003916:	4b50      	ldr	r3, [pc, #320]	; (8003a58 <TIM1_TRG_COM_TIM17_IRQHandler+0x560>)
 8003918:	4a55      	ldr	r2, [pc, #340]	; (8003a70 <TIM1_TRG_COM_TIM17_IRQHandler+0x578>)
 800391a:	619a      	str	r2, [r3, #24]
		}
		SoftPwmL.reqValue = (int16_t)SoftPwmL.reqValueTemp;
 800391c:	4b4e      	ldr	r3, [pc, #312]	; (8003a58 <TIM1_TRG_COM_TIM17_IRQHandler+0x560>)
 800391e:	edd3 7a06 	vldr	s15, [r3, #24]
 8003922:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003926:	ee17 3a90 	vmov	r3, s15
 800392a:	b21b      	sxth	r3, r3
 800392c:	461a      	mov	r2, r3
 800392e:	4b4a      	ldr	r3, [pc, #296]	; (8003a58 <TIM1_TRG_COM_TIM17_IRQHandler+0x560>)
 8003930:	61da      	str	r2, [r3, #28]

		SoftPwmL.curValue = EncoderL.pulses;
 8003932:	4b50      	ldr	r3, [pc, #320]	; (8003a74 <TIM1_TRG_COM_TIM17_IRQHandler+0x57c>)
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	4a48      	ldr	r2, [pc, #288]	; (8003a58 <TIM1_TRG_COM_TIM17_IRQHandler+0x560>)
 8003938:	6213      	str	r3, [r2, #32]
		SoftPwmL.errorValue = (SoftPwmL.reqValue - SoftPwmL.curValue)*1000000;
 800393a:	4b47      	ldr	r3, [pc, #284]	; (8003a58 <TIM1_TRG_COM_TIM17_IRQHandler+0x560>)
 800393c:	69da      	ldr	r2, [r3, #28]
 800393e:	4b46      	ldr	r3, [pc, #280]	; (8003a58 <TIM1_TRG_COM_TIM17_IRQHandler+0x560>)
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	4a4c      	ldr	r2, [pc, #304]	; (8003a78 <TIM1_TRG_COM_TIM17_IRQHandler+0x580>)
 8003946:	fb02 f303 	mul.w	r3, r2, r3
 800394a:	4a43      	ldr	r2, [pc, #268]	; (8003a58 <TIM1_TRG_COM_TIM17_IRQHandler+0x560>)
 800394c:	6013      	str	r3, [r2, #0]
		SoftPwmL.pVal = SoftPwmL.errorValue / KPI;
 800394e:	4b42      	ldr	r3, [pc, #264]	; (8003a58 <TIM1_TRG_COM_TIM17_IRQHandler+0x560>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a4a      	ldr	r2, [pc, #296]	; (8003a7c <TIM1_TRG_COM_TIM17_IRQHandler+0x584>)
 8003954:	fb82 1203 	smull	r1, r2, r2, r3
 8003958:	1212      	asrs	r2, r2, #8
 800395a:	17db      	asrs	r3, r3, #31
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	4a3e      	ldr	r2, [pc, #248]	; (8003a58 <TIM1_TRG_COM_TIM17_IRQHandler+0x560>)
 8003960:	6313      	str	r3, [r2, #48]	; 0x30
//		SoftPwmL.iVal += SoftPwmL.errorValue / KII;
		SoftPwmL.sumVal += (SoftPwmL.pVal + SoftPwmL.iVal);
 8003962:	4b3d      	ldr	r3, [pc, #244]	; (8003a58 <TIM1_TRG_COM_TIM17_IRQHandler+0x560>)
 8003964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003966:	4b3c      	ldr	r3, [pc, #240]	; (8003a58 <TIM1_TRG_COM_TIM17_IRQHandler+0x560>)
 8003968:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800396a:	4b3b      	ldr	r3, [pc, #236]	; (8003a58 <TIM1_TRG_COM_TIM17_IRQHandler+0x560>)
 800396c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800396e:	440b      	add	r3, r1
 8003970:	4413      	add	r3, r2
 8003972:	4a39      	ldr	r2, [pc, #228]	; (8003a58 <TIM1_TRG_COM_TIM17_IRQHandler+0x560>)
 8003974:	62d3      	str	r3, [r2, #44]	; 0x2c
		SoftPwmL.pwmValue = ((SoftPwmL.sumVal / ((MAXPULSES*1000000)/1000))*PWMVAL)/1000;
 8003976:	4b38      	ldr	r3, [pc, #224]	; (8003a58 <TIM1_TRG_COM_TIM17_IRQHandler+0x560>)
 8003978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397a:	4a41      	ldr	r2, [pc, #260]	; (8003a80 <TIM1_TRG_COM_TIM17_IRQHandler+0x588>)
 800397c:	fb82 1203 	smull	r1, r2, r2, r3
 8003980:	441a      	add	r2, r3
 8003982:	1412      	asrs	r2, r2, #16
 8003984:	17db      	asrs	r3, r3, #31
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800398c:	fb02 f303 	mul.w	r3, r2, r3
 8003990:	4a3c      	ldr	r2, [pc, #240]	; (8003a84 <TIM1_TRG_COM_TIM17_IRQHandler+0x58c>)
 8003992:	fb82 1203 	smull	r1, r2, r2, r3
 8003996:	1192      	asrs	r2, r2, #6
 8003998:	17db      	asrs	r3, r3, #31
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	4a2e      	ldr	r2, [pc, #184]	; (8003a58 <TIM1_TRG_COM_TIM17_IRQHandler+0x560>)
 800399e:	6253      	str	r3, [r2, #36]	; 0x24
		if(SoftPwmL.pwmValue > PWMVAL) SoftPwmL.pwmValue = PWMVAL;
 80039a0:	4b2d      	ldr	r3, [pc, #180]	; (8003a58 <TIM1_TRG_COM_TIM17_IRQHandler+0x560>)
 80039a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80039a8:	dd04      	ble.n	80039b4 <TIM1_TRG_COM_TIM17_IRQHandler+0x4bc>
 80039aa:	4b2b      	ldr	r3, [pc, #172]	; (8003a58 <TIM1_TRG_COM_TIM17_IRQHandler+0x560>)
 80039ac:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80039b0:	625a      	str	r2, [r3, #36]	; 0x24
 80039b2:	e007      	b.n	80039c4 <TIM1_TRG_COM_TIM17_IRQHandler+0x4cc>
		else if(SoftPwmL.pwmValue < -PWMVAL) SoftPwmL.pwmValue = -PWMVAL;
 80039b4:	4b28      	ldr	r3, [pc, #160]	; (8003a58 <TIM1_TRG_COM_TIM17_IRQHandler+0x560>)
 80039b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b8:	f513 7fc8 	cmn.w	r3, #400	; 0x190
 80039bc:	da02      	bge.n	80039c4 <TIM1_TRG_COM_TIM17_IRQHandler+0x4cc>
 80039be:	4b26      	ldr	r3, [pc, #152]	; (8003a58 <TIM1_TRG_COM_TIM17_IRQHandler+0x560>)
 80039c0:	4a31      	ldr	r2, [pc, #196]	; (8003a88 <TIM1_TRG_COM_TIM17_IRQHandler+0x590>)
 80039c2:	625a      	str	r2, [r3, #36]	; 0x24

		if(SoftPwmL.pwmValue < 0) {
 80039c4:	4b24      	ldr	r3, [pc, #144]	; (8003a58 <TIM1_TRG_COM_TIM17_IRQHandler+0x560>)
 80039c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	da0c      	bge.n	80039e6 <TIM1_TRG_COM_TIM17_IRQHandler+0x4ee>
		  TIM15->CCR2 = TIM15->ARR - SoftPwmL.pwmValue*(-1);
 80039cc:	4b1f      	ldr	r3, [pc, #124]	; (8003a4c <TIM1_TRG_COM_TIM17_IRQHandler+0x554>)
 80039ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d0:	4a21      	ldr	r2, [pc, #132]	; (8003a58 <TIM1_TRG_COM_TIM17_IRQHandler+0x560>)
 80039d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039d4:	4611      	mov	r1, r2
 80039d6:	4a1d      	ldr	r2, [pc, #116]	; (8003a4c <TIM1_TRG_COM_TIM17_IRQHandler+0x554>)
 80039d8:	440b      	add	r3, r1
 80039da:	6393      	str	r3, [r2, #56]	; 0x38
		  SoftPwmL.status = 2;
 80039dc:	4b1e      	ldr	r3, [pc, #120]	; (8003a58 <TIM1_TRG_COM_TIM17_IRQHandler+0x560>)
 80039de:	2202      	movs	r2, #2
 80039e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80039e4:	e014      	b.n	8003a10 <TIM1_TRG_COM_TIM17_IRQHandler+0x518>
		} else if(SoftPwmL.pwmValue > 0) {
 80039e6:	4b1c      	ldr	r3, [pc, #112]	; (8003a58 <TIM1_TRG_COM_TIM17_IRQHandler+0x560>)
 80039e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	dd0c      	ble.n	8003a08 <TIM1_TRG_COM_TIM17_IRQHandler+0x510>
		  TIM15->CCR2 = TIM15->ARR - SoftPwmL.pwmValue;
 80039ee:	4b17      	ldr	r3, [pc, #92]	; (8003a4c <TIM1_TRG_COM_TIM17_IRQHandler+0x554>)
 80039f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f2:	4a19      	ldr	r2, [pc, #100]	; (8003a58 <TIM1_TRG_COM_TIM17_IRQHandler+0x560>)
 80039f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039f6:	4611      	mov	r1, r2
 80039f8:	4a14      	ldr	r2, [pc, #80]	; (8003a4c <TIM1_TRG_COM_TIM17_IRQHandler+0x554>)
 80039fa:	1a5b      	subs	r3, r3, r1
 80039fc:	6393      	str	r3, [r2, #56]	; 0x38
		  SoftPwmL.status = 1;
 80039fe:	4b16      	ldr	r3, [pc, #88]	; (8003a58 <TIM1_TRG_COM_TIM17_IRQHandler+0x560>)
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8003a06:	e003      	b.n	8003a10 <TIM1_TRG_COM_TIM17_IRQHandler+0x518>
		} else {
		  SoftPwmL.status = 0;
 8003a08:	4b13      	ldr	r3, [pc, #76]	; (8003a58 <TIM1_TRG_COM_TIM17_IRQHandler+0x560>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}


		TIM17->SR &= ~(TIM_SR_UIF);
 8003a10:	4b1e      	ldr	r3, [pc, #120]	; (8003a8c <TIM1_TRG_COM_TIM17_IRQHandler+0x594>)
 8003a12:	691b      	ldr	r3, [r3, #16]
 8003a14:	4a1d      	ldr	r2, [pc, #116]	; (8003a8c <TIM1_TRG_COM_TIM17_IRQHandler+0x594>)
 8003a16:	f023 0301 	bic.w	r3, r3, #1
 8003a1a:	6113      	str	r3, [r2, #16]
		uint32_t end_cycle = DWT->CYCCNT;
 8003a1c:	4b1c      	ldr	r3, [pc, #112]	; (8003a90 <TIM1_TRG_COM_TIM17_IRQHandler+0x598>)
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	603b      	str	r3, [r7, #0]
		cycle_count = end_cycle - start_cycle;
 8003a22:	683a      	ldr	r2, [r7, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	4a1a      	ldr	r2, [pc, #104]	; (8003a94 <TIM1_TRG_COM_TIM17_IRQHandler+0x59c>)
 8003a2a:	6013      	str	r3, [r2, #0]

	}
}
 8003a2c:	bf00      	nop
 8003a2e:	3708      	adds	r7, #8
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bdb0      	pop	{r4, r5, r7, pc}
 8003a34:	f3af 8000 	nop.w
 8003a38:	1eb851ec 	.word	0x1eb851ec
 8003a3c:	3fb1eb85 	.word	0x3fb1eb85
 8003a40:	09d49519 	.word	0x09d49519
 8003a44:	3fbc2268 	.word	0x3fbc2268
 8003a48:	200009fc 	.word	0x200009fc
 8003a4c:	40014000 	.word	0x40014000
 8003a50:	20000f7c 	.word	0x20000f7c
 8003a54:	20000f80 	.word	0x20000f80
 8003a58:	20000a34 	.word	0x20000a34
 8003a5c:	40c40000 	.word	0x40c40000
 8003a60:	408f4000 	.word	0x408f4000
 8003a64:	42aa0000 	.word	0x42aa0000
 8003a68:	42aa0000 	.word	0x42aa0000
 8003a6c:	c2aa0000 	.word	0xc2aa0000
 8003a70:	c2aa0000 	.word	0xc2aa0000
 8003a74:	200009e0 	.word	0x200009e0
 8003a78:	000f4240 	.word	0x000f4240
 8003a7c:	4a4dc96f 	.word	0x4a4dc96f
 8003a80:	c56106eb 	.word	0xc56106eb
 8003a84:	10624dd3 	.word	0x10624dd3
 8003a88:	fffffe70 	.word	0xfffffe70
 8003a8c:	40014800 	.word	0x40014800
 8003a90:	e0001000 	.word	0xe0001000
 8003a94:	20000f9c 	.word	0x20000f9c

08003a98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0
  return 1;
 8003a9c:	2301      	movs	r3, #1
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <_kill>:

int _kill(int pid, int sig)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003ab2:	f008 f9ff 	bl	800beb4 <__errno>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2216      	movs	r2, #22
 8003aba:	601a      	str	r2, [r3, #0]
  return -1;
 8003abc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3708      	adds	r7, #8
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <_exit>:

void _exit (int status)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003ad0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f7ff ffe7 	bl	8003aa8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003ada:	e7fe      	b.n	8003ada <_exit+0x12>

08003adc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ae8:	2300      	movs	r3, #0
 8003aea:	617b      	str	r3, [r7, #20]
 8003aec:	e00a      	b.n	8003b04 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003aee:	f3af 8000 	nop.w
 8003af2:	4601      	mov	r1, r0
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	1c5a      	adds	r2, r3, #1
 8003af8:	60ba      	str	r2, [r7, #8]
 8003afa:	b2ca      	uxtb	r2, r1
 8003afc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	3301      	adds	r3, #1
 8003b02:	617b      	str	r3, [r7, #20]
 8003b04:	697a      	ldr	r2, [r7, #20]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	dbf0      	blt.n	8003aee <_read+0x12>
  }

  return len;
 8003b0c:	687b      	ldr	r3, [r7, #4]
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3718      	adds	r7, #24
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b086      	sub	sp, #24
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	60f8      	str	r0, [r7, #12]
 8003b1e:	60b9      	str	r1, [r7, #8]
 8003b20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b22:	2300      	movs	r3, #0
 8003b24:	617b      	str	r3, [r7, #20]
 8003b26:	e009      	b.n	8003b3c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	1c5a      	adds	r2, r3, #1
 8003b2c:	60ba      	str	r2, [r7, #8]
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	4618      	mov	r0, r3
 8003b32:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	3301      	adds	r3, #1
 8003b3a:	617b      	str	r3, [r7, #20]
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	dbf1      	blt.n	8003b28 <_write+0x12>
  }
  return len;
 8003b44:	687b      	ldr	r3, [r7, #4]
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3718      	adds	r7, #24
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <_close>:

int _close(int file)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b083      	sub	sp, #12
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003b56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr

08003b66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003b66:	b480      	push	{r7}
 8003b68:	b083      	sub	sp, #12
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
 8003b6e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b76:	605a      	str	r2, [r3, #4]
  return 0;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr

08003b86 <_isatty>:

int _isatty(int file)
{
 8003b86:	b480      	push	{r7}
 8003b88:	b083      	sub	sp, #12
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003b8e:	2301      	movs	r3, #1
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3714      	adds	r7, #20
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
	...

08003bb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b086      	sub	sp, #24
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003bc0:	4a14      	ldr	r2, [pc, #80]	; (8003c14 <_sbrk+0x5c>)
 8003bc2:	4b15      	ldr	r3, [pc, #84]	; (8003c18 <_sbrk+0x60>)
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003bcc:	4b13      	ldr	r3, [pc, #76]	; (8003c1c <_sbrk+0x64>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d102      	bne.n	8003bda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003bd4:	4b11      	ldr	r3, [pc, #68]	; (8003c1c <_sbrk+0x64>)
 8003bd6:	4a12      	ldr	r2, [pc, #72]	; (8003c20 <_sbrk+0x68>)
 8003bd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003bda:	4b10      	ldr	r3, [pc, #64]	; (8003c1c <_sbrk+0x64>)
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4413      	add	r3, r2
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d207      	bcs.n	8003bf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003be8:	f008 f964 	bl	800beb4 <__errno>
 8003bec:	4603      	mov	r3, r0
 8003bee:	220c      	movs	r2, #12
 8003bf0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8003bf6:	e009      	b.n	8003c0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003bf8:	4b08      	ldr	r3, [pc, #32]	; (8003c1c <_sbrk+0x64>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003bfe:	4b07      	ldr	r3, [pc, #28]	; (8003c1c <_sbrk+0x64>)
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4413      	add	r3, r2
 8003c06:	4a05      	ldr	r2, [pc, #20]	; (8003c1c <_sbrk+0x64>)
 8003c08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3718      	adds	r7, #24
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	20004000 	.word	0x20004000
 8003c18:	00000400 	.word	0x00000400
 8003c1c:	20000fec 	.word	0x20000fec
 8003c20:	200022f0 	.word	0x200022f0

08003c24 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c24:	b480      	push	{r7}
 8003c26:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c28:	4b06      	ldr	r3, [pc, #24]	; (8003c44 <SystemInit+0x20>)
 8003c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c2e:	4a05      	ldr	r2, [pc, #20]	; (8003c44 <SystemInit+0x20>)
 8003c30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c38:	bf00      	nop
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	e000ed00 	.word	0xe000ed00

08003c48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003c48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c80 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003c4c:	f7ff ffea 	bl	8003c24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003c50:	480c      	ldr	r0, [pc, #48]	; (8003c84 <LoopForever+0x6>)
  ldr r1, =_edata
 8003c52:	490d      	ldr	r1, [pc, #52]	; (8003c88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003c54:	4a0d      	ldr	r2, [pc, #52]	; (8003c8c <LoopForever+0xe>)
  movs r3, #0
 8003c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c58:	e002      	b.n	8003c60 <LoopCopyDataInit>

08003c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c5e:	3304      	adds	r3, #4

08003c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c64:	d3f9      	bcc.n	8003c5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c66:	4a0a      	ldr	r2, [pc, #40]	; (8003c90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003c68:	4c0a      	ldr	r4, [pc, #40]	; (8003c94 <LoopForever+0x16>)
  movs r3, #0
 8003c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c6c:	e001      	b.n	8003c72 <LoopFillZerobss>

08003c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c70:	3204      	adds	r2, #4

08003c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c74:	d3fb      	bcc.n	8003c6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003c76:	f008 f923 	bl	800bec0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003c7a:	f7fd fbd5 	bl	8001428 <main>

08003c7e <LoopForever>:

LoopForever:
    b LoopForever
 8003c7e:	e7fe      	b.n	8003c7e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003c80:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8003c84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c88:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8003c8c:	0800f648 	.word	0x0800f648
  ldr r2, =_sbss
 8003c90:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8003c94:	200022f0 	.word	0x200022f0

08003c98 <COMP2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003c98:	e7fe      	b.n	8003c98 <COMP2_IRQHandler>
	...

08003c9c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ca0:	4b08      	ldr	r3, [pc, #32]	; (8003cc4 <HAL_Init+0x28>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a07      	ldr	r2, [pc, #28]	; (8003cc4 <HAL_Init+0x28>)
 8003ca6:	f043 0310 	orr.w	r3, r3, #16
 8003caa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003cac:	2003      	movs	r0, #3
 8003cae:	f000 fd9a 	bl	80047e6 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003cb2:	2004      	movs	r0, #4
 8003cb4:	f7ff fa2a 	bl	800310c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003cb8:	f7ff f8b2 	bl	8002e20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	40022000 	.word	0x40022000

08003cc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ccc:	4b06      	ldr	r3, [pc, #24]	; (8003ce8 <HAL_IncTick+0x20>)
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	4b06      	ldr	r3, [pc, #24]	; (8003cec <HAL_IncTick+0x24>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	4a04      	ldr	r2, [pc, #16]	; (8003cec <HAL_IncTick+0x24>)
 8003cda:	6013      	str	r3, [r2, #0]
}
 8003cdc:	bf00      	nop
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	20000008 	.word	0x20000008
 8003cec:	20000ff0 	.word	0x20000ff0

08003cf0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	af00      	add	r7, sp, #0
  return uwTick;  
 8003cf4:	4b03      	ldr	r3, [pc, #12]	; (8003d04 <HAL_GetTick+0x14>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	20000ff0 	.word	0x20000ff0

08003d08 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d10:	f7ff ffee 	bl	8003cf0 <HAL_GetTick>
 8003d14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d20:	d005      	beq.n	8003d2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d22:	4b0a      	ldr	r3, [pc, #40]	; (8003d4c <HAL_Delay+0x44>)
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	461a      	mov	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003d2e:	bf00      	nop
 8003d30:	f7ff ffde 	bl	8003cf0 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d8f7      	bhi.n	8003d30 <HAL_Delay+0x28>
  {
  }
}
 8003d40:	bf00      	nop
 8003d42:	bf00      	nop
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	20000008 	.word	0x20000008

08003d50 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b09a      	sub	sp, #104	; 0x68
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8003d62:	2300      	movs	r3, #0
 8003d64:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d101      	bne.n	8003d70 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e169      	b.n	8004044 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7a:	f003 0310 	and.w	r3, r3, #16
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d176      	bne.n	8003e70 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d152      	bne.n	8003e30 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f7ff f863 	bl	8002e70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d13b      	bne.n	8003e30 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 fc01 	bl	80045c0 <ADC_Disable>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc8:	f003 0310 	and.w	r3, r3, #16
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d12f      	bne.n	8003e30 <HAL_ADC_Init+0xe0>
 8003dd0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d12b      	bne.n	8003e30 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ddc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003de0:	f023 0302 	bic.w	r3, r3, #2
 8003de4:	f043 0202 	orr.w	r2, r3, #2
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	689a      	ldr	r2, [r3, #8]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003dfa:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	689a      	ldr	r2, [r3, #8]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003e0a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003e0c:	4b8f      	ldr	r3, [pc, #572]	; (800404c <HAL_ADC_Init+0x2fc>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a8f      	ldr	r2, [pc, #572]	; (8004050 <HAL_ADC_Init+0x300>)
 8003e12:	fba2 2303 	umull	r2, r3, r2, r3
 8003e16:	0c9a      	lsrs	r2, r3, #18
 8003e18:	4613      	mov	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4413      	add	r3, r2
 8003e1e:	005b      	lsls	r3, r3, #1
 8003e20:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003e22:	e002      	b.n	8003e2a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	3b01      	subs	r3, #1
 8003e28:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1f9      	bne.n	8003e24 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d007      	beq.n	8003e4e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003e48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e4c:	d110      	bne.n	8003e70 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e52:	f023 0312 	bic.w	r3, r3, #18
 8003e56:	f043 0210 	orr.w	r2, r3, #16
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e62:	f043 0201 	orr.w	r2, r3, #1
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e74:	f003 0310 	and.w	r3, r3, #16
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f040 80d6 	bne.w	800402a <HAL_ADC_Init+0x2da>
 8003e7e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f040 80d1 	bne.w	800402a <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f040 80c9 	bne.w	800402a <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003ea0:	f043 0202 	orr.w	r2, r3, #2
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ea8:	4b6a      	ldr	r3, [pc, #424]	; (8004054 <HAL_ADC_Init+0x304>)
 8003eaa:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003eac:	2300      	movs	r3, #0
 8003eae:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f003 0303 	and.w	r3, r3, #3
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d108      	bne.n	8003ed0 <HAL_ADC_Init+0x180>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0301 	and.w	r3, r3, #1
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d101      	bne.n	8003ed0 <HAL_ADC_Init+0x180>
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e000      	b.n	8003ed2 <HAL_ADC_Init+0x182>
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d11c      	bne.n	8003f10 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003ed6:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d010      	beq.n	8003efe <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f003 0303 	and.w	r3, r3, #3
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d107      	bne.n	8003ef8 <HAL_ADC_Init+0x1a8>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0301 	and.w	r3, r3, #1
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d101      	bne.n	8003ef8 <HAL_ADC_Init+0x1a8>
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e000      	b.n	8003efa <HAL_ADC_Init+0x1aa>
 8003ef8:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d108      	bne.n	8003f10 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8003efe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f0e:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	7e5b      	ldrb	r3, [r3, #25]
 8003f14:	035b      	lsls	r3, r3, #13
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f1a:	2a01      	cmp	r2, #1
 8003f1c:	d002      	beq.n	8003f24 <HAL_ADC_Init+0x1d4>
 8003f1e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003f22:	e000      	b.n	8003f26 <HAL_ADC_Init+0x1d6>
 8003f24:	2200      	movs	r2, #0
 8003f26:	431a      	orrs	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	431a      	orrs	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f36:	4313      	orrs	r3, r2
 8003f38:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d11b      	bne.n	8003f7c <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	7e5b      	ldrb	r3, [r3, #25]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d109      	bne.n	8003f60 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f50:	3b01      	subs	r3, #1
 8003f52:	045a      	lsls	r2, r3, #17
 8003f54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f56:	4313      	orrs	r3, r2
 8003f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f5c:	663b      	str	r3, [r7, #96]	; 0x60
 8003f5e:	e00d      	b.n	8003f7c <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f64:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003f68:	f043 0220 	orr.w	r2, r3, #32
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f74:	f043 0201 	orr.w	r2, r3, #1
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d007      	beq.n	8003f94 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f90:	4313      	orrs	r3, r2
 8003f92:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f003 030c 	and.w	r3, r3, #12
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d114      	bne.n	8003fcc <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	6812      	ldr	r2, [r2, #0]
 8003fac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fb0:	f023 0302 	bic.w	r3, r3, #2
 8003fb4:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	7e1b      	ldrb	r3, [r3, #24]
 8003fba:	039a      	lsls	r2, r3, #14
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003fc2:	005b      	lsls	r3, r3, #1
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68da      	ldr	r2, [r3, #12]
 8003fd2:	4b21      	ldr	r3, [pc, #132]	; (8004058 <HAL_ADC_Init+0x308>)
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	6812      	ldr	r2, [r2, #0]
 8003fda:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003fdc:	430b      	orrs	r3, r1
 8003fde:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d10c      	bne.n	8004002 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fee:	f023 010f 	bic.w	r1, r3, #15
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	69db      	ldr	r3, [r3, #28]
 8003ff6:	1e5a      	subs	r2, r3, #1
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	631a      	str	r2, [r3, #48]	; 0x30
 8004000:	e007      	b.n	8004012 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f022 020f 	bic.w	r2, r2, #15
 8004010:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401c:	f023 0303 	bic.w	r3, r3, #3
 8004020:	f043 0201 	orr.w	r2, r3, #1
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	641a      	str	r2, [r3, #64]	; 0x40
 8004028:	e00a      	b.n	8004040 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402e:	f023 0312 	bic.w	r3, r3, #18
 8004032:	f043 0210 	orr.w	r2, r3, #16
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800403a:	2301      	movs	r3, #1
 800403c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8004040:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004044:	4618      	mov	r0, r3
 8004046:	3768      	adds	r7, #104	; 0x68
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	20000000 	.word	0x20000000
 8004050:	431bde83 	.word	0x431bde83
 8004054:	50000300 	.word	0x50000300
 8004058:	fff0c007 	.word	0xfff0c007

0800405c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800405c:	b480      	push	{r7}
 800405e:	b09b      	sub	sp, #108	; 0x6c
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004066:	2300      	movs	r3, #0
 8004068:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800406c:	2300      	movs	r3, #0
 800406e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004076:	2b01      	cmp	r3, #1
 8004078:	d101      	bne.n	800407e <HAL_ADC_ConfigChannel+0x22>
 800407a:	2302      	movs	r3, #2
 800407c:	e295      	b.n	80045aa <HAL_ADC_ConfigChannel+0x54e>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f003 0304 	and.w	r3, r3, #4
 8004090:	2b00      	cmp	r3, #0
 8004092:	f040 8279 	bne.w	8004588 <HAL_ADC_ConfigChannel+0x52c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	2b04      	cmp	r3, #4
 800409c:	d81c      	bhi.n	80040d8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	685a      	ldr	r2, [r3, #4]
 80040a8:	4613      	mov	r3, r2
 80040aa:	005b      	lsls	r3, r3, #1
 80040ac:	4413      	add	r3, r2
 80040ae:	005b      	lsls	r3, r3, #1
 80040b0:	461a      	mov	r2, r3
 80040b2:	231f      	movs	r3, #31
 80040b4:	4093      	lsls	r3, r2
 80040b6:	43db      	mvns	r3, r3
 80040b8:	4019      	ands	r1, r3
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	6818      	ldr	r0, [r3, #0]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	685a      	ldr	r2, [r3, #4]
 80040c2:	4613      	mov	r3, r2
 80040c4:	005b      	lsls	r3, r3, #1
 80040c6:	4413      	add	r3, r2
 80040c8:	005b      	lsls	r3, r3, #1
 80040ca:	fa00 f203 	lsl.w	r2, r0, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	430a      	orrs	r2, r1
 80040d4:	631a      	str	r2, [r3, #48]	; 0x30
 80040d6:	e063      	b.n	80041a0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	2b09      	cmp	r3, #9
 80040de:	d81e      	bhi.n	800411e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	685a      	ldr	r2, [r3, #4]
 80040ea:	4613      	mov	r3, r2
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	4413      	add	r3, r2
 80040f0:	005b      	lsls	r3, r3, #1
 80040f2:	3b1e      	subs	r3, #30
 80040f4:	221f      	movs	r2, #31
 80040f6:	fa02 f303 	lsl.w	r3, r2, r3
 80040fa:	43db      	mvns	r3, r3
 80040fc:	4019      	ands	r1, r3
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	6818      	ldr	r0, [r3, #0]
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	685a      	ldr	r2, [r3, #4]
 8004106:	4613      	mov	r3, r2
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	4413      	add	r3, r2
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	3b1e      	subs	r3, #30
 8004110:	fa00 f203 	lsl.w	r2, r0, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	430a      	orrs	r2, r1
 800411a:	635a      	str	r2, [r3, #52]	; 0x34
 800411c:	e040      	b.n	80041a0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	2b0e      	cmp	r3, #14
 8004124:	d81e      	bhi.n	8004164 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685a      	ldr	r2, [r3, #4]
 8004130:	4613      	mov	r3, r2
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	4413      	add	r3, r2
 8004136:	005b      	lsls	r3, r3, #1
 8004138:	3b3c      	subs	r3, #60	; 0x3c
 800413a:	221f      	movs	r2, #31
 800413c:	fa02 f303 	lsl.w	r3, r2, r3
 8004140:	43db      	mvns	r3, r3
 8004142:	4019      	ands	r1, r3
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	6818      	ldr	r0, [r3, #0]
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	685a      	ldr	r2, [r3, #4]
 800414c:	4613      	mov	r3, r2
 800414e:	005b      	lsls	r3, r3, #1
 8004150:	4413      	add	r3, r2
 8004152:	005b      	lsls	r3, r3, #1
 8004154:	3b3c      	subs	r3, #60	; 0x3c
 8004156:	fa00 f203 	lsl.w	r2, r0, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	430a      	orrs	r2, r1
 8004160:	639a      	str	r2, [r3, #56]	; 0x38
 8004162:	e01d      	b.n	80041a0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	685a      	ldr	r2, [r3, #4]
 800416e:	4613      	mov	r3, r2
 8004170:	005b      	lsls	r3, r3, #1
 8004172:	4413      	add	r3, r2
 8004174:	005b      	lsls	r3, r3, #1
 8004176:	3b5a      	subs	r3, #90	; 0x5a
 8004178:	221f      	movs	r2, #31
 800417a:	fa02 f303 	lsl.w	r3, r2, r3
 800417e:	43db      	mvns	r3, r3
 8004180:	4019      	ands	r1, r3
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	6818      	ldr	r0, [r3, #0]
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	685a      	ldr	r2, [r3, #4]
 800418a:	4613      	mov	r3, r2
 800418c:	005b      	lsls	r3, r3, #1
 800418e:	4413      	add	r3, r2
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	3b5a      	subs	r3, #90	; 0x5a
 8004194:	fa00 f203 	lsl.w	r2, r0, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	430a      	orrs	r2, r1
 800419e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f003 030c 	and.w	r3, r3, #12
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f040 80e5 	bne.w	800437a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2b09      	cmp	r3, #9
 80041b6:	d91c      	bls.n	80041f2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	6999      	ldr	r1, [r3, #24]
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	4613      	mov	r3, r2
 80041c4:	005b      	lsls	r3, r3, #1
 80041c6:	4413      	add	r3, r2
 80041c8:	3b1e      	subs	r3, #30
 80041ca:	2207      	movs	r2, #7
 80041cc:	fa02 f303 	lsl.w	r3, r2, r3
 80041d0:	43db      	mvns	r3, r3
 80041d2:	4019      	ands	r1, r3
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	6898      	ldr	r0, [r3, #8]
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	4613      	mov	r3, r2
 80041de:	005b      	lsls	r3, r3, #1
 80041e0:	4413      	add	r3, r2
 80041e2:	3b1e      	subs	r3, #30
 80041e4:	fa00 f203 	lsl.w	r2, r0, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	430a      	orrs	r2, r1
 80041ee:	619a      	str	r2, [r3, #24]
 80041f0:	e019      	b.n	8004226 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	6959      	ldr	r1, [r3, #20]
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	4613      	mov	r3, r2
 80041fe:	005b      	lsls	r3, r3, #1
 8004200:	4413      	add	r3, r2
 8004202:	2207      	movs	r2, #7
 8004204:	fa02 f303 	lsl.w	r3, r2, r3
 8004208:	43db      	mvns	r3, r3
 800420a:	4019      	ands	r1, r3
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	6898      	ldr	r0, [r3, #8]
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	4613      	mov	r3, r2
 8004216:	005b      	lsls	r3, r3, #1
 8004218:	4413      	add	r3, r2
 800421a:	fa00 f203 	lsl.w	r2, r0, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	430a      	orrs	r2, r1
 8004224:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	695a      	ldr	r2, [r3, #20]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	08db      	lsrs	r3, r3, #3
 8004232:	f003 0303 	and.w	r3, r3, #3
 8004236:	005b      	lsls	r3, r3, #1
 8004238:	fa02 f303 	lsl.w	r3, r2, r3
 800423c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	3b01      	subs	r3, #1
 8004244:	2b03      	cmp	r3, #3
 8004246:	d84f      	bhi.n	80042e8 <HAL_ADC_ConfigChannel+0x28c>
 8004248:	a201      	add	r2, pc, #4	; (adr r2, 8004250 <HAL_ADC_ConfigChannel+0x1f4>)
 800424a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800424e:	bf00      	nop
 8004250:	08004261 	.word	0x08004261
 8004254:	08004283 	.word	0x08004283
 8004258:	080042a5 	.word	0x080042a5
 800425c:	080042c7 	.word	0x080042c7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004266:	4b97      	ldr	r3, [pc, #604]	; (80044c4 <HAL_ADC_ConfigChannel+0x468>)
 8004268:	4013      	ands	r3, r2
 800426a:	683a      	ldr	r2, [r7, #0]
 800426c:	6812      	ldr	r2, [r2, #0]
 800426e:	0691      	lsls	r1, r2, #26
 8004270:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004272:	430a      	orrs	r2, r1
 8004274:	431a      	orrs	r2, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800427e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004280:	e07b      	b.n	800437a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004288:	4b8e      	ldr	r3, [pc, #568]	; (80044c4 <HAL_ADC_ConfigChannel+0x468>)
 800428a:	4013      	ands	r3, r2
 800428c:	683a      	ldr	r2, [r7, #0]
 800428e:	6812      	ldr	r2, [r2, #0]
 8004290:	0691      	lsls	r1, r2, #26
 8004292:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004294:	430a      	orrs	r2, r1
 8004296:	431a      	orrs	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80042a0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80042a2:	e06a      	b.n	800437a <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80042aa:	4b86      	ldr	r3, [pc, #536]	; (80044c4 <HAL_ADC_ConfigChannel+0x468>)
 80042ac:	4013      	ands	r3, r2
 80042ae:	683a      	ldr	r2, [r7, #0]
 80042b0:	6812      	ldr	r2, [r2, #0]
 80042b2:	0691      	lsls	r1, r2, #26
 80042b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80042b6:	430a      	orrs	r2, r1
 80042b8:	431a      	orrs	r2, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80042c2:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80042c4:	e059      	b.n	800437a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80042cc:	4b7d      	ldr	r3, [pc, #500]	; (80044c4 <HAL_ADC_ConfigChannel+0x468>)
 80042ce:	4013      	ands	r3, r2
 80042d0:	683a      	ldr	r2, [r7, #0]
 80042d2:	6812      	ldr	r2, [r2, #0]
 80042d4:	0691      	lsls	r1, r2, #26
 80042d6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80042d8:	430a      	orrs	r2, r1
 80042da:	431a      	orrs	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80042e4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80042e6:	e048      	b.n	800437a <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	069b      	lsls	r3, r3, #26
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d107      	bne.n	800430c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800430a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004312:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	069b      	lsls	r3, r3, #26
 800431c:	429a      	cmp	r2, r3
 800431e:	d107      	bne.n	8004330 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800432e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004336:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	069b      	lsls	r3, r3, #26
 8004340:	429a      	cmp	r2, r3
 8004342:	d107      	bne.n	8004354 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004352:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800435a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	069b      	lsls	r3, r3, #26
 8004364:	429a      	cmp	r2, r3
 8004366:	d107      	bne.n	8004378 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004376:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8004378:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f003 0303 	and.w	r3, r3, #3
 8004384:	2b01      	cmp	r3, #1
 8004386:	d108      	bne.n	800439a <HAL_ADC_ConfigChannel+0x33e>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b01      	cmp	r3, #1
 8004394:	d101      	bne.n	800439a <HAL_ADC_ConfigChannel+0x33e>
 8004396:	2301      	movs	r3, #1
 8004398:	e000      	b.n	800439c <HAL_ADC_ConfigChannel+0x340>
 800439a:	2300      	movs	r3, #0
 800439c:	2b00      	cmp	r3, #0
 800439e:	f040 80fe 	bne.w	800459e <HAL_ADC_ConfigChannel+0x542>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d00f      	beq.n	80043ca <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2201      	movs	r2, #1
 80043b8:	fa02 f303 	lsl.w	r3, r2, r3
 80043bc:	43da      	mvns	r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	400a      	ands	r2, r1
 80043c4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80043c8:	e049      	b.n	800445e <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2201      	movs	r2, #1
 80043d8:	409a      	lsls	r2, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	430a      	orrs	r2, r1
 80043e0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2b09      	cmp	r3, #9
 80043ea:	d91c      	bls.n	8004426 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	6999      	ldr	r1, [r3, #24]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	4613      	mov	r3, r2
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	4413      	add	r3, r2
 80043fc:	3b1b      	subs	r3, #27
 80043fe:	2207      	movs	r2, #7
 8004400:	fa02 f303 	lsl.w	r3, r2, r3
 8004404:	43db      	mvns	r3, r3
 8004406:	4019      	ands	r1, r3
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	6898      	ldr	r0, [r3, #8]
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	4613      	mov	r3, r2
 8004412:	005b      	lsls	r3, r3, #1
 8004414:	4413      	add	r3, r2
 8004416:	3b1b      	subs	r3, #27
 8004418:	fa00 f203 	lsl.w	r2, r0, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	430a      	orrs	r2, r1
 8004422:	619a      	str	r2, [r3, #24]
 8004424:	e01b      	b.n	800445e <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	6959      	ldr	r1, [r3, #20]
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	1c5a      	adds	r2, r3, #1
 8004432:	4613      	mov	r3, r2
 8004434:	005b      	lsls	r3, r3, #1
 8004436:	4413      	add	r3, r2
 8004438:	2207      	movs	r2, #7
 800443a:	fa02 f303 	lsl.w	r3, r2, r3
 800443e:	43db      	mvns	r3, r3
 8004440:	4019      	ands	r1, r3
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	6898      	ldr	r0, [r3, #8]
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	1c5a      	adds	r2, r3, #1
 800444c:	4613      	mov	r3, r2
 800444e:	005b      	lsls	r3, r3, #1
 8004450:	4413      	add	r3, r2
 8004452:	fa00 f203 	lsl.w	r2, r0, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	430a      	orrs	r2, r1
 800445c:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800445e:	4b1a      	ldr	r3, [pc, #104]	; (80044c8 <HAL_ADC_ConfigChannel+0x46c>)
 8004460:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2b10      	cmp	r3, #16
 8004468:	d105      	bne.n	8004476 <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800446a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004472:	2b00      	cmp	r3, #0
 8004474:	d014      	beq.n	80044a0 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800447a:	2b11      	cmp	r3, #17
 800447c:	d105      	bne.n	800448a <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800447e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00a      	beq.n	80044a0 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800448e:	2b12      	cmp	r3, #18
 8004490:	f040 8085 	bne.w	800459e <HAL_ADC_ConfigChannel+0x542>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8004494:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800449c:	2b00      	cmp	r3, #0
 800449e:	d17e      	bne.n	800459e <HAL_ADC_ConfigChannel+0x542>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80044a0:	2300      	movs	r3, #0
 80044a2:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f003 0303 	and.w	r3, r3, #3
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d10c      	bne.n	80044cc <HAL_ADC_ConfigChannel+0x470>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0301 	and.w	r3, r3, #1
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d105      	bne.n	80044cc <HAL_ADC_ConfigChannel+0x470>
 80044c0:	2301      	movs	r3, #1
 80044c2:	e004      	b.n	80044ce <HAL_ADC_ConfigChannel+0x472>
 80044c4:	83fff000 	.word	0x83fff000
 80044c8:	50000300 	.word	0x50000300
 80044cc:	2300      	movs	r3, #0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d150      	bne.n	8004574 <HAL_ADC_ConfigChannel+0x518>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80044d2:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d010      	beq.n	80044fa <HAL_ADC_ConfigChannel+0x49e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f003 0303 	and.w	r3, r3, #3
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d107      	bne.n	80044f4 <HAL_ADC_ConfigChannel+0x498>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0301 	and.w	r3, r3, #1
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d101      	bne.n	80044f4 <HAL_ADC_ConfigChannel+0x498>
 80044f0:	2301      	movs	r3, #1
 80044f2:	e000      	b.n	80044f6 <HAL_ADC_ConfigChannel+0x49a>
 80044f4:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d13c      	bne.n	8004574 <HAL_ADC_ConfigChannel+0x518>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2b10      	cmp	r3, #16
 8004500:	d11d      	bne.n	800453e <HAL_ADC_ConfigChannel+0x4e2>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800450a:	d118      	bne.n	800453e <HAL_ADC_ConfigChannel+0x4e2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800450c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004514:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004516:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004518:	4b27      	ldr	r3, [pc, #156]	; (80045b8 <HAL_ADC_ConfigChannel+0x55c>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a27      	ldr	r2, [pc, #156]	; (80045bc <HAL_ADC_ConfigChannel+0x560>)
 800451e:	fba2 2303 	umull	r2, r3, r2, r3
 8004522:	0c9a      	lsrs	r2, r3, #18
 8004524:	4613      	mov	r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	4413      	add	r3, r2
 800452a:	005b      	lsls	r3, r3, #1
 800452c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800452e:	e002      	b.n	8004536 <HAL_ADC_ConfigChannel+0x4da>
          {
            wait_loop_index--;
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	3b01      	subs	r3, #1
 8004534:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1f9      	bne.n	8004530 <HAL_ADC_ConfigChannel+0x4d4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800453c:	e02e      	b.n	800459c <HAL_ADC_ConfigChannel+0x540>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2b11      	cmp	r3, #17
 8004544:	d10b      	bne.n	800455e <HAL_ADC_ConfigChannel+0x502>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800454e:	d106      	bne.n	800455e <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8004550:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004558:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800455a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800455c:	e01e      	b.n	800459c <HAL_ADC_ConfigChannel+0x540>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2b12      	cmp	r3, #18
 8004564:	d11a      	bne.n	800459c <HAL_ADC_ConfigChannel+0x540>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8004566:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800456e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004570:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004572:	e013      	b.n	800459c <HAL_ADC_ConfigChannel+0x540>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004578:	f043 0220 	orr.w	r2, r3, #32
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004586:	e00a      	b.n	800459e <HAL_ADC_ConfigChannel+0x542>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458c:	f043 0220 	orr.w	r2, r3, #32
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800459a:	e000      	b.n	800459e <HAL_ADC_ConfigChannel+0x542>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800459c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80045a6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	376c      	adds	r7, #108	; 0x6c
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	20000000 	.word	0x20000000
 80045bc:	431bde83 	.word	0x431bde83

080045c0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045c8:	2300      	movs	r3, #0
 80045ca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f003 0303 	and.w	r3, r3, #3
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d108      	bne.n	80045ec <ADC_Disable+0x2c>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0301 	and.w	r3, r3, #1
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d101      	bne.n	80045ec <ADC_Disable+0x2c>
 80045e8:	2301      	movs	r3, #1
 80045ea:	e000      	b.n	80045ee <ADC_Disable+0x2e>
 80045ec:	2300      	movs	r3, #0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d047      	beq.n	8004682 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f003 030d 	and.w	r3, r3, #13
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d10f      	bne.n	8004620 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	689a      	ldr	r2, [r3, #8]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f042 0202 	orr.w	r2, r2, #2
 800460e:	609a      	str	r2, [r3, #8]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2203      	movs	r2, #3
 8004616:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8004618:	f7ff fb6a 	bl	8003cf0 <HAL_GetTick>
 800461c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800461e:	e029      	b.n	8004674 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004624:	f043 0210 	orr.w	r2, r3, #16
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004630:	f043 0201 	orr.w	r2, r3, #1
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e023      	b.n	8004684 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800463c:	f7ff fb58 	bl	8003cf0 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	2b02      	cmp	r3, #2
 8004648:	d914      	bls.n	8004674 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f003 0301 	and.w	r3, r3, #1
 8004654:	2b01      	cmp	r3, #1
 8004656:	d10d      	bne.n	8004674 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465c:	f043 0210 	orr.w	r2, r3, #16
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004668:	f043 0201 	orr.w	r2, r3, #1
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e007      	b.n	8004684 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f003 0301 	and.w	r3, r3, #1
 800467e:	2b01      	cmp	r3, #1
 8004680:	d0dc      	beq.n	800463c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004682:	2300      	movs	r3, #0
}
 8004684:	4618      	mov	r0, r3
 8004686:	3710      	adds	r7, #16
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <__NVIC_SetPriorityGrouping>:
{
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f003 0307 	and.w	r3, r3, #7
 800469a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800469c:	4b0c      	ldr	r3, [pc, #48]	; (80046d0 <__NVIC_SetPriorityGrouping+0x44>)
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046a2:	68ba      	ldr	r2, [r7, #8]
 80046a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80046a8:	4013      	ands	r3, r2
 80046aa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80046b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80046b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80046be:	4a04      	ldr	r2, [pc, #16]	; (80046d0 <__NVIC_SetPriorityGrouping+0x44>)
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	60d3      	str	r3, [r2, #12]
}
 80046c4:	bf00      	nop
 80046c6:	3714      	adds	r7, #20
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr
 80046d0:	e000ed00 	.word	0xe000ed00

080046d4 <__NVIC_GetPriorityGrouping>:
{
 80046d4:	b480      	push	{r7}
 80046d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046d8:	4b04      	ldr	r3, [pc, #16]	; (80046ec <__NVIC_GetPriorityGrouping+0x18>)
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	0a1b      	lsrs	r3, r3, #8
 80046de:	f003 0307 	and.w	r3, r3, #7
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr
 80046ec:	e000ed00 	.word	0xe000ed00

080046f0 <__NVIC_EnableIRQ>:
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	4603      	mov	r3, r0
 80046f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	db0b      	blt.n	800471a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004702:	79fb      	ldrb	r3, [r7, #7]
 8004704:	f003 021f 	and.w	r2, r3, #31
 8004708:	4907      	ldr	r1, [pc, #28]	; (8004728 <__NVIC_EnableIRQ+0x38>)
 800470a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800470e:	095b      	lsrs	r3, r3, #5
 8004710:	2001      	movs	r0, #1
 8004712:	fa00 f202 	lsl.w	r2, r0, r2
 8004716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800471a:	bf00      	nop
 800471c:	370c      	adds	r7, #12
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	e000e100 	.word	0xe000e100

0800472c <__NVIC_SetPriority>:
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	4603      	mov	r3, r0
 8004734:	6039      	str	r1, [r7, #0]
 8004736:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800473c:	2b00      	cmp	r3, #0
 800473e:	db0a      	blt.n	8004756 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	b2da      	uxtb	r2, r3
 8004744:	490c      	ldr	r1, [pc, #48]	; (8004778 <__NVIC_SetPriority+0x4c>)
 8004746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800474a:	0112      	lsls	r2, r2, #4
 800474c:	b2d2      	uxtb	r2, r2
 800474e:	440b      	add	r3, r1
 8004750:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004754:	e00a      	b.n	800476c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	b2da      	uxtb	r2, r3
 800475a:	4908      	ldr	r1, [pc, #32]	; (800477c <__NVIC_SetPriority+0x50>)
 800475c:	79fb      	ldrb	r3, [r7, #7]
 800475e:	f003 030f 	and.w	r3, r3, #15
 8004762:	3b04      	subs	r3, #4
 8004764:	0112      	lsls	r2, r2, #4
 8004766:	b2d2      	uxtb	r2, r2
 8004768:	440b      	add	r3, r1
 800476a:	761a      	strb	r2, [r3, #24]
}
 800476c:	bf00      	nop
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr
 8004778:	e000e100 	.word	0xe000e100
 800477c:	e000ed00 	.word	0xe000ed00

08004780 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004780:	b480      	push	{r7}
 8004782:	b089      	sub	sp, #36	; 0x24
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f003 0307 	and.w	r3, r3, #7
 8004792:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	f1c3 0307 	rsb	r3, r3, #7
 800479a:	2b04      	cmp	r3, #4
 800479c:	bf28      	it	cs
 800479e:	2304      	movcs	r3, #4
 80047a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	3304      	adds	r3, #4
 80047a6:	2b06      	cmp	r3, #6
 80047a8:	d902      	bls.n	80047b0 <NVIC_EncodePriority+0x30>
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	3b03      	subs	r3, #3
 80047ae:	e000      	b.n	80047b2 <NVIC_EncodePriority+0x32>
 80047b0:	2300      	movs	r3, #0
 80047b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047b4:	f04f 32ff 	mov.w	r2, #4294967295
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	fa02 f303 	lsl.w	r3, r2, r3
 80047be:	43da      	mvns	r2, r3
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	401a      	ands	r2, r3
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80047c8:	f04f 31ff 	mov.w	r1, #4294967295
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	fa01 f303 	lsl.w	r3, r1, r3
 80047d2:	43d9      	mvns	r1, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047d8:	4313      	orrs	r3, r2
         );
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3724      	adds	r7, #36	; 0x24
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr

080047e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047e6:	b580      	push	{r7, lr}
 80047e8:	b082      	sub	sp, #8
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f7ff ff4c 	bl	800468c <__NVIC_SetPriorityGrouping>
}
 80047f4:	bf00      	nop
 80047f6:	3708      	adds	r7, #8
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b086      	sub	sp, #24
 8004800:	af00      	add	r7, sp, #0
 8004802:	4603      	mov	r3, r0
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	607a      	str	r2, [r7, #4]
 8004808:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800480a:	2300      	movs	r3, #0
 800480c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800480e:	f7ff ff61 	bl	80046d4 <__NVIC_GetPriorityGrouping>
 8004812:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	68b9      	ldr	r1, [r7, #8]
 8004818:	6978      	ldr	r0, [r7, #20]
 800481a:	f7ff ffb1 	bl	8004780 <NVIC_EncodePriority>
 800481e:	4602      	mov	r2, r0
 8004820:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004824:	4611      	mov	r1, r2
 8004826:	4618      	mov	r0, r3
 8004828:	f7ff ff80 	bl	800472c <__NVIC_SetPriority>
}
 800482c:	bf00      	nop
 800482e:	3718      	adds	r7, #24
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	4603      	mov	r3, r0
 800483c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800483e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004842:	4618      	mov	r0, r3
 8004844:	f7ff ff54 	bl	80046f0 <__NVIC_EnableIRQ>
}
 8004848:	bf00      	nop
 800484a:	3708      	adds	r7, #8
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004858:	2300      	movs	r3, #0
 800485a:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d101      	bne.n	8004866 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e037      	b.n	80048d6 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2202      	movs	r2, #2
 800486a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800487c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004880:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800488a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004896:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	695b      	ldr	r3, [r3, #20]
 800489c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	69db      	ldr	r3, [r3, #28]
 80048a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 f8b3 	bl	8004a24 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}  
 80048d6:	4618      	mov	r0, r3
 80048d8:	3710      	adds	r7, #16
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}

080048de <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80048de:	b580      	push	{r7, lr}
 80048e0:	b084      	sub	sp, #16
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fa:	2204      	movs	r2, #4
 80048fc:	409a      	lsls	r2, r3
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	4013      	ands	r3, r2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d024      	beq.n	8004950 <HAL_DMA_IRQHandler+0x72>
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	f003 0304 	and.w	r3, r3, #4
 800490c:	2b00      	cmp	r3, #0
 800490e:	d01f      	beq.n	8004950 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0320 	and.w	r3, r3, #32
 800491a:	2b00      	cmp	r3, #0
 800491c:	d107      	bne.n	800492e <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f022 0204 	bic.w	r2, r2, #4
 800492c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004936:	2104      	movs	r1, #4
 8004938:	fa01 f202 	lsl.w	r2, r1, r2
 800493c:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004942:	2b00      	cmp	r3, #0
 8004944:	d06a      	beq.n	8004a1c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800494e:	e065      	b.n	8004a1c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004954:	2202      	movs	r2, #2
 8004956:	409a      	lsls	r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	4013      	ands	r3, r2
 800495c:	2b00      	cmp	r3, #0
 800495e:	d02c      	beq.n	80049ba <HAL_DMA_IRQHandler+0xdc>
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	f003 0302 	and.w	r3, r3, #2
 8004966:	2b00      	cmp	r3, #0
 8004968:	d027      	beq.n	80049ba <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0320 	and.w	r3, r3, #32
 8004974:	2b00      	cmp	r3, #0
 8004976:	d10b      	bne.n	8004990 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f022 020a 	bic.w	r2, r2, #10
 8004986:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004998:	2102      	movs	r1, #2
 800499a:	fa01 f202 	lsl.w	r2, r1, r2
 800499e:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d035      	beq.n	8004a1c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80049b8:	e030      	b.n	8004a1c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049be:	2208      	movs	r2, #8
 80049c0:	409a      	lsls	r2, r3
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	4013      	ands	r3, r2
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d028      	beq.n	8004a1c <HAL_DMA_IRQHandler+0x13e>
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	f003 0308 	and.w	r3, r3, #8
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d023      	beq.n	8004a1c <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f022 020e 	bic.w	r2, r2, #14
 80049e2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ec:	2101      	movs	r1, #1
 80049ee:	fa01 f202 	lsl.w	r2, r1, r2
 80049f2:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2201      	movs	r2, #1
 80049fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d004      	beq.n	8004a1c <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	4798      	blx	r3
    }
  }
}  
 8004a1a:	e7ff      	b.n	8004a1c <HAL_DMA_IRQHandler+0x13e>
 8004a1c:	bf00      	nop
 8004a1e:	3710      	adds	r7, #16
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	461a      	mov	r2, r3
 8004a32:	4b09      	ldr	r3, [pc, #36]	; (8004a58 <DMA_CalcBaseAndBitshift+0x34>)
 8004a34:	4413      	add	r3, r2
 8004a36:	4a09      	ldr	r2, [pc, #36]	; (8004a5c <DMA_CalcBaseAndBitshift+0x38>)
 8004a38:	fba2 2303 	umull	r2, r3, r2, r3
 8004a3c:	091b      	lsrs	r3, r3, #4
 8004a3e:	009a      	lsls	r2, r3, #2
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a06      	ldr	r2, [pc, #24]	; (8004a60 <DMA_CalcBaseAndBitshift+0x3c>)
 8004a48:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8004a4a:	bf00      	nop
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	bffdfff8 	.word	0xbffdfff8
 8004a5c:	cccccccd 	.word	0xcccccccd
 8004a60:	40020000 	.word	0x40020000

08004a64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b087      	sub	sp, #28
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a72:	e14e      	b.n	8004d12 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	2101      	movs	r1, #1
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a80:	4013      	ands	r3, r2
 8004a82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	f000 8140 	beq.w	8004d0c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f003 0303 	and.w	r3, r3, #3
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d005      	beq.n	8004aa4 <HAL_GPIO_Init+0x40>
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f003 0303 	and.w	r3, r3, #3
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d130      	bne.n	8004b06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	005b      	lsls	r3, r3, #1
 8004aae:	2203      	movs	r2, #3
 8004ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab4:	43db      	mvns	r3, r3
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	4013      	ands	r3, r2
 8004aba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	68da      	ldr	r2, [r3, #12]
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	005b      	lsls	r3, r3, #1
 8004ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	693a      	ldr	r2, [r7, #16]
 8004ad2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ada:	2201      	movs	r2, #1
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae2:	43db      	mvns	r3, r3
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	091b      	lsrs	r3, r3, #4
 8004af0:	f003 0201 	and.w	r2, r3, #1
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	fa02 f303 	lsl.w	r3, r2, r3
 8004afa:	693a      	ldr	r2, [r7, #16]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f003 0303 	and.w	r3, r3, #3
 8004b0e:	2b03      	cmp	r3, #3
 8004b10:	d017      	beq.n	8004b42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	005b      	lsls	r3, r3, #1
 8004b1c:	2203      	movs	r2, #3
 8004b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b22:	43db      	mvns	r3, r3
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	4013      	ands	r3, r2
 8004b28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	689a      	ldr	r2, [r3, #8]
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	005b      	lsls	r3, r3, #1
 8004b32:	fa02 f303 	lsl.w	r3, r2, r3
 8004b36:	693a      	ldr	r2, [r7, #16]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f003 0303 	and.w	r3, r3, #3
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d123      	bne.n	8004b96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	08da      	lsrs	r2, r3, #3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	3208      	adds	r2, #8
 8004b56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	f003 0307 	and.w	r3, r3, #7
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	220f      	movs	r2, #15
 8004b66:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6a:	43db      	mvns	r3, r3
 8004b6c:	693a      	ldr	r2, [r7, #16]
 8004b6e:	4013      	ands	r3, r2
 8004b70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	691a      	ldr	r2, [r3, #16]
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	f003 0307 	and.w	r3, r3, #7
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b82:	693a      	ldr	r2, [r7, #16]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	08da      	lsrs	r2, r3, #3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	3208      	adds	r2, #8
 8004b90:	6939      	ldr	r1, [r7, #16]
 8004b92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	005b      	lsls	r3, r3, #1
 8004ba0:	2203      	movs	r2, #3
 8004ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba6:	43db      	mvns	r3, r3
 8004ba8:	693a      	ldr	r2, [r7, #16]
 8004baa:	4013      	ands	r3, r2
 8004bac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	f003 0203 	and.w	r2, r3, #3
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	005b      	lsls	r3, r3, #1
 8004bba:	fa02 f303 	lsl.w	r3, r2, r3
 8004bbe:	693a      	ldr	r2, [r7, #16]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	f000 809a 	beq.w	8004d0c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bd8:	4b55      	ldr	r3, [pc, #340]	; (8004d30 <HAL_GPIO_Init+0x2cc>)
 8004bda:	699b      	ldr	r3, [r3, #24]
 8004bdc:	4a54      	ldr	r2, [pc, #336]	; (8004d30 <HAL_GPIO_Init+0x2cc>)
 8004bde:	f043 0301 	orr.w	r3, r3, #1
 8004be2:	6193      	str	r3, [r2, #24]
 8004be4:	4b52      	ldr	r3, [pc, #328]	; (8004d30 <HAL_GPIO_Init+0x2cc>)
 8004be6:	699b      	ldr	r3, [r3, #24]
 8004be8:	f003 0301 	and.w	r3, r3, #1
 8004bec:	60bb      	str	r3, [r7, #8]
 8004bee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004bf0:	4a50      	ldr	r2, [pc, #320]	; (8004d34 <HAL_GPIO_Init+0x2d0>)
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	089b      	lsrs	r3, r3, #2
 8004bf6:	3302      	adds	r3, #2
 8004bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	f003 0303 	and.w	r3, r3, #3
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	220f      	movs	r2, #15
 8004c08:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0c:	43db      	mvns	r3, r3
 8004c0e:	693a      	ldr	r2, [r7, #16]
 8004c10:	4013      	ands	r3, r2
 8004c12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004c1a:	d013      	beq.n	8004c44 <HAL_GPIO_Init+0x1e0>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a46      	ldr	r2, [pc, #280]	; (8004d38 <HAL_GPIO_Init+0x2d4>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d00d      	beq.n	8004c40 <HAL_GPIO_Init+0x1dc>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a45      	ldr	r2, [pc, #276]	; (8004d3c <HAL_GPIO_Init+0x2d8>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d007      	beq.n	8004c3c <HAL_GPIO_Init+0x1d8>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a44      	ldr	r2, [pc, #272]	; (8004d40 <HAL_GPIO_Init+0x2dc>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d101      	bne.n	8004c38 <HAL_GPIO_Init+0x1d4>
 8004c34:	2303      	movs	r3, #3
 8004c36:	e006      	b.n	8004c46 <HAL_GPIO_Init+0x1e2>
 8004c38:	2305      	movs	r3, #5
 8004c3a:	e004      	b.n	8004c46 <HAL_GPIO_Init+0x1e2>
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	e002      	b.n	8004c46 <HAL_GPIO_Init+0x1e2>
 8004c40:	2301      	movs	r3, #1
 8004c42:	e000      	b.n	8004c46 <HAL_GPIO_Init+0x1e2>
 8004c44:	2300      	movs	r3, #0
 8004c46:	697a      	ldr	r2, [r7, #20]
 8004c48:	f002 0203 	and.w	r2, r2, #3
 8004c4c:	0092      	lsls	r2, r2, #2
 8004c4e:	4093      	lsls	r3, r2
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004c56:	4937      	ldr	r1, [pc, #220]	; (8004d34 <HAL_GPIO_Init+0x2d0>)
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	089b      	lsrs	r3, r3, #2
 8004c5c:	3302      	adds	r3, #2
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c64:	4b37      	ldr	r3, [pc, #220]	; (8004d44 <HAL_GPIO_Init+0x2e0>)
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	43db      	mvns	r3, r3
 8004c6e:	693a      	ldr	r2, [r7, #16]
 8004c70:	4013      	ands	r3, r2
 8004c72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d003      	beq.n	8004c88 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8004c80:	693a      	ldr	r2, [r7, #16]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004c88:	4a2e      	ldr	r2, [pc, #184]	; (8004d44 <HAL_GPIO_Init+0x2e0>)
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c8e:	4b2d      	ldr	r3, [pc, #180]	; (8004d44 <HAL_GPIO_Init+0x2e0>)
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	43db      	mvns	r3, r3
 8004c98:	693a      	ldr	r2, [r7, #16]
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d003      	beq.n	8004cb2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8004caa:	693a      	ldr	r2, [r7, #16]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004cb2:	4a24      	ldr	r2, [pc, #144]	; (8004d44 <HAL_GPIO_Init+0x2e0>)
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004cb8:	4b22      	ldr	r3, [pc, #136]	; (8004d44 <HAL_GPIO_Init+0x2e0>)
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	43db      	mvns	r3, r3
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d003      	beq.n	8004cdc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004cdc:	4a19      	ldr	r2, [pc, #100]	; (8004d44 <HAL_GPIO_Init+0x2e0>)
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ce2:	4b18      	ldr	r3, [pc, #96]	; (8004d44 <HAL_GPIO_Init+0x2e0>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	43db      	mvns	r3, r3
 8004cec:	693a      	ldr	r2, [r7, #16]
 8004cee:	4013      	ands	r3, r2
 8004cf0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d003      	beq.n	8004d06 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8004cfe:	693a      	ldr	r2, [r7, #16]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004d06:	4a0f      	ldr	r2, [pc, #60]	; (8004d44 <HAL_GPIO_Init+0x2e0>)
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	3301      	adds	r3, #1
 8004d10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	fa22 f303 	lsr.w	r3, r2, r3
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f47f aea9 	bne.w	8004a74 <HAL_GPIO_Init+0x10>
  }
}
 8004d22:	bf00      	nop
 8004d24:	bf00      	nop
 8004d26:	371c      	adds	r7, #28
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr
 8004d30:	40021000 	.word	0x40021000
 8004d34:	40010000 	.word	0x40010000
 8004d38:	48000400 	.word	0x48000400
 8004d3c:	48000800 	.word	0x48000800
 8004d40:	48000c00 	.word	0x48000c00
 8004d44:	40010400 	.word	0x40010400

08004d48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	460b      	mov	r3, r1
 8004d52:	807b      	strh	r3, [r7, #2]
 8004d54:	4613      	mov	r3, r2
 8004d56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d58:	787b      	ldrb	r3, [r7, #1]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d003      	beq.n	8004d66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004d5e:	887a      	ldrh	r2, [r7, #2]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004d64:	e002      	b.n	8004d6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004d66:	887a      	ldrh	r2, [r7, #2]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004d6c:	bf00      	nop
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	4603      	mov	r3, r0
 8004d80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004d82:	4b08      	ldr	r3, [pc, #32]	; (8004da4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d84:	695a      	ldr	r2, [r3, #20]
 8004d86:	88fb      	ldrh	r3, [r7, #6]
 8004d88:	4013      	ands	r3, r2
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d006      	beq.n	8004d9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004d8e:	4a05      	ldr	r2, [pc, #20]	; (8004da4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d90:	88fb      	ldrh	r3, [r7, #6]
 8004d92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004d94:	88fb      	ldrh	r3, [r7, #6]
 8004d96:	4618      	mov	r0, r3
 8004d98:	f000 f806 	bl	8004da8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004d9c:	bf00      	nop
 8004d9e:	3708      	adds	r7, #8
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	40010400 	.word	0x40010400

08004da8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	4603      	mov	r3, r0
 8004db0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004db2:	bf00      	nop
 8004db4:	370c      	adds	r7, #12
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
	...

08004dc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dcc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004dd0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004dd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d102      	bne.n	8004de6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	f001 b823 	b.w	8005e2c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004de6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0301 	and.w	r3, r3, #1
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	f000 817d 	beq.w	80050f6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004dfc:	4bbc      	ldr	r3, [pc, #752]	; (80050f0 <HAL_RCC_OscConfig+0x330>)
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	f003 030c 	and.w	r3, r3, #12
 8004e04:	2b04      	cmp	r3, #4
 8004e06:	d00c      	beq.n	8004e22 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004e08:	4bb9      	ldr	r3, [pc, #740]	; (80050f0 <HAL_RCC_OscConfig+0x330>)
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f003 030c 	and.w	r3, r3, #12
 8004e10:	2b08      	cmp	r3, #8
 8004e12:	d15c      	bne.n	8004ece <HAL_RCC_OscConfig+0x10e>
 8004e14:	4bb6      	ldr	r3, [pc, #728]	; (80050f0 <HAL_RCC_OscConfig+0x330>)
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e20:	d155      	bne.n	8004ece <HAL_RCC_OscConfig+0x10e>
 8004e22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e26:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e2a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004e2e:	fa93 f3a3 	rbit	r3, r3
 8004e32:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004e36:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e3a:	fab3 f383 	clz	r3, r3
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	095b      	lsrs	r3, r3, #5
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	f043 0301 	orr.w	r3, r3, #1
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d102      	bne.n	8004e54 <HAL_RCC_OscConfig+0x94>
 8004e4e:	4ba8      	ldr	r3, [pc, #672]	; (80050f0 <HAL_RCC_OscConfig+0x330>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	e015      	b.n	8004e80 <HAL_RCC_OscConfig+0xc0>
 8004e54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e58:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e5c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004e60:	fa93 f3a3 	rbit	r3, r3
 8004e64:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004e68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e6c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004e70:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004e74:	fa93 f3a3 	rbit	r3, r3
 8004e78:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004e7c:	4b9c      	ldr	r3, [pc, #624]	; (80050f0 <HAL_RCC_OscConfig+0x330>)
 8004e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e80:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004e84:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004e88:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004e8c:	fa92 f2a2 	rbit	r2, r2
 8004e90:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004e94:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004e98:	fab2 f282 	clz	r2, r2
 8004e9c:	b2d2      	uxtb	r2, r2
 8004e9e:	f042 0220 	orr.w	r2, r2, #32
 8004ea2:	b2d2      	uxtb	r2, r2
 8004ea4:	f002 021f 	and.w	r2, r2, #31
 8004ea8:	2101      	movs	r1, #1
 8004eaa:	fa01 f202 	lsl.w	r2, r1, r2
 8004eae:	4013      	ands	r3, r2
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	f000 811f 	beq.w	80050f4 <HAL_RCC_OscConfig+0x334>
 8004eb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	f040 8116 	bne.w	80050f4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	f000 bfaf 	b.w	8005e2c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ece:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ed2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ede:	d106      	bne.n	8004eee <HAL_RCC_OscConfig+0x12e>
 8004ee0:	4b83      	ldr	r3, [pc, #524]	; (80050f0 <HAL_RCC_OscConfig+0x330>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a82      	ldr	r2, [pc, #520]	; (80050f0 <HAL_RCC_OscConfig+0x330>)
 8004ee6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eea:	6013      	str	r3, [r2, #0]
 8004eec:	e036      	b.n	8004f5c <HAL_RCC_OscConfig+0x19c>
 8004eee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ef2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d10c      	bne.n	8004f18 <HAL_RCC_OscConfig+0x158>
 8004efe:	4b7c      	ldr	r3, [pc, #496]	; (80050f0 <HAL_RCC_OscConfig+0x330>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a7b      	ldr	r2, [pc, #492]	; (80050f0 <HAL_RCC_OscConfig+0x330>)
 8004f04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f08:	6013      	str	r3, [r2, #0]
 8004f0a:	4b79      	ldr	r3, [pc, #484]	; (80050f0 <HAL_RCC_OscConfig+0x330>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a78      	ldr	r2, [pc, #480]	; (80050f0 <HAL_RCC_OscConfig+0x330>)
 8004f10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f14:	6013      	str	r3, [r2, #0]
 8004f16:	e021      	b.n	8004f5c <HAL_RCC_OscConfig+0x19c>
 8004f18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f1c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f28:	d10c      	bne.n	8004f44 <HAL_RCC_OscConfig+0x184>
 8004f2a:	4b71      	ldr	r3, [pc, #452]	; (80050f0 <HAL_RCC_OscConfig+0x330>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a70      	ldr	r2, [pc, #448]	; (80050f0 <HAL_RCC_OscConfig+0x330>)
 8004f30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f34:	6013      	str	r3, [r2, #0]
 8004f36:	4b6e      	ldr	r3, [pc, #440]	; (80050f0 <HAL_RCC_OscConfig+0x330>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a6d      	ldr	r2, [pc, #436]	; (80050f0 <HAL_RCC_OscConfig+0x330>)
 8004f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f40:	6013      	str	r3, [r2, #0]
 8004f42:	e00b      	b.n	8004f5c <HAL_RCC_OscConfig+0x19c>
 8004f44:	4b6a      	ldr	r3, [pc, #424]	; (80050f0 <HAL_RCC_OscConfig+0x330>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a69      	ldr	r2, [pc, #420]	; (80050f0 <HAL_RCC_OscConfig+0x330>)
 8004f4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f4e:	6013      	str	r3, [r2, #0]
 8004f50:	4b67      	ldr	r3, [pc, #412]	; (80050f0 <HAL_RCC_OscConfig+0x330>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a66      	ldr	r2, [pc, #408]	; (80050f0 <HAL_RCC_OscConfig+0x330>)
 8004f56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f5a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004f5c:	4b64      	ldr	r3, [pc, #400]	; (80050f0 <HAL_RCC_OscConfig+0x330>)
 8004f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f60:	f023 020f 	bic.w	r2, r3, #15
 8004f64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f68:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	495f      	ldr	r1, [pc, #380]	; (80050f0 <HAL_RCC_OscConfig+0x330>)
 8004f72:	4313      	orrs	r3, r2
 8004f74:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d059      	beq.n	800503a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f86:	f7fe feb3 	bl	8003cf0 <HAL_GetTick>
 8004f8a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f8e:	e00a      	b.n	8004fa6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f90:	f7fe feae 	bl	8003cf0 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	2b64      	cmp	r3, #100	; 0x64
 8004f9e:	d902      	bls.n	8004fa6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	f000 bf43 	b.w	8005e2c <HAL_RCC_OscConfig+0x106c>
 8004fa6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004faa:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fae:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004fb2:	fa93 f3a3 	rbit	r3, r3
 8004fb6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004fba:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fbe:	fab3 f383 	clz	r3, r3
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	095b      	lsrs	r3, r3, #5
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	f043 0301 	orr.w	r3, r3, #1
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d102      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x218>
 8004fd2:	4b47      	ldr	r3, [pc, #284]	; (80050f0 <HAL_RCC_OscConfig+0x330>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	e015      	b.n	8005004 <HAL_RCC_OscConfig+0x244>
 8004fd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004fdc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fe0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004fe4:	fa93 f3a3 	rbit	r3, r3
 8004fe8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004fec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ff0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004ff4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004ff8:	fa93 f3a3 	rbit	r3, r3
 8004ffc:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8005000:	4b3b      	ldr	r3, [pc, #236]	; (80050f0 <HAL_RCC_OscConfig+0x330>)
 8005002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005004:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005008:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800500c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8005010:	fa92 f2a2 	rbit	r2, r2
 8005014:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8005018:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800501c:	fab2 f282 	clz	r2, r2
 8005020:	b2d2      	uxtb	r2, r2
 8005022:	f042 0220 	orr.w	r2, r2, #32
 8005026:	b2d2      	uxtb	r2, r2
 8005028:	f002 021f 	and.w	r2, r2, #31
 800502c:	2101      	movs	r1, #1
 800502e:	fa01 f202 	lsl.w	r2, r1, r2
 8005032:	4013      	ands	r3, r2
 8005034:	2b00      	cmp	r3, #0
 8005036:	d0ab      	beq.n	8004f90 <HAL_RCC_OscConfig+0x1d0>
 8005038:	e05d      	b.n	80050f6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800503a:	f7fe fe59 	bl	8003cf0 <HAL_GetTick>
 800503e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005042:	e00a      	b.n	800505a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005044:	f7fe fe54 	bl	8003cf0 <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	2b64      	cmp	r3, #100	; 0x64
 8005052:	d902      	bls.n	800505a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	f000 bee9 	b.w	8005e2c <HAL_RCC_OscConfig+0x106c>
 800505a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800505e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005062:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8005066:	fa93 f3a3 	rbit	r3, r3
 800506a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800506e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005072:	fab3 f383 	clz	r3, r3
 8005076:	b2db      	uxtb	r3, r3
 8005078:	095b      	lsrs	r3, r3, #5
 800507a:	b2db      	uxtb	r3, r3
 800507c:	f043 0301 	orr.w	r3, r3, #1
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b01      	cmp	r3, #1
 8005084:	d102      	bne.n	800508c <HAL_RCC_OscConfig+0x2cc>
 8005086:	4b1a      	ldr	r3, [pc, #104]	; (80050f0 <HAL_RCC_OscConfig+0x330>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	e015      	b.n	80050b8 <HAL_RCC_OscConfig+0x2f8>
 800508c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005090:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005094:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8005098:	fa93 f3a3 	rbit	r3, r3
 800509c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80050a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80050a4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80050a8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80050ac:	fa93 f3a3 	rbit	r3, r3
 80050b0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80050b4:	4b0e      	ldr	r3, [pc, #56]	; (80050f0 <HAL_RCC_OscConfig+0x330>)
 80050b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80050bc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80050c0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80050c4:	fa92 f2a2 	rbit	r2, r2
 80050c8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80050cc:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80050d0:	fab2 f282 	clz	r2, r2
 80050d4:	b2d2      	uxtb	r2, r2
 80050d6:	f042 0220 	orr.w	r2, r2, #32
 80050da:	b2d2      	uxtb	r2, r2
 80050dc:	f002 021f 	and.w	r2, r2, #31
 80050e0:	2101      	movs	r1, #1
 80050e2:	fa01 f202 	lsl.w	r2, r1, r2
 80050e6:	4013      	ands	r3, r2
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1ab      	bne.n	8005044 <HAL_RCC_OscConfig+0x284>
 80050ec:	e003      	b.n	80050f6 <HAL_RCC_OscConfig+0x336>
 80050ee:	bf00      	nop
 80050f0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	2b00      	cmp	r3, #0
 8005108:	f000 817d 	beq.w	8005406 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800510c:	4ba6      	ldr	r3, [pc, #664]	; (80053a8 <HAL_RCC_OscConfig+0x5e8>)
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	f003 030c 	and.w	r3, r3, #12
 8005114:	2b00      	cmp	r3, #0
 8005116:	d00b      	beq.n	8005130 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005118:	4ba3      	ldr	r3, [pc, #652]	; (80053a8 <HAL_RCC_OscConfig+0x5e8>)
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	f003 030c 	and.w	r3, r3, #12
 8005120:	2b08      	cmp	r3, #8
 8005122:	d172      	bne.n	800520a <HAL_RCC_OscConfig+0x44a>
 8005124:	4ba0      	ldr	r3, [pc, #640]	; (80053a8 <HAL_RCC_OscConfig+0x5e8>)
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d16c      	bne.n	800520a <HAL_RCC_OscConfig+0x44a>
 8005130:	2302      	movs	r3, #2
 8005132:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005136:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800513a:	fa93 f3a3 	rbit	r3, r3
 800513e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8005142:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005146:	fab3 f383 	clz	r3, r3
 800514a:	b2db      	uxtb	r3, r3
 800514c:	095b      	lsrs	r3, r3, #5
 800514e:	b2db      	uxtb	r3, r3
 8005150:	f043 0301 	orr.w	r3, r3, #1
 8005154:	b2db      	uxtb	r3, r3
 8005156:	2b01      	cmp	r3, #1
 8005158:	d102      	bne.n	8005160 <HAL_RCC_OscConfig+0x3a0>
 800515a:	4b93      	ldr	r3, [pc, #588]	; (80053a8 <HAL_RCC_OscConfig+0x5e8>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	e013      	b.n	8005188 <HAL_RCC_OscConfig+0x3c8>
 8005160:	2302      	movs	r3, #2
 8005162:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005166:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800516a:	fa93 f3a3 	rbit	r3, r3
 800516e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8005172:	2302      	movs	r3, #2
 8005174:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8005178:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800517c:	fa93 f3a3 	rbit	r3, r3
 8005180:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8005184:	4b88      	ldr	r3, [pc, #544]	; (80053a8 <HAL_RCC_OscConfig+0x5e8>)
 8005186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005188:	2202      	movs	r2, #2
 800518a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800518e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8005192:	fa92 f2a2 	rbit	r2, r2
 8005196:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800519a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800519e:	fab2 f282 	clz	r2, r2
 80051a2:	b2d2      	uxtb	r2, r2
 80051a4:	f042 0220 	orr.w	r2, r2, #32
 80051a8:	b2d2      	uxtb	r2, r2
 80051aa:	f002 021f 	and.w	r2, r2, #31
 80051ae:	2101      	movs	r1, #1
 80051b0:	fa01 f202 	lsl.w	r2, r1, r2
 80051b4:	4013      	ands	r3, r2
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00a      	beq.n	80051d0 <HAL_RCC_OscConfig+0x410>
 80051ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d002      	beq.n	80051d0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	f000 be2e 	b.w	8005e2c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051d0:	4b75      	ldr	r3, [pc, #468]	; (80053a8 <HAL_RCC_OscConfig+0x5e8>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	695b      	ldr	r3, [r3, #20]
 80051e4:	21f8      	movs	r1, #248	; 0xf8
 80051e6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051ea:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80051ee:	fa91 f1a1 	rbit	r1, r1
 80051f2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80051f6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80051fa:	fab1 f181 	clz	r1, r1
 80051fe:	b2c9      	uxtb	r1, r1
 8005200:	408b      	lsls	r3, r1
 8005202:	4969      	ldr	r1, [pc, #420]	; (80053a8 <HAL_RCC_OscConfig+0x5e8>)
 8005204:	4313      	orrs	r3, r2
 8005206:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005208:	e0fd      	b.n	8005406 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800520a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800520e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	2b00      	cmp	r3, #0
 8005218:	f000 8088 	beq.w	800532c <HAL_RCC_OscConfig+0x56c>
 800521c:	2301      	movs	r3, #1
 800521e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005222:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005226:	fa93 f3a3 	rbit	r3, r3
 800522a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800522e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005232:	fab3 f383 	clz	r3, r3
 8005236:	b2db      	uxtb	r3, r3
 8005238:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800523c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	461a      	mov	r2, r3
 8005244:	2301      	movs	r3, #1
 8005246:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005248:	f7fe fd52 	bl	8003cf0 <HAL_GetTick>
 800524c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005250:	e00a      	b.n	8005268 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005252:	f7fe fd4d 	bl	8003cf0 <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	2b02      	cmp	r3, #2
 8005260:	d902      	bls.n	8005268 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	f000 bde2 	b.w	8005e2c <HAL_RCC_OscConfig+0x106c>
 8005268:	2302      	movs	r3, #2
 800526a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800526e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8005272:	fa93 f3a3 	rbit	r3, r3
 8005276:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800527a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800527e:	fab3 f383 	clz	r3, r3
 8005282:	b2db      	uxtb	r3, r3
 8005284:	095b      	lsrs	r3, r3, #5
 8005286:	b2db      	uxtb	r3, r3
 8005288:	f043 0301 	orr.w	r3, r3, #1
 800528c:	b2db      	uxtb	r3, r3
 800528e:	2b01      	cmp	r3, #1
 8005290:	d102      	bne.n	8005298 <HAL_RCC_OscConfig+0x4d8>
 8005292:	4b45      	ldr	r3, [pc, #276]	; (80053a8 <HAL_RCC_OscConfig+0x5e8>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	e013      	b.n	80052c0 <HAL_RCC_OscConfig+0x500>
 8005298:	2302      	movs	r3, #2
 800529a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800529e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80052a2:	fa93 f3a3 	rbit	r3, r3
 80052a6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80052aa:	2302      	movs	r3, #2
 80052ac:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80052b0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80052b4:	fa93 f3a3 	rbit	r3, r3
 80052b8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80052bc:	4b3a      	ldr	r3, [pc, #232]	; (80053a8 <HAL_RCC_OscConfig+0x5e8>)
 80052be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c0:	2202      	movs	r2, #2
 80052c2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80052c6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80052ca:	fa92 f2a2 	rbit	r2, r2
 80052ce:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80052d2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80052d6:	fab2 f282 	clz	r2, r2
 80052da:	b2d2      	uxtb	r2, r2
 80052dc:	f042 0220 	orr.w	r2, r2, #32
 80052e0:	b2d2      	uxtb	r2, r2
 80052e2:	f002 021f 	and.w	r2, r2, #31
 80052e6:	2101      	movs	r1, #1
 80052e8:	fa01 f202 	lsl.w	r2, r1, r2
 80052ec:	4013      	ands	r3, r2
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d0af      	beq.n	8005252 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052f2:	4b2d      	ldr	r3, [pc, #180]	; (80053a8 <HAL_RCC_OscConfig+0x5e8>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	695b      	ldr	r3, [r3, #20]
 8005306:	21f8      	movs	r1, #248	; 0xf8
 8005308:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800530c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005310:	fa91 f1a1 	rbit	r1, r1
 8005314:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8005318:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800531c:	fab1 f181 	clz	r1, r1
 8005320:	b2c9      	uxtb	r1, r1
 8005322:	408b      	lsls	r3, r1
 8005324:	4920      	ldr	r1, [pc, #128]	; (80053a8 <HAL_RCC_OscConfig+0x5e8>)
 8005326:	4313      	orrs	r3, r2
 8005328:	600b      	str	r3, [r1, #0]
 800532a:	e06c      	b.n	8005406 <HAL_RCC_OscConfig+0x646>
 800532c:	2301      	movs	r3, #1
 800532e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005332:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005336:	fa93 f3a3 	rbit	r3, r3
 800533a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800533e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005342:	fab3 f383 	clz	r3, r3
 8005346:	b2db      	uxtb	r3, r3
 8005348:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800534c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	461a      	mov	r2, r3
 8005354:	2300      	movs	r3, #0
 8005356:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005358:	f7fe fcca 	bl	8003cf0 <HAL_GetTick>
 800535c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005360:	e00a      	b.n	8005378 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005362:	f7fe fcc5 	bl	8003cf0 <HAL_GetTick>
 8005366:	4602      	mov	r2, r0
 8005368:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	2b02      	cmp	r3, #2
 8005370:	d902      	bls.n	8005378 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	f000 bd5a 	b.w	8005e2c <HAL_RCC_OscConfig+0x106c>
 8005378:	2302      	movs	r3, #2
 800537a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800537e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005382:	fa93 f3a3 	rbit	r3, r3
 8005386:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800538a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800538e:	fab3 f383 	clz	r3, r3
 8005392:	b2db      	uxtb	r3, r3
 8005394:	095b      	lsrs	r3, r3, #5
 8005396:	b2db      	uxtb	r3, r3
 8005398:	f043 0301 	orr.w	r3, r3, #1
 800539c:	b2db      	uxtb	r3, r3
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d104      	bne.n	80053ac <HAL_RCC_OscConfig+0x5ec>
 80053a2:	4b01      	ldr	r3, [pc, #4]	; (80053a8 <HAL_RCC_OscConfig+0x5e8>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	e015      	b.n	80053d4 <HAL_RCC_OscConfig+0x614>
 80053a8:	40021000 	.word	0x40021000
 80053ac:	2302      	movs	r3, #2
 80053ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80053b6:	fa93 f3a3 	rbit	r3, r3
 80053ba:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80053be:	2302      	movs	r3, #2
 80053c0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80053c4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80053c8:	fa93 f3a3 	rbit	r3, r3
 80053cc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80053d0:	4bc8      	ldr	r3, [pc, #800]	; (80056f4 <HAL_RCC_OscConfig+0x934>)
 80053d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d4:	2202      	movs	r2, #2
 80053d6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80053da:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80053de:	fa92 f2a2 	rbit	r2, r2
 80053e2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80053e6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80053ea:	fab2 f282 	clz	r2, r2
 80053ee:	b2d2      	uxtb	r2, r2
 80053f0:	f042 0220 	orr.w	r2, r2, #32
 80053f4:	b2d2      	uxtb	r2, r2
 80053f6:	f002 021f 	and.w	r2, r2, #31
 80053fa:	2101      	movs	r1, #1
 80053fc:	fa01 f202 	lsl.w	r2, r1, r2
 8005400:	4013      	ands	r3, r2
 8005402:	2b00      	cmp	r3, #0
 8005404:	d1ad      	bne.n	8005362 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005406:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800540a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0308 	and.w	r3, r3, #8
 8005416:	2b00      	cmp	r3, #0
 8005418:	f000 8110 	beq.w	800563c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800541c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005420:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	699b      	ldr	r3, [r3, #24]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d079      	beq.n	8005520 <HAL_RCC_OscConfig+0x760>
 800542c:	2301      	movs	r3, #1
 800542e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005432:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005436:	fa93 f3a3 	rbit	r3, r3
 800543a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800543e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005442:	fab3 f383 	clz	r3, r3
 8005446:	b2db      	uxtb	r3, r3
 8005448:	461a      	mov	r2, r3
 800544a:	4bab      	ldr	r3, [pc, #684]	; (80056f8 <HAL_RCC_OscConfig+0x938>)
 800544c:	4413      	add	r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	461a      	mov	r2, r3
 8005452:	2301      	movs	r3, #1
 8005454:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005456:	f7fe fc4b 	bl	8003cf0 <HAL_GetTick>
 800545a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800545e:	e00a      	b.n	8005476 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005460:	f7fe fc46 	bl	8003cf0 <HAL_GetTick>
 8005464:	4602      	mov	r2, r0
 8005466:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	2b02      	cmp	r3, #2
 800546e:	d902      	bls.n	8005476 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	f000 bcdb 	b.w	8005e2c <HAL_RCC_OscConfig+0x106c>
 8005476:	2302      	movs	r3, #2
 8005478:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800547c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005480:	fa93 f3a3 	rbit	r3, r3
 8005484:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005488:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800548c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005490:	2202      	movs	r2, #2
 8005492:	601a      	str	r2, [r3, #0]
 8005494:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005498:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	fa93 f2a3 	rbit	r2, r3
 80054a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054aa:	601a      	str	r2, [r3, #0]
 80054ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054b4:	2202      	movs	r2, #2
 80054b6:	601a      	str	r2, [r3, #0]
 80054b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	fa93 f2a3 	rbit	r2, r3
 80054c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054ca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80054ce:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054d0:	4b88      	ldr	r3, [pc, #544]	; (80056f4 <HAL_RCC_OscConfig+0x934>)
 80054d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054d8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80054dc:	2102      	movs	r1, #2
 80054de:	6019      	str	r1, [r3, #0]
 80054e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054e4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	fa93 f1a3 	rbit	r1, r3
 80054ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054f2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80054f6:	6019      	str	r1, [r3, #0]
  return result;
 80054f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054fc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	fab3 f383 	clz	r3, r3
 8005506:	b2db      	uxtb	r3, r3
 8005508:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800550c:	b2db      	uxtb	r3, r3
 800550e:	f003 031f 	and.w	r3, r3, #31
 8005512:	2101      	movs	r1, #1
 8005514:	fa01 f303 	lsl.w	r3, r1, r3
 8005518:	4013      	ands	r3, r2
 800551a:	2b00      	cmp	r3, #0
 800551c:	d0a0      	beq.n	8005460 <HAL_RCC_OscConfig+0x6a0>
 800551e:	e08d      	b.n	800563c <HAL_RCC_OscConfig+0x87c>
 8005520:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005524:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005528:	2201      	movs	r2, #1
 800552a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800552c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005530:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	fa93 f2a3 	rbit	r2, r3
 800553a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800553e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005542:	601a      	str	r2, [r3, #0]
  return result;
 8005544:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005548:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800554c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800554e:	fab3 f383 	clz	r3, r3
 8005552:	b2db      	uxtb	r3, r3
 8005554:	461a      	mov	r2, r3
 8005556:	4b68      	ldr	r3, [pc, #416]	; (80056f8 <HAL_RCC_OscConfig+0x938>)
 8005558:	4413      	add	r3, r2
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	461a      	mov	r2, r3
 800555e:	2300      	movs	r3, #0
 8005560:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005562:	f7fe fbc5 	bl	8003cf0 <HAL_GetTick>
 8005566:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800556a:	e00a      	b.n	8005582 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800556c:	f7fe fbc0 	bl	8003cf0 <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005576:	1ad3      	subs	r3, r2, r3
 8005578:	2b02      	cmp	r3, #2
 800557a:	d902      	bls.n	8005582 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800557c:	2303      	movs	r3, #3
 800557e:	f000 bc55 	b.w	8005e2c <HAL_RCC_OscConfig+0x106c>
 8005582:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005586:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800558a:	2202      	movs	r2, #2
 800558c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800558e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005592:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	fa93 f2a3 	rbit	r2, r3
 800559c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055a0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80055a4:	601a      	str	r2, [r3, #0]
 80055a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055aa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80055ae:	2202      	movs	r2, #2
 80055b0:	601a      	str	r2, [r3, #0]
 80055b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055b6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	fa93 f2a3 	rbit	r2, r3
 80055c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055c8:	601a      	str	r2, [r3, #0]
 80055ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055d2:	2202      	movs	r2, #2
 80055d4:	601a      	str	r2, [r3, #0]
 80055d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	fa93 f2a3 	rbit	r2, r3
 80055e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055e8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80055ec:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055ee:	4b41      	ldr	r3, [pc, #260]	; (80056f4 <HAL_RCC_OscConfig+0x934>)
 80055f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055f6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80055fa:	2102      	movs	r1, #2
 80055fc:	6019      	str	r1, [r3, #0]
 80055fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005602:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	fa93 f1a3 	rbit	r1, r3
 800560c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005610:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005614:	6019      	str	r1, [r3, #0]
  return result;
 8005616:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800561a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	fab3 f383 	clz	r3, r3
 8005624:	b2db      	uxtb	r3, r3
 8005626:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800562a:	b2db      	uxtb	r3, r3
 800562c:	f003 031f 	and.w	r3, r3, #31
 8005630:	2101      	movs	r1, #1
 8005632:	fa01 f303 	lsl.w	r3, r1, r3
 8005636:	4013      	ands	r3, r2
 8005638:	2b00      	cmp	r3, #0
 800563a:	d197      	bne.n	800556c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800563c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005640:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0304 	and.w	r3, r3, #4
 800564c:	2b00      	cmp	r3, #0
 800564e:	f000 81a1 	beq.w	8005994 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005652:	2300      	movs	r3, #0
 8005654:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005658:	4b26      	ldr	r3, [pc, #152]	; (80056f4 <HAL_RCC_OscConfig+0x934>)
 800565a:	69db      	ldr	r3, [r3, #28]
 800565c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d116      	bne.n	8005692 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005664:	4b23      	ldr	r3, [pc, #140]	; (80056f4 <HAL_RCC_OscConfig+0x934>)
 8005666:	69db      	ldr	r3, [r3, #28]
 8005668:	4a22      	ldr	r2, [pc, #136]	; (80056f4 <HAL_RCC_OscConfig+0x934>)
 800566a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800566e:	61d3      	str	r3, [r2, #28]
 8005670:	4b20      	ldr	r3, [pc, #128]	; (80056f4 <HAL_RCC_OscConfig+0x934>)
 8005672:	69db      	ldr	r3, [r3, #28]
 8005674:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005678:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800567c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8005680:	601a      	str	r2, [r3, #0]
 8005682:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005686:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800568a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800568c:	2301      	movs	r3, #1
 800568e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005692:	4b1a      	ldr	r3, [pc, #104]	; (80056fc <HAL_RCC_OscConfig+0x93c>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800569a:	2b00      	cmp	r3, #0
 800569c:	d11a      	bne.n	80056d4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800569e:	4b17      	ldr	r3, [pc, #92]	; (80056fc <HAL_RCC_OscConfig+0x93c>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a16      	ldr	r2, [pc, #88]	; (80056fc <HAL_RCC_OscConfig+0x93c>)
 80056a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056a8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056aa:	f7fe fb21 	bl	8003cf0 <HAL_GetTick>
 80056ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056b2:	e009      	b.n	80056c8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056b4:	f7fe fb1c 	bl	8003cf0 <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	2b64      	cmp	r3, #100	; 0x64
 80056c2:	d901      	bls.n	80056c8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	e3b1      	b.n	8005e2c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056c8:	4b0c      	ldr	r3, [pc, #48]	; (80056fc <HAL_RCC_OscConfig+0x93c>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d0ef      	beq.n	80056b4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d10d      	bne.n	8005700 <HAL_RCC_OscConfig+0x940>
 80056e4:	4b03      	ldr	r3, [pc, #12]	; (80056f4 <HAL_RCC_OscConfig+0x934>)
 80056e6:	6a1b      	ldr	r3, [r3, #32]
 80056e8:	4a02      	ldr	r2, [pc, #8]	; (80056f4 <HAL_RCC_OscConfig+0x934>)
 80056ea:	f043 0301 	orr.w	r3, r3, #1
 80056ee:	6213      	str	r3, [r2, #32]
 80056f0:	e03c      	b.n	800576c <HAL_RCC_OscConfig+0x9ac>
 80056f2:	bf00      	nop
 80056f4:	40021000 	.word	0x40021000
 80056f8:	10908120 	.word	0x10908120
 80056fc:	40007000 	.word	0x40007000
 8005700:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005704:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d10c      	bne.n	800572a <HAL_RCC_OscConfig+0x96a>
 8005710:	4bc1      	ldr	r3, [pc, #772]	; (8005a18 <HAL_RCC_OscConfig+0xc58>)
 8005712:	6a1b      	ldr	r3, [r3, #32]
 8005714:	4ac0      	ldr	r2, [pc, #768]	; (8005a18 <HAL_RCC_OscConfig+0xc58>)
 8005716:	f023 0301 	bic.w	r3, r3, #1
 800571a:	6213      	str	r3, [r2, #32]
 800571c:	4bbe      	ldr	r3, [pc, #760]	; (8005a18 <HAL_RCC_OscConfig+0xc58>)
 800571e:	6a1b      	ldr	r3, [r3, #32]
 8005720:	4abd      	ldr	r2, [pc, #756]	; (8005a18 <HAL_RCC_OscConfig+0xc58>)
 8005722:	f023 0304 	bic.w	r3, r3, #4
 8005726:	6213      	str	r3, [r2, #32]
 8005728:	e020      	b.n	800576c <HAL_RCC_OscConfig+0x9ac>
 800572a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800572e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	2b05      	cmp	r3, #5
 8005738:	d10c      	bne.n	8005754 <HAL_RCC_OscConfig+0x994>
 800573a:	4bb7      	ldr	r3, [pc, #732]	; (8005a18 <HAL_RCC_OscConfig+0xc58>)
 800573c:	6a1b      	ldr	r3, [r3, #32]
 800573e:	4ab6      	ldr	r2, [pc, #728]	; (8005a18 <HAL_RCC_OscConfig+0xc58>)
 8005740:	f043 0304 	orr.w	r3, r3, #4
 8005744:	6213      	str	r3, [r2, #32]
 8005746:	4bb4      	ldr	r3, [pc, #720]	; (8005a18 <HAL_RCC_OscConfig+0xc58>)
 8005748:	6a1b      	ldr	r3, [r3, #32]
 800574a:	4ab3      	ldr	r2, [pc, #716]	; (8005a18 <HAL_RCC_OscConfig+0xc58>)
 800574c:	f043 0301 	orr.w	r3, r3, #1
 8005750:	6213      	str	r3, [r2, #32]
 8005752:	e00b      	b.n	800576c <HAL_RCC_OscConfig+0x9ac>
 8005754:	4bb0      	ldr	r3, [pc, #704]	; (8005a18 <HAL_RCC_OscConfig+0xc58>)
 8005756:	6a1b      	ldr	r3, [r3, #32]
 8005758:	4aaf      	ldr	r2, [pc, #700]	; (8005a18 <HAL_RCC_OscConfig+0xc58>)
 800575a:	f023 0301 	bic.w	r3, r3, #1
 800575e:	6213      	str	r3, [r2, #32]
 8005760:	4bad      	ldr	r3, [pc, #692]	; (8005a18 <HAL_RCC_OscConfig+0xc58>)
 8005762:	6a1b      	ldr	r3, [r3, #32]
 8005764:	4aac      	ldr	r2, [pc, #688]	; (8005a18 <HAL_RCC_OscConfig+0xc58>)
 8005766:	f023 0304 	bic.w	r3, r3, #4
 800576a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800576c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005770:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	2b00      	cmp	r3, #0
 800577a:	f000 8081 	beq.w	8005880 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800577e:	f7fe fab7 	bl	8003cf0 <HAL_GetTick>
 8005782:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005786:	e00b      	b.n	80057a0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005788:	f7fe fab2 	bl	8003cf0 <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	f241 3288 	movw	r2, #5000	; 0x1388
 8005798:	4293      	cmp	r3, r2
 800579a:	d901      	bls.n	80057a0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800579c:	2303      	movs	r3, #3
 800579e:	e345      	b.n	8005e2c <HAL_RCC_OscConfig+0x106c>
 80057a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057a4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80057a8:	2202      	movs	r2, #2
 80057aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057b0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	fa93 f2a3 	rbit	r2, r3
 80057ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057be:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80057c2:	601a      	str	r2, [r3, #0]
 80057c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057c8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80057cc:	2202      	movs	r2, #2
 80057ce:	601a      	str	r2, [r3, #0]
 80057d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057d4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	fa93 f2a3 	rbit	r2, r3
 80057de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057e2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80057e6:	601a      	str	r2, [r3, #0]
  return result;
 80057e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057ec:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80057f0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057f2:	fab3 f383 	clz	r3, r3
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	095b      	lsrs	r3, r3, #5
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	f043 0302 	orr.w	r3, r3, #2
 8005800:	b2db      	uxtb	r3, r3
 8005802:	2b02      	cmp	r3, #2
 8005804:	d102      	bne.n	800580c <HAL_RCC_OscConfig+0xa4c>
 8005806:	4b84      	ldr	r3, [pc, #528]	; (8005a18 <HAL_RCC_OscConfig+0xc58>)
 8005808:	6a1b      	ldr	r3, [r3, #32]
 800580a:	e013      	b.n	8005834 <HAL_RCC_OscConfig+0xa74>
 800580c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005810:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005814:	2202      	movs	r2, #2
 8005816:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005818:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800581c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	fa93 f2a3 	rbit	r2, r3
 8005826:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800582a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800582e:	601a      	str	r2, [r3, #0]
 8005830:	4b79      	ldr	r3, [pc, #484]	; (8005a18 <HAL_RCC_OscConfig+0xc58>)
 8005832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005834:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005838:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800583c:	2102      	movs	r1, #2
 800583e:	6011      	str	r1, [r2, #0]
 8005840:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005844:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005848:	6812      	ldr	r2, [r2, #0]
 800584a:	fa92 f1a2 	rbit	r1, r2
 800584e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005852:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005856:	6011      	str	r1, [r2, #0]
  return result;
 8005858:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800585c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005860:	6812      	ldr	r2, [r2, #0]
 8005862:	fab2 f282 	clz	r2, r2
 8005866:	b2d2      	uxtb	r2, r2
 8005868:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800586c:	b2d2      	uxtb	r2, r2
 800586e:	f002 021f 	and.w	r2, r2, #31
 8005872:	2101      	movs	r1, #1
 8005874:	fa01 f202 	lsl.w	r2, r1, r2
 8005878:	4013      	ands	r3, r2
 800587a:	2b00      	cmp	r3, #0
 800587c:	d084      	beq.n	8005788 <HAL_RCC_OscConfig+0x9c8>
 800587e:	e07f      	b.n	8005980 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005880:	f7fe fa36 	bl	8003cf0 <HAL_GetTick>
 8005884:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005888:	e00b      	b.n	80058a2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800588a:	f7fe fa31 	bl	8003cf0 <HAL_GetTick>
 800588e:	4602      	mov	r2, r0
 8005890:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	f241 3288 	movw	r2, #5000	; 0x1388
 800589a:	4293      	cmp	r3, r2
 800589c:	d901      	bls.n	80058a2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e2c4      	b.n	8005e2c <HAL_RCC_OscConfig+0x106c>
 80058a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058a6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80058aa:	2202      	movs	r2, #2
 80058ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058b2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	fa93 f2a3 	rbit	r2, r3
 80058bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058c0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80058c4:	601a      	str	r2, [r3, #0]
 80058c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058ca:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80058ce:	2202      	movs	r2, #2
 80058d0:	601a      	str	r2, [r3, #0]
 80058d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058d6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	fa93 f2a3 	rbit	r2, r3
 80058e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058e4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80058e8:	601a      	str	r2, [r3, #0]
  return result;
 80058ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058ee:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80058f2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058f4:	fab3 f383 	clz	r3, r3
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	095b      	lsrs	r3, r3, #5
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	f043 0302 	orr.w	r3, r3, #2
 8005902:	b2db      	uxtb	r3, r3
 8005904:	2b02      	cmp	r3, #2
 8005906:	d102      	bne.n	800590e <HAL_RCC_OscConfig+0xb4e>
 8005908:	4b43      	ldr	r3, [pc, #268]	; (8005a18 <HAL_RCC_OscConfig+0xc58>)
 800590a:	6a1b      	ldr	r3, [r3, #32]
 800590c:	e013      	b.n	8005936 <HAL_RCC_OscConfig+0xb76>
 800590e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005912:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005916:	2202      	movs	r2, #2
 8005918:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800591a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800591e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	fa93 f2a3 	rbit	r2, r3
 8005928:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800592c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005930:	601a      	str	r2, [r3, #0]
 8005932:	4b39      	ldr	r3, [pc, #228]	; (8005a18 <HAL_RCC_OscConfig+0xc58>)
 8005934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005936:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800593a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800593e:	2102      	movs	r1, #2
 8005940:	6011      	str	r1, [r2, #0]
 8005942:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005946:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800594a:	6812      	ldr	r2, [r2, #0]
 800594c:	fa92 f1a2 	rbit	r1, r2
 8005950:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005954:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005958:	6011      	str	r1, [r2, #0]
  return result;
 800595a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800595e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005962:	6812      	ldr	r2, [r2, #0]
 8005964:	fab2 f282 	clz	r2, r2
 8005968:	b2d2      	uxtb	r2, r2
 800596a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800596e:	b2d2      	uxtb	r2, r2
 8005970:	f002 021f 	and.w	r2, r2, #31
 8005974:	2101      	movs	r1, #1
 8005976:	fa01 f202 	lsl.w	r2, r1, r2
 800597a:	4013      	ands	r3, r2
 800597c:	2b00      	cmp	r3, #0
 800597e:	d184      	bne.n	800588a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005980:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005984:	2b01      	cmp	r3, #1
 8005986:	d105      	bne.n	8005994 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005988:	4b23      	ldr	r3, [pc, #140]	; (8005a18 <HAL_RCC_OscConfig+0xc58>)
 800598a:	69db      	ldr	r3, [r3, #28]
 800598c:	4a22      	ldr	r2, [pc, #136]	; (8005a18 <HAL_RCC_OscConfig+0xc58>)
 800598e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005992:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005994:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005998:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	69db      	ldr	r3, [r3, #28]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	f000 8242 	beq.w	8005e2a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059a6:	4b1c      	ldr	r3, [pc, #112]	; (8005a18 <HAL_RCC_OscConfig+0xc58>)
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	f003 030c 	and.w	r3, r3, #12
 80059ae:	2b08      	cmp	r3, #8
 80059b0:	f000 8213 	beq.w	8005dda <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	69db      	ldr	r3, [r3, #28]
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	f040 8162 	bne.w	8005c8a <HAL_RCC_OscConfig+0xeca>
 80059c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059ca:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80059ce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80059d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059d8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	fa93 f2a3 	rbit	r2, r3
 80059e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059e6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80059ea:	601a      	str	r2, [r3, #0]
  return result;
 80059ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059f0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80059f4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059f6:	fab3 f383 	clz	r3, r3
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005a00:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	461a      	mov	r2, r3
 8005a08:	2300      	movs	r3, #0
 8005a0a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a0c:	f7fe f970 	bl	8003cf0 <HAL_GetTick>
 8005a10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a14:	e00c      	b.n	8005a30 <HAL_RCC_OscConfig+0xc70>
 8005a16:	bf00      	nop
 8005a18:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a1c:	f7fe f968 	bl	8003cf0 <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	2b02      	cmp	r3, #2
 8005a2a:	d901      	bls.n	8005a30 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	e1fd      	b.n	8005e2c <HAL_RCC_OscConfig+0x106c>
 8005a30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a34:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005a38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a42:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	fa93 f2a3 	rbit	r2, r3
 8005a4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a50:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005a54:	601a      	str	r2, [r3, #0]
  return result;
 8005a56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a5a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005a5e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a60:	fab3 f383 	clz	r3, r3
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	095b      	lsrs	r3, r3, #5
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	f043 0301 	orr.w	r3, r3, #1
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d102      	bne.n	8005a7a <HAL_RCC_OscConfig+0xcba>
 8005a74:	4bb0      	ldr	r3, [pc, #704]	; (8005d38 <HAL_RCC_OscConfig+0xf78>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	e027      	b.n	8005aca <HAL_RCC_OscConfig+0xd0a>
 8005a7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a7e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005a82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a8c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	fa93 f2a3 	rbit	r2, r3
 8005a96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a9a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005a9e:	601a      	str	r2, [r3, #0]
 8005aa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005aa4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005aa8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005aac:	601a      	str	r2, [r3, #0]
 8005aae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ab2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	fa93 f2a3 	rbit	r2, r3
 8005abc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ac0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005ac4:	601a      	str	r2, [r3, #0]
 8005ac6:	4b9c      	ldr	r3, [pc, #624]	; (8005d38 <HAL_RCC_OscConfig+0xf78>)
 8005ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005ace:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005ad2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005ad6:	6011      	str	r1, [r2, #0]
 8005ad8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005adc:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005ae0:	6812      	ldr	r2, [r2, #0]
 8005ae2:	fa92 f1a2 	rbit	r1, r2
 8005ae6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005aea:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005aee:	6011      	str	r1, [r2, #0]
  return result;
 8005af0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005af4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005af8:	6812      	ldr	r2, [r2, #0]
 8005afa:	fab2 f282 	clz	r2, r2
 8005afe:	b2d2      	uxtb	r2, r2
 8005b00:	f042 0220 	orr.w	r2, r2, #32
 8005b04:	b2d2      	uxtb	r2, r2
 8005b06:	f002 021f 	and.w	r2, r2, #31
 8005b0a:	2101      	movs	r1, #1
 8005b0c:	fa01 f202 	lsl.w	r2, r1, r2
 8005b10:	4013      	ands	r3, r2
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d182      	bne.n	8005a1c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b16:	4b88      	ldr	r3, [pc, #544]	; (8005d38 <HAL_RCC_OscConfig+0xf78>)
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005b1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005b2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	6a1b      	ldr	r3, [r3, #32]
 8005b36:	430b      	orrs	r3, r1
 8005b38:	497f      	ldr	r1, [pc, #508]	; (8005d38 <HAL_RCC_OscConfig+0xf78>)
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	604b      	str	r3, [r1, #4]
 8005b3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b42:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005b46:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005b4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b50:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	fa93 f2a3 	rbit	r2, r3
 8005b5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b5e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005b62:	601a      	str	r2, [r3, #0]
  return result;
 8005b64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b68:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005b6c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b6e:	fab3 f383 	clz	r3, r3
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005b78:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	461a      	mov	r2, r3
 8005b80:	2301      	movs	r3, #1
 8005b82:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b84:	f7fe f8b4 	bl	8003cf0 <HAL_GetTick>
 8005b88:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b8c:	e009      	b.n	8005ba2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b8e:	f7fe f8af 	bl	8003cf0 <HAL_GetTick>
 8005b92:	4602      	mov	r2, r0
 8005b94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d901      	bls.n	8005ba2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e144      	b.n	8005e2c <HAL_RCC_OscConfig+0x106c>
 8005ba2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ba6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005baa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005bae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bb4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	fa93 f2a3 	rbit	r2, r3
 8005bbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bc2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005bc6:	601a      	str	r2, [r3, #0]
  return result;
 8005bc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bcc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005bd0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005bd2:	fab3 f383 	clz	r3, r3
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	095b      	lsrs	r3, r3, #5
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	f043 0301 	orr.w	r3, r3, #1
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d102      	bne.n	8005bec <HAL_RCC_OscConfig+0xe2c>
 8005be6:	4b54      	ldr	r3, [pc, #336]	; (8005d38 <HAL_RCC_OscConfig+0xf78>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	e027      	b.n	8005c3c <HAL_RCC_OscConfig+0xe7c>
 8005bec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bf0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005bf4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005bf8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bfe:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	fa93 f2a3 	rbit	r2, r3
 8005c08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c0c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005c10:	601a      	str	r2, [r3, #0]
 8005c12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c16:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005c1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005c1e:	601a      	str	r2, [r3, #0]
 8005c20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c24:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	fa93 f2a3 	rbit	r2, r3
 8005c2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c32:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8005c36:	601a      	str	r2, [r3, #0]
 8005c38:	4b3f      	ldr	r3, [pc, #252]	; (8005d38 <HAL_RCC_OscConfig+0xf78>)
 8005c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005c40:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005c44:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005c48:	6011      	str	r1, [r2, #0]
 8005c4a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005c4e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005c52:	6812      	ldr	r2, [r2, #0]
 8005c54:	fa92 f1a2 	rbit	r1, r2
 8005c58:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005c5c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005c60:	6011      	str	r1, [r2, #0]
  return result;
 8005c62:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005c66:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005c6a:	6812      	ldr	r2, [r2, #0]
 8005c6c:	fab2 f282 	clz	r2, r2
 8005c70:	b2d2      	uxtb	r2, r2
 8005c72:	f042 0220 	orr.w	r2, r2, #32
 8005c76:	b2d2      	uxtb	r2, r2
 8005c78:	f002 021f 	and.w	r2, r2, #31
 8005c7c:	2101      	movs	r1, #1
 8005c7e:	fa01 f202 	lsl.w	r2, r1, r2
 8005c82:	4013      	ands	r3, r2
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d082      	beq.n	8005b8e <HAL_RCC_OscConfig+0xdce>
 8005c88:	e0cf      	b.n	8005e2a <HAL_RCC_OscConfig+0x106a>
 8005c8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c8e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005c92:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005c96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c9c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	fa93 f2a3 	rbit	r2, r3
 8005ca6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005caa:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005cae:	601a      	str	r2, [r3, #0]
  return result;
 8005cb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cb4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005cb8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cba:	fab3 f383 	clz	r3, r3
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005cc4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	461a      	mov	r2, r3
 8005ccc:	2300      	movs	r3, #0
 8005cce:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cd0:	f7fe f80e 	bl	8003cf0 <HAL_GetTick>
 8005cd4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005cd8:	e009      	b.n	8005cee <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cda:	f7fe f809 	bl	8003cf0 <HAL_GetTick>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005ce4:	1ad3      	subs	r3, r2, r3
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d901      	bls.n	8005cee <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e09e      	b.n	8005e2c <HAL_RCC_OscConfig+0x106c>
 8005cee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cf2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005cf6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005cfa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d00:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	fa93 f2a3 	rbit	r2, r3
 8005d0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d0e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005d12:	601a      	str	r2, [r3, #0]
  return result;
 8005d14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d18:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005d1c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d1e:	fab3 f383 	clz	r3, r3
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	095b      	lsrs	r3, r3, #5
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	f043 0301 	orr.w	r3, r3, #1
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d104      	bne.n	8005d3c <HAL_RCC_OscConfig+0xf7c>
 8005d32:	4b01      	ldr	r3, [pc, #4]	; (8005d38 <HAL_RCC_OscConfig+0xf78>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	e029      	b.n	8005d8c <HAL_RCC_OscConfig+0xfcc>
 8005d38:	40021000 	.word	0x40021000
 8005d3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d40:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005d44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005d48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d4e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	fa93 f2a3 	rbit	r2, r3
 8005d58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d5c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005d60:	601a      	str	r2, [r3, #0]
 8005d62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d66:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005d6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005d6e:	601a      	str	r2, [r3, #0]
 8005d70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d74:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	fa93 f2a3 	rbit	r2, r3
 8005d7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d82:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8005d86:	601a      	str	r2, [r3, #0]
 8005d88:	4b2b      	ldr	r3, [pc, #172]	; (8005e38 <HAL_RCC_OscConfig+0x1078>)
 8005d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005d90:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005d94:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005d98:	6011      	str	r1, [r2, #0]
 8005d9a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005d9e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005da2:	6812      	ldr	r2, [r2, #0]
 8005da4:	fa92 f1a2 	rbit	r1, r2
 8005da8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005dac:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005db0:	6011      	str	r1, [r2, #0]
  return result;
 8005db2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005db6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005dba:	6812      	ldr	r2, [r2, #0]
 8005dbc:	fab2 f282 	clz	r2, r2
 8005dc0:	b2d2      	uxtb	r2, r2
 8005dc2:	f042 0220 	orr.w	r2, r2, #32
 8005dc6:	b2d2      	uxtb	r2, r2
 8005dc8:	f002 021f 	and.w	r2, r2, #31
 8005dcc:	2101      	movs	r1, #1
 8005dce:	fa01 f202 	lsl.w	r2, r1, r2
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d180      	bne.n	8005cda <HAL_RCC_OscConfig+0xf1a>
 8005dd8:	e027      	b.n	8005e2a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005dda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005dde:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	69db      	ldr	r3, [r3, #28]
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d101      	bne.n	8005dee <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e01e      	b.n	8005e2c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005dee:	4b12      	ldr	r3, [pc, #72]	; (8005e38 <HAL_RCC_OscConfig+0x1078>)
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005df6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005dfa:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005dfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	6a1b      	ldr	r3, [r3, #32]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d10b      	bne.n	8005e26 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005e0e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005e12:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005e16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d001      	beq.n	8005e2a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e000      	b.n	8005e2c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8005e2a:	2300      	movs	r3, #0
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	40021000 	.word	0x40021000

08005e3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b09e      	sub	sp, #120	; 0x78
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005e46:	2300      	movs	r3, #0
 8005e48:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d101      	bne.n	8005e54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	e162      	b.n	800611a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e54:	4b90      	ldr	r3, [pc, #576]	; (8006098 <HAL_RCC_ClockConfig+0x25c>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 0307 	and.w	r3, r3, #7
 8005e5c:	683a      	ldr	r2, [r7, #0]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d910      	bls.n	8005e84 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e62:	4b8d      	ldr	r3, [pc, #564]	; (8006098 <HAL_RCC_ClockConfig+0x25c>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f023 0207 	bic.w	r2, r3, #7
 8005e6a:	498b      	ldr	r1, [pc, #556]	; (8006098 <HAL_RCC_ClockConfig+0x25c>)
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e72:	4b89      	ldr	r3, [pc, #548]	; (8006098 <HAL_RCC_ClockConfig+0x25c>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 0307 	and.w	r3, r3, #7
 8005e7a:	683a      	ldr	r2, [r7, #0]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d001      	beq.n	8005e84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e14a      	b.n	800611a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0302 	and.w	r3, r3, #2
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d008      	beq.n	8005ea2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e90:	4b82      	ldr	r3, [pc, #520]	; (800609c <HAL_RCC_ClockConfig+0x260>)
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	497f      	ldr	r1, [pc, #508]	; (800609c <HAL_RCC_ClockConfig+0x260>)
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 0301 	and.w	r3, r3, #1
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	f000 80dc 	beq.w	8006068 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d13c      	bne.n	8005f32 <HAL_RCC_ClockConfig+0xf6>
 8005eb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ebc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ebe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ec0:	fa93 f3a3 	rbit	r3, r3
 8005ec4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005ec6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ec8:	fab3 f383 	clz	r3, r3
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	095b      	lsrs	r3, r3, #5
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	f043 0301 	orr.w	r3, r3, #1
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d102      	bne.n	8005ee2 <HAL_RCC_ClockConfig+0xa6>
 8005edc:	4b6f      	ldr	r3, [pc, #444]	; (800609c <HAL_RCC_ClockConfig+0x260>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	e00f      	b.n	8005f02 <HAL_RCC_ClockConfig+0xc6>
 8005ee2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ee6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ee8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005eea:	fa93 f3a3 	rbit	r3, r3
 8005eee:	667b      	str	r3, [r7, #100]	; 0x64
 8005ef0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ef4:	663b      	str	r3, [r7, #96]	; 0x60
 8005ef6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ef8:	fa93 f3a3 	rbit	r3, r3
 8005efc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005efe:	4b67      	ldr	r3, [pc, #412]	; (800609c <HAL_RCC_ClockConfig+0x260>)
 8005f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f02:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005f06:	65ba      	str	r2, [r7, #88]	; 0x58
 8005f08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f0a:	fa92 f2a2 	rbit	r2, r2
 8005f0e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005f10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005f12:	fab2 f282 	clz	r2, r2
 8005f16:	b2d2      	uxtb	r2, r2
 8005f18:	f042 0220 	orr.w	r2, r2, #32
 8005f1c:	b2d2      	uxtb	r2, r2
 8005f1e:	f002 021f 	and.w	r2, r2, #31
 8005f22:	2101      	movs	r1, #1
 8005f24:	fa01 f202 	lsl.w	r2, r1, r2
 8005f28:	4013      	ands	r3, r2
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d17b      	bne.n	8006026 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e0f3      	b.n	800611a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	2b02      	cmp	r3, #2
 8005f38:	d13c      	bne.n	8005fb4 <HAL_RCC_ClockConfig+0x178>
 8005f3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f3e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f42:	fa93 f3a3 	rbit	r3, r3
 8005f46:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005f48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f4a:	fab3 f383 	clz	r3, r3
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	095b      	lsrs	r3, r3, #5
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	f043 0301 	orr.w	r3, r3, #1
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d102      	bne.n	8005f64 <HAL_RCC_ClockConfig+0x128>
 8005f5e:	4b4f      	ldr	r3, [pc, #316]	; (800609c <HAL_RCC_ClockConfig+0x260>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	e00f      	b.n	8005f84 <HAL_RCC_ClockConfig+0x148>
 8005f64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f68:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f6c:	fa93 f3a3 	rbit	r3, r3
 8005f70:	647b      	str	r3, [r7, #68]	; 0x44
 8005f72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f76:	643b      	str	r3, [r7, #64]	; 0x40
 8005f78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f7a:	fa93 f3a3 	rbit	r3, r3
 8005f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f80:	4b46      	ldr	r3, [pc, #280]	; (800609c <HAL_RCC_ClockConfig+0x260>)
 8005f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005f88:	63ba      	str	r2, [r7, #56]	; 0x38
 8005f8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f8c:	fa92 f2a2 	rbit	r2, r2
 8005f90:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005f92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f94:	fab2 f282 	clz	r2, r2
 8005f98:	b2d2      	uxtb	r2, r2
 8005f9a:	f042 0220 	orr.w	r2, r2, #32
 8005f9e:	b2d2      	uxtb	r2, r2
 8005fa0:	f002 021f 	and.w	r2, r2, #31
 8005fa4:	2101      	movs	r1, #1
 8005fa6:	fa01 f202 	lsl.w	r2, r1, r2
 8005faa:	4013      	ands	r3, r2
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d13a      	bne.n	8006026 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e0b2      	b.n	800611a <HAL_RCC_ClockConfig+0x2de>
 8005fb4:	2302      	movs	r3, #2
 8005fb6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fba:	fa93 f3a3 	rbit	r3, r3
 8005fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fc2:	fab3 f383 	clz	r3, r3
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	095b      	lsrs	r3, r3, #5
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	f043 0301 	orr.w	r3, r3, #1
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d102      	bne.n	8005fdc <HAL_RCC_ClockConfig+0x1a0>
 8005fd6:	4b31      	ldr	r3, [pc, #196]	; (800609c <HAL_RCC_ClockConfig+0x260>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	e00d      	b.n	8005ff8 <HAL_RCC_ClockConfig+0x1bc>
 8005fdc:	2302      	movs	r3, #2
 8005fde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe2:	fa93 f3a3 	rbit	r3, r3
 8005fe6:	627b      	str	r3, [r7, #36]	; 0x24
 8005fe8:	2302      	movs	r3, #2
 8005fea:	623b      	str	r3, [r7, #32]
 8005fec:	6a3b      	ldr	r3, [r7, #32]
 8005fee:	fa93 f3a3 	rbit	r3, r3
 8005ff2:	61fb      	str	r3, [r7, #28]
 8005ff4:	4b29      	ldr	r3, [pc, #164]	; (800609c <HAL_RCC_ClockConfig+0x260>)
 8005ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff8:	2202      	movs	r2, #2
 8005ffa:	61ba      	str	r2, [r7, #24]
 8005ffc:	69ba      	ldr	r2, [r7, #24]
 8005ffe:	fa92 f2a2 	rbit	r2, r2
 8006002:	617a      	str	r2, [r7, #20]
  return result;
 8006004:	697a      	ldr	r2, [r7, #20]
 8006006:	fab2 f282 	clz	r2, r2
 800600a:	b2d2      	uxtb	r2, r2
 800600c:	f042 0220 	orr.w	r2, r2, #32
 8006010:	b2d2      	uxtb	r2, r2
 8006012:	f002 021f 	and.w	r2, r2, #31
 8006016:	2101      	movs	r1, #1
 8006018:	fa01 f202 	lsl.w	r2, r1, r2
 800601c:	4013      	ands	r3, r2
 800601e:	2b00      	cmp	r3, #0
 8006020:	d101      	bne.n	8006026 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e079      	b.n	800611a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006026:	4b1d      	ldr	r3, [pc, #116]	; (800609c <HAL_RCC_ClockConfig+0x260>)
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	f023 0203 	bic.w	r2, r3, #3
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	491a      	ldr	r1, [pc, #104]	; (800609c <HAL_RCC_ClockConfig+0x260>)
 8006034:	4313      	orrs	r3, r2
 8006036:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006038:	f7fd fe5a 	bl	8003cf0 <HAL_GetTick>
 800603c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800603e:	e00a      	b.n	8006056 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006040:	f7fd fe56 	bl	8003cf0 <HAL_GetTick>
 8006044:	4602      	mov	r2, r0
 8006046:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006048:	1ad3      	subs	r3, r2, r3
 800604a:	f241 3288 	movw	r2, #5000	; 0x1388
 800604e:	4293      	cmp	r3, r2
 8006050:	d901      	bls.n	8006056 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8006052:	2303      	movs	r3, #3
 8006054:	e061      	b.n	800611a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006056:	4b11      	ldr	r3, [pc, #68]	; (800609c <HAL_RCC_ClockConfig+0x260>)
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	f003 020c 	and.w	r2, r3, #12
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	429a      	cmp	r2, r3
 8006066:	d1eb      	bne.n	8006040 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006068:	4b0b      	ldr	r3, [pc, #44]	; (8006098 <HAL_RCC_ClockConfig+0x25c>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 0307 	and.w	r3, r3, #7
 8006070:	683a      	ldr	r2, [r7, #0]
 8006072:	429a      	cmp	r2, r3
 8006074:	d214      	bcs.n	80060a0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006076:	4b08      	ldr	r3, [pc, #32]	; (8006098 <HAL_RCC_ClockConfig+0x25c>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f023 0207 	bic.w	r2, r3, #7
 800607e:	4906      	ldr	r1, [pc, #24]	; (8006098 <HAL_RCC_ClockConfig+0x25c>)
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	4313      	orrs	r3, r2
 8006084:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006086:	4b04      	ldr	r3, [pc, #16]	; (8006098 <HAL_RCC_ClockConfig+0x25c>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 0307 	and.w	r3, r3, #7
 800608e:	683a      	ldr	r2, [r7, #0]
 8006090:	429a      	cmp	r2, r3
 8006092:	d005      	beq.n	80060a0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	e040      	b.n	800611a <HAL_RCC_ClockConfig+0x2de>
 8006098:	40022000 	.word	0x40022000
 800609c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 0304 	and.w	r3, r3, #4
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d008      	beq.n	80060be <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060ac:	4b1d      	ldr	r3, [pc, #116]	; (8006124 <HAL_RCC_ClockConfig+0x2e8>)
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	491a      	ldr	r1, [pc, #104]	; (8006124 <HAL_RCC_ClockConfig+0x2e8>)
 80060ba:	4313      	orrs	r3, r2
 80060bc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 0308 	and.w	r3, r3, #8
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d009      	beq.n	80060de <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80060ca:	4b16      	ldr	r3, [pc, #88]	; (8006124 <HAL_RCC_ClockConfig+0x2e8>)
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	00db      	lsls	r3, r3, #3
 80060d8:	4912      	ldr	r1, [pc, #72]	; (8006124 <HAL_RCC_ClockConfig+0x2e8>)
 80060da:	4313      	orrs	r3, r2
 80060dc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80060de:	f000 f829 	bl	8006134 <HAL_RCC_GetSysClockFreq>
 80060e2:	4601      	mov	r1, r0
 80060e4:	4b0f      	ldr	r3, [pc, #60]	; (8006124 <HAL_RCC_ClockConfig+0x2e8>)
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060ec:	22f0      	movs	r2, #240	; 0xf0
 80060ee:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060f0:	693a      	ldr	r2, [r7, #16]
 80060f2:	fa92 f2a2 	rbit	r2, r2
 80060f6:	60fa      	str	r2, [r7, #12]
  return result;
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	fab2 f282 	clz	r2, r2
 80060fe:	b2d2      	uxtb	r2, r2
 8006100:	40d3      	lsrs	r3, r2
 8006102:	4a09      	ldr	r2, [pc, #36]	; (8006128 <HAL_RCC_ClockConfig+0x2ec>)
 8006104:	5cd3      	ldrb	r3, [r2, r3]
 8006106:	fa21 f303 	lsr.w	r3, r1, r3
 800610a:	4a08      	ldr	r2, [pc, #32]	; (800612c <HAL_RCC_ClockConfig+0x2f0>)
 800610c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800610e:	4b08      	ldr	r3, [pc, #32]	; (8006130 <HAL_RCC_ClockConfig+0x2f4>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4618      	mov	r0, r3
 8006114:	f7fc fffa 	bl	800310c <HAL_InitTick>
  
  return HAL_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	3778      	adds	r7, #120	; 0x78
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop
 8006124:	40021000 	.word	0x40021000
 8006128:	0800f264 	.word	0x0800f264
 800612c:	20000000 	.word	0x20000000
 8006130:	20000004 	.word	0x20000004

08006134 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006134:	b480      	push	{r7}
 8006136:	b08b      	sub	sp, #44	; 0x2c
 8006138:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800613a:	2300      	movs	r3, #0
 800613c:	61fb      	str	r3, [r7, #28]
 800613e:	2300      	movs	r3, #0
 8006140:	61bb      	str	r3, [r7, #24]
 8006142:	2300      	movs	r3, #0
 8006144:	627b      	str	r3, [r7, #36]	; 0x24
 8006146:	2300      	movs	r3, #0
 8006148:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800614a:	2300      	movs	r3, #0
 800614c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800614e:	4b29      	ldr	r3, [pc, #164]	; (80061f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	f003 030c 	and.w	r3, r3, #12
 800615a:	2b04      	cmp	r3, #4
 800615c:	d002      	beq.n	8006164 <HAL_RCC_GetSysClockFreq+0x30>
 800615e:	2b08      	cmp	r3, #8
 8006160:	d003      	beq.n	800616a <HAL_RCC_GetSysClockFreq+0x36>
 8006162:	e03c      	b.n	80061de <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006164:	4b24      	ldr	r3, [pc, #144]	; (80061f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006166:	623b      	str	r3, [r7, #32]
      break;
 8006168:	e03c      	b.n	80061e4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006170:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8006174:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006176:	68ba      	ldr	r2, [r7, #8]
 8006178:	fa92 f2a2 	rbit	r2, r2
 800617c:	607a      	str	r2, [r7, #4]
  return result;
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	fab2 f282 	clz	r2, r2
 8006184:	b2d2      	uxtb	r2, r2
 8006186:	40d3      	lsrs	r3, r2
 8006188:	4a1c      	ldr	r2, [pc, #112]	; (80061fc <HAL_RCC_GetSysClockFreq+0xc8>)
 800618a:	5cd3      	ldrb	r3, [r2, r3]
 800618c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800618e:	4b19      	ldr	r3, [pc, #100]	; (80061f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006192:	f003 030f 	and.w	r3, r3, #15
 8006196:	220f      	movs	r2, #15
 8006198:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800619a:	693a      	ldr	r2, [r7, #16]
 800619c:	fa92 f2a2 	rbit	r2, r2
 80061a0:	60fa      	str	r2, [r7, #12]
  return result;
 80061a2:	68fa      	ldr	r2, [r7, #12]
 80061a4:	fab2 f282 	clz	r2, r2
 80061a8:	b2d2      	uxtb	r2, r2
 80061aa:	40d3      	lsrs	r3, r2
 80061ac:	4a14      	ldr	r2, [pc, #80]	; (8006200 <HAL_RCC_GetSysClockFreq+0xcc>)
 80061ae:	5cd3      	ldrb	r3, [r2, r3]
 80061b0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d008      	beq.n	80061ce <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80061bc:	4a0e      	ldr	r2, [pc, #56]	; (80061f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80061be:	69bb      	ldr	r3, [r7, #24]
 80061c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	fb02 f303 	mul.w	r3, r2, r3
 80061ca:	627b      	str	r3, [r7, #36]	; 0x24
 80061cc:	e004      	b.n	80061d8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	4a0c      	ldr	r2, [pc, #48]	; (8006204 <HAL_RCC_GetSysClockFreq+0xd0>)
 80061d2:	fb02 f303 	mul.w	r3, r2, r3
 80061d6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80061d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061da:	623b      	str	r3, [r7, #32]
      break;
 80061dc:	e002      	b.n	80061e4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80061de:	4b06      	ldr	r3, [pc, #24]	; (80061f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80061e0:	623b      	str	r3, [r7, #32]
      break;
 80061e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80061e4:	6a3b      	ldr	r3, [r7, #32]
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	372c      	adds	r7, #44	; 0x2c
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr
 80061f2:	bf00      	nop
 80061f4:	40021000 	.word	0x40021000
 80061f8:	007a1200 	.word	0x007a1200
 80061fc:	0800f27c 	.word	0x0800f27c
 8006200:	0800f28c 	.word	0x0800f28c
 8006204:	003d0900 	.word	0x003d0900

08006208 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006208:	b480      	push	{r7}
 800620a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800620c:	4b03      	ldr	r3, [pc, #12]	; (800621c <HAL_RCC_GetHCLKFreq+0x14>)
 800620e:	681b      	ldr	r3, [r3, #0]
}
 8006210:	4618      	mov	r0, r3
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop
 800621c:	20000000 	.word	0x20000000

08006220 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b082      	sub	sp, #8
 8006224:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8006226:	f7ff ffef 	bl	8006208 <HAL_RCC_GetHCLKFreq>
 800622a:	4601      	mov	r1, r0
 800622c:	4b0b      	ldr	r3, [pc, #44]	; (800625c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006234:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006238:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	fa92 f2a2 	rbit	r2, r2
 8006240:	603a      	str	r2, [r7, #0]
  return result;
 8006242:	683a      	ldr	r2, [r7, #0]
 8006244:	fab2 f282 	clz	r2, r2
 8006248:	b2d2      	uxtb	r2, r2
 800624a:	40d3      	lsrs	r3, r2
 800624c:	4a04      	ldr	r2, [pc, #16]	; (8006260 <HAL_RCC_GetPCLK1Freq+0x40>)
 800624e:	5cd3      	ldrb	r3, [r2, r3]
 8006250:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8006254:	4618      	mov	r0, r3
 8006256:	3708      	adds	r7, #8
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}
 800625c:	40021000 	.word	0x40021000
 8006260:	0800f274 	.word	0x0800f274

08006264 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b082      	sub	sp, #8
 8006268:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800626a:	f7ff ffcd 	bl	8006208 <HAL_RCC_GetHCLKFreq>
 800626e:	4601      	mov	r1, r0
 8006270:	4b0b      	ldr	r3, [pc, #44]	; (80062a0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8006278:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800627c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	fa92 f2a2 	rbit	r2, r2
 8006284:	603a      	str	r2, [r7, #0]
  return result;
 8006286:	683a      	ldr	r2, [r7, #0]
 8006288:	fab2 f282 	clz	r2, r2
 800628c:	b2d2      	uxtb	r2, r2
 800628e:	40d3      	lsrs	r3, r2
 8006290:	4a04      	ldr	r2, [pc, #16]	; (80062a4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8006292:	5cd3      	ldrb	r3, [r2, r3]
 8006294:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8006298:	4618      	mov	r0, r3
 800629a:	3708      	adds	r7, #8
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}
 80062a0:	40021000 	.word	0x40021000
 80062a4:	0800f274 	.word	0x0800f274

080062a8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b083      	sub	sp, #12
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	220f      	movs	r2, #15
 80062b6:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80062b8:	4b12      	ldr	r3, [pc, #72]	; (8006304 <HAL_RCC_GetClockConfig+0x5c>)
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	f003 0203 	and.w	r2, r3, #3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80062c4:	4b0f      	ldr	r3, [pc, #60]	; (8006304 <HAL_RCC_GetClockConfig+0x5c>)
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80062d0:	4b0c      	ldr	r3, [pc, #48]	; (8006304 <HAL_RCC_GetClockConfig+0x5c>)
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80062dc:	4b09      	ldr	r3, [pc, #36]	; (8006304 <HAL_RCC_GetClockConfig+0x5c>)
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	08db      	lsrs	r3, r3, #3
 80062e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80062ea:	4b07      	ldr	r3, [pc, #28]	; (8006308 <HAL_RCC_GetClockConfig+0x60>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 0207 	and.w	r2, r3, #7
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	601a      	str	r2, [r3, #0]
}
 80062f6:	bf00      	nop
 80062f8:	370c      	adds	r7, #12
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop
 8006304:	40021000 	.word	0x40021000
 8006308:	40022000 	.word	0x40022000

0800630c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b092      	sub	sp, #72	; 0x48
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006314:	2300      	movs	r3, #0
 8006316:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8006318:	2300      	movs	r3, #0
 800631a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800631c:	2300      	movs	r3, #0
 800631e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800632a:	2b00      	cmp	r3, #0
 800632c:	f000 80d4 	beq.w	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006330:	4b4e      	ldr	r3, [pc, #312]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006332:	69db      	ldr	r3, [r3, #28]
 8006334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006338:	2b00      	cmp	r3, #0
 800633a:	d10e      	bne.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800633c:	4b4b      	ldr	r3, [pc, #300]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800633e:	69db      	ldr	r3, [r3, #28]
 8006340:	4a4a      	ldr	r2, [pc, #296]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006342:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006346:	61d3      	str	r3, [r2, #28]
 8006348:	4b48      	ldr	r3, [pc, #288]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800634a:	69db      	ldr	r3, [r3, #28]
 800634c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006350:	60bb      	str	r3, [r7, #8]
 8006352:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006354:	2301      	movs	r3, #1
 8006356:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800635a:	4b45      	ldr	r3, [pc, #276]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006362:	2b00      	cmp	r3, #0
 8006364:	d118      	bne.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006366:	4b42      	ldr	r3, [pc, #264]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a41      	ldr	r2, [pc, #260]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800636c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006370:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006372:	f7fd fcbd 	bl	8003cf0 <HAL_GetTick>
 8006376:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006378:	e008      	b.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800637a:	f7fd fcb9 	bl	8003cf0 <HAL_GetTick>
 800637e:	4602      	mov	r2, r0
 8006380:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006382:	1ad3      	subs	r3, r2, r3
 8006384:	2b64      	cmp	r3, #100	; 0x64
 8006386:	d901      	bls.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006388:	2303      	movs	r3, #3
 800638a:	e13c      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800638c:	4b38      	ldr	r3, [pc, #224]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006394:	2b00      	cmp	r3, #0
 8006396:	d0f0      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006398:	4b34      	ldr	r3, [pc, #208]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800639a:	6a1b      	ldr	r3, [r3, #32]
 800639c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80063a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	f000 8084 	beq.w	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d07c      	beq.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80063b8:	4b2c      	ldr	r3, [pc, #176]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063ba:	6a1b      	ldr	r3, [r3, #32]
 80063bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80063c6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ca:	fa93 f3a3 	rbit	r3, r3
 80063ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80063d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80063d2:	fab3 f383 	clz	r3, r3
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	461a      	mov	r2, r3
 80063da:	4b26      	ldr	r3, [pc, #152]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80063dc:	4413      	add	r3, r2
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	461a      	mov	r2, r3
 80063e2:	2301      	movs	r3, #1
 80063e4:	6013      	str	r3, [r2, #0]
 80063e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80063ea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ee:	fa93 f3a3 	rbit	r3, r3
 80063f2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80063f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80063f6:	fab3 f383 	clz	r3, r3
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	461a      	mov	r2, r3
 80063fe:	4b1d      	ldr	r3, [pc, #116]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006400:	4413      	add	r3, r2
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	461a      	mov	r2, r3
 8006406:	2300      	movs	r3, #0
 8006408:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800640a:	4a18      	ldr	r2, [pc, #96]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800640c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800640e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006412:	f003 0301 	and.w	r3, r3, #1
 8006416:	2b00      	cmp	r3, #0
 8006418:	d04b      	beq.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800641a:	f7fd fc69 	bl	8003cf0 <HAL_GetTick>
 800641e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006420:	e00a      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006422:	f7fd fc65 	bl	8003cf0 <HAL_GetTick>
 8006426:	4602      	mov	r2, r0
 8006428:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800642a:	1ad3      	subs	r3, r2, r3
 800642c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006430:	4293      	cmp	r3, r2
 8006432:	d901      	bls.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006434:	2303      	movs	r3, #3
 8006436:	e0e6      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8006438:	2302      	movs	r3, #2
 800643a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800643c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643e:	fa93 f3a3 	rbit	r3, r3
 8006442:	627b      	str	r3, [r7, #36]	; 0x24
 8006444:	2302      	movs	r3, #2
 8006446:	623b      	str	r3, [r7, #32]
 8006448:	6a3b      	ldr	r3, [r7, #32]
 800644a:	fa93 f3a3 	rbit	r3, r3
 800644e:	61fb      	str	r3, [r7, #28]
  return result;
 8006450:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006452:	fab3 f383 	clz	r3, r3
 8006456:	b2db      	uxtb	r3, r3
 8006458:	095b      	lsrs	r3, r3, #5
 800645a:	b2db      	uxtb	r3, r3
 800645c:	f043 0302 	orr.w	r3, r3, #2
 8006460:	b2db      	uxtb	r3, r3
 8006462:	2b02      	cmp	r3, #2
 8006464:	d108      	bne.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8006466:	4b01      	ldr	r3, [pc, #4]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006468:	6a1b      	ldr	r3, [r3, #32]
 800646a:	e00d      	b.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800646c:	40021000 	.word	0x40021000
 8006470:	40007000 	.word	0x40007000
 8006474:	10908100 	.word	0x10908100
 8006478:	2302      	movs	r3, #2
 800647a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	fa93 f3a3 	rbit	r3, r3
 8006482:	617b      	str	r3, [r7, #20]
 8006484:	4b62      	ldr	r3, [pc, #392]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006488:	2202      	movs	r2, #2
 800648a:	613a      	str	r2, [r7, #16]
 800648c:	693a      	ldr	r2, [r7, #16]
 800648e:	fa92 f2a2 	rbit	r2, r2
 8006492:	60fa      	str	r2, [r7, #12]
  return result;
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	fab2 f282 	clz	r2, r2
 800649a:	b2d2      	uxtb	r2, r2
 800649c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064a0:	b2d2      	uxtb	r2, r2
 80064a2:	f002 021f 	and.w	r2, r2, #31
 80064a6:	2101      	movs	r1, #1
 80064a8:	fa01 f202 	lsl.w	r2, r1, r2
 80064ac:	4013      	ands	r3, r2
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d0b7      	beq.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80064b2:	4b57      	ldr	r3, [pc, #348]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80064b4:	6a1b      	ldr	r3, [r3, #32]
 80064b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	4954      	ldr	r1, [pc, #336]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80064c0:	4313      	orrs	r3, r2
 80064c2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80064c4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d105      	bne.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064cc:	4b50      	ldr	r3, [pc, #320]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80064ce:	69db      	ldr	r3, [r3, #28]
 80064d0:	4a4f      	ldr	r2, [pc, #316]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80064d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064d6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f003 0301 	and.w	r3, r3, #1
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d008      	beq.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80064e4:	4b4a      	ldr	r3, [pc, #296]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80064e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e8:	f023 0203 	bic.w	r2, r3, #3
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	4947      	ldr	r1, [pc, #284]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80064f2:	4313      	orrs	r3, r2
 80064f4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f003 0320 	and.w	r3, r3, #32
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d008      	beq.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006502:	4b43      	ldr	r3, [pc, #268]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006506:	f023 0210 	bic.w	r2, r3, #16
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	4940      	ldr	r1, [pc, #256]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006510:	4313      	orrs	r3, r2
 8006512:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800651c:	2b00      	cmp	r3, #0
 800651e:	d008      	beq.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006520:	4b3b      	ldr	r3, [pc, #236]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006524:	f023 0220 	bic.w	r2, r3, #32
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	691b      	ldr	r3, [r3, #16]
 800652c:	4938      	ldr	r1, [pc, #224]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800652e:	4313      	orrs	r3, r2
 8006530:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800653a:	2b00      	cmp	r3, #0
 800653c:	d008      	beq.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800653e:	4b34      	ldr	r3, [pc, #208]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006542:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	695b      	ldr	r3, [r3, #20]
 800654a:	4931      	ldr	r1, [pc, #196]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800654c:	4313      	orrs	r3, r2
 800654e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006558:	2b00      	cmp	r3, #0
 800655a:	d008      	beq.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800655c:	4b2c      	ldr	r3, [pc, #176]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	69db      	ldr	r3, [r3, #28]
 8006568:	4929      	ldr	r1, [pc, #164]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800656a:	4313      	orrs	r3, r2
 800656c:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006576:	2b00      	cmp	r3, #0
 8006578:	d008      	beq.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 800657a:	4b25      	ldr	r3, [pc, #148]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800657c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800657e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	699b      	ldr	r3, [r3, #24]
 8006586:	4922      	ldr	r1, [pc, #136]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006588:	4313      	orrs	r3, r2
 800658a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006594:	2b00      	cmp	r3, #0
 8006596:	d008      	beq.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006598:	4b1d      	ldr	r3, [pc, #116]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800659a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800659c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6a1b      	ldr	r3, [r3, #32]
 80065a4:	491a      	ldr	r1, [pc, #104]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80065a6:	4313      	orrs	r3, r2
 80065a8:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d008      	beq.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80065b6:	4b16      	ldr	r3, [pc, #88]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80065b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c2:	4913      	ldr	r1, [pc, #76]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80065c4:	4313      	orrs	r3, r2
 80065c6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d008      	beq.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80065d4:	4b0e      	ldr	r3, [pc, #56]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80065d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e0:	490b      	ldr	r1, [pc, #44]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80065e2:	4313      	orrs	r3, r2
 80065e4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d008      	beq.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80065f2:	4b07      	ldr	r3, [pc, #28]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80065f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f6:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065fe:	4904      	ldr	r1, [pc, #16]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006600:	4313      	orrs	r3, r2
 8006602:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	3748      	adds	r7, #72	; 0x48
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	40021000 	.word	0x40021000

08006614 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d101      	bne.n	8006626 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	e09d      	b.n	8006762 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662a:	2b00      	cmp	r3, #0
 800662c:	d108      	bne.n	8006640 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006636:	d009      	beq.n	800664c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	61da      	str	r2, [r3, #28]
 800663e:	e005      	b.n	800664c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2200      	movs	r2, #0
 8006644:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006658:	b2db      	uxtb	r3, r3
 800665a:	2b00      	cmp	r3, #0
 800665c:	d106      	bne.n	800666c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f7fc fc3e 	bl	8002ee8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2202      	movs	r2, #2
 8006670:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006682:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800668c:	d902      	bls.n	8006694 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800668e:	2300      	movs	r3, #0
 8006690:	60fb      	str	r3, [r7, #12]
 8006692:	e002      	b.n	800669a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006694:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006698:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80066a2:	d007      	beq.n	80066b4 <HAL_SPI_Init+0xa0>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80066ac:	d002      	beq.n	80066b4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80066c4:	431a      	orrs	r2, r3
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	f003 0302 	and.w	r3, r3, #2
 80066ce:	431a      	orrs	r2, r3
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	695b      	ldr	r3, [r3, #20]
 80066d4:	f003 0301 	and.w	r3, r3, #1
 80066d8:	431a      	orrs	r2, r3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	699b      	ldr	r3, [r3, #24]
 80066de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066e2:	431a      	orrs	r2, r3
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	69db      	ldr	r3, [r3, #28]
 80066e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066ec:	431a      	orrs	r2, r3
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a1b      	ldr	r3, [r3, #32]
 80066f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066f6:	ea42 0103 	orr.w	r1, r2, r3
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066fe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	430a      	orrs	r2, r1
 8006708:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	699b      	ldr	r3, [r3, #24]
 800670e:	0c1b      	lsrs	r3, r3, #16
 8006710:	f003 0204 	and.w	r2, r3, #4
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006718:	f003 0310 	and.w	r3, r3, #16
 800671c:	431a      	orrs	r2, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006722:	f003 0308 	and.w	r3, r3, #8
 8006726:	431a      	orrs	r2, r3
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006730:	ea42 0103 	orr.w	r1, r2, r3
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	430a      	orrs	r2, r1
 8006740:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	69da      	ldr	r2, [r3, #28]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006750:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	3710      	adds	r7, #16
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}

0800676a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800676a:	b580      	push	{r7, lr}
 800676c:	b088      	sub	sp, #32
 800676e:	af00      	add	r7, sp, #0
 8006770:	60f8      	str	r0, [r7, #12]
 8006772:	60b9      	str	r1, [r7, #8]
 8006774:	603b      	str	r3, [r7, #0]
 8006776:	4613      	mov	r3, r2
 8006778:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800677a:	2300      	movs	r3, #0
 800677c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006784:	2b01      	cmp	r3, #1
 8006786:	d101      	bne.n	800678c <HAL_SPI_Transmit+0x22>
 8006788:	2302      	movs	r3, #2
 800678a:	e15f      	b.n	8006a4c <HAL_SPI_Transmit+0x2e2>
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006794:	f7fd faac 	bl	8003cf0 <HAL_GetTick>
 8006798:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800679a:	88fb      	ldrh	r3, [r7, #6]
 800679c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d002      	beq.n	80067b0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80067aa:	2302      	movs	r3, #2
 80067ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80067ae:	e148      	b.n	8006a42 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d002      	beq.n	80067bc <HAL_SPI_Transmit+0x52>
 80067b6:	88fb      	ldrh	r3, [r7, #6]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d102      	bne.n	80067c2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	77fb      	strb	r3, [r7, #31]
    goto error;
 80067c0:	e13f      	b.n	8006a42 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2203      	movs	r2, #3
 80067c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2200      	movs	r2, #0
 80067ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	68ba      	ldr	r2, [r7, #8]
 80067d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	88fa      	ldrh	r2, [r7, #6]
 80067da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	88fa      	ldrh	r2, [r7, #6]
 80067e0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2200      	movs	r2, #0
 80067e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2200      	movs	r2, #0
 80067fc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2200      	movs	r2, #0
 8006802:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800680c:	d10f      	bne.n	800682e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800681c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800682c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006838:	2b40      	cmp	r3, #64	; 0x40
 800683a:	d007      	beq.n	800684c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800684a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006854:	d94f      	bls.n	80068f6 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d002      	beq.n	8006864 <HAL_SPI_Transmit+0xfa>
 800685e:	8afb      	ldrh	r3, [r7, #22]
 8006860:	2b01      	cmp	r3, #1
 8006862:	d142      	bne.n	80068ea <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006868:	881a      	ldrh	r2, [r3, #0]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006874:	1c9a      	adds	r2, r3, #2
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800687e:	b29b      	uxth	r3, r3
 8006880:	3b01      	subs	r3, #1
 8006882:	b29a      	uxth	r2, r3
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006888:	e02f      	b.n	80068ea <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	f003 0302 	and.w	r3, r3, #2
 8006894:	2b02      	cmp	r3, #2
 8006896:	d112      	bne.n	80068be <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800689c:	881a      	ldrh	r2, [r3, #0]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a8:	1c9a      	adds	r2, r3, #2
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	3b01      	subs	r3, #1
 80068b6:	b29a      	uxth	r2, r3
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80068bc:	e015      	b.n	80068ea <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068be:	f7fd fa17 	bl	8003cf0 <HAL_GetTick>
 80068c2:	4602      	mov	r2, r0
 80068c4:	69bb      	ldr	r3, [r7, #24]
 80068c6:	1ad3      	subs	r3, r2, r3
 80068c8:	683a      	ldr	r2, [r7, #0]
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d803      	bhi.n	80068d6 <HAL_SPI_Transmit+0x16c>
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068d4:	d102      	bne.n	80068dc <HAL_SPI_Transmit+0x172>
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d106      	bne.n	80068ea <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80068dc:	2303      	movs	r3, #3
 80068de:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80068e8:	e0ab      	b.n	8006a42 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d1ca      	bne.n	800688a <HAL_SPI_Transmit+0x120>
 80068f4:	e080      	b.n	80069f8 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d002      	beq.n	8006904 <HAL_SPI_Transmit+0x19a>
 80068fe:	8afb      	ldrh	r3, [r7, #22]
 8006900:	2b01      	cmp	r3, #1
 8006902:	d174      	bne.n	80069ee <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006908:	b29b      	uxth	r3, r3
 800690a:	2b01      	cmp	r3, #1
 800690c:	d912      	bls.n	8006934 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006912:	881a      	ldrh	r2, [r3, #0]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800691e:	1c9a      	adds	r2, r3, #2
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006928:	b29b      	uxth	r3, r3
 800692a:	3b02      	subs	r3, #2
 800692c:	b29a      	uxth	r2, r3
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006932:	e05c      	b.n	80069ee <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	330c      	adds	r3, #12
 800693e:	7812      	ldrb	r2, [r2, #0]
 8006940:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006946:	1c5a      	adds	r2, r3, #1
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006950:	b29b      	uxth	r3, r3
 8006952:	3b01      	subs	r3, #1
 8006954:	b29a      	uxth	r2, r3
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800695a:	e048      	b.n	80069ee <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	f003 0302 	and.w	r3, r3, #2
 8006966:	2b02      	cmp	r3, #2
 8006968:	d12b      	bne.n	80069c2 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800696e:	b29b      	uxth	r3, r3
 8006970:	2b01      	cmp	r3, #1
 8006972:	d912      	bls.n	800699a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006978:	881a      	ldrh	r2, [r3, #0]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006984:	1c9a      	adds	r2, r3, #2
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800698e:	b29b      	uxth	r3, r3
 8006990:	3b02      	subs	r3, #2
 8006992:	b29a      	uxth	r2, r3
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006998:	e029      	b.n	80069ee <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	330c      	adds	r3, #12
 80069a4:	7812      	ldrb	r2, [r2, #0]
 80069a6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ac:	1c5a      	adds	r2, r3, #1
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	3b01      	subs	r3, #1
 80069ba:	b29a      	uxth	r2, r3
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80069c0:	e015      	b.n	80069ee <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069c2:	f7fd f995 	bl	8003cf0 <HAL_GetTick>
 80069c6:	4602      	mov	r2, r0
 80069c8:	69bb      	ldr	r3, [r7, #24]
 80069ca:	1ad3      	subs	r3, r2, r3
 80069cc:	683a      	ldr	r2, [r7, #0]
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d803      	bhi.n	80069da <HAL_SPI_Transmit+0x270>
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069d8:	d102      	bne.n	80069e0 <HAL_SPI_Transmit+0x276>
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d106      	bne.n	80069ee <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80069e0:	2303      	movs	r3, #3
 80069e2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2201      	movs	r2, #1
 80069e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80069ec:	e029      	b.n	8006a42 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d1b1      	bne.n	800695c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80069f8:	69ba      	ldr	r2, [r7, #24]
 80069fa:	6839      	ldr	r1, [r7, #0]
 80069fc:	68f8      	ldr	r0, [r7, #12]
 80069fe:	f000 fcf9 	bl	80073f4 <SPI_EndRxTxTransaction>
 8006a02:	4603      	mov	r3, r0
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d002      	beq.n	8006a0e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2220      	movs	r2, #32
 8006a0c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d10a      	bne.n	8006a2c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a16:	2300      	movs	r3, #0
 8006a18:	613b      	str	r3, [r7, #16]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	613b      	str	r3, [r7, #16]
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	613b      	str	r3, [r7, #16]
 8006a2a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d002      	beq.n	8006a3a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	77fb      	strb	r3, [r7, #31]
 8006a38:	e003      	b.n	8006a42 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006a4a:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3720      	adds	r7, #32
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b088      	sub	sp, #32
 8006a58:	af02      	add	r7, sp, #8
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	60b9      	str	r1, [r7, #8]
 8006a5e:	603b      	str	r3, [r7, #0]
 8006a60:	4613      	mov	r3, r2
 8006a62:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006a64:	2300      	movs	r3, #0
 8006a66:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d002      	beq.n	8006a7a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8006a74:	2302      	movs	r3, #2
 8006a76:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006a78:	e11a      	b.n	8006cb0 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a82:	d112      	bne.n	8006aaa <HAL_SPI_Receive+0x56>
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d10e      	bne.n	8006aaa <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2204      	movs	r2, #4
 8006a90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006a94:	88fa      	ldrh	r2, [r7, #6]
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	9300      	str	r3, [sp, #0]
 8006a9a:	4613      	mov	r3, r2
 8006a9c:	68ba      	ldr	r2, [r7, #8]
 8006a9e:	68b9      	ldr	r1, [r7, #8]
 8006aa0:	68f8      	ldr	r0, [r7, #12]
 8006aa2:	f000 f90e 	bl	8006cc2 <HAL_SPI_TransmitReceive>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	e107      	b.n	8006cba <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d101      	bne.n	8006ab8 <HAL_SPI_Receive+0x64>
 8006ab4:	2302      	movs	r3, #2
 8006ab6:	e100      	b.n	8006cba <HAL_SPI_Receive+0x266>
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2201      	movs	r2, #1
 8006abc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ac0:	f7fd f916 	bl	8003cf0 <HAL_GetTick>
 8006ac4:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d002      	beq.n	8006ad2 <HAL_SPI_Receive+0x7e>
 8006acc:	88fb      	ldrh	r3, [r7, #6]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d102      	bne.n	8006ad8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006ad6:	e0eb      	b.n	8006cb0 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2204      	movs	r2, #4
 8006adc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	68ba      	ldr	r2, [r7, #8]
 8006aea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	88fa      	ldrh	r2, [r7, #6]
 8006af0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	88fa      	ldrh	r2, [r7, #6]
 8006af8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2200      	movs	r2, #0
 8006b00:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2200      	movs	r2, #0
 8006b06:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2200      	movs	r2, #0
 8006b12:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2200      	movs	r2, #0
 8006b18:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006b22:	d908      	bls.n	8006b36 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	685a      	ldr	r2, [r3, #4]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006b32:	605a      	str	r2, [r3, #4]
 8006b34:	e007      	b.n	8006b46 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	685a      	ldr	r2, [r3, #4]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006b44:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b4e:	d10f      	bne.n	8006b70 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b5e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006b6e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b7a:	2b40      	cmp	r3, #64	; 0x40
 8006b7c:	d007      	beq.n	8006b8e <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b8c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006b96:	d86f      	bhi.n	8006c78 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006b98:	e034      	b.n	8006c04 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	f003 0301 	and.w	r3, r3, #1
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d117      	bne.n	8006bd8 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f103 020c 	add.w	r2, r3, #12
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb4:	7812      	ldrb	r2, [r2, #0]
 8006bb6:	b2d2      	uxtb	r2, r2
 8006bb8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bbe:	1c5a      	adds	r2, r3, #1
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	3b01      	subs	r3, #1
 8006bce:	b29a      	uxth	r2, r3
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006bd6:	e015      	b.n	8006c04 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006bd8:	f7fd f88a 	bl	8003cf0 <HAL_GetTick>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	1ad3      	subs	r3, r2, r3
 8006be2:	683a      	ldr	r2, [r7, #0]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d803      	bhi.n	8006bf0 <HAL_SPI_Receive+0x19c>
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bee:	d102      	bne.n	8006bf6 <HAL_SPI_Receive+0x1a2>
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d106      	bne.n	8006c04 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006c02:	e055      	b.n	8006cb0 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d1c4      	bne.n	8006b9a <HAL_SPI_Receive+0x146>
 8006c10:	e038      	b.n	8006c84 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	f003 0301 	and.w	r3, r3, #1
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d115      	bne.n	8006c4c <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	68da      	ldr	r2, [r3, #12]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2a:	b292      	uxth	r2, r2
 8006c2c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c32:	1c9a      	adds	r2, r3, #2
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	3b01      	subs	r3, #1
 8006c42:	b29a      	uxth	r2, r3
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006c4a:	e015      	b.n	8006c78 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c4c:	f7fd f850 	bl	8003cf0 <HAL_GetTick>
 8006c50:	4602      	mov	r2, r0
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	1ad3      	subs	r3, r2, r3
 8006c56:	683a      	ldr	r2, [r7, #0]
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d803      	bhi.n	8006c64 <HAL_SPI_Receive+0x210>
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c62:	d102      	bne.n	8006c6a <HAL_SPI_Receive+0x216>
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d106      	bne.n	8006c78 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2201      	movs	r2, #1
 8006c72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006c76:	e01b      	b.n	8006cb0 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d1c6      	bne.n	8006c12 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c84:	693a      	ldr	r2, [r7, #16]
 8006c86:	6839      	ldr	r1, [r7, #0]
 8006c88:	68f8      	ldr	r0, [r7, #12]
 8006c8a:	f000 fb5b 	bl	8007344 <SPI_EndRxTransaction>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d002      	beq.n	8006c9a <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2220      	movs	r2, #32
 8006c98:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d002      	beq.n	8006ca8 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	75fb      	strb	r3, [r7, #23]
 8006ca6:	e003      	b.n	8006cb0 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006cb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3718      	adds	r7, #24
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}

08006cc2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006cc2:	b580      	push	{r7, lr}
 8006cc4:	b08a      	sub	sp, #40	; 0x28
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	60f8      	str	r0, [r7, #12]
 8006cca:	60b9      	str	r1, [r7, #8]
 8006ccc:	607a      	str	r2, [r7, #4]
 8006cce:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d101      	bne.n	8006ce8 <HAL_SPI_TransmitReceive+0x26>
 8006ce4:	2302      	movs	r3, #2
 8006ce6:	e20a      	b.n	80070fe <HAL_SPI_TransmitReceive+0x43c>
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006cf0:	f7fc fffe 	bl	8003cf0 <HAL_GetTick>
 8006cf4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006cfc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006d04:	887b      	ldrh	r3, [r7, #2]
 8006d06:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006d08:	887b      	ldrh	r3, [r7, #2]
 8006d0a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006d0c:	7efb      	ldrb	r3, [r7, #27]
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d00e      	beq.n	8006d30 <HAL_SPI_TransmitReceive+0x6e>
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d18:	d106      	bne.n	8006d28 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d102      	bne.n	8006d28 <HAL_SPI_TransmitReceive+0x66>
 8006d22:	7efb      	ldrb	r3, [r7, #27]
 8006d24:	2b04      	cmp	r3, #4
 8006d26:	d003      	beq.n	8006d30 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006d28:	2302      	movs	r3, #2
 8006d2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006d2e:	e1e0      	b.n	80070f2 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d005      	beq.n	8006d42 <HAL_SPI_TransmitReceive+0x80>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d002      	beq.n	8006d42 <HAL_SPI_TransmitReceive+0x80>
 8006d3c:	887b      	ldrh	r3, [r7, #2]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d103      	bne.n	8006d4a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006d48:	e1d3      	b.n	80070f2 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	2b04      	cmp	r3, #4
 8006d54:	d003      	beq.n	8006d5e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2205      	movs	r2, #5
 8006d5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2200      	movs	r2, #0
 8006d62:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	887a      	ldrh	r2, [r7, #2]
 8006d6e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	887a      	ldrh	r2, [r7, #2]
 8006d76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	68ba      	ldr	r2, [r7, #8]
 8006d7e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	887a      	ldrh	r2, [r7, #2]
 8006d84:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	887a      	ldrh	r2, [r7, #2]
 8006d8a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2200      	movs	r2, #0
 8006d96:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006da0:	d802      	bhi.n	8006da8 <HAL_SPI_TransmitReceive+0xe6>
 8006da2:	8a3b      	ldrh	r3, [r7, #16]
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d908      	bls.n	8006dba <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	685a      	ldr	r2, [r3, #4]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006db6:	605a      	str	r2, [r3, #4]
 8006db8:	e007      	b.n	8006dca <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	685a      	ldr	r2, [r3, #4]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006dc8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dd4:	2b40      	cmp	r3, #64	; 0x40
 8006dd6:	d007      	beq.n	8006de8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006de6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006df0:	f240 8081 	bls.w	8006ef6 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d002      	beq.n	8006e02 <HAL_SPI_TransmitReceive+0x140>
 8006dfc:	8a7b      	ldrh	r3, [r7, #18]
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	d16d      	bne.n	8006ede <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e06:	881a      	ldrh	r2, [r3, #0]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e12:	1c9a      	adds	r2, r3, #2
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	3b01      	subs	r3, #1
 8006e20:	b29a      	uxth	r2, r3
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e26:	e05a      	b.n	8006ede <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	f003 0302 	and.w	r3, r3, #2
 8006e32:	2b02      	cmp	r3, #2
 8006e34:	d11b      	bne.n	8006e6e <HAL_SPI_TransmitReceive+0x1ac>
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d016      	beq.n	8006e6e <HAL_SPI_TransmitReceive+0x1ac>
 8006e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d113      	bne.n	8006e6e <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e4a:	881a      	ldrh	r2, [r3, #0]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e56:	1c9a      	adds	r2, r3, #2
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	3b01      	subs	r3, #1
 8006e64:	b29a      	uxth	r2, r3
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	f003 0301 	and.w	r3, r3, #1
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d11c      	bne.n	8006eb6 <HAL_SPI_TransmitReceive+0x1f4>
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d016      	beq.n	8006eb6 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	68da      	ldr	r2, [r3, #12]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e92:	b292      	uxth	r2, r2
 8006e94:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e9a:	1c9a      	adds	r2, r3, #2
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	3b01      	subs	r3, #1
 8006eaa:	b29a      	uxth	r2, r3
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006eb6:	f7fc ff1b 	bl	8003cf0 <HAL_GetTick>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	69fb      	ldr	r3, [r7, #28]
 8006ebe:	1ad3      	subs	r3, r2, r3
 8006ec0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d80b      	bhi.n	8006ede <HAL_SPI_TransmitReceive+0x21c>
 8006ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ecc:	d007      	beq.n	8006ede <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8006ece:	2303      	movs	r3, #3
 8006ed0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8006edc:	e109      	b.n	80070f2 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d19f      	bne.n	8006e28 <HAL_SPI_TransmitReceive+0x166>
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d199      	bne.n	8006e28 <HAL_SPI_TransmitReceive+0x166>
 8006ef4:	e0e3      	b.n	80070be <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d003      	beq.n	8006f06 <HAL_SPI_TransmitReceive+0x244>
 8006efe:	8a7b      	ldrh	r3, [r7, #18]
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	f040 80cf 	bne.w	80070a4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d912      	bls.n	8006f36 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f14:	881a      	ldrh	r2, [r3, #0]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f20:	1c9a      	adds	r2, r3, #2
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	3b02      	subs	r3, #2
 8006f2e:	b29a      	uxth	r2, r3
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006f34:	e0b6      	b.n	80070a4 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	330c      	adds	r3, #12
 8006f40:	7812      	ldrb	r2, [r2, #0]
 8006f42:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f48:	1c5a      	adds	r2, r3, #1
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	3b01      	subs	r3, #1
 8006f56:	b29a      	uxth	r2, r3
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f5c:	e0a2      	b.n	80070a4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	f003 0302 	and.w	r3, r3, #2
 8006f68:	2b02      	cmp	r3, #2
 8006f6a:	d134      	bne.n	8006fd6 <HAL_SPI_TransmitReceive+0x314>
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d02f      	beq.n	8006fd6 <HAL_SPI_TransmitReceive+0x314>
 8006f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d12c      	bne.n	8006fd6 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d912      	bls.n	8006fac <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f8a:	881a      	ldrh	r2, [r3, #0]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f96:	1c9a      	adds	r2, r3, #2
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	3b02      	subs	r3, #2
 8006fa4:	b29a      	uxth	r2, r3
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006faa:	e012      	b.n	8006fd2 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	330c      	adds	r3, #12
 8006fb6:	7812      	ldrb	r2, [r2, #0]
 8006fb8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fbe:	1c5a      	adds	r2, r3, #1
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	3b01      	subs	r3, #1
 8006fcc:	b29a      	uxth	r2, r3
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	f003 0301 	and.w	r3, r3, #1
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d148      	bne.n	8007076 <HAL_SPI_TransmitReceive+0x3b4>
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d042      	beq.n	8007076 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d923      	bls.n	8007044 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	68da      	ldr	r2, [r3, #12]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007006:	b292      	uxth	r2, r2
 8007008:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800700e:	1c9a      	adds	r2, r3, #2
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800701a:	b29b      	uxth	r3, r3
 800701c:	3b02      	subs	r3, #2
 800701e:	b29a      	uxth	r2, r3
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800702c:	b29b      	uxth	r3, r3
 800702e:	2b01      	cmp	r3, #1
 8007030:	d81f      	bhi.n	8007072 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	685a      	ldr	r2, [r3, #4]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007040:	605a      	str	r2, [r3, #4]
 8007042:	e016      	b.n	8007072 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f103 020c 	add.w	r2, r3, #12
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007050:	7812      	ldrb	r2, [r2, #0]
 8007052:	b2d2      	uxtb	r2, r2
 8007054:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800705a:	1c5a      	adds	r2, r3, #1
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007066:	b29b      	uxth	r3, r3
 8007068:	3b01      	subs	r3, #1
 800706a:	b29a      	uxth	r2, r3
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007072:	2301      	movs	r3, #1
 8007074:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007076:	f7fc fe3b 	bl	8003cf0 <HAL_GetTick>
 800707a:	4602      	mov	r2, r0
 800707c:	69fb      	ldr	r3, [r7, #28]
 800707e:	1ad3      	subs	r3, r2, r3
 8007080:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007082:	429a      	cmp	r2, r3
 8007084:	d803      	bhi.n	800708e <HAL_SPI_TransmitReceive+0x3cc>
 8007086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800708c:	d102      	bne.n	8007094 <HAL_SPI_TransmitReceive+0x3d2>
 800708e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007090:	2b00      	cmp	r3, #0
 8007092:	d107      	bne.n	80070a4 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8007094:	2303      	movs	r3, #3
 8007096:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2201      	movs	r2, #1
 800709e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80070a2:	e026      	b.n	80070f2 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	f47f af57 	bne.w	8006f5e <HAL_SPI_TransmitReceive+0x29c>
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	f47f af50 	bne.w	8006f5e <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80070be:	69fa      	ldr	r2, [r7, #28]
 80070c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80070c2:	68f8      	ldr	r0, [r7, #12]
 80070c4:	f000 f996 	bl	80073f4 <SPI_EndRxTxTransaction>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d005      	beq.n	80070da <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2220      	movs	r2, #32
 80070d8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d003      	beq.n	80070ea <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070e8:	e003      	b.n	80070f2 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2201      	movs	r2, #1
 80070ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2200      	movs	r2, #0
 80070f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80070fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3728      	adds	r7, #40	; 0x28
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
	...

08007108 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b088      	sub	sp, #32
 800710c:	af00      	add	r7, sp, #0
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	603b      	str	r3, [r7, #0]
 8007114:	4613      	mov	r3, r2
 8007116:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007118:	f7fc fdea 	bl	8003cf0 <HAL_GetTick>
 800711c:	4602      	mov	r2, r0
 800711e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007120:	1a9b      	subs	r3, r3, r2
 8007122:	683a      	ldr	r2, [r7, #0]
 8007124:	4413      	add	r3, r2
 8007126:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007128:	f7fc fde2 	bl	8003cf0 <HAL_GetTick>
 800712c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800712e:	4b39      	ldr	r3, [pc, #228]	; (8007214 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	015b      	lsls	r3, r3, #5
 8007134:	0d1b      	lsrs	r3, r3, #20
 8007136:	69fa      	ldr	r2, [r7, #28]
 8007138:	fb02 f303 	mul.w	r3, r2, r3
 800713c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800713e:	e054      	b.n	80071ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007146:	d050      	beq.n	80071ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007148:	f7fc fdd2 	bl	8003cf0 <HAL_GetTick>
 800714c:	4602      	mov	r2, r0
 800714e:	69bb      	ldr	r3, [r7, #24]
 8007150:	1ad3      	subs	r3, r2, r3
 8007152:	69fa      	ldr	r2, [r7, #28]
 8007154:	429a      	cmp	r2, r3
 8007156:	d902      	bls.n	800715e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007158:	69fb      	ldr	r3, [r7, #28]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d13d      	bne.n	80071da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	685a      	ldr	r2, [r3, #4]
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800716c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007176:	d111      	bne.n	800719c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007180:	d004      	beq.n	800718c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800718a:	d107      	bne.n	800719c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800719a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071a4:	d10f      	bne.n	80071c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80071b4:	601a      	str	r2, [r3, #0]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80071c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2201      	movs	r2, #1
 80071ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2200      	movs	r2, #0
 80071d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80071d6:	2303      	movs	r3, #3
 80071d8:	e017      	b.n	800720a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d101      	bne.n	80071e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80071e0:	2300      	movs	r3, #0
 80071e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	3b01      	subs	r3, #1
 80071e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	689a      	ldr	r2, [r3, #8]
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	4013      	ands	r3, r2
 80071f4:	68ba      	ldr	r2, [r7, #8]
 80071f6:	429a      	cmp	r2, r3
 80071f8:	bf0c      	ite	eq
 80071fa:	2301      	moveq	r3, #1
 80071fc:	2300      	movne	r3, #0
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	461a      	mov	r2, r3
 8007202:	79fb      	ldrb	r3, [r7, #7]
 8007204:	429a      	cmp	r2, r3
 8007206:	d19b      	bne.n	8007140 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007208:	2300      	movs	r3, #0
}
 800720a:	4618      	mov	r0, r3
 800720c:	3720      	adds	r7, #32
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
 8007212:	bf00      	nop
 8007214:	20000000 	.word	0x20000000

08007218 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b08a      	sub	sp, #40	; 0x28
 800721c:	af00      	add	r7, sp, #0
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	607a      	str	r2, [r7, #4]
 8007224:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007226:	2300      	movs	r3, #0
 8007228:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800722a:	f7fc fd61 	bl	8003cf0 <HAL_GetTick>
 800722e:	4602      	mov	r2, r0
 8007230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007232:	1a9b      	subs	r3, r3, r2
 8007234:	683a      	ldr	r2, [r7, #0]
 8007236:	4413      	add	r3, r2
 8007238:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800723a:	f7fc fd59 	bl	8003cf0 <HAL_GetTick>
 800723e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	330c      	adds	r3, #12
 8007246:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007248:	4b3d      	ldr	r3, [pc, #244]	; (8007340 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	4613      	mov	r3, r2
 800724e:	009b      	lsls	r3, r3, #2
 8007250:	4413      	add	r3, r2
 8007252:	00da      	lsls	r2, r3, #3
 8007254:	1ad3      	subs	r3, r2, r3
 8007256:	0d1b      	lsrs	r3, r3, #20
 8007258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800725a:	fb02 f303 	mul.w	r3, r2, r3
 800725e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007260:	e060      	b.n	8007324 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007268:	d107      	bne.n	800727a <SPI_WaitFifoStateUntilTimeout+0x62>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d104      	bne.n	800727a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007270:	69fb      	ldr	r3, [r7, #28]
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	b2db      	uxtb	r3, r3
 8007276:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007278:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007280:	d050      	beq.n	8007324 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007282:	f7fc fd35 	bl	8003cf0 <HAL_GetTick>
 8007286:	4602      	mov	r2, r0
 8007288:	6a3b      	ldr	r3, [r7, #32]
 800728a:	1ad3      	subs	r3, r2, r3
 800728c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800728e:	429a      	cmp	r2, r3
 8007290:	d902      	bls.n	8007298 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007294:	2b00      	cmp	r3, #0
 8007296:	d13d      	bne.n	8007314 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	685a      	ldr	r2, [r3, #4]
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80072a6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072b0:	d111      	bne.n	80072d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072ba:	d004      	beq.n	80072c6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072c4:	d107      	bne.n	80072d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072d4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072de:	d10f      	bne.n	8007300 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80072ee:	601a      	str	r2, [r3, #0]
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80072fe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2201      	movs	r2, #1
 8007304:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2200      	movs	r2, #0
 800730c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007310:	2303      	movs	r3, #3
 8007312:	e010      	b.n	8007336 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007314:	69bb      	ldr	r3, [r7, #24]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d101      	bne.n	800731e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800731a:	2300      	movs	r3, #0
 800731c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800731e:	69bb      	ldr	r3, [r7, #24]
 8007320:	3b01      	subs	r3, #1
 8007322:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	689a      	ldr	r2, [r3, #8]
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	4013      	ands	r3, r2
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	429a      	cmp	r2, r3
 8007332:	d196      	bne.n	8007262 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007334:	2300      	movs	r3, #0
}
 8007336:	4618      	mov	r0, r3
 8007338:	3728      	adds	r7, #40	; 0x28
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
 800733e:	bf00      	nop
 8007340:	20000000 	.word	0x20000000

08007344 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b086      	sub	sp, #24
 8007348:	af02      	add	r7, sp, #8
 800734a:	60f8      	str	r0, [r7, #12]
 800734c:	60b9      	str	r1, [r7, #8]
 800734e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007358:	d111      	bne.n	800737e <SPI_EndRxTransaction+0x3a>
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007362:	d004      	beq.n	800736e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800736c:	d107      	bne.n	800737e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	681a      	ldr	r2, [r3, #0]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800737c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	9300      	str	r3, [sp, #0]
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	2200      	movs	r2, #0
 8007386:	2180      	movs	r1, #128	; 0x80
 8007388:	68f8      	ldr	r0, [r7, #12]
 800738a:	f7ff febd 	bl	8007108 <SPI_WaitFlagStateUntilTimeout>
 800738e:	4603      	mov	r3, r0
 8007390:	2b00      	cmp	r3, #0
 8007392:	d007      	beq.n	80073a4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007398:	f043 0220 	orr.w	r2, r3, #32
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80073a0:	2303      	movs	r3, #3
 80073a2:	e023      	b.n	80073ec <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073ac:	d11d      	bne.n	80073ea <SPI_EndRxTransaction+0xa6>
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073b6:	d004      	beq.n	80073c2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073c0:	d113      	bne.n	80073ea <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	9300      	str	r3, [sp, #0]
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	2200      	movs	r2, #0
 80073ca:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80073ce:	68f8      	ldr	r0, [r7, #12]
 80073d0:	f7ff ff22 	bl	8007218 <SPI_WaitFifoStateUntilTimeout>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d007      	beq.n	80073ea <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073de:	f043 0220 	orr.w	r2, r3, #32
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80073e6:	2303      	movs	r3, #3
 80073e8:	e000      	b.n	80073ec <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80073ea:	2300      	movs	r3, #0
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3710      	adds	r7, #16
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b086      	sub	sp, #24
 80073f8:	af02      	add	r7, sp, #8
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	9300      	str	r3, [sp, #0]
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	2200      	movs	r2, #0
 8007408:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800740c:	68f8      	ldr	r0, [r7, #12]
 800740e:	f7ff ff03 	bl	8007218 <SPI_WaitFifoStateUntilTimeout>
 8007412:	4603      	mov	r3, r0
 8007414:	2b00      	cmp	r3, #0
 8007416:	d007      	beq.n	8007428 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800741c:	f043 0220 	orr.w	r2, r3, #32
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007424:	2303      	movs	r3, #3
 8007426:	e027      	b.n	8007478 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	9300      	str	r3, [sp, #0]
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	2200      	movs	r2, #0
 8007430:	2180      	movs	r1, #128	; 0x80
 8007432:	68f8      	ldr	r0, [r7, #12]
 8007434:	f7ff fe68 	bl	8007108 <SPI_WaitFlagStateUntilTimeout>
 8007438:	4603      	mov	r3, r0
 800743a:	2b00      	cmp	r3, #0
 800743c:	d007      	beq.n	800744e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007442:	f043 0220 	orr.w	r2, r3, #32
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800744a:	2303      	movs	r3, #3
 800744c:	e014      	b.n	8007478 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	9300      	str	r3, [sp, #0]
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	2200      	movs	r2, #0
 8007456:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800745a:	68f8      	ldr	r0, [r7, #12]
 800745c:	f7ff fedc 	bl	8007218 <SPI_WaitFifoStateUntilTimeout>
 8007460:	4603      	mov	r3, r0
 8007462:	2b00      	cmp	r3, #0
 8007464:	d007      	beq.n	8007476 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800746a:	f043 0220 	orr.w	r2, r3, #32
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007472:	2303      	movs	r3, #3
 8007474:	e000      	b.n	8007478 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007476:	2300      	movs	r3, #0
}
 8007478:	4618      	mov	r0, r3
 800747a:	3710      	adds	r7, #16
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d101      	bne.n	8007492 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800748e:	2301      	movs	r3, #1
 8007490:	e049      	b.n	8007526 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007498:	b2db      	uxtb	r3, r3
 800749a:	2b00      	cmp	r3, #0
 800749c:	d106      	bne.n	80074ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f7fb fd62 	bl	8002f70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2202      	movs	r2, #2
 80074b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	3304      	adds	r3, #4
 80074bc:	4619      	mov	r1, r3
 80074be:	4610      	mov	r0, r2
 80074c0:	f000 fa9a 	bl	80079f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2201      	movs	r2, #1
 80074c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2201      	movs	r2, #1
 80074d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2201      	movs	r2, #1
 80074d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2201      	movs	r2, #1
 80074f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2201      	movs	r2, #1
 8007508:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2201      	movs	r2, #1
 8007510:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2201      	movs	r2, #1
 8007518:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2201      	movs	r2, #1
 8007520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007524:	2300      	movs	r3, #0
}
 8007526:	4618      	mov	r0, r3
 8007528:	3708      	adds	r7, #8
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}
	...

08007530 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007530:	b480      	push	{r7}
 8007532:	b085      	sub	sp, #20
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800753e:	b2db      	uxtb	r3, r3
 8007540:	2b01      	cmp	r3, #1
 8007542:	d001      	beq.n	8007548 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	e03b      	b.n	80075c0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2202      	movs	r2, #2
 800754c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	68da      	ldr	r2, [r3, #12]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f042 0201 	orr.w	r2, r2, #1
 800755e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a19      	ldr	r2, [pc, #100]	; (80075cc <HAL_TIM_Base_Start_IT+0x9c>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d009      	beq.n	800757e <HAL_TIM_Base_Start_IT+0x4e>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007572:	d004      	beq.n	800757e <HAL_TIM_Base_Start_IT+0x4e>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a15      	ldr	r2, [pc, #84]	; (80075d0 <HAL_TIM_Base_Start_IT+0xa0>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d115      	bne.n	80075aa <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	689a      	ldr	r2, [r3, #8]
 8007584:	4b13      	ldr	r3, [pc, #76]	; (80075d4 <HAL_TIM_Base_Start_IT+0xa4>)
 8007586:	4013      	ands	r3, r2
 8007588:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2b06      	cmp	r3, #6
 800758e:	d015      	beq.n	80075bc <HAL_TIM_Base_Start_IT+0x8c>
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007596:	d011      	beq.n	80075bc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f042 0201 	orr.w	r2, r2, #1
 80075a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075a8:	e008      	b.n	80075bc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f042 0201 	orr.w	r2, r2, #1
 80075b8:	601a      	str	r2, [r3, #0]
 80075ba:	e000      	b.n	80075be <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075bc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80075be:	2300      	movs	r3, #0
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3714      	adds	r7, #20
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr
 80075cc:	40012c00 	.word	0x40012c00
 80075d0:	40014000 	.word	0x40014000
 80075d4:	00010007 	.word	0x00010007

080075d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b082      	sub	sp, #8
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	691b      	ldr	r3, [r3, #16]
 80075e6:	f003 0302 	and.w	r3, r3, #2
 80075ea:	2b02      	cmp	r3, #2
 80075ec:	d122      	bne.n	8007634 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	68db      	ldr	r3, [r3, #12]
 80075f4:	f003 0302 	and.w	r3, r3, #2
 80075f8:	2b02      	cmp	r3, #2
 80075fa:	d11b      	bne.n	8007634 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f06f 0202 	mvn.w	r2, #2
 8007604:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2201      	movs	r2, #1
 800760a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	699b      	ldr	r3, [r3, #24]
 8007612:	f003 0303 	and.w	r3, r3, #3
 8007616:	2b00      	cmp	r3, #0
 8007618:	d003      	beq.n	8007622 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 f9ce 	bl	80079bc <HAL_TIM_IC_CaptureCallback>
 8007620:	e005      	b.n	800762e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 f9c0 	bl	80079a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f000 f9d1 	bl	80079d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	691b      	ldr	r3, [r3, #16]
 800763a:	f003 0304 	and.w	r3, r3, #4
 800763e:	2b04      	cmp	r3, #4
 8007640:	d122      	bne.n	8007688 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	68db      	ldr	r3, [r3, #12]
 8007648:	f003 0304 	and.w	r3, r3, #4
 800764c:	2b04      	cmp	r3, #4
 800764e:	d11b      	bne.n	8007688 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f06f 0204 	mvn.w	r2, #4
 8007658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2202      	movs	r2, #2
 800765e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	699b      	ldr	r3, [r3, #24]
 8007666:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800766a:	2b00      	cmp	r3, #0
 800766c:	d003      	beq.n	8007676 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 f9a4 	bl	80079bc <HAL_TIM_IC_CaptureCallback>
 8007674:	e005      	b.n	8007682 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 f996 	bl	80079a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 f9a7 	bl	80079d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2200      	movs	r2, #0
 8007686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	691b      	ldr	r3, [r3, #16]
 800768e:	f003 0308 	and.w	r3, r3, #8
 8007692:	2b08      	cmp	r3, #8
 8007694:	d122      	bne.n	80076dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	68db      	ldr	r3, [r3, #12]
 800769c:	f003 0308 	and.w	r3, r3, #8
 80076a0:	2b08      	cmp	r3, #8
 80076a2:	d11b      	bne.n	80076dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f06f 0208 	mvn.w	r2, #8
 80076ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2204      	movs	r2, #4
 80076b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	69db      	ldr	r3, [r3, #28]
 80076ba:	f003 0303 	and.w	r3, r3, #3
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d003      	beq.n	80076ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 f97a 	bl	80079bc <HAL_TIM_IC_CaptureCallback>
 80076c8:	e005      	b.n	80076d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 f96c 	bl	80079a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 f97d 	bl	80079d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2200      	movs	r2, #0
 80076da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	691b      	ldr	r3, [r3, #16]
 80076e2:	f003 0310 	and.w	r3, r3, #16
 80076e6:	2b10      	cmp	r3, #16
 80076e8:	d122      	bne.n	8007730 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	68db      	ldr	r3, [r3, #12]
 80076f0:	f003 0310 	and.w	r3, r3, #16
 80076f4:	2b10      	cmp	r3, #16
 80076f6:	d11b      	bne.n	8007730 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f06f 0210 	mvn.w	r2, #16
 8007700:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2208      	movs	r2, #8
 8007706:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	69db      	ldr	r3, [r3, #28]
 800770e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007712:	2b00      	cmp	r3, #0
 8007714:	d003      	beq.n	800771e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 f950 	bl	80079bc <HAL_TIM_IC_CaptureCallback>
 800771c:	e005      	b.n	800772a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 f942 	bl	80079a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 f953 	bl	80079d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	691b      	ldr	r3, [r3, #16]
 8007736:	f003 0301 	and.w	r3, r3, #1
 800773a:	2b01      	cmp	r3, #1
 800773c:	d10e      	bne.n	800775c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	68db      	ldr	r3, [r3, #12]
 8007744:	f003 0301 	and.w	r3, r3, #1
 8007748:	2b01      	cmp	r3, #1
 800774a:	d107      	bne.n	800775c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f06f 0201 	mvn.w	r2, #1
 8007754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f7fb fb4a 	bl	8002df0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	691b      	ldr	r3, [r3, #16]
 8007762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007766:	2b80      	cmp	r3, #128	; 0x80
 8007768:	d10e      	bne.n	8007788 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007774:	2b80      	cmp	r3, #128	; 0x80
 8007776:	d107      	bne.n	8007788 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 fab0 	bl	8007ce8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	691b      	ldr	r3, [r3, #16]
 800778e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007792:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007796:	d10e      	bne.n	80077b6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077a2:	2b80      	cmp	r3, #128	; 0x80
 80077a4:	d107      	bne.n	80077b6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80077ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f000 faa3 	bl	8007cfc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	691b      	ldr	r3, [r3, #16]
 80077bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077c0:	2b40      	cmp	r3, #64	; 0x40
 80077c2:	d10e      	bne.n	80077e2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	68db      	ldr	r3, [r3, #12]
 80077ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077ce:	2b40      	cmp	r3, #64	; 0x40
 80077d0:	d107      	bne.n	80077e2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80077da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 f901 	bl	80079e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	691b      	ldr	r3, [r3, #16]
 80077e8:	f003 0320 	and.w	r3, r3, #32
 80077ec:	2b20      	cmp	r3, #32
 80077ee:	d10e      	bne.n	800780e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	68db      	ldr	r3, [r3, #12]
 80077f6:	f003 0320 	and.w	r3, r3, #32
 80077fa:	2b20      	cmp	r3, #32
 80077fc:	d107      	bne.n	800780e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f06f 0220 	mvn.w	r2, #32
 8007806:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 fa63 	bl	8007cd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800780e:	bf00      	nop
 8007810:	3708      	adds	r7, #8
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}

08007816 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007816:	b580      	push	{r7, lr}
 8007818:	b084      	sub	sp, #16
 800781a:	af00      	add	r7, sp, #0
 800781c:	6078      	str	r0, [r7, #4]
 800781e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007820:	2300      	movs	r3, #0
 8007822:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800782a:	2b01      	cmp	r3, #1
 800782c:	d101      	bne.n	8007832 <HAL_TIM_ConfigClockSource+0x1c>
 800782e:	2302      	movs	r3, #2
 8007830:	e0b6      	b.n	80079a0 <HAL_TIM_ConfigClockSource+0x18a>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2201      	movs	r2, #1
 8007836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2202      	movs	r2, #2
 800783e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007850:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007854:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800785c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	68ba      	ldr	r2, [r7, #8]
 8007864:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800786e:	d03e      	beq.n	80078ee <HAL_TIM_ConfigClockSource+0xd8>
 8007870:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007874:	f200 8087 	bhi.w	8007986 <HAL_TIM_ConfigClockSource+0x170>
 8007878:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800787c:	f000 8086 	beq.w	800798c <HAL_TIM_ConfigClockSource+0x176>
 8007880:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007884:	d87f      	bhi.n	8007986 <HAL_TIM_ConfigClockSource+0x170>
 8007886:	2b70      	cmp	r3, #112	; 0x70
 8007888:	d01a      	beq.n	80078c0 <HAL_TIM_ConfigClockSource+0xaa>
 800788a:	2b70      	cmp	r3, #112	; 0x70
 800788c:	d87b      	bhi.n	8007986 <HAL_TIM_ConfigClockSource+0x170>
 800788e:	2b60      	cmp	r3, #96	; 0x60
 8007890:	d050      	beq.n	8007934 <HAL_TIM_ConfigClockSource+0x11e>
 8007892:	2b60      	cmp	r3, #96	; 0x60
 8007894:	d877      	bhi.n	8007986 <HAL_TIM_ConfigClockSource+0x170>
 8007896:	2b50      	cmp	r3, #80	; 0x50
 8007898:	d03c      	beq.n	8007914 <HAL_TIM_ConfigClockSource+0xfe>
 800789a:	2b50      	cmp	r3, #80	; 0x50
 800789c:	d873      	bhi.n	8007986 <HAL_TIM_ConfigClockSource+0x170>
 800789e:	2b40      	cmp	r3, #64	; 0x40
 80078a0:	d058      	beq.n	8007954 <HAL_TIM_ConfigClockSource+0x13e>
 80078a2:	2b40      	cmp	r3, #64	; 0x40
 80078a4:	d86f      	bhi.n	8007986 <HAL_TIM_ConfigClockSource+0x170>
 80078a6:	2b30      	cmp	r3, #48	; 0x30
 80078a8:	d064      	beq.n	8007974 <HAL_TIM_ConfigClockSource+0x15e>
 80078aa:	2b30      	cmp	r3, #48	; 0x30
 80078ac:	d86b      	bhi.n	8007986 <HAL_TIM_ConfigClockSource+0x170>
 80078ae:	2b20      	cmp	r3, #32
 80078b0:	d060      	beq.n	8007974 <HAL_TIM_ConfigClockSource+0x15e>
 80078b2:	2b20      	cmp	r3, #32
 80078b4:	d867      	bhi.n	8007986 <HAL_TIM_ConfigClockSource+0x170>
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d05c      	beq.n	8007974 <HAL_TIM_ConfigClockSource+0x15e>
 80078ba:	2b10      	cmp	r3, #16
 80078bc:	d05a      	beq.n	8007974 <HAL_TIM_ConfigClockSource+0x15e>
 80078be:	e062      	b.n	8007986 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80078d0:	f000 f97a 	bl	8007bc8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80078e2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	68ba      	ldr	r2, [r7, #8]
 80078ea:	609a      	str	r2, [r3, #8]
      break;
 80078ec:	e04f      	b.n	800798e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80078fe:	f000 f963 	bl	8007bc8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	689a      	ldr	r2, [r3, #8]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007910:	609a      	str	r2, [r3, #8]
      break;
 8007912:	e03c      	b.n	800798e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007920:	461a      	mov	r2, r3
 8007922:	f000 f8d7 	bl	8007ad4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	2150      	movs	r1, #80	; 0x50
 800792c:	4618      	mov	r0, r3
 800792e:	f000 f930 	bl	8007b92 <TIM_ITRx_SetConfig>
      break;
 8007932:	e02c      	b.n	800798e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007940:	461a      	mov	r2, r3
 8007942:	f000 f8f6 	bl	8007b32 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	2160      	movs	r1, #96	; 0x60
 800794c:	4618      	mov	r0, r3
 800794e:	f000 f920 	bl	8007b92 <TIM_ITRx_SetConfig>
      break;
 8007952:	e01c      	b.n	800798e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007960:	461a      	mov	r2, r3
 8007962:	f000 f8b7 	bl	8007ad4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	2140      	movs	r1, #64	; 0x40
 800796c:	4618      	mov	r0, r3
 800796e:	f000 f910 	bl	8007b92 <TIM_ITRx_SetConfig>
      break;
 8007972:	e00c      	b.n	800798e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4619      	mov	r1, r3
 800797e:	4610      	mov	r0, r2
 8007980:	f000 f907 	bl	8007b92 <TIM_ITRx_SetConfig>
      break;
 8007984:	e003      	b.n	800798e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	73fb      	strb	r3, [r7, #15]
      break;
 800798a:	e000      	b.n	800798e <HAL_TIM_ConfigClockSource+0x178>
      break;
 800798c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2201      	movs	r2, #1
 8007992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800799e:	7bfb      	ldrb	r3, [r7, #15]
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3710      	adds	r7, #16
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b083      	sub	sp, #12
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80079b0:	bf00      	nop
 80079b2:	370c      	adds	r7, #12
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80079bc:	b480      	push	{r7}
 80079be:	b083      	sub	sp, #12
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80079c4:	bf00      	nop
 80079c6:	370c      	adds	r7, #12
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr

080079d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b083      	sub	sp, #12
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80079d8:	bf00      	nop
 80079da:	370c      	adds	r7, #12
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr

080079e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b083      	sub	sp, #12
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80079ec:	bf00      	nop
 80079ee:	370c      	adds	r7, #12
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr

080079f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b085      	sub	sp, #20
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	4a2e      	ldr	r2, [pc, #184]	; (8007ac4 <TIM_Base_SetConfig+0xcc>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d003      	beq.n	8007a18 <TIM_Base_SetConfig+0x20>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a16:	d108      	bne.n	8007a2a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	68fa      	ldr	r2, [r7, #12]
 8007a26:	4313      	orrs	r3, r2
 8007a28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	4a25      	ldr	r2, [pc, #148]	; (8007ac4 <TIM_Base_SetConfig+0xcc>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d00f      	beq.n	8007a52 <TIM_Base_SetConfig+0x5a>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a38:	d00b      	beq.n	8007a52 <TIM_Base_SetConfig+0x5a>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	4a22      	ldr	r2, [pc, #136]	; (8007ac8 <TIM_Base_SetConfig+0xd0>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d007      	beq.n	8007a52 <TIM_Base_SetConfig+0x5a>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	4a21      	ldr	r2, [pc, #132]	; (8007acc <TIM_Base_SetConfig+0xd4>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d003      	beq.n	8007a52 <TIM_Base_SetConfig+0x5a>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	4a20      	ldr	r2, [pc, #128]	; (8007ad0 <TIM_Base_SetConfig+0xd8>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d108      	bne.n	8007a64 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	68db      	ldr	r3, [r3, #12]
 8007a5e:	68fa      	ldr	r2, [r7, #12]
 8007a60:	4313      	orrs	r3, r2
 8007a62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	695b      	ldr	r3, [r3, #20]
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	68fa      	ldr	r2, [r7, #12]
 8007a76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	689a      	ldr	r2, [r3, #8]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	4a0e      	ldr	r2, [pc, #56]	; (8007ac4 <TIM_Base_SetConfig+0xcc>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d00b      	beq.n	8007aa8 <TIM_Base_SetConfig+0xb0>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	4a0d      	ldr	r2, [pc, #52]	; (8007ac8 <TIM_Base_SetConfig+0xd0>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d007      	beq.n	8007aa8 <TIM_Base_SetConfig+0xb0>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	4a0c      	ldr	r2, [pc, #48]	; (8007acc <TIM_Base_SetConfig+0xd4>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d003      	beq.n	8007aa8 <TIM_Base_SetConfig+0xb0>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	4a0b      	ldr	r2, [pc, #44]	; (8007ad0 <TIM_Base_SetConfig+0xd8>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d103      	bne.n	8007ab0 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	691a      	ldr	r2, [r3, #16]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	615a      	str	r2, [r3, #20]
}
 8007ab6:	bf00      	nop
 8007ab8:	3714      	adds	r7, #20
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr
 8007ac2:	bf00      	nop
 8007ac4:	40012c00 	.word	0x40012c00
 8007ac8:	40014000 	.word	0x40014000
 8007acc:	40014400 	.word	0x40014400
 8007ad0:	40014800 	.word	0x40014800

08007ad4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b087      	sub	sp, #28
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	6a1b      	ldr	r3, [r3, #32]
 8007ae4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	6a1b      	ldr	r3, [r3, #32]
 8007aea:	f023 0201 	bic.w	r2, r3, #1
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	699b      	ldr	r3, [r3, #24]
 8007af6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007afe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	011b      	lsls	r3, r3, #4
 8007b04:	693a      	ldr	r2, [r7, #16]
 8007b06:	4313      	orrs	r3, r2
 8007b08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	f023 030a 	bic.w	r3, r3, #10
 8007b10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b12:	697a      	ldr	r2, [r7, #20]
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	4313      	orrs	r3, r2
 8007b18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	693a      	ldr	r2, [r7, #16]
 8007b1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	697a      	ldr	r2, [r7, #20]
 8007b24:	621a      	str	r2, [r3, #32]
}
 8007b26:	bf00      	nop
 8007b28:	371c      	adds	r7, #28
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr

08007b32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b32:	b480      	push	{r7}
 8007b34:	b087      	sub	sp, #28
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	60f8      	str	r0, [r7, #12]
 8007b3a:	60b9      	str	r1, [r7, #8]
 8007b3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	6a1b      	ldr	r3, [r3, #32]
 8007b42:	f023 0210 	bic.w	r2, r3, #16
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	699b      	ldr	r3, [r3, #24]
 8007b4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	6a1b      	ldr	r3, [r3, #32]
 8007b54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	031b      	lsls	r3, r3, #12
 8007b62:	697a      	ldr	r2, [r7, #20]
 8007b64:	4313      	orrs	r3, r2
 8007b66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b6e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	011b      	lsls	r3, r3, #4
 8007b74:	693a      	ldr	r2, [r7, #16]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	697a      	ldr	r2, [r7, #20]
 8007b7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	693a      	ldr	r2, [r7, #16]
 8007b84:	621a      	str	r2, [r3, #32]
}
 8007b86:	bf00      	nop
 8007b88:	371c      	adds	r7, #28
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr

08007b92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007b92:	b480      	push	{r7}
 8007b94:	b085      	sub	sp, #20
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	6078      	str	r0, [r7, #4]
 8007b9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ba8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007baa:	683a      	ldr	r2, [r7, #0]
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	f043 0307 	orr.w	r3, r3, #7
 8007bb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	68fa      	ldr	r2, [r7, #12]
 8007bba:	609a      	str	r2, [r3, #8]
}
 8007bbc:	bf00      	nop
 8007bbe:	3714      	adds	r7, #20
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr

08007bc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b087      	sub	sp, #28
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	60f8      	str	r0, [r7, #12]
 8007bd0:	60b9      	str	r1, [r7, #8]
 8007bd2:	607a      	str	r2, [r7, #4]
 8007bd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	689b      	ldr	r3, [r3, #8]
 8007bda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007be2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	021a      	lsls	r2, r3, #8
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	431a      	orrs	r2, r3
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	697a      	ldr	r2, [r7, #20]
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	697a      	ldr	r2, [r7, #20]
 8007bfa:	609a      	str	r2, [r3, #8]
}
 8007bfc:	bf00      	nop
 8007bfe:	371c      	adds	r7, #28
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b085      	sub	sp, #20
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d101      	bne.n	8007c20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c1c:	2302      	movs	r3, #2
 8007c1e:	e04f      	b.n	8007cc0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2201      	movs	r2, #1
 8007c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2202      	movs	r2, #2
 8007c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a21      	ldr	r2, [pc, #132]	; (8007ccc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d108      	bne.n	8007c5c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007c50:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	68fa      	ldr	r2, [r7, #12]
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	68fa      	ldr	r2, [r7, #12]
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	68fa      	ldr	r2, [r7, #12]
 8007c74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a14      	ldr	r2, [pc, #80]	; (8007ccc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d009      	beq.n	8007c94 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c88:	d004      	beq.n	8007c94 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a10      	ldr	r2, [pc, #64]	; (8007cd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d10c      	bne.n	8007cae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c9a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	689b      	ldr	r3, [r3, #8]
 8007ca0:	68ba      	ldr	r2, [r7, #8]
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	68ba      	ldr	r2, [r7, #8]
 8007cac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007cbe:	2300      	movs	r3, #0
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3714      	adds	r7, #20
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr
 8007ccc:	40012c00 	.word	0x40012c00
 8007cd0:	40014000 	.word	0x40014000

08007cd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b083      	sub	sp, #12
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007cdc:	bf00      	nop
 8007cde:	370c      	adds	r7, #12
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr

08007ce8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b083      	sub	sp, #12
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007cf0:	bf00      	nop
 8007cf2:	370c      	adds	r7, #12
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr

08007cfc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b083      	sub	sp, #12
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007d04:	bf00      	nop
 8007d06:	370c      	adds	r7, #12
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0e:	4770      	bx	lr

08007d10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b082      	sub	sp, #8
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d101      	bne.n	8007d22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	e040      	b.n	8007da4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d106      	bne.n	8007d38 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f7fb f950 	bl	8002fd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2224      	movs	r2, #36	; 0x24
 8007d3c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	681a      	ldr	r2, [r3, #0]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f022 0201 	bic.w	r2, r2, #1
 8007d4c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 f980 	bl	8008054 <UART_SetConfig>
 8007d54:	4603      	mov	r3, r0
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d101      	bne.n	8007d5e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	e022      	b.n	8007da4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d002      	beq.n	8007d6c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 faaa 	bl	80082c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	685a      	ldr	r2, [r3, #4]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007d7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	689a      	ldr	r2, [r3, #8]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007d8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f042 0201 	orr.w	r2, r2, #1
 8007d9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 fb31 	bl	8008404 <UART_CheckIdleState>
 8007da2:	4603      	mov	r3, r0
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3708      	adds	r7, #8
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}

08007dac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b08a      	sub	sp, #40	; 0x28
 8007db0:	af02      	add	r7, sp, #8
 8007db2:	60f8      	str	r0, [r7, #12]
 8007db4:	60b9      	str	r1, [r7, #8]
 8007db6:	603b      	str	r3, [r7, #0]
 8007db8:	4613      	mov	r3, r2
 8007dba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dc0:	2b20      	cmp	r3, #32
 8007dc2:	d178      	bne.n	8007eb6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d002      	beq.n	8007dd0 <HAL_UART_Transmit+0x24>
 8007dca:	88fb      	ldrh	r3, [r7, #6]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d101      	bne.n	8007dd4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	e071      	b.n	8007eb8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2221      	movs	r2, #33	; 0x21
 8007de0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007de2:	f7fb ff85 	bl	8003cf0 <HAL_GetTick>
 8007de6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	88fa      	ldrh	r2, [r7, #6]
 8007dec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	88fa      	ldrh	r2, [r7, #6]
 8007df4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e00:	d108      	bne.n	8007e14 <HAL_UART_Transmit+0x68>
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	691b      	ldr	r3, [r3, #16]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d104      	bne.n	8007e14 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	61bb      	str	r3, [r7, #24]
 8007e12:	e003      	b.n	8007e1c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007e1c:	e030      	b.n	8007e80 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	9300      	str	r3, [sp, #0]
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	2200      	movs	r2, #0
 8007e26:	2180      	movs	r1, #128	; 0x80
 8007e28:	68f8      	ldr	r0, [r7, #12]
 8007e2a:	f000 fb93 	bl	8008554 <UART_WaitOnFlagUntilTimeout>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d004      	beq.n	8007e3e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2220      	movs	r2, #32
 8007e38:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007e3a:	2303      	movs	r3, #3
 8007e3c:	e03c      	b.n	8007eb8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8007e3e:	69fb      	ldr	r3, [r7, #28]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d10b      	bne.n	8007e5c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e44:	69bb      	ldr	r3, [r7, #24]
 8007e46:	881a      	ldrh	r2, [r3, #0]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e50:	b292      	uxth	r2, r2
 8007e52:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007e54:	69bb      	ldr	r3, [r7, #24]
 8007e56:	3302      	adds	r3, #2
 8007e58:	61bb      	str	r3, [r7, #24]
 8007e5a:	e008      	b.n	8007e6e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e5c:	69fb      	ldr	r3, [r7, #28]
 8007e5e:	781a      	ldrb	r2, [r3, #0]
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	b292      	uxth	r2, r2
 8007e66:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007e68:	69fb      	ldr	r3, [r7, #28]
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007e74:	b29b      	uxth	r3, r3
 8007e76:	3b01      	subs	r3, #1
 8007e78:	b29a      	uxth	r2, r3
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d1c8      	bne.n	8007e1e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	9300      	str	r3, [sp, #0]
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	2200      	movs	r2, #0
 8007e94:	2140      	movs	r1, #64	; 0x40
 8007e96:	68f8      	ldr	r0, [r7, #12]
 8007e98:	f000 fb5c 	bl	8008554 <UART_WaitOnFlagUntilTimeout>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d004      	beq.n	8007eac <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2220      	movs	r2, #32
 8007ea6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8007ea8:	2303      	movs	r3, #3
 8007eaa:	e005      	b.n	8007eb8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2220      	movs	r2, #32
 8007eb0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	e000      	b.n	8007eb8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8007eb6:	2302      	movs	r3, #2
  }
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3720      	adds	r7, #32
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b08a      	sub	sp, #40	; 0x28
 8007ec4:	af02      	add	r7, sp, #8
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	60b9      	str	r1, [r7, #8]
 8007eca:	603b      	str	r3, [r7, #0]
 8007ecc:	4613      	mov	r3, r2
 8007ece:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ed6:	2b20      	cmp	r3, #32
 8007ed8:	f040 80b6 	bne.w	8008048 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d002      	beq.n	8007ee8 <HAL_UART_Receive+0x28>
 8007ee2:	88fb      	ldrh	r3, [r7, #6]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d101      	bne.n	8007eec <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	e0ae      	b.n	800804a <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2222      	movs	r2, #34	; 0x22
 8007ef8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2200      	movs	r2, #0
 8007f00:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f02:	f7fb fef5 	bl	8003cf0 <HAL_GetTick>
 8007f06:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	88fa      	ldrh	r2, [r7, #6]
 8007f0c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	88fa      	ldrh	r2, [r7, #6]
 8007f14:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f20:	d10e      	bne.n	8007f40 <HAL_UART_Receive+0x80>
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	691b      	ldr	r3, [r3, #16]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d105      	bne.n	8007f36 <HAL_UART_Receive+0x76>
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007f30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007f34:	e02d      	b.n	8007f92 <HAL_UART_Receive+0xd2>
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	22ff      	movs	r2, #255	; 0xff
 8007f3a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007f3e:	e028      	b.n	8007f92 <HAL_UART_Receive+0xd2>
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	689b      	ldr	r3, [r3, #8]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d10d      	bne.n	8007f64 <HAL_UART_Receive+0xa4>
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	691b      	ldr	r3, [r3, #16]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d104      	bne.n	8007f5a <HAL_UART_Receive+0x9a>
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	22ff      	movs	r2, #255	; 0xff
 8007f54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007f58:	e01b      	b.n	8007f92 <HAL_UART_Receive+0xd2>
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	227f      	movs	r2, #127	; 0x7f
 8007f5e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007f62:	e016      	b.n	8007f92 <HAL_UART_Receive+0xd2>
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	689b      	ldr	r3, [r3, #8]
 8007f68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f6c:	d10d      	bne.n	8007f8a <HAL_UART_Receive+0xca>
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	691b      	ldr	r3, [r3, #16]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d104      	bne.n	8007f80 <HAL_UART_Receive+0xc0>
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	227f      	movs	r2, #127	; 0x7f
 8007f7a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007f7e:	e008      	b.n	8007f92 <HAL_UART_Receive+0xd2>
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	223f      	movs	r2, #63	; 0x3f
 8007f84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007f88:	e003      	b.n	8007f92 <HAL_UART_Receive+0xd2>
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007f98:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fa2:	d108      	bne.n	8007fb6 <HAL_UART_Receive+0xf6>
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	691b      	ldr	r3, [r3, #16]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d104      	bne.n	8007fb6 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8007fac:	2300      	movs	r3, #0
 8007fae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	61bb      	str	r3, [r7, #24]
 8007fb4:	e003      	b.n	8007fbe <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007fbe:	e037      	b.n	8008030 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	9300      	str	r3, [sp, #0]
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	2120      	movs	r1, #32
 8007fca:	68f8      	ldr	r0, [r7, #12]
 8007fcc:	f000 fac2 	bl	8008554 <UART_WaitOnFlagUntilTimeout>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d005      	beq.n	8007fe2 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2220      	movs	r2, #32
 8007fda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007fde:	2303      	movs	r3, #3
 8007fe0:	e033      	b.n	800804a <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8007fe2:	69fb      	ldr	r3, [r7, #28]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d10c      	bne.n	8008002 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007fee:	b29a      	uxth	r2, r3
 8007ff0:	8a7b      	ldrh	r3, [r7, #18]
 8007ff2:	4013      	ands	r3, r2
 8007ff4:	b29a      	uxth	r2, r3
 8007ff6:	69bb      	ldr	r3, [r7, #24]
 8007ff8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007ffa:	69bb      	ldr	r3, [r7, #24]
 8007ffc:	3302      	adds	r3, #2
 8007ffe:	61bb      	str	r3, [r7, #24]
 8008000:	e00d      	b.n	800801e <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008008:	b29b      	uxth	r3, r3
 800800a:	b2da      	uxtb	r2, r3
 800800c:	8a7b      	ldrh	r3, [r7, #18]
 800800e:	b2db      	uxtb	r3, r3
 8008010:	4013      	ands	r3, r2
 8008012:	b2da      	uxtb	r2, r3
 8008014:	69fb      	ldr	r3, [r7, #28]
 8008016:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	3301      	adds	r3, #1
 800801c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008024:	b29b      	uxth	r3, r3
 8008026:	3b01      	subs	r3, #1
 8008028:	b29a      	uxth	r2, r3
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008036:	b29b      	uxth	r3, r3
 8008038:	2b00      	cmp	r3, #0
 800803a:	d1c1      	bne.n	8007fc0 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2220      	movs	r2, #32
 8008040:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8008044:	2300      	movs	r3, #0
 8008046:	e000      	b.n	800804a <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8008048:	2302      	movs	r3, #2
  }
}
 800804a:	4618      	mov	r0, r3
 800804c:	3720      	adds	r7, #32
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
	...

08008054 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b088      	sub	sp, #32
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800805c:	2300      	movs	r3, #0
 800805e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	689a      	ldr	r2, [r3, #8]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	691b      	ldr	r3, [r3, #16]
 8008068:	431a      	orrs	r2, r3
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	695b      	ldr	r3, [r3, #20]
 800806e:	431a      	orrs	r2, r3
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	69db      	ldr	r3, [r3, #28]
 8008074:	4313      	orrs	r3, r2
 8008076:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	4b8a      	ldr	r3, [pc, #552]	; (80082a8 <UART_SetConfig+0x254>)
 8008080:	4013      	ands	r3, r2
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	6812      	ldr	r2, [r2, #0]
 8008086:	6979      	ldr	r1, [r7, #20]
 8008088:	430b      	orrs	r3, r1
 800808a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	68da      	ldr	r2, [r3, #12]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	430a      	orrs	r2, r1
 80080a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	699b      	ldr	r3, [r3, #24]
 80080a6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6a1b      	ldr	r3, [r3, #32]
 80080ac:	697a      	ldr	r2, [r7, #20]
 80080ae:	4313      	orrs	r3, r2
 80080b0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	689b      	ldr	r3, [r3, #8]
 80080b8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	697a      	ldr	r2, [r7, #20]
 80080c2:	430a      	orrs	r2, r1
 80080c4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a78      	ldr	r2, [pc, #480]	; (80082ac <UART_SetConfig+0x258>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d120      	bne.n	8008112 <UART_SetConfig+0xbe>
 80080d0:	4b77      	ldr	r3, [pc, #476]	; (80082b0 <UART_SetConfig+0x25c>)
 80080d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080d4:	f003 0303 	and.w	r3, r3, #3
 80080d8:	2b03      	cmp	r3, #3
 80080da:	d817      	bhi.n	800810c <UART_SetConfig+0xb8>
 80080dc:	a201      	add	r2, pc, #4	; (adr r2, 80080e4 <UART_SetConfig+0x90>)
 80080de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080e2:	bf00      	nop
 80080e4:	080080f5 	.word	0x080080f5
 80080e8:	08008101 	.word	0x08008101
 80080ec:	08008107 	.word	0x08008107
 80080f0:	080080fb 	.word	0x080080fb
 80080f4:	2300      	movs	r3, #0
 80080f6:	77fb      	strb	r3, [r7, #31]
 80080f8:	e01d      	b.n	8008136 <UART_SetConfig+0xe2>
 80080fa:	2302      	movs	r3, #2
 80080fc:	77fb      	strb	r3, [r7, #31]
 80080fe:	e01a      	b.n	8008136 <UART_SetConfig+0xe2>
 8008100:	2304      	movs	r3, #4
 8008102:	77fb      	strb	r3, [r7, #31]
 8008104:	e017      	b.n	8008136 <UART_SetConfig+0xe2>
 8008106:	2308      	movs	r3, #8
 8008108:	77fb      	strb	r3, [r7, #31]
 800810a:	e014      	b.n	8008136 <UART_SetConfig+0xe2>
 800810c:	2310      	movs	r3, #16
 800810e:	77fb      	strb	r3, [r7, #31]
 8008110:	e011      	b.n	8008136 <UART_SetConfig+0xe2>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a67      	ldr	r2, [pc, #412]	; (80082b4 <UART_SetConfig+0x260>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d102      	bne.n	8008122 <UART_SetConfig+0xce>
 800811c:	2300      	movs	r3, #0
 800811e:	77fb      	strb	r3, [r7, #31]
 8008120:	e009      	b.n	8008136 <UART_SetConfig+0xe2>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a64      	ldr	r2, [pc, #400]	; (80082b8 <UART_SetConfig+0x264>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d102      	bne.n	8008132 <UART_SetConfig+0xde>
 800812c:	2300      	movs	r3, #0
 800812e:	77fb      	strb	r3, [r7, #31]
 8008130:	e001      	b.n	8008136 <UART_SetConfig+0xe2>
 8008132:	2310      	movs	r3, #16
 8008134:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	69db      	ldr	r3, [r3, #28]
 800813a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800813e:	d15a      	bne.n	80081f6 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8008140:	7ffb      	ldrb	r3, [r7, #31]
 8008142:	2b08      	cmp	r3, #8
 8008144:	d827      	bhi.n	8008196 <UART_SetConfig+0x142>
 8008146:	a201      	add	r2, pc, #4	; (adr r2, 800814c <UART_SetConfig+0xf8>)
 8008148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800814c:	08008171 	.word	0x08008171
 8008150:	08008179 	.word	0x08008179
 8008154:	08008181 	.word	0x08008181
 8008158:	08008197 	.word	0x08008197
 800815c:	08008187 	.word	0x08008187
 8008160:	08008197 	.word	0x08008197
 8008164:	08008197 	.word	0x08008197
 8008168:	08008197 	.word	0x08008197
 800816c:	0800818f 	.word	0x0800818f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008170:	f7fe f856 	bl	8006220 <HAL_RCC_GetPCLK1Freq>
 8008174:	61b8      	str	r0, [r7, #24]
        break;
 8008176:	e013      	b.n	80081a0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008178:	f7fe f874 	bl	8006264 <HAL_RCC_GetPCLK2Freq>
 800817c:	61b8      	str	r0, [r7, #24]
        break;
 800817e:	e00f      	b.n	80081a0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008180:	4b4e      	ldr	r3, [pc, #312]	; (80082bc <UART_SetConfig+0x268>)
 8008182:	61bb      	str	r3, [r7, #24]
        break;
 8008184:	e00c      	b.n	80081a0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008186:	f7fd ffd5 	bl	8006134 <HAL_RCC_GetSysClockFreq>
 800818a:	61b8      	str	r0, [r7, #24]
        break;
 800818c:	e008      	b.n	80081a0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800818e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008192:	61bb      	str	r3, [r7, #24]
        break;
 8008194:	e004      	b.n	80081a0 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8008196:	2300      	movs	r3, #0
 8008198:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800819a:	2301      	movs	r3, #1
 800819c:	77bb      	strb	r3, [r7, #30]
        break;
 800819e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80081a0:	69bb      	ldr	r3, [r7, #24]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d074      	beq.n	8008290 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80081a6:	69bb      	ldr	r3, [r7, #24]
 80081a8:	005a      	lsls	r2, r3, #1
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	085b      	lsrs	r3, r3, #1
 80081b0:	441a      	add	r2, r3
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80081ba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	2b0f      	cmp	r3, #15
 80081c0:	d916      	bls.n	80081f0 <UART_SetConfig+0x19c>
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081c8:	d212      	bcs.n	80081f0 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	f023 030f 	bic.w	r3, r3, #15
 80081d2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	085b      	lsrs	r3, r3, #1
 80081d8:	b29b      	uxth	r3, r3
 80081da:	f003 0307 	and.w	r3, r3, #7
 80081de:	b29a      	uxth	r2, r3
 80081e0:	89fb      	ldrh	r3, [r7, #14]
 80081e2:	4313      	orrs	r3, r2
 80081e4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	89fa      	ldrh	r2, [r7, #14]
 80081ec:	60da      	str	r2, [r3, #12]
 80081ee:	e04f      	b.n	8008290 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80081f0:	2301      	movs	r3, #1
 80081f2:	77bb      	strb	r3, [r7, #30]
 80081f4:	e04c      	b.n	8008290 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80081f6:	7ffb      	ldrb	r3, [r7, #31]
 80081f8:	2b08      	cmp	r3, #8
 80081fa:	d828      	bhi.n	800824e <UART_SetConfig+0x1fa>
 80081fc:	a201      	add	r2, pc, #4	; (adr r2, 8008204 <UART_SetConfig+0x1b0>)
 80081fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008202:	bf00      	nop
 8008204:	08008229 	.word	0x08008229
 8008208:	08008231 	.word	0x08008231
 800820c:	08008239 	.word	0x08008239
 8008210:	0800824f 	.word	0x0800824f
 8008214:	0800823f 	.word	0x0800823f
 8008218:	0800824f 	.word	0x0800824f
 800821c:	0800824f 	.word	0x0800824f
 8008220:	0800824f 	.word	0x0800824f
 8008224:	08008247 	.word	0x08008247
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008228:	f7fd fffa 	bl	8006220 <HAL_RCC_GetPCLK1Freq>
 800822c:	61b8      	str	r0, [r7, #24]
        break;
 800822e:	e013      	b.n	8008258 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008230:	f7fe f818 	bl	8006264 <HAL_RCC_GetPCLK2Freq>
 8008234:	61b8      	str	r0, [r7, #24]
        break;
 8008236:	e00f      	b.n	8008258 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008238:	4b20      	ldr	r3, [pc, #128]	; (80082bc <UART_SetConfig+0x268>)
 800823a:	61bb      	str	r3, [r7, #24]
        break;
 800823c:	e00c      	b.n	8008258 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800823e:	f7fd ff79 	bl	8006134 <HAL_RCC_GetSysClockFreq>
 8008242:	61b8      	str	r0, [r7, #24]
        break;
 8008244:	e008      	b.n	8008258 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008246:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800824a:	61bb      	str	r3, [r7, #24]
        break;
 800824c:	e004      	b.n	8008258 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800824e:	2300      	movs	r3, #0
 8008250:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008252:	2301      	movs	r3, #1
 8008254:	77bb      	strb	r3, [r7, #30]
        break;
 8008256:	bf00      	nop
    }

    if (pclk != 0U)
 8008258:	69bb      	ldr	r3, [r7, #24]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d018      	beq.n	8008290 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	085a      	lsrs	r2, r3, #1
 8008264:	69bb      	ldr	r3, [r7, #24]
 8008266:	441a      	add	r2, r3
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008270:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	2b0f      	cmp	r3, #15
 8008276:	d909      	bls.n	800828c <UART_SetConfig+0x238>
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800827e:	d205      	bcs.n	800828c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	b29a      	uxth	r2, r3
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	60da      	str	r2, [r3, #12]
 800828a:	e001      	b.n	8008290 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800828c:	2301      	movs	r3, #1
 800828e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2200      	movs	r2, #0
 8008294:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2200      	movs	r2, #0
 800829a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800829c:	7fbb      	ldrb	r3, [r7, #30]
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3720      	adds	r7, #32
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}
 80082a6:	bf00      	nop
 80082a8:	efff69f3 	.word	0xefff69f3
 80082ac:	40013800 	.word	0x40013800
 80082b0:	40021000 	.word	0x40021000
 80082b4:	40004400 	.word	0x40004400
 80082b8:	40004800 	.word	0x40004800
 80082bc:	007a1200 	.word	0x007a1200

080082c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b083      	sub	sp, #12
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082cc:	f003 0301 	and.w	r3, r3, #1
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d00a      	beq.n	80082ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	430a      	orrs	r2, r1
 80082e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ee:	f003 0302 	and.w	r3, r3, #2
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d00a      	beq.n	800830c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	430a      	orrs	r2, r1
 800830a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008310:	f003 0304 	and.w	r3, r3, #4
 8008314:	2b00      	cmp	r3, #0
 8008316:	d00a      	beq.n	800832e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	430a      	orrs	r2, r1
 800832c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008332:	f003 0308 	and.w	r3, r3, #8
 8008336:	2b00      	cmp	r3, #0
 8008338:	d00a      	beq.n	8008350 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	430a      	orrs	r2, r1
 800834e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008354:	f003 0310 	and.w	r3, r3, #16
 8008358:	2b00      	cmp	r3, #0
 800835a:	d00a      	beq.n	8008372 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	689b      	ldr	r3, [r3, #8]
 8008362:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	430a      	orrs	r2, r1
 8008370:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008376:	f003 0320 	and.w	r3, r3, #32
 800837a:	2b00      	cmp	r3, #0
 800837c:	d00a      	beq.n	8008394 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	689b      	ldr	r3, [r3, #8]
 8008384:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	430a      	orrs	r2, r1
 8008392:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800839c:	2b00      	cmp	r3, #0
 800839e:	d01a      	beq.n	80083d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	430a      	orrs	r2, r1
 80083b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083be:	d10a      	bne.n	80083d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	430a      	orrs	r2, r1
 80083d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d00a      	beq.n	80083f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	430a      	orrs	r2, r1
 80083f6:	605a      	str	r2, [r3, #4]
  }
}
 80083f8:	bf00      	nop
 80083fa:	370c      	adds	r7, #12
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr

08008404 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b098      	sub	sp, #96	; 0x60
 8008408:	af02      	add	r7, sp, #8
 800840a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008414:	f7fb fc6c 	bl	8003cf0 <HAL_GetTick>
 8008418:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f003 0308 	and.w	r3, r3, #8
 8008424:	2b08      	cmp	r3, #8
 8008426:	d12e      	bne.n	8008486 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008428:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800842c:	9300      	str	r3, [sp, #0]
 800842e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008430:	2200      	movs	r2, #0
 8008432:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 f88c 	bl	8008554 <UART_WaitOnFlagUntilTimeout>
 800843c:	4603      	mov	r3, r0
 800843e:	2b00      	cmp	r3, #0
 8008440:	d021      	beq.n	8008486 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800844a:	e853 3f00 	ldrex	r3, [r3]
 800844e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008452:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008456:	653b      	str	r3, [r7, #80]	; 0x50
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	461a      	mov	r2, r3
 800845e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008460:	647b      	str	r3, [r7, #68]	; 0x44
 8008462:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008464:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008466:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008468:	e841 2300 	strex	r3, r2, [r1]
 800846c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800846e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008470:	2b00      	cmp	r3, #0
 8008472:	d1e6      	bne.n	8008442 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2220      	movs	r2, #32
 8008478:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2200      	movs	r2, #0
 800847e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008482:	2303      	movs	r3, #3
 8008484:	e062      	b.n	800854c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f003 0304 	and.w	r3, r3, #4
 8008490:	2b04      	cmp	r3, #4
 8008492:	d149      	bne.n	8008528 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008494:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008498:	9300      	str	r3, [sp, #0]
 800849a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800849c:	2200      	movs	r2, #0
 800849e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f000 f856 	bl	8008554 <UART_WaitOnFlagUntilTimeout>
 80084a8:	4603      	mov	r3, r0
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d03c      	beq.n	8008528 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b6:	e853 3f00 	ldrex	r3, [r3]
 80084ba:	623b      	str	r3, [r7, #32]
   return(result);
 80084bc:	6a3b      	ldr	r3, [r7, #32]
 80084be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	461a      	mov	r2, r3
 80084ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084cc:	633b      	str	r3, [r7, #48]	; 0x30
 80084ce:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80084d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084d4:	e841 2300 	strex	r3, r2, [r1]
 80084d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80084da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d1e6      	bne.n	80084ae <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	3308      	adds	r3, #8
 80084e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	e853 3f00 	ldrex	r3, [r3]
 80084ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f023 0301 	bic.w	r3, r3, #1
 80084f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	3308      	adds	r3, #8
 80084fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008500:	61fa      	str	r2, [r7, #28]
 8008502:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008504:	69b9      	ldr	r1, [r7, #24]
 8008506:	69fa      	ldr	r2, [r7, #28]
 8008508:	e841 2300 	strex	r3, r2, [r1]
 800850c:	617b      	str	r3, [r7, #20]
   return(result);
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d1e5      	bne.n	80084e0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2220      	movs	r2, #32
 8008518:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2200      	movs	r2, #0
 8008520:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008524:	2303      	movs	r3, #3
 8008526:	e011      	b.n	800854c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2220      	movs	r2, #32
 800852c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2220      	movs	r2, #32
 8008532:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2200      	movs	r2, #0
 800853a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2200      	movs	r2, #0
 8008540:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2200      	movs	r2, #0
 8008546:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800854a:	2300      	movs	r3, #0
}
 800854c:	4618      	mov	r0, r3
 800854e:	3758      	adds	r7, #88	; 0x58
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b084      	sub	sp, #16
 8008558:	af00      	add	r7, sp, #0
 800855a:	60f8      	str	r0, [r7, #12]
 800855c:	60b9      	str	r1, [r7, #8]
 800855e:	603b      	str	r3, [r7, #0]
 8008560:	4613      	mov	r3, r2
 8008562:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008564:	e049      	b.n	80085fa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008566:	69bb      	ldr	r3, [r7, #24]
 8008568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800856c:	d045      	beq.n	80085fa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800856e:	f7fb fbbf 	bl	8003cf0 <HAL_GetTick>
 8008572:	4602      	mov	r2, r0
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	1ad3      	subs	r3, r2, r3
 8008578:	69ba      	ldr	r2, [r7, #24]
 800857a:	429a      	cmp	r2, r3
 800857c:	d302      	bcc.n	8008584 <UART_WaitOnFlagUntilTimeout+0x30>
 800857e:	69bb      	ldr	r3, [r7, #24]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d101      	bne.n	8008588 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008584:	2303      	movs	r3, #3
 8008586:	e048      	b.n	800861a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f003 0304 	and.w	r3, r3, #4
 8008592:	2b00      	cmp	r3, #0
 8008594:	d031      	beq.n	80085fa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	69db      	ldr	r3, [r3, #28]
 800859c:	f003 0308 	and.w	r3, r3, #8
 80085a0:	2b08      	cmp	r3, #8
 80085a2:	d110      	bne.n	80085c6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	2208      	movs	r2, #8
 80085aa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80085ac:	68f8      	ldr	r0, [r7, #12]
 80085ae:	f000 f838 	bl	8008622 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2208      	movs	r2, #8
 80085b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2200      	movs	r2, #0
 80085be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80085c2:	2301      	movs	r3, #1
 80085c4:	e029      	b.n	800861a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	69db      	ldr	r3, [r3, #28]
 80085cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085d4:	d111      	bne.n	80085fa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80085de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80085e0:	68f8      	ldr	r0, [r7, #12]
 80085e2:	f000 f81e 	bl	8008622 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2220      	movs	r2, #32
 80085ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2200      	movs	r2, #0
 80085f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80085f6:	2303      	movs	r3, #3
 80085f8:	e00f      	b.n	800861a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	69da      	ldr	r2, [r3, #28]
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	4013      	ands	r3, r2
 8008604:	68ba      	ldr	r2, [r7, #8]
 8008606:	429a      	cmp	r2, r3
 8008608:	bf0c      	ite	eq
 800860a:	2301      	moveq	r3, #1
 800860c:	2300      	movne	r3, #0
 800860e:	b2db      	uxtb	r3, r3
 8008610:	461a      	mov	r2, r3
 8008612:	79fb      	ldrb	r3, [r7, #7]
 8008614:	429a      	cmp	r2, r3
 8008616:	d0a6      	beq.n	8008566 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008618:	2300      	movs	r3, #0
}
 800861a:	4618      	mov	r0, r3
 800861c:	3710      	adds	r7, #16
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}

08008622 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008622:	b480      	push	{r7}
 8008624:	b095      	sub	sp, #84	; 0x54
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008632:	e853 3f00 	ldrex	r3, [r3]
 8008636:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800863a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800863e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	461a      	mov	r2, r3
 8008646:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008648:	643b      	str	r3, [r7, #64]	; 0x40
 800864a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800864c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800864e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008650:	e841 2300 	strex	r3, r2, [r1]
 8008654:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008658:	2b00      	cmp	r3, #0
 800865a:	d1e6      	bne.n	800862a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	3308      	adds	r3, #8
 8008662:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008664:	6a3b      	ldr	r3, [r7, #32]
 8008666:	e853 3f00 	ldrex	r3, [r3]
 800866a:	61fb      	str	r3, [r7, #28]
   return(result);
 800866c:	69fb      	ldr	r3, [r7, #28]
 800866e:	f023 0301 	bic.w	r3, r3, #1
 8008672:	64bb      	str	r3, [r7, #72]	; 0x48
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	3308      	adds	r3, #8
 800867a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800867c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800867e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008680:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008682:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008684:	e841 2300 	strex	r3, r2, [r1]
 8008688:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800868a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868c:	2b00      	cmp	r3, #0
 800868e:	d1e5      	bne.n	800865c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008694:	2b01      	cmp	r3, #1
 8008696:	d118      	bne.n	80086ca <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	e853 3f00 	ldrex	r3, [r3]
 80086a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	f023 0310 	bic.w	r3, r3, #16
 80086ac:	647b      	str	r3, [r7, #68]	; 0x44
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	461a      	mov	r2, r3
 80086b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086b6:	61bb      	str	r3, [r7, #24]
 80086b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ba:	6979      	ldr	r1, [r7, #20]
 80086bc:	69ba      	ldr	r2, [r7, #24]
 80086be:	e841 2300 	strex	r3, r2, [r1]
 80086c2:	613b      	str	r3, [r7, #16]
   return(result);
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d1e6      	bne.n	8008698 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2220      	movs	r2, #32
 80086ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2200      	movs	r2, #0
 80086d6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2200      	movs	r2, #0
 80086dc:	669a      	str	r2, [r3, #104]	; 0x68
}
 80086de:	bf00      	nop
 80086e0:	3754      	adds	r7, #84	; 0x54
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr

080086ea <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80086ea:	b480      	push	{r7}
 80086ec:	b085      	sub	sp, #20
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	4603      	mov	r3, r0
 80086f2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80086f4:	2300      	movs	r3, #0
 80086f6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80086f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80086fc:	2b84      	cmp	r3, #132	; 0x84
 80086fe:	d005      	beq.n	800870c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008700:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	4413      	add	r3, r2
 8008708:	3303      	adds	r3, #3
 800870a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800870c:	68fb      	ldr	r3, [r7, #12]
}
 800870e:	4618      	mov	r0, r3
 8008710:	3714      	adds	r7, #20
 8008712:	46bd      	mov	sp, r7
 8008714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008718:	4770      	bx	lr

0800871a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800871a:	b580      	push	{r7, lr}
 800871c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800871e:	f001 f8b9 	bl	8009894 <vTaskStartScheduler>
  
  return osOK;
 8008722:	2300      	movs	r3, #0
}
 8008724:	4618      	mov	r0, r3
 8008726:	bd80      	pop	{r7, pc}

08008728 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800872a:	b089      	sub	sp, #36	; 0x24
 800872c:	af04      	add	r7, sp, #16
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	695b      	ldr	r3, [r3, #20]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d020      	beq.n	800877c <osThreadCreate+0x54>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	699b      	ldr	r3, [r3, #24]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d01c      	beq.n	800877c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	685c      	ldr	r4, [r3, #4]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	691e      	ldr	r6, [r3, #16]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008754:	4618      	mov	r0, r3
 8008756:	f7ff ffc8 	bl	80086ea <makeFreeRtosPriority>
 800875a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	695b      	ldr	r3, [r3, #20]
 8008760:	687a      	ldr	r2, [r7, #4]
 8008762:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008764:	9202      	str	r2, [sp, #8]
 8008766:	9301      	str	r3, [sp, #4]
 8008768:	9100      	str	r1, [sp, #0]
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	4632      	mov	r2, r6
 800876e:	4629      	mov	r1, r5
 8008770:	4620      	mov	r0, r4
 8008772:	f000 fed1 	bl	8009518 <xTaskCreateStatic>
 8008776:	4603      	mov	r3, r0
 8008778:	60fb      	str	r3, [r7, #12]
 800877a:	e01c      	b.n	80087b6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	685c      	ldr	r4, [r3, #4]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008788:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008790:	4618      	mov	r0, r3
 8008792:	f7ff ffaa 	bl	80086ea <makeFreeRtosPriority>
 8008796:	4602      	mov	r2, r0
 8008798:	f107 030c 	add.w	r3, r7, #12
 800879c:	9301      	str	r3, [sp, #4]
 800879e:	9200      	str	r2, [sp, #0]
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	4632      	mov	r2, r6
 80087a4:	4629      	mov	r1, r5
 80087a6:	4620      	mov	r0, r4
 80087a8:	f000 ff12 	bl	80095d0 <xTaskCreate>
 80087ac:	4603      	mov	r3, r0
 80087ae:	2b01      	cmp	r3, #1
 80087b0:	d001      	beq.n	80087b6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80087b2:	2300      	movs	r3, #0
 80087b4:	e000      	b.n	80087b8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80087b6:	68fb      	ldr	r3, [r7, #12]
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3714      	adds	r7, #20
 80087bc:	46bd      	mov	sp, r7
 80087be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080087c0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b084      	sub	sp, #16
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d001      	beq.n	80087d6 <osDelay+0x16>
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	e000      	b.n	80087d8 <osDelay+0x18>
 80087d6:	2301      	movs	r3, #1
 80087d8:	4618      	mov	r0, r3
 80087da:	f001 f827 	bl	800982c <vTaskDelay>
  
  return osOK;
 80087de:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3710      	adds	r7, #16
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b082      	sub	sp, #8
 80087ec:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 80087ee:	201c      	movs	r0, #28
 80087f0:	f002 fbba 	bl	800af68 <pvPortMalloc>
 80087f4:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d00a      	beq.n	8008812 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2200      	movs	r2, #0
 8008800:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	3304      	adds	r3, #4
 8008806:	4618      	mov	r0, r3
 8008808:	f000 f8ef 	bl	80089ea <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2200      	movs	r2, #0
 8008810:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8008812:	687b      	ldr	r3, [r7, #4]
	}
 8008814:	4618      	mov	r0, r3
 8008816:	3708      	adds	r7, #8
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}

0800881c <xEventGroupClearBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b086      	sub	sp, #24
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d10a      	bne.n	8008846 <xEventGroupClearBits+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008834:	f383 8811 	msr	BASEPRI, r3
 8008838:	f3bf 8f6f 	isb	sy
 800883c:	f3bf 8f4f 	dsb	sy
 8008840:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008842:	bf00      	nop
 8008844:	e7fe      	b.n	8008844 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800884c:	2b00      	cmp	r3, #0
 800884e:	d00a      	beq.n	8008866 <xEventGroupClearBits+0x4a>
	__asm volatile
 8008850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008854:	f383 8811 	msr	BASEPRI, r3
 8008858:	f3bf 8f6f 	isb	sy
 800885c:	f3bf 8f4f 	dsb	sy
 8008860:	60bb      	str	r3, [r7, #8]
}
 8008862:	bf00      	nop
 8008864:	e7fe      	b.n	8008864 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8008866:	f002 fa5d 	bl	800ad24 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	681a      	ldr	r2, [r3, #0]
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	43db      	mvns	r3, r3
 8008878:	401a      	ands	r2, r3
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 800887e:	f002 fa81 	bl	800ad84 <vPortExitCritical>

	return uxReturn;
 8008882:	693b      	ldr	r3, [r7, #16]
}
 8008884:	4618      	mov	r0, r3
 8008886:	3718      	adds	r7, #24
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 800888c:	b480      	push	{r7}
 800888e:	b089      	sub	sp, #36	; 0x24
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008898:	f3ef 8211 	mrs	r2, BASEPRI
 800889c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a0:	f383 8811 	msr	BASEPRI, r3
 80088a4:	f3bf 8f6f 	isb	sy
 80088a8:	f3bf 8f4f 	dsb	sy
 80088ac:	60fa      	str	r2, [r7, #12]
 80088ae:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80088b0:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80088b2:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 80088b4:	69fb      	ldr	r3, [r7, #28]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	617b      	str	r3, [r7, #20]
 80088ba:	69bb      	ldr	r3, [r7, #24]
 80088bc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80088c4:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 80088c6:	697b      	ldr	r3, [r7, #20]
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3724      	adds	r7, #36	; 0x24
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr

080088d4 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b08e      	sub	sp, #56	; 0x38
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80088de:	2300      	movs	r3, #0
 80088e0:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80088e6:	2300      	movs	r3, #0
 80088e8:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d10a      	bne.n	8008906 <xEventGroupSetBits+0x32>
	__asm volatile
 80088f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f4:	f383 8811 	msr	BASEPRI, r3
 80088f8:	f3bf 8f6f 	isb	sy
 80088fc:	f3bf 8f4f 	dsb	sy
 8008900:	613b      	str	r3, [r7, #16]
}
 8008902:	bf00      	nop
 8008904:	e7fe      	b.n	8008904 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800890c:	2b00      	cmp	r3, #0
 800890e:	d00a      	beq.n	8008926 <xEventGroupSetBits+0x52>
	__asm volatile
 8008910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008914:	f383 8811 	msr	BASEPRI, r3
 8008918:	f3bf 8f6f 	isb	sy
 800891c:	f3bf 8f4f 	dsb	sy
 8008920:	60fb      	str	r3, [r7, #12]
}
 8008922:	bf00      	nop
 8008924:	e7fe      	b.n	8008924 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8008926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008928:	3304      	adds	r3, #4
 800892a:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800892c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800892e:	3308      	adds	r3, #8
 8008930:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8008932:	f001 f815 	bl	8009960 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8008936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008938:	68db      	ldr	r3, [r3, #12]
 800893a:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800893c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800893e:	681a      	ldr	r2, [r3, #0]
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	431a      	orrs	r2, r3
 8008944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008946:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8008948:	e03c      	b.n	80089c4 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800894a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8008950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8008956:	2300      	movs	r3, #0
 8008958:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800895a:	69bb      	ldr	r3, [r7, #24]
 800895c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008960:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8008962:	69bb      	ldr	r3, [r7, #24]
 8008964:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008968:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008970:	2b00      	cmp	r3, #0
 8008972:	d108      	bne.n	8008986 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8008974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008976:	681a      	ldr	r2, [r3, #0]
 8008978:	69bb      	ldr	r3, [r7, #24]
 800897a:	4013      	ands	r3, r2
 800897c:	2b00      	cmp	r3, #0
 800897e:	d00b      	beq.n	8008998 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8008980:	2301      	movs	r3, #1
 8008982:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008984:	e008      	b.n	8008998 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8008986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008988:	681a      	ldr	r2, [r3, #0]
 800898a:	69bb      	ldr	r3, [r7, #24]
 800898c:	4013      	ands	r3, r2
 800898e:	69ba      	ldr	r2, [r7, #24]
 8008990:	429a      	cmp	r2, r3
 8008992:	d101      	bne.n	8008998 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8008994:	2301      	movs	r3, #1
 8008996:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8008998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800899a:	2b00      	cmp	r3, #0
 800899c:	d010      	beq.n	80089c0 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d003      	beq.n	80089b0 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80089a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089aa:	69bb      	ldr	r3, [r7, #24]
 80089ac:	4313      	orrs	r3, r2
 80089ae:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80089b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80089b8:	4619      	mov	r1, r3
 80089ba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80089bc:	f001 fa56 	bl	8009e6c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80089c0:	69fb      	ldr	r3, [r7, #28]
 80089c2:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80089c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089c6:	6a3b      	ldr	r3, [r7, #32]
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d1be      	bne.n	800894a <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80089cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ce:	681a      	ldr	r2, [r3, #0]
 80089d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d2:	43db      	mvns	r3, r3
 80089d4:	401a      	ands	r2, r3
 80089d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d8:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80089da:	f000 ffcf 	bl	800997c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80089de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e0:	681b      	ldr	r3, [r3, #0]
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3738      	adds	r7, #56	; 0x38
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}

080089ea <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80089ea:	b480      	push	{r7}
 80089ec:	b083      	sub	sp, #12
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f103 0208 	add.w	r2, r3, #8
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008a02:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f103 0208 	add.w	r2, r3, #8
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f103 0208 	add.w	r2, r3, #8
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008a1e:	bf00      	nop
 8008a20:	370c      	adds	r7, #12
 8008a22:	46bd      	mov	sp, r7
 8008a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a28:	4770      	bx	lr

08008a2a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008a2a:	b480      	push	{r7}
 8008a2c:	b083      	sub	sp, #12
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2200      	movs	r2, #0
 8008a36:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008a38:	bf00      	nop
 8008a3a:	370c      	adds	r7, #12
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr

08008a44 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008a44:	b480      	push	{r7}
 8008a46:	b085      	sub	sp, #20
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	68fa      	ldr	r2, [r7, #12]
 8008a58:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	689a      	ldr	r2, [r3, #8]
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	689b      	ldr	r3, [r3, #8]
 8008a66:	683a      	ldr	r2, [r7, #0]
 8008a68:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	683a      	ldr	r2, [r7, #0]
 8008a6e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	1c5a      	adds	r2, r3, #1
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	601a      	str	r2, [r3, #0]
}
 8008a80:	bf00      	nop
 8008a82:	3714      	adds	r7, #20
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr

08008a8c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b085      	sub	sp, #20
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aa2:	d103      	bne.n	8008aac <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	691b      	ldr	r3, [r3, #16]
 8008aa8:	60fb      	str	r3, [r7, #12]
 8008aaa:	e00c      	b.n	8008ac6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	3308      	adds	r3, #8
 8008ab0:	60fb      	str	r3, [r7, #12]
 8008ab2:	e002      	b.n	8008aba <vListInsert+0x2e>
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	60fb      	str	r3, [r7, #12]
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	68ba      	ldr	r2, [r7, #8]
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	d2f6      	bcs.n	8008ab4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	685a      	ldr	r2, [r3, #4]
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	683a      	ldr	r2, [r7, #0]
 8008ad4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	68fa      	ldr	r2, [r7, #12]
 8008ada:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	683a      	ldr	r2, [r7, #0]
 8008ae0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	687a      	ldr	r2, [r7, #4]
 8008ae6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	1c5a      	adds	r2, r3, #1
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	601a      	str	r2, [r3, #0]
}
 8008af2:	bf00      	nop
 8008af4:	3714      	adds	r7, #20
 8008af6:	46bd      	mov	sp, r7
 8008af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afc:	4770      	bx	lr

08008afe <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008afe:	b480      	push	{r7}
 8008b00:	b085      	sub	sp, #20
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	691b      	ldr	r3, [r3, #16]
 8008b0a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	687a      	ldr	r2, [r7, #4]
 8008b12:	6892      	ldr	r2, [r2, #8]
 8008b14:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	689b      	ldr	r3, [r3, #8]
 8008b1a:	687a      	ldr	r2, [r7, #4]
 8008b1c:	6852      	ldr	r2, [r2, #4]
 8008b1e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	429a      	cmp	r2, r3
 8008b28:	d103      	bne.n	8008b32 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	689a      	ldr	r2, [r3, #8]
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2200      	movs	r2, #0
 8008b36:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	1e5a      	subs	r2, r3, #1
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3714      	adds	r7, #20
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b50:	4770      	bx	lr
	...

08008b54 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b084      	sub	sp, #16
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d10a      	bne.n	8008b7e <xQueueGenericReset+0x2a>
	__asm volatile
 8008b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b6c:	f383 8811 	msr	BASEPRI, r3
 8008b70:	f3bf 8f6f 	isb	sy
 8008b74:	f3bf 8f4f 	dsb	sy
 8008b78:	60bb      	str	r3, [r7, #8]
}
 8008b7a:	bf00      	nop
 8008b7c:	e7fe      	b.n	8008b7c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008b7e:	f002 f8d1 	bl	800ad24 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681a      	ldr	r2, [r3, #0]
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b8a:	68f9      	ldr	r1, [r7, #12]
 8008b8c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008b8e:	fb01 f303 	mul.w	r3, r1, r3
 8008b92:	441a      	add	r2, r3
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681a      	ldr	r2, [r3, #0]
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681a      	ldr	r2, [r3, #0]
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bae:	3b01      	subs	r3, #1
 8008bb0:	68f9      	ldr	r1, [r7, #12]
 8008bb2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008bb4:	fb01 f303 	mul.w	r3, r1, r3
 8008bb8:	441a      	add	r2, r3
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	22ff      	movs	r2, #255	; 0xff
 8008bc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	22ff      	movs	r2, #255	; 0xff
 8008bca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d114      	bne.n	8008bfe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	691b      	ldr	r3, [r3, #16]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d01a      	beq.n	8008c12 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	3310      	adds	r3, #16
 8008be0:	4618      	mov	r0, r3
 8008be2:	f001 f8e1 	bl	8009da8 <xTaskRemoveFromEventList>
 8008be6:	4603      	mov	r3, r0
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d012      	beq.n	8008c12 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008bec:	4b0c      	ldr	r3, [pc, #48]	; (8008c20 <xQueueGenericReset+0xcc>)
 8008bee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bf2:	601a      	str	r2, [r3, #0]
 8008bf4:	f3bf 8f4f 	dsb	sy
 8008bf8:	f3bf 8f6f 	isb	sy
 8008bfc:	e009      	b.n	8008c12 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	3310      	adds	r3, #16
 8008c02:	4618      	mov	r0, r3
 8008c04:	f7ff fef1 	bl	80089ea <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	3324      	adds	r3, #36	; 0x24
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f7ff feec 	bl	80089ea <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008c12:	f002 f8b7 	bl	800ad84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008c16:	2301      	movs	r3, #1
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3710      	adds	r7, #16
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}
 8008c20:	e000ed04 	.word	0xe000ed04

08008c24 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b08e      	sub	sp, #56	; 0x38
 8008c28:	af02      	add	r7, sp, #8
 8008c2a:	60f8      	str	r0, [r7, #12]
 8008c2c:	60b9      	str	r1, [r7, #8]
 8008c2e:	607a      	str	r2, [r7, #4]
 8008c30:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d10a      	bne.n	8008c4e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c3c:	f383 8811 	msr	BASEPRI, r3
 8008c40:	f3bf 8f6f 	isb	sy
 8008c44:	f3bf 8f4f 	dsb	sy
 8008c48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008c4a:	bf00      	nop
 8008c4c:	e7fe      	b.n	8008c4c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d10a      	bne.n	8008c6a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c58:	f383 8811 	msr	BASEPRI, r3
 8008c5c:	f3bf 8f6f 	isb	sy
 8008c60:	f3bf 8f4f 	dsb	sy
 8008c64:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008c66:	bf00      	nop
 8008c68:	e7fe      	b.n	8008c68 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d002      	beq.n	8008c76 <xQueueGenericCreateStatic+0x52>
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d001      	beq.n	8008c7a <xQueueGenericCreateStatic+0x56>
 8008c76:	2301      	movs	r3, #1
 8008c78:	e000      	b.n	8008c7c <xQueueGenericCreateStatic+0x58>
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d10a      	bne.n	8008c96 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c84:	f383 8811 	msr	BASEPRI, r3
 8008c88:	f3bf 8f6f 	isb	sy
 8008c8c:	f3bf 8f4f 	dsb	sy
 8008c90:	623b      	str	r3, [r7, #32]
}
 8008c92:	bf00      	nop
 8008c94:	e7fe      	b.n	8008c94 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d102      	bne.n	8008ca2 <xQueueGenericCreateStatic+0x7e>
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d101      	bne.n	8008ca6 <xQueueGenericCreateStatic+0x82>
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	e000      	b.n	8008ca8 <xQueueGenericCreateStatic+0x84>
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d10a      	bne.n	8008cc2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb0:	f383 8811 	msr	BASEPRI, r3
 8008cb4:	f3bf 8f6f 	isb	sy
 8008cb8:	f3bf 8f4f 	dsb	sy
 8008cbc:	61fb      	str	r3, [r7, #28]
}
 8008cbe:	bf00      	nop
 8008cc0:	e7fe      	b.n	8008cc0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008cc2:	2348      	movs	r3, #72	; 0x48
 8008cc4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	2b48      	cmp	r3, #72	; 0x48
 8008cca:	d00a      	beq.n	8008ce2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd0:	f383 8811 	msr	BASEPRI, r3
 8008cd4:	f3bf 8f6f 	isb	sy
 8008cd8:	f3bf 8f4f 	dsb	sy
 8008cdc:	61bb      	str	r3, [r7, #24]
}
 8008cde:	bf00      	nop
 8008ce0:	e7fe      	b.n	8008ce0 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d00d      	beq.n	8008d08 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cee:	2201      	movs	r2, #1
 8008cf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008cf4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cfa:	9300      	str	r3, [sp, #0]
 8008cfc:	4613      	mov	r3, r2
 8008cfe:	687a      	ldr	r2, [r7, #4]
 8008d00:	68b9      	ldr	r1, [r7, #8]
 8008d02:	68f8      	ldr	r0, [r7, #12]
 8008d04:	f000 f805 	bl	8008d12 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3730      	adds	r7, #48	; 0x30
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}

08008d12 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008d12:	b580      	push	{r7, lr}
 8008d14:	b084      	sub	sp, #16
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	60f8      	str	r0, [r7, #12]
 8008d1a:	60b9      	str	r1, [r7, #8]
 8008d1c:	607a      	str	r2, [r7, #4]
 8008d1e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d103      	bne.n	8008d2e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008d26:	69bb      	ldr	r3, [r7, #24]
 8008d28:	69ba      	ldr	r2, [r7, #24]
 8008d2a:	601a      	str	r2, [r3, #0]
 8008d2c:	e002      	b.n	8008d34 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008d2e:	69bb      	ldr	r3, [r7, #24]
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008d34:	69bb      	ldr	r3, [r7, #24]
 8008d36:	68fa      	ldr	r2, [r7, #12]
 8008d38:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008d3a:	69bb      	ldr	r3, [r7, #24]
 8008d3c:	68ba      	ldr	r2, [r7, #8]
 8008d3e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008d40:	2101      	movs	r1, #1
 8008d42:	69b8      	ldr	r0, [r7, #24]
 8008d44:	f7ff ff06 	bl	8008b54 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008d48:	bf00      	nop
 8008d4a:	3710      	adds	r7, #16
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}

08008d50 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b08e      	sub	sp, #56	; 0x38
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	60f8      	str	r0, [r7, #12]
 8008d58:	60b9      	str	r1, [r7, #8]
 8008d5a:	607a      	str	r2, [r7, #4]
 8008d5c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d10a      	bne.n	8008d82 <xQueueGenericSend+0x32>
	__asm volatile
 8008d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d70:	f383 8811 	msr	BASEPRI, r3
 8008d74:	f3bf 8f6f 	isb	sy
 8008d78:	f3bf 8f4f 	dsb	sy
 8008d7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008d7e:	bf00      	nop
 8008d80:	e7fe      	b.n	8008d80 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d103      	bne.n	8008d90 <xQueueGenericSend+0x40>
 8008d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d101      	bne.n	8008d94 <xQueueGenericSend+0x44>
 8008d90:	2301      	movs	r3, #1
 8008d92:	e000      	b.n	8008d96 <xQueueGenericSend+0x46>
 8008d94:	2300      	movs	r3, #0
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d10a      	bne.n	8008db0 <xQueueGenericSend+0x60>
	__asm volatile
 8008d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d9e:	f383 8811 	msr	BASEPRI, r3
 8008da2:	f3bf 8f6f 	isb	sy
 8008da6:	f3bf 8f4f 	dsb	sy
 8008daa:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008dac:	bf00      	nop
 8008dae:	e7fe      	b.n	8008dae <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	2b02      	cmp	r3, #2
 8008db4:	d103      	bne.n	8008dbe <xQueueGenericSend+0x6e>
 8008db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dba:	2b01      	cmp	r3, #1
 8008dbc:	d101      	bne.n	8008dc2 <xQueueGenericSend+0x72>
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	e000      	b.n	8008dc4 <xQueueGenericSend+0x74>
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d10a      	bne.n	8008dde <xQueueGenericSend+0x8e>
	__asm volatile
 8008dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dcc:	f383 8811 	msr	BASEPRI, r3
 8008dd0:	f3bf 8f6f 	isb	sy
 8008dd4:	f3bf 8f4f 	dsb	sy
 8008dd8:	623b      	str	r3, [r7, #32]
}
 8008dda:	bf00      	nop
 8008ddc:	e7fe      	b.n	8008ddc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008dde:	f001 fa07 	bl	800a1f0 <xTaskGetSchedulerState>
 8008de2:	4603      	mov	r3, r0
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d102      	bne.n	8008dee <xQueueGenericSend+0x9e>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d101      	bne.n	8008df2 <xQueueGenericSend+0xa2>
 8008dee:	2301      	movs	r3, #1
 8008df0:	e000      	b.n	8008df4 <xQueueGenericSend+0xa4>
 8008df2:	2300      	movs	r3, #0
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d10a      	bne.n	8008e0e <xQueueGenericSend+0xbe>
	__asm volatile
 8008df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dfc:	f383 8811 	msr	BASEPRI, r3
 8008e00:	f3bf 8f6f 	isb	sy
 8008e04:	f3bf 8f4f 	dsb	sy
 8008e08:	61fb      	str	r3, [r7, #28]
}
 8008e0a:	bf00      	nop
 8008e0c:	e7fe      	b.n	8008e0c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008e0e:	f001 ff89 	bl	800ad24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d302      	bcc.n	8008e24 <xQueueGenericSend+0xd4>
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	2b02      	cmp	r3, #2
 8008e22:	d129      	bne.n	8008e78 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008e24:	683a      	ldr	r2, [r7, #0]
 8008e26:	68b9      	ldr	r1, [r7, #8]
 8008e28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e2a:	f000 fa07 	bl	800923c <prvCopyDataToQueue>
 8008e2e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d010      	beq.n	8008e5a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e3a:	3324      	adds	r3, #36	; 0x24
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f000 ffb3 	bl	8009da8 <xTaskRemoveFromEventList>
 8008e42:	4603      	mov	r3, r0
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d013      	beq.n	8008e70 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008e48:	4b3f      	ldr	r3, [pc, #252]	; (8008f48 <xQueueGenericSend+0x1f8>)
 8008e4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e4e:	601a      	str	r2, [r3, #0]
 8008e50:	f3bf 8f4f 	dsb	sy
 8008e54:	f3bf 8f6f 	isb	sy
 8008e58:	e00a      	b.n	8008e70 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d007      	beq.n	8008e70 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008e60:	4b39      	ldr	r3, [pc, #228]	; (8008f48 <xQueueGenericSend+0x1f8>)
 8008e62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e66:	601a      	str	r2, [r3, #0]
 8008e68:	f3bf 8f4f 	dsb	sy
 8008e6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008e70:	f001 ff88 	bl	800ad84 <vPortExitCritical>
				return pdPASS;
 8008e74:	2301      	movs	r3, #1
 8008e76:	e063      	b.n	8008f40 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d103      	bne.n	8008e86 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008e7e:	f001 ff81 	bl	800ad84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008e82:	2300      	movs	r3, #0
 8008e84:	e05c      	b.n	8008f40 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d106      	bne.n	8008e9a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008e8c:	f107 0314 	add.w	r3, r7, #20
 8008e90:	4618      	mov	r0, r3
 8008e92:	f001 f84d 	bl	8009f30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008e96:	2301      	movs	r3, #1
 8008e98:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008e9a:	f001 ff73 	bl	800ad84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008e9e:	f000 fd5f 	bl	8009960 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ea2:	f001 ff3f 	bl	800ad24 <vPortEnterCritical>
 8008ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008eac:	b25b      	sxtb	r3, r3
 8008eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eb2:	d103      	bne.n	8008ebc <xQueueGenericSend+0x16c>
 8008eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ebe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ec2:	b25b      	sxtb	r3, r3
 8008ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ec8:	d103      	bne.n	8008ed2 <xQueueGenericSend+0x182>
 8008eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ecc:	2200      	movs	r2, #0
 8008ece:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ed2:	f001 ff57 	bl	800ad84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008ed6:	1d3a      	adds	r2, r7, #4
 8008ed8:	f107 0314 	add.w	r3, r7, #20
 8008edc:	4611      	mov	r1, r2
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f001 f83c 	bl	8009f5c <xTaskCheckForTimeOut>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d124      	bne.n	8008f34 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008eea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008eec:	f000 fa9e 	bl	800942c <prvIsQueueFull>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d018      	beq.n	8008f28 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef8:	3310      	adds	r3, #16
 8008efa:	687a      	ldr	r2, [r7, #4]
 8008efc:	4611      	mov	r1, r2
 8008efe:	4618      	mov	r0, r3
 8008f00:	f000 ff02 	bl	8009d08 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008f04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f06:	f000 fa29 	bl	800935c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008f0a:	f000 fd37 	bl	800997c <xTaskResumeAll>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	f47f af7c 	bne.w	8008e0e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008f16:	4b0c      	ldr	r3, [pc, #48]	; (8008f48 <xQueueGenericSend+0x1f8>)
 8008f18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f1c:	601a      	str	r2, [r3, #0]
 8008f1e:	f3bf 8f4f 	dsb	sy
 8008f22:	f3bf 8f6f 	isb	sy
 8008f26:	e772      	b.n	8008e0e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008f28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f2a:	f000 fa17 	bl	800935c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008f2e:	f000 fd25 	bl	800997c <xTaskResumeAll>
 8008f32:	e76c      	b.n	8008e0e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008f34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f36:	f000 fa11 	bl	800935c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008f3a:	f000 fd1f 	bl	800997c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008f3e:	2300      	movs	r3, #0
		}
	}
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3738      	adds	r7, #56	; 0x38
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}
 8008f48:	e000ed04 	.word	0xe000ed04

08008f4c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b08e      	sub	sp, #56	; 0x38
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	60f8      	str	r0, [r7, #12]
 8008f54:	60b9      	str	r1, [r7, #8]
 8008f56:	607a      	str	r2, [r7, #4]
 8008f58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d10a      	bne.n	8008f7a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f68:	f383 8811 	msr	BASEPRI, r3
 8008f6c:	f3bf 8f6f 	isb	sy
 8008f70:	f3bf 8f4f 	dsb	sy
 8008f74:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008f76:	bf00      	nop
 8008f78:	e7fe      	b.n	8008f78 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d103      	bne.n	8008f88 <xQueueGenericSendFromISR+0x3c>
 8008f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d101      	bne.n	8008f8c <xQueueGenericSendFromISR+0x40>
 8008f88:	2301      	movs	r3, #1
 8008f8a:	e000      	b.n	8008f8e <xQueueGenericSendFromISR+0x42>
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d10a      	bne.n	8008fa8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f96:	f383 8811 	msr	BASEPRI, r3
 8008f9a:	f3bf 8f6f 	isb	sy
 8008f9e:	f3bf 8f4f 	dsb	sy
 8008fa2:	623b      	str	r3, [r7, #32]
}
 8008fa4:	bf00      	nop
 8008fa6:	e7fe      	b.n	8008fa6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	2b02      	cmp	r3, #2
 8008fac:	d103      	bne.n	8008fb6 <xQueueGenericSendFromISR+0x6a>
 8008fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fb2:	2b01      	cmp	r3, #1
 8008fb4:	d101      	bne.n	8008fba <xQueueGenericSendFromISR+0x6e>
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	e000      	b.n	8008fbc <xQueueGenericSendFromISR+0x70>
 8008fba:	2300      	movs	r3, #0
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d10a      	bne.n	8008fd6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc4:	f383 8811 	msr	BASEPRI, r3
 8008fc8:	f3bf 8f6f 	isb	sy
 8008fcc:	f3bf 8f4f 	dsb	sy
 8008fd0:	61fb      	str	r3, [r7, #28]
}
 8008fd2:	bf00      	nop
 8008fd4:	e7fe      	b.n	8008fd4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008fd6:	f001 ff87 	bl	800aee8 <vPortValidateInterruptPriority>
	__asm volatile
 8008fda:	f3ef 8211 	mrs	r2, BASEPRI
 8008fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe2:	f383 8811 	msr	BASEPRI, r3
 8008fe6:	f3bf 8f6f 	isb	sy
 8008fea:	f3bf 8f4f 	dsb	sy
 8008fee:	61ba      	str	r2, [r7, #24]
 8008ff0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008ff2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ffe:	429a      	cmp	r2, r3
 8009000:	d302      	bcc.n	8009008 <xQueueGenericSendFromISR+0xbc>
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	2b02      	cmp	r3, #2
 8009006:	d12c      	bne.n	8009062 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800900a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800900e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009012:	683a      	ldr	r2, [r7, #0]
 8009014:	68b9      	ldr	r1, [r7, #8]
 8009016:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009018:	f000 f910 	bl	800923c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800901c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009024:	d112      	bne.n	800904c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800902a:	2b00      	cmp	r3, #0
 800902c:	d016      	beq.n	800905c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800902e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009030:	3324      	adds	r3, #36	; 0x24
 8009032:	4618      	mov	r0, r3
 8009034:	f000 feb8 	bl	8009da8 <xTaskRemoveFromEventList>
 8009038:	4603      	mov	r3, r0
 800903a:	2b00      	cmp	r3, #0
 800903c:	d00e      	beq.n	800905c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d00b      	beq.n	800905c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2201      	movs	r2, #1
 8009048:	601a      	str	r2, [r3, #0]
 800904a:	e007      	b.n	800905c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800904c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009050:	3301      	adds	r3, #1
 8009052:	b2db      	uxtb	r3, r3
 8009054:	b25a      	sxtb	r2, r3
 8009056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009058:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800905c:	2301      	movs	r3, #1
 800905e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009060:	e001      	b.n	8009066 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009062:	2300      	movs	r3, #0
 8009064:	637b      	str	r3, [r7, #52]	; 0x34
 8009066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009068:	613b      	str	r3, [r7, #16]
	__asm volatile
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	f383 8811 	msr	BASEPRI, r3
}
 8009070:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009074:	4618      	mov	r0, r3
 8009076:	3738      	adds	r7, #56	; 0x38
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b08c      	sub	sp, #48	; 0x30
 8009080:	af00      	add	r7, sp, #0
 8009082:	60f8      	str	r0, [r7, #12]
 8009084:	60b9      	str	r1, [r7, #8]
 8009086:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009088:	2300      	movs	r3, #0
 800908a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009092:	2b00      	cmp	r3, #0
 8009094:	d10a      	bne.n	80090ac <xQueueReceive+0x30>
	__asm volatile
 8009096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800909a:	f383 8811 	msr	BASEPRI, r3
 800909e:	f3bf 8f6f 	isb	sy
 80090a2:	f3bf 8f4f 	dsb	sy
 80090a6:	623b      	str	r3, [r7, #32]
}
 80090a8:	bf00      	nop
 80090aa:	e7fe      	b.n	80090aa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d103      	bne.n	80090ba <xQueueReceive+0x3e>
 80090b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d101      	bne.n	80090be <xQueueReceive+0x42>
 80090ba:	2301      	movs	r3, #1
 80090bc:	e000      	b.n	80090c0 <xQueueReceive+0x44>
 80090be:	2300      	movs	r3, #0
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d10a      	bne.n	80090da <xQueueReceive+0x5e>
	__asm volatile
 80090c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c8:	f383 8811 	msr	BASEPRI, r3
 80090cc:	f3bf 8f6f 	isb	sy
 80090d0:	f3bf 8f4f 	dsb	sy
 80090d4:	61fb      	str	r3, [r7, #28]
}
 80090d6:	bf00      	nop
 80090d8:	e7fe      	b.n	80090d8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80090da:	f001 f889 	bl	800a1f0 <xTaskGetSchedulerState>
 80090de:	4603      	mov	r3, r0
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d102      	bne.n	80090ea <xQueueReceive+0x6e>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d101      	bne.n	80090ee <xQueueReceive+0x72>
 80090ea:	2301      	movs	r3, #1
 80090ec:	e000      	b.n	80090f0 <xQueueReceive+0x74>
 80090ee:	2300      	movs	r3, #0
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d10a      	bne.n	800910a <xQueueReceive+0x8e>
	__asm volatile
 80090f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f8:	f383 8811 	msr	BASEPRI, r3
 80090fc:	f3bf 8f6f 	isb	sy
 8009100:	f3bf 8f4f 	dsb	sy
 8009104:	61bb      	str	r3, [r7, #24]
}
 8009106:	bf00      	nop
 8009108:	e7fe      	b.n	8009108 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800910a:	f001 fe0b 	bl	800ad24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800910e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009112:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009116:	2b00      	cmp	r3, #0
 8009118:	d01f      	beq.n	800915a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800911a:	68b9      	ldr	r1, [r7, #8]
 800911c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800911e:	f000 f8f7 	bl	8009310 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009124:	1e5a      	subs	r2, r3, #1
 8009126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009128:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800912a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800912c:	691b      	ldr	r3, [r3, #16]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d00f      	beq.n	8009152 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009134:	3310      	adds	r3, #16
 8009136:	4618      	mov	r0, r3
 8009138:	f000 fe36 	bl	8009da8 <xTaskRemoveFromEventList>
 800913c:	4603      	mov	r3, r0
 800913e:	2b00      	cmp	r3, #0
 8009140:	d007      	beq.n	8009152 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009142:	4b3d      	ldr	r3, [pc, #244]	; (8009238 <xQueueReceive+0x1bc>)
 8009144:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009148:	601a      	str	r2, [r3, #0]
 800914a:	f3bf 8f4f 	dsb	sy
 800914e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009152:	f001 fe17 	bl	800ad84 <vPortExitCritical>
				return pdPASS;
 8009156:	2301      	movs	r3, #1
 8009158:	e069      	b.n	800922e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d103      	bne.n	8009168 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009160:	f001 fe10 	bl	800ad84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009164:	2300      	movs	r3, #0
 8009166:	e062      	b.n	800922e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800916a:	2b00      	cmp	r3, #0
 800916c:	d106      	bne.n	800917c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800916e:	f107 0310 	add.w	r3, r7, #16
 8009172:	4618      	mov	r0, r3
 8009174:	f000 fedc 	bl	8009f30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009178:	2301      	movs	r3, #1
 800917a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800917c:	f001 fe02 	bl	800ad84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009180:	f000 fbee 	bl	8009960 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009184:	f001 fdce 	bl	800ad24 <vPortEnterCritical>
 8009188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800918a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800918e:	b25b      	sxtb	r3, r3
 8009190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009194:	d103      	bne.n	800919e <xQueueReceive+0x122>
 8009196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009198:	2200      	movs	r2, #0
 800919a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800919e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80091a4:	b25b      	sxtb	r3, r3
 80091a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091aa:	d103      	bne.n	80091b4 <xQueueReceive+0x138>
 80091ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ae:	2200      	movs	r2, #0
 80091b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80091b4:	f001 fde6 	bl	800ad84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80091b8:	1d3a      	adds	r2, r7, #4
 80091ba:	f107 0310 	add.w	r3, r7, #16
 80091be:	4611      	mov	r1, r2
 80091c0:	4618      	mov	r0, r3
 80091c2:	f000 fecb 	bl	8009f5c <xTaskCheckForTimeOut>
 80091c6:	4603      	mov	r3, r0
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d123      	bne.n	8009214 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80091cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091ce:	f000 f917 	bl	8009400 <prvIsQueueEmpty>
 80091d2:	4603      	mov	r3, r0
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d017      	beq.n	8009208 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80091d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091da:	3324      	adds	r3, #36	; 0x24
 80091dc:	687a      	ldr	r2, [r7, #4]
 80091de:	4611      	mov	r1, r2
 80091e0:	4618      	mov	r0, r3
 80091e2:	f000 fd91 	bl	8009d08 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80091e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091e8:	f000 f8b8 	bl	800935c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80091ec:	f000 fbc6 	bl	800997c <xTaskResumeAll>
 80091f0:	4603      	mov	r3, r0
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d189      	bne.n	800910a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80091f6:	4b10      	ldr	r3, [pc, #64]	; (8009238 <xQueueReceive+0x1bc>)
 80091f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091fc:	601a      	str	r2, [r3, #0]
 80091fe:	f3bf 8f4f 	dsb	sy
 8009202:	f3bf 8f6f 	isb	sy
 8009206:	e780      	b.n	800910a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009208:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800920a:	f000 f8a7 	bl	800935c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800920e:	f000 fbb5 	bl	800997c <xTaskResumeAll>
 8009212:	e77a      	b.n	800910a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009214:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009216:	f000 f8a1 	bl	800935c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800921a:	f000 fbaf 	bl	800997c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800921e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009220:	f000 f8ee 	bl	8009400 <prvIsQueueEmpty>
 8009224:	4603      	mov	r3, r0
 8009226:	2b00      	cmp	r3, #0
 8009228:	f43f af6f 	beq.w	800910a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800922c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800922e:	4618      	mov	r0, r3
 8009230:	3730      	adds	r7, #48	; 0x30
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
 8009236:	bf00      	nop
 8009238:	e000ed04 	.word	0xe000ed04

0800923c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b086      	sub	sp, #24
 8009240:	af00      	add	r7, sp, #0
 8009242:	60f8      	str	r0, [r7, #12]
 8009244:	60b9      	str	r1, [r7, #8]
 8009246:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009248:	2300      	movs	r3, #0
 800924a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009250:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009256:	2b00      	cmp	r3, #0
 8009258:	d10d      	bne.n	8009276 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d14d      	bne.n	80092fe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	685b      	ldr	r3, [r3, #4]
 8009266:	4618      	mov	r0, r3
 8009268:	f000 ffe0 	bl	800a22c <xTaskPriorityDisinherit>
 800926c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	2200      	movs	r2, #0
 8009272:	605a      	str	r2, [r3, #4]
 8009274:	e043      	b.n	80092fe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d119      	bne.n	80092b0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	6898      	ldr	r0, [r3, #8]
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009284:	461a      	mov	r2, r3
 8009286:	68b9      	ldr	r1, [r7, #8]
 8009288:	f002 fe40 	bl	800bf0c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	689a      	ldr	r2, [r3, #8]
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009294:	441a      	add	r2, r3
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	689a      	ldr	r2, [r3, #8]
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	429a      	cmp	r2, r3
 80092a4:	d32b      	bcc.n	80092fe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681a      	ldr	r2, [r3, #0]
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	609a      	str	r2, [r3, #8]
 80092ae:	e026      	b.n	80092fe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	68d8      	ldr	r0, [r3, #12]
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092b8:	461a      	mov	r2, r3
 80092ba:	68b9      	ldr	r1, [r7, #8]
 80092bc:	f002 fe26 	bl	800bf0c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	68da      	ldr	r2, [r3, #12]
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092c8:	425b      	negs	r3, r3
 80092ca:	441a      	add	r2, r3
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	68da      	ldr	r2, [r3, #12]
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	429a      	cmp	r2, r3
 80092da:	d207      	bcs.n	80092ec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	685a      	ldr	r2, [r3, #4]
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092e4:	425b      	negs	r3, r3
 80092e6:	441a      	add	r2, r3
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2b02      	cmp	r3, #2
 80092f0:	d105      	bne.n	80092fe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d002      	beq.n	80092fe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	3b01      	subs	r3, #1
 80092fc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	1c5a      	adds	r2, r3, #1
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009306:	697b      	ldr	r3, [r7, #20]
}
 8009308:	4618      	mov	r0, r3
 800930a:	3718      	adds	r7, #24
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}

08009310 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b082      	sub	sp, #8
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800931e:	2b00      	cmp	r3, #0
 8009320:	d018      	beq.n	8009354 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	68da      	ldr	r2, [r3, #12]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800932a:	441a      	add	r2, r3
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	68da      	ldr	r2, [r3, #12]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	685b      	ldr	r3, [r3, #4]
 8009338:	429a      	cmp	r2, r3
 800933a:	d303      	bcc.n	8009344 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681a      	ldr	r2, [r3, #0]
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	68d9      	ldr	r1, [r3, #12]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800934c:	461a      	mov	r2, r3
 800934e:	6838      	ldr	r0, [r7, #0]
 8009350:	f002 fddc 	bl	800bf0c <memcpy>
	}
}
 8009354:	bf00      	nop
 8009356:	3708      	adds	r7, #8
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}

0800935c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b084      	sub	sp, #16
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009364:	f001 fcde 	bl	800ad24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800936e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009370:	e011      	b.n	8009396 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009376:	2b00      	cmp	r3, #0
 8009378:	d012      	beq.n	80093a0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	3324      	adds	r3, #36	; 0x24
 800937e:	4618      	mov	r0, r3
 8009380:	f000 fd12 	bl	8009da8 <xTaskRemoveFromEventList>
 8009384:	4603      	mov	r3, r0
 8009386:	2b00      	cmp	r3, #0
 8009388:	d001      	beq.n	800938e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800938a:	f000 fe49 	bl	800a020 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800938e:	7bfb      	ldrb	r3, [r7, #15]
 8009390:	3b01      	subs	r3, #1
 8009392:	b2db      	uxtb	r3, r3
 8009394:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009396:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800939a:	2b00      	cmp	r3, #0
 800939c:	dce9      	bgt.n	8009372 <prvUnlockQueue+0x16>
 800939e:	e000      	b.n	80093a2 <prvUnlockQueue+0x46>
					break;
 80093a0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	22ff      	movs	r2, #255	; 0xff
 80093a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80093aa:	f001 fceb 	bl	800ad84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80093ae:	f001 fcb9 	bl	800ad24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80093b8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80093ba:	e011      	b.n	80093e0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	691b      	ldr	r3, [r3, #16]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d012      	beq.n	80093ea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	3310      	adds	r3, #16
 80093c8:	4618      	mov	r0, r3
 80093ca:	f000 fced 	bl	8009da8 <xTaskRemoveFromEventList>
 80093ce:	4603      	mov	r3, r0
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d001      	beq.n	80093d8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80093d4:	f000 fe24 	bl	800a020 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80093d8:	7bbb      	ldrb	r3, [r7, #14]
 80093da:	3b01      	subs	r3, #1
 80093dc:	b2db      	uxtb	r3, r3
 80093de:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80093e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	dce9      	bgt.n	80093bc <prvUnlockQueue+0x60>
 80093e8:	e000      	b.n	80093ec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80093ea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	22ff      	movs	r2, #255	; 0xff
 80093f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80093f4:	f001 fcc6 	bl	800ad84 <vPortExitCritical>
}
 80093f8:	bf00      	nop
 80093fa:	3710      	adds	r7, #16
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}

08009400 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b084      	sub	sp, #16
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009408:	f001 fc8c 	bl	800ad24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009410:	2b00      	cmp	r3, #0
 8009412:	d102      	bne.n	800941a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009414:	2301      	movs	r3, #1
 8009416:	60fb      	str	r3, [r7, #12]
 8009418:	e001      	b.n	800941e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800941a:	2300      	movs	r3, #0
 800941c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800941e:	f001 fcb1 	bl	800ad84 <vPortExitCritical>

	return xReturn;
 8009422:	68fb      	ldr	r3, [r7, #12]
}
 8009424:	4618      	mov	r0, r3
 8009426:	3710      	adds	r7, #16
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}

0800942c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b084      	sub	sp, #16
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009434:	f001 fc76 	bl	800ad24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009440:	429a      	cmp	r2, r3
 8009442:	d102      	bne.n	800944a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009444:	2301      	movs	r3, #1
 8009446:	60fb      	str	r3, [r7, #12]
 8009448:	e001      	b.n	800944e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800944a:	2300      	movs	r3, #0
 800944c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800944e:	f001 fc99 	bl	800ad84 <vPortExitCritical>

	return xReturn;
 8009452:	68fb      	ldr	r3, [r7, #12]
}
 8009454:	4618      	mov	r0, r3
 8009456:	3710      	adds	r7, #16
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}

0800945c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800945c:	b480      	push	{r7}
 800945e:	b085      	sub	sp, #20
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009466:	2300      	movs	r3, #0
 8009468:	60fb      	str	r3, [r7, #12]
 800946a:	e014      	b.n	8009496 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800946c:	4a0f      	ldr	r2, [pc, #60]	; (80094ac <vQueueAddToRegistry+0x50>)
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d10b      	bne.n	8009490 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009478:	490c      	ldr	r1, [pc, #48]	; (80094ac <vQueueAddToRegistry+0x50>)
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	683a      	ldr	r2, [r7, #0]
 800947e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009482:	4a0a      	ldr	r2, [pc, #40]	; (80094ac <vQueueAddToRegistry+0x50>)
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	00db      	lsls	r3, r3, #3
 8009488:	4413      	add	r3, r2
 800948a:	687a      	ldr	r2, [r7, #4]
 800948c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800948e:	e006      	b.n	800949e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	3301      	adds	r3, #1
 8009494:	60fb      	str	r3, [r7, #12]
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	2b07      	cmp	r3, #7
 800949a:	d9e7      	bls.n	800946c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800949c:	bf00      	nop
 800949e:	bf00      	nop
 80094a0:	3714      	adds	r7, #20
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr
 80094aa:	bf00      	nop
 80094ac:	20000ff4 	.word	0x20000ff4

080094b0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b086      	sub	sp, #24
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	60f8      	str	r0, [r7, #12]
 80094b8:	60b9      	str	r1, [r7, #8]
 80094ba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80094c0:	f001 fc30 	bl	800ad24 <vPortEnterCritical>
 80094c4:	697b      	ldr	r3, [r7, #20]
 80094c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80094ca:	b25b      	sxtb	r3, r3
 80094cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094d0:	d103      	bne.n	80094da <vQueueWaitForMessageRestricted+0x2a>
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	2200      	movs	r2, #0
 80094d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094e0:	b25b      	sxtb	r3, r3
 80094e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094e6:	d103      	bne.n	80094f0 <vQueueWaitForMessageRestricted+0x40>
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	2200      	movs	r2, #0
 80094ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80094f0:	f001 fc48 	bl	800ad84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d106      	bne.n	800950a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80094fc:	697b      	ldr	r3, [r7, #20]
 80094fe:	3324      	adds	r3, #36	; 0x24
 8009500:	687a      	ldr	r2, [r7, #4]
 8009502:	68b9      	ldr	r1, [r7, #8]
 8009504:	4618      	mov	r0, r3
 8009506:	f000 fc23 	bl	8009d50 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800950a:	6978      	ldr	r0, [r7, #20]
 800950c:	f7ff ff26 	bl	800935c <prvUnlockQueue>
	}
 8009510:	bf00      	nop
 8009512:	3718      	adds	r7, #24
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}

08009518 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009518:	b580      	push	{r7, lr}
 800951a:	b08e      	sub	sp, #56	; 0x38
 800951c:	af04      	add	r7, sp, #16
 800951e:	60f8      	str	r0, [r7, #12]
 8009520:	60b9      	str	r1, [r7, #8]
 8009522:	607a      	str	r2, [r7, #4]
 8009524:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009528:	2b00      	cmp	r3, #0
 800952a:	d10a      	bne.n	8009542 <xTaskCreateStatic+0x2a>
	__asm volatile
 800952c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009530:	f383 8811 	msr	BASEPRI, r3
 8009534:	f3bf 8f6f 	isb	sy
 8009538:	f3bf 8f4f 	dsb	sy
 800953c:	623b      	str	r3, [r7, #32]
}
 800953e:	bf00      	nop
 8009540:	e7fe      	b.n	8009540 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009544:	2b00      	cmp	r3, #0
 8009546:	d10a      	bne.n	800955e <xTaskCreateStatic+0x46>
	__asm volatile
 8009548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800954c:	f383 8811 	msr	BASEPRI, r3
 8009550:	f3bf 8f6f 	isb	sy
 8009554:	f3bf 8f4f 	dsb	sy
 8009558:	61fb      	str	r3, [r7, #28]
}
 800955a:	bf00      	nop
 800955c:	e7fe      	b.n	800955c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800955e:	2358      	movs	r3, #88	; 0x58
 8009560:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	2b58      	cmp	r3, #88	; 0x58
 8009566:	d00a      	beq.n	800957e <xTaskCreateStatic+0x66>
	__asm volatile
 8009568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800956c:	f383 8811 	msr	BASEPRI, r3
 8009570:	f3bf 8f6f 	isb	sy
 8009574:	f3bf 8f4f 	dsb	sy
 8009578:	61bb      	str	r3, [r7, #24]
}
 800957a:	bf00      	nop
 800957c:	e7fe      	b.n	800957c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800957e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009580:	2b00      	cmp	r3, #0
 8009582:	d01e      	beq.n	80095c2 <xTaskCreateStatic+0xaa>
 8009584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009586:	2b00      	cmp	r3, #0
 8009588:	d01b      	beq.n	80095c2 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800958a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800958c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800958e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009590:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009592:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009596:	2202      	movs	r2, #2
 8009598:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800959c:	2300      	movs	r3, #0
 800959e:	9303      	str	r3, [sp, #12]
 80095a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a2:	9302      	str	r3, [sp, #8]
 80095a4:	f107 0314 	add.w	r3, r7, #20
 80095a8:	9301      	str	r3, [sp, #4]
 80095aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ac:	9300      	str	r3, [sp, #0]
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	687a      	ldr	r2, [r7, #4]
 80095b2:	68b9      	ldr	r1, [r7, #8]
 80095b4:	68f8      	ldr	r0, [r7, #12]
 80095b6:	f000 f850 	bl	800965a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80095ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80095bc:	f000 f8cc 	bl	8009758 <prvAddNewTaskToReadyList>
 80095c0:	e001      	b.n	80095c6 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80095c2:	2300      	movs	r3, #0
 80095c4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80095c6:	697b      	ldr	r3, [r7, #20]
	}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3728      	adds	r7, #40	; 0x28
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b08c      	sub	sp, #48	; 0x30
 80095d4:	af04      	add	r7, sp, #16
 80095d6:	60f8      	str	r0, [r7, #12]
 80095d8:	60b9      	str	r1, [r7, #8]
 80095da:	603b      	str	r3, [r7, #0]
 80095dc:	4613      	mov	r3, r2
 80095de:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095e0:	88fb      	ldrh	r3, [r7, #6]
 80095e2:	009b      	lsls	r3, r3, #2
 80095e4:	4618      	mov	r0, r3
 80095e6:	f001 fcbf 	bl	800af68 <pvPortMalloc>
 80095ea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d00e      	beq.n	8009610 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80095f2:	2058      	movs	r0, #88	; 0x58
 80095f4:	f001 fcb8 	bl	800af68 <pvPortMalloc>
 80095f8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80095fa:	69fb      	ldr	r3, [r7, #28]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d003      	beq.n	8009608 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009600:	69fb      	ldr	r3, [r7, #28]
 8009602:	697a      	ldr	r2, [r7, #20]
 8009604:	631a      	str	r2, [r3, #48]	; 0x30
 8009606:	e005      	b.n	8009614 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009608:	6978      	ldr	r0, [r7, #20]
 800960a:	f001 fd71 	bl	800b0f0 <vPortFree>
 800960e:	e001      	b.n	8009614 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009610:	2300      	movs	r3, #0
 8009612:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009614:	69fb      	ldr	r3, [r7, #28]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d017      	beq.n	800964a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800961a:	69fb      	ldr	r3, [r7, #28]
 800961c:	2200      	movs	r2, #0
 800961e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009622:	88fa      	ldrh	r2, [r7, #6]
 8009624:	2300      	movs	r3, #0
 8009626:	9303      	str	r3, [sp, #12]
 8009628:	69fb      	ldr	r3, [r7, #28]
 800962a:	9302      	str	r3, [sp, #8]
 800962c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800962e:	9301      	str	r3, [sp, #4]
 8009630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009632:	9300      	str	r3, [sp, #0]
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	68b9      	ldr	r1, [r7, #8]
 8009638:	68f8      	ldr	r0, [r7, #12]
 800963a:	f000 f80e 	bl	800965a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800963e:	69f8      	ldr	r0, [r7, #28]
 8009640:	f000 f88a 	bl	8009758 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009644:	2301      	movs	r3, #1
 8009646:	61bb      	str	r3, [r7, #24]
 8009648:	e002      	b.n	8009650 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800964a:	f04f 33ff 	mov.w	r3, #4294967295
 800964e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009650:	69bb      	ldr	r3, [r7, #24]
	}
 8009652:	4618      	mov	r0, r3
 8009654:	3720      	adds	r7, #32
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}

0800965a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800965a:	b580      	push	{r7, lr}
 800965c:	b088      	sub	sp, #32
 800965e:	af00      	add	r7, sp, #0
 8009660:	60f8      	str	r0, [r7, #12]
 8009662:	60b9      	str	r1, [r7, #8]
 8009664:	607a      	str	r2, [r7, #4]
 8009666:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8009668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800966a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009672:	3b01      	subs	r3, #1
 8009674:	009b      	lsls	r3, r3, #2
 8009676:	4413      	add	r3, r2
 8009678:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800967a:	69bb      	ldr	r3, [r7, #24]
 800967c:	f023 0307 	bic.w	r3, r3, #7
 8009680:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009682:	69bb      	ldr	r3, [r7, #24]
 8009684:	f003 0307 	and.w	r3, r3, #7
 8009688:	2b00      	cmp	r3, #0
 800968a:	d00a      	beq.n	80096a2 <prvInitialiseNewTask+0x48>
	__asm volatile
 800968c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009690:	f383 8811 	msr	BASEPRI, r3
 8009694:	f3bf 8f6f 	isb	sy
 8009698:	f3bf 8f4f 	dsb	sy
 800969c:	617b      	str	r3, [r7, #20]
}
 800969e:	bf00      	nop
 80096a0:	e7fe      	b.n	80096a0 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80096a2:	2300      	movs	r3, #0
 80096a4:	61fb      	str	r3, [r7, #28]
 80096a6:	e012      	b.n	80096ce <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80096a8:	68ba      	ldr	r2, [r7, #8]
 80096aa:	69fb      	ldr	r3, [r7, #28]
 80096ac:	4413      	add	r3, r2
 80096ae:	7819      	ldrb	r1, [r3, #0]
 80096b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096b2:	69fb      	ldr	r3, [r7, #28]
 80096b4:	4413      	add	r3, r2
 80096b6:	3334      	adds	r3, #52	; 0x34
 80096b8:	460a      	mov	r2, r1
 80096ba:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80096bc:	68ba      	ldr	r2, [r7, #8]
 80096be:	69fb      	ldr	r3, [r7, #28]
 80096c0:	4413      	add	r3, r2
 80096c2:	781b      	ldrb	r3, [r3, #0]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d006      	beq.n	80096d6 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80096c8:	69fb      	ldr	r3, [r7, #28]
 80096ca:	3301      	adds	r3, #1
 80096cc:	61fb      	str	r3, [r7, #28]
 80096ce:	69fb      	ldr	r3, [r7, #28]
 80096d0:	2b11      	cmp	r3, #17
 80096d2:	d9e9      	bls.n	80096a8 <prvInitialiseNewTask+0x4e>
 80096d4:	e000      	b.n	80096d8 <prvInitialiseNewTask+0x7e>
		{
			break;
 80096d6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80096d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096da:	2200      	movs	r2, #0
 80096dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80096e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e2:	2b06      	cmp	r3, #6
 80096e4:	d901      	bls.n	80096ea <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80096e6:	2306      	movs	r3, #6
 80096e8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80096ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80096ee:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80096f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80096f4:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 80096f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096f8:	2200      	movs	r2, #0
 80096fa:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80096fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096fe:	3304      	adds	r3, #4
 8009700:	4618      	mov	r0, r3
 8009702:	f7ff f992 	bl	8008a2a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009708:	3318      	adds	r3, #24
 800970a:	4618      	mov	r0, r3
 800970c:	f7ff f98d 	bl	8008a2a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009712:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009714:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009718:	f1c3 0207 	rsb	r2, r3, #7
 800971c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800971e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009722:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009724:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009728:	2200      	movs	r2, #0
 800972a:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800972c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800972e:	2200      	movs	r2, #0
 8009730:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009734:	683a      	ldr	r2, [r7, #0]
 8009736:	68f9      	ldr	r1, [r7, #12]
 8009738:	69b8      	ldr	r0, [r7, #24]
 800973a:	f001 f9c9 	bl	800aad0 <pxPortInitialiseStack>
 800973e:	4602      	mov	r2, r0
 8009740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009742:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8009744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009746:	2b00      	cmp	r3, #0
 8009748:	d002      	beq.n	8009750 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800974a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800974c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800974e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009750:	bf00      	nop
 8009752:	3720      	adds	r7, #32
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}

08009758 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b082      	sub	sp, #8
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009760:	f001 fae0 	bl	800ad24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009764:	4b2a      	ldr	r3, [pc, #168]	; (8009810 <prvAddNewTaskToReadyList+0xb8>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	3301      	adds	r3, #1
 800976a:	4a29      	ldr	r2, [pc, #164]	; (8009810 <prvAddNewTaskToReadyList+0xb8>)
 800976c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800976e:	4b29      	ldr	r3, [pc, #164]	; (8009814 <prvAddNewTaskToReadyList+0xbc>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d109      	bne.n	800978a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009776:	4a27      	ldr	r2, [pc, #156]	; (8009814 <prvAddNewTaskToReadyList+0xbc>)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800977c:	4b24      	ldr	r3, [pc, #144]	; (8009810 <prvAddNewTaskToReadyList+0xb8>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	2b01      	cmp	r3, #1
 8009782:	d110      	bne.n	80097a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009784:	f000 fc70 	bl	800a068 <prvInitialiseTaskLists>
 8009788:	e00d      	b.n	80097a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800978a:	4b23      	ldr	r3, [pc, #140]	; (8009818 <prvAddNewTaskToReadyList+0xc0>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d109      	bne.n	80097a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009792:	4b20      	ldr	r3, [pc, #128]	; (8009814 <prvAddNewTaskToReadyList+0xbc>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800979c:	429a      	cmp	r2, r3
 800979e:	d802      	bhi.n	80097a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80097a0:	4a1c      	ldr	r2, [pc, #112]	; (8009814 <prvAddNewTaskToReadyList+0xbc>)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80097a6:	4b1d      	ldr	r3, [pc, #116]	; (800981c <prvAddNewTaskToReadyList+0xc4>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	3301      	adds	r3, #1
 80097ac:	4a1b      	ldr	r2, [pc, #108]	; (800981c <prvAddNewTaskToReadyList+0xc4>)
 80097ae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097b4:	2201      	movs	r2, #1
 80097b6:	409a      	lsls	r2, r3
 80097b8:	4b19      	ldr	r3, [pc, #100]	; (8009820 <prvAddNewTaskToReadyList+0xc8>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4313      	orrs	r3, r2
 80097be:	4a18      	ldr	r2, [pc, #96]	; (8009820 <prvAddNewTaskToReadyList+0xc8>)
 80097c0:	6013      	str	r3, [r2, #0]
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097c6:	4613      	mov	r3, r2
 80097c8:	009b      	lsls	r3, r3, #2
 80097ca:	4413      	add	r3, r2
 80097cc:	009b      	lsls	r3, r3, #2
 80097ce:	4a15      	ldr	r2, [pc, #84]	; (8009824 <prvAddNewTaskToReadyList+0xcc>)
 80097d0:	441a      	add	r2, r3
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	3304      	adds	r3, #4
 80097d6:	4619      	mov	r1, r3
 80097d8:	4610      	mov	r0, r2
 80097da:	f7ff f933 	bl	8008a44 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80097de:	f001 fad1 	bl	800ad84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80097e2:	4b0d      	ldr	r3, [pc, #52]	; (8009818 <prvAddNewTaskToReadyList+0xc0>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d00e      	beq.n	8009808 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80097ea:	4b0a      	ldr	r3, [pc, #40]	; (8009814 <prvAddNewTaskToReadyList+0xbc>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097f4:	429a      	cmp	r2, r3
 80097f6:	d207      	bcs.n	8009808 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80097f8:	4b0b      	ldr	r3, [pc, #44]	; (8009828 <prvAddNewTaskToReadyList+0xd0>)
 80097fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097fe:	601a      	str	r2, [r3, #0]
 8009800:	f3bf 8f4f 	dsb	sy
 8009804:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009808:	bf00      	nop
 800980a:	3708      	adds	r7, #8
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}
 8009810:	20001134 	.word	0x20001134
 8009814:	20001034 	.word	0x20001034
 8009818:	20001140 	.word	0x20001140
 800981c:	20001150 	.word	0x20001150
 8009820:	2000113c 	.word	0x2000113c
 8009824:	20001038 	.word	0x20001038
 8009828:	e000ed04 	.word	0xe000ed04

0800982c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800982c:	b580      	push	{r7, lr}
 800982e:	b084      	sub	sp, #16
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009834:	2300      	movs	r3, #0
 8009836:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d017      	beq.n	800986e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800983e:	4b13      	ldr	r3, [pc, #76]	; (800988c <vTaskDelay+0x60>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d00a      	beq.n	800985c <vTaskDelay+0x30>
	__asm volatile
 8009846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800984a:	f383 8811 	msr	BASEPRI, r3
 800984e:	f3bf 8f6f 	isb	sy
 8009852:	f3bf 8f4f 	dsb	sy
 8009856:	60bb      	str	r3, [r7, #8]
}
 8009858:	bf00      	nop
 800985a:	e7fe      	b.n	800985a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800985c:	f000 f880 	bl	8009960 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009860:	2100      	movs	r1, #0
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f000 fd68 	bl	800a338 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009868:	f000 f888 	bl	800997c <xTaskResumeAll>
 800986c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d107      	bne.n	8009884 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009874:	4b06      	ldr	r3, [pc, #24]	; (8009890 <vTaskDelay+0x64>)
 8009876:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800987a:	601a      	str	r2, [r3, #0]
 800987c:	f3bf 8f4f 	dsb	sy
 8009880:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009884:	bf00      	nop
 8009886:	3710      	adds	r7, #16
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}
 800988c:	2000115c 	.word	0x2000115c
 8009890:	e000ed04 	.word	0xe000ed04

08009894 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b08a      	sub	sp, #40	; 0x28
 8009898:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800989a:	2300      	movs	r3, #0
 800989c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800989e:	2300      	movs	r3, #0
 80098a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80098a2:	463a      	mov	r2, r7
 80098a4:	1d39      	adds	r1, r7, #4
 80098a6:	f107 0308 	add.w	r3, r7, #8
 80098aa:	4618      	mov	r0, r3
 80098ac:	f7f7 fd1c 	bl	80012e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80098b0:	6839      	ldr	r1, [r7, #0]
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	68ba      	ldr	r2, [r7, #8]
 80098b6:	9202      	str	r2, [sp, #8]
 80098b8:	9301      	str	r3, [sp, #4]
 80098ba:	2300      	movs	r3, #0
 80098bc:	9300      	str	r3, [sp, #0]
 80098be:	2300      	movs	r3, #0
 80098c0:	460a      	mov	r2, r1
 80098c2:	4921      	ldr	r1, [pc, #132]	; (8009948 <vTaskStartScheduler+0xb4>)
 80098c4:	4821      	ldr	r0, [pc, #132]	; (800994c <vTaskStartScheduler+0xb8>)
 80098c6:	f7ff fe27 	bl	8009518 <xTaskCreateStatic>
 80098ca:	4603      	mov	r3, r0
 80098cc:	4a20      	ldr	r2, [pc, #128]	; (8009950 <vTaskStartScheduler+0xbc>)
 80098ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80098d0:	4b1f      	ldr	r3, [pc, #124]	; (8009950 <vTaskStartScheduler+0xbc>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d002      	beq.n	80098de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80098d8:	2301      	movs	r3, #1
 80098da:	617b      	str	r3, [r7, #20]
 80098dc:	e001      	b.n	80098e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80098de:	2300      	movs	r3, #0
 80098e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	d102      	bne.n	80098ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80098e8:	f000 fd8c 	bl	800a404 <xTimerCreateTimerTask>
 80098ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	2b01      	cmp	r3, #1
 80098f2:	d116      	bne.n	8009922 <vTaskStartScheduler+0x8e>
	__asm volatile
 80098f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f8:	f383 8811 	msr	BASEPRI, r3
 80098fc:	f3bf 8f6f 	isb	sy
 8009900:	f3bf 8f4f 	dsb	sy
 8009904:	613b      	str	r3, [r7, #16]
}
 8009906:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009908:	4b12      	ldr	r3, [pc, #72]	; (8009954 <vTaskStartScheduler+0xc0>)
 800990a:	f04f 32ff 	mov.w	r2, #4294967295
 800990e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009910:	4b11      	ldr	r3, [pc, #68]	; (8009958 <vTaskStartScheduler+0xc4>)
 8009912:	2201      	movs	r2, #1
 8009914:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8009916:	4b11      	ldr	r3, [pc, #68]	; (800995c <vTaskStartScheduler+0xc8>)
 8009918:	2200      	movs	r2, #0
 800991a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800991c:	f001 f960 	bl	800abe0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009920:	e00e      	b.n	8009940 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009928:	d10a      	bne.n	8009940 <vTaskStartScheduler+0xac>
	__asm volatile
 800992a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800992e:	f383 8811 	msr	BASEPRI, r3
 8009932:	f3bf 8f6f 	isb	sy
 8009936:	f3bf 8f4f 	dsb	sy
 800993a:	60fb      	str	r3, [r7, #12]
}
 800993c:	bf00      	nop
 800993e:	e7fe      	b.n	800993e <vTaskStartScheduler+0xaa>
}
 8009940:	bf00      	nop
 8009942:	3718      	adds	r7, #24
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}
 8009948:	0800f24c 	.word	0x0800f24c
 800994c:	0800a039 	.word	0x0800a039
 8009950:	20001158 	.word	0x20001158
 8009954:	20001154 	.word	0x20001154
 8009958:	20001140 	.word	0x20001140
 800995c:	20001138 	.word	0x20001138

08009960 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009960:	b480      	push	{r7}
 8009962:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009964:	4b04      	ldr	r3, [pc, #16]	; (8009978 <vTaskSuspendAll+0x18>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	3301      	adds	r3, #1
 800996a:	4a03      	ldr	r2, [pc, #12]	; (8009978 <vTaskSuspendAll+0x18>)
 800996c:	6013      	str	r3, [r2, #0]
}
 800996e:	bf00      	nop
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr
 8009978:	2000115c 	.word	0x2000115c

0800997c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b084      	sub	sp, #16
 8009980:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009982:	2300      	movs	r3, #0
 8009984:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009986:	2300      	movs	r3, #0
 8009988:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800998a:	4b41      	ldr	r3, [pc, #260]	; (8009a90 <xTaskResumeAll+0x114>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d10a      	bne.n	80099a8 <xTaskResumeAll+0x2c>
	__asm volatile
 8009992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009996:	f383 8811 	msr	BASEPRI, r3
 800999a:	f3bf 8f6f 	isb	sy
 800999e:	f3bf 8f4f 	dsb	sy
 80099a2:	603b      	str	r3, [r7, #0]
}
 80099a4:	bf00      	nop
 80099a6:	e7fe      	b.n	80099a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80099a8:	f001 f9bc 	bl	800ad24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80099ac:	4b38      	ldr	r3, [pc, #224]	; (8009a90 <xTaskResumeAll+0x114>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	3b01      	subs	r3, #1
 80099b2:	4a37      	ldr	r2, [pc, #220]	; (8009a90 <xTaskResumeAll+0x114>)
 80099b4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099b6:	4b36      	ldr	r3, [pc, #216]	; (8009a90 <xTaskResumeAll+0x114>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d161      	bne.n	8009a82 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80099be:	4b35      	ldr	r3, [pc, #212]	; (8009a94 <xTaskResumeAll+0x118>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d05d      	beq.n	8009a82 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80099c6:	e02e      	b.n	8009a26 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80099c8:	4b33      	ldr	r3, [pc, #204]	; (8009a98 <xTaskResumeAll+0x11c>)
 80099ca:	68db      	ldr	r3, [r3, #12]
 80099cc:	68db      	ldr	r3, [r3, #12]
 80099ce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	3318      	adds	r3, #24
 80099d4:	4618      	mov	r0, r3
 80099d6:	f7ff f892 	bl	8008afe <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	3304      	adds	r3, #4
 80099de:	4618      	mov	r0, r3
 80099e0:	f7ff f88d 	bl	8008afe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099e8:	2201      	movs	r2, #1
 80099ea:	409a      	lsls	r2, r3
 80099ec:	4b2b      	ldr	r3, [pc, #172]	; (8009a9c <xTaskResumeAll+0x120>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4313      	orrs	r3, r2
 80099f2:	4a2a      	ldr	r2, [pc, #168]	; (8009a9c <xTaskResumeAll+0x120>)
 80099f4:	6013      	str	r3, [r2, #0]
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099fa:	4613      	mov	r3, r2
 80099fc:	009b      	lsls	r3, r3, #2
 80099fe:	4413      	add	r3, r2
 8009a00:	009b      	lsls	r3, r3, #2
 8009a02:	4a27      	ldr	r2, [pc, #156]	; (8009aa0 <xTaskResumeAll+0x124>)
 8009a04:	441a      	add	r2, r3
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	3304      	adds	r3, #4
 8009a0a:	4619      	mov	r1, r3
 8009a0c:	4610      	mov	r0, r2
 8009a0e:	f7ff f819 	bl	8008a44 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a16:	4b23      	ldr	r3, [pc, #140]	; (8009aa4 <xTaskResumeAll+0x128>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	d302      	bcc.n	8009a26 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009a20:	4b21      	ldr	r3, [pc, #132]	; (8009aa8 <xTaskResumeAll+0x12c>)
 8009a22:	2201      	movs	r2, #1
 8009a24:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009a26:	4b1c      	ldr	r3, [pc, #112]	; (8009a98 <xTaskResumeAll+0x11c>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d1cc      	bne.n	80099c8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d001      	beq.n	8009a38 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009a34:	f000 fbb6 	bl	800a1a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009a38:	4b1c      	ldr	r3, [pc, #112]	; (8009aac <xTaskResumeAll+0x130>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d010      	beq.n	8009a66 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009a44:	f000 f846 	bl	8009ad4 <xTaskIncrementTick>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d002      	beq.n	8009a54 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8009a4e:	4b16      	ldr	r3, [pc, #88]	; (8009aa8 <xTaskResumeAll+0x12c>)
 8009a50:	2201      	movs	r2, #1
 8009a52:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	3b01      	subs	r3, #1
 8009a58:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d1f1      	bne.n	8009a44 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8009a60:	4b12      	ldr	r3, [pc, #72]	; (8009aac <xTaskResumeAll+0x130>)
 8009a62:	2200      	movs	r2, #0
 8009a64:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009a66:	4b10      	ldr	r3, [pc, #64]	; (8009aa8 <xTaskResumeAll+0x12c>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d009      	beq.n	8009a82 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009a6e:	2301      	movs	r3, #1
 8009a70:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009a72:	4b0f      	ldr	r3, [pc, #60]	; (8009ab0 <xTaskResumeAll+0x134>)
 8009a74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a78:	601a      	str	r2, [r3, #0]
 8009a7a:	f3bf 8f4f 	dsb	sy
 8009a7e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009a82:	f001 f97f 	bl	800ad84 <vPortExitCritical>

	return xAlreadyYielded;
 8009a86:	68bb      	ldr	r3, [r7, #8]
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3710      	adds	r7, #16
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}
 8009a90:	2000115c 	.word	0x2000115c
 8009a94:	20001134 	.word	0x20001134
 8009a98:	200010f4 	.word	0x200010f4
 8009a9c:	2000113c 	.word	0x2000113c
 8009aa0:	20001038 	.word	0x20001038
 8009aa4:	20001034 	.word	0x20001034
 8009aa8:	20001148 	.word	0x20001148
 8009aac:	20001144 	.word	0x20001144
 8009ab0:	e000ed04 	.word	0xe000ed04

08009ab4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b083      	sub	sp, #12
 8009ab8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009aba:	4b05      	ldr	r3, [pc, #20]	; (8009ad0 <xTaskGetTickCount+0x1c>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009ac0:	687b      	ldr	r3, [r7, #4]
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	370c      	adds	r7, #12
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009acc:	4770      	bx	lr
 8009ace:	bf00      	nop
 8009ad0:	20001138 	.word	0x20001138

08009ad4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b086      	sub	sp, #24
 8009ad8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009ada:	2300      	movs	r3, #0
 8009adc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ade:	4b51      	ldr	r3, [pc, #324]	; (8009c24 <xTaskIncrementTick+0x150>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	f040 808d 	bne.w	8009c02 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009ae8:	4b4f      	ldr	r3, [pc, #316]	; (8009c28 <xTaskIncrementTick+0x154>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	3301      	adds	r3, #1
 8009aee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009af0:	4a4d      	ldr	r2, [pc, #308]	; (8009c28 <xTaskIncrementTick+0x154>)
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d120      	bne.n	8009b3e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009afc:	4b4b      	ldr	r3, [pc, #300]	; (8009c2c <xTaskIncrementTick+0x158>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d00a      	beq.n	8009b1c <xTaskIncrementTick+0x48>
	__asm volatile
 8009b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b0a:	f383 8811 	msr	BASEPRI, r3
 8009b0e:	f3bf 8f6f 	isb	sy
 8009b12:	f3bf 8f4f 	dsb	sy
 8009b16:	603b      	str	r3, [r7, #0]
}
 8009b18:	bf00      	nop
 8009b1a:	e7fe      	b.n	8009b1a <xTaskIncrementTick+0x46>
 8009b1c:	4b43      	ldr	r3, [pc, #268]	; (8009c2c <xTaskIncrementTick+0x158>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	60fb      	str	r3, [r7, #12]
 8009b22:	4b43      	ldr	r3, [pc, #268]	; (8009c30 <xTaskIncrementTick+0x15c>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	4a41      	ldr	r2, [pc, #260]	; (8009c2c <xTaskIncrementTick+0x158>)
 8009b28:	6013      	str	r3, [r2, #0]
 8009b2a:	4a41      	ldr	r2, [pc, #260]	; (8009c30 <xTaskIncrementTick+0x15c>)
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	6013      	str	r3, [r2, #0]
 8009b30:	4b40      	ldr	r3, [pc, #256]	; (8009c34 <xTaskIncrementTick+0x160>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	3301      	adds	r3, #1
 8009b36:	4a3f      	ldr	r2, [pc, #252]	; (8009c34 <xTaskIncrementTick+0x160>)
 8009b38:	6013      	str	r3, [r2, #0]
 8009b3a:	f000 fb33 	bl	800a1a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009b3e:	4b3e      	ldr	r3, [pc, #248]	; (8009c38 <xTaskIncrementTick+0x164>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	693a      	ldr	r2, [r7, #16]
 8009b44:	429a      	cmp	r2, r3
 8009b46:	d34d      	bcc.n	8009be4 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b48:	4b38      	ldr	r3, [pc, #224]	; (8009c2c <xTaskIncrementTick+0x158>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d101      	bne.n	8009b56 <xTaskIncrementTick+0x82>
 8009b52:	2301      	movs	r3, #1
 8009b54:	e000      	b.n	8009b58 <xTaskIncrementTick+0x84>
 8009b56:	2300      	movs	r3, #0
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d004      	beq.n	8009b66 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b5c:	4b36      	ldr	r3, [pc, #216]	; (8009c38 <xTaskIncrementTick+0x164>)
 8009b5e:	f04f 32ff 	mov.w	r2, #4294967295
 8009b62:	601a      	str	r2, [r3, #0]
					break;
 8009b64:	e03e      	b.n	8009be4 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009b66:	4b31      	ldr	r3, [pc, #196]	; (8009c2c <xTaskIncrementTick+0x158>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	68db      	ldr	r3, [r3, #12]
 8009b6c:	68db      	ldr	r3, [r3, #12]
 8009b6e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	685b      	ldr	r3, [r3, #4]
 8009b74:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009b76:	693a      	ldr	r2, [r7, #16]
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	429a      	cmp	r2, r3
 8009b7c:	d203      	bcs.n	8009b86 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009b7e:	4a2e      	ldr	r2, [pc, #184]	; (8009c38 <xTaskIncrementTick+0x164>)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6013      	str	r3, [r2, #0]
						break;
 8009b84:	e02e      	b.n	8009be4 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	3304      	adds	r3, #4
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f7fe ffb7 	bl	8008afe <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d004      	beq.n	8009ba2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	3318      	adds	r3, #24
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f7fe ffae 	bl	8008afe <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba6:	2201      	movs	r2, #1
 8009ba8:	409a      	lsls	r2, r3
 8009baa:	4b24      	ldr	r3, [pc, #144]	; (8009c3c <xTaskIncrementTick+0x168>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	4313      	orrs	r3, r2
 8009bb0:	4a22      	ldr	r2, [pc, #136]	; (8009c3c <xTaskIncrementTick+0x168>)
 8009bb2:	6013      	str	r3, [r2, #0]
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bb8:	4613      	mov	r3, r2
 8009bba:	009b      	lsls	r3, r3, #2
 8009bbc:	4413      	add	r3, r2
 8009bbe:	009b      	lsls	r3, r3, #2
 8009bc0:	4a1f      	ldr	r2, [pc, #124]	; (8009c40 <xTaskIncrementTick+0x16c>)
 8009bc2:	441a      	add	r2, r3
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	3304      	adds	r3, #4
 8009bc8:	4619      	mov	r1, r3
 8009bca:	4610      	mov	r0, r2
 8009bcc:	f7fe ff3a 	bl	8008a44 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bd4:	4b1b      	ldr	r3, [pc, #108]	; (8009c44 <xTaskIncrementTick+0x170>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bda:	429a      	cmp	r2, r3
 8009bdc:	d3b4      	bcc.n	8009b48 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009bde:	2301      	movs	r3, #1
 8009be0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009be2:	e7b1      	b.n	8009b48 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009be4:	4b17      	ldr	r3, [pc, #92]	; (8009c44 <xTaskIncrementTick+0x170>)
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bea:	4915      	ldr	r1, [pc, #84]	; (8009c40 <xTaskIncrementTick+0x16c>)
 8009bec:	4613      	mov	r3, r2
 8009bee:	009b      	lsls	r3, r3, #2
 8009bf0:	4413      	add	r3, r2
 8009bf2:	009b      	lsls	r3, r3, #2
 8009bf4:	440b      	add	r3, r1
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	2b01      	cmp	r3, #1
 8009bfa:	d907      	bls.n	8009c0c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	617b      	str	r3, [r7, #20]
 8009c00:	e004      	b.n	8009c0c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009c02:	4b11      	ldr	r3, [pc, #68]	; (8009c48 <xTaskIncrementTick+0x174>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	3301      	adds	r3, #1
 8009c08:	4a0f      	ldr	r2, [pc, #60]	; (8009c48 <xTaskIncrementTick+0x174>)
 8009c0a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009c0c:	4b0f      	ldr	r3, [pc, #60]	; (8009c4c <xTaskIncrementTick+0x178>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d001      	beq.n	8009c18 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8009c14:	2301      	movs	r3, #1
 8009c16:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009c18:	697b      	ldr	r3, [r7, #20]
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3718      	adds	r7, #24
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
 8009c22:	bf00      	nop
 8009c24:	2000115c 	.word	0x2000115c
 8009c28:	20001138 	.word	0x20001138
 8009c2c:	200010ec 	.word	0x200010ec
 8009c30:	200010f0 	.word	0x200010f0
 8009c34:	2000114c 	.word	0x2000114c
 8009c38:	20001154 	.word	0x20001154
 8009c3c:	2000113c 	.word	0x2000113c
 8009c40:	20001038 	.word	0x20001038
 8009c44:	20001034 	.word	0x20001034
 8009c48:	20001144 	.word	0x20001144
 8009c4c:	20001148 	.word	0x20001148

08009c50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009c50:	b480      	push	{r7}
 8009c52:	b087      	sub	sp, #28
 8009c54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009c56:	4b27      	ldr	r3, [pc, #156]	; (8009cf4 <vTaskSwitchContext+0xa4>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d003      	beq.n	8009c66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009c5e:	4b26      	ldr	r3, [pc, #152]	; (8009cf8 <vTaskSwitchContext+0xa8>)
 8009c60:	2201      	movs	r2, #1
 8009c62:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009c64:	e03f      	b.n	8009ce6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8009c66:	4b24      	ldr	r3, [pc, #144]	; (8009cf8 <vTaskSwitchContext+0xa8>)
 8009c68:	2200      	movs	r2, #0
 8009c6a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009c6c:	4b23      	ldr	r3, [pc, #140]	; (8009cfc <vTaskSwitchContext+0xac>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	fab3 f383 	clz	r3, r3
 8009c78:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009c7a:	7afb      	ldrb	r3, [r7, #11]
 8009c7c:	f1c3 031f 	rsb	r3, r3, #31
 8009c80:	617b      	str	r3, [r7, #20]
 8009c82:	491f      	ldr	r1, [pc, #124]	; (8009d00 <vTaskSwitchContext+0xb0>)
 8009c84:	697a      	ldr	r2, [r7, #20]
 8009c86:	4613      	mov	r3, r2
 8009c88:	009b      	lsls	r3, r3, #2
 8009c8a:	4413      	add	r3, r2
 8009c8c:	009b      	lsls	r3, r3, #2
 8009c8e:	440b      	add	r3, r1
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d10a      	bne.n	8009cac <vTaskSwitchContext+0x5c>
	__asm volatile
 8009c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c9a:	f383 8811 	msr	BASEPRI, r3
 8009c9e:	f3bf 8f6f 	isb	sy
 8009ca2:	f3bf 8f4f 	dsb	sy
 8009ca6:	607b      	str	r3, [r7, #4]
}
 8009ca8:	bf00      	nop
 8009caa:	e7fe      	b.n	8009caa <vTaskSwitchContext+0x5a>
 8009cac:	697a      	ldr	r2, [r7, #20]
 8009cae:	4613      	mov	r3, r2
 8009cb0:	009b      	lsls	r3, r3, #2
 8009cb2:	4413      	add	r3, r2
 8009cb4:	009b      	lsls	r3, r3, #2
 8009cb6:	4a12      	ldr	r2, [pc, #72]	; (8009d00 <vTaskSwitchContext+0xb0>)
 8009cb8:	4413      	add	r3, r2
 8009cba:	613b      	str	r3, [r7, #16]
 8009cbc:	693b      	ldr	r3, [r7, #16]
 8009cbe:	685b      	ldr	r3, [r3, #4]
 8009cc0:	685a      	ldr	r2, [r3, #4]
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	605a      	str	r2, [r3, #4]
 8009cc6:	693b      	ldr	r3, [r7, #16]
 8009cc8:	685a      	ldr	r2, [r3, #4]
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	3308      	adds	r3, #8
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	d104      	bne.n	8009cdc <vTaskSwitchContext+0x8c>
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	685b      	ldr	r3, [r3, #4]
 8009cd6:	685a      	ldr	r2, [r3, #4]
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	605a      	str	r2, [r3, #4]
 8009cdc:	693b      	ldr	r3, [r7, #16]
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	68db      	ldr	r3, [r3, #12]
 8009ce2:	4a08      	ldr	r2, [pc, #32]	; (8009d04 <vTaskSwitchContext+0xb4>)
 8009ce4:	6013      	str	r3, [r2, #0]
}
 8009ce6:	bf00      	nop
 8009ce8:	371c      	adds	r7, #28
 8009cea:	46bd      	mov	sp, r7
 8009cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf0:	4770      	bx	lr
 8009cf2:	bf00      	nop
 8009cf4:	2000115c 	.word	0x2000115c
 8009cf8:	20001148 	.word	0x20001148
 8009cfc:	2000113c 	.word	0x2000113c
 8009d00:	20001038 	.word	0x20001038
 8009d04:	20001034 	.word	0x20001034

08009d08 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b084      	sub	sp, #16
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
 8009d10:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d10a      	bne.n	8009d2e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d1c:	f383 8811 	msr	BASEPRI, r3
 8009d20:	f3bf 8f6f 	isb	sy
 8009d24:	f3bf 8f4f 	dsb	sy
 8009d28:	60fb      	str	r3, [r7, #12]
}
 8009d2a:	bf00      	nop
 8009d2c:	e7fe      	b.n	8009d2c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009d2e:	4b07      	ldr	r3, [pc, #28]	; (8009d4c <vTaskPlaceOnEventList+0x44>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	3318      	adds	r3, #24
 8009d34:	4619      	mov	r1, r3
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f7fe fea8 	bl	8008a8c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009d3c:	2101      	movs	r1, #1
 8009d3e:	6838      	ldr	r0, [r7, #0]
 8009d40:	f000 fafa 	bl	800a338 <prvAddCurrentTaskToDelayedList>
}
 8009d44:	bf00      	nop
 8009d46:	3710      	adds	r7, #16
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}
 8009d4c:	20001034 	.word	0x20001034

08009d50 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b086      	sub	sp, #24
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	60f8      	str	r0, [r7, #12]
 8009d58:	60b9      	str	r1, [r7, #8]
 8009d5a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d10a      	bne.n	8009d78 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d66:	f383 8811 	msr	BASEPRI, r3
 8009d6a:	f3bf 8f6f 	isb	sy
 8009d6e:	f3bf 8f4f 	dsb	sy
 8009d72:	617b      	str	r3, [r7, #20]
}
 8009d74:	bf00      	nop
 8009d76:	e7fe      	b.n	8009d76 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009d78:	4b0a      	ldr	r3, [pc, #40]	; (8009da4 <vTaskPlaceOnEventListRestricted+0x54>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	3318      	adds	r3, #24
 8009d7e:	4619      	mov	r1, r3
 8009d80:	68f8      	ldr	r0, [r7, #12]
 8009d82:	f7fe fe5f 	bl	8008a44 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d002      	beq.n	8009d92 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8009d90:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009d92:	6879      	ldr	r1, [r7, #4]
 8009d94:	68b8      	ldr	r0, [r7, #8]
 8009d96:	f000 facf 	bl	800a338 <prvAddCurrentTaskToDelayedList>
	}
 8009d9a:	bf00      	nop
 8009d9c:	3718      	adds	r7, #24
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}
 8009da2:	bf00      	nop
 8009da4:	20001034 	.word	0x20001034

08009da8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b086      	sub	sp, #24
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	68db      	ldr	r3, [r3, #12]
 8009db4:	68db      	ldr	r3, [r3, #12]
 8009db6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d10a      	bne.n	8009dd4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc2:	f383 8811 	msr	BASEPRI, r3
 8009dc6:	f3bf 8f6f 	isb	sy
 8009dca:	f3bf 8f4f 	dsb	sy
 8009dce:	60fb      	str	r3, [r7, #12]
}
 8009dd0:	bf00      	nop
 8009dd2:	e7fe      	b.n	8009dd2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009dd4:	693b      	ldr	r3, [r7, #16]
 8009dd6:	3318      	adds	r3, #24
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f7fe fe90 	bl	8008afe <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009dde:	4b1d      	ldr	r3, [pc, #116]	; (8009e54 <xTaskRemoveFromEventList+0xac>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d11c      	bne.n	8009e20 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	3304      	adds	r3, #4
 8009dea:	4618      	mov	r0, r3
 8009dec:	f7fe fe87 	bl	8008afe <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009df4:	2201      	movs	r2, #1
 8009df6:	409a      	lsls	r2, r3
 8009df8:	4b17      	ldr	r3, [pc, #92]	; (8009e58 <xTaskRemoveFromEventList+0xb0>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	4a16      	ldr	r2, [pc, #88]	; (8009e58 <xTaskRemoveFromEventList+0xb0>)
 8009e00:	6013      	str	r3, [r2, #0]
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e06:	4613      	mov	r3, r2
 8009e08:	009b      	lsls	r3, r3, #2
 8009e0a:	4413      	add	r3, r2
 8009e0c:	009b      	lsls	r3, r3, #2
 8009e0e:	4a13      	ldr	r2, [pc, #76]	; (8009e5c <xTaskRemoveFromEventList+0xb4>)
 8009e10:	441a      	add	r2, r3
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	3304      	adds	r3, #4
 8009e16:	4619      	mov	r1, r3
 8009e18:	4610      	mov	r0, r2
 8009e1a:	f7fe fe13 	bl	8008a44 <vListInsertEnd>
 8009e1e:	e005      	b.n	8009e2c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	3318      	adds	r3, #24
 8009e24:	4619      	mov	r1, r3
 8009e26:	480e      	ldr	r0, [pc, #56]	; (8009e60 <xTaskRemoveFromEventList+0xb8>)
 8009e28:	f7fe fe0c 	bl	8008a44 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e30:	4b0c      	ldr	r3, [pc, #48]	; (8009e64 <xTaskRemoveFromEventList+0xbc>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e36:	429a      	cmp	r2, r3
 8009e38:	d905      	bls.n	8009e46 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009e3e:	4b0a      	ldr	r3, [pc, #40]	; (8009e68 <xTaskRemoveFromEventList+0xc0>)
 8009e40:	2201      	movs	r2, #1
 8009e42:	601a      	str	r2, [r3, #0]
 8009e44:	e001      	b.n	8009e4a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8009e46:	2300      	movs	r3, #0
 8009e48:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8009e4a:	697b      	ldr	r3, [r7, #20]
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3718      	adds	r7, #24
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}
 8009e54:	2000115c 	.word	0x2000115c
 8009e58:	2000113c 	.word	0x2000113c
 8009e5c:	20001038 	.word	0x20001038
 8009e60:	200010f4 	.word	0x200010f4
 8009e64:	20001034 	.word	0x20001034
 8009e68:	20001148 	.word	0x20001148

08009e6c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b086      	sub	sp, #24
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
 8009e74:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8009e76:	4b29      	ldr	r3, [pc, #164]	; (8009f1c <vTaskRemoveFromUnorderedEventList+0xb0>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d10a      	bne.n	8009e94 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8009e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e82:	f383 8811 	msr	BASEPRI, r3
 8009e86:	f3bf 8f6f 	isb	sy
 8009e8a:	f3bf 8f4f 	dsb	sy
 8009e8e:	613b      	str	r3, [r7, #16]
}
 8009e90:	bf00      	nop
 8009e92:	e7fe      	b.n	8009e92 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	68db      	ldr	r3, [r3, #12]
 8009ea2:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8009ea4:	697b      	ldr	r3, [r7, #20]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d10a      	bne.n	8009ec0 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8009eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eae:	f383 8811 	msr	BASEPRI, r3
 8009eb2:	f3bf 8f6f 	isb	sy
 8009eb6:	f3bf 8f4f 	dsb	sy
 8009eba:	60fb      	str	r3, [r7, #12]
}
 8009ebc:	bf00      	nop
 8009ebe:	e7fe      	b.n	8009ebe <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f7fe fe1c 	bl	8008afe <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	3304      	adds	r3, #4
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f7fe fe17 	bl	8008afe <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8009ed0:	697b      	ldr	r3, [r7, #20]
 8009ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ed4:	2201      	movs	r2, #1
 8009ed6:	409a      	lsls	r2, r3
 8009ed8:	4b11      	ldr	r3, [pc, #68]	; (8009f20 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	4313      	orrs	r3, r2
 8009ede:	4a10      	ldr	r2, [pc, #64]	; (8009f20 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8009ee0:	6013      	str	r3, [r2, #0]
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ee6:	4613      	mov	r3, r2
 8009ee8:	009b      	lsls	r3, r3, #2
 8009eea:	4413      	add	r3, r2
 8009eec:	009b      	lsls	r3, r3, #2
 8009eee:	4a0d      	ldr	r2, [pc, #52]	; (8009f24 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8009ef0:	441a      	add	r2, r3
 8009ef2:	697b      	ldr	r3, [r7, #20]
 8009ef4:	3304      	adds	r3, #4
 8009ef6:	4619      	mov	r1, r3
 8009ef8:	4610      	mov	r0, r2
 8009efa:	f7fe fda3 	bl	8008a44 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f02:	4b09      	ldr	r3, [pc, #36]	; (8009f28 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d902      	bls.n	8009f12 <vTaskRemoveFromUnorderedEventList+0xa6>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8009f0c:	4b07      	ldr	r3, [pc, #28]	; (8009f2c <vTaskRemoveFromUnorderedEventList+0xc0>)
 8009f0e:	2201      	movs	r2, #1
 8009f10:	601a      	str	r2, [r3, #0]
	}
}
 8009f12:	bf00      	nop
 8009f14:	3718      	adds	r7, #24
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}
 8009f1a:	bf00      	nop
 8009f1c:	2000115c 	.word	0x2000115c
 8009f20:	2000113c 	.word	0x2000113c
 8009f24:	20001038 	.word	0x20001038
 8009f28:	20001034 	.word	0x20001034
 8009f2c:	20001148 	.word	0x20001148

08009f30 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009f30:	b480      	push	{r7}
 8009f32:	b083      	sub	sp, #12
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009f38:	4b06      	ldr	r3, [pc, #24]	; (8009f54 <vTaskInternalSetTimeOutState+0x24>)
 8009f3a:	681a      	ldr	r2, [r3, #0]
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009f40:	4b05      	ldr	r3, [pc, #20]	; (8009f58 <vTaskInternalSetTimeOutState+0x28>)
 8009f42:	681a      	ldr	r2, [r3, #0]
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	605a      	str	r2, [r3, #4]
}
 8009f48:	bf00      	nop
 8009f4a:	370c      	adds	r7, #12
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f52:	4770      	bx	lr
 8009f54:	2000114c 	.word	0x2000114c
 8009f58:	20001138 	.word	0x20001138

08009f5c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b088      	sub	sp, #32
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
 8009f64:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d10a      	bne.n	8009f82 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f70:	f383 8811 	msr	BASEPRI, r3
 8009f74:	f3bf 8f6f 	isb	sy
 8009f78:	f3bf 8f4f 	dsb	sy
 8009f7c:	613b      	str	r3, [r7, #16]
}
 8009f7e:	bf00      	nop
 8009f80:	e7fe      	b.n	8009f80 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d10a      	bne.n	8009f9e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f8c:	f383 8811 	msr	BASEPRI, r3
 8009f90:	f3bf 8f6f 	isb	sy
 8009f94:	f3bf 8f4f 	dsb	sy
 8009f98:	60fb      	str	r3, [r7, #12]
}
 8009f9a:	bf00      	nop
 8009f9c:	e7fe      	b.n	8009f9c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009f9e:	f000 fec1 	bl	800ad24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009fa2:	4b1d      	ldr	r3, [pc, #116]	; (800a018 <xTaskCheckForTimeOut+0xbc>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	685b      	ldr	r3, [r3, #4]
 8009fac:	69ba      	ldr	r2, [r7, #24]
 8009fae:	1ad3      	subs	r3, r2, r3
 8009fb0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fba:	d102      	bne.n	8009fc2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	61fb      	str	r3, [r7, #28]
 8009fc0:	e023      	b.n	800a00a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681a      	ldr	r2, [r3, #0]
 8009fc6:	4b15      	ldr	r3, [pc, #84]	; (800a01c <xTaskCheckForTimeOut+0xc0>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	429a      	cmp	r2, r3
 8009fcc:	d007      	beq.n	8009fde <xTaskCheckForTimeOut+0x82>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	685b      	ldr	r3, [r3, #4]
 8009fd2:	69ba      	ldr	r2, [r7, #24]
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	d302      	bcc.n	8009fde <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009fd8:	2301      	movs	r3, #1
 8009fda:	61fb      	str	r3, [r7, #28]
 8009fdc:	e015      	b.n	800a00a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	697a      	ldr	r2, [r7, #20]
 8009fe4:	429a      	cmp	r2, r3
 8009fe6:	d20b      	bcs.n	800a000 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	681a      	ldr	r2, [r3, #0]
 8009fec:	697b      	ldr	r3, [r7, #20]
 8009fee:	1ad2      	subs	r2, r2, r3
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f7ff ff9b 	bl	8009f30 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	61fb      	str	r3, [r7, #28]
 8009ffe:	e004      	b.n	800a00a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	2200      	movs	r2, #0
 800a004:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a006:	2301      	movs	r3, #1
 800a008:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a00a:	f000 febb 	bl	800ad84 <vPortExitCritical>

	return xReturn;
 800a00e:	69fb      	ldr	r3, [r7, #28]
}
 800a010:	4618      	mov	r0, r3
 800a012:	3720      	adds	r7, #32
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}
 800a018:	20001138 	.word	0x20001138
 800a01c:	2000114c 	.word	0x2000114c

0800a020 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a020:	b480      	push	{r7}
 800a022:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a024:	4b03      	ldr	r3, [pc, #12]	; (800a034 <vTaskMissedYield+0x14>)
 800a026:	2201      	movs	r2, #1
 800a028:	601a      	str	r2, [r3, #0]
}
 800a02a:	bf00      	nop
 800a02c:	46bd      	mov	sp, r7
 800a02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a032:	4770      	bx	lr
 800a034:	20001148 	.word	0x20001148

0800a038 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b082      	sub	sp, #8
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a040:	f000 f852 	bl	800a0e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a044:	4b06      	ldr	r3, [pc, #24]	; (800a060 <prvIdleTask+0x28>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	2b01      	cmp	r3, #1
 800a04a:	d9f9      	bls.n	800a040 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a04c:	4b05      	ldr	r3, [pc, #20]	; (800a064 <prvIdleTask+0x2c>)
 800a04e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a052:	601a      	str	r2, [r3, #0]
 800a054:	f3bf 8f4f 	dsb	sy
 800a058:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a05c:	e7f0      	b.n	800a040 <prvIdleTask+0x8>
 800a05e:	bf00      	nop
 800a060:	20001038 	.word	0x20001038
 800a064:	e000ed04 	.word	0xe000ed04

0800a068 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b082      	sub	sp, #8
 800a06c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a06e:	2300      	movs	r3, #0
 800a070:	607b      	str	r3, [r7, #4]
 800a072:	e00c      	b.n	800a08e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a074:	687a      	ldr	r2, [r7, #4]
 800a076:	4613      	mov	r3, r2
 800a078:	009b      	lsls	r3, r3, #2
 800a07a:	4413      	add	r3, r2
 800a07c:	009b      	lsls	r3, r3, #2
 800a07e:	4a12      	ldr	r2, [pc, #72]	; (800a0c8 <prvInitialiseTaskLists+0x60>)
 800a080:	4413      	add	r3, r2
 800a082:	4618      	mov	r0, r3
 800a084:	f7fe fcb1 	bl	80089ea <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	3301      	adds	r3, #1
 800a08c:	607b      	str	r3, [r7, #4]
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2b06      	cmp	r3, #6
 800a092:	d9ef      	bls.n	800a074 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a094:	480d      	ldr	r0, [pc, #52]	; (800a0cc <prvInitialiseTaskLists+0x64>)
 800a096:	f7fe fca8 	bl	80089ea <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a09a:	480d      	ldr	r0, [pc, #52]	; (800a0d0 <prvInitialiseTaskLists+0x68>)
 800a09c:	f7fe fca5 	bl	80089ea <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a0a0:	480c      	ldr	r0, [pc, #48]	; (800a0d4 <prvInitialiseTaskLists+0x6c>)
 800a0a2:	f7fe fca2 	bl	80089ea <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a0a6:	480c      	ldr	r0, [pc, #48]	; (800a0d8 <prvInitialiseTaskLists+0x70>)
 800a0a8:	f7fe fc9f 	bl	80089ea <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a0ac:	480b      	ldr	r0, [pc, #44]	; (800a0dc <prvInitialiseTaskLists+0x74>)
 800a0ae:	f7fe fc9c 	bl	80089ea <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a0b2:	4b0b      	ldr	r3, [pc, #44]	; (800a0e0 <prvInitialiseTaskLists+0x78>)
 800a0b4:	4a05      	ldr	r2, [pc, #20]	; (800a0cc <prvInitialiseTaskLists+0x64>)
 800a0b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a0b8:	4b0a      	ldr	r3, [pc, #40]	; (800a0e4 <prvInitialiseTaskLists+0x7c>)
 800a0ba:	4a05      	ldr	r2, [pc, #20]	; (800a0d0 <prvInitialiseTaskLists+0x68>)
 800a0bc:	601a      	str	r2, [r3, #0]
}
 800a0be:	bf00      	nop
 800a0c0:	3708      	adds	r7, #8
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}
 800a0c6:	bf00      	nop
 800a0c8:	20001038 	.word	0x20001038
 800a0cc:	200010c4 	.word	0x200010c4
 800a0d0:	200010d8 	.word	0x200010d8
 800a0d4:	200010f4 	.word	0x200010f4
 800a0d8:	20001108 	.word	0x20001108
 800a0dc:	20001120 	.word	0x20001120
 800a0e0:	200010ec 	.word	0x200010ec
 800a0e4:	200010f0 	.word	0x200010f0

0800a0e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b082      	sub	sp, #8
 800a0ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a0ee:	e019      	b.n	800a124 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a0f0:	f000 fe18 	bl	800ad24 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800a0f4:	4b10      	ldr	r3, [pc, #64]	; (800a138 <prvCheckTasksWaitingTermination+0x50>)
 800a0f6:	68db      	ldr	r3, [r3, #12]
 800a0f8:	68db      	ldr	r3, [r3, #12]
 800a0fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	3304      	adds	r3, #4
 800a100:	4618      	mov	r0, r3
 800a102:	f7fe fcfc 	bl	8008afe <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a106:	4b0d      	ldr	r3, [pc, #52]	; (800a13c <prvCheckTasksWaitingTermination+0x54>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	3b01      	subs	r3, #1
 800a10c:	4a0b      	ldr	r2, [pc, #44]	; (800a13c <prvCheckTasksWaitingTermination+0x54>)
 800a10e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a110:	4b0b      	ldr	r3, [pc, #44]	; (800a140 <prvCheckTasksWaitingTermination+0x58>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	3b01      	subs	r3, #1
 800a116:	4a0a      	ldr	r2, [pc, #40]	; (800a140 <prvCheckTasksWaitingTermination+0x58>)
 800a118:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a11a:	f000 fe33 	bl	800ad84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f000 f810 	bl	800a144 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a124:	4b06      	ldr	r3, [pc, #24]	; (800a140 <prvCheckTasksWaitingTermination+0x58>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d1e1      	bne.n	800a0f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a12c:	bf00      	nop
 800a12e:	bf00      	nop
 800a130:	3708      	adds	r7, #8
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}
 800a136:	bf00      	nop
 800a138:	20001108 	.word	0x20001108
 800a13c:	20001134 	.word	0x20001134
 800a140:	2000111c 	.word	0x2000111c

0800a144 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a144:	b580      	push	{r7, lr}
 800a146:	b084      	sub	sp, #16
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800a152:	2b00      	cmp	r3, #0
 800a154:	d108      	bne.n	800a168 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a15a:	4618      	mov	r0, r3
 800a15c:	f000 ffc8 	bl	800b0f0 <vPortFree>
				vPortFree( pxTCB );
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f000 ffc5 	bl	800b0f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a166:	e018      	b.n	800a19a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800a16e:	2b01      	cmp	r3, #1
 800a170:	d103      	bne.n	800a17a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f000 ffbc 	bl	800b0f0 <vPortFree>
	}
 800a178:	e00f      	b.n	800a19a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800a180:	2b02      	cmp	r3, #2
 800a182:	d00a      	beq.n	800a19a <prvDeleteTCB+0x56>
	__asm volatile
 800a184:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a188:	f383 8811 	msr	BASEPRI, r3
 800a18c:	f3bf 8f6f 	isb	sy
 800a190:	f3bf 8f4f 	dsb	sy
 800a194:	60fb      	str	r3, [r7, #12]
}
 800a196:	bf00      	nop
 800a198:	e7fe      	b.n	800a198 <prvDeleteTCB+0x54>
	}
 800a19a:	bf00      	nop
 800a19c:	3710      	adds	r7, #16
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}
	...

0800a1a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b083      	sub	sp, #12
 800a1a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a1aa:	4b0f      	ldr	r3, [pc, #60]	; (800a1e8 <prvResetNextTaskUnblockTime+0x44>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d101      	bne.n	800a1b8 <prvResetNextTaskUnblockTime+0x14>
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	e000      	b.n	800a1ba <prvResetNextTaskUnblockTime+0x16>
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d004      	beq.n	800a1c8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a1be:	4b0b      	ldr	r3, [pc, #44]	; (800a1ec <prvResetNextTaskUnblockTime+0x48>)
 800a1c0:	f04f 32ff 	mov.w	r2, #4294967295
 800a1c4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a1c6:	e008      	b.n	800a1da <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a1c8:	4b07      	ldr	r3, [pc, #28]	; (800a1e8 <prvResetNextTaskUnblockTime+0x44>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	68db      	ldr	r3, [r3, #12]
 800a1ce:	68db      	ldr	r3, [r3, #12]
 800a1d0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	685b      	ldr	r3, [r3, #4]
 800a1d6:	4a05      	ldr	r2, [pc, #20]	; (800a1ec <prvResetNextTaskUnblockTime+0x48>)
 800a1d8:	6013      	str	r3, [r2, #0]
}
 800a1da:	bf00      	nop
 800a1dc:	370c      	adds	r7, #12
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e4:	4770      	bx	lr
 800a1e6:	bf00      	nop
 800a1e8:	200010ec 	.word	0x200010ec
 800a1ec:	20001154 	.word	0x20001154

0800a1f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a1f0:	b480      	push	{r7}
 800a1f2:	b083      	sub	sp, #12
 800a1f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a1f6:	4b0b      	ldr	r3, [pc, #44]	; (800a224 <xTaskGetSchedulerState+0x34>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d102      	bne.n	800a204 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a1fe:	2301      	movs	r3, #1
 800a200:	607b      	str	r3, [r7, #4]
 800a202:	e008      	b.n	800a216 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a204:	4b08      	ldr	r3, [pc, #32]	; (800a228 <xTaskGetSchedulerState+0x38>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d102      	bne.n	800a212 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a20c:	2302      	movs	r3, #2
 800a20e:	607b      	str	r3, [r7, #4]
 800a210:	e001      	b.n	800a216 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a212:	2300      	movs	r3, #0
 800a214:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a216:	687b      	ldr	r3, [r7, #4]
	}
 800a218:	4618      	mov	r0, r3
 800a21a:	370c      	adds	r7, #12
 800a21c:	46bd      	mov	sp, r7
 800a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a222:	4770      	bx	lr
 800a224:	20001140 	.word	0x20001140
 800a228:	2000115c 	.word	0x2000115c

0800a22c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b086      	sub	sp, #24
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a238:	2300      	movs	r3, #0
 800a23a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d06e      	beq.n	800a320 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a242:	4b3a      	ldr	r3, [pc, #232]	; (800a32c <xTaskPriorityDisinherit+0x100>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	693a      	ldr	r2, [r7, #16]
 800a248:	429a      	cmp	r2, r3
 800a24a:	d00a      	beq.n	800a262 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a24c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a250:	f383 8811 	msr	BASEPRI, r3
 800a254:	f3bf 8f6f 	isb	sy
 800a258:	f3bf 8f4f 	dsb	sy
 800a25c:	60fb      	str	r3, [r7, #12]
}
 800a25e:	bf00      	nop
 800a260:	e7fe      	b.n	800a260 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a262:	693b      	ldr	r3, [r7, #16]
 800a264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a266:	2b00      	cmp	r3, #0
 800a268:	d10a      	bne.n	800a280 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a26e:	f383 8811 	msr	BASEPRI, r3
 800a272:	f3bf 8f6f 	isb	sy
 800a276:	f3bf 8f4f 	dsb	sy
 800a27a:	60bb      	str	r3, [r7, #8]
}
 800a27c:	bf00      	nop
 800a27e:	e7fe      	b.n	800a27e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a284:	1e5a      	subs	r2, r3, #1
 800a286:	693b      	ldr	r3, [r7, #16]
 800a288:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a28e:	693b      	ldr	r3, [r7, #16]
 800a290:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a292:	429a      	cmp	r2, r3
 800a294:	d044      	beq.n	800a320 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a296:	693b      	ldr	r3, [r7, #16]
 800a298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d140      	bne.n	800a320 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	3304      	adds	r3, #4
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f7fe fc2b 	bl	8008afe <uxListRemove>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d115      	bne.n	800a2da <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2b2:	491f      	ldr	r1, [pc, #124]	; (800a330 <xTaskPriorityDisinherit+0x104>)
 800a2b4:	4613      	mov	r3, r2
 800a2b6:	009b      	lsls	r3, r3, #2
 800a2b8:	4413      	add	r3, r2
 800a2ba:	009b      	lsls	r3, r3, #2
 800a2bc:	440b      	add	r3, r1
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d10a      	bne.n	800a2da <xTaskPriorityDisinherit+0xae>
 800a2c4:	693b      	ldr	r3, [r7, #16]
 800a2c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2c8:	2201      	movs	r2, #1
 800a2ca:	fa02 f303 	lsl.w	r3, r2, r3
 800a2ce:	43da      	mvns	r2, r3
 800a2d0:	4b18      	ldr	r3, [pc, #96]	; (800a334 <xTaskPriorityDisinherit+0x108>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	4013      	ands	r3, r2
 800a2d6:	4a17      	ldr	r2, [pc, #92]	; (800a334 <xTaskPriorityDisinherit+0x108>)
 800a2d8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a2da:	693b      	ldr	r3, [r7, #16]
 800a2dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2e2:	693b      	ldr	r3, [r7, #16]
 800a2e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2e6:	f1c3 0207 	rsb	r2, r3, #7
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2f2:	2201      	movs	r2, #1
 800a2f4:	409a      	lsls	r2, r3
 800a2f6:	4b0f      	ldr	r3, [pc, #60]	; (800a334 <xTaskPriorityDisinherit+0x108>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	4313      	orrs	r3, r2
 800a2fc:	4a0d      	ldr	r2, [pc, #52]	; (800a334 <xTaskPriorityDisinherit+0x108>)
 800a2fe:	6013      	str	r3, [r2, #0]
 800a300:	693b      	ldr	r3, [r7, #16]
 800a302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a304:	4613      	mov	r3, r2
 800a306:	009b      	lsls	r3, r3, #2
 800a308:	4413      	add	r3, r2
 800a30a:	009b      	lsls	r3, r3, #2
 800a30c:	4a08      	ldr	r2, [pc, #32]	; (800a330 <xTaskPriorityDisinherit+0x104>)
 800a30e:	441a      	add	r2, r3
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	3304      	adds	r3, #4
 800a314:	4619      	mov	r1, r3
 800a316:	4610      	mov	r0, r2
 800a318:	f7fe fb94 	bl	8008a44 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a31c:	2301      	movs	r3, #1
 800a31e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a320:	697b      	ldr	r3, [r7, #20]
	}
 800a322:	4618      	mov	r0, r3
 800a324:	3718      	adds	r7, #24
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}
 800a32a:	bf00      	nop
 800a32c:	20001034 	.word	0x20001034
 800a330:	20001038 	.word	0x20001038
 800a334:	2000113c 	.word	0x2000113c

0800a338 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b084      	sub	sp, #16
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a342:	4b29      	ldr	r3, [pc, #164]	; (800a3e8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a348:	4b28      	ldr	r3, [pc, #160]	; (800a3ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	3304      	adds	r3, #4
 800a34e:	4618      	mov	r0, r3
 800a350:	f7fe fbd5 	bl	8008afe <uxListRemove>
 800a354:	4603      	mov	r3, r0
 800a356:	2b00      	cmp	r3, #0
 800a358:	d10b      	bne.n	800a372 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800a35a:	4b24      	ldr	r3, [pc, #144]	; (800a3ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a360:	2201      	movs	r2, #1
 800a362:	fa02 f303 	lsl.w	r3, r2, r3
 800a366:	43da      	mvns	r2, r3
 800a368:	4b21      	ldr	r3, [pc, #132]	; (800a3f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	4013      	ands	r3, r2
 800a36e:	4a20      	ldr	r2, [pc, #128]	; (800a3f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a370:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a378:	d10a      	bne.n	800a390 <prvAddCurrentTaskToDelayedList+0x58>
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d007      	beq.n	800a390 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a380:	4b1a      	ldr	r3, [pc, #104]	; (800a3ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	3304      	adds	r3, #4
 800a386:	4619      	mov	r1, r3
 800a388:	481a      	ldr	r0, [pc, #104]	; (800a3f4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a38a:	f7fe fb5b 	bl	8008a44 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a38e:	e026      	b.n	800a3de <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a390:	68fa      	ldr	r2, [r7, #12]
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	4413      	add	r3, r2
 800a396:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a398:	4b14      	ldr	r3, [pc, #80]	; (800a3ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	68ba      	ldr	r2, [r7, #8]
 800a39e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a3a0:	68ba      	ldr	r2, [r7, #8]
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	d209      	bcs.n	800a3bc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a3a8:	4b13      	ldr	r3, [pc, #76]	; (800a3f8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a3aa:	681a      	ldr	r2, [r3, #0]
 800a3ac:	4b0f      	ldr	r3, [pc, #60]	; (800a3ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	3304      	adds	r3, #4
 800a3b2:	4619      	mov	r1, r3
 800a3b4:	4610      	mov	r0, r2
 800a3b6:	f7fe fb69 	bl	8008a8c <vListInsert>
}
 800a3ba:	e010      	b.n	800a3de <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a3bc:	4b0f      	ldr	r3, [pc, #60]	; (800a3fc <prvAddCurrentTaskToDelayedList+0xc4>)
 800a3be:	681a      	ldr	r2, [r3, #0]
 800a3c0:	4b0a      	ldr	r3, [pc, #40]	; (800a3ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	3304      	adds	r3, #4
 800a3c6:	4619      	mov	r1, r3
 800a3c8:	4610      	mov	r0, r2
 800a3ca:	f7fe fb5f 	bl	8008a8c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a3ce:	4b0c      	ldr	r3, [pc, #48]	; (800a400 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	68ba      	ldr	r2, [r7, #8]
 800a3d4:	429a      	cmp	r2, r3
 800a3d6:	d202      	bcs.n	800a3de <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a3d8:	4a09      	ldr	r2, [pc, #36]	; (800a400 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	6013      	str	r3, [r2, #0]
}
 800a3de:	bf00      	nop
 800a3e0:	3710      	adds	r7, #16
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}
 800a3e6:	bf00      	nop
 800a3e8:	20001138 	.word	0x20001138
 800a3ec:	20001034 	.word	0x20001034
 800a3f0:	2000113c 	.word	0x2000113c
 800a3f4:	20001120 	.word	0x20001120
 800a3f8:	200010f0 	.word	0x200010f0
 800a3fc:	200010ec 	.word	0x200010ec
 800a400:	20001154 	.word	0x20001154

0800a404 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b08a      	sub	sp, #40	; 0x28
 800a408:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a40a:	2300      	movs	r3, #0
 800a40c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a40e:	f000 fb1f 	bl	800aa50 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a412:	4b1c      	ldr	r3, [pc, #112]	; (800a484 <xTimerCreateTimerTask+0x80>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d021      	beq.n	800a45e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a41a:	2300      	movs	r3, #0
 800a41c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a41e:	2300      	movs	r3, #0
 800a420:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a422:	1d3a      	adds	r2, r7, #4
 800a424:	f107 0108 	add.w	r1, r7, #8
 800a428:	f107 030c 	add.w	r3, r7, #12
 800a42c:	4618      	mov	r0, r3
 800a42e:	f7f6 ff75 	bl	800131c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a432:	6879      	ldr	r1, [r7, #4]
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	68fa      	ldr	r2, [r7, #12]
 800a438:	9202      	str	r2, [sp, #8]
 800a43a:	9301      	str	r3, [sp, #4]
 800a43c:	2302      	movs	r3, #2
 800a43e:	9300      	str	r3, [sp, #0]
 800a440:	2300      	movs	r3, #0
 800a442:	460a      	mov	r2, r1
 800a444:	4910      	ldr	r1, [pc, #64]	; (800a488 <xTimerCreateTimerTask+0x84>)
 800a446:	4811      	ldr	r0, [pc, #68]	; (800a48c <xTimerCreateTimerTask+0x88>)
 800a448:	f7ff f866 	bl	8009518 <xTaskCreateStatic>
 800a44c:	4603      	mov	r3, r0
 800a44e:	4a10      	ldr	r2, [pc, #64]	; (800a490 <xTimerCreateTimerTask+0x8c>)
 800a450:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a452:	4b0f      	ldr	r3, [pc, #60]	; (800a490 <xTimerCreateTimerTask+0x8c>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d001      	beq.n	800a45e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a45a:	2301      	movs	r3, #1
 800a45c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d10a      	bne.n	800a47a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a464:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a468:	f383 8811 	msr	BASEPRI, r3
 800a46c:	f3bf 8f6f 	isb	sy
 800a470:	f3bf 8f4f 	dsb	sy
 800a474:	613b      	str	r3, [r7, #16]
}
 800a476:	bf00      	nop
 800a478:	e7fe      	b.n	800a478 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a47a:	697b      	ldr	r3, [r7, #20]
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3718      	adds	r7, #24
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}
 800a484:	20001190 	.word	0x20001190
 800a488:	0800f254 	.word	0x0800f254
 800a48c:	0800a659 	.word	0x0800a659
 800a490:	20001194 	.word	0x20001194

0800a494 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800a494:	b580      	push	{r7, lr}
 800a496:	b088      	sub	sp, #32
 800a498:	af02      	add	r7, sp, #8
 800a49a:	60f8      	str	r0, [r7, #12]
 800a49c:	60b9      	str	r1, [r7, #8]
 800a49e:	607a      	str	r2, [r7, #4]
 800a4a0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800a4a2:	202c      	movs	r0, #44	; 0x2c
 800a4a4:	f000 fd60 	bl	800af68 <pvPortMalloc>
 800a4a8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800a4aa:	697b      	ldr	r3, [r7, #20]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d00d      	beq.n	800a4cc <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a4b0:	697b      	ldr	r3, [r7, #20]
 800a4b2:	9301      	str	r3, [sp, #4]
 800a4b4:	6a3b      	ldr	r3, [r7, #32]
 800a4b6:	9300      	str	r3, [sp, #0]
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	687a      	ldr	r2, [r7, #4]
 800a4bc:	68b9      	ldr	r1, [r7, #8]
 800a4be:	68f8      	ldr	r0, [r7, #12]
 800a4c0:	f000 f809 	bl	800a4d6 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 800a4c4:	697b      	ldr	r3, [r7, #20]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 800a4cc:	697b      	ldr	r3, [r7, #20]
	}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	3718      	adds	r7, #24
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}

0800a4d6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800a4d6:	b580      	push	{r7, lr}
 800a4d8:	b086      	sub	sp, #24
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	60f8      	str	r0, [r7, #12]
 800a4de:	60b9      	str	r1, [r7, #8]
 800a4e0:	607a      	str	r2, [r7, #4]
 800a4e2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d10a      	bne.n	800a500 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800a4ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ee:	f383 8811 	msr	BASEPRI, r3
 800a4f2:	f3bf 8f6f 	isb	sy
 800a4f6:	f3bf 8f4f 	dsb	sy
 800a4fa:	617b      	str	r3, [r7, #20]
}
 800a4fc:	bf00      	nop
 800a4fe:	e7fe      	b.n	800a4fe <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800a500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a502:	2b00      	cmp	r3, #0
 800a504:	d015      	beq.n	800a532 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800a506:	f000 faa3 	bl	800aa50 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800a50a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a50c:	68fa      	ldr	r2, [r7, #12]
 800a50e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800a510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a512:	68ba      	ldr	r2, [r7, #8]
 800a514:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800a516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a518:	687a      	ldr	r2, [r7, #4]
 800a51a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800a51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a51e:	683a      	ldr	r2, [r7, #0]
 800a520:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800a522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a524:	6a3a      	ldr	r2, [r7, #32]
 800a526:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800a528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a52a:	3304      	adds	r3, #4
 800a52c:	4618      	mov	r0, r3
 800a52e:	f7fe fa7c 	bl	8008a2a <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800a532:	bf00      	nop
 800a534:	3718      	adds	r7, #24
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}
	...

0800a53c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b08a      	sub	sp, #40	; 0x28
 800a540:	af00      	add	r7, sp, #0
 800a542:	60f8      	str	r0, [r7, #12]
 800a544:	60b9      	str	r1, [r7, #8]
 800a546:	607a      	str	r2, [r7, #4]
 800a548:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a54a:	2300      	movs	r3, #0
 800a54c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d10a      	bne.n	800a56a <xTimerGenericCommand+0x2e>
	__asm volatile
 800a554:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a558:	f383 8811 	msr	BASEPRI, r3
 800a55c:	f3bf 8f6f 	isb	sy
 800a560:	f3bf 8f4f 	dsb	sy
 800a564:	623b      	str	r3, [r7, #32]
}
 800a566:	bf00      	nop
 800a568:	e7fe      	b.n	800a568 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a56a:	4b1a      	ldr	r3, [pc, #104]	; (800a5d4 <xTimerGenericCommand+0x98>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d02a      	beq.n	800a5c8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	2b05      	cmp	r3, #5
 800a582:	dc18      	bgt.n	800a5b6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a584:	f7ff fe34 	bl	800a1f0 <xTaskGetSchedulerState>
 800a588:	4603      	mov	r3, r0
 800a58a:	2b02      	cmp	r3, #2
 800a58c:	d109      	bne.n	800a5a2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a58e:	4b11      	ldr	r3, [pc, #68]	; (800a5d4 <xTimerGenericCommand+0x98>)
 800a590:	6818      	ldr	r0, [r3, #0]
 800a592:	f107 0110 	add.w	r1, r7, #16
 800a596:	2300      	movs	r3, #0
 800a598:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a59a:	f7fe fbd9 	bl	8008d50 <xQueueGenericSend>
 800a59e:	6278      	str	r0, [r7, #36]	; 0x24
 800a5a0:	e012      	b.n	800a5c8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a5a2:	4b0c      	ldr	r3, [pc, #48]	; (800a5d4 <xTimerGenericCommand+0x98>)
 800a5a4:	6818      	ldr	r0, [r3, #0]
 800a5a6:	f107 0110 	add.w	r1, r7, #16
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	f7fe fbcf 	bl	8008d50 <xQueueGenericSend>
 800a5b2:	6278      	str	r0, [r7, #36]	; 0x24
 800a5b4:	e008      	b.n	800a5c8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a5b6:	4b07      	ldr	r3, [pc, #28]	; (800a5d4 <xTimerGenericCommand+0x98>)
 800a5b8:	6818      	ldr	r0, [r3, #0]
 800a5ba:	f107 0110 	add.w	r1, r7, #16
 800a5be:	2300      	movs	r3, #0
 800a5c0:	683a      	ldr	r2, [r7, #0]
 800a5c2:	f7fe fcc3 	bl	8008f4c <xQueueGenericSendFromISR>
 800a5c6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3728      	adds	r7, #40	; 0x28
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}
 800a5d2:	bf00      	nop
 800a5d4:	20001190 	.word	0x20001190

0800a5d8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b088      	sub	sp, #32
 800a5dc:	af02      	add	r7, sp, #8
 800a5de:	6078      	str	r0, [r7, #4]
 800a5e0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a5e2:	4b1c      	ldr	r3, [pc, #112]	; (800a654 <prvProcessExpiredTimer+0x7c>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	68db      	ldr	r3, [r3, #12]
 800a5e8:	68db      	ldr	r3, [r3, #12]
 800a5ea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a5ec:	697b      	ldr	r3, [r7, #20]
 800a5ee:	3304      	adds	r3, #4
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	f7fe fa84 	bl	8008afe <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	69db      	ldr	r3, [r3, #28]
 800a5fa:	2b01      	cmp	r3, #1
 800a5fc:	d122      	bne.n	800a644 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	699a      	ldr	r2, [r3, #24]
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	18d1      	adds	r1, r2, r3
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	683a      	ldr	r2, [r7, #0]
 800a60a:	6978      	ldr	r0, [r7, #20]
 800a60c:	f000 f8c8 	bl	800a7a0 <prvInsertTimerInActiveList>
 800a610:	4603      	mov	r3, r0
 800a612:	2b00      	cmp	r3, #0
 800a614:	d016      	beq.n	800a644 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a616:	2300      	movs	r3, #0
 800a618:	9300      	str	r3, [sp, #0]
 800a61a:	2300      	movs	r3, #0
 800a61c:	687a      	ldr	r2, [r7, #4]
 800a61e:	2100      	movs	r1, #0
 800a620:	6978      	ldr	r0, [r7, #20]
 800a622:	f7ff ff8b 	bl	800a53c <xTimerGenericCommand>
 800a626:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a628:	693b      	ldr	r3, [r7, #16]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d10a      	bne.n	800a644 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800a62e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a632:	f383 8811 	msr	BASEPRI, r3
 800a636:	f3bf 8f6f 	isb	sy
 800a63a:	f3bf 8f4f 	dsb	sy
 800a63e:	60fb      	str	r3, [r7, #12]
}
 800a640:	bf00      	nop
 800a642:	e7fe      	b.n	800a642 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a648:	6978      	ldr	r0, [r7, #20]
 800a64a:	4798      	blx	r3
}
 800a64c:	bf00      	nop
 800a64e:	3718      	adds	r7, #24
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}
 800a654:	20001188 	.word	0x20001188

0800a658 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b084      	sub	sp, #16
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a660:	f107 0308 	add.w	r3, r7, #8
 800a664:	4618      	mov	r0, r3
 800a666:	f000 f857 	bl	800a718 <prvGetNextExpireTime>
 800a66a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	4619      	mov	r1, r3
 800a670:	68f8      	ldr	r0, [r7, #12]
 800a672:	f000 f803 	bl	800a67c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a676:	f000 f8d5 	bl	800a824 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a67a:	e7f1      	b.n	800a660 <prvTimerTask+0x8>

0800a67c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b084      	sub	sp, #16
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
 800a684:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a686:	f7ff f96b 	bl	8009960 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a68a:	f107 0308 	add.w	r3, r7, #8
 800a68e:	4618      	mov	r0, r3
 800a690:	f000 f866 	bl	800a760 <prvSampleTimeNow>
 800a694:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d130      	bne.n	800a6fe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d10a      	bne.n	800a6b8 <prvProcessTimerOrBlockTask+0x3c>
 800a6a2:	687a      	ldr	r2, [r7, #4]
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	429a      	cmp	r2, r3
 800a6a8:	d806      	bhi.n	800a6b8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a6aa:	f7ff f967 	bl	800997c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a6ae:	68f9      	ldr	r1, [r7, #12]
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f7ff ff91 	bl	800a5d8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a6b6:	e024      	b.n	800a702 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d008      	beq.n	800a6d0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a6be:	4b13      	ldr	r3, [pc, #76]	; (800a70c <prvProcessTimerOrBlockTask+0x90>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	bf0c      	ite	eq
 800a6c8:	2301      	moveq	r3, #1
 800a6ca:	2300      	movne	r3, #0
 800a6cc:	b2db      	uxtb	r3, r3
 800a6ce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a6d0:	4b0f      	ldr	r3, [pc, #60]	; (800a710 <prvProcessTimerOrBlockTask+0x94>)
 800a6d2:	6818      	ldr	r0, [r3, #0]
 800a6d4:	687a      	ldr	r2, [r7, #4]
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	1ad3      	subs	r3, r2, r3
 800a6da:	683a      	ldr	r2, [r7, #0]
 800a6dc:	4619      	mov	r1, r3
 800a6de:	f7fe fee7 	bl	80094b0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a6e2:	f7ff f94b 	bl	800997c <xTaskResumeAll>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d10a      	bne.n	800a702 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a6ec:	4b09      	ldr	r3, [pc, #36]	; (800a714 <prvProcessTimerOrBlockTask+0x98>)
 800a6ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6f2:	601a      	str	r2, [r3, #0]
 800a6f4:	f3bf 8f4f 	dsb	sy
 800a6f8:	f3bf 8f6f 	isb	sy
}
 800a6fc:	e001      	b.n	800a702 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a6fe:	f7ff f93d 	bl	800997c <xTaskResumeAll>
}
 800a702:	bf00      	nop
 800a704:	3710      	adds	r7, #16
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}
 800a70a:	bf00      	nop
 800a70c:	2000118c 	.word	0x2000118c
 800a710:	20001190 	.word	0x20001190
 800a714:	e000ed04 	.word	0xe000ed04

0800a718 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a718:	b480      	push	{r7}
 800a71a:	b085      	sub	sp, #20
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a720:	4b0e      	ldr	r3, [pc, #56]	; (800a75c <prvGetNextExpireTime+0x44>)
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	2b00      	cmp	r3, #0
 800a728:	bf0c      	ite	eq
 800a72a:	2301      	moveq	r3, #1
 800a72c:	2300      	movne	r3, #0
 800a72e:	b2db      	uxtb	r3, r3
 800a730:	461a      	mov	r2, r3
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d105      	bne.n	800a74a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a73e:	4b07      	ldr	r3, [pc, #28]	; (800a75c <prvGetNextExpireTime+0x44>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	68db      	ldr	r3, [r3, #12]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	60fb      	str	r3, [r7, #12]
 800a748:	e001      	b.n	800a74e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a74a:	2300      	movs	r3, #0
 800a74c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a74e:	68fb      	ldr	r3, [r7, #12]
}
 800a750:	4618      	mov	r0, r3
 800a752:	3714      	adds	r7, #20
 800a754:	46bd      	mov	sp, r7
 800a756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75a:	4770      	bx	lr
 800a75c:	20001188 	.word	0x20001188

0800a760 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b084      	sub	sp, #16
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a768:	f7ff f9a4 	bl	8009ab4 <xTaskGetTickCount>
 800a76c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a76e:	4b0b      	ldr	r3, [pc, #44]	; (800a79c <prvSampleTimeNow+0x3c>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	68fa      	ldr	r2, [r7, #12]
 800a774:	429a      	cmp	r2, r3
 800a776:	d205      	bcs.n	800a784 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a778:	f000 f908 	bl	800a98c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2201      	movs	r2, #1
 800a780:	601a      	str	r2, [r3, #0]
 800a782:	e002      	b.n	800a78a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2200      	movs	r2, #0
 800a788:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a78a:	4a04      	ldr	r2, [pc, #16]	; (800a79c <prvSampleTimeNow+0x3c>)
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a790:	68fb      	ldr	r3, [r7, #12]
}
 800a792:	4618      	mov	r0, r3
 800a794:	3710      	adds	r7, #16
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}
 800a79a:	bf00      	nop
 800a79c:	20001198 	.word	0x20001198

0800a7a0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b086      	sub	sp, #24
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	60f8      	str	r0, [r7, #12]
 800a7a8:	60b9      	str	r1, [r7, #8]
 800a7aa:	607a      	str	r2, [r7, #4]
 800a7ac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	68ba      	ldr	r2, [r7, #8]
 800a7b6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	68fa      	ldr	r2, [r7, #12]
 800a7bc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a7be:	68ba      	ldr	r2, [r7, #8]
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	429a      	cmp	r2, r3
 800a7c4:	d812      	bhi.n	800a7ec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7c6:	687a      	ldr	r2, [r7, #4]
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	1ad2      	subs	r2, r2, r3
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	699b      	ldr	r3, [r3, #24]
 800a7d0:	429a      	cmp	r2, r3
 800a7d2:	d302      	bcc.n	800a7da <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	617b      	str	r3, [r7, #20]
 800a7d8:	e01b      	b.n	800a812 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a7da:	4b10      	ldr	r3, [pc, #64]	; (800a81c <prvInsertTimerInActiveList+0x7c>)
 800a7dc:	681a      	ldr	r2, [r3, #0]
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	3304      	adds	r3, #4
 800a7e2:	4619      	mov	r1, r3
 800a7e4:	4610      	mov	r0, r2
 800a7e6:	f7fe f951 	bl	8008a8c <vListInsert>
 800a7ea:	e012      	b.n	800a812 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a7ec:	687a      	ldr	r2, [r7, #4]
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	429a      	cmp	r2, r3
 800a7f2:	d206      	bcs.n	800a802 <prvInsertTimerInActiveList+0x62>
 800a7f4:	68ba      	ldr	r2, [r7, #8]
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	429a      	cmp	r2, r3
 800a7fa:	d302      	bcc.n	800a802 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	617b      	str	r3, [r7, #20]
 800a800:	e007      	b.n	800a812 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a802:	4b07      	ldr	r3, [pc, #28]	; (800a820 <prvInsertTimerInActiveList+0x80>)
 800a804:	681a      	ldr	r2, [r3, #0]
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	3304      	adds	r3, #4
 800a80a:	4619      	mov	r1, r3
 800a80c:	4610      	mov	r0, r2
 800a80e:	f7fe f93d 	bl	8008a8c <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a812:	697b      	ldr	r3, [r7, #20]
}
 800a814:	4618      	mov	r0, r3
 800a816:	3718      	adds	r7, #24
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}
 800a81c:	2000118c 	.word	0x2000118c
 800a820:	20001188 	.word	0x20001188

0800a824 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b08e      	sub	sp, #56	; 0x38
 800a828:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a82a:	e09d      	b.n	800a968 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	da18      	bge.n	800a864 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a832:	1d3b      	adds	r3, r7, #4
 800a834:	3304      	adds	r3, #4
 800a836:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d10a      	bne.n	800a854 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a842:	f383 8811 	msr	BASEPRI, r3
 800a846:	f3bf 8f6f 	isb	sy
 800a84a:	f3bf 8f4f 	dsb	sy
 800a84e:	61fb      	str	r3, [r7, #28]
}
 800a850:	bf00      	nop
 800a852:	e7fe      	b.n	800a852 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a85a:	6850      	ldr	r0, [r2, #4]
 800a85c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a85e:	6892      	ldr	r2, [r2, #8]
 800a860:	4611      	mov	r1, r2
 800a862:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2b00      	cmp	r3, #0
 800a868:	db7e      	blt.n	800a968 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a86e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a870:	695b      	ldr	r3, [r3, #20]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d004      	beq.n	800a880 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a878:	3304      	adds	r3, #4
 800a87a:	4618      	mov	r0, r3
 800a87c:	f7fe f93f 	bl	8008afe <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a880:	463b      	mov	r3, r7
 800a882:	4618      	mov	r0, r3
 800a884:	f7ff ff6c 	bl	800a760 <prvSampleTimeNow>
 800a888:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2b09      	cmp	r3, #9
 800a88e:	d86a      	bhi.n	800a966 <prvProcessReceivedCommands+0x142>
 800a890:	a201      	add	r2, pc, #4	; (adr r2, 800a898 <prvProcessReceivedCommands+0x74>)
 800a892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a896:	bf00      	nop
 800a898:	0800a8c1 	.word	0x0800a8c1
 800a89c:	0800a8c1 	.word	0x0800a8c1
 800a8a0:	0800a8c1 	.word	0x0800a8c1
 800a8a4:	0800a969 	.word	0x0800a969
 800a8a8:	0800a91d 	.word	0x0800a91d
 800a8ac:	0800a955 	.word	0x0800a955
 800a8b0:	0800a8c1 	.word	0x0800a8c1
 800a8b4:	0800a8c1 	.word	0x0800a8c1
 800a8b8:	0800a969 	.word	0x0800a969
 800a8bc:	0800a91d 	.word	0x0800a91d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a8c0:	68ba      	ldr	r2, [r7, #8]
 800a8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8c4:	699b      	ldr	r3, [r3, #24]
 800a8c6:	18d1      	adds	r1, r2, r3
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8ce:	f7ff ff67 	bl	800a7a0 <prvInsertTimerInActiveList>
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d047      	beq.n	800a968 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a8d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8de:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a8e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8e2:	69db      	ldr	r3, [r3, #28]
 800a8e4:	2b01      	cmp	r3, #1
 800a8e6:	d13f      	bne.n	800a968 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a8e8:	68ba      	ldr	r2, [r7, #8]
 800a8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ec:	699b      	ldr	r3, [r3, #24]
 800a8ee:	441a      	add	r2, r3
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	9300      	str	r3, [sp, #0]
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	2100      	movs	r1, #0
 800a8f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8fa:	f7ff fe1f 	bl	800a53c <xTimerGenericCommand>
 800a8fe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a900:	6a3b      	ldr	r3, [r7, #32]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d130      	bne.n	800a968 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800a906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a90a:	f383 8811 	msr	BASEPRI, r3
 800a90e:	f3bf 8f6f 	isb	sy
 800a912:	f3bf 8f4f 	dsb	sy
 800a916:	61bb      	str	r3, [r7, #24]
}
 800a918:	bf00      	nop
 800a91a:	e7fe      	b.n	800a91a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a91c:	68ba      	ldr	r2, [r7, #8]
 800a91e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a920:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a924:	699b      	ldr	r3, [r3, #24]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d10a      	bne.n	800a940 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800a92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a92e:	f383 8811 	msr	BASEPRI, r3
 800a932:	f3bf 8f6f 	isb	sy
 800a936:	f3bf 8f4f 	dsb	sy
 800a93a:	617b      	str	r3, [r7, #20]
}
 800a93c:	bf00      	nop
 800a93e:	e7fe      	b.n	800a93e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a942:	699a      	ldr	r2, [r3, #24]
 800a944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a946:	18d1      	adds	r1, r2, r3
 800a948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a94a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a94c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a94e:	f7ff ff27 	bl	800a7a0 <prvInsertTimerInActiveList>
					break;
 800a952:	e009      	b.n	800a968 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a956:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d104      	bne.n	800a968 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800a95e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a960:	f000 fbc6 	bl	800b0f0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a964:	e000      	b.n	800a968 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 800a966:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a968:	4b07      	ldr	r3, [pc, #28]	; (800a988 <prvProcessReceivedCommands+0x164>)
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	1d39      	adds	r1, r7, #4
 800a96e:	2200      	movs	r2, #0
 800a970:	4618      	mov	r0, r3
 800a972:	f7fe fb83 	bl	800907c <xQueueReceive>
 800a976:	4603      	mov	r3, r0
 800a978:	2b00      	cmp	r3, #0
 800a97a:	f47f af57 	bne.w	800a82c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a97e:	bf00      	nop
 800a980:	bf00      	nop
 800a982:	3730      	adds	r7, #48	; 0x30
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}
 800a988:	20001190 	.word	0x20001190

0800a98c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b088      	sub	sp, #32
 800a990:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a992:	e045      	b.n	800aa20 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a994:	4b2c      	ldr	r3, [pc, #176]	; (800aa48 <prvSwitchTimerLists+0xbc>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	68db      	ldr	r3, [r3, #12]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a99e:	4b2a      	ldr	r3, [pc, #168]	; (800aa48 <prvSwitchTimerLists+0xbc>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	68db      	ldr	r3, [r3, #12]
 800a9a4:	68db      	ldr	r3, [r3, #12]
 800a9a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	3304      	adds	r3, #4
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	f7fe f8a6 	bl	8008afe <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9b6:	68f8      	ldr	r0, [r7, #12]
 800a9b8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	69db      	ldr	r3, [r3, #28]
 800a9be:	2b01      	cmp	r3, #1
 800a9c0:	d12e      	bne.n	800aa20 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	699b      	ldr	r3, [r3, #24]
 800a9c6:	693a      	ldr	r2, [r7, #16]
 800a9c8:	4413      	add	r3, r2
 800a9ca:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a9cc:	68ba      	ldr	r2, [r7, #8]
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	429a      	cmp	r2, r3
 800a9d2:	d90e      	bls.n	800a9f2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	68ba      	ldr	r2, [r7, #8]
 800a9d8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	68fa      	ldr	r2, [r7, #12]
 800a9de:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a9e0:	4b19      	ldr	r3, [pc, #100]	; (800aa48 <prvSwitchTimerLists+0xbc>)
 800a9e2:	681a      	ldr	r2, [r3, #0]
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	3304      	adds	r3, #4
 800a9e8:	4619      	mov	r1, r3
 800a9ea:	4610      	mov	r0, r2
 800a9ec:	f7fe f84e 	bl	8008a8c <vListInsert>
 800a9f0:	e016      	b.n	800aa20 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	9300      	str	r3, [sp, #0]
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	693a      	ldr	r2, [r7, #16]
 800a9fa:	2100      	movs	r1, #0
 800a9fc:	68f8      	ldr	r0, [r7, #12]
 800a9fe:	f7ff fd9d 	bl	800a53c <xTimerGenericCommand>
 800aa02:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d10a      	bne.n	800aa20 <prvSwitchTimerLists+0x94>
	__asm volatile
 800aa0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa0e:	f383 8811 	msr	BASEPRI, r3
 800aa12:	f3bf 8f6f 	isb	sy
 800aa16:	f3bf 8f4f 	dsb	sy
 800aa1a:	603b      	str	r3, [r7, #0]
}
 800aa1c:	bf00      	nop
 800aa1e:	e7fe      	b.n	800aa1e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aa20:	4b09      	ldr	r3, [pc, #36]	; (800aa48 <prvSwitchTimerLists+0xbc>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d1b4      	bne.n	800a994 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800aa2a:	4b07      	ldr	r3, [pc, #28]	; (800aa48 <prvSwitchTimerLists+0xbc>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800aa30:	4b06      	ldr	r3, [pc, #24]	; (800aa4c <prvSwitchTimerLists+0xc0>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	4a04      	ldr	r2, [pc, #16]	; (800aa48 <prvSwitchTimerLists+0xbc>)
 800aa36:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800aa38:	4a04      	ldr	r2, [pc, #16]	; (800aa4c <prvSwitchTimerLists+0xc0>)
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	6013      	str	r3, [r2, #0]
}
 800aa3e:	bf00      	nop
 800aa40:	3718      	adds	r7, #24
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}
 800aa46:	bf00      	nop
 800aa48:	20001188 	.word	0x20001188
 800aa4c:	2000118c 	.word	0x2000118c

0800aa50 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b082      	sub	sp, #8
 800aa54:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800aa56:	f000 f965 	bl	800ad24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800aa5a:	4b15      	ldr	r3, [pc, #84]	; (800aab0 <prvCheckForValidListAndQueue+0x60>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d120      	bne.n	800aaa4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800aa62:	4814      	ldr	r0, [pc, #80]	; (800aab4 <prvCheckForValidListAndQueue+0x64>)
 800aa64:	f7fd ffc1 	bl	80089ea <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800aa68:	4813      	ldr	r0, [pc, #76]	; (800aab8 <prvCheckForValidListAndQueue+0x68>)
 800aa6a:	f7fd ffbe 	bl	80089ea <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800aa6e:	4b13      	ldr	r3, [pc, #76]	; (800aabc <prvCheckForValidListAndQueue+0x6c>)
 800aa70:	4a10      	ldr	r2, [pc, #64]	; (800aab4 <prvCheckForValidListAndQueue+0x64>)
 800aa72:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800aa74:	4b12      	ldr	r3, [pc, #72]	; (800aac0 <prvCheckForValidListAndQueue+0x70>)
 800aa76:	4a10      	ldr	r2, [pc, #64]	; (800aab8 <prvCheckForValidListAndQueue+0x68>)
 800aa78:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	9300      	str	r3, [sp, #0]
 800aa7e:	4b11      	ldr	r3, [pc, #68]	; (800aac4 <prvCheckForValidListAndQueue+0x74>)
 800aa80:	4a11      	ldr	r2, [pc, #68]	; (800aac8 <prvCheckForValidListAndQueue+0x78>)
 800aa82:	2110      	movs	r1, #16
 800aa84:	200a      	movs	r0, #10
 800aa86:	f7fe f8cd 	bl	8008c24 <xQueueGenericCreateStatic>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	4a08      	ldr	r2, [pc, #32]	; (800aab0 <prvCheckForValidListAndQueue+0x60>)
 800aa8e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800aa90:	4b07      	ldr	r3, [pc, #28]	; (800aab0 <prvCheckForValidListAndQueue+0x60>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d005      	beq.n	800aaa4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800aa98:	4b05      	ldr	r3, [pc, #20]	; (800aab0 <prvCheckForValidListAndQueue+0x60>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	490b      	ldr	r1, [pc, #44]	; (800aacc <prvCheckForValidListAndQueue+0x7c>)
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f7fe fcdc 	bl	800945c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aaa4:	f000 f96e 	bl	800ad84 <vPortExitCritical>
}
 800aaa8:	bf00      	nop
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}
 800aaae:	bf00      	nop
 800aab0:	20001190 	.word	0x20001190
 800aab4:	20001160 	.word	0x20001160
 800aab8:	20001174 	.word	0x20001174
 800aabc:	20001188 	.word	0x20001188
 800aac0:	2000118c 	.word	0x2000118c
 800aac4:	2000123c 	.word	0x2000123c
 800aac8:	2000119c 	.word	0x2000119c
 800aacc:	0800f25c 	.word	0x0800f25c

0800aad0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800aad0:	b480      	push	{r7}
 800aad2:	b085      	sub	sp, #20
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	60f8      	str	r0, [r7, #12]
 800aad8:	60b9      	str	r1, [r7, #8]
 800aada:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	3b04      	subs	r3, #4
 800aae0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800aae8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	3b04      	subs	r3, #4
 800aaee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	f023 0201 	bic.w	r2, r3, #1
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	3b04      	subs	r3, #4
 800aafe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ab00:	4a0c      	ldr	r2, [pc, #48]	; (800ab34 <pxPortInitialiseStack+0x64>)
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	3b14      	subs	r3, #20
 800ab0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ab0c:	687a      	ldr	r2, [r7, #4]
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	3b04      	subs	r3, #4
 800ab16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	f06f 0202 	mvn.w	r2, #2
 800ab1e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	3b20      	subs	r3, #32
 800ab24:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ab26:	68fb      	ldr	r3, [r7, #12]
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3714      	adds	r7, #20
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab32:	4770      	bx	lr
 800ab34:	0800ab39 	.word	0x0800ab39

0800ab38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ab38:	b480      	push	{r7}
 800ab3a:	b085      	sub	sp, #20
 800ab3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ab3e:	2300      	movs	r3, #0
 800ab40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ab42:	4b12      	ldr	r3, [pc, #72]	; (800ab8c <prvTaskExitError+0x54>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab4a:	d00a      	beq.n	800ab62 <prvTaskExitError+0x2a>
	__asm volatile
 800ab4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab50:	f383 8811 	msr	BASEPRI, r3
 800ab54:	f3bf 8f6f 	isb	sy
 800ab58:	f3bf 8f4f 	dsb	sy
 800ab5c:	60fb      	str	r3, [r7, #12]
}
 800ab5e:	bf00      	nop
 800ab60:	e7fe      	b.n	800ab60 <prvTaskExitError+0x28>
	__asm volatile
 800ab62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab66:	f383 8811 	msr	BASEPRI, r3
 800ab6a:	f3bf 8f6f 	isb	sy
 800ab6e:	f3bf 8f4f 	dsb	sy
 800ab72:	60bb      	str	r3, [r7, #8]
}
 800ab74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ab76:	bf00      	nop
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d0fc      	beq.n	800ab78 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ab7e:	bf00      	nop
 800ab80:	bf00      	nop
 800ab82:	3714      	adds	r7, #20
 800ab84:	46bd      	mov	sp, r7
 800ab86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8a:	4770      	bx	lr
 800ab8c:	2000000c 	.word	0x2000000c

0800ab90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ab90:	4b07      	ldr	r3, [pc, #28]	; (800abb0 <pxCurrentTCBConst2>)
 800ab92:	6819      	ldr	r1, [r3, #0]
 800ab94:	6808      	ldr	r0, [r1, #0]
 800ab96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab9a:	f380 8809 	msr	PSP, r0
 800ab9e:	f3bf 8f6f 	isb	sy
 800aba2:	f04f 0000 	mov.w	r0, #0
 800aba6:	f380 8811 	msr	BASEPRI, r0
 800abaa:	4770      	bx	lr
 800abac:	f3af 8000 	nop.w

0800abb0 <pxCurrentTCBConst2>:
 800abb0:	20001034 	.word	0x20001034
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800abb4:	bf00      	nop
 800abb6:	bf00      	nop

0800abb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800abb8:	4808      	ldr	r0, [pc, #32]	; (800abdc <prvPortStartFirstTask+0x24>)
 800abba:	6800      	ldr	r0, [r0, #0]
 800abbc:	6800      	ldr	r0, [r0, #0]
 800abbe:	f380 8808 	msr	MSP, r0
 800abc2:	f04f 0000 	mov.w	r0, #0
 800abc6:	f380 8814 	msr	CONTROL, r0
 800abca:	b662      	cpsie	i
 800abcc:	b661      	cpsie	f
 800abce:	f3bf 8f4f 	dsb	sy
 800abd2:	f3bf 8f6f 	isb	sy
 800abd6:	df00      	svc	0
 800abd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800abda:	bf00      	nop
 800abdc:	e000ed08 	.word	0xe000ed08

0800abe0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b086      	sub	sp, #24
 800abe4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800abe6:	4b46      	ldr	r3, [pc, #280]	; (800ad00 <xPortStartScheduler+0x120>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	4a46      	ldr	r2, [pc, #280]	; (800ad04 <xPortStartScheduler+0x124>)
 800abec:	4293      	cmp	r3, r2
 800abee:	d10a      	bne.n	800ac06 <xPortStartScheduler+0x26>
	__asm volatile
 800abf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf4:	f383 8811 	msr	BASEPRI, r3
 800abf8:	f3bf 8f6f 	isb	sy
 800abfc:	f3bf 8f4f 	dsb	sy
 800ac00:	613b      	str	r3, [r7, #16]
}
 800ac02:	bf00      	nop
 800ac04:	e7fe      	b.n	800ac04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ac06:	4b3e      	ldr	r3, [pc, #248]	; (800ad00 <xPortStartScheduler+0x120>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	4a3f      	ldr	r2, [pc, #252]	; (800ad08 <xPortStartScheduler+0x128>)
 800ac0c:	4293      	cmp	r3, r2
 800ac0e:	d10a      	bne.n	800ac26 <xPortStartScheduler+0x46>
	__asm volatile
 800ac10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac14:	f383 8811 	msr	BASEPRI, r3
 800ac18:	f3bf 8f6f 	isb	sy
 800ac1c:	f3bf 8f4f 	dsb	sy
 800ac20:	60fb      	str	r3, [r7, #12]
}
 800ac22:	bf00      	nop
 800ac24:	e7fe      	b.n	800ac24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ac26:	4b39      	ldr	r3, [pc, #228]	; (800ad0c <xPortStartScheduler+0x12c>)
 800ac28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	781b      	ldrb	r3, [r3, #0]
 800ac2e:	b2db      	uxtb	r3, r3
 800ac30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ac32:	697b      	ldr	r3, [r7, #20]
 800ac34:	22ff      	movs	r2, #255	; 0xff
 800ac36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ac38:	697b      	ldr	r3, [r7, #20]
 800ac3a:	781b      	ldrb	r3, [r3, #0]
 800ac3c:	b2db      	uxtb	r3, r3
 800ac3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ac40:	78fb      	ldrb	r3, [r7, #3]
 800ac42:	b2db      	uxtb	r3, r3
 800ac44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ac48:	b2da      	uxtb	r2, r3
 800ac4a:	4b31      	ldr	r3, [pc, #196]	; (800ad10 <xPortStartScheduler+0x130>)
 800ac4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ac4e:	4b31      	ldr	r3, [pc, #196]	; (800ad14 <xPortStartScheduler+0x134>)
 800ac50:	2207      	movs	r2, #7
 800ac52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ac54:	e009      	b.n	800ac6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ac56:	4b2f      	ldr	r3, [pc, #188]	; (800ad14 <xPortStartScheduler+0x134>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	3b01      	subs	r3, #1
 800ac5c:	4a2d      	ldr	r2, [pc, #180]	; (800ad14 <xPortStartScheduler+0x134>)
 800ac5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ac60:	78fb      	ldrb	r3, [r7, #3]
 800ac62:	b2db      	uxtb	r3, r3
 800ac64:	005b      	lsls	r3, r3, #1
 800ac66:	b2db      	uxtb	r3, r3
 800ac68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ac6a:	78fb      	ldrb	r3, [r7, #3]
 800ac6c:	b2db      	uxtb	r3, r3
 800ac6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac72:	2b80      	cmp	r3, #128	; 0x80
 800ac74:	d0ef      	beq.n	800ac56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ac76:	4b27      	ldr	r3, [pc, #156]	; (800ad14 <xPortStartScheduler+0x134>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f1c3 0307 	rsb	r3, r3, #7
 800ac7e:	2b04      	cmp	r3, #4
 800ac80:	d00a      	beq.n	800ac98 <xPortStartScheduler+0xb8>
	__asm volatile
 800ac82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac86:	f383 8811 	msr	BASEPRI, r3
 800ac8a:	f3bf 8f6f 	isb	sy
 800ac8e:	f3bf 8f4f 	dsb	sy
 800ac92:	60bb      	str	r3, [r7, #8]
}
 800ac94:	bf00      	nop
 800ac96:	e7fe      	b.n	800ac96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ac98:	4b1e      	ldr	r3, [pc, #120]	; (800ad14 <xPortStartScheduler+0x134>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	021b      	lsls	r3, r3, #8
 800ac9e:	4a1d      	ldr	r2, [pc, #116]	; (800ad14 <xPortStartScheduler+0x134>)
 800aca0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aca2:	4b1c      	ldr	r3, [pc, #112]	; (800ad14 <xPortStartScheduler+0x134>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800acaa:	4a1a      	ldr	r2, [pc, #104]	; (800ad14 <xPortStartScheduler+0x134>)
 800acac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	b2da      	uxtb	r2, r3
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800acb6:	4b18      	ldr	r3, [pc, #96]	; (800ad18 <xPortStartScheduler+0x138>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	4a17      	ldr	r2, [pc, #92]	; (800ad18 <xPortStartScheduler+0x138>)
 800acbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800acc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800acc2:	4b15      	ldr	r3, [pc, #84]	; (800ad18 <xPortStartScheduler+0x138>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	4a14      	ldr	r2, [pc, #80]	; (800ad18 <xPortStartScheduler+0x138>)
 800acc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800accc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800acce:	f000 f8dd 	bl	800ae8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800acd2:	4b12      	ldr	r3, [pc, #72]	; (800ad1c <xPortStartScheduler+0x13c>)
 800acd4:	2200      	movs	r2, #0
 800acd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800acd8:	f000 f8fc 	bl	800aed4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800acdc:	4b10      	ldr	r3, [pc, #64]	; (800ad20 <xPortStartScheduler+0x140>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	4a0f      	ldr	r2, [pc, #60]	; (800ad20 <xPortStartScheduler+0x140>)
 800ace2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ace6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ace8:	f7ff ff66 	bl	800abb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800acec:	f7fe ffb0 	bl	8009c50 <vTaskSwitchContext>
	prvTaskExitError();
 800acf0:	f7ff ff22 	bl	800ab38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800acf4:	2300      	movs	r3, #0
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	3718      	adds	r7, #24
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}
 800acfe:	bf00      	nop
 800ad00:	e000ed00 	.word	0xe000ed00
 800ad04:	410fc271 	.word	0x410fc271
 800ad08:	410fc270 	.word	0x410fc270
 800ad0c:	e000e400 	.word	0xe000e400
 800ad10:	20001284 	.word	0x20001284
 800ad14:	20001288 	.word	0x20001288
 800ad18:	e000ed20 	.word	0xe000ed20
 800ad1c:	2000000c 	.word	0x2000000c
 800ad20:	e000ef34 	.word	0xe000ef34

0800ad24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ad24:	b480      	push	{r7}
 800ad26:	b083      	sub	sp, #12
 800ad28:	af00      	add	r7, sp, #0
	__asm volatile
 800ad2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad2e:	f383 8811 	msr	BASEPRI, r3
 800ad32:	f3bf 8f6f 	isb	sy
 800ad36:	f3bf 8f4f 	dsb	sy
 800ad3a:	607b      	str	r3, [r7, #4]
}
 800ad3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ad3e:	4b0f      	ldr	r3, [pc, #60]	; (800ad7c <vPortEnterCritical+0x58>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	3301      	adds	r3, #1
 800ad44:	4a0d      	ldr	r2, [pc, #52]	; (800ad7c <vPortEnterCritical+0x58>)
 800ad46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ad48:	4b0c      	ldr	r3, [pc, #48]	; (800ad7c <vPortEnterCritical+0x58>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	2b01      	cmp	r3, #1
 800ad4e:	d10f      	bne.n	800ad70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ad50:	4b0b      	ldr	r3, [pc, #44]	; (800ad80 <vPortEnterCritical+0x5c>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	b2db      	uxtb	r3, r3
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d00a      	beq.n	800ad70 <vPortEnterCritical+0x4c>
	__asm volatile
 800ad5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad5e:	f383 8811 	msr	BASEPRI, r3
 800ad62:	f3bf 8f6f 	isb	sy
 800ad66:	f3bf 8f4f 	dsb	sy
 800ad6a:	603b      	str	r3, [r7, #0]
}
 800ad6c:	bf00      	nop
 800ad6e:	e7fe      	b.n	800ad6e <vPortEnterCritical+0x4a>
	}
}
 800ad70:	bf00      	nop
 800ad72:	370c      	adds	r7, #12
 800ad74:	46bd      	mov	sp, r7
 800ad76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7a:	4770      	bx	lr
 800ad7c:	2000000c 	.word	0x2000000c
 800ad80:	e000ed04 	.word	0xe000ed04

0800ad84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ad84:	b480      	push	{r7}
 800ad86:	b083      	sub	sp, #12
 800ad88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ad8a:	4b12      	ldr	r3, [pc, #72]	; (800add4 <vPortExitCritical+0x50>)
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d10a      	bne.n	800ada8 <vPortExitCritical+0x24>
	__asm volatile
 800ad92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad96:	f383 8811 	msr	BASEPRI, r3
 800ad9a:	f3bf 8f6f 	isb	sy
 800ad9e:	f3bf 8f4f 	dsb	sy
 800ada2:	607b      	str	r3, [r7, #4]
}
 800ada4:	bf00      	nop
 800ada6:	e7fe      	b.n	800ada6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ada8:	4b0a      	ldr	r3, [pc, #40]	; (800add4 <vPortExitCritical+0x50>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	3b01      	subs	r3, #1
 800adae:	4a09      	ldr	r2, [pc, #36]	; (800add4 <vPortExitCritical+0x50>)
 800adb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800adb2:	4b08      	ldr	r3, [pc, #32]	; (800add4 <vPortExitCritical+0x50>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d105      	bne.n	800adc6 <vPortExitCritical+0x42>
 800adba:	2300      	movs	r3, #0
 800adbc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	f383 8811 	msr	BASEPRI, r3
}
 800adc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800adc6:	bf00      	nop
 800adc8:	370c      	adds	r7, #12
 800adca:	46bd      	mov	sp, r7
 800adcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add0:	4770      	bx	lr
 800add2:	bf00      	nop
 800add4:	2000000c 	.word	0x2000000c
	...

0800ade0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ade0:	f3ef 8009 	mrs	r0, PSP
 800ade4:	f3bf 8f6f 	isb	sy
 800ade8:	4b15      	ldr	r3, [pc, #84]	; (800ae40 <pxCurrentTCBConst>)
 800adea:	681a      	ldr	r2, [r3, #0]
 800adec:	f01e 0f10 	tst.w	lr, #16
 800adf0:	bf08      	it	eq
 800adf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800adf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adfa:	6010      	str	r0, [r2, #0]
 800adfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ae00:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ae04:	f380 8811 	msr	BASEPRI, r0
 800ae08:	f3bf 8f4f 	dsb	sy
 800ae0c:	f3bf 8f6f 	isb	sy
 800ae10:	f7fe ff1e 	bl	8009c50 <vTaskSwitchContext>
 800ae14:	f04f 0000 	mov.w	r0, #0
 800ae18:	f380 8811 	msr	BASEPRI, r0
 800ae1c:	bc09      	pop	{r0, r3}
 800ae1e:	6819      	ldr	r1, [r3, #0]
 800ae20:	6808      	ldr	r0, [r1, #0]
 800ae22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae26:	f01e 0f10 	tst.w	lr, #16
 800ae2a:	bf08      	it	eq
 800ae2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ae30:	f380 8809 	msr	PSP, r0
 800ae34:	f3bf 8f6f 	isb	sy
 800ae38:	4770      	bx	lr
 800ae3a:	bf00      	nop
 800ae3c:	f3af 8000 	nop.w

0800ae40 <pxCurrentTCBConst>:
 800ae40:	20001034 	.word	0x20001034
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ae44:	bf00      	nop
 800ae46:	bf00      	nop

0800ae48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b082      	sub	sp, #8
 800ae4c:	af00      	add	r7, sp, #0
	__asm volatile
 800ae4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae52:	f383 8811 	msr	BASEPRI, r3
 800ae56:	f3bf 8f6f 	isb	sy
 800ae5a:	f3bf 8f4f 	dsb	sy
 800ae5e:	607b      	str	r3, [r7, #4]
}
 800ae60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ae62:	f7fe fe37 	bl	8009ad4 <xTaskIncrementTick>
 800ae66:	4603      	mov	r3, r0
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d003      	beq.n	800ae74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ae6c:	4b06      	ldr	r3, [pc, #24]	; (800ae88 <SysTick_Handler+0x40>)
 800ae6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae72:	601a      	str	r2, [r3, #0]
 800ae74:	2300      	movs	r3, #0
 800ae76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	f383 8811 	msr	BASEPRI, r3
}
 800ae7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ae80:	bf00      	nop
 800ae82:	3708      	adds	r7, #8
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}
 800ae88:	e000ed04 	.word	0xe000ed04

0800ae8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ae8c:	b480      	push	{r7}
 800ae8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ae90:	4b0b      	ldr	r3, [pc, #44]	; (800aec0 <vPortSetupTimerInterrupt+0x34>)
 800ae92:	2200      	movs	r2, #0
 800ae94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ae96:	4b0b      	ldr	r3, [pc, #44]	; (800aec4 <vPortSetupTimerInterrupt+0x38>)
 800ae98:	2200      	movs	r2, #0
 800ae9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ae9c:	4b0a      	ldr	r3, [pc, #40]	; (800aec8 <vPortSetupTimerInterrupt+0x3c>)
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	4a0a      	ldr	r2, [pc, #40]	; (800aecc <vPortSetupTimerInterrupt+0x40>)
 800aea2:	fba2 2303 	umull	r2, r3, r2, r3
 800aea6:	099b      	lsrs	r3, r3, #6
 800aea8:	4a09      	ldr	r2, [pc, #36]	; (800aed0 <vPortSetupTimerInterrupt+0x44>)
 800aeaa:	3b01      	subs	r3, #1
 800aeac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aeae:	4b04      	ldr	r3, [pc, #16]	; (800aec0 <vPortSetupTimerInterrupt+0x34>)
 800aeb0:	2207      	movs	r2, #7
 800aeb2:	601a      	str	r2, [r3, #0]
}
 800aeb4:	bf00      	nop
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebc:	4770      	bx	lr
 800aebe:	bf00      	nop
 800aec0:	e000e010 	.word	0xe000e010
 800aec4:	e000e018 	.word	0xe000e018
 800aec8:	20000000 	.word	0x20000000
 800aecc:	10624dd3 	.word	0x10624dd3
 800aed0:	e000e014 	.word	0xe000e014

0800aed4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800aed4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800aee4 <vPortEnableVFP+0x10>
 800aed8:	6801      	ldr	r1, [r0, #0]
 800aeda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800aede:	6001      	str	r1, [r0, #0]
 800aee0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800aee2:	bf00      	nop
 800aee4:	e000ed88 	.word	0xe000ed88

0800aee8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800aee8:	b480      	push	{r7}
 800aeea:	b085      	sub	sp, #20
 800aeec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aeee:	f3ef 8305 	mrs	r3, IPSR
 800aef2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	2b0f      	cmp	r3, #15
 800aef8:	d914      	bls.n	800af24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800aefa:	4a17      	ldr	r2, [pc, #92]	; (800af58 <vPortValidateInterruptPriority+0x70>)
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	4413      	add	r3, r2
 800af00:	781b      	ldrb	r3, [r3, #0]
 800af02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800af04:	4b15      	ldr	r3, [pc, #84]	; (800af5c <vPortValidateInterruptPriority+0x74>)
 800af06:	781b      	ldrb	r3, [r3, #0]
 800af08:	7afa      	ldrb	r2, [r7, #11]
 800af0a:	429a      	cmp	r2, r3
 800af0c:	d20a      	bcs.n	800af24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800af0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af12:	f383 8811 	msr	BASEPRI, r3
 800af16:	f3bf 8f6f 	isb	sy
 800af1a:	f3bf 8f4f 	dsb	sy
 800af1e:	607b      	str	r3, [r7, #4]
}
 800af20:	bf00      	nop
 800af22:	e7fe      	b.n	800af22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800af24:	4b0e      	ldr	r3, [pc, #56]	; (800af60 <vPortValidateInterruptPriority+0x78>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800af2c:	4b0d      	ldr	r3, [pc, #52]	; (800af64 <vPortValidateInterruptPriority+0x7c>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	429a      	cmp	r2, r3
 800af32:	d90a      	bls.n	800af4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800af34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af38:	f383 8811 	msr	BASEPRI, r3
 800af3c:	f3bf 8f6f 	isb	sy
 800af40:	f3bf 8f4f 	dsb	sy
 800af44:	603b      	str	r3, [r7, #0]
}
 800af46:	bf00      	nop
 800af48:	e7fe      	b.n	800af48 <vPortValidateInterruptPriority+0x60>
	}
 800af4a:	bf00      	nop
 800af4c:	3714      	adds	r7, #20
 800af4e:	46bd      	mov	sp, r7
 800af50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af54:	4770      	bx	lr
 800af56:	bf00      	nop
 800af58:	e000e3f0 	.word	0xe000e3f0
 800af5c:	20001284 	.word	0x20001284
 800af60:	e000ed0c 	.word	0xe000ed0c
 800af64:	20001288 	.word	0x20001288

0800af68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b08a      	sub	sp, #40	; 0x28
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800af70:	2300      	movs	r3, #0
 800af72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800af74:	f7fe fcf4 	bl	8009960 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800af78:	4b58      	ldr	r3, [pc, #352]	; (800b0dc <pvPortMalloc+0x174>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d101      	bne.n	800af84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800af80:	f000 f910 	bl	800b1a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800af84:	4b56      	ldr	r3, [pc, #344]	; (800b0e0 <pvPortMalloc+0x178>)
 800af86:	681a      	ldr	r2, [r3, #0]
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	4013      	ands	r3, r2
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	f040 808e 	bne.w	800b0ae <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d01d      	beq.n	800afd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800af98:	2208      	movs	r2, #8
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	4413      	add	r3, r2
 800af9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	f003 0307 	and.w	r3, r3, #7
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d014      	beq.n	800afd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f023 0307 	bic.w	r3, r3, #7
 800afb0:	3308      	adds	r3, #8
 800afb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f003 0307 	and.w	r3, r3, #7
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d00a      	beq.n	800afd4 <pvPortMalloc+0x6c>
	__asm volatile
 800afbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc2:	f383 8811 	msr	BASEPRI, r3
 800afc6:	f3bf 8f6f 	isb	sy
 800afca:	f3bf 8f4f 	dsb	sy
 800afce:	617b      	str	r3, [r7, #20]
}
 800afd0:	bf00      	nop
 800afd2:	e7fe      	b.n	800afd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d069      	beq.n	800b0ae <pvPortMalloc+0x146>
 800afda:	4b42      	ldr	r3, [pc, #264]	; (800b0e4 <pvPortMalloc+0x17c>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	687a      	ldr	r2, [r7, #4]
 800afe0:	429a      	cmp	r2, r3
 800afe2:	d864      	bhi.n	800b0ae <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800afe4:	4b40      	ldr	r3, [pc, #256]	; (800b0e8 <pvPortMalloc+0x180>)
 800afe6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800afe8:	4b3f      	ldr	r3, [pc, #252]	; (800b0e8 <pvPortMalloc+0x180>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800afee:	e004      	b.n	800affa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800aff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aff2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800aff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800affa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800affc:	685b      	ldr	r3, [r3, #4]
 800affe:	687a      	ldr	r2, [r7, #4]
 800b000:	429a      	cmp	r2, r3
 800b002:	d903      	bls.n	800b00c <pvPortMalloc+0xa4>
 800b004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d1f1      	bne.n	800aff0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b00c:	4b33      	ldr	r3, [pc, #204]	; (800b0dc <pvPortMalloc+0x174>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b012:	429a      	cmp	r2, r3
 800b014:	d04b      	beq.n	800b0ae <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b016:	6a3b      	ldr	r3, [r7, #32]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	2208      	movs	r2, #8
 800b01c:	4413      	add	r3, r2
 800b01e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b022:	681a      	ldr	r2, [r3, #0]
 800b024:	6a3b      	ldr	r3, [r7, #32]
 800b026:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b02a:	685a      	ldr	r2, [r3, #4]
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	1ad2      	subs	r2, r2, r3
 800b030:	2308      	movs	r3, #8
 800b032:	005b      	lsls	r3, r3, #1
 800b034:	429a      	cmp	r2, r3
 800b036:	d91f      	bls.n	800b078 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	4413      	add	r3, r2
 800b03e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b040:	69bb      	ldr	r3, [r7, #24]
 800b042:	f003 0307 	and.w	r3, r3, #7
 800b046:	2b00      	cmp	r3, #0
 800b048:	d00a      	beq.n	800b060 <pvPortMalloc+0xf8>
	__asm volatile
 800b04a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b04e:	f383 8811 	msr	BASEPRI, r3
 800b052:	f3bf 8f6f 	isb	sy
 800b056:	f3bf 8f4f 	dsb	sy
 800b05a:	613b      	str	r3, [r7, #16]
}
 800b05c:	bf00      	nop
 800b05e:	e7fe      	b.n	800b05e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b062:	685a      	ldr	r2, [r3, #4]
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	1ad2      	subs	r2, r2, r3
 800b068:	69bb      	ldr	r3, [r7, #24]
 800b06a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b06e:	687a      	ldr	r2, [r7, #4]
 800b070:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b072:	69b8      	ldr	r0, [r7, #24]
 800b074:	f000 f8f8 	bl	800b268 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b078:	4b1a      	ldr	r3, [pc, #104]	; (800b0e4 <pvPortMalloc+0x17c>)
 800b07a:	681a      	ldr	r2, [r3, #0]
 800b07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b07e:	685b      	ldr	r3, [r3, #4]
 800b080:	1ad3      	subs	r3, r2, r3
 800b082:	4a18      	ldr	r2, [pc, #96]	; (800b0e4 <pvPortMalloc+0x17c>)
 800b084:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b086:	4b17      	ldr	r3, [pc, #92]	; (800b0e4 <pvPortMalloc+0x17c>)
 800b088:	681a      	ldr	r2, [r3, #0]
 800b08a:	4b18      	ldr	r3, [pc, #96]	; (800b0ec <pvPortMalloc+0x184>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	429a      	cmp	r2, r3
 800b090:	d203      	bcs.n	800b09a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b092:	4b14      	ldr	r3, [pc, #80]	; (800b0e4 <pvPortMalloc+0x17c>)
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	4a15      	ldr	r2, [pc, #84]	; (800b0ec <pvPortMalloc+0x184>)
 800b098:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b09c:	685a      	ldr	r2, [r3, #4]
 800b09e:	4b10      	ldr	r3, [pc, #64]	; (800b0e0 <pvPortMalloc+0x178>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	431a      	orrs	r2, r3
 800b0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b0ae:	f7fe fc65 	bl	800997c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b0b2:	69fb      	ldr	r3, [r7, #28]
 800b0b4:	f003 0307 	and.w	r3, r3, #7
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d00a      	beq.n	800b0d2 <pvPortMalloc+0x16a>
	__asm volatile
 800b0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0c0:	f383 8811 	msr	BASEPRI, r3
 800b0c4:	f3bf 8f6f 	isb	sy
 800b0c8:	f3bf 8f4f 	dsb	sy
 800b0cc:	60fb      	str	r3, [r7, #12]
}
 800b0ce:	bf00      	nop
 800b0d0:	e7fe      	b.n	800b0d0 <pvPortMalloc+0x168>
	return pvReturn;
 800b0d2:	69fb      	ldr	r3, [r7, #28]
}
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	3728      	adds	r7, #40	; 0x28
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	bd80      	pop	{r7, pc}
 800b0dc:	20002194 	.word	0x20002194
 800b0e0:	200021a0 	.word	0x200021a0
 800b0e4:	20002198 	.word	0x20002198
 800b0e8:	2000218c 	.word	0x2000218c
 800b0ec:	2000219c 	.word	0x2000219c

0800b0f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b086      	sub	sp, #24
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d048      	beq.n	800b194 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b102:	2308      	movs	r3, #8
 800b104:	425b      	negs	r3, r3
 800b106:	697a      	ldr	r2, [r7, #20]
 800b108:	4413      	add	r3, r2
 800b10a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b10c:	697b      	ldr	r3, [r7, #20]
 800b10e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b110:	693b      	ldr	r3, [r7, #16]
 800b112:	685a      	ldr	r2, [r3, #4]
 800b114:	4b21      	ldr	r3, [pc, #132]	; (800b19c <vPortFree+0xac>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	4013      	ands	r3, r2
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d10a      	bne.n	800b134 <vPortFree+0x44>
	__asm volatile
 800b11e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b122:	f383 8811 	msr	BASEPRI, r3
 800b126:	f3bf 8f6f 	isb	sy
 800b12a:	f3bf 8f4f 	dsb	sy
 800b12e:	60fb      	str	r3, [r7, #12]
}
 800b130:	bf00      	nop
 800b132:	e7fe      	b.n	800b132 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b134:	693b      	ldr	r3, [r7, #16]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d00a      	beq.n	800b152 <vPortFree+0x62>
	__asm volatile
 800b13c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b140:	f383 8811 	msr	BASEPRI, r3
 800b144:	f3bf 8f6f 	isb	sy
 800b148:	f3bf 8f4f 	dsb	sy
 800b14c:	60bb      	str	r3, [r7, #8]
}
 800b14e:	bf00      	nop
 800b150:	e7fe      	b.n	800b150 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b152:	693b      	ldr	r3, [r7, #16]
 800b154:	685a      	ldr	r2, [r3, #4]
 800b156:	4b11      	ldr	r3, [pc, #68]	; (800b19c <vPortFree+0xac>)
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	4013      	ands	r3, r2
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d019      	beq.n	800b194 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b160:	693b      	ldr	r3, [r7, #16]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d115      	bne.n	800b194 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	685a      	ldr	r2, [r3, #4]
 800b16c:	4b0b      	ldr	r3, [pc, #44]	; (800b19c <vPortFree+0xac>)
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	43db      	mvns	r3, r3
 800b172:	401a      	ands	r2, r3
 800b174:	693b      	ldr	r3, [r7, #16]
 800b176:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b178:	f7fe fbf2 	bl	8009960 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b17c:	693b      	ldr	r3, [r7, #16]
 800b17e:	685a      	ldr	r2, [r3, #4]
 800b180:	4b07      	ldr	r3, [pc, #28]	; (800b1a0 <vPortFree+0xb0>)
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	4413      	add	r3, r2
 800b186:	4a06      	ldr	r2, [pc, #24]	; (800b1a0 <vPortFree+0xb0>)
 800b188:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b18a:	6938      	ldr	r0, [r7, #16]
 800b18c:	f000 f86c 	bl	800b268 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b190:	f7fe fbf4 	bl	800997c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b194:	bf00      	nop
 800b196:	3718      	adds	r7, #24
 800b198:	46bd      	mov	sp, r7
 800b19a:	bd80      	pop	{r7, pc}
 800b19c:	200021a0 	.word	0x200021a0
 800b1a0:	20002198 	.word	0x20002198

0800b1a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b085      	sub	sp, #20
 800b1a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b1aa:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800b1ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b1b0:	4b27      	ldr	r3, [pc, #156]	; (800b250 <prvHeapInit+0xac>)
 800b1b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	f003 0307 	and.w	r3, r3, #7
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d00c      	beq.n	800b1d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	3307      	adds	r3, #7
 800b1c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	f023 0307 	bic.w	r3, r3, #7
 800b1ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b1cc:	68ba      	ldr	r2, [r7, #8]
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	1ad3      	subs	r3, r2, r3
 800b1d2:	4a1f      	ldr	r2, [pc, #124]	; (800b250 <prvHeapInit+0xac>)
 800b1d4:	4413      	add	r3, r2
 800b1d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b1dc:	4a1d      	ldr	r2, [pc, #116]	; (800b254 <prvHeapInit+0xb0>)
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b1e2:	4b1c      	ldr	r3, [pc, #112]	; (800b254 <prvHeapInit+0xb0>)
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	68ba      	ldr	r2, [r7, #8]
 800b1ec:	4413      	add	r3, r2
 800b1ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b1f0:	2208      	movs	r2, #8
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	1a9b      	subs	r3, r3, r2
 800b1f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	f023 0307 	bic.w	r3, r3, #7
 800b1fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	4a15      	ldr	r2, [pc, #84]	; (800b258 <prvHeapInit+0xb4>)
 800b204:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b206:	4b14      	ldr	r3, [pc, #80]	; (800b258 <prvHeapInit+0xb4>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	2200      	movs	r2, #0
 800b20c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b20e:	4b12      	ldr	r3, [pc, #72]	; (800b258 <prvHeapInit+0xb4>)
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	2200      	movs	r2, #0
 800b214:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	68fa      	ldr	r2, [r7, #12]
 800b21e:	1ad2      	subs	r2, r2, r3
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b224:	4b0c      	ldr	r3, [pc, #48]	; (800b258 <prvHeapInit+0xb4>)
 800b226:	681a      	ldr	r2, [r3, #0]
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	685b      	ldr	r3, [r3, #4]
 800b230:	4a0a      	ldr	r2, [pc, #40]	; (800b25c <prvHeapInit+0xb8>)
 800b232:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	685b      	ldr	r3, [r3, #4]
 800b238:	4a09      	ldr	r2, [pc, #36]	; (800b260 <prvHeapInit+0xbc>)
 800b23a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b23c:	4b09      	ldr	r3, [pc, #36]	; (800b264 <prvHeapInit+0xc0>)
 800b23e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b242:	601a      	str	r2, [r3, #0]
}
 800b244:	bf00      	nop
 800b246:	3714      	adds	r7, #20
 800b248:	46bd      	mov	sp, r7
 800b24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24e:	4770      	bx	lr
 800b250:	2000128c 	.word	0x2000128c
 800b254:	2000218c 	.word	0x2000218c
 800b258:	20002194 	.word	0x20002194
 800b25c:	2000219c 	.word	0x2000219c
 800b260:	20002198 	.word	0x20002198
 800b264:	200021a0 	.word	0x200021a0

0800b268 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b268:	b480      	push	{r7}
 800b26a:	b085      	sub	sp, #20
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b270:	4b28      	ldr	r3, [pc, #160]	; (800b314 <prvInsertBlockIntoFreeList+0xac>)
 800b272:	60fb      	str	r3, [r7, #12]
 800b274:	e002      	b.n	800b27c <prvInsertBlockIntoFreeList+0x14>
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	60fb      	str	r3, [r7, #12]
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	687a      	ldr	r2, [r7, #4]
 800b282:	429a      	cmp	r2, r3
 800b284:	d8f7      	bhi.n	800b276 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	685b      	ldr	r3, [r3, #4]
 800b28e:	68ba      	ldr	r2, [r7, #8]
 800b290:	4413      	add	r3, r2
 800b292:	687a      	ldr	r2, [r7, #4]
 800b294:	429a      	cmp	r2, r3
 800b296:	d108      	bne.n	800b2aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	685a      	ldr	r2, [r3, #4]
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	685b      	ldr	r3, [r3, #4]
 800b2a0:	441a      	add	r2, r3
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	685b      	ldr	r3, [r3, #4]
 800b2b2:	68ba      	ldr	r2, [r7, #8]
 800b2b4:	441a      	add	r2, r3
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	429a      	cmp	r2, r3
 800b2bc:	d118      	bne.n	800b2f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	681a      	ldr	r2, [r3, #0]
 800b2c2:	4b15      	ldr	r3, [pc, #84]	; (800b318 <prvInsertBlockIntoFreeList+0xb0>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	429a      	cmp	r2, r3
 800b2c8:	d00d      	beq.n	800b2e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	685a      	ldr	r2, [r3, #4]
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	685b      	ldr	r3, [r3, #4]
 800b2d4:	441a      	add	r2, r3
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	681a      	ldr	r2, [r3, #0]
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	601a      	str	r2, [r3, #0]
 800b2e4:	e008      	b.n	800b2f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b2e6:	4b0c      	ldr	r3, [pc, #48]	; (800b318 <prvInsertBlockIntoFreeList+0xb0>)
 800b2e8:	681a      	ldr	r2, [r3, #0]
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	601a      	str	r2, [r3, #0]
 800b2ee:	e003      	b.n	800b2f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	681a      	ldr	r2, [r3, #0]
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b2f8:	68fa      	ldr	r2, [r7, #12]
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	429a      	cmp	r2, r3
 800b2fe:	d002      	beq.n	800b306 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	687a      	ldr	r2, [r7, #4]
 800b304:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b306:	bf00      	nop
 800b308:	3714      	adds	r7, #20
 800b30a:	46bd      	mov	sp, r7
 800b30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b310:	4770      	bx	lr
 800b312:	bf00      	nop
 800b314:	2000218c 	.word	0x2000218c
 800b318:	20002194 	.word	0x20002194

0800b31c <__cvt>:
 800b31c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b320:	ec55 4b10 	vmov	r4, r5, d0
 800b324:	2d00      	cmp	r5, #0
 800b326:	460e      	mov	r6, r1
 800b328:	4619      	mov	r1, r3
 800b32a:	462b      	mov	r3, r5
 800b32c:	bfbb      	ittet	lt
 800b32e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b332:	461d      	movlt	r5, r3
 800b334:	2300      	movge	r3, #0
 800b336:	232d      	movlt	r3, #45	; 0x2d
 800b338:	700b      	strb	r3, [r1, #0]
 800b33a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b33c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b340:	4691      	mov	r9, r2
 800b342:	f023 0820 	bic.w	r8, r3, #32
 800b346:	bfbc      	itt	lt
 800b348:	4622      	movlt	r2, r4
 800b34a:	4614      	movlt	r4, r2
 800b34c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b350:	d005      	beq.n	800b35e <__cvt+0x42>
 800b352:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b356:	d100      	bne.n	800b35a <__cvt+0x3e>
 800b358:	3601      	adds	r6, #1
 800b35a:	2102      	movs	r1, #2
 800b35c:	e000      	b.n	800b360 <__cvt+0x44>
 800b35e:	2103      	movs	r1, #3
 800b360:	ab03      	add	r3, sp, #12
 800b362:	9301      	str	r3, [sp, #4]
 800b364:	ab02      	add	r3, sp, #8
 800b366:	9300      	str	r3, [sp, #0]
 800b368:	ec45 4b10 	vmov	d0, r4, r5
 800b36c:	4653      	mov	r3, sl
 800b36e:	4632      	mov	r2, r6
 800b370:	f000 fe62 	bl	800c038 <_dtoa_r>
 800b374:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b378:	4607      	mov	r7, r0
 800b37a:	d102      	bne.n	800b382 <__cvt+0x66>
 800b37c:	f019 0f01 	tst.w	r9, #1
 800b380:	d022      	beq.n	800b3c8 <__cvt+0xac>
 800b382:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b386:	eb07 0906 	add.w	r9, r7, r6
 800b38a:	d110      	bne.n	800b3ae <__cvt+0x92>
 800b38c:	783b      	ldrb	r3, [r7, #0]
 800b38e:	2b30      	cmp	r3, #48	; 0x30
 800b390:	d10a      	bne.n	800b3a8 <__cvt+0x8c>
 800b392:	2200      	movs	r2, #0
 800b394:	2300      	movs	r3, #0
 800b396:	4620      	mov	r0, r4
 800b398:	4629      	mov	r1, r5
 800b39a:	f7f5 fba5 	bl	8000ae8 <__aeabi_dcmpeq>
 800b39e:	b918      	cbnz	r0, 800b3a8 <__cvt+0x8c>
 800b3a0:	f1c6 0601 	rsb	r6, r6, #1
 800b3a4:	f8ca 6000 	str.w	r6, [sl]
 800b3a8:	f8da 3000 	ldr.w	r3, [sl]
 800b3ac:	4499      	add	r9, r3
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	4620      	mov	r0, r4
 800b3b4:	4629      	mov	r1, r5
 800b3b6:	f7f5 fb97 	bl	8000ae8 <__aeabi_dcmpeq>
 800b3ba:	b108      	cbz	r0, 800b3c0 <__cvt+0xa4>
 800b3bc:	f8cd 900c 	str.w	r9, [sp, #12]
 800b3c0:	2230      	movs	r2, #48	; 0x30
 800b3c2:	9b03      	ldr	r3, [sp, #12]
 800b3c4:	454b      	cmp	r3, r9
 800b3c6:	d307      	bcc.n	800b3d8 <__cvt+0xbc>
 800b3c8:	9b03      	ldr	r3, [sp, #12]
 800b3ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b3cc:	1bdb      	subs	r3, r3, r7
 800b3ce:	4638      	mov	r0, r7
 800b3d0:	6013      	str	r3, [r2, #0]
 800b3d2:	b004      	add	sp, #16
 800b3d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3d8:	1c59      	adds	r1, r3, #1
 800b3da:	9103      	str	r1, [sp, #12]
 800b3dc:	701a      	strb	r2, [r3, #0]
 800b3de:	e7f0      	b.n	800b3c2 <__cvt+0xa6>

0800b3e0 <__exponent>:
 800b3e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	2900      	cmp	r1, #0
 800b3e6:	bfb8      	it	lt
 800b3e8:	4249      	neglt	r1, r1
 800b3ea:	f803 2b02 	strb.w	r2, [r3], #2
 800b3ee:	bfb4      	ite	lt
 800b3f0:	222d      	movlt	r2, #45	; 0x2d
 800b3f2:	222b      	movge	r2, #43	; 0x2b
 800b3f4:	2909      	cmp	r1, #9
 800b3f6:	7042      	strb	r2, [r0, #1]
 800b3f8:	dd2a      	ble.n	800b450 <__exponent+0x70>
 800b3fa:	f10d 0207 	add.w	r2, sp, #7
 800b3fe:	4617      	mov	r7, r2
 800b400:	260a      	movs	r6, #10
 800b402:	4694      	mov	ip, r2
 800b404:	fb91 f5f6 	sdiv	r5, r1, r6
 800b408:	fb06 1415 	mls	r4, r6, r5, r1
 800b40c:	3430      	adds	r4, #48	; 0x30
 800b40e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800b412:	460c      	mov	r4, r1
 800b414:	2c63      	cmp	r4, #99	; 0x63
 800b416:	f102 32ff 	add.w	r2, r2, #4294967295
 800b41a:	4629      	mov	r1, r5
 800b41c:	dcf1      	bgt.n	800b402 <__exponent+0x22>
 800b41e:	3130      	adds	r1, #48	; 0x30
 800b420:	f1ac 0402 	sub.w	r4, ip, #2
 800b424:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b428:	1c41      	adds	r1, r0, #1
 800b42a:	4622      	mov	r2, r4
 800b42c:	42ba      	cmp	r2, r7
 800b42e:	d30a      	bcc.n	800b446 <__exponent+0x66>
 800b430:	f10d 0209 	add.w	r2, sp, #9
 800b434:	eba2 020c 	sub.w	r2, r2, ip
 800b438:	42bc      	cmp	r4, r7
 800b43a:	bf88      	it	hi
 800b43c:	2200      	movhi	r2, #0
 800b43e:	4413      	add	r3, r2
 800b440:	1a18      	subs	r0, r3, r0
 800b442:	b003      	add	sp, #12
 800b444:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b446:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b44a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800b44e:	e7ed      	b.n	800b42c <__exponent+0x4c>
 800b450:	2330      	movs	r3, #48	; 0x30
 800b452:	3130      	adds	r1, #48	; 0x30
 800b454:	7083      	strb	r3, [r0, #2]
 800b456:	70c1      	strb	r1, [r0, #3]
 800b458:	1d03      	adds	r3, r0, #4
 800b45a:	e7f1      	b.n	800b440 <__exponent+0x60>

0800b45c <_printf_float>:
 800b45c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b460:	ed2d 8b02 	vpush	{d8}
 800b464:	b08d      	sub	sp, #52	; 0x34
 800b466:	460c      	mov	r4, r1
 800b468:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b46c:	4616      	mov	r6, r2
 800b46e:	461f      	mov	r7, r3
 800b470:	4605      	mov	r5, r0
 800b472:	f000 fcd5 	bl	800be20 <_localeconv_r>
 800b476:	f8d0 a000 	ldr.w	sl, [r0]
 800b47a:	4650      	mov	r0, sl
 800b47c:	f7f4 ff08 	bl	8000290 <strlen>
 800b480:	2300      	movs	r3, #0
 800b482:	930a      	str	r3, [sp, #40]	; 0x28
 800b484:	6823      	ldr	r3, [r4, #0]
 800b486:	9305      	str	r3, [sp, #20]
 800b488:	f8d8 3000 	ldr.w	r3, [r8]
 800b48c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b490:	3307      	adds	r3, #7
 800b492:	f023 0307 	bic.w	r3, r3, #7
 800b496:	f103 0208 	add.w	r2, r3, #8
 800b49a:	f8c8 2000 	str.w	r2, [r8]
 800b49e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b4a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b4a6:	9307      	str	r3, [sp, #28]
 800b4a8:	f8cd 8018 	str.w	r8, [sp, #24]
 800b4ac:	ee08 0a10 	vmov	s16, r0
 800b4b0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800b4b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b4b8:	4b9e      	ldr	r3, [pc, #632]	; (800b734 <_printf_float+0x2d8>)
 800b4ba:	f04f 32ff 	mov.w	r2, #4294967295
 800b4be:	f7f5 fb45 	bl	8000b4c <__aeabi_dcmpun>
 800b4c2:	bb88      	cbnz	r0, 800b528 <_printf_float+0xcc>
 800b4c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b4c8:	4b9a      	ldr	r3, [pc, #616]	; (800b734 <_printf_float+0x2d8>)
 800b4ca:	f04f 32ff 	mov.w	r2, #4294967295
 800b4ce:	f7f5 fb1f 	bl	8000b10 <__aeabi_dcmple>
 800b4d2:	bb48      	cbnz	r0, 800b528 <_printf_float+0xcc>
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	4640      	mov	r0, r8
 800b4da:	4649      	mov	r1, r9
 800b4dc:	f7f5 fb0e 	bl	8000afc <__aeabi_dcmplt>
 800b4e0:	b110      	cbz	r0, 800b4e8 <_printf_float+0x8c>
 800b4e2:	232d      	movs	r3, #45	; 0x2d
 800b4e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b4e8:	4a93      	ldr	r2, [pc, #588]	; (800b738 <_printf_float+0x2dc>)
 800b4ea:	4b94      	ldr	r3, [pc, #592]	; (800b73c <_printf_float+0x2e0>)
 800b4ec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b4f0:	bf94      	ite	ls
 800b4f2:	4690      	movls	r8, r2
 800b4f4:	4698      	movhi	r8, r3
 800b4f6:	2303      	movs	r3, #3
 800b4f8:	6123      	str	r3, [r4, #16]
 800b4fa:	9b05      	ldr	r3, [sp, #20]
 800b4fc:	f023 0304 	bic.w	r3, r3, #4
 800b500:	6023      	str	r3, [r4, #0]
 800b502:	f04f 0900 	mov.w	r9, #0
 800b506:	9700      	str	r7, [sp, #0]
 800b508:	4633      	mov	r3, r6
 800b50a:	aa0b      	add	r2, sp, #44	; 0x2c
 800b50c:	4621      	mov	r1, r4
 800b50e:	4628      	mov	r0, r5
 800b510:	f000 f9da 	bl	800b8c8 <_printf_common>
 800b514:	3001      	adds	r0, #1
 800b516:	f040 8090 	bne.w	800b63a <_printf_float+0x1de>
 800b51a:	f04f 30ff 	mov.w	r0, #4294967295
 800b51e:	b00d      	add	sp, #52	; 0x34
 800b520:	ecbd 8b02 	vpop	{d8}
 800b524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b528:	4642      	mov	r2, r8
 800b52a:	464b      	mov	r3, r9
 800b52c:	4640      	mov	r0, r8
 800b52e:	4649      	mov	r1, r9
 800b530:	f7f5 fb0c 	bl	8000b4c <__aeabi_dcmpun>
 800b534:	b140      	cbz	r0, 800b548 <_printf_float+0xec>
 800b536:	464b      	mov	r3, r9
 800b538:	2b00      	cmp	r3, #0
 800b53a:	bfbc      	itt	lt
 800b53c:	232d      	movlt	r3, #45	; 0x2d
 800b53e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b542:	4a7f      	ldr	r2, [pc, #508]	; (800b740 <_printf_float+0x2e4>)
 800b544:	4b7f      	ldr	r3, [pc, #508]	; (800b744 <_printf_float+0x2e8>)
 800b546:	e7d1      	b.n	800b4ec <_printf_float+0x90>
 800b548:	6863      	ldr	r3, [r4, #4]
 800b54a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b54e:	9206      	str	r2, [sp, #24]
 800b550:	1c5a      	adds	r2, r3, #1
 800b552:	d13f      	bne.n	800b5d4 <_printf_float+0x178>
 800b554:	2306      	movs	r3, #6
 800b556:	6063      	str	r3, [r4, #4]
 800b558:	9b05      	ldr	r3, [sp, #20]
 800b55a:	6861      	ldr	r1, [r4, #4]
 800b55c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b560:	2300      	movs	r3, #0
 800b562:	9303      	str	r3, [sp, #12]
 800b564:	ab0a      	add	r3, sp, #40	; 0x28
 800b566:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b56a:	ab09      	add	r3, sp, #36	; 0x24
 800b56c:	ec49 8b10 	vmov	d0, r8, r9
 800b570:	9300      	str	r3, [sp, #0]
 800b572:	6022      	str	r2, [r4, #0]
 800b574:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b578:	4628      	mov	r0, r5
 800b57a:	f7ff fecf 	bl	800b31c <__cvt>
 800b57e:	9b06      	ldr	r3, [sp, #24]
 800b580:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b582:	2b47      	cmp	r3, #71	; 0x47
 800b584:	4680      	mov	r8, r0
 800b586:	d108      	bne.n	800b59a <_printf_float+0x13e>
 800b588:	1cc8      	adds	r0, r1, #3
 800b58a:	db02      	blt.n	800b592 <_printf_float+0x136>
 800b58c:	6863      	ldr	r3, [r4, #4]
 800b58e:	4299      	cmp	r1, r3
 800b590:	dd41      	ble.n	800b616 <_printf_float+0x1ba>
 800b592:	f1ab 0302 	sub.w	r3, fp, #2
 800b596:	fa5f fb83 	uxtb.w	fp, r3
 800b59a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b59e:	d820      	bhi.n	800b5e2 <_printf_float+0x186>
 800b5a0:	3901      	subs	r1, #1
 800b5a2:	465a      	mov	r2, fp
 800b5a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b5a8:	9109      	str	r1, [sp, #36]	; 0x24
 800b5aa:	f7ff ff19 	bl	800b3e0 <__exponent>
 800b5ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b5b0:	1813      	adds	r3, r2, r0
 800b5b2:	2a01      	cmp	r2, #1
 800b5b4:	4681      	mov	r9, r0
 800b5b6:	6123      	str	r3, [r4, #16]
 800b5b8:	dc02      	bgt.n	800b5c0 <_printf_float+0x164>
 800b5ba:	6822      	ldr	r2, [r4, #0]
 800b5bc:	07d2      	lsls	r2, r2, #31
 800b5be:	d501      	bpl.n	800b5c4 <_printf_float+0x168>
 800b5c0:	3301      	adds	r3, #1
 800b5c2:	6123      	str	r3, [r4, #16]
 800b5c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d09c      	beq.n	800b506 <_printf_float+0xaa>
 800b5cc:	232d      	movs	r3, #45	; 0x2d
 800b5ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b5d2:	e798      	b.n	800b506 <_printf_float+0xaa>
 800b5d4:	9a06      	ldr	r2, [sp, #24]
 800b5d6:	2a47      	cmp	r2, #71	; 0x47
 800b5d8:	d1be      	bne.n	800b558 <_printf_float+0xfc>
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d1bc      	bne.n	800b558 <_printf_float+0xfc>
 800b5de:	2301      	movs	r3, #1
 800b5e0:	e7b9      	b.n	800b556 <_printf_float+0xfa>
 800b5e2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b5e6:	d118      	bne.n	800b61a <_printf_float+0x1be>
 800b5e8:	2900      	cmp	r1, #0
 800b5ea:	6863      	ldr	r3, [r4, #4]
 800b5ec:	dd0b      	ble.n	800b606 <_printf_float+0x1aa>
 800b5ee:	6121      	str	r1, [r4, #16]
 800b5f0:	b913      	cbnz	r3, 800b5f8 <_printf_float+0x19c>
 800b5f2:	6822      	ldr	r2, [r4, #0]
 800b5f4:	07d0      	lsls	r0, r2, #31
 800b5f6:	d502      	bpl.n	800b5fe <_printf_float+0x1a2>
 800b5f8:	3301      	adds	r3, #1
 800b5fa:	440b      	add	r3, r1
 800b5fc:	6123      	str	r3, [r4, #16]
 800b5fe:	65a1      	str	r1, [r4, #88]	; 0x58
 800b600:	f04f 0900 	mov.w	r9, #0
 800b604:	e7de      	b.n	800b5c4 <_printf_float+0x168>
 800b606:	b913      	cbnz	r3, 800b60e <_printf_float+0x1b2>
 800b608:	6822      	ldr	r2, [r4, #0]
 800b60a:	07d2      	lsls	r2, r2, #31
 800b60c:	d501      	bpl.n	800b612 <_printf_float+0x1b6>
 800b60e:	3302      	adds	r3, #2
 800b610:	e7f4      	b.n	800b5fc <_printf_float+0x1a0>
 800b612:	2301      	movs	r3, #1
 800b614:	e7f2      	b.n	800b5fc <_printf_float+0x1a0>
 800b616:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b61a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b61c:	4299      	cmp	r1, r3
 800b61e:	db05      	blt.n	800b62c <_printf_float+0x1d0>
 800b620:	6823      	ldr	r3, [r4, #0]
 800b622:	6121      	str	r1, [r4, #16]
 800b624:	07d8      	lsls	r0, r3, #31
 800b626:	d5ea      	bpl.n	800b5fe <_printf_float+0x1a2>
 800b628:	1c4b      	adds	r3, r1, #1
 800b62a:	e7e7      	b.n	800b5fc <_printf_float+0x1a0>
 800b62c:	2900      	cmp	r1, #0
 800b62e:	bfd4      	ite	le
 800b630:	f1c1 0202 	rsble	r2, r1, #2
 800b634:	2201      	movgt	r2, #1
 800b636:	4413      	add	r3, r2
 800b638:	e7e0      	b.n	800b5fc <_printf_float+0x1a0>
 800b63a:	6823      	ldr	r3, [r4, #0]
 800b63c:	055a      	lsls	r2, r3, #21
 800b63e:	d407      	bmi.n	800b650 <_printf_float+0x1f4>
 800b640:	6923      	ldr	r3, [r4, #16]
 800b642:	4642      	mov	r2, r8
 800b644:	4631      	mov	r1, r6
 800b646:	4628      	mov	r0, r5
 800b648:	47b8      	blx	r7
 800b64a:	3001      	adds	r0, #1
 800b64c:	d12c      	bne.n	800b6a8 <_printf_float+0x24c>
 800b64e:	e764      	b.n	800b51a <_printf_float+0xbe>
 800b650:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b654:	f240 80e0 	bls.w	800b818 <_printf_float+0x3bc>
 800b658:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b65c:	2200      	movs	r2, #0
 800b65e:	2300      	movs	r3, #0
 800b660:	f7f5 fa42 	bl	8000ae8 <__aeabi_dcmpeq>
 800b664:	2800      	cmp	r0, #0
 800b666:	d034      	beq.n	800b6d2 <_printf_float+0x276>
 800b668:	4a37      	ldr	r2, [pc, #220]	; (800b748 <_printf_float+0x2ec>)
 800b66a:	2301      	movs	r3, #1
 800b66c:	4631      	mov	r1, r6
 800b66e:	4628      	mov	r0, r5
 800b670:	47b8      	blx	r7
 800b672:	3001      	adds	r0, #1
 800b674:	f43f af51 	beq.w	800b51a <_printf_float+0xbe>
 800b678:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b67c:	429a      	cmp	r2, r3
 800b67e:	db02      	blt.n	800b686 <_printf_float+0x22a>
 800b680:	6823      	ldr	r3, [r4, #0]
 800b682:	07d8      	lsls	r0, r3, #31
 800b684:	d510      	bpl.n	800b6a8 <_printf_float+0x24c>
 800b686:	ee18 3a10 	vmov	r3, s16
 800b68a:	4652      	mov	r2, sl
 800b68c:	4631      	mov	r1, r6
 800b68e:	4628      	mov	r0, r5
 800b690:	47b8      	blx	r7
 800b692:	3001      	adds	r0, #1
 800b694:	f43f af41 	beq.w	800b51a <_printf_float+0xbe>
 800b698:	f04f 0800 	mov.w	r8, #0
 800b69c:	f104 091a 	add.w	r9, r4, #26
 800b6a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6a2:	3b01      	subs	r3, #1
 800b6a4:	4543      	cmp	r3, r8
 800b6a6:	dc09      	bgt.n	800b6bc <_printf_float+0x260>
 800b6a8:	6823      	ldr	r3, [r4, #0]
 800b6aa:	079b      	lsls	r3, r3, #30
 800b6ac:	f100 8107 	bmi.w	800b8be <_printf_float+0x462>
 800b6b0:	68e0      	ldr	r0, [r4, #12]
 800b6b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6b4:	4298      	cmp	r0, r3
 800b6b6:	bfb8      	it	lt
 800b6b8:	4618      	movlt	r0, r3
 800b6ba:	e730      	b.n	800b51e <_printf_float+0xc2>
 800b6bc:	2301      	movs	r3, #1
 800b6be:	464a      	mov	r2, r9
 800b6c0:	4631      	mov	r1, r6
 800b6c2:	4628      	mov	r0, r5
 800b6c4:	47b8      	blx	r7
 800b6c6:	3001      	adds	r0, #1
 800b6c8:	f43f af27 	beq.w	800b51a <_printf_float+0xbe>
 800b6cc:	f108 0801 	add.w	r8, r8, #1
 800b6d0:	e7e6      	b.n	800b6a0 <_printf_float+0x244>
 800b6d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	dc39      	bgt.n	800b74c <_printf_float+0x2f0>
 800b6d8:	4a1b      	ldr	r2, [pc, #108]	; (800b748 <_printf_float+0x2ec>)
 800b6da:	2301      	movs	r3, #1
 800b6dc:	4631      	mov	r1, r6
 800b6de:	4628      	mov	r0, r5
 800b6e0:	47b8      	blx	r7
 800b6e2:	3001      	adds	r0, #1
 800b6e4:	f43f af19 	beq.w	800b51a <_printf_float+0xbe>
 800b6e8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b6ec:	4313      	orrs	r3, r2
 800b6ee:	d102      	bne.n	800b6f6 <_printf_float+0x29a>
 800b6f0:	6823      	ldr	r3, [r4, #0]
 800b6f2:	07d9      	lsls	r1, r3, #31
 800b6f4:	d5d8      	bpl.n	800b6a8 <_printf_float+0x24c>
 800b6f6:	ee18 3a10 	vmov	r3, s16
 800b6fa:	4652      	mov	r2, sl
 800b6fc:	4631      	mov	r1, r6
 800b6fe:	4628      	mov	r0, r5
 800b700:	47b8      	blx	r7
 800b702:	3001      	adds	r0, #1
 800b704:	f43f af09 	beq.w	800b51a <_printf_float+0xbe>
 800b708:	f04f 0900 	mov.w	r9, #0
 800b70c:	f104 0a1a 	add.w	sl, r4, #26
 800b710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b712:	425b      	negs	r3, r3
 800b714:	454b      	cmp	r3, r9
 800b716:	dc01      	bgt.n	800b71c <_printf_float+0x2c0>
 800b718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b71a:	e792      	b.n	800b642 <_printf_float+0x1e6>
 800b71c:	2301      	movs	r3, #1
 800b71e:	4652      	mov	r2, sl
 800b720:	4631      	mov	r1, r6
 800b722:	4628      	mov	r0, r5
 800b724:	47b8      	blx	r7
 800b726:	3001      	adds	r0, #1
 800b728:	f43f aef7 	beq.w	800b51a <_printf_float+0xbe>
 800b72c:	f109 0901 	add.w	r9, r9, #1
 800b730:	e7ee      	b.n	800b710 <_printf_float+0x2b4>
 800b732:	bf00      	nop
 800b734:	7fefffff 	.word	0x7fefffff
 800b738:	0800f29c 	.word	0x0800f29c
 800b73c:	0800f2a0 	.word	0x0800f2a0
 800b740:	0800f2a4 	.word	0x0800f2a4
 800b744:	0800f2a8 	.word	0x0800f2a8
 800b748:	0800f2ac 	.word	0x0800f2ac
 800b74c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b74e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b750:	429a      	cmp	r2, r3
 800b752:	bfa8      	it	ge
 800b754:	461a      	movge	r2, r3
 800b756:	2a00      	cmp	r2, #0
 800b758:	4691      	mov	r9, r2
 800b75a:	dc37      	bgt.n	800b7cc <_printf_float+0x370>
 800b75c:	f04f 0b00 	mov.w	fp, #0
 800b760:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b764:	f104 021a 	add.w	r2, r4, #26
 800b768:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b76a:	9305      	str	r3, [sp, #20]
 800b76c:	eba3 0309 	sub.w	r3, r3, r9
 800b770:	455b      	cmp	r3, fp
 800b772:	dc33      	bgt.n	800b7dc <_printf_float+0x380>
 800b774:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b778:	429a      	cmp	r2, r3
 800b77a:	db3b      	blt.n	800b7f4 <_printf_float+0x398>
 800b77c:	6823      	ldr	r3, [r4, #0]
 800b77e:	07da      	lsls	r2, r3, #31
 800b780:	d438      	bmi.n	800b7f4 <_printf_float+0x398>
 800b782:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b786:	eba2 0903 	sub.w	r9, r2, r3
 800b78a:	9b05      	ldr	r3, [sp, #20]
 800b78c:	1ad2      	subs	r2, r2, r3
 800b78e:	4591      	cmp	r9, r2
 800b790:	bfa8      	it	ge
 800b792:	4691      	movge	r9, r2
 800b794:	f1b9 0f00 	cmp.w	r9, #0
 800b798:	dc35      	bgt.n	800b806 <_printf_float+0x3aa>
 800b79a:	f04f 0800 	mov.w	r8, #0
 800b79e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b7a2:	f104 0a1a 	add.w	sl, r4, #26
 800b7a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b7aa:	1a9b      	subs	r3, r3, r2
 800b7ac:	eba3 0309 	sub.w	r3, r3, r9
 800b7b0:	4543      	cmp	r3, r8
 800b7b2:	f77f af79 	ble.w	800b6a8 <_printf_float+0x24c>
 800b7b6:	2301      	movs	r3, #1
 800b7b8:	4652      	mov	r2, sl
 800b7ba:	4631      	mov	r1, r6
 800b7bc:	4628      	mov	r0, r5
 800b7be:	47b8      	blx	r7
 800b7c0:	3001      	adds	r0, #1
 800b7c2:	f43f aeaa 	beq.w	800b51a <_printf_float+0xbe>
 800b7c6:	f108 0801 	add.w	r8, r8, #1
 800b7ca:	e7ec      	b.n	800b7a6 <_printf_float+0x34a>
 800b7cc:	4613      	mov	r3, r2
 800b7ce:	4631      	mov	r1, r6
 800b7d0:	4642      	mov	r2, r8
 800b7d2:	4628      	mov	r0, r5
 800b7d4:	47b8      	blx	r7
 800b7d6:	3001      	adds	r0, #1
 800b7d8:	d1c0      	bne.n	800b75c <_printf_float+0x300>
 800b7da:	e69e      	b.n	800b51a <_printf_float+0xbe>
 800b7dc:	2301      	movs	r3, #1
 800b7de:	4631      	mov	r1, r6
 800b7e0:	4628      	mov	r0, r5
 800b7e2:	9205      	str	r2, [sp, #20]
 800b7e4:	47b8      	blx	r7
 800b7e6:	3001      	adds	r0, #1
 800b7e8:	f43f ae97 	beq.w	800b51a <_printf_float+0xbe>
 800b7ec:	9a05      	ldr	r2, [sp, #20]
 800b7ee:	f10b 0b01 	add.w	fp, fp, #1
 800b7f2:	e7b9      	b.n	800b768 <_printf_float+0x30c>
 800b7f4:	ee18 3a10 	vmov	r3, s16
 800b7f8:	4652      	mov	r2, sl
 800b7fa:	4631      	mov	r1, r6
 800b7fc:	4628      	mov	r0, r5
 800b7fe:	47b8      	blx	r7
 800b800:	3001      	adds	r0, #1
 800b802:	d1be      	bne.n	800b782 <_printf_float+0x326>
 800b804:	e689      	b.n	800b51a <_printf_float+0xbe>
 800b806:	9a05      	ldr	r2, [sp, #20]
 800b808:	464b      	mov	r3, r9
 800b80a:	4442      	add	r2, r8
 800b80c:	4631      	mov	r1, r6
 800b80e:	4628      	mov	r0, r5
 800b810:	47b8      	blx	r7
 800b812:	3001      	adds	r0, #1
 800b814:	d1c1      	bne.n	800b79a <_printf_float+0x33e>
 800b816:	e680      	b.n	800b51a <_printf_float+0xbe>
 800b818:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b81a:	2a01      	cmp	r2, #1
 800b81c:	dc01      	bgt.n	800b822 <_printf_float+0x3c6>
 800b81e:	07db      	lsls	r3, r3, #31
 800b820:	d53a      	bpl.n	800b898 <_printf_float+0x43c>
 800b822:	2301      	movs	r3, #1
 800b824:	4642      	mov	r2, r8
 800b826:	4631      	mov	r1, r6
 800b828:	4628      	mov	r0, r5
 800b82a:	47b8      	blx	r7
 800b82c:	3001      	adds	r0, #1
 800b82e:	f43f ae74 	beq.w	800b51a <_printf_float+0xbe>
 800b832:	ee18 3a10 	vmov	r3, s16
 800b836:	4652      	mov	r2, sl
 800b838:	4631      	mov	r1, r6
 800b83a:	4628      	mov	r0, r5
 800b83c:	47b8      	blx	r7
 800b83e:	3001      	adds	r0, #1
 800b840:	f43f ae6b 	beq.w	800b51a <_printf_float+0xbe>
 800b844:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b848:	2200      	movs	r2, #0
 800b84a:	2300      	movs	r3, #0
 800b84c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800b850:	f7f5 f94a 	bl	8000ae8 <__aeabi_dcmpeq>
 800b854:	b9d8      	cbnz	r0, 800b88e <_printf_float+0x432>
 800b856:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b85a:	f108 0201 	add.w	r2, r8, #1
 800b85e:	4631      	mov	r1, r6
 800b860:	4628      	mov	r0, r5
 800b862:	47b8      	blx	r7
 800b864:	3001      	adds	r0, #1
 800b866:	d10e      	bne.n	800b886 <_printf_float+0x42a>
 800b868:	e657      	b.n	800b51a <_printf_float+0xbe>
 800b86a:	2301      	movs	r3, #1
 800b86c:	4652      	mov	r2, sl
 800b86e:	4631      	mov	r1, r6
 800b870:	4628      	mov	r0, r5
 800b872:	47b8      	blx	r7
 800b874:	3001      	adds	r0, #1
 800b876:	f43f ae50 	beq.w	800b51a <_printf_float+0xbe>
 800b87a:	f108 0801 	add.w	r8, r8, #1
 800b87e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b880:	3b01      	subs	r3, #1
 800b882:	4543      	cmp	r3, r8
 800b884:	dcf1      	bgt.n	800b86a <_printf_float+0x40e>
 800b886:	464b      	mov	r3, r9
 800b888:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b88c:	e6da      	b.n	800b644 <_printf_float+0x1e8>
 800b88e:	f04f 0800 	mov.w	r8, #0
 800b892:	f104 0a1a 	add.w	sl, r4, #26
 800b896:	e7f2      	b.n	800b87e <_printf_float+0x422>
 800b898:	2301      	movs	r3, #1
 800b89a:	4642      	mov	r2, r8
 800b89c:	e7df      	b.n	800b85e <_printf_float+0x402>
 800b89e:	2301      	movs	r3, #1
 800b8a0:	464a      	mov	r2, r9
 800b8a2:	4631      	mov	r1, r6
 800b8a4:	4628      	mov	r0, r5
 800b8a6:	47b8      	blx	r7
 800b8a8:	3001      	adds	r0, #1
 800b8aa:	f43f ae36 	beq.w	800b51a <_printf_float+0xbe>
 800b8ae:	f108 0801 	add.w	r8, r8, #1
 800b8b2:	68e3      	ldr	r3, [r4, #12]
 800b8b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b8b6:	1a5b      	subs	r3, r3, r1
 800b8b8:	4543      	cmp	r3, r8
 800b8ba:	dcf0      	bgt.n	800b89e <_printf_float+0x442>
 800b8bc:	e6f8      	b.n	800b6b0 <_printf_float+0x254>
 800b8be:	f04f 0800 	mov.w	r8, #0
 800b8c2:	f104 0919 	add.w	r9, r4, #25
 800b8c6:	e7f4      	b.n	800b8b2 <_printf_float+0x456>

0800b8c8 <_printf_common>:
 800b8c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8cc:	4616      	mov	r6, r2
 800b8ce:	4699      	mov	r9, r3
 800b8d0:	688a      	ldr	r2, [r1, #8]
 800b8d2:	690b      	ldr	r3, [r1, #16]
 800b8d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b8d8:	4293      	cmp	r3, r2
 800b8da:	bfb8      	it	lt
 800b8dc:	4613      	movlt	r3, r2
 800b8de:	6033      	str	r3, [r6, #0]
 800b8e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b8e4:	4607      	mov	r7, r0
 800b8e6:	460c      	mov	r4, r1
 800b8e8:	b10a      	cbz	r2, 800b8ee <_printf_common+0x26>
 800b8ea:	3301      	adds	r3, #1
 800b8ec:	6033      	str	r3, [r6, #0]
 800b8ee:	6823      	ldr	r3, [r4, #0]
 800b8f0:	0699      	lsls	r1, r3, #26
 800b8f2:	bf42      	ittt	mi
 800b8f4:	6833      	ldrmi	r3, [r6, #0]
 800b8f6:	3302      	addmi	r3, #2
 800b8f8:	6033      	strmi	r3, [r6, #0]
 800b8fa:	6825      	ldr	r5, [r4, #0]
 800b8fc:	f015 0506 	ands.w	r5, r5, #6
 800b900:	d106      	bne.n	800b910 <_printf_common+0x48>
 800b902:	f104 0a19 	add.w	sl, r4, #25
 800b906:	68e3      	ldr	r3, [r4, #12]
 800b908:	6832      	ldr	r2, [r6, #0]
 800b90a:	1a9b      	subs	r3, r3, r2
 800b90c:	42ab      	cmp	r3, r5
 800b90e:	dc26      	bgt.n	800b95e <_printf_common+0x96>
 800b910:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b914:	1e13      	subs	r3, r2, #0
 800b916:	6822      	ldr	r2, [r4, #0]
 800b918:	bf18      	it	ne
 800b91a:	2301      	movne	r3, #1
 800b91c:	0692      	lsls	r2, r2, #26
 800b91e:	d42b      	bmi.n	800b978 <_printf_common+0xb0>
 800b920:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b924:	4649      	mov	r1, r9
 800b926:	4638      	mov	r0, r7
 800b928:	47c0      	blx	r8
 800b92a:	3001      	adds	r0, #1
 800b92c:	d01e      	beq.n	800b96c <_printf_common+0xa4>
 800b92e:	6823      	ldr	r3, [r4, #0]
 800b930:	6922      	ldr	r2, [r4, #16]
 800b932:	f003 0306 	and.w	r3, r3, #6
 800b936:	2b04      	cmp	r3, #4
 800b938:	bf02      	ittt	eq
 800b93a:	68e5      	ldreq	r5, [r4, #12]
 800b93c:	6833      	ldreq	r3, [r6, #0]
 800b93e:	1aed      	subeq	r5, r5, r3
 800b940:	68a3      	ldr	r3, [r4, #8]
 800b942:	bf0c      	ite	eq
 800b944:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b948:	2500      	movne	r5, #0
 800b94a:	4293      	cmp	r3, r2
 800b94c:	bfc4      	itt	gt
 800b94e:	1a9b      	subgt	r3, r3, r2
 800b950:	18ed      	addgt	r5, r5, r3
 800b952:	2600      	movs	r6, #0
 800b954:	341a      	adds	r4, #26
 800b956:	42b5      	cmp	r5, r6
 800b958:	d11a      	bne.n	800b990 <_printf_common+0xc8>
 800b95a:	2000      	movs	r0, #0
 800b95c:	e008      	b.n	800b970 <_printf_common+0xa8>
 800b95e:	2301      	movs	r3, #1
 800b960:	4652      	mov	r2, sl
 800b962:	4649      	mov	r1, r9
 800b964:	4638      	mov	r0, r7
 800b966:	47c0      	blx	r8
 800b968:	3001      	adds	r0, #1
 800b96a:	d103      	bne.n	800b974 <_printf_common+0xac>
 800b96c:	f04f 30ff 	mov.w	r0, #4294967295
 800b970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b974:	3501      	adds	r5, #1
 800b976:	e7c6      	b.n	800b906 <_printf_common+0x3e>
 800b978:	18e1      	adds	r1, r4, r3
 800b97a:	1c5a      	adds	r2, r3, #1
 800b97c:	2030      	movs	r0, #48	; 0x30
 800b97e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b982:	4422      	add	r2, r4
 800b984:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b988:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b98c:	3302      	adds	r3, #2
 800b98e:	e7c7      	b.n	800b920 <_printf_common+0x58>
 800b990:	2301      	movs	r3, #1
 800b992:	4622      	mov	r2, r4
 800b994:	4649      	mov	r1, r9
 800b996:	4638      	mov	r0, r7
 800b998:	47c0      	blx	r8
 800b99a:	3001      	adds	r0, #1
 800b99c:	d0e6      	beq.n	800b96c <_printf_common+0xa4>
 800b99e:	3601      	adds	r6, #1
 800b9a0:	e7d9      	b.n	800b956 <_printf_common+0x8e>
	...

0800b9a4 <_printf_i>:
 800b9a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b9a8:	7e0f      	ldrb	r7, [r1, #24]
 800b9aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b9ac:	2f78      	cmp	r7, #120	; 0x78
 800b9ae:	4691      	mov	r9, r2
 800b9b0:	4680      	mov	r8, r0
 800b9b2:	460c      	mov	r4, r1
 800b9b4:	469a      	mov	sl, r3
 800b9b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b9ba:	d807      	bhi.n	800b9cc <_printf_i+0x28>
 800b9bc:	2f62      	cmp	r7, #98	; 0x62
 800b9be:	d80a      	bhi.n	800b9d6 <_printf_i+0x32>
 800b9c0:	2f00      	cmp	r7, #0
 800b9c2:	f000 80d4 	beq.w	800bb6e <_printf_i+0x1ca>
 800b9c6:	2f58      	cmp	r7, #88	; 0x58
 800b9c8:	f000 80c0 	beq.w	800bb4c <_printf_i+0x1a8>
 800b9cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b9d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b9d4:	e03a      	b.n	800ba4c <_printf_i+0xa8>
 800b9d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b9da:	2b15      	cmp	r3, #21
 800b9dc:	d8f6      	bhi.n	800b9cc <_printf_i+0x28>
 800b9de:	a101      	add	r1, pc, #4	; (adr r1, 800b9e4 <_printf_i+0x40>)
 800b9e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b9e4:	0800ba3d 	.word	0x0800ba3d
 800b9e8:	0800ba51 	.word	0x0800ba51
 800b9ec:	0800b9cd 	.word	0x0800b9cd
 800b9f0:	0800b9cd 	.word	0x0800b9cd
 800b9f4:	0800b9cd 	.word	0x0800b9cd
 800b9f8:	0800b9cd 	.word	0x0800b9cd
 800b9fc:	0800ba51 	.word	0x0800ba51
 800ba00:	0800b9cd 	.word	0x0800b9cd
 800ba04:	0800b9cd 	.word	0x0800b9cd
 800ba08:	0800b9cd 	.word	0x0800b9cd
 800ba0c:	0800b9cd 	.word	0x0800b9cd
 800ba10:	0800bb55 	.word	0x0800bb55
 800ba14:	0800ba7d 	.word	0x0800ba7d
 800ba18:	0800bb0f 	.word	0x0800bb0f
 800ba1c:	0800b9cd 	.word	0x0800b9cd
 800ba20:	0800b9cd 	.word	0x0800b9cd
 800ba24:	0800bb77 	.word	0x0800bb77
 800ba28:	0800b9cd 	.word	0x0800b9cd
 800ba2c:	0800ba7d 	.word	0x0800ba7d
 800ba30:	0800b9cd 	.word	0x0800b9cd
 800ba34:	0800b9cd 	.word	0x0800b9cd
 800ba38:	0800bb17 	.word	0x0800bb17
 800ba3c:	682b      	ldr	r3, [r5, #0]
 800ba3e:	1d1a      	adds	r2, r3, #4
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	602a      	str	r2, [r5, #0]
 800ba44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ba48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	e09f      	b.n	800bb90 <_printf_i+0x1ec>
 800ba50:	6820      	ldr	r0, [r4, #0]
 800ba52:	682b      	ldr	r3, [r5, #0]
 800ba54:	0607      	lsls	r7, r0, #24
 800ba56:	f103 0104 	add.w	r1, r3, #4
 800ba5a:	6029      	str	r1, [r5, #0]
 800ba5c:	d501      	bpl.n	800ba62 <_printf_i+0xbe>
 800ba5e:	681e      	ldr	r6, [r3, #0]
 800ba60:	e003      	b.n	800ba6a <_printf_i+0xc6>
 800ba62:	0646      	lsls	r6, r0, #25
 800ba64:	d5fb      	bpl.n	800ba5e <_printf_i+0xba>
 800ba66:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ba6a:	2e00      	cmp	r6, #0
 800ba6c:	da03      	bge.n	800ba76 <_printf_i+0xd2>
 800ba6e:	232d      	movs	r3, #45	; 0x2d
 800ba70:	4276      	negs	r6, r6
 800ba72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba76:	485a      	ldr	r0, [pc, #360]	; (800bbe0 <_printf_i+0x23c>)
 800ba78:	230a      	movs	r3, #10
 800ba7a:	e012      	b.n	800baa2 <_printf_i+0xfe>
 800ba7c:	682b      	ldr	r3, [r5, #0]
 800ba7e:	6820      	ldr	r0, [r4, #0]
 800ba80:	1d19      	adds	r1, r3, #4
 800ba82:	6029      	str	r1, [r5, #0]
 800ba84:	0605      	lsls	r5, r0, #24
 800ba86:	d501      	bpl.n	800ba8c <_printf_i+0xe8>
 800ba88:	681e      	ldr	r6, [r3, #0]
 800ba8a:	e002      	b.n	800ba92 <_printf_i+0xee>
 800ba8c:	0641      	lsls	r1, r0, #25
 800ba8e:	d5fb      	bpl.n	800ba88 <_printf_i+0xe4>
 800ba90:	881e      	ldrh	r6, [r3, #0]
 800ba92:	4853      	ldr	r0, [pc, #332]	; (800bbe0 <_printf_i+0x23c>)
 800ba94:	2f6f      	cmp	r7, #111	; 0x6f
 800ba96:	bf0c      	ite	eq
 800ba98:	2308      	moveq	r3, #8
 800ba9a:	230a      	movne	r3, #10
 800ba9c:	2100      	movs	r1, #0
 800ba9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800baa2:	6865      	ldr	r5, [r4, #4]
 800baa4:	60a5      	str	r5, [r4, #8]
 800baa6:	2d00      	cmp	r5, #0
 800baa8:	bfa2      	ittt	ge
 800baaa:	6821      	ldrge	r1, [r4, #0]
 800baac:	f021 0104 	bicge.w	r1, r1, #4
 800bab0:	6021      	strge	r1, [r4, #0]
 800bab2:	b90e      	cbnz	r6, 800bab8 <_printf_i+0x114>
 800bab4:	2d00      	cmp	r5, #0
 800bab6:	d04b      	beq.n	800bb50 <_printf_i+0x1ac>
 800bab8:	4615      	mov	r5, r2
 800baba:	fbb6 f1f3 	udiv	r1, r6, r3
 800babe:	fb03 6711 	mls	r7, r3, r1, r6
 800bac2:	5dc7      	ldrb	r7, [r0, r7]
 800bac4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bac8:	4637      	mov	r7, r6
 800baca:	42bb      	cmp	r3, r7
 800bacc:	460e      	mov	r6, r1
 800bace:	d9f4      	bls.n	800baba <_printf_i+0x116>
 800bad0:	2b08      	cmp	r3, #8
 800bad2:	d10b      	bne.n	800baec <_printf_i+0x148>
 800bad4:	6823      	ldr	r3, [r4, #0]
 800bad6:	07de      	lsls	r6, r3, #31
 800bad8:	d508      	bpl.n	800baec <_printf_i+0x148>
 800bada:	6923      	ldr	r3, [r4, #16]
 800badc:	6861      	ldr	r1, [r4, #4]
 800bade:	4299      	cmp	r1, r3
 800bae0:	bfde      	ittt	le
 800bae2:	2330      	movle	r3, #48	; 0x30
 800bae4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bae8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800baec:	1b52      	subs	r2, r2, r5
 800baee:	6122      	str	r2, [r4, #16]
 800baf0:	f8cd a000 	str.w	sl, [sp]
 800baf4:	464b      	mov	r3, r9
 800baf6:	aa03      	add	r2, sp, #12
 800baf8:	4621      	mov	r1, r4
 800bafa:	4640      	mov	r0, r8
 800bafc:	f7ff fee4 	bl	800b8c8 <_printf_common>
 800bb00:	3001      	adds	r0, #1
 800bb02:	d14a      	bne.n	800bb9a <_printf_i+0x1f6>
 800bb04:	f04f 30ff 	mov.w	r0, #4294967295
 800bb08:	b004      	add	sp, #16
 800bb0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb0e:	6823      	ldr	r3, [r4, #0]
 800bb10:	f043 0320 	orr.w	r3, r3, #32
 800bb14:	6023      	str	r3, [r4, #0]
 800bb16:	4833      	ldr	r0, [pc, #204]	; (800bbe4 <_printf_i+0x240>)
 800bb18:	2778      	movs	r7, #120	; 0x78
 800bb1a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bb1e:	6823      	ldr	r3, [r4, #0]
 800bb20:	6829      	ldr	r1, [r5, #0]
 800bb22:	061f      	lsls	r7, r3, #24
 800bb24:	f851 6b04 	ldr.w	r6, [r1], #4
 800bb28:	d402      	bmi.n	800bb30 <_printf_i+0x18c>
 800bb2a:	065f      	lsls	r7, r3, #25
 800bb2c:	bf48      	it	mi
 800bb2e:	b2b6      	uxthmi	r6, r6
 800bb30:	07df      	lsls	r7, r3, #31
 800bb32:	bf48      	it	mi
 800bb34:	f043 0320 	orrmi.w	r3, r3, #32
 800bb38:	6029      	str	r1, [r5, #0]
 800bb3a:	bf48      	it	mi
 800bb3c:	6023      	strmi	r3, [r4, #0]
 800bb3e:	b91e      	cbnz	r6, 800bb48 <_printf_i+0x1a4>
 800bb40:	6823      	ldr	r3, [r4, #0]
 800bb42:	f023 0320 	bic.w	r3, r3, #32
 800bb46:	6023      	str	r3, [r4, #0]
 800bb48:	2310      	movs	r3, #16
 800bb4a:	e7a7      	b.n	800ba9c <_printf_i+0xf8>
 800bb4c:	4824      	ldr	r0, [pc, #144]	; (800bbe0 <_printf_i+0x23c>)
 800bb4e:	e7e4      	b.n	800bb1a <_printf_i+0x176>
 800bb50:	4615      	mov	r5, r2
 800bb52:	e7bd      	b.n	800bad0 <_printf_i+0x12c>
 800bb54:	682b      	ldr	r3, [r5, #0]
 800bb56:	6826      	ldr	r6, [r4, #0]
 800bb58:	6961      	ldr	r1, [r4, #20]
 800bb5a:	1d18      	adds	r0, r3, #4
 800bb5c:	6028      	str	r0, [r5, #0]
 800bb5e:	0635      	lsls	r5, r6, #24
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	d501      	bpl.n	800bb68 <_printf_i+0x1c4>
 800bb64:	6019      	str	r1, [r3, #0]
 800bb66:	e002      	b.n	800bb6e <_printf_i+0x1ca>
 800bb68:	0670      	lsls	r0, r6, #25
 800bb6a:	d5fb      	bpl.n	800bb64 <_printf_i+0x1c0>
 800bb6c:	8019      	strh	r1, [r3, #0]
 800bb6e:	2300      	movs	r3, #0
 800bb70:	6123      	str	r3, [r4, #16]
 800bb72:	4615      	mov	r5, r2
 800bb74:	e7bc      	b.n	800baf0 <_printf_i+0x14c>
 800bb76:	682b      	ldr	r3, [r5, #0]
 800bb78:	1d1a      	adds	r2, r3, #4
 800bb7a:	602a      	str	r2, [r5, #0]
 800bb7c:	681d      	ldr	r5, [r3, #0]
 800bb7e:	6862      	ldr	r2, [r4, #4]
 800bb80:	2100      	movs	r1, #0
 800bb82:	4628      	mov	r0, r5
 800bb84:	f7f4 fb34 	bl	80001f0 <memchr>
 800bb88:	b108      	cbz	r0, 800bb8e <_printf_i+0x1ea>
 800bb8a:	1b40      	subs	r0, r0, r5
 800bb8c:	6060      	str	r0, [r4, #4]
 800bb8e:	6863      	ldr	r3, [r4, #4]
 800bb90:	6123      	str	r3, [r4, #16]
 800bb92:	2300      	movs	r3, #0
 800bb94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb98:	e7aa      	b.n	800baf0 <_printf_i+0x14c>
 800bb9a:	6923      	ldr	r3, [r4, #16]
 800bb9c:	462a      	mov	r2, r5
 800bb9e:	4649      	mov	r1, r9
 800bba0:	4640      	mov	r0, r8
 800bba2:	47d0      	blx	sl
 800bba4:	3001      	adds	r0, #1
 800bba6:	d0ad      	beq.n	800bb04 <_printf_i+0x160>
 800bba8:	6823      	ldr	r3, [r4, #0]
 800bbaa:	079b      	lsls	r3, r3, #30
 800bbac:	d413      	bmi.n	800bbd6 <_printf_i+0x232>
 800bbae:	68e0      	ldr	r0, [r4, #12]
 800bbb0:	9b03      	ldr	r3, [sp, #12]
 800bbb2:	4298      	cmp	r0, r3
 800bbb4:	bfb8      	it	lt
 800bbb6:	4618      	movlt	r0, r3
 800bbb8:	e7a6      	b.n	800bb08 <_printf_i+0x164>
 800bbba:	2301      	movs	r3, #1
 800bbbc:	4632      	mov	r2, r6
 800bbbe:	4649      	mov	r1, r9
 800bbc0:	4640      	mov	r0, r8
 800bbc2:	47d0      	blx	sl
 800bbc4:	3001      	adds	r0, #1
 800bbc6:	d09d      	beq.n	800bb04 <_printf_i+0x160>
 800bbc8:	3501      	adds	r5, #1
 800bbca:	68e3      	ldr	r3, [r4, #12]
 800bbcc:	9903      	ldr	r1, [sp, #12]
 800bbce:	1a5b      	subs	r3, r3, r1
 800bbd0:	42ab      	cmp	r3, r5
 800bbd2:	dcf2      	bgt.n	800bbba <_printf_i+0x216>
 800bbd4:	e7eb      	b.n	800bbae <_printf_i+0x20a>
 800bbd6:	2500      	movs	r5, #0
 800bbd8:	f104 0619 	add.w	r6, r4, #25
 800bbdc:	e7f5      	b.n	800bbca <_printf_i+0x226>
 800bbde:	bf00      	nop
 800bbe0:	0800f2ae 	.word	0x0800f2ae
 800bbe4:	0800f2bf 	.word	0x0800f2bf

0800bbe8 <std>:
 800bbe8:	2300      	movs	r3, #0
 800bbea:	b510      	push	{r4, lr}
 800bbec:	4604      	mov	r4, r0
 800bbee:	e9c0 3300 	strd	r3, r3, [r0]
 800bbf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bbf6:	6083      	str	r3, [r0, #8]
 800bbf8:	8181      	strh	r1, [r0, #12]
 800bbfa:	6643      	str	r3, [r0, #100]	; 0x64
 800bbfc:	81c2      	strh	r2, [r0, #14]
 800bbfe:	6183      	str	r3, [r0, #24]
 800bc00:	4619      	mov	r1, r3
 800bc02:	2208      	movs	r2, #8
 800bc04:	305c      	adds	r0, #92	; 0x5c
 800bc06:	f000 f902 	bl	800be0e <memset>
 800bc0a:	4b05      	ldr	r3, [pc, #20]	; (800bc20 <std+0x38>)
 800bc0c:	6263      	str	r3, [r4, #36]	; 0x24
 800bc0e:	4b05      	ldr	r3, [pc, #20]	; (800bc24 <std+0x3c>)
 800bc10:	62a3      	str	r3, [r4, #40]	; 0x28
 800bc12:	4b05      	ldr	r3, [pc, #20]	; (800bc28 <std+0x40>)
 800bc14:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bc16:	4b05      	ldr	r3, [pc, #20]	; (800bc2c <std+0x44>)
 800bc18:	6224      	str	r4, [r4, #32]
 800bc1a:	6323      	str	r3, [r4, #48]	; 0x30
 800bc1c:	bd10      	pop	{r4, pc}
 800bc1e:	bf00      	nop
 800bc20:	0800bd89 	.word	0x0800bd89
 800bc24:	0800bdab 	.word	0x0800bdab
 800bc28:	0800bde3 	.word	0x0800bde3
 800bc2c:	0800be07 	.word	0x0800be07

0800bc30 <stdio_exit_handler>:
 800bc30:	4a02      	ldr	r2, [pc, #8]	; (800bc3c <stdio_exit_handler+0xc>)
 800bc32:	4903      	ldr	r1, [pc, #12]	; (800bc40 <stdio_exit_handler+0x10>)
 800bc34:	4803      	ldr	r0, [pc, #12]	; (800bc44 <stdio_exit_handler+0x14>)
 800bc36:	f000 b869 	b.w	800bd0c <_fwalk_sglue>
 800bc3a:	bf00      	nop
 800bc3c:	20000010 	.word	0x20000010
 800bc40:	0800d8d1 	.word	0x0800d8d1
 800bc44:	2000001c 	.word	0x2000001c

0800bc48 <cleanup_stdio>:
 800bc48:	6841      	ldr	r1, [r0, #4]
 800bc4a:	4b0c      	ldr	r3, [pc, #48]	; (800bc7c <cleanup_stdio+0x34>)
 800bc4c:	4299      	cmp	r1, r3
 800bc4e:	b510      	push	{r4, lr}
 800bc50:	4604      	mov	r4, r0
 800bc52:	d001      	beq.n	800bc58 <cleanup_stdio+0x10>
 800bc54:	f001 fe3c 	bl	800d8d0 <_fflush_r>
 800bc58:	68a1      	ldr	r1, [r4, #8]
 800bc5a:	4b09      	ldr	r3, [pc, #36]	; (800bc80 <cleanup_stdio+0x38>)
 800bc5c:	4299      	cmp	r1, r3
 800bc5e:	d002      	beq.n	800bc66 <cleanup_stdio+0x1e>
 800bc60:	4620      	mov	r0, r4
 800bc62:	f001 fe35 	bl	800d8d0 <_fflush_r>
 800bc66:	68e1      	ldr	r1, [r4, #12]
 800bc68:	4b06      	ldr	r3, [pc, #24]	; (800bc84 <cleanup_stdio+0x3c>)
 800bc6a:	4299      	cmp	r1, r3
 800bc6c:	d004      	beq.n	800bc78 <cleanup_stdio+0x30>
 800bc6e:	4620      	mov	r0, r4
 800bc70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc74:	f001 be2c 	b.w	800d8d0 <_fflush_r>
 800bc78:	bd10      	pop	{r4, pc}
 800bc7a:	bf00      	nop
 800bc7c:	200021a4 	.word	0x200021a4
 800bc80:	2000220c 	.word	0x2000220c
 800bc84:	20002274 	.word	0x20002274

0800bc88 <global_stdio_init.part.0>:
 800bc88:	b510      	push	{r4, lr}
 800bc8a:	4b0b      	ldr	r3, [pc, #44]	; (800bcb8 <global_stdio_init.part.0+0x30>)
 800bc8c:	4c0b      	ldr	r4, [pc, #44]	; (800bcbc <global_stdio_init.part.0+0x34>)
 800bc8e:	4a0c      	ldr	r2, [pc, #48]	; (800bcc0 <global_stdio_init.part.0+0x38>)
 800bc90:	601a      	str	r2, [r3, #0]
 800bc92:	4620      	mov	r0, r4
 800bc94:	2200      	movs	r2, #0
 800bc96:	2104      	movs	r1, #4
 800bc98:	f7ff ffa6 	bl	800bbe8 <std>
 800bc9c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800bca0:	2201      	movs	r2, #1
 800bca2:	2109      	movs	r1, #9
 800bca4:	f7ff ffa0 	bl	800bbe8 <std>
 800bca8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800bcac:	2202      	movs	r2, #2
 800bcae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bcb2:	2112      	movs	r1, #18
 800bcb4:	f7ff bf98 	b.w	800bbe8 <std>
 800bcb8:	200022dc 	.word	0x200022dc
 800bcbc:	200021a4 	.word	0x200021a4
 800bcc0:	0800bc31 	.word	0x0800bc31

0800bcc4 <__sfp_lock_acquire>:
 800bcc4:	4801      	ldr	r0, [pc, #4]	; (800bccc <__sfp_lock_acquire+0x8>)
 800bcc6:	f000 b91f 	b.w	800bf08 <__retarget_lock_acquire_recursive>
 800bcca:	bf00      	nop
 800bccc:	200022e5 	.word	0x200022e5

0800bcd0 <__sfp_lock_release>:
 800bcd0:	4801      	ldr	r0, [pc, #4]	; (800bcd8 <__sfp_lock_release+0x8>)
 800bcd2:	f000 b91a 	b.w	800bf0a <__retarget_lock_release_recursive>
 800bcd6:	bf00      	nop
 800bcd8:	200022e5 	.word	0x200022e5

0800bcdc <__sinit>:
 800bcdc:	b510      	push	{r4, lr}
 800bcde:	4604      	mov	r4, r0
 800bce0:	f7ff fff0 	bl	800bcc4 <__sfp_lock_acquire>
 800bce4:	6a23      	ldr	r3, [r4, #32]
 800bce6:	b11b      	cbz	r3, 800bcf0 <__sinit+0x14>
 800bce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bcec:	f7ff bff0 	b.w	800bcd0 <__sfp_lock_release>
 800bcf0:	4b04      	ldr	r3, [pc, #16]	; (800bd04 <__sinit+0x28>)
 800bcf2:	6223      	str	r3, [r4, #32]
 800bcf4:	4b04      	ldr	r3, [pc, #16]	; (800bd08 <__sinit+0x2c>)
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d1f5      	bne.n	800bce8 <__sinit+0xc>
 800bcfc:	f7ff ffc4 	bl	800bc88 <global_stdio_init.part.0>
 800bd00:	e7f2      	b.n	800bce8 <__sinit+0xc>
 800bd02:	bf00      	nop
 800bd04:	0800bc49 	.word	0x0800bc49
 800bd08:	200022dc 	.word	0x200022dc

0800bd0c <_fwalk_sglue>:
 800bd0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd10:	4607      	mov	r7, r0
 800bd12:	4688      	mov	r8, r1
 800bd14:	4614      	mov	r4, r2
 800bd16:	2600      	movs	r6, #0
 800bd18:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bd1c:	f1b9 0901 	subs.w	r9, r9, #1
 800bd20:	d505      	bpl.n	800bd2e <_fwalk_sglue+0x22>
 800bd22:	6824      	ldr	r4, [r4, #0]
 800bd24:	2c00      	cmp	r4, #0
 800bd26:	d1f7      	bne.n	800bd18 <_fwalk_sglue+0xc>
 800bd28:	4630      	mov	r0, r6
 800bd2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd2e:	89ab      	ldrh	r3, [r5, #12]
 800bd30:	2b01      	cmp	r3, #1
 800bd32:	d907      	bls.n	800bd44 <_fwalk_sglue+0x38>
 800bd34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bd38:	3301      	adds	r3, #1
 800bd3a:	d003      	beq.n	800bd44 <_fwalk_sglue+0x38>
 800bd3c:	4629      	mov	r1, r5
 800bd3e:	4638      	mov	r0, r7
 800bd40:	47c0      	blx	r8
 800bd42:	4306      	orrs	r6, r0
 800bd44:	3568      	adds	r5, #104	; 0x68
 800bd46:	e7e9      	b.n	800bd1c <_fwalk_sglue+0x10>

0800bd48 <siprintf>:
 800bd48:	b40e      	push	{r1, r2, r3}
 800bd4a:	b500      	push	{lr}
 800bd4c:	b09c      	sub	sp, #112	; 0x70
 800bd4e:	ab1d      	add	r3, sp, #116	; 0x74
 800bd50:	9002      	str	r0, [sp, #8]
 800bd52:	9006      	str	r0, [sp, #24]
 800bd54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bd58:	4809      	ldr	r0, [pc, #36]	; (800bd80 <siprintf+0x38>)
 800bd5a:	9107      	str	r1, [sp, #28]
 800bd5c:	9104      	str	r1, [sp, #16]
 800bd5e:	4909      	ldr	r1, [pc, #36]	; (800bd84 <siprintf+0x3c>)
 800bd60:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd64:	9105      	str	r1, [sp, #20]
 800bd66:	6800      	ldr	r0, [r0, #0]
 800bd68:	9301      	str	r3, [sp, #4]
 800bd6a:	a902      	add	r1, sp, #8
 800bd6c:	f001 fc2c 	bl	800d5c8 <_svfiprintf_r>
 800bd70:	9b02      	ldr	r3, [sp, #8]
 800bd72:	2200      	movs	r2, #0
 800bd74:	701a      	strb	r2, [r3, #0]
 800bd76:	b01c      	add	sp, #112	; 0x70
 800bd78:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd7c:	b003      	add	sp, #12
 800bd7e:	4770      	bx	lr
 800bd80:	20000068 	.word	0x20000068
 800bd84:	ffff0208 	.word	0xffff0208

0800bd88 <__sread>:
 800bd88:	b510      	push	{r4, lr}
 800bd8a:	460c      	mov	r4, r1
 800bd8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd90:	f000 f86c 	bl	800be6c <_read_r>
 800bd94:	2800      	cmp	r0, #0
 800bd96:	bfab      	itete	ge
 800bd98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bd9a:	89a3      	ldrhlt	r3, [r4, #12]
 800bd9c:	181b      	addge	r3, r3, r0
 800bd9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bda2:	bfac      	ite	ge
 800bda4:	6563      	strge	r3, [r4, #84]	; 0x54
 800bda6:	81a3      	strhlt	r3, [r4, #12]
 800bda8:	bd10      	pop	{r4, pc}

0800bdaa <__swrite>:
 800bdaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdae:	461f      	mov	r7, r3
 800bdb0:	898b      	ldrh	r3, [r1, #12]
 800bdb2:	05db      	lsls	r3, r3, #23
 800bdb4:	4605      	mov	r5, r0
 800bdb6:	460c      	mov	r4, r1
 800bdb8:	4616      	mov	r6, r2
 800bdba:	d505      	bpl.n	800bdc8 <__swrite+0x1e>
 800bdbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdc0:	2302      	movs	r3, #2
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	f000 f840 	bl	800be48 <_lseek_r>
 800bdc8:	89a3      	ldrh	r3, [r4, #12]
 800bdca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bdce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bdd2:	81a3      	strh	r3, [r4, #12]
 800bdd4:	4632      	mov	r2, r6
 800bdd6:	463b      	mov	r3, r7
 800bdd8:	4628      	mov	r0, r5
 800bdda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bdde:	f000 b857 	b.w	800be90 <_write_r>

0800bde2 <__sseek>:
 800bde2:	b510      	push	{r4, lr}
 800bde4:	460c      	mov	r4, r1
 800bde6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdea:	f000 f82d 	bl	800be48 <_lseek_r>
 800bdee:	1c43      	adds	r3, r0, #1
 800bdf0:	89a3      	ldrh	r3, [r4, #12]
 800bdf2:	bf15      	itete	ne
 800bdf4:	6560      	strne	r0, [r4, #84]	; 0x54
 800bdf6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bdfa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bdfe:	81a3      	strheq	r3, [r4, #12]
 800be00:	bf18      	it	ne
 800be02:	81a3      	strhne	r3, [r4, #12]
 800be04:	bd10      	pop	{r4, pc}

0800be06 <__sclose>:
 800be06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be0a:	f000 b80d 	b.w	800be28 <_close_r>

0800be0e <memset>:
 800be0e:	4402      	add	r2, r0
 800be10:	4603      	mov	r3, r0
 800be12:	4293      	cmp	r3, r2
 800be14:	d100      	bne.n	800be18 <memset+0xa>
 800be16:	4770      	bx	lr
 800be18:	f803 1b01 	strb.w	r1, [r3], #1
 800be1c:	e7f9      	b.n	800be12 <memset+0x4>
	...

0800be20 <_localeconv_r>:
 800be20:	4800      	ldr	r0, [pc, #0]	; (800be24 <_localeconv_r+0x4>)
 800be22:	4770      	bx	lr
 800be24:	2000015c 	.word	0x2000015c

0800be28 <_close_r>:
 800be28:	b538      	push	{r3, r4, r5, lr}
 800be2a:	4d06      	ldr	r5, [pc, #24]	; (800be44 <_close_r+0x1c>)
 800be2c:	2300      	movs	r3, #0
 800be2e:	4604      	mov	r4, r0
 800be30:	4608      	mov	r0, r1
 800be32:	602b      	str	r3, [r5, #0]
 800be34:	f7f7 fe8b 	bl	8003b4e <_close>
 800be38:	1c43      	adds	r3, r0, #1
 800be3a:	d102      	bne.n	800be42 <_close_r+0x1a>
 800be3c:	682b      	ldr	r3, [r5, #0]
 800be3e:	b103      	cbz	r3, 800be42 <_close_r+0x1a>
 800be40:	6023      	str	r3, [r4, #0]
 800be42:	bd38      	pop	{r3, r4, r5, pc}
 800be44:	200022e0 	.word	0x200022e0

0800be48 <_lseek_r>:
 800be48:	b538      	push	{r3, r4, r5, lr}
 800be4a:	4d07      	ldr	r5, [pc, #28]	; (800be68 <_lseek_r+0x20>)
 800be4c:	4604      	mov	r4, r0
 800be4e:	4608      	mov	r0, r1
 800be50:	4611      	mov	r1, r2
 800be52:	2200      	movs	r2, #0
 800be54:	602a      	str	r2, [r5, #0]
 800be56:	461a      	mov	r2, r3
 800be58:	f7f7 fea0 	bl	8003b9c <_lseek>
 800be5c:	1c43      	adds	r3, r0, #1
 800be5e:	d102      	bne.n	800be66 <_lseek_r+0x1e>
 800be60:	682b      	ldr	r3, [r5, #0]
 800be62:	b103      	cbz	r3, 800be66 <_lseek_r+0x1e>
 800be64:	6023      	str	r3, [r4, #0]
 800be66:	bd38      	pop	{r3, r4, r5, pc}
 800be68:	200022e0 	.word	0x200022e0

0800be6c <_read_r>:
 800be6c:	b538      	push	{r3, r4, r5, lr}
 800be6e:	4d07      	ldr	r5, [pc, #28]	; (800be8c <_read_r+0x20>)
 800be70:	4604      	mov	r4, r0
 800be72:	4608      	mov	r0, r1
 800be74:	4611      	mov	r1, r2
 800be76:	2200      	movs	r2, #0
 800be78:	602a      	str	r2, [r5, #0]
 800be7a:	461a      	mov	r2, r3
 800be7c:	f7f7 fe2e 	bl	8003adc <_read>
 800be80:	1c43      	adds	r3, r0, #1
 800be82:	d102      	bne.n	800be8a <_read_r+0x1e>
 800be84:	682b      	ldr	r3, [r5, #0]
 800be86:	b103      	cbz	r3, 800be8a <_read_r+0x1e>
 800be88:	6023      	str	r3, [r4, #0]
 800be8a:	bd38      	pop	{r3, r4, r5, pc}
 800be8c:	200022e0 	.word	0x200022e0

0800be90 <_write_r>:
 800be90:	b538      	push	{r3, r4, r5, lr}
 800be92:	4d07      	ldr	r5, [pc, #28]	; (800beb0 <_write_r+0x20>)
 800be94:	4604      	mov	r4, r0
 800be96:	4608      	mov	r0, r1
 800be98:	4611      	mov	r1, r2
 800be9a:	2200      	movs	r2, #0
 800be9c:	602a      	str	r2, [r5, #0]
 800be9e:	461a      	mov	r2, r3
 800bea0:	f7f7 fe39 	bl	8003b16 <_write>
 800bea4:	1c43      	adds	r3, r0, #1
 800bea6:	d102      	bne.n	800beae <_write_r+0x1e>
 800bea8:	682b      	ldr	r3, [r5, #0]
 800beaa:	b103      	cbz	r3, 800beae <_write_r+0x1e>
 800beac:	6023      	str	r3, [r4, #0]
 800beae:	bd38      	pop	{r3, r4, r5, pc}
 800beb0:	200022e0 	.word	0x200022e0

0800beb4 <__errno>:
 800beb4:	4b01      	ldr	r3, [pc, #4]	; (800bebc <__errno+0x8>)
 800beb6:	6818      	ldr	r0, [r3, #0]
 800beb8:	4770      	bx	lr
 800beba:	bf00      	nop
 800bebc:	20000068 	.word	0x20000068

0800bec0 <__libc_init_array>:
 800bec0:	b570      	push	{r4, r5, r6, lr}
 800bec2:	4d0d      	ldr	r5, [pc, #52]	; (800bef8 <__libc_init_array+0x38>)
 800bec4:	4c0d      	ldr	r4, [pc, #52]	; (800befc <__libc_init_array+0x3c>)
 800bec6:	1b64      	subs	r4, r4, r5
 800bec8:	10a4      	asrs	r4, r4, #2
 800beca:	2600      	movs	r6, #0
 800becc:	42a6      	cmp	r6, r4
 800bece:	d109      	bne.n	800bee4 <__libc_init_array+0x24>
 800bed0:	4d0b      	ldr	r5, [pc, #44]	; (800bf00 <__libc_init_array+0x40>)
 800bed2:	4c0c      	ldr	r4, [pc, #48]	; (800bf04 <__libc_init_array+0x44>)
 800bed4:	f002 ffcc 	bl	800ee70 <_init>
 800bed8:	1b64      	subs	r4, r4, r5
 800beda:	10a4      	asrs	r4, r4, #2
 800bedc:	2600      	movs	r6, #0
 800bede:	42a6      	cmp	r6, r4
 800bee0:	d105      	bne.n	800beee <__libc_init_array+0x2e>
 800bee2:	bd70      	pop	{r4, r5, r6, pc}
 800bee4:	f855 3b04 	ldr.w	r3, [r5], #4
 800bee8:	4798      	blx	r3
 800beea:	3601      	adds	r6, #1
 800beec:	e7ee      	b.n	800becc <__libc_init_array+0xc>
 800beee:	f855 3b04 	ldr.w	r3, [r5], #4
 800bef2:	4798      	blx	r3
 800bef4:	3601      	adds	r6, #1
 800bef6:	e7f2      	b.n	800bede <__libc_init_array+0x1e>
 800bef8:	0800f640 	.word	0x0800f640
 800befc:	0800f640 	.word	0x0800f640
 800bf00:	0800f640 	.word	0x0800f640
 800bf04:	0800f644 	.word	0x0800f644

0800bf08 <__retarget_lock_acquire_recursive>:
 800bf08:	4770      	bx	lr

0800bf0a <__retarget_lock_release_recursive>:
 800bf0a:	4770      	bx	lr

0800bf0c <memcpy>:
 800bf0c:	440a      	add	r2, r1
 800bf0e:	4291      	cmp	r1, r2
 800bf10:	f100 33ff 	add.w	r3, r0, #4294967295
 800bf14:	d100      	bne.n	800bf18 <memcpy+0xc>
 800bf16:	4770      	bx	lr
 800bf18:	b510      	push	{r4, lr}
 800bf1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf22:	4291      	cmp	r1, r2
 800bf24:	d1f9      	bne.n	800bf1a <memcpy+0xe>
 800bf26:	bd10      	pop	{r4, pc}

0800bf28 <quorem>:
 800bf28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf2c:	6903      	ldr	r3, [r0, #16]
 800bf2e:	690c      	ldr	r4, [r1, #16]
 800bf30:	42a3      	cmp	r3, r4
 800bf32:	4607      	mov	r7, r0
 800bf34:	db7e      	blt.n	800c034 <quorem+0x10c>
 800bf36:	3c01      	subs	r4, #1
 800bf38:	f101 0814 	add.w	r8, r1, #20
 800bf3c:	f100 0514 	add.w	r5, r0, #20
 800bf40:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bf44:	9301      	str	r3, [sp, #4]
 800bf46:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bf4a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bf4e:	3301      	adds	r3, #1
 800bf50:	429a      	cmp	r2, r3
 800bf52:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bf56:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bf5a:	fbb2 f6f3 	udiv	r6, r2, r3
 800bf5e:	d331      	bcc.n	800bfc4 <quorem+0x9c>
 800bf60:	f04f 0e00 	mov.w	lr, #0
 800bf64:	4640      	mov	r0, r8
 800bf66:	46ac      	mov	ip, r5
 800bf68:	46f2      	mov	sl, lr
 800bf6a:	f850 2b04 	ldr.w	r2, [r0], #4
 800bf6e:	b293      	uxth	r3, r2
 800bf70:	fb06 e303 	mla	r3, r6, r3, lr
 800bf74:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bf78:	0c1a      	lsrs	r2, r3, #16
 800bf7a:	b29b      	uxth	r3, r3
 800bf7c:	ebaa 0303 	sub.w	r3, sl, r3
 800bf80:	f8dc a000 	ldr.w	sl, [ip]
 800bf84:	fa13 f38a 	uxtah	r3, r3, sl
 800bf88:	fb06 220e 	mla	r2, r6, lr, r2
 800bf8c:	9300      	str	r3, [sp, #0]
 800bf8e:	9b00      	ldr	r3, [sp, #0]
 800bf90:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bf94:	b292      	uxth	r2, r2
 800bf96:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bf9a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bf9e:	f8bd 3000 	ldrh.w	r3, [sp]
 800bfa2:	4581      	cmp	r9, r0
 800bfa4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bfa8:	f84c 3b04 	str.w	r3, [ip], #4
 800bfac:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bfb0:	d2db      	bcs.n	800bf6a <quorem+0x42>
 800bfb2:	f855 300b 	ldr.w	r3, [r5, fp]
 800bfb6:	b92b      	cbnz	r3, 800bfc4 <quorem+0x9c>
 800bfb8:	9b01      	ldr	r3, [sp, #4]
 800bfba:	3b04      	subs	r3, #4
 800bfbc:	429d      	cmp	r5, r3
 800bfbe:	461a      	mov	r2, r3
 800bfc0:	d32c      	bcc.n	800c01c <quorem+0xf4>
 800bfc2:	613c      	str	r4, [r7, #16]
 800bfc4:	4638      	mov	r0, r7
 800bfc6:	f001 f9a5 	bl	800d314 <__mcmp>
 800bfca:	2800      	cmp	r0, #0
 800bfcc:	db22      	blt.n	800c014 <quorem+0xec>
 800bfce:	3601      	adds	r6, #1
 800bfd0:	4629      	mov	r1, r5
 800bfd2:	2000      	movs	r0, #0
 800bfd4:	f858 2b04 	ldr.w	r2, [r8], #4
 800bfd8:	f8d1 c000 	ldr.w	ip, [r1]
 800bfdc:	b293      	uxth	r3, r2
 800bfde:	1ac3      	subs	r3, r0, r3
 800bfe0:	0c12      	lsrs	r2, r2, #16
 800bfe2:	fa13 f38c 	uxtah	r3, r3, ip
 800bfe6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800bfea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bfee:	b29b      	uxth	r3, r3
 800bff0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bff4:	45c1      	cmp	r9, r8
 800bff6:	f841 3b04 	str.w	r3, [r1], #4
 800bffa:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bffe:	d2e9      	bcs.n	800bfd4 <quorem+0xac>
 800c000:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c004:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c008:	b922      	cbnz	r2, 800c014 <quorem+0xec>
 800c00a:	3b04      	subs	r3, #4
 800c00c:	429d      	cmp	r5, r3
 800c00e:	461a      	mov	r2, r3
 800c010:	d30a      	bcc.n	800c028 <quorem+0x100>
 800c012:	613c      	str	r4, [r7, #16]
 800c014:	4630      	mov	r0, r6
 800c016:	b003      	add	sp, #12
 800c018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c01c:	6812      	ldr	r2, [r2, #0]
 800c01e:	3b04      	subs	r3, #4
 800c020:	2a00      	cmp	r2, #0
 800c022:	d1ce      	bne.n	800bfc2 <quorem+0x9a>
 800c024:	3c01      	subs	r4, #1
 800c026:	e7c9      	b.n	800bfbc <quorem+0x94>
 800c028:	6812      	ldr	r2, [r2, #0]
 800c02a:	3b04      	subs	r3, #4
 800c02c:	2a00      	cmp	r2, #0
 800c02e:	d1f0      	bne.n	800c012 <quorem+0xea>
 800c030:	3c01      	subs	r4, #1
 800c032:	e7eb      	b.n	800c00c <quorem+0xe4>
 800c034:	2000      	movs	r0, #0
 800c036:	e7ee      	b.n	800c016 <quorem+0xee>

0800c038 <_dtoa_r>:
 800c038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c03c:	ed2d 8b04 	vpush	{d8-d9}
 800c040:	69c5      	ldr	r5, [r0, #28]
 800c042:	b093      	sub	sp, #76	; 0x4c
 800c044:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c048:	ec57 6b10 	vmov	r6, r7, d0
 800c04c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c050:	9107      	str	r1, [sp, #28]
 800c052:	4604      	mov	r4, r0
 800c054:	920a      	str	r2, [sp, #40]	; 0x28
 800c056:	930d      	str	r3, [sp, #52]	; 0x34
 800c058:	b975      	cbnz	r5, 800c078 <_dtoa_r+0x40>
 800c05a:	2010      	movs	r0, #16
 800c05c:	f000 fe2a 	bl	800ccb4 <malloc>
 800c060:	4602      	mov	r2, r0
 800c062:	61e0      	str	r0, [r4, #28]
 800c064:	b920      	cbnz	r0, 800c070 <_dtoa_r+0x38>
 800c066:	4bae      	ldr	r3, [pc, #696]	; (800c320 <_dtoa_r+0x2e8>)
 800c068:	21ef      	movs	r1, #239	; 0xef
 800c06a:	48ae      	ldr	r0, [pc, #696]	; (800c324 <_dtoa_r+0x2ec>)
 800c06c:	f001 fc82 	bl	800d974 <__assert_func>
 800c070:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c074:	6005      	str	r5, [r0, #0]
 800c076:	60c5      	str	r5, [r0, #12]
 800c078:	69e3      	ldr	r3, [r4, #28]
 800c07a:	6819      	ldr	r1, [r3, #0]
 800c07c:	b151      	cbz	r1, 800c094 <_dtoa_r+0x5c>
 800c07e:	685a      	ldr	r2, [r3, #4]
 800c080:	604a      	str	r2, [r1, #4]
 800c082:	2301      	movs	r3, #1
 800c084:	4093      	lsls	r3, r2
 800c086:	608b      	str	r3, [r1, #8]
 800c088:	4620      	mov	r0, r4
 800c08a:	f000 ff07 	bl	800ce9c <_Bfree>
 800c08e:	69e3      	ldr	r3, [r4, #28]
 800c090:	2200      	movs	r2, #0
 800c092:	601a      	str	r2, [r3, #0]
 800c094:	1e3b      	subs	r3, r7, #0
 800c096:	bfbb      	ittet	lt
 800c098:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c09c:	9303      	strlt	r3, [sp, #12]
 800c09e:	2300      	movge	r3, #0
 800c0a0:	2201      	movlt	r2, #1
 800c0a2:	bfac      	ite	ge
 800c0a4:	f8c8 3000 	strge.w	r3, [r8]
 800c0a8:	f8c8 2000 	strlt.w	r2, [r8]
 800c0ac:	4b9e      	ldr	r3, [pc, #632]	; (800c328 <_dtoa_r+0x2f0>)
 800c0ae:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c0b2:	ea33 0308 	bics.w	r3, r3, r8
 800c0b6:	d11b      	bne.n	800c0f0 <_dtoa_r+0xb8>
 800c0b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c0ba:	f242 730f 	movw	r3, #9999	; 0x270f
 800c0be:	6013      	str	r3, [r2, #0]
 800c0c0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c0c4:	4333      	orrs	r3, r6
 800c0c6:	f000 8593 	beq.w	800cbf0 <_dtoa_r+0xbb8>
 800c0ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c0cc:	b963      	cbnz	r3, 800c0e8 <_dtoa_r+0xb0>
 800c0ce:	4b97      	ldr	r3, [pc, #604]	; (800c32c <_dtoa_r+0x2f4>)
 800c0d0:	e027      	b.n	800c122 <_dtoa_r+0xea>
 800c0d2:	4b97      	ldr	r3, [pc, #604]	; (800c330 <_dtoa_r+0x2f8>)
 800c0d4:	9300      	str	r3, [sp, #0]
 800c0d6:	3308      	adds	r3, #8
 800c0d8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c0da:	6013      	str	r3, [r2, #0]
 800c0dc:	9800      	ldr	r0, [sp, #0]
 800c0de:	b013      	add	sp, #76	; 0x4c
 800c0e0:	ecbd 8b04 	vpop	{d8-d9}
 800c0e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0e8:	4b90      	ldr	r3, [pc, #576]	; (800c32c <_dtoa_r+0x2f4>)
 800c0ea:	9300      	str	r3, [sp, #0]
 800c0ec:	3303      	adds	r3, #3
 800c0ee:	e7f3      	b.n	800c0d8 <_dtoa_r+0xa0>
 800c0f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	ec51 0b17 	vmov	r0, r1, d7
 800c0fa:	eeb0 8a47 	vmov.f32	s16, s14
 800c0fe:	eef0 8a67 	vmov.f32	s17, s15
 800c102:	2300      	movs	r3, #0
 800c104:	f7f4 fcf0 	bl	8000ae8 <__aeabi_dcmpeq>
 800c108:	4681      	mov	r9, r0
 800c10a:	b160      	cbz	r0, 800c126 <_dtoa_r+0xee>
 800c10c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c10e:	2301      	movs	r3, #1
 800c110:	6013      	str	r3, [r2, #0]
 800c112:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c114:	2b00      	cmp	r3, #0
 800c116:	f000 8568 	beq.w	800cbea <_dtoa_r+0xbb2>
 800c11a:	4b86      	ldr	r3, [pc, #536]	; (800c334 <_dtoa_r+0x2fc>)
 800c11c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c11e:	6013      	str	r3, [r2, #0]
 800c120:	3b01      	subs	r3, #1
 800c122:	9300      	str	r3, [sp, #0]
 800c124:	e7da      	b.n	800c0dc <_dtoa_r+0xa4>
 800c126:	aa10      	add	r2, sp, #64	; 0x40
 800c128:	a911      	add	r1, sp, #68	; 0x44
 800c12a:	4620      	mov	r0, r4
 800c12c:	eeb0 0a48 	vmov.f32	s0, s16
 800c130:	eef0 0a68 	vmov.f32	s1, s17
 800c134:	f001 f994 	bl	800d460 <__d2b>
 800c138:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c13c:	4682      	mov	sl, r0
 800c13e:	2d00      	cmp	r5, #0
 800c140:	d07f      	beq.n	800c242 <_dtoa_r+0x20a>
 800c142:	ee18 3a90 	vmov	r3, s17
 800c146:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c14a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c14e:	ec51 0b18 	vmov	r0, r1, d8
 800c152:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c156:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c15a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c15e:	4619      	mov	r1, r3
 800c160:	2200      	movs	r2, #0
 800c162:	4b75      	ldr	r3, [pc, #468]	; (800c338 <_dtoa_r+0x300>)
 800c164:	f7f4 f8a0 	bl	80002a8 <__aeabi_dsub>
 800c168:	a367      	add	r3, pc, #412	; (adr r3, 800c308 <_dtoa_r+0x2d0>)
 800c16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c16e:	f7f4 fa53 	bl	8000618 <__aeabi_dmul>
 800c172:	a367      	add	r3, pc, #412	; (adr r3, 800c310 <_dtoa_r+0x2d8>)
 800c174:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c178:	f7f4 f898 	bl	80002ac <__adddf3>
 800c17c:	4606      	mov	r6, r0
 800c17e:	4628      	mov	r0, r5
 800c180:	460f      	mov	r7, r1
 800c182:	f7f4 f9df 	bl	8000544 <__aeabi_i2d>
 800c186:	a364      	add	r3, pc, #400	; (adr r3, 800c318 <_dtoa_r+0x2e0>)
 800c188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c18c:	f7f4 fa44 	bl	8000618 <__aeabi_dmul>
 800c190:	4602      	mov	r2, r0
 800c192:	460b      	mov	r3, r1
 800c194:	4630      	mov	r0, r6
 800c196:	4639      	mov	r1, r7
 800c198:	f7f4 f888 	bl	80002ac <__adddf3>
 800c19c:	4606      	mov	r6, r0
 800c19e:	460f      	mov	r7, r1
 800c1a0:	f7f4 fcea 	bl	8000b78 <__aeabi_d2iz>
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	4683      	mov	fp, r0
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	4630      	mov	r0, r6
 800c1ac:	4639      	mov	r1, r7
 800c1ae:	f7f4 fca5 	bl	8000afc <__aeabi_dcmplt>
 800c1b2:	b148      	cbz	r0, 800c1c8 <_dtoa_r+0x190>
 800c1b4:	4658      	mov	r0, fp
 800c1b6:	f7f4 f9c5 	bl	8000544 <__aeabi_i2d>
 800c1ba:	4632      	mov	r2, r6
 800c1bc:	463b      	mov	r3, r7
 800c1be:	f7f4 fc93 	bl	8000ae8 <__aeabi_dcmpeq>
 800c1c2:	b908      	cbnz	r0, 800c1c8 <_dtoa_r+0x190>
 800c1c4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c1c8:	f1bb 0f16 	cmp.w	fp, #22
 800c1cc:	d857      	bhi.n	800c27e <_dtoa_r+0x246>
 800c1ce:	4b5b      	ldr	r3, [pc, #364]	; (800c33c <_dtoa_r+0x304>)
 800c1d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1d8:	ec51 0b18 	vmov	r0, r1, d8
 800c1dc:	f7f4 fc8e 	bl	8000afc <__aeabi_dcmplt>
 800c1e0:	2800      	cmp	r0, #0
 800c1e2:	d04e      	beq.n	800c282 <_dtoa_r+0x24a>
 800c1e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	930c      	str	r3, [sp, #48]	; 0x30
 800c1ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c1ee:	1b5b      	subs	r3, r3, r5
 800c1f0:	1e5a      	subs	r2, r3, #1
 800c1f2:	bf45      	ittet	mi
 800c1f4:	f1c3 0301 	rsbmi	r3, r3, #1
 800c1f8:	9305      	strmi	r3, [sp, #20]
 800c1fa:	2300      	movpl	r3, #0
 800c1fc:	2300      	movmi	r3, #0
 800c1fe:	9206      	str	r2, [sp, #24]
 800c200:	bf54      	ite	pl
 800c202:	9305      	strpl	r3, [sp, #20]
 800c204:	9306      	strmi	r3, [sp, #24]
 800c206:	f1bb 0f00 	cmp.w	fp, #0
 800c20a:	db3c      	blt.n	800c286 <_dtoa_r+0x24e>
 800c20c:	9b06      	ldr	r3, [sp, #24]
 800c20e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800c212:	445b      	add	r3, fp
 800c214:	9306      	str	r3, [sp, #24]
 800c216:	2300      	movs	r3, #0
 800c218:	9308      	str	r3, [sp, #32]
 800c21a:	9b07      	ldr	r3, [sp, #28]
 800c21c:	2b09      	cmp	r3, #9
 800c21e:	d868      	bhi.n	800c2f2 <_dtoa_r+0x2ba>
 800c220:	2b05      	cmp	r3, #5
 800c222:	bfc4      	itt	gt
 800c224:	3b04      	subgt	r3, #4
 800c226:	9307      	strgt	r3, [sp, #28]
 800c228:	9b07      	ldr	r3, [sp, #28]
 800c22a:	f1a3 0302 	sub.w	r3, r3, #2
 800c22e:	bfcc      	ite	gt
 800c230:	2500      	movgt	r5, #0
 800c232:	2501      	movle	r5, #1
 800c234:	2b03      	cmp	r3, #3
 800c236:	f200 8085 	bhi.w	800c344 <_dtoa_r+0x30c>
 800c23a:	e8df f003 	tbb	[pc, r3]
 800c23e:	3b2e      	.short	0x3b2e
 800c240:	5839      	.short	0x5839
 800c242:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c246:	441d      	add	r5, r3
 800c248:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c24c:	2b20      	cmp	r3, #32
 800c24e:	bfc1      	itttt	gt
 800c250:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c254:	fa08 f803 	lslgt.w	r8, r8, r3
 800c258:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800c25c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800c260:	bfd6      	itet	le
 800c262:	f1c3 0320 	rsble	r3, r3, #32
 800c266:	ea48 0003 	orrgt.w	r0, r8, r3
 800c26a:	fa06 f003 	lslle.w	r0, r6, r3
 800c26e:	f7f4 f959 	bl	8000524 <__aeabi_ui2d>
 800c272:	2201      	movs	r2, #1
 800c274:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800c278:	3d01      	subs	r5, #1
 800c27a:	920e      	str	r2, [sp, #56]	; 0x38
 800c27c:	e76f      	b.n	800c15e <_dtoa_r+0x126>
 800c27e:	2301      	movs	r3, #1
 800c280:	e7b3      	b.n	800c1ea <_dtoa_r+0x1b2>
 800c282:	900c      	str	r0, [sp, #48]	; 0x30
 800c284:	e7b2      	b.n	800c1ec <_dtoa_r+0x1b4>
 800c286:	9b05      	ldr	r3, [sp, #20]
 800c288:	eba3 030b 	sub.w	r3, r3, fp
 800c28c:	9305      	str	r3, [sp, #20]
 800c28e:	f1cb 0300 	rsb	r3, fp, #0
 800c292:	9308      	str	r3, [sp, #32]
 800c294:	2300      	movs	r3, #0
 800c296:	930b      	str	r3, [sp, #44]	; 0x2c
 800c298:	e7bf      	b.n	800c21a <_dtoa_r+0x1e2>
 800c29a:	2300      	movs	r3, #0
 800c29c:	9309      	str	r3, [sp, #36]	; 0x24
 800c29e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	dc52      	bgt.n	800c34a <_dtoa_r+0x312>
 800c2a4:	2301      	movs	r3, #1
 800c2a6:	9301      	str	r3, [sp, #4]
 800c2a8:	9304      	str	r3, [sp, #16]
 800c2aa:	461a      	mov	r2, r3
 800c2ac:	920a      	str	r2, [sp, #40]	; 0x28
 800c2ae:	e00b      	b.n	800c2c8 <_dtoa_r+0x290>
 800c2b0:	2301      	movs	r3, #1
 800c2b2:	e7f3      	b.n	800c29c <_dtoa_r+0x264>
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	9309      	str	r3, [sp, #36]	; 0x24
 800c2b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2ba:	445b      	add	r3, fp
 800c2bc:	9301      	str	r3, [sp, #4]
 800c2be:	3301      	adds	r3, #1
 800c2c0:	2b01      	cmp	r3, #1
 800c2c2:	9304      	str	r3, [sp, #16]
 800c2c4:	bfb8      	it	lt
 800c2c6:	2301      	movlt	r3, #1
 800c2c8:	69e0      	ldr	r0, [r4, #28]
 800c2ca:	2100      	movs	r1, #0
 800c2cc:	2204      	movs	r2, #4
 800c2ce:	f102 0614 	add.w	r6, r2, #20
 800c2d2:	429e      	cmp	r6, r3
 800c2d4:	d93d      	bls.n	800c352 <_dtoa_r+0x31a>
 800c2d6:	6041      	str	r1, [r0, #4]
 800c2d8:	4620      	mov	r0, r4
 800c2da:	f000 fd9f 	bl	800ce1c <_Balloc>
 800c2de:	9000      	str	r0, [sp, #0]
 800c2e0:	2800      	cmp	r0, #0
 800c2e2:	d139      	bne.n	800c358 <_dtoa_r+0x320>
 800c2e4:	4b16      	ldr	r3, [pc, #88]	; (800c340 <_dtoa_r+0x308>)
 800c2e6:	4602      	mov	r2, r0
 800c2e8:	f240 11af 	movw	r1, #431	; 0x1af
 800c2ec:	e6bd      	b.n	800c06a <_dtoa_r+0x32>
 800c2ee:	2301      	movs	r3, #1
 800c2f0:	e7e1      	b.n	800c2b6 <_dtoa_r+0x27e>
 800c2f2:	2501      	movs	r5, #1
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	9307      	str	r3, [sp, #28]
 800c2f8:	9509      	str	r5, [sp, #36]	; 0x24
 800c2fa:	f04f 33ff 	mov.w	r3, #4294967295
 800c2fe:	9301      	str	r3, [sp, #4]
 800c300:	9304      	str	r3, [sp, #16]
 800c302:	2200      	movs	r2, #0
 800c304:	2312      	movs	r3, #18
 800c306:	e7d1      	b.n	800c2ac <_dtoa_r+0x274>
 800c308:	636f4361 	.word	0x636f4361
 800c30c:	3fd287a7 	.word	0x3fd287a7
 800c310:	8b60c8b3 	.word	0x8b60c8b3
 800c314:	3fc68a28 	.word	0x3fc68a28
 800c318:	509f79fb 	.word	0x509f79fb
 800c31c:	3fd34413 	.word	0x3fd34413
 800c320:	0800f2dd 	.word	0x0800f2dd
 800c324:	0800f2f4 	.word	0x0800f2f4
 800c328:	7ff00000 	.word	0x7ff00000
 800c32c:	0800f2d9 	.word	0x0800f2d9
 800c330:	0800f2d0 	.word	0x0800f2d0
 800c334:	0800f2ad 	.word	0x0800f2ad
 800c338:	3ff80000 	.word	0x3ff80000
 800c33c:	0800f3e0 	.word	0x0800f3e0
 800c340:	0800f34c 	.word	0x0800f34c
 800c344:	2301      	movs	r3, #1
 800c346:	9309      	str	r3, [sp, #36]	; 0x24
 800c348:	e7d7      	b.n	800c2fa <_dtoa_r+0x2c2>
 800c34a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c34c:	9301      	str	r3, [sp, #4]
 800c34e:	9304      	str	r3, [sp, #16]
 800c350:	e7ba      	b.n	800c2c8 <_dtoa_r+0x290>
 800c352:	3101      	adds	r1, #1
 800c354:	0052      	lsls	r2, r2, #1
 800c356:	e7ba      	b.n	800c2ce <_dtoa_r+0x296>
 800c358:	69e3      	ldr	r3, [r4, #28]
 800c35a:	9a00      	ldr	r2, [sp, #0]
 800c35c:	601a      	str	r2, [r3, #0]
 800c35e:	9b04      	ldr	r3, [sp, #16]
 800c360:	2b0e      	cmp	r3, #14
 800c362:	f200 80a8 	bhi.w	800c4b6 <_dtoa_r+0x47e>
 800c366:	2d00      	cmp	r5, #0
 800c368:	f000 80a5 	beq.w	800c4b6 <_dtoa_r+0x47e>
 800c36c:	f1bb 0f00 	cmp.w	fp, #0
 800c370:	dd38      	ble.n	800c3e4 <_dtoa_r+0x3ac>
 800c372:	4bc0      	ldr	r3, [pc, #768]	; (800c674 <_dtoa_r+0x63c>)
 800c374:	f00b 020f 	and.w	r2, fp, #15
 800c378:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c37c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c380:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c384:	ea4f 182b 	mov.w	r8, fp, asr #4
 800c388:	d019      	beq.n	800c3be <_dtoa_r+0x386>
 800c38a:	4bbb      	ldr	r3, [pc, #748]	; (800c678 <_dtoa_r+0x640>)
 800c38c:	ec51 0b18 	vmov	r0, r1, d8
 800c390:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c394:	f7f4 fa6a 	bl	800086c <__aeabi_ddiv>
 800c398:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c39c:	f008 080f 	and.w	r8, r8, #15
 800c3a0:	2503      	movs	r5, #3
 800c3a2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800c678 <_dtoa_r+0x640>
 800c3a6:	f1b8 0f00 	cmp.w	r8, #0
 800c3aa:	d10a      	bne.n	800c3c2 <_dtoa_r+0x38a>
 800c3ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c3b0:	4632      	mov	r2, r6
 800c3b2:	463b      	mov	r3, r7
 800c3b4:	f7f4 fa5a 	bl	800086c <__aeabi_ddiv>
 800c3b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c3bc:	e02b      	b.n	800c416 <_dtoa_r+0x3de>
 800c3be:	2502      	movs	r5, #2
 800c3c0:	e7ef      	b.n	800c3a2 <_dtoa_r+0x36a>
 800c3c2:	f018 0f01 	tst.w	r8, #1
 800c3c6:	d008      	beq.n	800c3da <_dtoa_r+0x3a2>
 800c3c8:	4630      	mov	r0, r6
 800c3ca:	4639      	mov	r1, r7
 800c3cc:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c3d0:	f7f4 f922 	bl	8000618 <__aeabi_dmul>
 800c3d4:	3501      	adds	r5, #1
 800c3d6:	4606      	mov	r6, r0
 800c3d8:	460f      	mov	r7, r1
 800c3da:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c3de:	f109 0908 	add.w	r9, r9, #8
 800c3e2:	e7e0      	b.n	800c3a6 <_dtoa_r+0x36e>
 800c3e4:	f000 809f 	beq.w	800c526 <_dtoa_r+0x4ee>
 800c3e8:	f1cb 0600 	rsb	r6, fp, #0
 800c3ec:	4ba1      	ldr	r3, [pc, #644]	; (800c674 <_dtoa_r+0x63c>)
 800c3ee:	4fa2      	ldr	r7, [pc, #648]	; (800c678 <_dtoa_r+0x640>)
 800c3f0:	f006 020f 	and.w	r2, r6, #15
 800c3f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3fc:	ec51 0b18 	vmov	r0, r1, d8
 800c400:	f7f4 f90a 	bl	8000618 <__aeabi_dmul>
 800c404:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c408:	1136      	asrs	r6, r6, #4
 800c40a:	2300      	movs	r3, #0
 800c40c:	2502      	movs	r5, #2
 800c40e:	2e00      	cmp	r6, #0
 800c410:	d17e      	bne.n	800c510 <_dtoa_r+0x4d8>
 800c412:	2b00      	cmp	r3, #0
 800c414:	d1d0      	bne.n	800c3b8 <_dtoa_r+0x380>
 800c416:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c418:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	f000 8084 	beq.w	800c52a <_dtoa_r+0x4f2>
 800c422:	4b96      	ldr	r3, [pc, #600]	; (800c67c <_dtoa_r+0x644>)
 800c424:	2200      	movs	r2, #0
 800c426:	4640      	mov	r0, r8
 800c428:	4649      	mov	r1, r9
 800c42a:	f7f4 fb67 	bl	8000afc <__aeabi_dcmplt>
 800c42e:	2800      	cmp	r0, #0
 800c430:	d07b      	beq.n	800c52a <_dtoa_r+0x4f2>
 800c432:	9b04      	ldr	r3, [sp, #16]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d078      	beq.n	800c52a <_dtoa_r+0x4f2>
 800c438:	9b01      	ldr	r3, [sp, #4]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	dd39      	ble.n	800c4b2 <_dtoa_r+0x47a>
 800c43e:	4b90      	ldr	r3, [pc, #576]	; (800c680 <_dtoa_r+0x648>)
 800c440:	2200      	movs	r2, #0
 800c442:	4640      	mov	r0, r8
 800c444:	4649      	mov	r1, r9
 800c446:	f7f4 f8e7 	bl	8000618 <__aeabi_dmul>
 800c44a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c44e:	9e01      	ldr	r6, [sp, #4]
 800c450:	f10b 37ff 	add.w	r7, fp, #4294967295
 800c454:	3501      	adds	r5, #1
 800c456:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c45a:	4628      	mov	r0, r5
 800c45c:	f7f4 f872 	bl	8000544 <__aeabi_i2d>
 800c460:	4642      	mov	r2, r8
 800c462:	464b      	mov	r3, r9
 800c464:	f7f4 f8d8 	bl	8000618 <__aeabi_dmul>
 800c468:	4b86      	ldr	r3, [pc, #536]	; (800c684 <_dtoa_r+0x64c>)
 800c46a:	2200      	movs	r2, #0
 800c46c:	f7f3 ff1e 	bl	80002ac <__adddf3>
 800c470:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c474:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c478:	9303      	str	r3, [sp, #12]
 800c47a:	2e00      	cmp	r6, #0
 800c47c:	d158      	bne.n	800c530 <_dtoa_r+0x4f8>
 800c47e:	4b82      	ldr	r3, [pc, #520]	; (800c688 <_dtoa_r+0x650>)
 800c480:	2200      	movs	r2, #0
 800c482:	4640      	mov	r0, r8
 800c484:	4649      	mov	r1, r9
 800c486:	f7f3 ff0f 	bl	80002a8 <__aeabi_dsub>
 800c48a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c48e:	4680      	mov	r8, r0
 800c490:	4689      	mov	r9, r1
 800c492:	f7f4 fb51 	bl	8000b38 <__aeabi_dcmpgt>
 800c496:	2800      	cmp	r0, #0
 800c498:	f040 8296 	bne.w	800c9c8 <_dtoa_r+0x990>
 800c49c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c4a0:	4640      	mov	r0, r8
 800c4a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c4a6:	4649      	mov	r1, r9
 800c4a8:	f7f4 fb28 	bl	8000afc <__aeabi_dcmplt>
 800c4ac:	2800      	cmp	r0, #0
 800c4ae:	f040 8289 	bne.w	800c9c4 <_dtoa_r+0x98c>
 800c4b2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c4b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	f2c0 814e 	blt.w	800c75a <_dtoa_r+0x722>
 800c4be:	f1bb 0f0e 	cmp.w	fp, #14
 800c4c2:	f300 814a 	bgt.w	800c75a <_dtoa_r+0x722>
 800c4c6:	4b6b      	ldr	r3, [pc, #428]	; (800c674 <_dtoa_r+0x63c>)
 800c4c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c4cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c4d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	f280 80dc 	bge.w	800c690 <_dtoa_r+0x658>
 800c4d8:	9b04      	ldr	r3, [sp, #16]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	f300 80d8 	bgt.w	800c690 <_dtoa_r+0x658>
 800c4e0:	f040 826f 	bne.w	800c9c2 <_dtoa_r+0x98a>
 800c4e4:	4b68      	ldr	r3, [pc, #416]	; (800c688 <_dtoa_r+0x650>)
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	4640      	mov	r0, r8
 800c4ea:	4649      	mov	r1, r9
 800c4ec:	f7f4 f894 	bl	8000618 <__aeabi_dmul>
 800c4f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c4f4:	f7f4 fb16 	bl	8000b24 <__aeabi_dcmpge>
 800c4f8:	9e04      	ldr	r6, [sp, #16]
 800c4fa:	4637      	mov	r7, r6
 800c4fc:	2800      	cmp	r0, #0
 800c4fe:	f040 8245 	bne.w	800c98c <_dtoa_r+0x954>
 800c502:	9d00      	ldr	r5, [sp, #0]
 800c504:	2331      	movs	r3, #49	; 0x31
 800c506:	f805 3b01 	strb.w	r3, [r5], #1
 800c50a:	f10b 0b01 	add.w	fp, fp, #1
 800c50e:	e241      	b.n	800c994 <_dtoa_r+0x95c>
 800c510:	07f2      	lsls	r2, r6, #31
 800c512:	d505      	bpl.n	800c520 <_dtoa_r+0x4e8>
 800c514:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c518:	f7f4 f87e 	bl	8000618 <__aeabi_dmul>
 800c51c:	3501      	adds	r5, #1
 800c51e:	2301      	movs	r3, #1
 800c520:	1076      	asrs	r6, r6, #1
 800c522:	3708      	adds	r7, #8
 800c524:	e773      	b.n	800c40e <_dtoa_r+0x3d6>
 800c526:	2502      	movs	r5, #2
 800c528:	e775      	b.n	800c416 <_dtoa_r+0x3de>
 800c52a:	9e04      	ldr	r6, [sp, #16]
 800c52c:	465f      	mov	r7, fp
 800c52e:	e792      	b.n	800c456 <_dtoa_r+0x41e>
 800c530:	9900      	ldr	r1, [sp, #0]
 800c532:	4b50      	ldr	r3, [pc, #320]	; (800c674 <_dtoa_r+0x63c>)
 800c534:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c538:	4431      	add	r1, r6
 800c53a:	9102      	str	r1, [sp, #8]
 800c53c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c53e:	eeb0 9a47 	vmov.f32	s18, s14
 800c542:	eef0 9a67 	vmov.f32	s19, s15
 800c546:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c54a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c54e:	2900      	cmp	r1, #0
 800c550:	d044      	beq.n	800c5dc <_dtoa_r+0x5a4>
 800c552:	494e      	ldr	r1, [pc, #312]	; (800c68c <_dtoa_r+0x654>)
 800c554:	2000      	movs	r0, #0
 800c556:	f7f4 f989 	bl	800086c <__aeabi_ddiv>
 800c55a:	ec53 2b19 	vmov	r2, r3, d9
 800c55e:	f7f3 fea3 	bl	80002a8 <__aeabi_dsub>
 800c562:	9d00      	ldr	r5, [sp, #0]
 800c564:	ec41 0b19 	vmov	d9, r0, r1
 800c568:	4649      	mov	r1, r9
 800c56a:	4640      	mov	r0, r8
 800c56c:	f7f4 fb04 	bl	8000b78 <__aeabi_d2iz>
 800c570:	4606      	mov	r6, r0
 800c572:	f7f3 ffe7 	bl	8000544 <__aeabi_i2d>
 800c576:	4602      	mov	r2, r0
 800c578:	460b      	mov	r3, r1
 800c57a:	4640      	mov	r0, r8
 800c57c:	4649      	mov	r1, r9
 800c57e:	f7f3 fe93 	bl	80002a8 <__aeabi_dsub>
 800c582:	3630      	adds	r6, #48	; 0x30
 800c584:	f805 6b01 	strb.w	r6, [r5], #1
 800c588:	ec53 2b19 	vmov	r2, r3, d9
 800c58c:	4680      	mov	r8, r0
 800c58e:	4689      	mov	r9, r1
 800c590:	f7f4 fab4 	bl	8000afc <__aeabi_dcmplt>
 800c594:	2800      	cmp	r0, #0
 800c596:	d164      	bne.n	800c662 <_dtoa_r+0x62a>
 800c598:	4642      	mov	r2, r8
 800c59a:	464b      	mov	r3, r9
 800c59c:	4937      	ldr	r1, [pc, #220]	; (800c67c <_dtoa_r+0x644>)
 800c59e:	2000      	movs	r0, #0
 800c5a0:	f7f3 fe82 	bl	80002a8 <__aeabi_dsub>
 800c5a4:	ec53 2b19 	vmov	r2, r3, d9
 800c5a8:	f7f4 faa8 	bl	8000afc <__aeabi_dcmplt>
 800c5ac:	2800      	cmp	r0, #0
 800c5ae:	f040 80b6 	bne.w	800c71e <_dtoa_r+0x6e6>
 800c5b2:	9b02      	ldr	r3, [sp, #8]
 800c5b4:	429d      	cmp	r5, r3
 800c5b6:	f43f af7c 	beq.w	800c4b2 <_dtoa_r+0x47a>
 800c5ba:	4b31      	ldr	r3, [pc, #196]	; (800c680 <_dtoa_r+0x648>)
 800c5bc:	ec51 0b19 	vmov	r0, r1, d9
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	f7f4 f829 	bl	8000618 <__aeabi_dmul>
 800c5c6:	4b2e      	ldr	r3, [pc, #184]	; (800c680 <_dtoa_r+0x648>)
 800c5c8:	ec41 0b19 	vmov	d9, r0, r1
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	4640      	mov	r0, r8
 800c5d0:	4649      	mov	r1, r9
 800c5d2:	f7f4 f821 	bl	8000618 <__aeabi_dmul>
 800c5d6:	4680      	mov	r8, r0
 800c5d8:	4689      	mov	r9, r1
 800c5da:	e7c5      	b.n	800c568 <_dtoa_r+0x530>
 800c5dc:	ec51 0b17 	vmov	r0, r1, d7
 800c5e0:	f7f4 f81a 	bl	8000618 <__aeabi_dmul>
 800c5e4:	9b02      	ldr	r3, [sp, #8]
 800c5e6:	9d00      	ldr	r5, [sp, #0]
 800c5e8:	930f      	str	r3, [sp, #60]	; 0x3c
 800c5ea:	ec41 0b19 	vmov	d9, r0, r1
 800c5ee:	4649      	mov	r1, r9
 800c5f0:	4640      	mov	r0, r8
 800c5f2:	f7f4 fac1 	bl	8000b78 <__aeabi_d2iz>
 800c5f6:	4606      	mov	r6, r0
 800c5f8:	f7f3 ffa4 	bl	8000544 <__aeabi_i2d>
 800c5fc:	3630      	adds	r6, #48	; 0x30
 800c5fe:	4602      	mov	r2, r0
 800c600:	460b      	mov	r3, r1
 800c602:	4640      	mov	r0, r8
 800c604:	4649      	mov	r1, r9
 800c606:	f7f3 fe4f 	bl	80002a8 <__aeabi_dsub>
 800c60a:	f805 6b01 	strb.w	r6, [r5], #1
 800c60e:	9b02      	ldr	r3, [sp, #8]
 800c610:	429d      	cmp	r5, r3
 800c612:	4680      	mov	r8, r0
 800c614:	4689      	mov	r9, r1
 800c616:	f04f 0200 	mov.w	r2, #0
 800c61a:	d124      	bne.n	800c666 <_dtoa_r+0x62e>
 800c61c:	4b1b      	ldr	r3, [pc, #108]	; (800c68c <_dtoa_r+0x654>)
 800c61e:	ec51 0b19 	vmov	r0, r1, d9
 800c622:	f7f3 fe43 	bl	80002ac <__adddf3>
 800c626:	4602      	mov	r2, r0
 800c628:	460b      	mov	r3, r1
 800c62a:	4640      	mov	r0, r8
 800c62c:	4649      	mov	r1, r9
 800c62e:	f7f4 fa83 	bl	8000b38 <__aeabi_dcmpgt>
 800c632:	2800      	cmp	r0, #0
 800c634:	d173      	bne.n	800c71e <_dtoa_r+0x6e6>
 800c636:	ec53 2b19 	vmov	r2, r3, d9
 800c63a:	4914      	ldr	r1, [pc, #80]	; (800c68c <_dtoa_r+0x654>)
 800c63c:	2000      	movs	r0, #0
 800c63e:	f7f3 fe33 	bl	80002a8 <__aeabi_dsub>
 800c642:	4602      	mov	r2, r0
 800c644:	460b      	mov	r3, r1
 800c646:	4640      	mov	r0, r8
 800c648:	4649      	mov	r1, r9
 800c64a:	f7f4 fa57 	bl	8000afc <__aeabi_dcmplt>
 800c64e:	2800      	cmp	r0, #0
 800c650:	f43f af2f 	beq.w	800c4b2 <_dtoa_r+0x47a>
 800c654:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c656:	1e6b      	subs	r3, r5, #1
 800c658:	930f      	str	r3, [sp, #60]	; 0x3c
 800c65a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c65e:	2b30      	cmp	r3, #48	; 0x30
 800c660:	d0f8      	beq.n	800c654 <_dtoa_r+0x61c>
 800c662:	46bb      	mov	fp, r7
 800c664:	e04a      	b.n	800c6fc <_dtoa_r+0x6c4>
 800c666:	4b06      	ldr	r3, [pc, #24]	; (800c680 <_dtoa_r+0x648>)
 800c668:	f7f3 ffd6 	bl	8000618 <__aeabi_dmul>
 800c66c:	4680      	mov	r8, r0
 800c66e:	4689      	mov	r9, r1
 800c670:	e7bd      	b.n	800c5ee <_dtoa_r+0x5b6>
 800c672:	bf00      	nop
 800c674:	0800f3e0 	.word	0x0800f3e0
 800c678:	0800f3b8 	.word	0x0800f3b8
 800c67c:	3ff00000 	.word	0x3ff00000
 800c680:	40240000 	.word	0x40240000
 800c684:	401c0000 	.word	0x401c0000
 800c688:	40140000 	.word	0x40140000
 800c68c:	3fe00000 	.word	0x3fe00000
 800c690:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c694:	9d00      	ldr	r5, [sp, #0]
 800c696:	4642      	mov	r2, r8
 800c698:	464b      	mov	r3, r9
 800c69a:	4630      	mov	r0, r6
 800c69c:	4639      	mov	r1, r7
 800c69e:	f7f4 f8e5 	bl	800086c <__aeabi_ddiv>
 800c6a2:	f7f4 fa69 	bl	8000b78 <__aeabi_d2iz>
 800c6a6:	9001      	str	r0, [sp, #4]
 800c6a8:	f7f3 ff4c 	bl	8000544 <__aeabi_i2d>
 800c6ac:	4642      	mov	r2, r8
 800c6ae:	464b      	mov	r3, r9
 800c6b0:	f7f3 ffb2 	bl	8000618 <__aeabi_dmul>
 800c6b4:	4602      	mov	r2, r0
 800c6b6:	460b      	mov	r3, r1
 800c6b8:	4630      	mov	r0, r6
 800c6ba:	4639      	mov	r1, r7
 800c6bc:	f7f3 fdf4 	bl	80002a8 <__aeabi_dsub>
 800c6c0:	9e01      	ldr	r6, [sp, #4]
 800c6c2:	9f04      	ldr	r7, [sp, #16]
 800c6c4:	3630      	adds	r6, #48	; 0x30
 800c6c6:	f805 6b01 	strb.w	r6, [r5], #1
 800c6ca:	9e00      	ldr	r6, [sp, #0]
 800c6cc:	1bae      	subs	r6, r5, r6
 800c6ce:	42b7      	cmp	r7, r6
 800c6d0:	4602      	mov	r2, r0
 800c6d2:	460b      	mov	r3, r1
 800c6d4:	d134      	bne.n	800c740 <_dtoa_r+0x708>
 800c6d6:	f7f3 fde9 	bl	80002ac <__adddf3>
 800c6da:	4642      	mov	r2, r8
 800c6dc:	464b      	mov	r3, r9
 800c6de:	4606      	mov	r6, r0
 800c6e0:	460f      	mov	r7, r1
 800c6e2:	f7f4 fa29 	bl	8000b38 <__aeabi_dcmpgt>
 800c6e6:	b9c8      	cbnz	r0, 800c71c <_dtoa_r+0x6e4>
 800c6e8:	4642      	mov	r2, r8
 800c6ea:	464b      	mov	r3, r9
 800c6ec:	4630      	mov	r0, r6
 800c6ee:	4639      	mov	r1, r7
 800c6f0:	f7f4 f9fa 	bl	8000ae8 <__aeabi_dcmpeq>
 800c6f4:	b110      	cbz	r0, 800c6fc <_dtoa_r+0x6c4>
 800c6f6:	9b01      	ldr	r3, [sp, #4]
 800c6f8:	07db      	lsls	r3, r3, #31
 800c6fa:	d40f      	bmi.n	800c71c <_dtoa_r+0x6e4>
 800c6fc:	4651      	mov	r1, sl
 800c6fe:	4620      	mov	r0, r4
 800c700:	f000 fbcc 	bl	800ce9c <_Bfree>
 800c704:	2300      	movs	r3, #0
 800c706:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c708:	702b      	strb	r3, [r5, #0]
 800c70a:	f10b 0301 	add.w	r3, fp, #1
 800c70e:	6013      	str	r3, [r2, #0]
 800c710:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c712:	2b00      	cmp	r3, #0
 800c714:	f43f ace2 	beq.w	800c0dc <_dtoa_r+0xa4>
 800c718:	601d      	str	r5, [r3, #0]
 800c71a:	e4df      	b.n	800c0dc <_dtoa_r+0xa4>
 800c71c:	465f      	mov	r7, fp
 800c71e:	462b      	mov	r3, r5
 800c720:	461d      	mov	r5, r3
 800c722:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c726:	2a39      	cmp	r2, #57	; 0x39
 800c728:	d106      	bne.n	800c738 <_dtoa_r+0x700>
 800c72a:	9a00      	ldr	r2, [sp, #0]
 800c72c:	429a      	cmp	r2, r3
 800c72e:	d1f7      	bne.n	800c720 <_dtoa_r+0x6e8>
 800c730:	9900      	ldr	r1, [sp, #0]
 800c732:	2230      	movs	r2, #48	; 0x30
 800c734:	3701      	adds	r7, #1
 800c736:	700a      	strb	r2, [r1, #0]
 800c738:	781a      	ldrb	r2, [r3, #0]
 800c73a:	3201      	adds	r2, #1
 800c73c:	701a      	strb	r2, [r3, #0]
 800c73e:	e790      	b.n	800c662 <_dtoa_r+0x62a>
 800c740:	4ba3      	ldr	r3, [pc, #652]	; (800c9d0 <_dtoa_r+0x998>)
 800c742:	2200      	movs	r2, #0
 800c744:	f7f3 ff68 	bl	8000618 <__aeabi_dmul>
 800c748:	2200      	movs	r2, #0
 800c74a:	2300      	movs	r3, #0
 800c74c:	4606      	mov	r6, r0
 800c74e:	460f      	mov	r7, r1
 800c750:	f7f4 f9ca 	bl	8000ae8 <__aeabi_dcmpeq>
 800c754:	2800      	cmp	r0, #0
 800c756:	d09e      	beq.n	800c696 <_dtoa_r+0x65e>
 800c758:	e7d0      	b.n	800c6fc <_dtoa_r+0x6c4>
 800c75a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c75c:	2a00      	cmp	r2, #0
 800c75e:	f000 80ca 	beq.w	800c8f6 <_dtoa_r+0x8be>
 800c762:	9a07      	ldr	r2, [sp, #28]
 800c764:	2a01      	cmp	r2, #1
 800c766:	f300 80ad 	bgt.w	800c8c4 <_dtoa_r+0x88c>
 800c76a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c76c:	2a00      	cmp	r2, #0
 800c76e:	f000 80a5 	beq.w	800c8bc <_dtoa_r+0x884>
 800c772:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c776:	9e08      	ldr	r6, [sp, #32]
 800c778:	9d05      	ldr	r5, [sp, #20]
 800c77a:	9a05      	ldr	r2, [sp, #20]
 800c77c:	441a      	add	r2, r3
 800c77e:	9205      	str	r2, [sp, #20]
 800c780:	9a06      	ldr	r2, [sp, #24]
 800c782:	2101      	movs	r1, #1
 800c784:	441a      	add	r2, r3
 800c786:	4620      	mov	r0, r4
 800c788:	9206      	str	r2, [sp, #24]
 800c78a:	f000 fc3d 	bl	800d008 <__i2b>
 800c78e:	4607      	mov	r7, r0
 800c790:	b165      	cbz	r5, 800c7ac <_dtoa_r+0x774>
 800c792:	9b06      	ldr	r3, [sp, #24]
 800c794:	2b00      	cmp	r3, #0
 800c796:	dd09      	ble.n	800c7ac <_dtoa_r+0x774>
 800c798:	42ab      	cmp	r3, r5
 800c79a:	9a05      	ldr	r2, [sp, #20]
 800c79c:	bfa8      	it	ge
 800c79e:	462b      	movge	r3, r5
 800c7a0:	1ad2      	subs	r2, r2, r3
 800c7a2:	9205      	str	r2, [sp, #20]
 800c7a4:	9a06      	ldr	r2, [sp, #24]
 800c7a6:	1aed      	subs	r5, r5, r3
 800c7a8:	1ad3      	subs	r3, r2, r3
 800c7aa:	9306      	str	r3, [sp, #24]
 800c7ac:	9b08      	ldr	r3, [sp, #32]
 800c7ae:	b1f3      	cbz	r3, 800c7ee <_dtoa_r+0x7b6>
 800c7b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	f000 80a3 	beq.w	800c8fe <_dtoa_r+0x8c6>
 800c7b8:	2e00      	cmp	r6, #0
 800c7ba:	dd10      	ble.n	800c7de <_dtoa_r+0x7a6>
 800c7bc:	4639      	mov	r1, r7
 800c7be:	4632      	mov	r2, r6
 800c7c0:	4620      	mov	r0, r4
 800c7c2:	f000 fce1 	bl	800d188 <__pow5mult>
 800c7c6:	4652      	mov	r2, sl
 800c7c8:	4601      	mov	r1, r0
 800c7ca:	4607      	mov	r7, r0
 800c7cc:	4620      	mov	r0, r4
 800c7ce:	f000 fc31 	bl	800d034 <__multiply>
 800c7d2:	4651      	mov	r1, sl
 800c7d4:	4680      	mov	r8, r0
 800c7d6:	4620      	mov	r0, r4
 800c7d8:	f000 fb60 	bl	800ce9c <_Bfree>
 800c7dc:	46c2      	mov	sl, r8
 800c7de:	9b08      	ldr	r3, [sp, #32]
 800c7e0:	1b9a      	subs	r2, r3, r6
 800c7e2:	d004      	beq.n	800c7ee <_dtoa_r+0x7b6>
 800c7e4:	4651      	mov	r1, sl
 800c7e6:	4620      	mov	r0, r4
 800c7e8:	f000 fcce 	bl	800d188 <__pow5mult>
 800c7ec:	4682      	mov	sl, r0
 800c7ee:	2101      	movs	r1, #1
 800c7f0:	4620      	mov	r0, r4
 800c7f2:	f000 fc09 	bl	800d008 <__i2b>
 800c7f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	4606      	mov	r6, r0
 800c7fc:	f340 8081 	ble.w	800c902 <_dtoa_r+0x8ca>
 800c800:	461a      	mov	r2, r3
 800c802:	4601      	mov	r1, r0
 800c804:	4620      	mov	r0, r4
 800c806:	f000 fcbf 	bl	800d188 <__pow5mult>
 800c80a:	9b07      	ldr	r3, [sp, #28]
 800c80c:	2b01      	cmp	r3, #1
 800c80e:	4606      	mov	r6, r0
 800c810:	dd7a      	ble.n	800c908 <_dtoa_r+0x8d0>
 800c812:	f04f 0800 	mov.w	r8, #0
 800c816:	6933      	ldr	r3, [r6, #16]
 800c818:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c81c:	6918      	ldr	r0, [r3, #16]
 800c81e:	f000 fba5 	bl	800cf6c <__hi0bits>
 800c822:	f1c0 0020 	rsb	r0, r0, #32
 800c826:	9b06      	ldr	r3, [sp, #24]
 800c828:	4418      	add	r0, r3
 800c82a:	f010 001f 	ands.w	r0, r0, #31
 800c82e:	f000 8094 	beq.w	800c95a <_dtoa_r+0x922>
 800c832:	f1c0 0320 	rsb	r3, r0, #32
 800c836:	2b04      	cmp	r3, #4
 800c838:	f340 8085 	ble.w	800c946 <_dtoa_r+0x90e>
 800c83c:	9b05      	ldr	r3, [sp, #20]
 800c83e:	f1c0 001c 	rsb	r0, r0, #28
 800c842:	4403      	add	r3, r0
 800c844:	9305      	str	r3, [sp, #20]
 800c846:	9b06      	ldr	r3, [sp, #24]
 800c848:	4403      	add	r3, r0
 800c84a:	4405      	add	r5, r0
 800c84c:	9306      	str	r3, [sp, #24]
 800c84e:	9b05      	ldr	r3, [sp, #20]
 800c850:	2b00      	cmp	r3, #0
 800c852:	dd05      	ble.n	800c860 <_dtoa_r+0x828>
 800c854:	4651      	mov	r1, sl
 800c856:	461a      	mov	r2, r3
 800c858:	4620      	mov	r0, r4
 800c85a:	f000 fcef 	bl	800d23c <__lshift>
 800c85e:	4682      	mov	sl, r0
 800c860:	9b06      	ldr	r3, [sp, #24]
 800c862:	2b00      	cmp	r3, #0
 800c864:	dd05      	ble.n	800c872 <_dtoa_r+0x83a>
 800c866:	4631      	mov	r1, r6
 800c868:	461a      	mov	r2, r3
 800c86a:	4620      	mov	r0, r4
 800c86c:	f000 fce6 	bl	800d23c <__lshift>
 800c870:	4606      	mov	r6, r0
 800c872:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c874:	2b00      	cmp	r3, #0
 800c876:	d072      	beq.n	800c95e <_dtoa_r+0x926>
 800c878:	4631      	mov	r1, r6
 800c87a:	4650      	mov	r0, sl
 800c87c:	f000 fd4a 	bl	800d314 <__mcmp>
 800c880:	2800      	cmp	r0, #0
 800c882:	da6c      	bge.n	800c95e <_dtoa_r+0x926>
 800c884:	2300      	movs	r3, #0
 800c886:	4651      	mov	r1, sl
 800c888:	220a      	movs	r2, #10
 800c88a:	4620      	mov	r0, r4
 800c88c:	f000 fb28 	bl	800cee0 <__multadd>
 800c890:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c892:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c896:	4682      	mov	sl, r0
 800c898:	2b00      	cmp	r3, #0
 800c89a:	f000 81b0 	beq.w	800cbfe <_dtoa_r+0xbc6>
 800c89e:	2300      	movs	r3, #0
 800c8a0:	4639      	mov	r1, r7
 800c8a2:	220a      	movs	r2, #10
 800c8a4:	4620      	mov	r0, r4
 800c8a6:	f000 fb1b 	bl	800cee0 <__multadd>
 800c8aa:	9b01      	ldr	r3, [sp, #4]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	4607      	mov	r7, r0
 800c8b0:	f300 8096 	bgt.w	800c9e0 <_dtoa_r+0x9a8>
 800c8b4:	9b07      	ldr	r3, [sp, #28]
 800c8b6:	2b02      	cmp	r3, #2
 800c8b8:	dc59      	bgt.n	800c96e <_dtoa_r+0x936>
 800c8ba:	e091      	b.n	800c9e0 <_dtoa_r+0x9a8>
 800c8bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c8be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c8c2:	e758      	b.n	800c776 <_dtoa_r+0x73e>
 800c8c4:	9b04      	ldr	r3, [sp, #16]
 800c8c6:	1e5e      	subs	r6, r3, #1
 800c8c8:	9b08      	ldr	r3, [sp, #32]
 800c8ca:	42b3      	cmp	r3, r6
 800c8cc:	bfbf      	itttt	lt
 800c8ce:	9b08      	ldrlt	r3, [sp, #32]
 800c8d0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800c8d2:	9608      	strlt	r6, [sp, #32]
 800c8d4:	1af3      	sublt	r3, r6, r3
 800c8d6:	bfb4      	ite	lt
 800c8d8:	18d2      	addlt	r2, r2, r3
 800c8da:	1b9e      	subge	r6, r3, r6
 800c8dc:	9b04      	ldr	r3, [sp, #16]
 800c8de:	bfbc      	itt	lt
 800c8e0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800c8e2:	2600      	movlt	r6, #0
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	bfb7      	itett	lt
 800c8e8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800c8ec:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800c8f0:	1a9d      	sublt	r5, r3, r2
 800c8f2:	2300      	movlt	r3, #0
 800c8f4:	e741      	b.n	800c77a <_dtoa_r+0x742>
 800c8f6:	9e08      	ldr	r6, [sp, #32]
 800c8f8:	9d05      	ldr	r5, [sp, #20]
 800c8fa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c8fc:	e748      	b.n	800c790 <_dtoa_r+0x758>
 800c8fe:	9a08      	ldr	r2, [sp, #32]
 800c900:	e770      	b.n	800c7e4 <_dtoa_r+0x7ac>
 800c902:	9b07      	ldr	r3, [sp, #28]
 800c904:	2b01      	cmp	r3, #1
 800c906:	dc19      	bgt.n	800c93c <_dtoa_r+0x904>
 800c908:	9b02      	ldr	r3, [sp, #8]
 800c90a:	b9bb      	cbnz	r3, 800c93c <_dtoa_r+0x904>
 800c90c:	9b03      	ldr	r3, [sp, #12]
 800c90e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c912:	b99b      	cbnz	r3, 800c93c <_dtoa_r+0x904>
 800c914:	9b03      	ldr	r3, [sp, #12]
 800c916:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c91a:	0d1b      	lsrs	r3, r3, #20
 800c91c:	051b      	lsls	r3, r3, #20
 800c91e:	b183      	cbz	r3, 800c942 <_dtoa_r+0x90a>
 800c920:	9b05      	ldr	r3, [sp, #20]
 800c922:	3301      	adds	r3, #1
 800c924:	9305      	str	r3, [sp, #20]
 800c926:	9b06      	ldr	r3, [sp, #24]
 800c928:	3301      	adds	r3, #1
 800c92a:	9306      	str	r3, [sp, #24]
 800c92c:	f04f 0801 	mov.w	r8, #1
 800c930:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c932:	2b00      	cmp	r3, #0
 800c934:	f47f af6f 	bne.w	800c816 <_dtoa_r+0x7de>
 800c938:	2001      	movs	r0, #1
 800c93a:	e774      	b.n	800c826 <_dtoa_r+0x7ee>
 800c93c:	f04f 0800 	mov.w	r8, #0
 800c940:	e7f6      	b.n	800c930 <_dtoa_r+0x8f8>
 800c942:	4698      	mov	r8, r3
 800c944:	e7f4      	b.n	800c930 <_dtoa_r+0x8f8>
 800c946:	d082      	beq.n	800c84e <_dtoa_r+0x816>
 800c948:	9a05      	ldr	r2, [sp, #20]
 800c94a:	331c      	adds	r3, #28
 800c94c:	441a      	add	r2, r3
 800c94e:	9205      	str	r2, [sp, #20]
 800c950:	9a06      	ldr	r2, [sp, #24]
 800c952:	441a      	add	r2, r3
 800c954:	441d      	add	r5, r3
 800c956:	9206      	str	r2, [sp, #24]
 800c958:	e779      	b.n	800c84e <_dtoa_r+0x816>
 800c95a:	4603      	mov	r3, r0
 800c95c:	e7f4      	b.n	800c948 <_dtoa_r+0x910>
 800c95e:	9b04      	ldr	r3, [sp, #16]
 800c960:	2b00      	cmp	r3, #0
 800c962:	dc37      	bgt.n	800c9d4 <_dtoa_r+0x99c>
 800c964:	9b07      	ldr	r3, [sp, #28]
 800c966:	2b02      	cmp	r3, #2
 800c968:	dd34      	ble.n	800c9d4 <_dtoa_r+0x99c>
 800c96a:	9b04      	ldr	r3, [sp, #16]
 800c96c:	9301      	str	r3, [sp, #4]
 800c96e:	9b01      	ldr	r3, [sp, #4]
 800c970:	b963      	cbnz	r3, 800c98c <_dtoa_r+0x954>
 800c972:	4631      	mov	r1, r6
 800c974:	2205      	movs	r2, #5
 800c976:	4620      	mov	r0, r4
 800c978:	f000 fab2 	bl	800cee0 <__multadd>
 800c97c:	4601      	mov	r1, r0
 800c97e:	4606      	mov	r6, r0
 800c980:	4650      	mov	r0, sl
 800c982:	f000 fcc7 	bl	800d314 <__mcmp>
 800c986:	2800      	cmp	r0, #0
 800c988:	f73f adbb 	bgt.w	800c502 <_dtoa_r+0x4ca>
 800c98c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c98e:	9d00      	ldr	r5, [sp, #0]
 800c990:	ea6f 0b03 	mvn.w	fp, r3
 800c994:	f04f 0800 	mov.w	r8, #0
 800c998:	4631      	mov	r1, r6
 800c99a:	4620      	mov	r0, r4
 800c99c:	f000 fa7e 	bl	800ce9c <_Bfree>
 800c9a0:	2f00      	cmp	r7, #0
 800c9a2:	f43f aeab 	beq.w	800c6fc <_dtoa_r+0x6c4>
 800c9a6:	f1b8 0f00 	cmp.w	r8, #0
 800c9aa:	d005      	beq.n	800c9b8 <_dtoa_r+0x980>
 800c9ac:	45b8      	cmp	r8, r7
 800c9ae:	d003      	beq.n	800c9b8 <_dtoa_r+0x980>
 800c9b0:	4641      	mov	r1, r8
 800c9b2:	4620      	mov	r0, r4
 800c9b4:	f000 fa72 	bl	800ce9c <_Bfree>
 800c9b8:	4639      	mov	r1, r7
 800c9ba:	4620      	mov	r0, r4
 800c9bc:	f000 fa6e 	bl	800ce9c <_Bfree>
 800c9c0:	e69c      	b.n	800c6fc <_dtoa_r+0x6c4>
 800c9c2:	2600      	movs	r6, #0
 800c9c4:	4637      	mov	r7, r6
 800c9c6:	e7e1      	b.n	800c98c <_dtoa_r+0x954>
 800c9c8:	46bb      	mov	fp, r7
 800c9ca:	4637      	mov	r7, r6
 800c9cc:	e599      	b.n	800c502 <_dtoa_r+0x4ca>
 800c9ce:	bf00      	nop
 800c9d0:	40240000 	.word	0x40240000
 800c9d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	f000 80c8 	beq.w	800cb6c <_dtoa_r+0xb34>
 800c9dc:	9b04      	ldr	r3, [sp, #16]
 800c9de:	9301      	str	r3, [sp, #4]
 800c9e0:	2d00      	cmp	r5, #0
 800c9e2:	dd05      	ble.n	800c9f0 <_dtoa_r+0x9b8>
 800c9e4:	4639      	mov	r1, r7
 800c9e6:	462a      	mov	r2, r5
 800c9e8:	4620      	mov	r0, r4
 800c9ea:	f000 fc27 	bl	800d23c <__lshift>
 800c9ee:	4607      	mov	r7, r0
 800c9f0:	f1b8 0f00 	cmp.w	r8, #0
 800c9f4:	d05b      	beq.n	800caae <_dtoa_r+0xa76>
 800c9f6:	6879      	ldr	r1, [r7, #4]
 800c9f8:	4620      	mov	r0, r4
 800c9fa:	f000 fa0f 	bl	800ce1c <_Balloc>
 800c9fe:	4605      	mov	r5, r0
 800ca00:	b928      	cbnz	r0, 800ca0e <_dtoa_r+0x9d6>
 800ca02:	4b83      	ldr	r3, [pc, #524]	; (800cc10 <_dtoa_r+0xbd8>)
 800ca04:	4602      	mov	r2, r0
 800ca06:	f240 21ef 	movw	r1, #751	; 0x2ef
 800ca0a:	f7ff bb2e 	b.w	800c06a <_dtoa_r+0x32>
 800ca0e:	693a      	ldr	r2, [r7, #16]
 800ca10:	3202      	adds	r2, #2
 800ca12:	0092      	lsls	r2, r2, #2
 800ca14:	f107 010c 	add.w	r1, r7, #12
 800ca18:	300c      	adds	r0, #12
 800ca1a:	f7ff fa77 	bl	800bf0c <memcpy>
 800ca1e:	2201      	movs	r2, #1
 800ca20:	4629      	mov	r1, r5
 800ca22:	4620      	mov	r0, r4
 800ca24:	f000 fc0a 	bl	800d23c <__lshift>
 800ca28:	9b00      	ldr	r3, [sp, #0]
 800ca2a:	3301      	adds	r3, #1
 800ca2c:	9304      	str	r3, [sp, #16]
 800ca2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ca32:	4413      	add	r3, r2
 800ca34:	9308      	str	r3, [sp, #32]
 800ca36:	9b02      	ldr	r3, [sp, #8]
 800ca38:	f003 0301 	and.w	r3, r3, #1
 800ca3c:	46b8      	mov	r8, r7
 800ca3e:	9306      	str	r3, [sp, #24]
 800ca40:	4607      	mov	r7, r0
 800ca42:	9b04      	ldr	r3, [sp, #16]
 800ca44:	4631      	mov	r1, r6
 800ca46:	3b01      	subs	r3, #1
 800ca48:	4650      	mov	r0, sl
 800ca4a:	9301      	str	r3, [sp, #4]
 800ca4c:	f7ff fa6c 	bl	800bf28 <quorem>
 800ca50:	4641      	mov	r1, r8
 800ca52:	9002      	str	r0, [sp, #8]
 800ca54:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ca58:	4650      	mov	r0, sl
 800ca5a:	f000 fc5b 	bl	800d314 <__mcmp>
 800ca5e:	463a      	mov	r2, r7
 800ca60:	9005      	str	r0, [sp, #20]
 800ca62:	4631      	mov	r1, r6
 800ca64:	4620      	mov	r0, r4
 800ca66:	f000 fc71 	bl	800d34c <__mdiff>
 800ca6a:	68c2      	ldr	r2, [r0, #12]
 800ca6c:	4605      	mov	r5, r0
 800ca6e:	bb02      	cbnz	r2, 800cab2 <_dtoa_r+0xa7a>
 800ca70:	4601      	mov	r1, r0
 800ca72:	4650      	mov	r0, sl
 800ca74:	f000 fc4e 	bl	800d314 <__mcmp>
 800ca78:	4602      	mov	r2, r0
 800ca7a:	4629      	mov	r1, r5
 800ca7c:	4620      	mov	r0, r4
 800ca7e:	9209      	str	r2, [sp, #36]	; 0x24
 800ca80:	f000 fa0c 	bl	800ce9c <_Bfree>
 800ca84:	9b07      	ldr	r3, [sp, #28]
 800ca86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca88:	9d04      	ldr	r5, [sp, #16]
 800ca8a:	ea43 0102 	orr.w	r1, r3, r2
 800ca8e:	9b06      	ldr	r3, [sp, #24]
 800ca90:	4319      	orrs	r1, r3
 800ca92:	d110      	bne.n	800cab6 <_dtoa_r+0xa7e>
 800ca94:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ca98:	d029      	beq.n	800caee <_dtoa_r+0xab6>
 800ca9a:	9b05      	ldr	r3, [sp, #20]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	dd02      	ble.n	800caa6 <_dtoa_r+0xa6e>
 800caa0:	9b02      	ldr	r3, [sp, #8]
 800caa2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800caa6:	9b01      	ldr	r3, [sp, #4]
 800caa8:	f883 9000 	strb.w	r9, [r3]
 800caac:	e774      	b.n	800c998 <_dtoa_r+0x960>
 800caae:	4638      	mov	r0, r7
 800cab0:	e7ba      	b.n	800ca28 <_dtoa_r+0x9f0>
 800cab2:	2201      	movs	r2, #1
 800cab4:	e7e1      	b.n	800ca7a <_dtoa_r+0xa42>
 800cab6:	9b05      	ldr	r3, [sp, #20]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	db04      	blt.n	800cac6 <_dtoa_r+0xa8e>
 800cabc:	9907      	ldr	r1, [sp, #28]
 800cabe:	430b      	orrs	r3, r1
 800cac0:	9906      	ldr	r1, [sp, #24]
 800cac2:	430b      	orrs	r3, r1
 800cac4:	d120      	bne.n	800cb08 <_dtoa_r+0xad0>
 800cac6:	2a00      	cmp	r2, #0
 800cac8:	dded      	ble.n	800caa6 <_dtoa_r+0xa6e>
 800caca:	4651      	mov	r1, sl
 800cacc:	2201      	movs	r2, #1
 800cace:	4620      	mov	r0, r4
 800cad0:	f000 fbb4 	bl	800d23c <__lshift>
 800cad4:	4631      	mov	r1, r6
 800cad6:	4682      	mov	sl, r0
 800cad8:	f000 fc1c 	bl	800d314 <__mcmp>
 800cadc:	2800      	cmp	r0, #0
 800cade:	dc03      	bgt.n	800cae8 <_dtoa_r+0xab0>
 800cae0:	d1e1      	bne.n	800caa6 <_dtoa_r+0xa6e>
 800cae2:	f019 0f01 	tst.w	r9, #1
 800cae6:	d0de      	beq.n	800caa6 <_dtoa_r+0xa6e>
 800cae8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800caec:	d1d8      	bne.n	800caa0 <_dtoa_r+0xa68>
 800caee:	9a01      	ldr	r2, [sp, #4]
 800caf0:	2339      	movs	r3, #57	; 0x39
 800caf2:	7013      	strb	r3, [r2, #0]
 800caf4:	462b      	mov	r3, r5
 800caf6:	461d      	mov	r5, r3
 800caf8:	3b01      	subs	r3, #1
 800cafa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cafe:	2a39      	cmp	r2, #57	; 0x39
 800cb00:	d06c      	beq.n	800cbdc <_dtoa_r+0xba4>
 800cb02:	3201      	adds	r2, #1
 800cb04:	701a      	strb	r2, [r3, #0]
 800cb06:	e747      	b.n	800c998 <_dtoa_r+0x960>
 800cb08:	2a00      	cmp	r2, #0
 800cb0a:	dd07      	ble.n	800cb1c <_dtoa_r+0xae4>
 800cb0c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cb10:	d0ed      	beq.n	800caee <_dtoa_r+0xab6>
 800cb12:	9a01      	ldr	r2, [sp, #4]
 800cb14:	f109 0301 	add.w	r3, r9, #1
 800cb18:	7013      	strb	r3, [r2, #0]
 800cb1a:	e73d      	b.n	800c998 <_dtoa_r+0x960>
 800cb1c:	9b04      	ldr	r3, [sp, #16]
 800cb1e:	9a08      	ldr	r2, [sp, #32]
 800cb20:	f803 9c01 	strb.w	r9, [r3, #-1]
 800cb24:	4293      	cmp	r3, r2
 800cb26:	d043      	beq.n	800cbb0 <_dtoa_r+0xb78>
 800cb28:	4651      	mov	r1, sl
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	220a      	movs	r2, #10
 800cb2e:	4620      	mov	r0, r4
 800cb30:	f000 f9d6 	bl	800cee0 <__multadd>
 800cb34:	45b8      	cmp	r8, r7
 800cb36:	4682      	mov	sl, r0
 800cb38:	f04f 0300 	mov.w	r3, #0
 800cb3c:	f04f 020a 	mov.w	r2, #10
 800cb40:	4641      	mov	r1, r8
 800cb42:	4620      	mov	r0, r4
 800cb44:	d107      	bne.n	800cb56 <_dtoa_r+0xb1e>
 800cb46:	f000 f9cb 	bl	800cee0 <__multadd>
 800cb4a:	4680      	mov	r8, r0
 800cb4c:	4607      	mov	r7, r0
 800cb4e:	9b04      	ldr	r3, [sp, #16]
 800cb50:	3301      	adds	r3, #1
 800cb52:	9304      	str	r3, [sp, #16]
 800cb54:	e775      	b.n	800ca42 <_dtoa_r+0xa0a>
 800cb56:	f000 f9c3 	bl	800cee0 <__multadd>
 800cb5a:	4639      	mov	r1, r7
 800cb5c:	4680      	mov	r8, r0
 800cb5e:	2300      	movs	r3, #0
 800cb60:	220a      	movs	r2, #10
 800cb62:	4620      	mov	r0, r4
 800cb64:	f000 f9bc 	bl	800cee0 <__multadd>
 800cb68:	4607      	mov	r7, r0
 800cb6a:	e7f0      	b.n	800cb4e <_dtoa_r+0xb16>
 800cb6c:	9b04      	ldr	r3, [sp, #16]
 800cb6e:	9301      	str	r3, [sp, #4]
 800cb70:	9d00      	ldr	r5, [sp, #0]
 800cb72:	4631      	mov	r1, r6
 800cb74:	4650      	mov	r0, sl
 800cb76:	f7ff f9d7 	bl	800bf28 <quorem>
 800cb7a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800cb7e:	9b00      	ldr	r3, [sp, #0]
 800cb80:	f805 9b01 	strb.w	r9, [r5], #1
 800cb84:	1aea      	subs	r2, r5, r3
 800cb86:	9b01      	ldr	r3, [sp, #4]
 800cb88:	4293      	cmp	r3, r2
 800cb8a:	dd07      	ble.n	800cb9c <_dtoa_r+0xb64>
 800cb8c:	4651      	mov	r1, sl
 800cb8e:	2300      	movs	r3, #0
 800cb90:	220a      	movs	r2, #10
 800cb92:	4620      	mov	r0, r4
 800cb94:	f000 f9a4 	bl	800cee0 <__multadd>
 800cb98:	4682      	mov	sl, r0
 800cb9a:	e7ea      	b.n	800cb72 <_dtoa_r+0xb3a>
 800cb9c:	9b01      	ldr	r3, [sp, #4]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	bfc8      	it	gt
 800cba2:	461d      	movgt	r5, r3
 800cba4:	9b00      	ldr	r3, [sp, #0]
 800cba6:	bfd8      	it	le
 800cba8:	2501      	movle	r5, #1
 800cbaa:	441d      	add	r5, r3
 800cbac:	f04f 0800 	mov.w	r8, #0
 800cbb0:	4651      	mov	r1, sl
 800cbb2:	2201      	movs	r2, #1
 800cbb4:	4620      	mov	r0, r4
 800cbb6:	f000 fb41 	bl	800d23c <__lshift>
 800cbba:	4631      	mov	r1, r6
 800cbbc:	4682      	mov	sl, r0
 800cbbe:	f000 fba9 	bl	800d314 <__mcmp>
 800cbc2:	2800      	cmp	r0, #0
 800cbc4:	dc96      	bgt.n	800caf4 <_dtoa_r+0xabc>
 800cbc6:	d102      	bne.n	800cbce <_dtoa_r+0xb96>
 800cbc8:	f019 0f01 	tst.w	r9, #1
 800cbcc:	d192      	bne.n	800caf4 <_dtoa_r+0xabc>
 800cbce:	462b      	mov	r3, r5
 800cbd0:	461d      	mov	r5, r3
 800cbd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cbd6:	2a30      	cmp	r2, #48	; 0x30
 800cbd8:	d0fa      	beq.n	800cbd0 <_dtoa_r+0xb98>
 800cbda:	e6dd      	b.n	800c998 <_dtoa_r+0x960>
 800cbdc:	9a00      	ldr	r2, [sp, #0]
 800cbde:	429a      	cmp	r2, r3
 800cbe0:	d189      	bne.n	800caf6 <_dtoa_r+0xabe>
 800cbe2:	f10b 0b01 	add.w	fp, fp, #1
 800cbe6:	2331      	movs	r3, #49	; 0x31
 800cbe8:	e796      	b.n	800cb18 <_dtoa_r+0xae0>
 800cbea:	4b0a      	ldr	r3, [pc, #40]	; (800cc14 <_dtoa_r+0xbdc>)
 800cbec:	f7ff ba99 	b.w	800c122 <_dtoa_r+0xea>
 800cbf0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	f47f aa6d 	bne.w	800c0d2 <_dtoa_r+0x9a>
 800cbf8:	4b07      	ldr	r3, [pc, #28]	; (800cc18 <_dtoa_r+0xbe0>)
 800cbfa:	f7ff ba92 	b.w	800c122 <_dtoa_r+0xea>
 800cbfe:	9b01      	ldr	r3, [sp, #4]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	dcb5      	bgt.n	800cb70 <_dtoa_r+0xb38>
 800cc04:	9b07      	ldr	r3, [sp, #28]
 800cc06:	2b02      	cmp	r3, #2
 800cc08:	f73f aeb1 	bgt.w	800c96e <_dtoa_r+0x936>
 800cc0c:	e7b0      	b.n	800cb70 <_dtoa_r+0xb38>
 800cc0e:	bf00      	nop
 800cc10:	0800f34c 	.word	0x0800f34c
 800cc14:	0800f2ac 	.word	0x0800f2ac
 800cc18:	0800f2d0 	.word	0x0800f2d0

0800cc1c <_free_r>:
 800cc1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cc1e:	2900      	cmp	r1, #0
 800cc20:	d044      	beq.n	800ccac <_free_r+0x90>
 800cc22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc26:	9001      	str	r0, [sp, #4]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	f1a1 0404 	sub.w	r4, r1, #4
 800cc2e:	bfb8      	it	lt
 800cc30:	18e4      	addlt	r4, r4, r3
 800cc32:	f000 f8e7 	bl	800ce04 <__malloc_lock>
 800cc36:	4a1e      	ldr	r2, [pc, #120]	; (800ccb0 <_free_r+0x94>)
 800cc38:	9801      	ldr	r0, [sp, #4]
 800cc3a:	6813      	ldr	r3, [r2, #0]
 800cc3c:	b933      	cbnz	r3, 800cc4c <_free_r+0x30>
 800cc3e:	6063      	str	r3, [r4, #4]
 800cc40:	6014      	str	r4, [r2, #0]
 800cc42:	b003      	add	sp, #12
 800cc44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cc48:	f000 b8e2 	b.w	800ce10 <__malloc_unlock>
 800cc4c:	42a3      	cmp	r3, r4
 800cc4e:	d908      	bls.n	800cc62 <_free_r+0x46>
 800cc50:	6825      	ldr	r5, [r4, #0]
 800cc52:	1961      	adds	r1, r4, r5
 800cc54:	428b      	cmp	r3, r1
 800cc56:	bf01      	itttt	eq
 800cc58:	6819      	ldreq	r1, [r3, #0]
 800cc5a:	685b      	ldreq	r3, [r3, #4]
 800cc5c:	1949      	addeq	r1, r1, r5
 800cc5e:	6021      	streq	r1, [r4, #0]
 800cc60:	e7ed      	b.n	800cc3e <_free_r+0x22>
 800cc62:	461a      	mov	r2, r3
 800cc64:	685b      	ldr	r3, [r3, #4]
 800cc66:	b10b      	cbz	r3, 800cc6c <_free_r+0x50>
 800cc68:	42a3      	cmp	r3, r4
 800cc6a:	d9fa      	bls.n	800cc62 <_free_r+0x46>
 800cc6c:	6811      	ldr	r1, [r2, #0]
 800cc6e:	1855      	adds	r5, r2, r1
 800cc70:	42a5      	cmp	r5, r4
 800cc72:	d10b      	bne.n	800cc8c <_free_r+0x70>
 800cc74:	6824      	ldr	r4, [r4, #0]
 800cc76:	4421      	add	r1, r4
 800cc78:	1854      	adds	r4, r2, r1
 800cc7a:	42a3      	cmp	r3, r4
 800cc7c:	6011      	str	r1, [r2, #0]
 800cc7e:	d1e0      	bne.n	800cc42 <_free_r+0x26>
 800cc80:	681c      	ldr	r4, [r3, #0]
 800cc82:	685b      	ldr	r3, [r3, #4]
 800cc84:	6053      	str	r3, [r2, #4]
 800cc86:	440c      	add	r4, r1
 800cc88:	6014      	str	r4, [r2, #0]
 800cc8a:	e7da      	b.n	800cc42 <_free_r+0x26>
 800cc8c:	d902      	bls.n	800cc94 <_free_r+0x78>
 800cc8e:	230c      	movs	r3, #12
 800cc90:	6003      	str	r3, [r0, #0]
 800cc92:	e7d6      	b.n	800cc42 <_free_r+0x26>
 800cc94:	6825      	ldr	r5, [r4, #0]
 800cc96:	1961      	adds	r1, r4, r5
 800cc98:	428b      	cmp	r3, r1
 800cc9a:	bf04      	itt	eq
 800cc9c:	6819      	ldreq	r1, [r3, #0]
 800cc9e:	685b      	ldreq	r3, [r3, #4]
 800cca0:	6063      	str	r3, [r4, #4]
 800cca2:	bf04      	itt	eq
 800cca4:	1949      	addeq	r1, r1, r5
 800cca6:	6021      	streq	r1, [r4, #0]
 800cca8:	6054      	str	r4, [r2, #4]
 800ccaa:	e7ca      	b.n	800cc42 <_free_r+0x26>
 800ccac:	b003      	add	sp, #12
 800ccae:	bd30      	pop	{r4, r5, pc}
 800ccb0:	200022e8 	.word	0x200022e8

0800ccb4 <malloc>:
 800ccb4:	4b02      	ldr	r3, [pc, #8]	; (800ccc0 <malloc+0xc>)
 800ccb6:	4601      	mov	r1, r0
 800ccb8:	6818      	ldr	r0, [r3, #0]
 800ccba:	f000 b823 	b.w	800cd04 <_malloc_r>
 800ccbe:	bf00      	nop
 800ccc0:	20000068 	.word	0x20000068

0800ccc4 <sbrk_aligned>:
 800ccc4:	b570      	push	{r4, r5, r6, lr}
 800ccc6:	4e0e      	ldr	r6, [pc, #56]	; (800cd00 <sbrk_aligned+0x3c>)
 800ccc8:	460c      	mov	r4, r1
 800ccca:	6831      	ldr	r1, [r6, #0]
 800cccc:	4605      	mov	r5, r0
 800ccce:	b911      	cbnz	r1, 800ccd6 <sbrk_aligned+0x12>
 800ccd0:	f000 fe40 	bl	800d954 <_sbrk_r>
 800ccd4:	6030      	str	r0, [r6, #0]
 800ccd6:	4621      	mov	r1, r4
 800ccd8:	4628      	mov	r0, r5
 800ccda:	f000 fe3b 	bl	800d954 <_sbrk_r>
 800ccde:	1c43      	adds	r3, r0, #1
 800cce0:	d00a      	beq.n	800ccf8 <sbrk_aligned+0x34>
 800cce2:	1cc4      	adds	r4, r0, #3
 800cce4:	f024 0403 	bic.w	r4, r4, #3
 800cce8:	42a0      	cmp	r0, r4
 800ccea:	d007      	beq.n	800ccfc <sbrk_aligned+0x38>
 800ccec:	1a21      	subs	r1, r4, r0
 800ccee:	4628      	mov	r0, r5
 800ccf0:	f000 fe30 	bl	800d954 <_sbrk_r>
 800ccf4:	3001      	adds	r0, #1
 800ccf6:	d101      	bne.n	800ccfc <sbrk_aligned+0x38>
 800ccf8:	f04f 34ff 	mov.w	r4, #4294967295
 800ccfc:	4620      	mov	r0, r4
 800ccfe:	bd70      	pop	{r4, r5, r6, pc}
 800cd00:	200022ec 	.word	0x200022ec

0800cd04 <_malloc_r>:
 800cd04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd08:	1ccd      	adds	r5, r1, #3
 800cd0a:	f025 0503 	bic.w	r5, r5, #3
 800cd0e:	3508      	adds	r5, #8
 800cd10:	2d0c      	cmp	r5, #12
 800cd12:	bf38      	it	cc
 800cd14:	250c      	movcc	r5, #12
 800cd16:	2d00      	cmp	r5, #0
 800cd18:	4607      	mov	r7, r0
 800cd1a:	db01      	blt.n	800cd20 <_malloc_r+0x1c>
 800cd1c:	42a9      	cmp	r1, r5
 800cd1e:	d905      	bls.n	800cd2c <_malloc_r+0x28>
 800cd20:	230c      	movs	r3, #12
 800cd22:	603b      	str	r3, [r7, #0]
 800cd24:	2600      	movs	r6, #0
 800cd26:	4630      	mov	r0, r6
 800cd28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd2c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ce00 <_malloc_r+0xfc>
 800cd30:	f000 f868 	bl	800ce04 <__malloc_lock>
 800cd34:	f8d8 3000 	ldr.w	r3, [r8]
 800cd38:	461c      	mov	r4, r3
 800cd3a:	bb5c      	cbnz	r4, 800cd94 <_malloc_r+0x90>
 800cd3c:	4629      	mov	r1, r5
 800cd3e:	4638      	mov	r0, r7
 800cd40:	f7ff ffc0 	bl	800ccc4 <sbrk_aligned>
 800cd44:	1c43      	adds	r3, r0, #1
 800cd46:	4604      	mov	r4, r0
 800cd48:	d155      	bne.n	800cdf6 <_malloc_r+0xf2>
 800cd4a:	f8d8 4000 	ldr.w	r4, [r8]
 800cd4e:	4626      	mov	r6, r4
 800cd50:	2e00      	cmp	r6, #0
 800cd52:	d145      	bne.n	800cde0 <_malloc_r+0xdc>
 800cd54:	2c00      	cmp	r4, #0
 800cd56:	d048      	beq.n	800cdea <_malloc_r+0xe6>
 800cd58:	6823      	ldr	r3, [r4, #0]
 800cd5a:	4631      	mov	r1, r6
 800cd5c:	4638      	mov	r0, r7
 800cd5e:	eb04 0903 	add.w	r9, r4, r3
 800cd62:	f000 fdf7 	bl	800d954 <_sbrk_r>
 800cd66:	4581      	cmp	r9, r0
 800cd68:	d13f      	bne.n	800cdea <_malloc_r+0xe6>
 800cd6a:	6821      	ldr	r1, [r4, #0]
 800cd6c:	1a6d      	subs	r5, r5, r1
 800cd6e:	4629      	mov	r1, r5
 800cd70:	4638      	mov	r0, r7
 800cd72:	f7ff ffa7 	bl	800ccc4 <sbrk_aligned>
 800cd76:	3001      	adds	r0, #1
 800cd78:	d037      	beq.n	800cdea <_malloc_r+0xe6>
 800cd7a:	6823      	ldr	r3, [r4, #0]
 800cd7c:	442b      	add	r3, r5
 800cd7e:	6023      	str	r3, [r4, #0]
 800cd80:	f8d8 3000 	ldr.w	r3, [r8]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d038      	beq.n	800cdfa <_malloc_r+0xf6>
 800cd88:	685a      	ldr	r2, [r3, #4]
 800cd8a:	42a2      	cmp	r2, r4
 800cd8c:	d12b      	bne.n	800cde6 <_malloc_r+0xe2>
 800cd8e:	2200      	movs	r2, #0
 800cd90:	605a      	str	r2, [r3, #4]
 800cd92:	e00f      	b.n	800cdb4 <_malloc_r+0xb0>
 800cd94:	6822      	ldr	r2, [r4, #0]
 800cd96:	1b52      	subs	r2, r2, r5
 800cd98:	d41f      	bmi.n	800cdda <_malloc_r+0xd6>
 800cd9a:	2a0b      	cmp	r2, #11
 800cd9c:	d917      	bls.n	800cdce <_malloc_r+0xca>
 800cd9e:	1961      	adds	r1, r4, r5
 800cda0:	42a3      	cmp	r3, r4
 800cda2:	6025      	str	r5, [r4, #0]
 800cda4:	bf18      	it	ne
 800cda6:	6059      	strne	r1, [r3, #4]
 800cda8:	6863      	ldr	r3, [r4, #4]
 800cdaa:	bf08      	it	eq
 800cdac:	f8c8 1000 	streq.w	r1, [r8]
 800cdb0:	5162      	str	r2, [r4, r5]
 800cdb2:	604b      	str	r3, [r1, #4]
 800cdb4:	4638      	mov	r0, r7
 800cdb6:	f104 060b 	add.w	r6, r4, #11
 800cdba:	f000 f829 	bl	800ce10 <__malloc_unlock>
 800cdbe:	f026 0607 	bic.w	r6, r6, #7
 800cdc2:	1d23      	adds	r3, r4, #4
 800cdc4:	1af2      	subs	r2, r6, r3
 800cdc6:	d0ae      	beq.n	800cd26 <_malloc_r+0x22>
 800cdc8:	1b9b      	subs	r3, r3, r6
 800cdca:	50a3      	str	r3, [r4, r2]
 800cdcc:	e7ab      	b.n	800cd26 <_malloc_r+0x22>
 800cdce:	42a3      	cmp	r3, r4
 800cdd0:	6862      	ldr	r2, [r4, #4]
 800cdd2:	d1dd      	bne.n	800cd90 <_malloc_r+0x8c>
 800cdd4:	f8c8 2000 	str.w	r2, [r8]
 800cdd8:	e7ec      	b.n	800cdb4 <_malloc_r+0xb0>
 800cdda:	4623      	mov	r3, r4
 800cddc:	6864      	ldr	r4, [r4, #4]
 800cdde:	e7ac      	b.n	800cd3a <_malloc_r+0x36>
 800cde0:	4634      	mov	r4, r6
 800cde2:	6876      	ldr	r6, [r6, #4]
 800cde4:	e7b4      	b.n	800cd50 <_malloc_r+0x4c>
 800cde6:	4613      	mov	r3, r2
 800cde8:	e7cc      	b.n	800cd84 <_malloc_r+0x80>
 800cdea:	230c      	movs	r3, #12
 800cdec:	603b      	str	r3, [r7, #0]
 800cdee:	4638      	mov	r0, r7
 800cdf0:	f000 f80e 	bl	800ce10 <__malloc_unlock>
 800cdf4:	e797      	b.n	800cd26 <_malloc_r+0x22>
 800cdf6:	6025      	str	r5, [r4, #0]
 800cdf8:	e7dc      	b.n	800cdb4 <_malloc_r+0xb0>
 800cdfa:	605b      	str	r3, [r3, #4]
 800cdfc:	deff      	udf	#255	; 0xff
 800cdfe:	bf00      	nop
 800ce00:	200022e8 	.word	0x200022e8

0800ce04 <__malloc_lock>:
 800ce04:	4801      	ldr	r0, [pc, #4]	; (800ce0c <__malloc_lock+0x8>)
 800ce06:	f7ff b87f 	b.w	800bf08 <__retarget_lock_acquire_recursive>
 800ce0a:	bf00      	nop
 800ce0c:	200022e4 	.word	0x200022e4

0800ce10 <__malloc_unlock>:
 800ce10:	4801      	ldr	r0, [pc, #4]	; (800ce18 <__malloc_unlock+0x8>)
 800ce12:	f7ff b87a 	b.w	800bf0a <__retarget_lock_release_recursive>
 800ce16:	bf00      	nop
 800ce18:	200022e4 	.word	0x200022e4

0800ce1c <_Balloc>:
 800ce1c:	b570      	push	{r4, r5, r6, lr}
 800ce1e:	69c6      	ldr	r6, [r0, #28]
 800ce20:	4604      	mov	r4, r0
 800ce22:	460d      	mov	r5, r1
 800ce24:	b976      	cbnz	r6, 800ce44 <_Balloc+0x28>
 800ce26:	2010      	movs	r0, #16
 800ce28:	f7ff ff44 	bl	800ccb4 <malloc>
 800ce2c:	4602      	mov	r2, r0
 800ce2e:	61e0      	str	r0, [r4, #28]
 800ce30:	b920      	cbnz	r0, 800ce3c <_Balloc+0x20>
 800ce32:	4b18      	ldr	r3, [pc, #96]	; (800ce94 <_Balloc+0x78>)
 800ce34:	4818      	ldr	r0, [pc, #96]	; (800ce98 <_Balloc+0x7c>)
 800ce36:	216b      	movs	r1, #107	; 0x6b
 800ce38:	f000 fd9c 	bl	800d974 <__assert_func>
 800ce3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ce40:	6006      	str	r6, [r0, #0]
 800ce42:	60c6      	str	r6, [r0, #12]
 800ce44:	69e6      	ldr	r6, [r4, #28]
 800ce46:	68f3      	ldr	r3, [r6, #12]
 800ce48:	b183      	cbz	r3, 800ce6c <_Balloc+0x50>
 800ce4a:	69e3      	ldr	r3, [r4, #28]
 800ce4c:	68db      	ldr	r3, [r3, #12]
 800ce4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ce52:	b9b8      	cbnz	r0, 800ce84 <_Balloc+0x68>
 800ce54:	2101      	movs	r1, #1
 800ce56:	fa01 f605 	lsl.w	r6, r1, r5
 800ce5a:	1d72      	adds	r2, r6, #5
 800ce5c:	0092      	lsls	r2, r2, #2
 800ce5e:	4620      	mov	r0, r4
 800ce60:	f000 fda6 	bl	800d9b0 <_calloc_r>
 800ce64:	b160      	cbz	r0, 800ce80 <_Balloc+0x64>
 800ce66:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ce6a:	e00e      	b.n	800ce8a <_Balloc+0x6e>
 800ce6c:	2221      	movs	r2, #33	; 0x21
 800ce6e:	2104      	movs	r1, #4
 800ce70:	4620      	mov	r0, r4
 800ce72:	f000 fd9d 	bl	800d9b0 <_calloc_r>
 800ce76:	69e3      	ldr	r3, [r4, #28]
 800ce78:	60f0      	str	r0, [r6, #12]
 800ce7a:	68db      	ldr	r3, [r3, #12]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d1e4      	bne.n	800ce4a <_Balloc+0x2e>
 800ce80:	2000      	movs	r0, #0
 800ce82:	bd70      	pop	{r4, r5, r6, pc}
 800ce84:	6802      	ldr	r2, [r0, #0]
 800ce86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ce90:	e7f7      	b.n	800ce82 <_Balloc+0x66>
 800ce92:	bf00      	nop
 800ce94:	0800f2dd 	.word	0x0800f2dd
 800ce98:	0800f35d 	.word	0x0800f35d

0800ce9c <_Bfree>:
 800ce9c:	b570      	push	{r4, r5, r6, lr}
 800ce9e:	69c6      	ldr	r6, [r0, #28]
 800cea0:	4605      	mov	r5, r0
 800cea2:	460c      	mov	r4, r1
 800cea4:	b976      	cbnz	r6, 800cec4 <_Bfree+0x28>
 800cea6:	2010      	movs	r0, #16
 800cea8:	f7ff ff04 	bl	800ccb4 <malloc>
 800ceac:	4602      	mov	r2, r0
 800ceae:	61e8      	str	r0, [r5, #28]
 800ceb0:	b920      	cbnz	r0, 800cebc <_Bfree+0x20>
 800ceb2:	4b09      	ldr	r3, [pc, #36]	; (800ced8 <_Bfree+0x3c>)
 800ceb4:	4809      	ldr	r0, [pc, #36]	; (800cedc <_Bfree+0x40>)
 800ceb6:	218f      	movs	r1, #143	; 0x8f
 800ceb8:	f000 fd5c 	bl	800d974 <__assert_func>
 800cebc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cec0:	6006      	str	r6, [r0, #0]
 800cec2:	60c6      	str	r6, [r0, #12]
 800cec4:	b13c      	cbz	r4, 800ced6 <_Bfree+0x3a>
 800cec6:	69eb      	ldr	r3, [r5, #28]
 800cec8:	6862      	ldr	r2, [r4, #4]
 800ceca:	68db      	ldr	r3, [r3, #12]
 800cecc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ced0:	6021      	str	r1, [r4, #0]
 800ced2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ced6:	bd70      	pop	{r4, r5, r6, pc}
 800ced8:	0800f2dd 	.word	0x0800f2dd
 800cedc:	0800f35d 	.word	0x0800f35d

0800cee0 <__multadd>:
 800cee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cee4:	690d      	ldr	r5, [r1, #16]
 800cee6:	4607      	mov	r7, r0
 800cee8:	460c      	mov	r4, r1
 800ceea:	461e      	mov	r6, r3
 800ceec:	f101 0c14 	add.w	ip, r1, #20
 800cef0:	2000      	movs	r0, #0
 800cef2:	f8dc 3000 	ldr.w	r3, [ip]
 800cef6:	b299      	uxth	r1, r3
 800cef8:	fb02 6101 	mla	r1, r2, r1, r6
 800cefc:	0c1e      	lsrs	r6, r3, #16
 800cefe:	0c0b      	lsrs	r3, r1, #16
 800cf00:	fb02 3306 	mla	r3, r2, r6, r3
 800cf04:	b289      	uxth	r1, r1
 800cf06:	3001      	adds	r0, #1
 800cf08:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cf0c:	4285      	cmp	r5, r0
 800cf0e:	f84c 1b04 	str.w	r1, [ip], #4
 800cf12:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cf16:	dcec      	bgt.n	800cef2 <__multadd+0x12>
 800cf18:	b30e      	cbz	r6, 800cf5e <__multadd+0x7e>
 800cf1a:	68a3      	ldr	r3, [r4, #8]
 800cf1c:	42ab      	cmp	r3, r5
 800cf1e:	dc19      	bgt.n	800cf54 <__multadd+0x74>
 800cf20:	6861      	ldr	r1, [r4, #4]
 800cf22:	4638      	mov	r0, r7
 800cf24:	3101      	adds	r1, #1
 800cf26:	f7ff ff79 	bl	800ce1c <_Balloc>
 800cf2a:	4680      	mov	r8, r0
 800cf2c:	b928      	cbnz	r0, 800cf3a <__multadd+0x5a>
 800cf2e:	4602      	mov	r2, r0
 800cf30:	4b0c      	ldr	r3, [pc, #48]	; (800cf64 <__multadd+0x84>)
 800cf32:	480d      	ldr	r0, [pc, #52]	; (800cf68 <__multadd+0x88>)
 800cf34:	21ba      	movs	r1, #186	; 0xba
 800cf36:	f000 fd1d 	bl	800d974 <__assert_func>
 800cf3a:	6922      	ldr	r2, [r4, #16]
 800cf3c:	3202      	adds	r2, #2
 800cf3e:	f104 010c 	add.w	r1, r4, #12
 800cf42:	0092      	lsls	r2, r2, #2
 800cf44:	300c      	adds	r0, #12
 800cf46:	f7fe ffe1 	bl	800bf0c <memcpy>
 800cf4a:	4621      	mov	r1, r4
 800cf4c:	4638      	mov	r0, r7
 800cf4e:	f7ff ffa5 	bl	800ce9c <_Bfree>
 800cf52:	4644      	mov	r4, r8
 800cf54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cf58:	3501      	adds	r5, #1
 800cf5a:	615e      	str	r6, [r3, #20]
 800cf5c:	6125      	str	r5, [r4, #16]
 800cf5e:	4620      	mov	r0, r4
 800cf60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf64:	0800f34c 	.word	0x0800f34c
 800cf68:	0800f35d 	.word	0x0800f35d

0800cf6c <__hi0bits>:
 800cf6c:	0c03      	lsrs	r3, r0, #16
 800cf6e:	041b      	lsls	r3, r3, #16
 800cf70:	b9d3      	cbnz	r3, 800cfa8 <__hi0bits+0x3c>
 800cf72:	0400      	lsls	r0, r0, #16
 800cf74:	2310      	movs	r3, #16
 800cf76:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cf7a:	bf04      	itt	eq
 800cf7c:	0200      	lsleq	r0, r0, #8
 800cf7e:	3308      	addeq	r3, #8
 800cf80:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cf84:	bf04      	itt	eq
 800cf86:	0100      	lsleq	r0, r0, #4
 800cf88:	3304      	addeq	r3, #4
 800cf8a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cf8e:	bf04      	itt	eq
 800cf90:	0080      	lsleq	r0, r0, #2
 800cf92:	3302      	addeq	r3, #2
 800cf94:	2800      	cmp	r0, #0
 800cf96:	db05      	blt.n	800cfa4 <__hi0bits+0x38>
 800cf98:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cf9c:	f103 0301 	add.w	r3, r3, #1
 800cfa0:	bf08      	it	eq
 800cfa2:	2320      	moveq	r3, #32
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	4770      	bx	lr
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	e7e4      	b.n	800cf76 <__hi0bits+0xa>

0800cfac <__lo0bits>:
 800cfac:	6803      	ldr	r3, [r0, #0]
 800cfae:	f013 0207 	ands.w	r2, r3, #7
 800cfb2:	d00c      	beq.n	800cfce <__lo0bits+0x22>
 800cfb4:	07d9      	lsls	r1, r3, #31
 800cfb6:	d422      	bmi.n	800cffe <__lo0bits+0x52>
 800cfb8:	079a      	lsls	r2, r3, #30
 800cfba:	bf49      	itett	mi
 800cfbc:	085b      	lsrmi	r3, r3, #1
 800cfbe:	089b      	lsrpl	r3, r3, #2
 800cfc0:	6003      	strmi	r3, [r0, #0]
 800cfc2:	2201      	movmi	r2, #1
 800cfc4:	bf5c      	itt	pl
 800cfc6:	6003      	strpl	r3, [r0, #0]
 800cfc8:	2202      	movpl	r2, #2
 800cfca:	4610      	mov	r0, r2
 800cfcc:	4770      	bx	lr
 800cfce:	b299      	uxth	r1, r3
 800cfd0:	b909      	cbnz	r1, 800cfd6 <__lo0bits+0x2a>
 800cfd2:	0c1b      	lsrs	r3, r3, #16
 800cfd4:	2210      	movs	r2, #16
 800cfd6:	b2d9      	uxtb	r1, r3
 800cfd8:	b909      	cbnz	r1, 800cfde <__lo0bits+0x32>
 800cfda:	3208      	adds	r2, #8
 800cfdc:	0a1b      	lsrs	r3, r3, #8
 800cfde:	0719      	lsls	r1, r3, #28
 800cfe0:	bf04      	itt	eq
 800cfe2:	091b      	lsreq	r3, r3, #4
 800cfe4:	3204      	addeq	r2, #4
 800cfe6:	0799      	lsls	r1, r3, #30
 800cfe8:	bf04      	itt	eq
 800cfea:	089b      	lsreq	r3, r3, #2
 800cfec:	3202      	addeq	r2, #2
 800cfee:	07d9      	lsls	r1, r3, #31
 800cff0:	d403      	bmi.n	800cffa <__lo0bits+0x4e>
 800cff2:	085b      	lsrs	r3, r3, #1
 800cff4:	f102 0201 	add.w	r2, r2, #1
 800cff8:	d003      	beq.n	800d002 <__lo0bits+0x56>
 800cffa:	6003      	str	r3, [r0, #0]
 800cffc:	e7e5      	b.n	800cfca <__lo0bits+0x1e>
 800cffe:	2200      	movs	r2, #0
 800d000:	e7e3      	b.n	800cfca <__lo0bits+0x1e>
 800d002:	2220      	movs	r2, #32
 800d004:	e7e1      	b.n	800cfca <__lo0bits+0x1e>
	...

0800d008 <__i2b>:
 800d008:	b510      	push	{r4, lr}
 800d00a:	460c      	mov	r4, r1
 800d00c:	2101      	movs	r1, #1
 800d00e:	f7ff ff05 	bl	800ce1c <_Balloc>
 800d012:	4602      	mov	r2, r0
 800d014:	b928      	cbnz	r0, 800d022 <__i2b+0x1a>
 800d016:	4b05      	ldr	r3, [pc, #20]	; (800d02c <__i2b+0x24>)
 800d018:	4805      	ldr	r0, [pc, #20]	; (800d030 <__i2b+0x28>)
 800d01a:	f240 1145 	movw	r1, #325	; 0x145
 800d01e:	f000 fca9 	bl	800d974 <__assert_func>
 800d022:	2301      	movs	r3, #1
 800d024:	6144      	str	r4, [r0, #20]
 800d026:	6103      	str	r3, [r0, #16]
 800d028:	bd10      	pop	{r4, pc}
 800d02a:	bf00      	nop
 800d02c:	0800f34c 	.word	0x0800f34c
 800d030:	0800f35d 	.word	0x0800f35d

0800d034 <__multiply>:
 800d034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d038:	4691      	mov	r9, r2
 800d03a:	690a      	ldr	r2, [r1, #16]
 800d03c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d040:	429a      	cmp	r2, r3
 800d042:	bfb8      	it	lt
 800d044:	460b      	movlt	r3, r1
 800d046:	460c      	mov	r4, r1
 800d048:	bfbc      	itt	lt
 800d04a:	464c      	movlt	r4, r9
 800d04c:	4699      	movlt	r9, r3
 800d04e:	6927      	ldr	r7, [r4, #16]
 800d050:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d054:	68a3      	ldr	r3, [r4, #8]
 800d056:	6861      	ldr	r1, [r4, #4]
 800d058:	eb07 060a 	add.w	r6, r7, sl
 800d05c:	42b3      	cmp	r3, r6
 800d05e:	b085      	sub	sp, #20
 800d060:	bfb8      	it	lt
 800d062:	3101      	addlt	r1, #1
 800d064:	f7ff feda 	bl	800ce1c <_Balloc>
 800d068:	b930      	cbnz	r0, 800d078 <__multiply+0x44>
 800d06a:	4602      	mov	r2, r0
 800d06c:	4b44      	ldr	r3, [pc, #272]	; (800d180 <__multiply+0x14c>)
 800d06e:	4845      	ldr	r0, [pc, #276]	; (800d184 <__multiply+0x150>)
 800d070:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800d074:	f000 fc7e 	bl	800d974 <__assert_func>
 800d078:	f100 0514 	add.w	r5, r0, #20
 800d07c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d080:	462b      	mov	r3, r5
 800d082:	2200      	movs	r2, #0
 800d084:	4543      	cmp	r3, r8
 800d086:	d321      	bcc.n	800d0cc <__multiply+0x98>
 800d088:	f104 0314 	add.w	r3, r4, #20
 800d08c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d090:	f109 0314 	add.w	r3, r9, #20
 800d094:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d098:	9202      	str	r2, [sp, #8]
 800d09a:	1b3a      	subs	r2, r7, r4
 800d09c:	3a15      	subs	r2, #21
 800d09e:	f022 0203 	bic.w	r2, r2, #3
 800d0a2:	3204      	adds	r2, #4
 800d0a4:	f104 0115 	add.w	r1, r4, #21
 800d0a8:	428f      	cmp	r7, r1
 800d0aa:	bf38      	it	cc
 800d0ac:	2204      	movcc	r2, #4
 800d0ae:	9201      	str	r2, [sp, #4]
 800d0b0:	9a02      	ldr	r2, [sp, #8]
 800d0b2:	9303      	str	r3, [sp, #12]
 800d0b4:	429a      	cmp	r2, r3
 800d0b6:	d80c      	bhi.n	800d0d2 <__multiply+0x9e>
 800d0b8:	2e00      	cmp	r6, #0
 800d0ba:	dd03      	ble.n	800d0c4 <__multiply+0x90>
 800d0bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d05b      	beq.n	800d17c <__multiply+0x148>
 800d0c4:	6106      	str	r6, [r0, #16]
 800d0c6:	b005      	add	sp, #20
 800d0c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0cc:	f843 2b04 	str.w	r2, [r3], #4
 800d0d0:	e7d8      	b.n	800d084 <__multiply+0x50>
 800d0d2:	f8b3 a000 	ldrh.w	sl, [r3]
 800d0d6:	f1ba 0f00 	cmp.w	sl, #0
 800d0da:	d024      	beq.n	800d126 <__multiply+0xf2>
 800d0dc:	f104 0e14 	add.w	lr, r4, #20
 800d0e0:	46a9      	mov	r9, r5
 800d0e2:	f04f 0c00 	mov.w	ip, #0
 800d0e6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d0ea:	f8d9 1000 	ldr.w	r1, [r9]
 800d0ee:	fa1f fb82 	uxth.w	fp, r2
 800d0f2:	b289      	uxth	r1, r1
 800d0f4:	fb0a 110b 	mla	r1, sl, fp, r1
 800d0f8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d0fc:	f8d9 2000 	ldr.w	r2, [r9]
 800d100:	4461      	add	r1, ip
 800d102:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d106:	fb0a c20b 	mla	r2, sl, fp, ip
 800d10a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d10e:	b289      	uxth	r1, r1
 800d110:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d114:	4577      	cmp	r7, lr
 800d116:	f849 1b04 	str.w	r1, [r9], #4
 800d11a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d11e:	d8e2      	bhi.n	800d0e6 <__multiply+0xb2>
 800d120:	9a01      	ldr	r2, [sp, #4]
 800d122:	f845 c002 	str.w	ip, [r5, r2]
 800d126:	9a03      	ldr	r2, [sp, #12]
 800d128:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d12c:	3304      	adds	r3, #4
 800d12e:	f1b9 0f00 	cmp.w	r9, #0
 800d132:	d021      	beq.n	800d178 <__multiply+0x144>
 800d134:	6829      	ldr	r1, [r5, #0]
 800d136:	f104 0c14 	add.w	ip, r4, #20
 800d13a:	46ae      	mov	lr, r5
 800d13c:	f04f 0a00 	mov.w	sl, #0
 800d140:	f8bc b000 	ldrh.w	fp, [ip]
 800d144:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d148:	fb09 220b 	mla	r2, r9, fp, r2
 800d14c:	4452      	add	r2, sl
 800d14e:	b289      	uxth	r1, r1
 800d150:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d154:	f84e 1b04 	str.w	r1, [lr], #4
 800d158:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d15c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d160:	f8be 1000 	ldrh.w	r1, [lr]
 800d164:	fb09 110a 	mla	r1, r9, sl, r1
 800d168:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d16c:	4567      	cmp	r7, ip
 800d16e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d172:	d8e5      	bhi.n	800d140 <__multiply+0x10c>
 800d174:	9a01      	ldr	r2, [sp, #4]
 800d176:	50a9      	str	r1, [r5, r2]
 800d178:	3504      	adds	r5, #4
 800d17a:	e799      	b.n	800d0b0 <__multiply+0x7c>
 800d17c:	3e01      	subs	r6, #1
 800d17e:	e79b      	b.n	800d0b8 <__multiply+0x84>
 800d180:	0800f34c 	.word	0x0800f34c
 800d184:	0800f35d 	.word	0x0800f35d

0800d188 <__pow5mult>:
 800d188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d18c:	4615      	mov	r5, r2
 800d18e:	f012 0203 	ands.w	r2, r2, #3
 800d192:	4606      	mov	r6, r0
 800d194:	460f      	mov	r7, r1
 800d196:	d007      	beq.n	800d1a8 <__pow5mult+0x20>
 800d198:	4c25      	ldr	r4, [pc, #148]	; (800d230 <__pow5mult+0xa8>)
 800d19a:	3a01      	subs	r2, #1
 800d19c:	2300      	movs	r3, #0
 800d19e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d1a2:	f7ff fe9d 	bl	800cee0 <__multadd>
 800d1a6:	4607      	mov	r7, r0
 800d1a8:	10ad      	asrs	r5, r5, #2
 800d1aa:	d03d      	beq.n	800d228 <__pow5mult+0xa0>
 800d1ac:	69f4      	ldr	r4, [r6, #28]
 800d1ae:	b97c      	cbnz	r4, 800d1d0 <__pow5mult+0x48>
 800d1b0:	2010      	movs	r0, #16
 800d1b2:	f7ff fd7f 	bl	800ccb4 <malloc>
 800d1b6:	4602      	mov	r2, r0
 800d1b8:	61f0      	str	r0, [r6, #28]
 800d1ba:	b928      	cbnz	r0, 800d1c8 <__pow5mult+0x40>
 800d1bc:	4b1d      	ldr	r3, [pc, #116]	; (800d234 <__pow5mult+0xac>)
 800d1be:	481e      	ldr	r0, [pc, #120]	; (800d238 <__pow5mult+0xb0>)
 800d1c0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d1c4:	f000 fbd6 	bl	800d974 <__assert_func>
 800d1c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d1cc:	6004      	str	r4, [r0, #0]
 800d1ce:	60c4      	str	r4, [r0, #12]
 800d1d0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d1d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d1d8:	b94c      	cbnz	r4, 800d1ee <__pow5mult+0x66>
 800d1da:	f240 2171 	movw	r1, #625	; 0x271
 800d1de:	4630      	mov	r0, r6
 800d1e0:	f7ff ff12 	bl	800d008 <__i2b>
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	f8c8 0008 	str.w	r0, [r8, #8]
 800d1ea:	4604      	mov	r4, r0
 800d1ec:	6003      	str	r3, [r0, #0]
 800d1ee:	f04f 0900 	mov.w	r9, #0
 800d1f2:	07eb      	lsls	r3, r5, #31
 800d1f4:	d50a      	bpl.n	800d20c <__pow5mult+0x84>
 800d1f6:	4639      	mov	r1, r7
 800d1f8:	4622      	mov	r2, r4
 800d1fa:	4630      	mov	r0, r6
 800d1fc:	f7ff ff1a 	bl	800d034 <__multiply>
 800d200:	4639      	mov	r1, r7
 800d202:	4680      	mov	r8, r0
 800d204:	4630      	mov	r0, r6
 800d206:	f7ff fe49 	bl	800ce9c <_Bfree>
 800d20a:	4647      	mov	r7, r8
 800d20c:	106d      	asrs	r5, r5, #1
 800d20e:	d00b      	beq.n	800d228 <__pow5mult+0xa0>
 800d210:	6820      	ldr	r0, [r4, #0]
 800d212:	b938      	cbnz	r0, 800d224 <__pow5mult+0x9c>
 800d214:	4622      	mov	r2, r4
 800d216:	4621      	mov	r1, r4
 800d218:	4630      	mov	r0, r6
 800d21a:	f7ff ff0b 	bl	800d034 <__multiply>
 800d21e:	6020      	str	r0, [r4, #0]
 800d220:	f8c0 9000 	str.w	r9, [r0]
 800d224:	4604      	mov	r4, r0
 800d226:	e7e4      	b.n	800d1f2 <__pow5mult+0x6a>
 800d228:	4638      	mov	r0, r7
 800d22a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d22e:	bf00      	nop
 800d230:	0800f4a8 	.word	0x0800f4a8
 800d234:	0800f2dd 	.word	0x0800f2dd
 800d238:	0800f35d 	.word	0x0800f35d

0800d23c <__lshift>:
 800d23c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d240:	460c      	mov	r4, r1
 800d242:	6849      	ldr	r1, [r1, #4]
 800d244:	6923      	ldr	r3, [r4, #16]
 800d246:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d24a:	68a3      	ldr	r3, [r4, #8]
 800d24c:	4607      	mov	r7, r0
 800d24e:	4691      	mov	r9, r2
 800d250:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d254:	f108 0601 	add.w	r6, r8, #1
 800d258:	42b3      	cmp	r3, r6
 800d25a:	db0b      	blt.n	800d274 <__lshift+0x38>
 800d25c:	4638      	mov	r0, r7
 800d25e:	f7ff fddd 	bl	800ce1c <_Balloc>
 800d262:	4605      	mov	r5, r0
 800d264:	b948      	cbnz	r0, 800d27a <__lshift+0x3e>
 800d266:	4602      	mov	r2, r0
 800d268:	4b28      	ldr	r3, [pc, #160]	; (800d30c <__lshift+0xd0>)
 800d26a:	4829      	ldr	r0, [pc, #164]	; (800d310 <__lshift+0xd4>)
 800d26c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800d270:	f000 fb80 	bl	800d974 <__assert_func>
 800d274:	3101      	adds	r1, #1
 800d276:	005b      	lsls	r3, r3, #1
 800d278:	e7ee      	b.n	800d258 <__lshift+0x1c>
 800d27a:	2300      	movs	r3, #0
 800d27c:	f100 0114 	add.w	r1, r0, #20
 800d280:	f100 0210 	add.w	r2, r0, #16
 800d284:	4618      	mov	r0, r3
 800d286:	4553      	cmp	r3, sl
 800d288:	db33      	blt.n	800d2f2 <__lshift+0xb6>
 800d28a:	6920      	ldr	r0, [r4, #16]
 800d28c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d290:	f104 0314 	add.w	r3, r4, #20
 800d294:	f019 091f 	ands.w	r9, r9, #31
 800d298:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d29c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d2a0:	d02b      	beq.n	800d2fa <__lshift+0xbe>
 800d2a2:	f1c9 0e20 	rsb	lr, r9, #32
 800d2a6:	468a      	mov	sl, r1
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	6818      	ldr	r0, [r3, #0]
 800d2ac:	fa00 f009 	lsl.w	r0, r0, r9
 800d2b0:	4310      	orrs	r0, r2
 800d2b2:	f84a 0b04 	str.w	r0, [sl], #4
 800d2b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2ba:	459c      	cmp	ip, r3
 800d2bc:	fa22 f20e 	lsr.w	r2, r2, lr
 800d2c0:	d8f3      	bhi.n	800d2aa <__lshift+0x6e>
 800d2c2:	ebac 0304 	sub.w	r3, ip, r4
 800d2c6:	3b15      	subs	r3, #21
 800d2c8:	f023 0303 	bic.w	r3, r3, #3
 800d2cc:	3304      	adds	r3, #4
 800d2ce:	f104 0015 	add.w	r0, r4, #21
 800d2d2:	4584      	cmp	ip, r0
 800d2d4:	bf38      	it	cc
 800d2d6:	2304      	movcc	r3, #4
 800d2d8:	50ca      	str	r2, [r1, r3]
 800d2da:	b10a      	cbz	r2, 800d2e0 <__lshift+0xa4>
 800d2dc:	f108 0602 	add.w	r6, r8, #2
 800d2e0:	3e01      	subs	r6, #1
 800d2e2:	4638      	mov	r0, r7
 800d2e4:	612e      	str	r6, [r5, #16]
 800d2e6:	4621      	mov	r1, r4
 800d2e8:	f7ff fdd8 	bl	800ce9c <_Bfree>
 800d2ec:	4628      	mov	r0, r5
 800d2ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2f2:	f842 0f04 	str.w	r0, [r2, #4]!
 800d2f6:	3301      	adds	r3, #1
 800d2f8:	e7c5      	b.n	800d286 <__lshift+0x4a>
 800d2fa:	3904      	subs	r1, #4
 800d2fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800d300:	f841 2f04 	str.w	r2, [r1, #4]!
 800d304:	459c      	cmp	ip, r3
 800d306:	d8f9      	bhi.n	800d2fc <__lshift+0xc0>
 800d308:	e7ea      	b.n	800d2e0 <__lshift+0xa4>
 800d30a:	bf00      	nop
 800d30c:	0800f34c 	.word	0x0800f34c
 800d310:	0800f35d 	.word	0x0800f35d

0800d314 <__mcmp>:
 800d314:	b530      	push	{r4, r5, lr}
 800d316:	6902      	ldr	r2, [r0, #16]
 800d318:	690c      	ldr	r4, [r1, #16]
 800d31a:	1b12      	subs	r2, r2, r4
 800d31c:	d10e      	bne.n	800d33c <__mcmp+0x28>
 800d31e:	f100 0314 	add.w	r3, r0, #20
 800d322:	3114      	adds	r1, #20
 800d324:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d328:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d32c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d330:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d334:	42a5      	cmp	r5, r4
 800d336:	d003      	beq.n	800d340 <__mcmp+0x2c>
 800d338:	d305      	bcc.n	800d346 <__mcmp+0x32>
 800d33a:	2201      	movs	r2, #1
 800d33c:	4610      	mov	r0, r2
 800d33e:	bd30      	pop	{r4, r5, pc}
 800d340:	4283      	cmp	r3, r0
 800d342:	d3f3      	bcc.n	800d32c <__mcmp+0x18>
 800d344:	e7fa      	b.n	800d33c <__mcmp+0x28>
 800d346:	f04f 32ff 	mov.w	r2, #4294967295
 800d34a:	e7f7      	b.n	800d33c <__mcmp+0x28>

0800d34c <__mdiff>:
 800d34c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d350:	460c      	mov	r4, r1
 800d352:	4606      	mov	r6, r0
 800d354:	4611      	mov	r1, r2
 800d356:	4620      	mov	r0, r4
 800d358:	4690      	mov	r8, r2
 800d35a:	f7ff ffdb 	bl	800d314 <__mcmp>
 800d35e:	1e05      	subs	r5, r0, #0
 800d360:	d110      	bne.n	800d384 <__mdiff+0x38>
 800d362:	4629      	mov	r1, r5
 800d364:	4630      	mov	r0, r6
 800d366:	f7ff fd59 	bl	800ce1c <_Balloc>
 800d36a:	b930      	cbnz	r0, 800d37a <__mdiff+0x2e>
 800d36c:	4b3a      	ldr	r3, [pc, #232]	; (800d458 <__mdiff+0x10c>)
 800d36e:	4602      	mov	r2, r0
 800d370:	f240 2137 	movw	r1, #567	; 0x237
 800d374:	4839      	ldr	r0, [pc, #228]	; (800d45c <__mdiff+0x110>)
 800d376:	f000 fafd 	bl	800d974 <__assert_func>
 800d37a:	2301      	movs	r3, #1
 800d37c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d380:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d384:	bfa4      	itt	ge
 800d386:	4643      	movge	r3, r8
 800d388:	46a0      	movge	r8, r4
 800d38a:	4630      	mov	r0, r6
 800d38c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d390:	bfa6      	itte	ge
 800d392:	461c      	movge	r4, r3
 800d394:	2500      	movge	r5, #0
 800d396:	2501      	movlt	r5, #1
 800d398:	f7ff fd40 	bl	800ce1c <_Balloc>
 800d39c:	b920      	cbnz	r0, 800d3a8 <__mdiff+0x5c>
 800d39e:	4b2e      	ldr	r3, [pc, #184]	; (800d458 <__mdiff+0x10c>)
 800d3a0:	4602      	mov	r2, r0
 800d3a2:	f240 2145 	movw	r1, #581	; 0x245
 800d3a6:	e7e5      	b.n	800d374 <__mdiff+0x28>
 800d3a8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d3ac:	6926      	ldr	r6, [r4, #16]
 800d3ae:	60c5      	str	r5, [r0, #12]
 800d3b0:	f104 0914 	add.w	r9, r4, #20
 800d3b4:	f108 0514 	add.w	r5, r8, #20
 800d3b8:	f100 0e14 	add.w	lr, r0, #20
 800d3bc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d3c0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d3c4:	f108 0210 	add.w	r2, r8, #16
 800d3c8:	46f2      	mov	sl, lr
 800d3ca:	2100      	movs	r1, #0
 800d3cc:	f859 3b04 	ldr.w	r3, [r9], #4
 800d3d0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d3d4:	fa11 f88b 	uxtah	r8, r1, fp
 800d3d8:	b299      	uxth	r1, r3
 800d3da:	0c1b      	lsrs	r3, r3, #16
 800d3dc:	eba8 0801 	sub.w	r8, r8, r1
 800d3e0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d3e4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d3e8:	fa1f f888 	uxth.w	r8, r8
 800d3ec:	1419      	asrs	r1, r3, #16
 800d3ee:	454e      	cmp	r6, r9
 800d3f0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d3f4:	f84a 3b04 	str.w	r3, [sl], #4
 800d3f8:	d8e8      	bhi.n	800d3cc <__mdiff+0x80>
 800d3fa:	1b33      	subs	r3, r6, r4
 800d3fc:	3b15      	subs	r3, #21
 800d3fe:	f023 0303 	bic.w	r3, r3, #3
 800d402:	3304      	adds	r3, #4
 800d404:	3415      	adds	r4, #21
 800d406:	42a6      	cmp	r6, r4
 800d408:	bf38      	it	cc
 800d40a:	2304      	movcc	r3, #4
 800d40c:	441d      	add	r5, r3
 800d40e:	4473      	add	r3, lr
 800d410:	469e      	mov	lr, r3
 800d412:	462e      	mov	r6, r5
 800d414:	4566      	cmp	r6, ip
 800d416:	d30e      	bcc.n	800d436 <__mdiff+0xea>
 800d418:	f10c 0203 	add.w	r2, ip, #3
 800d41c:	1b52      	subs	r2, r2, r5
 800d41e:	f022 0203 	bic.w	r2, r2, #3
 800d422:	3d03      	subs	r5, #3
 800d424:	45ac      	cmp	ip, r5
 800d426:	bf38      	it	cc
 800d428:	2200      	movcc	r2, #0
 800d42a:	4413      	add	r3, r2
 800d42c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d430:	b17a      	cbz	r2, 800d452 <__mdiff+0x106>
 800d432:	6107      	str	r7, [r0, #16]
 800d434:	e7a4      	b.n	800d380 <__mdiff+0x34>
 800d436:	f856 8b04 	ldr.w	r8, [r6], #4
 800d43a:	fa11 f288 	uxtah	r2, r1, r8
 800d43e:	1414      	asrs	r4, r2, #16
 800d440:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d444:	b292      	uxth	r2, r2
 800d446:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d44a:	f84e 2b04 	str.w	r2, [lr], #4
 800d44e:	1421      	asrs	r1, r4, #16
 800d450:	e7e0      	b.n	800d414 <__mdiff+0xc8>
 800d452:	3f01      	subs	r7, #1
 800d454:	e7ea      	b.n	800d42c <__mdiff+0xe0>
 800d456:	bf00      	nop
 800d458:	0800f34c 	.word	0x0800f34c
 800d45c:	0800f35d 	.word	0x0800f35d

0800d460 <__d2b>:
 800d460:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d464:	460f      	mov	r7, r1
 800d466:	2101      	movs	r1, #1
 800d468:	ec59 8b10 	vmov	r8, r9, d0
 800d46c:	4616      	mov	r6, r2
 800d46e:	f7ff fcd5 	bl	800ce1c <_Balloc>
 800d472:	4604      	mov	r4, r0
 800d474:	b930      	cbnz	r0, 800d484 <__d2b+0x24>
 800d476:	4602      	mov	r2, r0
 800d478:	4b24      	ldr	r3, [pc, #144]	; (800d50c <__d2b+0xac>)
 800d47a:	4825      	ldr	r0, [pc, #148]	; (800d510 <__d2b+0xb0>)
 800d47c:	f240 310f 	movw	r1, #783	; 0x30f
 800d480:	f000 fa78 	bl	800d974 <__assert_func>
 800d484:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d488:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d48c:	bb2d      	cbnz	r5, 800d4da <__d2b+0x7a>
 800d48e:	9301      	str	r3, [sp, #4]
 800d490:	f1b8 0300 	subs.w	r3, r8, #0
 800d494:	d026      	beq.n	800d4e4 <__d2b+0x84>
 800d496:	4668      	mov	r0, sp
 800d498:	9300      	str	r3, [sp, #0]
 800d49a:	f7ff fd87 	bl	800cfac <__lo0bits>
 800d49e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d4a2:	b1e8      	cbz	r0, 800d4e0 <__d2b+0x80>
 800d4a4:	f1c0 0320 	rsb	r3, r0, #32
 800d4a8:	fa02 f303 	lsl.w	r3, r2, r3
 800d4ac:	430b      	orrs	r3, r1
 800d4ae:	40c2      	lsrs	r2, r0
 800d4b0:	6163      	str	r3, [r4, #20]
 800d4b2:	9201      	str	r2, [sp, #4]
 800d4b4:	9b01      	ldr	r3, [sp, #4]
 800d4b6:	61a3      	str	r3, [r4, #24]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	bf14      	ite	ne
 800d4bc:	2202      	movne	r2, #2
 800d4be:	2201      	moveq	r2, #1
 800d4c0:	6122      	str	r2, [r4, #16]
 800d4c2:	b1bd      	cbz	r5, 800d4f4 <__d2b+0x94>
 800d4c4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d4c8:	4405      	add	r5, r0
 800d4ca:	603d      	str	r5, [r7, #0]
 800d4cc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d4d0:	6030      	str	r0, [r6, #0]
 800d4d2:	4620      	mov	r0, r4
 800d4d4:	b003      	add	sp, #12
 800d4d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d4da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d4de:	e7d6      	b.n	800d48e <__d2b+0x2e>
 800d4e0:	6161      	str	r1, [r4, #20]
 800d4e2:	e7e7      	b.n	800d4b4 <__d2b+0x54>
 800d4e4:	a801      	add	r0, sp, #4
 800d4e6:	f7ff fd61 	bl	800cfac <__lo0bits>
 800d4ea:	9b01      	ldr	r3, [sp, #4]
 800d4ec:	6163      	str	r3, [r4, #20]
 800d4ee:	3020      	adds	r0, #32
 800d4f0:	2201      	movs	r2, #1
 800d4f2:	e7e5      	b.n	800d4c0 <__d2b+0x60>
 800d4f4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d4f8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d4fc:	6038      	str	r0, [r7, #0]
 800d4fe:	6918      	ldr	r0, [r3, #16]
 800d500:	f7ff fd34 	bl	800cf6c <__hi0bits>
 800d504:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d508:	e7e2      	b.n	800d4d0 <__d2b+0x70>
 800d50a:	bf00      	nop
 800d50c:	0800f34c 	.word	0x0800f34c
 800d510:	0800f35d 	.word	0x0800f35d

0800d514 <__ssputs_r>:
 800d514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d518:	688e      	ldr	r6, [r1, #8]
 800d51a:	461f      	mov	r7, r3
 800d51c:	42be      	cmp	r6, r7
 800d51e:	680b      	ldr	r3, [r1, #0]
 800d520:	4682      	mov	sl, r0
 800d522:	460c      	mov	r4, r1
 800d524:	4690      	mov	r8, r2
 800d526:	d82c      	bhi.n	800d582 <__ssputs_r+0x6e>
 800d528:	898a      	ldrh	r2, [r1, #12]
 800d52a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d52e:	d026      	beq.n	800d57e <__ssputs_r+0x6a>
 800d530:	6965      	ldr	r5, [r4, #20]
 800d532:	6909      	ldr	r1, [r1, #16]
 800d534:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d538:	eba3 0901 	sub.w	r9, r3, r1
 800d53c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d540:	1c7b      	adds	r3, r7, #1
 800d542:	444b      	add	r3, r9
 800d544:	106d      	asrs	r5, r5, #1
 800d546:	429d      	cmp	r5, r3
 800d548:	bf38      	it	cc
 800d54a:	461d      	movcc	r5, r3
 800d54c:	0553      	lsls	r3, r2, #21
 800d54e:	d527      	bpl.n	800d5a0 <__ssputs_r+0x8c>
 800d550:	4629      	mov	r1, r5
 800d552:	f7ff fbd7 	bl	800cd04 <_malloc_r>
 800d556:	4606      	mov	r6, r0
 800d558:	b360      	cbz	r0, 800d5b4 <__ssputs_r+0xa0>
 800d55a:	6921      	ldr	r1, [r4, #16]
 800d55c:	464a      	mov	r2, r9
 800d55e:	f7fe fcd5 	bl	800bf0c <memcpy>
 800d562:	89a3      	ldrh	r3, [r4, #12]
 800d564:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d56c:	81a3      	strh	r3, [r4, #12]
 800d56e:	6126      	str	r6, [r4, #16]
 800d570:	6165      	str	r5, [r4, #20]
 800d572:	444e      	add	r6, r9
 800d574:	eba5 0509 	sub.w	r5, r5, r9
 800d578:	6026      	str	r6, [r4, #0]
 800d57a:	60a5      	str	r5, [r4, #8]
 800d57c:	463e      	mov	r6, r7
 800d57e:	42be      	cmp	r6, r7
 800d580:	d900      	bls.n	800d584 <__ssputs_r+0x70>
 800d582:	463e      	mov	r6, r7
 800d584:	6820      	ldr	r0, [r4, #0]
 800d586:	4632      	mov	r2, r6
 800d588:	4641      	mov	r1, r8
 800d58a:	f000 f9c9 	bl	800d920 <memmove>
 800d58e:	68a3      	ldr	r3, [r4, #8]
 800d590:	1b9b      	subs	r3, r3, r6
 800d592:	60a3      	str	r3, [r4, #8]
 800d594:	6823      	ldr	r3, [r4, #0]
 800d596:	4433      	add	r3, r6
 800d598:	6023      	str	r3, [r4, #0]
 800d59a:	2000      	movs	r0, #0
 800d59c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5a0:	462a      	mov	r2, r5
 800d5a2:	f000 fa2d 	bl	800da00 <_realloc_r>
 800d5a6:	4606      	mov	r6, r0
 800d5a8:	2800      	cmp	r0, #0
 800d5aa:	d1e0      	bne.n	800d56e <__ssputs_r+0x5a>
 800d5ac:	6921      	ldr	r1, [r4, #16]
 800d5ae:	4650      	mov	r0, sl
 800d5b0:	f7ff fb34 	bl	800cc1c <_free_r>
 800d5b4:	230c      	movs	r3, #12
 800d5b6:	f8ca 3000 	str.w	r3, [sl]
 800d5ba:	89a3      	ldrh	r3, [r4, #12]
 800d5bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5c0:	81a3      	strh	r3, [r4, #12]
 800d5c2:	f04f 30ff 	mov.w	r0, #4294967295
 800d5c6:	e7e9      	b.n	800d59c <__ssputs_r+0x88>

0800d5c8 <_svfiprintf_r>:
 800d5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5cc:	4698      	mov	r8, r3
 800d5ce:	898b      	ldrh	r3, [r1, #12]
 800d5d0:	061b      	lsls	r3, r3, #24
 800d5d2:	b09d      	sub	sp, #116	; 0x74
 800d5d4:	4607      	mov	r7, r0
 800d5d6:	460d      	mov	r5, r1
 800d5d8:	4614      	mov	r4, r2
 800d5da:	d50e      	bpl.n	800d5fa <_svfiprintf_r+0x32>
 800d5dc:	690b      	ldr	r3, [r1, #16]
 800d5de:	b963      	cbnz	r3, 800d5fa <_svfiprintf_r+0x32>
 800d5e0:	2140      	movs	r1, #64	; 0x40
 800d5e2:	f7ff fb8f 	bl	800cd04 <_malloc_r>
 800d5e6:	6028      	str	r0, [r5, #0]
 800d5e8:	6128      	str	r0, [r5, #16]
 800d5ea:	b920      	cbnz	r0, 800d5f6 <_svfiprintf_r+0x2e>
 800d5ec:	230c      	movs	r3, #12
 800d5ee:	603b      	str	r3, [r7, #0]
 800d5f0:	f04f 30ff 	mov.w	r0, #4294967295
 800d5f4:	e0d0      	b.n	800d798 <_svfiprintf_r+0x1d0>
 800d5f6:	2340      	movs	r3, #64	; 0x40
 800d5f8:	616b      	str	r3, [r5, #20]
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	9309      	str	r3, [sp, #36]	; 0x24
 800d5fe:	2320      	movs	r3, #32
 800d600:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d604:	f8cd 800c 	str.w	r8, [sp, #12]
 800d608:	2330      	movs	r3, #48	; 0x30
 800d60a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d7b0 <_svfiprintf_r+0x1e8>
 800d60e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d612:	f04f 0901 	mov.w	r9, #1
 800d616:	4623      	mov	r3, r4
 800d618:	469a      	mov	sl, r3
 800d61a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d61e:	b10a      	cbz	r2, 800d624 <_svfiprintf_r+0x5c>
 800d620:	2a25      	cmp	r2, #37	; 0x25
 800d622:	d1f9      	bne.n	800d618 <_svfiprintf_r+0x50>
 800d624:	ebba 0b04 	subs.w	fp, sl, r4
 800d628:	d00b      	beq.n	800d642 <_svfiprintf_r+0x7a>
 800d62a:	465b      	mov	r3, fp
 800d62c:	4622      	mov	r2, r4
 800d62e:	4629      	mov	r1, r5
 800d630:	4638      	mov	r0, r7
 800d632:	f7ff ff6f 	bl	800d514 <__ssputs_r>
 800d636:	3001      	adds	r0, #1
 800d638:	f000 80a9 	beq.w	800d78e <_svfiprintf_r+0x1c6>
 800d63c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d63e:	445a      	add	r2, fp
 800d640:	9209      	str	r2, [sp, #36]	; 0x24
 800d642:	f89a 3000 	ldrb.w	r3, [sl]
 800d646:	2b00      	cmp	r3, #0
 800d648:	f000 80a1 	beq.w	800d78e <_svfiprintf_r+0x1c6>
 800d64c:	2300      	movs	r3, #0
 800d64e:	f04f 32ff 	mov.w	r2, #4294967295
 800d652:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d656:	f10a 0a01 	add.w	sl, sl, #1
 800d65a:	9304      	str	r3, [sp, #16]
 800d65c:	9307      	str	r3, [sp, #28]
 800d65e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d662:	931a      	str	r3, [sp, #104]	; 0x68
 800d664:	4654      	mov	r4, sl
 800d666:	2205      	movs	r2, #5
 800d668:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d66c:	4850      	ldr	r0, [pc, #320]	; (800d7b0 <_svfiprintf_r+0x1e8>)
 800d66e:	f7f2 fdbf 	bl	80001f0 <memchr>
 800d672:	9a04      	ldr	r2, [sp, #16]
 800d674:	b9d8      	cbnz	r0, 800d6ae <_svfiprintf_r+0xe6>
 800d676:	06d0      	lsls	r0, r2, #27
 800d678:	bf44      	itt	mi
 800d67a:	2320      	movmi	r3, #32
 800d67c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d680:	0711      	lsls	r1, r2, #28
 800d682:	bf44      	itt	mi
 800d684:	232b      	movmi	r3, #43	; 0x2b
 800d686:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d68a:	f89a 3000 	ldrb.w	r3, [sl]
 800d68e:	2b2a      	cmp	r3, #42	; 0x2a
 800d690:	d015      	beq.n	800d6be <_svfiprintf_r+0xf6>
 800d692:	9a07      	ldr	r2, [sp, #28]
 800d694:	4654      	mov	r4, sl
 800d696:	2000      	movs	r0, #0
 800d698:	f04f 0c0a 	mov.w	ip, #10
 800d69c:	4621      	mov	r1, r4
 800d69e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d6a2:	3b30      	subs	r3, #48	; 0x30
 800d6a4:	2b09      	cmp	r3, #9
 800d6a6:	d94d      	bls.n	800d744 <_svfiprintf_r+0x17c>
 800d6a8:	b1b0      	cbz	r0, 800d6d8 <_svfiprintf_r+0x110>
 800d6aa:	9207      	str	r2, [sp, #28]
 800d6ac:	e014      	b.n	800d6d8 <_svfiprintf_r+0x110>
 800d6ae:	eba0 0308 	sub.w	r3, r0, r8
 800d6b2:	fa09 f303 	lsl.w	r3, r9, r3
 800d6b6:	4313      	orrs	r3, r2
 800d6b8:	9304      	str	r3, [sp, #16]
 800d6ba:	46a2      	mov	sl, r4
 800d6bc:	e7d2      	b.n	800d664 <_svfiprintf_r+0x9c>
 800d6be:	9b03      	ldr	r3, [sp, #12]
 800d6c0:	1d19      	adds	r1, r3, #4
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	9103      	str	r1, [sp, #12]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	bfbb      	ittet	lt
 800d6ca:	425b      	neglt	r3, r3
 800d6cc:	f042 0202 	orrlt.w	r2, r2, #2
 800d6d0:	9307      	strge	r3, [sp, #28]
 800d6d2:	9307      	strlt	r3, [sp, #28]
 800d6d4:	bfb8      	it	lt
 800d6d6:	9204      	strlt	r2, [sp, #16]
 800d6d8:	7823      	ldrb	r3, [r4, #0]
 800d6da:	2b2e      	cmp	r3, #46	; 0x2e
 800d6dc:	d10c      	bne.n	800d6f8 <_svfiprintf_r+0x130>
 800d6de:	7863      	ldrb	r3, [r4, #1]
 800d6e0:	2b2a      	cmp	r3, #42	; 0x2a
 800d6e2:	d134      	bne.n	800d74e <_svfiprintf_r+0x186>
 800d6e4:	9b03      	ldr	r3, [sp, #12]
 800d6e6:	1d1a      	adds	r2, r3, #4
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	9203      	str	r2, [sp, #12]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	bfb8      	it	lt
 800d6f0:	f04f 33ff 	movlt.w	r3, #4294967295
 800d6f4:	3402      	adds	r4, #2
 800d6f6:	9305      	str	r3, [sp, #20]
 800d6f8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d7c0 <_svfiprintf_r+0x1f8>
 800d6fc:	7821      	ldrb	r1, [r4, #0]
 800d6fe:	2203      	movs	r2, #3
 800d700:	4650      	mov	r0, sl
 800d702:	f7f2 fd75 	bl	80001f0 <memchr>
 800d706:	b138      	cbz	r0, 800d718 <_svfiprintf_r+0x150>
 800d708:	9b04      	ldr	r3, [sp, #16]
 800d70a:	eba0 000a 	sub.w	r0, r0, sl
 800d70e:	2240      	movs	r2, #64	; 0x40
 800d710:	4082      	lsls	r2, r0
 800d712:	4313      	orrs	r3, r2
 800d714:	3401      	adds	r4, #1
 800d716:	9304      	str	r3, [sp, #16]
 800d718:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d71c:	4825      	ldr	r0, [pc, #148]	; (800d7b4 <_svfiprintf_r+0x1ec>)
 800d71e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d722:	2206      	movs	r2, #6
 800d724:	f7f2 fd64 	bl	80001f0 <memchr>
 800d728:	2800      	cmp	r0, #0
 800d72a:	d038      	beq.n	800d79e <_svfiprintf_r+0x1d6>
 800d72c:	4b22      	ldr	r3, [pc, #136]	; (800d7b8 <_svfiprintf_r+0x1f0>)
 800d72e:	bb1b      	cbnz	r3, 800d778 <_svfiprintf_r+0x1b0>
 800d730:	9b03      	ldr	r3, [sp, #12]
 800d732:	3307      	adds	r3, #7
 800d734:	f023 0307 	bic.w	r3, r3, #7
 800d738:	3308      	adds	r3, #8
 800d73a:	9303      	str	r3, [sp, #12]
 800d73c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d73e:	4433      	add	r3, r6
 800d740:	9309      	str	r3, [sp, #36]	; 0x24
 800d742:	e768      	b.n	800d616 <_svfiprintf_r+0x4e>
 800d744:	fb0c 3202 	mla	r2, ip, r2, r3
 800d748:	460c      	mov	r4, r1
 800d74a:	2001      	movs	r0, #1
 800d74c:	e7a6      	b.n	800d69c <_svfiprintf_r+0xd4>
 800d74e:	2300      	movs	r3, #0
 800d750:	3401      	adds	r4, #1
 800d752:	9305      	str	r3, [sp, #20]
 800d754:	4619      	mov	r1, r3
 800d756:	f04f 0c0a 	mov.w	ip, #10
 800d75a:	4620      	mov	r0, r4
 800d75c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d760:	3a30      	subs	r2, #48	; 0x30
 800d762:	2a09      	cmp	r2, #9
 800d764:	d903      	bls.n	800d76e <_svfiprintf_r+0x1a6>
 800d766:	2b00      	cmp	r3, #0
 800d768:	d0c6      	beq.n	800d6f8 <_svfiprintf_r+0x130>
 800d76a:	9105      	str	r1, [sp, #20]
 800d76c:	e7c4      	b.n	800d6f8 <_svfiprintf_r+0x130>
 800d76e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d772:	4604      	mov	r4, r0
 800d774:	2301      	movs	r3, #1
 800d776:	e7f0      	b.n	800d75a <_svfiprintf_r+0x192>
 800d778:	ab03      	add	r3, sp, #12
 800d77a:	9300      	str	r3, [sp, #0]
 800d77c:	462a      	mov	r2, r5
 800d77e:	4b0f      	ldr	r3, [pc, #60]	; (800d7bc <_svfiprintf_r+0x1f4>)
 800d780:	a904      	add	r1, sp, #16
 800d782:	4638      	mov	r0, r7
 800d784:	f7fd fe6a 	bl	800b45c <_printf_float>
 800d788:	1c42      	adds	r2, r0, #1
 800d78a:	4606      	mov	r6, r0
 800d78c:	d1d6      	bne.n	800d73c <_svfiprintf_r+0x174>
 800d78e:	89ab      	ldrh	r3, [r5, #12]
 800d790:	065b      	lsls	r3, r3, #25
 800d792:	f53f af2d 	bmi.w	800d5f0 <_svfiprintf_r+0x28>
 800d796:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d798:	b01d      	add	sp, #116	; 0x74
 800d79a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d79e:	ab03      	add	r3, sp, #12
 800d7a0:	9300      	str	r3, [sp, #0]
 800d7a2:	462a      	mov	r2, r5
 800d7a4:	4b05      	ldr	r3, [pc, #20]	; (800d7bc <_svfiprintf_r+0x1f4>)
 800d7a6:	a904      	add	r1, sp, #16
 800d7a8:	4638      	mov	r0, r7
 800d7aa:	f7fe f8fb 	bl	800b9a4 <_printf_i>
 800d7ae:	e7eb      	b.n	800d788 <_svfiprintf_r+0x1c0>
 800d7b0:	0800f4b4 	.word	0x0800f4b4
 800d7b4:	0800f4be 	.word	0x0800f4be
 800d7b8:	0800b45d 	.word	0x0800b45d
 800d7bc:	0800d515 	.word	0x0800d515
 800d7c0:	0800f4ba 	.word	0x0800f4ba

0800d7c4 <__sflush_r>:
 800d7c4:	898a      	ldrh	r2, [r1, #12]
 800d7c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7ca:	4605      	mov	r5, r0
 800d7cc:	0710      	lsls	r0, r2, #28
 800d7ce:	460c      	mov	r4, r1
 800d7d0:	d458      	bmi.n	800d884 <__sflush_r+0xc0>
 800d7d2:	684b      	ldr	r3, [r1, #4]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	dc05      	bgt.n	800d7e4 <__sflush_r+0x20>
 800d7d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	dc02      	bgt.n	800d7e4 <__sflush_r+0x20>
 800d7de:	2000      	movs	r0, #0
 800d7e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d7e6:	2e00      	cmp	r6, #0
 800d7e8:	d0f9      	beq.n	800d7de <__sflush_r+0x1a>
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d7f0:	682f      	ldr	r7, [r5, #0]
 800d7f2:	6a21      	ldr	r1, [r4, #32]
 800d7f4:	602b      	str	r3, [r5, #0]
 800d7f6:	d032      	beq.n	800d85e <__sflush_r+0x9a>
 800d7f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d7fa:	89a3      	ldrh	r3, [r4, #12]
 800d7fc:	075a      	lsls	r2, r3, #29
 800d7fe:	d505      	bpl.n	800d80c <__sflush_r+0x48>
 800d800:	6863      	ldr	r3, [r4, #4]
 800d802:	1ac0      	subs	r0, r0, r3
 800d804:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d806:	b10b      	cbz	r3, 800d80c <__sflush_r+0x48>
 800d808:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d80a:	1ac0      	subs	r0, r0, r3
 800d80c:	2300      	movs	r3, #0
 800d80e:	4602      	mov	r2, r0
 800d810:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d812:	6a21      	ldr	r1, [r4, #32]
 800d814:	4628      	mov	r0, r5
 800d816:	47b0      	blx	r6
 800d818:	1c43      	adds	r3, r0, #1
 800d81a:	89a3      	ldrh	r3, [r4, #12]
 800d81c:	d106      	bne.n	800d82c <__sflush_r+0x68>
 800d81e:	6829      	ldr	r1, [r5, #0]
 800d820:	291d      	cmp	r1, #29
 800d822:	d82b      	bhi.n	800d87c <__sflush_r+0xb8>
 800d824:	4a29      	ldr	r2, [pc, #164]	; (800d8cc <__sflush_r+0x108>)
 800d826:	410a      	asrs	r2, r1
 800d828:	07d6      	lsls	r6, r2, #31
 800d82a:	d427      	bmi.n	800d87c <__sflush_r+0xb8>
 800d82c:	2200      	movs	r2, #0
 800d82e:	6062      	str	r2, [r4, #4]
 800d830:	04d9      	lsls	r1, r3, #19
 800d832:	6922      	ldr	r2, [r4, #16]
 800d834:	6022      	str	r2, [r4, #0]
 800d836:	d504      	bpl.n	800d842 <__sflush_r+0x7e>
 800d838:	1c42      	adds	r2, r0, #1
 800d83a:	d101      	bne.n	800d840 <__sflush_r+0x7c>
 800d83c:	682b      	ldr	r3, [r5, #0]
 800d83e:	b903      	cbnz	r3, 800d842 <__sflush_r+0x7e>
 800d840:	6560      	str	r0, [r4, #84]	; 0x54
 800d842:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d844:	602f      	str	r7, [r5, #0]
 800d846:	2900      	cmp	r1, #0
 800d848:	d0c9      	beq.n	800d7de <__sflush_r+0x1a>
 800d84a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d84e:	4299      	cmp	r1, r3
 800d850:	d002      	beq.n	800d858 <__sflush_r+0x94>
 800d852:	4628      	mov	r0, r5
 800d854:	f7ff f9e2 	bl	800cc1c <_free_r>
 800d858:	2000      	movs	r0, #0
 800d85a:	6360      	str	r0, [r4, #52]	; 0x34
 800d85c:	e7c0      	b.n	800d7e0 <__sflush_r+0x1c>
 800d85e:	2301      	movs	r3, #1
 800d860:	4628      	mov	r0, r5
 800d862:	47b0      	blx	r6
 800d864:	1c41      	adds	r1, r0, #1
 800d866:	d1c8      	bne.n	800d7fa <__sflush_r+0x36>
 800d868:	682b      	ldr	r3, [r5, #0]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d0c5      	beq.n	800d7fa <__sflush_r+0x36>
 800d86e:	2b1d      	cmp	r3, #29
 800d870:	d001      	beq.n	800d876 <__sflush_r+0xb2>
 800d872:	2b16      	cmp	r3, #22
 800d874:	d101      	bne.n	800d87a <__sflush_r+0xb6>
 800d876:	602f      	str	r7, [r5, #0]
 800d878:	e7b1      	b.n	800d7de <__sflush_r+0x1a>
 800d87a:	89a3      	ldrh	r3, [r4, #12]
 800d87c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d880:	81a3      	strh	r3, [r4, #12]
 800d882:	e7ad      	b.n	800d7e0 <__sflush_r+0x1c>
 800d884:	690f      	ldr	r7, [r1, #16]
 800d886:	2f00      	cmp	r7, #0
 800d888:	d0a9      	beq.n	800d7de <__sflush_r+0x1a>
 800d88a:	0793      	lsls	r3, r2, #30
 800d88c:	680e      	ldr	r6, [r1, #0]
 800d88e:	bf08      	it	eq
 800d890:	694b      	ldreq	r3, [r1, #20]
 800d892:	600f      	str	r7, [r1, #0]
 800d894:	bf18      	it	ne
 800d896:	2300      	movne	r3, #0
 800d898:	eba6 0807 	sub.w	r8, r6, r7
 800d89c:	608b      	str	r3, [r1, #8]
 800d89e:	f1b8 0f00 	cmp.w	r8, #0
 800d8a2:	dd9c      	ble.n	800d7de <__sflush_r+0x1a>
 800d8a4:	6a21      	ldr	r1, [r4, #32]
 800d8a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d8a8:	4643      	mov	r3, r8
 800d8aa:	463a      	mov	r2, r7
 800d8ac:	4628      	mov	r0, r5
 800d8ae:	47b0      	blx	r6
 800d8b0:	2800      	cmp	r0, #0
 800d8b2:	dc06      	bgt.n	800d8c2 <__sflush_r+0xfe>
 800d8b4:	89a3      	ldrh	r3, [r4, #12]
 800d8b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8ba:	81a3      	strh	r3, [r4, #12]
 800d8bc:	f04f 30ff 	mov.w	r0, #4294967295
 800d8c0:	e78e      	b.n	800d7e0 <__sflush_r+0x1c>
 800d8c2:	4407      	add	r7, r0
 800d8c4:	eba8 0800 	sub.w	r8, r8, r0
 800d8c8:	e7e9      	b.n	800d89e <__sflush_r+0xda>
 800d8ca:	bf00      	nop
 800d8cc:	dfbffffe 	.word	0xdfbffffe

0800d8d0 <_fflush_r>:
 800d8d0:	b538      	push	{r3, r4, r5, lr}
 800d8d2:	690b      	ldr	r3, [r1, #16]
 800d8d4:	4605      	mov	r5, r0
 800d8d6:	460c      	mov	r4, r1
 800d8d8:	b913      	cbnz	r3, 800d8e0 <_fflush_r+0x10>
 800d8da:	2500      	movs	r5, #0
 800d8dc:	4628      	mov	r0, r5
 800d8de:	bd38      	pop	{r3, r4, r5, pc}
 800d8e0:	b118      	cbz	r0, 800d8ea <_fflush_r+0x1a>
 800d8e2:	6a03      	ldr	r3, [r0, #32]
 800d8e4:	b90b      	cbnz	r3, 800d8ea <_fflush_r+0x1a>
 800d8e6:	f7fe f9f9 	bl	800bcdc <__sinit>
 800d8ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d0f3      	beq.n	800d8da <_fflush_r+0xa>
 800d8f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d8f4:	07d0      	lsls	r0, r2, #31
 800d8f6:	d404      	bmi.n	800d902 <_fflush_r+0x32>
 800d8f8:	0599      	lsls	r1, r3, #22
 800d8fa:	d402      	bmi.n	800d902 <_fflush_r+0x32>
 800d8fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d8fe:	f7fe fb03 	bl	800bf08 <__retarget_lock_acquire_recursive>
 800d902:	4628      	mov	r0, r5
 800d904:	4621      	mov	r1, r4
 800d906:	f7ff ff5d 	bl	800d7c4 <__sflush_r>
 800d90a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d90c:	07da      	lsls	r2, r3, #31
 800d90e:	4605      	mov	r5, r0
 800d910:	d4e4      	bmi.n	800d8dc <_fflush_r+0xc>
 800d912:	89a3      	ldrh	r3, [r4, #12]
 800d914:	059b      	lsls	r3, r3, #22
 800d916:	d4e1      	bmi.n	800d8dc <_fflush_r+0xc>
 800d918:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d91a:	f7fe faf6 	bl	800bf0a <__retarget_lock_release_recursive>
 800d91e:	e7dd      	b.n	800d8dc <_fflush_r+0xc>

0800d920 <memmove>:
 800d920:	4288      	cmp	r0, r1
 800d922:	b510      	push	{r4, lr}
 800d924:	eb01 0402 	add.w	r4, r1, r2
 800d928:	d902      	bls.n	800d930 <memmove+0x10>
 800d92a:	4284      	cmp	r4, r0
 800d92c:	4623      	mov	r3, r4
 800d92e:	d807      	bhi.n	800d940 <memmove+0x20>
 800d930:	1e43      	subs	r3, r0, #1
 800d932:	42a1      	cmp	r1, r4
 800d934:	d008      	beq.n	800d948 <memmove+0x28>
 800d936:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d93a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d93e:	e7f8      	b.n	800d932 <memmove+0x12>
 800d940:	4402      	add	r2, r0
 800d942:	4601      	mov	r1, r0
 800d944:	428a      	cmp	r2, r1
 800d946:	d100      	bne.n	800d94a <memmove+0x2a>
 800d948:	bd10      	pop	{r4, pc}
 800d94a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d94e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d952:	e7f7      	b.n	800d944 <memmove+0x24>

0800d954 <_sbrk_r>:
 800d954:	b538      	push	{r3, r4, r5, lr}
 800d956:	4d06      	ldr	r5, [pc, #24]	; (800d970 <_sbrk_r+0x1c>)
 800d958:	2300      	movs	r3, #0
 800d95a:	4604      	mov	r4, r0
 800d95c:	4608      	mov	r0, r1
 800d95e:	602b      	str	r3, [r5, #0]
 800d960:	f7f6 f92a 	bl	8003bb8 <_sbrk>
 800d964:	1c43      	adds	r3, r0, #1
 800d966:	d102      	bne.n	800d96e <_sbrk_r+0x1a>
 800d968:	682b      	ldr	r3, [r5, #0]
 800d96a:	b103      	cbz	r3, 800d96e <_sbrk_r+0x1a>
 800d96c:	6023      	str	r3, [r4, #0]
 800d96e:	bd38      	pop	{r3, r4, r5, pc}
 800d970:	200022e0 	.word	0x200022e0

0800d974 <__assert_func>:
 800d974:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d976:	4614      	mov	r4, r2
 800d978:	461a      	mov	r2, r3
 800d97a:	4b09      	ldr	r3, [pc, #36]	; (800d9a0 <__assert_func+0x2c>)
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	4605      	mov	r5, r0
 800d980:	68d8      	ldr	r0, [r3, #12]
 800d982:	b14c      	cbz	r4, 800d998 <__assert_func+0x24>
 800d984:	4b07      	ldr	r3, [pc, #28]	; (800d9a4 <__assert_func+0x30>)
 800d986:	9100      	str	r1, [sp, #0]
 800d988:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d98c:	4906      	ldr	r1, [pc, #24]	; (800d9a8 <__assert_func+0x34>)
 800d98e:	462b      	mov	r3, r5
 800d990:	f000 f872 	bl	800da78 <fiprintf>
 800d994:	f000 f882 	bl	800da9c <abort>
 800d998:	4b04      	ldr	r3, [pc, #16]	; (800d9ac <__assert_func+0x38>)
 800d99a:	461c      	mov	r4, r3
 800d99c:	e7f3      	b.n	800d986 <__assert_func+0x12>
 800d99e:	bf00      	nop
 800d9a0:	20000068 	.word	0x20000068
 800d9a4:	0800f4cf 	.word	0x0800f4cf
 800d9a8:	0800f4dc 	.word	0x0800f4dc
 800d9ac:	0800f50a 	.word	0x0800f50a

0800d9b0 <_calloc_r>:
 800d9b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d9b2:	fba1 2402 	umull	r2, r4, r1, r2
 800d9b6:	b94c      	cbnz	r4, 800d9cc <_calloc_r+0x1c>
 800d9b8:	4611      	mov	r1, r2
 800d9ba:	9201      	str	r2, [sp, #4]
 800d9bc:	f7ff f9a2 	bl	800cd04 <_malloc_r>
 800d9c0:	9a01      	ldr	r2, [sp, #4]
 800d9c2:	4605      	mov	r5, r0
 800d9c4:	b930      	cbnz	r0, 800d9d4 <_calloc_r+0x24>
 800d9c6:	4628      	mov	r0, r5
 800d9c8:	b003      	add	sp, #12
 800d9ca:	bd30      	pop	{r4, r5, pc}
 800d9cc:	220c      	movs	r2, #12
 800d9ce:	6002      	str	r2, [r0, #0]
 800d9d0:	2500      	movs	r5, #0
 800d9d2:	e7f8      	b.n	800d9c6 <_calloc_r+0x16>
 800d9d4:	4621      	mov	r1, r4
 800d9d6:	f7fe fa1a 	bl	800be0e <memset>
 800d9da:	e7f4      	b.n	800d9c6 <_calloc_r+0x16>

0800d9dc <__ascii_mbtowc>:
 800d9dc:	b082      	sub	sp, #8
 800d9de:	b901      	cbnz	r1, 800d9e2 <__ascii_mbtowc+0x6>
 800d9e0:	a901      	add	r1, sp, #4
 800d9e2:	b142      	cbz	r2, 800d9f6 <__ascii_mbtowc+0x1a>
 800d9e4:	b14b      	cbz	r3, 800d9fa <__ascii_mbtowc+0x1e>
 800d9e6:	7813      	ldrb	r3, [r2, #0]
 800d9e8:	600b      	str	r3, [r1, #0]
 800d9ea:	7812      	ldrb	r2, [r2, #0]
 800d9ec:	1e10      	subs	r0, r2, #0
 800d9ee:	bf18      	it	ne
 800d9f0:	2001      	movne	r0, #1
 800d9f2:	b002      	add	sp, #8
 800d9f4:	4770      	bx	lr
 800d9f6:	4610      	mov	r0, r2
 800d9f8:	e7fb      	b.n	800d9f2 <__ascii_mbtowc+0x16>
 800d9fa:	f06f 0001 	mvn.w	r0, #1
 800d9fe:	e7f8      	b.n	800d9f2 <__ascii_mbtowc+0x16>

0800da00 <_realloc_r>:
 800da00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da04:	4680      	mov	r8, r0
 800da06:	4614      	mov	r4, r2
 800da08:	460e      	mov	r6, r1
 800da0a:	b921      	cbnz	r1, 800da16 <_realloc_r+0x16>
 800da0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da10:	4611      	mov	r1, r2
 800da12:	f7ff b977 	b.w	800cd04 <_malloc_r>
 800da16:	b92a      	cbnz	r2, 800da24 <_realloc_r+0x24>
 800da18:	f7ff f900 	bl	800cc1c <_free_r>
 800da1c:	4625      	mov	r5, r4
 800da1e:	4628      	mov	r0, r5
 800da20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da24:	f000 f841 	bl	800daaa <_malloc_usable_size_r>
 800da28:	4284      	cmp	r4, r0
 800da2a:	4607      	mov	r7, r0
 800da2c:	d802      	bhi.n	800da34 <_realloc_r+0x34>
 800da2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800da32:	d812      	bhi.n	800da5a <_realloc_r+0x5a>
 800da34:	4621      	mov	r1, r4
 800da36:	4640      	mov	r0, r8
 800da38:	f7ff f964 	bl	800cd04 <_malloc_r>
 800da3c:	4605      	mov	r5, r0
 800da3e:	2800      	cmp	r0, #0
 800da40:	d0ed      	beq.n	800da1e <_realloc_r+0x1e>
 800da42:	42bc      	cmp	r4, r7
 800da44:	4622      	mov	r2, r4
 800da46:	4631      	mov	r1, r6
 800da48:	bf28      	it	cs
 800da4a:	463a      	movcs	r2, r7
 800da4c:	f7fe fa5e 	bl	800bf0c <memcpy>
 800da50:	4631      	mov	r1, r6
 800da52:	4640      	mov	r0, r8
 800da54:	f7ff f8e2 	bl	800cc1c <_free_r>
 800da58:	e7e1      	b.n	800da1e <_realloc_r+0x1e>
 800da5a:	4635      	mov	r5, r6
 800da5c:	e7df      	b.n	800da1e <_realloc_r+0x1e>

0800da5e <__ascii_wctomb>:
 800da5e:	b149      	cbz	r1, 800da74 <__ascii_wctomb+0x16>
 800da60:	2aff      	cmp	r2, #255	; 0xff
 800da62:	bf85      	ittet	hi
 800da64:	238a      	movhi	r3, #138	; 0x8a
 800da66:	6003      	strhi	r3, [r0, #0]
 800da68:	700a      	strbls	r2, [r1, #0]
 800da6a:	f04f 30ff 	movhi.w	r0, #4294967295
 800da6e:	bf98      	it	ls
 800da70:	2001      	movls	r0, #1
 800da72:	4770      	bx	lr
 800da74:	4608      	mov	r0, r1
 800da76:	4770      	bx	lr

0800da78 <fiprintf>:
 800da78:	b40e      	push	{r1, r2, r3}
 800da7a:	b503      	push	{r0, r1, lr}
 800da7c:	4601      	mov	r1, r0
 800da7e:	ab03      	add	r3, sp, #12
 800da80:	4805      	ldr	r0, [pc, #20]	; (800da98 <fiprintf+0x20>)
 800da82:	f853 2b04 	ldr.w	r2, [r3], #4
 800da86:	6800      	ldr	r0, [r0, #0]
 800da88:	9301      	str	r3, [sp, #4]
 800da8a:	f000 f83f 	bl	800db0c <_vfiprintf_r>
 800da8e:	b002      	add	sp, #8
 800da90:	f85d eb04 	ldr.w	lr, [sp], #4
 800da94:	b003      	add	sp, #12
 800da96:	4770      	bx	lr
 800da98:	20000068 	.word	0x20000068

0800da9c <abort>:
 800da9c:	b508      	push	{r3, lr}
 800da9e:	2006      	movs	r0, #6
 800daa0:	f000 fa0c 	bl	800debc <raise>
 800daa4:	2001      	movs	r0, #1
 800daa6:	f7f6 f80f 	bl	8003ac8 <_exit>

0800daaa <_malloc_usable_size_r>:
 800daaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800daae:	1f18      	subs	r0, r3, #4
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	bfbc      	itt	lt
 800dab4:	580b      	ldrlt	r3, [r1, r0]
 800dab6:	18c0      	addlt	r0, r0, r3
 800dab8:	4770      	bx	lr

0800daba <__sfputc_r>:
 800daba:	6893      	ldr	r3, [r2, #8]
 800dabc:	3b01      	subs	r3, #1
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	b410      	push	{r4}
 800dac2:	6093      	str	r3, [r2, #8]
 800dac4:	da08      	bge.n	800dad8 <__sfputc_r+0x1e>
 800dac6:	6994      	ldr	r4, [r2, #24]
 800dac8:	42a3      	cmp	r3, r4
 800daca:	db01      	blt.n	800dad0 <__sfputc_r+0x16>
 800dacc:	290a      	cmp	r1, #10
 800dace:	d103      	bne.n	800dad8 <__sfputc_r+0x1e>
 800dad0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dad4:	f000 b934 	b.w	800dd40 <__swbuf_r>
 800dad8:	6813      	ldr	r3, [r2, #0]
 800dada:	1c58      	adds	r0, r3, #1
 800dadc:	6010      	str	r0, [r2, #0]
 800dade:	7019      	strb	r1, [r3, #0]
 800dae0:	4608      	mov	r0, r1
 800dae2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dae6:	4770      	bx	lr

0800dae8 <__sfputs_r>:
 800dae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daea:	4606      	mov	r6, r0
 800daec:	460f      	mov	r7, r1
 800daee:	4614      	mov	r4, r2
 800daf0:	18d5      	adds	r5, r2, r3
 800daf2:	42ac      	cmp	r4, r5
 800daf4:	d101      	bne.n	800dafa <__sfputs_r+0x12>
 800daf6:	2000      	movs	r0, #0
 800daf8:	e007      	b.n	800db0a <__sfputs_r+0x22>
 800dafa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dafe:	463a      	mov	r2, r7
 800db00:	4630      	mov	r0, r6
 800db02:	f7ff ffda 	bl	800daba <__sfputc_r>
 800db06:	1c43      	adds	r3, r0, #1
 800db08:	d1f3      	bne.n	800daf2 <__sfputs_r+0xa>
 800db0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800db0c <_vfiprintf_r>:
 800db0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db10:	460d      	mov	r5, r1
 800db12:	b09d      	sub	sp, #116	; 0x74
 800db14:	4614      	mov	r4, r2
 800db16:	4698      	mov	r8, r3
 800db18:	4606      	mov	r6, r0
 800db1a:	b118      	cbz	r0, 800db24 <_vfiprintf_r+0x18>
 800db1c:	6a03      	ldr	r3, [r0, #32]
 800db1e:	b90b      	cbnz	r3, 800db24 <_vfiprintf_r+0x18>
 800db20:	f7fe f8dc 	bl	800bcdc <__sinit>
 800db24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800db26:	07d9      	lsls	r1, r3, #31
 800db28:	d405      	bmi.n	800db36 <_vfiprintf_r+0x2a>
 800db2a:	89ab      	ldrh	r3, [r5, #12]
 800db2c:	059a      	lsls	r2, r3, #22
 800db2e:	d402      	bmi.n	800db36 <_vfiprintf_r+0x2a>
 800db30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800db32:	f7fe f9e9 	bl	800bf08 <__retarget_lock_acquire_recursive>
 800db36:	89ab      	ldrh	r3, [r5, #12]
 800db38:	071b      	lsls	r3, r3, #28
 800db3a:	d501      	bpl.n	800db40 <_vfiprintf_r+0x34>
 800db3c:	692b      	ldr	r3, [r5, #16]
 800db3e:	b99b      	cbnz	r3, 800db68 <_vfiprintf_r+0x5c>
 800db40:	4629      	mov	r1, r5
 800db42:	4630      	mov	r0, r6
 800db44:	f000 f93a 	bl	800ddbc <__swsetup_r>
 800db48:	b170      	cbz	r0, 800db68 <_vfiprintf_r+0x5c>
 800db4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800db4c:	07dc      	lsls	r4, r3, #31
 800db4e:	d504      	bpl.n	800db5a <_vfiprintf_r+0x4e>
 800db50:	f04f 30ff 	mov.w	r0, #4294967295
 800db54:	b01d      	add	sp, #116	; 0x74
 800db56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db5a:	89ab      	ldrh	r3, [r5, #12]
 800db5c:	0598      	lsls	r0, r3, #22
 800db5e:	d4f7      	bmi.n	800db50 <_vfiprintf_r+0x44>
 800db60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800db62:	f7fe f9d2 	bl	800bf0a <__retarget_lock_release_recursive>
 800db66:	e7f3      	b.n	800db50 <_vfiprintf_r+0x44>
 800db68:	2300      	movs	r3, #0
 800db6a:	9309      	str	r3, [sp, #36]	; 0x24
 800db6c:	2320      	movs	r3, #32
 800db6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800db72:	f8cd 800c 	str.w	r8, [sp, #12]
 800db76:	2330      	movs	r3, #48	; 0x30
 800db78:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800dd2c <_vfiprintf_r+0x220>
 800db7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800db80:	f04f 0901 	mov.w	r9, #1
 800db84:	4623      	mov	r3, r4
 800db86:	469a      	mov	sl, r3
 800db88:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db8c:	b10a      	cbz	r2, 800db92 <_vfiprintf_r+0x86>
 800db8e:	2a25      	cmp	r2, #37	; 0x25
 800db90:	d1f9      	bne.n	800db86 <_vfiprintf_r+0x7a>
 800db92:	ebba 0b04 	subs.w	fp, sl, r4
 800db96:	d00b      	beq.n	800dbb0 <_vfiprintf_r+0xa4>
 800db98:	465b      	mov	r3, fp
 800db9a:	4622      	mov	r2, r4
 800db9c:	4629      	mov	r1, r5
 800db9e:	4630      	mov	r0, r6
 800dba0:	f7ff ffa2 	bl	800dae8 <__sfputs_r>
 800dba4:	3001      	adds	r0, #1
 800dba6:	f000 80a9 	beq.w	800dcfc <_vfiprintf_r+0x1f0>
 800dbaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dbac:	445a      	add	r2, fp
 800dbae:	9209      	str	r2, [sp, #36]	; 0x24
 800dbb0:	f89a 3000 	ldrb.w	r3, [sl]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	f000 80a1 	beq.w	800dcfc <_vfiprintf_r+0x1f0>
 800dbba:	2300      	movs	r3, #0
 800dbbc:	f04f 32ff 	mov.w	r2, #4294967295
 800dbc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dbc4:	f10a 0a01 	add.w	sl, sl, #1
 800dbc8:	9304      	str	r3, [sp, #16]
 800dbca:	9307      	str	r3, [sp, #28]
 800dbcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dbd0:	931a      	str	r3, [sp, #104]	; 0x68
 800dbd2:	4654      	mov	r4, sl
 800dbd4:	2205      	movs	r2, #5
 800dbd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbda:	4854      	ldr	r0, [pc, #336]	; (800dd2c <_vfiprintf_r+0x220>)
 800dbdc:	f7f2 fb08 	bl	80001f0 <memchr>
 800dbe0:	9a04      	ldr	r2, [sp, #16]
 800dbe2:	b9d8      	cbnz	r0, 800dc1c <_vfiprintf_r+0x110>
 800dbe4:	06d1      	lsls	r1, r2, #27
 800dbe6:	bf44      	itt	mi
 800dbe8:	2320      	movmi	r3, #32
 800dbea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dbee:	0713      	lsls	r3, r2, #28
 800dbf0:	bf44      	itt	mi
 800dbf2:	232b      	movmi	r3, #43	; 0x2b
 800dbf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dbf8:	f89a 3000 	ldrb.w	r3, [sl]
 800dbfc:	2b2a      	cmp	r3, #42	; 0x2a
 800dbfe:	d015      	beq.n	800dc2c <_vfiprintf_r+0x120>
 800dc00:	9a07      	ldr	r2, [sp, #28]
 800dc02:	4654      	mov	r4, sl
 800dc04:	2000      	movs	r0, #0
 800dc06:	f04f 0c0a 	mov.w	ip, #10
 800dc0a:	4621      	mov	r1, r4
 800dc0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc10:	3b30      	subs	r3, #48	; 0x30
 800dc12:	2b09      	cmp	r3, #9
 800dc14:	d94d      	bls.n	800dcb2 <_vfiprintf_r+0x1a6>
 800dc16:	b1b0      	cbz	r0, 800dc46 <_vfiprintf_r+0x13a>
 800dc18:	9207      	str	r2, [sp, #28]
 800dc1a:	e014      	b.n	800dc46 <_vfiprintf_r+0x13a>
 800dc1c:	eba0 0308 	sub.w	r3, r0, r8
 800dc20:	fa09 f303 	lsl.w	r3, r9, r3
 800dc24:	4313      	orrs	r3, r2
 800dc26:	9304      	str	r3, [sp, #16]
 800dc28:	46a2      	mov	sl, r4
 800dc2a:	e7d2      	b.n	800dbd2 <_vfiprintf_r+0xc6>
 800dc2c:	9b03      	ldr	r3, [sp, #12]
 800dc2e:	1d19      	adds	r1, r3, #4
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	9103      	str	r1, [sp, #12]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	bfbb      	ittet	lt
 800dc38:	425b      	neglt	r3, r3
 800dc3a:	f042 0202 	orrlt.w	r2, r2, #2
 800dc3e:	9307      	strge	r3, [sp, #28]
 800dc40:	9307      	strlt	r3, [sp, #28]
 800dc42:	bfb8      	it	lt
 800dc44:	9204      	strlt	r2, [sp, #16]
 800dc46:	7823      	ldrb	r3, [r4, #0]
 800dc48:	2b2e      	cmp	r3, #46	; 0x2e
 800dc4a:	d10c      	bne.n	800dc66 <_vfiprintf_r+0x15a>
 800dc4c:	7863      	ldrb	r3, [r4, #1]
 800dc4e:	2b2a      	cmp	r3, #42	; 0x2a
 800dc50:	d134      	bne.n	800dcbc <_vfiprintf_r+0x1b0>
 800dc52:	9b03      	ldr	r3, [sp, #12]
 800dc54:	1d1a      	adds	r2, r3, #4
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	9203      	str	r2, [sp, #12]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	bfb8      	it	lt
 800dc5e:	f04f 33ff 	movlt.w	r3, #4294967295
 800dc62:	3402      	adds	r4, #2
 800dc64:	9305      	str	r3, [sp, #20]
 800dc66:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800dd3c <_vfiprintf_r+0x230>
 800dc6a:	7821      	ldrb	r1, [r4, #0]
 800dc6c:	2203      	movs	r2, #3
 800dc6e:	4650      	mov	r0, sl
 800dc70:	f7f2 fabe 	bl	80001f0 <memchr>
 800dc74:	b138      	cbz	r0, 800dc86 <_vfiprintf_r+0x17a>
 800dc76:	9b04      	ldr	r3, [sp, #16]
 800dc78:	eba0 000a 	sub.w	r0, r0, sl
 800dc7c:	2240      	movs	r2, #64	; 0x40
 800dc7e:	4082      	lsls	r2, r0
 800dc80:	4313      	orrs	r3, r2
 800dc82:	3401      	adds	r4, #1
 800dc84:	9304      	str	r3, [sp, #16]
 800dc86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc8a:	4829      	ldr	r0, [pc, #164]	; (800dd30 <_vfiprintf_r+0x224>)
 800dc8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dc90:	2206      	movs	r2, #6
 800dc92:	f7f2 faad 	bl	80001f0 <memchr>
 800dc96:	2800      	cmp	r0, #0
 800dc98:	d03f      	beq.n	800dd1a <_vfiprintf_r+0x20e>
 800dc9a:	4b26      	ldr	r3, [pc, #152]	; (800dd34 <_vfiprintf_r+0x228>)
 800dc9c:	bb1b      	cbnz	r3, 800dce6 <_vfiprintf_r+0x1da>
 800dc9e:	9b03      	ldr	r3, [sp, #12]
 800dca0:	3307      	adds	r3, #7
 800dca2:	f023 0307 	bic.w	r3, r3, #7
 800dca6:	3308      	adds	r3, #8
 800dca8:	9303      	str	r3, [sp, #12]
 800dcaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcac:	443b      	add	r3, r7
 800dcae:	9309      	str	r3, [sp, #36]	; 0x24
 800dcb0:	e768      	b.n	800db84 <_vfiprintf_r+0x78>
 800dcb2:	fb0c 3202 	mla	r2, ip, r2, r3
 800dcb6:	460c      	mov	r4, r1
 800dcb8:	2001      	movs	r0, #1
 800dcba:	e7a6      	b.n	800dc0a <_vfiprintf_r+0xfe>
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	3401      	adds	r4, #1
 800dcc0:	9305      	str	r3, [sp, #20]
 800dcc2:	4619      	mov	r1, r3
 800dcc4:	f04f 0c0a 	mov.w	ip, #10
 800dcc8:	4620      	mov	r0, r4
 800dcca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dcce:	3a30      	subs	r2, #48	; 0x30
 800dcd0:	2a09      	cmp	r2, #9
 800dcd2:	d903      	bls.n	800dcdc <_vfiprintf_r+0x1d0>
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d0c6      	beq.n	800dc66 <_vfiprintf_r+0x15a>
 800dcd8:	9105      	str	r1, [sp, #20]
 800dcda:	e7c4      	b.n	800dc66 <_vfiprintf_r+0x15a>
 800dcdc:	fb0c 2101 	mla	r1, ip, r1, r2
 800dce0:	4604      	mov	r4, r0
 800dce2:	2301      	movs	r3, #1
 800dce4:	e7f0      	b.n	800dcc8 <_vfiprintf_r+0x1bc>
 800dce6:	ab03      	add	r3, sp, #12
 800dce8:	9300      	str	r3, [sp, #0]
 800dcea:	462a      	mov	r2, r5
 800dcec:	4b12      	ldr	r3, [pc, #72]	; (800dd38 <_vfiprintf_r+0x22c>)
 800dcee:	a904      	add	r1, sp, #16
 800dcf0:	4630      	mov	r0, r6
 800dcf2:	f7fd fbb3 	bl	800b45c <_printf_float>
 800dcf6:	4607      	mov	r7, r0
 800dcf8:	1c78      	adds	r0, r7, #1
 800dcfa:	d1d6      	bne.n	800dcaa <_vfiprintf_r+0x19e>
 800dcfc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dcfe:	07d9      	lsls	r1, r3, #31
 800dd00:	d405      	bmi.n	800dd0e <_vfiprintf_r+0x202>
 800dd02:	89ab      	ldrh	r3, [r5, #12]
 800dd04:	059a      	lsls	r2, r3, #22
 800dd06:	d402      	bmi.n	800dd0e <_vfiprintf_r+0x202>
 800dd08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dd0a:	f7fe f8fe 	bl	800bf0a <__retarget_lock_release_recursive>
 800dd0e:	89ab      	ldrh	r3, [r5, #12]
 800dd10:	065b      	lsls	r3, r3, #25
 800dd12:	f53f af1d 	bmi.w	800db50 <_vfiprintf_r+0x44>
 800dd16:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dd18:	e71c      	b.n	800db54 <_vfiprintf_r+0x48>
 800dd1a:	ab03      	add	r3, sp, #12
 800dd1c:	9300      	str	r3, [sp, #0]
 800dd1e:	462a      	mov	r2, r5
 800dd20:	4b05      	ldr	r3, [pc, #20]	; (800dd38 <_vfiprintf_r+0x22c>)
 800dd22:	a904      	add	r1, sp, #16
 800dd24:	4630      	mov	r0, r6
 800dd26:	f7fd fe3d 	bl	800b9a4 <_printf_i>
 800dd2a:	e7e4      	b.n	800dcf6 <_vfiprintf_r+0x1ea>
 800dd2c:	0800f4b4 	.word	0x0800f4b4
 800dd30:	0800f4be 	.word	0x0800f4be
 800dd34:	0800b45d 	.word	0x0800b45d
 800dd38:	0800dae9 	.word	0x0800dae9
 800dd3c:	0800f4ba 	.word	0x0800f4ba

0800dd40 <__swbuf_r>:
 800dd40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd42:	460e      	mov	r6, r1
 800dd44:	4614      	mov	r4, r2
 800dd46:	4605      	mov	r5, r0
 800dd48:	b118      	cbz	r0, 800dd52 <__swbuf_r+0x12>
 800dd4a:	6a03      	ldr	r3, [r0, #32]
 800dd4c:	b90b      	cbnz	r3, 800dd52 <__swbuf_r+0x12>
 800dd4e:	f7fd ffc5 	bl	800bcdc <__sinit>
 800dd52:	69a3      	ldr	r3, [r4, #24]
 800dd54:	60a3      	str	r3, [r4, #8]
 800dd56:	89a3      	ldrh	r3, [r4, #12]
 800dd58:	071a      	lsls	r2, r3, #28
 800dd5a:	d525      	bpl.n	800dda8 <__swbuf_r+0x68>
 800dd5c:	6923      	ldr	r3, [r4, #16]
 800dd5e:	b31b      	cbz	r3, 800dda8 <__swbuf_r+0x68>
 800dd60:	6823      	ldr	r3, [r4, #0]
 800dd62:	6922      	ldr	r2, [r4, #16]
 800dd64:	1a98      	subs	r0, r3, r2
 800dd66:	6963      	ldr	r3, [r4, #20]
 800dd68:	b2f6      	uxtb	r6, r6
 800dd6a:	4283      	cmp	r3, r0
 800dd6c:	4637      	mov	r7, r6
 800dd6e:	dc04      	bgt.n	800dd7a <__swbuf_r+0x3a>
 800dd70:	4621      	mov	r1, r4
 800dd72:	4628      	mov	r0, r5
 800dd74:	f7ff fdac 	bl	800d8d0 <_fflush_r>
 800dd78:	b9e0      	cbnz	r0, 800ddb4 <__swbuf_r+0x74>
 800dd7a:	68a3      	ldr	r3, [r4, #8]
 800dd7c:	3b01      	subs	r3, #1
 800dd7e:	60a3      	str	r3, [r4, #8]
 800dd80:	6823      	ldr	r3, [r4, #0]
 800dd82:	1c5a      	adds	r2, r3, #1
 800dd84:	6022      	str	r2, [r4, #0]
 800dd86:	701e      	strb	r6, [r3, #0]
 800dd88:	6962      	ldr	r2, [r4, #20]
 800dd8a:	1c43      	adds	r3, r0, #1
 800dd8c:	429a      	cmp	r2, r3
 800dd8e:	d004      	beq.n	800dd9a <__swbuf_r+0x5a>
 800dd90:	89a3      	ldrh	r3, [r4, #12]
 800dd92:	07db      	lsls	r3, r3, #31
 800dd94:	d506      	bpl.n	800dda4 <__swbuf_r+0x64>
 800dd96:	2e0a      	cmp	r6, #10
 800dd98:	d104      	bne.n	800dda4 <__swbuf_r+0x64>
 800dd9a:	4621      	mov	r1, r4
 800dd9c:	4628      	mov	r0, r5
 800dd9e:	f7ff fd97 	bl	800d8d0 <_fflush_r>
 800dda2:	b938      	cbnz	r0, 800ddb4 <__swbuf_r+0x74>
 800dda4:	4638      	mov	r0, r7
 800dda6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dda8:	4621      	mov	r1, r4
 800ddaa:	4628      	mov	r0, r5
 800ddac:	f000 f806 	bl	800ddbc <__swsetup_r>
 800ddb0:	2800      	cmp	r0, #0
 800ddb2:	d0d5      	beq.n	800dd60 <__swbuf_r+0x20>
 800ddb4:	f04f 37ff 	mov.w	r7, #4294967295
 800ddb8:	e7f4      	b.n	800dda4 <__swbuf_r+0x64>
	...

0800ddbc <__swsetup_r>:
 800ddbc:	b538      	push	{r3, r4, r5, lr}
 800ddbe:	4b2a      	ldr	r3, [pc, #168]	; (800de68 <__swsetup_r+0xac>)
 800ddc0:	4605      	mov	r5, r0
 800ddc2:	6818      	ldr	r0, [r3, #0]
 800ddc4:	460c      	mov	r4, r1
 800ddc6:	b118      	cbz	r0, 800ddd0 <__swsetup_r+0x14>
 800ddc8:	6a03      	ldr	r3, [r0, #32]
 800ddca:	b90b      	cbnz	r3, 800ddd0 <__swsetup_r+0x14>
 800ddcc:	f7fd ff86 	bl	800bcdc <__sinit>
 800ddd0:	89a3      	ldrh	r3, [r4, #12]
 800ddd2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ddd6:	0718      	lsls	r0, r3, #28
 800ddd8:	d422      	bmi.n	800de20 <__swsetup_r+0x64>
 800ddda:	06d9      	lsls	r1, r3, #27
 800dddc:	d407      	bmi.n	800ddee <__swsetup_r+0x32>
 800ddde:	2309      	movs	r3, #9
 800dde0:	602b      	str	r3, [r5, #0]
 800dde2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dde6:	81a3      	strh	r3, [r4, #12]
 800dde8:	f04f 30ff 	mov.w	r0, #4294967295
 800ddec:	e034      	b.n	800de58 <__swsetup_r+0x9c>
 800ddee:	0758      	lsls	r0, r3, #29
 800ddf0:	d512      	bpl.n	800de18 <__swsetup_r+0x5c>
 800ddf2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ddf4:	b141      	cbz	r1, 800de08 <__swsetup_r+0x4c>
 800ddf6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ddfa:	4299      	cmp	r1, r3
 800ddfc:	d002      	beq.n	800de04 <__swsetup_r+0x48>
 800ddfe:	4628      	mov	r0, r5
 800de00:	f7fe ff0c 	bl	800cc1c <_free_r>
 800de04:	2300      	movs	r3, #0
 800de06:	6363      	str	r3, [r4, #52]	; 0x34
 800de08:	89a3      	ldrh	r3, [r4, #12]
 800de0a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800de0e:	81a3      	strh	r3, [r4, #12]
 800de10:	2300      	movs	r3, #0
 800de12:	6063      	str	r3, [r4, #4]
 800de14:	6923      	ldr	r3, [r4, #16]
 800de16:	6023      	str	r3, [r4, #0]
 800de18:	89a3      	ldrh	r3, [r4, #12]
 800de1a:	f043 0308 	orr.w	r3, r3, #8
 800de1e:	81a3      	strh	r3, [r4, #12]
 800de20:	6923      	ldr	r3, [r4, #16]
 800de22:	b94b      	cbnz	r3, 800de38 <__swsetup_r+0x7c>
 800de24:	89a3      	ldrh	r3, [r4, #12]
 800de26:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800de2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800de2e:	d003      	beq.n	800de38 <__swsetup_r+0x7c>
 800de30:	4621      	mov	r1, r4
 800de32:	4628      	mov	r0, r5
 800de34:	f000 f884 	bl	800df40 <__smakebuf_r>
 800de38:	89a0      	ldrh	r0, [r4, #12]
 800de3a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800de3e:	f010 0301 	ands.w	r3, r0, #1
 800de42:	d00a      	beq.n	800de5a <__swsetup_r+0x9e>
 800de44:	2300      	movs	r3, #0
 800de46:	60a3      	str	r3, [r4, #8]
 800de48:	6963      	ldr	r3, [r4, #20]
 800de4a:	425b      	negs	r3, r3
 800de4c:	61a3      	str	r3, [r4, #24]
 800de4e:	6923      	ldr	r3, [r4, #16]
 800de50:	b943      	cbnz	r3, 800de64 <__swsetup_r+0xa8>
 800de52:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800de56:	d1c4      	bne.n	800dde2 <__swsetup_r+0x26>
 800de58:	bd38      	pop	{r3, r4, r5, pc}
 800de5a:	0781      	lsls	r1, r0, #30
 800de5c:	bf58      	it	pl
 800de5e:	6963      	ldrpl	r3, [r4, #20]
 800de60:	60a3      	str	r3, [r4, #8]
 800de62:	e7f4      	b.n	800de4e <__swsetup_r+0x92>
 800de64:	2000      	movs	r0, #0
 800de66:	e7f7      	b.n	800de58 <__swsetup_r+0x9c>
 800de68:	20000068 	.word	0x20000068

0800de6c <_raise_r>:
 800de6c:	291f      	cmp	r1, #31
 800de6e:	b538      	push	{r3, r4, r5, lr}
 800de70:	4604      	mov	r4, r0
 800de72:	460d      	mov	r5, r1
 800de74:	d904      	bls.n	800de80 <_raise_r+0x14>
 800de76:	2316      	movs	r3, #22
 800de78:	6003      	str	r3, [r0, #0]
 800de7a:	f04f 30ff 	mov.w	r0, #4294967295
 800de7e:	bd38      	pop	{r3, r4, r5, pc}
 800de80:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800de82:	b112      	cbz	r2, 800de8a <_raise_r+0x1e>
 800de84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800de88:	b94b      	cbnz	r3, 800de9e <_raise_r+0x32>
 800de8a:	4620      	mov	r0, r4
 800de8c:	f000 f830 	bl	800def0 <_getpid_r>
 800de90:	462a      	mov	r2, r5
 800de92:	4601      	mov	r1, r0
 800de94:	4620      	mov	r0, r4
 800de96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de9a:	f000 b817 	b.w	800decc <_kill_r>
 800de9e:	2b01      	cmp	r3, #1
 800dea0:	d00a      	beq.n	800deb8 <_raise_r+0x4c>
 800dea2:	1c59      	adds	r1, r3, #1
 800dea4:	d103      	bne.n	800deae <_raise_r+0x42>
 800dea6:	2316      	movs	r3, #22
 800dea8:	6003      	str	r3, [r0, #0]
 800deaa:	2001      	movs	r0, #1
 800deac:	e7e7      	b.n	800de7e <_raise_r+0x12>
 800deae:	2400      	movs	r4, #0
 800deb0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800deb4:	4628      	mov	r0, r5
 800deb6:	4798      	blx	r3
 800deb8:	2000      	movs	r0, #0
 800deba:	e7e0      	b.n	800de7e <_raise_r+0x12>

0800debc <raise>:
 800debc:	4b02      	ldr	r3, [pc, #8]	; (800dec8 <raise+0xc>)
 800debe:	4601      	mov	r1, r0
 800dec0:	6818      	ldr	r0, [r3, #0]
 800dec2:	f7ff bfd3 	b.w	800de6c <_raise_r>
 800dec6:	bf00      	nop
 800dec8:	20000068 	.word	0x20000068

0800decc <_kill_r>:
 800decc:	b538      	push	{r3, r4, r5, lr}
 800dece:	4d07      	ldr	r5, [pc, #28]	; (800deec <_kill_r+0x20>)
 800ded0:	2300      	movs	r3, #0
 800ded2:	4604      	mov	r4, r0
 800ded4:	4608      	mov	r0, r1
 800ded6:	4611      	mov	r1, r2
 800ded8:	602b      	str	r3, [r5, #0]
 800deda:	f7f5 fde5 	bl	8003aa8 <_kill>
 800dede:	1c43      	adds	r3, r0, #1
 800dee0:	d102      	bne.n	800dee8 <_kill_r+0x1c>
 800dee2:	682b      	ldr	r3, [r5, #0]
 800dee4:	b103      	cbz	r3, 800dee8 <_kill_r+0x1c>
 800dee6:	6023      	str	r3, [r4, #0]
 800dee8:	bd38      	pop	{r3, r4, r5, pc}
 800deea:	bf00      	nop
 800deec:	200022e0 	.word	0x200022e0

0800def0 <_getpid_r>:
 800def0:	f7f5 bdd2 	b.w	8003a98 <_getpid>

0800def4 <__swhatbuf_r>:
 800def4:	b570      	push	{r4, r5, r6, lr}
 800def6:	460c      	mov	r4, r1
 800def8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800defc:	2900      	cmp	r1, #0
 800defe:	b096      	sub	sp, #88	; 0x58
 800df00:	4615      	mov	r5, r2
 800df02:	461e      	mov	r6, r3
 800df04:	da0d      	bge.n	800df22 <__swhatbuf_r+0x2e>
 800df06:	89a3      	ldrh	r3, [r4, #12]
 800df08:	f013 0f80 	tst.w	r3, #128	; 0x80
 800df0c:	f04f 0100 	mov.w	r1, #0
 800df10:	bf0c      	ite	eq
 800df12:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800df16:	2340      	movne	r3, #64	; 0x40
 800df18:	2000      	movs	r0, #0
 800df1a:	6031      	str	r1, [r6, #0]
 800df1c:	602b      	str	r3, [r5, #0]
 800df1e:	b016      	add	sp, #88	; 0x58
 800df20:	bd70      	pop	{r4, r5, r6, pc}
 800df22:	466a      	mov	r2, sp
 800df24:	f000 f848 	bl	800dfb8 <_fstat_r>
 800df28:	2800      	cmp	r0, #0
 800df2a:	dbec      	blt.n	800df06 <__swhatbuf_r+0x12>
 800df2c:	9901      	ldr	r1, [sp, #4]
 800df2e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800df32:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800df36:	4259      	negs	r1, r3
 800df38:	4159      	adcs	r1, r3
 800df3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800df3e:	e7eb      	b.n	800df18 <__swhatbuf_r+0x24>

0800df40 <__smakebuf_r>:
 800df40:	898b      	ldrh	r3, [r1, #12]
 800df42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800df44:	079d      	lsls	r5, r3, #30
 800df46:	4606      	mov	r6, r0
 800df48:	460c      	mov	r4, r1
 800df4a:	d507      	bpl.n	800df5c <__smakebuf_r+0x1c>
 800df4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800df50:	6023      	str	r3, [r4, #0]
 800df52:	6123      	str	r3, [r4, #16]
 800df54:	2301      	movs	r3, #1
 800df56:	6163      	str	r3, [r4, #20]
 800df58:	b002      	add	sp, #8
 800df5a:	bd70      	pop	{r4, r5, r6, pc}
 800df5c:	ab01      	add	r3, sp, #4
 800df5e:	466a      	mov	r2, sp
 800df60:	f7ff ffc8 	bl	800def4 <__swhatbuf_r>
 800df64:	9900      	ldr	r1, [sp, #0]
 800df66:	4605      	mov	r5, r0
 800df68:	4630      	mov	r0, r6
 800df6a:	f7fe fecb 	bl	800cd04 <_malloc_r>
 800df6e:	b948      	cbnz	r0, 800df84 <__smakebuf_r+0x44>
 800df70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df74:	059a      	lsls	r2, r3, #22
 800df76:	d4ef      	bmi.n	800df58 <__smakebuf_r+0x18>
 800df78:	f023 0303 	bic.w	r3, r3, #3
 800df7c:	f043 0302 	orr.w	r3, r3, #2
 800df80:	81a3      	strh	r3, [r4, #12]
 800df82:	e7e3      	b.n	800df4c <__smakebuf_r+0xc>
 800df84:	89a3      	ldrh	r3, [r4, #12]
 800df86:	6020      	str	r0, [r4, #0]
 800df88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df8c:	81a3      	strh	r3, [r4, #12]
 800df8e:	9b00      	ldr	r3, [sp, #0]
 800df90:	6163      	str	r3, [r4, #20]
 800df92:	9b01      	ldr	r3, [sp, #4]
 800df94:	6120      	str	r0, [r4, #16]
 800df96:	b15b      	cbz	r3, 800dfb0 <__smakebuf_r+0x70>
 800df98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df9c:	4630      	mov	r0, r6
 800df9e:	f000 f81d 	bl	800dfdc <_isatty_r>
 800dfa2:	b128      	cbz	r0, 800dfb0 <__smakebuf_r+0x70>
 800dfa4:	89a3      	ldrh	r3, [r4, #12]
 800dfa6:	f023 0303 	bic.w	r3, r3, #3
 800dfaa:	f043 0301 	orr.w	r3, r3, #1
 800dfae:	81a3      	strh	r3, [r4, #12]
 800dfb0:	89a3      	ldrh	r3, [r4, #12]
 800dfb2:	431d      	orrs	r5, r3
 800dfb4:	81a5      	strh	r5, [r4, #12]
 800dfb6:	e7cf      	b.n	800df58 <__smakebuf_r+0x18>

0800dfb8 <_fstat_r>:
 800dfb8:	b538      	push	{r3, r4, r5, lr}
 800dfba:	4d07      	ldr	r5, [pc, #28]	; (800dfd8 <_fstat_r+0x20>)
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	4604      	mov	r4, r0
 800dfc0:	4608      	mov	r0, r1
 800dfc2:	4611      	mov	r1, r2
 800dfc4:	602b      	str	r3, [r5, #0]
 800dfc6:	f7f5 fdce 	bl	8003b66 <_fstat>
 800dfca:	1c43      	adds	r3, r0, #1
 800dfcc:	d102      	bne.n	800dfd4 <_fstat_r+0x1c>
 800dfce:	682b      	ldr	r3, [r5, #0]
 800dfd0:	b103      	cbz	r3, 800dfd4 <_fstat_r+0x1c>
 800dfd2:	6023      	str	r3, [r4, #0]
 800dfd4:	bd38      	pop	{r3, r4, r5, pc}
 800dfd6:	bf00      	nop
 800dfd8:	200022e0 	.word	0x200022e0

0800dfdc <_isatty_r>:
 800dfdc:	b538      	push	{r3, r4, r5, lr}
 800dfde:	4d06      	ldr	r5, [pc, #24]	; (800dff8 <_isatty_r+0x1c>)
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	4604      	mov	r4, r0
 800dfe4:	4608      	mov	r0, r1
 800dfe6:	602b      	str	r3, [r5, #0]
 800dfe8:	f7f5 fdcd 	bl	8003b86 <_isatty>
 800dfec:	1c43      	adds	r3, r0, #1
 800dfee:	d102      	bne.n	800dff6 <_isatty_r+0x1a>
 800dff0:	682b      	ldr	r3, [r5, #0]
 800dff2:	b103      	cbz	r3, 800dff6 <_isatty_r+0x1a>
 800dff4:	6023      	str	r3, [r4, #0]
 800dff6:	bd38      	pop	{r3, r4, r5, pc}
 800dff8:	200022e0 	.word	0x200022e0

0800dffc <pow>:
 800dffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dffe:	ed2d 8b02 	vpush	{d8}
 800e002:	eeb0 8a40 	vmov.f32	s16, s0
 800e006:	eef0 8a60 	vmov.f32	s17, s1
 800e00a:	ec55 4b11 	vmov	r4, r5, d1
 800e00e:	f000 f873 	bl	800e0f8 <__ieee754_pow>
 800e012:	4622      	mov	r2, r4
 800e014:	462b      	mov	r3, r5
 800e016:	4620      	mov	r0, r4
 800e018:	4629      	mov	r1, r5
 800e01a:	ec57 6b10 	vmov	r6, r7, d0
 800e01e:	f7f2 fd95 	bl	8000b4c <__aeabi_dcmpun>
 800e022:	2800      	cmp	r0, #0
 800e024:	d13b      	bne.n	800e09e <pow+0xa2>
 800e026:	ec51 0b18 	vmov	r0, r1, d8
 800e02a:	2200      	movs	r2, #0
 800e02c:	2300      	movs	r3, #0
 800e02e:	f7f2 fd5b 	bl	8000ae8 <__aeabi_dcmpeq>
 800e032:	b1b8      	cbz	r0, 800e064 <pow+0x68>
 800e034:	2200      	movs	r2, #0
 800e036:	2300      	movs	r3, #0
 800e038:	4620      	mov	r0, r4
 800e03a:	4629      	mov	r1, r5
 800e03c:	f7f2 fd54 	bl	8000ae8 <__aeabi_dcmpeq>
 800e040:	2800      	cmp	r0, #0
 800e042:	d146      	bne.n	800e0d2 <pow+0xd6>
 800e044:	ec45 4b10 	vmov	d0, r4, r5
 800e048:	f000 f848 	bl	800e0dc <finite>
 800e04c:	b338      	cbz	r0, 800e09e <pow+0xa2>
 800e04e:	2200      	movs	r2, #0
 800e050:	2300      	movs	r3, #0
 800e052:	4620      	mov	r0, r4
 800e054:	4629      	mov	r1, r5
 800e056:	f7f2 fd51 	bl	8000afc <__aeabi_dcmplt>
 800e05a:	b300      	cbz	r0, 800e09e <pow+0xa2>
 800e05c:	f7fd ff2a 	bl	800beb4 <__errno>
 800e060:	2322      	movs	r3, #34	; 0x22
 800e062:	e01b      	b.n	800e09c <pow+0xa0>
 800e064:	ec47 6b10 	vmov	d0, r6, r7
 800e068:	f000 f838 	bl	800e0dc <finite>
 800e06c:	b9e0      	cbnz	r0, 800e0a8 <pow+0xac>
 800e06e:	eeb0 0a48 	vmov.f32	s0, s16
 800e072:	eef0 0a68 	vmov.f32	s1, s17
 800e076:	f000 f831 	bl	800e0dc <finite>
 800e07a:	b1a8      	cbz	r0, 800e0a8 <pow+0xac>
 800e07c:	ec45 4b10 	vmov	d0, r4, r5
 800e080:	f000 f82c 	bl	800e0dc <finite>
 800e084:	b180      	cbz	r0, 800e0a8 <pow+0xac>
 800e086:	4632      	mov	r2, r6
 800e088:	463b      	mov	r3, r7
 800e08a:	4630      	mov	r0, r6
 800e08c:	4639      	mov	r1, r7
 800e08e:	f7f2 fd5d 	bl	8000b4c <__aeabi_dcmpun>
 800e092:	2800      	cmp	r0, #0
 800e094:	d0e2      	beq.n	800e05c <pow+0x60>
 800e096:	f7fd ff0d 	bl	800beb4 <__errno>
 800e09a:	2321      	movs	r3, #33	; 0x21
 800e09c:	6003      	str	r3, [r0, #0]
 800e09e:	ecbd 8b02 	vpop	{d8}
 800e0a2:	ec47 6b10 	vmov	d0, r6, r7
 800e0a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	2300      	movs	r3, #0
 800e0ac:	4630      	mov	r0, r6
 800e0ae:	4639      	mov	r1, r7
 800e0b0:	f7f2 fd1a 	bl	8000ae8 <__aeabi_dcmpeq>
 800e0b4:	2800      	cmp	r0, #0
 800e0b6:	d0f2      	beq.n	800e09e <pow+0xa2>
 800e0b8:	eeb0 0a48 	vmov.f32	s0, s16
 800e0bc:	eef0 0a68 	vmov.f32	s1, s17
 800e0c0:	f000 f80c 	bl	800e0dc <finite>
 800e0c4:	2800      	cmp	r0, #0
 800e0c6:	d0ea      	beq.n	800e09e <pow+0xa2>
 800e0c8:	ec45 4b10 	vmov	d0, r4, r5
 800e0cc:	f000 f806 	bl	800e0dc <finite>
 800e0d0:	e7c3      	b.n	800e05a <pow+0x5e>
 800e0d2:	4f01      	ldr	r7, [pc, #4]	; (800e0d8 <pow+0xdc>)
 800e0d4:	2600      	movs	r6, #0
 800e0d6:	e7e2      	b.n	800e09e <pow+0xa2>
 800e0d8:	3ff00000 	.word	0x3ff00000

0800e0dc <finite>:
 800e0dc:	b082      	sub	sp, #8
 800e0de:	ed8d 0b00 	vstr	d0, [sp]
 800e0e2:	9801      	ldr	r0, [sp, #4]
 800e0e4:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800e0e8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e0ec:	0fc0      	lsrs	r0, r0, #31
 800e0ee:	b002      	add	sp, #8
 800e0f0:	4770      	bx	lr
 800e0f2:	0000      	movs	r0, r0
 800e0f4:	0000      	movs	r0, r0
	...

0800e0f8 <__ieee754_pow>:
 800e0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0fc:	ed2d 8b06 	vpush	{d8-d10}
 800e100:	b089      	sub	sp, #36	; 0x24
 800e102:	ed8d 1b00 	vstr	d1, [sp]
 800e106:	e9dd 2900 	ldrd	r2, r9, [sp]
 800e10a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800e10e:	ea58 0102 	orrs.w	r1, r8, r2
 800e112:	ec57 6b10 	vmov	r6, r7, d0
 800e116:	d115      	bne.n	800e144 <__ieee754_pow+0x4c>
 800e118:	19b3      	adds	r3, r6, r6
 800e11a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800e11e:	4152      	adcs	r2, r2
 800e120:	4299      	cmp	r1, r3
 800e122:	4b89      	ldr	r3, [pc, #548]	; (800e348 <__ieee754_pow+0x250>)
 800e124:	4193      	sbcs	r3, r2
 800e126:	f080 84d1 	bcs.w	800eacc <__ieee754_pow+0x9d4>
 800e12a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e12e:	4630      	mov	r0, r6
 800e130:	4639      	mov	r1, r7
 800e132:	f7f2 f8bb 	bl	80002ac <__adddf3>
 800e136:	ec41 0b10 	vmov	d0, r0, r1
 800e13a:	b009      	add	sp, #36	; 0x24
 800e13c:	ecbd 8b06 	vpop	{d8-d10}
 800e140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e144:	4b81      	ldr	r3, [pc, #516]	; (800e34c <__ieee754_pow+0x254>)
 800e146:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800e14a:	429c      	cmp	r4, r3
 800e14c:	ee10 aa10 	vmov	sl, s0
 800e150:	463d      	mov	r5, r7
 800e152:	dc06      	bgt.n	800e162 <__ieee754_pow+0x6a>
 800e154:	d101      	bne.n	800e15a <__ieee754_pow+0x62>
 800e156:	2e00      	cmp	r6, #0
 800e158:	d1e7      	bne.n	800e12a <__ieee754_pow+0x32>
 800e15a:	4598      	cmp	r8, r3
 800e15c:	dc01      	bgt.n	800e162 <__ieee754_pow+0x6a>
 800e15e:	d10f      	bne.n	800e180 <__ieee754_pow+0x88>
 800e160:	b172      	cbz	r2, 800e180 <__ieee754_pow+0x88>
 800e162:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800e166:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800e16a:	ea55 050a 	orrs.w	r5, r5, sl
 800e16e:	d1dc      	bne.n	800e12a <__ieee754_pow+0x32>
 800e170:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e174:	18db      	adds	r3, r3, r3
 800e176:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800e17a:	4152      	adcs	r2, r2
 800e17c:	429d      	cmp	r5, r3
 800e17e:	e7d0      	b.n	800e122 <__ieee754_pow+0x2a>
 800e180:	2d00      	cmp	r5, #0
 800e182:	da3b      	bge.n	800e1fc <__ieee754_pow+0x104>
 800e184:	4b72      	ldr	r3, [pc, #456]	; (800e350 <__ieee754_pow+0x258>)
 800e186:	4598      	cmp	r8, r3
 800e188:	dc51      	bgt.n	800e22e <__ieee754_pow+0x136>
 800e18a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800e18e:	4598      	cmp	r8, r3
 800e190:	f340 84ab 	ble.w	800eaea <__ieee754_pow+0x9f2>
 800e194:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e198:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e19c:	2b14      	cmp	r3, #20
 800e19e:	dd0f      	ble.n	800e1c0 <__ieee754_pow+0xc8>
 800e1a0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e1a4:	fa22 f103 	lsr.w	r1, r2, r3
 800e1a8:	fa01 f303 	lsl.w	r3, r1, r3
 800e1ac:	4293      	cmp	r3, r2
 800e1ae:	f040 849c 	bne.w	800eaea <__ieee754_pow+0x9f2>
 800e1b2:	f001 0101 	and.w	r1, r1, #1
 800e1b6:	f1c1 0302 	rsb	r3, r1, #2
 800e1ba:	9304      	str	r3, [sp, #16]
 800e1bc:	b182      	cbz	r2, 800e1e0 <__ieee754_pow+0xe8>
 800e1be:	e05f      	b.n	800e280 <__ieee754_pow+0x188>
 800e1c0:	2a00      	cmp	r2, #0
 800e1c2:	d15b      	bne.n	800e27c <__ieee754_pow+0x184>
 800e1c4:	f1c3 0314 	rsb	r3, r3, #20
 800e1c8:	fa48 f103 	asr.w	r1, r8, r3
 800e1cc:	fa01 f303 	lsl.w	r3, r1, r3
 800e1d0:	4543      	cmp	r3, r8
 800e1d2:	f040 8487 	bne.w	800eae4 <__ieee754_pow+0x9ec>
 800e1d6:	f001 0101 	and.w	r1, r1, #1
 800e1da:	f1c1 0302 	rsb	r3, r1, #2
 800e1de:	9304      	str	r3, [sp, #16]
 800e1e0:	4b5c      	ldr	r3, [pc, #368]	; (800e354 <__ieee754_pow+0x25c>)
 800e1e2:	4598      	cmp	r8, r3
 800e1e4:	d132      	bne.n	800e24c <__ieee754_pow+0x154>
 800e1e6:	f1b9 0f00 	cmp.w	r9, #0
 800e1ea:	f280 8477 	bge.w	800eadc <__ieee754_pow+0x9e4>
 800e1ee:	4959      	ldr	r1, [pc, #356]	; (800e354 <__ieee754_pow+0x25c>)
 800e1f0:	4632      	mov	r2, r6
 800e1f2:	463b      	mov	r3, r7
 800e1f4:	2000      	movs	r0, #0
 800e1f6:	f7f2 fb39 	bl	800086c <__aeabi_ddiv>
 800e1fa:	e79c      	b.n	800e136 <__ieee754_pow+0x3e>
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	9304      	str	r3, [sp, #16]
 800e200:	2a00      	cmp	r2, #0
 800e202:	d13d      	bne.n	800e280 <__ieee754_pow+0x188>
 800e204:	4b51      	ldr	r3, [pc, #324]	; (800e34c <__ieee754_pow+0x254>)
 800e206:	4598      	cmp	r8, r3
 800e208:	d1ea      	bne.n	800e1e0 <__ieee754_pow+0xe8>
 800e20a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e20e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e212:	ea53 030a 	orrs.w	r3, r3, sl
 800e216:	f000 8459 	beq.w	800eacc <__ieee754_pow+0x9d4>
 800e21a:	4b4f      	ldr	r3, [pc, #316]	; (800e358 <__ieee754_pow+0x260>)
 800e21c:	429c      	cmp	r4, r3
 800e21e:	dd08      	ble.n	800e232 <__ieee754_pow+0x13a>
 800e220:	f1b9 0f00 	cmp.w	r9, #0
 800e224:	f2c0 8456 	blt.w	800ead4 <__ieee754_pow+0x9dc>
 800e228:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e22c:	e783      	b.n	800e136 <__ieee754_pow+0x3e>
 800e22e:	2302      	movs	r3, #2
 800e230:	e7e5      	b.n	800e1fe <__ieee754_pow+0x106>
 800e232:	f1b9 0f00 	cmp.w	r9, #0
 800e236:	f04f 0000 	mov.w	r0, #0
 800e23a:	f04f 0100 	mov.w	r1, #0
 800e23e:	f6bf af7a 	bge.w	800e136 <__ieee754_pow+0x3e>
 800e242:	e9dd 0300 	ldrd	r0, r3, [sp]
 800e246:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e24a:	e774      	b.n	800e136 <__ieee754_pow+0x3e>
 800e24c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800e250:	d106      	bne.n	800e260 <__ieee754_pow+0x168>
 800e252:	4632      	mov	r2, r6
 800e254:	463b      	mov	r3, r7
 800e256:	4630      	mov	r0, r6
 800e258:	4639      	mov	r1, r7
 800e25a:	f7f2 f9dd 	bl	8000618 <__aeabi_dmul>
 800e25e:	e76a      	b.n	800e136 <__ieee754_pow+0x3e>
 800e260:	4b3e      	ldr	r3, [pc, #248]	; (800e35c <__ieee754_pow+0x264>)
 800e262:	4599      	cmp	r9, r3
 800e264:	d10c      	bne.n	800e280 <__ieee754_pow+0x188>
 800e266:	2d00      	cmp	r5, #0
 800e268:	db0a      	blt.n	800e280 <__ieee754_pow+0x188>
 800e26a:	ec47 6b10 	vmov	d0, r6, r7
 800e26e:	b009      	add	sp, #36	; 0x24
 800e270:	ecbd 8b06 	vpop	{d8-d10}
 800e274:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e278:	f000 bd20 	b.w	800ecbc <__ieee754_sqrt>
 800e27c:	2300      	movs	r3, #0
 800e27e:	9304      	str	r3, [sp, #16]
 800e280:	ec47 6b10 	vmov	d0, r6, r7
 800e284:	f000 fc62 	bl	800eb4c <fabs>
 800e288:	ec51 0b10 	vmov	r0, r1, d0
 800e28c:	f1ba 0f00 	cmp.w	sl, #0
 800e290:	d129      	bne.n	800e2e6 <__ieee754_pow+0x1ee>
 800e292:	b124      	cbz	r4, 800e29e <__ieee754_pow+0x1a6>
 800e294:	4b2f      	ldr	r3, [pc, #188]	; (800e354 <__ieee754_pow+0x25c>)
 800e296:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800e29a:	429a      	cmp	r2, r3
 800e29c:	d123      	bne.n	800e2e6 <__ieee754_pow+0x1ee>
 800e29e:	f1b9 0f00 	cmp.w	r9, #0
 800e2a2:	da05      	bge.n	800e2b0 <__ieee754_pow+0x1b8>
 800e2a4:	4602      	mov	r2, r0
 800e2a6:	460b      	mov	r3, r1
 800e2a8:	2000      	movs	r0, #0
 800e2aa:	492a      	ldr	r1, [pc, #168]	; (800e354 <__ieee754_pow+0x25c>)
 800e2ac:	f7f2 fade 	bl	800086c <__aeabi_ddiv>
 800e2b0:	2d00      	cmp	r5, #0
 800e2b2:	f6bf af40 	bge.w	800e136 <__ieee754_pow+0x3e>
 800e2b6:	9b04      	ldr	r3, [sp, #16]
 800e2b8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e2bc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e2c0:	431c      	orrs	r4, r3
 800e2c2:	d108      	bne.n	800e2d6 <__ieee754_pow+0x1de>
 800e2c4:	4602      	mov	r2, r0
 800e2c6:	460b      	mov	r3, r1
 800e2c8:	4610      	mov	r0, r2
 800e2ca:	4619      	mov	r1, r3
 800e2cc:	f7f1 ffec 	bl	80002a8 <__aeabi_dsub>
 800e2d0:	4602      	mov	r2, r0
 800e2d2:	460b      	mov	r3, r1
 800e2d4:	e78f      	b.n	800e1f6 <__ieee754_pow+0xfe>
 800e2d6:	9b04      	ldr	r3, [sp, #16]
 800e2d8:	2b01      	cmp	r3, #1
 800e2da:	f47f af2c 	bne.w	800e136 <__ieee754_pow+0x3e>
 800e2de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e2e2:	4619      	mov	r1, r3
 800e2e4:	e727      	b.n	800e136 <__ieee754_pow+0x3e>
 800e2e6:	0feb      	lsrs	r3, r5, #31
 800e2e8:	3b01      	subs	r3, #1
 800e2ea:	9306      	str	r3, [sp, #24]
 800e2ec:	9a06      	ldr	r2, [sp, #24]
 800e2ee:	9b04      	ldr	r3, [sp, #16]
 800e2f0:	4313      	orrs	r3, r2
 800e2f2:	d102      	bne.n	800e2fa <__ieee754_pow+0x202>
 800e2f4:	4632      	mov	r2, r6
 800e2f6:	463b      	mov	r3, r7
 800e2f8:	e7e6      	b.n	800e2c8 <__ieee754_pow+0x1d0>
 800e2fa:	4b19      	ldr	r3, [pc, #100]	; (800e360 <__ieee754_pow+0x268>)
 800e2fc:	4598      	cmp	r8, r3
 800e2fe:	f340 80fb 	ble.w	800e4f8 <__ieee754_pow+0x400>
 800e302:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800e306:	4598      	cmp	r8, r3
 800e308:	4b13      	ldr	r3, [pc, #76]	; (800e358 <__ieee754_pow+0x260>)
 800e30a:	dd0c      	ble.n	800e326 <__ieee754_pow+0x22e>
 800e30c:	429c      	cmp	r4, r3
 800e30e:	dc0f      	bgt.n	800e330 <__ieee754_pow+0x238>
 800e310:	f1b9 0f00 	cmp.w	r9, #0
 800e314:	da0f      	bge.n	800e336 <__ieee754_pow+0x23e>
 800e316:	2000      	movs	r0, #0
 800e318:	b009      	add	sp, #36	; 0x24
 800e31a:	ecbd 8b06 	vpop	{d8-d10}
 800e31e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e322:	f000 bcc2 	b.w	800ecaa <__math_oflow>
 800e326:	429c      	cmp	r4, r3
 800e328:	dbf2      	blt.n	800e310 <__ieee754_pow+0x218>
 800e32a:	4b0a      	ldr	r3, [pc, #40]	; (800e354 <__ieee754_pow+0x25c>)
 800e32c:	429c      	cmp	r4, r3
 800e32e:	dd19      	ble.n	800e364 <__ieee754_pow+0x26c>
 800e330:	f1b9 0f00 	cmp.w	r9, #0
 800e334:	dcef      	bgt.n	800e316 <__ieee754_pow+0x21e>
 800e336:	2000      	movs	r0, #0
 800e338:	b009      	add	sp, #36	; 0x24
 800e33a:	ecbd 8b06 	vpop	{d8-d10}
 800e33e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e342:	f000 bca9 	b.w	800ec98 <__math_uflow>
 800e346:	bf00      	nop
 800e348:	fff00000 	.word	0xfff00000
 800e34c:	7ff00000 	.word	0x7ff00000
 800e350:	433fffff 	.word	0x433fffff
 800e354:	3ff00000 	.word	0x3ff00000
 800e358:	3fefffff 	.word	0x3fefffff
 800e35c:	3fe00000 	.word	0x3fe00000
 800e360:	41e00000 	.word	0x41e00000
 800e364:	4b60      	ldr	r3, [pc, #384]	; (800e4e8 <__ieee754_pow+0x3f0>)
 800e366:	2200      	movs	r2, #0
 800e368:	f7f1 ff9e 	bl	80002a8 <__aeabi_dsub>
 800e36c:	a354      	add	r3, pc, #336	; (adr r3, 800e4c0 <__ieee754_pow+0x3c8>)
 800e36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e372:	4604      	mov	r4, r0
 800e374:	460d      	mov	r5, r1
 800e376:	f7f2 f94f 	bl	8000618 <__aeabi_dmul>
 800e37a:	a353      	add	r3, pc, #332	; (adr r3, 800e4c8 <__ieee754_pow+0x3d0>)
 800e37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e380:	4606      	mov	r6, r0
 800e382:	460f      	mov	r7, r1
 800e384:	4620      	mov	r0, r4
 800e386:	4629      	mov	r1, r5
 800e388:	f7f2 f946 	bl	8000618 <__aeabi_dmul>
 800e38c:	4b57      	ldr	r3, [pc, #348]	; (800e4ec <__ieee754_pow+0x3f4>)
 800e38e:	4682      	mov	sl, r0
 800e390:	468b      	mov	fp, r1
 800e392:	2200      	movs	r2, #0
 800e394:	4620      	mov	r0, r4
 800e396:	4629      	mov	r1, r5
 800e398:	f7f2 f93e 	bl	8000618 <__aeabi_dmul>
 800e39c:	4602      	mov	r2, r0
 800e39e:	460b      	mov	r3, r1
 800e3a0:	a14b      	add	r1, pc, #300	; (adr r1, 800e4d0 <__ieee754_pow+0x3d8>)
 800e3a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e3a6:	f7f1 ff7f 	bl	80002a8 <__aeabi_dsub>
 800e3aa:	4622      	mov	r2, r4
 800e3ac:	462b      	mov	r3, r5
 800e3ae:	f7f2 f933 	bl	8000618 <__aeabi_dmul>
 800e3b2:	4602      	mov	r2, r0
 800e3b4:	460b      	mov	r3, r1
 800e3b6:	2000      	movs	r0, #0
 800e3b8:	494d      	ldr	r1, [pc, #308]	; (800e4f0 <__ieee754_pow+0x3f8>)
 800e3ba:	f7f1 ff75 	bl	80002a8 <__aeabi_dsub>
 800e3be:	4622      	mov	r2, r4
 800e3c0:	4680      	mov	r8, r0
 800e3c2:	4689      	mov	r9, r1
 800e3c4:	462b      	mov	r3, r5
 800e3c6:	4620      	mov	r0, r4
 800e3c8:	4629      	mov	r1, r5
 800e3ca:	f7f2 f925 	bl	8000618 <__aeabi_dmul>
 800e3ce:	4602      	mov	r2, r0
 800e3d0:	460b      	mov	r3, r1
 800e3d2:	4640      	mov	r0, r8
 800e3d4:	4649      	mov	r1, r9
 800e3d6:	f7f2 f91f 	bl	8000618 <__aeabi_dmul>
 800e3da:	a33f      	add	r3, pc, #252	; (adr r3, 800e4d8 <__ieee754_pow+0x3e0>)
 800e3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3e0:	f7f2 f91a 	bl	8000618 <__aeabi_dmul>
 800e3e4:	4602      	mov	r2, r0
 800e3e6:	460b      	mov	r3, r1
 800e3e8:	4650      	mov	r0, sl
 800e3ea:	4659      	mov	r1, fp
 800e3ec:	f7f1 ff5c 	bl	80002a8 <__aeabi_dsub>
 800e3f0:	4602      	mov	r2, r0
 800e3f2:	460b      	mov	r3, r1
 800e3f4:	4680      	mov	r8, r0
 800e3f6:	4689      	mov	r9, r1
 800e3f8:	4630      	mov	r0, r6
 800e3fa:	4639      	mov	r1, r7
 800e3fc:	f7f1 ff56 	bl	80002ac <__adddf3>
 800e400:	2000      	movs	r0, #0
 800e402:	4632      	mov	r2, r6
 800e404:	463b      	mov	r3, r7
 800e406:	4604      	mov	r4, r0
 800e408:	460d      	mov	r5, r1
 800e40a:	f7f1 ff4d 	bl	80002a8 <__aeabi_dsub>
 800e40e:	4602      	mov	r2, r0
 800e410:	460b      	mov	r3, r1
 800e412:	4640      	mov	r0, r8
 800e414:	4649      	mov	r1, r9
 800e416:	f7f1 ff47 	bl	80002a8 <__aeabi_dsub>
 800e41a:	9b04      	ldr	r3, [sp, #16]
 800e41c:	9a06      	ldr	r2, [sp, #24]
 800e41e:	3b01      	subs	r3, #1
 800e420:	4313      	orrs	r3, r2
 800e422:	4682      	mov	sl, r0
 800e424:	468b      	mov	fp, r1
 800e426:	f040 81e7 	bne.w	800e7f8 <__ieee754_pow+0x700>
 800e42a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800e4e0 <__ieee754_pow+0x3e8>
 800e42e:	eeb0 8a47 	vmov.f32	s16, s14
 800e432:	eef0 8a67 	vmov.f32	s17, s15
 800e436:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e43a:	2600      	movs	r6, #0
 800e43c:	4632      	mov	r2, r6
 800e43e:	463b      	mov	r3, r7
 800e440:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e444:	f7f1 ff30 	bl	80002a8 <__aeabi_dsub>
 800e448:	4622      	mov	r2, r4
 800e44a:	462b      	mov	r3, r5
 800e44c:	f7f2 f8e4 	bl	8000618 <__aeabi_dmul>
 800e450:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e454:	4680      	mov	r8, r0
 800e456:	4689      	mov	r9, r1
 800e458:	4650      	mov	r0, sl
 800e45a:	4659      	mov	r1, fp
 800e45c:	f7f2 f8dc 	bl	8000618 <__aeabi_dmul>
 800e460:	4602      	mov	r2, r0
 800e462:	460b      	mov	r3, r1
 800e464:	4640      	mov	r0, r8
 800e466:	4649      	mov	r1, r9
 800e468:	f7f1 ff20 	bl	80002ac <__adddf3>
 800e46c:	4632      	mov	r2, r6
 800e46e:	463b      	mov	r3, r7
 800e470:	4680      	mov	r8, r0
 800e472:	4689      	mov	r9, r1
 800e474:	4620      	mov	r0, r4
 800e476:	4629      	mov	r1, r5
 800e478:	f7f2 f8ce 	bl	8000618 <__aeabi_dmul>
 800e47c:	460b      	mov	r3, r1
 800e47e:	4604      	mov	r4, r0
 800e480:	460d      	mov	r5, r1
 800e482:	4602      	mov	r2, r0
 800e484:	4649      	mov	r1, r9
 800e486:	4640      	mov	r0, r8
 800e488:	f7f1 ff10 	bl	80002ac <__adddf3>
 800e48c:	4b19      	ldr	r3, [pc, #100]	; (800e4f4 <__ieee754_pow+0x3fc>)
 800e48e:	4299      	cmp	r1, r3
 800e490:	ec45 4b19 	vmov	d9, r4, r5
 800e494:	4606      	mov	r6, r0
 800e496:	460f      	mov	r7, r1
 800e498:	468b      	mov	fp, r1
 800e49a:	f340 82f0 	ble.w	800ea7e <__ieee754_pow+0x986>
 800e49e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800e4a2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e4a6:	4303      	orrs	r3, r0
 800e4a8:	f000 81e4 	beq.w	800e874 <__ieee754_pow+0x77c>
 800e4ac:	ec51 0b18 	vmov	r0, r1, d8
 800e4b0:	2200      	movs	r2, #0
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	f7f2 fb22 	bl	8000afc <__aeabi_dcmplt>
 800e4b8:	3800      	subs	r0, #0
 800e4ba:	bf18      	it	ne
 800e4bc:	2001      	movne	r0, #1
 800e4be:	e72b      	b.n	800e318 <__ieee754_pow+0x220>
 800e4c0:	60000000 	.word	0x60000000
 800e4c4:	3ff71547 	.word	0x3ff71547
 800e4c8:	f85ddf44 	.word	0xf85ddf44
 800e4cc:	3e54ae0b 	.word	0x3e54ae0b
 800e4d0:	55555555 	.word	0x55555555
 800e4d4:	3fd55555 	.word	0x3fd55555
 800e4d8:	652b82fe 	.word	0x652b82fe
 800e4dc:	3ff71547 	.word	0x3ff71547
 800e4e0:	00000000 	.word	0x00000000
 800e4e4:	bff00000 	.word	0xbff00000
 800e4e8:	3ff00000 	.word	0x3ff00000
 800e4ec:	3fd00000 	.word	0x3fd00000
 800e4f0:	3fe00000 	.word	0x3fe00000
 800e4f4:	408fffff 	.word	0x408fffff
 800e4f8:	4bd5      	ldr	r3, [pc, #852]	; (800e850 <__ieee754_pow+0x758>)
 800e4fa:	402b      	ands	r3, r5
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	b92b      	cbnz	r3, 800e50c <__ieee754_pow+0x414>
 800e500:	4bd4      	ldr	r3, [pc, #848]	; (800e854 <__ieee754_pow+0x75c>)
 800e502:	f7f2 f889 	bl	8000618 <__aeabi_dmul>
 800e506:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800e50a:	460c      	mov	r4, r1
 800e50c:	1523      	asrs	r3, r4, #20
 800e50e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e512:	4413      	add	r3, r2
 800e514:	9305      	str	r3, [sp, #20]
 800e516:	4bd0      	ldr	r3, [pc, #832]	; (800e858 <__ieee754_pow+0x760>)
 800e518:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e51c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800e520:	429c      	cmp	r4, r3
 800e522:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e526:	dd08      	ble.n	800e53a <__ieee754_pow+0x442>
 800e528:	4bcc      	ldr	r3, [pc, #816]	; (800e85c <__ieee754_pow+0x764>)
 800e52a:	429c      	cmp	r4, r3
 800e52c:	f340 8162 	ble.w	800e7f4 <__ieee754_pow+0x6fc>
 800e530:	9b05      	ldr	r3, [sp, #20]
 800e532:	3301      	adds	r3, #1
 800e534:	9305      	str	r3, [sp, #20]
 800e536:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800e53a:	2400      	movs	r4, #0
 800e53c:	00e3      	lsls	r3, r4, #3
 800e53e:	9307      	str	r3, [sp, #28]
 800e540:	4bc7      	ldr	r3, [pc, #796]	; (800e860 <__ieee754_pow+0x768>)
 800e542:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e546:	ed93 7b00 	vldr	d7, [r3]
 800e54a:	4629      	mov	r1, r5
 800e54c:	ec53 2b17 	vmov	r2, r3, d7
 800e550:	eeb0 9a47 	vmov.f32	s18, s14
 800e554:	eef0 9a67 	vmov.f32	s19, s15
 800e558:	4682      	mov	sl, r0
 800e55a:	f7f1 fea5 	bl	80002a8 <__aeabi_dsub>
 800e55e:	4652      	mov	r2, sl
 800e560:	4606      	mov	r6, r0
 800e562:	460f      	mov	r7, r1
 800e564:	462b      	mov	r3, r5
 800e566:	ec51 0b19 	vmov	r0, r1, d9
 800e56a:	f7f1 fe9f 	bl	80002ac <__adddf3>
 800e56e:	4602      	mov	r2, r0
 800e570:	460b      	mov	r3, r1
 800e572:	2000      	movs	r0, #0
 800e574:	49bb      	ldr	r1, [pc, #748]	; (800e864 <__ieee754_pow+0x76c>)
 800e576:	f7f2 f979 	bl	800086c <__aeabi_ddiv>
 800e57a:	ec41 0b1a 	vmov	d10, r0, r1
 800e57e:	4602      	mov	r2, r0
 800e580:	460b      	mov	r3, r1
 800e582:	4630      	mov	r0, r6
 800e584:	4639      	mov	r1, r7
 800e586:	f7f2 f847 	bl	8000618 <__aeabi_dmul>
 800e58a:	2300      	movs	r3, #0
 800e58c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e590:	9302      	str	r3, [sp, #8]
 800e592:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e596:	46ab      	mov	fp, r5
 800e598:	106d      	asrs	r5, r5, #1
 800e59a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800e59e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800e5a2:	ec41 0b18 	vmov	d8, r0, r1
 800e5a6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800e5aa:	2200      	movs	r2, #0
 800e5ac:	4640      	mov	r0, r8
 800e5ae:	4649      	mov	r1, r9
 800e5b0:	4614      	mov	r4, r2
 800e5b2:	461d      	mov	r5, r3
 800e5b4:	f7f2 f830 	bl	8000618 <__aeabi_dmul>
 800e5b8:	4602      	mov	r2, r0
 800e5ba:	460b      	mov	r3, r1
 800e5bc:	4630      	mov	r0, r6
 800e5be:	4639      	mov	r1, r7
 800e5c0:	f7f1 fe72 	bl	80002a8 <__aeabi_dsub>
 800e5c4:	ec53 2b19 	vmov	r2, r3, d9
 800e5c8:	4606      	mov	r6, r0
 800e5ca:	460f      	mov	r7, r1
 800e5cc:	4620      	mov	r0, r4
 800e5ce:	4629      	mov	r1, r5
 800e5d0:	f7f1 fe6a 	bl	80002a8 <__aeabi_dsub>
 800e5d4:	4602      	mov	r2, r0
 800e5d6:	460b      	mov	r3, r1
 800e5d8:	4650      	mov	r0, sl
 800e5da:	4659      	mov	r1, fp
 800e5dc:	f7f1 fe64 	bl	80002a8 <__aeabi_dsub>
 800e5e0:	4642      	mov	r2, r8
 800e5e2:	464b      	mov	r3, r9
 800e5e4:	f7f2 f818 	bl	8000618 <__aeabi_dmul>
 800e5e8:	4602      	mov	r2, r0
 800e5ea:	460b      	mov	r3, r1
 800e5ec:	4630      	mov	r0, r6
 800e5ee:	4639      	mov	r1, r7
 800e5f0:	f7f1 fe5a 	bl	80002a8 <__aeabi_dsub>
 800e5f4:	ec53 2b1a 	vmov	r2, r3, d10
 800e5f8:	f7f2 f80e 	bl	8000618 <__aeabi_dmul>
 800e5fc:	ec53 2b18 	vmov	r2, r3, d8
 800e600:	ec41 0b19 	vmov	d9, r0, r1
 800e604:	ec51 0b18 	vmov	r0, r1, d8
 800e608:	f7f2 f806 	bl	8000618 <__aeabi_dmul>
 800e60c:	a37c      	add	r3, pc, #496	; (adr r3, 800e800 <__ieee754_pow+0x708>)
 800e60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e612:	4604      	mov	r4, r0
 800e614:	460d      	mov	r5, r1
 800e616:	f7f1 ffff 	bl	8000618 <__aeabi_dmul>
 800e61a:	a37b      	add	r3, pc, #492	; (adr r3, 800e808 <__ieee754_pow+0x710>)
 800e61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e620:	f7f1 fe44 	bl	80002ac <__adddf3>
 800e624:	4622      	mov	r2, r4
 800e626:	462b      	mov	r3, r5
 800e628:	f7f1 fff6 	bl	8000618 <__aeabi_dmul>
 800e62c:	a378      	add	r3, pc, #480	; (adr r3, 800e810 <__ieee754_pow+0x718>)
 800e62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e632:	f7f1 fe3b 	bl	80002ac <__adddf3>
 800e636:	4622      	mov	r2, r4
 800e638:	462b      	mov	r3, r5
 800e63a:	f7f1 ffed 	bl	8000618 <__aeabi_dmul>
 800e63e:	a376      	add	r3, pc, #472	; (adr r3, 800e818 <__ieee754_pow+0x720>)
 800e640:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e644:	f7f1 fe32 	bl	80002ac <__adddf3>
 800e648:	4622      	mov	r2, r4
 800e64a:	462b      	mov	r3, r5
 800e64c:	f7f1 ffe4 	bl	8000618 <__aeabi_dmul>
 800e650:	a373      	add	r3, pc, #460	; (adr r3, 800e820 <__ieee754_pow+0x728>)
 800e652:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e656:	f7f1 fe29 	bl	80002ac <__adddf3>
 800e65a:	4622      	mov	r2, r4
 800e65c:	462b      	mov	r3, r5
 800e65e:	f7f1 ffdb 	bl	8000618 <__aeabi_dmul>
 800e662:	a371      	add	r3, pc, #452	; (adr r3, 800e828 <__ieee754_pow+0x730>)
 800e664:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e668:	f7f1 fe20 	bl	80002ac <__adddf3>
 800e66c:	4622      	mov	r2, r4
 800e66e:	4606      	mov	r6, r0
 800e670:	460f      	mov	r7, r1
 800e672:	462b      	mov	r3, r5
 800e674:	4620      	mov	r0, r4
 800e676:	4629      	mov	r1, r5
 800e678:	f7f1 ffce 	bl	8000618 <__aeabi_dmul>
 800e67c:	4602      	mov	r2, r0
 800e67e:	460b      	mov	r3, r1
 800e680:	4630      	mov	r0, r6
 800e682:	4639      	mov	r1, r7
 800e684:	f7f1 ffc8 	bl	8000618 <__aeabi_dmul>
 800e688:	4642      	mov	r2, r8
 800e68a:	4604      	mov	r4, r0
 800e68c:	460d      	mov	r5, r1
 800e68e:	464b      	mov	r3, r9
 800e690:	ec51 0b18 	vmov	r0, r1, d8
 800e694:	f7f1 fe0a 	bl	80002ac <__adddf3>
 800e698:	ec53 2b19 	vmov	r2, r3, d9
 800e69c:	f7f1 ffbc 	bl	8000618 <__aeabi_dmul>
 800e6a0:	4622      	mov	r2, r4
 800e6a2:	462b      	mov	r3, r5
 800e6a4:	f7f1 fe02 	bl	80002ac <__adddf3>
 800e6a8:	4642      	mov	r2, r8
 800e6aa:	4682      	mov	sl, r0
 800e6ac:	468b      	mov	fp, r1
 800e6ae:	464b      	mov	r3, r9
 800e6b0:	4640      	mov	r0, r8
 800e6b2:	4649      	mov	r1, r9
 800e6b4:	f7f1 ffb0 	bl	8000618 <__aeabi_dmul>
 800e6b8:	4b6b      	ldr	r3, [pc, #428]	; (800e868 <__ieee754_pow+0x770>)
 800e6ba:	2200      	movs	r2, #0
 800e6bc:	4606      	mov	r6, r0
 800e6be:	460f      	mov	r7, r1
 800e6c0:	f7f1 fdf4 	bl	80002ac <__adddf3>
 800e6c4:	4652      	mov	r2, sl
 800e6c6:	465b      	mov	r3, fp
 800e6c8:	f7f1 fdf0 	bl	80002ac <__adddf3>
 800e6cc:	2000      	movs	r0, #0
 800e6ce:	4604      	mov	r4, r0
 800e6d0:	460d      	mov	r5, r1
 800e6d2:	4602      	mov	r2, r0
 800e6d4:	460b      	mov	r3, r1
 800e6d6:	4640      	mov	r0, r8
 800e6d8:	4649      	mov	r1, r9
 800e6da:	f7f1 ff9d 	bl	8000618 <__aeabi_dmul>
 800e6de:	4b62      	ldr	r3, [pc, #392]	; (800e868 <__ieee754_pow+0x770>)
 800e6e0:	4680      	mov	r8, r0
 800e6e2:	4689      	mov	r9, r1
 800e6e4:	2200      	movs	r2, #0
 800e6e6:	4620      	mov	r0, r4
 800e6e8:	4629      	mov	r1, r5
 800e6ea:	f7f1 fddd 	bl	80002a8 <__aeabi_dsub>
 800e6ee:	4632      	mov	r2, r6
 800e6f0:	463b      	mov	r3, r7
 800e6f2:	f7f1 fdd9 	bl	80002a8 <__aeabi_dsub>
 800e6f6:	4602      	mov	r2, r0
 800e6f8:	460b      	mov	r3, r1
 800e6fa:	4650      	mov	r0, sl
 800e6fc:	4659      	mov	r1, fp
 800e6fe:	f7f1 fdd3 	bl	80002a8 <__aeabi_dsub>
 800e702:	ec53 2b18 	vmov	r2, r3, d8
 800e706:	f7f1 ff87 	bl	8000618 <__aeabi_dmul>
 800e70a:	4622      	mov	r2, r4
 800e70c:	4606      	mov	r6, r0
 800e70e:	460f      	mov	r7, r1
 800e710:	462b      	mov	r3, r5
 800e712:	ec51 0b19 	vmov	r0, r1, d9
 800e716:	f7f1 ff7f 	bl	8000618 <__aeabi_dmul>
 800e71a:	4602      	mov	r2, r0
 800e71c:	460b      	mov	r3, r1
 800e71e:	4630      	mov	r0, r6
 800e720:	4639      	mov	r1, r7
 800e722:	f7f1 fdc3 	bl	80002ac <__adddf3>
 800e726:	4606      	mov	r6, r0
 800e728:	460f      	mov	r7, r1
 800e72a:	4602      	mov	r2, r0
 800e72c:	460b      	mov	r3, r1
 800e72e:	4640      	mov	r0, r8
 800e730:	4649      	mov	r1, r9
 800e732:	f7f1 fdbb 	bl	80002ac <__adddf3>
 800e736:	a33e      	add	r3, pc, #248	; (adr r3, 800e830 <__ieee754_pow+0x738>)
 800e738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e73c:	2000      	movs	r0, #0
 800e73e:	4604      	mov	r4, r0
 800e740:	460d      	mov	r5, r1
 800e742:	f7f1 ff69 	bl	8000618 <__aeabi_dmul>
 800e746:	4642      	mov	r2, r8
 800e748:	ec41 0b18 	vmov	d8, r0, r1
 800e74c:	464b      	mov	r3, r9
 800e74e:	4620      	mov	r0, r4
 800e750:	4629      	mov	r1, r5
 800e752:	f7f1 fda9 	bl	80002a8 <__aeabi_dsub>
 800e756:	4602      	mov	r2, r0
 800e758:	460b      	mov	r3, r1
 800e75a:	4630      	mov	r0, r6
 800e75c:	4639      	mov	r1, r7
 800e75e:	f7f1 fda3 	bl	80002a8 <__aeabi_dsub>
 800e762:	a335      	add	r3, pc, #212	; (adr r3, 800e838 <__ieee754_pow+0x740>)
 800e764:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e768:	f7f1 ff56 	bl	8000618 <__aeabi_dmul>
 800e76c:	a334      	add	r3, pc, #208	; (adr r3, 800e840 <__ieee754_pow+0x748>)
 800e76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e772:	4606      	mov	r6, r0
 800e774:	460f      	mov	r7, r1
 800e776:	4620      	mov	r0, r4
 800e778:	4629      	mov	r1, r5
 800e77a:	f7f1 ff4d 	bl	8000618 <__aeabi_dmul>
 800e77e:	4602      	mov	r2, r0
 800e780:	460b      	mov	r3, r1
 800e782:	4630      	mov	r0, r6
 800e784:	4639      	mov	r1, r7
 800e786:	f7f1 fd91 	bl	80002ac <__adddf3>
 800e78a:	9a07      	ldr	r2, [sp, #28]
 800e78c:	4b37      	ldr	r3, [pc, #220]	; (800e86c <__ieee754_pow+0x774>)
 800e78e:	4413      	add	r3, r2
 800e790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e794:	f7f1 fd8a 	bl	80002ac <__adddf3>
 800e798:	4682      	mov	sl, r0
 800e79a:	9805      	ldr	r0, [sp, #20]
 800e79c:	468b      	mov	fp, r1
 800e79e:	f7f1 fed1 	bl	8000544 <__aeabi_i2d>
 800e7a2:	9a07      	ldr	r2, [sp, #28]
 800e7a4:	4b32      	ldr	r3, [pc, #200]	; (800e870 <__ieee754_pow+0x778>)
 800e7a6:	4413      	add	r3, r2
 800e7a8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e7ac:	4606      	mov	r6, r0
 800e7ae:	460f      	mov	r7, r1
 800e7b0:	4652      	mov	r2, sl
 800e7b2:	465b      	mov	r3, fp
 800e7b4:	ec51 0b18 	vmov	r0, r1, d8
 800e7b8:	f7f1 fd78 	bl	80002ac <__adddf3>
 800e7bc:	4642      	mov	r2, r8
 800e7be:	464b      	mov	r3, r9
 800e7c0:	f7f1 fd74 	bl	80002ac <__adddf3>
 800e7c4:	4632      	mov	r2, r6
 800e7c6:	463b      	mov	r3, r7
 800e7c8:	f7f1 fd70 	bl	80002ac <__adddf3>
 800e7cc:	2000      	movs	r0, #0
 800e7ce:	4632      	mov	r2, r6
 800e7d0:	463b      	mov	r3, r7
 800e7d2:	4604      	mov	r4, r0
 800e7d4:	460d      	mov	r5, r1
 800e7d6:	f7f1 fd67 	bl	80002a8 <__aeabi_dsub>
 800e7da:	4642      	mov	r2, r8
 800e7dc:	464b      	mov	r3, r9
 800e7de:	f7f1 fd63 	bl	80002a8 <__aeabi_dsub>
 800e7e2:	ec53 2b18 	vmov	r2, r3, d8
 800e7e6:	f7f1 fd5f 	bl	80002a8 <__aeabi_dsub>
 800e7ea:	4602      	mov	r2, r0
 800e7ec:	460b      	mov	r3, r1
 800e7ee:	4650      	mov	r0, sl
 800e7f0:	4659      	mov	r1, fp
 800e7f2:	e610      	b.n	800e416 <__ieee754_pow+0x31e>
 800e7f4:	2401      	movs	r4, #1
 800e7f6:	e6a1      	b.n	800e53c <__ieee754_pow+0x444>
 800e7f8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800e848 <__ieee754_pow+0x750>
 800e7fc:	e617      	b.n	800e42e <__ieee754_pow+0x336>
 800e7fe:	bf00      	nop
 800e800:	4a454eef 	.word	0x4a454eef
 800e804:	3fca7e28 	.word	0x3fca7e28
 800e808:	93c9db65 	.word	0x93c9db65
 800e80c:	3fcd864a 	.word	0x3fcd864a
 800e810:	a91d4101 	.word	0xa91d4101
 800e814:	3fd17460 	.word	0x3fd17460
 800e818:	518f264d 	.word	0x518f264d
 800e81c:	3fd55555 	.word	0x3fd55555
 800e820:	db6fabff 	.word	0xdb6fabff
 800e824:	3fdb6db6 	.word	0x3fdb6db6
 800e828:	33333303 	.word	0x33333303
 800e82c:	3fe33333 	.word	0x3fe33333
 800e830:	e0000000 	.word	0xe0000000
 800e834:	3feec709 	.word	0x3feec709
 800e838:	dc3a03fd 	.word	0xdc3a03fd
 800e83c:	3feec709 	.word	0x3feec709
 800e840:	145b01f5 	.word	0x145b01f5
 800e844:	be3e2fe0 	.word	0xbe3e2fe0
 800e848:	00000000 	.word	0x00000000
 800e84c:	3ff00000 	.word	0x3ff00000
 800e850:	7ff00000 	.word	0x7ff00000
 800e854:	43400000 	.word	0x43400000
 800e858:	0003988e 	.word	0x0003988e
 800e85c:	000bb679 	.word	0x000bb679
 800e860:	0800f610 	.word	0x0800f610
 800e864:	3ff00000 	.word	0x3ff00000
 800e868:	40080000 	.word	0x40080000
 800e86c:	0800f630 	.word	0x0800f630
 800e870:	0800f620 	.word	0x0800f620
 800e874:	a3b3      	add	r3, pc, #716	; (adr r3, 800eb44 <__ieee754_pow+0xa4c>)
 800e876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e87a:	4640      	mov	r0, r8
 800e87c:	4649      	mov	r1, r9
 800e87e:	f7f1 fd15 	bl	80002ac <__adddf3>
 800e882:	4622      	mov	r2, r4
 800e884:	ec41 0b1a 	vmov	d10, r0, r1
 800e888:	462b      	mov	r3, r5
 800e88a:	4630      	mov	r0, r6
 800e88c:	4639      	mov	r1, r7
 800e88e:	f7f1 fd0b 	bl	80002a8 <__aeabi_dsub>
 800e892:	4602      	mov	r2, r0
 800e894:	460b      	mov	r3, r1
 800e896:	ec51 0b1a 	vmov	r0, r1, d10
 800e89a:	f7f2 f94d 	bl	8000b38 <__aeabi_dcmpgt>
 800e89e:	2800      	cmp	r0, #0
 800e8a0:	f47f ae04 	bne.w	800e4ac <__ieee754_pow+0x3b4>
 800e8a4:	4aa2      	ldr	r2, [pc, #648]	; (800eb30 <__ieee754_pow+0xa38>)
 800e8a6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e8aa:	4293      	cmp	r3, r2
 800e8ac:	f340 8107 	ble.w	800eabe <__ieee754_pow+0x9c6>
 800e8b0:	151b      	asrs	r3, r3, #20
 800e8b2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800e8b6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800e8ba:	fa4a fa03 	asr.w	sl, sl, r3
 800e8be:	44da      	add	sl, fp
 800e8c0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800e8c4:	489b      	ldr	r0, [pc, #620]	; (800eb34 <__ieee754_pow+0xa3c>)
 800e8c6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800e8ca:	4108      	asrs	r0, r1
 800e8cc:	ea00 030a 	and.w	r3, r0, sl
 800e8d0:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800e8d4:	f1c1 0114 	rsb	r1, r1, #20
 800e8d8:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800e8dc:	fa4a fa01 	asr.w	sl, sl, r1
 800e8e0:	f1bb 0f00 	cmp.w	fp, #0
 800e8e4:	f04f 0200 	mov.w	r2, #0
 800e8e8:	4620      	mov	r0, r4
 800e8ea:	4629      	mov	r1, r5
 800e8ec:	bfb8      	it	lt
 800e8ee:	f1ca 0a00 	rsblt	sl, sl, #0
 800e8f2:	f7f1 fcd9 	bl	80002a8 <__aeabi_dsub>
 800e8f6:	ec41 0b19 	vmov	d9, r0, r1
 800e8fa:	4642      	mov	r2, r8
 800e8fc:	464b      	mov	r3, r9
 800e8fe:	ec51 0b19 	vmov	r0, r1, d9
 800e902:	f7f1 fcd3 	bl	80002ac <__adddf3>
 800e906:	a37a      	add	r3, pc, #488	; (adr r3, 800eaf0 <__ieee754_pow+0x9f8>)
 800e908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e90c:	2000      	movs	r0, #0
 800e90e:	4604      	mov	r4, r0
 800e910:	460d      	mov	r5, r1
 800e912:	f7f1 fe81 	bl	8000618 <__aeabi_dmul>
 800e916:	ec53 2b19 	vmov	r2, r3, d9
 800e91a:	4606      	mov	r6, r0
 800e91c:	460f      	mov	r7, r1
 800e91e:	4620      	mov	r0, r4
 800e920:	4629      	mov	r1, r5
 800e922:	f7f1 fcc1 	bl	80002a8 <__aeabi_dsub>
 800e926:	4602      	mov	r2, r0
 800e928:	460b      	mov	r3, r1
 800e92a:	4640      	mov	r0, r8
 800e92c:	4649      	mov	r1, r9
 800e92e:	f7f1 fcbb 	bl	80002a8 <__aeabi_dsub>
 800e932:	a371      	add	r3, pc, #452	; (adr r3, 800eaf8 <__ieee754_pow+0xa00>)
 800e934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e938:	f7f1 fe6e 	bl	8000618 <__aeabi_dmul>
 800e93c:	a370      	add	r3, pc, #448	; (adr r3, 800eb00 <__ieee754_pow+0xa08>)
 800e93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e942:	4680      	mov	r8, r0
 800e944:	4689      	mov	r9, r1
 800e946:	4620      	mov	r0, r4
 800e948:	4629      	mov	r1, r5
 800e94a:	f7f1 fe65 	bl	8000618 <__aeabi_dmul>
 800e94e:	4602      	mov	r2, r0
 800e950:	460b      	mov	r3, r1
 800e952:	4640      	mov	r0, r8
 800e954:	4649      	mov	r1, r9
 800e956:	f7f1 fca9 	bl	80002ac <__adddf3>
 800e95a:	4604      	mov	r4, r0
 800e95c:	460d      	mov	r5, r1
 800e95e:	4602      	mov	r2, r0
 800e960:	460b      	mov	r3, r1
 800e962:	4630      	mov	r0, r6
 800e964:	4639      	mov	r1, r7
 800e966:	f7f1 fca1 	bl	80002ac <__adddf3>
 800e96a:	4632      	mov	r2, r6
 800e96c:	463b      	mov	r3, r7
 800e96e:	4680      	mov	r8, r0
 800e970:	4689      	mov	r9, r1
 800e972:	f7f1 fc99 	bl	80002a8 <__aeabi_dsub>
 800e976:	4602      	mov	r2, r0
 800e978:	460b      	mov	r3, r1
 800e97a:	4620      	mov	r0, r4
 800e97c:	4629      	mov	r1, r5
 800e97e:	f7f1 fc93 	bl	80002a8 <__aeabi_dsub>
 800e982:	4642      	mov	r2, r8
 800e984:	4606      	mov	r6, r0
 800e986:	460f      	mov	r7, r1
 800e988:	464b      	mov	r3, r9
 800e98a:	4640      	mov	r0, r8
 800e98c:	4649      	mov	r1, r9
 800e98e:	f7f1 fe43 	bl	8000618 <__aeabi_dmul>
 800e992:	a35d      	add	r3, pc, #372	; (adr r3, 800eb08 <__ieee754_pow+0xa10>)
 800e994:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e998:	4604      	mov	r4, r0
 800e99a:	460d      	mov	r5, r1
 800e99c:	f7f1 fe3c 	bl	8000618 <__aeabi_dmul>
 800e9a0:	a35b      	add	r3, pc, #364	; (adr r3, 800eb10 <__ieee754_pow+0xa18>)
 800e9a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9a6:	f7f1 fc7f 	bl	80002a8 <__aeabi_dsub>
 800e9aa:	4622      	mov	r2, r4
 800e9ac:	462b      	mov	r3, r5
 800e9ae:	f7f1 fe33 	bl	8000618 <__aeabi_dmul>
 800e9b2:	a359      	add	r3, pc, #356	; (adr r3, 800eb18 <__ieee754_pow+0xa20>)
 800e9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9b8:	f7f1 fc78 	bl	80002ac <__adddf3>
 800e9bc:	4622      	mov	r2, r4
 800e9be:	462b      	mov	r3, r5
 800e9c0:	f7f1 fe2a 	bl	8000618 <__aeabi_dmul>
 800e9c4:	a356      	add	r3, pc, #344	; (adr r3, 800eb20 <__ieee754_pow+0xa28>)
 800e9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9ca:	f7f1 fc6d 	bl	80002a8 <__aeabi_dsub>
 800e9ce:	4622      	mov	r2, r4
 800e9d0:	462b      	mov	r3, r5
 800e9d2:	f7f1 fe21 	bl	8000618 <__aeabi_dmul>
 800e9d6:	a354      	add	r3, pc, #336	; (adr r3, 800eb28 <__ieee754_pow+0xa30>)
 800e9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9dc:	f7f1 fc66 	bl	80002ac <__adddf3>
 800e9e0:	4622      	mov	r2, r4
 800e9e2:	462b      	mov	r3, r5
 800e9e4:	f7f1 fe18 	bl	8000618 <__aeabi_dmul>
 800e9e8:	4602      	mov	r2, r0
 800e9ea:	460b      	mov	r3, r1
 800e9ec:	4640      	mov	r0, r8
 800e9ee:	4649      	mov	r1, r9
 800e9f0:	f7f1 fc5a 	bl	80002a8 <__aeabi_dsub>
 800e9f4:	4604      	mov	r4, r0
 800e9f6:	460d      	mov	r5, r1
 800e9f8:	4602      	mov	r2, r0
 800e9fa:	460b      	mov	r3, r1
 800e9fc:	4640      	mov	r0, r8
 800e9fe:	4649      	mov	r1, r9
 800ea00:	f7f1 fe0a 	bl	8000618 <__aeabi_dmul>
 800ea04:	2200      	movs	r2, #0
 800ea06:	ec41 0b19 	vmov	d9, r0, r1
 800ea0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ea0e:	4620      	mov	r0, r4
 800ea10:	4629      	mov	r1, r5
 800ea12:	f7f1 fc49 	bl	80002a8 <__aeabi_dsub>
 800ea16:	4602      	mov	r2, r0
 800ea18:	460b      	mov	r3, r1
 800ea1a:	ec51 0b19 	vmov	r0, r1, d9
 800ea1e:	f7f1 ff25 	bl	800086c <__aeabi_ddiv>
 800ea22:	4632      	mov	r2, r6
 800ea24:	4604      	mov	r4, r0
 800ea26:	460d      	mov	r5, r1
 800ea28:	463b      	mov	r3, r7
 800ea2a:	4640      	mov	r0, r8
 800ea2c:	4649      	mov	r1, r9
 800ea2e:	f7f1 fdf3 	bl	8000618 <__aeabi_dmul>
 800ea32:	4632      	mov	r2, r6
 800ea34:	463b      	mov	r3, r7
 800ea36:	f7f1 fc39 	bl	80002ac <__adddf3>
 800ea3a:	4602      	mov	r2, r0
 800ea3c:	460b      	mov	r3, r1
 800ea3e:	4620      	mov	r0, r4
 800ea40:	4629      	mov	r1, r5
 800ea42:	f7f1 fc31 	bl	80002a8 <__aeabi_dsub>
 800ea46:	4642      	mov	r2, r8
 800ea48:	464b      	mov	r3, r9
 800ea4a:	f7f1 fc2d 	bl	80002a8 <__aeabi_dsub>
 800ea4e:	460b      	mov	r3, r1
 800ea50:	4602      	mov	r2, r0
 800ea52:	4939      	ldr	r1, [pc, #228]	; (800eb38 <__ieee754_pow+0xa40>)
 800ea54:	2000      	movs	r0, #0
 800ea56:	f7f1 fc27 	bl	80002a8 <__aeabi_dsub>
 800ea5a:	ec41 0b10 	vmov	d0, r0, r1
 800ea5e:	ee10 3a90 	vmov	r3, s1
 800ea62:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800ea66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ea6a:	da2b      	bge.n	800eac4 <__ieee754_pow+0x9cc>
 800ea6c:	4650      	mov	r0, sl
 800ea6e:	f000 f877 	bl	800eb60 <scalbn>
 800ea72:	ec51 0b10 	vmov	r0, r1, d0
 800ea76:	ec53 2b18 	vmov	r2, r3, d8
 800ea7a:	f7ff bbee 	b.w	800e25a <__ieee754_pow+0x162>
 800ea7e:	4b2f      	ldr	r3, [pc, #188]	; (800eb3c <__ieee754_pow+0xa44>)
 800ea80:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ea84:	429e      	cmp	r6, r3
 800ea86:	f77f af0d 	ble.w	800e8a4 <__ieee754_pow+0x7ac>
 800ea8a:	4b2d      	ldr	r3, [pc, #180]	; (800eb40 <__ieee754_pow+0xa48>)
 800ea8c:	440b      	add	r3, r1
 800ea8e:	4303      	orrs	r3, r0
 800ea90:	d009      	beq.n	800eaa6 <__ieee754_pow+0x9ae>
 800ea92:	ec51 0b18 	vmov	r0, r1, d8
 800ea96:	2200      	movs	r2, #0
 800ea98:	2300      	movs	r3, #0
 800ea9a:	f7f2 f82f 	bl	8000afc <__aeabi_dcmplt>
 800ea9e:	3800      	subs	r0, #0
 800eaa0:	bf18      	it	ne
 800eaa2:	2001      	movne	r0, #1
 800eaa4:	e448      	b.n	800e338 <__ieee754_pow+0x240>
 800eaa6:	4622      	mov	r2, r4
 800eaa8:	462b      	mov	r3, r5
 800eaaa:	f7f1 fbfd 	bl	80002a8 <__aeabi_dsub>
 800eaae:	4642      	mov	r2, r8
 800eab0:	464b      	mov	r3, r9
 800eab2:	f7f2 f837 	bl	8000b24 <__aeabi_dcmpge>
 800eab6:	2800      	cmp	r0, #0
 800eab8:	f43f aef4 	beq.w	800e8a4 <__ieee754_pow+0x7ac>
 800eabc:	e7e9      	b.n	800ea92 <__ieee754_pow+0x99a>
 800eabe:	f04f 0a00 	mov.w	sl, #0
 800eac2:	e71a      	b.n	800e8fa <__ieee754_pow+0x802>
 800eac4:	ec51 0b10 	vmov	r0, r1, d0
 800eac8:	4619      	mov	r1, r3
 800eaca:	e7d4      	b.n	800ea76 <__ieee754_pow+0x97e>
 800eacc:	491a      	ldr	r1, [pc, #104]	; (800eb38 <__ieee754_pow+0xa40>)
 800eace:	2000      	movs	r0, #0
 800ead0:	f7ff bb31 	b.w	800e136 <__ieee754_pow+0x3e>
 800ead4:	2000      	movs	r0, #0
 800ead6:	2100      	movs	r1, #0
 800ead8:	f7ff bb2d 	b.w	800e136 <__ieee754_pow+0x3e>
 800eadc:	4630      	mov	r0, r6
 800eade:	4639      	mov	r1, r7
 800eae0:	f7ff bb29 	b.w	800e136 <__ieee754_pow+0x3e>
 800eae4:	9204      	str	r2, [sp, #16]
 800eae6:	f7ff bb7b 	b.w	800e1e0 <__ieee754_pow+0xe8>
 800eaea:	2300      	movs	r3, #0
 800eaec:	f7ff bb65 	b.w	800e1ba <__ieee754_pow+0xc2>
 800eaf0:	00000000 	.word	0x00000000
 800eaf4:	3fe62e43 	.word	0x3fe62e43
 800eaf8:	fefa39ef 	.word	0xfefa39ef
 800eafc:	3fe62e42 	.word	0x3fe62e42
 800eb00:	0ca86c39 	.word	0x0ca86c39
 800eb04:	be205c61 	.word	0xbe205c61
 800eb08:	72bea4d0 	.word	0x72bea4d0
 800eb0c:	3e663769 	.word	0x3e663769
 800eb10:	c5d26bf1 	.word	0xc5d26bf1
 800eb14:	3ebbbd41 	.word	0x3ebbbd41
 800eb18:	af25de2c 	.word	0xaf25de2c
 800eb1c:	3f11566a 	.word	0x3f11566a
 800eb20:	16bebd93 	.word	0x16bebd93
 800eb24:	3f66c16c 	.word	0x3f66c16c
 800eb28:	5555553e 	.word	0x5555553e
 800eb2c:	3fc55555 	.word	0x3fc55555
 800eb30:	3fe00000 	.word	0x3fe00000
 800eb34:	fff00000 	.word	0xfff00000
 800eb38:	3ff00000 	.word	0x3ff00000
 800eb3c:	4090cbff 	.word	0x4090cbff
 800eb40:	3f6f3400 	.word	0x3f6f3400
 800eb44:	652b82fe 	.word	0x652b82fe
 800eb48:	3c971547 	.word	0x3c971547

0800eb4c <fabs>:
 800eb4c:	ec51 0b10 	vmov	r0, r1, d0
 800eb50:	ee10 2a10 	vmov	r2, s0
 800eb54:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800eb58:	ec43 2b10 	vmov	d0, r2, r3
 800eb5c:	4770      	bx	lr
	...

0800eb60 <scalbn>:
 800eb60:	b570      	push	{r4, r5, r6, lr}
 800eb62:	ec55 4b10 	vmov	r4, r5, d0
 800eb66:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800eb6a:	4606      	mov	r6, r0
 800eb6c:	462b      	mov	r3, r5
 800eb6e:	b999      	cbnz	r1, 800eb98 <scalbn+0x38>
 800eb70:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800eb74:	4323      	orrs	r3, r4
 800eb76:	d03f      	beq.n	800ebf8 <scalbn+0x98>
 800eb78:	4b35      	ldr	r3, [pc, #212]	; (800ec50 <scalbn+0xf0>)
 800eb7a:	4629      	mov	r1, r5
 800eb7c:	ee10 0a10 	vmov	r0, s0
 800eb80:	2200      	movs	r2, #0
 800eb82:	f7f1 fd49 	bl	8000618 <__aeabi_dmul>
 800eb86:	4b33      	ldr	r3, [pc, #204]	; (800ec54 <scalbn+0xf4>)
 800eb88:	429e      	cmp	r6, r3
 800eb8a:	4604      	mov	r4, r0
 800eb8c:	460d      	mov	r5, r1
 800eb8e:	da10      	bge.n	800ebb2 <scalbn+0x52>
 800eb90:	a327      	add	r3, pc, #156	; (adr r3, 800ec30 <scalbn+0xd0>)
 800eb92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb96:	e01f      	b.n	800ebd8 <scalbn+0x78>
 800eb98:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800eb9c:	4291      	cmp	r1, r2
 800eb9e:	d10c      	bne.n	800ebba <scalbn+0x5a>
 800eba0:	ee10 2a10 	vmov	r2, s0
 800eba4:	4620      	mov	r0, r4
 800eba6:	4629      	mov	r1, r5
 800eba8:	f7f1 fb80 	bl	80002ac <__adddf3>
 800ebac:	4604      	mov	r4, r0
 800ebae:	460d      	mov	r5, r1
 800ebb0:	e022      	b.n	800ebf8 <scalbn+0x98>
 800ebb2:	460b      	mov	r3, r1
 800ebb4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800ebb8:	3936      	subs	r1, #54	; 0x36
 800ebba:	f24c 3250 	movw	r2, #50000	; 0xc350
 800ebbe:	4296      	cmp	r6, r2
 800ebc0:	dd0d      	ble.n	800ebde <scalbn+0x7e>
 800ebc2:	2d00      	cmp	r5, #0
 800ebc4:	a11c      	add	r1, pc, #112	; (adr r1, 800ec38 <scalbn+0xd8>)
 800ebc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ebca:	da02      	bge.n	800ebd2 <scalbn+0x72>
 800ebcc:	a11c      	add	r1, pc, #112	; (adr r1, 800ec40 <scalbn+0xe0>)
 800ebce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ebd2:	a319      	add	r3, pc, #100	; (adr r3, 800ec38 <scalbn+0xd8>)
 800ebd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebd8:	f7f1 fd1e 	bl	8000618 <__aeabi_dmul>
 800ebdc:	e7e6      	b.n	800ebac <scalbn+0x4c>
 800ebde:	1872      	adds	r2, r6, r1
 800ebe0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ebe4:	428a      	cmp	r2, r1
 800ebe6:	dcec      	bgt.n	800ebc2 <scalbn+0x62>
 800ebe8:	2a00      	cmp	r2, #0
 800ebea:	dd08      	ble.n	800ebfe <scalbn+0x9e>
 800ebec:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ebf0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ebf4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ebf8:	ec45 4b10 	vmov	d0, r4, r5
 800ebfc:	bd70      	pop	{r4, r5, r6, pc}
 800ebfe:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ec02:	da08      	bge.n	800ec16 <scalbn+0xb6>
 800ec04:	2d00      	cmp	r5, #0
 800ec06:	a10a      	add	r1, pc, #40	; (adr r1, 800ec30 <scalbn+0xd0>)
 800ec08:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ec0c:	dac0      	bge.n	800eb90 <scalbn+0x30>
 800ec0e:	a10e      	add	r1, pc, #56	; (adr r1, 800ec48 <scalbn+0xe8>)
 800ec10:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ec14:	e7bc      	b.n	800eb90 <scalbn+0x30>
 800ec16:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ec1a:	3236      	adds	r2, #54	; 0x36
 800ec1c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ec20:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ec24:	4620      	mov	r0, r4
 800ec26:	4b0c      	ldr	r3, [pc, #48]	; (800ec58 <scalbn+0xf8>)
 800ec28:	2200      	movs	r2, #0
 800ec2a:	e7d5      	b.n	800ebd8 <scalbn+0x78>
 800ec2c:	f3af 8000 	nop.w
 800ec30:	c2f8f359 	.word	0xc2f8f359
 800ec34:	01a56e1f 	.word	0x01a56e1f
 800ec38:	8800759c 	.word	0x8800759c
 800ec3c:	7e37e43c 	.word	0x7e37e43c
 800ec40:	8800759c 	.word	0x8800759c
 800ec44:	fe37e43c 	.word	0xfe37e43c
 800ec48:	c2f8f359 	.word	0xc2f8f359
 800ec4c:	81a56e1f 	.word	0x81a56e1f
 800ec50:	43500000 	.word	0x43500000
 800ec54:	ffff3cb0 	.word	0xffff3cb0
 800ec58:	3c900000 	.word	0x3c900000

0800ec5c <with_errno>:
 800ec5c:	b570      	push	{r4, r5, r6, lr}
 800ec5e:	4604      	mov	r4, r0
 800ec60:	460d      	mov	r5, r1
 800ec62:	4616      	mov	r6, r2
 800ec64:	f7fd f926 	bl	800beb4 <__errno>
 800ec68:	4629      	mov	r1, r5
 800ec6a:	6006      	str	r6, [r0, #0]
 800ec6c:	4620      	mov	r0, r4
 800ec6e:	bd70      	pop	{r4, r5, r6, pc}

0800ec70 <xflow>:
 800ec70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ec72:	4614      	mov	r4, r2
 800ec74:	461d      	mov	r5, r3
 800ec76:	b108      	cbz	r0, 800ec7c <xflow+0xc>
 800ec78:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ec7c:	e9cd 2300 	strd	r2, r3, [sp]
 800ec80:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ec84:	4620      	mov	r0, r4
 800ec86:	4629      	mov	r1, r5
 800ec88:	f7f1 fcc6 	bl	8000618 <__aeabi_dmul>
 800ec8c:	2222      	movs	r2, #34	; 0x22
 800ec8e:	b003      	add	sp, #12
 800ec90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ec94:	f7ff bfe2 	b.w	800ec5c <with_errno>

0800ec98 <__math_uflow>:
 800ec98:	b508      	push	{r3, lr}
 800ec9a:	2200      	movs	r2, #0
 800ec9c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800eca0:	f7ff ffe6 	bl	800ec70 <xflow>
 800eca4:	ec41 0b10 	vmov	d0, r0, r1
 800eca8:	bd08      	pop	{r3, pc}

0800ecaa <__math_oflow>:
 800ecaa:	b508      	push	{r3, lr}
 800ecac:	2200      	movs	r2, #0
 800ecae:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800ecb2:	f7ff ffdd 	bl	800ec70 <xflow>
 800ecb6:	ec41 0b10 	vmov	d0, r0, r1
 800ecba:	bd08      	pop	{r3, pc}

0800ecbc <__ieee754_sqrt>:
 800ecbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecc0:	ec55 4b10 	vmov	r4, r5, d0
 800ecc4:	4e67      	ldr	r6, [pc, #412]	; (800ee64 <__ieee754_sqrt+0x1a8>)
 800ecc6:	43ae      	bics	r6, r5
 800ecc8:	ee10 0a10 	vmov	r0, s0
 800eccc:	ee10 2a10 	vmov	r2, s0
 800ecd0:	4629      	mov	r1, r5
 800ecd2:	462b      	mov	r3, r5
 800ecd4:	d10d      	bne.n	800ecf2 <__ieee754_sqrt+0x36>
 800ecd6:	f7f1 fc9f 	bl	8000618 <__aeabi_dmul>
 800ecda:	4602      	mov	r2, r0
 800ecdc:	460b      	mov	r3, r1
 800ecde:	4620      	mov	r0, r4
 800ece0:	4629      	mov	r1, r5
 800ece2:	f7f1 fae3 	bl	80002ac <__adddf3>
 800ece6:	4604      	mov	r4, r0
 800ece8:	460d      	mov	r5, r1
 800ecea:	ec45 4b10 	vmov	d0, r4, r5
 800ecee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecf2:	2d00      	cmp	r5, #0
 800ecf4:	dc0b      	bgt.n	800ed0e <__ieee754_sqrt+0x52>
 800ecf6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ecfa:	4326      	orrs	r6, r4
 800ecfc:	d0f5      	beq.n	800ecea <__ieee754_sqrt+0x2e>
 800ecfe:	b135      	cbz	r5, 800ed0e <__ieee754_sqrt+0x52>
 800ed00:	f7f1 fad2 	bl	80002a8 <__aeabi_dsub>
 800ed04:	4602      	mov	r2, r0
 800ed06:	460b      	mov	r3, r1
 800ed08:	f7f1 fdb0 	bl	800086c <__aeabi_ddiv>
 800ed0c:	e7eb      	b.n	800ece6 <__ieee754_sqrt+0x2a>
 800ed0e:	1509      	asrs	r1, r1, #20
 800ed10:	f000 808d 	beq.w	800ee2e <__ieee754_sqrt+0x172>
 800ed14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ed18:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800ed1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ed20:	07c9      	lsls	r1, r1, #31
 800ed22:	bf5c      	itt	pl
 800ed24:	005b      	lslpl	r3, r3, #1
 800ed26:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800ed2a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ed2e:	bf58      	it	pl
 800ed30:	0052      	lslpl	r2, r2, #1
 800ed32:	2500      	movs	r5, #0
 800ed34:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800ed38:	1076      	asrs	r6, r6, #1
 800ed3a:	0052      	lsls	r2, r2, #1
 800ed3c:	f04f 0e16 	mov.w	lr, #22
 800ed40:	46ac      	mov	ip, r5
 800ed42:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ed46:	eb0c 0001 	add.w	r0, ip, r1
 800ed4a:	4298      	cmp	r0, r3
 800ed4c:	bfde      	ittt	le
 800ed4e:	1a1b      	suble	r3, r3, r0
 800ed50:	eb00 0c01 	addle.w	ip, r0, r1
 800ed54:	186d      	addle	r5, r5, r1
 800ed56:	005b      	lsls	r3, r3, #1
 800ed58:	f1be 0e01 	subs.w	lr, lr, #1
 800ed5c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800ed60:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ed64:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800ed68:	d1ed      	bne.n	800ed46 <__ieee754_sqrt+0x8a>
 800ed6a:	4674      	mov	r4, lr
 800ed6c:	2720      	movs	r7, #32
 800ed6e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800ed72:	4563      	cmp	r3, ip
 800ed74:	eb01 000e 	add.w	r0, r1, lr
 800ed78:	dc02      	bgt.n	800ed80 <__ieee754_sqrt+0xc4>
 800ed7a:	d113      	bne.n	800eda4 <__ieee754_sqrt+0xe8>
 800ed7c:	4290      	cmp	r0, r2
 800ed7e:	d811      	bhi.n	800eda4 <__ieee754_sqrt+0xe8>
 800ed80:	2800      	cmp	r0, #0
 800ed82:	eb00 0e01 	add.w	lr, r0, r1
 800ed86:	da57      	bge.n	800ee38 <__ieee754_sqrt+0x17c>
 800ed88:	f1be 0f00 	cmp.w	lr, #0
 800ed8c:	db54      	blt.n	800ee38 <__ieee754_sqrt+0x17c>
 800ed8e:	f10c 0801 	add.w	r8, ip, #1
 800ed92:	eba3 030c 	sub.w	r3, r3, ip
 800ed96:	4290      	cmp	r0, r2
 800ed98:	bf88      	it	hi
 800ed9a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800ed9e:	1a12      	subs	r2, r2, r0
 800eda0:	440c      	add	r4, r1
 800eda2:	46c4      	mov	ip, r8
 800eda4:	005b      	lsls	r3, r3, #1
 800eda6:	3f01      	subs	r7, #1
 800eda8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800edac:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800edb0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800edb4:	d1dd      	bne.n	800ed72 <__ieee754_sqrt+0xb6>
 800edb6:	4313      	orrs	r3, r2
 800edb8:	d01b      	beq.n	800edf2 <__ieee754_sqrt+0x136>
 800edba:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800ee68 <__ieee754_sqrt+0x1ac>
 800edbe:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800ee6c <__ieee754_sqrt+0x1b0>
 800edc2:	e9da 0100 	ldrd	r0, r1, [sl]
 800edc6:	e9db 2300 	ldrd	r2, r3, [fp]
 800edca:	f7f1 fa6d 	bl	80002a8 <__aeabi_dsub>
 800edce:	e9da 8900 	ldrd	r8, r9, [sl]
 800edd2:	4602      	mov	r2, r0
 800edd4:	460b      	mov	r3, r1
 800edd6:	4640      	mov	r0, r8
 800edd8:	4649      	mov	r1, r9
 800edda:	f7f1 fe99 	bl	8000b10 <__aeabi_dcmple>
 800edde:	b140      	cbz	r0, 800edf2 <__ieee754_sqrt+0x136>
 800ede0:	f1b4 3fff 	cmp.w	r4, #4294967295
 800ede4:	e9da 0100 	ldrd	r0, r1, [sl]
 800ede8:	e9db 2300 	ldrd	r2, r3, [fp]
 800edec:	d126      	bne.n	800ee3c <__ieee754_sqrt+0x180>
 800edee:	3501      	adds	r5, #1
 800edf0:	463c      	mov	r4, r7
 800edf2:	106a      	asrs	r2, r5, #1
 800edf4:	0863      	lsrs	r3, r4, #1
 800edf6:	07e9      	lsls	r1, r5, #31
 800edf8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800edfc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800ee00:	bf48      	it	mi
 800ee02:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800ee06:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800ee0a:	461c      	mov	r4, r3
 800ee0c:	e76d      	b.n	800ecea <__ieee754_sqrt+0x2e>
 800ee0e:	0ad3      	lsrs	r3, r2, #11
 800ee10:	3815      	subs	r0, #21
 800ee12:	0552      	lsls	r2, r2, #21
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d0fa      	beq.n	800ee0e <__ieee754_sqrt+0x152>
 800ee18:	02dc      	lsls	r4, r3, #11
 800ee1a:	d50a      	bpl.n	800ee32 <__ieee754_sqrt+0x176>
 800ee1c:	f1c1 0420 	rsb	r4, r1, #32
 800ee20:	fa22 f404 	lsr.w	r4, r2, r4
 800ee24:	1e4d      	subs	r5, r1, #1
 800ee26:	408a      	lsls	r2, r1
 800ee28:	4323      	orrs	r3, r4
 800ee2a:	1b41      	subs	r1, r0, r5
 800ee2c:	e772      	b.n	800ed14 <__ieee754_sqrt+0x58>
 800ee2e:	4608      	mov	r0, r1
 800ee30:	e7f0      	b.n	800ee14 <__ieee754_sqrt+0x158>
 800ee32:	005b      	lsls	r3, r3, #1
 800ee34:	3101      	adds	r1, #1
 800ee36:	e7ef      	b.n	800ee18 <__ieee754_sqrt+0x15c>
 800ee38:	46e0      	mov	r8, ip
 800ee3a:	e7aa      	b.n	800ed92 <__ieee754_sqrt+0xd6>
 800ee3c:	f7f1 fa36 	bl	80002ac <__adddf3>
 800ee40:	e9da 8900 	ldrd	r8, r9, [sl]
 800ee44:	4602      	mov	r2, r0
 800ee46:	460b      	mov	r3, r1
 800ee48:	4640      	mov	r0, r8
 800ee4a:	4649      	mov	r1, r9
 800ee4c:	f7f1 fe56 	bl	8000afc <__aeabi_dcmplt>
 800ee50:	b120      	cbz	r0, 800ee5c <__ieee754_sqrt+0x1a0>
 800ee52:	1ca0      	adds	r0, r4, #2
 800ee54:	bf08      	it	eq
 800ee56:	3501      	addeq	r5, #1
 800ee58:	3402      	adds	r4, #2
 800ee5a:	e7ca      	b.n	800edf2 <__ieee754_sqrt+0x136>
 800ee5c:	3401      	adds	r4, #1
 800ee5e:	f024 0401 	bic.w	r4, r4, #1
 800ee62:	e7c6      	b.n	800edf2 <__ieee754_sqrt+0x136>
 800ee64:	7ff00000 	.word	0x7ff00000
 800ee68:	200001d8 	.word	0x200001d8
 800ee6c:	200001e0 	.word	0x200001e0

0800ee70 <_init>:
 800ee70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee72:	bf00      	nop
 800ee74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee76:	bc08      	pop	{r3}
 800ee78:	469e      	mov	lr, r3
 800ee7a:	4770      	bx	lr

0800ee7c <_fini>:
 800ee7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee7e:	bf00      	nop
 800ee80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee82:	bc08      	pop	{r3}
 800ee84:	469e      	mov	lr, r3
 800ee86:	4770      	bx	lr
