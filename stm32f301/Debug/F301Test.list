
F301Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f2f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000868  0800f488  0800f488  0001f488  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fcf0  0800fcf0  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800fcf0  0800fcf0  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800fcf0  0800fcf0  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fcf0  0800fcf0  0001fcf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fcf4  0800fcf4  0001fcf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800fcf8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002bbc  200001e8  0800fee0  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002da4  0800fee0  00022da4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ce58  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004350  00000000  00000000  0003d0b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018f0  00000000  00000000  00041408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001364  00000000  00000000  00042cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a534  00000000  00000000  0004405c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001eca5  00000000  00000000  0005e590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009cb07  00000000  00000000  0007d235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007c0c  00000000  00000000  00119d3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  00121948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f470 	.word	0x0800f470

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800f470 	.word	0x0800f470

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <adxl345_bw_rate_setup>:
 * @param  CS_port - CS port address
 * @param  CS_pin - CS pin number
 * @param  rate - Desired output data rate
 */
void adxl345_bw_rate_setup(SPI_HandleTypeDef* hspi, GPIO_TypeDef * CS_port, uint32_t CS_pin, uint8_t rate)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	60f8      	str	r0, [r7, #12]
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	607a      	str	r2, [r7, #4]
 8000c74:	70fb      	strb	r3, [r7, #3]
	uint8_t instr = BW_RATE;
 8000c76:	232c      	movs	r3, #44	; 0x2c
 8000c78:	757b      	strb	r3, [r7, #21]
	uint16_t temp;
	temp = hspi->Instance->DR;
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	82fb      	strh	r3, [r7, #22]
	CS_port->ODR &= ~(1<<CS_pin);
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	695b      	ldr	r3, [r3, #20]
 8000c86:	2101      	movs	r1, #1
 8000c88:	687a      	ldr	r2, [r7, #4]
 8000c8a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c8e:	43d2      	mvns	r2, r2
 8000c90:	401a      	ands	r2, r3
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(hspi, &instr, 1, 100);
 8000c96:	f107 0115 	add.w	r1, r7, #21
 8000c9a:	2364      	movs	r3, #100	; 0x64
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	68f8      	ldr	r0, [r7, #12]
 8000ca0:	f006 f863 	bl	8006d6a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &rate, 1, 100);
 8000ca4:	1cf9      	adds	r1, r7, #3
 8000ca6:	2364      	movs	r3, #100	; 0x64
 8000ca8:	2201      	movs	r2, #1
 8000caa:	68f8      	ldr	r0, [r7, #12]
 8000cac:	f006 f85d 	bl	8006d6a <HAL_SPI_Transmit>
	CS_port->ODR |= (1<<CS_pin);
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	695b      	ldr	r3, [r3, #20]
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	fa01 f202 	lsl.w	r2, r1, r2
 8000cbc:	431a      	orrs	r2, r3
 8000cbe:	68bb      	ldr	r3, [r7, #8]
 8000cc0:	615a      	str	r2, [r3, #20]
}
 8000cc2:	bf00      	nop
 8000cc4:	3718      	adds	r7, #24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <adxl345_measure_mode>:
 *               the configuration information for SPI module.
 * @param  CS_port - CS port address
 * @param  CS_pin - CS pin number
 */
void adxl345_measure_mode(SPI_HandleTypeDef* hspi, GPIO_TypeDef * CS_port, uint32_t CS_pin)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b086      	sub	sp, #24
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	60f8      	str	r0, [r7, #12]
 8000cd2:	60b9      	str	r1, [r7, #8]
 8000cd4:	607a      	str	r2, [r7, #4]
	uint8_t register_data = 0;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	757b      	strb	r3, [r7, #21]
	uint8_t instr = POWER_CTL | (1<<7);
 8000cda:	23ad      	movs	r3, #173	; 0xad
 8000cdc:	753b      	strb	r3, [r7, #20]
	uint16_t temp;
	temp = hspi->Instance->DR; //Clearing buffer
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	82fb      	strh	r3, [r7, #22]
	CS_port->ODR &= ~(1<<CS_pin);
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	695b      	ldr	r3, [r3, #20]
 8000cea:	2101      	movs	r1, #1
 8000cec:	687a      	ldr	r2, [r7, #4]
 8000cee:	fa01 f202 	lsl.w	r2, r1, r2
 8000cf2:	43d2      	mvns	r2, r2
 8000cf4:	401a      	ands	r2, r3
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(hspi, &instr, 1, 100);
 8000cfa:	f107 0114 	add.w	r1, r7, #20
 8000cfe:	2364      	movs	r3, #100	; 0x64
 8000d00:	2201      	movs	r2, #1
 8000d02:	68f8      	ldr	r0, [r7, #12]
 8000d04:	f006 f831 	bl	8006d6a <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, &register_data, 1, 100);
 8000d08:	f107 0115 	add.w	r1, r7, #21
 8000d0c:	2364      	movs	r3, #100	; 0x64
 8000d0e:	2201      	movs	r2, #1
 8000d10:	68f8      	ldr	r0, [r7, #12]
 8000d12:	f006 f99f 	bl	8007054 <HAL_SPI_Receive>
	CS_port->ODR |= (1<<CS_pin);
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	695b      	ldr	r3, [r3, #20]
 8000d1a:	2101      	movs	r1, #1
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d22:	431a      	orrs	r2, r3
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	615a      	str	r2, [r3, #20]
	register_data |= (1<<3);
 8000d28:	7d7b      	ldrb	r3, [r7, #21]
 8000d2a:	f043 0308 	orr.w	r3, r3, #8
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	757b      	strb	r3, [r7, #21]
	instr = POWER_CTL;
 8000d32:	232d      	movs	r3, #45	; 0x2d
 8000d34:	753b      	strb	r3, [r7, #20]
	CS_port->ODR &= ~(1<<CS_pin);
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	695b      	ldr	r3, [r3, #20]
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	687a      	ldr	r2, [r7, #4]
 8000d3e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d42:	43d2      	mvns	r2, r2
 8000d44:	401a      	ands	r2, r3
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(hspi, &instr, 1, 100);
 8000d4a:	f107 0114 	add.w	r1, r7, #20
 8000d4e:	2364      	movs	r3, #100	; 0x64
 8000d50:	2201      	movs	r2, #1
 8000d52:	68f8      	ldr	r0, [r7, #12]
 8000d54:	f006 f809 	bl	8006d6a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &register_data, 1, 100);
 8000d58:	f107 0115 	add.w	r1, r7, #21
 8000d5c:	2364      	movs	r3, #100	; 0x64
 8000d5e:	2201      	movs	r2, #1
 8000d60:	68f8      	ldr	r0, [r7, #12]
 8000d62:	f006 f802 	bl	8006d6a <HAL_SPI_Transmit>
	CS_port->ODR |= (1<<CS_pin);
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	695b      	ldr	r3, [r3, #20]
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	687a      	ldr	r2, [r7, #4]
 8000d6e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d72:	431a      	orrs	r2, r3
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	615a      	str	r2, [r3, #20]
	//test
	temp = hspi->Instance->DR; //Clearing buffer
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	68db      	ldr	r3, [r3, #12]
 8000d7e:	82fb      	strh	r3, [r7, #22]
	register_data = 0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	757b      	strb	r3, [r7, #21]
	instr = POWER_CTL | (1<<7);
 8000d84:	23ad      	movs	r3, #173	; 0xad
 8000d86:	753b      	strb	r3, [r7, #20]
	CS_port->ODR &= ~(1<<CS_pin);
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	695b      	ldr	r3, [r3, #20]
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	687a      	ldr	r2, [r7, #4]
 8000d90:	fa01 f202 	lsl.w	r2, r1, r2
 8000d94:	43d2      	mvns	r2, r2
 8000d96:	401a      	ands	r2, r3
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(hspi, &instr, 1, 100);
 8000d9c:	f107 0114 	add.w	r1, r7, #20
 8000da0:	2364      	movs	r3, #100	; 0x64
 8000da2:	2201      	movs	r2, #1
 8000da4:	68f8      	ldr	r0, [r7, #12]
 8000da6:	f005 ffe0 	bl	8006d6a <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, &register_data, 1, 100);
 8000daa:	f107 0115 	add.w	r1, r7, #21
 8000dae:	2364      	movs	r3, #100	; 0x64
 8000db0:	2201      	movs	r2, #1
 8000db2:	68f8      	ldr	r0, [r7, #12]
 8000db4:	f006 f94e 	bl	8007054 <HAL_SPI_Receive>
	CS_port->ODR |= (1<<CS_pin);
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	695b      	ldr	r3, [r3, #20]
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	fa01 f202 	lsl.w	r2, r1, r2
 8000dc4:	431a      	orrs	r2, r3
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	615a      	str	r2, [r3, #20]
}
 8000dca:	bf00      	nop
 8000dcc:	3718      	adds	r7, #24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <adxl345_data_format>:
 * @param  CS_port - CS port address
 * @param  CS_pin - CS pin number
 * @param  data_format - Information for the accelerometer DATA_FORMAT register
 */
void adxl345_data_format(SPI_HandleTypeDef* hspi, GPIO_TypeDef * CS_port, uint32_t CS_pin, uint8_t data_format)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b086      	sub	sp, #24
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	60f8      	str	r0, [r7, #12]
 8000dda:	60b9      	str	r1, [r7, #8]
 8000ddc:	607a      	str	r2, [r7, #4]
 8000dde:	70fb      	strb	r3, [r7, #3]
	uint8_t instr = DATA_FORMAT;
 8000de0:	2331      	movs	r3, #49	; 0x31
 8000de2:	75fb      	strb	r3, [r7, #23]
	CS_port->ODR &= ~(1<<CS_pin);
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	695b      	ldr	r3, [r3, #20]
 8000de8:	2101      	movs	r1, #1
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	fa01 f202 	lsl.w	r2, r1, r2
 8000df0:	43d2      	mvns	r2, r2
 8000df2:	401a      	ands	r2, r3
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(hspi, &instr, 1, 100);
 8000df8:	f107 0117 	add.w	r1, r7, #23
 8000dfc:	2364      	movs	r3, #100	; 0x64
 8000dfe:	2201      	movs	r2, #1
 8000e00:	68f8      	ldr	r0, [r7, #12]
 8000e02:	f005 ffb2 	bl	8006d6a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &data_format, 1, 100);
 8000e06:	1cf9      	adds	r1, r7, #3
 8000e08:	2364      	movs	r3, #100	; 0x64
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	68f8      	ldr	r0, [r7, #12]
 8000e0e:	f005 ffac 	bl	8006d6a <HAL_SPI_Transmit>
	CS_port->ODR |= (1<<CS_pin);
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	695b      	ldr	r3, [r3, #20]
 8000e16:	2101      	movs	r1, #1
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e1e:	431a      	orrs	r2, r3
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	615a      	str	r2, [r3, #20]
}
 8000e24:	bf00      	nop
 8000e26:	3718      	adds	r7, #24
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <adxl345_read_data>:
 * @param  CS_port - CS port address
 * @param  CS_pin - CS pin number
 * @param  buffer - Pointer to the buffer where you want to put the received data
 */
void adxl345_read_data(SPI_HandleTypeDef* hspi, GPIO_TypeDef * CS_port, uint32_t CS_pin, uint8_t* buffer)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
 8000e38:	603b      	str	r3, [r7, #0]
	uint8_t instr = DATAX0 | (1<<7) | (1<<6);
 8000e3a:	23f2      	movs	r3, #242	; 0xf2
 8000e3c:	757b      	strb	r3, [r7, #21]
	uint16_t temp;
	temp = hspi->Instance->DR; //Clearing buffer
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	82fb      	strh	r3, [r7, #22]
	CS_port->ODR &= ~(1<<CS_pin);
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	695b      	ldr	r3, [r3, #20]
 8000e4a:	2101      	movs	r1, #1
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e52:	43d2      	mvns	r2, r2
 8000e54:	401a      	ands	r2, r3
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(hspi, &instr, 1, 100);
 8000e5a:	f107 0115 	add.w	r1, r7, #21
 8000e5e:	2364      	movs	r3, #100	; 0x64
 8000e60:	2201      	movs	r2, #1
 8000e62:	68f8      	ldr	r0, [r7, #12]
 8000e64:	f005 ff81 	bl	8006d6a <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, buffer, 6, 100);
 8000e68:	2364      	movs	r3, #100	; 0x64
 8000e6a:	2206      	movs	r2, #6
 8000e6c:	6839      	ldr	r1, [r7, #0]
 8000e6e:	68f8      	ldr	r0, [r7, #12]
 8000e70:	f006 f8f0 	bl	8007054 <HAL_SPI_Receive>
	CS_port->ODR |= (1<<CS_pin);
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	695b      	ldr	r3, [r3, #20]
 8000e78:	2101      	movs	r1, #1
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e80:	431a      	orrs	r2, r3
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	615a      	str	r2, [r3, #20]
}
 8000e86:	bf00      	nop
 8000e88:	3718      	adds	r7, #24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <sendATCommand>:

#include <espATcommands.h>
extern uint32_t debugVar;

void sendATCommand(UART_HandleTypeDef *huart, const char* atcom, int sizeOfAT, int delayms)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b086      	sub	sp, #24
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	60f8      	str	r0, [r7, #12]
 8000e96:	60b9      	str	r1, [r7, #8]
 8000e98:	607a      	str	r2, [r7, #4]
 8000e9a:	603b      	str	r3, [r7, #0]
	for(uint16_t i = 0; i < sizeOfAT; i++) {
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	82fb      	strh	r3, [r7, #22]
 8000ea0:	e00a      	b.n	8000eb8 <sendATCommand+0x2a>
		if(atcom[i] == '\0') {
 8000ea2:	8afb      	ldrh	r3, [r7, #22]
 8000ea4:	68ba      	ldr	r2, [r7, #8]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d101      	bne.n	8000eb2 <sendATCommand+0x24>
			sizeOfAT = i;
 8000eae:	8afb      	ldrh	r3, [r7, #22]
 8000eb0:	607b      	str	r3, [r7, #4]
	for(uint16_t i = 0; i < sizeOfAT; i++) {
 8000eb2:	8afb      	ldrh	r3, [r7, #22]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	82fb      	strh	r3, [r7, #22]
 8000eb8:	8afb      	ldrh	r3, [r7, #22]
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	dcf0      	bgt.n	8000ea2 <sendATCommand+0x14>
		}
	}
	HAL_UART_Transmit(huart, atcom, sizeOfAT, delayms);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	68b9      	ldr	r1, [r7, #8]
 8000ec8:	68f8      	ldr	r0, [r7, #12]
 8000eca:	f007 fa6f 	bl	80083ac <HAL_UART_Transmit>
}
 8000ece:	bf00      	nop
 8000ed0:	3718      	adds	r7, #24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <receiveAnswer>:

void receiveAnswer(UART_HandleTypeDef *huart, char* response, int sizeOfResp, int delayms)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b086      	sub	sp, #24
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	60f8      	str	r0, [r7, #12]
 8000ede:	60b9      	str	r1, [r7, #8]
 8000ee0:	607a      	str	r2, [r7, #4]
 8000ee2:	603b      	str	r3, [r7, #0]
	for(uint16_t i = 0; i < sizeOfResp; i++) {
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	82fb      	strh	r3, [r7, #22]
 8000ee8:	e007      	b.n	8000efa <receiveAnswer+0x24>
		response[i] = 0;
 8000eea:	8afb      	ldrh	r3, [r7, #22]
 8000eec:	68ba      	ldr	r2, [r7, #8]
 8000eee:	4413      	add	r3, r2
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i < sizeOfResp; i++) {
 8000ef4:	8afb      	ldrh	r3, [r7, #22]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	82fb      	strh	r3, [r7, #22]
 8000efa:	8afb      	ldrh	r3, [r7, #22]
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	dcf3      	bgt.n	8000eea <receiveAnswer+0x14>
	}
	HAL_UART_Receive(huart, response, sizeOfResp, delayms);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	b29a      	uxth	r2, r3
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	68b9      	ldr	r1, [r7, #8]
 8000f0a:	68f8      	ldr	r0, [r7, #12]
 8000f0c:	f007 fad8 	bl	80084c0 <HAL_UART_Receive>
}
 8000f10:	bf00      	nop
 8000f12:	3718      	adds	r7, #24
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <atSend_USART3_DMA>:
	resp = HAL_UART_Transmit_DMA(huart, (uint8_t*)pData, sizeof(pData)-1);
	__asm__ volatile("NOP");
}

uint8_t atSend_USART3_DMA(const uint8_t *pData, uint16_t amount)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	460b      	mov	r3, r1
 8000f22:	807b      	strh	r3, [r7, #2]
	if((DMA1_Channel2->CCR & DMA_CCR_EN) == DMA_CCR_EN) {
 8000f24:	4b25      	ldr	r3, [pc, #148]	; (8000fbc <atSend_USART3_DMA+0xa4>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f003 0301 	and.w	r3, r3, #1
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d129      	bne.n	8000f84 <atSend_USART3_DMA+0x6c>
		if((DMA1_Channel2->CNDTR) != 0) {
 8000f30:	4b22      	ldr	r3, [pc, #136]	; (8000fbc <atSend_USART3_DMA+0xa4>)
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <atSend_USART3_DMA+0x24>
			return 1;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e039      	b.n	8000fb0 <atSend_USART3_DMA+0x98>
		} else if((DMA1_Channel2->CCR & DMA_CCR_TCIE) != DMA_CCR_TCIE) {
 8000f3c:	4b1f      	ldr	r3, [pc, #124]	; (8000fbc <atSend_USART3_DMA+0xa4>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f003 0302 	and.w	r3, r3, #2
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d01d      	beq.n	8000f84 <atSend_USART3_DMA+0x6c>
			DMA1_Channel2->CCR &= ~DMA_CCR_EN;
 8000f48:	4b1c      	ldr	r3, [pc, #112]	; (8000fbc <atSend_USART3_DMA+0xa4>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a1b      	ldr	r2, [pc, #108]	; (8000fbc <atSend_USART3_DMA+0xa4>)
 8000f4e:	f023 0301 	bic.w	r3, r3, #1
 8000f52:	6013      	str	r3, [r2, #0]
			USART3->CR3 &= ~USART_CR3_DMAT;
 8000f54:	4b1a      	ldr	r3, [pc, #104]	; (8000fc0 <atSend_USART3_DMA+0xa8>)
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	4a19      	ldr	r2, [pc, #100]	; (8000fc0 <atSend_USART3_DMA+0xa8>)
 8000f5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000f5e:	6093      	str	r3, [r2, #8]
			if((DMA1->ISR & DMA_ISR_TCIF2) == DMA_ISR_TCIF2) {
 8000f60:	4b18      	ldr	r3, [pc, #96]	; (8000fc4 <atSend_USART3_DMA+0xac>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f003 0320 	and.w	r3, r3, #32
 8000f68:	2b20      	cmp	r3, #32
 8000f6a:	d105      	bne.n	8000f78 <atSend_USART3_DMA+0x60>
				DMA1->IFCR |= DMA_IFCR_CTCIF2;
 8000f6c:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <atSend_USART3_DMA+0xac>)
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	4a14      	ldr	r2, [pc, #80]	; (8000fc4 <atSend_USART3_DMA+0xac>)
 8000f72:	f043 0320 	orr.w	r3, r3, #32
 8000f76:	6053      	str	r3, [r2, #4]
			}
			DMA1_Channel2->CCR |= DMA_CCR_TCIE;
 8000f78:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <atSend_USART3_DMA+0xa4>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a0f      	ldr	r2, [pc, #60]	; (8000fbc <atSend_USART3_DMA+0xa4>)
 8000f7e:	f043 0302 	orr.w	r3, r3, #2
 8000f82:	6013      	str	r3, [r2, #0]
		}
	}
	USART3->CR3 |= USART_CR3_DMAT;
 8000f84:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <atSend_USART3_DMA+0xa8>)
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	4a0d      	ldr	r2, [pc, #52]	; (8000fc0 <atSend_USART3_DMA+0xa8>)
 8000f8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f8e:	6093      	str	r3, [r2, #8]

	DMA1_Channel2->CNDTR = amount;
 8000f90:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <atSend_USART3_DMA+0xa4>)
 8000f92:	887b      	ldrh	r3, [r7, #2]
 8000f94:	6053      	str	r3, [r2, #4]
	DMA1_Channel2->CPAR = (uint32_t)&(USART3->TDR);
 8000f96:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <atSend_USART3_DMA+0xa4>)
 8000f98:	4a0b      	ldr	r2, [pc, #44]	; (8000fc8 <atSend_USART3_DMA+0xb0>)
 8000f9a:	609a      	str	r2, [r3, #8]
	DMA1_Channel2->CMAR = (uint32_t)pData;
 8000f9c:	4a07      	ldr	r2, [pc, #28]	; (8000fbc <atSend_USART3_DMA+0xa4>)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	60d3      	str	r3, [r2, #12]

	DMA1_Channel2->CCR |= DMA_CCR_EN;
 8000fa2:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <atSend_USART3_DMA+0xa4>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a05      	ldr	r2, [pc, #20]	; (8000fbc <atSend_USART3_DMA+0xa4>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	6013      	str	r3, [r2, #0]
	return 0;
 8000fae:	2300      	movs	r3, #0
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	4002001c 	.word	0x4002001c
 8000fc0:	40004800 	.word	0x40004800
 8000fc4:	40020000 	.word	0x40020000
 8000fc8:	40004828 	.word	0x40004828
 8000fcc:	00000000 	.word	0x00000000

08000fd0 <parseFloat>:

float parseFloat(const char *buffer, uint16_t startIndex)
{
 8000fd0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000fd4:	b084      	sub	sp, #16
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
 8000fda:	460b      	mov	r3, r1
 8000fdc:	807b      	strh	r3, [r7, #2]
    float value = 0.0f;
 8000fde:	f04f 0300 	mov.w	r3, #0
 8000fe2:	60fb      	str	r3, [r7, #12]
    uint8_t decimalFlag = 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	72fb      	strb	r3, [r7, #11]
    uint8_t decimalPlaces = 0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	72bb      	strb	r3, [r7, #10]

    for (uint16_t i = startIndex; buffer[i % ESPRXBUFFERSIZE] != '_'; i++) {
 8000fec:	887b      	ldrh	r3, [r7, #2]
 8000fee:	813b      	strh	r3, [r7, #8]
 8000ff0:	e0c7      	b.n	8001182 <parseFloat+0x1b2>
        if (buffer[i % ESPRXBUFFERSIZE] == '.') {
 8000ff2:	893a      	ldrh	r2, [r7, #8]
 8000ff4:	4b7a      	ldr	r3, [pc, #488]	; (80011e0 <parseFloat+0x210>)
 8000ff6:	fba3 1302 	umull	r1, r3, r3, r2
 8000ffa:	1ad1      	subs	r1, r2, r3
 8000ffc:	0849      	lsrs	r1, r1, #1
 8000ffe:	440b      	add	r3, r1
 8001000:	0a19      	lsrs	r1, r3, #8
 8001002:	460b      	mov	r3, r1
 8001004:	025b      	lsls	r3, r3, #9
 8001006:	1a5b      	subs	r3, r3, r1
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	b29b      	uxth	r3, r3
 800100c:	461a      	mov	r2, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4413      	add	r3, r2
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b2e      	cmp	r3, #46	; 0x2e
 8001016:	d104      	bne.n	8001022 <parseFloat+0x52>
            decimalFlag |= (1<<0);
 8001018:	7afb      	ldrb	r3, [r7, #11]
 800101a:	f043 0301 	orr.w	r3, r3, #1
 800101e:	72fb      	strb	r3, [r7, #11]
 8001020:	e0a2      	b.n	8001168 <parseFloat+0x198>
        } else if (buffer[i % ESPRXBUFFERSIZE] == '-') {
 8001022:	893a      	ldrh	r2, [r7, #8]
 8001024:	4b6e      	ldr	r3, [pc, #440]	; (80011e0 <parseFloat+0x210>)
 8001026:	fba3 1302 	umull	r1, r3, r3, r2
 800102a:	1ad1      	subs	r1, r2, r3
 800102c:	0849      	lsrs	r1, r1, #1
 800102e:	440b      	add	r3, r1
 8001030:	0a19      	lsrs	r1, r3, #8
 8001032:	460b      	mov	r3, r1
 8001034:	025b      	lsls	r3, r3, #9
 8001036:	1a5b      	subs	r3, r3, r1
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	b29b      	uxth	r3, r3
 800103c:	461a      	mov	r2, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4413      	add	r3, r2
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b2d      	cmp	r3, #45	; 0x2d
 8001046:	d104      	bne.n	8001052 <parseFloat+0x82>
            decimalFlag |= (1<<1);
 8001048:	7afb      	ldrb	r3, [r7, #11]
 800104a:	f043 0302 	orr.w	r3, r3, #2
 800104e:	72fb      	strb	r3, [r7, #11]
 8001050:	e08a      	b.n	8001168 <parseFloat+0x198>
        } else if (buffer[i % ESPRXBUFFERSIZE] >= '0' && buffer[i % ESPRXBUFFERSIZE] <= '9') {
 8001052:	893a      	ldrh	r2, [r7, #8]
 8001054:	4b62      	ldr	r3, [pc, #392]	; (80011e0 <parseFloat+0x210>)
 8001056:	fba3 1302 	umull	r1, r3, r3, r2
 800105a:	1ad1      	subs	r1, r2, r3
 800105c:	0849      	lsrs	r1, r1, #1
 800105e:	440b      	add	r3, r1
 8001060:	0a19      	lsrs	r1, r3, #8
 8001062:	460b      	mov	r3, r1
 8001064:	025b      	lsls	r3, r3, #9
 8001066:	1a5b      	subs	r3, r3, r1
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	b29b      	uxth	r3, r3
 800106c:	461a      	mov	r2, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4413      	add	r3, r2
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b2f      	cmp	r3, #47	; 0x2f
 8001076:	d977      	bls.n	8001168 <parseFloat+0x198>
 8001078:	893a      	ldrh	r2, [r7, #8]
 800107a:	4b59      	ldr	r3, [pc, #356]	; (80011e0 <parseFloat+0x210>)
 800107c:	fba3 1302 	umull	r1, r3, r3, r2
 8001080:	1ad1      	subs	r1, r2, r3
 8001082:	0849      	lsrs	r1, r1, #1
 8001084:	440b      	add	r3, r1
 8001086:	0a19      	lsrs	r1, r3, #8
 8001088:	460b      	mov	r3, r1
 800108a:	025b      	lsls	r3, r3, #9
 800108c:	1a5b      	subs	r3, r3, r1
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	b29b      	uxth	r3, r3
 8001092:	461a      	mov	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4413      	add	r3, r2
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b39      	cmp	r3, #57	; 0x39
 800109c:	d864      	bhi.n	8001168 <parseFloat+0x198>
            if ((decimalFlag & (1<<0)) == (1<<0)) {
 800109e:	7afb      	ldrb	r3, [r7, #11]
 80010a0:	f003 0301 	and.w	r3, r3, #1
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d03f      	beq.n	8001128 <parseFloat+0x158>
                decimalPlaces++;
 80010a8:	7abb      	ldrb	r3, [r7, #10]
 80010aa:	3301      	adds	r3, #1
 80010ac:	72bb      	strb	r3, [r7, #10]
                value = value + (buffer[i % ESPRXBUFFERSIZE] - '0') / pow(10, decimalPlaces);
 80010ae:	68f8      	ldr	r0, [r7, #12]
 80010b0:	f7ff fa5a 	bl	8000568 <__aeabi_f2d>
 80010b4:	4604      	mov	r4, r0
 80010b6:	460d      	mov	r5, r1
 80010b8:	893a      	ldrh	r2, [r7, #8]
 80010ba:	4b49      	ldr	r3, [pc, #292]	; (80011e0 <parseFloat+0x210>)
 80010bc:	fba3 1302 	umull	r1, r3, r3, r2
 80010c0:	1ad1      	subs	r1, r2, r3
 80010c2:	0849      	lsrs	r1, r1, #1
 80010c4:	440b      	add	r3, r1
 80010c6:	0a19      	lsrs	r1, r3, #8
 80010c8:	460b      	mov	r3, r1
 80010ca:	025b      	lsls	r3, r3, #9
 80010cc:	1a5b      	subs	r3, r3, r1
 80010ce:	1ad3      	subs	r3, r2, r3
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	461a      	mov	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4413      	add	r3, r2
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	3b30      	subs	r3, #48	; 0x30
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff fa31 	bl	8000544 <__aeabi_i2d>
 80010e2:	4680      	mov	r8, r0
 80010e4:	4689      	mov	r9, r1
 80010e6:	7abb      	ldrb	r3, [r7, #10]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff fa1b 	bl	8000524 <__aeabi_ui2d>
 80010ee:	4602      	mov	r2, r0
 80010f0:	460b      	mov	r3, r1
 80010f2:	ec43 2b11 	vmov	d1, r2, r3
 80010f6:	ed9f 0b38 	vldr	d0, [pc, #224]	; 80011d8 <parseFloat+0x208>
 80010fa:	f00d fa7f 	bl	800e5fc <pow>
 80010fe:	ec53 2b10 	vmov	r2, r3, d0
 8001102:	4640      	mov	r0, r8
 8001104:	4649      	mov	r1, r9
 8001106:	f7ff fbb1 	bl	800086c <__aeabi_ddiv>
 800110a:	4602      	mov	r2, r0
 800110c:	460b      	mov	r3, r1
 800110e:	4620      	mov	r0, r4
 8001110:	4629      	mov	r1, r5
 8001112:	f7ff f8cb 	bl	80002ac <__adddf3>
 8001116:	4602      	mov	r2, r0
 8001118:	460b      	mov	r3, r1
 800111a:	4610      	mov	r0, r2
 800111c:	4619      	mov	r1, r3
 800111e:	f7ff fd53 	bl	8000bc8 <__aeabi_d2f>
 8001122:	4603      	mov	r3, r0
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	e01f      	b.n	8001168 <parseFloat+0x198>
            } else {
                value = value * 10 + (buffer[i % ESPRXBUFFERSIZE] - '0');
 8001128:	edd7 7a03 	vldr	s15, [r7, #12]
 800112c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001130:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001134:	893a      	ldrh	r2, [r7, #8]
 8001136:	4b2a      	ldr	r3, [pc, #168]	; (80011e0 <parseFloat+0x210>)
 8001138:	fba3 1302 	umull	r1, r3, r3, r2
 800113c:	1ad1      	subs	r1, r2, r3
 800113e:	0849      	lsrs	r1, r1, #1
 8001140:	440b      	add	r3, r1
 8001142:	0a19      	lsrs	r1, r3, #8
 8001144:	460b      	mov	r3, r1
 8001146:	025b      	lsls	r3, r3, #9
 8001148:	1a5b      	subs	r3, r3, r1
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	b29b      	uxth	r3, r3
 800114e:	461a      	mov	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4413      	add	r3, r2
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	3b30      	subs	r3, #48	; 0x30
 8001158:	ee07 3a90 	vmov	s15, r3
 800115c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001160:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001164:	edc7 7a03 	vstr	s15, [r7, #12]
            }
        }
        if(value > 50) {
 8001168:	edd7 7a03 	vldr	s15, [r7, #12]
 800116c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80011e4 <parseFloat+0x214>
 8001170:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001178:	dd00      	ble.n	800117c <parseFloat+0x1ac>
        	__asm__ volatile("NOP");
 800117a:	bf00      	nop
    for (uint16_t i = startIndex; buffer[i % ESPRXBUFFERSIZE] != '_'; i++) {
 800117c:	893b      	ldrh	r3, [r7, #8]
 800117e:	3301      	adds	r3, #1
 8001180:	813b      	strh	r3, [r7, #8]
 8001182:	893a      	ldrh	r2, [r7, #8]
 8001184:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <parseFloat+0x210>)
 8001186:	fba3 1302 	umull	r1, r3, r3, r2
 800118a:	1ad1      	subs	r1, r2, r3
 800118c:	0849      	lsrs	r1, r1, #1
 800118e:	440b      	add	r3, r1
 8001190:	0a19      	lsrs	r1, r3, #8
 8001192:	460b      	mov	r3, r1
 8001194:	025b      	lsls	r3, r3, #9
 8001196:	1a5b      	subs	r3, r3, r1
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	b29b      	uxth	r3, r3
 800119c:	461a      	mov	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4413      	add	r3, r2
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b5f      	cmp	r3, #95	; 0x5f
 80011a6:	f47f af24 	bne.w	8000ff2 <parseFloat+0x22>
        }
    }

    if((decimalFlag & (1<<1)) == (1<<1)) {
 80011aa:	7afb      	ldrb	r3, [r7, #11]
 80011ac:	f003 0302 	and.w	r3, r3, #2
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d005      	beq.n	80011c0 <parseFloat+0x1f0>
    	value *= -1.0f;
 80011b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80011b8:	eef1 7a67 	vneg.f32	s15, s15
 80011bc:	edc7 7a03 	vstr	s15, [r7, #12]
    }

    return value;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	ee07 3a90 	vmov	s15, r3
}
 80011c6:	eeb0 0a67 	vmov.f32	s0, s15
 80011ca:	3710      	adds	r7, #16
 80011cc:	46bd      	mov	sp, r7
 80011ce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80011d2:	bf00      	nop
 80011d4:	f3af 8000 	nop.w
 80011d8:	00000000 	.word	0x00000000
 80011dc:	40240000 	.word	0x40240000
 80011e0:	00804021 	.word	0x00804021
 80011e4:	42480000 	.word	0x42480000

080011e8 <espRecon>:

void espRecon(UART_HandleTypeDef *huart)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b0a2      	sub	sp, #136	; 0x88
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	char pData[100];
	debugVar = 122;
 80011f0:	4b38      	ldr	r3, [pc, #224]	; (80012d4 <espRecon+0xec>)
 80011f2:	227a      	movs	r2, #122	; 0x7a
 80011f4:	601a      	str	r2, [r3, #0]

	sprintf(pData, "AT+CIPCLOSE\r\n");
 80011f6:	f107 0320 	add.w	r3, r7, #32
 80011fa:	4937      	ldr	r1, [pc, #220]	; (80012d8 <espRecon+0xf0>)
 80011fc:	4618      	mov	r0, r3
 80011fe:	f00b f8a3 	bl	800c348 <siprintf>
	HAL_UART_Transmit(huart, pData, strlen(pData), 250);
 8001202:	f107 0320 	add.w	r3, r7, #32
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff f842 	bl	8000290 <strlen>
 800120c:	4603      	mov	r3, r0
 800120e:	b29a      	uxth	r2, r3
 8001210:	f107 0120 	add.w	r1, r7, #32
 8001214:	23fa      	movs	r3, #250	; 0xfa
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f007 f8c8 	bl	80083ac <HAL_UART_Transmit>
	vTaskDelay(50);
 800121c:	2032      	movs	r0, #50	; 0x32
 800121e:	f008 fe05 	bl	8009e2c <vTaskDelay>

	debugVar = 123;
 8001222:	4b2c      	ldr	r3, [pc, #176]	; (80012d4 <espRecon+0xec>)
 8001224:	227b      	movs	r2, #123	; 0x7b
 8001226:	601a      	str	r2, [r3, #0]

	sprintf(pData, "AT+CIPSTART=\"TCP\",\"192.168.137.1\",8080\r\n");
 8001228:	f107 0320 	add.w	r3, r7, #32
 800122c:	492b      	ldr	r1, [pc, #172]	; (80012dc <espRecon+0xf4>)
 800122e:	4618      	mov	r0, r3
 8001230:	f00b f88a 	bl	800c348 <siprintf>
	HAL_UART_Transmit(huart, pData, strlen(pData), 250);
 8001234:	f107 0320 	add.w	r3, r7, #32
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff f829 	bl	8000290 <strlen>
 800123e:	4603      	mov	r3, r0
 8001240:	b29a      	uxth	r2, r3
 8001242:	f107 0120 	add.w	r1, r7, #32
 8001246:	23fa      	movs	r3, #250	; 0xfa
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f007 f8af 	bl	80083ac <HAL_UART_Transmit>
	vTaskDelay(40);
 800124e:	2028      	movs	r0, #40	; 0x28
 8001250:	f008 fdec 	bl	8009e2c <vTaskDelay>

	debugVar = 124;
 8001254:	4b1f      	ldr	r3, [pc, #124]	; (80012d4 <espRecon+0xec>)
 8001256:	227c      	movs	r2, #124	; 0x7c
 8001258:	601a      	str	r2, [r3, #0]
	// Creating the entire GET request string
	sprintf(pData, "GET /robot HTTP/1.1\r\n"
 800125a:	f107 0320 	add.w	r3, r7, #32
 800125e:	4920      	ldr	r1, [pc, #128]	; (80012e0 <espRecon+0xf8>)
 8001260:	4618      	mov	r0, r3
 8001262:	f00b f871 	bl	800c348 <siprintf>
					  "Host: 192.168.137.1\r\n");
	int getRequestLength = strlen(pData);
 8001266:	f107 0320 	add.w	r3, r7, #32
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff f810 	bl	8000290 <strlen>
 8001270:	4603      	mov	r3, r0
 8001272:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	char pDataBuf[20];
	sprintf(pDataBuf, "AT+CIPSEND=%d\r\n", getRequestLength);
 8001276:	f107 030c 	add.w	r3, r7, #12
 800127a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800127e:	4919      	ldr	r1, [pc, #100]	; (80012e4 <espRecon+0xfc>)
 8001280:	4618      	mov	r0, r3
 8001282:	f00b f861 	bl	800c348 <siprintf>
	debugVar = 125;
 8001286:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <espRecon+0xec>)
 8001288:	227d      	movs	r2, #125	; 0x7d
 800128a:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(huart, pDataBuf, strlen(pDataBuf), 250);
 800128c:	f107 030c 	add.w	r3, r7, #12
 8001290:	4618      	mov	r0, r3
 8001292:	f7fe fffd 	bl	8000290 <strlen>
 8001296:	4603      	mov	r3, r0
 8001298:	b29a      	uxth	r2, r3
 800129a:	f107 010c 	add.w	r1, r7, #12
 800129e:	23fa      	movs	r3, #250	; 0xfa
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f007 f883 	bl	80083ac <HAL_UART_Transmit>
	vTaskDelay(10);
 80012a6:	200a      	movs	r0, #10
 80012a8:	f008 fdc0 	bl	8009e2c <vTaskDelay>
	debugVar = 126;
 80012ac:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <espRecon+0xec>)
 80012ae:	227e      	movs	r2, #126	; 0x7e
 80012b0:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(huart, pData, getRequestLength, 250);
 80012b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80012b6:	b29a      	uxth	r2, r3
 80012b8:	f107 0120 	add.w	r1, r7, #32
 80012bc:	23fa      	movs	r3, #250	; 0xfa
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f007 f874 	bl	80083ac <HAL_UART_Transmit>
	vTaskDelay(50);
 80012c4:	2032      	movs	r0, #50	; 0x32
 80012c6:	f008 fdb1 	bl	8009e2c <vTaskDelay>
}
 80012ca:	bf00      	nop
 80012cc:	3788      	adds	r7, #136	; 0x88
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000f4c 	.word	0x20000f4c
 80012d8:	0800f488 	.word	0x0800f488
 80012dc:	0800f498 	.word	0x0800f498
 80012e0:	0800f4c4 	.word	0x0800f4c4
 80012e4:	0800f4f0 	.word	0x0800f4f0

080012e8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4a07      	ldr	r2, [pc, #28]	; (8001314 <vApplicationGetIdleTaskMemory+0x2c>)
 80012f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	4a06      	ldr	r2, [pc, #24]	; (8001318 <vApplicationGetIdleTaskMemory+0x30>)
 80012fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2260      	movs	r2, #96	; 0x60
 8001304:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001306:	bf00      	nop
 8001308:	3714      	adds	r7, #20
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	20000204 	.word	0x20000204
 8001318:	2000025c 	.word	0x2000025c

0800131c <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	4a07      	ldr	r2, [pc, #28]	; (8001348 <vApplicationGetTimerTaskMemory+0x2c>)
 800132c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	4a06      	ldr	r2, [pc, #24]	; (800134c <vApplicationGetTimerTaskMemory+0x30>)
 8001332:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	22c0      	movs	r2, #192	; 0xc0
 8001338:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800133a:	bf00      	nop
 800133c:	3714      	adds	r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	200003dc 	.word	0x200003dc
 800134c:	20000434 	.word	0x20000434

08001350 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800135a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135e:	2b00      	cmp	r3, #0
 8001360:	db0b      	blt.n	800137a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	f003 021f 	and.w	r2, r3, #31
 8001368:	4907      	ldr	r1, [pc, #28]	; (8001388 <__NVIC_EnableIRQ+0x38>)
 800136a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136e:	095b      	lsrs	r3, r3, #5
 8001370:	2001      	movs	r0, #1
 8001372:	fa00 f202 	lsl.w	r2, r0, r2
 8001376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	e000e100 	.word	0xe000e100

0800138c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	6039      	str	r1, [r7, #0]
 8001396:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139c:	2b00      	cmp	r3, #0
 800139e:	db0a      	blt.n	80013b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	490c      	ldr	r1, [pc, #48]	; (80013d8 <__NVIC_SetPriority+0x4c>)
 80013a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013aa:	0112      	lsls	r2, r2, #4
 80013ac:	b2d2      	uxtb	r2, r2
 80013ae:	440b      	add	r3, r1
 80013b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013b4:	e00a      	b.n	80013cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	4908      	ldr	r1, [pc, #32]	; (80013dc <__NVIC_SetPriority+0x50>)
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	f003 030f 	and.w	r3, r3, #15
 80013c2:	3b04      	subs	r3, #4
 80013c4:	0112      	lsls	r2, r2, #4
 80013c6:	b2d2      	uxtb	r2, r2
 80013c8:	440b      	add	r3, r1
 80013ca:	761a      	strb	r2, [r3, #24]
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	e000e100 	.word	0xe000e100
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013e0:	b5b0      	push	{r4, r5, r7, lr}
 80013e2:	b0c2      	sub	sp, #264	; 0x108
 80013e4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	avrBatVoltage = 0;
 80013e6:	4bb9      	ldr	r3, [pc, #740]	; (80016cc <main+0x2ec>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	801a      	strh	r2, [r3, #0]
	BatChargeState = 0;
 80013ec:	4bb8      	ldr	r3, [pc, #736]	; (80016d0 <main+0x2f0>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	701a      	strb	r2, [r3, #0]

	EncoderR.timeNew = 0;
 80013f2:	4bb8      	ldr	r3, [pc, #736]	; (80016d4 <main+0x2f4>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
	EncoderR.timeOld = 0;
 80013f8:	4bb6      	ldr	r3, [pc, #728]	; (80016d4 <main+0x2f4>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	605a      	str	r2, [r3, #4]
	EncoderR.timeUpdate = 0;
 80013fe:	4bb5      	ldr	r3, [pc, #724]	; (80016d4 <main+0x2f4>)
 8001400:	2200      	movs	r2, #0
 8001402:	721a      	strb	r2, [r3, #8]
	EncoderR.positionNew = 0;
 8001404:	4bb3      	ldr	r3, [pc, #716]	; (80016d4 <main+0x2f4>)
 8001406:	2200      	movs	r2, #0
 8001408:	60da      	str	r2, [r3, #12]
	EncoderR.positionOld = 0;
 800140a:	4bb2      	ldr	r3, [pc, #712]	; (80016d4 <main+0x2f4>)
 800140c:	2200      	movs	r2, #0
 800140e:	611a      	str	r2, [r3, #16]
	EncoderR.posCntUpdate = 0;
 8001410:	4bb0      	ldr	r3, [pc, #704]	; (80016d4 <main+0x2f4>)
 8001412:	2200      	movs	r2, #0
 8001414:	751a      	strb	r2, [r3, #20]
	EncoderR.rpm = 0;
 8001416:	4baf      	ldr	r3, [pc, #700]	; (80016d4 <main+0x2f4>)
 8001418:	2200      	movs	r2, #0
 800141a:	619a      	str	r2, [r3, #24]

	EncoderL.timeNew = 0;
 800141c:	4bae      	ldr	r3, [pc, #696]	; (80016d8 <main+0x2f8>)
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
	EncoderL.timeOld = 0;
 8001422:	4bad      	ldr	r3, [pc, #692]	; (80016d8 <main+0x2f8>)
 8001424:	2200      	movs	r2, #0
 8001426:	605a      	str	r2, [r3, #4]
	EncoderL.timeUpdate = 0;
 8001428:	4bab      	ldr	r3, [pc, #684]	; (80016d8 <main+0x2f8>)
 800142a:	2200      	movs	r2, #0
 800142c:	721a      	strb	r2, [r3, #8]
	EncoderL.positionNew = 0;
 800142e:	4baa      	ldr	r3, [pc, #680]	; (80016d8 <main+0x2f8>)
 8001430:	2200      	movs	r2, #0
 8001432:	60da      	str	r2, [r3, #12]
	EncoderL.positionOld = 0;
 8001434:	4ba8      	ldr	r3, [pc, #672]	; (80016d8 <main+0x2f8>)
 8001436:	2200      	movs	r2, #0
 8001438:	611a      	str	r2, [r3, #16]
	EncoderL.posCntUpdate = 0;
 800143a:	4ba7      	ldr	r3, [pc, #668]	; (80016d8 <main+0x2f8>)
 800143c:	2200      	movs	r2, #0
 800143e:	751a      	strb	r2, [r3, #20]
	EncoderL.rpm = 0;
 8001440:	4ba5      	ldr	r3, [pc, #660]	; (80016d8 <main+0x2f8>)
 8001442:	2200      	movs	r2, #0
 8001444:	619a      	str	r2, [r3, #24]

	SoftPwmR.curValue = 0;
 8001446:	4ba5      	ldr	r3, [pc, #660]	; (80016dc <main+0x2fc>)
 8001448:	2200      	movs	r2, #0
 800144a:	805a      	strh	r2, [r3, #2]
	SoftPwmR.reqValue = 0;
 800144c:	4ba3      	ldr	r3, [pc, #652]	; (80016dc <main+0x2fc>)
 800144e:	2200      	movs	r2, #0
 8001450:	801a      	strh	r2, [r3, #0]
	SoftPwmR.pwmValue = 0;
 8001452:	4ba2      	ldr	r3, [pc, #648]	; (80016dc <main+0x2fc>)
 8001454:	2200      	movs	r2, #0
 8001456:	809a      	strh	r2, [r3, #4]
	SoftPwmR.status = 0;
 8001458:	4ba0      	ldr	r3, [pc, #640]	; (80016dc <main+0x2fc>)
 800145a:	2200      	movs	r2, #0
 800145c:	719a      	strb	r2, [r3, #6]

	SoftPwmL.curValue = 0;
 800145e:	4ba0      	ldr	r3, [pc, #640]	; (80016e0 <main+0x300>)
 8001460:	2200      	movs	r2, #0
 8001462:	805a      	strh	r2, [r3, #2]
	SoftPwmL.reqValue = 0;
 8001464:	4b9e      	ldr	r3, [pc, #632]	; (80016e0 <main+0x300>)
 8001466:	2200      	movs	r2, #0
 8001468:	801a      	strh	r2, [r3, #0]
	SoftPwmL.pwmValue = 0;
 800146a:	4b9d      	ldr	r3, [pc, #628]	; (80016e0 <main+0x300>)
 800146c:	2200      	movs	r2, #0
 800146e:	809a      	strh	r2, [r3, #4]
	SoftPwmL.status = 0;
 8001470:	4b9b      	ldr	r3, [pc, #620]	; (80016e0 <main+0x300>)
 8001472:	2200      	movs	r2, #0
 8001474:	719a      	strb	r2, [r3, #6]

	softCounterValue = 0;
 8001476:	4b9b      	ldr	r3, [pc, #620]	; (80016e4 <main+0x304>)
 8001478:	2200      	movs	r2, #0
 800147a:	801a      	strh	r2, [r3, #0]

	memset(txBuffer, '\0', sizeof(txBuffer));
 800147c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8001480:	2100      	movs	r1, #0
 8001482:	4899      	ldr	r0, [pc, #612]	; (80016e8 <main+0x308>)
 8001484:	f00a ffc3 	bl	800c40e <memset>
	memset(rxBuffer, '\0', sizeof(rxBuffer));
 8001488:	f240 12ff 	movw	r2, #511	; 0x1ff
 800148c:	2100      	movs	r1, #0
 800148e:	4897      	ldr	r0, [pc, #604]	; (80016ec <main+0x30c>)
 8001490:	f00a ffbd 	bl	800c40e <memset>
	rxBufferHead = 0;
 8001494:	4b96      	ldr	r3, [pc, #600]	; (80016f0 <main+0x310>)
 8001496:	2200      	movs	r2, #0
 8001498:	801a      	strh	r2, [r3, #0]
	memset(rxBufferCopy, '\0', sizeof(rxBufferCopy));
 800149a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800149e:	2100      	movs	r1, #0
 80014a0:	4894      	ldr	r0, [pc, #592]	; (80016f4 <main+0x314>)
 80014a2:	f00a ffb4 	bl	800c40e <memset>

	joyX = 0;
 80014a6:	4b94      	ldr	r3, [pc, #592]	; (80016f8 <main+0x318>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	701a      	strb	r2, [r3, #0]
	joyY = 0;
 80014ac:	4b93      	ldr	r3, [pc, #588]	; (80016fc <main+0x31c>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	701a      	strb	r2, [r3, #0]
	tSpeed = 0;
 80014b2:	4b93      	ldr	r3, [pc, #588]	; (8001700 <main+0x320>)
 80014b4:	f04f 0200 	mov.w	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
	aSpeed = 0;
 80014ba:	4b92      	ldr	r3, [pc, #584]	; (8001704 <main+0x324>)
 80014bc:	f04f 0200 	mov.w	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]

	memset(accelValueR, '0', sizeof(accelValueR));
 80014c2:	2206      	movs	r2, #6
 80014c4:	2130      	movs	r1, #48	; 0x30
 80014c6:	4890      	ldr	r0, [pc, #576]	; (8001708 <main+0x328>)
 80014c8:	f00a ffa1 	bl	800c40e <memset>
	memset(accelValueL, '0', sizeof(accelValueL));
 80014cc:	2206      	movs	r2, #6
 80014ce:	2130      	movs	r1, #48	; 0x30
 80014d0:	488e      	ldr	r0, [pc, #568]	; (800170c <main+0x32c>)
 80014d2:	f00a ff9c 	bl	800c40e <memset>

	debugVar = 0;
 80014d6:	4b8e      	ldr	r3, [pc, #568]	; (8001710 <main+0x330>)
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
	debugVar2 = 0;
 80014dc:	4b8d      	ldr	r3, [pc, #564]	; (8001714 <main+0x334>)
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014e2:	f002 fedb 	bl	800429c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014e6:	f000 f94b 	bl	8001780 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014ea:	f000 fb11 	bl	8001b10 <MX_GPIO_Init>
  MX_DMA_Init();
 80014ee:	f000 fae9 	bl	8001ac4 <MX_DMA_Init>
  MX_ADC1_Init();
 80014f2:	f000 f9a3 	bl	800183c <MX_ADC1_Init>
  MX_SPI2_Init();
 80014f6:	f000 f9fd 	bl	80018f4 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 80014fa:	f000 fab3 	bl	8001a64 <MX_USART3_UART_Init>
  MX_TIM17_Init();
 80014fe:	f000 fa89 	bl	8001a14 <MX_TIM17_Init>
  MX_TIM15_Init();
 8001502:	f000 fa35 	bl	8001970 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  ADC1_configuration();
 8001506:	f000 fbaf 	bl	8001c68 <ADC1_configuration>
  TIM1_configuration();
 800150a:	f000 fc8b 	bl	8001e24 <TIM1_configuration>
  TIM2_configuration();
 800150e:	f000 fd01 	bl	8001f14 <TIM2_configuration>
  TIM17_additional_configuration();
 8001512:	f000 fdb1 	bl	8002078 <TIM17_additional_configuration>
  TIM15_additional_configuration();
 8001516:	f000 fd89 	bl	800202c <TIM15_additional_configuration>
//  TIM16_additional_configuration();
  USART3_additional_configuration();
 800151a:	f000 fdc3 	bl	80020a4 <USART3_additional_configuration>

  kToRpm = (32*1000*60)/256;
 800151e:	4b7e      	ldr	r3, [pc, #504]	; (8001718 <main+0x338>)
 8001520:	4a7e      	ldr	r2, [pc, #504]	; (800171c <main+0x33c>)
 8001522:	601a      	str	r2, [r3, #0]

  pc13EventGroup = xEventGroupCreate();
 8001524:	f007 fc60 	bl	8008de8 <xEventGroupCreate>
 8001528:	4603      	mov	r3, r0
 800152a:	4a7d      	ldr	r2, [pc, #500]	; (8001720 <main+0x340>)
 800152c:	6013      	str	r3, [r2, #0]
  pc14EventGroup = xEventGroupCreate();
 800152e:	f007 fc5b 	bl	8008de8 <xEventGroupCreate>
 8001532:	4603      	mov	r3, r0
 8001534:	4a7b      	ldr	r2, [pc, #492]	; (8001724 <main+0x344>)
 8001536:	6013      	str	r3, [r2, #0]
  timerFdsEventGroup = xEventGroupCreate();
 8001538:	f007 fc56 	bl	8008de8 <xEventGroupCreate>
 800153c:	4603      	mov	r3, r0
 800153e:	4a7a      	ldr	r2, [pc, #488]	; (8001728 <main+0x348>)
 8001540:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  timerForDataSending = xTimerCreate("TimerForDataSending", pdMS_TO_TICKS(80), pdTRUE, 1, timerForSendDataCallback); //211
 8001542:	4b7a      	ldr	r3, [pc, #488]	; (800172c <main+0x34c>)
 8001544:	9300      	str	r3, [sp, #0]
 8001546:	2301      	movs	r3, #1
 8001548:	2201      	movs	r2, #1
 800154a:	2150      	movs	r1, #80	; 0x50
 800154c:	4878      	ldr	r0, [pc, #480]	; (8001730 <main+0x350>)
 800154e:	f009 faa1 	bl	800aa94 <xTimerCreate>
 8001552:	4603      	mov	r3, r0
 8001554:	4a77      	ldr	r2, [pc, #476]	; (8001734 <main+0x354>)
 8001556:	6013      	str	r3, [r2, #0]
  xTimerStart(timerForDataSending, portMAX_DELAY);
 8001558:	4b76      	ldr	r3, [pc, #472]	; (8001734 <main+0x354>)
 800155a:	681c      	ldr	r4, [r3, #0]
 800155c:	f008 fdaa 	bl	800a0b4 <xTaskGetTickCount>
 8001560:	4602      	mov	r2, r0
 8001562:	f04f 33ff 	mov.w	r3, #4294967295
 8001566:	9300      	str	r3, [sp, #0]
 8001568:	2300      	movs	r3, #0
 800156a:	2101      	movs	r1, #1
 800156c:	4620      	mov	r0, r4
 800156e:	f009 fae5 	bl	800ab3c <xTimerGenericCommand>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of PS_Measure */
  osThreadDef(PS_Measure, psMeasure, osPriorityNormal, 0, 96);
 8001572:	4b71      	ldr	r3, [pc, #452]	; (8001738 <main+0x358>)
 8001574:	f107 04e4 	add.w	r4, r7, #228	; 0xe4
 8001578:	461d      	mov	r5, r3
 800157a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800157c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800157e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001582:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PS_MeasureHandle = osThreadCreate(osThread(PS_Measure), NULL);
 8001586:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800158a:	2100      	movs	r1, #0
 800158c:	4618      	mov	r0, r3
 800158e:	f007 fbcb 	bl	8008d28 <osThreadCreate>
 8001592:	4603      	mov	r3, r0
 8001594:	4a69      	ldr	r2, [pc, #420]	; (800173c <main+0x35c>)
 8001596:	6013      	str	r3, [r2, #0]

  /* definition and creation of PC_13_LED */
  osThreadDef(PC_13_LED, pc13LedCntrl, osPriorityNormal, 0, 96);
 8001598:	4b69      	ldr	r3, [pc, #420]	; (8001740 <main+0x360>)
 800159a:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 800159e:	461d      	mov	r5, r3
 80015a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PC_13_LEDHandle = osThreadCreate(osThread(PC_13_LED), NULL);
 80015ac:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80015b0:	2100      	movs	r1, #0
 80015b2:	4618      	mov	r0, r3
 80015b4:	f007 fbb8 	bl	8008d28 <osThreadCreate>
 80015b8:	4603      	mov	r3, r0
 80015ba:	4a62      	ldr	r2, [pc, #392]	; (8001744 <main+0x364>)
 80015bc:	6013      	str	r3, [r2, #0]

  /* definition and creation of PC_14_LED */
  osThreadDef(PC_14_LED, pc14LedCntrl, osPriorityNormal, 0, 96);
 80015be:	4b62      	ldr	r3, [pc, #392]	; (8001748 <main+0x368>)
 80015c0:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 80015c4:	461d      	mov	r5, r3
 80015c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PC_14_LEDHandle = osThreadCreate(osThread(PC_14_LED), NULL);
 80015d2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80015d6:	2100      	movs	r1, #0
 80015d8:	4618      	mov	r0, r3
 80015da:	f007 fba5 	bl	8008d28 <osThreadCreate>
 80015de:	4603      	mov	r3, r0
 80015e0:	4a5a      	ldr	r2, [pc, #360]	; (800174c <main+0x36c>)
 80015e2:	6013      	str	r3, [r2, #0]

  /* definition and creation of EspCommunication */
  osThreadDef(EspCommunication, espCommunication, osPriorityAboveNormal, 0, 256);
 80015e4:	4b5a      	ldr	r3, [pc, #360]	; (8001750 <main+0x370>)
 80015e6:	f107 0490 	add.w	r4, r7, #144	; 0x90
 80015ea:	461d      	mov	r5, r3
 80015ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EspCommunicationHandle = osThreadCreate(osThread(EspCommunication), NULL);
 80015f8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80015fc:	2100      	movs	r1, #0
 80015fe:	4618      	mov	r0, r3
 8001600:	f007 fb92 	bl	8008d28 <osThreadCreate>
 8001604:	4603      	mov	r3, r0
 8001606:	4a53      	ldr	r2, [pc, #332]	; (8001754 <main+0x374>)
 8001608:	6013      	str	r3, [r2, #0]

  /* definition and creation of EncoderR */
  osThreadDef(EncoderR, encoderR, osPriorityNormal, 0, 128);
 800160a:	4b53      	ldr	r3, [pc, #332]	; (8001758 <main+0x378>)
 800160c:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8001610:	461d      	mov	r5, r3
 8001612:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001614:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001616:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800161a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EncoderRHandle = osThreadCreate(osThread(EncoderR), NULL);
 800161e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001622:	2100      	movs	r1, #0
 8001624:	4618      	mov	r0, r3
 8001626:	f007 fb7f 	bl	8008d28 <osThreadCreate>
 800162a:	4603      	mov	r3, r0
 800162c:	4a4b      	ldr	r2, [pc, #300]	; (800175c <main+0x37c>)
 800162e:	6013      	str	r3, [r2, #0]

  /* definition and creation of EncoderL */
  osThreadDef(EncoderL, encoderL, osPriorityNormal, 0, 128);
 8001630:	4b4b      	ldr	r3, [pc, #300]	; (8001760 <main+0x380>)
 8001632:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001636:	461d      	mov	r5, r3
 8001638:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800163a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800163c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001640:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EncoderLHandle = osThreadCreate(osThread(EncoderL), NULL);
 8001644:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001648:	2100      	movs	r1, #0
 800164a:	4618      	mov	r0, r3
 800164c:	f007 fb6c 	bl	8008d28 <osThreadCreate>
 8001650:	4603      	mov	r3, r0
 8001652:	4a44      	ldr	r2, [pc, #272]	; (8001764 <main+0x384>)
 8001654:	6013      	str	r3, [r2, #0]

  /* definition and creation of SoftwarePwmR */
  osThreadDef(SoftwarePwmR, softwarePWMR, osPriorityNormal, 0, 156);
 8001656:	4b44      	ldr	r3, [pc, #272]	; (8001768 <main+0x388>)
 8001658:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800165c:	461d      	mov	r5, r3
 800165e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001660:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001662:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001666:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SoftwarePwmRHandle = osThreadCreate(osThread(SoftwarePwmR), NULL);
 800166a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800166e:	2100      	movs	r1, #0
 8001670:	4618      	mov	r0, r3
 8001672:	f007 fb59 	bl	8008d28 <osThreadCreate>
 8001676:	4603      	mov	r3, r0
 8001678:	4a3c      	ldr	r2, [pc, #240]	; (800176c <main+0x38c>)
 800167a:	6013      	str	r3, [r2, #0]

  /* definition and creation of SoftwarePwmL */
  osThreadDef(SoftwarePwmL, softwarePWML, osPriorityNormal, 0, 156);
 800167c:	4b3c      	ldr	r3, [pc, #240]	; (8001770 <main+0x390>)
 800167e:	f107 0420 	add.w	r4, r7, #32
 8001682:	461d      	mov	r5, r3
 8001684:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001686:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001688:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800168c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SoftwarePwmLHandle = osThreadCreate(osThread(SoftwarePwmL), NULL);
 8001690:	f107 0320 	add.w	r3, r7, #32
 8001694:	2100      	movs	r1, #0
 8001696:	4618      	mov	r0, r3
 8001698:	f007 fb46 	bl	8008d28 <osThreadCreate>
 800169c:	4603      	mov	r3, r0
 800169e:	4a35      	ldr	r2, [pc, #212]	; (8001774 <main+0x394>)
 80016a0:	6013      	str	r3, [r2, #0]

  /* definition and creation of Accelerometer */
  osThreadDef(Accelerometer, accelerometer, osPriorityNormal, 0, 96);
 80016a2:	4b35      	ldr	r3, [pc, #212]	; (8001778 <main+0x398>)
 80016a4:	1d3c      	adds	r4, r7, #4
 80016a6:	461d      	mov	r5, r3
 80016a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  AccelerometerHandle = osThreadCreate(osThread(Accelerometer), NULL);
 80016b4:	1d3b      	adds	r3, r7, #4
 80016b6:	2100      	movs	r1, #0
 80016b8:	4618      	mov	r0, r3
 80016ba:	f007 fb35 	bl	8008d28 <osThreadCreate>
 80016be:	4603      	mov	r3, r0
 80016c0:	4a2e      	ldr	r2, [pc, #184]	; (800177c <main+0x39c>)
 80016c2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80016c4:	f007 fb29 	bl	8008d1a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016c8:	e7fe      	b.n	80016c8 <main+0x2e8>
 80016ca:	bf00      	nop
 80016cc:	200009c8 	.word	0x200009c8
 80016d0:	200009ca 	.word	0x200009ca
 80016d4:	200009d4 	.word	0x200009d4
 80016d8:	200009f0 	.word	0x200009f0
 80016dc:	20000a0c 	.word	0x20000a0c
 80016e0:	20000a14 	.word	0x20000a14
 80016e4:	20000a20 	.word	0x20000a20
 80016e8:	20000a24 	.word	0x20000a24
 80016ec:	20000c24 	.word	0x20000c24
 80016f0:	20000e24 	.word	0x20000e24
 80016f4:	20000e28 	.word	0x20000e28
 80016f8:	20000f30 	.word	0x20000f30
 80016fc:	20000f31 	.word	0x20000f31
 8001700:	20000f34 	.word	0x20000f34
 8001704:	20000f38 	.word	0x20000f38
 8001708:	20000f3c 	.word	0x20000f3c
 800170c:	20000f44 	.word	0x20000f44
 8001710:	20000f4c 	.word	0x20000f4c
 8001714:	20000f50 	.word	0x20000f50
 8001718:	20000a1c 	.word	0x20000a1c
 800171c:	45ea6000 	.word	0x45ea6000
 8001720:	200009cc 	.word	0x200009cc
 8001724:	200009d0 	.word	0x200009d0
 8001728:	20000f2c 	.word	0x20000f2c
 800172c:	080021d1 	.word	0x080021d1
 8001730:	0800f500 	.word	0x0800f500
 8001734:	20000f28 	.word	0x20000f28
 8001738:	0800f520 	.word	0x0800f520
 800173c:	20000990 	.word	0x20000990
 8001740:	0800f548 	.word	0x0800f548
 8001744:	20000994 	.word	0x20000994
 8001748:	0800f570 	.word	0x0800f570
 800174c:	20000998 	.word	0x20000998
 8001750:	0800f5a0 	.word	0x0800f5a0
 8001754:	2000099c 	.word	0x2000099c
 8001758:	0800f5c8 	.word	0x0800f5c8
 800175c:	200009a0 	.word	0x200009a0
 8001760:	0800f5f0 	.word	0x0800f5f0
 8001764:	200009a4 	.word	0x200009a4
 8001768:	0800f61c 	.word	0x0800f61c
 800176c:	200009a8 	.word	0x200009a8
 8001770:	0800f648 	.word	0x0800f648
 8001774:	200009ac 	.word	0x200009ac
 8001778:	0800f674 	.word	0x0800f674
 800177c:	200009b0 	.word	0x200009b0

08001780 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b09c      	sub	sp, #112	; 0x70
 8001784:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001786:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800178a:	2228      	movs	r2, #40	; 0x28
 800178c:	2100      	movs	r1, #0
 800178e:	4618      	mov	r0, r3
 8001790:	f00a fe3d 	bl	800c40e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001794:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017a4:	1d3b      	adds	r3, r7, #4
 80017a6:	2230      	movs	r2, #48	; 0x30
 80017a8:	2100      	movs	r1, #0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f00a fe2f 	bl	800c40e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017b0:	2302      	movs	r3, #2
 80017b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017b4:	2301      	movs	r3, #1
 80017b6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017b8:	2310      	movs	r3, #16
 80017ba:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017bc:	2302      	movs	r3, #2
 80017be:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017c0:	2300      	movs	r3, #0
 80017c2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80017c4:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80017c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017ce:	4618      	mov	r0, r3
 80017d0:	f003 fdf6 	bl	80053c0 <HAL_RCC_OscConfig>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80017da:	f002 f8cf 	bl	800397c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017de:	230f      	movs	r3, #15
 80017e0:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017e2:	2302      	movs	r3, #2
 80017e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017e6:	2300      	movs	r3, #0
 80017e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017f0:	2300      	movs	r3, #0
 80017f2:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017f8:	2102      	movs	r1, #2
 80017fa:	4618      	mov	r0, r3
 80017fc:	f004 fe1e 	bl	800643c <HAL_RCC_ClockConfig>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001806:	f002 f8b9 	bl	800397c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM15|RCC_PERIPHCLK_TIM17
 800180a:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <SystemClock_Config+0xb8>)
 800180c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC1;
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 800180e:	2300      	movs	r3, #0
 8001810:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
 8001812:	2300      	movs	r3, #0
 8001814:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV2;
 8001816:	f44f 7388 	mov.w	r3, #272	; 0x110
 800181a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800181c:	1d3b      	adds	r3, r7, #4
 800181e:	4618      	mov	r0, r3
 8001820:	f005 f874 	bl	800690c <HAL_RCCEx_PeriphCLKConfig>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800182a:	f002 f8a7 	bl	800397c <Error_Handler>
  }
}
 800182e:	bf00      	nop
 8001830:	3770      	adds	r7, #112	; 0x70
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	00140080 	.word	0x00140080

0800183c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001842:	463b      	mov	r3, r7
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	609a      	str	r2, [r3, #8]
 800184c:	60da      	str	r2, [r3, #12]
 800184e:	611a      	str	r2, [r3, #16]
 8001850:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001852:	4b27      	ldr	r3, [pc, #156]	; (80018f0 <MX_ADC1_Init+0xb4>)
 8001854:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001858:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800185a:	4b25      	ldr	r3, [pc, #148]	; (80018f0 <MX_ADC1_Init+0xb4>)
 800185c:	2200      	movs	r2, #0
 800185e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001860:	4b23      	ldr	r3, [pc, #140]	; (80018f0 <MX_ADC1_Init+0xb4>)
 8001862:	2200      	movs	r2, #0
 8001864:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001866:	4b22      	ldr	r3, [pc, #136]	; (80018f0 <MX_ADC1_Init+0xb4>)
 8001868:	2200      	movs	r2, #0
 800186a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800186c:	4b20      	ldr	r3, [pc, #128]	; (80018f0 <MX_ADC1_Init+0xb4>)
 800186e:	2201      	movs	r2, #1
 8001870:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001872:	4b1f      	ldr	r3, [pc, #124]	; (80018f0 <MX_ADC1_Init+0xb4>)
 8001874:	2200      	movs	r2, #0
 8001876:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800187a:	4b1d      	ldr	r3, [pc, #116]	; (80018f0 <MX_ADC1_Init+0xb4>)
 800187c:	2200      	movs	r2, #0
 800187e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001880:	4b1b      	ldr	r3, [pc, #108]	; (80018f0 <MX_ADC1_Init+0xb4>)
 8001882:	2201      	movs	r2, #1
 8001884:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001886:	4b1a      	ldr	r3, [pc, #104]	; (80018f0 <MX_ADC1_Init+0xb4>)
 8001888:	2200      	movs	r2, #0
 800188a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800188c:	4b18      	ldr	r3, [pc, #96]	; (80018f0 <MX_ADC1_Init+0xb4>)
 800188e:	2201      	movs	r2, #1
 8001890:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001892:	4b17      	ldr	r3, [pc, #92]	; (80018f0 <MX_ADC1_Init+0xb4>)
 8001894:	2200      	movs	r2, #0
 8001896:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800189a:	4b15      	ldr	r3, [pc, #84]	; (80018f0 <MX_ADC1_Init+0xb4>)
 800189c:	2204      	movs	r2, #4
 800189e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80018a0:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <MX_ADC1_Init+0xb4>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80018a6:	4b12      	ldr	r3, [pc, #72]	; (80018f0 <MX_ADC1_Init+0xb4>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018ac:	4810      	ldr	r0, [pc, #64]	; (80018f0 <MX_ADC1_Init+0xb4>)
 80018ae:	f002 fd4f 	bl	8004350 <HAL_ADC_Init>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 80018b8:	f002 f860 	bl	800397c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80018bc:	2303      	movs	r3, #3
 80018be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018c0:	2301      	movs	r3, #1
 80018c2:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80018c4:	2300      	movs	r3, #0
 80018c6:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80018cc:	2300      	movs	r3, #0
 80018ce:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018d4:	463b      	mov	r3, r7
 80018d6:	4619      	mov	r1, r3
 80018d8:	4805      	ldr	r0, [pc, #20]	; (80018f0 <MX_ADC1_Init+0xb4>)
 80018da:	f002 febf 	bl	800465c <HAL_ADC_ConfigChannel>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80018e4:	f002 f84a 	bl	800397c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80018e8:	bf00      	nop
 80018ea:	3718      	adds	r7, #24
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	20000734 	.word	0x20000734

080018f4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80018f8:	4b1b      	ldr	r3, [pc, #108]	; (8001968 <MX_SPI2_Init+0x74>)
 80018fa:	4a1c      	ldr	r2, [pc, #112]	; (800196c <MX_SPI2_Init+0x78>)
 80018fc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80018fe:	4b1a      	ldr	r3, [pc, #104]	; (8001968 <MX_SPI2_Init+0x74>)
 8001900:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001904:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8001906:	4b18      	ldr	r3, [pc, #96]	; (8001968 <MX_SPI2_Init+0x74>)
 8001908:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800190c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800190e:	4b16      	ldr	r3, [pc, #88]	; (8001968 <MX_SPI2_Init+0x74>)
 8001910:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001914:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001916:	4b14      	ldr	r3, [pc, #80]	; (8001968 <MX_SPI2_Init+0x74>)
 8001918:	2202      	movs	r2, #2
 800191a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800191c:	4b12      	ldr	r3, [pc, #72]	; (8001968 <MX_SPI2_Init+0x74>)
 800191e:	2201      	movs	r2, #1
 8001920:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001922:	4b11      	ldr	r3, [pc, #68]	; (8001968 <MX_SPI2_Init+0x74>)
 8001924:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001928:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800192a:	4b0f      	ldr	r3, [pc, #60]	; (8001968 <MX_SPI2_Init+0x74>)
 800192c:	2220      	movs	r2, #32
 800192e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001930:	4b0d      	ldr	r3, [pc, #52]	; (8001968 <MX_SPI2_Init+0x74>)
 8001932:	2200      	movs	r2, #0
 8001934:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001936:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <MX_SPI2_Init+0x74>)
 8001938:	2200      	movs	r2, #0
 800193a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800193c:	4b0a      	ldr	r3, [pc, #40]	; (8001968 <MX_SPI2_Init+0x74>)
 800193e:	2200      	movs	r2, #0
 8001940:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001942:	4b09      	ldr	r3, [pc, #36]	; (8001968 <MX_SPI2_Init+0x74>)
 8001944:	2207      	movs	r2, #7
 8001946:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001948:	4b07      	ldr	r3, [pc, #28]	; (8001968 <MX_SPI2_Init+0x74>)
 800194a:	2200      	movs	r2, #0
 800194c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800194e:	4b06      	ldr	r3, [pc, #24]	; (8001968 <MX_SPI2_Init+0x74>)
 8001950:	2200      	movs	r2, #0
 8001952:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001954:	4804      	ldr	r0, [pc, #16]	; (8001968 <MX_SPI2_Init+0x74>)
 8001956:	f005 f95d 	bl	8006c14 <HAL_SPI_Init>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8001960:	f002 f80c 	bl	800397c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001964:	bf00      	nop
 8001966:	bd80      	pop	{r7, pc}
 8001968:	20000784 	.word	0x20000784
 800196c:	40003800 	.word	0x40003800

08001970 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b088      	sub	sp, #32
 8001974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001976:	f107 0310 	add.w	r3, r7, #16
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	605a      	str	r2, [r3, #4]
 8001980:	609a      	str	r2, [r3, #8]
 8001982:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001984:	1d3b      	adds	r3, r7, #4
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	605a      	str	r2, [r3, #4]
 800198c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800198e:	4b1f      	ldr	r3, [pc, #124]	; (8001a0c <MX_TIM15_Init+0x9c>)
 8001990:	4a1f      	ldr	r2, [pc, #124]	; (8001a10 <MX_TIM15_Init+0xa0>)
 8001992:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 15;
 8001994:	4b1d      	ldr	r3, [pc, #116]	; (8001a0c <MX_TIM15_Init+0x9c>)
 8001996:	220f      	movs	r2, #15
 8001998:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800199a:	4b1c      	ldr	r3, [pc, #112]	; (8001a0c <MX_TIM15_Init+0x9c>)
 800199c:	2200      	movs	r2, #0
 800199e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 400;
 80019a0:	4b1a      	ldr	r3, [pc, #104]	; (8001a0c <MX_TIM15_Init+0x9c>)
 80019a2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80019a6:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019a8:	4b18      	ldr	r3, [pc, #96]	; (8001a0c <MX_TIM15_Init+0x9c>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80019ae:	4b17      	ldr	r3, [pc, #92]	; (8001a0c <MX_TIM15_Init+0x9c>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019b4:	4b15      	ldr	r3, [pc, #84]	; (8001a0c <MX_TIM15_Init+0x9c>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80019ba:	4814      	ldr	r0, [pc, #80]	; (8001a0c <MX_TIM15_Init+0x9c>)
 80019bc:	f006 f860 	bl	8007a80 <HAL_TIM_Base_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 80019c6:	f001 ffd9 	bl	800397c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80019d0:	f107 0310 	add.w	r3, r7, #16
 80019d4:	4619      	mov	r1, r3
 80019d6:	480d      	ldr	r0, [pc, #52]	; (8001a0c <MX_TIM15_Init+0x9c>)
 80019d8:	f006 fa1d 	bl	8007e16 <HAL_TIM_ConfigClockSource>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 80019e2:	f001 ffcb 	bl	800397c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019e6:	2300      	movs	r3, #0
 80019e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ea:	2300      	movs	r3, #0
 80019ec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80019ee:	1d3b      	adds	r3, r7, #4
 80019f0:	4619      	mov	r1, r3
 80019f2:	4806      	ldr	r0, [pc, #24]	; (8001a0c <MX_TIM15_Init+0x9c>)
 80019f4:	f006 fc08 	bl	8008208 <HAL_TIMEx_MasterConfigSynchronization>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 80019fe:	f001 ffbd 	bl	800397c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001a02:	bf00      	nop
 8001a04:	3720      	adds	r7, #32
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	200007e8 	.word	0x200007e8
 8001a10:	40014000 	.word	0x40014000

08001a14 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001a18:	4b10      	ldr	r3, [pc, #64]	; (8001a5c <MX_TIM17_Init+0x48>)
 8001a1a:	4a11      	ldr	r2, [pc, #68]	; (8001a60 <MX_TIM17_Init+0x4c>)
 8001a1c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1999;
 8001a1e:	4b0f      	ldr	r3, [pc, #60]	; (8001a5c <MX_TIM17_Init+0x48>)
 8001a20:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001a24:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a26:	4b0d      	ldr	r3, [pc, #52]	; (8001a5c <MX_TIM17_Init+0x48>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8001a2c:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <MX_TIM17_Init+0x48>)
 8001a2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a32:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a34:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <MX_TIM17_Init+0x48>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001a3a:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <MX_TIM17_Init+0x48>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a40:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <MX_TIM17_Init+0x48>)
 8001a42:	2280      	movs	r2, #128	; 0x80
 8001a44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001a46:	4805      	ldr	r0, [pc, #20]	; (8001a5c <MX_TIM17_Init+0x48>)
 8001a48:	f006 f81a 	bl	8007a80 <HAL_TIM_Base_Init>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8001a52:	f001 ff93 	bl	800397c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000834 	.word	0x20000834
 8001a60:	40014800 	.word	0x40014800

08001a64 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a68:	4b14      	ldr	r3, [pc, #80]	; (8001abc <MX_USART3_UART_Init+0x58>)
 8001a6a:	4a15      	ldr	r2, [pc, #84]	; (8001ac0 <MX_USART3_UART_Init+0x5c>)
 8001a6c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 8001a6e:	4b13      	ldr	r3, [pc, #76]	; (8001abc <MX_USART3_UART_Init+0x58>)
 8001a70:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001a74:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a76:	4b11      	ldr	r3, [pc, #68]	; (8001abc <MX_USART3_UART_Init+0x58>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a7c:	4b0f      	ldr	r3, [pc, #60]	; (8001abc <MX_USART3_UART_Init+0x58>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a82:	4b0e      	ldr	r3, [pc, #56]	; (8001abc <MX_USART3_UART_Init+0x58>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a88:	4b0c      	ldr	r3, [pc, #48]	; (8001abc <MX_USART3_UART_Init+0x58>)
 8001a8a:	220c      	movs	r2, #12
 8001a8c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a8e:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <MX_USART3_UART_Init+0x58>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a94:	4b09      	ldr	r3, [pc, #36]	; (8001abc <MX_USART3_UART_Init+0x58>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a9a:	4b08      	ldr	r3, [pc, #32]	; (8001abc <MX_USART3_UART_Init+0x58>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001aa0:	4b06      	ldr	r3, [pc, #24]	; (8001abc <MX_USART3_UART_Init+0x58>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001aa6:	4805      	ldr	r0, [pc, #20]	; (8001abc <MX_USART3_UART_Init+0x58>)
 8001aa8:	f006 fc32 	bl	8008310 <HAL_UART_Init>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001ab2:	f001 ff63 	bl	800397c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20000880 	.word	0x20000880
 8001ac0:	40004800 	.word	0x40004800

08001ac4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001aca:	4b10      	ldr	r3, [pc, #64]	; (8001b0c <MX_DMA_Init+0x48>)
 8001acc:	695b      	ldr	r3, [r3, #20]
 8001ace:	4a0f      	ldr	r2, [pc, #60]	; (8001b0c <MX_DMA_Init+0x48>)
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	6153      	str	r3, [r2, #20]
 8001ad6:	4b0d      	ldr	r3, [pc, #52]	; (8001b0c <MX_DMA_Init+0x48>)
 8001ad8:	695b      	ldr	r3, [r3, #20]
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	607b      	str	r3, [r7, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2105      	movs	r1, #5
 8001ae6:	200c      	movs	r0, #12
 8001ae8:	f003 f988 	bl	8004dfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001aec:	200c      	movs	r0, #12
 8001aee:	f003 f9a1 	bl	8004e34 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8001af2:	2200      	movs	r2, #0
 8001af4:	2105      	movs	r1, #5
 8001af6:	200d      	movs	r0, #13
 8001af8:	f003 f980 	bl	8004dfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001afc:	200d      	movs	r0, #13
 8001afe:	f003 f999 	bl	8004e34 <HAL_NVIC_EnableIRQ>

}
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40021000 	.word	0x40021000

08001b10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b088      	sub	sp, #32
 8001b14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b16:	f107 030c 	add.w	r3, r7, #12
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	605a      	str	r2, [r3, #4]
 8001b20:	609a      	str	r2, [r3, #8]
 8001b22:	60da      	str	r2, [r3, #12]
 8001b24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b26:	4b4d      	ldr	r3, [pc, #308]	; (8001c5c <MX_GPIO_Init+0x14c>)
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	4a4c      	ldr	r2, [pc, #304]	; (8001c5c <MX_GPIO_Init+0x14c>)
 8001b2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001b30:	6153      	str	r3, [r2, #20]
 8001b32:	4b4a      	ldr	r3, [pc, #296]	; (8001c5c <MX_GPIO_Init+0x14c>)
 8001b34:	695b      	ldr	r3, [r3, #20]
 8001b36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b3a:	60bb      	str	r3, [r7, #8]
 8001b3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3e:	4b47      	ldr	r3, [pc, #284]	; (8001c5c <MX_GPIO_Init+0x14c>)
 8001b40:	695b      	ldr	r3, [r3, #20]
 8001b42:	4a46      	ldr	r2, [pc, #280]	; (8001c5c <MX_GPIO_Init+0x14c>)
 8001b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b48:	6153      	str	r3, [r2, #20]
 8001b4a:	4b44      	ldr	r3, [pc, #272]	; (8001c5c <MX_GPIO_Init+0x14c>)
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b52:	607b      	str	r3, [r7, #4]
 8001b54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b56:	4b41      	ldr	r3, [pc, #260]	; (8001c5c <MX_GPIO_Init+0x14c>)
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	4a40      	ldr	r2, [pc, #256]	; (8001c5c <MX_GPIO_Init+0x14c>)
 8001b5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b60:	6153      	str	r3, [r2, #20]
 8001b62:	4b3e      	ldr	r3, [pc, #248]	; (8001c5c <MX_GPIO_Init+0x14c>)
 8001b64:	695b      	ldr	r3, [r3, #20]
 8001b66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b6a:	603b      	str	r3, [r7, #0]
 8001b6c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001b74:	483a      	ldr	r0, [pc, #232]	; (8001c60 <MX_GPIO_Init+0x150>)
 8001b76:	f003 fbe7 	bl	8005348 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN12_Pin|_1A_Pin|_2A_Pin|EN34_Pin
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	21f8      	movs	r1, #248	; 0xf8
 8001b7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b82:	f003 fbe1 	bl	8005348 <HAL_GPIO_WritePin>
                          |_3A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, _4A_Pin|RST_ESP_Pin|EN_ESP_Pin|SPI2_CS_L_Pin
 8001b86:	2200      	movs	r2, #0
 8001b88:	f245 0107 	movw	r1, #20487	; 0x5007
 8001b8c:	4835      	ldr	r0, [pc, #212]	; (8001c64 <MX_GPIO_Init+0x154>)
 8001b8e:	f003 fbdb 	bl	8005348 <HAL_GPIO_WritePin>
                          |SPI2_CS_R_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001b92:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001b96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ba4:	f107 030c 	add.w	r3, r7, #12
 8001ba8:	4619      	mov	r1, r3
 8001baa:	482d      	ldr	r0, [pc, #180]	; (8001c60 <MX_GPIO_Init+0x150>)
 8001bac:	f003 fa5a 	bl	8005064 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN12_Pin _1A_Pin _2A_Pin EN34_Pin
                           _3A_Pin */
  GPIO_InitStruct.Pin = EN12_Pin|_1A_Pin|_2A_Pin|EN34_Pin
 8001bb0:	23f8      	movs	r3, #248	; 0xf8
 8001bb2:	60fb      	str	r3, [r7, #12]
                          |_3A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc0:	f107 030c 	add.w	r3, r7, #12
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bca:	f003 fa4b 	bl	8005064 <HAL_GPIO_Init>

  /*Configure GPIO pin : _4A_Pin */
  GPIO_InitStruct.Pin = _4A_Pin;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(_4A_GPIO_Port, &GPIO_InitStruct);
 8001bde:	f107 030c 	add.w	r3, r7, #12
 8001be2:	4619      	mov	r1, r3
 8001be4:	481f      	ldr	r0, [pc, #124]	; (8001c64 <MX_GPIO_Init+0x154>)
 8001be6:	f003 fa3d 	bl	8005064 <HAL_GPIO_Init>

  /*Configure GPIO pins : RST_ESP_Pin EN_ESP_Pin */
  GPIO_InitStruct.Pin = RST_ESP_Pin|EN_ESP_Pin;
 8001bea:	2306      	movs	r3, #6
 8001bec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bfa:	f107 030c 	add.w	r3, r7, #12
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4818      	ldr	r0, [pc, #96]	; (8001c64 <MX_GPIO_Init+0x154>)
 8001c02:	f003 fa2f 	bl	8005064 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_CS_L_Pin SPI2_CS_R_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_L_Pin|SPI2_CS_R_Pin;
 8001c06:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001c0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001c14:	2301      	movs	r3, #1
 8001c16:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c18:	f107 030c 	add.w	r3, r7, #12
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4811      	ldr	r0, [pc, #68]	; (8001c64 <MX_GPIO_Init+0x154>)
 8001c20:	f003 fa20 	bl	8005064 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001c24:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c2a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c34:	f107 030c 	add.w	r3, r7, #12
 8001c38:	4619      	mov	r1, r3
 8001c3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c3e:	f003 fa11 	bl	8005064 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001c42:	2200      	movs	r2, #0
 8001c44:	2105      	movs	r1, #5
 8001c46:	2028      	movs	r0, #40	; 0x28
 8001c48:	f003 f8d8 	bl	8004dfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c4c:	2028      	movs	r0, #40	; 0x28
 8001c4e:	f003 f8f1 	bl	8004e34 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c52:	bf00      	nop
 8001c54:	3720      	adds	r7, #32
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	48000800 	.word	0x48000800
 8001c64:	48000400 	.word	0x48000400

08001c68 <ADC1_configuration>:

/* USER CODE BEGIN 4 */
void ADC1_configuration(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
	//NVIC configuration
	NVIC->IP[11] |= 0x70; //Priority 7
 8001c6c:	4b68      	ldr	r3, [pc, #416]	; (8001e10 <ADC1_configuration+0x1a8>)
 8001c6e:	f893 330b 	ldrb.w	r3, [r3, #779]	; 0x30b
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	4a66      	ldr	r2, [pc, #408]	; (8001e10 <ADC1_configuration+0x1a8>)
 8001c76:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	f882 330b 	strb.w	r3, [r2, #779]	; 0x30b
	NVIC->ISER[0] |= (1<<11); //Enable DMA1 channel 1 interrupt
 8001c80:	4b63      	ldr	r3, [pc, #396]	; (8001e10 <ADC1_configuration+0x1a8>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a62      	ldr	r2, [pc, #392]	; (8001e10 <ADC1_configuration+0x1a8>)
 8001c86:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c8a:	6013      	str	r3, [r2, #0]
	NVIC->IP[18] |= 0x70; //Priority 7
 8001c8c:	4b60      	ldr	r3, [pc, #384]	; (8001e10 <ADC1_configuration+0x1a8>)
 8001c8e:	f893 3312 	ldrb.w	r3, [r3, #786]	; 0x312
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	4a5e      	ldr	r2, [pc, #376]	; (8001e10 <ADC1_configuration+0x1a8>)
 8001c96:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	f882 3312 	strb.w	r3, [r2, #786]	; 0x312
	NVIC->ISER[0] |= (1<<18); //Enable ADC1 global interrupt
 8001ca0:	4b5b      	ldr	r3, [pc, #364]	; (8001e10 <ADC1_configuration+0x1a8>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a5a      	ldr	r2, [pc, #360]	; (8001e10 <ADC1_configuration+0x1a8>)
 8001ca6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001caa:	6013      	str	r3, [r2, #0]
	//DMA configuration for ADC1
	RCC->AHBENR |= RCC_AHBENR_DMA1EN; // Enable the DMA1 clock
 8001cac:	4b59      	ldr	r3, [pc, #356]	; (8001e14 <ADC1_configuration+0x1ac>)
 8001cae:	695b      	ldr	r3, [r3, #20]
 8001cb0:	4a58      	ldr	r2, [pc, #352]	; (8001e14 <ADC1_configuration+0x1ac>)
 8001cb2:	f043 0301 	orr.w	r3, r3, #1
 8001cb6:	6153      	str	r3, [r2, #20]
	DMA1_Channel1->CCR &= ~DMA_CCR_EN;
 8001cb8:	4b57      	ldr	r3, [pc, #348]	; (8001e18 <ADC1_configuration+0x1b0>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a56      	ldr	r2, [pc, #344]	; (8001e18 <ADC1_configuration+0x1b0>)
 8001cbe:	f023 0301 	bic.w	r3, r3, #1
 8001cc2:	6013      	str	r3, [r2, #0]

	DMA1_Channel1->CCR |= (1<<10); // Bits 11:10 MSIZE[1:0]: Memory size  01: 16-bits
 8001cc4:	4b54      	ldr	r3, [pc, #336]	; (8001e18 <ADC1_configuration+0x1b0>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a53      	ldr	r2, [pc, #332]	; (8001e18 <ADC1_configuration+0x1b0>)
 8001cca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cce:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= (1<<8); // Bits 9:8 PSIZE[1:0]: Peripheral size  01: 16-bits
 8001cd0:	4b51      	ldr	r3, [pc, #324]	; (8001e18 <ADC1_configuration+0x1b0>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a50      	ldr	r2, [pc, #320]	; (8001e18 <ADC1_configuration+0x1b0>)
 8001cd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cda:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= DMA_CCR_MINC;
 8001cdc:	4b4e      	ldr	r3, [pc, #312]	; (8001e18 <ADC1_configuration+0x1b0>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a4d      	ldr	r2, [pc, #308]	; (8001e18 <ADC1_configuration+0x1b0>)
 8001ce2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ce6:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= DMA_CCR_CIRC;
 8001ce8:	4b4b      	ldr	r3, [pc, #300]	; (8001e18 <ADC1_configuration+0x1b0>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a4a      	ldr	r2, [pc, #296]	; (8001e18 <ADC1_configuration+0x1b0>)
 8001cee:	f043 0320 	orr.w	r3, r3, #32
 8001cf2:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= DMA_CCR_TCIE;
 8001cf4:	4b48      	ldr	r3, [pc, #288]	; (8001e18 <ADC1_configuration+0x1b0>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a47      	ldr	r2, [pc, #284]	; (8001e18 <ADC1_configuration+0x1b0>)
 8001cfa:	f043 0302 	orr.w	r3, r3, #2
 8001cfe:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR &= ~DMA_CCR_HTIE;
 8001d00:	4b45      	ldr	r3, [pc, #276]	; (8001e18 <ADC1_configuration+0x1b0>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a44      	ldr	r2, [pc, #272]	; (8001e18 <ADC1_configuration+0x1b0>)
 8001d06:	f023 0304 	bic.w	r3, r3, #4
 8001d0a:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR &= ~DMA_CCR_TEIE;
 8001d0c:	4b42      	ldr	r3, [pc, #264]	; (8001e18 <ADC1_configuration+0x1b0>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a41      	ldr	r2, [pc, #260]	; (8001e18 <ADC1_configuration+0x1b0>)
 8001d12:	f023 0308 	bic.w	r3, r3, #8
 8001d16:	6013      	str	r3, [r2, #0]

	DMA1_Channel1->CNDTR = 10;
 8001d18:	4b3f      	ldr	r3, [pc, #252]	; (8001e18 <ADC1_configuration+0x1b0>)
 8001d1a:	220a      	movs	r2, #10
 8001d1c:	605a      	str	r2, [r3, #4]
	DMA1_Channel1->CPAR = (uint32_t)&(ADC1->DR);
 8001d1e:	4b3e      	ldr	r3, [pc, #248]	; (8001e18 <ADC1_configuration+0x1b0>)
 8001d20:	4a3e      	ldr	r2, [pc, #248]	; (8001e1c <ADC1_configuration+0x1b4>)
 8001d22:	609a      	str	r2, [r3, #8]
	DMA1_Channel1->CMAR = (uint32_t)&batteryVoltage[0];
 8001d24:	4b3c      	ldr	r3, [pc, #240]	; (8001e18 <ADC1_configuration+0x1b0>)
 8001d26:	4a3e      	ldr	r2, [pc, #248]	; (8001e20 <ADC1_configuration+0x1b8>)
 8001d28:	60da      	str	r2, [r3, #12]
//	ADC1->CR |= ADC_CR_ADEN;
//	while((ADC1->ISR & ADC_ISR_ADRDY) != ADC_ISR_ADRDY) __asm__ volatile("NOP");
//	ADC1->CR |= ADC_CR_ADSTART;
//	HAL_Delay(20);
//	DMA1_Channel1->CCR |= DMA_CCR_EN;
	__asm__ volatile("NOP");
 8001d2a:	bf00      	nop
	if(batteryVoltage[0] == 0) {
 8001d2c:	4b3c      	ldr	r3, [pc, #240]	; (8001e20 <ADC1_configuration+0x1b8>)
 8001d2e:	881b      	ldrh	r3, [r3, #0]
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d16a      	bne.n	8001e0c <ADC1_configuration+0x1a4>
		if((ADC1->CR & ADC_CR_ADEN) == ADC_CR_ADEN) {
 8001d36:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d12d      	bne.n	8001da0 <ADC1_configuration+0x138>
			DMA1_Channel1->CCR &= ~DMA_CCR_EN;
 8001d44:	4b34      	ldr	r3, [pc, #208]	; (8001e18 <ADC1_configuration+0x1b0>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a33      	ldr	r2, [pc, #204]	; (8001e18 <ADC1_configuration+0x1b0>)
 8001d4a:	f023 0301 	bic.w	r3, r3, #1
 8001d4e:	6013      	str	r3, [r2, #0]
			ADC1->CR |= ADC_CR_ADSTP;
 8001d50:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001d5a:	f043 0310 	orr.w	r3, r3, #16
 8001d5e:	6093      	str	r3, [r2, #8]
			while((ADC1->CR & ADC_CR_ADSTP) == ADC_CR_ADSTP) __asm__ volatile("NOP");
 8001d60:	e000      	b.n	8001d64 <ADC1_configuration+0xfc>
 8001d62:	bf00      	nop
 8001d64:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f003 0310 	and.w	r3, r3, #16
 8001d6e:	2b10      	cmp	r3, #16
 8001d70:	d0f7      	beq.n	8001d62 <ADC1_configuration+0xfa>
			HAL_Delay(5);
 8001d72:	2005      	movs	r0, #5
 8001d74:	f002 fac8 	bl	8004308 <HAL_Delay>
			ADC1->CR |= ADC_CR_ADDIS;
 8001d78:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001d82:	f043 0302 	orr.w	r3, r3, #2
 8001d86:	6093      	str	r3, [r2, #8]
			while((ADC1->CR & ADC_CR_ADDIS) == ADC_CR_ADDIS) __asm__ volatile("NOP");
 8001d88:	e000      	b.n	8001d8c <ADC1_configuration+0x124>
 8001d8a:	bf00      	nop
 8001d8c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d0f7      	beq.n	8001d8a <ADC1_configuration+0x122>
			HAL_Delay(20);
 8001d9a:	2014      	movs	r0, #20
 8001d9c:	f002 fab4 	bl	8004308 <HAL_Delay>
		}
		MX_ADC1_Init();
 8001da0:	f7ff fd4c 	bl	800183c <MX_ADC1_Init>
		ADC1->CFGR |= ADC_CFGR_DMACFG;
 8001da4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001dae:	f043 0302 	orr.w	r3, r3, #2
 8001db2:	60d3      	str	r3, [r2, #12]
		ADC1->CFGR |= ADC_CFGR_DMAEN;
 8001db4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001dbe:	f043 0301 	orr.w	r3, r3, #1
 8001dc2:	60d3      	str	r3, [r2, #12]
		ADC1->CR |= ADC_CR_ADEN;
 8001dc4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001dce:	f043 0301 	orr.w	r3, r3, #1
 8001dd2:	6093      	str	r3, [r2, #8]
		while((ADC1->ISR & ADC_ISR_ADRDY) != ADC_ISR_ADRDY) __asm__ volatile("NOP");
 8001dd4:	e000      	b.n	8001dd8 <ADC1_configuration+0x170>
 8001dd6:	bf00      	nop
 8001dd8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d1f7      	bne.n	8001dd6 <ADC1_configuration+0x16e>
		ADC1->CR |= ADC_CR_ADSTART;
 8001de6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001df0:	f043 0304 	orr.w	r3, r3, #4
 8001df4:	6093      	str	r3, [r2, #8]
		HAL_Delay(20);
 8001df6:	2014      	movs	r0, #20
 8001df8:	f002 fa86 	bl	8004308 <HAL_Delay>
		DMA1_Channel1->CCR |= DMA_CCR_EN;
 8001dfc:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <ADC1_configuration+0x1b0>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a05      	ldr	r2, [pc, #20]	; (8001e18 <ADC1_configuration+0x1b0>)
 8001e02:	f043 0301 	orr.w	r3, r3, #1
 8001e06:	6013      	str	r3, [r2, #0]
		__asm__ volatile("NOP");
 8001e08:	bf00      	nop
	}
	return;
 8001e0a:	bf00      	nop
 8001e0c:	bf00      	nop
}
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	e000e100 	.word	0xe000e100
 8001e14:	40021000 	.word	0x40021000
 8001e18:	40020008 	.word	0x40020008
 8001e1c:	50000040 	.word	0x50000040
 8001e20:	200009b4 	.word	0x200009b4

08001e24 <TIM1_configuration>:

void TIM1_configuration(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
    // Enable the TIM1 clock
    RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8001e28:	4b38      	ldr	r3, [pc, #224]	; (8001f0c <TIM1_configuration+0xe8>)
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	4a37      	ldr	r2, [pc, #220]	; (8001f0c <TIM1_configuration+0xe8>)
 8001e2e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e32:	6193      	str	r3, [r2, #24]

    // Configure GPIO pins for TIM1 PA9-CH2 and PA8-CH1
    GPIOA->MODER |= (1<<17);
 8001e34:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001e3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e42:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (1<<19);
 8001e44:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001e4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001e52:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR |= (1<<17); //Pull-down
 8001e54:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001e5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e62:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR |= (1<<19); //Pull-down
 8001e64:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001e6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001e72:	60d3      	str	r3, [r2, #12]
    GPIOA->AFR[1] |= (6); //AF6
 8001e74:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001e7e:	f043 0306 	orr.w	r3, r3, #6
 8001e82:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOA->AFR[1] |= (6<<4); //AF6
 8001e84:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001e8e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e92:	6253      	str	r3, [r2, #36]	; 0x24

    // Configure TIM1
	TIM1->CR1 |= TIM_CR1_ARPE; //ARPE: Auto-reload preload enable
 8001e94:	4b1e      	ldr	r3, [pc, #120]	; (8001f10 <TIM1_configuration+0xec>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a1d      	ldr	r2, [pc, #116]	; (8001f10 <TIM1_configuration+0xec>)
 8001e9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e9e:	6013      	str	r3, [r2, #0]
	TIM1->SMCR |= (TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0); // Encoder mode 3
 8001ea0:	4b1b      	ldr	r3, [pc, #108]	; (8001f10 <TIM1_configuration+0xec>)
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	4a1a      	ldr	r2, [pc, #104]	; (8001f10 <TIM1_configuration+0xec>)
 8001ea6:	f043 0303 	orr.w	r3, r3, #3
 8001eaa:	6093      	str	r3, [r2, #8]
	TIM1->DIER |= TIM_DIER_UIE; //UIE: Update interrupt enable
 8001eac:	4b18      	ldr	r3, [pc, #96]	; (8001f10 <TIM1_configuration+0xec>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	4a17      	ldr	r2, [pc, #92]	; (8001f10 <TIM1_configuration+0xec>)
 8001eb2:	f043 0301 	orr.w	r3, r3, #1
 8001eb6:	60d3      	str	r3, [r2, #12]

	TIM1->CCMR1 |= (1<<0);
 8001eb8:	4b15      	ldr	r3, [pc, #84]	; (8001f10 <TIM1_configuration+0xec>)
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	4a14      	ldr	r2, [pc, #80]	; (8001f10 <TIM1_configuration+0xec>)
 8001ebe:	f043 0301 	orr.w	r3, r3, #1
 8001ec2:	6193      	str	r3, [r2, #24]
	TIM1->CCMR1 |= (1<<8);
 8001ec4:	4b12      	ldr	r3, [pc, #72]	; (8001f10 <TIM1_configuration+0xec>)
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	4a11      	ldr	r2, [pc, #68]	; (8001f10 <TIM1_configuration+0xec>)
 8001eca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ece:	6193      	str	r3, [r2, #24]
	TIM1->CCER |= (1<<0);
 8001ed0:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <TIM1_configuration+0xec>)
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	4a0e      	ldr	r2, [pc, #56]	; (8001f10 <TIM1_configuration+0xec>)
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	6213      	str	r3, [r2, #32]
	TIM1->CCER |= (1<<4);
 8001edc:	4b0c      	ldr	r3, [pc, #48]	; (8001f10 <TIM1_configuration+0xec>)
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	4a0b      	ldr	r2, [pc, #44]	; (8001f10 <TIM1_configuration+0xec>)
 8001ee2:	f043 0310 	orr.w	r3, r3, #16
 8001ee6:	6213      	str	r3, [r2, #32]

	TIM1->PSC = 7; //7+1 = 8
 8001ee8:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <TIM1_configuration+0xec>)
 8001eea:	2207      	movs	r2, #7
 8001eec:	629a      	str	r2, [r3, #40]	; 0x28

    // Enable the TIM1 interrupt
    NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001eee:	2019      	movs	r0, #25
 8001ef0:	f7ff fa2e 	bl	8001350 <__NVIC_EnableIRQ>

    // Set priority for the TIM1 interrupt
    NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5); // Adjust priority as needed
 8001ef4:	2105      	movs	r1, #5
 8001ef6:	2019      	movs	r0, #25
 8001ef8:	f7ff fa48 	bl	800138c <__NVIC_SetPriority>

    // Enable the TIM1 counter
    TIM1->CR1 |= TIM_CR1_CEN;
 8001efc:	4b04      	ldr	r3, [pc, #16]	; (8001f10 <TIM1_configuration+0xec>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a03      	ldr	r2, [pc, #12]	; (8001f10 <TIM1_configuration+0xec>)
 8001f02:	f043 0301 	orr.w	r3, r3, #1
 8001f06:	6013      	str	r3, [r2, #0]
}
 8001f08:	bf00      	nop
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	40012c00 	.word	0x40012c00

08001f14 <TIM2_configuration>:

void TIM2_configuration(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
    // Enable the TIM2 clock
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001f18:	4b43      	ldr	r3, [pc, #268]	; (8002028 <TIM2_configuration+0x114>)
 8001f1a:	69db      	ldr	r3, [r3, #28]
 8001f1c:	4a42      	ldr	r2, [pc, #264]	; (8002028 <TIM2_configuration+0x114>)
 8001f1e:	f043 0301 	orr.w	r3, r3, #1
 8001f22:	61d3      	str	r3, [r2, #28]

    // Configure GPIO pins for TIM2 PA1-CH2 and PA0-CH1
    GPIOA->MODER |= (1<<1);
 8001f24:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001f2e:	f043 0302 	orr.w	r3, r3, #2
 8001f32:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (1<<3);
 8001f34:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001f3e:	f043 0308 	orr.w	r3, r3, #8
 8001f42:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR |= (1<<1); //Pull-down
 8001f44:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001f4e:	f043 0302 	orr.w	r3, r3, #2
 8001f52:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR |= (1<<3); //Pull-down
 8001f54:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001f5e:	f043 0308 	orr.w	r3, r3, #8
 8001f62:	60d3      	str	r3, [r2, #12]
    GPIOA->AFR[0] |= (1); //AF1
 8001f64:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001f68:	6a1b      	ldr	r3, [r3, #32]
 8001f6a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001f6e:	f043 0301 	orr.w	r3, r3, #1
 8001f72:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (1<<4); //AF1
 8001f74:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001f78:	6a1b      	ldr	r3, [r3, #32]
 8001f7a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001f7e:	f043 0310 	orr.w	r3, r3, #16
 8001f82:	6213      	str	r3, [r2, #32]

    // Configure TIM2
	TIM2->CR1 |= TIM_CR1_ARPE; //ARPE: Auto-reload preload enable
 8001f84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f92:	6013      	str	r3, [r2, #0]
	TIM2->SMCR |= (TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0); // Encoder mode 3
 8001f94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f9e:	f043 0303 	orr.w	r3, r3, #3
 8001fa2:	6093      	str	r3, [r2, #8]
	TIM2->DIER |= TIM_DIER_UIE; //UIE: Update interrupt enable
 8001fa4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fae:	f043 0301 	orr.w	r3, r3, #1
 8001fb2:	60d3      	str	r3, [r2, #12]

	TIM2->CCMR1 |= (1<<0);
 8001fb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fbe:	f043 0301 	orr.w	r3, r3, #1
 8001fc2:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= (1<<8);
 8001fc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fd2:	6193      	str	r3, [r2, #24]
	TIM2->CCER |= (1<<0);
 8001fd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fde:	f043 0301 	orr.w	r3, r3, #1
 8001fe2:	6213      	str	r3, [r2, #32]
	TIM2->CCER |= (1<<4);
 8001fe4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
 8001fea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fee:	f043 0310 	orr.w	r3, r3, #16
 8001ff2:	6213      	str	r3, [r2, #32]

	TIM2->PSC = 7; //7+1 = 8
 8001ff4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ff8:	2207      	movs	r2, #7
 8001ffa:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 0xFFFF; //65535
 8001ffc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002000:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002004:	62da      	str	r2, [r3, #44]	; 0x2c

    // Enable the TIM2 interrupt
    NVIC_EnableIRQ(TIM2_IRQn);
 8002006:	201c      	movs	r0, #28
 8002008:	f7ff f9a2 	bl	8001350 <__NVIC_EnableIRQ>

    // Set priority for the TIM2 interrupt
    NVIC_SetPriority(TIM2_IRQn, 5); // Adjust priority as needed
 800200c:	2105      	movs	r1, #5
 800200e:	201c      	movs	r0, #28
 8002010:	f7ff f9bc 	bl	800138c <__NVIC_SetPriority>

    // Enable the TIM2 counter
    TIM2->CR1 |= TIM_CR1_CEN;
 8002014:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800201e:	f043 0301 	orr.w	r3, r3, #1
 8002022:	6013      	str	r3, [r2, #0]
}
 8002024:	bf00      	nop
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40021000 	.word	0x40021000

0800202c <TIM15_additional_configuration>:

void TIM15_additional_configuration(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
	TIM15->DIER |= TIM_DIER_CC1IE;
 8002030:	4b10      	ldr	r3, [pc, #64]	; (8002074 <TIM15_additional_configuration+0x48>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	4a0f      	ldr	r2, [pc, #60]	; (8002074 <TIM15_additional_configuration+0x48>)
 8002036:	f043 0302 	orr.w	r3, r3, #2
 800203a:	60d3      	str	r3, [r2, #12]
	TIM15->DIER |= TIM_DIER_CC2IE;
 800203c:	4b0d      	ldr	r3, [pc, #52]	; (8002074 <TIM15_additional_configuration+0x48>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	4a0c      	ldr	r2, [pc, #48]	; (8002074 <TIM15_additional_configuration+0x48>)
 8002042:	f043 0304 	orr.w	r3, r3, #4
 8002046:	60d3      	str	r3, [r2, #12]
	TIM15->DIER |= TIM_DIER_UIE; //UIE: Update interrupt enable
 8002048:	4b0a      	ldr	r3, [pc, #40]	; (8002074 <TIM15_additional_configuration+0x48>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	4a09      	ldr	r2, [pc, #36]	; (8002074 <TIM15_additional_configuration+0x48>)
 800204e:	f043 0301 	orr.w	r3, r3, #1
 8002052:	60d3      	str	r3, [r2, #12]

    // Enable the TIM15 interrupt
    NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002054:	2018      	movs	r0, #24
 8002056:	f7ff f97b 	bl	8001350 <__NVIC_EnableIRQ>
    // Set priority for the TIM15 interrupt
    NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 5);
 800205a:	2105      	movs	r1, #5
 800205c:	2018      	movs	r0, #24
 800205e:	f7ff f995 	bl	800138c <__NVIC_SetPriority>

	TIM15->CR1 |= TIM_CR1_CEN;
 8002062:	4b04      	ldr	r3, [pc, #16]	; (8002074 <TIM15_additional_configuration+0x48>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a03      	ldr	r2, [pc, #12]	; (8002074 <TIM15_additional_configuration+0x48>)
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	6013      	str	r3, [r2, #0]
}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40014000 	.word	0x40014000

08002078 <TIM17_additional_configuration>:
////	TIM16->DIER |= TIM_DIER_UIE; //UIE: Update interrupt enable
////	TIM16->CR1 |= TIM_CR1_CEN;
//}

void TIM17_additional_configuration(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
	TIM17->DIER |= TIM_DIER_UIE; //UIE: Update interrupt enable
 800207c:	4b08      	ldr	r3, [pc, #32]	; (80020a0 <TIM17_additional_configuration+0x28>)
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	4a07      	ldr	r2, [pc, #28]	; (80020a0 <TIM17_additional_configuration+0x28>)
 8002082:	f043 0301 	orr.w	r3, r3, #1
 8002086:	60d3      	str	r3, [r2, #12]
	TIM17->CR1 |= TIM_CR1_CEN;
 8002088:	4b05      	ldr	r3, [pc, #20]	; (80020a0 <TIM17_additional_configuration+0x28>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a04      	ldr	r2, [pc, #16]	; (80020a0 <TIM17_additional_configuration+0x28>)
 800208e:	f043 0301 	orr.w	r3, r3, #1
 8002092:	6013      	str	r3, [r2, #0]
}
 8002094:	bf00      	nop
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	40014800 	.word	0x40014800

080020a4 <USART3_additional_configuration>:

void USART3_additional_configuration(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
	//DMA configuration for UART3
	RCC->AHBENR |= RCC_AHBENR_DMA1EN; // Enable the DMA1 clock
 80020a8:	4b41      	ldr	r3, [pc, #260]	; (80021b0 <USART3_additional_configuration+0x10c>)
 80020aa:	695b      	ldr	r3, [r3, #20]
 80020ac:	4a40      	ldr	r2, [pc, #256]	; (80021b0 <USART3_additional_configuration+0x10c>)
 80020ae:	f043 0301 	orr.w	r3, r3, #1
 80020b2:	6153      	str	r3, [r2, #20]

	DMA1_Channel3->CCR &= ~DMA_CCR_EN;
 80020b4:	4b3f      	ldr	r3, [pc, #252]	; (80021b4 <USART3_additional_configuration+0x110>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a3e      	ldr	r2, [pc, #248]	; (80021b4 <USART3_additional_configuration+0x110>)
 80020ba:	f023 0301 	bic.w	r3, r3, #1
 80020be:	6013      	str	r3, [r2, #0]

	DMA1_Channel3->CCR |= DMA_CCR_MINC;
 80020c0:	4b3c      	ldr	r3, [pc, #240]	; (80021b4 <USART3_additional_configuration+0x110>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a3b      	ldr	r2, [pc, #236]	; (80021b4 <USART3_additional_configuration+0x110>)
 80020c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020ca:	6013      	str	r3, [r2, #0]
	DMA1_Channel3->CCR |= DMA_CCR_CIRC;
 80020cc:	4b39      	ldr	r3, [pc, #228]	; (80021b4 <USART3_additional_configuration+0x110>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a38      	ldr	r2, [pc, #224]	; (80021b4 <USART3_additional_configuration+0x110>)
 80020d2:	f043 0320 	orr.w	r3, r3, #32
 80020d6:	6013      	str	r3, [r2, #0]
	DMA1_Channel3->CCR &= ~DMA_CCR_TCIE;
 80020d8:	4b36      	ldr	r3, [pc, #216]	; (80021b4 <USART3_additional_configuration+0x110>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a35      	ldr	r2, [pc, #212]	; (80021b4 <USART3_additional_configuration+0x110>)
 80020de:	f023 0302 	bic.w	r3, r3, #2
 80020e2:	6013      	str	r3, [r2, #0]
	DMA1_Channel3->CCR &= ~DMA_CCR_HTIE;
 80020e4:	4b33      	ldr	r3, [pc, #204]	; (80021b4 <USART3_additional_configuration+0x110>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a32      	ldr	r2, [pc, #200]	; (80021b4 <USART3_additional_configuration+0x110>)
 80020ea:	f023 0304 	bic.w	r3, r3, #4
 80020ee:	6013      	str	r3, [r2, #0]
	DMA1_Channel3->CCR &= ~DMA_CCR_TEIE;
 80020f0:	4b30      	ldr	r3, [pc, #192]	; (80021b4 <USART3_additional_configuration+0x110>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a2f      	ldr	r2, [pc, #188]	; (80021b4 <USART3_additional_configuration+0x110>)
 80020f6:	f023 0308 	bic.w	r3, r3, #8
 80020fa:	6013      	str	r3, [r2, #0]

	DMA1_Channel3->CNDTR = ESPRXBUFFERSIZE;
 80020fc:	4b2d      	ldr	r3, [pc, #180]	; (80021b4 <USART3_additional_configuration+0x110>)
 80020fe:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002102:	605a      	str	r2, [r3, #4]
	DMA1_Channel3->CPAR = (uint32_t)&(USART3->RDR);
 8002104:	4b2b      	ldr	r3, [pc, #172]	; (80021b4 <USART3_additional_configuration+0x110>)
 8002106:	4a2c      	ldr	r2, [pc, #176]	; (80021b8 <USART3_additional_configuration+0x114>)
 8002108:	609a      	str	r2, [r3, #8]
	DMA1_Channel3->CMAR = (uint32_t)&rxBuffer[0];
 800210a:	4b2a      	ldr	r3, [pc, #168]	; (80021b4 <USART3_additional_configuration+0x110>)
 800210c:	4a2b      	ldr	r2, [pc, #172]	; (80021bc <USART3_additional_configuration+0x118>)
 800210e:	60da      	str	r2, [r3, #12]

	USART3->CR3 &= ~USART_CR3_DMAR;
 8002110:	4b2b      	ldr	r3, [pc, #172]	; (80021c0 <USART3_additional_configuration+0x11c>)
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	4a2a      	ldr	r2, [pc, #168]	; (80021c0 <USART3_additional_configuration+0x11c>)
 8002116:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800211a:	6093      	str	r3, [r2, #8]
	DMA1_Channel3->CCR &= ~DMA_CCR_EN;
 800211c:	4b25      	ldr	r3, [pc, #148]	; (80021b4 <USART3_additional_configuration+0x110>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a24      	ldr	r2, [pc, #144]	; (80021b4 <USART3_additional_configuration+0x110>)
 8002122:	f023 0301 	bic.w	r3, r3, #1
 8002126:	6013      	str	r3, [r2, #0]

	DMA1_Channel2->CCR &= ~DMA_CCR_EN;
 8002128:	4b26      	ldr	r3, [pc, #152]	; (80021c4 <USART3_additional_configuration+0x120>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a25      	ldr	r2, [pc, #148]	; (80021c4 <USART3_additional_configuration+0x120>)
 800212e:	f023 0301 	bic.w	r3, r3, #1
 8002132:	6013      	str	r3, [r2, #0]

	DMA1_Channel2->CCR |= DMA_CCR_MINC;
 8002134:	4b23      	ldr	r3, [pc, #140]	; (80021c4 <USART3_additional_configuration+0x120>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a22      	ldr	r2, [pc, #136]	; (80021c4 <USART3_additional_configuration+0x120>)
 800213a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800213e:	6013      	str	r3, [r2, #0]
	DMA1_Channel2->CCR &= ~DMA_CCR_CIRC;
 8002140:	4b20      	ldr	r3, [pc, #128]	; (80021c4 <USART3_additional_configuration+0x120>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a1f      	ldr	r2, [pc, #124]	; (80021c4 <USART3_additional_configuration+0x120>)
 8002146:	f023 0320 	bic.w	r3, r3, #32
 800214a:	6013      	str	r3, [r2, #0]
	DMA1_Channel2->CCR |= DMA_CCR_DIR;
 800214c:	4b1d      	ldr	r3, [pc, #116]	; (80021c4 <USART3_additional_configuration+0x120>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a1c      	ldr	r2, [pc, #112]	; (80021c4 <USART3_additional_configuration+0x120>)
 8002152:	f043 0310 	orr.w	r3, r3, #16
 8002156:	6013      	str	r3, [r2, #0]
	DMA1_Channel2->CCR |= DMA_CCR_TCIE;
 8002158:	4b1a      	ldr	r3, [pc, #104]	; (80021c4 <USART3_additional_configuration+0x120>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a19      	ldr	r2, [pc, #100]	; (80021c4 <USART3_additional_configuration+0x120>)
 800215e:	f043 0302 	orr.w	r3, r3, #2
 8002162:	6013      	str	r3, [r2, #0]
	DMA1_Channel2->CCR &= ~DMA_CCR_HTIE;
 8002164:	4b17      	ldr	r3, [pc, #92]	; (80021c4 <USART3_additional_configuration+0x120>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a16      	ldr	r2, [pc, #88]	; (80021c4 <USART3_additional_configuration+0x120>)
 800216a:	f023 0304 	bic.w	r3, r3, #4
 800216e:	6013      	str	r3, [r2, #0]
	DMA1_Channel2->CCR &= ~DMA_CCR_TEIE;
 8002170:	4b14      	ldr	r3, [pc, #80]	; (80021c4 <USART3_additional_configuration+0x120>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a13      	ldr	r2, [pc, #76]	; (80021c4 <USART3_additional_configuration+0x120>)
 8002176:	f023 0308 	bic.w	r3, r3, #8
 800217a:	6013      	str	r3, [r2, #0]

	DMA1_Channel2->CNDTR = 0;
 800217c:	4b11      	ldr	r3, [pc, #68]	; (80021c4 <USART3_additional_configuration+0x120>)
 800217e:	2200      	movs	r2, #0
 8002180:	605a      	str	r2, [r3, #4]
	DMA1_Channel2->CPAR = (uint32_t)&(USART3->TDR);
 8002182:	4b10      	ldr	r3, [pc, #64]	; (80021c4 <USART3_additional_configuration+0x120>)
 8002184:	4a10      	ldr	r2, [pc, #64]	; (80021c8 <USART3_additional_configuration+0x124>)
 8002186:	609a      	str	r2, [r3, #8]
	DMA1_Channel2->CMAR = (uint32_t)&txBuffer[0];
 8002188:	4b0e      	ldr	r3, [pc, #56]	; (80021c4 <USART3_additional_configuration+0x120>)
 800218a:	4a10      	ldr	r2, [pc, #64]	; (80021cc <USART3_additional_configuration+0x128>)
 800218c:	60da      	str	r2, [r3, #12]

	USART3->CR3 &= ~USART_CR3_DMAT;
 800218e:	4b0c      	ldr	r3, [pc, #48]	; (80021c0 <USART3_additional_configuration+0x11c>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	4a0b      	ldr	r2, [pc, #44]	; (80021c0 <USART3_additional_configuration+0x11c>)
 8002194:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002198:	6093      	str	r3, [r2, #8]
	DMA1_Channel2->CCR &= ~DMA_CCR_EN;
 800219a:	4b0a      	ldr	r3, [pc, #40]	; (80021c4 <USART3_additional_configuration+0x120>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a09      	ldr	r2, [pc, #36]	; (80021c4 <USART3_additional_configuration+0x120>)
 80021a0:	f023 0301 	bic.w	r3, r3, #1
 80021a4:	6013      	str	r3, [r2, #0]
}
 80021a6:	bf00      	nop
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	40021000 	.word	0x40021000
 80021b4:	40020030 	.word	0x40020030
 80021b8:	40004824 	.word	0x40004824
 80021bc:	20000c24 	.word	0x20000c24
 80021c0:	40004800 	.word	0x40004800
 80021c4:	4002001c 	.word	0x4002001c
 80021c8:	40004828 	.word	0x40004828
 80021cc:	20000a24 	.word	0x20000a24

080021d0 <timerForSendDataCallback>:

void timerForSendDataCallback(TimerHandle_t xTimer)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
	xEventGroupSetBits(timerFdsEventGroup, 0x1);
 80021d8:	4b04      	ldr	r3, [pc, #16]	; (80021ec <timerForSendDataCallback+0x1c>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2101      	movs	r1, #1
 80021de:	4618      	mov	r0, r3
 80021e0:	f006 fe78 	bl	8008ed4 <xEventGroupSetBits>
}
 80021e4:	bf00      	nop
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	20000f2c 	.word	0x20000f2c

080021f0 <psMeasure>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_psMeasure */
void psMeasure(void const * argument)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
    osDelay(8);
 80021f8:	2008      	movs	r0, #8
 80021fa:	f006 fde1 	bl	8008dc0 <osDelay>

    for(uint8_t i = 0; i < (sizeof(batteryVoltage)/sizeof(batteryVoltage[0])); i++) {
 80021fe:	2300      	movs	r3, #0
 8002200:	73fb      	strb	r3, [r7, #15]
 8002202:	e00d      	b.n	8002220 <psMeasure+0x30>
    	avrBatVoltage += batteryVoltage[i];
 8002204:	7bfb      	ldrb	r3, [r7, #15]
 8002206:	4a42      	ldr	r2, [pc, #264]	; (8002310 <psMeasure+0x120>)
 8002208:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800220c:	b29a      	uxth	r2, r3
 800220e:	4b41      	ldr	r3, [pc, #260]	; (8002314 <psMeasure+0x124>)
 8002210:	881b      	ldrh	r3, [r3, #0]
 8002212:	4413      	add	r3, r2
 8002214:	b29a      	uxth	r2, r3
 8002216:	4b3f      	ldr	r3, [pc, #252]	; (8002314 <psMeasure+0x124>)
 8002218:	801a      	strh	r2, [r3, #0]
    for(uint8_t i = 0; i < (sizeof(batteryVoltage)/sizeof(batteryVoltage[0])); i++) {
 800221a:	7bfb      	ldrb	r3, [r7, #15]
 800221c:	3301      	adds	r3, #1
 800221e:	73fb      	strb	r3, [r7, #15]
 8002220:	7bfb      	ldrb	r3, [r7, #15]
 8002222:	2b09      	cmp	r3, #9
 8002224:	d9ee      	bls.n	8002204 <psMeasure+0x14>
    }
    avrBatVoltage = avrBatVoltage / (sizeof(batteryVoltage)/sizeof(batteryVoltage[0]));
 8002226:	4b3b      	ldr	r3, [pc, #236]	; (8002314 <psMeasure+0x124>)
 8002228:	881b      	ldrh	r3, [r3, #0]
 800222a:	4a3b      	ldr	r2, [pc, #236]	; (8002318 <psMeasure+0x128>)
 800222c:	fba2 2303 	umull	r2, r3, r2, r3
 8002230:	08db      	lsrs	r3, r3, #3
 8002232:	b29a      	uxth	r2, r3
 8002234:	4b37      	ldr	r3, [pc, #220]	; (8002314 <psMeasure+0x124>)
 8002236:	801a      	strh	r2, [r3, #0]
    BatChargeState = ((float)(avrBatVoltage - BATMINV)/(BATMAXV - BATMINV))*100;
 8002238:	4b36      	ldr	r3, [pc, #216]	; (8002314 <psMeasure+0x124>)
 800223a:	881b      	ldrh	r3, [r3, #0]
 800223c:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8002240:	ee07 3a90 	vmov	s15, r3
 8002244:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002248:	eddf 6a34 	vldr	s13, [pc, #208]	; 800231c <psMeasure+0x12c>
 800224c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002250:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8002320 <psMeasure+0x130>
 8002254:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002258:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800225c:	edc7 7a00 	vstr	s15, [r7]
 8002260:	783b      	ldrb	r3, [r7, #0]
 8002262:	b2da      	uxtb	r2, r3
 8002264:	4b2f      	ldr	r3, [pc, #188]	; (8002324 <psMeasure+0x134>)
 8002266:	701a      	strb	r2, [r3, #0]

    if(avrBatVoltage > BATMAXV) {
 8002268:	4b2a      	ldr	r3, [pc, #168]	; (8002314 <psMeasure+0x124>)
 800226a:	881b      	ldrh	r3, [r3, #0]
 800226c:	f640 1251 	movw	r2, #2385	; 0x951
 8002270:	4293      	cmp	r3, r2
 8002272:	d91b      	bls.n	80022ac <psMeasure+0xbc>
    	xEventGroupClearBits(pc13EventGroup, 0xFFFFFF);
 8002274:	4b2c      	ldr	r3, [pc, #176]	; (8002328 <psMeasure+0x138>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800227c:	4618      	mov	r0, r3
 800227e:	f006 fdcd 	bl	8008e1c <xEventGroupClearBits>
    	xEventGroupSetBits(pc13EventGroup, OVERVOLTAGEONLED);
 8002282:	4b29      	ldr	r3, [pc, #164]	; (8002328 <psMeasure+0x138>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2101      	movs	r1, #1
 8002288:	4618      	mov	r0, r3
 800228a:	f006 fe23 	bl	8008ed4 <xEventGroupSetBits>
    	xEventGroupClearBits(pc14EventGroup, 0xFFFFFF);
 800228e:	4b27      	ldr	r3, [pc, #156]	; (800232c <psMeasure+0x13c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8002296:	4618      	mov	r0, r3
 8002298:	f006 fdc0 	bl	8008e1c <xEventGroupClearBits>
    	xEventGroupSetBits(pc14EventGroup, OVERVOLTAGEONLED);
 800229c:	4b23      	ldr	r3, [pc, #140]	; (800232c <psMeasure+0x13c>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2101      	movs	r1, #1
 80022a2:	4618      	mov	r0, r3
 80022a4:	f006 fe16 	bl	8008ed4 <xEventGroupSetBits>
    	__asm__ volatile("NOP");
 80022a8:	bf00      	nop
 80022aa:	e7a5      	b.n	80021f8 <psMeasure+0x8>
    } else if(avrBatVoltage < BATMINV) {
 80022ac:	4b19      	ldr	r3, [pc, #100]	; (8002314 <psMeasure+0x124>)
 80022ae:	881b      	ldrh	r3, [r3, #0]
 80022b0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80022b4:	d21b      	bcs.n	80022ee <psMeasure+0xfe>
    	xEventGroupClearBits(pc13EventGroup, 0xFFFFFF);
 80022b6:	4b1c      	ldr	r3, [pc, #112]	; (8002328 <psMeasure+0x138>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80022be:	4618      	mov	r0, r3
 80022c0:	f006 fdac 	bl	8008e1c <xEventGroupClearBits>
    	xEventGroupSetBits(pc13EventGroup, UNDERVOLTAGEONLED);
 80022c4:	4b18      	ldr	r3, [pc, #96]	; (8002328 <psMeasure+0x138>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2102      	movs	r1, #2
 80022ca:	4618      	mov	r0, r3
 80022cc:	f006 fe02 	bl	8008ed4 <xEventGroupSetBits>
    	xEventGroupClearBits(pc14EventGroup, 0xFFFFFF);
 80022d0:	4b16      	ldr	r3, [pc, #88]	; (800232c <psMeasure+0x13c>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80022d8:	4618      	mov	r0, r3
 80022da:	f006 fd9f 	bl	8008e1c <xEventGroupClearBits>
    	xEventGroupSetBits(pc14EventGroup, UNDERVOLTAGEONLED);
 80022de:	4b13      	ldr	r3, [pc, #76]	; (800232c <psMeasure+0x13c>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2102      	movs	r1, #2
 80022e4:	4618      	mov	r0, r3
 80022e6:	f006 fdf5 	bl	8008ed4 <xEventGroupSetBits>
    	__asm__ volatile("NOP");
 80022ea:	bf00      	nop
 80022ec:	e784      	b.n	80021f8 <psMeasure+0x8>
    } else {
    	xEventGroupClearBits(pc13EventGroup, 0xFFFFFF);
 80022ee:	4b0e      	ldr	r3, [pc, #56]	; (8002328 <psMeasure+0x138>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80022f6:	4618      	mov	r0, r3
 80022f8:	f006 fd90 	bl	8008e1c <xEventGroupClearBits>
    	xEventGroupClearBits(pc14EventGroup, 0xFFFFFF);
 80022fc:	4b0b      	ldr	r3, [pc, #44]	; (800232c <psMeasure+0x13c>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8002304:	4618      	mov	r0, r3
 8002306:	f006 fd89 	bl	8008e1c <xEventGroupClearBits>
    	__asm__ volatile("NOP");
 800230a:	bf00      	nop
    osDelay(8);
 800230c:	e774      	b.n	80021f8 <psMeasure+0x8>
 800230e:	bf00      	nop
 8002310:	200009b4 	.word	0x200009b4
 8002314:	200009c8 	.word	0x200009c8
 8002318:	cccccccd 	.word	0xcccccccd
 800231c:	43c08000 	.word	0x43c08000
 8002320:	42c80000 	.word	0x42c80000
 8002324:	200009ca 	.word	0x200009ca
 8002328:	200009cc 	.word	0x200009cc
 800232c:	200009d0 	.word	0x200009d0

08002330 <pc13LedCntrl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pc13LedCntrl */
void pc13LedCntrl(void const * argument)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN pc13LedCntrl */
	EventBits_t eventBits;
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002338:	2001      	movs	r0, #1
 800233a:	f006 fd41 	bl	8008dc0 <osDelay>
    eventBits = xEventGroupGetBits(pc13EventGroup);
 800233e:	4b18      	ldr	r3, [pc, #96]	; (80023a0 <pc13LedCntrl+0x70>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2100      	movs	r1, #0
 8002344:	4618      	mov	r0, r3
 8002346:	f006 fd69 	bl	8008e1c <xEventGroupClearBits>
 800234a:	60f8      	str	r0, [r7, #12]
    switch (eventBits) {
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d003      	beq.n	800235a <pc13LedCntrl+0x2a>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2b02      	cmp	r3, #2
 8002356:	d00b      	beq.n	8002370 <pc13LedCntrl+0x40>
 8002358:	e016      	b.n	8002388 <pc13LedCntrl+0x58>
		case OVERVOLTAGEONLED:
			osDelay(200);
 800235a:	20c8      	movs	r0, #200	; 0xc8
 800235c:	f006 fd30 	bl	8008dc0 <osDelay>
			GPIOC->ODR ^= GPIO_ODR_13;
 8002360:	4b10      	ldr	r3, [pc, #64]	; (80023a4 <pc13LedCntrl+0x74>)
 8002362:	695b      	ldr	r3, [r3, #20]
 8002364:	4a0f      	ldr	r2, [pc, #60]	; (80023a4 <pc13LedCntrl+0x74>)
 8002366:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800236a:	6153      	str	r3, [r2, #20]
			__asm__ volatile("NOP");
 800236c:	bf00      	nop
			break;
 800236e:	e016      	b.n	800239e <pc13LedCntrl+0x6e>
		case UNDERVOLTAGEONLED:
			osDelay(300);
 8002370:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002374:	f006 fd24 	bl	8008dc0 <osDelay>
			GPIOC->ODR ^= GPIO_ODR_13;
 8002378:	4b0a      	ldr	r3, [pc, #40]	; (80023a4 <pc13LedCntrl+0x74>)
 800237a:	695b      	ldr	r3, [r3, #20]
 800237c:	4a09      	ldr	r2, [pc, #36]	; (80023a4 <pc13LedCntrl+0x74>)
 800237e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002382:	6153      	str	r3, [r2, #20]
			__asm__ volatile("NOP");
 8002384:	bf00      	nop
			break;
 8002386:	e00a      	b.n	800239e <pc13LedCntrl+0x6e>
		default:
			GPIOC->ODR &= ~GPIO_ODR_13;
 8002388:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <pc13LedCntrl+0x74>)
 800238a:	695b      	ldr	r3, [r3, #20]
 800238c:	4a05      	ldr	r2, [pc, #20]	; (80023a4 <pc13LedCntrl+0x74>)
 800238e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002392:	6153      	str	r3, [r2, #20]
			osDelay(200);
 8002394:	20c8      	movs	r0, #200	; 0xc8
 8002396:	f006 fd13 	bl	8008dc0 <osDelay>
			__asm__ volatile("NOP");
 800239a:	bf00      	nop
			break;
 800239c:	bf00      	nop
    osDelay(1);
 800239e:	e7cb      	b.n	8002338 <pc13LedCntrl+0x8>
 80023a0:	200009cc 	.word	0x200009cc
 80023a4:	48000800 	.word	0x48000800

080023a8 <pc14LedCntrl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pc14LedCntrl */
void pc14LedCntrl(void const * argument)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN pc14LedCntrl */
	EventBits_t eventBits;
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80023b0:	2001      	movs	r0, #1
 80023b2:	f006 fd05 	bl	8008dc0 <osDelay>
    eventBits = xEventGroupGetBits(pc14EventGroup);
 80023b6:	4b18      	ldr	r3, [pc, #96]	; (8002418 <pc14LedCntrl+0x70>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2100      	movs	r1, #0
 80023bc:	4618      	mov	r0, r3
 80023be:	f006 fd2d 	bl	8008e1c <xEventGroupClearBits>
 80023c2:	60f8      	str	r0, [r7, #12]
    switch (eventBits) {
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d003      	beq.n	80023d2 <pc14LedCntrl+0x2a>
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d00b      	beq.n	80023e8 <pc14LedCntrl+0x40>
 80023d0:	e016      	b.n	8002400 <pc14LedCntrl+0x58>
		case OVERVOLTAGEONLED:
			osDelay(200);
 80023d2:	20c8      	movs	r0, #200	; 0xc8
 80023d4:	f006 fcf4 	bl	8008dc0 <osDelay>
			GPIOC->ODR ^= GPIO_ODR_14;
 80023d8:	4b10      	ldr	r3, [pc, #64]	; (800241c <pc14LedCntrl+0x74>)
 80023da:	695b      	ldr	r3, [r3, #20]
 80023dc:	4a0f      	ldr	r2, [pc, #60]	; (800241c <pc14LedCntrl+0x74>)
 80023de:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 80023e2:	6153      	str	r3, [r2, #20]
			__asm__ volatile("NOP");
 80023e4:	bf00      	nop
			break;
 80023e6:	e016      	b.n	8002416 <pc14LedCntrl+0x6e>
		case UNDERVOLTAGEONLED:
			osDelay(300);
 80023e8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80023ec:	f006 fce8 	bl	8008dc0 <osDelay>
			GPIOC->ODR ^= GPIO_ODR_14;
 80023f0:	4b0a      	ldr	r3, [pc, #40]	; (800241c <pc14LedCntrl+0x74>)
 80023f2:	695b      	ldr	r3, [r3, #20]
 80023f4:	4a09      	ldr	r2, [pc, #36]	; (800241c <pc14LedCntrl+0x74>)
 80023f6:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 80023fa:	6153      	str	r3, [r2, #20]
			__asm__ volatile("NOP");
 80023fc:	bf00      	nop
			break;
 80023fe:	e00a      	b.n	8002416 <pc14LedCntrl+0x6e>
		default:
			GPIOC->ODR &= ~GPIO_ODR_14;
 8002400:	4b06      	ldr	r3, [pc, #24]	; (800241c <pc14LedCntrl+0x74>)
 8002402:	695b      	ldr	r3, [r3, #20]
 8002404:	4a05      	ldr	r2, [pc, #20]	; (800241c <pc14LedCntrl+0x74>)
 8002406:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800240a:	6153      	str	r3, [r2, #20]
			osDelay(200);
 800240c:	20c8      	movs	r0, #200	; 0xc8
 800240e:	f006 fcd7 	bl	8008dc0 <osDelay>
			__asm__ volatile("NOP");
 8002412:	bf00      	nop
			break;
 8002414:	bf00      	nop
    osDelay(1);
 8002416:	e7cb      	b.n	80023b0 <pc14LedCntrl+0x8>
 8002418:	200009d0 	.word	0x200009d0
 800241c:	48000800 	.word	0x48000800

08002420 <espCommunication>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_espCommunication */
void espCommunication(void const * argument)
{
 8002420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002424:	b0aa      	sub	sp, #168	; 0xa8
 8002426:	af12      	add	r7, sp, #72	; 0x48
 8002428:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* USER CODE BEGIN espCommunication */
	vTaskDelay( pdMS_TO_TICKS( 600 ) );
 800242a:	f44f 7016 	mov.w	r0, #600	; 0x258
 800242e:	f007 fcfd 	bl	8009e2c <vTaskDelay>
	taskENTER_CRITICAL();
 8002432:	f008 ff77 	bl	800b324 <vPortEnterCritical>
	  GPIOB->ODR |= (1<<1); //RST_ESP
 8002436:	4baa      	ldr	r3, [pc, #680]	; (80026e0 <espCommunication+0x2c0>)
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	4aa9      	ldr	r2, [pc, #676]	; (80026e0 <espCommunication+0x2c0>)
 800243c:	f043 0302 	orr.w	r3, r3, #2
 8002440:	6153      	str	r3, [r2, #20]
	  GPIOB->ODR |= (1<<2); //EN_ESP
 8002442:	4ba7      	ldr	r3, [pc, #668]	; (80026e0 <espCommunication+0x2c0>)
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	4aa6      	ldr	r2, [pc, #664]	; (80026e0 <espCommunication+0x2c0>)
 8002448:	f043 0304 	orr.w	r3, r3, #4
 800244c:	6153      	str	r3, [r2, #20]
	  sprintf(txBuffer, "AT\r\n");
 800244e:	49a5      	ldr	r1, [pc, #660]	; (80026e4 <espCommunication+0x2c4>)
 8002450:	48a5      	ldr	r0, [pc, #660]	; (80026e8 <espCommunication+0x2c8>)
 8002452:	f009 ff79 	bl	800c348 <siprintf>
	  char controlAnsw[] = "AT\r\r\n\r\nOK\r\n";
 8002456:	4aa5      	ldr	r2, [pc, #660]	; (80026ec <espCommunication+0x2cc>)
 8002458:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800245c:	ca07      	ldmia	r2, {r0, r1, r2}
 800245e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	  while(strcmp(rxBuffer, controlAnsw) != 0) {
 8002462:	e019      	b.n	8002498 <espCommunication+0x78>
		  HAL_UART_Transmit(&huart3, (uint8_t*)txBuffer, strlen(txBuffer), 250);
 8002464:	48a0      	ldr	r0, [pc, #640]	; (80026e8 <espCommunication+0x2c8>)
 8002466:	f7fd ff13 	bl	8000290 <strlen>
 800246a:	4603      	mov	r3, r0
 800246c:	b29a      	uxth	r2, r3
 800246e:	23fa      	movs	r3, #250	; 0xfa
 8002470:	499d      	ldr	r1, [pc, #628]	; (80026e8 <espCommunication+0x2c8>)
 8002472:	489f      	ldr	r0, [pc, #636]	; (80026f0 <espCommunication+0x2d0>)
 8002474:	f005 ff9a 	bl	80083ac <HAL_UART_Transmit>
		  HAL_UART_Receive(&huart3, (uint8_t*)rxBuffer, strlen(controlAnsw), 250);
 8002478:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800247c:	4618      	mov	r0, r3
 800247e:	f7fd ff07 	bl	8000290 <strlen>
 8002482:	4603      	mov	r3, r0
 8002484:	b29a      	uxth	r2, r3
 8002486:	23fa      	movs	r3, #250	; 0xfa
 8002488:	499a      	ldr	r1, [pc, #616]	; (80026f4 <espCommunication+0x2d4>)
 800248a:	4899      	ldr	r0, [pc, #612]	; (80026f0 <espCommunication+0x2d0>)
 800248c:	f006 f818 	bl	80084c0 <HAL_UART_Receive>
		  vTaskDelay( pdMS_TO_TICKS( 100 ) );
 8002490:	2064      	movs	r0, #100	; 0x64
 8002492:	f007 fccb 	bl	8009e2c <vTaskDelay>
		  __asm__ volatile("NOP");
 8002496:	bf00      	nop
	  while(strcmp(rxBuffer, controlAnsw) != 0) {
 8002498:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800249c:	4619      	mov	r1, r3
 800249e:	4895      	ldr	r0, [pc, #596]	; (80026f4 <espCommunication+0x2d4>)
 80024a0:	f7fd fe96 	bl	80001d0 <strcmp>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1dc      	bne.n	8002464 <espCommunication+0x44>
	  }

	  sprintf(txBuffer, "AT+CWMODE_CUR=1\r\n");
 80024aa:	4993      	ldr	r1, [pc, #588]	; (80026f8 <espCommunication+0x2d8>)
 80024ac:	488e      	ldr	r0, [pc, #568]	; (80026e8 <espCommunication+0x2c8>)
 80024ae:	f009 ff4b 	bl	800c348 <siprintf>
	  sendATCommand(&huart3, "AT+CWMODE_CUR=1\r\n", strlen(txBuffer) , 250);
 80024b2:	488d      	ldr	r0, [pc, #564]	; (80026e8 <espCommunication+0x2c8>)
 80024b4:	f7fd feec 	bl	8000290 <strlen>
 80024b8:	4603      	mov	r3, r0
 80024ba:	461a      	mov	r2, r3
 80024bc:	23fa      	movs	r3, #250	; 0xfa
 80024be:	498e      	ldr	r1, [pc, #568]	; (80026f8 <espCommunication+0x2d8>)
 80024c0:	488b      	ldr	r0, [pc, #556]	; (80026f0 <espCommunication+0x2d0>)
 80024c2:	f7fe fce4 	bl	8000e8e <sendATCommand>
	  receiveAnswer(&huart3, rxBuffer, sizeof(rxBuffer), 250);
 80024c6:	23fa      	movs	r3, #250	; 0xfa
 80024c8:	f240 12ff 	movw	r2, #511	; 0x1ff
 80024cc:	4989      	ldr	r1, [pc, #548]	; (80026f4 <espCommunication+0x2d4>)
 80024ce:	4888      	ldr	r0, [pc, #544]	; (80026f0 <espCommunication+0x2d0>)
 80024d0:	f7fe fd01 	bl	8000ed6 <receiveAnswer>

	  sprintf(txBuffer, "AT+CWJAP_CUR=\"RedmiGiGidra\",\"DimaDimaDimon\"\r\n");
 80024d4:	4989      	ldr	r1, [pc, #548]	; (80026fc <espCommunication+0x2dc>)
 80024d6:	4884      	ldr	r0, [pc, #528]	; (80026e8 <espCommunication+0x2c8>)
 80024d8:	f009 ff36 	bl	800c348 <siprintf>
	  sendATCommand(&huart3, txBuffer, strlen(txBuffer), 1000);
 80024dc:	4882      	ldr	r0, [pc, #520]	; (80026e8 <espCommunication+0x2c8>)
 80024de:	f7fd fed7 	bl	8000290 <strlen>
 80024e2:	4603      	mov	r3, r0
 80024e4:	461a      	mov	r2, r3
 80024e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024ea:	497f      	ldr	r1, [pc, #508]	; (80026e8 <espCommunication+0x2c8>)
 80024ec:	4880      	ldr	r0, [pc, #512]	; (80026f0 <espCommunication+0x2d0>)
 80024ee:	f7fe fcce 	bl	8000e8e <sendATCommand>
	  receiveAnswer(&huart3, rxBuffer, sizeof(rxBuffer), 10000);
 80024f2:	f242 7310 	movw	r3, #10000	; 0x2710
 80024f6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80024fa:	497e      	ldr	r1, [pc, #504]	; (80026f4 <espCommunication+0x2d4>)
 80024fc:	487c      	ldr	r0, [pc, #496]	; (80026f0 <espCommunication+0x2d0>)
 80024fe:	f7fe fcea 	bl	8000ed6 <receiveAnswer>

	  taskEXIT_CRITICAL();
 8002502:	f008 ff3f 	bl	800b384 <vPortExitCritical>

	  memset(rxBuffer, '\0', sizeof(rxBuffer));
 8002506:	f240 12ff 	movw	r2, #511	; 0x1ff
 800250a:	2100      	movs	r1, #0
 800250c:	4879      	ldr	r0, [pc, #484]	; (80026f4 <espCommunication+0x2d4>)
 800250e:	f009 ff7e 	bl	800c40e <memset>
	  USART3->CR3 |= USART_CR3_DMAR;
 8002512:	4b7b      	ldr	r3, [pc, #492]	; (8002700 <espCommunication+0x2e0>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	4a7a      	ldr	r2, [pc, #488]	; (8002700 <espCommunication+0x2e0>)
 8002518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800251c:	6093      	str	r3, [r2, #8]
	  DMA1_Channel3->CCR |= DMA_CCR_EN; //Starting continuous DMA on RX
 800251e:	4b79      	ldr	r3, [pc, #484]	; (8002704 <espCommunication+0x2e4>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a78      	ldr	r2, [pc, #480]	; (8002704 <espCommunication+0x2e4>)
 8002524:	f043 0301 	orr.w	r3, r3, #1
 8002528:	6013      	str	r3, [r2, #0]

	  vTaskDelay( pdMS_TO_TICKS( 2000 ) );
 800252a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800252e:	f007 fc7d 	bl	8009e2c <vTaskDelay>

	  sprintf(txBuffer, "ATE0\r\n");
 8002532:	4975      	ldr	r1, [pc, #468]	; (8002708 <espCommunication+0x2e8>)
 8002534:	486c      	ldr	r0, [pc, #432]	; (80026e8 <espCommunication+0x2c8>)
 8002536:	f009 ff07 	bl	800c348 <siprintf>
	  sendATCommand(&huart3, txBuffer, strlen(txBuffer), 250);
 800253a:	486b      	ldr	r0, [pc, #428]	; (80026e8 <espCommunication+0x2c8>)
 800253c:	f7fd fea8 	bl	8000290 <strlen>
 8002540:	4603      	mov	r3, r0
 8002542:	461a      	mov	r2, r3
 8002544:	23fa      	movs	r3, #250	; 0xfa
 8002546:	4968      	ldr	r1, [pc, #416]	; (80026e8 <espCommunication+0x2c8>)
 8002548:	4869      	ldr	r0, [pc, #420]	; (80026f0 <espCommunication+0x2d0>)
 800254a:	f7fe fca0 	bl	8000e8e <sendATCommand>
	  vTaskDelay( pdMS_TO_TICKS( 100 ) );
 800254e:	2064      	movs	r0, #100	; 0x64
 8002550:	f007 fc6c 	bl	8009e2c <vTaskDelay>

	  sprintf(txBuffer, "AT+CIPCLOSE\r\n");
 8002554:	496d      	ldr	r1, [pc, #436]	; (800270c <espCommunication+0x2ec>)
 8002556:	4864      	ldr	r0, [pc, #400]	; (80026e8 <espCommunication+0x2c8>)
 8002558:	f009 fef6 	bl	800c348 <siprintf>
	  sendATCommand(&huart3, txBuffer, strlen(txBuffer), 250);
 800255c:	4862      	ldr	r0, [pc, #392]	; (80026e8 <espCommunication+0x2c8>)
 800255e:	f7fd fe97 	bl	8000290 <strlen>
 8002562:	4603      	mov	r3, r0
 8002564:	461a      	mov	r2, r3
 8002566:	23fa      	movs	r3, #250	; 0xfa
 8002568:	495f      	ldr	r1, [pc, #380]	; (80026e8 <espCommunication+0x2c8>)
 800256a:	4861      	ldr	r0, [pc, #388]	; (80026f0 <espCommunication+0x2d0>)
 800256c:	f7fe fc8f 	bl	8000e8e <sendATCommand>
	  vTaskDelay( pdMS_TO_TICKS( 250 ) );
 8002570:	20fa      	movs	r0, #250	; 0xfa
 8002572:	f007 fc5b 	bl	8009e2c <vTaskDelay>

	  sprintf(txBuffer, "AT+CIPSTART=\"TCP\",\"192.168.137.1\",8080\r\n");
 8002576:	4966      	ldr	r1, [pc, #408]	; (8002710 <espCommunication+0x2f0>)
 8002578:	485b      	ldr	r0, [pc, #364]	; (80026e8 <espCommunication+0x2c8>)
 800257a:	f009 fee5 	bl	800c348 <siprintf>
	  sendATCommand(&huart3, txBuffer, strlen(txBuffer), 250);
 800257e:	485a      	ldr	r0, [pc, #360]	; (80026e8 <espCommunication+0x2c8>)
 8002580:	f7fd fe86 	bl	8000290 <strlen>
 8002584:	4603      	mov	r3, r0
 8002586:	461a      	mov	r2, r3
 8002588:	23fa      	movs	r3, #250	; 0xfa
 800258a:	4957      	ldr	r1, [pc, #348]	; (80026e8 <espCommunication+0x2c8>)
 800258c:	4858      	ldr	r0, [pc, #352]	; (80026f0 <espCommunication+0x2d0>)
 800258e:	f7fe fc7e 	bl	8000e8e <sendATCommand>
	  vTaskDelay( pdMS_TO_TICKS( 40 ) );
 8002592:	2028      	movs	r0, #40	; 0x28
 8002594:	f007 fc4a 	bl	8009e2c <vTaskDelay>

	  memset(txBuffer, '\0', sizeof(txBuffer));
 8002598:	f240 12ff 	movw	r2, #511	; 0x1ff
 800259c:	2100      	movs	r1, #0
 800259e:	4852      	ldr	r0, [pc, #328]	; (80026e8 <espCommunication+0x2c8>)
 80025a0:	f009 ff35 	bl	800c40e <memset>
      // Creating the entire GET request string
	  sprintf(txBuffer, "GET /robot HTTP/1.1\r\n"
 80025a4:	495b      	ldr	r1, [pc, #364]	; (8002714 <espCommunication+0x2f4>)
 80025a6:	4850      	ldr	r0, [pc, #320]	; (80026e8 <espCommunication+0x2c8>)
 80025a8:	f009 fece 	bl	800c348 <siprintf>
						  "Host: 192.168.137.1\r\n");
	  int getRequestLength = strlen(txBuffer);
 80025ac:	484e      	ldr	r0, [pc, #312]	; (80026e8 <espCommunication+0x2c8>)
 80025ae:	f7fd fe6f 	bl	8000290 <strlen>
 80025b2:	4603      	mov	r3, r0
 80025b4:	65bb      	str	r3, [r7, #88]	; 0x58
	  char pDataBuf[20];
	  sprintf(pDataBuf, "AT+CIPSEND=%d\r\n", getRequestLength);
 80025b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80025ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80025bc:	4956      	ldr	r1, [pc, #344]	; (8002718 <espCommunication+0x2f8>)
 80025be:	4618      	mov	r0, r3
 80025c0:	f009 fec2 	bl	800c348 <siprintf>
	  sendATCommand(&huart3, pDataBuf, sizeof(pDataBuf), 250);
 80025c4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80025c8:	23fa      	movs	r3, #250	; 0xfa
 80025ca:	2214      	movs	r2, #20
 80025cc:	4848      	ldr	r0, [pc, #288]	; (80026f0 <espCommunication+0x2d0>)
 80025ce:	f7fe fc5e 	bl	8000e8e <sendATCommand>
	  vTaskDelay( pdMS_TO_TICKS( 10 ) );
 80025d2:	200a      	movs	r0, #10
 80025d4:	f007 fc2a 	bl	8009e2c <vTaskDelay>
	  sendATCommand(&huart3, txBuffer, getRequestLength, 250);
 80025d8:	23fa      	movs	r3, #250	; 0xfa
 80025da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80025dc:	4942      	ldr	r1, [pc, #264]	; (80026e8 <espCommunication+0x2c8>)
 80025de:	4844      	ldr	r0, [pc, #272]	; (80026f0 <espCommunication+0x2d0>)
 80025e0:	f7fe fc55 	bl	8000e8e <sendATCommand>

	  memset(txBuffer, '\0', sizeof(txBuffer));
 80025e4:	f240 12ff 	movw	r2, #511	; 0x1ff
 80025e8:	2100      	movs	r1, #0
 80025ea:	483f      	ldr	r0, [pc, #252]	; (80026e8 <espCommunication+0x2c8>)
 80025ec:	f009 ff0f 	bl	800c40e <memset>
	  vTaskDelay( pdMS_TO_TICKS( 50 ) );
 80025f0:	2032      	movs	r0, #50	; 0x32
 80025f2:	f007 fc1b 	bl	8009e2c <vTaskDelay>

	  __asm__ volatile("NOP");
 80025f6:	bf00      	nop

  /* Infinite loop */
  for(;;)
  {
	  debugVar = 1;
 80025f8:	4b48      	ldr	r3, [pc, #288]	; (800271c <espCommunication+0x2fc>)
 80025fa:	2201      	movs	r2, #1
 80025fc:	601a      	str	r2, [r3, #0]
	  // Calculate the number of bytes received since the last processing
//	  uint8_t receivedBytes = 0;
	  if((ESPRXBUFFERSIZE - DMA1_Channel3->CNDTR) < rxBufferHead) {
 80025fe:	4b41      	ldr	r3, [pc, #260]	; (8002704 <espCommunication+0x2e4>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f5c3 73ff 	rsb	r3, r3, #510	; 0x1fe
 8002606:	3301      	adds	r3, #1
 8002608:	4a45      	ldr	r2, [pc, #276]	; (8002720 <espCommunication+0x300>)
 800260a:	8812      	ldrh	r2, [r2, #0]
 800260c:	b292      	uxth	r2, r2
 800260e:	4293      	cmp	r3, r2
 8002610:	d218      	bcs.n	8002644 <espCommunication+0x224>
		  receivedBytes = (ESPRXBUFFERSIZE - rxBufferHead + ESPRXBUFFERSIZE - DMA1_Channel3->CNDTR) % ESPRXBUFFERSIZE;
 8002612:	4b43      	ldr	r3, [pc, #268]	; (8002720 <espCommunication+0x300>)
 8002614:	881b      	ldrh	r3, [r3, #0]
 8002616:	b29b      	uxth	r3, r3
 8002618:	461a      	mov	r2, r3
 800261a:	4b3a      	ldr	r3, [pc, #232]	; (8002704 <espCommunication+0x2e4>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	4413      	add	r3, r2
 8002620:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8002624:	3302      	adds	r3, #2
 8002626:	4a3f      	ldr	r2, [pc, #252]	; (8002724 <espCommunication+0x304>)
 8002628:	fba2 1203 	umull	r1, r2, r2, r3
 800262c:	1a99      	subs	r1, r3, r2
 800262e:	0849      	lsrs	r1, r1, #1
 8002630:	440a      	add	r2, r1
 8002632:	0a11      	lsrs	r1, r2, #8
 8002634:	460a      	mov	r2, r1
 8002636:	0252      	lsls	r2, r2, #9
 8002638:	1a52      	subs	r2, r2, r1
 800263a:	1a99      	subs	r1, r3, r2
 800263c:	b2ca      	uxtb	r2, r1
 800263e:	4b3a      	ldr	r3, [pc, #232]	; (8002728 <espCommunication+0x308>)
 8002640:	701a      	strb	r2, [r3, #0]
 8002642:	e016      	b.n	8002672 <espCommunication+0x252>
	  } else {
		  receivedBytes = (ESPRXBUFFERSIZE - DMA1_Channel3->CNDTR -rxBufferHead) % ESPRXBUFFERSIZE;
 8002644:	4b2f      	ldr	r3, [pc, #188]	; (8002704 <espCommunication+0x2e4>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	4a35      	ldr	r2, [pc, #212]	; (8002720 <espCommunication+0x300>)
 800264a:	8812      	ldrh	r2, [r2, #0]
 800264c:	b292      	uxth	r2, r2
 800264e:	4413      	add	r3, r2
 8002650:	f5c3 73ff 	rsb	r3, r3, #510	; 0x1fe
 8002654:	3301      	adds	r3, #1
 8002656:	4a33      	ldr	r2, [pc, #204]	; (8002724 <espCommunication+0x304>)
 8002658:	fba2 1203 	umull	r1, r2, r2, r3
 800265c:	1a99      	subs	r1, r3, r2
 800265e:	0849      	lsrs	r1, r1, #1
 8002660:	440a      	add	r2, r1
 8002662:	0a11      	lsrs	r1, r2, #8
 8002664:	460a      	mov	r2, r1
 8002666:	0252      	lsls	r2, r2, #9
 8002668:	1a52      	subs	r2, r2, r1
 800266a:	1a99      	subs	r1, r3, r2
 800266c:	b2ca      	uxtb	r2, r1
 800266e:	4b2e      	ldr	r3, [pc, #184]	; (8002728 <espCommunication+0x308>)
 8002670:	701a      	strb	r2, [r3, #0]
	  }

	  uint16_t sizeRxBufCopy = sizeof(rxBufferCopy);
 8002672:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002676:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	  memset(rxBufferCopy, '\0', sizeRxBufCopy);
 800267a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800267e:	461a      	mov	r2, r3
 8002680:	2100      	movs	r1, #0
 8002682:	482a      	ldr	r0, [pc, #168]	; (800272c <espCommunication+0x30c>)
 8002684:	f009 fec3 	bl	800c40e <memset>
	  for(uint16_t i = 0; i < receivedBytes; i++) {
 8002688:	2300      	movs	r3, #0
 800268a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800268e:	e019      	b.n	80026c4 <espCommunication+0x2a4>
		  rxBufferCopy[i] = rxBuffer[(rxBufferHead + i)%sizeRxBufCopy];
 8002690:	4b23      	ldr	r3, [pc, #140]	; (8002720 <espCommunication+0x300>)
 8002692:	881b      	ldrh	r3, [r3, #0]
 8002694:	b29b      	uxth	r3, r3
 8002696:	461a      	mov	r2, r3
 8002698:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800269c:	4413      	add	r3, r2
 800269e:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 80026a2:	fb93 f1f2 	sdiv	r1, r3, r2
 80026a6:	fb01 f202 	mul.w	r2, r1, r2
 80026aa:	1a9a      	subs	r2, r3, r2
 80026ac:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80026b0:	4910      	ldr	r1, [pc, #64]	; (80026f4 <espCommunication+0x2d4>)
 80026b2:	5c8a      	ldrb	r2, [r1, r2]
 80026b4:	b2d1      	uxtb	r1, r2
 80026b6:	4a1d      	ldr	r2, [pc, #116]	; (800272c <espCommunication+0x30c>)
 80026b8:	54d1      	strb	r1, [r2, r3]
	  for(uint16_t i = 0; i < receivedBytes; i++) {
 80026ba:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80026be:	3301      	adds	r3, #1
 80026c0:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80026c4:	4b18      	ldr	r3, [pc, #96]	; (8002728 <espCommunication+0x308>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d3de      	bcc.n	8002690 <espCommunication+0x270>
	  }

	  debugVar = 5;
 80026d2:	4b12      	ldr	r3, [pc, #72]	; (800271c <espCommunication+0x2fc>)
 80026d4:	2205      	movs	r2, #5
 80026d6:	601a      	str	r2, [r3, #0]

	  // Process the received data
	  for(uint16_t i = 0; i < receivedBytes; i++) {
 80026d8:	2300      	movs	r3, #0
 80026da:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80026de:	e237      	b.n	8002b50 <espCommunication+0x730>
 80026e0:	48000400 	.word	0x48000400
 80026e4:	0800f690 	.word	0x0800f690
 80026e8:	20000a24 	.word	0x20000a24
 80026ec:	0800f8f0 	.word	0x0800f8f0
 80026f0:	20000880 	.word	0x20000880
 80026f4:	20000c24 	.word	0x20000c24
 80026f8:	0800f698 	.word	0x0800f698
 80026fc:	0800f6ac 	.word	0x0800f6ac
 8002700:	40004800 	.word	0x40004800
 8002704:	40020030 	.word	0x40020030
 8002708:	0800f6dc 	.word	0x0800f6dc
 800270c:	0800f6e4 	.word	0x0800f6e4
 8002710:	0800f6f4 	.word	0x0800f6f4
 8002714:	0800f720 	.word	0x0800f720
 8002718:	0800f74c 	.word	0x0800f74c
 800271c:	20000f4c 	.word	0x20000f4c
 8002720:	20000e24 	.word	0x20000e24
 8002724:	00804021 	.word	0x00804021
 8002728:	20000e26 	.word	0x20000e26
 800272c:	20000e28 	.word	0x20000e28
		  debugVar = 6;
 8002730:	4b9a      	ldr	r3, [pc, #616]	; (800299c <espCommunication+0x57c>)
 8002732:	2206      	movs	r2, #6
 8002734:	601a      	str	r2, [r3, #0]
		  debugVar2 = i;
 8002736:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800273a:	4a99      	ldr	r2, [pc, #612]	; (80029a0 <espCommunication+0x580>)
 800273c:	6013      	str	r3, [r2, #0]
		  if((rxBuffer[(rxBufferHead + i)%ESPRXBUFFERSIZE] == 'T') &&
 800273e:	4b99      	ldr	r3, [pc, #612]	; (80029a4 <espCommunication+0x584>)
 8002740:	881b      	ldrh	r3, [r3, #0]
 8002742:	b29b      	uxth	r3, r3
 8002744:	461a      	mov	r2, r3
 8002746:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800274a:	441a      	add	r2, r3
 800274c:	4b96      	ldr	r3, [pc, #600]	; (80029a8 <espCommunication+0x588>)
 800274e:	fb83 1302 	smull	r1, r3, r3, r2
 8002752:	4413      	add	r3, r2
 8002754:	1219      	asrs	r1, r3, #8
 8002756:	17d3      	asrs	r3, r2, #31
 8002758:	1ac9      	subs	r1, r1, r3
 800275a:	460b      	mov	r3, r1
 800275c:	025b      	lsls	r3, r3, #9
 800275e:	1a5b      	subs	r3, r3, r1
 8002760:	1ad1      	subs	r1, r2, r3
 8002762:	4b92      	ldr	r3, [pc, #584]	; (80029ac <espCommunication+0x58c>)
 8002764:	5c5b      	ldrb	r3, [r3, r1]
 8002766:	b2db      	uxtb	r3, r3
 8002768:	2b54      	cmp	r3, #84	; 0x54
 800276a:	f040 8098 	bne.w	800289e <espCommunication+0x47e>
		     (rxBuffer[(rxBufferHead + i + 1)%ESPRXBUFFERSIZE] == 'S') &&
 800276e:	4b8d      	ldr	r3, [pc, #564]	; (80029a4 <espCommunication+0x584>)
 8002770:	881b      	ldrh	r3, [r3, #0]
 8002772:	b29b      	uxth	r3, r3
 8002774:	461a      	mov	r2, r3
 8002776:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800277a:	4413      	add	r3, r2
 800277c:	1c5a      	adds	r2, r3, #1
 800277e:	4b8a      	ldr	r3, [pc, #552]	; (80029a8 <espCommunication+0x588>)
 8002780:	fb83 1302 	smull	r1, r3, r3, r2
 8002784:	4413      	add	r3, r2
 8002786:	1219      	asrs	r1, r3, #8
 8002788:	17d3      	asrs	r3, r2, #31
 800278a:	1ac9      	subs	r1, r1, r3
 800278c:	460b      	mov	r3, r1
 800278e:	025b      	lsls	r3, r3, #9
 8002790:	1a5b      	subs	r3, r3, r1
 8002792:	1ad1      	subs	r1, r2, r3
 8002794:	4b85      	ldr	r3, [pc, #532]	; (80029ac <espCommunication+0x58c>)
 8002796:	5c5b      	ldrb	r3, [r3, r1]
 8002798:	b2db      	uxtb	r3, r3
		  if((rxBuffer[(rxBufferHead + i)%ESPRXBUFFERSIZE] == 'T') &&
 800279a:	2b53      	cmp	r3, #83	; 0x53
 800279c:	d17f      	bne.n	800289e <espCommunication+0x47e>
			 (rxBuffer[(rxBufferHead + i + 2)%ESPRXBUFFERSIZE] == 'P')) {
 800279e:	4b81      	ldr	r3, [pc, #516]	; (80029a4 <espCommunication+0x584>)
 80027a0:	881b      	ldrh	r3, [r3, #0]
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	461a      	mov	r2, r3
 80027a6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80027aa:	4413      	add	r3, r2
 80027ac:	1c9a      	adds	r2, r3, #2
 80027ae:	4b7e      	ldr	r3, [pc, #504]	; (80029a8 <espCommunication+0x588>)
 80027b0:	fb83 1302 	smull	r1, r3, r3, r2
 80027b4:	4413      	add	r3, r2
 80027b6:	1219      	asrs	r1, r3, #8
 80027b8:	17d3      	asrs	r3, r2, #31
 80027ba:	1ac9      	subs	r1, r1, r3
 80027bc:	460b      	mov	r3, r1
 80027be:	025b      	lsls	r3, r3, #9
 80027c0:	1a5b      	subs	r3, r3, r1
 80027c2:	1ad1      	subs	r1, r2, r3
 80027c4:	4b79      	ldr	r3, [pc, #484]	; (80029ac <espCommunication+0x58c>)
 80027c6:	5c5b      	ldrb	r3, [r3, r1]
 80027c8:	b2db      	uxtb	r3, r3
		     (rxBuffer[(rxBufferHead + i + 1)%ESPRXBUFFERSIZE] == 'S') &&
 80027ca:	2b50      	cmp	r3, #80	; 0x50
 80027cc:	d167      	bne.n	800289e <espCommunication+0x47e>
			  if(rxBuffer[(rxBufferHead + i + 3)%ESPRXBUFFERSIZE] == '-') {
 80027ce:	4b75      	ldr	r3, [pc, #468]	; (80029a4 <espCommunication+0x584>)
 80027d0:	881b      	ldrh	r3, [r3, #0]
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	461a      	mov	r2, r3
 80027d6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80027da:	4413      	add	r3, r2
 80027dc:	1cda      	adds	r2, r3, #3
 80027de:	4b72      	ldr	r3, [pc, #456]	; (80029a8 <espCommunication+0x588>)
 80027e0:	fb83 1302 	smull	r1, r3, r3, r2
 80027e4:	4413      	add	r3, r2
 80027e6:	1219      	asrs	r1, r3, #8
 80027e8:	17d3      	asrs	r3, r2, #31
 80027ea:	1ac9      	subs	r1, r1, r3
 80027ec:	460b      	mov	r3, r1
 80027ee:	025b      	lsls	r3, r3, #9
 80027f0:	1a5b      	subs	r3, r3, r1
 80027f2:	1ad1      	subs	r1, r2, r3
 80027f4:	4b6d      	ldr	r3, [pc, #436]	; (80029ac <espCommunication+0x58c>)
 80027f6:	5c5b      	ldrb	r3, [r3, r1]
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b2d      	cmp	r3, #45	; 0x2d
 80027fc:	d119      	bne.n	8002832 <espCommunication+0x412>
				  if(rxBuffer[(rxBufferHead + i + 8)%ESPRXBUFFERSIZE] != '_') continue;
 80027fe:	4b69      	ldr	r3, [pc, #420]	; (80029a4 <espCommunication+0x584>)
 8002800:	881b      	ldrh	r3, [r3, #0]
 8002802:	b29b      	uxth	r3, r3
 8002804:	461a      	mov	r2, r3
 8002806:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800280a:	4413      	add	r3, r2
 800280c:	f103 0208 	add.w	r2, r3, #8
 8002810:	4b65      	ldr	r3, [pc, #404]	; (80029a8 <espCommunication+0x588>)
 8002812:	fb83 1302 	smull	r1, r3, r3, r2
 8002816:	4413      	add	r3, r2
 8002818:	1219      	asrs	r1, r3, #8
 800281a:	17d3      	asrs	r3, r2, #31
 800281c:	1ac9      	subs	r1, r1, r3
 800281e:	460b      	mov	r3, r1
 8002820:	025b      	lsls	r3, r3, #9
 8002822:	1a5b      	subs	r3, r3, r1
 8002824:	1ad1      	subs	r1, r2, r3
 8002826:	4b61      	ldr	r3, [pc, #388]	; (80029ac <espCommunication+0x58c>)
 8002828:	5c5b      	ldrb	r3, [r3, r1]
 800282a:	b2db      	uxtb	r3, r3
 800282c:	2b5f      	cmp	r3, #95	; 0x5f
 800282e:	d019      	beq.n	8002864 <espCommunication+0x444>
 8002830:	e189      	b.n	8002b46 <espCommunication+0x726>
			  } else {
				  if(rxBuffer[(rxBufferHead + i + 7)%ESPRXBUFFERSIZE] != '_') continue;
 8002832:	4b5c      	ldr	r3, [pc, #368]	; (80029a4 <espCommunication+0x584>)
 8002834:	881b      	ldrh	r3, [r3, #0]
 8002836:	b29b      	uxth	r3, r3
 8002838:	461a      	mov	r2, r3
 800283a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800283e:	4413      	add	r3, r2
 8002840:	1dda      	adds	r2, r3, #7
 8002842:	4b59      	ldr	r3, [pc, #356]	; (80029a8 <espCommunication+0x588>)
 8002844:	fb83 1302 	smull	r1, r3, r3, r2
 8002848:	4413      	add	r3, r2
 800284a:	1219      	asrs	r1, r3, #8
 800284c:	17d3      	asrs	r3, r2, #31
 800284e:	1ac9      	subs	r1, r1, r3
 8002850:	460b      	mov	r3, r1
 8002852:	025b      	lsls	r3, r3, #9
 8002854:	1a5b      	subs	r3, r3, r1
 8002856:	1ad1      	subs	r1, r2, r3
 8002858:	4b54      	ldr	r3, [pc, #336]	; (80029ac <espCommunication+0x58c>)
 800285a:	5c5b      	ldrb	r3, [r3, r1]
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b5f      	cmp	r3, #95	; 0x5f
 8002860:	f040 8162 	bne.w	8002b28 <espCommunication+0x708>
			  }
			  tSpeed = parseFloat(rxBuffer, ((rxBufferHead + i + 3)%ESPRXBUFFERSIZE));
 8002864:	4b4f      	ldr	r3, [pc, #316]	; (80029a4 <espCommunication+0x584>)
 8002866:	881b      	ldrh	r3, [r3, #0]
 8002868:	b29b      	uxth	r3, r3
 800286a:	461a      	mov	r2, r3
 800286c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002870:	4413      	add	r3, r2
 8002872:	1cda      	adds	r2, r3, #3
 8002874:	4b4c      	ldr	r3, [pc, #304]	; (80029a8 <espCommunication+0x588>)
 8002876:	fb83 1302 	smull	r1, r3, r3, r2
 800287a:	4413      	add	r3, r2
 800287c:	1219      	asrs	r1, r3, #8
 800287e:	17d3      	asrs	r3, r2, #31
 8002880:	1ac9      	subs	r1, r1, r3
 8002882:	460b      	mov	r3, r1
 8002884:	025b      	lsls	r3, r3, #9
 8002886:	1a5b      	subs	r3, r3, r1
 8002888:	1ad1      	subs	r1, r2, r3
 800288a:	b28b      	uxth	r3, r1
 800288c:	4619      	mov	r1, r3
 800288e:	4847      	ldr	r0, [pc, #284]	; (80029ac <espCommunication+0x58c>)
 8002890:	f7fe fb9e 	bl	8000fd0 <parseFloat>
 8002894:	eef0 7a40 	vmov.f32	s15, s0
 8002898:	4b45      	ldr	r3, [pc, #276]	; (80029b0 <espCommunication+0x590>)
 800289a:	edc3 7a00 	vstr	s15, [r3]
		  }
		  debugVar = 10;
 800289e:	4b3f      	ldr	r3, [pc, #252]	; (800299c <espCommunication+0x57c>)
 80028a0:	220a      	movs	r2, #10
 80028a2:	601a      	str	r2, [r3, #0]
		  if((rxBuffer[(rxBufferHead + i)%ESPRXBUFFERSIZE] == 'A') &&
 80028a4:	4b3f      	ldr	r3, [pc, #252]	; (80029a4 <espCommunication+0x584>)
 80028a6:	881b      	ldrh	r3, [r3, #0]
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	461a      	mov	r2, r3
 80028ac:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80028b0:	441a      	add	r2, r3
 80028b2:	4b3d      	ldr	r3, [pc, #244]	; (80029a8 <espCommunication+0x588>)
 80028b4:	fb83 1302 	smull	r1, r3, r3, r2
 80028b8:	4413      	add	r3, r2
 80028ba:	1219      	asrs	r1, r3, #8
 80028bc:	17d3      	asrs	r3, r2, #31
 80028be:	1ac9      	subs	r1, r1, r3
 80028c0:	460b      	mov	r3, r1
 80028c2:	025b      	lsls	r3, r3, #9
 80028c4:	1a5b      	subs	r3, r3, r1
 80028c6:	1ad1      	subs	r1, r2, r3
 80028c8:	4b38      	ldr	r3, [pc, #224]	; (80029ac <espCommunication+0x58c>)
 80028ca:	5c5b      	ldrb	r3, [r3, r1]
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b41      	cmp	r3, #65	; 0x41
 80028d0:	f040 80a6 	bne.w	8002a20 <espCommunication+0x600>
		     (rxBuffer[(rxBufferHead + i + 1)%ESPRXBUFFERSIZE] == 'S') &&
 80028d4:	4b33      	ldr	r3, [pc, #204]	; (80029a4 <espCommunication+0x584>)
 80028d6:	881b      	ldrh	r3, [r3, #0]
 80028d8:	b29b      	uxth	r3, r3
 80028da:	461a      	mov	r2, r3
 80028dc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80028e0:	4413      	add	r3, r2
 80028e2:	1c5a      	adds	r2, r3, #1
 80028e4:	4b30      	ldr	r3, [pc, #192]	; (80029a8 <espCommunication+0x588>)
 80028e6:	fb83 1302 	smull	r1, r3, r3, r2
 80028ea:	4413      	add	r3, r2
 80028ec:	1219      	asrs	r1, r3, #8
 80028ee:	17d3      	asrs	r3, r2, #31
 80028f0:	1ac9      	subs	r1, r1, r3
 80028f2:	460b      	mov	r3, r1
 80028f4:	025b      	lsls	r3, r3, #9
 80028f6:	1a5b      	subs	r3, r3, r1
 80028f8:	1ad1      	subs	r1, r2, r3
 80028fa:	4b2c      	ldr	r3, [pc, #176]	; (80029ac <espCommunication+0x58c>)
 80028fc:	5c5b      	ldrb	r3, [r3, r1]
 80028fe:	b2db      	uxtb	r3, r3
		  if((rxBuffer[(rxBufferHead + i)%ESPRXBUFFERSIZE] == 'A') &&
 8002900:	2b53      	cmp	r3, #83	; 0x53
 8002902:	f040 808d 	bne.w	8002a20 <espCommunication+0x600>
			 (rxBuffer[(rxBufferHead + i + 2)%ESPRXBUFFERSIZE] == 'P')) {
 8002906:	4b27      	ldr	r3, [pc, #156]	; (80029a4 <espCommunication+0x584>)
 8002908:	881b      	ldrh	r3, [r3, #0]
 800290a:	b29b      	uxth	r3, r3
 800290c:	461a      	mov	r2, r3
 800290e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002912:	4413      	add	r3, r2
 8002914:	1c9a      	adds	r2, r3, #2
 8002916:	4b24      	ldr	r3, [pc, #144]	; (80029a8 <espCommunication+0x588>)
 8002918:	fb83 1302 	smull	r1, r3, r3, r2
 800291c:	4413      	add	r3, r2
 800291e:	1219      	asrs	r1, r3, #8
 8002920:	17d3      	asrs	r3, r2, #31
 8002922:	1ac9      	subs	r1, r1, r3
 8002924:	460b      	mov	r3, r1
 8002926:	025b      	lsls	r3, r3, #9
 8002928:	1a5b      	subs	r3, r3, r1
 800292a:	1ad1      	subs	r1, r2, r3
 800292c:	4b1f      	ldr	r3, [pc, #124]	; (80029ac <espCommunication+0x58c>)
 800292e:	5c5b      	ldrb	r3, [r3, r1]
 8002930:	b2db      	uxtb	r3, r3
		     (rxBuffer[(rxBufferHead + i + 1)%ESPRXBUFFERSIZE] == 'S') &&
 8002932:	2b50      	cmp	r3, #80	; 0x50
 8002934:	d174      	bne.n	8002a20 <espCommunication+0x600>
			  if(rxBuffer[(rxBufferHead + i + 3)%ESPRXBUFFERSIZE] == '-') {
 8002936:	4b1b      	ldr	r3, [pc, #108]	; (80029a4 <espCommunication+0x584>)
 8002938:	881b      	ldrh	r3, [r3, #0]
 800293a:	b29b      	uxth	r3, r3
 800293c:	461a      	mov	r2, r3
 800293e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002942:	4413      	add	r3, r2
 8002944:	1cda      	adds	r2, r3, #3
 8002946:	4b18      	ldr	r3, [pc, #96]	; (80029a8 <espCommunication+0x588>)
 8002948:	fb83 1302 	smull	r1, r3, r3, r2
 800294c:	4413      	add	r3, r2
 800294e:	1219      	asrs	r1, r3, #8
 8002950:	17d3      	asrs	r3, r2, #31
 8002952:	1ac9      	subs	r1, r1, r3
 8002954:	460b      	mov	r3, r1
 8002956:	025b      	lsls	r3, r3, #9
 8002958:	1a5b      	subs	r3, r3, r1
 800295a:	1ad1      	subs	r1, r2, r3
 800295c:	4b13      	ldr	r3, [pc, #76]	; (80029ac <espCommunication+0x58c>)
 800295e:	5c5b      	ldrb	r3, [r3, r1]
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b2d      	cmp	r3, #45	; 0x2d
 8002964:	d126      	bne.n	80029b4 <espCommunication+0x594>
				  if(rxBuffer[(rxBufferHead + i + 8)%ESPRXBUFFERSIZE] != '_') continue;
 8002966:	4b0f      	ldr	r3, [pc, #60]	; (80029a4 <espCommunication+0x584>)
 8002968:	881b      	ldrh	r3, [r3, #0]
 800296a:	b29b      	uxth	r3, r3
 800296c:	461a      	mov	r2, r3
 800296e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002972:	4413      	add	r3, r2
 8002974:	f103 0208 	add.w	r2, r3, #8
 8002978:	4b0b      	ldr	r3, [pc, #44]	; (80029a8 <espCommunication+0x588>)
 800297a:	fb83 1302 	smull	r1, r3, r3, r2
 800297e:	4413      	add	r3, r2
 8002980:	1219      	asrs	r1, r3, #8
 8002982:	17d3      	asrs	r3, r2, #31
 8002984:	1ac9      	subs	r1, r1, r3
 8002986:	460b      	mov	r3, r1
 8002988:	025b      	lsls	r3, r3, #9
 800298a:	1a5b      	subs	r3, r3, r1
 800298c:	1ad1      	subs	r1, r2, r3
 800298e:	4b07      	ldr	r3, [pc, #28]	; (80029ac <espCommunication+0x58c>)
 8002990:	5c5b      	ldrb	r3, [r3, r1]
 8002992:	b2db      	uxtb	r3, r3
 8002994:	2b5f      	cmp	r3, #95	; 0x5f
 8002996:	d026      	beq.n	80029e6 <espCommunication+0x5c6>
 8002998:	e0d5      	b.n	8002b46 <espCommunication+0x726>
 800299a:	bf00      	nop
 800299c:	20000f4c 	.word	0x20000f4c
 80029a0:	20000f50 	.word	0x20000f50
 80029a4:	20000e24 	.word	0x20000e24
 80029a8:	80402011 	.word	0x80402011
 80029ac:	20000c24 	.word	0x20000c24
 80029b0:	20000f34 	.word	0x20000f34
			  } else {
				  if(rxBuffer[(rxBufferHead + i + 7)%ESPRXBUFFERSIZE] != '_') continue;
 80029b4:	4b5d      	ldr	r3, [pc, #372]	; (8002b2c <espCommunication+0x70c>)
 80029b6:	881b      	ldrh	r3, [r3, #0]
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	461a      	mov	r2, r3
 80029bc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80029c0:	4413      	add	r3, r2
 80029c2:	1dda      	adds	r2, r3, #7
 80029c4:	4b5a      	ldr	r3, [pc, #360]	; (8002b30 <espCommunication+0x710>)
 80029c6:	fb83 1302 	smull	r1, r3, r3, r2
 80029ca:	4413      	add	r3, r2
 80029cc:	1219      	asrs	r1, r3, #8
 80029ce:	17d3      	asrs	r3, r2, #31
 80029d0:	1ac9      	subs	r1, r1, r3
 80029d2:	460b      	mov	r3, r1
 80029d4:	025b      	lsls	r3, r3, #9
 80029d6:	1a5b      	subs	r3, r3, r1
 80029d8:	1ad1      	subs	r1, r2, r3
 80029da:	4b56      	ldr	r3, [pc, #344]	; (8002b34 <espCommunication+0x714>)
 80029dc:	5c5b      	ldrb	r3, [r3, r1]
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b5f      	cmp	r3, #95	; 0x5f
 80029e2:	f040 80af 	bne.w	8002b44 <espCommunication+0x724>
			  }
			  aSpeed = parseFloat(rxBuffer, ((rxBufferHead + i + 3)%ESPRXBUFFERSIZE));
 80029e6:	4b51      	ldr	r3, [pc, #324]	; (8002b2c <espCommunication+0x70c>)
 80029e8:	881b      	ldrh	r3, [r3, #0]
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	461a      	mov	r2, r3
 80029ee:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80029f2:	4413      	add	r3, r2
 80029f4:	1cda      	adds	r2, r3, #3
 80029f6:	4b4e      	ldr	r3, [pc, #312]	; (8002b30 <espCommunication+0x710>)
 80029f8:	fb83 1302 	smull	r1, r3, r3, r2
 80029fc:	4413      	add	r3, r2
 80029fe:	1219      	asrs	r1, r3, #8
 8002a00:	17d3      	asrs	r3, r2, #31
 8002a02:	1ac9      	subs	r1, r1, r3
 8002a04:	460b      	mov	r3, r1
 8002a06:	025b      	lsls	r3, r3, #9
 8002a08:	1a5b      	subs	r3, r3, r1
 8002a0a:	1ad1      	subs	r1, r2, r3
 8002a0c:	b28b      	uxth	r3, r1
 8002a0e:	4619      	mov	r1, r3
 8002a10:	4848      	ldr	r0, [pc, #288]	; (8002b34 <espCommunication+0x714>)
 8002a12:	f7fe fadd 	bl	8000fd0 <parseFloat>
 8002a16:	eef0 7a40 	vmov.f32	s15, s0
 8002a1a:	4b47      	ldr	r3, [pc, #284]	; (8002b38 <espCommunication+0x718>)
 8002a1c:	edc3 7a00 	vstr	s15, [r3]
		  }

		  debugVar = 12;
 8002a20:	4b46      	ldr	r3, [pc, #280]	; (8002b3c <espCommunication+0x71c>)
 8002a22:	220c      	movs	r2, #12
 8002a24:	601a      	str	r2, [r3, #0]
		  if((rxBuffer[(rxBufferHead + i)%ESPRXBUFFERSIZE] == 'E') &&
 8002a26:	4b41      	ldr	r3, [pc, #260]	; (8002b2c <espCommunication+0x70c>)
 8002a28:	881b      	ldrh	r3, [r3, #0]
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002a32:	441a      	add	r2, r3
 8002a34:	4b3e      	ldr	r3, [pc, #248]	; (8002b30 <espCommunication+0x710>)
 8002a36:	fb83 1302 	smull	r1, r3, r3, r2
 8002a3a:	4413      	add	r3, r2
 8002a3c:	1219      	asrs	r1, r3, #8
 8002a3e:	17d3      	asrs	r3, r2, #31
 8002a40:	1ac9      	subs	r1, r1, r3
 8002a42:	460b      	mov	r3, r1
 8002a44:	025b      	lsls	r3, r3, #9
 8002a46:	1a5b      	subs	r3, r3, r1
 8002a48:	1ad1      	subs	r1, r2, r3
 8002a4a:	4b3a      	ldr	r3, [pc, #232]	; (8002b34 <espCommunication+0x714>)
 8002a4c:	5c5b      	ldrb	r3, [r3, r1]
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2b45      	cmp	r3, #69	; 0x45
 8002a52:	d165      	bne.n	8002b20 <espCommunication+0x700>
		     (rxBuffer[(rxBufferHead + i + 1)%ESPRXBUFFERSIZE] == 'R') &&
 8002a54:	4b35      	ldr	r3, [pc, #212]	; (8002b2c <espCommunication+0x70c>)
 8002a56:	881b      	ldrh	r3, [r3, #0]
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002a60:	4413      	add	r3, r2
 8002a62:	1c5a      	adds	r2, r3, #1
 8002a64:	4b32      	ldr	r3, [pc, #200]	; (8002b30 <espCommunication+0x710>)
 8002a66:	fb83 1302 	smull	r1, r3, r3, r2
 8002a6a:	4413      	add	r3, r2
 8002a6c:	1219      	asrs	r1, r3, #8
 8002a6e:	17d3      	asrs	r3, r2, #31
 8002a70:	1ac9      	subs	r1, r1, r3
 8002a72:	460b      	mov	r3, r1
 8002a74:	025b      	lsls	r3, r3, #9
 8002a76:	1a5b      	subs	r3, r3, r1
 8002a78:	1ad1      	subs	r1, r2, r3
 8002a7a:	4b2e      	ldr	r3, [pc, #184]	; (8002b34 <espCommunication+0x714>)
 8002a7c:	5c5b      	ldrb	r3, [r3, r1]
 8002a7e:	b2db      	uxtb	r3, r3
		  if((rxBuffer[(rxBufferHead + i)%ESPRXBUFFERSIZE] == 'E') &&
 8002a80:	2b52      	cmp	r3, #82	; 0x52
 8002a82:	d14d      	bne.n	8002b20 <espCommunication+0x700>
			 (rxBuffer[(rxBufferHead + i + 2)%ESPRXBUFFERSIZE] == 'R') &&
 8002a84:	4b29      	ldr	r3, [pc, #164]	; (8002b2c <espCommunication+0x70c>)
 8002a86:	881b      	ldrh	r3, [r3, #0]
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002a90:	4413      	add	r3, r2
 8002a92:	1c9a      	adds	r2, r3, #2
 8002a94:	4b26      	ldr	r3, [pc, #152]	; (8002b30 <espCommunication+0x710>)
 8002a96:	fb83 1302 	smull	r1, r3, r3, r2
 8002a9a:	4413      	add	r3, r2
 8002a9c:	1219      	asrs	r1, r3, #8
 8002a9e:	17d3      	asrs	r3, r2, #31
 8002aa0:	1ac9      	subs	r1, r1, r3
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	025b      	lsls	r3, r3, #9
 8002aa6:	1a5b      	subs	r3, r3, r1
 8002aa8:	1ad1      	subs	r1, r2, r3
 8002aaa:	4b22      	ldr	r3, [pc, #136]	; (8002b34 <espCommunication+0x714>)
 8002aac:	5c5b      	ldrb	r3, [r3, r1]
 8002aae:	b2db      	uxtb	r3, r3
		     (rxBuffer[(rxBufferHead + i + 1)%ESPRXBUFFERSIZE] == 'R') &&
 8002ab0:	2b52      	cmp	r3, #82	; 0x52
 8002ab2:	d135      	bne.n	8002b20 <espCommunication+0x700>
			 (rxBuffer[(rxBufferHead + i + 3)%ESPRXBUFFERSIZE] == 'O') &&
 8002ab4:	4b1d      	ldr	r3, [pc, #116]	; (8002b2c <espCommunication+0x70c>)
 8002ab6:	881b      	ldrh	r3, [r3, #0]
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	461a      	mov	r2, r3
 8002abc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002ac0:	4413      	add	r3, r2
 8002ac2:	1cda      	adds	r2, r3, #3
 8002ac4:	4b1a      	ldr	r3, [pc, #104]	; (8002b30 <espCommunication+0x710>)
 8002ac6:	fb83 1302 	smull	r1, r3, r3, r2
 8002aca:	4413      	add	r3, r2
 8002acc:	1219      	asrs	r1, r3, #8
 8002ace:	17d3      	asrs	r3, r2, #31
 8002ad0:	1ac9      	subs	r1, r1, r3
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	025b      	lsls	r3, r3, #9
 8002ad6:	1a5b      	subs	r3, r3, r1
 8002ad8:	1ad1      	subs	r1, r2, r3
 8002ada:	4b16      	ldr	r3, [pc, #88]	; (8002b34 <espCommunication+0x714>)
 8002adc:	5c5b      	ldrb	r3, [r3, r1]
 8002ade:	b2db      	uxtb	r3, r3
			 (rxBuffer[(rxBufferHead + i + 2)%ESPRXBUFFERSIZE] == 'R') &&
 8002ae0:	2b4f      	cmp	r3, #79	; 0x4f
 8002ae2:	d11d      	bne.n	8002b20 <espCommunication+0x700>
			 (rxBuffer[(rxBufferHead + i + 4)%ESPRXBUFFERSIZE] == 'R')) {
 8002ae4:	4b11      	ldr	r3, [pc, #68]	; (8002b2c <espCommunication+0x70c>)
 8002ae6:	881b      	ldrh	r3, [r3, #0]
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	461a      	mov	r2, r3
 8002aec:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002af0:	4413      	add	r3, r2
 8002af2:	1d1a      	adds	r2, r3, #4
 8002af4:	4b0e      	ldr	r3, [pc, #56]	; (8002b30 <espCommunication+0x710>)
 8002af6:	fb83 1302 	smull	r1, r3, r3, r2
 8002afa:	4413      	add	r3, r2
 8002afc:	1219      	asrs	r1, r3, #8
 8002afe:	17d3      	asrs	r3, r2, #31
 8002b00:	1ac9      	subs	r1, r1, r3
 8002b02:	460b      	mov	r3, r1
 8002b04:	025b      	lsls	r3, r3, #9
 8002b06:	1a5b      	subs	r3, r3, r1
 8002b08:	1ad1      	subs	r1, r2, r3
 8002b0a:	4b0a      	ldr	r3, [pc, #40]	; (8002b34 <espCommunication+0x714>)
 8002b0c:	5c5b      	ldrb	r3, [r3, r1]
 8002b0e:	b2db      	uxtb	r3, r3
			 (rxBuffer[(rxBufferHead + i + 3)%ESPRXBUFFERSIZE] == 'O') &&
 8002b10:	2b52      	cmp	r3, #82	; 0x52
 8002b12:	d105      	bne.n	8002b20 <espCommunication+0x700>
			  debugVar = 121;
 8002b14:	4b09      	ldr	r3, [pc, #36]	; (8002b3c <espCommunication+0x71c>)
 8002b16:	2279      	movs	r2, #121	; 0x79
 8002b18:	601a      	str	r2, [r3, #0]
			  espRecon(&huart3);
 8002b1a:	4809      	ldr	r0, [pc, #36]	; (8002b40 <espCommunication+0x720>)
 8002b1c:	f7fe fb64 	bl	80011e8 <espRecon>
		  }
		  debugVar = 13;
 8002b20:	4b06      	ldr	r3, [pc, #24]	; (8002b3c <espCommunication+0x71c>)
 8002b22:	220d      	movs	r2, #13
 8002b24:	601a      	str	r2, [r3, #0]
 8002b26:	e00e      	b.n	8002b46 <espCommunication+0x726>
				  if(rxBuffer[(rxBufferHead + i + 7)%ESPRXBUFFERSIZE] != '_') continue;
 8002b28:	bf00      	nop
 8002b2a:	e00c      	b.n	8002b46 <espCommunication+0x726>
 8002b2c:	20000e24 	.word	0x20000e24
 8002b30:	80402011 	.word	0x80402011
 8002b34:	20000c24 	.word	0x20000c24
 8002b38:	20000f38 	.word	0x20000f38
 8002b3c:	20000f4c 	.word	0x20000f4c
 8002b40:	20000880 	.word	0x20000880
				  if(rxBuffer[(rxBufferHead + i + 7)%ESPRXBUFFERSIZE] != '_') continue;
 8002b44:	bf00      	nop
	  for(uint16_t i = 0; i < receivedBytes; i++) {
 8002b46:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8002b50:	4b68      	ldr	r3, [pc, #416]	; (8002cf4 <espCommunication+0x8d4>)
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	f4ff ade8 	bcc.w	8002730 <espCommunication+0x310>
	  }


	  debugVar = 15;
 8002b60:	4b65      	ldr	r3, [pc, #404]	; (8002cf8 <espCommunication+0x8d8>)
 8002b62:	220f      	movs	r2, #15
 8002b64:	601a      	str	r2, [r3, #0]
      // Update the buffer head index
      rxBufferHead = ((rxBufferHead + receivedBytes) % ESPRXBUFFERSIZE);
 8002b66:	4b65      	ldr	r3, [pc, #404]	; (8002cfc <espCommunication+0x8dc>)
 8002b68:	881b      	ldrh	r3, [r3, #0]
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	4b61      	ldr	r3, [pc, #388]	; (8002cf4 <espCommunication+0x8d4>)
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	441a      	add	r2, r3
 8002b74:	4b62      	ldr	r3, [pc, #392]	; (8002d00 <espCommunication+0x8e0>)
 8002b76:	fb83 1302 	smull	r1, r3, r3, r2
 8002b7a:	4413      	add	r3, r2
 8002b7c:	1219      	asrs	r1, r3, #8
 8002b7e:	17d3      	asrs	r3, r2, #31
 8002b80:	1ac9      	subs	r1, r1, r3
 8002b82:	460b      	mov	r3, r1
 8002b84:	025b      	lsls	r3, r3, #9
 8002b86:	1a5b      	subs	r3, r3, r1
 8002b88:	1ad1      	subs	r1, r2, r3
 8002b8a:	b28a      	uxth	r2, r1
 8002b8c:	4b5b      	ldr	r3, [pc, #364]	; (8002cfc <espCommunication+0x8dc>)
 8002b8e:	801a      	strh	r2, [r3, #0]

      if(xEventGroupGetBitsFromISR(timerFdsEventGroup) == 0x1) {
 8002b90:	4b5c      	ldr	r3, [pc, #368]	; (8002d04 <espCommunication+0x8e4>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f006 f979 	bl	8008e8c <xEventGroupGetBitsFromISR>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	f040 80a5 	bne.w	8002cec <espCommunication+0x8cc>
    	  debugVar = 20;
 8002ba2:	4b55      	ldr	r3, [pc, #340]	; (8002cf8 <espCommunication+0x8d8>)
 8002ba4:	2214      	movs	r2, #20
 8002ba6:	601a      	str	r2, [r3, #0]
    	    // Create the JSON content with variable values
    	    sprintf(txBuffer, "POST /robot_data HTTP/1.1\r\n"
 8002ba8:	4b57      	ldr	r3, [pc, #348]	; (8002d08 <espCommunication+0x8e8>)
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	4698      	mov	r8, r3
 8002bae:	4b57      	ldr	r3, [pc, #348]	; (8002d0c <espCommunication+0x8ec>)
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bb4:	4b56      	ldr	r3, [pc, #344]	; (8002d10 <espCommunication+0x8f0>)
 8002bb6:	699a      	ldr	r2, [r3, #24]
 8002bb8:	627a      	str	r2, [r7, #36]	; 0x24
    	                         "Host: 192.168.137.1\r\n"
    	                         "Content-Type: application/json\r\n"
//    	                         "Content-Length: %d\r\n\r\n"
    	                         "{\"avrBatVoltage\": \"%d\", \"EncoderR.rpm\": \"%d\", \"EncoderL.rpm\": \"%d\", \"SoftPwmR.pwmValue\": \"%d\", \"SoftPwmL.pwmValue\": \"%d\", \"joyX\": \"%d\", \"joyY\": \"%d\", \"tSpeed\": \"%f\", \"aSpeed\": \"%f\", \"rReqValue\": \"%d\", \"lReqValue\": \"%d\", \"accelRX\": \"%d\", \"accelRY\": \"%d\", \"accelRZ\": \"%d\", \"accelLX\": \"%d\", \"accelLY\": \"%d\", \"accelLZ\": \"%d\"}",
								 BatChargeState, EncoderR.rpm, EncoderL.rpm, SoftPwmR.pwmValue, SoftPwmL.pwmValue, joyX, joyY, tSpeed, aSpeed, SoftPwmR.reqValue, SoftPwmL.reqValue, accelValueR[0], accelValueR[1], accelValueR[2], accelValueL[0], accelValueL[1], accelValueL[2]);
 8002bba:	4b56      	ldr	r3, [pc, #344]	; (8002d14 <espCommunication+0x8f4>)
 8002bbc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    	    sprintf(txBuffer, "POST /robot_data HTTP/1.1\r\n"
 8002bc0:	623b      	str	r3, [r7, #32]
								 BatChargeState, EncoderR.rpm, EncoderL.rpm, SoftPwmR.pwmValue, SoftPwmL.pwmValue, joyX, joyY, tSpeed, aSpeed, SoftPwmR.reqValue, SoftPwmL.reqValue, accelValueR[0], accelValueR[1], accelValueR[2], accelValueL[0], accelValueL[1], accelValueL[2]);
 8002bc2:	4b55      	ldr	r3, [pc, #340]	; (8002d18 <espCommunication+0x8f8>)
 8002bc4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    	    sprintf(txBuffer, "POST /robot_data HTTP/1.1\r\n"
 8002bc8:	61fb      	str	r3, [r7, #28]
 8002bca:	4b54      	ldr	r3, [pc, #336]	; (8002d1c <espCommunication+0x8fc>)
 8002bcc:	f993 3000 	ldrsb.w	r3, [r3]
 8002bd0:	61bb      	str	r3, [r7, #24]
 8002bd2:	4b53      	ldr	r3, [pc, #332]	; (8002d20 <espCommunication+0x900>)
 8002bd4:	f993 3000 	ldrsb.w	r3, [r3]
 8002bd8:	617b      	str	r3, [r7, #20]
 8002bda:	4b52      	ldr	r3, [pc, #328]	; (8002d24 <espCommunication+0x904>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7fd fcc2 	bl	8000568 <__aeabi_f2d>
 8002be4:	4604      	mov	r4, r0
 8002be6:	460d      	mov	r5, r1
 8002be8:	4b4f      	ldr	r3, [pc, #316]	; (8002d28 <espCommunication+0x908>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7fd fcbb 	bl	8000568 <__aeabi_f2d>
								 BatChargeState, EncoderR.rpm, EncoderL.rpm, SoftPwmR.pwmValue, SoftPwmL.pwmValue, joyX, joyY, tSpeed, aSpeed, SoftPwmR.reqValue, SoftPwmL.reqValue, accelValueR[0], accelValueR[1], accelValueR[2], accelValueL[0], accelValueL[1], accelValueL[2]);
 8002bf2:	4b48      	ldr	r3, [pc, #288]	; (8002d14 <espCommunication+0x8f4>)
 8002bf4:	f9b3 3000 	ldrsh.w	r3, [r3]
    	    sprintf(txBuffer, "POST /robot_data HTTP/1.1\r\n"
 8002bf8:	613b      	str	r3, [r7, #16]
								 BatChargeState, EncoderR.rpm, EncoderL.rpm, SoftPwmR.pwmValue, SoftPwmL.pwmValue, joyX, joyY, tSpeed, aSpeed, SoftPwmR.reqValue, SoftPwmL.reqValue, accelValueR[0], accelValueR[1], accelValueR[2], accelValueL[0], accelValueL[1], accelValueL[2]);
 8002bfa:	4b47      	ldr	r3, [pc, #284]	; (8002d18 <espCommunication+0x8f8>)
 8002bfc:	f9b3 3000 	ldrsh.w	r3, [r3]
    	    sprintf(txBuffer, "POST /robot_data HTTP/1.1\r\n"
 8002c00:	60fb      	str	r3, [r7, #12]
								 BatChargeState, EncoderR.rpm, EncoderL.rpm, SoftPwmR.pwmValue, SoftPwmL.pwmValue, joyX, joyY, tSpeed, aSpeed, SoftPwmR.reqValue, SoftPwmL.reqValue, accelValueR[0], accelValueR[1], accelValueR[2], accelValueL[0], accelValueL[1], accelValueL[2]);
 8002c02:	4b4a      	ldr	r3, [pc, #296]	; (8002d2c <espCommunication+0x90c>)
 8002c04:	f9b3 3000 	ldrsh.w	r3, [r3]
    	    sprintf(txBuffer, "POST /robot_data HTTP/1.1\r\n"
 8002c08:	60bb      	str	r3, [r7, #8]
								 BatChargeState, EncoderR.rpm, EncoderL.rpm, SoftPwmR.pwmValue, SoftPwmL.pwmValue, joyX, joyY, tSpeed, aSpeed, SoftPwmR.reqValue, SoftPwmL.reqValue, accelValueR[0], accelValueR[1], accelValueR[2], accelValueL[0], accelValueL[1], accelValueL[2]);
 8002c0a:	4b48      	ldr	r3, [pc, #288]	; (8002d2c <espCommunication+0x90c>)
 8002c0c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    	    sprintf(txBuffer, "POST /robot_data HTTP/1.1\r\n"
 8002c10:	607b      	str	r3, [r7, #4]
								 BatChargeState, EncoderR.rpm, EncoderL.rpm, SoftPwmR.pwmValue, SoftPwmL.pwmValue, joyX, joyY, tSpeed, aSpeed, SoftPwmR.reqValue, SoftPwmL.reqValue, accelValueR[0], accelValueR[1], accelValueR[2], accelValueL[0], accelValueL[1], accelValueL[2]);
 8002c12:	4b46      	ldr	r3, [pc, #280]	; (8002d2c <espCommunication+0x90c>)
 8002c14:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    	    sprintf(txBuffer, "POST /robot_data HTTP/1.1\r\n"
 8002c18:	603b      	str	r3, [r7, #0]
								 BatChargeState, EncoderR.rpm, EncoderL.rpm, SoftPwmR.pwmValue, SoftPwmL.pwmValue, joyX, joyY, tSpeed, aSpeed, SoftPwmR.reqValue, SoftPwmL.reqValue, accelValueR[0], accelValueR[1], accelValueR[2], accelValueL[0], accelValueL[1], accelValueL[2]);
 8002c1a:	4b45      	ldr	r3, [pc, #276]	; (8002d30 <espCommunication+0x910>)
 8002c1c:	f9b3 3000 	ldrsh.w	r3, [r3]
    	    sprintf(txBuffer, "POST /robot_data HTTP/1.1\r\n"
 8002c20:	461e      	mov	r6, r3
								 BatChargeState, EncoderR.rpm, EncoderL.rpm, SoftPwmR.pwmValue, SoftPwmL.pwmValue, joyX, joyY, tSpeed, aSpeed, SoftPwmR.reqValue, SoftPwmL.reqValue, accelValueR[0], accelValueR[1], accelValueR[2], accelValueL[0], accelValueL[1], accelValueL[2]);
 8002c22:	4b43      	ldr	r3, [pc, #268]	; (8002d30 <espCommunication+0x910>)
 8002c24:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    	    sprintf(txBuffer, "POST /robot_data HTTP/1.1\r\n"
 8002c28:	461a      	mov	r2, r3
								 BatChargeState, EncoderR.rpm, EncoderL.rpm, SoftPwmR.pwmValue, SoftPwmL.pwmValue, joyX, joyY, tSpeed, aSpeed, SoftPwmR.reqValue, SoftPwmL.reqValue, accelValueR[0], accelValueR[1], accelValueR[2], accelValueL[0], accelValueL[1], accelValueL[2]);
 8002c2a:	4b41      	ldr	r3, [pc, #260]	; (8002d30 <espCommunication+0x910>)
 8002c2c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    	    sprintf(txBuffer, "POST /robot_data HTTP/1.1\r\n"
 8002c30:	9311      	str	r3, [sp, #68]	; 0x44
 8002c32:	9210      	str	r2, [sp, #64]	; 0x40
 8002c34:	960f      	str	r6, [sp, #60]	; 0x3c
 8002c36:	683e      	ldr	r6, [r7, #0]
 8002c38:	960e      	str	r6, [sp, #56]	; 0x38
 8002c3a:	687e      	ldr	r6, [r7, #4]
 8002c3c:	960d      	str	r6, [sp, #52]	; 0x34
 8002c3e:	68be      	ldr	r6, [r7, #8]
 8002c40:	960c      	str	r6, [sp, #48]	; 0x30
 8002c42:	68fe      	ldr	r6, [r7, #12]
 8002c44:	960b      	str	r6, [sp, #44]	; 0x2c
 8002c46:	693e      	ldr	r6, [r7, #16]
 8002c48:	960a      	str	r6, [sp, #40]	; 0x28
 8002c4a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8002c4e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8002c52:	6979      	ldr	r1, [r7, #20]
 8002c54:	9104      	str	r1, [sp, #16]
 8002c56:	69b9      	ldr	r1, [r7, #24]
 8002c58:	9103      	str	r1, [sp, #12]
 8002c5a:	69f9      	ldr	r1, [r7, #28]
 8002c5c:	9102      	str	r1, [sp, #8]
 8002c5e:	6a39      	ldr	r1, [r7, #32]
 8002c60:	9101      	str	r1, [sp, #4]
 8002c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c64:	9200      	str	r2, [sp, #0]
 8002c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c68:	4642      	mov	r2, r8
 8002c6a:	4932      	ldr	r1, [pc, #200]	; (8002d34 <espCommunication+0x914>)
 8002c6c:	4832      	ldr	r0, [pc, #200]	; (8002d38 <espCommunication+0x918>)
 8002c6e:	f009 fb6b 	bl	800c348 <siprintf>

    	    // Calculate the number of characters in the POST request
    	    int postRequestLength = strlen(txBuffer);
 8002c72:	4831      	ldr	r0, [pc, #196]	; (8002d38 <espCommunication+0x918>)
 8002c74:	f7fd fb0c 	bl	8000290 <strlen>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	653b      	str	r3, [r7, #80]	; 0x50
    	    debugVar = 25;
 8002c7c:	4b1e      	ldr	r3, [pc, #120]	; (8002cf8 <espCommunication+0x8d8>)
 8002c7e:	2219      	movs	r2, #25
 8002c80:	601a      	str	r2, [r3, #0]
    	  sprintf(pDataBuf, "AT+CIPSEND=%d\r\n", postRequestLength);
 8002c82:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c86:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002c88:	492c      	ldr	r1, [pc, #176]	; (8002d3c <espCommunication+0x91c>)
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f009 fb5c 	bl	800c348 <siprintf>
    	  while(atSend_USART3_DMA(pDataBuf, strlen(pDataBuf)) != 0) {
 8002c90:	e002      	b.n	8002c98 <espCommunication+0x878>
    	    vTaskDelay( pdMS_TO_TICKS( 10 ) );
 8002c92:	200a      	movs	r0, #10
 8002c94:	f007 f8ca 	bl	8009e2c <vTaskDelay>
    	  while(atSend_USART3_DMA(pDataBuf, strlen(pDataBuf)) != 0) {
 8002c98:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7fd faf7 	bl	8000290 <strlen>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002caa:	4611      	mov	r1, r2
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7fe f933 	bl	8000f18 <atSend_USART3_DMA>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1ec      	bne.n	8002c92 <espCommunication+0x872>
    	  }
    	  debugVar = 30;
 8002cb8:	4b0f      	ldr	r3, [pc, #60]	; (8002cf8 <espCommunication+0x8d8>)
 8002cba:	221e      	movs	r2, #30
 8002cbc:	601a      	str	r2, [r3, #0]
    	  while(atSend_USART3_DMA(txBuffer, postRequestLength) != 0) {
 8002cbe:	e002      	b.n	8002cc6 <espCommunication+0x8a6>
    	    vTaskDelay( pdMS_TO_TICKS( 10 ) );
 8002cc0:	200a      	movs	r0, #10
 8002cc2:	f007 f8b3 	bl	8009e2c <vTaskDelay>
    	  while(atSend_USART3_DMA(txBuffer, postRequestLength) != 0) {
 8002cc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	4619      	mov	r1, r3
 8002ccc:	481a      	ldr	r0, [pc, #104]	; (8002d38 <espCommunication+0x918>)
 8002cce:	f7fe f923 	bl	8000f18 <atSend_USART3_DMA>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1f3      	bne.n	8002cc0 <espCommunication+0x8a0>
    	  }
    	  debugVar = 35;
 8002cd8:	4b07      	ldr	r3, [pc, #28]	; (8002cf8 <espCommunication+0x8d8>)
 8002cda:	2223      	movs	r2, #35	; 0x23
 8002cdc:	601a      	str	r2, [r3, #0]
    	  xEventGroupClearBits(timerFdsEventGroup, 0xFFFFFF);
 8002cde:	4b09      	ldr	r3, [pc, #36]	; (8002d04 <espCommunication+0x8e4>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f006 f898 	bl	8008e1c <xEventGroupClearBits>
      }

	  vTaskDelay( pdMS_TO_TICKS( 25 ) );
 8002cec:	2019      	movs	r0, #25
 8002cee:	f007 f89d 	bl	8009e2c <vTaskDelay>
  {
 8002cf2:	e481      	b.n	80025f8 <espCommunication+0x1d8>
 8002cf4:	20000e26 	.word	0x20000e26
 8002cf8:	20000f4c 	.word	0x20000f4c
 8002cfc:	20000e24 	.word	0x20000e24
 8002d00:	80402011 	.word	0x80402011
 8002d04:	20000f2c 	.word	0x20000f2c
 8002d08:	200009ca 	.word	0x200009ca
 8002d0c:	200009d4 	.word	0x200009d4
 8002d10:	200009f0 	.word	0x200009f0
 8002d14:	20000a0c 	.word	0x20000a0c
 8002d18:	20000a14 	.word	0x20000a14
 8002d1c:	20000f30 	.word	0x20000f30
 8002d20:	20000f31 	.word	0x20000f31
 8002d24:	20000f34 	.word	0x20000f34
 8002d28:	20000f38 	.word	0x20000f38
 8002d2c:	20000f3c 	.word	0x20000f3c
 8002d30:	20000f44 	.word	0x20000f44
 8002d34:	0800f75c 	.word	0x0800f75c
 8002d38:	20000a24 	.word	0x20000a24
 8002d3c:	0800f74c 	.word	0x0800f74c

08002d40 <encoderR>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_encoderR */
void encoderR(void const * argument)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN encoderR */
  /* Infinite loop */
  for(;;)
  {
	  vTaskDelay(pdMS_TO_TICKS(ENCDELAY));
 8002d48:	2001      	movs	r0, #1
 8002d4a:	f007 f86f 	bl	8009e2c <vTaskDelay>

	  EncoderR.timeOld = EncoderR.timeNew;
 8002d4e:	4b98      	ldr	r3, [pc, #608]	; (8002fb0 <encoderR+0x270>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a97      	ldr	r2, [pc, #604]	; (8002fb0 <encoderR+0x270>)
 8002d54:	6053      	str	r3, [r2, #4]
	  EncoderR.timeNew = TIM17->CNT;
 8002d56:	4b97      	ldr	r3, [pc, #604]	; (8002fb4 <encoderR+0x274>)
 8002d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	4b94      	ldr	r3, [pc, #592]	; (8002fb0 <encoderR+0x270>)
 8002d5e:	601a      	str	r2, [r3, #0]
	  EncoderR.positionOld = EncoderR.positionNew;
 8002d60:	4b93      	ldr	r3, [pc, #588]	; (8002fb0 <encoderR+0x270>)
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	4a92      	ldr	r2, [pc, #584]	; (8002fb0 <encoderR+0x270>)
 8002d66:	6113      	str	r3, [r2, #16]
	  EncoderR.positionNew = TIM1->CNT;
 8002d68:	4b93      	ldr	r3, [pc, #588]	; (8002fb8 <encoderR+0x278>)
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	4b90      	ldr	r3, [pc, #576]	; (8002fb0 <encoderR+0x270>)
 8002d70:	60da      	str	r2, [r3, #12]

	  if(EncoderR.timeNew - EncoderR.timeOld == 0) {
 8002d72:	4b8f      	ldr	r3, [pc, #572]	; (8002fb0 <encoderR+0x270>)
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	4b8e      	ldr	r3, [pc, #568]	; (8002fb0 <encoderR+0x270>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	f000 8116 	beq.w	8002fac <encoderR+0x26c>
		  continue;
	  }

	  switch (EncoderR.posCntUpdate + EncoderR.timeUpdate) {
 8002d80:	4b8b      	ldr	r3, [pc, #556]	; (8002fb0 <encoderR+0x270>)
 8002d82:	7d1b      	ldrb	r3, [r3, #20]
 8002d84:	461a      	mov	r2, r3
 8002d86:	4b8a      	ldr	r3, [pc, #552]	; (8002fb0 <encoderR+0x270>)
 8002d88:	7a1b      	ldrb	r3, [r3, #8]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	2b03      	cmp	r3, #3
 8002d8e:	f200 810a 	bhi.w	8002fa6 <encoderR+0x266>
 8002d92:	a201      	add	r2, pc, #4	; (adr r2, 8002d98 <encoderR+0x58>)
 8002d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d98:	08002da9 	.word	0x08002da9
 8002d9c:	08002ded 	.word	0x08002ded
 8002da0:	08002e99 	.word	0x08002e99
 8002da4:	08002ee9 	.word	0x08002ee9
		case 0:
			EncoderR.rpm = -((float)(((float)(EncoderR.positionNew - EncoderR.positionOld)) / ((float)(EncoderR.timeNew - EncoderR.timeOld)))*kToRpm); //(32*1000*60)/256;
 8002da8:	4b81      	ldr	r3, [pc, #516]	; (8002fb0 <encoderR+0x270>)
 8002daa:	68da      	ldr	r2, [r3, #12]
 8002dac:	4b80      	ldr	r3, [pc, #512]	; (8002fb0 <encoderR+0x270>)
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	ee07 3a90 	vmov	s15, r3
 8002db6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002dba:	4b7d      	ldr	r3, [pc, #500]	; (8002fb0 <encoderR+0x270>)
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	4b7c      	ldr	r3, [pc, #496]	; (8002fb0 <encoderR+0x270>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	ee07 3a90 	vmov	s15, r3
 8002dc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dcc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002dd0:	4b7a      	ldr	r3, [pc, #488]	; (8002fbc <encoderR+0x27c>)
 8002dd2:	edd3 7a00 	vldr	s15, [r3]
 8002dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dda:	eef1 7a67 	vneg.f32	s15, s15
 8002dde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002de2:	ee17 2a90 	vmov	r2, s15
 8002de6:	4b72      	ldr	r3, [pc, #456]	; (8002fb0 <encoderR+0x270>)
 8002de8:	619a      	str	r2, [r3, #24]
			break;
 8002dea:	e0dd      	b.n	8002fa8 <encoderR+0x268>
		case POSUPDATED:
			if((EncoderR.positionOld >= 0) && (EncoderR.positionOld <= 32768) ) {
 8002dec:	4b70      	ldr	r3, [pc, #448]	; (8002fb0 <encoderR+0x270>)
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	db29      	blt.n	8002e48 <encoderR+0x108>
 8002df4:	4b6e      	ldr	r3, [pc, #440]	; (8002fb0 <encoderR+0x270>)
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dfc:	dc24      	bgt.n	8002e48 <encoderR+0x108>
			  EncoderR.rpm = -((float)(((float)(EncoderR.positionNew - 65535 - EncoderR.positionOld)) / ((float)(EncoderR.timeNew - EncoderR.timeOld)))*kToRpm);
 8002dfe:	4b6c      	ldr	r3, [pc, #432]	; (8002fb0 <encoderR+0x270>)
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8002e06:	3bff      	subs	r3, #255	; 0xff
 8002e08:	4a69      	ldr	r2, [pc, #420]	; (8002fb0 <encoderR+0x270>)
 8002e0a:	6912      	ldr	r2, [r2, #16]
 8002e0c:	1a9b      	subs	r3, r3, r2
 8002e0e:	ee07 3a90 	vmov	s15, r3
 8002e12:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002e16:	4b66      	ldr	r3, [pc, #408]	; (8002fb0 <encoderR+0x270>)
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	4b65      	ldr	r3, [pc, #404]	; (8002fb0 <encoderR+0x270>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	ee07 3a90 	vmov	s15, r3
 8002e24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e2c:	4b63      	ldr	r3, [pc, #396]	; (8002fbc <encoderR+0x27c>)
 8002e2e:	edd3 7a00 	vldr	s15, [r3]
 8002e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e36:	eef1 7a67 	vneg.f32	s15, s15
 8002e3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e3e:	ee17 2a90 	vmov	r2, s15
 8002e42:	4b5b      	ldr	r3, [pc, #364]	; (8002fb0 <encoderR+0x270>)
 8002e44:	619a      	str	r2, [r3, #24]
 8002e46:	e023      	b.n	8002e90 <encoderR+0x150>
			} else {
			  EncoderR.rpm = -((float)(((float)(EncoderR.positionNew + (65535 - EncoderR.positionOld))) / ((float)(EncoderR.timeNew - EncoderR.timeOld)))*kToRpm);
 8002e48:	4b59      	ldr	r3, [pc, #356]	; (8002fb0 <encoderR+0x270>)
 8002e4a:	68da      	ldr	r2, [r3, #12]
 8002e4c:	4b58      	ldr	r3, [pc, #352]	; (8002fb0 <encoderR+0x270>)
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8002e54:	33ff      	adds	r3, #255	; 0xff
 8002e56:	4413      	add	r3, r2
 8002e58:	ee07 3a90 	vmov	s15, r3
 8002e5c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002e60:	4b53      	ldr	r3, [pc, #332]	; (8002fb0 <encoderR+0x270>)
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	4b52      	ldr	r3, [pc, #328]	; (8002fb0 <encoderR+0x270>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	ee07 3a90 	vmov	s15, r3
 8002e6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e76:	4b51      	ldr	r3, [pc, #324]	; (8002fbc <encoderR+0x27c>)
 8002e78:	edd3 7a00 	vldr	s15, [r3]
 8002e7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e80:	eef1 7a67 	vneg.f32	s15, s15
 8002e84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e88:	ee17 2a90 	vmov	r2, s15
 8002e8c:	4b48      	ldr	r3, [pc, #288]	; (8002fb0 <encoderR+0x270>)
 8002e8e:	619a      	str	r2, [r3, #24]
			}
			EncoderR.posCntUpdate = 0;
 8002e90:	4b47      	ldr	r3, [pc, #284]	; (8002fb0 <encoderR+0x270>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	751a      	strb	r2, [r3, #20]
			break;
 8002e96:	e087      	b.n	8002fa8 <encoderR+0x268>
		case TIMEUPDATED:
			EncoderR.rpm = -((float)(((float)(EncoderR.positionNew - EncoderR.positionOld)) / ((float)(EncoderR.timeNew + 65535 - EncoderR.timeOld)))*kToRpm);
 8002e98:	4b45      	ldr	r3, [pc, #276]	; (8002fb0 <encoderR+0x270>)
 8002e9a:	68da      	ldr	r2, [r3, #12]
 8002e9c:	4b44      	ldr	r3, [pc, #272]	; (8002fb0 <encoderR+0x270>)
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	ee07 3a90 	vmov	s15, r3
 8002ea6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002eaa:	4b41      	ldr	r3, [pc, #260]	; (8002fb0 <encoderR+0x270>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8002eb2:	33ff      	adds	r3, #255	; 0xff
 8002eb4:	4a3e      	ldr	r2, [pc, #248]	; (8002fb0 <encoderR+0x270>)
 8002eb6:	6852      	ldr	r2, [r2, #4]
 8002eb8:	1a9b      	subs	r3, r3, r2
 8002eba:	ee07 3a90 	vmov	s15, r3
 8002ebe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ec2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ec6:	4b3d      	ldr	r3, [pc, #244]	; (8002fbc <encoderR+0x27c>)
 8002ec8:	edd3 7a00 	vldr	s15, [r3]
 8002ecc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ed0:	eef1 7a67 	vneg.f32	s15, s15
 8002ed4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ed8:	ee17 2a90 	vmov	r2, s15
 8002edc:	4b34      	ldr	r3, [pc, #208]	; (8002fb0 <encoderR+0x270>)
 8002ede:	619a      	str	r2, [r3, #24]
			EncoderR.timeUpdate = 0;
 8002ee0:	4b33      	ldr	r3, [pc, #204]	; (8002fb0 <encoderR+0x270>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	721a      	strb	r2, [r3, #8]
			break;
 8002ee6:	e05f      	b.n	8002fa8 <encoderR+0x268>
		case (POSUPDATED + TIMEUPDATED):
			if((EncoderR.positionOld >= 0) && (EncoderR.positionOld <= 32768) ) {
 8002ee8:	4b31      	ldr	r3, [pc, #196]	; (8002fb0 <encoderR+0x270>)
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	db2c      	blt.n	8002f4a <encoderR+0x20a>
 8002ef0:	4b2f      	ldr	r3, [pc, #188]	; (8002fb0 <encoderR+0x270>)
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ef8:	dc27      	bgt.n	8002f4a <encoderR+0x20a>
			  EncoderR.rpm = -((float)(((float)(EncoderR.positionNew - 65535 - EncoderR.positionOld)) / ((float)(EncoderR.timeNew + 65535 - EncoderR.timeOld)))*kToRpm);
 8002efa:	4b2d      	ldr	r3, [pc, #180]	; (8002fb0 <encoderR+0x270>)
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8002f02:	3bff      	subs	r3, #255	; 0xff
 8002f04:	4a2a      	ldr	r2, [pc, #168]	; (8002fb0 <encoderR+0x270>)
 8002f06:	6912      	ldr	r2, [r2, #16]
 8002f08:	1a9b      	subs	r3, r3, r2
 8002f0a:	ee07 3a90 	vmov	s15, r3
 8002f0e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002f12:	4b27      	ldr	r3, [pc, #156]	; (8002fb0 <encoderR+0x270>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8002f1a:	33ff      	adds	r3, #255	; 0xff
 8002f1c:	4a24      	ldr	r2, [pc, #144]	; (8002fb0 <encoderR+0x270>)
 8002f1e:	6852      	ldr	r2, [r2, #4]
 8002f20:	1a9b      	subs	r3, r3, r2
 8002f22:	ee07 3a90 	vmov	s15, r3
 8002f26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f2e:	4b23      	ldr	r3, [pc, #140]	; (8002fbc <encoderR+0x27c>)
 8002f30:	edd3 7a00 	vldr	s15, [r3]
 8002f34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f38:	eef1 7a67 	vneg.f32	s15, s15
 8002f3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f40:	ee17 2a90 	vmov	r2, s15
 8002f44:	4b1a      	ldr	r3, [pc, #104]	; (8002fb0 <encoderR+0x270>)
 8002f46:	619a      	str	r2, [r3, #24]
 8002f48:	e026      	b.n	8002f98 <encoderR+0x258>
			} else {
			  EncoderR.rpm = -((float)(((float)(EncoderR.positionNew + (65535 - EncoderR.positionOld))) / ((float)(EncoderR.timeNew + 65535 - EncoderR.timeOld)))*kToRpm);
 8002f4a:	4b19      	ldr	r3, [pc, #100]	; (8002fb0 <encoderR+0x270>)
 8002f4c:	68da      	ldr	r2, [r3, #12]
 8002f4e:	4b18      	ldr	r3, [pc, #96]	; (8002fb0 <encoderR+0x270>)
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8002f56:	33ff      	adds	r3, #255	; 0xff
 8002f58:	4413      	add	r3, r2
 8002f5a:	ee07 3a90 	vmov	s15, r3
 8002f5e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002f62:	4b13      	ldr	r3, [pc, #76]	; (8002fb0 <encoderR+0x270>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8002f6a:	33ff      	adds	r3, #255	; 0xff
 8002f6c:	4a10      	ldr	r2, [pc, #64]	; (8002fb0 <encoderR+0x270>)
 8002f6e:	6852      	ldr	r2, [r2, #4]
 8002f70:	1a9b      	subs	r3, r3, r2
 8002f72:	ee07 3a90 	vmov	s15, r3
 8002f76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f7e:	4b0f      	ldr	r3, [pc, #60]	; (8002fbc <encoderR+0x27c>)
 8002f80:	edd3 7a00 	vldr	s15, [r3]
 8002f84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f88:	eef1 7a67 	vneg.f32	s15, s15
 8002f8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f90:	ee17 2a90 	vmov	r2, s15
 8002f94:	4b06      	ldr	r3, [pc, #24]	; (8002fb0 <encoderR+0x270>)
 8002f96:	619a      	str	r2, [r3, #24]
			}
			EncoderR.posCntUpdate = 0;
 8002f98:	4b05      	ldr	r3, [pc, #20]	; (8002fb0 <encoderR+0x270>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	751a      	strb	r2, [r3, #20]
			EncoderR.timeUpdate = 0;
 8002f9e:	4b04      	ldr	r3, [pc, #16]	; (8002fb0 <encoderR+0x270>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	721a      	strb	r2, [r3, #8]
			break;
 8002fa4:	e000      	b.n	8002fa8 <encoderR+0x268>
		default:
			break;
 8002fa6:	bf00      	nop
	}
	  __asm__ volatile("NOP");
 8002fa8:	bf00      	nop
 8002faa:	e6cd      	b.n	8002d48 <encoderR+0x8>
		  continue;
 8002fac:	bf00      	nop
	  vTaskDelay(pdMS_TO_TICKS(ENCDELAY));
 8002fae:	e6cb      	b.n	8002d48 <encoderR+0x8>
 8002fb0:	200009d4 	.word	0x200009d4
 8002fb4:	40014800 	.word	0x40014800
 8002fb8:	40012c00 	.word	0x40012c00
 8002fbc:	20000a1c 	.word	0x20000a1c

08002fc0 <encoderL>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_encoderL */
void encoderL(void const * argument)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN encoderL */
  /* Infinite loop */
  for(;;)
  {
	  vTaskDelay(pdMS_TO_TICKS(ENCDELAY));
 8002fc8:	2001      	movs	r0, #1
 8002fca:	f006 ff2f 	bl	8009e2c <vTaskDelay>

	  if(TIM2->CNT > TIM2->ARR) {
 8002fce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002fd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d907      	bls.n	8002fee <encoderL+0x2e>
		  TIM2->EGR |= TIM_EGR_UG;
 8002fde:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002fe2:	695b      	ldr	r3, [r3, #20]
 8002fe4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002fe8:	f043 0301 	orr.w	r3, r3, #1
 8002fec:	6153      	str	r3, [r2, #20]
	  }

	  EncoderL.timeOld = EncoderL.timeNew;
 8002fee:	4b93      	ldr	r3, [pc, #588]	; (800323c <encoderL+0x27c>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a92      	ldr	r2, [pc, #584]	; (800323c <encoderL+0x27c>)
 8002ff4:	6053      	str	r3, [r2, #4]
	  EncoderL.timeNew = TIM17->CNT;
 8002ff6:	4b92      	ldr	r3, [pc, #584]	; (8003240 <encoderL+0x280>)
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	4b8f      	ldr	r3, [pc, #572]	; (800323c <encoderL+0x27c>)
 8002ffe:	601a      	str	r2, [r3, #0]
	  EncoderL.positionOld = EncoderL.positionNew;
 8003000:	4b8e      	ldr	r3, [pc, #568]	; (800323c <encoderL+0x27c>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	4a8d      	ldr	r2, [pc, #564]	; (800323c <encoderL+0x27c>)
 8003006:	6113      	str	r3, [r2, #16]
	  EncoderL.positionNew = TIM2->CNT;
 8003008:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800300c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300e:	461a      	mov	r2, r3
 8003010:	4b8a      	ldr	r3, [pc, #552]	; (800323c <encoderL+0x27c>)
 8003012:	60da      	str	r2, [r3, #12]

	  if(EncoderL.timeNew - EncoderL.timeOld == 0) {
 8003014:	4b89      	ldr	r3, [pc, #548]	; (800323c <encoderL+0x27c>)
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	4b88      	ldr	r3, [pc, #544]	; (800323c <encoderL+0x27c>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	429a      	cmp	r2, r3
 800301e:	f000 810b 	beq.w	8003238 <encoderL+0x278>
		  continue;
	  }

	  switch (EncoderL.posCntUpdate + EncoderL.timeUpdate) {
 8003022:	4b86      	ldr	r3, [pc, #536]	; (800323c <encoderL+0x27c>)
 8003024:	7d1b      	ldrb	r3, [r3, #20]
 8003026:	461a      	mov	r2, r3
 8003028:	4b84      	ldr	r3, [pc, #528]	; (800323c <encoderL+0x27c>)
 800302a:	7a1b      	ldrb	r3, [r3, #8]
 800302c:	4413      	add	r3, r2
 800302e:	2b03      	cmp	r3, #3
 8003030:	f200 80ff 	bhi.w	8003232 <encoderL+0x272>
 8003034:	a201      	add	r2, pc, #4	; (adr r2, 800303c <encoderL+0x7c>)
 8003036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800303a:	bf00      	nop
 800303c:	0800304d 	.word	0x0800304d
 8003040:	0800308d 	.word	0x0800308d
 8003044:	08003131 	.word	0x08003131
 8003048:	0800317d 	.word	0x0800317d
		case 0:
			EncoderL.rpm = ((float)(((float)(EncoderL.positionNew - EncoderL.positionOld)) / ((float)(EncoderL.timeNew - EncoderL.timeOld)))*kToRpm); //(32*1000*60)/256;
 800304c:	4b7b      	ldr	r3, [pc, #492]	; (800323c <encoderL+0x27c>)
 800304e:	68da      	ldr	r2, [r3, #12]
 8003050:	4b7a      	ldr	r3, [pc, #488]	; (800323c <encoderL+0x27c>)
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	ee07 3a90 	vmov	s15, r3
 800305a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800305e:	4b77      	ldr	r3, [pc, #476]	; (800323c <encoderL+0x27c>)
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	4b76      	ldr	r3, [pc, #472]	; (800323c <encoderL+0x27c>)
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	ee07 3a90 	vmov	s15, r3
 800306c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003070:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003074:	4b73      	ldr	r3, [pc, #460]	; (8003244 <encoderL+0x284>)
 8003076:	edd3 7a00 	vldr	s15, [r3]
 800307a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800307e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003082:	ee17 2a90 	vmov	r2, s15
 8003086:	4b6d      	ldr	r3, [pc, #436]	; (800323c <encoderL+0x27c>)
 8003088:	619a      	str	r2, [r3, #24]
			break;
 800308a:	e0d3      	b.n	8003234 <encoderL+0x274>
		case POSUPDATED:
			if((EncoderL.positionOld >= 0) && (EncoderL.positionOld <= 32768) ) {
 800308c:	4b6b      	ldr	r3, [pc, #428]	; (800323c <encoderL+0x27c>)
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	2b00      	cmp	r3, #0
 8003092:	db27      	blt.n	80030e4 <encoderL+0x124>
 8003094:	4b69      	ldr	r3, [pc, #420]	; (800323c <encoderL+0x27c>)
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800309c:	dc22      	bgt.n	80030e4 <encoderL+0x124>
				EncoderL.rpm = ((float)(((float)(EncoderL.positionNew - 65535 - EncoderL.positionOld)) / ((float)(EncoderL.timeNew - EncoderL.timeOld)))*kToRpm);
 800309e:	4b67      	ldr	r3, [pc, #412]	; (800323c <encoderL+0x27c>)
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 80030a6:	3bff      	subs	r3, #255	; 0xff
 80030a8:	4a64      	ldr	r2, [pc, #400]	; (800323c <encoderL+0x27c>)
 80030aa:	6912      	ldr	r2, [r2, #16]
 80030ac:	1a9b      	subs	r3, r3, r2
 80030ae:	ee07 3a90 	vmov	s15, r3
 80030b2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80030b6:	4b61      	ldr	r3, [pc, #388]	; (800323c <encoderL+0x27c>)
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	4b60      	ldr	r3, [pc, #384]	; (800323c <encoderL+0x27c>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	ee07 3a90 	vmov	s15, r3
 80030c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030cc:	4b5d      	ldr	r3, [pc, #372]	; (8003244 <encoderL+0x284>)
 80030ce:	edd3 7a00 	vldr	s15, [r3]
 80030d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030da:	ee17 2a90 	vmov	r2, s15
 80030de:	4b57      	ldr	r3, [pc, #348]	; (800323c <encoderL+0x27c>)
 80030e0:	619a      	str	r2, [r3, #24]
 80030e2:	e021      	b.n	8003128 <encoderL+0x168>
			} else {
				EncoderL.rpm = ((float)(((float)(EncoderL.positionNew + (65535 - EncoderL.positionOld))) / ((float)(EncoderL.timeNew - EncoderL.timeOld)))*kToRpm);
 80030e4:	4b55      	ldr	r3, [pc, #340]	; (800323c <encoderL+0x27c>)
 80030e6:	68da      	ldr	r2, [r3, #12]
 80030e8:	4b54      	ldr	r3, [pc, #336]	; (800323c <encoderL+0x27c>)
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80030f0:	33ff      	adds	r3, #255	; 0xff
 80030f2:	4413      	add	r3, r2
 80030f4:	ee07 3a90 	vmov	s15, r3
 80030f8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80030fc:	4b4f      	ldr	r3, [pc, #316]	; (800323c <encoderL+0x27c>)
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	4b4e      	ldr	r3, [pc, #312]	; (800323c <encoderL+0x27c>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	ee07 3a90 	vmov	s15, r3
 800310a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800310e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003112:	4b4c      	ldr	r3, [pc, #304]	; (8003244 <encoderL+0x284>)
 8003114:	edd3 7a00 	vldr	s15, [r3]
 8003118:	ee67 7a27 	vmul.f32	s15, s14, s15
 800311c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003120:	ee17 2a90 	vmov	r2, s15
 8003124:	4b45      	ldr	r3, [pc, #276]	; (800323c <encoderL+0x27c>)
 8003126:	619a      	str	r2, [r3, #24]
			}
			EncoderL.posCntUpdate = 0;
 8003128:	4b44      	ldr	r3, [pc, #272]	; (800323c <encoderL+0x27c>)
 800312a:	2200      	movs	r2, #0
 800312c:	751a      	strb	r2, [r3, #20]
			break;
 800312e:	e081      	b.n	8003234 <encoderL+0x274>
		case TIMEUPDATED:
			EncoderL.rpm = ((float)(((float)(EncoderL.positionNew - EncoderL.positionOld)) / ((float)(EncoderL.timeNew + 65535 - EncoderL.timeOld)))*kToRpm);
 8003130:	4b42      	ldr	r3, [pc, #264]	; (800323c <encoderL+0x27c>)
 8003132:	68da      	ldr	r2, [r3, #12]
 8003134:	4b41      	ldr	r3, [pc, #260]	; (800323c <encoderL+0x27c>)
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	ee07 3a90 	vmov	s15, r3
 800313e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003142:	4b3e      	ldr	r3, [pc, #248]	; (800323c <encoderL+0x27c>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800314a:	33ff      	adds	r3, #255	; 0xff
 800314c:	4a3b      	ldr	r2, [pc, #236]	; (800323c <encoderL+0x27c>)
 800314e:	6852      	ldr	r2, [r2, #4]
 8003150:	1a9b      	subs	r3, r3, r2
 8003152:	ee07 3a90 	vmov	s15, r3
 8003156:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800315a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800315e:	4b39      	ldr	r3, [pc, #228]	; (8003244 <encoderL+0x284>)
 8003160:	edd3 7a00 	vldr	s15, [r3]
 8003164:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003168:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800316c:	ee17 2a90 	vmov	r2, s15
 8003170:	4b32      	ldr	r3, [pc, #200]	; (800323c <encoderL+0x27c>)
 8003172:	619a      	str	r2, [r3, #24]
			EncoderL.timeUpdate = 0;
 8003174:	4b31      	ldr	r3, [pc, #196]	; (800323c <encoderL+0x27c>)
 8003176:	2200      	movs	r2, #0
 8003178:	721a      	strb	r2, [r3, #8]
			break;
 800317a:	e05b      	b.n	8003234 <encoderL+0x274>
		case (POSUPDATED + TIMEUPDATED):
			if((EncoderL.positionOld >= 0) && (EncoderL.positionOld <= 32768) ) {
 800317c:	4b2f      	ldr	r3, [pc, #188]	; (800323c <encoderL+0x27c>)
 800317e:	691b      	ldr	r3, [r3, #16]
 8003180:	2b00      	cmp	r3, #0
 8003182:	db2a      	blt.n	80031da <encoderL+0x21a>
 8003184:	4b2d      	ldr	r3, [pc, #180]	; (800323c <encoderL+0x27c>)
 8003186:	691b      	ldr	r3, [r3, #16]
 8003188:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800318c:	dc25      	bgt.n	80031da <encoderL+0x21a>
				EncoderL.rpm = ((float)(((float)(EncoderL.positionNew - 65535 - EncoderL.positionOld)) / ((float)(EncoderL.timeNew + 65535 - EncoderL.timeOld)))*kToRpm);
 800318e:	4b2b      	ldr	r3, [pc, #172]	; (800323c <encoderL+0x27c>)
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8003196:	3bff      	subs	r3, #255	; 0xff
 8003198:	4a28      	ldr	r2, [pc, #160]	; (800323c <encoderL+0x27c>)
 800319a:	6912      	ldr	r2, [r2, #16]
 800319c:	1a9b      	subs	r3, r3, r2
 800319e:	ee07 3a90 	vmov	s15, r3
 80031a2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80031a6:	4b25      	ldr	r3, [pc, #148]	; (800323c <encoderL+0x27c>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80031ae:	33ff      	adds	r3, #255	; 0xff
 80031b0:	4a22      	ldr	r2, [pc, #136]	; (800323c <encoderL+0x27c>)
 80031b2:	6852      	ldr	r2, [r2, #4]
 80031b4:	1a9b      	subs	r3, r3, r2
 80031b6:	ee07 3a90 	vmov	s15, r3
 80031ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031c2:	4b20      	ldr	r3, [pc, #128]	; (8003244 <encoderL+0x284>)
 80031c4:	edd3 7a00 	vldr	s15, [r3]
 80031c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031d0:	ee17 2a90 	vmov	r2, s15
 80031d4:	4b19      	ldr	r3, [pc, #100]	; (800323c <encoderL+0x27c>)
 80031d6:	619a      	str	r2, [r3, #24]
 80031d8:	e024      	b.n	8003224 <encoderL+0x264>
			} else {
				EncoderL.rpm = ((float)(((float)(EncoderL.positionNew + (65535 - EncoderL.positionOld))) / ((float)(EncoderL.timeNew + 65535 - EncoderL.timeOld)))*kToRpm);
 80031da:	4b18      	ldr	r3, [pc, #96]	; (800323c <encoderL+0x27c>)
 80031dc:	68da      	ldr	r2, [r3, #12]
 80031de:	4b17      	ldr	r3, [pc, #92]	; (800323c <encoderL+0x27c>)
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80031e6:	33ff      	adds	r3, #255	; 0xff
 80031e8:	4413      	add	r3, r2
 80031ea:	ee07 3a90 	vmov	s15, r3
 80031ee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80031f2:	4b12      	ldr	r3, [pc, #72]	; (800323c <encoderL+0x27c>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80031fa:	33ff      	adds	r3, #255	; 0xff
 80031fc:	4a0f      	ldr	r2, [pc, #60]	; (800323c <encoderL+0x27c>)
 80031fe:	6852      	ldr	r2, [r2, #4]
 8003200:	1a9b      	subs	r3, r3, r2
 8003202:	ee07 3a90 	vmov	s15, r3
 8003206:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800320a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800320e:	4b0d      	ldr	r3, [pc, #52]	; (8003244 <encoderL+0x284>)
 8003210:	edd3 7a00 	vldr	s15, [r3]
 8003214:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003218:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800321c:	ee17 2a90 	vmov	r2, s15
 8003220:	4b06      	ldr	r3, [pc, #24]	; (800323c <encoderL+0x27c>)
 8003222:	619a      	str	r2, [r3, #24]
			}
			EncoderL.posCntUpdate = 0;
 8003224:	4b05      	ldr	r3, [pc, #20]	; (800323c <encoderL+0x27c>)
 8003226:	2200      	movs	r2, #0
 8003228:	751a      	strb	r2, [r3, #20]
			EncoderL.timeUpdate = 0;
 800322a:	4b04      	ldr	r3, [pc, #16]	; (800323c <encoderL+0x27c>)
 800322c:	2200      	movs	r2, #0
 800322e:	721a      	strb	r2, [r3, #8]
			break;
 8003230:	e000      	b.n	8003234 <encoderL+0x274>
		default:
			break;
 8003232:	bf00      	nop
	}

	  __asm__ volatile("NOP");
 8003234:	bf00      	nop
 8003236:	e6c7      	b.n	8002fc8 <encoderL+0x8>
		  continue;
 8003238:	bf00      	nop
	  vTaskDelay(pdMS_TO_TICKS(ENCDELAY));
 800323a:	e6c5      	b.n	8002fc8 <encoderL+0x8>
 800323c:	200009f0 	.word	0x200009f0
 8003240:	40014800 	.word	0x40014800
 8003244:	20000a1c 	.word	0x20000a1c

08003248 <softwarePWMR>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_softwarePWMR */
void softwarePWMR(void const * argument)
{
 8003248:	b5b0      	push	{r4, r5, r7, lr}
 800324a:	b08a      	sub	sp, #40	; 0x28
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN softwarePWMR */
	int errorValue = 0;
 8003250:	2300      	movs	r3, #0
 8003252:	617b      	str	r3, [r7, #20]
	float sumValue = 0;
 8003254:	f04f 0300 	mov.w	r3, #0
 8003258:	627b      	str	r3, [r7, #36]	; 0x24
	float pValue = 0;
 800325a:	f04f 0300 	mov.w	r3, #0
 800325e:	613b      	str	r3, [r7, #16]
	float iValue = 0;
 8003260:	f04f 0300 	mov.w	r3, #0
 8003264:	623b      	str	r3, [r7, #32]
	float pwmFloatValue = 0;
 8003266:	f04f 0300 	mov.w	r3, #0
 800326a:	61fb      	str	r3, [r7, #28]
	vTaskDelay( pdMS_TO_TICKS( 10 ) );
 800326c:	200a      	movs	r0, #10
 800326e:	f006 fddd 	bl	8009e2c <vTaskDelay>
	GPIOA->ODR |= (1<<6); //EN34
 8003272:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003276:	695b      	ldr	r3, [r3, #20]
 8003278:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800327c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003280:	6153      	str	r3, [r2, #20]

	SoftPwmR.reqValue = 6000;
 8003282:	4bad      	ldr	r3, [pc, #692]	; (8003538 <softwarePWMR+0x2f0>)
 8003284:	f241 7270 	movw	r2, #6000	; 0x1770
 8003288:	801a      	strh	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
	  float rWheelSpeed = tSpeed - aSpeed*DISBETWHEELS/2;
 800328a:	4bac      	ldr	r3, [pc, #688]	; (800353c <softwarePWMR+0x2f4>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	f7fd f96a 	bl	8000568 <__aeabi_f2d>
 8003294:	4604      	mov	r4, r0
 8003296:	460d      	mov	r5, r1
 8003298:	4ba9      	ldr	r3, [pc, #676]	; (8003540 <softwarePWMR+0x2f8>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4618      	mov	r0, r3
 800329e:	f7fd f963 	bl	8000568 <__aeabi_f2d>
 80032a2:	a3a1      	add	r3, pc, #644	; (adr r3, 8003528 <softwarePWMR+0x2e0>)
 80032a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a8:	f7fd f9b6 	bl	8000618 <__aeabi_dmul>
 80032ac:	4602      	mov	r2, r0
 80032ae:	460b      	mov	r3, r1
 80032b0:	4610      	mov	r0, r2
 80032b2:	4619      	mov	r1, r3
 80032b4:	f04f 0200 	mov.w	r2, #0
 80032b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80032bc:	f7fd fad6 	bl	800086c <__aeabi_ddiv>
 80032c0:	4602      	mov	r2, r0
 80032c2:	460b      	mov	r3, r1
 80032c4:	4620      	mov	r0, r4
 80032c6:	4629      	mov	r1, r5
 80032c8:	f7fc ffee 	bl	80002a8 <__aeabi_dsub>
 80032cc:	4602      	mov	r2, r0
 80032ce:	460b      	mov	r3, r1
 80032d0:	4610      	mov	r0, r2
 80032d2:	4619      	mov	r1, r3
 80032d4:	f7fd fc78 	bl	8000bc8 <__aeabi_d2f>
 80032d8:	4603      	mov	r3, r0
 80032da:	60fb      	str	r3, [r7, #12]
	  float reqValueTemp = (rWheelSpeed*60)/(2*3.14*RWHEEL);
 80032dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80032e0:	ed9f 7a98 	vldr	s14, [pc, #608]	; 8003544 <softwarePWMR+0x2fc>
 80032e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032e8:	ee17 0a90 	vmov	r0, s15
 80032ec:	f7fd f93c 	bl	8000568 <__aeabi_f2d>
 80032f0:	a38f      	add	r3, pc, #572	; (adr r3, 8003530 <softwarePWMR+0x2e8>)
 80032f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f6:	f7fd fab9 	bl	800086c <__aeabi_ddiv>
 80032fa:	4602      	mov	r2, r0
 80032fc:	460b      	mov	r3, r1
 80032fe:	4610      	mov	r0, r2
 8003300:	4619      	mov	r1, r3
 8003302:	f7fd fc61 	bl	8000bc8 <__aeabi_d2f>
 8003306:	4603      	mov	r3, r0
 8003308:	61bb      	str	r3, [r7, #24]
	  if((reqValueTemp >= - 50) && (reqValueTemp <= 50)) {
 800330a:	edd7 7a06 	vldr	s15, [r7, #24]
 800330e:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8003548 <softwarePWMR+0x300>
 8003312:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800331a:	db0c      	blt.n	8003336 <softwarePWMR+0xee>
 800331c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003320:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800354c <softwarePWMR+0x304>
 8003324:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800332c:	d803      	bhi.n	8003336 <softwarePWMR+0xee>
		  reqValueTemp = 0;
 800332e:	f04f 0300 	mov.w	r3, #0
 8003332:	61bb      	str	r3, [r7, #24]
 8003334:	e016      	b.n	8003364 <softwarePWMR+0x11c>
	  } else if((reqValueTemp > MAXRPM)) {
 8003336:	edd7 7a06 	vldr	s15, [r7, #24]
 800333a:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8003550 <softwarePWMR+0x308>
 800333e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003346:	dd02      	ble.n	800334e <softwarePWMR+0x106>
		  reqValueTemp = MAXRPM;
 8003348:	4b82      	ldr	r3, [pc, #520]	; (8003554 <softwarePWMR+0x30c>)
 800334a:	61bb      	str	r3, [r7, #24]
 800334c:	e00a      	b.n	8003364 <softwarePWMR+0x11c>
	  } else if((reqValueTemp < -MAXRPM)) {
 800334e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003352:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8003558 <softwarePWMR+0x310>
 8003356:	eef4 7ac7 	vcmpe.f32	s15, s14
 800335a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800335e:	d501      	bpl.n	8003364 <softwarePWMR+0x11c>
		  reqValueTemp = -MAXRPM;
 8003360:	4b7e      	ldr	r3, [pc, #504]	; (800355c <softwarePWMR+0x314>)
 8003362:	61bb      	str	r3, [r7, #24]
	  }
	  SoftPwmR.reqValue = (int16_t)reqValueTemp;
 8003364:	edd7 7a06 	vldr	s15, [r7, #24]
 8003368:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800336c:	ee17 3a90 	vmov	r3, s15
 8003370:	b21a      	sxth	r2, r3
 8003372:	4b71      	ldr	r3, [pc, #452]	; (8003538 <softwarePWMR+0x2f0>)
 8003374:	801a      	strh	r2, [r3, #0]

	  SoftPwmR.curValue = EncoderR.rpm;
 8003376:	4b7a      	ldr	r3, [pc, #488]	; (8003560 <softwarePWMR+0x318>)
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	b21a      	sxth	r2, r3
 800337c:	4b6e      	ldr	r3, [pc, #440]	; (8003538 <softwarePWMR+0x2f0>)
 800337e:	805a      	strh	r2, [r3, #2]
	  errorValue = SoftPwmR.reqValue - SoftPwmR.curValue;
 8003380:	4b6d      	ldr	r3, [pc, #436]	; (8003538 <softwarePWMR+0x2f0>)
 8003382:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003386:	461a      	mov	r2, r3
 8003388:	4b6b      	ldr	r3, [pc, #428]	; (8003538 <softwarePWMR+0x2f0>)
 800338a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	617b      	str	r3, [r7, #20]
	  pValue = KP * errorValue;
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	ee07 3a90 	vmov	s15, r3
 8003398:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800339c:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8003564 <softwarePWMR+0x31c>
 80033a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033a4:	edc7 7a04 	vstr	s15, [r7, #16]
	  iValue += KI * errorValue;
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	ee07 3a90 	vmov	s15, r3
 80033ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033b2:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8003568 <softwarePWMR+0x320>
 80033b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033ba:	ed97 7a08 	vldr	s14, [r7, #32]
 80033be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033c2:	edc7 7a08 	vstr	s15, [r7, #32]
	  if(iValue > ((float)MAXRPM)) iValue = MAXRPM;
 80033c6:	edd7 7a08 	vldr	s15, [r7, #32]
 80033ca:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8003550 <softwarePWMR+0x308>
 80033ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033d6:	dd02      	ble.n	80033de <softwarePWMR+0x196>
 80033d8:	4b5e      	ldr	r3, [pc, #376]	; (8003554 <softwarePWMR+0x30c>)
 80033da:	623b      	str	r3, [r7, #32]
 80033dc:	e00a      	b.n	80033f4 <softwarePWMR+0x1ac>
	  else if(iValue < ((float)-MAXRPM)) iValue = -MAXRPM;
 80033de:	edd7 7a08 	vldr	s15, [r7, #32]
 80033e2:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8003558 <softwarePWMR+0x310>
 80033e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ee:	d501      	bpl.n	80033f4 <softwarePWMR+0x1ac>
 80033f0:	4b5a      	ldr	r3, [pc, #360]	; (800355c <softwarePWMR+0x314>)
 80033f2:	623b      	str	r3, [r7, #32]
	  if((iValue <= 50) && (iValue >= -50)) {
 80033f4:	edd7 7a08 	vldr	s15, [r7, #32]
 80033f8:	ed9f 7a54 	vldr	s14, [pc, #336]	; 800354c <softwarePWMR+0x304>
 80033fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003404:	d80b      	bhi.n	800341e <softwarePWMR+0x1d6>
 8003406:	edd7 7a08 	vldr	s15, [r7, #32]
 800340a:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8003548 <softwarePWMR+0x300>
 800340e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003416:	db02      	blt.n	800341e <softwarePWMR+0x1d6>
		  sumValue = pValue;
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	627b      	str	r3, [r7, #36]	; 0x24
 800341c:	e007      	b.n	800342e <softwarePWMR+0x1e6>
	  } else {
		  sumValue = (pValue + iValue);
 800341e:	ed97 7a04 	vldr	s14, [r7, #16]
 8003422:	edd7 7a08 	vldr	s15, [r7, #32]
 8003426:	ee77 7a27 	vadd.f32	s15, s14, s15
 800342a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	  }
	  pwmFloatValue += ((((float)sumValue)/((float)MAXRPM))*PWMVAL);
 800342e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003432:	eddf 6a47 	vldr	s13, [pc, #284]	; 8003550 <softwarePWMR+0x308>
 8003436:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800343a:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800356c <softwarePWMR+0x324>
 800343e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003442:	ed97 7a07 	vldr	s14, [r7, #28]
 8003446:	ee77 7a27 	vadd.f32	s15, s14, s15
 800344a:	edc7 7a07 	vstr	s15, [r7, #28]
	  if(pwmFloatValue > PWMVAL) pwmFloatValue = PWMVAL;
 800344e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003452:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800356c <softwarePWMR+0x324>
 8003456:	eef4 7ac7 	vcmpe.f32	s15, s14
 800345a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800345e:	dd02      	ble.n	8003466 <softwarePWMR+0x21e>
 8003460:	4b43      	ldr	r3, [pc, #268]	; (8003570 <softwarePWMR+0x328>)
 8003462:	61fb      	str	r3, [r7, #28]
 8003464:	e00a      	b.n	800347c <softwarePWMR+0x234>
	  else if(pwmFloatValue < -PWMVAL) pwmFloatValue = -PWMVAL;
 8003466:	edd7 7a07 	vldr	s15, [r7, #28]
 800346a:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8003574 <softwarePWMR+0x32c>
 800346e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003476:	d501      	bpl.n	800347c <softwarePWMR+0x234>
 8003478:	4b3f      	ldr	r3, [pc, #252]	; (8003578 <softwarePWMR+0x330>)
 800347a:	61fb      	str	r3, [r7, #28]
	  SoftPwmR.pwmValue = (int16_t)pwmFloatValue;
 800347c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003480:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003484:	ee17 3a90 	vmov	r3, s15
 8003488:	b21a      	sxth	r2, r3
 800348a:	4b2b      	ldr	r3, [pc, #172]	; (8003538 <softwarePWMR+0x2f0>)
 800348c:	809a      	strh	r2, [r3, #4]
	  if(SoftPwmR.reqValue == 0) {
 800348e:	4b2a      	ldr	r3, [pc, #168]	; (8003538 <softwarePWMR+0x2f0>)
 8003490:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d119      	bne.n	80034cc <softwarePWMR+0x284>
		  if(SoftPwmR.pwmValue > 0) {
 8003498:	4b27      	ldr	r3, [pc, #156]	; (8003538 <softwarePWMR+0x2f0>)
 800349a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	dd07      	ble.n	80034b2 <softwarePWMR+0x26a>
			  pwmFloatValue -= 1;
 80034a2:	edd7 7a07 	vldr	s15, [r7, #28]
 80034a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80034aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80034ae:	edc7 7a07 	vstr	s15, [r7, #28]
		  }
		  if(SoftPwmR.pwmValue < 0) {
 80034b2:	4b21      	ldr	r3, [pc, #132]	; (8003538 <softwarePWMR+0x2f0>)
 80034b4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	da07      	bge.n	80034cc <softwarePWMR+0x284>
			  pwmFloatValue += 1;
 80034bc:	edd7 7a07 	vldr	s15, [r7, #28]
 80034c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80034c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80034c8:	edc7 7a07 	vstr	s15, [r7, #28]
		  }
	  }

	  if(SoftPwmR.pwmValue < 0) {
 80034cc:	4b1a      	ldr	r3, [pc, #104]	; (8003538 <softwarePWMR+0x2f0>)
 80034ce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	da0c      	bge.n	80034f0 <softwarePWMR+0x2a8>
		  TIM15->CCR1 = TIM15->ARR - SoftPwmR.pwmValue*(-1);
 80034d6:	4b29      	ldr	r3, [pc, #164]	; (800357c <softwarePWMR+0x334>)
 80034d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034da:	4a17      	ldr	r2, [pc, #92]	; (8003538 <softwarePWMR+0x2f0>)
 80034dc:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80034e0:	4611      	mov	r1, r2
 80034e2:	4a26      	ldr	r2, [pc, #152]	; (800357c <softwarePWMR+0x334>)
 80034e4:	440b      	add	r3, r1
 80034e6:	6353      	str	r3, [r2, #52]	; 0x34
		  SoftPwmR.status = 2;
 80034e8:	4b13      	ldr	r3, [pc, #76]	; (8003538 <softwarePWMR+0x2f0>)
 80034ea:	2202      	movs	r2, #2
 80034ec:	719a      	strb	r2, [r3, #6]
 80034ee:	e014      	b.n	800351a <softwarePWMR+0x2d2>
	  } else if(SoftPwmR.pwmValue > 0){
 80034f0:	4b11      	ldr	r3, [pc, #68]	; (8003538 <softwarePWMR+0x2f0>)
 80034f2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	dd0c      	ble.n	8003514 <softwarePWMR+0x2cc>
		  TIM15->CCR1 = TIM15->ARR - SoftPwmR.pwmValue;
 80034fa:	4b20      	ldr	r3, [pc, #128]	; (800357c <softwarePWMR+0x334>)
 80034fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fe:	4a0e      	ldr	r2, [pc, #56]	; (8003538 <softwarePWMR+0x2f0>)
 8003500:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8003504:	4611      	mov	r1, r2
 8003506:	4a1d      	ldr	r2, [pc, #116]	; (800357c <softwarePWMR+0x334>)
 8003508:	1a5b      	subs	r3, r3, r1
 800350a:	6353      	str	r3, [r2, #52]	; 0x34
		  SoftPwmR.status = 1;
 800350c:	4b0a      	ldr	r3, [pc, #40]	; (8003538 <softwarePWMR+0x2f0>)
 800350e:	2201      	movs	r2, #1
 8003510:	719a      	strb	r2, [r3, #6]
 8003512:	e002      	b.n	800351a <softwarePWMR+0x2d2>
	  } else {
		  SoftPwmR.status = 0;
 8003514:	4b08      	ldr	r3, [pc, #32]	; (8003538 <softwarePWMR+0x2f0>)
 8003516:	2200      	movs	r2, #0
 8003518:	719a      	strb	r2, [r3, #6]
	  }

	  vTaskDelay(pdMS_TO_TICKS(ENCDELAY));
 800351a:	2001      	movs	r0, #1
 800351c:	f006 fc86 	bl	8009e2c <vTaskDelay>
  {
 8003520:	e6b3      	b.n	800328a <softwarePWMR+0x42>
 8003522:	bf00      	nop
 8003524:	f3af 8000 	nop.w
 8003528:	1eb851ec 	.word	0x1eb851ec
 800352c:	3fb1eb85 	.word	0x3fb1eb85
 8003530:	09d49519 	.word	0x09d49519
 8003534:	3fbc2268 	.word	0x3fbc2268
 8003538:	20000a0c 	.word	0x20000a0c
 800353c:	20000f34 	.word	0x20000f34
 8003540:	20000f38 	.word	0x20000f38
 8003544:	42700000 	.word	0x42700000
 8003548:	c2480000 	.word	0xc2480000
 800354c:	42480000 	.word	0x42480000
 8003550:	44fa0000 	.word	0x44fa0000
 8003554:	44fa0000 	.word	0x44fa0000
 8003558:	c4fa0000 	.word	0xc4fa0000
 800355c:	c4fa0000 	.word	0xc4fa0000
 8003560:	200009d4 	.word	0x200009d4
 8003564:	3a83126f 	.word	0x3a83126f
 8003568:	33d6bf95 	.word	0x33d6bf95
 800356c:	43c80000 	.word	0x43c80000
 8003570:	43c80000 	.word	0x43c80000
 8003574:	c3c80000 	.word	0xc3c80000
 8003578:	c3c80000 	.word	0xc3c80000
 800357c:	40014000 	.word	0x40014000

08003580 <softwarePWML>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_softwarePWML */
void softwarePWML(void const * argument)
{
 8003580:	b5b0      	push	{r4, r5, r7, lr}
 8003582:	b08a      	sub	sp, #40	; 0x28
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN softwarePWML */
	int errorValue = 0;
 8003588:	2300      	movs	r3, #0
 800358a:	617b      	str	r3, [r7, #20]
	float sumValue = 0;
 800358c:	f04f 0300 	mov.w	r3, #0
 8003590:	627b      	str	r3, [r7, #36]	; 0x24
	float pValue = 0;
 8003592:	f04f 0300 	mov.w	r3, #0
 8003596:	613b      	str	r3, [r7, #16]
	float iValue = 0;
 8003598:	f04f 0300 	mov.w	r3, #0
 800359c:	623b      	str	r3, [r7, #32]
	float pwmFloatValue = 0;
 800359e:	f04f 0300 	mov.w	r3, #0
 80035a2:	61fb      	str	r3, [r7, #28]
	vTaskDelay( pdMS_TO_TICKS( 10 ) );
 80035a4:	200a      	movs	r0, #10
 80035a6:	f006 fc41 	bl	8009e2c <vTaskDelay>
	GPIOA->ODR |= (1<<3); //EN12
 80035aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80035ae:	695b      	ldr	r3, [r3, #20]
 80035b0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80035b4:	f043 0308 	orr.w	r3, r3, #8
 80035b8:	6153      	str	r3, [r2, #20]

	SoftPwmL.reqValue = 6000;
 80035ba:	4bad      	ldr	r3, [pc, #692]	; (8003870 <softwarePWML+0x2f0>)
 80035bc:	f241 7270 	movw	r2, #6000	; 0x1770
 80035c0:	801a      	strh	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
	  float lWheelSpeed = tSpeed + aSpeed*DISBETWHEELS/2;
 80035c2:	4bac      	ldr	r3, [pc, #688]	; (8003874 <softwarePWML+0x2f4>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7fc ffce 	bl	8000568 <__aeabi_f2d>
 80035cc:	4604      	mov	r4, r0
 80035ce:	460d      	mov	r5, r1
 80035d0:	4ba9      	ldr	r3, [pc, #676]	; (8003878 <softwarePWML+0x2f8>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7fc ffc7 	bl	8000568 <__aeabi_f2d>
 80035da:	a3a1      	add	r3, pc, #644	; (adr r3, 8003860 <softwarePWML+0x2e0>)
 80035dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e0:	f7fd f81a 	bl	8000618 <__aeabi_dmul>
 80035e4:	4602      	mov	r2, r0
 80035e6:	460b      	mov	r3, r1
 80035e8:	4610      	mov	r0, r2
 80035ea:	4619      	mov	r1, r3
 80035ec:	f04f 0200 	mov.w	r2, #0
 80035f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80035f4:	f7fd f93a 	bl	800086c <__aeabi_ddiv>
 80035f8:	4602      	mov	r2, r0
 80035fa:	460b      	mov	r3, r1
 80035fc:	4620      	mov	r0, r4
 80035fe:	4629      	mov	r1, r5
 8003600:	f7fc fe54 	bl	80002ac <__adddf3>
 8003604:	4602      	mov	r2, r0
 8003606:	460b      	mov	r3, r1
 8003608:	4610      	mov	r0, r2
 800360a:	4619      	mov	r1, r3
 800360c:	f7fd fadc 	bl	8000bc8 <__aeabi_d2f>
 8003610:	4603      	mov	r3, r0
 8003612:	60fb      	str	r3, [r7, #12]
	  float reqValueTemp = (lWheelSpeed*60)/(2*3.14*RWHEEL);
 8003614:	edd7 7a03 	vldr	s15, [r7, #12]
 8003618:	ed9f 7a98 	vldr	s14, [pc, #608]	; 800387c <softwarePWML+0x2fc>
 800361c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003620:	ee17 0a90 	vmov	r0, s15
 8003624:	f7fc ffa0 	bl	8000568 <__aeabi_f2d>
 8003628:	a38f      	add	r3, pc, #572	; (adr r3, 8003868 <softwarePWML+0x2e8>)
 800362a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800362e:	f7fd f91d 	bl	800086c <__aeabi_ddiv>
 8003632:	4602      	mov	r2, r0
 8003634:	460b      	mov	r3, r1
 8003636:	4610      	mov	r0, r2
 8003638:	4619      	mov	r1, r3
 800363a:	f7fd fac5 	bl	8000bc8 <__aeabi_d2f>
 800363e:	4603      	mov	r3, r0
 8003640:	61bb      	str	r3, [r7, #24]
	  if((reqValueTemp >= - 50) && (reqValueTemp <= 50)) {
 8003642:	edd7 7a06 	vldr	s15, [r7, #24]
 8003646:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8003880 <softwarePWML+0x300>
 800364a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800364e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003652:	db0c      	blt.n	800366e <softwarePWML+0xee>
 8003654:	edd7 7a06 	vldr	s15, [r7, #24]
 8003658:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8003884 <softwarePWML+0x304>
 800365c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003664:	d803      	bhi.n	800366e <softwarePWML+0xee>
		  reqValueTemp = 0;
 8003666:	f04f 0300 	mov.w	r3, #0
 800366a:	61bb      	str	r3, [r7, #24]
 800366c:	e016      	b.n	800369c <softwarePWML+0x11c>
	  } else if((reqValueTemp > MAXRPM)) {
 800366e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003672:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8003888 <softwarePWML+0x308>
 8003676:	eef4 7ac7 	vcmpe.f32	s15, s14
 800367a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800367e:	dd02      	ble.n	8003686 <softwarePWML+0x106>
		  reqValueTemp = MAXRPM;
 8003680:	4b82      	ldr	r3, [pc, #520]	; (800388c <softwarePWML+0x30c>)
 8003682:	61bb      	str	r3, [r7, #24]
 8003684:	e00a      	b.n	800369c <softwarePWML+0x11c>
	  } else if((reqValueTemp < -MAXRPM)) {
 8003686:	edd7 7a06 	vldr	s15, [r7, #24]
 800368a:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8003890 <softwarePWML+0x310>
 800368e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003696:	d501      	bpl.n	800369c <softwarePWML+0x11c>
		  reqValueTemp = -MAXRPM;
 8003698:	4b7e      	ldr	r3, [pc, #504]	; (8003894 <softwarePWML+0x314>)
 800369a:	61bb      	str	r3, [r7, #24]
	  }
	  SoftPwmL.reqValue = (int16_t)reqValueTemp;
 800369c:	edd7 7a06 	vldr	s15, [r7, #24]
 80036a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036a4:	ee17 3a90 	vmov	r3, s15
 80036a8:	b21a      	sxth	r2, r3
 80036aa:	4b71      	ldr	r3, [pc, #452]	; (8003870 <softwarePWML+0x2f0>)
 80036ac:	801a      	strh	r2, [r3, #0]

	  SoftPwmL.curValue = EncoderL.rpm;
 80036ae:	4b7a      	ldr	r3, [pc, #488]	; (8003898 <softwarePWML+0x318>)
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	b21a      	sxth	r2, r3
 80036b4:	4b6e      	ldr	r3, [pc, #440]	; (8003870 <softwarePWML+0x2f0>)
 80036b6:	805a      	strh	r2, [r3, #2]
	  errorValue = SoftPwmL.reqValue - SoftPwmL.curValue;
 80036b8:	4b6d      	ldr	r3, [pc, #436]	; (8003870 <softwarePWML+0x2f0>)
 80036ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036be:	461a      	mov	r2, r3
 80036c0:	4b6b      	ldr	r3, [pc, #428]	; (8003870 <softwarePWML+0x2f0>)
 80036c2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	617b      	str	r3, [r7, #20]
	  pValue = KP * errorValue;
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	ee07 3a90 	vmov	s15, r3
 80036d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036d4:	ed9f 7a71 	vldr	s14, [pc, #452]	; 800389c <softwarePWML+0x31c>
 80036d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036dc:	edc7 7a04 	vstr	s15, [r7, #16]
	  iValue += KI * errorValue;
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	ee07 3a90 	vmov	s15, r3
 80036e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036ea:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80038a0 <softwarePWML+0x320>
 80036ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036f2:	ed97 7a08 	vldr	s14, [r7, #32]
 80036f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036fa:	edc7 7a08 	vstr	s15, [r7, #32]
	  if(iValue > ((float)MAXRPM)) iValue = MAXRPM;
 80036fe:	edd7 7a08 	vldr	s15, [r7, #32]
 8003702:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8003888 <softwarePWML+0x308>
 8003706:	eef4 7ac7 	vcmpe.f32	s15, s14
 800370a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800370e:	dd02      	ble.n	8003716 <softwarePWML+0x196>
 8003710:	4b5e      	ldr	r3, [pc, #376]	; (800388c <softwarePWML+0x30c>)
 8003712:	623b      	str	r3, [r7, #32]
 8003714:	e00a      	b.n	800372c <softwarePWML+0x1ac>
	  else if(iValue < ((float)-MAXRPM)) iValue = -MAXRPM;
 8003716:	edd7 7a08 	vldr	s15, [r7, #32]
 800371a:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8003890 <softwarePWML+0x310>
 800371e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003726:	d501      	bpl.n	800372c <softwarePWML+0x1ac>
 8003728:	4b5a      	ldr	r3, [pc, #360]	; (8003894 <softwarePWML+0x314>)
 800372a:	623b      	str	r3, [r7, #32]
	  if((iValue <= 50) && (iValue >= -50)) {
 800372c:	edd7 7a08 	vldr	s15, [r7, #32]
 8003730:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8003884 <softwarePWML+0x304>
 8003734:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800373c:	d80b      	bhi.n	8003756 <softwarePWML+0x1d6>
 800373e:	edd7 7a08 	vldr	s15, [r7, #32]
 8003742:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8003880 <softwarePWML+0x300>
 8003746:	eef4 7ac7 	vcmpe.f32	s15, s14
 800374a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800374e:	db02      	blt.n	8003756 <softwarePWML+0x1d6>
		  sumValue = pValue;
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	627b      	str	r3, [r7, #36]	; 0x24
 8003754:	e007      	b.n	8003766 <softwarePWML+0x1e6>
	  } else {
		  sumValue = (pValue + iValue);
 8003756:	ed97 7a04 	vldr	s14, [r7, #16]
 800375a:	edd7 7a08 	vldr	s15, [r7, #32]
 800375e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003762:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	  }
	  pwmFloatValue += ((((float)sumValue)/((float)MAXRPM))*PWMVAL);
 8003766:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800376a:	eddf 6a47 	vldr	s13, [pc, #284]	; 8003888 <softwarePWML+0x308>
 800376e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003772:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80038a4 <softwarePWML+0x324>
 8003776:	ee67 7a87 	vmul.f32	s15, s15, s14
 800377a:	ed97 7a07 	vldr	s14, [r7, #28]
 800377e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003782:	edc7 7a07 	vstr	s15, [r7, #28]
	  if(pwmFloatValue > PWMVAL) pwmFloatValue = PWMVAL;
 8003786:	edd7 7a07 	vldr	s15, [r7, #28]
 800378a:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80038a4 <softwarePWML+0x324>
 800378e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003796:	dd02      	ble.n	800379e <softwarePWML+0x21e>
 8003798:	4b43      	ldr	r3, [pc, #268]	; (80038a8 <softwarePWML+0x328>)
 800379a:	61fb      	str	r3, [r7, #28]
 800379c:	e00a      	b.n	80037b4 <softwarePWML+0x234>
	  else if(pwmFloatValue < -PWMVAL) pwmFloatValue = -PWMVAL;
 800379e:	edd7 7a07 	vldr	s15, [r7, #28]
 80037a2:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80038ac <softwarePWML+0x32c>
 80037a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ae:	d501      	bpl.n	80037b4 <softwarePWML+0x234>
 80037b0:	4b3f      	ldr	r3, [pc, #252]	; (80038b0 <softwarePWML+0x330>)
 80037b2:	61fb      	str	r3, [r7, #28]
	  SoftPwmL.pwmValue = (int16_t)pwmFloatValue;
 80037b4:	edd7 7a07 	vldr	s15, [r7, #28]
 80037b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80037bc:	ee17 3a90 	vmov	r3, s15
 80037c0:	b21a      	sxth	r2, r3
 80037c2:	4b2b      	ldr	r3, [pc, #172]	; (8003870 <softwarePWML+0x2f0>)
 80037c4:	809a      	strh	r2, [r3, #4]
	  if(SoftPwmL.reqValue == 0) {
 80037c6:	4b2a      	ldr	r3, [pc, #168]	; (8003870 <softwarePWML+0x2f0>)
 80037c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d119      	bne.n	8003804 <softwarePWML+0x284>
		  if(SoftPwmL.pwmValue > 0) {
 80037d0:	4b27      	ldr	r3, [pc, #156]	; (8003870 <softwarePWML+0x2f0>)
 80037d2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	dd07      	ble.n	80037ea <softwarePWML+0x26a>
			  pwmFloatValue -= 1;
 80037da:	edd7 7a07 	vldr	s15, [r7, #28]
 80037de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80037e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80037e6:	edc7 7a07 	vstr	s15, [r7, #28]
		  }
		  if(SoftPwmL.pwmValue < 0) {
 80037ea:	4b21      	ldr	r3, [pc, #132]	; (8003870 <softwarePWML+0x2f0>)
 80037ec:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	da07      	bge.n	8003804 <softwarePWML+0x284>
			  pwmFloatValue += 1;
 80037f4:	edd7 7a07 	vldr	s15, [r7, #28]
 80037f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80037fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003800:	edc7 7a07 	vstr	s15, [r7, #28]
		  }
	  }

	  if(SoftPwmL.pwmValue < 0) {
 8003804:	4b1a      	ldr	r3, [pc, #104]	; (8003870 <softwarePWML+0x2f0>)
 8003806:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	da0c      	bge.n	8003828 <softwarePWML+0x2a8>
		  TIM15->CCR2 = TIM15->ARR - SoftPwmL.pwmValue*(-1);
 800380e:	4b29      	ldr	r3, [pc, #164]	; (80038b4 <softwarePWML+0x334>)
 8003810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003812:	4a17      	ldr	r2, [pc, #92]	; (8003870 <softwarePWML+0x2f0>)
 8003814:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8003818:	4611      	mov	r1, r2
 800381a:	4a26      	ldr	r2, [pc, #152]	; (80038b4 <softwarePWML+0x334>)
 800381c:	440b      	add	r3, r1
 800381e:	6393      	str	r3, [r2, #56]	; 0x38
		  SoftPwmL.status = 2;
 8003820:	4b13      	ldr	r3, [pc, #76]	; (8003870 <softwarePWML+0x2f0>)
 8003822:	2202      	movs	r2, #2
 8003824:	719a      	strb	r2, [r3, #6]
 8003826:	e014      	b.n	8003852 <softwarePWML+0x2d2>
	  } else if(SoftPwmL.pwmValue > 0) {
 8003828:	4b11      	ldr	r3, [pc, #68]	; (8003870 <softwarePWML+0x2f0>)
 800382a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	dd0c      	ble.n	800384c <softwarePWML+0x2cc>
		  TIM15->CCR2 = TIM15->ARR - SoftPwmL.pwmValue;
 8003832:	4b20      	ldr	r3, [pc, #128]	; (80038b4 <softwarePWML+0x334>)
 8003834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003836:	4a0e      	ldr	r2, [pc, #56]	; (8003870 <softwarePWML+0x2f0>)
 8003838:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800383c:	4611      	mov	r1, r2
 800383e:	4a1d      	ldr	r2, [pc, #116]	; (80038b4 <softwarePWML+0x334>)
 8003840:	1a5b      	subs	r3, r3, r1
 8003842:	6393      	str	r3, [r2, #56]	; 0x38
		  SoftPwmL.status = 1;
 8003844:	4b0a      	ldr	r3, [pc, #40]	; (8003870 <softwarePWML+0x2f0>)
 8003846:	2201      	movs	r2, #1
 8003848:	719a      	strb	r2, [r3, #6]
 800384a:	e002      	b.n	8003852 <softwarePWML+0x2d2>
	  } else {
		  SoftPwmL.status = 0;
 800384c:	4b08      	ldr	r3, [pc, #32]	; (8003870 <softwarePWML+0x2f0>)
 800384e:	2200      	movs	r2, #0
 8003850:	719a      	strb	r2, [r3, #6]
	  }

	  vTaskDelay(pdMS_TO_TICKS(ENCDELAY));
 8003852:	2001      	movs	r0, #1
 8003854:	f006 faea 	bl	8009e2c <vTaskDelay>
  {
 8003858:	e6b3      	b.n	80035c2 <softwarePWML+0x42>
 800385a:	bf00      	nop
 800385c:	f3af 8000 	nop.w
 8003860:	1eb851ec 	.word	0x1eb851ec
 8003864:	3fb1eb85 	.word	0x3fb1eb85
 8003868:	09d49519 	.word	0x09d49519
 800386c:	3fbc2268 	.word	0x3fbc2268
 8003870:	20000a14 	.word	0x20000a14
 8003874:	20000f34 	.word	0x20000f34
 8003878:	20000f38 	.word	0x20000f38
 800387c:	42700000 	.word	0x42700000
 8003880:	c2480000 	.word	0xc2480000
 8003884:	42480000 	.word	0x42480000
 8003888:	44fa0000 	.word	0x44fa0000
 800388c:	44fa0000 	.word	0x44fa0000
 8003890:	c4fa0000 	.word	0xc4fa0000
 8003894:	c4fa0000 	.word	0xc4fa0000
 8003898:	200009f0 	.word	0x200009f0
 800389c:	3a83126f 	.word	0x3a83126f
 80038a0:	33d6bf95 	.word	0x33d6bf95
 80038a4:	43c80000 	.word	0x43c80000
 80038a8:	43c80000 	.word	0x43c80000
 80038ac:	c3c80000 	.word	0xc3c80000
 80038b0:	c3c80000 	.word	0xc3c80000
 80038b4:	40014000 	.word	0x40014000

080038b8 <accelerometer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_accelerometer */
void accelerometer(void const * argument)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN accelerometer */
	vTaskDelay(120);
 80038c0:	2078      	movs	r0, #120	; 0x78
 80038c2:	f006 fab3 	bl	8009e2c <vTaskDelay>
	adxl345_bw_rate_setup(&hspi2, GPIOB, 14, 0xA);
 80038c6:	230a      	movs	r3, #10
 80038c8:	220e      	movs	r2, #14
 80038ca:	491f      	ldr	r1, [pc, #124]	; (8003948 <accelerometer+0x90>)
 80038cc:	481f      	ldr	r0, [pc, #124]	; (800394c <accelerometer+0x94>)
 80038ce:	f7fd f9cb 	bl	8000c68 <adxl345_bw_rate_setup>
	vTaskDelay(20);
 80038d2:	2014      	movs	r0, #20
 80038d4:	f006 faaa 	bl	8009e2c <vTaskDelay>
	adxl345_data_format(&hspi2, GPIOB, 14, 0x42);
 80038d8:	2342      	movs	r3, #66	; 0x42
 80038da:	220e      	movs	r2, #14
 80038dc:	491a      	ldr	r1, [pc, #104]	; (8003948 <accelerometer+0x90>)
 80038de:	481b      	ldr	r0, [pc, #108]	; (800394c <accelerometer+0x94>)
 80038e0:	f7fd fa77 	bl	8000dd2 <adxl345_data_format>
	vTaskDelay(20);
 80038e4:	2014      	movs	r0, #20
 80038e6:	f006 faa1 	bl	8009e2c <vTaskDelay>
	adxl345_measure_mode(&hspi2, GPIOB, 14);
 80038ea:	220e      	movs	r2, #14
 80038ec:	4916      	ldr	r1, [pc, #88]	; (8003948 <accelerometer+0x90>)
 80038ee:	4817      	ldr	r0, [pc, #92]	; (800394c <accelerometer+0x94>)
 80038f0:	f7fd f9eb 	bl	8000cca <adxl345_measure_mode>
	vTaskDelay(20);
 80038f4:	2014      	movs	r0, #20
 80038f6:	f006 fa99 	bl	8009e2c <vTaskDelay>
	adxl345_bw_rate_setup(&hspi2, GPIOB, 12, 0xA);
 80038fa:	230a      	movs	r3, #10
 80038fc:	220c      	movs	r2, #12
 80038fe:	4912      	ldr	r1, [pc, #72]	; (8003948 <accelerometer+0x90>)
 8003900:	4812      	ldr	r0, [pc, #72]	; (800394c <accelerometer+0x94>)
 8003902:	f7fd f9b1 	bl	8000c68 <adxl345_bw_rate_setup>
	vTaskDelay(20);
 8003906:	2014      	movs	r0, #20
 8003908:	f006 fa90 	bl	8009e2c <vTaskDelay>
	adxl345_data_format(&hspi2, GPIOB, 12, 0x42);
 800390c:	2342      	movs	r3, #66	; 0x42
 800390e:	220c      	movs	r2, #12
 8003910:	490d      	ldr	r1, [pc, #52]	; (8003948 <accelerometer+0x90>)
 8003912:	480e      	ldr	r0, [pc, #56]	; (800394c <accelerometer+0x94>)
 8003914:	f7fd fa5d 	bl	8000dd2 <adxl345_data_format>
	vTaskDelay(20);
 8003918:	2014      	movs	r0, #20
 800391a:	f006 fa87 	bl	8009e2c <vTaskDelay>
	adxl345_measure_mode(&hspi2, GPIOB, 12);
 800391e:	220c      	movs	r2, #12
 8003920:	4909      	ldr	r1, [pc, #36]	; (8003948 <accelerometer+0x90>)
 8003922:	480a      	ldr	r0, [pc, #40]	; (800394c <accelerometer+0x94>)
 8003924:	f7fd f9d1 	bl	8000cca <adxl345_measure_mode>
  /* Infinite loop */
  for(;;)
  {
	  adxl345_read_data(&hspi2, GPIOB, 14, (uint8_t*)accelValueR);
 8003928:	4b09      	ldr	r3, [pc, #36]	; (8003950 <accelerometer+0x98>)
 800392a:	220e      	movs	r2, #14
 800392c:	4906      	ldr	r1, [pc, #24]	; (8003948 <accelerometer+0x90>)
 800392e:	4807      	ldr	r0, [pc, #28]	; (800394c <accelerometer+0x94>)
 8003930:	f7fd fa7c 	bl	8000e2c <adxl345_read_data>
	  adxl345_read_data(&hspi2, GPIOB, 12, (uint8_t*)accelValueL);
 8003934:	4b07      	ldr	r3, [pc, #28]	; (8003954 <accelerometer+0x9c>)
 8003936:	220c      	movs	r2, #12
 8003938:	4903      	ldr	r1, [pc, #12]	; (8003948 <accelerometer+0x90>)
 800393a:	4804      	ldr	r0, [pc, #16]	; (800394c <accelerometer+0x94>)
 800393c:	f7fd fa76 	bl	8000e2c <adxl345_read_data>
	  vTaskDelay(20);
 8003940:	2014      	movs	r0, #20
 8003942:	f006 fa73 	bl	8009e2c <vTaskDelay>
	  adxl345_read_data(&hspi2, GPIOB, 14, (uint8_t*)accelValueR);
 8003946:	e7ef      	b.n	8003928 <accelerometer+0x70>
 8003948:	48000400 	.word	0x48000400
 800394c:	20000784 	.word	0x20000784
 8003950:	20000f3c 	.word	0x20000f3c
 8003954:	20000f44 	.word	0x20000f44

08003958 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a04      	ldr	r2, [pc, #16]	; (8003978 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d101      	bne.n	800396e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800396a:	f000 fcad 	bl	80042c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800396e:	bf00      	nop
 8003970:	3708      	adds	r7, #8
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	40001000 	.word	0x40001000

0800397c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800397c:	b480      	push	{r7}
 800397e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003980:	b672      	cpsid	i
}
 8003982:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003984:	e7fe      	b.n	8003984 <Error_Handler+0x8>
	...

08003988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800398e:	4b11      	ldr	r3, [pc, #68]	; (80039d4 <HAL_MspInit+0x4c>)
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	4a10      	ldr	r2, [pc, #64]	; (80039d4 <HAL_MspInit+0x4c>)
 8003994:	f043 0301 	orr.w	r3, r3, #1
 8003998:	6193      	str	r3, [r2, #24]
 800399a:	4b0e      	ldr	r3, [pc, #56]	; (80039d4 <HAL_MspInit+0x4c>)
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	607b      	str	r3, [r7, #4]
 80039a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80039a6:	4b0b      	ldr	r3, [pc, #44]	; (80039d4 <HAL_MspInit+0x4c>)
 80039a8:	69db      	ldr	r3, [r3, #28]
 80039aa:	4a0a      	ldr	r2, [pc, #40]	; (80039d4 <HAL_MspInit+0x4c>)
 80039ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039b0:	61d3      	str	r3, [r2, #28]
 80039b2:	4b08      	ldr	r3, [pc, #32]	; (80039d4 <HAL_MspInit+0x4c>)
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ba:	603b      	str	r3, [r7, #0]
 80039bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80039be:	2200      	movs	r2, #0
 80039c0:	210f      	movs	r1, #15
 80039c2:	f06f 0001 	mvn.w	r0, #1
 80039c6:	f001 fa19 	bl	8004dfc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80039ca:	bf00      	nop
 80039cc:	3708      	adds	r7, #8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	40021000 	.word	0x40021000

080039d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b08a      	sub	sp, #40	; 0x28
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039e0:	f107 0314 	add.w	r3, r7, #20
 80039e4:	2200      	movs	r2, #0
 80039e6:	601a      	str	r2, [r3, #0]
 80039e8:	605a      	str	r2, [r3, #4]
 80039ea:	609a      	str	r2, [r3, #8]
 80039ec:	60da      	str	r2, [r3, #12]
 80039ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039f8:	d124      	bne.n	8003a44 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80039fa:	4b14      	ldr	r3, [pc, #80]	; (8003a4c <HAL_ADC_MspInit+0x74>)
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	4a13      	ldr	r2, [pc, #76]	; (8003a4c <HAL_ADC_MspInit+0x74>)
 8003a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a04:	6153      	str	r3, [r2, #20]
 8003a06:	4b11      	ldr	r3, [pc, #68]	; (8003a4c <HAL_ADC_MspInit+0x74>)
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a0e:	613b      	str	r3, [r7, #16]
 8003a10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a12:	4b0e      	ldr	r3, [pc, #56]	; (8003a4c <HAL_ADC_MspInit+0x74>)
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	4a0d      	ldr	r2, [pc, #52]	; (8003a4c <HAL_ADC_MspInit+0x74>)
 8003a18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a1c:	6153      	str	r3, [r2, #20]
 8003a1e:	4b0b      	ldr	r3, [pc, #44]	; (8003a4c <HAL_ADC_MspInit+0x74>)
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a26:	60fb      	str	r3, [r7, #12]
 8003a28:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003a2a:	2304      	movs	r3, #4
 8003a2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a32:	2300      	movs	r3, #0
 8003a34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a36:	f107 0314 	add.w	r3, r7, #20
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a40:	f001 fb10 	bl	8005064 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003a44:	bf00      	nop
 8003a46:	3728      	adds	r7, #40	; 0x28
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	40021000 	.word	0x40021000

08003a50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b08a      	sub	sp, #40	; 0x28
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a58:	f107 0314 	add.w	r3, r7, #20
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	601a      	str	r2, [r3, #0]
 8003a60:	605a      	str	r2, [r3, #4]
 8003a62:	609a      	str	r2, [r3, #8]
 8003a64:	60da      	str	r2, [r3, #12]
 8003a66:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a17      	ldr	r2, [pc, #92]	; (8003acc <HAL_SPI_MspInit+0x7c>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d128      	bne.n	8003ac4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003a72:	4b17      	ldr	r3, [pc, #92]	; (8003ad0 <HAL_SPI_MspInit+0x80>)
 8003a74:	69db      	ldr	r3, [r3, #28]
 8003a76:	4a16      	ldr	r2, [pc, #88]	; (8003ad0 <HAL_SPI_MspInit+0x80>)
 8003a78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a7c:	61d3      	str	r3, [r2, #28]
 8003a7e:	4b14      	ldr	r3, [pc, #80]	; (8003ad0 <HAL_SPI_MspInit+0x80>)
 8003a80:	69db      	ldr	r3, [r3, #28]
 8003a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a86:	613b      	str	r3, [r7, #16]
 8003a88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a8a:	4b11      	ldr	r3, [pc, #68]	; (8003ad0 <HAL_SPI_MspInit+0x80>)
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	4a10      	ldr	r2, [pc, #64]	; (8003ad0 <HAL_SPI_MspInit+0x80>)
 8003a90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a94:	6153      	str	r3, [r2, #20]
 8003a96:	4b0e      	ldr	r3, [pc, #56]	; (8003ad0 <HAL_SPI_MspInit+0x80>)
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a9e:	60fb      	str	r3, [r7, #12]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8003aa2:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8003aa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aac:	2300      	movs	r3, #0
 8003aae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003ab4:	2305      	movs	r3, #5
 8003ab6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ab8:	f107 0314 	add.w	r3, r7, #20
 8003abc:	4619      	mov	r1, r3
 8003abe:	4805      	ldr	r0, [pc, #20]	; (8003ad4 <HAL_SPI_MspInit+0x84>)
 8003ac0:	f001 fad0 	bl	8005064 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003ac4:	bf00      	nop
 8003ac6:	3728      	adds	r7, #40	; 0x28
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	40003800 	.word	0x40003800
 8003ad0:	40021000 	.word	0x40021000
 8003ad4:	48000400 	.word	0x48000400

08003ad8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a16      	ldr	r2, [pc, #88]	; (8003b40 <HAL_TIM_Base_MspInit+0x68>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d10c      	bne.n	8003b04 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003aea:	4b16      	ldr	r3, [pc, #88]	; (8003b44 <HAL_TIM_Base_MspInit+0x6c>)
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	4a15      	ldr	r2, [pc, #84]	; (8003b44 <HAL_TIM_Base_MspInit+0x6c>)
 8003af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003af4:	6193      	str	r3, [r2, #24]
 8003af6:	4b13      	ldr	r3, [pc, #76]	; (8003b44 <HAL_TIM_Base_MspInit+0x6c>)
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003afe:	60fb      	str	r3, [r7, #12]
 8003b00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8003b02:	e018      	b.n	8003b36 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM17)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a0f      	ldr	r2, [pc, #60]	; (8003b48 <HAL_TIM_Base_MspInit+0x70>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d113      	bne.n	8003b36 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003b0e:	4b0d      	ldr	r3, [pc, #52]	; (8003b44 <HAL_TIM_Base_MspInit+0x6c>)
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	4a0c      	ldr	r2, [pc, #48]	; (8003b44 <HAL_TIM_Base_MspInit+0x6c>)
 8003b14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b18:	6193      	str	r3, [r2, #24]
 8003b1a:	4b0a      	ldr	r3, [pc, #40]	; (8003b44 <HAL_TIM_Base_MspInit+0x6c>)
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b22:	60bb      	str	r3, [r7, #8]
 8003b24:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 5, 0);
 8003b26:	2200      	movs	r2, #0
 8003b28:	2105      	movs	r1, #5
 8003b2a:	201a      	movs	r0, #26
 8003b2c:	f001 f966 	bl	8004dfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8003b30:	201a      	movs	r0, #26
 8003b32:	f001 f97f 	bl	8004e34 <HAL_NVIC_EnableIRQ>
}
 8003b36:	bf00      	nop
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	40014000 	.word	0x40014000
 8003b44:	40021000 	.word	0x40021000
 8003b48:	40014800 	.word	0x40014800

08003b4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b08a      	sub	sp, #40	; 0x28
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b54:	f107 0314 	add.w	r3, r7, #20
 8003b58:	2200      	movs	r2, #0
 8003b5a:	601a      	str	r2, [r3, #0]
 8003b5c:	605a      	str	r2, [r3, #4]
 8003b5e:	609a      	str	r2, [r3, #8]
 8003b60:	60da      	str	r2, [r3, #12]
 8003b62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a3e      	ldr	r2, [pc, #248]	; (8003c64 <HAL_UART_MspInit+0x118>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d176      	bne.n	8003c5c <HAL_UART_MspInit+0x110>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003b6e:	4b3e      	ldr	r3, [pc, #248]	; (8003c68 <HAL_UART_MspInit+0x11c>)
 8003b70:	69db      	ldr	r3, [r3, #28]
 8003b72:	4a3d      	ldr	r2, [pc, #244]	; (8003c68 <HAL_UART_MspInit+0x11c>)
 8003b74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b78:	61d3      	str	r3, [r2, #28]
 8003b7a:	4b3b      	ldr	r3, [pc, #236]	; (8003c68 <HAL_UART_MspInit+0x11c>)
 8003b7c:	69db      	ldr	r3, [r3, #28]
 8003b7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b82:	613b      	str	r3, [r7, #16]
 8003b84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b86:	4b38      	ldr	r3, [pc, #224]	; (8003c68 <HAL_UART_MspInit+0x11c>)
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	4a37      	ldr	r2, [pc, #220]	; (8003c68 <HAL_UART_MspInit+0x11c>)
 8003b8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b90:	6153      	str	r3, [r2, #20]
 8003b92:	4b35      	ldr	r3, [pc, #212]	; (8003c68 <HAL_UART_MspInit+0x11c>)
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b9a:	60fb      	str	r3, [r7, #12]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003b9e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003ba2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003bac:	2303      	movs	r3, #3
 8003bae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003bb0:	2307      	movs	r3, #7
 8003bb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bb4:	f107 0314 	add.w	r3, r7, #20
 8003bb8:	4619      	mov	r1, r3
 8003bba:	482c      	ldr	r0, [pc, #176]	; (8003c6c <HAL_UART_MspInit+0x120>)
 8003bbc:	f001 fa52 	bl	8005064 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8003bc0:	4b2b      	ldr	r3, [pc, #172]	; (8003c70 <HAL_UART_MspInit+0x124>)
 8003bc2:	4a2c      	ldr	r2, [pc, #176]	; (8003c74 <HAL_UART_MspInit+0x128>)
 8003bc4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003bc6:	4b2a      	ldr	r3, [pc, #168]	; (8003c70 <HAL_UART_MspInit+0x124>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bcc:	4b28      	ldr	r3, [pc, #160]	; (8003c70 <HAL_UART_MspInit+0x124>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003bd2:	4b27      	ldr	r3, [pc, #156]	; (8003c70 <HAL_UART_MspInit+0x124>)
 8003bd4:	2280      	movs	r2, #128	; 0x80
 8003bd6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003bd8:	4b25      	ldr	r3, [pc, #148]	; (8003c70 <HAL_UART_MspInit+0x124>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003bde:	4b24      	ldr	r3, [pc, #144]	; (8003c70 <HAL_UART_MspInit+0x124>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8003be4:	4b22      	ldr	r3, [pc, #136]	; (8003c70 <HAL_UART_MspInit+0x124>)
 8003be6:	2220      	movs	r2, #32
 8003be8:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003bea:	4b21      	ldr	r3, [pc, #132]	; (8003c70 <HAL_UART_MspInit+0x124>)
 8003bec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003bf0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003bf2:	481f      	ldr	r0, [pc, #124]	; (8003c70 <HAL_UART_MspInit+0x124>)
 8003bf4:	f001 f92c 	bl	8004e50 <HAL_DMA_Init>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 8003bfe:	f7ff febd 	bl	800397c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a1a      	ldr	r2, [pc, #104]	; (8003c70 <HAL_UART_MspInit+0x124>)
 8003c06:	675a      	str	r2, [r3, #116]	; 0x74
 8003c08:	4a19      	ldr	r2, [pc, #100]	; (8003c70 <HAL_UART_MspInit+0x124>)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8003c0e:	4b1a      	ldr	r3, [pc, #104]	; (8003c78 <HAL_UART_MspInit+0x12c>)
 8003c10:	4a1a      	ldr	r2, [pc, #104]	; (8003c7c <HAL_UART_MspInit+0x130>)
 8003c12:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c14:	4b18      	ldr	r3, [pc, #96]	; (8003c78 <HAL_UART_MspInit+0x12c>)
 8003c16:	2210      	movs	r2, #16
 8003c18:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c1a:	4b17      	ldr	r3, [pc, #92]	; (8003c78 <HAL_UART_MspInit+0x12c>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003c20:	4b15      	ldr	r3, [pc, #84]	; (8003c78 <HAL_UART_MspInit+0x12c>)
 8003c22:	2280      	movs	r2, #128	; 0x80
 8003c24:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c26:	4b14      	ldr	r3, [pc, #80]	; (8003c78 <HAL_UART_MspInit+0x12c>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c2c:	4b12      	ldr	r3, [pc, #72]	; (8003c78 <HAL_UART_MspInit+0x12c>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003c32:	4b11      	ldr	r3, [pc, #68]	; (8003c78 <HAL_UART_MspInit+0x12c>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003c38:	4b0f      	ldr	r3, [pc, #60]	; (8003c78 <HAL_UART_MspInit+0x12c>)
 8003c3a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003c3e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003c40:	480d      	ldr	r0, [pc, #52]	; (8003c78 <HAL_UART_MspInit+0x12c>)
 8003c42:	f001 f905 	bl	8004e50 <HAL_DMA_Init>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <HAL_UART_MspInit+0x104>
    {
      Error_Handler();
 8003c4c:	f7ff fe96 	bl	800397c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a09      	ldr	r2, [pc, #36]	; (8003c78 <HAL_UART_MspInit+0x12c>)
 8003c54:	671a      	str	r2, [r3, #112]	; 0x70
 8003c56:	4a08      	ldr	r2, [pc, #32]	; (8003c78 <HAL_UART_MspInit+0x12c>)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003c5c:	bf00      	nop
 8003c5e:	3728      	adds	r7, #40	; 0x28
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	40004800 	.word	0x40004800
 8003c68:	40021000 	.word	0x40021000
 8003c6c:	48000400 	.word	0x48000400
 8003c70:	20000908 	.word	0x20000908
 8003c74:	40020030 	.word	0x40020030
 8003c78:	2000094c 	.word	0x2000094c
 8003c7c:	4002001c 	.word	0x4002001c

08003c80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b08e      	sub	sp, #56	; 0x38
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003c90:	4b33      	ldr	r3, [pc, #204]	; (8003d60 <HAL_InitTick+0xe0>)
 8003c92:	69db      	ldr	r3, [r3, #28]
 8003c94:	4a32      	ldr	r2, [pc, #200]	; (8003d60 <HAL_InitTick+0xe0>)
 8003c96:	f043 0310 	orr.w	r3, r3, #16
 8003c9a:	61d3      	str	r3, [r2, #28]
 8003c9c:	4b30      	ldr	r3, [pc, #192]	; (8003d60 <HAL_InitTick+0xe0>)
 8003c9e:	69db      	ldr	r3, [r3, #28]
 8003ca0:	f003 0310 	and.w	r3, r3, #16
 8003ca4:	60fb      	str	r3, [r7, #12]
 8003ca6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003ca8:	f107 0210 	add.w	r2, r7, #16
 8003cac:	f107 0314 	add.w	r3, r7, #20
 8003cb0:	4611      	mov	r1, r2
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f002 fdf8 	bl	80068a8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003cb8:	6a3b      	ldr	r3, [r7, #32]
 8003cba:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d103      	bne.n	8003cca <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003cc2:	f002 fdad 	bl	8006820 <HAL_RCC_GetPCLK1Freq>
 8003cc6:	6378      	str	r0, [r7, #52]	; 0x34
 8003cc8:	e004      	b.n	8003cd4 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003cca:	f002 fda9 	bl	8006820 <HAL_RCC_GetPCLK1Freq>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	005b      	lsls	r3, r3, #1
 8003cd2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cd6:	4a23      	ldr	r2, [pc, #140]	; (8003d64 <HAL_InitTick+0xe4>)
 8003cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cdc:	0c9b      	lsrs	r3, r3, #18
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003ce2:	4b21      	ldr	r3, [pc, #132]	; (8003d68 <HAL_InitTick+0xe8>)
 8003ce4:	4a21      	ldr	r2, [pc, #132]	; (8003d6c <HAL_InitTick+0xec>)
 8003ce6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003ce8:	4b1f      	ldr	r3, [pc, #124]	; (8003d68 <HAL_InitTick+0xe8>)
 8003cea:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003cee:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003cf0:	4a1d      	ldr	r2, [pc, #116]	; (8003d68 <HAL_InitTick+0xe8>)
 8003cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003cf6:	4b1c      	ldr	r3, [pc, #112]	; (8003d68 <HAL_InitTick+0xe8>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cfc:	4b1a      	ldr	r3, [pc, #104]	; (8003d68 <HAL_InitTick+0xe8>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d02:	4b19      	ldr	r3, [pc, #100]	; (8003d68 <HAL_InitTick+0xe8>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003d08:	4817      	ldr	r0, [pc, #92]	; (8003d68 <HAL_InitTick+0xe8>)
 8003d0a:	f003 feb9 	bl	8007a80 <HAL_TIM_Base_Init>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003d14:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d11b      	bne.n	8003d54 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003d1c:	4812      	ldr	r0, [pc, #72]	; (8003d68 <HAL_InitTick+0xe8>)
 8003d1e:	f003 ff07 	bl	8007b30 <HAL_TIM_Base_Start_IT>
 8003d22:	4603      	mov	r3, r0
 8003d24:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003d28:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d111      	bne.n	8003d54 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003d30:	2036      	movs	r0, #54	; 0x36
 8003d32:	f001 f87f 	bl	8004e34 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2b0f      	cmp	r3, #15
 8003d3a:	d808      	bhi.n	8003d4e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	6879      	ldr	r1, [r7, #4]
 8003d40:	2036      	movs	r0, #54	; 0x36
 8003d42:	f001 f85b 	bl	8004dfc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003d46:	4a0a      	ldr	r2, [pc, #40]	; (8003d70 <HAL_InitTick+0xf0>)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6013      	str	r3, [r2, #0]
 8003d4c:	e002      	b.n	8003d54 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003d54:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3738      	adds	r7, #56	; 0x38
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	40021000 	.word	0x40021000
 8003d64:	431bde83 	.word	0x431bde83
 8003d68:	20000f54 	.word	0x20000f54
 8003d6c:	40001000 	.word	0x40001000
 8003d70:	20000004 	.word	0x20000004

08003d74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d74:	b480      	push	{r7}
 8003d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d78:	e7fe      	b.n	8003d78 <NMI_Handler+0x4>
	...

08003d7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	GPIOC->ODR &= ~GPIO_ODR_13;
 8003d82:	4b0b      	ldr	r3, [pc, #44]	; (8003db0 <HardFault_Handler+0x34>)
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	4a0a      	ldr	r2, [pc, #40]	; (8003db0 <HardFault_Handler+0x34>)
 8003d88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d8c:	6153      	str	r3, [r2, #20]
	uint16_t cntLed = 0;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	80fb      	strh	r3, [r7, #6]

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  if(cntLed == 60000) {
 8003d92:	88fb      	ldrh	r3, [r7, #6]
 8003d94:	f64e 2260 	movw	r2, #60000	; 0xea60
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d105      	bne.n	8003da8 <HardFault_Handler+0x2c>
		  GPIOC->ODR ^= GPIO_ODR_14;
 8003d9c:	4b04      	ldr	r3, [pc, #16]	; (8003db0 <HardFault_Handler+0x34>)
 8003d9e:	695b      	ldr	r3, [r3, #20]
 8003da0:	4a03      	ldr	r2, [pc, #12]	; (8003db0 <HardFault_Handler+0x34>)
 8003da2:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 8003da6:	6153      	str	r3, [r2, #20]
	  }
	  cntLed++;
 8003da8:	88fb      	ldrh	r3, [r7, #6]
 8003daa:	3301      	adds	r3, #1
 8003dac:	80fb      	strh	r3, [r7, #6]
	  if(cntLed == 60000) {
 8003dae:	e7f0      	b.n	8003d92 <HardFault_Handler+0x16>
 8003db0:	48000800 	.word	0x48000800

08003db4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003db4:	b480      	push	{r7}
 8003db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003db8:	e7fe      	b.n	8003db8 <MemManage_Handler+0x4>

08003dba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003dba:	b480      	push	{r7}
 8003dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003dbe:	e7fe      	b.n	8003dbe <BusFault_Handler+0x4>

08003dc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003dc4:	e7fe      	b.n	8003dc4 <UsageFault_Handler+0x4>

08003dc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003dca:	bf00      	nop
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */
	DMA1_Channel2->CCR &= ~DMA_CCR_EN;
 8003dd8:	4b08      	ldr	r3, [pc, #32]	; (8003dfc <DMA1_Channel2_IRQHandler+0x28>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a07      	ldr	r2, [pc, #28]	; (8003dfc <DMA1_Channel2_IRQHandler+0x28>)
 8003dde:	f023 0301 	bic.w	r3, r3, #1
 8003de2:	6013      	str	r3, [r2, #0]
	USART3->CR3 &= ~USART_CR3_DMAT;
 8003de4:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <DMA1_Channel2_IRQHandler+0x2c>)
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	4a05      	ldr	r2, [pc, #20]	; (8003e00 <DMA1_Channel2_IRQHandler+0x2c>)
 8003dea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dee:	6093      	str	r3, [r2, #8]
  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003df0:	4804      	ldr	r0, [pc, #16]	; (8003e04 <DMA1_Channel2_IRQHandler+0x30>)
 8003df2:	f001 f874 	bl	8004ede <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003df6:	bf00      	nop
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	4002001c 	.word	0x4002001c
 8003e00:	40004800 	.word	0x40004800
 8003e04:	2000094c 	.word	0x2000094c

08003e08 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003e0c:	4802      	ldr	r0, [pc, #8]	; (8003e18 <DMA1_Channel3_IRQHandler+0x10>)
 8003e0e:	f001 f866 	bl	8004ede <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003e12:	bf00      	nop
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	20000908 	.word	0x20000908

08003e1c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	if((TIM17->SR & TIM_SR_UIF) == TIM_SR_UIF) {
 8003e20:	4b08      	ldr	r3, [pc, #32]	; (8003e44 <TIM1_TRG_COM_TIM17_IRQHandler+0x28>)
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d105      	bne.n	8003e38 <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>
		EncoderR.timeUpdate = TIMEUPDATED;
 8003e2c:	4b06      	ldr	r3, [pc, #24]	; (8003e48 <TIM1_TRG_COM_TIM17_IRQHandler+0x2c>)
 8003e2e:	2202      	movs	r2, #2
 8003e30:	721a      	strb	r2, [r3, #8]
		EncoderL.timeUpdate = TIMEUPDATED;
 8003e32:	4b06      	ldr	r3, [pc, #24]	; (8003e4c <TIM1_TRG_COM_TIM17_IRQHandler+0x30>)
 8003e34:	2202      	movs	r2, #2
 8003e36:	721a      	strb	r2, [r3, #8]
	}

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8003e38:	4805      	ldr	r0, [pc, #20]	; (8003e50 <TIM1_TRG_COM_TIM17_IRQHandler+0x34>)
 8003e3a:	f003 fecd 	bl	8007bd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8003e3e:	bf00      	nop
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	40014800 	.word	0x40014800
 8003e48:	200009d4 	.word	0x200009d4
 8003e4c:	200009f0 	.word	0x200009f0
 8003e50:	20000834 	.word	0x20000834

08003e54 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003e58:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003e5c:	f001 fa8c 	bl	8005378 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003e60:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003e64:	f001 fa88 	bl	8005378 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003e68:	bf00      	nop
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003e70:	4802      	ldr	r0, [pc, #8]	; (8003e7c <TIM6_DAC_IRQHandler+0x10>)
 8003e72:	f003 feb1 	bl	8007bd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003e76:	bf00      	nop
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	20000f54 	.word	0x20000f54

08003e80 <DMA1_Channel1_IRQHandler>:

/* USER CODE BEGIN 1 */
void DMA1_Channel1_IRQHandler(void)
{
 8003e80:	b480      	push	{r7}
 8003e82:	af00      	add	r7, sp, #0
	__asm__ volatile("NOP");
 8003e84:	bf00      	nop
	DMA1->IFCR |= DMA_IFCR_CGIF1;
 8003e86:	4b06      	ldr	r3, [pc, #24]	; (8003ea0 <DMA1_Channel1_IRQHandler+0x20>)
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	4a05      	ldr	r2, [pc, #20]	; (8003ea0 <DMA1_Channel1_IRQHandler+0x20>)
 8003e8c:	f043 0301 	orr.w	r3, r3, #1
 8003e90:	6053      	str	r3, [r2, #4]
	__asm__ volatile("NOP");
 8003e92:	bf00      	nop
}
 8003e94:	bf00      	nop
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	40020000 	.word	0x40020000

08003ea4 <ADC1_IRQHandler>:

void ADC1_IRQHandler(void)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	af00      	add	r7, sp, #0
	__asm__ volatile("NOP");
 8003ea8:	bf00      	nop
	ADC1->ISR |= ADC_ISR_AWD1;
 8003eaa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eb8:	6013      	str	r3, [r2, #0]
	__asm__ volatile("NOP");
 8003eba:	bf00      	nop
}
 8003ebc:	bf00      	nop
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
	...

08003ec8 <TIM1_UP_TIM16_IRQHandler>:

void TIM1_UP_TIM16_IRQHandler(void)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
	if((TIM1->SR & TIM_SR_UIF) == TIM_SR_UIF) {
 8003ecc:	4b09      	ldr	r3, [pc, #36]	; (8003ef4 <TIM1_UP_TIM16_IRQHandler+0x2c>)
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d108      	bne.n	8003eea <TIM1_UP_TIM16_IRQHandler+0x22>
		EncoderR.posCntUpdate = POSUPDATED;
 8003ed8:	4b07      	ldr	r3, [pc, #28]	; (8003ef8 <TIM1_UP_TIM16_IRQHandler+0x30>)
 8003eda:	2201      	movs	r2, #1
 8003edc:	751a      	strb	r2, [r3, #20]
		TIM1->SR &= ~(TIM_SR_UIF);
 8003ede:	4b05      	ldr	r3, [pc, #20]	; (8003ef4 <TIM1_UP_TIM16_IRQHandler+0x2c>)
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	4a04      	ldr	r2, [pc, #16]	; (8003ef4 <TIM1_UP_TIM16_IRQHandler+0x2c>)
 8003ee4:	f023 0301 	bic.w	r3, r3, #1
 8003ee8:	6113      	str	r3, [r2, #16]
	}
}
 8003eea:	bf00      	nop
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr
 8003ef4:	40012c00 	.word	0x40012c00
 8003ef8:	200009d4 	.word	0x200009d4

08003efc <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
	EncoderL.posCntUpdate = POSUPDATED;
 8003f00:	4b07      	ldr	r3, [pc, #28]	; (8003f20 <TIM2_IRQHandler+0x24>)
 8003f02:	2201      	movs	r2, #1
 8003f04:	751a      	strb	r2, [r3, #20]
	TIM2->SR &= ~(TIM_SR_UIF);
 8003f06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003f10:	f023 0301 	bic.w	r3, r3, #1
 8003f14:	6113      	str	r3, [r2, #16]
}
 8003f16:	bf00      	nop
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr
 8003f20:	200009f0 	.word	0x200009f0

08003f24 <TIM1_BRK_TIM15_IRQHandler>:

void TIM1_BRK_TIM15_IRQHandler(void)
{
 8003f24:	b480      	push	{r7}
 8003f26:	af00      	add	r7, sp, #0
	if((TIM15->SR & TIM_SR_UIF) == TIM_SR_UIF) {
 8003f28:	4b57      	ldr	r3, [pc, #348]	; (8004088 <TIM1_BRK_TIM15_IRQHandler+0x164>)
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	f003 0301 	and.w	r3, r3, #1
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d12c      	bne.n	8003f8e <TIM1_BRK_TIM15_IRQHandler+0x6a>
		__asm__ volatile("NOP");
 8003f34:	bf00      	nop

		GPIOA->ODR &= ~(1<<7); //_3A
 8003f36:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003f3a:	695b      	ldr	r3, [r3, #20]
 8003f3c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003f40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f44:	6153      	str	r3, [r2, #20]
		GPIOB->ODR &= ~(1<<0); //_4A
 8003f46:	4b51      	ldr	r3, [pc, #324]	; (800408c <TIM1_BRK_TIM15_IRQHandler+0x168>)
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	4a50      	ldr	r2, [pc, #320]	; (800408c <TIM1_BRK_TIM15_IRQHandler+0x168>)
 8003f4c:	f023 0301 	bic.w	r3, r3, #1
 8003f50:	6153      	str	r3, [r2, #20]

		GPIOA->ODR &= ~(1<<4); //_1A
 8003f52:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003f56:	695b      	ldr	r3, [r3, #20]
 8003f58:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003f5c:	f023 0310 	bic.w	r3, r3, #16
 8003f60:	6153      	str	r3, [r2, #20]
		GPIOA->ODR &= ~(1<<5); //_2A
 8003f62:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003f66:	695b      	ldr	r3, [r3, #20]
 8003f68:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003f6c:	f023 0320 	bic.w	r3, r3, #32
 8003f70:	6153      	str	r3, [r2, #20]

		TIM15->SR &= ~(TIM_SR_UIF);
 8003f72:	4b45      	ldr	r3, [pc, #276]	; (8004088 <TIM1_BRK_TIM15_IRQHandler+0x164>)
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	4a44      	ldr	r2, [pc, #272]	; (8004088 <TIM1_BRK_TIM15_IRQHandler+0x164>)
 8003f78:	f023 0301 	bic.w	r3, r3, #1
 8003f7c:	6113      	str	r3, [r2, #16]
		if((TIM15->SR & TIM_SR_UIF) == 0) {
 8003f7e:	4b42      	ldr	r3, [pc, #264]	; (8004088 <TIM1_BRK_TIM15_IRQHandler+0x164>)
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d100      	bne.n	8003f8c <TIM1_BRK_TIM15_IRQHandler+0x68>
			__asm__ volatile("NOP");
 8003f8a:	bf00      	nop
		}
		__asm__ volatile("NOP");
 8003f8c:	bf00      	nop
	}

	if((TIM15->SR & TIM_SR_CC1IF) == TIM_SR_CC1IF) {
 8003f8e:	4b3e      	ldr	r3, [pc, #248]	; (8004088 <TIM1_BRK_TIM15_IRQHandler+0x164>)
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d133      	bne.n	8004002 <TIM1_BRK_TIM15_IRQHandler+0xde>
		__asm__ volatile("NOP");
 8003f9a:	bf00      	nop

		if(SoftPwmR.status == 1) {
 8003f9c:	4b3c      	ldr	r3, [pc, #240]	; (8004090 <TIM1_BRK_TIM15_IRQHandler+0x16c>)
 8003f9e:	799b      	ldrb	r3, [r3, #6]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d10e      	bne.n	8003fc2 <TIM1_BRK_TIM15_IRQHandler+0x9e>
			GPIOA->ODR |= (1<<7); //_3A
 8003fa4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003fae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fb2:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~(1<<0); //_4A
 8003fb4:	4b35      	ldr	r3, [pc, #212]	; (800408c <TIM1_BRK_TIM15_IRQHandler+0x168>)
 8003fb6:	695b      	ldr	r3, [r3, #20]
 8003fb8:	4a34      	ldr	r2, [pc, #208]	; (800408c <TIM1_BRK_TIM15_IRQHandler+0x168>)
 8003fba:	f023 0301 	bic.w	r3, r3, #1
 8003fbe:	6153      	str	r3, [r2, #20]
 8003fc0:	e011      	b.n	8003fe6 <TIM1_BRK_TIM15_IRQHandler+0xc2>
		} else if(SoftPwmR.status == 2) {
 8003fc2:	4b33      	ldr	r3, [pc, #204]	; (8004090 <TIM1_BRK_TIM15_IRQHandler+0x16c>)
 8003fc4:	799b      	ldrb	r3, [r3, #6]
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d10d      	bne.n	8003fe6 <TIM1_BRK_TIM15_IRQHandler+0xc2>
			GPIOA->ODR &= ~(1<<7); //_3A
 8003fca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003fce:	695b      	ldr	r3, [r3, #20]
 8003fd0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003fd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fd8:	6153      	str	r3, [r2, #20]
			GPIOB->ODR |= (1<<0); //_4A
 8003fda:	4b2c      	ldr	r3, [pc, #176]	; (800408c <TIM1_BRK_TIM15_IRQHandler+0x168>)
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	4a2b      	ldr	r2, [pc, #172]	; (800408c <TIM1_BRK_TIM15_IRQHandler+0x168>)
 8003fe0:	f043 0301 	orr.w	r3, r3, #1
 8003fe4:	6153      	str	r3, [r2, #20]
		}

		TIM15->SR &= ~(TIM_SR_CC1IF);
 8003fe6:	4b28      	ldr	r3, [pc, #160]	; (8004088 <TIM1_BRK_TIM15_IRQHandler+0x164>)
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	4a27      	ldr	r2, [pc, #156]	; (8004088 <TIM1_BRK_TIM15_IRQHandler+0x164>)
 8003fec:	f023 0302 	bic.w	r3, r3, #2
 8003ff0:	6113      	str	r3, [r2, #16]
		if((TIM15->SR & TIM_SR_CC1IF) == 0) {
 8003ff2:	4b25      	ldr	r3, [pc, #148]	; (8004088 <TIM1_BRK_TIM15_IRQHandler+0x164>)
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d100      	bne.n	8004000 <TIM1_BRK_TIM15_IRQHandler+0xdc>
			__asm__ volatile("NOP");
 8003ffe:	bf00      	nop
		}
		__asm__ volatile("NOP");
 8004000:	bf00      	nop
	}

	if((TIM15->SR & TIM_SR_CC2IF) == TIM_SR_CC2IF) {
 8004002:	4b21      	ldr	r3, [pc, #132]	; (8004088 <TIM1_BRK_TIM15_IRQHandler+0x164>)
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	f003 0304 	and.w	r3, r3, #4
 800400a:	2b04      	cmp	r3, #4
 800400c:	d137      	bne.n	800407e <TIM1_BRK_TIM15_IRQHandler+0x15a>
		__asm__ volatile("NOP");
 800400e:	bf00      	nop

		if(SoftPwmL.status == 1) {
 8004010:	4b20      	ldr	r3, [pc, #128]	; (8004094 <TIM1_BRK_TIM15_IRQHandler+0x170>)
 8004012:	799b      	ldrb	r3, [r3, #6]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d110      	bne.n	800403a <TIM1_BRK_TIM15_IRQHandler+0x116>
			GPIOA->ODR &= ~(1<<4); //_1A
 8004018:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8004022:	f023 0310 	bic.w	r3, r3, #16
 8004026:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (1<<5); //_2A
 8004028:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8004032:	f043 0320 	orr.w	r3, r3, #32
 8004036:	6153      	str	r3, [r2, #20]
 8004038:	e013      	b.n	8004062 <TIM1_BRK_TIM15_IRQHandler+0x13e>
		} else if(SoftPwmL.status == 2) {
 800403a:	4b16      	ldr	r3, [pc, #88]	; (8004094 <TIM1_BRK_TIM15_IRQHandler+0x170>)
 800403c:	799b      	ldrb	r3, [r3, #6]
 800403e:	2b02      	cmp	r3, #2
 8004040:	d10f      	bne.n	8004062 <TIM1_BRK_TIM15_IRQHandler+0x13e>
			GPIOA->ODR |= (1<<4); //_1A
 8004042:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004046:	695b      	ldr	r3, [r3, #20]
 8004048:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800404c:	f043 0310 	orr.w	r3, r3, #16
 8004050:	6153      	str	r3, [r2, #20]
			GPIOA->ODR &= ~(1<<5); //_2A
 8004052:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800405c:	f023 0320 	bic.w	r3, r3, #32
 8004060:	6153      	str	r3, [r2, #20]
		}


		TIM15->SR &= ~(TIM_SR_CC2IF);
 8004062:	4b09      	ldr	r3, [pc, #36]	; (8004088 <TIM1_BRK_TIM15_IRQHandler+0x164>)
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	4a08      	ldr	r2, [pc, #32]	; (8004088 <TIM1_BRK_TIM15_IRQHandler+0x164>)
 8004068:	f023 0304 	bic.w	r3, r3, #4
 800406c:	6113      	str	r3, [r2, #16]
		if((TIM15->SR & TIM_SR_CC2IF) == 0) {
 800406e:	4b06      	ldr	r3, [pc, #24]	; (8004088 <TIM1_BRK_TIM15_IRQHandler+0x164>)
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	f003 0304 	and.w	r3, r3, #4
 8004076:	2b00      	cmp	r3, #0
 8004078:	d100      	bne.n	800407c <TIM1_BRK_TIM15_IRQHandler+0x158>
			__asm__ volatile("NOP");
 800407a:	bf00      	nop
		}
		__asm__ volatile("NOP");
 800407c:	bf00      	nop
	}
}
 800407e:	bf00      	nop
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr
 8004088:	40014000 	.word	0x40014000
 800408c:	48000400 	.word	0x48000400
 8004090:	20000a0c 	.word	0x20000a0c
 8004094:	20000a14 	.word	0x20000a14

08004098 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004098:	b480      	push	{r7}
 800409a:	af00      	add	r7, sp, #0
  return 1;
 800409c:	2301      	movs	r3, #1
}
 800409e:	4618      	mov	r0, r3
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <_kill>:

int _kill(int pid, int sig)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80040b2:	f008 f9ff 	bl	800c4b4 <__errno>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2216      	movs	r2, #22
 80040ba:	601a      	str	r2, [r3, #0]
  return -1;
 80040bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3708      	adds	r7, #8
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <_exit>:

void _exit (int status)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80040d0:	f04f 31ff 	mov.w	r1, #4294967295
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f7ff ffe7 	bl	80040a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80040da:	e7fe      	b.n	80040da <_exit+0x12>

080040dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040e8:	2300      	movs	r3, #0
 80040ea:	617b      	str	r3, [r7, #20]
 80040ec:	e00a      	b.n	8004104 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80040ee:	f3af 8000 	nop.w
 80040f2:	4601      	mov	r1, r0
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	1c5a      	adds	r2, r3, #1
 80040f8:	60ba      	str	r2, [r7, #8]
 80040fa:	b2ca      	uxtb	r2, r1
 80040fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	3301      	adds	r3, #1
 8004102:	617b      	str	r3, [r7, #20]
 8004104:	697a      	ldr	r2, [r7, #20]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	429a      	cmp	r2, r3
 800410a:	dbf0      	blt.n	80040ee <_read+0x12>
  }

  return len;
 800410c:	687b      	ldr	r3, [r7, #4]
}
 800410e:	4618      	mov	r0, r3
 8004110:	3718      	adds	r7, #24
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004116:	b580      	push	{r7, lr}
 8004118:	b086      	sub	sp, #24
 800411a:	af00      	add	r7, sp, #0
 800411c:	60f8      	str	r0, [r7, #12]
 800411e:	60b9      	str	r1, [r7, #8]
 8004120:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004122:	2300      	movs	r3, #0
 8004124:	617b      	str	r3, [r7, #20]
 8004126:	e009      	b.n	800413c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	1c5a      	adds	r2, r3, #1
 800412c:	60ba      	str	r2, [r7, #8]
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	4618      	mov	r0, r3
 8004132:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	3301      	adds	r3, #1
 800413a:	617b      	str	r3, [r7, #20]
 800413c:	697a      	ldr	r2, [r7, #20]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	429a      	cmp	r2, r3
 8004142:	dbf1      	blt.n	8004128 <_write+0x12>
  }
  return len;
 8004144:	687b      	ldr	r3, [r7, #4]
}
 8004146:	4618      	mov	r0, r3
 8004148:	3718      	adds	r7, #24
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <_close>:

int _close(int file)
{
 800414e:	b480      	push	{r7}
 8004150:	b083      	sub	sp, #12
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004156:	f04f 33ff 	mov.w	r3, #4294967295
}
 800415a:	4618      	mov	r0, r3
 800415c:	370c      	adds	r7, #12
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr

08004166 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004166:	b480      	push	{r7}
 8004168:	b083      	sub	sp, #12
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
 800416e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004176:	605a      	str	r2, [r3, #4]
  return 0;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr

08004186 <_isatty>:

int _isatty(int file)
{
 8004186:	b480      	push	{r7}
 8004188:	b083      	sub	sp, #12
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800418e:	2301      	movs	r3, #1
}
 8004190:	4618      	mov	r0, r3
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3714      	adds	r7, #20
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
	...

080041b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b086      	sub	sp, #24
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80041c0:	4a14      	ldr	r2, [pc, #80]	; (8004214 <_sbrk+0x5c>)
 80041c2:	4b15      	ldr	r3, [pc, #84]	; (8004218 <_sbrk+0x60>)
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80041cc:	4b13      	ldr	r3, [pc, #76]	; (800421c <_sbrk+0x64>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d102      	bne.n	80041da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80041d4:	4b11      	ldr	r3, [pc, #68]	; (800421c <_sbrk+0x64>)
 80041d6:	4a12      	ldr	r2, [pc, #72]	; (8004220 <_sbrk+0x68>)
 80041d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80041da:	4b10      	ldr	r3, [pc, #64]	; (800421c <_sbrk+0x64>)
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4413      	add	r3, r2
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d207      	bcs.n	80041f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80041e8:	f008 f964 	bl	800c4b4 <__errno>
 80041ec:	4603      	mov	r3, r0
 80041ee:	220c      	movs	r2, #12
 80041f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80041f2:	f04f 33ff 	mov.w	r3, #4294967295
 80041f6:	e009      	b.n	800420c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80041f8:	4b08      	ldr	r3, [pc, #32]	; (800421c <_sbrk+0x64>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80041fe:	4b07      	ldr	r3, [pc, #28]	; (800421c <_sbrk+0x64>)
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4413      	add	r3, r2
 8004206:	4a05      	ldr	r2, [pc, #20]	; (800421c <_sbrk+0x64>)
 8004208:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800420a:	68fb      	ldr	r3, [r7, #12]
}
 800420c:	4618      	mov	r0, r3
 800420e:	3718      	adds	r7, #24
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	20004000 	.word	0x20004000
 8004218:	00000400 	.word	0x00000400
 800421c:	20000fa0 	.word	0x20000fa0
 8004220:	20002da8 	.word	0x20002da8

08004224 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004224:	b480      	push	{r7}
 8004226:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004228:	4b06      	ldr	r3, [pc, #24]	; (8004244 <SystemInit+0x20>)
 800422a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800422e:	4a05      	ldr	r2, [pc, #20]	; (8004244 <SystemInit+0x20>)
 8004230:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004234:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004238:	bf00      	nop
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	e000ed00 	.word	0xe000ed00

08004248 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004248:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004280 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800424c:	f7ff ffea 	bl	8004224 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004250:	480c      	ldr	r0, [pc, #48]	; (8004284 <LoopForever+0x6>)
  ldr r1, =_edata
 8004252:	490d      	ldr	r1, [pc, #52]	; (8004288 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004254:	4a0d      	ldr	r2, [pc, #52]	; (800428c <LoopForever+0xe>)
  movs r3, #0
 8004256:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004258:	e002      	b.n	8004260 <LoopCopyDataInit>

0800425a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800425a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800425c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800425e:	3304      	adds	r3, #4

08004260 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004260:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004262:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004264:	d3f9      	bcc.n	800425a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004266:	4a0a      	ldr	r2, [pc, #40]	; (8004290 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004268:	4c0a      	ldr	r4, [pc, #40]	; (8004294 <LoopForever+0x16>)
  movs r3, #0
 800426a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800426c:	e001      	b.n	8004272 <LoopFillZerobss>

0800426e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800426e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004270:	3204      	adds	r2, #4

08004272 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004272:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004274:	d3fb      	bcc.n	800426e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004276:	f008 f923 	bl	800c4c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800427a:	f7fd f8b1 	bl	80013e0 <main>

0800427e <LoopForever>:

LoopForever:
    b LoopForever
 800427e:	e7fe      	b.n	800427e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004280:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8004284:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004288:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 800428c:	0800fcf8 	.word	0x0800fcf8
  ldr r2, =_sbss
 8004290:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8004294:	20002da4 	.word	0x20002da4

08004298 <COMP2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004298:	e7fe      	b.n	8004298 <COMP2_IRQHandler>
	...

0800429c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042a0:	4b08      	ldr	r3, [pc, #32]	; (80042c4 <HAL_Init+0x28>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a07      	ldr	r2, [pc, #28]	; (80042c4 <HAL_Init+0x28>)
 80042a6:	f043 0310 	orr.w	r3, r3, #16
 80042aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042ac:	2003      	movs	r0, #3
 80042ae:	f000 fd9a 	bl	8004de6 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80042b2:	2004      	movs	r0, #4
 80042b4:	f7ff fce4 	bl	8003c80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80042b8:	f7ff fb66 	bl	8003988 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	40022000 	.word	0x40022000

080042c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80042c8:	b480      	push	{r7}
 80042ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80042cc:	4b06      	ldr	r3, [pc, #24]	; (80042e8 <HAL_IncTick+0x20>)
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	461a      	mov	r2, r3
 80042d2:	4b06      	ldr	r3, [pc, #24]	; (80042ec <HAL_IncTick+0x24>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4413      	add	r3, r2
 80042d8:	4a04      	ldr	r2, [pc, #16]	; (80042ec <HAL_IncTick+0x24>)
 80042da:	6013      	str	r3, [r2, #0]
}
 80042dc:	bf00      	nop
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	20000008 	.word	0x20000008
 80042ec:	20000fa4 	.word	0x20000fa4

080042f0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042f0:	b480      	push	{r7}
 80042f2:	af00      	add	r7, sp, #0
  return uwTick;  
 80042f4:	4b03      	ldr	r3, [pc, #12]	; (8004304 <HAL_GetTick+0x14>)
 80042f6:	681b      	ldr	r3, [r3, #0]
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	20000fa4 	.word	0x20000fa4

08004308 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004310:	f7ff ffee 	bl	80042f0 <HAL_GetTick>
 8004314:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004320:	d005      	beq.n	800432e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004322:	4b0a      	ldr	r3, [pc, #40]	; (800434c <HAL_Delay+0x44>)
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	461a      	mov	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	4413      	add	r3, r2
 800432c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800432e:	bf00      	nop
 8004330:	f7ff ffde 	bl	80042f0 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	429a      	cmp	r2, r3
 800433e:	d8f7      	bhi.n	8004330 <HAL_Delay+0x28>
  {
  }
}
 8004340:	bf00      	nop
 8004342:	bf00      	nop
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	20000008 	.word	0x20000008

08004350 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b09a      	sub	sp, #104	; 0x68
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004358:	2300      	movs	r3, #0
 800435a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800435e:	2300      	movs	r3, #0
 8004360:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8004362:	2300      	movs	r3, #0
 8004364:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d101      	bne.n	8004370 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e169      	b.n	8004644 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437a:	f003 0310 	and.w	r3, r3, #16
 800437e:	2b00      	cmp	r3, #0
 8004380:	d176      	bne.n	8004470 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004386:	2b00      	cmp	r3, #0
 8004388:	d152      	bne.n	8004430 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f7ff fb17 	bl	80039d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d13b      	bne.n	8004430 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f000 fc01 	bl	8004bc0 <ADC_Disable>
 80043be:	4603      	mov	r3, r0
 80043c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c8:	f003 0310 	and.w	r3, r3, #16
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d12f      	bne.n	8004430 <HAL_ADC_Init+0xe0>
 80043d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d12b      	bne.n	8004430 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043dc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80043e0:	f023 0302 	bic.w	r3, r3, #2
 80043e4:	f043 0202 	orr.w	r2, r3, #2
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	689a      	ldr	r2, [r3, #8]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80043fa:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	689a      	ldr	r2, [r3, #8]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800440a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800440c:	4b8f      	ldr	r3, [pc, #572]	; (800464c <HAL_ADC_Init+0x2fc>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a8f      	ldr	r2, [pc, #572]	; (8004650 <HAL_ADC_Init+0x300>)
 8004412:	fba2 2303 	umull	r2, r3, r2, r3
 8004416:	0c9a      	lsrs	r2, r3, #18
 8004418:	4613      	mov	r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	4413      	add	r3, r2
 800441e:	005b      	lsls	r3, r3, #1
 8004420:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004422:	e002      	b.n	800442a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	3b01      	subs	r3, #1
 8004428:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1f9      	bne.n	8004424 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d007      	beq.n	800444e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8004448:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800444c:	d110      	bne.n	8004470 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004452:	f023 0312 	bic.w	r3, r3, #18
 8004456:	f043 0210 	orr.w	r2, r3, #16
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004462:	f043 0201 	orr.w	r2, r3, #1
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004474:	f003 0310 	and.w	r3, r3, #16
 8004478:	2b00      	cmp	r3, #0
 800447a:	f040 80d6 	bne.w	800462a <HAL_ADC_Init+0x2da>
 800447e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004482:	2b00      	cmp	r3, #0
 8004484:	f040 80d1 	bne.w	800462a <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8004492:	2b00      	cmp	r3, #0
 8004494:	f040 80c9 	bne.w	800462a <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80044a0:	f043 0202 	orr.w	r2, r3, #2
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80044a8:	4b6a      	ldr	r3, [pc, #424]	; (8004654 <HAL_ADC_Init+0x304>)
 80044aa:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80044ac:	2300      	movs	r3, #0
 80044ae:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f003 0303 	and.w	r3, r3, #3
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d108      	bne.n	80044d0 <HAL_ADC_Init+0x180>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0301 	and.w	r3, r3, #1
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d101      	bne.n	80044d0 <HAL_ADC_Init+0x180>
 80044cc:	2301      	movs	r3, #1
 80044ce:	e000      	b.n	80044d2 <HAL_ADC_Init+0x182>
 80044d0:	2300      	movs	r3, #0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d11c      	bne.n	8004510 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80044d6:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d010      	beq.n	80044fe <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f003 0303 	and.w	r3, r3, #3
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d107      	bne.n	80044f8 <HAL_ADC_Init+0x1a8>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0301 	and.w	r3, r3, #1
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d101      	bne.n	80044f8 <HAL_ADC_Init+0x1a8>
 80044f4:	2301      	movs	r3, #1
 80044f6:	e000      	b.n	80044fa <HAL_ADC_Init+0x1aa>
 80044f8:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d108      	bne.n	8004510 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80044fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	431a      	orrs	r2, r3
 800450c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800450e:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	7e5b      	ldrb	r3, [r3, #25]
 8004514:	035b      	lsls	r3, r3, #13
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800451a:	2a01      	cmp	r2, #1
 800451c:	d002      	beq.n	8004524 <HAL_ADC_Init+0x1d4>
 800451e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004522:	e000      	b.n	8004526 <HAL_ADC_Init+0x1d6>
 8004524:	2200      	movs	r2, #0
 8004526:	431a      	orrs	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	431a      	orrs	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	4313      	orrs	r3, r2
 8004534:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004536:	4313      	orrs	r3, r2
 8004538:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d11b      	bne.n	800457c <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	7e5b      	ldrb	r3, [r3, #25]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d109      	bne.n	8004560 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004550:	3b01      	subs	r3, #1
 8004552:	045a      	lsls	r2, r3, #17
 8004554:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004556:	4313      	orrs	r3, r2
 8004558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800455c:	663b      	str	r3, [r7, #96]	; 0x60
 800455e:	e00d      	b.n	800457c <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004564:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004568:	f043 0220 	orr.w	r2, r3, #32
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004574:	f043 0201 	orr.w	r2, r3, #1
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004580:	2b01      	cmp	r3, #1
 8004582:	d007      	beq.n	8004594 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458c:	4313      	orrs	r3, r2
 800458e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004590:	4313      	orrs	r3, r2
 8004592:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f003 030c 	and.w	r3, r3, #12
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d114      	bne.n	80045cc <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	6812      	ldr	r2, [r2, #0]
 80045ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045b0:	f023 0302 	bic.w	r3, r3, #2
 80045b4:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	7e1b      	ldrb	r3, [r3, #24]
 80045ba:	039a      	lsls	r2, r3, #14
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80045c2:	005b      	lsls	r3, r3, #1
 80045c4:	4313      	orrs	r3, r2
 80045c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80045c8:	4313      	orrs	r3, r2
 80045ca:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68da      	ldr	r2, [r3, #12]
 80045d2:	4b21      	ldr	r3, [pc, #132]	; (8004658 <HAL_ADC_Init+0x308>)
 80045d4:	4013      	ands	r3, r2
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	6812      	ldr	r2, [r2, #0]
 80045da:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80045dc:	430b      	orrs	r3, r1
 80045de:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d10c      	bne.n	8004602 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ee:	f023 010f 	bic.w	r1, r3, #15
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	69db      	ldr	r3, [r3, #28]
 80045f6:	1e5a      	subs	r2, r3, #1
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	430a      	orrs	r2, r1
 80045fe:	631a      	str	r2, [r3, #48]	; 0x30
 8004600:	e007      	b.n	8004612 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f022 020f 	bic.w	r2, r2, #15
 8004610:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461c:	f023 0303 	bic.w	r3, r3, #3
 8004620:	f043 0201 	orr.w	r2, r3, #1
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	641a      	str	r2, [r3, #64]	; 0x40
 8004628:	e00a      	b.n	8004640 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462e:	f023 0312 	bic.w	r3, r3, #18
 8004632:	f043 0210 	orr.w	r2, r3, #16
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800463a:	2301      	movs	r3, #1
 800463c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8004640:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004644:	4618      	mov	r0, r3
 8004646:	3768      	adds	r7, #104	; 0x68
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	20000000 	.word	0x20000000
 8004650:	431bde83 	.word	0x431bde83
 8004654:	50000300 	.word	0x50000300
 8004658:	fff0c007 	.word	0xfff0c007

0800465c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800465c:	b480      	push	{r7}
 800465e:	b09b      	sub	sp, #108	; 0x6c
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004666:	2300      	movs	r3, #0
 8004668:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800466c:	2300      	movs	r3, #0
 800466e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004676:	2b01      	cmp	r3, #1
 8004678:	d101      	bne.n	800467e <HAL_ADC_ConfigChannel+0x22>
 800467a:	2302      	movs	r3, #2
 800467c:	e295      	b.n	8004baa <HAL_ADC_ConfigChannel+0x54e>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2201      	movs	r2, #1
 8004682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f003 0304 	and.w	r3, r3, #4
 8004690:	2b00      	cmp	r3, #0
 8004692:	f040 8279 	bne.w	8004b88 <HAL_ADC_ConfigChannel+0x52c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	2b04      	cmp	r3, #4
 800469c:	d81c      	bhi.n	80046d8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	685a      	ldr	r2, [r3, #4]
 80046a8:	4613      	mov	r3, r2
 80046aa:	005b      	lsls	r3, r3, #1
 80046ac:	4413      	add	r3, r2
 80046ae:	005b      	lsls	r3, r3, #1
 80046b0:	461a      	mov	r2, r3
 80046b2:	231f      	movs	r3, #31
 80046b4:	4093      	lsls	r3, r2
 80046b6:	43db      	mvns	r3, r3
 80046b8:	4019      	ands	r1, r3
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	6818      	ldr	r0, [r3, #0]
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	685a      	ldr	r2, [r3, #4]
 80046c2:	4613      	mov	r3, r2
 80046c4:	005b      	lsls	r3, r3, #1
 80046c6:	4413      	add	r3, r2
 80046c8:	005b      	lsls	r3, r3, #1
 80046ca:	fa00 f203 	lsl.w	r2, r0, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	430a      	orrs	r2, r1
 80046d4:	631a      	str	r2, [r3, #48]	; 0x30
 80046d6:	e063      	b.n	80047a0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	2b09      	cmp	r3, #9
 80046de:	d81e      	bhi.n	800471e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	685a      	ldr	r2, [r3, #4]
 80046ea:	4613      	mov	r3, r2
 80046ec:	005b      	lsls	r3, r3, #1
 80046ee:	4413      	add	r3, r2
 80046f0:	005b      	lsls	r3, r3, #1
 80046f2:	3b1e      	subs	r3, #30
 80046f4:	221f      	movs	r2, #31
 80046f6:	fa02 f303 	lsl.w	r3, r2, r3
 80046fa:	43db      	mvns	r3, r3
 80046fc:	4019      	ands	r1, r3
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	6818      	ldr	r0, [r3, #0]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	685a      	ldr	r2, [r3, #4]
 8004706:	4613      	mov	r3, r2
 8004708:	005b      	lsls	r3, r3, #1
 800470a:	4413      	add	r3, r2
 800470c:	005b      	lsls	r3, r3, #1
 800470e:	3b1e      	subs	r3, #30
 8004710:	fa00 f203 	lsl.w	r2, r0, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	430a      	orrs	r2, r1
 800471a:	635a      	str	r2, [r3, #52]	; 0x34
 800471c:	e040      	b.n	80047a0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	2b0e      	cmp	r3, #14
 8004724:	d81e      	bhi.n	8004764 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	685a      	ldr	r2, [r3, #4]
 8004730:	4613      	mov	r3, r2
 8004732:	005b      	lsls	r3, r3, #1
 8004734:	4413      	add	r3, r2
 8004736:	005b      	lsls	r3, r3, #1
 8004738:	3b3c      	subs	r3, #60	; 0x3c
 800473a:	221f      	movs	r2, #31
 800473c:	fa02 f303 	lsl.w	r3, r2, r3
 8004740:	43db      	mvns	r3, r3
 8004742:	4019      	ands	r1, r3
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	6818      	ldr	r0, [r3, #0]
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	685a      	ldr	r2, [r3, #4]
 800474c:	4613      	mov	r3, r2
 800474e:	005b      	lsls	r3, r3, #1
 8004750:	4413      	add	r3, r2
 8004752:	005b      	lsls	r3, r3, #1
 8004754:	3b3c      	subs	r3, #60	; 0x3c
 8004756:	fa00 f203 	lsl.w	r2, r0, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	430a      	orrs	r2, r1
 8004760:	639a      	str	r2, [r3, #56]	; 0x38
 8004762:	e01d      	b.n	80047a0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	685a      	ldr	r2, [r3, #4]
 800476e:	4613      	mov	r3, r2
 8004770:	005b      	lsls	r3, r3, #1
 8004772:	4413      	add	r3, r2
 8004774:	005b      	lsls	r3, r3, #1
 8004776:	3b5a      	subs	r3, #90	; 0x5a
 8004778:	221f      	movs	r2, #31
 800477a:	fa02 f303 	lsl.w	r3, r2, r3
 800477e:	43db      	mvns	r3, r3
 8004780:	4019      	ands	r1, r3
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	6818      	ldr	r0, [r3, #0]
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	685a      	ldr	r2, [r3, #4]
 800478a:	4613      	mov	r3, r2
 800478c:	005b      	lsls	r3, r3, #1
 800478e:	4413      	add	r3, r2
 8004790:	005b      	lsls	r3, r3, #1
 8004792:	3b5a      	subs	r3, #90	; 0x5a
 8004794:	fa00 f203 	lsl.w	r2, r0, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	430a      	orrs	r2, r1
 800479e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f003 030c 	and.w	r3, r3, #12
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f040 80e5 	bne.w	800497a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2b09      	cmp	r3, #9
 80047b6:	d91c      	bls.n	80047f2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	6999      	ldr	r1, [r3, #24]
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	4613      	mov	r3, r2
 80047c4:	005b      	lsls	r3, r3, #1
 80047c6:	4413      	add	r3, r2
 80047c8:	3b1e      	subs	r3, #30
 80047ca:	2207      	movs	r2, #7
 80047cc:	fa02 f303 	lsl.w	r3, r2, r3
 80047d0:	43db      	mvns	r3, r3
 80047d2:	4019      	ands	r1, r3
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	6898      	ldr	r0, [r3, #8]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	4613      	mov	r3, r2
 80047de:	005b      	lsls	r3, r3, #1
 80047e0:	4413      	add	r3, r2
 80047e2:	3b1e      	subs	r3, #30
 80047e4:	fa00 f203 	lsl.w	r2, r0, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	430a      	orrs	r2, r1
 80047ee:	619a      	str	r2, [r3, #24]
 80047f0:	e019      	b.n	8004826 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	6959      	ldr	r1, [r3, #20]
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	4613      	mov	r3, r2
 80047fe:	005b      	lsls	r3, r3, #1
 8004800:	4413      	add	r3, r2
 8004802:	2207      	movs	r2, #7
 8004804:	fa02 f303 	lsl.w	r3, r2, r3
 8004808:	43db      	mvns	r3, r3
 800480a:	4019      	ands	r1, r3
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	6898      	ldr	r0, [r3, #8]
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	4613      	mov	r3, r2
 8004816:	005b      	lsls	r3, r3, #1
 8004818:	4413      	add	r3, r2
 800481a:	fa00 f203 	lsl.w	r2, r0, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	430a      	orrs	r2, r1
 8004824:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	695a      	ldr	r2, [r3, #20]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	08db      	lsrs	r3, r3, #3
 8004832:	f003 0303 	and.w	r3, r3, #3
 8004836:	005b      	lsls	r3, r3, #1
 8004838:	fa02 f303 	lsl.w	r3, r2, r3
 800483c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	3b01      	subs	r3, #1
 8004844:	2b03      	cmp	r3, #3
 8004846:	d84f      	bhi.n	80048e8 <HAL_ADC_ConfigChannel+0x28c>
 8004848:	a201      	add	r2, pc, #4	; (adr r2, 8004850 <HAL_ADC_ConfigChannel+0x1f4>)
 800484a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800484e:	bf00      	nop
 8004850:	08004861 	.word	0x08004861
 8004854:	08004883 	.word	0x08004883
 8004858:	080048a5 	.word	0x080048a5
 800485c:	080048c7 	.word	0x080048c7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004866:	4b97      	ldr	r3, [pc, #604]	; (8004ac4 <HAL_ADC_ConfigChannel+0x468>)
 8004868:	4013      	ands	r3, r2
 800486a:	683a      	ldr	r2, [r7, #0]
 800486c:	6812      	ldr	r2, [r2, #0]
 800486e:	0691      	lsls	r1, r2, #26
 8004870:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004872:	430a      	orrs	r2, r1
 8004874:	431a      	orrs	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800487e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004880:	e07b      	b.n	800497a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004888:	4b8e      	ldr	r3, [pc, #568]	; (8004ac4 <HAL_ADC_ConfigChannel+0x468>)
 800488a:	4013      	ands	r3, r2
 800488c:	683a      	ldr	r2, [r7, #0]
 800488e:	6812      	ldr	r2, [r2, #0]
 8004890:	0691      	lsls	r1, r2, #26
 8004892:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004894:	430a      	orrs	r2, r1
 8004896:	431a      	orrs	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80048a0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80048a2:	e06a      	b.n	800497a <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80048aa:	4b86      	ldr	r3, [pc, #536]	; (8004ac4 <HAL_ADC_ConfigChannel+0x468>)
 80048ac:	4013      	ands	r3, r2
 80048ae:	683a      	ldr	r2, [r7, #0]
 80048b0:	6812      	ldr	r2, [r2, #0]
 80048b2:	0691      	lsls	r1, r2, #26
 80048b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80048b6:	430a      	orrs	r2, r1
 80048b8:	431a      	orrs	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80048c2:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80048c4:	e059      	b.n	800497a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80048cc:	4b7d      	ldr	r3, [pc, #500]	; (8004ac4 <HAL_ADC_ConfigChannel+0x468>)
 80048ce:	4013      	ands	r3, r2
 80048d0:	683a      	ldr	r2, [r7, #0]
 80048d2:	6812      	ldr	r2, [r2, #0]
 80048d4:	0691      	lsls	r1, r2, #26
 80048d6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80048d8:	430a      	orrs	r2, r1
 80048da:	431a      	orrs	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80048e4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80048e6:	e048      	b.n	800497a <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	069b      	lsls	r3, r3, #26
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d107      	bne.n	800490c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800490a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004912:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	069b      	lsls	r3, r3, #26
 800491c:	429a      	cmp	r2, r3
 800491e:	d107      	bne.n	8004930 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800492e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004936:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	069b      	lsls	r3, r3, #26
 8004940:	429a      	cmp	r2, r3
 8004942:	d107      	bne.n	8004954 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004952:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800495a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	069b      	lsls	r3, r3, #26
 8004964:	429a      	cmp	r2, r3
 8004966:	d107      	bne.n	8004978 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004976:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8004978:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f003 0303 	and.w	r3, r3, #3
 8004984:	2b01      	cmp	r3, #1
 8004986:	d108      	bne.n	800499a <HAL_ADC_ConfigChannel+0x33e>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0301 	and.w	r3, r3, #1
 8004992:	2b01      	cmp	r3, #1
 8004994:	d101      	bne.n	800499a <HAL_ADC_ConfigChannel+0x33e>
 8004996:	2301      	movs	r3, #1
 8004998:	e000      	b.n	800499c <HAL_ADC_ConfigChannel+0x340>
 800499a:	2300      	movs	r3, #0
 800499c:	2b00      	cmp	r3, #0
 800499e:	f040 80fe 	bne.w	8004b9e <HAL_ADC_ConfigChannel+0x542>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d00f      	beq.n	80049ca <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2201      	movs	r2, #1
 80049b8:	fa02 f303 	lsl.w	r3, r2, r3
 80049bc:	43da      	mvns	r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	400a      	ands	r2, r1
 80049c4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80049c8:	e049      	b.n	8004a5e <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2201      	movs	r2, #1
 80049d8:	409a      	lsls	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	430a      	orrs	r2, r1
 80049e0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2b09      	cmp	r3, #9
 80049ea:	d91c      	bls.n	8004a26 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	6999      	ldr	r1, [r3, #24]
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	4613      	mov	r3, r2
 80049f8:	005b      	lsls	r3, r3, #1
 80049fa:	4413      	add	r3, r2
 80049fc:	3b1b      	subs	r3, #27
 80049fe:	2207      	movs	r2, #7
 8004a00:	fa02 f303 	lsl.w	r3, r2, r3
 8004a04:	43db      	mvns	r3, r3
 8004a06:	4019      	ands	r1, r3
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	6898      	ldr	r0, [r3, #8]
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	4613      	mov	r3, r2
 8004a12:	005b      	lsls	r3, r3, #1
 8004a14:	4413      	add	r3, r2
 8004a16:	3b1b      	subs	r3, #27
 8004a18:	fa00 f203 	lsl.w	r2, r0, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	430a      	orrs	r2, r1
 8004a22:	619a      	str	r2, [r3, #24]
 8004a24:	e01b      	b.n	8004a5e <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	6959      	ldr	r1, [r3, #20]
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	1c5a      	adds	r2, r3, #1
 8004a32:	4613      	mov	r3, r2
 8004a34:	005b      	lsls	r3, r3, #1
 8004a36:	4413      	add	r3, r2
 8004a38:	2207      	movs	r2, #7
 8004a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3e:	43db      	mvns	r3, r3
 8004a40:	4019      	ands	r1, r3
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	6898      	ldr	r0, [r3, #8]
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	1c5a      	adds	r2, r3, #1
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	005b      	lsls	r3, r3, #1
 8004a50:	4413      	add	r3, r2
 8004a52:	fa00 f203 	lsl.w	r2, r0, r3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	430a      	orrs	r2, r1
 8004a5c:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004a5e:	4b1a      	ldr	r3, [pc, #104]	; (8004ac8 <HAL_ADC_ConfigChannel+0x46c>)
 8004a60:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2b10      	cmp	r3, #16
 8004a68:	d105      	bne.n	8004a76 <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004a6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d014      	beq.n	8004aa0 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004a7a:	2b11      	cmp	r3, #17
 8004a7c:	d105      	bne.n	8004a8a <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004a7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00a      	beq.n	8004aa0 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004a8e:	2b12      	cmp	r3, #18
 8004a90:	f040 8085 	bne.w	8004b9e <HAL_ADC_ConfigChannel+0x542>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8004a94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d17e      	bne.n	8004b9e <HAL_ADC_ConfigChannel+0x542>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f003 0303 	and.w	r3, r3, #3
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d10c      	bne.n	8004acc <HAL_ADC_ConfigChannel+0x470>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0301 	and.w	r3, r3, #1
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d105      	bne.n	8004acc <HAL_ADC_ConfigChannel+0x470>
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e004      	b.n	8004ace <HAL_ADC_ConfigChannel+0x472>
 8004ac4:	83fff000 	.word	0x83fff000
 8004ac8:	50000300 	.word	0x50000300
 8004acc:	2300      	movs	r3, #0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d150      	bne.n	8004b74 <HAL_ADC_ConfigChannel+0x518>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004ad2:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d010      	beq.n	8004afa <HAL_ADC_ConfigChannel+0x49e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	f003 0303 	and.w	r3, r3, #3
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d107      	bne.n	8004af4 <HAL_ADC_ConfigChannel+0x498>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0301 	and.w	r3, r3, #1
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d101      	bne.n	8004af4 <HAL_ADC_ConfigChannel+0x498>
 8004af0:	2301      	movs	r3, #1
 8004af2:	e000      	b.n	8004af6 <HAL_ADC_ConfigChannel+0x49a>
 8004af4:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d13c      	bne.n	8004b74 <HAL_ADC_ConfigChannel+0x518>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2b10      	cmp	r3, #16
 8004b00:	d11d      	bne.n	8004b3e <HAL_ADC_ConfigChannel+0x4e2>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b0a:	d118      	bne.n	8004b3e <HAL_ADC_ConfigChannel+0x4e2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8004b0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004b14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b16:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004b18:	4b27      	ldr	r3, [pc, #156]	; (8004bb8 <HAL_ADC_ConfigChannel+0x55c>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a27      	ldr	r2, [pc, #156]	; (8004bbc <HAL_ADC_ConfigChannel+0x560>)
 8004b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b22:	0c9a      	lsrs	r2, r3, #18
 8004b24:	4613      	mov	r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	4413      	add	r3, r2
 8004b2a:	005b      	lsls	r3, r3, #1
 8004b2c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004b2e:	e002      	b.n	8004b36 <HAL_ADC_ConfigChannel+0x4da>
          {
            wait_loop_index--;
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	3b01      	subs	r3, #1
 8004b34:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1f9      	bne.n	8004b30 <HAL_ADC_ConfigChannel+0x4d4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004b3c:	e02e      	b.n	8004b9c <HAL_ADC_ConfigChannel+0x540>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2b11      	cmp	r3, #17
 8004b44:	d10b      	bne.n	8004b5e <HAL_ADC_ConfigChannel+0x502>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b4e:	d106      	bne.n	8004b5e <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8004b50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004b58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b5a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004b5c:	e01e      	b.n	8004b9c <HAL_ADC_ConfigChannel+0x540>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2b12      	cmp	r3, #18
 8004b64:	d11a      	bne.n	8004b9c <HAL_ADC_ConfigChannel+0x540>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8004b66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004b6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b70:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004b72:	e013      	b.n	8004b9c <HAL_ADC_ConfigChannel+0x540>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b78:	f043 0220 	orr.w	r2, r3, #32
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004b86:	e00a      	b.n	8004b9e <HAL_ADC_ConfigChannel+0x542>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8c:	f043 0220 	orr.w	r2, r3, #32
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004b9a:	e000      	b.n	8004b9e <HAL_ADC_ConfigChannel+0x542>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004b9c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004ba6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	376c      	adds	r7, #108	; 0x6c
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	20000000 	.word	0x20000000
 8004bbc:	431bde83 	.word	0x431bde83

08004bc0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f003 0303 	and.w	r3, r3, #3
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d108      	bne.n	8004bec <ADC_Disable+0x2c>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0301 	and.w	r3, r3, #1
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d101      	bne.n	8004bec <ADC_Disable+0x2c>
 8004be8:	2301      	movs	r3, #1
 8004bea:	e000      	b.n	8004bee <ADC_Disable+0x2e>
 8004bec:	2300      	movs	r3, #0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d047      	beq.n	8004c82 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f003 030d 	and.w	r3, r3, #13
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d10f      	bne.n	8004c20 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	689a      	ldr	r2, [r3, #8]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f042 0202 	orr.w	r2, r2, #2
 8004c0e:	609a      	str	r2, [r3, #8]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2203      	movs	r2, #3
 8004c16:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8004c18:	f7ff fb6a 	bl	80042f0 <HAL_GetTick>
 8004c1c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004c1e:	e029      	b.n	8004c74 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c24:	f043 0210 	orr.w	r2, r3, #16
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c30:	f043 0201 	orr.w	r2, r3, #1
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e023      	b.n	8004c84 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004c3c:	f7ff fb58 	bl	80042f0 <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d914      	bls.n	8004c74 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f003 0301 	and.w	r3, r3, #1
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d10d      	bne.n	8004c74 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5c:	f043 0210 	orr.w	r2, r3, #16
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c68:	f043 0201 	orr.w	r2, r3, #1
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e007      	b.n	8004c84 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d0dc      	beq.n	8004c3c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3710      	adds	r7, #16
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <__NVIC_SetPriorityGrouping>:
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b085      	sub	sp, #20
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f003 0307 	and.w	r3, r3, #7
 8004c9a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c9c:	4b0c      	ldr	r3, [pc, #48]	; (8004cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ca2:	68ba      	ldr	r2, [r7, #8]
 8004ca4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ca8:	4013      	ands	r3, r2
 8004caa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004cb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004cb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004cbe:	4a04      	ldr	r2, [pc, #16]	; (8004cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	60d3      	str	r3, [r2, #12]
}
 8004cc4:	bf00      	nop
 8004cc6:	3714      	adds	r7, #20
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr
 8004cd0:	e000ed00 	.word	0xe000ed00

08004cd4 <__NVIC_GetPriorityGrouping>:
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004cd8:	4b04      	ldr	r3, [pc, #16]	; (8004cec <__NVIC_GetPriorityGrouping+0x18>)
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	0a1b      	lsrs	r3, r3, #8
 8004cde:	f003 0307 	and.w	r3, r3, #7
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr
 8004cec:	e000ed00 	.word	0xe000ed00

08004cf0 <__NVIC_EnableIRQ>:
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	db0b      	blt.n	8004d1a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d02:	79fb      	ldrb	r3, [r7, #7]
 8004d04:	f003 021f 	and.w	r2, r3, #31
 8004d08:	4907      	ldr	r1, [pc, #28]	; (8004d28 <__NVIC_EnableIRQ+0x38>)
 8004d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d0e:	095b      	lsrs	r3, r3, #5
 8004d10:	2001      	movs	r0, #1
 8004d12:	fa00 f202 	lsl.w	r2, r0, r2
 8004d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004d1a:	bf00      	nop
 8004d1c:	370c      	adds	r7, #12
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
 8004d26:	bf00      	nop
 8004d28:	e000e100 	.word	0xe000e100

08004d2c <__NVIC_SetPriority>:
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	4603      	mov	r3, r0
 8004d34:	6039      	str	r1, [r7, #0]
 8004d36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	db0a      	blt.n	8004d56 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	b2da      	uxtb	r2, r3
 8004d44:	490c      	ldr	r1, [pc, #48]	; (8004d78 <__NVIC_SetPriority+0x4c>)
 8004d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d4a:	0112      	lsls	r2, r2, #4
 8004d4c:	b2d2      	uxtb	r2, r2
 8004d4e:	440b      	add	r3, r1
 8004d50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004d54:	e00a      	b.n	8004d6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	b2da      	uxtb	r2, r3
 8004d5a:	4908      	ldr	r1, [pc, #32]	; (8004d7c <__NVIC_SetPriority+0x50>)
 8004d5c:	79fb      	ldrb	r3, [r7, #7]
 8004d5e:	f003 030f 	and.w	r3, r3, #15
 8004d62:	3b04      	subs	r3, #4
 8004d64:	0112      	lsls	r2, r2, #4
 8004d66:	b2d2      	uxtb	r2, r2
 8004d68:	440b      	add	r3, r1
 8004d6a:	761a      	strb	r2, [r3, #24]
}
 8004d6c:	bf00      	nop
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr
 8004d78:	e000e100 	.word	0xe000e100
 8004d7c:	e000ed00 	.word	0xe000ed00

08004d80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b089      	sub	sp, #36	; 0x24
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f003 0307 	and.w	r3, r3, #7
 8004d92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	f1c3 0307 	rsb	r3, r3, #7
 8004d9a:	2b04      	cmp	r3, #4
 8004d9c:	bf28      	it	cs
 8004d9e:	2304      	movcs	r3, #4
 8004da0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	3304      	adds	r3, #4
 8004da6:	2b06      	cmp	r3, #6
 8004da8:	d902      	bls.n	8004db0 <NVIC_EncodePriority+0x30>
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	3b03      	subs	r3, #3
 8004dae:	e000      	b.n	8004db2 <NVIC_EncodePriority+0x32>
 8004db0:	2300      	movs	r3, #0
 8004db2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004db4:	f04f 32ff 	mov.w	r2, #4294967295
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	fa02 f303 	lsl.w	r3, r2, r3
 8004dbe:	43da      	mvns	r2, r3
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	401a      	ands	r2, r3
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004dc8:	f04f 31ff 	mov.w	r1, #4294967295
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	fa01 f303 	lsl.w	r3, r1, r3
 8004dd2:	43d9      	mvns	r1, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004dd8:	4313      	orrs	r3, r2
         );
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3724      	adds	r7, #36	; 0x24
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr

08004de6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004de6:	b580      	push	{r7, lr}
 8004de8:	b082      	sub	sp, #8
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f7ff ff4c 	bl	8004c8c <__NVIC_SetPriorityGrouping>
}
 8004df4:	bf00      	nop
 8004df6:	3708      	adds	r7, #8
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b086      	sub	sp, #24
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	4603      	mov	r3, r0
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	607a      	str	r2, [r7, #4]
 8004e08:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004e0e:	f7ff ff61 	bl	8004cd4 <__NVIC_GetPriorityGrouping>
 8004e12:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	68b9      	ldr	r1, [r7, #8]
 8004e18:	6978      	ldr	r0, [r7, #20]
 8004e1a:	f7ff ffb1 	bl	8004d80 <NVIC_EncodePriority>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e24:	4611      	mov	r1, r2
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7ff ff80 	bl	8004d2c <__NVIC_SetPriority>
}
 8004e2c:	bf00      	nop
 8004e2e:	3718      	adds	r7, #24
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e42:	4618      	mov	r0, r3
 8004e44:	f7ff ff54 	bl	8004cf0 <__NVIC_EnableIRQ>
}
 8004e48:	bf00      	nop
 8004e4a:	3708      	adds	r7, #8
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d101      	bne.n	8004e66 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e037      	b.n	8004ed6 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2202      	movs	r2, #2
 8004e6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004e7c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004e80:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004e8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e96:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	695b      	ldr	r3, [r3, #20]
 8004e9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ea2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	69db      	ldr	r3, [r3, #28]
 8004ea8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f000 f8b3 	bl	8005024 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
}  
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3710      	adds	r7, #16
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}

08004ede <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b084      	sub	sp, #16
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efa:	2204      	movs	r2, #4
 8004efc:	409a      	lsls	r2, r3
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	4013      	ands	r3, r2
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d024      	beq.n	8004f50 <HAL_DMA_IRQHandler+0x72>
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	f003 0304 	and.w	r3, r3, #4
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d01f      	beq.n	8004f50 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0320 	and.w	r3, r3, #32
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d107      	bne.n	8004f2e <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f022 0204 	bic.w	r2, r2, #4
 8004f2c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f36:	2104      	movs	r1, #4
 8004f38:	fa01 f202 	lsl.w	r2, r1, r2
 8004f3c:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d06a      	beq.n	800501c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8004f4e:	e065      	b.n	800501c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f54:	2202      	movs	r2, #2
 8004f56:	409a      	lsls	r2, r3
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d02c      	beq.n	8004fba <HAL_DMA_IRQHandler+0xdc>
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	f003 0302 	and.w	r3, r3, #2
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d027      	beq.n	8004fba <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0320 	and.w	r3, r3, #32
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d10b      	bne.n	8004f90 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f022 020a 	bic.w	r2, r2, #10
 8004f86:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f98:	2102      	movs	r1, #2
 8004f9a:	fa01 f202 	lsl.w	r2, r1, r2
 8004f9e:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d035      	beq.n	800501c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8004fb8:	e030      	b.n	800501c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbe:	2208      	movs	r2, #8
 8004fc0:	409a      	lsls	r2, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d028      	beq.n	800501c <HAL_DMA_IRQHandler+0x13e>
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	f003 0308 	and.w	r3, r3, #8
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d023      	beq.n	800501c <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f022 020e 	bic.w	r2, r2, #14
 8004fe2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fec:	2101      	movs	r1, #1
 8004fee:	fa01 f202 	lsl.w	r2, r1, r2
 8004ff2:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500e:	2b00      	cmp	r3, #0
 8005010:	d004      	beq.n	800501c <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	4798      	blx	r3
    }
  }
}  
 800501a:	e7ff      	b.n	800501c <HAL_DMA_IRQHandler+0x13e>
 800501c:	bf00      	nop
 800501e:	3710      	adds	r7, #16
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	461a      	mov	r2, r3
 8005032:	4b09      	ldr	r3, [pc, #36]	; (8005058 <DMA_CalcBaseAndBitshift+0x34>)
 8005034:	4413      	add	r3, r2
 8005036:	4a09      	ldr	r2, [pc, #36]	; (800505c <DMA_CalcBaseAndBitshift+0x38>)
 8005038:	fba2 2303 	umull	r2, r3, r2, r3
 800503c:	091b      	lsrs	r3, r3, #4
 800503e:	009a      	lsls	r2, r3, #2
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a06      	ldr	r2, [pc, #24]	; (8005060 <DMA_CalcBaseAndBitshift+0x3c>)
 8005048:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800504a:	bf00      	nop
 800504c:	370c      	adds	r7, #12
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	bffdfff8 	.word	0xbffdfff8
 800505c:	cccccccd 	.word	0xcccccccd
 8005060:	40020000 	.word	0x40020000

08005064 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005064:	b480      	push	{r7}
 8005066:	b087      	sub	sp, #28
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800506e:	2300      	movs	r3, #0
 8005070:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005072:	e14e      	b.n	8005312 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	2101      	movs	r1, #1
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	fa01 f303 	lsl.w	r3, r1, r3
 8005080:	4013      	ands	r3, r2
 8005082:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2b00      	cmp	r3, #0
 8005088:	f000 8140 	beq.w	800530c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f003 0303 	and.w	r3, r3, #3
 8005094:	2b01      	cmp	r3, #1
 8005096:	d005      	beq.n	80050a4 <HAL_GPIO_Init+0x40>
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	f003 0303 	and.w	r3, r3, #3
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	d130      	bne.n	8005106 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	005b      	lsls	r3, r3, #1
 80050ae:	2203      	movs	r2, #3
 80050b0:	fa02 f303 	lsl.w	r3, r2, r3
 80050b4:	43db      	mvns	r3, r3
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	4013      	ands	r3, r2
 80050ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	68da      	ldr	r2, [r3, #12]
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	005b      	lsls	r3, r3, #1
 80050c4:	fa02 f303 	lsl.w	r3, r2, r3
 80050c8:	693a      	ldr	r2, [r7, #16]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	693a      	ldr	r2, [r7, #16]
 80050d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80050da:	2201      	movs	r2, #1
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	fa02 f303 	lsl.w	r3, r2, r3
 80050e2:	43db      	mvns	r3, r3
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	4013      	ands	r3, r2
 80050e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	091b      	lsrs	r3, r3, #4
 80050f0:	f003 0201 	and.w	r2, r3, #1
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	fa02 f303 	lsl.w	r3, r2, r3
 80050fa:	693a      	ldr	r2, [r7, #16]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	693a      	ldr	r2, [r7, #16]
 8005104:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	f003 0303 	and.w	r3, r3, #3
 800510e:	2b03      	cmp	r3, #3
 8005110:	d017      	beq.n	8005142 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	005b      	lsls	r3, r3, #1
 800511c:	2203      	movs	r2, #3
 800511e:	fa02 f303 	lsl.w	r3, r2, r3
 8005122:	43db      	mvns	r3, r3
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	4013      	ands	r3, r2
 8005128:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	689a      	ldr	r2, [r3, #8]
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	005b      	lsls	r3, r3, #1
 8005132:	fa02 f303 	lsl.w	r3, r2, r3
 8005136:	693a      	ldr	r2, [r7, #16]
 8005138:	4313      	orrs	r3, r2
 800513a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	693a      	ldr	r2, [r7, #16]
 8005140:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	f003 0303 	and.w	r3, r3, #3
 800514a:	2b02      	cmp	r3, #2
 800514c:	d123      	bne.n	8005196 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	08da      	lsrs	r2, r3, #3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	3208      	adds	r2, #8
 8005156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800515a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	f003 0307 	and.w	r3, r3, #7
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	220f      	movs	r2, #15
 8005166:	fa02 f303 	lsl.w	r3, r2, r3
 800516a:	43db      	mvns	r3, r3
 800516c:	693a      	ldr	r2, [r7, #16]
 800516e:	4013      	ands	r3, r2
 8005170:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	691a      	ldr	r2, [r3, #16]
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	f003 0307 	and.w	r3, r3, #7
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	fa02 f303 	lsl.w	r3, r2, r3
 8005182:	693a      	ldr	r2, [r7, #16]
 8005184:	4313      	orrs	r3, r2
 8005186:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	08da      	lsrs	r2, r3, #3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	3208      	adds	r2, #8
 8005190:	6939      	ldr	r1, [r7, #16]
 8005192:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	005b      	lsls	r3, r3, #1
 80051a0:	2203      	movs	r2, #3
 80051a2:	fa02 f303 	lsl.w	r3, r2, r3
 80051a6:	43db      	mvns	r3, r3
 80051a8:	693a      	ldr	r2, [r7, #16]
 80051aa:	4013      	ands	r3, r2
 80051ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f003 0203 	and.w	r2, r3, #3
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	005b      	lsls	r3, r3, #1
 80051ba:	fa02 f303 	lsl.w	r3, r2, r3
 80051be:	693a      	ldr	r2, [r7, #16]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	693a      	ldr	r2, [r7, #16]
 80051c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	f000 809a 	beq.w	800530c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051d8:	4b55      	ldr	r3, [pc, #340]	; (8005330 <HAL_GPIO_Init+0x2cc>)
 80051da:	699b      	ldr	r3, [r3, #24]
 80051dc:	4a54      	ldr	r2, [pc, #336]	; (8005330 <HAL_GPIO_Init+0x2cc>)
 80051de:	f043 0301 	orr.w	r3, r3, #1
 80051e2:	6193      	str	r3, [r2, #24]
 80051e4:	4b52      	ldr	r3, [pc, #328]	; (8005330 <HAL_GPIO_Init+0x2cc>)
 80051e6:	699b      	ldr	r3, [r3, #24]
 80051e8:	f003 0301 	and.w	r3, r3, #1
 80051ec:	60bb      	str	r3, [r7, #8]
 80051ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80051f0:	4a50      	ldr	r2, [pc, #320]	; (8005334 <HAL_GPIO_Init+0x2d0>)
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	089b      	lsrs	r3, r3, #2
 80051f6:	3302      	adds	r3, #2
 80051f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	f003 0303 	and.w	r3, r3, #3
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	220f      	movs	r2, #15
 8005208:	fa02 f303 	lsl.w	r3, r2, r3
 800520c:	43db      	mvns	r3, r3
 800520e:	693a      	ldr	r2, [r7, #16]
 8005210:	4013      	ands	r3, r2
 8005212:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800521a:	d013      	beq.n	8005244 <HAL_GPIO_Init+0x1e0>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a46      	ldr	r2, [pc, #280]	; (8005338 <HAL_GPIO_Init+0x2d4>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d00d      	beq.n	8005240 <HAL_GPIO_Init+0x1dc>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a45      	ldr	r2, [pc, #276]	; (800533c <HAL_GPIO_Init+0x2d8>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d007      	beq.n	800523c <HAL_GPIO_Init+0x1d8>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a44      	ldr	r2, [pc, #272]	; (8005340 <HAL_GPIO_Init+0x2dc>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d101      	bne.n	8005238 <HAL_GPIO_Init+0x1d4>
 8005234:	2303      	movs	r3, #3
 8005236:	e006      	b.n	8005246 <HAL_GPIO_Init+0x1e2>
 8005238:	2305      	movs	r3, #5
 800523a:	e004      	b.n	8005246 <HAL_GPIO_Init+0x1e2>
 800523c:	2302      	movs	r3, #2
 800523e:	e002      	b.n	8005246 <HAL_GPIO_Init+0x1e2>
 8005240:	2301      	movs	r3, #1
 8005242:	e000      	b.n	8005246 <HAL_GPIO_Init+0x1e2>
 8005244:	2300      	movs	r3, #0
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	f002 0203 	and.w	r2, r2, #3
 800524c:	0092      	lsls	r2, r2, #2
 800524e:	4093      	lsls	r3, r2
 8005250:	693a      	ldr	r2, [r7, #16]
 8005252:	4313      	orrs	r3, r2
 8005254:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005256:	4937      	ldr	r1, [pc, #220]	; (8005334 <HAL_GPIO_Init+0x2d0>)
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	089b      	lsrs	r3, r3, #2
 800525c:	3302      	adds	r3, #2
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005264:	4b37      	ldr	r3, [pc, #220]	; (8005344 <HAL_GPIO_Init+0x2e0>)
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	43db      	mvns	r3, r3
 800526e:	693a      	ldr	r2, [r7, #16]
 8005270:	4013      	ands	r3, r2
 8005272:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d003      	beq.n	8005288 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8005280:	693a      	ldr	r2, [r7, #16]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	4313      	orrs	r3, r2
 8005286:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005288:	4a2e      	ldr	r2, [pc, #184]	; (8005344 <HAL_GPIO_Init+0x2e0>)
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800528e:	4b2d      	ldr	r3, [pc, #180]	; (8005344 <HAL_GPIO_Init+0x2e0>)
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	43db      	mvns	r3, r3
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	4013      	ands	r3, r2
 800529c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d003      	beq.n	80052b2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80052aa:	693a      	ldr	r2, [r7, #16]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80052b2:	4a24      	ldr	r2, [pc, #144]	; (8005344 <HAL_GPIO_Init+0x2e0>)
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80052b8:	4b22      	ldr	r3, [pc, #136]	; (8005344 <HAL_GPIO_Init+0x2e0>)
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	43db      	mvns	r3, r3
 80052c2:	693a      	ldr	r2, [r7, #16]
 80052c4:	4013      	ands	r3, r2
 80052c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d003      	beq.n	80052dc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80052d4:	693a      	ldr	r2, [r7, #16]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	4313      	orrs	r3, r2
 80052da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80052dc:	4a19      	ldr	r2, [pc, #100]	; (8005344 <HAL_GPIO_Init+0x2e0>)
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80052e2:	4b18      	ldr	r3, [pc, #96]	; (8005344 <HAL_GPIO_Init+0x2e0>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	43db      	mvns	r3, r3
 80052ec:	693a      	ldr	r2, [r7, #16]
 80052ee:	4013      	ands	r3, r2
 80052f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d003      	beq.n	8005306 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80052fe:	693a      	ldr	r2, [r7, #16]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	4313      	orrs	r3, r2
 8005304:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005306:	4a0f      	ldr	r2, [pc, #60]	; (8005344 <HAL_GPIO_Init+0x2e0>)
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	3301      	adds	r3, #1
 8005310:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	fa22 f303 	lsr.w	r3, r2, r3
 800531c:	2b00      	cmp	r3, #0
 800531e:	f47f aea9 	bne.w	8005074 <HAL_GPIO_Init+0x10>
  }
}
 8005322:	bf00      	nop
 8005324:	bf00      	nop
 8005326:	371c      	adds	r7, #28
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr
 8005330:	40021000 	.word	0x40021000
 8005334:	40010000 	.word	0x40010000
 8005338:	48000400 	.word	0x48000400
 800533c:	48000800 	.word	0x48000800
 8005340:	48000c00 	.word	0x48000c00
 8005344:	40010400 	.word	0x40010400

08005348 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	460b      	mov	r3, r1
 8005352:	807b      	strh	r3, [r7, #2]
 8005354:	4613      	mov	r3, r2
 8005356:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005358:	787b      	ldrb	r3, [r7, #1]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d003      	beq.n	8005366 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800535e:	887a      	ldrh	r2, [r7, #2]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005364:	e002      	b.n	800536c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005366:	887a      	ldrh	r2, [r7, #2]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800536c:	bf00      	nop
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
 800537e:	4603      	mov	r3, r0
 8005380:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005382:	4b08      	ldr	r3, [pc, #32]	; (80053a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005384:	695a      	ldr	r2, [r3, #20]
 8005386:	88fb      	ldrh	r3, [r7, #6]
 8005388:	4013      	ands	r3, r2
 800538a:	2b00      	cmp	r3, #0
 800538c:	d006      	beq.n	800539c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800538e:	4a05      	ldr	r2, [pc, #20]	; (80053a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005390:	88fb      	ldrh	r3, [r7, #6]
 8005392:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005394:	88fb      	ldrh	r3, [r7, #6]
 8005396:	4618      	mov	r0, r3
 8005398:	f000 f806 	bl	80053a8 <HAL_GPIO_EXTI_Callback>
  }
}
 800539c:	bf00      	nop
 800539e:	3708      	adds	r7, #8
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	40010400 	.word	0x40010400

080053a8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	4603      	mov	r3, r0
 80053b0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80053b2:	bf00      	nop
 80053b4:	370c      	adds	r7, #12
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
	...

080053c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80053d0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80053d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d102      	bne.n	80053e6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	f001 b823 	b.w	800642c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0301 	and.w	r3, r3, #1
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	f000 817d 	beq.w	80056f6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80053fc:	4bbc      	ldr	r3, [pc, #752]	; (80056f0 <HAL_RCC_OscConfig+0x330>)
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	f003 030c 	and.w	r3, r3, #12
 8005404:	2b04      	cmp	r3, #4
 8005406:	d00c      	beq.n	8005422 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005408:	4bb9      	ldr	r3, [pc, #740]	; (80056f0 <HAL_RCC_OscConfig+0x330>)
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f003 030c 	and.w	r3, r3, #12
 8005410:	2b08      	cmp	r3, #8
 8005412:	d15c      	bne.n	80054ce <HAL_RCC_OscConfig+0x10e>
 8005414:	4bb6      	ldr	r3, [pc, #728]	; (80056f0 <HAL_RCC_OscConfig+0x330>)
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800541c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005420:	d155      	bne.n	80054ce <HAL_RCC_OscConfig+0x10e>
 8005422:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005426:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800542a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800542e:	fa93 f3a3 	rbit	r3, r3
 8005432:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005436:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800543a:	fab3 f383 	clz	r3, r3
 800543e:	b2db      	uxtb	r3, r3
 8005440:	095b      	lsrs	r3, r3, #5
 8005442:	b2db      	uxtb	r3, r3
 8005444:	f043 0301 	orr.w	r3, r3, #1
 8005448:	b2db      	uxtb	r3, r3
 800544a:	2b01      	cmp	r3, #1
 800544c:	d102      	bne.n	8005454 <HAL_RCC_OscConfig+0x94>
 800544e:	4ba8      	ldr	r3, [pc, #672]	; (80056f0 <HAL_RCC_OscConfig+0x330>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	e015      	b.n	8005480 <HAL_RCC_OscConfig+0xc0>
 8005454:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005458:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800545c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8005460:	fa93 f3a3 	rbit	r3, r3
 8005464:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8005468:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800546c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8005470:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8005474:	fa93 f3a3 	rbit	r3, r3
 8005478:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800547c:	4b9c      	ldr	r3, [pc, #624]	; (80056f0 <HAL_RCC_OscConfig+0x330>)
 800547e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005480:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005484:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8005488:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800548c:	fa92 f2a2 	rbit	r2, r2
 8005490:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8005494:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8005498:	fab2 f282 	clz	r2, r2
 800549c:	b2d2      	uxtb	r2, r2
 800549e:	f042 0220 	orr.w	r2, r2, #32
 80054a2:	b2d2      	uxtb	r2, r2
 80054a4:	f002 021f 	and.w	r2, r2, #31
 80054a8:	2101      	movs	r1, #1
 80054aa:	fa01 f202 	lsl.w	r2, r1, r2
 80054ae:	4013      	ands	r3, r2
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	f000 811f 	beq.w	80056f4 <HAL_RCC_OscConfig+0x334>
 80054b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	f040 8116 	bne.w	80056f4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	f000 bfaf 	b.w	800642c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054de:	d106      	bne.n	80054ee <HAL_RCC_OscConfig+0x12e>
 80054e0:	4b83      	ldr	r3, [pc, #524]	; (80056f0 <HAL_RCC_OscConfig+0x330>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a82      	ldr	r2, [pc, #520]	; (80056f0 <HAL_RCC_OscConfig+0x330>)
 80054e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054ea:	6013      	str	r3, [r2, #0]
 80054ec:	e036      	b.n	800555c <HAL_RCC_OscConfig+0x19c>
 80054ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d10c      	bne.n	8005518 <HAL_RCC_OscConfig+0x158>
 80054fe:	4b7c      	ldr	r3, [pc, #496]	; (80056f0 <HAL_RCC_OscConfig+0x330>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a7b      	ldr	r2, [pc, #492]	; (80056f0 <HAL_RCC_OscConfig+0x330>)
 8005504:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005508:	6013      	str	r3, [r2, #0]
 800550a:	4b79      	ldr	r3, [pc, #484]	; (80056f0 <HAL_RCC_OscConfig+0x330>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a78      	ldr	r2, [pc, #480]	; (80056f0 <HAL_RCC_OscConfig+0x330>)
 8005510:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005514:	6013      	str	r3, [r2, #0]
 8005516:	e021      	b.n	800555c <HAL_RCC_OscConfig+0x19c>
 8005518:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800551c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005528:	d10c      	bne.n	8005544 <HAL_RCC_OscConfig+0x184>
 800552a:	4b71      	ldr	r3, [pc, #452]	; (80056f0 <HAL_RCC_OscConfig+0x330>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a70      	ldr	r2, [pc, #448]	; (80056f0 <HAL_RCC_OscConfig+0x330>)
 8005530:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005534:	6013      	str	r3, [r2, #0]
 8005536:	4b6e      	ldr	r3, [pc, #440]	; (80056f0 <HAL_RCC_OscConfig+0x330>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a6d      	ldr	r2, [pc, #436]	; (80056f0 <HAL_RCC_OscConfig+0x330>)
 800553c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005540:	6013      	str	r3, [r2, #0]
 8005542:	e00b      	b.n	800555c <HAL_RCC_OscConfig+0x19c>
 8005544:	4b6a      	ldr	r3, [pc, #424]	; (80056f0 <HAL_RCC_OscConfig+0x330>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a69      	ldr	r2, [pc, #420]	; (80056f0 <HAL_RCC_OscConfig+0x330>)
 800554a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800554e:	6013      	str	r3, [r2, #0]
 8005550:	4b67      	ldr	r3, [pc, #412]	; (80056f0 <HAL_RCC_OscConfig+0x330>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a66      	ldr	r2, [pc, #408]	; (80056f0 <HAL_RCC_OscConfig+0x330>)
 8005556:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800555a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800555c:	4b64      	ldr	r3, [pc, #400]	; (80056f0 <HAL_RCC_OscConfig+0x330>)
 800555e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005560:	f023 020f 	bic.w	r2, r3, #15
 8005564:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005568:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	495f      	ldr	r1, [pc, #380]	; (80056f0 <HAL_RCC_OscConfig+0x330>)
 8005572:	4313      	orrs	r3, r2
 8005574:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005576:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800557a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d059      	beq.n	800563a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005586:	f7fe feb3 	bl	80042f0 <HAL_GetTick>
 800558a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800558e:	e00a      	b.n	80055a6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005590:	f7fe feae 	bl	80042f0 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	2b64      	cmp	r3, #100	; 0x64
 800559e:	d902      	bls.n	80055a6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	f000 bf43 	b.w	800642c <HAL_RCC_OscConfig+0x106c>
 80055a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80055aa:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ae:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80055b2:	fa93 f3a3 	rbit	r3, r3
 80055b6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80055ba:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055be:	fab3 f383 	clz	r3, r3
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	095b      	lsrs	r3, r3, #5
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	f043 0301 	orr.w	r3, r3, #1
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d102      	bne.n	80055d8 <HAL_RCC_OscConfig+0x218>
 80055d2:	4b47      	ldr	r3, [pc, #284]	; (80056f0 <HAL_RCC_OscConfig+0x330>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	e015      	b.n	8005604 <HAL_RCC_OscConfig+0x244>
 80055d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80055dc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055e0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80055e4:	fa93 f3a3 	rbit	r3, r3
 80055e8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80055ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80055f0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80055f4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80055f8:	fa93 f3a3 	rbit	r3, r3
 80055fc:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8005600:	4b3b      	ldr	r3, [pc, #236]	; (80056f0 <HAL_RCC_OscConfig+0x330>)
 8005602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005604:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005608:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800560c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8005610:	fa92 f2a2 	rbit	r2, r2
 8005614:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8005618:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800561c:	fab2 f282 	clz	r2, r2
 8005620:	b2d2      	uxtb	r2, r2
 8005622:	f042 0220 	orr.w	r2, r2, #32
 8005626:	b2d2      	uxtb	r2, r2
 8005628:	f002 021f 	and.w	r2, r2, #31
 800562c:	2101      	movs	r1, #1
 800562e:	fa01 f202 	lsl.w	r2, r1, r2
 8005632:	4013      	ands	r3, r2
 8005634:	2b00      	cmp	r3, #0
 8005636:	d0ab      	beq.n	8005590 <HAL_RCC_OscConfig+0x1d0>
 8005638:	e05d      	b.n	80056f6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800563a:	f7fe fe59 	bl	80042f0 <HAL_GetTick>
 800563e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005642:	e00a      	b.n	800565a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005644:	f7fe fe54 	bl	80042f0 <HAL_GetTick>
 8005648:	4602      	mov	r2, r0
 800564a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800564e:	1ad3      	subs	r3, r2, r3
 8005650:	2b64      	cmp	r3, #100	; 0x64
 8005652:	d902      	bls.n	800565a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8005654:	2303      	movs	r3, #3
 8005656:	f000 bee9 	b.w	800642c <HAL_RCC_OscConfig+0x106c>
 800565a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800565e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005662:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8005666:	fa93 f3a3 	rbit	r3, r3
 800566a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800566e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005672:	fab3 f383 	clz	r3, r3
 8005676:	b2db      	uxtb	r3, r3
 8005678:	095b      	lsrs	r3, r3, #5
 800567a:	b2db      	uxtb	r3, r3
 800567c:	f043 0301 	orr.w	r3, r3, #1
 8005680:	b2db      	uxtb	r3, r3
 8005682:	2b01      	cmp	r3, #1
 8005684:	d102      	bne.n	800568c <HAL_RCC_OscConfig+0x2cc>
 8005686:	4b1a      	ldr	r3, [pc, #104]	; (80056f0 <HAL_RCC_OscConfig+0x330>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	e015      	b.n	80056b8 <HAL_RCC_OscConfig+0x2f8>
 800568c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005690:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005694:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8005698:	fa93 f3a3 	rbit	r3, r3
 800569c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80056a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80056a4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80056a8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80056ac:	fa93 f3a3 	rbit	r3, r3
 80056b0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80056b4:	4b0e      	ldr	r3, [pc, #56]	; (80056f0 <HAL_RCC_OscConfig+0x330>)
 80056b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80056bc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80056c0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80056c4:	fa92 f2a2 	rbit	r2, r2
 80056c8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80056cc:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80056d0:	fab2 f282 	clz	r2, r2
 80056d4:	b2d2      	uxtb	r2, r2
 80056d6:	f042 0220 	orr.w	r2, r2, #32
 80056da:	b2d2      	uxtb	r2, r2
 80056dc:	f002 021f 	and.w	r2, r2, #31
 80056e0:	2101      	movs	r1, #1
 80056e2:	fa01 f202 	lsl.w	r2, r1, r2
 80056e6:	4013      	ands	r3, r2
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1ab      	bne.n	8005644 <HAL_RCC_OscConfig+0x284>
 80056ec:	e003      	b.n	80056f6 <HAL_RCC_OscConfig+0x336>
 80056ee:	bf00      	nop
 80056f0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0302 	and.w	r3, r3, #2
 8005706:	2b00      	cmp	r3, #0
 8005708:	f000 817d 	beq.w	8005a06 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800570c:	4ba6      	ldr	r3, [pc, #664]	; (80059a8 <HAL_RCC_OscConfig+0x5e8>)
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	f003 030c 	and.w	r3, r3, #12
 8005714:	2b00      	cmp	r3, #0
 8005716:	d00b      	beq.n	8005730 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005718:	4ba3      	ldr	r3, [pc, #652]	; (80059a8 <HAL_RCC_OscConfig+0x5e8>)
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	f003 030c 	and.w	r3, r3, #12
 8005720:	2b08      	cmp	r3, #8
 8005722:	d172      	bne.n	800580a <HAL_RCC_OscConfig+0x44a>
 8005724:	4ba0      	ldr	r3, [pc, #640]	; (80059a8 <HAL_RCC_OscConfig+0x5e8>)
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d16c      	bne.n	800580a <HAL_RCC_OscConfig+0x44a>
 8005730:	2302      	movs	r3, #2
 8005732:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005736:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800573a:	fa93 f3a3 	rbit	r3, r3
 800573e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8005742:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005746:	fab3 f383 	clz	r3, r3
 800574a:	b2db      	uxtb	r3, r3
 800574c:	095b      	lsrs	r3, r3, #5
 800574e:	b2db      	uxtb	r3, r3
 8005750:	f043 0301 	orr.w	r3, r3, #1
 8005754:	b2db      	uxtb	r3, r3
 8005756:	2b01      	cmp	r3, #1
 8005758:	d102      	bne.n	8005760 <HAL_RCC_OscConfig+0x3a0>
 800575a:	4b93      	ldr	r3, [pc, #588]	; (80059a8 <HAL_RCC_OscConfig+0x5e8>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	e013      	b.n	8005788 <HAL_RCC_OscConfig+0x3c8>
 8005760:	2302      	movs	r3, #2
 8005762:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005766:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800576a:	fa93 f3a3 	rbit	r3, r3
 800576e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8005772:	2302      	movs	r3, #2
 8005774:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8005778:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800577c:	fa93 f3a3 	rbit	r3, r3
 8005780:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8005784:	4b88      	ldr	r3, [pc, #544]	; (80059a8 <HAL_RCC_OscConfig+0x5e8>)
 8005786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005788:	2202      	movs	r2, #2
 800578a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800578e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8005792:	fa92 f2a2 	rbit	r2, r2
 8005796:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800579a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800579e:	fab2 f282 	clz	r2, r2
 80057a2:	b2d2      	uxtb	r2, r2
 80057a4:	f042 0220 	orr.w	r2, r2, #32
 80057a8:	b2d2      	uxtb	r2, r2
 80057aa:	f002 021f 	and.w	r2, r2, #31
 80057ae:	2101      	movs	r1, #1
 80057b0:	fa01 f202 	lsl.w	r2, r1, r2
 80057b4:	4013      	ands	r3, r2
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00a      	beq.n	80057d0 <HAL_RCC_OscConfig+0x410>
 80057ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d002      	beq.n	80057d0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	f000 be2e 	b.w	800642c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057d0:	4b75      	ldr	r3, [pc, #468]	; (80059a8 <HAL_RCC_OscConfig+0x5e8>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	695b      	ldr	r3, [r3, #20]
 80057e4:	21f8      	movs	r1, #248	; 0xf8
 80057e6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057ea:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80057ee:	fa91 f1a1 	rbit	r1, r1
 80057f2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80057f6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80057fa:	fab1 f181 	clz	r1, r1
 80057fe:	b2c9      	uxtb	r1, r1
 8005800:	408b      	lsls	r3, r1
 8005802:	4969      	ldr	r1, [pc, #420]	; (80059a8 <HAL_RCC_OscConfig+0x5e8>)
 8005804:	4313      	orrs	r3, r2
 8005806:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005808:	e0fd      	b.n	8005a06 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800580a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800580e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	2b00      	cmp	r3, #0
 8005818:	f000 8088 	beq.w	800592c <HAL_RCC_OscConfig+0x56c>
 800581c:	2301      	movs	r3, #1
 800581e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005822:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005826:	fa93 f3a3 	rbit	r3, r3
 800582a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800582e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005832:	fab3 f383 	clz	r3, r3
 8005836:	b2db      	uxtb	r3, r3
 8005838:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800583c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	461a      	mov	r2, r3
 8005844:	2301      	movs	r3, #1
 8005846:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005848:	f7fe fd52 	bl	80042f0 <HAL_GetTick>
 800584c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005850:	e00a      	b.n	8005868 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005852:	f7fe fd4d 	bl	80042f0 <HAL_GetTick>
 8005856:	4602      	mov	r2, r0
 8005858:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	2b02      	cmp	r3, #2
 8005860:	d902      	bls.n	8005868 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8005862:	2303      	movs	r3, #3
 8005864:	f000 bde2 	b.w	800642c <HAL_RCC_OscConfig+0x106c>
 8005868:	2302      	movs	r3, #2
 800586a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800586e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8005872:	fa93 f3a3 	rbit	r3, r3
 8005876:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800587a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800587e:	fab3 f383 	clz	r3, r3
 8005882:	b2db      	uxtb	r3, r3
 8005884:	095b      	lsrs	r3, r3, #5
 8005886:	b2db      	uxtb	r3, r3
 8005888:	f043 0301 	orr.w	r3, r3, #1
 800588c:	b2db      	uxtb	r3, r3
 800588e:	2b01      	cmp	r3, #1
 8005890:	d102      	bne.n	8005898 <HAL_RCC_OscConfig+0x4d8>
 8005892:	4b45      	ldr	r3, [pc, #276]	; (80059a8 <HAL_RCC_OscConfig+0x5e8>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	e013      	b.n	80058c0 <HAL_RCC_OscConfig+0x500>
 8005898:	2302      	movs	r3, #2
 800589a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800589e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80058a2:	fa93 f3a3 	rbit	r3, r3
 80058a6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80058aa:	2302      	movs	r3, #2
 80058ac:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80058b0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80058b4:	fa93 f3a3 	rbit	r3, r3
 80058b8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80058bc:	4b3a      	ldr	r3, [pc, #232]	; (80059a8 <HAL_RCC_OscConfig+0x5e8>)
 80058be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c0:	2202      	movs	r2, #2
 80058c2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80058c6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80058ca:	fa92 f2a2 	rbit	r2, r2
 80058ce:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80058d2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80058d6:	fab2 f282 	clz	r2, r2
 80058da:	b2d2      	uxtb	r2, r2
 80058dc:	f042 0220 	orr.w	r2, r2, #32
 80058e0:	b2d2      	uxtb	r2, r2
 80058e2:	f002 021f 	and.w	r2, r2, #31
 80058e6:	2101      	movs	r1, #1
 80058e8:	fa01 f202 	lsl.w	r2, r1, r2
 80058ec:	4013      	ands	r3, r2
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d0af      	beq.n	8005852 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058f2:	4b2d      	ldr	r3, [pc, #180]	; (80059a8 <HAL_RCC_OscConfig+0x5e8>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	21f8      	movs	r1, #248	; 0xf8
 8005908:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800590c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005910:	fa91 f1a1 	rbit	r1, r1
 8005914:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8005918:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800591c:	fab1 f181 	clz	r1, r1
 8005920:	b2c9      	uxtb	r1, r1
 8005922:	408b      	lsls	r3, r1
 8005924:	4920      	ldr	r1, [pc, #128]	; (80059a8 <HAL_RCC_OscConfig+0x5e8>)
 8005926:	4313      	orrs	r3, r2
 8005928:	600b      	str	r3, [r1, #0]
 800592a:	e06c      	b.n	8005a06 <HAL_RCC_OscConfig+0x646>
 800592c:	2301      	movs	r3, #1
 800592e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005932:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005936:	fa93 f3a3 	rbit	r3, r3
 800593a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800593e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005942:	fab3 f383 	clz	r3, r3
 8005946:	b2db      	uxtb	r3, r3
 8005948:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800594c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	461a      	mov	r2, r3
 8005954:	2300      	movs	r3, #0
 8005956:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005958:	f7fe fcca 	bl	80042f0 <HAL_GetTick>
 800595c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005960:	e00a      	b.n	8005978 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005962:	f7fe fcc5 	bl	80042f0 <HAL_GetTick>
 8005966:	4602      	mov	r2, r0
 8005968:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	2b02      	cmp	r3, #2
 8005970:	d902      	bls.n	8005978 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	f000 bd5a 	b.w	800642c <HAL_RCC_OscConfig+0x106c>
 8005978:	2302      	movs	r3, #2
 800597a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800597e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005982:	fa93 f3a3 	rbit	r3, r3
 8005986:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800598a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800598e:	fab3 f383 	clz	r3, r3
 8005992:	b2db      	uxtb	r3, r3
 8005994:	095b      	lsrs	r3, r3, #5
 8005996:	b2db      	uxtb	r3, r3
 8005998:	f043 0301 	orr.w	r3, r3, #1
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d104      	bne.n	80059ac <HAL_RCC_OscConfig+0x5ec>
 80059a2:	4b01      	ldr	r3, [pc, #4]	; (80059a8 <HAL_RCC_OscConfig+0x5e8>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	e015      	b.n	80059d4 <HAL_RCC_OscConfig+0x614>
 80059a8:	40021000 	.word	0x40021000
 80059ac:	2302      	movs	r3, #2
 80059ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80059b6:	fa93 f3a3 	rbit	r3, r3
 80059ba:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80059be:	2302      	movs	r3, #2
 80059c0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80059c4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80059c8:	fa93 f3a3 	rbit	r3, r3
 80059cc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80059d0:	4bc8      	ldr	r3, [pc, #800]	; (8005cf4 <HAL_RCC_OscConfig+0x934>)
 80059d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d4:	2202      	movs	r2, #2
 80059d6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80059da:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80059de:	fa92 f2a2 	rbit	r2, r2
 80059e2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80059e6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80059ea:	fab2 f282 	clz	r2, r2
 80059ee:	b2d2      	uxtb	r2, r2
 80059f0:	f042 0220 	orr.w	r2, r2, #32
 80059f4:	b2d2      	uxtb	r2, r2
 80059f6:	f002 021f 	and.w	r2, r2, #31
 80059fa:	2101      	movs	r1, #1
 80059fc:	fa01 f202 	lsl.w	r2, r1, r2
 8005a00:	4013      	ands	r3, r2
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d1ad      	bne.n	8005962 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0308 	and.w	r3, r3, #8
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	f000 8110 	beq.w	8005c3c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a20:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	699b      	ldr	r3, [r3, #24]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d079      	beq.n	8005b20 <HAL_RCC_OscConfig+0x760>
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a32:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005a36:	fa93 f3a3 	rbit	r3, r3
 8005a3a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8005a3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a42:	fab3 f383 	clz	r3, r3
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	461a      	mov	r2, r3
 8005a4a:	4bab      	ldr	r3, [pc, #684]	; (8005cf8 <HAL_RCC_OscConfig+0x938>)
 8005a4c:	4413      	add	r3, r2
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	461a      	mov	r2, r3
 8005a52:	2301      	movs	r3, #1
 8005a54:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a56:	f7fe fc4b 	bl	80042f0 <HAL_GetTick>
 8005a5a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a5e:	e00a      	b.n	8005a76 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a60:	f7fe fc46 	bl	80042f0 <HAL_GetTick>
 8005a64:	4602      	mov	r2, r0
 8005a66:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005a6a:	1ad3      	subs	r3, r2, r3
 8005a6c:	2b02      	cmp	r3, #2
 8005a6e:	d902      	bls.n	8005a76 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8005a70:	2303      	movs	r3, #3
 8005a72:	f000 bcdb 	b.w	800642c <HAL_RCC_OscConfig+0x106c>
 8005a76:	2302      	movs	r3, #2
 8005a78:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a7c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a80:	fa93 f3a3 	rbit	r3, r3
 8005a84:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005a88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a8c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005a90:	2202      	movs	r2, #2
 8005a92:	601a      	str	r2, [r3, #0]
 8005a94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a98:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	fa93 f2a3 	rbit	r2, r3
 8005aa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005aa6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005aaa:	601a      	str	r2, [r3, #0]
 8005aac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ab0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ab4:	2202      	movs	r2, #2
 8005ab6:	601a      	str	r2, [r3, #0]
 8005ab8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005abc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	fa93 f2a3 	rbit	r2, r3
 8005ac6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005aca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005ace:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ad0:	4b88      	ldr	r3, [pc, #544]	; (8005cf4 <HAL_RCC_OscConfig+0x934>)
 8005ad2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ad4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ad8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005adc:	2102      	movs	r1, #2
 8005ade:	6019      	str	r1, [r3, #0]
 8005ae0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ae4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	fa93 f1a3 	rbit	r1, r3
 8005aee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005af2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005af6:	6019      	str	r1, [r3, #0]
  return result;
 8005af8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005afc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	fab3 f383 	clz	r3, r3
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	f003 031f 	and.w	r3, r3, #31
 8005b12:	2101      	movs	r1, #1
 8005b14:	fa01 f303 	lsl.w	r3, r1, r3
 8005b18:	4013      	ands	r3, r2
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d0a0      	beq.n	8005a60 <HAL_RCC_OscConfig+0x6a0>
 8005b1e:	e08d      	b.n	8005c3c <HAL_RCC_OscConfig+0x87c>
 8005b20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b24:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005b28:	2201      	movs	r2, #1
 8005b2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b30:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	fa93 f2a3 	rbit	r2, r3
 8005b3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b3e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005b42:	601a      	str	r2, [r3, #0]
  return result;
 8005b44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b48:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005b4c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b4e:	fab3 f383 	clz	r3, r3
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	461a      	mov	r2, r3
 8005b56:	4b68      	ldr	r3, [pc, #416]	; (8005cf8 <HAL_RCC_OscConfig+0x938>)
 8005b58:	4413      	add	r3, r2
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	2300      	movs	r3, #0
 8005b60:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b62:	f7fe fbc5 	bl	80042f0 <HAL_GetTick>
 8005b66:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b6a:	e00a      	b.n	8005b82 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b6c:	f7fe fbc0 	bl	80042f0 <HAL_GetTick>
 8005b70:	4602      	mov	r2, r0
 8005b72:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	2b02      	cmp	r3, #2
 8005b7a:	d902      	bls.n	8005b82 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	f000 bc55 	b.w	800642c <HAL_RCC_OscConfig+0x106c>
 8005b82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b86:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005b8a:	2202      	movs	r2, #2
 8005b8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b92:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	fa93 f2a3 	rbit	r2, r3
 8005b9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ba0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005ba4:	601a      	str	r2, [r3, #0]
 8005ba6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005baa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005bae:	2202      	movs	r2, #2
 8005bb0:	601a      	str	r2, [r3, #0]
 8005bb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bb6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	fa93 f2a3 	rbit	r2, r3
 8005bc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bc4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005bc8:	601a      	str	r2, [r3, #0]
 8005bca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bd2:	2202      	movs	r2, #2
 8005bd4:	601a      	str	r2, [r3, #0]
 8005bd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	fa93 f2a3 	rbit	r2, r3
 8005be4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005be8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005bec:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bee:	4b41      	ldr	r3, [pc, #260]	; (8005cf4 <HAL_RCC_OscConfig+0x934>)
 8005bf0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005bf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bf6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005bfa:	2102      	movs	r1, #2
 8005bfc:	6019      	str	r1, [r3, #0]
 8005bfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c02:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	fa93 f1a3 	rbit	r1, r3
 8005c0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c10:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005c14:	6019      	str	r1, [r3, #0]
  return result;
 8005c16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c1a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	fab3 f383 	clz	r3, r3
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	f003 031f 	and.w	r3, r3, #31
 8005c30:	2101      	movs	r1, #1
 8005c32:	fa01 f303 	lsl.w	r3, r1, r3
 8005c36:	4013      	ands	r3, r2
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d197      	bne.n	8005b6c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c40:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 0304 	and.w	r3, r3, #4
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f000 81a1 	beq.w	8005f94 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c52:	2300      	movs	r3, #0
 8005c54:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c58:	4b26      	ldr	r3, [pc, #152]	; (8005cf4 <HAL_RCC_OscConfig+0x934>)
 8005c5a:	69db      	ldr	r3, [r3, #28]
 8005c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d116      	bne.n	8005c92 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c64:	4b23      	ldr	r3, [pc, #140]	; (8005cf4 <HAL_RCC_OscConfig+0x934>)
 8005c66:	69db      	ldr	r3, [r3, #28]
 8005c68:	4a22      	ldr	r2, [pc, #136]	; (8005cf4 <HAL_RCC_OscConfig+0x934>)
 8005c6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c6e:	61d3      	str	r3, [r2, #28]
 8005c70:	4b20      	ldr	r3, [pc, #128]	; (8005cf4 <HAL_RCC_OscConfig+0x934>)
 8005c72:	69db      	ldr	r3, [r3, #28]
 8005c74:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005c78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c7c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8005c80:	601a      	str	r2, [r3, #0]
 8005c82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c86:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8005c8a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c92:	4b1a      	ldr	r3, [pc, #104]	; (8005cfc <HAL_RCC_OscConfig+0x93c>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d11a      	bne.n	8005cd4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c9e:	4b17      	ldr	r3, [pc, #92]	; (8005cfc <HAL_RCC_OscConfig+0x93c>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a16      	ldr	r2, [pc, #88]	; (8005cfc <HAL_RCC_OscConfig+0x93c>)
 8005ca4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ca8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005caa:	f7fe fb21 	bl	80042f0 <HAL_GetTick>
 8005cae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cb2:	e009      	b.n	8005cc8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cb4:	f7fe fb1c 	bl	80042f0 <HAL_GetTick>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	2b64      	cmp	r3, #100	; 0x64
 8005cc2:	d901      	bls.n	8005cc8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e3b1      	b.n	800642c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cc8:	4b0c      	ldr	r3, [pc, #48]	; (8005cfc <HAL_RCC_OscConfig+0x93c>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d0ef      	beq.n	8005cb4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cd8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d10d      	bne.n	8005d00 <HAL_RCC_OscConfig+0x940>
 8005ce4:	4b03      	ldr	r3, [pc, #12]	; (8005cf4 <HAL_RCC_OscConfig+0x934>)
 8005ce6:	6a1b      	ldr	r3, [r3, #32]
 8005ce8:	4a02      	ldr	r2, [pc, #8]	; (8005cf4 <HAL_RCC_OscConfig+0x934>)
 8005cea:	f043 0301 	orr.w	r3, r3, #1
 8005cee:	6213      	str	r3, [r2, #32]
 8005cf0:	e03c      	b.n	8005d6c <HAL_RCC_OscConfig+0x9ac>
 8005cf2:	bf00      	nop
 8005cf4:	40021000 	.word	0x40021000
 8005cf8:	10908120 	.word	0x10908120
 8005cfc:	40007000 	.word	0x40007000
 8005d00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d04:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d10c      	bne.n	8005d2a <HAL_RCC_OscConfig+0x96a>
 8005d10:	4bc1      	ldr	r3, [pc, #772]	; (8006018 <HAL_RCC_OscConfig+0xc58>)
 8005d12:	6a1b      	ldr	r3, [r3, #32]
 8005d14:	4ac0      	ldr	r2, [pc, #768]	; (8006018 <HAL_RCC_OscConfig+0xc58>)
 8005d16:	f023 0301 	bic.w	r3, r3, #1
 8005d1a:	6213      	str	r3, [r2, #32]
 8005d1c:	4bbe      	ldr	r3, [pc, #760]	; (8006018 <HAL_RCC_OscConfig+0xc58>)
 8005d1e:	6a1b      	ldr	r3, [r3, #32]
 8005d20:	4abd      	ldr	r2, [pc, #756]	; (8006018 <HAL_RCC_OscConfig+0xc58>)
 8005d22:	f023 0304 	bic.w	r3, r3, #4
 8005d26:	6213      	str	r3, [r2, #32]
 8005d28:	e020      	b.n	8005d6c <HAL_RCC_OscConfig+0x9ac>
 8005d2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	2b05      	cmp	r3, #5
 8005d38:	d10c      	bne.n	8005d54 <HAL_RCC_OscConfig+0x994>
 8005d3a:	4bb7      	ldr	r3, [pc, #732]	; (8006018 <HAL_RCC_OscConfig+0xc58>)
 8005d3c:	6a1b      	ldr	r3, [r3, #32]
 8005d3e:	4ab6      	ldr	r2, [pc, #728]	; (8006018 <HAL_RCC_OscConfig+0xc58>)
 8005d40:	f043 0304 	orr.w	r3, r3, #4
 8005d44:	6213      	str	r3, [r2, #32]
 8005d46:	4bb4      	ldr	r3, [pc, #720]	; (8006018 <HAL_RCC_OscConfig+0xc58>)
 8005d48:	6a1b      	ldr	r3, [r3, #32]
 8005d4a:	4ab3      	ldr	r2, [pc, #716]	; (8006018 <HAL_RCC_OscConfig+0xc58>)
 8005d4c:	f043 0301 	orr.w	r3, r3, #1
 8005d50:	6213      	str	r3, [r2, #32]
 8005d52:	e00b      	b.n	8005d6c <HAL_RCC_OscConfig+0x9ac>
 8005d54:	4bb0      	ldr	r3, [pc, #704]	; (8006018 <HAL_RCC_OscConfig+0xc58>)
 8005d56:	6a1b      	ldr	r3, [r3, #32]
 8005d58:	4aaf      	ldr	r2, [pc, #700]	; (8006018 <HAL_RCC_OscConfig+0xc58>)
 8005d5a:	f023 0301 	bic.w	r3, r3, #1
 8005d5e:	6213      	str	r3, [r2, #32]
 8005d60:	4bad      	ldr	r3, [pc, #692]	; (8006018 <HAL_RCC_OscConfig+0xc58>)
 8005d62:	6a1b      	ldr	r3, [r3, #32]
 8005d64:	4aac      	ldr	r2, [pc, #688]	; (8006018 <HAL_RCC_OscConfig+0xc58>)
 8005d66:	f023 0304 	bic.w	r3, r3, #4
 8005d6a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d70:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	f000 8081 	beq.w	8005e80 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d7e:	f7fe fab7 	bl	80042f0 <HAL_GetTick>
 8005d82:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d86:	e00b      	b.n	8005da0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d88:	f7fe fab2 	bl	80042f0 <HAL_GetTick>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005d92:	1ad3      	subs	r3, r2, r3
 8005d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d901      	bls.n	8005da0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8005d9c:	2303      	movs	r3, #3
 8005d9e:	e345      	b.n	800642c <HAL_RCC_OscConfig+0x106c>
 8005da0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005da4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005da8:	2202      	movs	r2, #2
 8005daa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005db0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	fa93 f2a3 	rbit	r2, r3
 8005dba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005dbe:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005dc2:	601a      	str	r2, [r3, #0]
 8005dc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005dc8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005dcc:	2202      	movs	r2, #2
 8005dce:	601a      	str	r2, [r3, #0]
 8005dd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005dd4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	fa93 f2a3 	rbit	r2, r3
 8005dde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005de2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005de6:	601a      	str	r2, [r3, #0]
  return result;
 8005de8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005dec:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005df0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005df2:	fab3 f383 	clz	r3, r3
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	095b      	lsrs	r3, r3, #5
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	f043 0302 	orr.w	r3, r3, #2
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d102      	bne.n	8005e0c <HAL_RCC_OscConfig+0xa4c>
 8005e06:	4b84      	ldr	r3, [pc, #528]	; (8006018 <HAL_RCC_OscConfig+0xc58>)
 8005e08:	6a1b      	ldr	r3, [r3, #32]
 8005e0a:	e013      	b.n	8005e34 <HAL_RCC_OscConfig+0xa74>
 8005e0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e10:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005e14:	2202      	movs	r2, #2
 8005e16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e1c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	fa93 f2a3 	rbit	r2, r3
 8005e26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e2a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8005e2e:	601a      	str	r2, [r3, #0]
 8005e30:	4b79      	ldr	r3, [pc, #484]	; (8006018 <HAL_RCC_OscConfig+0xc58>)
 8005e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e34:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005e38:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005e3c:	2102      	movs	r1, #2
 8005e3e:	6011      	str	r1, [r2, #0]
 8005e40:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005e44:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005e48:	6812      	ldr	r2, [r2, #0]
 8005e4a:	fa92 f1a2 	rbit	r1, r2
 8005e4e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005e52:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005e56:	6011      	str	r1, [r2, #0]
  return result;
 8005e58:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005e5c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005e60:	6812      	ldr	r2, [r2, #0]
 8005e62:	fab2 f282 	clz	r2, r2
 8005e66:	b2d2      	uxtb	r2, r2
 8005e68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e6c:	b2d2      	uxtb	r2, r2
 8005e6e:	f002 021f 	and.w	r2, r2, #31
 8005e72:	2101      	movs	r1, #1
 8005e74:	fa01 f202 	lsl.w	r2, r1, r2
 8005e78:	4013      	ands	r3, r2
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d084      	beq.n	8005d88 <HAL_RCC_OscConfig+0x9c8>
 8005e7e:	e07f      	b.n	8005f80 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e80:	f7fe fa36 	bl	80042f0 <HAL_GetTick>
 8005e84:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e88:	e00b      	b.n	8005ea2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e8a:	f7fe fa31 	bl	80042f0 <HAL_GetTick>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d901      	bls.n	8005ea2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e2c4      	b.n	800642c <HAL_RCC_OscConfig+0x106c>
 8005ea2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ea6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8005eaa:	2202      	movs	r2, #2
 8005eac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005eb2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	fa93 f2a3 	rbit	r2, r3
 8005ebc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ec0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8005ec4:	601a      	str	r2, [r3, #0]
 8005ec6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005eca:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005ece:	2202      	movs	r2, #2
 8005ed0:	601a      	str	r2, [r3, #0]
 8005ed2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ed6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	fa93 f2a3 	rbit	r2, r3
 8005ee0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ee4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005ee8:	601a      	str	r2, [r3, #0]
  return result;
 8005eea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005eee:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005ef2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ef4:	fab3 f383 	clz	r3, r3
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	095b      	lsrs	r3, r3, #5
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	f043 0302 	orr.w	r3, r3, #2
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	2b02      	cmp	r3, #2
 8005f06:	d102      	bne.n	8005f0e <HAL_RCC_OscConfig+0xb4e>
 8005f08:	4b43      	ldr	r3, [pc, #268]	; (8006018 <HAL_RCC_OscConfig+0xc58>)
 8005f0a:	6a1b      	ldr	r3, [r3, #32]
 8005f0c:	e013      	b.n	8005f36 <HAL_RCC_OscConfig+0xb76>
 8005f0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f12:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005f16:	2202      	movs	r2, #2
 8005f18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f1e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	fa93 f2a3 	rbit	r2, r3
 8005f28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f2c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005f30:	601a      	str	r2, [r3, #0]
 8005f32:	4b39      	ldr	r3, [pc, #228]	; (8006018 <HAL_RCC_OscConfig+0xc58>)
 8005f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f36:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005f3a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8005f3e:	2102      	movs	r1, #2
 8005f40:	6011      	str	r1, [r2, #0]
 8005f42:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005f46:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8005f4a:	6812      	ldr	r2, [r2, #0]
 8005f4c:	fa92 f1a2 	rbit	r1, r2
 8005f50:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005f54:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005f58:	6011      	str	r1, [r2, #0]
  return result;
 8005f5a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005f5e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005f62:	6812      	ldr	r2, [r2, #0]
 8005f64:	fab2 f282 	clz	r2, r2
 8005f68:	b2d2      	uxtb	r2, r2
 8005f6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f6e:	b2d2      	uxtb	r2, r2
 8005f70:	f002 021f 	and.w	r2, r2, #31
 8005f74:	2101      	movs	r1, #1
 8005f76:	fa01 f202 	lsl.w	r2, r1, r2
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d184      	bne.n	8005e8a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005f80:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d105      	bne.n	8005f94 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f88:	4b23      	ldr	r3, [pc, #140]	; (8006018 <HAL_RCC_OscConfig+0xc58>)
 8005f8a:	69db      	ldr	r3, [r3, #28]
 8005f8c:	4a22      	ldr	r2, [pc, #136]	; (8006018 <HAL_RCC_OscConfig+0xc58>)
 8005f8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f92:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f98:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	69db      	ldr	r3, [r3, #28]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	f000 8242 	beq.w	800642a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005fa6:	4b1c      	ldr	r3, [pc, #112]	; (8006018 <HAL_RCC_OscConfig+0xc58>)
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	f003 030c 	and.w	r3, r3, #12
 8005fae:	2b08      	cmp	r3, #8
 8005fb0:	f000 8213 	beq.w	80063da <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005fb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005fb8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	69db      	ldr	r3, [r3, #28]
 8005fc0:	2b02      	cmp	r3, #2
 8005fc2:	f040 8162 	bne.w	800628a <HAL_RCC_OscConfig+0xeca>
 8005fc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005fca:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005fce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005fd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005fd8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	fa93 f2a3 	rbit	r2, r3
 8005fe2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005fe6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005fea:	601a      	str	r2, [r3, #0]
  return result;
 8005fec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ff0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005ff4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ff6:	fab3 f383 	clz	r3, r3
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006000:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	461a      	mov	r2, r3
 8006008:	2300      	movs	r3, #0
 800600a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800600c:	f7fe f970 	bl	80042f0 <HAL_GetTick>
 8006010:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006014:	e00c      	b.n	8006030 <HAL_RCC_OscConfig+0xc70>
 8006016:	bf00      	nop
 8006018:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800601c:	f7fe f968 	bl	80042f0 <HAL_GetTick>
 8006020:	4602      	mov	r2, r0
 8006022:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006026:	1ad3      	subs	r3, r2, r3
 8006028:	2b02      	cmp	r3, #2
 800602a:	d901      	bls.n	8006030 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800602c:	2303      	movs	r3, #3
 800602e:	e1fd      	b.n	800642c <HAL_RCC_OscConfig+0x106c>
 8006030:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006034:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8006038:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800603c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800603e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006042:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	fa93 f2a3 	rbit	r2, r3
 800604c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006050:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8006054:	601a      	str	r2, [r3, #0]
  return result;
 8006056:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800605a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800605e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006060:	fab3 f383 	clz	r3, r3
 8006064:	b2db      	uxtb	r3, r3
 8006066:	095b      	lsrs	r3, r3, #5
 8006068:	b2db      	uxtb	r3, r3
 800606a:	f043 0301 	orr.w	r3, r3, #1
 800606e:	b2db      	uxtb	r3, r3
 8006070:	2b01      	cmp	r3, #1
 8006072:	d102      	bne.n	800607a <HAL_RCC_OscConfig+0xcba>
 8006074:	4bb0      	ldr	r3, [pc, #704]	; (8006338 <HAL_RCC_OscConfig+0xf78>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	e027      	b.n	80060ca <HAL_RCC_OscConfig+0xd0a>
 800607a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800607e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8006082:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006086:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006088:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800608c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	fa93 f2a3 	rbit	r2, r3
 8006096:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800609a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800609e:	601a      	str	r2, [r3, #0]
 80060a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060a4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80060a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80060ac:	601a      	str	r2, [r3, #0]
 80060ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060b2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	fa93 f2a3 	rbit	r2, r3
 80060bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060c0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80060c4:	601a      	str	r2, [r3, #0]
 80060c6:	4b9c      	ldr	r3, [pc, #624]	; (8006338 <HAL_RCC_OscConfig+0xf78>)
 80060c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80060ce:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80060d2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80060d6:	6011      	str	r1, [r2, #0]
 80060d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80060dc:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80060e0:	6812      	ldr	r2, [r2, #0]
 80060e2:	fa92 f1a2 	rbit	r1, r2
 80060e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80060ea:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80060ee:	6011      	str	r1, [r2, #0]
  return result;
 80060f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80060f4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80060f8:	6812      	ldr	r2, [r2, #0]
 80060fa:	fab2 f282 	clz	r2, r2
 80060fe:	b2d2      	uxtb	r2, r2
 8006100:	f042 0220 	orr.w	r2, r2, #32
 8006104:	b2d2      	uxtb	r2, r2
 8006106:	f002 021f 	and.w	r2, r2, #31
 800610a:	2101      	movs	r1, #1
 800610c:	fa01 f202 	lsl.w	r2, r1, r2
 8006110:	4013      	ands	r3, r2
 8006112:	2b00      	cmp	r3, #0
 8006114:	d182      	bne.n	800601c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006116:	4b88      	ldr	r3, [pc, #544]	; (8006338 <HAL_RCC_OscConfig+0xf78>)
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800611e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006122:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800612a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800612e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	6a1b      	ldr	r3, [r3, #32]
 8006136:	430b      	orrs	r3, r1
 8006138:	497f      	ldr	r1, [pc, #508]	; (8006338 <HAL_RCC_OscConfig+0xf78>)
 800613a:	4313      	orrs	r3, r2
 800613c:	604b      	str	r3, [r1, #4]
 800613e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006142:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8006146:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800614a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800614c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006150:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	fa93 f2a3 	rbit	r2, r3
 800615a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800615e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8006162:	601a      	str	r2, [r3, #0]
  return result;
 8006164:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006168:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800616c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800616e:	fab3 f383 	clz	r3, r3
 8006172:	b2db      	uxtb	r3, r3
 8006174:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006178:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	461a      	mov	r2, r3
 8006180:	2301      	movs	r3, #1
 8006182:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006184:	f7fe f8b4 	bl	80042f0 <HAL_GetTick>
 8006188:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800618c:	e009      	b.n	80061a2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800618e:	f7fe f8af 	bl	80042f0 <HAL_GetTick>
 8006192:	4602      	mov	r2, r0
 8006194:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	2b02      	cmp	r3, #2
 800619c:	d901      	bls.n	80061a2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e144      	b.n	800642c <HAL_RCC_OscConfig+0x106c>
 80061a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80061a6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80061aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80061ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80061b4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	fa93 f2a3 	rbit	r2, r3
 80061be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80061c2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80061c6:	601a      	str	r2, [r3, #0]
  return result;
 80061c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80061cc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80061d0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80061d2:	fab3 f383 	clz	r3, r3
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	095b      	lsrs	r3, r3, #5
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	f043 0301 	orr.w	r3, r3, #1
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d102      	bne.n	80061ec <HAL_RCC_OscConfig+0xe2c>
 80061e6:	4b54      	ldr	r3, [pc, #336]	; (8006338 <HAL_RCC_OscConfig+0xf78>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	e027      	b.n	800623c <HAL_RCC_OscConfig+0xe7c>
 80061ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80061f0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80061f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80061f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80061fe:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	fa93 f2a3 	rbit	r2, r3
 8006208:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800620c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8006210:	601a      	str	r2, [r3, #0]
 8006212:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006216:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800621a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800621e:	601a      	str	r2, [r3, #0]
 8006220:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006224:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	fa93 f2a3 	rbit	r2, r3
 800622e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006232:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8006236:	601a      	str	r2, [r3, #0]
 8006238:	4b3f      	ldr	r3, [pc, #252]	; (8006338 <HAL_RCC_OscConfig+0xf78>)
 800623a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006240:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8006244:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006248:	6011      	str	r1, [r2, #0]
 800624a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800624e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8006252:	6812      	ldr	r2, [r2, #0]
 8006254:	fa92 f1a2 	rbit	r1, r2
 8006258:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800625c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8006260:	6011      	str	r1, [r2, #0]
  return result;
 8006262:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006266:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800626a:	6812      	ldr	r2, [r2, #0]
 800626c:	fab2 f282 	clz	r2, r2
 8006270:	b2d2      	uxtb	r2, r2
 8006272:	f042 0220 	orr.w	r2, r2, #32
 8006276:	b2d2      	uxtb	r2, r2
 8006278:	f002 021f 	and.w	r2, r2, #31
 800627c:	2101      	movs	r1, #1
 800627e:	fa01 f202 	lsl.w	r2, r1, r2
 8006282:	4013      	ands	r3, r2
 8006284:	2b00      	cmp	r3, #0
 8006286:	d082      	beq.n	800618e <HAL_RCC_OscConfig+0xdce>
 8006288:	e0cf      	b.n	800642a <HAL_RCC_OscConfig+0x106a>
 800628a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800628e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8006292:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006296:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006298:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800629c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	fa93 f2a3 	rbit	r2, r3
 80062a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80062aa:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80062ae:	601a      	str	r2, [r3, #0]
  return result;
 80062b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80062b4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80062b8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062ba:	fab3 f383 	clz	r3, r3
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80062c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	461a      	mov	r2, r3
 80062cc:	2300      	movs	r3, #0
 80062ce:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062d0:	f7fe f80e 	bl	80042f0 <HAL_GetTick>
 80062d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80062d8:	e009      	b.n	80062ee <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062da:	f7fe f809 	bl	80042f0 <HAL_GetTick>
 80062de:	4602      	mov	r2, r0
 80062e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80062e4:	1ad3      	subs	r3, r2, r3
 80062e6:	2b02      	cmp	r3, #2
 80062e8:	d901      	bls.n	80062ee <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	e09e      	b.n	800642c <HAL_RCC_OscConfig+0x106c>
 80062ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80062f2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80062f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80062fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006300:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	fa93 f2a3 	rbit	r2, r3
 800630a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800630e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8006312:	601a      	str	r2, [r3, #0]
  return result;
 8006314:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006318:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800631c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800631e:	fab3 f383 	clz	r3, r3
 8006322:	b2db      	uxtb	r3, r3
 8006324:	095b      	lsrs	r3, r3, #5
 8006326:	b2db      	uxtb	r3, r3
 8006328:	f043 0301 	orr.w	r3, r3, #1
 800632c:	b2db      	uxtb	r3, r3
 800632e:	2b01      	cmp	r3, #1
 8006330:	d104      	bne.n	800633c <HAL_RCC_OscConfig+0xf7c>
 8006332:	4b01      	ldr	r3, [pc, #4]	; (8006338 <HAL_RCC_OscConfig+0xf78>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	e029      	b.n	800638c <HAL_RCC_OscConfig+0xfcc>
 8006338:	40021000 	.word	0x40021000
 800633c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006340:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8006344:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006348:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800634a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800634e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	fa93 f2a3 	rbit	r2, r3
 8006358:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800635c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8006360:	601a      	str	r2, [r3, #0]
 8006362:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006366:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800636a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800636e:	601a      	str	r2, [r3, #0]
 8006370:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006374:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	fa93 f2a3 	rbit	r2, r3
 800637e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006382:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8006386:	601a      	str	r2, [r3, #0]
 8006388:	4b2b      	ldr	r3, [pc, #172]	; (8006438 <HAL_RCC_OscConfig+0x1078>)
 800638a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006390:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8006394:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006398:	6011      	str	r1, [r2, #0]
 800639a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800639e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80063a2:	6812      	ldr	r2, [r2, #0]
 80063a4:	fa92 f1a2 	rbit	r1, r2
 80063a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80063ac:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80063b0:	6011      	str	r1, [r2, #0]
  return result;
 80063b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80063b6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80063ba:	6812      	ldr	r2, [r2, #0]
 80063bc:	fab2 f282 	clz	r2, r2
 80063c0:	b2d2      	uxtb	r2, r2
 80063c2:	f042 0220 	orr.w	r2, r2, #32
 80063c6:	b2d2      	uxtb	r2, r2
 80063c8:	f002 021f 	and.w	r2, r2, #31
 80063cc:	2101      	movs	r1, #1
 80063ce:	fa01 f202 	lsl.w	r2, r1, r2
 80063d2:	4013      	ands	r3, r2
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d180      	bne.n	80062da <HAL_RCC_OscConfig+0xf1a>
 80063d8:	e027      	b.n	800642a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80063de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	69db      	ldr	r3, [r3, #28]
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d101      	bne.n	80063ee <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e01e      	b.n	800642c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80063ee:	4b12      	ldr	r3, [pc, #72]	; (8006438 <HAL_RCC_OscConfig+0x1078>)
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80063f6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80063fa:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80063fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006402:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	6a1b      	ldr	r3, [r3, #32]
 800640a:	429a      	cmp	r2, r3
 800640c:	d10b      	bne.n	8006426 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800640e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006412:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006416:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800641a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006422:	429a      	cmp	r2, r3
 8006424:	d001      	beq.n	800642a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e000      	b.n	800642c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop
 8006438:	40021000 	.word	0x40021000

0800643c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b09e      	sub	sp, #120	; 0x78
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006446:	2300      	movs	r3, #0
 8006448:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d101      	bne.n	8006454 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	e162      	b.n	800671a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006454:	4b90      	ldr	r3, [pc, #576]	; (8006698 <HAL_RCC_ClockConfig+0x25c>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 0307 	and.w	r3, r3, #7
 800645c:	683a      	ldr	r2, [r7, #0]
 800645e:	429a      	cmp	r2, r3
 8006460:	d910      	bls.n	8006484 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006462:	4b8d      	ldr	r3, [pc, #564]	; (8006698 <HAL_RCC_ClockConfig+0x25c>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f023 0207 	bic.w	r2, r3, #7
 800646a:	498b      	ldr	r1, [pc, #556]	; (8006698 <HAL_RCC_ClockConfig+0x25c>)
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	4313      	orrs	r3, r2
 8006470:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006472:	4b89      	ldr	r3, [pc, #548]	; (8006698 <HAL_RCC_ClockConfig+0x25c>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 0307 	and.w	r3, r3, #7
 800647a:	683a      	ldr	r2, [r7, #0]
 800647c:	429a      	cmp	r2, r3
 800647e:	d001      	beq.n	8006484 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	e14a      	b.n	800671a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f003 0302 	and.w	r3, r3, #2
 800648c:	2b00      	cmp	r3, #0
 800648e:	d008      	beq.n	80064a2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006490:	4b82      	ldr	r3, [pc, #520]	; (800669c <HAL_RCC_ClockConfig+0x260>)
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	497f      	ldr	r1, [pc, #508]	; (800669c <HAL_RCC_ClockConfig+0x260>)
 800649e:	4313      	orrs	r3, r2
 80064a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f003 0301 	and.w	r3, r3, #1
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	f000 80dc 	beq.w	8006668 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d13c      	bne.n	8006532 <HAL_RCC_ClockConfig+0xf6>
 80064b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80064bc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064c0:	fa93 f3a3 	rbit	r3, r3
 80064c4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80064c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064c8:	fab3 f383 	clz	r3, r3
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	095b      	lsrs	r3, r3, #5
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	f043 0301 	orr.w	r3, r3, #1
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d102      	bne.n	80064e2 <HAL_RCC_ClockConfig+0xa6>
 80064dc:	4b6f      	ldr	r3, [pc, #444]	; (800669c <HAL_RCC_ClockConfig+0x260>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	e00f      	b.n	8006502 <HAL_RCC_ClockConfig+0xc6>
 80064e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80064e6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80064ea:	fa93 f3a3 	rbit	r3, r3
 80064ee:	667b      	str	r3, [r7, #100]	; 0x64
 80064f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80064f4:	663b      	str	r3, [r7, #96]	; 0x60
 80064f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064f8:	fa93 f3a3 	rbit	r3, r3
 80064fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80064fe:	4b67      	ldr	r3, [pc, #412]	; (800669c <HAL_RCC_ClockConfig+0x260>)
 8006500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006502:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006506:	65ba      	str	r2, [r7, #88]	; 0x58
 8006508:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800650a:	fa92 f2a2 	rbit	r2, r2
 800650e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8006510:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006512:	fab2 f282 	clz	r2, r2
 8006516:	b2d2      	uxtb	r2, r2
 8006518:	f042 0220 	orr.w	r2, r2, #32
 800651c:	b2d2      	uxtb	r2, r2
 800651e:	f002 021f 	and.w	r2, r2, #31
 8006522:	2101      	movs	r1, #1
 8006524:	fa01 f202 	lsl.w	r2, r1, r2
 8006528:	4013      	ands	r3, r2
 800652a:	2b00      	cmp	r3, #0
 800652c:	d17b      	bne.n	8006626 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	e0f3      	b.n	800671a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	2b02      	cmp	r3, #2
 8006538:	d13c      	bne.n	80065b4 <HAL_RCC_ClockConfig+0x178>
 800653a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800653e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006540:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006542:	fa93 f3a3 	rbit	r3, r3
 8006546:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006548:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800654a:	fab3 f383 	clz	r3, r3
 800654e:	b2db      	uxtb	r3, r3
 8006550:	095b      	lsrs	r3, r3, #5
 8006552:	b2db      	uxtb	r3, r3
 8006554:	f043 0301 	orr.w	r3, r3, #1
 8006558:	b2db      	uxtb	r3, r3
 800655a:	2b01      	cmp	r3, #1
 800655c:	d102      	bne.n	8006564 <HAL_RCC_ClockConfig+0x128>
 800655e:	4b4f      	ldr	r3, [pc, #316]	; (800669c <HAL_RCC_ClockConfig+0x260>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	e00f      	b.n	8006584 <HAL_RCC_ClockConfig+0x148>
 8006564:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006568:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800656a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800656c:	fa93 f3a3 	rbit	r3, r3
 8006570:	647b      	str	r3, [r7, #68]	; 0x44
 8006572:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006576:	643b      	str	r3, [r7, #64]	; 0x40
 8006578:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800657a:	fa93 f3a3 	rbit	r3, r3
 800657e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006580:	4b46      	ldr	r3, [pc, #280]	; (800669c <HAL_RCC_ClockConfig+0x260>)
 8006582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006584:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006588:	63ba      	str	r2, [r7, #56]	; 0x38
 800658a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800658c:	fa92 f2a2 	rbit	r2, r2
 8006590:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8006592:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006594:	fab2 f282 	clz	r2, r2
 8006598:	b2d2      	uxtb	r2, r2
 800659a:	f042 0220 	orr.w	r2, r2, #32
 800659e:	b2d2      	uxtb	r2, r2
 80065a0:	f002 021f 	and.w	r2, r2, #31
 80065a4:	2101      	movs	r1, #1
 80065a6:	fa01 f202 	lsl.w	r2, r1, r2
 80065aa:	4013      	ands	r3, r2
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d13a      	bne.n	8006626 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	e0b2      	b.n	800671a <HAL_RCC_ClockConfig+0x2de>
 80065b4:	2302      	movs	r3, #2
 80065b6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ba:	fa93 f3a3 	rbit	r3, r3
 80065be:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80065c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065c2:	fab3 f383 	clz	r3, r3
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	095b      	lsrs	r3, r3, #5
 80065ca:	b2db      	uxtb	r3, r3
 80065cc:	f043 0301 	orr.w	r3, r3, #1
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d102      	bne.n	80065dc <HAL_RCC_ClockConfig+0x1a0>
 80065d6:	4b31      	ldr	r3, [pc, #196]	; (800669c <HAL_RCC_ClockConfig+0x260>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	e00d      	b.n	80065f8 <HAL_RCC_ClockConfig+0x1bc>
 80065dc:	2302      	movs	r3, #2
 80065de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e2:	fa93 f3a3 	rbit	r3, r3
 80065e6:	627b      	str	r3, [r7, #36]	; 0x24
 80065e8:	2302      	movs	r3, #2
 80065ea:	623b      	str	r3, [r7, #32]
 80065ec:	6a3b      	ldr	r3, [r7, #32]
 80065ee:	fa93 f3a3 	rbit	r3, r3
 80065f2:	61fb      	str	r3, [r7, #28]
 80065f4:	4b29      	ldr	r3, [pc, #164]	; (800669c <HAL_RCC_ClockConfig+0x260>)
 80065f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f8:	2202      	movs	r2, #2
 80065fa:	61ba      	str	r2, [r7, #24]
 80065fc:	69ba      	ldr	r2, [r7, #24]
 80065fe:	fa92 f2a2 	rbit	r2, r2
 8006602:	617a      	str	r2, [r7, #20]
  return result;
 8006604:	697a      	ldr	r2, [r7, #20]
 8006606:	fab2 f282 	clz	r2, r2
 800660a:	b2d2      	uxtb	r2, r2
 800660c:	f042 0220 	orr.w	r2, r2, #32
 8006610:	b2d2      	uxtb	r2, r2
 8006612:	f002 021f 	and.w	r2, r2, #31
 8006616:	2101      	movs	r1, #1
 8006618:	fa01 f202 	lsl.w	r2, r1, r2
 800661c:	4013      	ands	r3, r2
 800661e:	2b00      	cmp	r3, #0
 8006620:	d101      	bne.n	8006626 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	e079      	b.n	800671a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006626:	4b1d      	ldr	r3, [pc, #116]	; (800669c <HAL_RCC_ClockConfig+0x260>)
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	f023 0203 	bic.w	r2, r3, #3
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	491a      	ldr	r1, [pc, #104]	; (800669c <HAL_RCC_ClockConfig+0x260>)
 8006634:	4313      	orrs	r3, r2
 8006636:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006638:	f7fd fe5a 	bl	80042f0 <HAL_GetTick>
 800663c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800663e:	e00a      	b.n	8006656 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006640:	f7fd fe56 	bl	80042f0 <HAL_GetTick>
 8006644:	4602      	mov	r2, r0
 8006646:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006648:	1ad3      	subs	r3, r2, r3
 800664a:	f241 3288 	movw	r2, #5000	; 0x1388
 800664e:	4293      	cmp	r3, r2
 8006650:	d901      	bls.n	8006656 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8006652:	2303      	movs	r3, #3
 8006654:	e061      	b.n	800671a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006656:	4b11      	ldr	r3, [pc, #68]	; (800669c <HAL_RCC_ClockConfig+0x260>)
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	f003 020c 	and.w	r2, r3, #12
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	429a      	cmp	r2, r3
 8006666:	d1eb      	bne.n	8006640 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006668:	4b0b      	ldr	r3, [pc, #44]	; (8006698 <HAL_RCC_ClockConfig+0x25c>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 0307 	and.w	r3, r3, #7
 8006670:	683a      	ldr	r2, [r7, #0]
 8006672:	429a      	cmp	r2, r3
 8006674:	d214      	bcs.n	80066a0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006676:	4b08      	ldr	r3, [pc, #32]	; (8006698 <HAL_RCC_ClockConfig+0x25c>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f023 0207 	bic.w	r2, r3, #7
 800667e:	4906      	ldr	r1, [pc, #24]	; (8006698 <HAL_RCC_ClockConfig+0x25c>)
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	4313      	orrs	r3, r2
 8006684:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006686:	4b04      	ldr	r3, [pc, #16]	; (8006698 <HAL_RCC_ClockConfig+0x25c>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f003 0307 	and.w	r3, r3, #7
 800668e:	683a      	ldr	r2, [r7, #0]
 8006690:	429a      	cmp	r2, r3
 8006692:	d005      	beq.n	80066a0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	e040      	b.n	800671a <HAL_RCC_ClockConfig+0x2de>
 8006698:	40022000 	.word	0x40022000
 800669c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 0304 	and.w	r3, r3, #4
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d008      	beq.n	80066be <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80066ac:	4b1d      	ldr	r3, [pc, #116]	; (8006724 <HAL_RCC_ClockConfig+0x2e8>)
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	491a      	ldr	r1, [pc, #104]	; (8006724 <HAL_RCC_ClockConfig+0x2e8>)
 80066ba:	4313      	orrs	r3, r2
 80066bc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 0308 	and.w	r3, r3, #8
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d009      	beq.n	80066de <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80066ca:	4b16      	ldr	r3, [pc, #88]	; (8006724 <HAL_RCC_ClockConfig+0x2e8>)
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	691b      	ldr	r3, [r3, #16]
 80066d6:	00db      	lsls	r3, r3, #3
 80066d8:	4912      	ldr	r1, [pc, #72]	; (8006724 <HAL_RCC_ClockConfig+0x2e8>)
 80066da:	4313      	orrs	r3, r2
 80066dc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80066de:	f000 f829 	bl	8006734 <HAL_RCC_GetSysClockFreq>
 80066e2:	4601      	mov	r1, r0
 80066e4:	4b0f      	ldr	r3, [pc, #60]	; (8006724 <HAL_RCC_ClockConfig+0x2e8>)
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80066ec:	22f0      	movs	r2, #240	; 0xf0
 80066ee:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066f0:	693a      	ldr	r2, [r7, #16]
 80066f2:	fa92 f2a2 	rbit	r2, r2
 80066f6:	60fa      	str	r2, [r7, #12]
  return result;
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	fab2 f282 	clz	r2, r2
 80066fe:	b2d2      	uxtb	r2, r2
 8006700:	40d3      	lsrs	r3, r2
 8006702:	4a09      	ldr	r2, [pc, #36]	; (8006728 <HAL_RCC_ClockConfig+0x2ec>)
 8006704:	5cd3      	ldrb	r3, [r2, r3]
 8006706:	fa21 f303 	lsr.w	r3, r1, r3
 800670a:	4a08      	ldr	r2, [pc, #32]	; (800672c <HAL_RCC_ClockConfig+0x2f0>)
 800670c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800670e:	4b08      	ldr	r3, [pc, #32]	; (8006730 <HAL_RCC_ClockConfig+0x2f4>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4618      	mov	r0, r3
 8006714:	f7fd fab4 	bl	8003c80 <HAL_InitTick>
  
  return HAL_OK;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	3778      	adds	r7, #120	; 0x78
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
 8006722:	bf00      	nop
 8006724:	40021000 	.word	0x40021000
 8006728:	0800f914 	.word	0x0800f914
 800672c:	20000000 	.word	0x20000000
 8006730:	20000004 	.word	0x20000004

08006734 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006734:	b480      	push	{r7}
 8006736:	b08b      	sub	sp, #44	; 0x2c
 8006738:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800673a:	2300      	movs	r3, #0
 800673c:	61fb      	str	r3, [r7, #28]
 800673e:	2300      	movs	r3, #0
 8006740:	61bb      	str	r3, [r7, #24]
 8006742:	2300      	movs	r3, #0
 8006744:	627b      	str	r3, [r7, #36]	; 0x24
 8006746:	2300      	movs	r3, #0
 8006748:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800674a:	2300      	movs	r3, #0
 800674c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800674e:	4b29      	ldr	r3, [pc, #164]	; (80067f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	f003 030c 	and.w	r3, r3, #12
 800675a:	2b04      	cmp	r3, #4
 800675c:	d002      	beq.n	8006764 <HAL_RCC_GetSysClockFreq+0x30>
 800675e:	2b08      	cmp	r3, #8
 8006760:	d003      	beq.n	800676a <HAL_RCC_GetSysClockFreq+0x36>
 8006762:	e03c      	b.n	80067de <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006764:	4b24      	ldr	r3, [pc, #144]	; (80067f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006766:	623b      	str	r3, [r7, #32]
      break;
 8006768:	e03c      	b.n	80067e4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006770:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8006774:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006776:	68ba      	ldr	r2, [r7, #8]
 8006778:	fa92 f2a2 	rbit	r2, r2
 800677c:	607a      	str	r2, [r7, #4]
  return result;
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	fab2 f282 	clz	r2, r2
 8006784:	b2d2      	uxtb	r2, r2
 8006786:	40d3      	lsrs	r3, r2
 8006788:	4a1c      	ldr	r2, [pc, #112]	; (80067fc <HAL_RCC_GetSysClockFreq+0xc8>)
 800678a:	5cd3      	ldrb	r3, [r2, r3]
 800678c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800678e:	4b19      	ldr	r3, [pc, #100]	; (80067f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006792:	f003 030f 	and.w	r3, r3, #15
 8006796:	220f      	movs	r2, #15
 8006798:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800679a:	693a      	ldr	r2, [r7, #16]
 800679c:	fa92 f2a2 	rbit	r2, r2
 80067a0:	60fa      	str	r2, [r7, #12]
  return result;
 80067a2:	68fa      	ldr	r2, [r7, #12]
 80067a4:	fab2 f282 	clz	r2, r2
 80067a8:	b2d2      	uxtb	r2, r2
 80067aa:	40d3      	lsrs	r3, r2
 80067ac:	4a14      	ldr	r2, [pc, #80]	; (8006800 <HAL_RCC_GetSysClockFreq+0xcc>)
 80067ae:	5cd3      	ldrb	r3, [r2, r3]
 80067b0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d008      	beq.n	80067ce <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80067bc:	4a0e      	ldr	r2, [pc, #56]	; (80067f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	fb02 f303 	mul.w	r3, r2, r3
 80067ca:	627b      	str	r3, [r7, #36]	; 0x24
 80067cc:	e004      	b.n	80067d8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	4a0c      	ldr	r2, [pc, #48]	; (8006804 <HAL_RCC_GetSysClockFreq+0xd0>)
 80067d2:	fb02 f303 	mul.w	r3, r2, r3
 80067d6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80067d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067da:	623b      	str	r3, [r7, #32]
      break;
 80067dc:	e002      	b.n	80067e4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80067de:	4b06      	ldr	r3, [pc, #24]	; (80067f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80067e0:	623b      	str	r3, [r7, #32]
      break;
 80067e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80067e4:	6a3b      	ldr	r3, [r7, #32]
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	372c      	adds	r7, #44	; 0x2c
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr
 80067f2:	bf00      	nop
 80067f4:	40021000 	.word	0x40021000
 80067f8:	007a1200 	.word	0x007a1200
 80067fc:	0800f92c 	.word	0x0800f92c
 8006800:	0800f93c 	.word	0x0800f93c
 8006804:	003d0900 	.word	0x003d0900

08006808 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006808:	b480      	push	{r7}
 800680a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800680c:	4b03      	ldr	r3, [pc, #12]	; (800681c <HAL_RCC_GetHCLKFreq+0x14>)
 800680e:	681b      	ldr	r3, [r3, #0]
}
 8006810:	4618      	mov	r0, r3
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	20000000 	.word	0x20000000

08006820 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8006826:	f7ff ffef 	bl	8006808 <HAL_RCC_GetHCLKFreq>
 800682a:	4601      	mov	r1, r0
 800682c:	4b0b      	ldr	r3, [pc, #44]	; (800685c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006834:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006838:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	fa92 f2a2 	rbit	r2, r2
 8006840:	603a      	str	r2, [r7, #0]
  return result;
 8006842:	683a      	ldr	r2, [r7, #0]
 8006844:	fab2 f282 	clz	r2, r2
 8006848:	b2d2      	uxtb	r2, r2
 800684a:	40d3      	lsrs	r3, r2
 800684c:	4a04      	ldr	r2, [pc, #16]	; (8006860 <HAL_RCC_GetPCLK1Freq+0x40>)
 800684e:	5cd3      	ldrb	r3, [r2, r3]
 8006850:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8006854:	4618      	mov	r0, r3
 8006856:	3708      	adds	r7, #8
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}
 800685c:	40021000 	.word	0x40021000
 8006860:	0800f924 	.word	0x0800f924

08006864 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b082      	sub	sp, #8
 8006868:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800686a:	f7ff ffcd 	bl	8006808 <HAL_RCC_GetHCLKFreq>
 800686e:	4601      	mov	r1, r0
 8006870:	4b0b      	ldr	r3, [pc, #44]	; (80068a0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8006878:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800687c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	fa92 f2a2 	rbit	r2, r2
 8006884:	603a      	str	r2, [r7, #0]
  return result;
 8006886:	683a      	ldr	r2, [r7, #0]
 8006888:	fab2 f282 	clz	r2, r2
 800688c:	b2d2      	uxtb	r2, r2
 800688e:	40d3      	lsrs	r3, r2
 8006890:	4a04      	ldr	r2, [pc, #16]	; (80068a4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8006892:	5cd3      	ldrb	r3, [r2, r3]
 8006894:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8006898:	4618      	mov	r0, r3
 800689a:	3708      	adds	r7, #8
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	40021000 	.word	0x40021000
 80068a4:	0800f924 	.word	0x0800f924

080068a8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b083      	sub	sp, #12
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	220f      	movs	r2, #15
 80068b6:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80068b8:	4b12      	ldr	r3, [pc, #72]	; (8006904 <HAL_RCC_GetClockConfig+0x5c>)
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	f003 0203 	and.w	r2, r3, #3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80068c4:	4b0f      	ldr	r3, [pc, #60]	; (8006904 <HAL_RCC_GetClockConfig+0x5c>)
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80068d0:	4b0c      	ldr	r3, [pc, #48]	; (8006904 <HAL_RCC_GetClockConfig+0x5c>)
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80068dc:	4b09      	ldr	r3, [pc, #36]	; (8006904 <HAL_RCC_GetClockConfig+0x5c>)
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	08db      	lsrs	r3, r3, #3
 80068e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80068ea:	4b07      	ldr	r3, [pc, #28]	; (8006908 <HAL_RCC_GetClockConfig+0x60>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f003 0207 	and.w	r2, r3, #7
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	601a      	str	r2, [r3, #0]
}
 80068f6:	bf00      	nop
 80068f8:	370c      	adds	r7, #12
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop
 8006904:	40021000 	.word	0x40021000
 8006908:	40022000 	.word	0x40022000

0800690c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b092      	sub	sp, #72	; 0x48
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006914:	2300      	movs	r3, #0
 8006916:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8006918:	2300      	movs	r3, #0
 800691a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800691c:	2300      	movs	r3, #0
 800691e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800692a:	2b00      	cmp	r3, #0
 800692c:	f000 80d4 	beq.w	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006930:	4b4e      	ldr	r3, [pc, #312]	; (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006932:	69db      	ldr	r3, [r3, #28]
 8006934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006938:	2b00      	cmp	r3, #0
 800693a:	d10e      	bne.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800693c:	4b4b      	ldr	r3, [pc, #300]	; (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800693e:	69db      	ldr	r3, [r3, #28]
 8006940:	4a4a      	ldr	r2, [pc, #296]	; (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006946:	61d3      	str	r3, [r2, #28]
 8006948:	4b48      	ldr	r3, [pc, #288]	; (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800694a:	69db      	ldr	r3, [r3, #28]
 800694c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006950:	60bb      	str	r3, [r7, #8]
 8006952:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006954:	2301      	movs	r3, #1
 8006956:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800695a:	4b45      	ldr	r3, [pc, #276]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006962:	2b00      	cmp	r3, #0
 8006964:	d118      	bne.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006966:	4b42      	ldr	r3, [pc, #264]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a41      	ldr	r2, [pc, #260]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800696c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006970:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006972:	f7fd fcbd 	bl	80042f0 <HAL_GetTick>
 8006976:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006978:	e008      	b.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800697a:	f7fd fcb9 	bl	80042f0 <HAL_GetTick>
 800697e:	4602      	mov	r2, r0
 8006980:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006982:	1ad3      	subs	r3, r2, r3
 8006984:	2b64      	cmp	r3, #100	; 0x64
 8006986:	d901      	bls.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006988:	2303      	movs	r3, #3
 800698a:	e13c      	b.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800698c:	4b38      	ldr	r3, [pc, #224]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006994:	2b00      	cmp	r3, #0
 8006996:	d0f0      	beq.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006998:	4b34      	ldr	r3, [pc, #208]	; (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800699a:	6a1b      	ldr	r3, [r3, #32]
 800699c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80069a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	f000 8084 	beq.w	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d07c      	beq.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80069b8:	4b2c      	ldr	r3, [pc, #176]	; (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069ba:	6a1b      	ldr	r3, [r3, #32]
 80069bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80069c6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ca:	fa93 f3a3 	rbit	r3, r3
 80069ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80069d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80069d2:	fab3 f383 	clz	r3, r3
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	461a      	mov	r2, r3
 80069da:	4b26      	ldr	r3, [pc, #152]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80069dc:	4413      	add	r3, r2
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	461a      	mov	r2, r3
 80069e2:	2301      	movs	r3, #1
 80069e4:	6013      	str	r3, [r2, #0]
 80069e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80069ea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ee:	fa93 f3a3 	rbit	r3, r3
 80069f2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80069f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80069f6:	fab3 f383 	clz	r3, r3
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	461a      	mov	r2, r3
 80069fe:	4b1d      	ldr	r3, [pc, #116]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006a00:	4413      	add	r3, r2
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	461a      	mov	r2, r3
 8006a06:	2300      	movs	r3, #0
 8006a08:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006a0a:	4a18      	ldr	r2, [pc, #96]	; (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a0e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a12:	f003 0301 	and.w	r3, r3, #1
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d04b      	beq.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a1a:	f7fd fc69 	bl	80042f0 <HAL_GetTick>
 8006a1e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a20:	e00a      	b.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a22:	f7fd fc65 	bl	80042f0 <HAL_GetTick>
 8006a26:	4602      	mov	r2, r0
 8006a28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a2a:	1ad3      	subs	r3, r2, r3
 8006a2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d901      	bls.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006a34:	2303      	movs	r3, #3
 8006a36:	e0e6      	b.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8006a38:	2302      	movs	r3, #2
 8006a3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3e:	fa93 f3a3 	rbit	r3, r3
 8006a42:	627b      	str	r3, [r7, #36]	; 0x24
 8006a44:	2302      	movs	r3, #2
 8006a46:	623b      	str	r3, [r7, #32]
 8006a48:	6a3b      	ldr	r3, [r7, #32]
 8006a4a:	fa93 f3a3 	rbit	r3, r3
 8006a4e:	61fb      	str	r3, [r7, #28]
  return result;
 8006a50:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a52:	fab3 f383 	clz	r3, r3
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	095b      	lsrs	r3, r3, #5
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	f043 0302 	orr.w	r3, r3, #2
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	2b02      	cmp	r3, #2
 8006a64:	d108      	bne.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8006a66:	4b01      	ldr	r3, [pc, #4]	; (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a68:	6a1b      	ldr	r3, [r3, #32]
 8006a6a:	e00d      	b.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8006a6c:	40021000 	.word	0x40021000
 8006a70:	40007000 	.word	0x40007000
 8006a74:	10908100 	.word	0x10908100
 8006a78:	2302      	movs	r3, #2
 8006a7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a7c:	69bb      	ldr	r3, [r7, #24]
 8006a7e:	fa93 f3a3 	rbit	r3, r3
 8006a82:	617b      	str	r3, [r7, #20]
 8006a84:	4b62      	ldr	r3, [pc, #392]	; (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a88:	2202      	movs	r2, #2
 8006a8a:	613a      	str	r2, [r7, #16]
 8006a8c:	693a      	ldr	r2, [r7, #16]
 8006a8e:	fa92 f2a2 	rbit	r2, r2
 8006a92:	60fa      	str	r2, [r7, #12]
  return result;
 8006a94:	68fa      	ldr	r2, [r7, #12]
 8006a96:	fab2 f282 	clz	r2, r2
 8006a9a:	b2d2      	uxtb	r2, r2
 8006a9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006aa0:	b2d2      	uxtb	r2, r2
 8006aa2:	f002 021f 	and.w	r2, r2, #31
 8006aa6:	2101      	movs	r1, #1
 8006aa8:	fa01 f202 	lsl.w	r2, r1, r2
 8006aac:	4013      	ands	r3, r2
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d0b7      	beq.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006ab2:	4b57      	ldr	r3, [pc, #348]	; (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006ab4:	6a1b      	ldr	r3, [r3, #32]
 8006ab6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	4954      	ldr	r1, [pc, #336]	; (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006ac4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d105      	bne.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006acc:	4b50      	ldr	r3, [pc, #320]	; (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006ace:	69db      	ldr	r3, [r3, #28]
 8006ad0:	4a4f      	ldr	r2, [pc, #316]	; (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006ad2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ad6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f003 0301 	and.w	r3, r3, #1
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d008      	beq.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006ae4:	4b4a      	ldr	r3, [pc, #296]	; (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae8:	f023 0203 	bic.w	r2, r3, #3
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	4947      	ldr	r1, [pc, #284]	; (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006af2:	4313      	orrs	r3, r2
 8006af4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f003 0320 	and.w	r3, r3, #32
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d008      	beq.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006b02:	4b43      	ldr	r3, [pc, #268]	; (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b06:	f023 0210 	bic.w	r2, r3, #16
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	4940      	ldr	r1, [pc, #256]	; (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b10:	4313      	orrs	r3, r2
 8006b12:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d008      	beq.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006b20:	4b3b      	ldr	r3, [pc, #236]	; (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b24:	f023 0220 	bic.w	r2, r3, #32
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	691b      	ldr	r3, [r3, #16]
 8006b2c:	4938      	ldr	r1, [pc, #224]	; (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d008      	beq.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006b3e:	4b34      	ldr	r3, [pc, #208]	; (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b42:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	695b      	ldr	r3, [r3, #20]
 8006b4a:	4931      	ldr	r1, [pc, #196]	; (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d008      	beq.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006b5c:	4b2c      	ldr	r3, [pc, #176]	; (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	69db      	ldr	r3, [r3, #28]
 8006b68:	4929      	ldr	r1, [pc, #164]	; (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d008      	beq.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8006b7a:	4b25      	ldr	r3, [pc, #148]	; (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b7e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	699b      	ldr	r3, [r3, #24]
 8006b86:	4922      	ldr	r1, [pc, #136]	; (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d008      	beq.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006b98:	4b1d      	ldr	r3, [pc, #116]	; (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6a1b      	ldr	r3, [r3, #32]
 8006ba4:	491a      	ldr	r1, [pc, #104]	; (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d008      	beq.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8006bb6:	4b16      	ldr	r3, [pc, #88]	; (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc2:	4913      	ldr	r1, [pc, #76]	; (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d008      	beq.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8006bd4:	4b0e      	ldr	r3, [pc, #56]	; (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006be0:	490b      	ldr	r1, [pc, #44]	; (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006be2:	4313      	orrs	r3, r2
 8006be4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d008      	beq.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8006bf2:	4b07      	ldr	r3, [pc, #28]	; (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bf6:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bfe:	4904      	ldr	r1, [pc, #16]	; (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006c00:	4313      	orrs	r3, r2
 8006c02:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3748      	adds	r7, #72	; 0x48
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	bf00      	nop
 8006c10:	40021000 	.word	0x40021000

08006c14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b084      	sub	sp, #16
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d101      	bne.n	8006c26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	e09d      	b.n	8006d62 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d108      	bne.n	8006c40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c36:	d009      	beq.n	8006c4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	61da      	str	r2, [r3, #28]
 8006c3e:	e005      	b.n	8006c4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d106      	bne.n	8006c6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f7fc fef2 	bl	8003a50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2202      	movs	r2, #2
 8006c70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c82:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c8c:	d902      	bls.n	8006c94 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	60fb      	str	r3, [r7, #12]
 8006c92:	e002      	b.n	8006c9a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006c94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c98:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	68db      	ldr	r3, [r3, #12]
 8006c9e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006ca2:	d007      	beq.n	8006cb4 <HAL_SPI_Init+0xa0>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006cac:	d002      	beq.n	8006cb4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006cc4:	431a      	orrs	r2, r3
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	691b      	ldr	r3, [r3, #16]
 8006cca:	f003 0302 	and.w	r3, r3, #2
 8006cce:	431a      	orrs	r2, r3
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	695b      	ldr	r3, [r3, #20]
 8006cd4:	f003 0301 	and.w	r3, r3, #1
 8006cd8:	431a      	orrs	r2, r3
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	699b      	ldr	r3, [r3, #24]
 8006cde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ce2:	431a      	orrs	r2, r3
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	69db      	ldr	r3, [r3, #28]
 8006ce8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006cec:	431a      	orrs	r2, r3
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6a1b      	ldr	r3, [r3, #32]
 8006cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cf6:	ea42 0103 	orr.w	r1, r2, r3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cfe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	430a      	orrs	r2, r1
 8006d08:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	699b      	ldr	r3, [r3, #24]
 8006d0e:	0c1b      	lsrs	r3, r3, #16
 8006d10:	f003 0204 	and.w	r2, r3, #4
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d18:	f003 0310 	and.w	r3, r3, #16
 8006d1c:	431a      	orrs	r2, r3
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d22:	f003 0308 	and.w	r3, r3, #8
 8006d26:	431a      	orrs	r2, r3
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	68db      	ldr	r3, [r3, #12]
 8006d2c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006d30:	ea42 0103 	orr.w	r1, r2, r3
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	430a      	orrs	r2, r1
 8006d40:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	69da      	ldr	r2, [r3, #28]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d50:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006d60:	2300      	movs	r3, #0
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3710      	adds	r7, #16
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b088      	sub	sp, #32
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	60f8      	str	r0, [r7, #12]
 8006d72:	60b9      	str	r1, [r7, #8]
 8006d74:	603b      	str	r3, [r7, #0]
 8006d76:	4613      	mov	r3, r2
 8006d78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d101      	bne.n	8006d8c <HAL_SPI_Transmit+0x22>
 8006d88:	2302      	movs	r3, #2
 8006d8a:	e15f      	b.n	800704c <HAL_SPI_Transmit+0x2e2>
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d94:	f7fd faac 	bl	80042f0 <HAL_GetTick>
 8006d98:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006d9a:	88fb      	ldrh	r3, [r7, #6]
 8006d9c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d002      	beq.n	8006db0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006daa:	2302      	movs	r3, #2
 8006dac:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006dae:	e148      	b.n	8007042 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d002      	beq.n	8006dbc <HAL_SPI_Transmit+0x52>
 8006db6:	88fb      	ldrh	r3, [r7, #6]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d102      	bne.n	8006dc2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006dc0:	e13f      	b.n	8007042 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2203      	movs	r2, #3
 8006dc6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	68ba      	ldr	r2, [r7, #8]
 8006dd4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	88fa      	ldrh	r2, [r7, #6]
 8006dda:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	88fa      	ldrh	r2, [r7, #6]
 8006de0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2200      	movs	r2, #0
 8006de6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2200      	movs	r2, #0
 8006dec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2200      	movs	r2, #0
 8006e02:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e0c:	d10f      	bne.n	8006e2e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e1c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e2c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e38:	2b40      	cmp	r3, #64	; 0x40
 8006e3a:	d007      	beq.n	8006e4c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006e54:	d94f      	bls.n	8006ef6 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d002      	beq.n	8006e64 <HAL_SPI_Transmit+0xfa>
 8006e5e:	8afb      	ldrh	r3, [r7, #22]
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d142      	bne.n	8006eea <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e68:	881a      	ldrh	r2, [r3, #0]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e74:	1c9a      	adds	r2, r3, #2
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	3b01      	subs	r3, #1
 8006e82:	b29a      	uxth	r2, r3
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006e88:	e02f      	b.n	8006eea <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	f003 0302 	and.w	r3, r3, #2
 8006e94:	2b02      	cmp	r3, #2
 8006e96:	d112      	bne.n	8006ebe <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e9c:	881a      	ldrh	r2, [r3, #0]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea8:	1c9a      	adds	r2, r3, #2
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	3b01      	subs	r3, #1
 8006eb6:	b29a      	uxth	r2, r3
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006ebc:	e015      	b.n	8006eea <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ebe:	f7fd fa17 	bl	80042f0 <HAL_GetTick>
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	69bb      	ldr	r3, [r7, #24]
 8006ec6:	1ad3      	subs	r3, r2, r3
 8006ec8:	683a      	ldr	r2, [r7, #0]
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d803      	bhi.n	8006ed6 <HAL_SPI_Transmit+0x16c>
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ed4:	d102      	bne.n	8006edc <HAL_SPI_Transmit+0x172>
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d106      	bne.n	8006eea <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8006edc:	2303      	movs	r3, #3
 8006ede:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006ee8:	e0ab      	b.n	8007042 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d1ca      	bne.n	8006e8a <HAL_SPI_Transmit+0x120>
 8006ef4:	e080      	b.n	8006ff8 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d002      	beq.n	8006f04 <HAL_SPI_Transmit+0x19a>
 8006efe:	8afb      	ldrh	r3, [r7, #22]
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d174      	bne.n	8006fee <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d912      	bls.n	8006f34 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f12:	881a      	ldrh	r2, [r3, #0]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f1e:	1c9a      	adds	r2, r3, #2
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	3b02      	subs	r3, #2
 8006f2c:	b29a      	uxth	r2, r3
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006f32:	e05c      	b.n	8006fee <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	330c      	adds	r3, #12
 8006f3e:	7812      	ldrb	r2, [r2, #0]
 8006f40:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f46:	1c5a      	adds	r2, r3, #1
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	3b01      	subs	r3, #1
 8006f54:	b29a      	uxth	r2, r3
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006f5a:	e048      	b.n	8006fee <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	f003 0302 	and.w	r3, r3, #2
 8006f66:	2b02      	cmp	r3, #2
 8006f68:	d12b      	bne.n	8006fc2 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d912      	bls.n	8006f9a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f78:	881a      	ldrh	r2, [r3, #0]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f84:	1c9a      	adds	r2, r3, #2
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	3b02      	subs	r3, #2
 8006f92:	b29a      	uxth	r2, r3
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006f98:	e029      	b.n	8006fee <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	330c      	adds	r3, #12
 8006fa4:	7812      	ldrb	r2, [r2, #0]
 8006fa6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fac:	1c5a      	adds	r2, r3, #1
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	3b01      	subs	r3, #1
 8006fba:	b29a      	uxth	r2, r3
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006fc0:	e015      	b.n	8006fee <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006fc2:	f7fd f995 	bl	80042f0 <HAL_GetTick>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	69bb      	ldr	r3, [r7, #24]
 8006fca:	1ad3      	subs	r3, r2, r3
 8006fcc:	683a      	ldr	r2, [r7, #0]
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d803      	bhi.n	8006fda <HAL_SPI_Transmit+0x270>
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fd8:	d102      	bne.n	8006fe0 <HAL_SPI_Transmit+0x276>
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d106      	bne.n	8006fee <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8006fe0:	2303      	movs	r3, #3
 8006fe2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006fec:	e029      	b.n	8007042 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d1b1      	bne.n	8006f5c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ff8:	69ba      	ldr	r2, [r7, #24]
 8006ffa:	6839      	ldr	r1, [r7, #0]
 8006ffc:	68f8      	ldr	r0, [r7, #12]
 8006ffe:	f000 fcf9 	bl	80079f4 <SPI_EndRxTxTransaction>
 8007002:	4603      	mov	r3, r0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d002      	beq.n	800700e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2220      	movs	r2, #32
 800700c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d10a      	bne.n	800702c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007016:	2300      	movs	r3, #0
 8007018:	613b      	str	r3, [r7, #16]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	613b      	str	r3, [r7, #16]
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	613b      	str	r3, [r7, #16]
 800702a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007030:	2b00      	cmp	r3, #0
 8007032:	d002      	beq.n	800703a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	77fb      	strb	r3, [r7, #31]
 8007038:	e003      	b.n	8007042 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2201      	movs	r2, #1
 800703e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2200      	movs	r2, #0
 8007046:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800704a:	7ffb      	ldrb	r3, [r7, #31]
}
 800704c:	4618      	mov	r0, r3
 800704e:	3720      	adds	r7, #32
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b088      	sub	sp, #32
 8007058:	af02      	add	r7, sp, #8
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	60b9      	str	r1, [r7, #8]
 800705e:	603b      	str	r3, [r7, #0]
 8007060:	4613      	mov	r3, r2
 8007062:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007064:	2300      	movs	r3, #0
 8007066:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800706e:	b2db      	uxtb	r3, r3
 8007070:	2b01      	cmp	r3, #1
 8007072:	d002      	beq.n	800707a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8007074:	2302      	movs	r3, #2
 8007076:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007078:	e11a      	b.n	80072b0 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007082:	d112      	bne.n	80070aa <HAL_SPI_Receive+0x56>
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d10e      	bne.n	80070aa <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2204      	movs	r2, #4
 8007090:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007094:	88fa      	ldrh	r2, [r7, #6]
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	9300      	str	r3, [sp, #0]
 800709a:	4613      	mov	r3, r2
 800709c:	68ba      	ldr	r2, [r7, #8]
 800709e:	68b9      	ldr	r1, [r7, #8]
 80070a0:	68f8      	ldr	r0, [r7, #12]
 80070a2:	f000 f90e 	bl	80072c2 <HAL_SPI_TransmitReceive>
 80070a6:	4603      	mov	r3, r0
 80070a8:	e107      	b.n	80072ba <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d101      	bne.n	80070b8 <HAL_SPI_Receive+0x64>
 80070b4:	2302      	movs	r3, #2
 80070b6:	e100      	b.n	80072ba <HAL_SPI_Receive+0x266>
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80070c0:	f7fd f916 	bl	80042f0 <HAL_GetTick>
 80070c4:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d002      	beq.n	80070d2 <HAL_SPI_Receive+0x7e>
 80070cc:	88fb      	ldrh	r3, [r7, #6]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d102      	bne.n	80070d8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80070d6:	e0eb      	b.n	80072b0 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2204      	movs	r2, #4
 80070dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2200      	movs	r2, #0
 80070e4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	68ba      	ldr	r2, [r7, #8]
 80070ea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	88fa      	ldrh	r2, [r7, #6]
 80070f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	88fa      	ldrh	r2, [r7, #6]
 80070f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2200      	movs	r2, #0
 8007100:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2200      	movs	r2, #0
 8007106:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2200      	movs	r2, #0
 800710c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2200      	movs	r2, #0
 8007112:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2200      	movs	r2, #0
 8007118:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	68db      	ldr	r3, [r3, #12]
 800711e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007122:	d908      	bls.n	8007136 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	685a      	ldr	r2, [r3, #4]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007132:	605a      	str	r2, [r3, #4]
 8007134:	e007      	b.n	8007146 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	685a      	ldr	r2, [r3, #4]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007144:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	689b      	ldr	r3, [r3, #8]
 800714a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800714e:	d10f      	bne.n	8007170 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800715e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800716e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800717a:	2b40      	cmp	r3, #64	; 0x40
 800717c:	d007      	beq.n	800718e <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800718c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007196:	d86f      	bhi.n	8007278 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007198:	e034      	b.n	8007204 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	f003 0301 	and.w	r3, r3, #1
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d117      	bne.n	80071d8 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f103 020c 	add.w	r2, r3, #12
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b4:	7812      	ldrb	r2, [r2, #0]
 80071b6:	b2d2      	uxtb	r2, r2
 80071b8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071be:	1c5a      	adds	r2, r3, #1
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	3b01      	subs	r3, #1
 80071ce:	b29a      	uxth	r2, r3
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80071d6:	e015      	b.n	8007204 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071d8:	f7fd f88a 	bl	80042f0 <HAL_GetTick>
 80071dc:	4602      	mov	r2, r0
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	1ad3      	subs	r3, r2, r3
 80071e2:	683a      	ldr	r2, [r7, #0]
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d803      	bhi.n	80071f0 <HAL_SPI_Receive+0x19c>
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ee:	d102      	bne.n	80071f6 <HAL_SPI_Receive+0x1a2>
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d106      	bne.n	8007204 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 80071f6:	2303      	movs	r3, #3
 80071f8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2201      	movs	r2, #1
 80071fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8007202:	e055      	b.n	80072b0 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800720a:	b29b      	uxth	r3, r3
 800720c:	2b00      	cmp	r3, #0
 800720e:	d1c4      	bne.n	800719a <HAL_SPI_Receive+0x146>
 8007210:	e038      	b.n	8007284 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	f003 0301 	and.w	r3, r3, #1
 800721c:	2b01      	cmp	r3, #1
 800721e:	d115      	bne.n	800724c <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	68da      	ldr	r2, [r3, #12]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722a:	b292      	uxth	r2, r2
 800722c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007232:	1c9a      	adds	r2, r3, #2
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800723e:	b29b      	uxth	r3, r3
 8007240:	3b01      	subs	r3, #1
 8007242:	b29a      	uxth	r2, r3
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800724a:	e015      	b.n	8007278 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800724c:	f7fd f850 	bl	80042f0 <HAL_GetTick>
 8007250:	4602      	mov	r2, r0
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	1ad3      	subs	r3, r2, r3
 8007256:	683a      	ldr	r2, [r7, #0]
 8007258:	429a      	cmp	r2, r3
 800725a:	d803      	bhi.n	8007264 <HAL_SPI_Receive+0x210>
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007262:	d102      	bne.n	800726a <HAL_SPI_Receive+0x216>
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d106      	bne.n	8007278 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 800726a:	2303      	movs	r3, #3
 800726c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2201      	movs	r2, #1
 8007272:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8007276:	e01b      	b.n	80072b0 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800727e:	b29b      	uxth	r3, r3
 8007280:	2b00      	cmp	r3, #0
 8007282:	d1c6      	bne.n	8007212 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007284:	693a      	ldr	r2, [r7, #16]
 8007286:	6839      	ldr	r1, [r7, #0]
 8007288:	68f8      	ldr	r0, [r7, #12]
 800728a:	f000 fb5b 	bl	8007944 <SPI_EndRxTransaction>
 800728e:	4603      	mov	r3, r0
 8007290:	2b00      	cmp	r3, #0
 8007292:	d002      	beq.n	800729a <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2220      	movs	r2, #32
 8007298:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d002      	beq.n	80072a8 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 80072a2:	2301      	movs	r3, #1
 80072a4:	75fb      	strb	r3, [r7, #23]
 80072a6:	e003      	b.n	80072b0 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2201      	movs	r2, #1
 80072ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2200      	movs	r2, #0
 80072b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80072b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3718      	adds	r7, #24
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}

080072c2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80072c2:	b580      	push	{r7, lr}
 80072c4:	b08a      	sub	sp, #40	; 0x28
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	60f8      	str	r0, [r7, #12]
 80072ca:	60b9      	str	r1, [r7, #8]
 80072cc:	607a      	str	r2, [r7, #4]
 80072ce:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80072d0:	2301      	movs	r3, #1
 80072d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80072d4:	2300      	movs	r3, #0
 80072d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d101      	bne.n	80072e8 <HAL_SPI_TransmitReceive+0x26>
 80072e4:	2302      	movs	r3, #2
 80072e6:	e20a      	b.n	80076fe <HAL_SPI_TransmitReceive+0x43c>
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80072f0:	f7fc fffe 	bl	80042f0 <HAL_GetTick>
 80072f4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80072fc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007304:	887b      	ldrh	r3, [r7, #2]
 8007306:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007308:	887b      	ldrh	r3, [r7, #2]
 800730a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800730c:	7efb      	ldrb	r3, [r7, #27]
 800730e:	2b01      	cmp	r3, #1
 8007310:	d00e      	beq.n	8007330 <HAL_SPI_TransmitReceive+0x6e>
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007318:	d106      	bne.n	8007328 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d102      	bne.n	8007328 <HAL_SPI_TransmitReceive+0x66>
 8007322:	7efb      	ldrb	r3, [r7, #27]
 8007324:	2b04      	cmp	r3, #4
 8007326:	d003      	beq.n	8007330 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007328:	2302      	movs	r3, #2
 800732a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800732e:	e1e0      	b.n	80076f2 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d005      	beq.n	8007342 <HAL_SPI_TransmitReceive+0x80>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d002      	beq.n	8007342 <HAL_SPI_TransmitReceive+0x80>
 800733c:	887b      	ldrh	r3, [r7, #2]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d103      	bne.n	800734a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007348:	e1d3      	b.n	80076f2 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007350:	b2db      	uxtb	r3, r3
 8007352:	2b04      	cmp	r3, #4
 8007354:	d003      	beq.n	800735e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2205      	movs	r2, #5
 800735a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2200      	movs	r2, #0
 8007362:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	687a      	ldr	r2, [r7, #4]
 8007368:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	887a      	ldrh	r2, [r7, #2]
 800736e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	887a      	ldrh	r2, [r7, #2]
 8007376:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	68ba      	ldr	r2, [r7, #8]
 800737e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	887a      	ldrh	r2, [r7, #2]
 8007384:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	887a      	ldrh	r2, [r7, #2]
 800738a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2200      	movs	r2, #0
 8007390:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2200      	movs	r2, #0
 8007396:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	68db      	ldr	r3, [r3, #12]
 800739c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80073a0:	d802      	bhi.n	80073a8 <HAL_SPI_TransmitReceive+0xe6>
 80073a2:	8a3b      	ldrh	r3, [r7, #16]
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d908      	bls.n	80073ba <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	685a      	ldr	r2, [r3, #4]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80073b6:	605a      	str	r2, [r3, #4]
 80073b8:	e007      	b.n	80073ca <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	685a      	ldr	r2, [r3, #4]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80073c8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073d4:	2b40      	cmp	r3, #64	; 0x40
 80073d6:	d007      	beq.n	80073e8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	68db      	ldr	r3, [r3, #12]
 80073ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80073f0:	f240 8081 	bls.w	80074f6 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d002      	beq.n	8007402 <HAL_SPI_TransmitReceive+0x140>
 80073fc:	8a7b      	ldrh	r3, [r7, #18]
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d16d      	bne.n	80074de <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007406:	881a      	ldrh	r2, [r3, #0]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007412:	1c9a      	adds	r2, r3, #2
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800741c:	b29b      	uxth	r3, r3
 800741e:	3b01      	subs	r3, #1
 8007420:	b29a      	uxth	r2, r3
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007426:	e05a      	b.n	80074de <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	f003 0302 	and.w	r3, r3, #2
 8007432:	2b02      	cmp	r3, #2
 8007434:	d11b      	bne.n	800746e <HAL_SPI_TransmitReceive+0x1ac>
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800743a:	b29b      	uxth	r3, r3
 800743c:	2b00      	cmp	r3, #0
 800743e:	d016      	beq.n	800746e <HAL_SPI_TransmitReceive+0x1ac>
 8007440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007442:	2b01      	cmp	r3, #1
 8007444:	d113      	bne.n	800746e <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800744a:	881a      	ldrh	r2, [r3, #0]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007456:	1c9a      	adds	r2, r3, #2
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007460:	b29b      	uxth	r3, r3
 8007462:	3b01      	subs	r3, #1
 8007464:	b29a      	uxth	r2, r3
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800746a:	2300      	movs	r3, #0
 800746c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	f003 0301 	and.w	r3, r3, #1
 8007478:	2b01      	cmp	r3, #1
 800747a:	d11c      	bne.n	80074b6 <HAL_SPI_TransmitReceive+0x1f4>
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007482:	b29b      	uxth	r3, r3
 8007484:	2b00      	cmp	r3, #0
 8007486:	d016      	beq.n	80074b6 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	68da      	ldr	r2, [r3, #12]
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007492:	b292      	uxth	r2, r2
 8007494:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800749a:	1c9a      	adds	r2, r3, #2
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	3b01      	subs	r3, #1
 80074aa:	b29a      	uxth	r2, r3
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80074b2:	2301      	movs	r3, #1
 80074b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80074b6:	f7fc ff1b 	bl	80042f0 <HAL_GetTick>
 80074ba:	4602      	mov	r2, r0
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	1ad3      	subs	r3, r2, r3
 80074c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d80b      	bhi.n	80074de <HAL_SPI_TransmitReceive+0x21c>
 80074c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074cc:	d007      	beq.n	80074de <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80074ce:	2303      	movs	r3, #3
 80074d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2201      	movs	r2, #1
 80074d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80074dc:	e109      	b.n	80076f2 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d19f      	bne.n	8007428 <HAL_SPI_TransmitReceive+0x166>
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d199      	bne.n	8007428 <HAL_SPI_TransmitReceive+0x166>
 80074f4:	e0e3      	b.n	80076be <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d003      	beq.n	8007506 <HAL_SPI_TransmitReceive+0x244>
 80074fe:	8a7b      	ldrh	r3, [r7, #18]
 8007500:	2b01      	cmp	r3, #1
 8007502:	f040 80cf 	bne.w	80076a4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800750a:	b29b      	uxth	r3, r3
 800750c:	2b01      	cmp	r3, #1
 800750e:	d912      	bls.n	8007536 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007514:	881a      	ldrh	r2, [r3, #0]
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007520:	1c9a      	adds	r2, r3, #2
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800752a:	b29b      	uxth	r3, r3
 800752c:	3b02      	subs	r3, #2
 800752e:	b29a      	uxth	r2, r3
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007534:	e0b6      	b.n	80076a4 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	330c      	adds	r3, #12
 8007540:	7812      	ldrb	r2, [r2, #0]
 8007542:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007548:	1c5a      	adds	r2, r3, #1
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007552:	b29b      	uxth	r3, r3
 8007554:	3b01      	subs	r3, #1
 8007556:	b29a      	uxth	r2, r3
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800755c:	e0a2      	b.n	80076a4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	f003 0302 	and.w	r3, r3, #2
 8007568:	2b02      	cmp	r3, #2
 800756a:	d134      	bne.n	80075d6 <HAL_SPI_TransmitReceive+0x314>
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007570:	b29b      	uxth	r3, r3
 8007572:	2b00      	cmp	r3, #0
 8007574:	d02f      	beq.n	80075d6 <HAL_SPI_TransmitReceive+0x314>
 8007576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007578:	2b01      	cmp	r3, #1
 800757a:	d12c      	bne.n	80075d6 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007580:	b29b      	uxth	r3, r3
 8007582:	2b01      	cmp	r3, #1
 8007584:	d912      	bls.n	80075ac <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800758a:	881a      	ldrh	r2, [r3, #0]
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007596:	1c9a      	adds	r2, r3, #2
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	3b02      	subs	r3, #2
 80075a4:	b29a      	uxth	r2, r3
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80075aa:	e012      	b.n	80075d2 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	330c      	adds	r3, #12
 80075b6:	7812      	ldrb	r2, [r2, #0]
 80075b8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075be:	1c5a      	adds	r2, r3, #1
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	3b01      	subs	r3, #1
 80075cc:	b29a      	uxth	r2, r3
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80075d2:	2300      	movs	r3, #0
 80075d4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	f003 0301 	and.w	r3, r3, #1
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d148      	bne.n	8007676 <HAL_SPI_TransmitReceive+0x3b4>
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d042      	beq.n	8007676 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d923      	bls.n	8007644 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	68da      	ldr	r2, [r3, #12]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007606:	b292      	uxth	r2, r2
 8007608:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800760e:	1c9a      	adds	r2, r3, #2
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800761a:	b29b      	uxth	r3, r3
 800761c:	3b02      	subs	r3, #2
 800761e:	b29a      	uxth	r2, r3
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800762c:	b29b      	uxth	r3, r3
 800762e:	2b01      	cmp	r3, #1
 8007630:	d81f      	bhi.n	8007672 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	685a      	ldr	r2, [r3, #4]
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007640:	605a      	str	r2, [r3, #4]
 8007642:	e016      	b.n	8007672 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f103 020c 	add.w	r2, r3, #12
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007650:	7812      	ldrb	r2, [r2, #0]
 8007652:	b2d2      	uxtb	r2, r2
 8007654:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800765a:	1c5a      	adds	r2, r3, #1
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007666:	b29b      	uxth	r3, r3
 8007668:	3b01      	subs	r3, #1
 800766a:	b29a      	uxth	r2, r3
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007672:	2301      	movs	r3, #1
 8007674:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007676:	f7fc fe3b 	bl	80042f0 <HAL_GetTick>
 800767a:	4602      	mov	r2, r0
 800767c:	69fb      	ldr	r3, [r7, #28]
 800767e:	1ad3      	subs	r3, r2, r3
 8007680:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007682:	429a      	cmp	r2, r3
 8007684:	d803      	bhi.n	800768e <HAL_SPI_TransmitReceive+0x3cc>
 8007686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800768c:	d102      	bne.n	8007694 <HAL_SPI_TransmitReceive+0x3d2>
 800768e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007690:	2b00      	cmp	r3, #0
 8007692:	d107      	bne.n	80076a4 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8007694:	2303      	movs	r3, #3
 8007696:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2201      	movs	r2, #1
 800769e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80076a2:	e026      	b.n	80076f2 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	f47f af57 	bne.w	800755e <HAL_SPI_TransmitReceive+0x29c>
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	f47f af50 	bne.w	800755e <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80076be:	69fa      	ldr	r2, [r7, #28]
 80076c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80076c2:	68f8      	ldr	r0, [r7, #12]
 80076c4:	f000 f996 	bl	80079f4 <SPI_EndRxTxTransaction>
 80076c8:	4603      	mov	r3, r0
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d005      	beq.n	80076da <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80076ce:	2301      	movs	r3, #1
 80076d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2220      	movs	r2, #32
 80076d8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d003      	beq.n	80076ea <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076e8:	e003      	b.n	80076f2 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2201      	movs	r2, #1
 80076ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2200      	movs	r2, #0
 80076f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80076fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3728      	adds	r7, #40	; 0x28
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
	...

08007708 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b088      	sub	sp, #32
 800770c:	af00      	add	r7, sp, #0
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	603b      	str	r3, [r7, #0]
 8007714:	4613      	mov	r3, r2
 8007716:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007718:	f7fc fdea 	bl	80042f0 <HAL_GetTick>
 800771c:	4602      	mov	r2, r0
 800771e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007720:	1a9b      	subs	r3, r3, r2
 8007722:	683a      	ldr	r2, [r7, #0]
 8007724:	4413      	add	r3, r2
 8007726:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007728:	f7fc fde2 	bl	80042f0 <HAL_GetTick>
 800772c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800772e:	4b39      	ldr	r3, [pc, #228]	; (8007814 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	015b      	lsls	r3, r3, #5
 8007734:	0d1b      	lsrs	r3, r3, #20
 8007736:	69fa      	ldr	r2, [r7, #28]
 8007738:	fb02 f303 	mul.w	r3, r2, r3
 800773c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800773e:	e054      	b.n	80077ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007746:	d050      	beq.n	80077ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007748:	f7fc fdd2 	bl	80042f0 <HAL_GetTick>
 800774c:	4602      	mov	r2, r0
 800774e:	69bb      	ldr	r3, [r7, #24]
 8007750:	1ad3      	subs	r3, r2, r3
 8007752:	69fa      	ldr	r2, [r7, #28]
 8007754:	429a      	cmp	r2, r3
 8007756:	d902      	bls.n	800775e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007758:	69fb      	ldr	r3, [r7, #28]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d13d      	bne.n	80077da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	685a      	ldr	r2, [r3, #4]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800776c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007776:	d111      	bne.n	800779c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007780:	d004      	beq.n	800778c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800778a:	d107      	bne.n	800779c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	681a      	ldr	r2, [r3, #0]
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800779a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077a4:	d10f      	bne.n	80077c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80077b4:	601a      	str	r2, [r3, #0]
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80077c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2201      	movs	r2, #1
 80077ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2200      	movs	r2, #0
 80077d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80077d6:	2303      	movs	r3, #3
 80077d8:	e017      	b.n	800780a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d101      	bne.n	80077e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80077e0:	2300      	movs	r3, #0
 80077e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	3b01      	subs	r3, #1
 80077e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	689a      	ldr	r2, [r3, #8]
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	4013      	ands	r3, r2
 80077f4:	68ba      	ldr	r2, [r7, #8]
 80077f6:	429a      	cmp	r2, r3
 80077f8:	bf0c      	ite	eq
 80077fa:	2301      	moveq	r3, #1
 80077fc:	2300      	movne	r3, #0
 80077fe:	b2db      	uxtb	r3, r3
 8007800:	461a      	mov	r2, r3
 8007802:	79fb      	ldrb	r3, [r7, #7]
 8007804:	429a      	cmp	r2, r3
 8007806:	d19b      	bne.n	8007740 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007808:	2300      	movs	r3, #0
}
 800780a:	4618      	mov	r0, r3
 800780c:	3720      	adds	r7, #32
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
 8007812:	bf00      	nop
 8007814:	20000000 	.word	0x20000000

08007818 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b08a      	sub	sp, #40	; 0x28
 800781c:	af00      	add	r7, sp, #0
 800781e:	60f8      	str	r0, [r7, #12]
 8007820:	60b9      	str	r1, [r7, #8]
 8007822:	607a      	str	r2, [r7, #4]
 8007824:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007826:	2300      	movs	r3, #0
 8007828:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800782a:	f7fc fd61 	bl	80042f0 <HAL_GetTick>
 800782e:	4602      	mov	r2, r0
 8007830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007832:	1a9b      	subs	r3, r3, r2
 8007834:	683a      	ldr	r2, [r7, #0]
 8007836:	4413      	add	r3, r2
 8007838:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800783a:	f7fc fd59 	bl	80042f0 <HAL_GetTick>
 800783e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	330c      	adds	r3, #12
 8007846:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007848:	4b3d      	ldr	r3, [pc, #244]	; (8007940 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	4613      	mov	r3, r2
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	4413      	add	r3, r2
 8007852:	00da      	lsls	r2, r3, #3
 8007854:	1ad3      	subs	r3, r2, r3
 8007856:	0d1b      	lsrs	r3, r3, #20
 8007858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800785a:	fb02 f303 	mul.w	r3, r2, r3
 800785e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007860:	e060      	b.n	8007924 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007868:	d107      	bne.n	800787a <SPI_WaitFifoStateUntilTimeout+0x62>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d104      	bne.n	800787a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007870:	69fb      	ldr	r3, [r7, #28]
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	b2db      	uxtb	r3, r3
 8007876:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007878:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007880:	d050      	beq.n	8007924 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007882:	f7fc fd35 	bl	80042f0 <HAL_GetTick>
 8007886:	4602      	mov	r2, r0
 8007888:	6a3b      	ldr	r3, [r7, #32]
 800788a:	1ad3      	subs	r3, r2, r3
 800788c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800788e:	429a      	cmp	r2, r3
 8007890:	d902      	bls.n	8007898 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007894:	2b00      	cmp	r3, #0
 8007896:	d13d      	bne.n	8007914 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	685a      	ldr	r2, [r3, #4]
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80078a6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078b0:	d111      	bne.n	80078d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078ba:	d004      	beq.n	80078c6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078c4:	d107      	bne.n	80078d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078d4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078de:	d10f      	bne.n	8007900 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80078ee:	601a      	str	r2, [r3, #0]
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80078fe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2201      	movs	r2, #1
 8007904:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2200      	movs	r2, #0
 800790c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007910:	2303      	movs	r3, #3
 8007912:	e010      	b.n	8007936 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d101      	bne.n	800791e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800791a:	2300      	movs	r3, #0
 800791c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800791e:	69bb      	ldr	r3, [r7, #24]
 8007920:	3b01      	subs	r3, #1
 8007922:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	689a      	ldr	r2, [r3, #8]
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	4013      	ands	r3, r2
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	429a      	cmp	r2, r3
 8007932:	d196      	bne.n	8007862 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007934:	2300      	movs	r3, #0
}
 8007936:	4618      	mov	r0, r3
 8007938:	3728      	adds	r7, #40	; 0x28
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop
 8007940:	20000000 	.word	0x20000000

08007944 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b086      	sub	sp, #24
 8007948:	af02      	add	r7, sp, #8
 800794a:	60f8      	str	r0, [r7, #12]
 800794c:	60b9      	str	r1, [r7, #8]
 800794e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007958:	d111      	bne.n	800797e <SPI_EndRxTransaction+0x3a>
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007962:	d004      	beq.n	800796e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800796c:	d107      	bne.n	800797e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800797c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	9300      	str	r3, [sp, #0]
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	2200      	movs	r2, #0
 8007986:	2180      	movs	r1, #128	; 0x80
 8007988:	68f8      	ldr	r0, [r7, #12]
 800798a:	f7ff febd 	bl	8007708 <SPI_WaitFlagStateUntilTimeout>
 800798e:	4603      	mov	r3, r0
 8007990:	2b00      	cmp	r3, #0
 8007992:	d007      	beq.n	80079a4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007998:	f043 0220 	orr.w	r2, r3, #32
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80079a0:	2303      	movs	r3, #3
 80079a2:	e023      	b.n	80079ec <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80079ac:	d11d      	bne.n	80079ea <SPI_EndRxTransaction+0xa6>
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079b6:	d004      	beq.n	80079c2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079c0:	d113      	bne.n	80079ea <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	9300      	str	r3, [sp, #0]
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	2200      	movs	r2, #0
 80079ca:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80079ce:	68f8      	ldr	r0, [r7, #12]
 80079d0:	f7ff ff22 	bl	8007818 <SPI_WaitFifoStateUntilTimeout>
 80079d4:	4603      	mov	r3, r0
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d007      	beq.n	80079ea <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079de:	f043 0220 	orr.w	r2, r3, #32
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80079e6:	2303      	movs	r3, #3
 80079e8:	e000      	b.n	80079ec <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80079ea:	2300      	movs	r3, #0
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3710      	adds	r7, #16
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b086      	sub	sp, #24
 80079f8:	af02      	add	r7, sp, #8
 80079fa:	60f8      	str	r0, [r7, #12]
 80079fc:	60b9      	str	r1, [r7, #8]
 80079fe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	9300      	str	r3, [sp, #0]
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	2200      	movs	r2, #0
 8007a08:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007a0c:	68f8      	ldr	r0, [r7, #12]
 8007a0e:	f7ff ff03 	bl	8007818 <SPI_WaitFifoStateUntilTimeout>
 8007a12:	4603      	mov	r3, r0
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d007      	beq.n	8007a28 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a1c:	f043 0220 	orr.w	r2, r3, #32
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007a24:	2303      	movs	r3, #3
 8007a26:	e027      	b.n	8007a78 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	9300      	str	r3, [sp, #0]
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	2180      	movs	r1, #128	; 0x80
 8007a32:	68f8      	ldr	r0, [r7, #12]
 8007a34:	f7ff fe68 	bl	8007708 <SPI_WaitFlagStateUntilTimeout>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d007      	beq.n	8007a4e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a42:	f043 0220 	orr.w	r2, r3, #32
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007a4a:	2303      	movs	r3, #3
 8007a4c:	e014      	b.n	8007a78 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	9300      	str	r3, [sp, #0]
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	2200      	movs	r2, #0
 8007a56:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007a5a:	68f8      	ldr	r0, [r7, #12]
 8007a5c:	f7ff fedc 	bl	8007818 <SPI_WaitFifoStateUntilTimeout>
 8007a60:	4603      	mov	r3, r0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d007      	beq.n	8007a76 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a6a:	f043 0220 	orr.w	r2, r3, #32
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007a72:	2303      	movs	r3, #3
 8007a74:	e000      	b.n	8007a78 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007a76:	2300      	movs	r3, #0
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3710      	adds	r7, #16
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b082      	sub	sp, #8
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d101      	bne.n	8007a92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	e049      	b.n	8007b26 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a98:	b2db      	uxtb	r3, r3
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d106      	bne.n	8007aac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f7fc f816 	bl	8003ad8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2202      	movs	r2, #2
 8007ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	3304      	adds	r3, #4
 8007abc:	4619      	mov	r1, r3
 8007abe:	4610      	mov	r0, r2
 8007ac0:	f000 fa9a 	bl	8007ff8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2201      	movs	r2, #1
 8007af8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2201      	movs	r2, #1
 8007b00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2201      	movs	r2, #1
 8007b08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2201      	movs	r2, #1
 8007b18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b24:	2300      	movs	r3, #0
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3708      	adds	r7, #8
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}
	...

08007b30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b085      	sub	sp, #20
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b3e:	b2db      	uxtb	r3, r3
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d001      	beq.n	8007b48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007b44:	2301      	movs	r3, #1
 8007b46:	e03b      	b.n	8007bc0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2202      	movs	r2, #2
 8007b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	68da      	ldr	r2, [r3, #12]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f042 0201 	orr.w	r2, r2, #1
 8007b5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a19      	ldr	r2, [pc, #100]	; (8007bcc <HAL_TIM_Base_Start_IT+0x9c>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d009      	beq.n	8007b7e <HAL_TIM_Base_Start_IT+0x4e>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b72:	d004      	beq.n	8007b7e <HAL_TIM_Base_Start_IT+0x4e>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a15      	ldr	r2, [pc, #84]	; (8007bd0 <HAL_TIM_Base_Start_IT+0xa0>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d115      	bne.n	8007baa <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	689a      	ldr	r2, [r3, #8]
 8007b84:	4b13      	ldr	r3, [pc, #76]	; (8007bd4 <HAL_TIM_Base_Start_IT+0xa4>)
 8007b86:	4013      	ands	r3, r2
 8007b88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2b06      	cmp	r3, #6
 8007b8e:	d015      	beq.n	8007bbc <HAL_TIM_Base_Start_IT+0x8c>
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b96:	d011      	beq.n	8007bbc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f042 0201 	orr.w	r2, r2, #1
 8007ba6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ba8:	e008      	b.n	8007bbc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f042 0201 	orr.w	r2, r2, #1
 8007bb8:	601a      	str	r2, [r3, #0]
 8007bba:	e000      	b.n	8007bbe <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bbc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007bbe:	2300      	movs	r3, #0
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3714      	adds	r7, #20
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr
 8007bcc:	40012c00 	.word	0x40012c00
 8007bd0:	40014000 	.word	0x40014000
 8007bd4:	00010007 	.word	0x00010007

08007bd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b082      	sub	sp, #8
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	691b      	ldr	r3, [r3, #16]
 8007be6:	f003 0302 	and.w	r3, r3, #2
 8007bea:	2b02      	cmp	r3, #2
 8007bec:	d122      	bne.n	8007c34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	68db      	ldr	r3, [r3, #12]
 8007bf4:	f003 0302 	and.w	r3, r3, #2
 8007bf8:	2b02      	cmp	r3, #2
 8007bfa:	d11b      	bne.n	8007c34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f06f 0202 	mvn.w	r2, #2
 8007c04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2201      	movs	r2, #1
 8007c0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	699b      	ldr	r3, [r3, #24]
 8007c12:	f003 0303 	and.w	r3, r3, #3
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d003      	beq.n	8007c22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 f9ce 	bl	8007fbc <HAL_TIM_IC_CaptureCallback>
 8007c20:	e005      	b.n	8007c2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 f9c0 	bl	8007fa8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 f9d1 	bl	8007fd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	691b      	ldr	r3, [r3, #16]
 8007c3a:	f003 0304 	and.w	r3, r3, #4
 8007c3e:	2b04      	cmp	r3, #4
 8007c40:	d122      	bne.n	8007c88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	68db      	ldr	r3, [r3, #12]
 8007c48:	f003 0304 	and.w	r3, r3, #4
 8007c4c:	2b04      	cmp	r3, #4
 8007c4e:	d11b      	bne.n	8007c88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f06f 0204 	mvn.w	r2, #4
 8007c58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2202      	movs	r2, #2
 8007c5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	699b      	ldr	r3, [r3, #24]
 8007c66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d003      	beq.n	8007c76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 f9a4 	bl	8007fbc <HAL_TIM_IC_CaptureCallback>
 8007c74:	e005      	b.n	8007c82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 f996 	bl	8007fa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f000 f9a7 	bl	8007fd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	691b      	ldr	r3, [r3, #16]
 8007c8e:	f003 0308 	and.w	r3, r3, #8
 8007c92:	2b08      	cmp	r3, #8
 8007c94:	d122      	bne.n	8007cdc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	68db      	ldr	r3, [r3, #12]
 8007c9c:	f003 0308 	and.w	r3, r3, #8
 8007ca0:	2b08      	cmp	r3, #8
 8007ca2:	d11b      	bne.n	8007cdc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f06f 0208 	mvn.w	r2, #8
 8007cac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2204      	movs	r2, #4
 8007cb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	69db      	ldr	r3, [r3, #28]
 8007cba:	f003 0303 	and.w	r3, r3, #3
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d003      	beq.n	8007cca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 f97a 	bl	8007fbc <HAL_TIM_IC_CaptureCallback>
 8007cc8:	e005      	b.n	8007cd6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 f96c 	bl	8007fa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f000 f97d 	bl	8007fd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	691b      	ldr	r3, [r3, #16]
 8007ce2:	f003 0310 	and.w	r3, r3, #16
 8007ce6:	2b10      	cmp	r3, #16
 8007ce8:	d122      	bne.n	8007d30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	68db      	ldr	r3, [r3, #12]
 8007cf0:	f003 0310 	and.w	r3, r3, #16
 8007cf4:	2b10      	cmp	r3, #16
 8007cf6:	d11b      	bne.n	8007d30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f06f 0210 	mvn.w	r2, #16
 8007d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2208      	movs	r2, #8
 8007d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	69db      	ldr	r3, [r3, #28]
 8007d0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d003      	beq.n	8007d1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 f950 	bl	8007fbc <HAL_TIM_IC_CaptureCallback>
 8007d1c:	e005      	b.n	8007d2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 f942 	bl	8007fa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 f953 	bl	8007fd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	691b      	ldr	r3, [r3, #16]
 8007d36:	f003 0301 	and.w	r3, r3, #1
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d10e      	bne.n	8007d5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	68db      	ldr	r3, [r3, #12]
 8007d44:	f003 0301 	and.w	r3, r3, #1
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d107      	bne.n	8007d5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f06f 0201 	mvn.w	r2, #1
 8007d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f7fb fdfe 	bl	8003958 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	691b      	ldr	r3, [r3, #16]
 8007d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d66:	2b80      	cmp	r3, #128	; 0x80
 8007d68:	d10e      	bne.n	8007d88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d74:	2b80      	cmp	r3, #128	; 0x80
 8007d76:	d107      	bne.n	8007d88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 fab0 	bl	80082e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	691b      	ldr	r3, [r3, #16]
 8007d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d96:	d10e      	bne.n	8007db6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	68db      	ldr	r3, [r3, #12]
 8007d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007da2:	2b80      	cmp	r3, #128	; 0x80
 8007da4:	d107      	bne.n	8007db6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007dae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f000 faa3 	bl	80082fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	691b      	ldr	r3, [r3, #16]
 8007dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dc0:	2b40      	cmp	r3, #64	; 0x40
 8007dc2:	d10e      	bne.n	8007de2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	68db      	ldr	r3, [r3, #12]
 8007dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dce:	2b40      	cmp	r3, #64	; 0x40
 8007dd0:	d107      	bne.n	8007de2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007dda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 f901 	bl	8007fe4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	691b      	ldr	r3, [r3, #16]
 8007de8:	f003 0320 	and.w	r3, r3, #32
 8007dec:	2b20      	cmp	r3, #32
 8007dee:	d10e      	bne.n	8007e0e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	68db      	ldr	r3, [r3, #12]
 8007df6:	f003 0320 	and.w	r3, r3, #32
 8007dfa:	2b20      	cmp	r3, #32
 8007dfc:	d107      	bne.n	8007e0e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f06f 0220 	mvn.w	r2, #32
 8007e06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 fa63 	bl	80082d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007e0e:	bf00      	nop
 8007e10:	3708      	adds	r7, #8
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}

08007e16 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007e16:	b580      	push	{r7, lr}
 8007e18:	b084      	sub	sp, #16
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
 8007e1e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e20:	2300      	movs	r3, #0
 8007e22:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d101      	bne.n	8007e32 <HAL_TIM_ConfigClockSource+0x1c>
 8007e2e:	2302      	movs	r3, #2
 8007e30:	e0b6      	b.n	8007fa0 <HAL_TIM_ConfigClockSource+0x18a>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2201      	movs	r2, #1
 8007e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2202      	movs	r2, #2
 8007e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e50:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007e54:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e5c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	68ba      	ldr	r2, [r7, #8]
 8007e64:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e6e:	d03e      	beq.n	8007eee <HAL_TIM_ConfigClockSource+0xd8>
 8007e70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e74:	f200 8087 	bhi.w	8007f86 <HAL_TIM_ConfigClockSource+0x170>
 8007e78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e7c:	f000 8086 	beq.w	8007f8c <HAL_TIM_ConfigClockSource+0x176>
 8007e80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e84:	d87f      	bhi.n	8007f86 <HAL_TIM_ConfigClockSource+0x170>
 8007e86:	2b70      	cmp	r3, #112	; 0x70
 8007e88:	d01a      	beq.n	8007ec0 <HAL_TIM_ConfigClockSource+0xaa>
 8007e8a:	2b70      	cmp	r3, #112	; 0x70
 8007e8c:	d87b      	bhi.n	8007f86 <HAL_TIM_ConfigClockSource+0x170>
 8007e8e:	2b60      	cmp	r3, #96	; 0x60
 8007e90:	d050      	beq.n	8007f34 <HAL_TIM_ConfigClockSource+0x11e>
 8007e92:	2b60      	cmp	r3, #96	; 0x60
 8007e94:	d877      	bhi.n	8007f86 <HAL_TIM_ConfigClockSource+0x170>
 8007e96:	2b50      	cmp	r3, #80	; 0x50
 8007e98:	d03c      	beq.n	8007f14 <HAL_TIM_ConfigClockSource+0xfe>
 8007e9a:	2b50      	cmp	r3, #80	; 0x50
 8007e9c:	d873      	bhi.n	8007f86 <HAL_TIM_ConfigClockSource+0x170>
 8007e9e:	2b40      	cmp	r3, #64	; 0x40
 8007ea0:	d058      	beq.n	8007f54 <HAL_TIM_ConfigClockSource+0x13e>
 8007ea2:	2b40      	cmp	r3, #64	; 0x40
 8007ea4:	d86f      	bhi.n	8007f86 <HAL_TIM_ConfigClockSource+0x170>
 8007ea6:	2b30      	cmp	r3, #48	; 0x30
 8007ea8:	d064      	beq.n	8007f74 <HAL_TIM_ConfigClockSource+0x15e>
 8007eaa:	2b30      	cmp	r3, #48	; 0x30
 8007eac:	d86b      	bhi.n	8007f86 <HAL_TIM_ConfigClockSource+0x170>
 8007eae:	2b20      	cmp	r3, #32
 8007eb0:	d060      	beq.n	8007f74 <HAL_TIM_ConfigClockSource+0x15e>
 8007eb2:	2b20      	cmp	r3, #32
 8007eb4:	d867      	bhi.n	8007f86 <HAL_TIM_ConfigClockSource+0x170>
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d05c      	beq.n	8007f74 <HAL_TIM_ConfigClockSource+0x15e>
 8007eba:	2b10      	cmp	r3, #16
 8007ebc:	d05a      	beq.n	8007f74 <HAL_TIM_ConfigClockSource+0x15e>
 8007ebe:	e062      	b.n	8007f86 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007ed0:	f000 f97a 	bl	80081c8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	689b      	ldr	r3, [r3, #8]
 8007eda:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007ee2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	68ba      	ldr	r2, [r7, #8]
 8007eea:	609a      	str	r2, [r3, #8]
      break;
 8007eec:	e04f      	b.n	8007f8e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007efe:	f000 f963 	bl	80081c8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	689a      	ldr	r2, [r3, #8]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007f10:	609a      	str	r2, [r3, #8]
      break;
 8007f12:	e03c      	b.n	8007f8e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f20:	461a      	mov	r2, r3
 8007f22:	f000 f8d7 	bl	80080d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	2150      	movs	r1, #80	; 0x50
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f000 f930 	bl	8008192 <TIM_ITRx_SetConfig>
      break;
 8007f32:	e02c      	b.n	8007f8e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f40:	461a      	mov	r2, r3
 8007f42:	f000 f8f6 	bl	8008132 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	2160      	movs	r1, #96	; 0x60
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f000 f920 	bl	8008192 <TIM_ITRx_SetConfig>
      break;
 8007f52:	e01c      	b.n	8007f8e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f60:	461a      	mov	r2, r3
 8007f62:	f000 f8b7 	bl	80080d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	2140      	movs	r1, #64	; 0x40
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f000 f910 	bl	8008192 <TIM_ITRx_SetConfig>
      break;
 8007f72:	e00c      	b.n	8007f8e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681a      	ldr	r2, [r3, #0]
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4619      	mov	r1, r3
 8007f7e:	4610      	mov	r0, r2
 8007f80:	f000 f907 	bl	8008192 <TIM_ITRx_SetConfig>
      break;
 8007f84:	e003      	b.n	8007f8e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007f86:	2301      	movs	r3, #1
 8007f88:	73fb      	strb	r3, [r7, #15]
      break;
 8007f8a:	e000      	b.n	8007f8e <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007f8c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2201      	movs	r2, #1
 8007f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3710      	adds	r7, #16
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}

08007fa8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b083      	sub	sp, #12
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007fb0:	bf00      	nop
 8007fb2:	370c      	adds	r7, #12
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr

08007fbc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007fc4:	bf00      	nop
 8007fc6:	370c      	adds	r7, #12
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr

08007fd0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b083      	sub	sp, #12
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007fd8:	bf00      	nop
 8007fda:	370c      	adds	r7, #12
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr

08007fe4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b083      	sub	sp, #12
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007fec:	bf00      	nop
 8007fee:	370c      	adds	r7, #12
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr

08007ff8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b085      	sub	sp, #20
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	4a2e      	ldr	r2, [pc, #184]	; (80080c4 <TIM_Base_SetConfig+0xcc>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d003      	beq.n	8008018 <TIM_Base_SetConfig+0x20>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008016:	d108      	bne.n	800802a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800801e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	68fa      	ldr	r2, [r7, #12]
 8008026:	4313      	orrs	r3, r2
 8008028:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	4a25      	ldr	r2, [pc, #148]	; (80080c4 <TIM_Base_SetConfig+0xcc>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d00f      	beq.n	8008052 <TIM_Base_SetConfig+0x5a>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008038:	d00b      	beq.n	8008052 <TIM_Base_SetConfig+0x5a>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	4a22      	ldr	r2, [pc, #136]	; (80080c8 <TIM_Base_SetConfig+0xd0>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d007      	beq.n	8008052 <TIM_Base_SetConfig+0x5a>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	4a21      	ldr	r2, [pc, #132]	; (80080cc <TIM_Base_SetConfig+0xd4>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d003      	beq.n	8008052 <TIM_Base_SetConfig+0x5a>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	4a20      	ldr	r2, [pc, #128]	; (80080d0 <TIM_Base_SetConfig+0xd8>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d108      	bne.n	8008064 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008058:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	68db      	ldr	r3, [r3, #12]
 800805e:	68fa      	ldr	r2, [r7, #12]
 8008060:	4313      	orrs	r3, r2
 8008062:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	695b      	ldr	r3, [r3, #20]
 800806e:	4313      	orrs	r3, r2
 8008070:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	68fa      	ldr	r2, [r7, #12]
 8008076:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	689a      	ldr	r2, [r3, #8]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	681a      	ldr	r2, [r3, #0]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	4a0e      	ldr	r2, [pc, #56]	; (80080c4 <TIM_Base_SetConfig+0xcc>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d00b      	beq.n	80080a8 <TIM_Base_SetConfig+0xb0>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	4a0d      	ldr	r2, [pc, #52]	; (80080c8 <TIM_Base_SetConfig+0xd0>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d007      	beq.n	80080a8 <TIM_Base_SetConfig+0xb0>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	4a0c      	ldr	r2, [pc, #48]	; (80080cc <TIM_Base_SetConfig+0xd4>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d003      	beq.n	80080a8 <TIM_Base_SetConfig+0xb0>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	4a0b      	ldr	r2, [pc, #44]	; (80080d0 <TIM_Base_SetConfig+0xd8>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d103      	bne.n	80080b0 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	691a      	ldr	r2, [r3, #16]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2201      	movs	r2, #1
 80080b4:	615a      	str	r2, [r3, #20]
}
 80080b6:	bf00      	nop
 80080b8:	3714      	adds	r7, #20
 80080ba:	46bd      	mov	sp, r7
 80080bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c0:	4770      	bx	lr
 80080c2:	bf00      	nop
 80080c4:	40012c00 	.word	0x40012c00
 80080c8:	40014000 	.word	0x40014000
 80080cc:	40014400 	.word	0x40014400
 80080d0:	40014800 	.word	0x40014800

080080d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b087      	sub	sp, #28
 80080d8:	af00      	add	r7, sp, #0
 80080da:	60f8      	str	r0, [r7, #12]
 80080dc:	60b9      	str	r1, [r7, #8]
 80080de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	6a1b      	ldr	r3, [r3, #32]
 80080e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	6a1b      	ldr	r3, [r3, #32]
 80080ea:	f023 0201 	bic.w	r2, r3, #1
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	699b      	ldr	r3, [r3, #24]
 80080f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80080fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	011b      	lsls	r3, r3, #4
 8008104:	693a      	ldr	r2, [r7, #16]
 8008106:	4313      	orrs	r3, r2
 8008108:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	f023 030a 	bic.w	r3, r3, #10
 8008110:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008112:	697a      	ldr	r2, [r7, #20]
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	4313      	orrs	r3, r2
 8008118:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	693a      	ldr	r2, [r7, #16]
 800811e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	697a      	ldr	r2, [r7, #20]
 8008124:	621a      	str	r2, [r3, #32]
}
 8008126:	bf00      	nop
 8008128:	371c      	adds	r7, #28
 800812a:	46bd      	mov	sp, r7
 800812c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008130:	4770      	bx	lr

08008132 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008132:	b480      	push	{r7}
 8008134:	b087      	sub	sp, #28
 8008136:	af00      	add	r7, sp, #0
 8008138:	60f8      	str	r0, [r7, #12]
 800813a:	60b9      	str	r1, [r7, #8]
 800813c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	6a1b      	ldr	r3, [r3, #32]
 8008142:	f023 0210 	bic.w	r2, r3, #16
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	699b      	ldr	r3, [r3, #24]
 800814e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	6a1b      	ldr	r3, [r3, #32]
 8008154:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800815c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	031b      	lsls	r3, r3, #12
 8008162:	697a      	ldr	r2, [r7, #20]
 8008164:	4313      	orrs	r3, r2
 8008166:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800816e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	011b      	lsls	r3, r3, #4
 8008174:	693a      	ldr	r2, [r7, #16]
 8008176:	4313      	orrs	r3, r2
 8008178:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	697a      	ldr	r2, [r7, #20]
 800817e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	693a      	ldr	r2, [r7, #16]
 8008184:	621a      	str	r2, [r3, #32]
}
 8008186:	bf00      	nop
 8008188:	371c      	adds	r7, #28
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr

08008192 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008192:	b480      	push	{r7}
 8008194:	b085      	sub	sp, #20
 8008196:	af00      	add	r7, sp, #0
 8008198:	6078      	str	r0, [r7, #4]
 800819a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80081aa:	683a      	ldr	r2, [r7, #0]
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	4313      	orrs	r3, r2
 80081b0:	f043 0307 	orr.w	r3, r3, #7
 80081b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	68fa      	ldr	r2, [r7, #12]
 80081ba:	609a      	str	r2, [r3, #8]
}
 80081bc:	bf00      	nop
 80081be:	3714      	adds	r7, #20
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr

080081c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b087      	sub	sp, #28
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	607a      	str	r2, [r7, #4]
 80081d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	689b      	ldr	r3, [r3, #8]
 80081da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80081e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	021a      	lsls	r2, r3, #8
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	431a      	orrs	r2, r3
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	4313      	orrs	r3, r2
 80081f0:	697a      	ldr	r2, [r7, #20]
 80081f2:	4313      	orrs	r3, r2
 80081f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	697a      	ldr	r2, [r7, #20]
 80081fa:	609a      	str	r2, [r3, #8]
}
 80081fc:	bf00      	nop
 80081fe:	371c      	adds	r7, #28
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr

08008208 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008208:	b480      	push	{r7}
 800820a:	b085      	sub	sp, #20
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008218:	2b01      	cmp	r3, #1
 800821a:	d101      	bne.n	8008220 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800821c:	2302      	movs	r3, #2
 800821e:	e04f      	b.n	80082c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2201      	movs	r2, #1
 8008224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2202      	movs	r2, #2
 800822c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	689b      	ldr	r3, [r3, #8]
 800823e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a21      	ldr	r2, [pc, #132]	; (80082cc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d108      	bne.n	800825c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008250:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	68fa      	ldr	r2, [r7, #12]
 8008258:	4313      	orrs	r3, r2
 800825a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008262:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	68fa      	ldr	r2, [r7, #12]
 800826a:	4313      	orrs	r3, r2
 800826c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	68fa      	ldr	r2, [r7, #12]
 8008274:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a14      	ldr	r2, [pc, #80]	; (80082cc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d009      	beq.n	8008294 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008288:	d004      	beq.n	8008294 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a10      	ldr	r2, [pc, #64]	; (80082d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d10c      	bne.n	80082ae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800829a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	689b      	ldr	r3, [r3, #8]
 80082a0:	68ba      	ldr	r2, [r7, #8]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	68ba      	ldr	r2, [r7, #8]
 80082ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2201      	movs	r2, #1
 80082b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80082be:	2300      	movs	r3, #0
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3714      	adds	r7, #20
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr
 80082cc:	40012c00 	.word	0x40012c00
 80082d0:	40014000 	.word	0x40014000

080082d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80082dc:	bf00      	nop
 80082de:	370c      	adds	r7, #12
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr

080082e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b083      	sub	sp, #12
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80082f0:	bf00      	nop
 80082f2:	370c      	adds	r7, #12
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr

080082fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b083      	sub	sp, #12
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008304:	bf00      	nop
 8008306:	370c      	adds	r7, #12
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr

08008310 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b082      	sub	sp, #8
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d101      	bne.n	8008322 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800831e:	2301      	movs	r3, #1
 8008320:	e040      	b.n	80083a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008326:	2b00      	cmp	r3, #0
 8008328:	d106      	bne.n	8008338 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2200      	movs	r2, #0
 800832e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f7fb fc0a 	bl	8003b4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2224      	movs	r2, #36	; 0x24
 800833c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	681a      	ldr	r2, [r3, #0]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f022 0201 	bic.w	r2, r2, #1
 800834c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 f980 	bl	8008654 <UART_SetConfig>
 8008354:	4603      	mov	r3, r0
 8008356:	2b01      	cmp	r3, #1
 8008358:	d101      	bne.n	800835e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800835a:	2301      	movs	r3, #1
 800835c:	e022      	b.n	80083a4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008362:	2b00      	cmp	r3, #0
 8008364:	d002      	beq.n	800836c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 faaa 	bl	80088c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	685a      	ldr	r2, [r3, #4]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800837a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	689a      	ldr	r2, [r3, #8]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800838a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	681a      	ldr	r2, [r3, #0]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f042 0201 	orr.w	r2, r2, #1
 800839a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f000 fb31 	bl	8008a04 <UART_CheckIdleState>
 80083a2:	4603      	mov	r3, r0
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3708      	adds	r7, #8
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b08a      	sub	sp, #40	; 0x28
 80083b0:	af02      	add	r7, sp, #8
 80083b2:	60f8      	str	r0, [r7, #12]
 80083b4:	60b9      	str	r1, [r7, #8]
 80083b6:	603b      	str	r3, [r7, #0]
 80083b8:	4613      	mov	r3, r2
 80083ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083c0:	2b20      	cmp	r3, #32
 80083c2:	d178      	bne.n	80084b6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d002      	beq.n	80083d0 <HAL_UART_Transmit+0x24>
 80083ca:	88fb      	ldrh	r3, [r7, #6]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d101      	bne.n	80083d4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80083d0:	2301      	movs	r3, #1
 80083d2:	e071      	b.n	80084b8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2200      	movs	r2, #0
 80083d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2221      	movs	r2, #33	; 0x21
 80083e0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80083e2:	f7fb ff85 	bl	80042f0 <HAL_GetTick>
 80083e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	88fa      	ldrh	r2, [r7, #6]
 80083ec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	88fa      	ldrh	r2, [r7, #6]
 80083f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	689b      	ldr	r3, [r3, #8]
 80083fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008400:	d108      	bne.n	8008414 <HAL_UART_Transmit+0x68>
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	691b      	ldr	r3, [r3, #16]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d104      	bne.n	8008414 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800840a:	2300      	movs	r3, #0
 800840c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	61bb      	str	r3, [r7, #24]
 8008412:	e003      	b.n	800841c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008418:	2300      	movs	r3, #0
 800841a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800841c:	e030      	b.n	8008480 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	9300      	str	r3, [sp, #0]
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	2200      	movs	r2, #0
 8008426:	2180      	movs	r1, #128	; 0x80
 8008428:	68f8      	ldr	r0, [r7, #12]
 800842a:	f000 fb93 	bl	8008b54 <UART_WaitOnFlagUntilTimeout>
 800842e:	4603      	mov	r3, r0
 8008430:	2b00      	cmp	r3, #0
 8008432:	d004      	beq.n	800843e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2220      	movs	r2, #32
 8008438:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800843a:	2303      	movs	r3, #3
 800843c:	e03c      	b.n	80084b8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800843e:	69fb      	ldr	r3, [r7, #28]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d10b      	bne.n	800845c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008444:	69bb      	ldr	r3, [r7, #24]
 8008446:	881a      	ldrh	r2, [r3, #0]
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008450:	b292      	uxth	r2, r2
 8008452:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008454:	69bb      	ldr	r3, [r7, #24]
 8008456:	3302      	adds	r3, #2
 8008458:	61bb      	str	r3, [r7, #24]
 800845a:	e008      	b.n	800846e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800845c:	69fb      	ldr	r3, [r7, #28]
 800845e:	781a      	ldrb	r2, [r3, #0]
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	b292      	uxth	r2, r2
 8008466:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008468:	69fb      	ldr	r3, [r7, #28]
 800846a:	3301      	adds	r3, #1
 800846c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008474:	b29b      	uxth	r3, r3
 8008476:	3b01      	subs	r3, #1
 8008478:	b29a      	uxth	r2, r3
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008486:	b29b      	uxth	r3, r3
 8008488:	2b00      	cmp	r3, #0
 800848a:	d1c8      	bne.n	800841e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	9300      	str	r3, [sp, #0]
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	2200      	movs	r2, #0
 8008494:	2140      	movs	r1, #64	; 0x40
 8008496:	68f8      	ldr	r0, [r7, #12]
 8008498:	f000 fb5c 	bl	8008b54 <UART_WaitOnFlagUntilTimeout>
 800849c:	4603      	mov	r3, r0
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d004      	beq.n	80084ac <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2220      	movs	r2, #32
 80084a6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80084a8:	2303      	movs	r3, #3
 80084aa:	e005      	b.n	80084b8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2220      	movs	r2, #32
 80084b0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80084b2:	2300      	movs	r3, #0
 80084b4:	e000      	b.n	80084b8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80084b6:	2302      	movs	r3, #2
  }
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3720      	adds	r7, #32
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b08a      	sub	sp, #40	; 0x28
 80084c4:	af02      	add	r7, sp, #8
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	60b9      	str	r1, [r7, #8]
 80084ca:	603b      	str	r3, [r7, #0]
 80084cc:	4613      	mov	r3, r2
 80084ce:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084d6:	2b20      	cmp	r3, #32
 80084d8:	f040 80b6 	bne.w	8008648 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d002      	beq.n	80084e8 <HAL_UART_Receive+0x28>
 80084e2:	88fb      	ldrh	r3, [r7, #6]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d101      	bne.n	80084ec <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80084e8:	2301      	movs	r3, #1
 80084ea:	e0ae      	b.n	800864a <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2200      	movs	r2, #0
 80084f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2222      	movs	r2, #34	; 0x22
 80084f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2200      	movs	r2, #0
 8008500:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008502:	f7fb fef5 	bl	80042f0 <HAL_GetTick>
 8008506:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	88fa      	ldrh	r2, [r7, #6]
 800850c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	88fa      	ldrh	r2, [r7, #6]
 8008514:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	689b      	ldr	r3, [r3, #8]
 800851c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008520:	d10e      	bne.n	8008540 <HAL_UART_Receive+0x80>
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	691b      	ldr	r3, [r3, #16]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d105      	bne.n	8008536 <HAL_UART_Receive+0x76>
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008530:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008534:	e02d      	b.n	8008592 <HAL_UART_Receive+0xd2>
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	22ff      	movs	r2, #255	; 0xff
 800853a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800853e:	e028      	b.n	8008592 <HAL_UART_Receive+0xd2>
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	689b      	ldr	r3, [r3, #8]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d10d      	bne.n	8008564 <HAL_UART_Receive+0xa4>
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	691b      	ldr	r3, [r3, #16]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d104      	bne.n	800855a <HAL_UART_Receive+0x9a>
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	22ff      	movs	r2, #255	; 0xff
 8008554:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008558:	e01b      	b.n	8008592 <HAL_UART_Receive+0xd2>
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	227f      	movs	r2, #127	; 0x7f
 800855e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008562:	e016      	b.n	8008592 <HAL_UART_Receive+0xd2>
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	689b      	ldr	r3, [r3, #8]
 8008568:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800856c:	d10d      	bne.n	800858a <HAL_UART_Receive+0xca>
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	691b      	ldr	r3, [r3, #16]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d104      	bne.n	8008580 <HAL_UART_Receive+0xc0>
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	227f      	movs	r2, #127	; 0x7f
 800857a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800857e:	e008      	b.n	8008592 <HAL_UART_Receive+0xd2>
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	223f      	movs	r2, #63	; 0x3f
 8008584:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008588:	e003      	b.n	8008592 <HAL_UART_Receive+0xd2>
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2200      	movs	r2, #0
 800858e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008598:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	689b      	ldr	r3, [r3, #8]
 800859e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085a2:	d108      	bne.n	80085b6 <HAL_UART_Receive+0xf6>
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	691b      	ldr	r3, [r3, #16]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d104      	bne.n	80085b6 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80085ac:	2300      	movs	r3, #0
 80085ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	61bb      	str	r3, [r7, #24]
 80085b4:	e003      	b.n	80085be <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80085ba:	2300      	movs	r3, #0
 80085bc:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80085be:	e037      	b.n	8008630 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	9300      	str	r3, [sp, #0]
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	2200      	movs	r2, #0
 80085c8:	2120      	movs	r1, #32
 80085ca:	68f8      	ldr	r0, [r7, #12]
 80085cc:	f000 fac2 	bl	8008b54 <UART_WaitOnFlagUntilTimeout>
 80085d0:	4603      	mov	r3, r0
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d005      	beq.n	80085e2 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2220      	movs	r2, #32
 80085da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80085de:	2303      	movs	r3, #3
 80085e0:	e033      	b.n	800864a <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80085e2:	69fb      	ldr	r3, [r7, #28]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d10c      	bne.n	8008602 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80085ee:	b29a      	uxth	r2, r3
 80085f0:	8a7b      	ldrh	r3, [r7, #18]
 80085f2:	4013      	ands	r3, r2
 80085f4:	b29a      	uxth	r2, r3
 80085f6:	69bb      	ldr	r3, [r7, #24]
 80085f8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	3302      	adds	r3, #2
 80085fe:	61bb      	str	r3, [r7, #24]
 8008600:	e00d      	b.n	800861e <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008608:	b29b      	uxth	r3, r3
 800860a:	b2da      	uxtb	r2, r3
 800860c:	8a7b      	ldrh	r3, [r7, #18]
 800860e:	b2db      	uxtb	r3, r3
 8008610:	4013      	ands	r3, r2
 8008612:	b2da      	uxtb	r2, r3
 8008614:	69fb      	ldr	r3, [r7, #28]
 8008616:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008618:	69fb      	ldr	r3, [r7, #28]
 800861a:	3301      	adds	r3, #1
 800861c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008624:	b29b      	uxth	r3, r3
 8008626:	3b01      	subs	r3, #1
 8008628:	b29a      	uxth	r2, r3
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008636:	b29b      	uxth	r3, r3
 8008638:	2b00      	cmp	r3, #0
 800863a:	d1c1      	bne.n	80085c0 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2220      	movs	r2, #32
 8008640:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8008644:	2300      	movs	r3, #0
 8008646:	e000      	b.n	800864a <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8008648:	2302      	movs	r3, #2
  }
}
 800864a:	4618      	mov	r0, r3
 800864c:	3720      	adds	r7, #32
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
	...

08008654 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b088      	sub	sp, #32
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800865c:	2300      	movs	r3, #0
 800865e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	689a      	ldr	r2, [r3, #8]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	691b      	ldr	r3, [r3, #16]
 8008668:	431a      	orrs	r2, r3
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	695b      	ldr	r3, [r3, #20]
 800866e:	431a      	orrs	r2, r3
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	69db      	ldr	r3, [r3, #28]
 8008674:	4313      	orrs	r3, r2
 8008676:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	681a      	ldr	r2, [r3, #0]
 800867e:	4b8a      	ldr	r3, [pc, #552]	; (80088a8 <UART_SetConfig+0x254>)
 8008680:	4013      	ands	r3, r2
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	6812      	ldr	r2, [r2, #0]
 8008686:	6979      	ldr	r1, [r7, #20]
 8008688:	430b      	orrs	r3, r1
 800868a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	68da      	ldr	r2, [r3, #12]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	430a      	orrs	r2, r1
 80086a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	699b      	ldr	r3, [r3, #24]
 80086a6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6a1b      	ldr	r3, [r3, #32]
 80086ac:	697a      	ldr	r2, [r7, #20]
 80086ae:	4313      	orrs	r3, r2
 80086b0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	689b      	ldr	r3, [r3, #8]
 80086b8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	697a      	ldr	r2, [r7, #20]
 80086c2:	430a      	orrs	r2, r1
 80086c4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a78      	ldr	r2, [pc, #480]	; (80088ac <UART_SetConfig+0x258>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d120      	bne.n	8008712 <UART_SetConfig+0xbe>
 80086d0:	4b77      	ldr	r3, [pc, #476]	; (80088b0 <UART_SetConfig+0x25c>)
 80086d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086d4:	f003 0303 	and.w	r3, r3, #3
 80086d8:	2b03      	cmp	r3, #3
 80086da:	d817      	bhi.n	800870c <UART_SetConfig+0xb8>
 80086dc:	a201      	add	r2, pc, #4	; (adr r2, 80086e4 <UART_SetConfig+0x90>)
 80086de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086e2:	bf00      	nop
 80086e4:	080086f5 	.word	0x080086f5
 80086e8:	08008701 	.word	0x08008701
 80086ec:	08008707 	.word	0x08008707
 80086f0:	080086fb 	.word	0x080086fb
 80086f4:	2300      	movs	r3, #0
 80086f6:	77fb      	strb	r3, [r7, #31]
 80086f8:	e01d      	b.n	8008736 <UART_SetConfig+0xe2>
 80086fa:	2302      	movs	r3, #2
 80086fc:	77fb      	strb	r3, [r7, #31]
 80086fe:	e01a      	b.n	8008736 <UART_SetConfig+0xe2>
 8008700:	2304      	movs	r3, #4
 8008702:	77fb      	strb	r3, [r7, #31]
 8008704:	e017      	b.n	8008736 <UART_SetConfig+0xe2>
 8008706:	2308      	movs	r3, #8
 8008708:	77fb      	strb	r3, [r7, #31]
 800870a:	e014      	b.n	8008736 <UART_SetConfig+0xe2>
 800870c:	2310      	movs	r3, #16
 800870e:	77fb      	strb	r3, [r7, #31]
 8008710:	e011      	b.n	8008736 <UART_SetConfig+0xe2>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a67      	ldr	r2, [pc, #412]	; (80088b4 <UART_SetConfig+0x260>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d102      	bne.n	8008722 <UART_SetConfig+0xce>
 800871c:	2300      	movs	r3, #0
 800871e:	77fb      	strb	r3, [r7, #31]
 8008720:	e009      	b.n	8008736 <UART_SetConfig+0xe2>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4a64      	ldr	r2, [pc, #400]	; (80088b8 <UART_SetConfig+0x264>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d102      	bne.n	8008732 <UART_SetConfig+0xde>
 800872c:	2300      	movs	r3, #0
 800872e:	77fb      	strb	r3, [r7, #31]
 8008730:	e001      	b.n	8008736 <UART_SetConfig+0xe2>
 8008732:	2310      	movs	r3, #16
 8008734:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	69db      	ldr	r3, [r3, #28]
 800873a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800873e:	d15a      	bne.n	80087f6 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8008740:	7ffb      	ldrb	r3, [r7, #31]
 8008742:	2b08      	cmp	r3, #8
 8008744:	d827      	bhi.n	8008796 <UART_SetConfig+0x142>
 8008746:	a201      	add	r2, pc, #4	; (adr r2, 800874c <UART_SetConfig+0xf8>)
 8008748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800874c:	08008771 	.word	0x08008771
 8008750:	08008779 	.word	0x08008779
 8008754:	08008781 	.word	0x08008781
 8008758:	08008797 	.word	0x08008797
 800875c:	08008787 	.word	0x08008787
 8008760:	08008797 	.word	0x08008797
 8008764:	08008797 	.word	0x08008797
 8008768:	08008797 	.word	0x08008797
 800876c:	0800878f 	.word	0x0800878f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008770:	f7fe f856 	bl	8006820 <HAL_RCC_GetPCLK1Freq>
 8008774:	61b8      	str	r0, [r7, #24]
        break;
 8008776:	e013      	b.n	80087a0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008778:	f7fe f874 	bl	8006864 <HAL_RCC_GetPCLK2Freq>
 800877c:	61b8      	str	r0, [r7, #24]
        break;
 800877e:	e00f      	b.n	80087a0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008780:	4b4e      	ldr	r3, [pc, #312]	; (80088bc <UART_SetConfig+0x268>)
 8008782:	61bb      	str	r3, [r7, #24]
        break;
 8008784:	e00c      	b.n	80087a0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008786:	f7fd ffd5 	bl	8006734 <HAL_RCC_GetSysClockFreq>
 800878a:	61b8      	str	r0, [r7, #24]
        break;
 800878c:	e008      	b.n	80087a0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800878e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008792:	61bb      	str	r3, [r7, #24]
        break;
 8008794:	e004      	b.n	80087a0 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8008796:	2300      	movs	r3, #0
 8008798:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800879a:	2301      	movs	r3, #1
 800879c:	77bb      	strb	r3, [r7, #30]
        break;
 800879e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80087a0:	69bb      	ldr	r3, [r7, #24]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d074      	beq.n	8008890 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80087a6:	69bb      	ldr	r3, [r7, #24]
 80087a8:	005a      	lsls	r2, r3, #1
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	085b      	lsrs	r3, r3, #1
 80087b0:	441a      	add	r2, r3
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80087ba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	2b0f      	cmp	r3, #15
 80087c0:	d916      	bls.n	80087f0 <UART_SetConfig+0x19c>
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087c8:	d212      	bcs.n	80087f0 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	f023 030f 	bic.w	r3, r3, #15
 80087d2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	085b      	lsrs	r3, r3, #1
 80087d8:	b29b      	uxth	r3, r3
 80087da:	f003 0307 	and.w	r3, r3, #7
 80087de:	b29a      	uxth	r2, r3
 80087e0:	89fb      	ldrh	r3, [r7, #14]
 80087e2:	4313      	orrs	r3, r2
 80087e4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	89fa      	ldrh	r2, [r7, #14]
 80087ec:	60da      	str	r2, [r3, #12]
 80087ee:	e04f      	b.n	8008890 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80087f0:	2301      	movs	r3, #1
 80087f2:	77bb      	strb	r3, [r7, #30]
 80087f4:	e04c      	b.n	8008890 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80087f6:	7ffb      	ldrb	r3, [r7, #31]
 80087f8:	2b08      	cmp	r3, #8
 80087fa:	d828      	bhi.n	800884e <UART_SetConfig+0x1fa>
 80087fc:	a201      	add	r2, pc, #4	; (adr r2, 8008804 <UART_SetConfig+0x1b0>)
 80087fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008802:	bf00      	nop
 8008804:	08008829 	.word	0x08008829
 8008808:	08008831 	.word	0x08008831
 800880c:	08008839 	.word	0x08008839
 8008810:	0800884f 	.word	0x0800884f
 8008814:	0800883f 	.word	0x0800883f
 8008818:	0800884f 	.word	0x0800884f
 800881c:	0800884f 	.word	0x0800884f
 8008820:	0800884f 	.word	0x0800884f
 8008824:	08008847 	.word	0x08008847
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008828:	f7fd fffa 	bl	8006820 <HAL_RCC_GetPCLK1Freq>
 800882c:	61b8      	str	r0, [r7, #24]
        break;
 800882e:	e013      	b.n	8008858 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008830:	f7fe f818 	bl	8006864 <HAL_RCC_GetPCLK2Freq>
 8008834:	61b8      	str	r0, [r7, #24]
        break;
 8008836:	e00f      	b.n	8008858 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008838:	4b20      	ldr	r3, [pc, #128]	; (80088bc <UART_SetConfig+0x268>)
 800883a:	61bb      	str	r3, [r7, #24]
        break;
 800883c:	e00c      	b.n	8008858 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800883e:	f7fd ff79 	bl	8006734 <HAL_RCC_GetSysClockFreq>
 8008842:	61b8      	str	r0, [r7, #24]
        break;
 8008844:	e008      	b.n	8008858 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008846:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800884a:	61bb      	str	r3, [r7, #24]
        break;
 800884c:	e004      	b.n	8008858 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800884e:	2300      	movs	r3, #0
 8008850:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008852:	2301      	movs	r3, #1
 8008854:	77bb      	strb	r3, [r7, #30]
        break;
 8008856:	bf00      	nop
    }

    if (pclk != 0U)
 8008858:	69bb      	ldr	r3, [r7, #24]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d018      	beq.n	8008890 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	085a      	lsrs	r2, r3, #1
 8008864:	69bb      	ldr	r3, [r7, #24]
 8008866:	441a      	add	r2, r3
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008870:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	2b0f      	cmp	r3, #15
 8008876:	d909      	bls.n	800888c <UART_SetConfig+0x238>
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800887e:	d205      	bcs.n	800888c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	b29a      	uxth	r2, r3
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	60da      	str	r2, [r3, #12]
 800888a:	e001      	b.n	8008890 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800888c:	2301      	movs	r3, #1
 800888e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2200      	movs	r2, #0
 8008894:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2200      	movs	r2, #0
 800889a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800889c:	7fbb      	ldrb	r3, [r7, #30]
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3720      	adds	r7, #32
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
 80088a6:	bf00      	nop
 80088a8:	efff69f3 	.word	0xefff69f3
 80088ac:	40013800 	.word	0x40013800
 80088b0:	40021000 	.word	0x40021000
 80088b4:	40004400 	.word	0x40004400
 80088b8:	40004800 	.word	0x40004800
 80088bc:	007a1200 	.word	0x007a1200

080088c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b083      	sub	sp, #12
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088cc:	f003 0301 	and.w	r3, r3, #1
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d00a      	beq.n	80088ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	430a      	orrs	r2, r1
 80088e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ee:	f003 0302 	and.w	r3, r3, #2
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d00a      	beq.n	800890c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	430a      	orrs	r2, r1
 800890a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008910:	f003 0304 	and.w	r3, r3, #4
 8008914:	2b00      	cmp	r3, #0
 8008916:	d00a      	beq.n	800892e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	430a      	orrs	r2, r1
 800892c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008932:	f003 0308 	and.w	r3, r3, #8
 8008936:	2b00      	cmp	r3, #0
 8008938:	d00a      	beq.n	8008950 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	430a      	orrs	r2, r1
 800894e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008954:	f003 0310 	and.w	r3, r3, #16
 8008958:	2b00      	cmp	r3, #0
 800895a:	d00a      	beq.n	8008972 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	689b      	ldr	r3, [r3, #8]
 8008962:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	430a      	orrs	r2, r1
 8008970:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008976:	f003 0320 	and.w	r3, r3, #32
 800897a:	2b00      	cmp	r3, #0
 800897c:	d00a      	beq.n	8008994 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	689b      	ldr	r3, [r3, #8]
 8008984:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	430a      	orrs	r2, r1
 8008992:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800899c:	2b00      	cmp	r3, #0
 800899e:	d01a      	beq.n	80089d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	430a      	orrs	r2, r1
 80089b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089be:	d10a      	bne.n	80089d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	685b      	ldr	r3, [r3, #4]
 80089c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	430a      	orrs	r2, r1
 80089d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d00a      	beq.n	80089f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	430a      	orrs	r2, r1
 80089f6:	605a      	str	r2, [r3, #4]
  }
}
 80089f8:	bf00      	nop
 80089fa:	370c      	adds	r7, #12
 80089fc:	46bd      	mov	sp, r7
 80089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a02:	4770      	bx	lr

08008a04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b098      	sub	sp, #96	; 0x60
 8008a08:	af02      	add	r7, sp, #8
 8008a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008a14:	f7fb fc6c 	bl	80042f0 <HAL_GetTick>
 8008a18:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f003 0308 	and.w	r3, r3, #8
 8008a24:	2b08      	cmp	r3, #8
 8008a26:	d12e      	bne.n	8008a86 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a2c:	9300      	str	r3, [sp, #0]
 8008a2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a30:	2200      	movs	r2, #0
 8008a32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 f88c 	bl	8008b54 <UART_WaitOnFlagUntilTimeout>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d021      	beq.n	8008a86 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a4a:	e853 3f00 	ldrex	r3, [r3]
 8008a4e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a56:	653b      	str	r3, [r7, #80]	; 0x50
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a60:	647b      	str	r3, [r7, #68]	; 0x44
 8008a62:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a64:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008a66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a68:	e841 2300 	strex	r3, r2, [r1]
 8008a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008a6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d1e6      	bne.n	8008a42 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2220      	movs	r2, #32
 8008a78:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a82:	2303      	movs	r3, #3
 8008a84:	e062      	b.n	8008b4c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f003 0304 	and.w	r3, r3, #4
 8008a90:	2b04      	cmp	r3, #4
 8008a92:	d149      	bne.n	8008b28 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a98:	9300      	str	r3, [sp, #0]
 8008a9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 f856 	bl	8008b54 <UART_WaitOnFlagUntilTimeout>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d03c      	beq.n	8008b28 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab6:	e853 3f00 	ldrex	r3, [r3]
 8008aba:	623b      	str	r3, [r7, #32]
   return(result);
 8008abc:	6a3b      	ldr	r3, [r7, #32]
 8008abe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	461a      	mov	r2, r3
 8008aca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008acc:	633b      	str	r3, [r7, #48]	; 0x30
 8008ace:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ad2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ad4:	e841 2300 	strex	r3, r2, [r1]
 8008ad8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d1e6      	bne.n	8008aae <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	3308      	adds	r3, #8
 8008ae6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	e853 3f00 	ldrex	r3, [r3]
 8008aee:	60fb      	str	r3, [r7, #12]
   return(result);
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	f023 0301 	bic.w	r3, r3, #1
 8008af6:	64bb      	str	r3, [r7, #72]	; 0x48
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	3308      	adds	r3, #8
 8008afe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b00:	61fa      	str	r2, [r7, #28]
 8008b02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b04:	69b9      	ldr	r1, [r7, #24]
 8008b06:	69fa      	ldr	r2, [r7, #28]
 8008b08:	e841 2300 	strex	r3, r2, [r1]
 8008b0c:	617b      	str	r3, [r7, #20]
   return(result);
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d1e5      	bne.n	8008ae0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2220      	movs	r2, #32
 8008b18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b24:	2303      	movs	r3, #3
 8008b26:	e011      	b.n	8008b4c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2220      	movs	r2, #32
 8008b2c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2220      	movs	r2, #32
 8008b32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2200      	movs	r2, #0
 8008b46:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008b4a:	2300      	movs	r3, #0
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3758      	adds	r7, #88	; 0x58
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b084      	sub	sp, #16
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	60f8      	str	r0, [r7, #12]
 8008b5c:	60b9      	str	r1, [r7, #8]
 8008b5e:	603b      	str	r3, [r7, #0]
 8008b60:	4613      	mov	r3, r2
 8008b62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b64:	e049      	b.n	8008bfa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b66:	69bb      	ldr	r3, [r7, #24]
 8008b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b6c:	d045      	beq.n	8008bfa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b6e:	f7fb fbbf 	bl	80042f0 <HAL_GetTick>
 8008b72:	4602      	mov	r2, r0
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	1ad3      	subs	r3, r2, r3
 8008b78:	69ba      	ldr	r2, [r7, #24]
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d302      	bcc.n	8008b84 <UART_WaitOnFlagUntilTimeout+0x30>
 8008b7e:	69bb      	ldr	r3, [r7, #24]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d101      	bne.n	8008b88 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008b84:	2303      	movs	r3, #3
 8008b86:	e048      	b.n	8008c1a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f003 0304 	and.w	r3, r3, #4
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d031      	beq.n	8008bfa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	69db      	ldr	r3, [r3, #28]
 8008b9c:	f003 0308 	and.w	r3, r3, #8
 8008ba0:	2b08      	cmp	r3, #8
 8008ba2:	d110      	bne.n	8008bc6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	2208      	movs	r2, #8
 8008baa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008bac:	68f8      	ldr	r0, [r7, #12]
 8008bae:	f000 f838 	bl	8008c22 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2208      	movs	r2, #8
 8008bb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	e029      	b.n	8008c1a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	69db      	ldr	r3, [r3, #28]
 8008bcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008bd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bd4:	d111      	bne.n	8008bfa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008bde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008be0:	68f8      	ldr	r0, [r7, #12]
 8008be2:	f000 f81e 	bl	8008c22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2220      	movs	r2, #32
 8008bea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008bf6:	2303      	movs	r3, #3
 8008bf8:	e00f      	b.n	8008c1a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	69da      	ldr	r2, [r3, #28]
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	4013      	ands	r3, r2
 8008c04:	68ba      	ldr	r2, [r7, #8]
 8008c06:	429a      	cmp	r2, r3
 8008c08:	bf0c      	ite	eq
 8008c0a:	2301      	moveq	r3, #1
 8008c0c:	2300      	movne	r3, #0
 8008c0e:	b2db      	uxtb	r3, r3
 8008c10:	461a      	mov	r2, r3
 8008c12:	79fb      	ldrb	r3, [r7, #7]
 8008c14:	429a      	cmp	r2, r3
 8008c16:	d0a6      	beq.n	8008b66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c18:	2300      	movs	r3, #0
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3710      	adds	r7, #16
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}

08008c22 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c22:	b480      	push	{r7}
 8008c24:	b095      	sub	sp, #84	; 0x54
 8008c26:	af00      	add	r7, sp, #0
 8008c28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c32:	e853 3f00 	ldrex	r3, [r3]
 8008c36:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	461a      	mov	r2, r3
 8008c46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c48:	643b      	str	r3, [r7, #64]	; 0x40
 8008c4a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008c4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008c50:	e841 2300 	strex	r3, r2, [r1]
 8008c54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d1e6      	bne.n	8008c2a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	3308      	adds	r3, #8
 8008c62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c64:	6a3b      	ldr	r3, [r7, #32]
 8008c66:	e853 3f00 	ldrex	r3, [r3]
 8008c6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c6c:	69fb      	ldr	r3, [r7, #28]
 8008c6e:	f023 0301 	bic.w	r3, r3, #1
 8008c72:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	3308      	adds	r3, #8
 8008c7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008c7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c84:	e841 2300 	strex	r3, r2, [r1]
 8008c88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d1e5      	bne.n	8008c5c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c94:	2b01      	cmp	r3, #1
 8008c96:	d118      	bne.n	8008cca <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	e853 3f00 	ldrex	r3, [r3]
 8008ca4:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	f023 0310 	bic.w	r3, r3, #16
 8008cac:	647b      	str	r3, [r7, #68]	; 0x44
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cb6:	61bb      	str	r3, [r7, #24]
 8008cb8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cba:	6979      	ldr	r1, [r7, #20]
 8008cbc:	69ba      	ldr	r2, [r7, #24]
 8008cbe:	e841 2300 	strex	r3, r2, [r1]
 8008cc2:	613b      	str	r3, [r7, #16]
   return(result);
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d1e6      	bne.n	8008c98 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2220      	movs	r2, #32
 8008cce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008cde:	bf00      	nop
 8008ce0:	3754      	adds	r7, #84	; 0x54
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr

08008cea <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008cea:	b480      	push	{r7}
 8008cec:	b085      	sub	sp, #20
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008cf8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008cfc:	2b84      	cmp	r3, #132	; 0x84
 8008cfe:	d005      	beq.n	8008d0c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008d00:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	4413      	add	r3, r2
 8008d08:	3303      	adds	r3, #3
 8008d0a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3714      	adds	r7, #20
 8008d12:	46bd      	mov	sp, r7
 8008d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d18:	4770      	bx	lr

08008d1a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008d1a:	b580      	push	{r7, lr}
 8008d1c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008d1e:	f001 f8b9 	bl	8009e94 <vTaskStartScheduler>
  
  return osOK;
 8008d22:	2300      	movs	r3, #0
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	bd80      	pop	{r7, pc}

08008d28 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d2a:	b089      	sub	sp, #36	; 0x24
 8008d2c:	af04      	add	r7, sp, #16
 8008d2e:	6078      	str	r0, [r7, #4]
 8008d30:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	695b      	ldr	r3, [r3, #20]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d020      	beq.n	8008d7c <osThreadCreate+0x54>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	699b      	ldr	r3, [r3, #24]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d01c      	beq.n	8008d7c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	685c      	ldr	r4, [r3, #4]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	691e      	ldr	r6, [r3, #16]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008d54:	4618      	mov	r0, r3
 8008d56:	f7ff ffc8 	bl	8008cea <makeFreeRtosPriority>
 8008d5a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	695b      	ldr	r3, [r3, #20]
 8008d60:	687a      	ldr	r2, [r7, #4]
 8008d62:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008d64:	9202      	str	r2, [sp, #8]
 8008d66:	9301      	str	r3, [sp, #4]
 8008d68:	9100      	str	r1, [sp, #0]
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	4632      	mov	r2, r6
 8008d6e:	4629      	mov	r1, r5
 8008d70:	4620      	mov	r0, r4
 8008d72:	f000 fed1 	bl	8009b18 <xTaskCreateStatic>
 8008d76:	4603      	mov	r3, r0
 8008d78:	60fb      	str	r3, [r7, #12]
 8008d7a:	e01c      	b.n	8008db6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	685c      	ldr	r4, [r3, #4]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008d88:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008d90:	4618      	mov	r0, r3
 8008d92:	f7ff ffaa 	bl	8008cea <makeFreeRtosPriority>
 8008d96:	4602      	mov	r2, r0
 8008d98:	f107 030c 	add.w	r3, r7, #12
 8008d9c:	9301      	str	r3, [sp, #4]
 8008d9e:	9200      	str	r2, [sp, #0]
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	4632      	mov	r2, r6
 8008da4:	4629      	mov	r1, r5
 8008da6:	4620      	mov	r0, r4
 8008da8:	f000 ff12 	bl	8009bd0 <xTaskCreate>
 8008dac:	4603      	mov	r3, r0
 8008dae:	2b01      	cmp	r3, #1
 8008db0:	d001      	beq.n	8008db6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008db2:	2300      	movs	r3, #0
 8008db4:	e000      	b.n	8008db8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008db6:	68fb      	ldr	r3, [r7, #12]
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3714      	adds	r7, #20
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008dc0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b084      	sub	sp, #16
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d001      	beq.n	8008dd6 <osDelay+0x16>
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	e000      	b.n	8008dd8 <osDelay+0x18>
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f001 f827 	bl	8009e2c <vTaskDelay>
  
  return osOK;
 8008dde:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3710      	adds	r7, #16
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b082      	sub	sp, #8
 8008dec:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8008dee:	201c      	movs	r0, #28
 8008df0:	f002 fbba 	bl	800b568 <pvPortMalloc>
 8008df4:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d00a      	beq.n	8008e12 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	3304      	adds	r3, #4
 8008e06:	4618      	mov	r0, r3
 8008e08:	f000 f8ef 	bl	8008fea <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8008e12:	687b      	ldr	r3, [r7, #4]
	}
 8008e14:	4618      	mov	r0, r3
 8008e16:	3708      	adds	r7, #8
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}

08008e1c <xEventGroupClearBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b086      	sub	sp, #24
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d10a      	bne.n	8008e46 <xEventGroupClearBits+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e34:	f383 8811 	msr	BASEPRI, r3
 8008e38:	f3bf 8f6f 	isb	sy
 8008e3c:	f3bf 8f4f 	dsb	sy
 8008e40:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008e42:	bf00      	nop
 8008e44:	e7fe      	b.n	8008e44 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d00a      	beq.n	8008e66 <xEventGroupClearBits+0x4a>
	__asm volatile
 8008e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e54:	f383 8811 	msr	BASEPRI, r3
 8008e58:	f3bf 8f6f 	isb	sy
 8008e5c:	f3bf 8f4f 	dsb	sy
 8008e60:	60bb      	str	r3, [r7, #8]
}
 8008e62:	bf00      	nop
 8008e64:	e7fe      	b.n	8008e64 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8008e66:	f002 fa5d 	bl	800b324 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	681a      	ldr	r2, [r3, #0]
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	43db      	mvns	r3, r3
 8008e78:	401a      	ands	r2, r3
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8008e7e:	f002 fa81 	bl	800b384 <vPortExitCritical>

	return uxReturn;
 8008e82:	693b      	ldr	r3, [r7, #16]
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3718      	adds	r7, #24
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}

08008e8c <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b089      	sub	sp, #36	; 0x24
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008e98:	f3ef 8211 	mrs	r2, BASEPRI
 8008e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea0:	f383 8811 	msr	BASEPRI, r3
 8008ea4:	f3bf 8f6f 	isb	sy
 8008ea8:	f3bf 8f4f 	dsb	sy
 8008eac:	60fa      	str	r2, [r7, #12]
 8008eae:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008eb2:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8008eb4:	69fb      	ldr	r3, [r7, #28]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	617b      	str	r3, [r7, #20]
 8008eba:	69bb      	ldr	r3, [r7, #24]
 8008ebc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008ec4:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8008ec6:	697b      	ldr	r3, [r7, #20]
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3724      	adds	r7, #36	; 0x24
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr

08008ed4 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b08e      	sub	sp, #56	; 0x38
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d10a      	bne.n	8008f06 <xEventGroupSetBits+0x32>
	__asm volatile
 8008ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef4:	f383 8811 	msr	BASEPRI, r3
 8008ef8:	f3bf 8f6f 	isb	sy
 8008efc:	f3bf 8f4f 	dsb	sy
 8008f00:	613b      	str	r3, [r7, #16]
}
 8008f02:	bf00      	nop
 8008f04:	e7fe      	b.n	8008f04 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d00a      	beq.n	8008f26 <xEventGroupSetBits+0x52>
	__asm volatile
 8008f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f14:	f383 8811 	msr	BASEPRI, r3
 8008f18:	f3bf 8f6f 	isb	sy
 8008f1c:	f3bf 8f4f 	dsb	sy
 8008f20:	60fb      	str	r3, [r7, #12]
}
 8008f22:	bf00      	nop
 8008f24:	e7fe      	b.n	8008f24 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8008f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f28:	3304      	adds	r3, #4
 8008f2a:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f2e:	3308      	adds	r3, #8
 8008f30:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8008f32:	f001 f815 	bl	8009f60 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8008f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f38:	68db      	ldr	r3, [r3, #12]
 8008f3a:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8008f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f3e:	681a      	ldr	r2, [r3, #0]
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	431a      	orrs	r2, r3
 8008f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f46:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8008f48:	e03c      	b.n	8008fc4 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8008f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8008f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8008f56:	2300      	movs	r3, #0
 8008f58:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8008f5a:	69bb      	ldr	r3, [r7, #24]
 8008f5c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008f60:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8008f62:	69bb      	ldr	r3, [r7, #24]
 8008f64:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008f68:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d108      	bne.n	8008f86 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8008f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f76:	681a      	ldr	r2, [r3, #0]
 8008f78:	69bb      	ldr	r3, [r7, #24]
 8008f7a:	4013      	ands	r3, r2
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d00b      	beq.n	8008f98 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8008f80:	2301      	movs	r3, #1
 8008f82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f84:	e008      	b.n	8008f98 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8008f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f88:	681a      	ldr	r2, [r3, #0]
 8008f8a:	69bb      	ldr	r3, [r7, #24]
 8008f8c:	4013      	ands	r3, r2
 8008f8e:	69ba      	ldr	r2, [r7, #24]
 8008f90:	429a      	cmp	r2, r3
 8008f92:	d101      	bne.n	8008f98 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8008f94:	2301      	movs	r3, #1
 8008f96:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8008f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d010      	beq.n	8008fc0 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d003      	beq.n	8008fb0 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8008fa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008faa:	69bb      	ldr	r3, [r7, #24]
 8008fac:	4313      	orrs	r3, r2
 8008fae:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8008fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008fb8:	4619      	mov	r1, r3
 8008fba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008fbc:	f001 fa56 	bl	800a46c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8008fc0:	69fb      	ldr	r3, [r7, #28]
 8008fc2:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8008fc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008fc6:	6a3b      	ldr	r3, [r7, #32]
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	d1be      	bne.n	8008f4a <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8008fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fce:	681a      	ldr	r2, [r3, #0]
 8008fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd2:	43db      	mvns	r3, r3
 8008fd4:	401a      	ands	r2, r3
 8008fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fd8:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8008fda:	f000 ffcf 	bl	8009f7c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8008fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe0:	681b      	ldr	r3, [r3, #0]
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3738      	adds	r7, #56	; 0x38
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}

08008fea <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008fea:	b480      	push	{r7}
 8008fec:	b083      	sub	sp, #12
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f103 0208 	add.w	r2, r3, #8
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f04f 32ff 	mov.w	r2, #4294967295
 8009002:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f103 0208 	add.w	r2, r3, #8
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f103 0208 	add.w	r2, r3, #8
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2200      	movs	r2, #0
 800901c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800901e:	bf00      	nop
 8009020:	370c      	adds	r7, #12
 8009022:	46bd      	mov	sp, r7
 8009024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009028:	4770      	bx	lr

0800902a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800902a:	b480      	push	{r7}
 800902c:	b083      	sub	sp, #12
 800902e:	af00      	add	r7, sp, #0
 8009030:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2200      	movs	r2, #0
 8009036:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009038:	bf00      	nop
 800903a:	370c      	adds	r7, #12
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr

08009044 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009044:	b480      	push	{r7}
 8009046:	b085      	sub	sp, #20
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	68fa      	ldr	r2, [r7, #12]
 8009058:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	689a      	ldr	r2, [r3, #8]
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	689b      	ldr	r3, [r3, #8]
 8009066:	683a      	ldr	r2, [r7, #0]
 8009068:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	683a      	ldr	r2, [r7, #0]
 800906e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	687a      	ldr	r2, [r7, #4]
 8009074:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	1c5a      	adds	r2, r3, #1
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	601a      	str	r2, [r3, #0]
}
 8009080:	bf00      	nop
 8009082:	3714      	adds	r7, #20
 8009084:	46bd      	mov	sp, r7
 8009086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908a:	4770      	bx	lr

0800908c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800908c:	b480      	push	{r7}
 800908e:	b085      	sub	sp, #20
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
 8009094:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090a2:	d103      	bne.n	80090ac <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	691b      	ldr	r3, [r3, #16]
 80090a8:	60fb      	str	r3, [r7, #12]
 80090aa:	e00c      	b.n	80090c6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	3308      	adds	r3, #8
 80090b0:	60fb      	str	r3, [r7, #12]
 80090b2:	e002      	b.n	80090ba <vListInsert+0x2e>
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	685b      	ldr	r3, [r3, #4]
 80090b8:	60fb      	str	r3, [r7, #12]
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	68ba      	ldr	r2, [r7, #8]
 80090c2:	429a      	cmp	r2, r3
 80090c4:	d2f6      	bcs.n	80090b4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	685a      	ldr	r2, [r3, #4]
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	683a      	ldr	r2, [r7, #0]
 80090d4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	68fa      	ldr	r2, [r7, #12]
 80090da:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	683a      	ldr	r2, [r7, #0]
 80090e0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	687a      	ldr	r2, [r7, #4]
 80090e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	1c5a      	adds	r2, r3, #1
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	601a      	str	r2, [r3, #0]
}
 80090f2:	bf00      	nop
 80090f4:	3714      	adds	r7, #20
 80090f6:	46bd      	mov	sp, r7
 80090f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fc:	4770      	bx	lr

080090fe <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80090fe:	b480      	push	{r7}
 8009100:	b085      	sub	sp, #20
 8009102:	af00      	add	r7, sp, #0
 8009104:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	691b      	ldr	r3, [r3, #16]
 800910a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	685b      	ldr	r3, [r3, #4]
 8009110:	687a      	ldr	r2, [r7, #4]
 8009112:	6892      	ldr	r2, [r2, #8]
 8009114:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	689b      	ldr	r3, [r3, #8]
 800911a:	687a      	ldr	r2, [r7, #4]
 800911c:	6852      	ldr	r2, [r2, #4]
 800911e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	429a      	cmp	r2, r3
 8009128:	d103      	bne.n	8009132 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	689a      	ldr	r2, [r3, #8]
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2200      	movs	r2, #0
 8009136:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	1e5a      	subs	r2, r3, #1
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
}
 8009146:	4618      	mov	r0, r3
 8009148:	3714      	adds	r7, #20
 800914a:	46bd      	mov	sp, r7
 800914c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009150:	4770      	bx	lr
	...

08009154 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b084      	sub	sp, #16
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d10a      	bne.n	800917e <xQueueGenericReset+0x2a>
	__asm volatile
 8009168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800916c:	f383 8811 	msr	BASEPRI, r3
 8009170:	f3bf 8f6f 	isb	sy
 8009174:	f3bf 8f4f 	dsb	sy
 8009178:	60bb      	str	r3, [r7, #8]
}
 800917a:	bf00      	nop
 800917c:	e7fe      	b.n	800917c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800917e:	f002 f8d1 	bl	800b324 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681a      	ldr	r2, [r3, #0]
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800918a:	68f9      	ldr	r1, [r7, #12]
 800918c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800918e:	fb01 f303 	mul.w	r3, r1, r3
 8009192:	441a      	add	r2, r3
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	2200      	movs	r2, #0
 800919c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681a      	ldr	r2, [r3, #0]
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681a      	ldr	r2, [r3, #0]
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091ae:	3b01      	subs	r3, #1
 80091b0:	68f9      	ldr	r1, [r7, #12]
 80091b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80091b4:	fb01 f303 	mul.w	r3, r1, r3
 80091b8:	441a      	add	r2, r3
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	22ff      	movs	r2, #255	; 0xff
 80091c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	22ff      	movs	r2, #255	; 0xff
 80091ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d114      	bne.n	80091fe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	691b      	ldr	r3, [r3, #16]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d01a      	beq.n	8009212 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	3310      	adds	r3, #16
 80091e0:	4618      	mov	r0, r3
 80091e2:	f001 f8e1 	bl	800a3a8 <xTaskRemoveFromEventList>
 80091e6:	4603      	mov	r3, r0
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d012      	beq.n	8009212 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80091ec:	4b0c      	ldr	r3, [pc, #48]	; (8009220 <xQueueGenericReset+0xcc>)
 80091ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091f2:	601a      	str	r2, [r3, #0]
 80091f4:	f3bf 8f4f 	dsb	sy
 80091f8:	f3bf 8f6f 	isb	sy
 80091fc:	e009      	b.n	8009212 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	3310      	adds	r3, #16
 8009202:	4618      	mov	r0, r3
 8009204:	f7ff fef1 	bl	8008fea <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	3324      	adds	r3, #36	; 0x24
 800920c:	4618      	mov	r0, r3
 800920e:	f7ff feec 	bl	8008fea <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009212:	f002 f8b7 	bl	800b384 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009216:	2301      	movs	r3, #1
}
 8009218:	4618      	mov	r0, r3
 800921a:	3710      	adds	r7, #16
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}
 8009220:	e000ed04 	.word	0xe000ed04

08009224 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009224:	b580      	push	{r7, lr}
 8009226:	b08e      	sub	sp, #56	; 0x38
 8009228:	af02      	add	r7, sp, #8
 800922a:	60f8      	str	r0, [r7, #12]
 800922c:	60b9      	str	r1, [r7, #8]
 800922e:	607a      	str	r2, [r7, #4]
 8009230:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d10a      	bne.n	800924e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800923c:	f383 8811 	msr	BASEPRI, r3
 8009240:	f3bf 8f6f 	isb	sy
 8009244:	f3bf 8f4f 	dsb	sy
 8009248:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800924a:	bf00      	nop
 800924c:	e7fe      	b.n	800924c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d10a      	bne.n	800926a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009258:	f383 8811 	msr	BASEPRI, r3
 800925c:	f3bf 8f6f 	isb	sy
 8009260:	f3bf 8f4f 	dsb	sy
 8009264:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009266:	bf00      	nop
 8009268:	e7fe      	b.n	8009268 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d002      	beq.n	8009276 <xQueueGenericCreateStatic+0x52>
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d001      	beq.n	800927a <xQueueGenericCreateStatic+0x56>
 8009276:	2301      	movs	r3, #1
 8009278:	e000      	b.n	800927c <xQueueGenericCreateStatic+0x58>
 800927a:	2300      	movs	r3, #0
 800927c:	2b00      	cmp	r3, #0
 800927e:	d10a      	bne.n	8009296 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009284:	f383 8811 	msr	BASEPRI, r3
 8009288:	f3bf 8f6f 	isb	sy
 800928c:	f3bf 8f4f 	dsb	sy
 8009290:	623b      	str	r3, [r7, #32]
}
 8009292:	bf00      	nop
 8009294:	e7fe      	b.n	8009294 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d102      	bne.n	80092a2 <xQueueGenericCreateStatic+0x7e>
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d101      	bne.n	80092a6 <xQueueGenericCreateStatic+0x82>
 80092a2:	2301      	movs	r3, #1
 80092a4:	e000      	b.n	80092a8 <xQueueGenericCreateStatic+0x84>
 80092a6:	2300      	movs	r3, #0
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d10a      	bne.n	80092c2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80092ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b0:	f383 8811 	msr	BASEPRI, r3
 80092b4:	f3bf 8f6f 	isb	sy
 80092b8:	f3bf 8f4f 	dsb	sy
 80092bc:	61fb      	str	r3, [r7, #28]
}
 80092be:	bf00      	nop
 80092c0:	e7fe      	b.n	80092c0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80092c2:	2348      	movs	r3, #72	; 0x48
 80092c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	2b48      	cmp	r3, #72	; 0x48
 80092ca:	d00a      	beq.n	80092e2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80092cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d0:	f383 8811 	msr	BASEPRI, r3
 80092d4:	f3bf 8f6f 	isb	sy
 80092d8:	f3bf 8f4f 	dsb	sy
 80092dc:	61bb      	str	r3, [r7, #24]
}
 80092de:	bf00      	nop
 80092e0:	e7fe      	b.n	80092e0 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80092e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d00d      	beq.n	8009308 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80092ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ee:	2201      	movs	r2, #1
 80092f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80092f4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80092f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092fa:	9300      	str	r3, [sp, #0]
 80092fc:	4613      	mov	r3, r2
 80092fe:	687a      	ldr	r2, [r7, #4]
 8009300:	68b9      	ldr	r1, [r7, #8]
 8009302:	68f8      	ldr	r0, [r7, #12]
 8009304:	f000 f805 	bl	8009312 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8009308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800930a:	4618      	mov	r0, r3
 800930c:	3730      	adds	r7, #48	; 0x30
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}

08009312 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009312:	b580      	push	{r7, lr}
 8009314:	b084      	sub	sp, #16
 8009316:	af00      	add	r7, sp, #0
 8009318:	60f8      	str	r0, [r7, #12]
 800931a:	60b9      	str	r1, [r7, #8]
 800931c:	607a      	str	r2, [r7, #4]
 800931e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d103      	bne.n	800932e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009326:	69bb      	ldr	r3, [r7, #24]
 8009328:	69ba      	ldr	r2, [r7, #24]
 800932a:	601a      	str	r2, [r3, #0]
 800932c:	e002      	b.n	8009334 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800932e:	69bb      	ldr	r3, [r7, #24]
 8009330:	687a      	ldr	r2, [r7, #4]
 8009332:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009334:	69bb      	ldr	r3, [r7, #24]
 8009336:	68fa      	ldr	r2, [r7, #12]
 8009338:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800933a:	69bb      	ldr	r3, [r7, #24]
 800933c:	68ba      	ldr	r2, [r7, #8]
 800933e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009340:	2101      	movs	r1, #1
 8009342:	69b8      	ldr	r0, [r7, #24]
 8009344:	f7ff ff06 	bl	8009154 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009348:	bf00      	nop
 800934a:	3710      	adds	r7, #16
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}

08009350 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b08e      	sub	sp, #56	; 0x38
 8009354:	af00      	add	r7, sp, #0
 8009356:	60f8      	str	r0, [r7, #12]
 8009358:	60b9      	str	r1, [r7, #8]
 800935a:	607a      	str	r2, [r7, #4]
 800935c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800935e:	2300      	movs	r3, #0
 8009360:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009368:	2b00      	cmp	r3, #0
 800936a:	d10a      	bne.n	8009382 <xQueueGenericSend+0x32>
	__asm volatile
 800936c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009370:	f383 8811 	msr	BASEPRI, r3
 8009374:	f3bf 8f6f 	isb	sy
 8009378:	f3bf 8f4f 	dsb	sy
 800937c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800937e:	bf00      	nop
 8009380:	e7fe      	b.n	8009380 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d103      	bne.n	8009390 <xQueueGenericSend+0x40>
 8009388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800938a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800938c:	2b00      	cmp	r3, #0
 800938e:	d101      	bne.n	8009394 <xQueueGenericSend+0x44>
 8009390:	2301      	movs	r3, #1
 8009392:	e000      	b.n	8009396 <xQueueGenericSend+0x46>
 8009394:	2300      	movs	r3, #0
 8009396:	2b00      	cmp	r3, #0
 8009398:	d10a      	bne.n	80093b0 <xQueueGenericSend+0x60>
	__asm volatile
 800939a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800939e:	f383 8811 	msr	BASEPRI, r3
 80093a2:	f3bf 8f6f 	isb	sy
 80093a6:	f3bf 8f4f 	dsb	sy
 80093aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80093ac:	bf00      	nop
 80093ae:	e7fe      	b.n	80093ae <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	2b02      	cmp	r3, #2
 80093b4:	d103      	bne.n	80093be <xQueueGenericSend+0x6e>
 80093b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093ba:	2b01      	cmp	r3, #1
 80093bc:	d101      	bne.n	80093c2 <xQueueGenericSend+0x72>
 80093be:	2301      	movs	r3, #1
 80093c0:	e000      	b.n	80093c4 <xQueueGenericSend+0x74>
 80093c2:	2300      	movs	r3, #0
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d10a      	bne.n	80093de <xQueueGenericSend+0x8e>
	__asm volatile
 80093c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093cc:	f383 8811 	msr	BASEPRI, r3
 80093d0:	f3bf 8f6f 	isb	sy
 80093d4:	f3bf 8f4f 	dsb	sy
 80093d8:	623b      	str	r3, [r7, #32]
}
 80093da:	bf00      	nop
 80093dc:	e7fe      	b.n	80093dc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80093de:	f001 fa07 	bl	800a7f0 <xTaskGetSchedulerState>
 80093e2:	4603      	mov	r3, r0
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d102      	bne.n	80093ee <xQueueGenericSend+0x9e>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d101      	bne.n	80093f2 <xQueueGenericSend+0xa2>
 80093ee:	2301      	movs	r3, #1
 80093f0:	e000      	b.n	80093f4 <xQueueGenericSend+0xa4>
 80093f2:	2300      	movs	r3, #0
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d10a      	bne.n	800940e <xQueueGenericSend+0xbe>
	__asm volatile
 80093f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093fc:	f383 8811 	msr	BASEPRI, r3
 8009400:	f3bf 8f6f 	isb	sy
 8009404:	f3bf 8f4f 	dsb	sy
 8009408:	61fb      	str	r3, [r7, #28]
}
 800940a:	bf00      	nop
 800940c:	e7fe      	b.n	800940c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800940e:	f001 ff89 	bl	800b324 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009414:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800941a:	429a      	cmp	r2, r3
 800941c:	d302      	bcc.n	8009424 <xQueueGenericSend+0xd4>
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	2b02      	cmp	r3, #2
 8009422:	d129      	bne.n	8009478 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009424:	683a      	ldr	r2, [r7, #0]
 8009426:	68b9      	ldr	r1, [r7, #8]
 8009428:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800942a:	f000 fa07 	bl	800983c <prvCopyDataToQueue>
 800942e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009434:	2b00      	cmp	r3, #0
 8009436:	d010      	beq.n	800945a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800943a:	3324      	adds	r3, #36	; 0x24
 800943c:	4618      	mov	r0, r3
 800943e:	f000 ffb3 	bl	800a3a8 <xTaskRemoveFromEventList>
 8009442:	4603      	mov	r3, r0
 8009444:	2b00      	cmp	r3, #0
 8009446:	d013      	beq.n	8009470 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009448:	4b3f      	ldr	r3, [pc, #252]	; (8009548 <xQueueGenericSend+0x1f8>)
 800944a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800944e:	601a      	str	r2, [r3, #0]
 8009450:	f3bf 8f4f 	dsb	sy
 8009454:	f3bf 8f6f 	isb	sy
 8009458:	e00a      	b.n	8009470 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800945a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800945c:	2b00      	cmp	r3, #0
 800945e:	d007      	beq.n	8009470 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009460:	4b39      	ldr	r3, [pc, #228]	; (8009548 <xQueueGenericSend+0x1f8>)
 8009462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009466:	601a      	str	r2, [r3, #0]
 8009468:	f3bf 8f4f 	dsb	sy
 800946c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009470:	f001 ff88 	bl	800b384 <vPortExitCritical>
				return pdPASS;
 8009474:	2301      	movs	r3, #1
 8009476:	e063      	b.n	8009540 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d103      	bne.n	8009486 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800947e:	f001 ff81 	bl	800b384 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009482:	2300      	movs	r3, #0
 8009484:	e05c      	b.n	8009540 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009488:	2b00      	cmp	r3, #0
 800948a:	d106      	bne.n	800949a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800948c:	f107 0314 	add.w	r3, r7, #20
 8009490:	4618      	mov	r0, r3
 8009492:	f001 f84d 	bl	800a530 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009496:	2301      	movs	r3, #1
 8009498:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800949a:	f001 ff73 	bl	800b384 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800949e:	f000 fd5f 	bl	8009f60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80094a2:	f001 ff3f 	bl	800b324 <vPortEnterCritical>
 80094a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80094ac:	b25b      	sxtb	r3, r3
 80094ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094b2:	d103      	bne.n	80094bc <xQueueGenericSend+0x16c>
 80094b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b6:	2200      	movs	r2, #0
 80094b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80094bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094c2:	b25b      	sxtb	r3, r3
 80094c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094c8:	d103      	bne.n	80094d2 <xQueueGenericSend+0x182>
 80094ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094cc:	2200      	movs	r2, #0
 80094ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80094d2:	f001 ff57 	bl	800b384 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80094d6:	1d3a      	adds	r2, r7, #4
 80094d8:	f107 0314 	add.w	r3, r7, #20
 80094dc:	4611      	mov	r1, r2
 80094de:	4618      	mov	r0, r3
 80094e0:	f001 f83c 	bl	800a55c <xTaskCheckForTimeOut>
 80094e4:	4603      	mov	r3, r0
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d124      	bne.n	8009534 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80094ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80094ec:	f000 fa9e 	bl	8009a2c <prvIsQueueFull>
 80094f0:	4603      	mov	r3, r0
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d018      	beq.n	8009528 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80094f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094f8:	3310      	adds	r3, #16
 80094fa:	687a      	ldr	r2, [r7, #4]
 80094fc:	4611      	mov	r1, r2
 80094fe:	4618      	mov	r0, r3
 8009500:	f000 ff02 	bl	800a308 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009504:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009506:	f000 fa29 	bl	800995c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800950a:	f000 fd37 	bl	8009f7c <xTaskResumeAll>
 800950e:	4603      	mov	r3, r0
 8009510:	2b00      	cmp	r3, #0
 8009512:	f47f af7c 	bne.w	800940e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009516:	4b0c      	ldr	r3, [pc, #48]	; (8009548 <xQueueGenericSend+0x1f8>)
 8009518:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800951c:	601a      	str	r2, [r3, #0]
 800951e:	f3bf 8f4f 	dsb	sy
 8009522:	f3bf 8f6f 	isb	sy
 8009526:	e772      	b.n	800940e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009528:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800952a:	f000 fa17 	bl	800995c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800952e:	f000 fd25 	bl	8009f7c <xTaskResumeAll>
 8009532:	e76c      	b.n	800940e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009534:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009536:	f000 fa11 	bl	800995c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800953a:	f000 fd1f 	bl	8009f7c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800953e:	2300      	movs	r3, #0
		}
	}
}
 8009540:	4618      	mov	r0, r3
 8009542:	3738      	adds	r7, #56	; 0x38
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}
 8009548:	e000ed04 	.word	0xe000ed04

0800954c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b08e      	sub	sp, #56	; 0x38
 8009550:	af00      	add	r7, sp, #0
 8009552:	60f8      	str	r0, [r7, #12]
 8009554:	60b9      	str	r1, [r7, #8]
 8009556:	607a      	str	r2, [r7, #4]
 8009558:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800955e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009560:	2b00      	cmp	r3, #0
 8009562:	d10a      	bne.n	800957a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009568:	f383 8811 	msr	BASEPRI, r3
 800956c:	f3bf 8f6f 	isb	sy
 8009570:	f3bf 8f4f 	dsb	sy
 8009574:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009576:	bf00      	nop
 8009578:	e7fe      	b.n	8009578 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d103      	bne.n	8009588 <xQueueGenericSendFromISR+0x3c>
 8009580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009584:	2b00      	cmp	r3, #0
 8009586:	d101      	bne.n	800958c <xQueueGenericSendFromISR+0x40>
 8009588:	2301      	movs	r3, #1
 800958a:	e000      	b.n	800958e <xQueueGenericSendFromISR+0x42>
 800958c:	2300      	movs	r3, #0
 800958e:	2b00      	cmp	r3, #0
 8009590:	d10a      	bne.n	80095a8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009596:	f383 8811 	msr	BASEPRI, r3
 800959a:	f3bf 8f6f 	isb	sy
 800959e:	f3bf 8f4f 	dsb	sy
 80095a2:	623b      	str	r3, [r7, #32]
}
 80095a4:	bf00      	nop
 80095a6:	e7fe      	b.n	80095a6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	2b02      	cmp	r3, #2
 80095ac:	d103      	bne.n	80095b6 <xQueueGenericSendFromISR+0x6a>
 80095ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095b2:	2b01      	cmp	r3, #1
 80095b4:	d101      	bne.n	80095ba <xQueueGenericSendFromISR+0x6e>
 80095b6:	2301      	movs	r3, #1
 80095b8:	e000      	b.n	80095bc <xQueueGenericSendFromISR+0x70>
 80095ba:	2300      	movs	r3, #0
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d10a      	bne.n	80095d6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80095c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c4:	f383 8811 	msr	BASEPRI, r3
 80095c8:	f3bf 8f6f 	isb	sy
 80095cc:	f3bf 8f4f 	dsb	sy
 80095d0:	61fb      	str	r3, [r7, #28]
}
 80095d2:	bf00      	nop
 80095d4:	e7fe      	b.n	80095d4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80095d6:	f001 ff87 	bl	800b4e8 <vPortValidateInterruptPriority>
	__asm volatile
 80095da:	f3ef 8211 	mrs	r2, BASEPRI
 80095de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e2:	f383 8811 	msr	BASEPRI, r3
 80095e6:	f3bf 8f6f 	isb	sy
 80095ea:	f3bf 8f4f 	dsb	sy
 80095ee:	61ba      	str	r2, [r7, #24]
 80095f0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80095f2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80095f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80095f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095fe:	429a      	cmp	r2, r3
 8009600:	d302      	bcc.n	8009608 <xQueueGenericSendFromISR+0xbc>
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	2b02      	cmp	r3, #2
 8009606:	d12c      	bne.n	8009662 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800960a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800960e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009612:	683a      	ldr	r2, [r7, #0]
 8009614:	68b9      	ldr	r1, [r7, #8]
 8009616:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009618:	f000 f910 	bl	800983c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800961c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009624:	d112      	bne.n	800964c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800962a:	2b00      	cmp	r3, #0
 800962c:	d016      	beq.n	800965c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800962e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009630:	3324      	adds	r3, #36	; 0x24
 8009632:	4618      	mov	r0, r3
 8009634:	f000 feb8 	bl	800a3a8 <xTaskRemoveFromEventList>
 8009638:	4603      	mov	r3, r0
 800963a:	2b00      	cmp	r3, #0
 800963c:	d00e      	beq.n	800965c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d00b      	beq.n	800965c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2201      	movs	r2, #1
 8009648:	601a      	str	r2, [r3, #0]
 800964a:	e007      	b.n	800965c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800964c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009650:	3301      	adds	r3, #1
 8009652:	b2db      	uxtb	r3, r3
 8009654:	b25a      	sxtb	r2, r3
 8009656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009658:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800965c:	2301      	movs	r3, #1
 800965e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009660:	e001      	b.n	8009666 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009662:	2300      	movs	r3, #0
 8009664:	637b      	str	r3, [r7, #52]	; 0x34
 8009666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009668:	613b      	str	r3, [r7, #16]
	__asm volatile
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	f383 8811 	msr	BASEPRI, r3
}
 8009670:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009674:	4618      	mov	r0, r3
 8009676:	3738      	adds	r7, #56	; 0x38
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}

0800967c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b08c      	sub	sp, #48	; 0x30
 8009680:	af00      	add	r7, sp, #0
 8009682:	60f8      	str	r0, [r7, #12]
 8009684:	60b9      	str	r1, [r7, #8]
 8009686:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009688:	2300      	movs	r3, #0
 800968a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009692:	2b00      	cmp	r3, #0
 8009694:	d10a      	bne.n	80096ac <xQueueReceive+0x30>
	__asm volatile
 8009696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800969a:	f383 8811 	msr	BASEPRI, r3
 800969e:	f3bf 8f6f 	isb	sy
 80096a2:	f3bf 8f4f 	dsb	sy
 80096a6:	623b      	str	r3, [r7, #32]
}
 80096a8:	bf00      	nop
 80096aa:	e7fe      	b.n	80096aa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d103      	bne.n	80096ba <xQueueReceive+0x3e>
 80096b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d101      	bne.n	80096be <xQueueReceive+0x42>
 80096ba:	2301      	movs	r3, #1
 80096bc:	e000      	b.n	80096c0 <xQueueReceive+0x44>
 80096be:	2300      	movs	r3, #0
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d10a      	bne.n	80096da <xQueueReceive+0x5e>
	__asm volatile
 80096c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c8:	f383 8811 	msr	BASEPRI, r3
 80096cc:	f3bf 8f6f 	isb	sy
 80096d0:	f3bf 8f4f 	dsb	sy
 80096d4:	61fb      	str	r3, [r7, #28]
}
 80096d6:	bf00      	nop
 80096d8:	e7fe      	b.n	80096d8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80096da:	f001 f889 	bl	800a7f0 <xTaskGetSchedulerState>
 80096de:	4603      	mov	r3, r0
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d102      	bne.n	80096ea <xQueueReceive+0x6e>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d101      	bne.n	80096ee <xQueueReceive+0x72>
 80096ea:	2301      	movs	r3, #1
 80096ec:	e000      	b.n	80096f0 <xQueueReceive+0x74>
 80096ee:	2300      	movs	r3, #0
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d10a      	bne.n	800970a <xQueueReceive+0x8e>
	__asm volatile
 80096f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f8:	f383 8811 	msr	BASEPRI, r3
 80096fc:	f3bf 8f6f 	isb	sy
 8009700:	f3bf 8f4f 	dsb	sy
 8009704:	61bb      	str	r3, [r7, #24]
}
 8009706:	bf00      	nop
 8009708:	e7fe      	b.n	8009708 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800970a:	f001 fe0b 	bl	800b324 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800970e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009712:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009716:	2b00      	cmp	r3, #0
 8009718:	d01f      	beq.n	800975a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800971a:	68b9      	ldr	r1, [r7, #8]
 800971c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800971e:	f000 f8f7 	bl	8009910 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009724:	1e5a      	subs	r2, r3, #1
 8009726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009728:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800972a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800972c:	691b      	ldr	r3, [r3, #16]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d00f      	beq.n	8009752 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009734:	3310      	adds	r3, #16
 8009736:	4618      	mov	r0, r3
 8009738:	f000 fe36 	bl	800a3a8 <xTaskRemoveFromEventList>
 800973c:	4603      	mov	r3, r0
 800973e:	2b00      	cmp	r3, #0
 8009740:	d007      	beq.n	8009752 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009742:	4b3d      	ldr	r3, [pc, #244]	; (8009838 <xQueueReceive+0x1bc>)
 8009744:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009748:	601a      	str	r2, [r3, #0]
 800974a:	f3bf 8f4f 	dsb	sy
 800974e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009752:	f001 fe17 	bl	800b384 <vPortExitCritical>
				return pdPASS;
 8009756:	2301      	movs	r3, #1
 8009758:	e069      	b.n	800982e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d103      	bne.n	8009768 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009760:	f001 fe10 	bl	800b384 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009764:	2300      	movs	r3, #0
 8009766:	e062      	b.n	800982e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800976a:	2b00      	cmp	r3, #0
 800976c:	d106      	bne.n	800977c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800976e:	f107 0310 	add.w	r3, r7, #16
 8009772:	4618      	mov	r0, r3
 8009774:	f000 fedc 	bl	800a530 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009778:	2301      	movs	r3, #1
 800977a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800977c:	f001 fe02 	bl	800b384 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009780:	f000 fbee 	bl	8009f60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009784:	f001 fdce 	bl	800b324 <vPortEnterCritical>
 8009788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800978a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800978e:	b25b      	sxtb	r3, r3
 8009790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009794:	d103      	bne.n	800979e <xQueueReceive+0x122>
 8009796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009798:	2200      	movs	r2, #0
 800979a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800979e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80097a4:	b25b      	sxtb	r3, r3
 80097a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097aa:	d103      	bne.n	80097b4 <xQueueReceive+0x138>
 80097ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ae:	2200      	movs	r2, #0
 80097b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80097b4:	f001 fde6 	bl	800b384 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80097b8:	1d3a      	adds	r2, r7, #4
 80097ba:	f107 0310 	add.w	r3, r7, #16
 80097be:	4611      	mov	r1, r2
 80097c0:	4618      	mov	r0, r3
 80097c2:	f000 fecb 	bl	800a55c <xTaskCheckForTimeOut>
 80097c6:	4603      	mov	r3, r0
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d123      	bne.n	8009814 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80097cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097ce:	f000 f917 	bl	8009a00 <prvIsQueueEmpty>
 80097d2:	4603      	mov	r3, r0
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d017      	beq.n	8009808 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80097d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097da:	3324      	adds	r3, #36	; 0x24
 80097dc:	687a      	ldr	r2, [r7, #4]
 80097de:	4611      	mov	r1, r2
 80097e0:	4618      	mov	r0, r3
 80097e2:	f000 fd91 	bl	800a308 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80097e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097e8:	f000 f8b8 	bl	800995c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80097ec:	f000 fbc6 	bl	8009f7c <xTaskResumeAll>
 80097f0:	4603      	mov	r3, r0
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d189      	bne.n	800970a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80097f6:	4b10      	ldr	r3, [pc, #64]	; (8009838 <xQueueReceive+0x1bc>)
 80097f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097fc:	601a      	str	r2, [r3, #0]
 80097fe:	f3bf 8f4f 	dsb	sy
 8009802:	f3bf 8f6f 	isb	sy
 8009806:	e780      	b.n	800970a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009808:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800980a:	f000 f8a7 	bl	800995c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800980e:	f000 fbb5 	bl	8009f7c <xTaskResumeAll>
 8009812:	e77a      	b.n	800970a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009814:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009816:	f000 f8a1 	bl	800995c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800981a:	f000 fbaf 	bl	8009f7c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800981e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009820:	f000 f8ee 	bl	8009a00 <prvIsQueueEmpty>
 8009824:	4603      	mov	r3, r0
 8009826:	2b00      	cmp	r3, #0
 8009828:	f43f af6f 	beq.w	800970a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800982c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800982e:	4618      	mov	r0, r3
 8009830:	3730      	adds	r7, #48	; 0x30
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}
 8009836:	bf00      	nop
 8009838:	e000ed04 	.word	0xe000ed04

0800983c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b086      	sub	sp, #24
 8009840:	af00      	add	r7, sp, #0
 8009842:	60f8      	str	r0, [r7, #12]
 8009844:	60b9      	str	r1, [r7, #8]
 8009846:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009848:	2300      	movs	r3, #0
 800984a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009850:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009856:	2b00      	cmp	r3, #0
 8009858:	d10d      	bne.n	8009876 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d14d      	bne.n	80098fe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	685b      	ldr	r3, [r3, #4]
 8009866:	4618      	mov	r0, r3
 8009868:	f000 ffe0 	bl	800a82c <xTaskPriorityDisinherit>
 800986c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	2200      	movs	r2, #0
 8009872:	605a      	str	r2, [r3, #4]
 8009874:	e043      	b.n	80098fe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d119      	bne.n	80098b0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	6898      	ldr	r0, [r3, #8]
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009884:	461a      	mov	r2, r3
 8009886:	68b9      	ldr	r1, [r7, #8]
 8009888:	f002 fe40 	bl	800c50c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	689a      	ldr	r2, [r3, #8]
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009894:	441a      	add	r2, r3
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	689a      	ldr	r2, [r3, #8]
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	685b      	ldr	r3, [r3, #4]
 80098a2:	429a      	cmp	r2, r3
 80098a4:	d32b      	bcc.n	80098fe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681a      	ldr	r2, [r3, #0]
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	609a      	str	r2, [r3, #8]
 80098ae:	e026      	b.n	80098fe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	68d8      	ldr	r0, [r3, #12]
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098b8:	461a      	mov	r2, r3
 80098ba:	68b9      	ldr	r1, [r7, #8]
 80098bc:	f002 fe26 	bl	800c50c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	68da      	ldr	r2, [r3, #12]
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098c8:	425b      	negs	r3, r3
 80098ca:	441a      	add	r2, r3
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	68da      	ldr	r2, [r3, #12]
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	429a      	cmp	r2, r3
 80098da:	d207      	bcs.n	80098ec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	685a      	ldr	r2, [r3, #4]
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098e4:	425b      	negs	r3, r3
 80098e6:	441a      	add	r2, r3
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2b02      	cmp	r3, #2
 80098f0:	d105      	bne.n	80098fe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80098f2:	693b      	ldr	r3, [r7, #16]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d002      	beq.n	80098fe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	3b01      	subs	r3, #1
 80098fc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	1c5a      	adds	r2, r3, #1
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009906:	697b      	ldr	r3, [r7, #20]
}
 8009908:	4618      	mov	r0, r3
 800990a:	3718      	adds	r7, #24
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}

08009910 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b082      	sub	sp, #8
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
 8009918:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800991e:	2b00      	cmp	r3, #0
 8009920:	d018      	beq.n	8009954 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	68da      	ldr	r2, [r3, #12]
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800992a:	441a      	add	r2, r3
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	68da      	ldr	r2, [r3, #12]
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	685b      	ldr	r3, [r3, #4]
 8009938:	429a      	cmp	r2, r3
 800993a:	d303      	bcc.n	8009944 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681a      	ldr	r2, [r3, #0]
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	68d9      	ldr	r1, [r3, #12]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800994c:	461a      	mov	r2, r3
 800994e:	6838      	ldr	r0, [r7, #0]
 8009950:	f002 fddc 	bl	800c50c <memcpy>
	}
}
 8009954:	bf00      	nop
 8009956:	3708      	adds	r7, #8
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}

0800995c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b084      	sub	sp, #16
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009964:	f001 fcde 	bl	800b324 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800996e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009970:	e011      	b.n	8009996 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009976:	2b00      	cmp	r3, #0
 8009978:	d012      	beq.n	80099a0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	3324      	adds	r3, #36	; 0x24
 800997e:	4618      	mov	r0, r3
 8009980:	f000 fd12 	bl	800a3a8 <xTaskRemoveFromEventList>
 8009984:	4603      	mov	r3, r0
 8009986:	2b00      	cmp	r3, #0
 8009988:	d001      	beq.n	800998e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800998a:	f000 fe49 	bl	800a620 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800998e:	7bfb      	ldrb	r3, [r7, #15]
 8009990:	3b01      	subs	r3, #1
 8009992:	b2db      	uxtb	r3, r3
 8009994:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009996:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800999a:	2b00      	cmp	r3, #0
 800999c:	dce9      	bgt.n	8009972 <prvUnlockQueue+0x16>
 800999e:	e000      	b.n	80099a2 <prvUnlockQueue+0x46>
					break;
 80099a0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	22ff      	movs	r2, #255	; 0xff
 80099a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80099aa:	f001 fceb 	bl	800b384 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80099ae:	f001 fcb9 	bl	800b324 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80099b8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80099ba:	e011      	b.n	80099e0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	691b      	ldr	r3, [r3, #16]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d012      	beq.n	80099ea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	3310      	adds	r3, #16
 80099c8:	4618      	mov	r0, r3
 80099ca:	f000 fced 	bl	800a3a8 <xTaskRemoveFromEventList>
 80099ce:	4603      	mov	r3, r0
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d001      	beq.n	80099d8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80099d4:	f000 fe24 	bl	800a620 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80099d8:	7bbb      	ldrb	r3, [r7, #14]
 80099da:	3b01      	subs	r3, #1
 80099dc:	b2db      	uxtb	r3, r3
 80099de:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80099e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	dce9      	bgt.n	80099bc <prvUnlockQueue+0x60>
 80099e8:	e000      	b.n	80099ec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80099ea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	22ff      	movs	r2, #255	; 0xff
 80099f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80099f4:	f001 fcc6 	bl	800b384 <vPortExitCritical>
}
 80099f8:	bf00      	nop
 80099fa:	3710      	adds	r7, #16
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}

08009a00 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b084      	sub	sp, #16
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009a08:	f001 fc8c 	bl	800b324 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d102      	bne.n	8009a1a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009a14:	2301      	movs	r3, #1
 8009a16:	60fb      	str	r3, [r7, #12]
 8009a18:	e001      	b.n	8009a1e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009a1e:	f001 fcb1 	bl	800b384 <vPortExitCritical>

	return xReturn;
 8009a22:	68fb      	ldr	r3, [r7, #12]
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	3710      	adds	r7, #16
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}

08009a2c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b084      	sub	sp, #16
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009a34:	f001 fc76 	bl	800b324 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d102      	bne.n	8009a4a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009a44:	2301      	movs	r3, #1
 8009a46:	60fb      	str	r3, [r7, #12]
 8009a48:	e001      	b.n	8009a4e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009a4e:	f001 fc99 	bl	800b384 <vPortExitCritical>

	return xReturn;
 8009a52:	68fb      	ldr	r3, [r7, #12]
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3710      	adds	r7, #16
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}

08009a5c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b085      	sub	sp, #20
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
 8009a64:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009a66:	2300      	movs	r3, #0
 8009a68:	60fb      	str	r3, [r7, #12]
 8009a6a:	e014      	b.n	8009a96 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009a6c:	4a0f      	ldr	r2, [pc, #60]	; (8009aac <vQueueAddToRegistry+0x50>)
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d10b      	bne.n	8009a90 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009a78:	490c      	ldr	r1, [pc, #48]	; (8009aac <vQueueAddToRegistry+0x50>)
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	683a      	ldr	r2, [r7, #0]
 8009a7e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009a82:	4a0a      	ldr	r2, [pc, #40]	; (8009aac <vQueueAddToRegistry+0x50>)
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	00db      	lsls	r3, r3, #3
 8009a88:	4413      	add	r3, r2
 8009a8a:	687a      	ldr	r2, [r7, #4]
 8009a8c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009a8e:	e006      	b.n	8009a9e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	3301      	adds	r3, #1
 8009a94:	60fb      	str	r3, [r7, #12]
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	2b07      	cmp	r3, #7
 8009a9a:	d9e7      	bls.n	8009a6c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009a9c:	bf00      	nop
 8009a9e:	bf00      	nop
 8009aa0:	3714      	adds	r7, #20
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa8:	4770      	bx	lr
 8009aaa:	bf00      	nop
 8009aac:	20000fa8 	.word	0x20000fa8

08009ab0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b086      	sub	sp, #24
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	60f8      	str	r0, [r7, #12]
 8009ab8:	60b9      	str	r1, [r7, #8]
 8009aba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009ac0:	f001 fc30 	bl	800b324 <vPortEnterCritical>
 8009ac4:	697b      	ldr	r3, [r7, #20]
 8009ac6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009aca:	b25b      	sxtb	r3, r3
 8009acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ad0:	d103      	bne.n	8009ada <vQueueWaitForMessageRestricted+0x2a>
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ae0:	b25b      	sxtb	r3, r3
 8009ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ae6:	d103      	bne.n	8009af0 <vQueueWaitForMessageRestricted+0x40>
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	2200      	movs	r2, #0
 8009aec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009af0:	f001 fc48 	bl	800b384 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d106      	bne.n	8009b0a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	3324      	adds	r3, #36	; 0x24
 8009b00:	687a      	ldr	r2, [r7, #4]
 8009b02:	68b9      	ldr	r1, [r7, #8]
 8009b04:	4618      	mov	r0, r3
 8009b06:	f000 fc23 	bl	800a350 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009b0a:	6978      	ldr	r0, [r7, #20]
 8009b0c:	f7ff ff26 	bl	800995c <prvUnlockQueue>
	}
 8009b10:	bf00      	nop
 8009b12:	3718      	adds	r7, #24
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}

08009b18 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b08e      	sub	sp, #56	; 0x38
 8009b1c:	af04      	add	r7, sp, #16
 8009b1e:	60f8      	str	r0, [r7, #12]
 8009b20:	60b9      	str	r1, [r7, #8]
 8009b22:	607a      	str	r2, [r7, #4]
 8009b24:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d10a      	bne.n	8009b42 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b30:	f383 8811 	msr	BASEPRI, r3
 8009b34:	f3bf 8f6f 	isb	sy
 8009b38:	f3bf 8f4f 	dsb	sy
 8009b3c:	623b      	str	r3, [r7, #32]
}
 8009b3e:	bf00      	nop
 8009b40:	e7fe      	b.n	8009b40 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d10a      	bne.n	8009b5e <xTaskCreateStatic+0x46>
	__asm volatile
 8009b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b4c:	f383 8811 	msr	BASEPRI, r3
 8009b50:	f3bf 8f6f 	isb	sy
 8009b54:	f3bf 8f4f 	dsb	sy
 8009b58:	61fb      	str	r3, [r7, #28]
}
 8009b5a:	bf00      	nop
 8009b5c:	e7fe      	b.n	8009b5c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009b5e:	2358      	movs	r3, #88	; 0x58
 8009b60:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009b62:	693b      	ldr	r3, [r7, #16]
 8009b64:	2b58      	cmp	r3, #88	; 0x58
 8009b66:	d00a      	beq.n	8009b7e <xTaskCreateStatic+0x66>
	__asm volatile
 8009b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b6c:	f383 8811 	msr	BASEPRI, r3
 8009b70:	f3bf 8f6f 	isb	sy
 8009b74:	f3bf 8f4f 	dsb	sy
 8009b78:	61bb      	str	r3, [r7, #24]
}
 8009b7a:	bf00      	nop
 8009b7c:	e7fe      	b.n	8009b7c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d01e      	beq.n	8009bc2 <xTaskCreateStatic+0xaa>
 8009b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d01b      	beq.n	8009bc2 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b8c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b92:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b96:	2202      	movs	r2, #2
 8009b98:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	9303      	str	r3, [sp, #12]
 8009ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba2:	9302      	str	r3, [sp, #8]
 8009ba4:	f107 0314 	add.w	r3, r7, #20
 8009ba8:	9301      	str	r3, [sp, #4]
 8009baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bac:	9300      	str	r3, [sp, #0]
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	687a      	ldr	r2, [r7, #4]
 8009bb2:	68b9      	ldr	r1, [r7, #8]
 8009bb4:	68f8      	ldr	r0, [r7, #12]
 8009bb6:	f000 f850 	bl	8009c5a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009bba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009bbc:	f000 f8cc 	bl	8009d58 <prvAddNewTaskToReadyList>
 8009bc0:	e001      	b.n	8009bc6 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009bc6:	697b      	ldr	r3, [r7, #20]
	}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3728      	adds	r7, #40	; 0x28
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}

08009bd0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b08c      	sub	sp, #48	; 0x30
 8009bd4:	af04      	add	r7, sp, #16
 8009bd6:	60f8      	str	r0, [r7, #12]
 8009bd8:	60b9      	str	r1, [r7, #8]
 8009bda:	603b      	str	r3, [r7, #0]
 8009bdc:	4613      	mov	r3, r2
 8009bde:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009be0:	88fb      	ldrh	r3, [r7, #6]
 8009be2:	009b      	lsls	r3, r3, #2
 8009be4:	4618      	mov	r0, r3
 8009be6:	f001 fcbf 	bl	800b568 <pvPortMalloc>
 8009bea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d00e      	beq.n	8009c10 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8009bf2:	2058      	movs	r0, #88	; 0x58
 8009bf4:	f001 fcb8 	bl	800b568 <pvPortMalloc>
 8009bf8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009bfa:	69fb      	ldr	r3, [r7, #28]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d003      	beq.n	8009c08 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009c00:	69fb      	ldr	r3, [r7, #28]
 8009c02:	697a      	ldr	r2, [r7, #20]
 8009c04:	631a      	str	r2, [r3, #48]	; 0x30
 8009c06:	e005      	b.n	8009c14 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009c08:	6978      	ldr	r0, [r7, #20]
 8009c0a:	f001 fd71 	bl	800b6f0 <vPortFree>
 8009c0e:	e001      	b.n	8009c14 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009c10:	2300      	movs	r3, #0
 8009c12:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009c14:	69fb      	ldr	r3, [r7, #28]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d017      	beq.n	8009c4a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009c1a:	69fb      	ldr	r3, [r7, #28]
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009c22:	88fa      	ldrh	r2, [r7, #6]
 8009c24:	2300      	movs	r3, #0
 8009c26:	9303      	str	r3, [sp, #12]
 8009c28:	69fb      	ldr	r3, [r7, #28]
 8009c2a:	9302      	str	r3, [sp, #8]
 8009c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c2e:	9301      	str	r3, [sp, #4]
 8009c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c32:	9300      	str	r3, [sp, #0]
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	68b9      	ldr	r1, [r7, #8]
 8009c38:	68f8      	ldr	r0, [r7, #12]
 8009c3a:	f000 f80e 	bl	8009c5a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009c3e:	69f8      	ldr	r0, [r7, #28]
 8009c40:	f000 f88a 	bl	8009d58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009c44:	2301      	movs	r3, #1
 8009c46:	61bb      	str	r3, [r7, #24]
 8009c48:	e002      	b.n	8009c50 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8009c4e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009c50:	69bb      	ldr	r3, [r7, #24]
	}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3720      	adds	r7, #32
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}

08009c5a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009c5a:	b580      	push	{r7, lr}
 8009c5c:	b088      	sub	sp, #32
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	60f8      	str	r0, [r7, #12]
 8009c62:	60b9      	str	r1, [r7, #8]
 8009c64:	607a      	str	r2, [r7, #4]
 8009c66:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8009c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009c72:	3b01      	subs	r3, #1
 8009c74:	009b      	lsls	r3, r3, #2
 8009c76:	4413      	add	r3, r2
 8009c78:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8009c7a:	69bb      	ldr	r3, [r7, #24]
 8009c7c:	f023 0307 	bic.w	r3, r3, #7
 8009c80:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009c82:	69bb      	ldr	r3, [r7, #24]
 8009c84:	f003 0307 	and.w	r3, r3, #7
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d00a      	beq.n	8009ca2 <prvInitialiseNewTask+0x48>
	__asm volatile
 8009c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c90:	f383 8811 	msr	BASEPRI, r3
 8009c94:	f3bf 8f6f 	isb	sy
 8009c98:	f3bf 8f4f 	dsb	sy
 8009c9c:	617b      	str	r3, [r7, #20]
}
 8009c9e:	bf00      	nop
 8009ca0:	e7fe      	b.n	8009ca0 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	61fb      	str	r3, [r7, #28]
 8009ca6:	e012      	b.n	8009cce <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009ca8:	68ba      	ldr	r2, [r7, #8]
 8009caa:	69fb      	ldr	r3, [r7, #28]
 8009cac:	4413      	add	r3, r2
 8009cae:	7819      	ldrb	r1, [r3, #0]
 8009cb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cb2:	69fb      	ldr	r3, [r7, #28]
 8009cb4:	4413      	add	r3, r2
 8009cb6:	3334      	adds	r3, #52	; 0x34
 8009cb8:	460a      	mov	r2, r1
 8009cba:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8009cbc:	68ba      	ldr	r2, [r7, #8]
 8009cbe:	69fb      	ldr	r3, [r7, #28]
 8009cc0:	4413      	add	r3, r2
 8009cc2:	781b      	ldrb	r3, [r3, #0]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d006      	beq.n	8009cd6 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009cc8:	69fb      	ldr	r3, [r7, #28]
 8009cca:	3301      	adds	r3, #1
 8009ccc:	61fb      	str	r3, [r7, #28]
 8009cce:	69fb      	ldr	r3, [r7, #28]
 8009cd0:	2b11      	cmp	r3, #17
 8009cd2:	d9e9      	bls.n	8009ca8 <prvInitialiseNewTask+0x4e>
 8009cd4:	e000      	b.n	8009cd8 <prvInitialiseNewTask+0x7e>
		{
			break;
 8009cd6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cda:	2200      	movs	r2, #0
 8009cdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ce2:	2b06      	cmp	r3, #6
 8009ce4:	d901      	bls.n	8009cea <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009ce6:	2306      	movs	r3, #6
 8009ce8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009cee:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009cf4:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8009cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cfe:	3304      	adds	r3, #4
 8009d00:	4618      	mov	r0, r3
 8009d02:	f7ff f992 	bl	800902a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d08:	3318      	adds	r3, #24
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f7ff f98d 	bl	800902a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d14:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d18:	f1c3 0207 	rsb	r2, r3, #7
 8009d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d1e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d24:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d28:	2200      	movs	r2, #0
 8009d2a:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d2e:	2200      	movs	r2, #0
 8009d30:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009d34:	683a      	ldr	r2, [r7, #0]
 8009d36:	68f9      	ldr	r1, [r7, #12]
 8009d38:	69b8      	ldr	r0, [r7, #24]
 8009d3a:	f001 f9c9 	bl	800b0d0 <pxPortInitialiseStack>
 8009d3e:	4602      	mov	r2, r0
 8009d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d42:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8009d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d002      	beq.n	8009d50 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d4e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009d50:	bf00      	nop
 8009d52:	3720      	adds	r7, #32
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}

08009d58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b082      	sub	sp, #8
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009d60:	f001 fae0 	bl	800b324 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009d64:	4b2a      	ldr	r3, [pc, #168]	; (8009e10 <prvAddNewTaskToReadyList+0xb8>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	3301      	adds	r3, #1
 8009d6a:	4a29      	ldr	r2, [pc, #164]	; (8009e10 <prvAddNewTaskToReadyList+0xb8>)
 8009d6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009d6e:	4b29      	ldr	r3, [pc, #164]	; (8009e14 <prvAddNewTaskToReadyList+0xbc>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d109      	bne.n	8009d8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009d76:	4a27      	ldr	r2, [pc, #156]	; (8009e14 <prvAddNewTaskToReadyList+0xbc>)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009d7c:	4b24      	ldr	r3, [pc, #144]	; (8009e10 <prvAddNewTaskToReadyList+0xb8>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	2b01      	cmp	r3, #1
 8009d82:	d110      	bne.n	8009da6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009d84:	f000 fc70 	bl	800a668 <prvInitialiseTaskLists>
 8009d88:	e00d      	b.n	8009da6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009d8a:	4b23      	ldr	r3, [pc, #140]	; (8009e18 <prvAddNewTaskToReadyList+0xc0>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d109      	bne.n	8009da6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009d92:	4b20      	ldr	r3, [pc, #128]	; (8009e14 <prvAddNewTaskToReadyList+0xbc>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	d802      	bhi.n	8009da6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009da0:	4a1c      	ldr	r2, [pc, #112]	; (8009e14 <prvAddNewTaskToReadyList+0xbc>)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009da6:	4b1d      	ldr	r3, [pc, #116]	; (8009e1c <prvAddNewTaskToReadyList+0xc4>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	3301      	adds	r3, #1
 8009dac:	4a1b      	ldr	r2, [pc, #108]	; (8009e1c <prvAddNewTaskToReadyList+0xc4>)
 8009dae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009db4:	2201      	movs	r2, #1
 8009db6:	409a      	lsls	r2, r3
 8009db8:	4b19      	ldr	r3, [pc, #100]	; (8009e20 <prvAddNewTaskToReadyList+0xc8>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	4313      	orrs	r3, r2
 8009dbe:	4a18      	ldr	r2, [pc, #96]	; (8009e20 <prvAddNewTaskToReadyList+0xc8>)
 8009dc0:	6013      	str	r3, [r2, #0]
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dc6:	4613      	mov	r3, r2
 8009dc8:	009b      	lsls	r3, r3, #2
 8009dca:	4413      	add	r3, r2
 8009dcc:	009b      	lsls	r3, r3, #2
 8009dce:	4a15      	ldr	r2, [pc, #84]	; (8009e24 <prvAddNewTaskToReadyList+0xcc>)
 8009dd0:	441a      	add	r2, r3
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	3304      	adds	r3, #4
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	4610      	mov	r0, r2
 8009dda:	f7ff f933 	bl	8009044 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009dde:	f001 fad1 	bl	800b384 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009de2:	4b0d      	ldr	r3, [pc, #52]	; (8009e18 <prvAddNewTaskToReadyList+0xc0>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d00e      	beq.n	8009e08 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009dea:	4b0a      	ldr	r3, [pc, #40]	; (8009e14 <prvAddNewTaskToReadyList+0xbc>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009df4:	429a      	cmp	r2, r3
 8009df6:	d207      	bcs.n	8009e08 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009df8:	4b0b      	ldr	r3, [pc, #44]	; (8009e28 <prvAddNewTaskToReadyList+0xd0>)
 8009dfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dfe:	601a      	str	r2, [r3, #0]
 8009e00:	f3bf 8f4f 	dsb	sy
 8009e04:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e08:	bf00      	nop
 8009e0a:	3708      	adds	r7, #8
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}
 8009e10:	200010e8 	.word	0x200010e8
 8009e14:	20000fe8 	.word	0x20000fe8
 8009e18:	200010f4 	.word	0x200010f4
 8009e1c:	20001104 	.word	0x20001104
 8009e20:	200010f0 	.word	0x200010f0
 8009e24:	20000fec 	.word	0x20000fec
 8009e28:	e000ed04 	.word	0xe000ed04

08009e2c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b084      	sub	sp, #16
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009e34:	2300      	movs	r3, #0
 8009e36:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d017      	beq.n	8009e6e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009e3e:	4b13      	ldr	r3, [pc, #76]	; (8009e8c <vTaskDelay+0x60>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d00a      	beq.n	8009e5c <vTaskDelay+0x30>
	__asm volatile
 8009e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e4a:	f383 8811 	msr	BASEPRI, r3
 8009e4e:	f3bf 8f6f 	isb	sy
 8009e52:	f3bf 8f4f 	dsb	sy
 8009e56:	60bb      	str	r3, [r7, #8]
}
 8009e58:	bf00      	nop
 8009e5a:	e7fe      	b.n	8009e5a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009e5c:	f000 f880 	bl	8009f60 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009e60:	2100      	movs	r1, #0
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f000 fd68 	bl	800a938 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009e68:	f000 f888 	bl	8009f7c <xTaskResumeAll>
 8009e6c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d107      	bne.n	8009e84 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009e74:	4b06      	ldr	r3, [pc, #24]	; (8009e90 <vTaskDelay+0x64>)
 8009e76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e7a:	601a      	str	r2, [r3, #0]
 8009e7c:	f3bf 8f4f 	dsb	sy
 8009e80:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009e84:	bf00      	nop
 8009e86:	3710      	adds	r7, #16
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}
 8009e8c:	20001110 	.word	0x20001110
 8009e90:	e000ed04 	.word	0xe000ed04

08009e94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b08a      	sub	sp, #40	; 0x28
 8009e98:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009ea2:	463a      	mov	r2, r7
 8009ea4:	1d39      	adds	r1, r7, #4
 8009ea6:	f107 0308 	add.w	r3, r7, #8
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f7f7 fa1c 	bl	80012e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009eb0:	6839      	ldr	r1, [r7, #0]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	68ba      	ldr	r2, [r7, #8]
 8009eb6:	9202      	str	r2, [sp, #8]
 8009eb8:	9301      	str	r3, [sp, #4]
 8009eba:	2300      	movs	r3, #0
 8009ebc:	9300      	str	r3, [sp, #0]
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	460a      	mov	r2, r1
 8009ec2:	4921      	ldr	r1, [pc, #132]	; (8009f48 <vTaskStartScheduler+0xb4>)
 8009ec4:	4821      	ldr	r0, [pc, #132]	; (8009f4c <vTaskStartScheduler+0xb8>)
 8009ec6:	f7ff fe27 	bl	8009b18 <xTaskCreateStatic>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	4a20      	ldr	r2, [pc, #128]	; (8009f50 <vTaskStartScheduler+0xbc>)
 8009ece:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009ed0:	4b1f      	ldr	r3, [pc, #124]	; (8009f50 <vTaskStartScheduler+0xbc>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d002      	beq.n	8009ede <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009ed8:	2301      	movs	r3, #1
 8009eda:	617b      	str	r3, [r7, #20]
 8009edc:	e001      	b.n	8009ee2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	2b01      	cmp	r3, #1
 8009ee6:	d102      	bne.n	8009eee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009ee8:	f000 fd8c 	bl	800aa04 <xTimerCreateTimerTask>
 8009eec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	2b01      	cmp	r3, #1
 8009ef2:	d116      	bne.n	8009f22 <vTaskStartScheduler+0x8e>
	__asm volatile
 8009ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef8:	f383 8811 	msr	BASEPRI, r3
 8009efc:	f3bf 8f6f 	isb	sy
 8009f00:	f3bf 8f4f 	dsb	sy
 8009f04:	613b      	str	r3, [r7, #16]
}
 8009f06:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009f08:	4b12      	ldr	r3, [pc, #72]	; (8009f54 <vTaskStartScheduler+0xc0>)
 8009f0a:	f04f 32ff 	mov.w	r2, #4294967295
 8009f0e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009f10:	4b11      	ldr	r3, [pc, #68]	; (8009f58 <vTaskStartScheduler+0xc4>)
 8009f12:	2201      	movs	r2, #1
 8009f14:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8009f16:	4b11      	ldr	r3, [pc, #68]	; (8009f5c <vTaskStartScheduler+0xc8>)
 8009f18:	2200      	movs	r2, #0
 8009f1a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009f1c:	f001 f960 	bl	800b1e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009f20:	e00e      	b.n	8009f40 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f28:	d10a      	bne.n	8009f40 <vTaskStartScheduler+0xac>
	__asm volatile
 8009f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f2e:	f383 8811 	msr	BASEPRI, r3
 8009f32:	f3bf 8f6f 	isb	sy
 8009f36:	f3bf 8f4f 	dsb	sy
 8009f3a:	60fb      	str	r3, [r7, #12]
}
 8009f3c:	bf00      	nop
 8009f3e:	e7fe      	b.n	8009f3e <vTaskStartScheduler+0xaa>
}
 8009f40:	bf00      	nop
 8009f42:	3718      	adds	r7, #24
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}
 8009f48:	0800f8fc 	.word	0x0800f8fc
 8009f4c:	0800a639 	.word	0x0800a639
 8009f50:	2000110c 	.word	0x2000110c
 8009f54:	20001108 	.word	0x20001108
 8009f58:	200010f4 	.word	0x200010f4
 8009f5c:	200010ec 	.word	0x200010ec

08009f60 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009f60:	b480      	push	{r7}
 8009f62:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009f64:	4b04      	ldr	r3, [pc, #16]	; (8009f78 <vTaskSuspendAll+0x18>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	3301      	adds	r3, #1
 8009f6a:	4a03      	ldr	r2, [pc, #12]	; (8009f78 <vTaskSuspendAll+0x18>)
 8009f6c:	6013      	str	r3, [r2, #0]
}
 8009f6e:	bf00      	nop
 8009f70:	46bd      	mov	sp, r7
 8009f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f76:	4770      	bx	lr
 8009f78:	20001110 	.word	0x20001110

08009f7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b084      	sub	sp, #16
 8009f80:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009f82:	2300      	movs	r3, #0
 8009f84:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009f86:	2300      	movs	r3, #0
 8009f88:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009f8a:	4b41      	ldr	r3, [pc, #260]	; (800a090 <xTaskResumeAll+0x114>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d10a      	bne.n	8009fa8 <xTaskResumeAll+0x2c>
	__asm volatile
 8009f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f96:	f383 8811 	msr	BASEPRI, r3
 8009f9a:	f3bf 8f6f 	isb	sy
 8009f9e:	f3bf 8f4f 	dsb	sy
 8009fa2:	603b      	str	r3, [r7, #0]
}
 8009fa4:	bf00      	nop
 8009fa6:	e7fe      	b.n	8009fa6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009fa8:	f001 f9bc 	bl	800b324 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009fac:	4b38      	ldr	r3, [pc, #224]	; (800a090 <xTaskResumeAll+0x114>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	3b01      	subs	r3, #1
 8009fb2:	4a37      	ldr	r2, [pc, #220]	; (800a090 <xTaskResumeAll+0x114>)
 8009fb4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009fb6:	4b36      	ldr	r3, [pc, #216]	; (800a090 <xTaskResumeAll+0x114>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d161      	bne.n	800a082 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009fbe:	4b35      	ldr	r3, [pc, #212]	; (800a094 <xTaskResumeAll+0x118>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d05d      	beq.n	800a082 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009fc6:	e02e      	b.n	800a026 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009fc8:	4b33      	ldr	r3, [pc, #204]	; (800a098 <xTaskResumeAll+0x11c>)
 8009fca:	68db      	ldr	r3, [r3, #12]
 8009fcc:	68db      	ldr	r3, [r3, #12]
 8009fce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	3318      	adds	r3, #24
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	f7ff f892 	bl	80090fe <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	3304      	adds	r3, #4
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f7ff f88d 	bl	80090fe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fe8:	2201      	movs	r2, #1
 8009fea:	409a      	lsls	r2, r3
 8009fec:	4b2b      	ldr	r3, [pc, #172]	; (800a09c <xTaskResumeAll+0x120>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	4313      	orrs	r3, r2
 8009ff2:	4a2a      	ldr	r2, [pc, #168]	; (800a09c <xTaskResumeAll+0x120>)
 8009ff4:	6013      	str	r3, [r2, #0]
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ffa:	4613      	mov	r3, r2
 8009ffc:	009b      	lsls	r3, r3, #2
 8009ffe:	4413      	add	r3, r2
 800a000:	009b      	lsls	r3, r3, #2
 800a002:	4a27      	ldr	r2, [pc, #156]	; (800a0a0 <xTaskResumeAll+0x124>)
 800a004:	441a      	add	r2, r3
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	3304      	adds	r3, #4
 800a00a:	4619      	mov	r1, r3
 800a00c:	4610      	mov	r0, r2
 800a00e:	f7ff f819 	bl	8009044 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a016:	4b23      	ldr	r3, [pc, #140]	; (800a0a4 <xTaskResumeAll+0x128>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a01c:	429a      	cmp	r2, r3
 800a01e:	d302      	bcc.n	800a026 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a020:	4b21      	ldr	r3, [pc, #132]	; (800a0a8 <xTaskResumeAll+0x12c>)
 800a022:	2201      	movs	r2, #1
 800a024:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a026:	4b1c      	ldr	r3, [pc, #112]	; (800a098 <xTaskResumeAll+0x11c>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d1cc      	bne.n	8009fc8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d001      	beq.n	800a038 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a034:	f000 fbb6 	bl	800a7a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a038:	4b1c      	ldr	r3, [pc, #112]	; (800a0ac <xTaskResumeAll+0x130>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d010      	beq.n	800a066 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a044:	f000 f846 	bl	800a0d4 <xTaskIncrementTick>
 800a048:	4603      	mov	r3, r0
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d002      	beq.n	800a054 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a04e:	4b16      	ldr	r3, [pc, #88]	; (800a0a8 <xTaskResumeAll+0x12c>)
 800a050:	2201      	movs	r2, #1
 800a052:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	3b01      	subs	r3, #1
 800a058:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d1f1      	bne.n	800a044 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800a060:	4b12      	ldr	r3, [pc, #72]	; (800a0ac <xTaskResumeAll+0x130>)
 800a062:	2200      	movs	r2, #0
 800a064:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a066:	4b10      	ldr	r3, [pc, #64]	; (800a0a8 <xTaskResumeAll+0x12c>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d009      	beq.n	800a082 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a06e:	2301      	movs	r3, #1
 800a070:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a072:	4b0f      	ldr	r3, [pc, #60]	; (800a0b0 <xTaskResumeAll+0x134>)
 800a074:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a078:	601a      	str	r2, [r3, #0]
 800a07a:	f3bf 8f4f 	dsb	sy
 800a07e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a082:	f001 f97f 	bl	800b384 <vPortExitCritical>

	return xAlreadyYielded;
 800a086:	68bb      	ldr	r3, [r7, #8]
}
 800a088:	4618      	mov	r0, r3
 800a08a:	3710      	adds	r7, #16
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}
 800a090:	20001110 	.word	0x20001110
 800a094:	200010e8 	.word	0x200010e8
 800a098:	200010a8 	.word	0x200010a8
 800a09c:	200010f0 	.word	0x200010f0
 800a0a0:	20000fec 	.word	0x20000fec
 800a0a4:	20000fe8 	.word	0x20000fe8
 800a0a8:	200010fc 	.word	0x200010fc
 800a0ac:	200010f8 	.word	0x200010f8
 800a0b0:	e000ed04 	.word	0xe000ed04

0800a0b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b083      	sub	sp, #12
 800a0b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a0ba:	4b05      	ldr	r3, [pc, #20]	; (800a0d0 <xTaskGetTickCount+0x1c>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a0c0:	687b      	ldr	r3, [r7, #4]
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	370c      	adds	r7, #12
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0cc:	4770      	bx	lr
 800a0ce:	bf00      	nop
 800a0d0:	200010ec 	.word	0x200010ec

0800a0d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b086      	sub	sp, #24
 800a0d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a0de:	4b51      	ldr	r3, [pc, #324]	; (800a224 <xTaskIncrementTick+0x150>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	f040 808d 	bne.w	800a202 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a0e8:	4b4f      	ldr	r3, [pc, #316]	; (800a228 <xTaskIncrementTick+0x154>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	3301      	adds	r3, #1
 800a0ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a0f0:	4a4d      	ldr	r2, [pc, #308]	; (800a228 <xTaskIncrementTick+0x154>)
 800a0f2:	693b      	ldr	r3, [r7, #16]
 800a0f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d120      	bne.n	800a13e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a0fc:	4b4b      	ldr	r3, [pc, #300]	; (800a22c <xTaskIncrementTick+0x158>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d00a      	beq.n	800a11c <xTaskIncrementTick+0x48>
	__asm volatile
 800a106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a10a:	f383 8811 	msr	BASEPRI, r3
 800a10e:	f3bf 8f6f 	isb	sy
 800a112:	f3bf 8f4f 	dsb	sy
 800a116:	603b      	str	r3, [r7, #0]
}
 800a118:	bf00      	nop
 800a11a:	e7fe      	b.n	800a11a <xTaskIncrementTick+0x46>
 800a11c:	4b43      	ldr	r3, [pc, #268]	; (800a22c <xTaskIncrementTick+0x158>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	60fb      	str	r3, [r7, #12]
 800a122:	4b43      	ldr	r3, [pc, #268]	; (800a230 <xTaskIncrementTick+0x15c>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	4a41      	ldr	r2, [pc, #260]	; (800a22c <xTaskIncrementTick+0x158>)
 800a128:	6013      	str	r3, [r2, #0]
 800a12a:	4a41      	ldr	r2, [pc, #260]	; (800a230 <xTaskIncrementTick+0x15c>)
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	6013      	str	r3, [r2, #0]
 800a130:	4b40      	ldr	r3, [pc, #256]	; (800a234 <xTaskIncrementTick+0x160>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	3301      	adds	r3, #1
 800a136:	4a3f      	ldr	r2, [pc, #252]	; (800a234 <xTaskIncrementTick+0x160>)
 800a138:	6013      	str	r3, [r2, #0]
 800a13a:	f000 fb33 	bl	800a7a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a13e:	4b3e      	ldr	r3, [pc, #248]	; (800a238 <xTaskIncrementTick+0x164>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	693a      	ldr	r2, [r7, #16]
 800a144:	429a      	cmp	r2, r3
 800a146:	d34d      	bcc.n	800a1e4 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a148:	4b38      	ldr	r3, [pc, #224]	; (800a22c <xTaskIncrementTick+0x158>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d101      	bne.n	800a156 <xTaskIncrementTick+0x82>
 800a152:	2301      	movs	r3, #1
 800a154:	e000      	b.n	800a158 <xTaskIncrementTick+0x84>
 800a156:	2300      	movs	r3, #0
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d004      	beq.n	800a166 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a15c:	4b36      	ldr	r3, [pc, #216]	; (800a238 <xTaskIncrementTick+0x164>)
 800a15e:	f04f 32ff 	mov.w	r2, #4294967295
 800a162:	601a      	str	r2, [r3, #0]
					break;
 800a164:	e03e      	b.n	800a1e4 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a166:	4b31      	ldr	r3, [pc, #196]	; (800a22c <xTaskIncrementTick+0x158>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	68db      	ldr	r3, [r3, #12]
 800a16c:	68db      	ldr	r3, [r3, #12]
 800a16e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	685b      	ldr	r3, [r3, #4]
 800a174:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a176:	693a      	ldr	r2, [r7, #16]
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	429a      	cmp	r2, r3
 800a17c:	d203      	bcs.n	800a186 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a17e:	4a2e      	ldr	r2, [pc, #184]	; (800a238 <xTaskIncrementTick+0x164>)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6013      	str	r3, [r2, #0]
						break;
 800a184:	e02e      	b.n	800a1e4 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	3304      	adds	r3, #4
 800a18a:	4618      	mov	r0, r3
 800a18c:	f7fe ffb7 	bl	80090fe <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a194:	2b00      	cmp	r3, #0
 800a196:	d004      	beq.n	800a1a2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	3318      	adds	r3, #24
 800a19c:	4618      	mov	r0, r3
 800a19e:	f7fe ffae 	bl	80090fe <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	409a      	lsls	r2, r3
 800a1aa:	4b24      	ldr	r3, [pc, #144]	; (800a23c <xTaskIncrementTick+0x168>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	4313      	orrs	r3, r2
 800a1b0:	4a22      	ldr	r2, [pc, #136]	; (800a23c <xTaskIncrementTick+0x168>)
 800a1b2:	6013      	str	r3, [r2, #0]
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1b8:	4613      	mov	r3, r2
 800a1ba:	009b      	lsls	r3, r3, #2
 800a1bc:	4413      	add	r3, r2
 800a1be:	009b      	lsls	r3, r3, #2
 800a1c0:	4a1f      	ldr	r2, [pc, #124]	; (800a240 <xTaskIncrementTick+0x16c>)
 800a1c2:	441a      	add	r2, r3
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	3304      	adds	r3, #4
 800a1c8:	4619      	mov	r1, r3
 800a1ca:	4610      	mov	r0, r2
 800a1cc:	f7fe ff3a 	bl	8009044 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1d4:	4b1b      	ldr	r3, [pc, #108]	; (800a244 <xTaskIncrementTick+0x170>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1da:	429a      	cmp	r2, r3
 800a1dc:	d3b4      	bcc.n	800a148 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a1de:	2301      	movs	r3, #1
 800a1e0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a1e2:	e7b1      	b.n	800a148 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a1e4:	4b17      	ldr	r3, [pc, #92]	; (800a244 <xTaskIncrementTick+0x170>)
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1ea:	4915      	ldr	r1, [pc, #84]	; (800a240 <xTaskIncrementTick+0x16c>)
 800a1ec:	4613      	mov	r3, r2
 800a1ee:	009b      	lsls	r3, r3, #2
 800a1f0:	4413      	add	r3, r2
 800a1f2:	009b      	lsls	r3, r3, #2
 800a1f4:	440b      	add	r3, r1
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	2b01      	cmp	r3, #1
 800a1fa:	d907      	bls.n	800a20c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	617b      	str	r3, [r7, #20]
 800a200:	e004      	b.n	800a20c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a202:	4b11      	ldr	r3, [pc, #68]	; (800a248 <xTaskIncrementTick+0x174>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	3301      	adds	r3, #1
 800a208:	4a0f      	ldr	r2, [pc, #60]	; (800a248 <xTaskIncrementTick+0x174>)
 800a20a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a20c:	4b0f      	ldr	r3, [pc, #60]	; (800a24c <xTaskIncrementTick+0x178>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d001      	beq.n	800a218 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800a214:	2301      	movs	r3, #1
 800a216:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a218:	697b      	ldr	r3, [r7, #20]
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3718      	adds	r7, #24
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}
 800a222:	bf00      	nop
 800a224:	20001110 	.word	0x20001110
 800a228:	200010ec 	.word	0x200010ec
 800a22c:	200010a0 	.word	0x200010a0
 800a230:	200010a4 	.word	0x200010a4
 800a234:	20001100 	.word	0x20001100
 800a238:	20001108 	.word	0x20001108
 800a23c:	200010f0 	.word	0x200010f0
 800a240:	20000fec 	.word	0x20000fec
 800a244:	20000fe8 	.word	0x20000fe8
 800a248:	200010f8 	.word	0x200010f8
 800a24c:	200010fc 	.word	0x200010fc

0800a250 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a250:	b480      	push	{r7}
 800a252:	b087      	sub	sp, #28
 800a254:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a256:	4b27      	ldr	r3, [pc, #156]	; (800a2f4 <vTaskSwitchContext+0xa4>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d003      	beq.n	800a266 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a25e:	4b26      	ldr	r3, [pc, #152]	; (800a2f8 <vTaskSwitchContext+0xa8>)
 800a260:	2201      	movs	r2, #1
 800a262:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a264:	e03f      	b.n	800a2e6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800a266:	4b24      	ldr	r3, [pc, #144]	; (800a2f8 <vTaskSwitchContext+0xa8>)
 800a268:	2200      	movs	r2, #0
 800a26a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800a26c:	4b23      	ldr	r3, [pc, #140]	; (800a2fc <vTaskSwitchContext+0xac>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	fab3 f383 	clz	r3, r3
 800a278:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a27a:	7afb      	ldrb	r3, [r7, #11]
 800a27c:	f1c3 031f 	rsb	r3, r3, #31
 800a280:	617b      	str	r3, [r7, #20]
 800a282:	491f      	ldr	r1, [pc, #124]	; (800a300 <vTaskSwitchContext+0xb0>)
 800a284:	697a      	ldr	r2, [r7, #20]
 800a286:	4613      	mov	r3, r2
 800a288:	009b      	lsls	r3, r3, #2
 800a28a:	4413      	add	r3, r2
 800a28c:	009b      	lsls	r3, r3, #2
 800a28e:	440b      	add	r3, r1
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d10a      	bne.n	800a2ac <vTaskSwitchContext+0x5c>
	__asm volatile
 800a296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a29a:	f383 8811 	msr	BASEPRI, r3
 800a29e:	f3bf 8f6f 	isb	sy
 800a2a2:	f3bf 8f4f 	dsb	sy
 800a2a6:	607b      	str	r3, [r7, #4]
}
 800a2a8:	bf00      	nop
 800a2aa:	e7fe      	b.n	800a2aa <vTaskSwitchContext+0x5a>
 800a2ac:	697a      	ldr	r2, [r7, #20]
 800a2ae:	4613      	mov	r3, r2
 800a2b0:	009b      	lsls	r3, r3, #2
 800a2b2:	4413      	add	r3, r2
 800a2b4:	009b      	lsls	r3, r3, #2
 800a2b6:	4a12      	ldr	r2, [pc, #72]	; (800a300 <vTaskSwitchContext+0xb0>)
 800a2b8:	4413      	add	r3, r2
 800a2ba:	613b      	str	r3, [r7, #16]
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	685b      	ldr	r3, [r3, #4]
 800a2c0:	685a      	ldr	r2, [r3, #4]
 800a2c2:	693b      	ldr	r3, [r7, #16]
 800a2c4:	605a      	str	r2, [r3, #4]
 800a2c6:	693b      	ldr	r3, [r7, #16]
 800a2c8:	685a      	ldr	r2, [r3, #4]
 800a2ca:	693b      	ldr	r3, [r7, #16]
 800a2cc:	3308      	adds	r3, #8
 800a2ce:	429a      	cmp	r2, r3
 800a2d0:	d104      	bne.n	800a2dc <vTaskSwitchContext+0x8c>
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	685b      	ldr	r3, [r3, #4]
 800a2d6:	685a      	ldr	r2, [r3, #4]
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	605a      	str	r2, [r3, #4]
 800a2dc:	693b      	ldr	r3, [r7, #16]
 800a2de:	685b      	ldr	r3, [r3, #4]
 800a2e0:	68db      	ldr	r3, [r3, #12]
 800a2e2:	4a08      	ldr	r2, [pc, #32]	; (800a304 <vTaskSwitchContext+0xb4>)
 800a2e4:	6013      	str	r3, [r2, #0]
}
 800a2e6:	bf00      	nop
 800a2e8:	371c      	adds	r7, #28
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f0:	4770      	bx	lr
 800a2f2:	bf00      	nop
 800a2f4:	20001110 	.word	0x20001110
 800a2f8:	200010fc 	.word	0x200010fc
 800a2fc:	200010f0 	.word	0x200010f0
 800a300:	20000fec 	.word	0x20000fec
 800a304:	20000fe8 	.word	0x20000fe8

0800a308 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b084      	sub	sp, #16
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
 800a310:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d10a      	bne.n	800a32e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a31c:	f383 8811 	msr	BASEPRI, r3
 800a320:	f3bf 8f6f 	isb	sy
 800a324:	f3bf 8f4f 	dsb	sy
 800a328:	60fb      	str	r3, [r7, #12]
}
 800a32a:	bf00      	nop
 800a32c:	e7fe      	b.n	800a32c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a32e:	4b07      	ldr	r3, [pc, #28]	; (800a34c <vTaskPlaceOnEventList+0x44>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	3318      	adds	r3, #24
 800a334:	4619      	mov	r1, r3
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f7fe fea8 	bl	800908c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a33c:	2101      	movs	r1, #1
 800a33e:	6838      	ldr	r0, [r7, #0]
 800a340:	f000 fafa 	bl	800a938 <prvAddCurrentTaskToDelayedList>
}
 800a344:	bf00      	nop
 800a346:	3710      	adds	r7, #16
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}
 800a34c:	20000fe8 	.word	0x20000fe8

0800a350 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a350:	b580      	push	{r7, lr}
 800a352:	b086      	sub	sp, #24
 800a354:	af00      	add	r7, sp, #0
 800a356:	60f8      	str	r0, [r7, #12]
 800a358:	60b9      	str	r1, [r7, #8]
 800a35a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d10a      	bne.n	800a378 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a362:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a366:	f383 8811 	msr	BASEPRI, r3
 800a36a:	f3bf 8f6f 	isb	sy
 800a36e:	f3bf 8f4f 	dsb	sy
 800a372:	617b      	str	r3, [r7, #20]
}
 800a374:	bf00      	nop
 800a376:	e7fe      	b.n	800a376 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a378:	4b0a      	ldr	r3, [pc, #40]	; (800a3a4 <vTaskPlaceOnEventListRestricted+0x54>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	3318      	adds	r3, #24
 800a37e:	4619      	mov	r1, r3
 800a380:	68f8      	ldr	r0, [r7, #12]
 800a382:	f7fe fe5f 	bl	8009044 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d002      	beq.n	800a392 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a38c:	f04f 33ff 	mov.w	r3, #4294967295
 800a390:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a392:	6879      	ldr	r1, [r7, #4]
 800a394:	68b8      	ldr	r0, [r7, #8]
 800a396:	f000 facf 	bl	800a938 <prvAddCurrentTaskToDelayedList>
	}
 800a39a:	bf00      	nop
 800a39c:	3718      	adds	r7, #24
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}
 800a3a2:	bf00      	nop
 800a3a4:	20000fe8 	.word	0x20000fe8

0800a3a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b086      	sub	sp, #24
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	68db      	ldr	r3, [r3, #12]
 800a3b4:	68db      	ldr	r3, [r3, #12]
 800a3b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a3b8:	693b      	ldr	r3, [r7, #16]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d10a      	bne.n	800a3d4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c2:	f383 8811 	msr	BASEPRI, r3
 800a3c6:	f3bf 8f6f 	isb	sy
 800a3ca:	f3bf 8f4f 	dsb	sy
 800a3ce:	60fb      	str	r3, [r7, #12]
}
 800a3d0:	bf00      	nop
 800a3d2:	e7fe      	b.n	800a3d2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a3d4:	693b      	ldr	r3, [r7, #16]
 800a3d6:	3318      	adds	r3, #24
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f7fe fe90 	bl	80090fe <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a3de:	4b1d      	ldr	r3, [pc, #116]	; (800a454 <xTaskRemoveFromEventList+0xac>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d11c      	bne.n	800a420 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a3e6:	693b      	ldr	r3, [r7, #16]
 800a3e8:	3304      	adds	r3, #4
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f7fe fe87 	bl	80090fe <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3f4:	2201      	movs	r2, #1
 800a3f6:	409a      	lsls	r2, r3
 800a3f8:	4b17      	ldr	r3, [pc, #92]	; (800a458 <xTaskRemoveFromEventList+0xb0>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	4313      	orrs	r3, r2
 800a3fe:	4a16      	ldr	r2, [pc, #88]	; (800a458 <xTaskRemoveFromEventList+0xb0>)
 800a400:	6013      	str	r3, [r2, #0]
 800a402:	693b      	ldr	r3, [r7, #16]
 800a404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a406:	4613      	mov	r3, r2
 800a408:	009b      	lsls	r3, r3, #2
 800a40a:	4413      	add	r3, r2
 800a40c:	009b      	lsls	r3, r3, #2
 800a40e:	4a13      	ldr	r2, [pc, #76]	; (800a45c <xTaskRemoveFromEventList+0xb4>)
 800a410:	441a      	add	r2, r3
 800a412:	693b      	ldr	r3, [r7, #16]
 800a414:	3304      	adds	r3, #4
 800a416:	4619      	mov	r1, r3
 800a418:	4610      	mov	r0, r2
 800a41a:	f7fe fe13 	bl	8009044 <vListInsertEnd>
 800a41e:	e005      	b.n	800a42c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a420:	693b      	ldr	r3, [r7, #16]
 800a422:	3318      	adds	r3, #24
 800a424:	4619      	mov	r1, r3
 800a426:	480e      	ldr	r0, [pc, #56]	; (800a460 <xTaskRemoveFromEventList+0xb8>)
 800a428:	f7fe fe0c 	bl	8009044 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a430:	4b0c      	ldr	r3, [pc, #48]	; (800a464 <xTaskRemoveFromEventList+0xbc>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a436:	429a      	cmp	r2, r3
 800a438:	d905      	bls.n	800a446 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a43a:	2301      	movs	r3, #1
 800a43c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a43e:	4b0a      	ldr	r3, [pc, #40]	; (800a468 <xTaskRemoveFromEventList+0xc0>)
 800a440:	2201      	movs	r2, #1
 800a442:	601a      	str	r2, [r3, #0]
 800a444:	e001      	b.n	800a44a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800a446:	2300      	movs	r3, #0
 800a448:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800a44a:	697b      	ldr	r3, [r7, #20]
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	3718      	adds	r7, #24
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}
 800a454:	20001110 	.word	0x20001110
 800a458:	200010f0 	.word	0x200010f0
 800a45c:	20000fec 	.word	0x20000fec
 800a460:	200010a8 	.word	0x200010a8
 800a464:	20000fe8 	.word	0x20000fe8
 800a468:	200010fc 	.word	0x200010fc

0800a46c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b086      	sub	sp, #24
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800a476:	4b29      	ldr	r3, [pc, #164]	; (800a51c <vTaskRemoveFromUnorderedEventList+0xb0>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d10a      	bne.n	800a494 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800a47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a482:	f383 8811 	msr	BASEPRI, r3
 800a486:	f3bf 8f6f 	isb	sy
 800a48a:	f3bf 8f4f 	dsb	sy
 800a48e:	613b      	str	r3, [r7, #16]
}
 800a490:	bf00      	nop
 800a492:	e7fe      	b.n	800a492 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	68db      	ldr	r3, [r3, #12]
 800a4a2:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800a4a4:	697b      	ldr	r3, [r7, #20]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d10a      	bne.n	800a4c0 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800a4aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ae:	f383 8811 	msr	BASEPRI, r3
 800a4b2:	f3bf 8f6f 	isb	sy
 800a4b6:	f3bf 8f4f 	dsb	sy
 800a4ba:	60fb      	str	r3, [r7, #12]
}
 800a4bc:	bf00      	nop
 800a4be:	e7fe      	b.n	800a4be <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f7fe fe1c 	bl	80090fe <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	3304      	adds	r3, #4
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f7fe fe17 	bl	80090fe <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800a4d0:	697b      	ldr	r3, [r7, #20]
 800a4d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4d4:	2201      	movs	r2, #1
 800a4d6:	409a      	lsls	r2, r3
 800a4d8:	4b11      	ldr	r3, [pc, #68]	; (800a520 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	4313      	orrs	r3, r2
 800a4de:	4a10      	ldr	r2, [pc, #64]	; (800a520 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800a4e0:	6013      	str	r3, [r2, #0]
 800a4e2:	697b      	ldr	r3, [r7, #20]
 800a4e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4e6:	4613      	mov	r3, r2
 800a4e8:	009b      	lsls	r3, r3, #2
 800a4ea:	4413      	add	r3, r2
 800a4ec:	009b      	lsls	r3, r3, #2
 800a4ee:	4a0d      	ldr	r2, [pc, #52]	; (800a524 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800a4f0:	441a      	add	r2, r3
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	3304      	adds	r3, #4
 800a4f6:	4619      	mov	r1, r3
 800a4f8:	4610      	mov	r0, r2
 800a4fa:	f7fe fda3 	bl	8009044 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a4fe:	697b      	ldr	r3, [r7, #20]
 800a500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a502:	4b09      	ldr	r3, [pc, #36]	; (800a528 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a508:	429a      	cmp	r2, r3
 800a50a:	d902      	bls.n	800a512 <vTaskRemoveFromUnorderedEventList+0xa6>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800a50c:	4b07      	ldr	r3, [pc, #28]	; (800a52c <vTaskRemoveFromUnorderedEventList+0xc0>)
 800a50e:	2201      	movs	r2, #1
 800a510:	601a      	str	r2, [r3, #0]
	}
}
 800a512:	bf00      	nop
 800a514:	3718      	adds	r7, #24
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}
 800a51a:	bf00      	nop
 800a51c:	20001110 	.word	0x20001110
 800a520:	200010f0 	.word	0x200010f0
 800a524:	20000fec 	.word	0x20000fec
 800a528:	20000fe8 	.word	0x20000fe8
 800a52c:	200010fc 	.word	0x200010fc

0800a530 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a530:	b480      	push	{r7}
 800a532:	b083      	sub	sp, #12
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a538:	4b06      	ldr	r3, [pc, #24]	; (800a554 <vTaskInternalSetTimeOutState+0x24>)
 800a53a:	681a      	ldr	r2, [r3, #0]
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a540:	4b05      	ldr	r3, [pc, #20]	; (800a558 <vTaskInternalSetTimeOutState+0x28>)
 800a542:	681a      	ldr	r2, [r3, #0]
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	605a      	str	r2, [r3, #4]
}
 800a548:	bf00      	nop
 800a54a:	370c      	adds	r7, #12
 800a54c:	46bd      	mov	sp, r7
 800a54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a552:	4770      	bx	lr
 800a554:	20001100 	.word	0x20001100
 800a558:	200010ec 	.word	0x200010ec

0800a55c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b088      	sub	sp, #32
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
 800a564:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d10a      	bne.n	800a582 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a56c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a570:	f383 8811 	msr	BASEPRI, r3
 800a574:	f3bf 8f6f 	isb	sy
 800a578:	f3bf 8f4f 	dsb	sy
 800a57c:	613b      	str	r3, [r7, #16]
}
 800a57e:	bf00      	nop
 800a580:	e7fe      	b.n	800a580 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d10a      	bne.n	800a59e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a58c:	f383 8811 	msr	BASEPRI, r3
 800a590:	f3bf 8f6f 	isb	sy
 800a594:	f3bf 8f4f 	dsb	sy
 800a598:	60fb      	str	r3, [r7, #12]
}
 800a59a:	bf00      	nop
 800a59c:	e7fe      	b.n	800a59c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a59e:	f000 fec1 	bl	800b324 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a5a2:	4b1d      	ldr	r3, [pc, #116]	; (800a618 <xTaskCheckForTimeOut+0xbc>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	685b      	ldr	r3, [r3, #4]
 800a5ac:	69ba      	ldr	r2, [r7, #24]
 800a5ae:	1ad3      	subs	r3, r2, r3
 800a5b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5ba:	d102      	bne.n	800a5c2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	61fb      	str	r3, [r7, #28]
 800a5c0:	e023      	b.n	800a60a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681a      	ldr	r2, [r3, #0]
 800a5c6:	4b15      	ldr	r3, [pc, #84]	; (800a61c <xTaskCheckForTimeOut+0xc0>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	429a      	cmp	r2, r3
 800a5cc:	d007      	beq.n	800a5de <xTaskCheckForTimeOut+0x82>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	685b      	ldr	r3, [r3, #4]
 800a5d2:	69ba      	ldr	r2, [r7, #24]
 800a5d4:	429a      	cmp	r2, r3
 800a5d6:	d302      	bcc.n	800a5de <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a5d8:	2301      	movs	r3, #1
 800a5da:	61fb      	str	r3, [r7, #28]
 800a5dc:	e015      	b.n	800a60a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	697a      	ldr	r2, [r7, #20]
 800a5e4:	429a      	cmp	r2, r3
 800a5e6:	d20b      	bcs.n	800a600 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	681a      	ldr	r2, [r3, #0]
 800a5ec:	697b      	ldr	r3, [r7, #20]
 800a5ee:	1ad2      	subs	r2, r2, r3
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f7ff ff9b 	bl	800a530 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	61fb      	str	r3, [r7, #28]
 800a5fe:	e004      	b.n	800a60a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	2200      	movs	r2, #0
 800a604:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a606:	2301      	movs	r3, #1
 800a608:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a60a:	f000 febb 	bl	800b384 <vPortExitCritical>

	return xReturn;
 800a60e:	69fb      	ldr	r3, [r7, #28]
}
 800a610:	4618      	mov	r0, r3
 800a612:	3720      	adds	r7, #32
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}
 800a618:	200010ec 	.word	0x200010ec
 800a61c:	20001100 	.word	0x20001100

0800a620 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a620:	b480      	push	{r7}
 800a622:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a624:	4b03      	ldr	r3, [pc, #12]	; (800a634 <vTaskMissedYield+0x14>)
 800a626:	2201      	movs	r2, #1
 800a628:	601a      	str	r2, [r3, #0]
}
 800a62a:	bf00      	nop
 800a62c:	46bd      	mov	sp, r7
 800a62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a632:	4770      	bx	lr
 800a634:	200010fc 	.word	0x200010fc

0800a638 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b082      	sub	sp, #8
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a640:	f000 f852 	bl	800a6e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a644:	4b06      	ldr	r3, [pc, #24]	; (800a660 <prvIdleTask+0x28>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	2b01      	cmp	r3, #1
 800a64a:	d9f9      	bls.n	800a640 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a64c:	4b05      	ldr	r3, [pc, #20]	; (800a664 <prvIdleTask+0x2c>)
 800a64e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a652:	601a      	str	r2, [r3, #0]
 800a654:	f3bf 8f4f 	dsb	sy
 800a658:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a65c:	e7f0      	b.n	800a640 <prvIdleTask+0x8>
 800a65e:	bf00      	nop
 800a660:	20000fec 	.word	0x20000fec
 800a664:	e000ed04 	.word	0xe000ed04

0800a668 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b082      	sub	sp, #8
 800a66c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a66e:	2300      	movs	r3, #0
 800a670:	607b      	str	r3, [r7, #4]
 800a672:	e00c      	b.n	800a68e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a674:	687a      	ldr	r2, [r7, #4]
 800a676:	4613      	mov	r3, r2
 800a678:	009b      	lsls	r3, r3, #2
 800a67a:	4413      	add	r3, r2
 800a67c:	009b      	lsls	r3, r3, #2
 800a67e:	4a12      	ldr	r2, [pc, #72]	; (800a6c8 <prvInitialiseTaskLists+0x60>)
 800a680:	4413      	add	r3, r2
 800a682:	4618      	mov	r0, r3
 800a684:	f7fe fcb1 	bl	8008fea <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	3301      	adds	r3, #1
 800a68c:	607b      	str	r3, [r7, #4]
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2b06      	cmp	r3, #6
 800a692:	d9ef      	bls.n	800a674 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a694:	480d      	ldr	r0, [pc, #52]	; (800a6cc <prvInitialiseTaskLists+0x64>)
 800a696:	f7fe fca8 	bl	8008fea <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a69a:	480d      	ldr	r0, [pc, #52]	; (800a6d0 <prvInitialiseTaskLists+0x68>)
 800a69c:	f7fe fca5 	bl	8008fea <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a6a0:	480c      	ldr	r0, [pc, #48]	; (800a6d4 <prvInitialiseTaskLists+0x6c>)
 800a6a2:	f7fe fca2 	bl	8008fea <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a6a6:	480c      	ldr	r0, [pc, #48]	; (800a6d8 <prvInitialiseTaskLists+0x70>)
 800a6a8:	f7fe fc9f 	bl	8008fea <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a6ac:	480b      	ldr	r0, [pc, #44]	; (800a6dc <prvInitialiseTaskLists+0x74>)
 800a6ae:	f7fe fc9c 	bl	8008fea <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a6b2:	4b0b      	ldr	r3, [pc, #44]	; (800a6e0 <prvInitialiseTaskLists+0x78>)
 800a6b4:	4a05      	ldr	r2, [pc, #20]	; (800a6cc <prvInitialiseTaskLists+0x64>)
 800a6b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a6b8:	4b0a      	ldr	r3, [pc, #40]	; (800a6e4 <prvInitialiseTaskLists+0x7c>)
 800a6ba:	4a05      	ldr	r2, [pc, #20]	; (800a6d0 <prvInitialiseTaskLists+0x68>)
 800a6bc:	601a      	str	r2, [r3, #0]
}
 800a6be:	bf00      	nop
 800a6c0:	3708      	adds	r7, #8
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}
 800a6c6:	bf00      	nop
 800a6c8:	20000fec 	.word	0x20000fec
 800a6cc:	20001078 	.word	0x20001078
 800a6d0:	2000108c 	.word	0x2000108c
 800a6d4:	200010a8 	.word	0x200010a8
 800a6d8:	200010bc 	.word	0x200010bc
 800a6dc:	200010d4 	.word	0x200010d4
 800a6e0:	200010a0 	.word	0x200010a0
 800a6e4:	200010a4 	.word	0x200010a4

0800a6e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b082      	sub	sp, #8
 800a6ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a6ee:	e019      	b.n	800a724 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a6f0:	f000 fe18 	bl	800b324 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800a6f4:	4b10      	ldr	r3, [pc, #64]	; (800a738 <prvCheckTasksWaitingTermination+0x50>)
 800a6f6:	68db      	ldr	r3, [r3, #12]
 800a6f8:	68db      	ldr	r3, [r3, #12]
 800a6fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	3304      	adds	r3, #4
 800a700:	4618      	mov	r0, r3
 800a702:	f7fe fcfc 	bl	80090fe <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a706:	4b0d      	ldr	r3, [pc, #52]	; (800a73c <prvCheckTasksWaitingTermination+0x54>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	3b01      	subs	r3, #1
 800a70c:	4a0b      	ldr	r2, [pc, #44]	; (800a73c <prvCheckTasksWaitingTermination+0x54>)
 800a70e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a710:	4b0b      	ldr	r3, [pc, #44]	; (800a740 <prvCheckTasksWaitingTermination+0x58>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	3b01      	subs	r3, #1
 800a716:	4a0a      	ldr	r2, [pc, #40]	; (800a740 <prvCheckTasksWaitingTermination+0x58>)
 800a718:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a71a:	f000 fe33 	bl	800b384 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f000 f810 	bl	800a744 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a724:	4b06      	ldr	r3, [pc, #24]	; (800a740 <prvCheckTasksWaitingTermination+0x58>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d1e1      	bne.n	800a6f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a72c:	bf00      	nop
 800a72e:	bf00      	nop
 800a730:	3708      	adds	r7, #8
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}
 800a736:	bf00      	nop
 800a738:	200010bc 	.word	0x200010bc
 800a73c:	200010e8 	.word	0x200010e8
 800a740:	200010d0 	.word	0x200010d0

0800a744 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a744:	b580      	push	{r7, lr}
 800a746:	b084      	sub	sp, #16
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800a752:	2b00      	cmp	r3, #0
 800a754:	d108      	bne.n	800a768 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a75a:	4618      	mov	r0, r3
 800a75c:	f000 ffc8 	bl	800b6f0 <vPortFree>
				vPortFree( pxTCB );
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f000 ffc5 	bl	800b6f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a766:	e018      	b.n	800a79a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800a76e:	2b01      	cmp	r3, #1
 800a770:	d103      	bne.n	800a77a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f000 ffbc 	bl	800b6f0 <vPortFree>
	}
 800a778:	e00f      	b.n	800a79a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800a780:	2b02      	cmp	r3, #2
 800a782:	d00a      	beq.n	800a79a <prvDeleteTCB+0x56>
	__asm volatile
 800a784:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a788:	f383 8811 	msr	BASEPRI, r3
 800a78c:	f3bf 8f6f 	isb	sy
 800a790:	f3bf 8f4f 	dsb	sy
 800a794:	60fb      	str	r3, [r7, #12]
}
 800a796:	bf00      	nop
 800a798:	e7fe      	b.n	800a798 <prvDeleteTCB+0x54>
	}
 800a79a:	bf00      	nop
 800a79c:	3710      	adds	r7, #16
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}
	...

0800a7a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	b083      	sub	sp, #12
 800a7a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a7aa:	4b0f      	ldr	r3, [pc, #60]	; (800a7e8 <prvResetNextTaskUnblockTime+0x44>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d101      	bne.n	800a7b8 <prvResetNextTaskUnblockTime+0x14>
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	e000      	b.n	800a7ba <prvResetNextTaskUnblockTime+0x16>
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d004      	beq.n	800a7c8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a7be:	4b0b      	ldr	r3, [pc, #44]	; (800a7ec <prvResetNextTaskUnblockTime+0x48>)
 800a7c0:	f04f 32ff 	mov.w	r2, #4294967295
 800a7c4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a7c6:	e008      	b.n	800a7da <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a7c8:	4b07      	ldr	r3, [pc, #28]	; (800a7e8 <prvResetNextTaskUnblockTime+0x44>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	68db      	ldr	r3, [r3, #12]
 800a7ce:	68db      	ldr	r3, [r3, #12]
 800a7d0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	685b      	ldr	r3, [r3, #4]
 800a7d6:	4a05      	ldr	r2, [pc, #20]	; (800a7ec <prvResetNextTaskUnblockTime+0x48>)
 800a7d8:	6013      	str	r3, [r2, #0]
}
 800a7da:	bf00      	nop
 800a7dc:	370c      	adds	r7, #12
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e4:	4770      	bx	lr
 800a7e6:	bf00      	nop
 800a7e8:	200010a0 	.word	0x200010a0
 800a7ec:	20001108 	.word	0x20001108

0800a7f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b083      	sub	sp, #12
 800a7f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a7f6:	4b0b      	ldr	r3, [pc, #44]	; (800a824 <xTaskGetSchedulerState+0x34>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d102      	bne.n	800a804 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a7fe:	2301      	movs	r3, #1
 800a800:	607b      	str	r3, [r7, #4]
 800a802:	e008      	b.n	800a816 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a804:	4b08      	ldr	r3, [pc, #32]	; (800a828 <xTaskGetSchedulerState+0x38>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d102      	bne.n	800a812 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a80c:	2302      	movs	r3, #2
 800a80e:	607b      	str	r3, [r7, #4]
 800a810:	e001      	b.n	800a816 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a812:	2300      	movs	r3, #0
 800a814:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a816:	687b      	ldr	r3, [r7, #4]
	}
 800a818:	4618      	mov	r0, r3
 800a81a:	370c      	adds	r7, #12
 800a81c:	46bd      	mov	sp, r7
 800a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a822:	4770      	bx	lr
 800a824:	200010f4 	.word	0x200010f4
 800a828:	20001110 	.word	0x20001110

0800a82c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b086      	sub	sp, #24
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a838:	2300      	movs	r3, #0
 800a83a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d06e      	beq.n	800a920 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a842:	4b3a      	ldr	r3, [pc, #232]	; (800a92c <xTaskPriorityDisinherit+0x100>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	693a      	ldr	r2, [r7, #16]
 800a848:	429a      	cmp	r2, r3
 800a84a:	d00a      	beq.n	800a862 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a84c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a850:	f383 8811 	msr	BASEPRI, r3
 800a854:	f3bf 8f6f 	isb	sy
 800a858:	f3bf 8f4f 	dsb	sy
 800a85c:	60fb      	str	r3, [r7, #12]
}
 800a85e:	bf00      	nop
 800a860:	e7fe      	b.n	800a860 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a866:	2b00      	cmp	r3, #0
 800a868:	d10a      	bne.n	800a880 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a86a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a86e:	f383 8811 	msr	BASEPRI, r3
 800a872:	f3bf 8f6f 	isb	sy
 800a876:	f3bf 8f4f 	dsb	sy
 800a87a:	60bb      	str	r3, [r7, #8]
}
 800a87c:	bf00      	nop
 800a87e:	e7fe      	b.n	800a87e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a884:	1e5a      	subs	r2, r3, #1
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a88a:	693b      	ldr	r3, [r7, #16]
 800a88c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a88e:	693b      	ldr	r3, [r7, #16]
 800a890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a892:	429a      	cmp	r2, r3
 800a894:	d044      	beq.n	800a920 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a896:	693b      	ldr	r3, [r7, #16]
 800a898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d140      	bne.n	800a920 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	3304      	adds	r3, #4
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f7fe fc2b 	bl	80090fe <uxListRemove>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d115      	bne.n	800a8da <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a8ae:	693b      	ldr	r3, [r7, #16]
 800a8b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8b2:	491f      	ldr	r1, [pc, #124]	; (800a930 <xTaskPriorityDisinherit+0x104>)
 800a8b4:	4613      	mov	r3, r2
 800a8b6:	009b      	lsls	r3, r3, #2
 800a8b8:	4413      	add	r3, r2
 800a8ba:	009b      	lsls	r3, r3, #2
 800a8bc:	440b      	add	r3, r1
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d10a      	bne.n	800a8da <xTaskPriorityDisinherit+0xae>
 800a8c4:	693b      	ldr	r3, [r7, #16]
 800a8c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8c8:	2201      	movs	r2, #1
 800a8ca:	fa02 f303 	lsl.w	r3, r2, r3
 800a8ce:	43da      	mvns	r2, r3
 800a8d0:	4b18      	ldr	r3, [pc, #96]	; (800a934 <xTaskPriorityDisinherit+0x108>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	4013      	ands	r3, r2
 800a8d6:	4a17      	ldr	r2, [pc, #92]	; (800a934 <xTaskPriorityDisinherit+0x108>)
 800a8d8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a8da:	693b      	ldr	r3, [r7, #16]
 800a8dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a8de:	693b      	ldr	r3, [r7, #16]
 800a8e0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8e6:	f1c3 0207 	rsb	r2, r3, #7
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8f2:	2201      	movs	r2, #1
 800a8f4:	409a      	lsls	r2, r3
 800a8f6:	4b0f      	ldr	r3, [pc, #60]	; (800a934 <xTaskPriorityDisinherit+0x108>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	4313      	orrs	r3, r2
 800a8fc:	4a0d      	ldr	r2, [pc, #52]	; (800a934 <xTaskPriorityDisinherit+0x108>)
 800a8fe:	6013      	str	r3, [r2, #0]
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a904:	4613      	mov	r3, r2
 800a906:	009b      	lsls	r3, r3, #2
 800a908:	4413      	add	r3, r2
 800a90a:	009b      	lsls	r3, r3, #2
 800a90c:	4a08      	ldr	r2, [pc, #32]	; (800a930 <xTaskPriorityDisinherit+0x104>)
 800a90e:	441a      	add	r2, r3
 800a910:	693b      	ldr	r3, [r7, #16]
 800a912:	3304      	adds	r3, #4
 800a914:	4619      	mov	r1, r3
 800a916:	4610      	mov	r0, r2
 800a918:	f7fe fb94 	bl	8009044 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a91c:	2301      	movs	r3, #1
 800a91e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a920:	697b      	ldr	r3, [r7, #20]
	}
 800a922:	4618      	mov	r0, r3
 800a924:	3718      	adds	r7, #24
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}
 800a92a:	bf00      	nop
 800a92c:	20000fe8 	.word	0x20000fe8
 800a930:	20000fec 	.word	0x20000fec
 800a934:	200010f0 	.word	0x200010f0

0800a938 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b084      	sub	sp, #16
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
 800a940:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a942:	4b29      	ldr	r3, [pc, #164]	; (800a9e8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a948:	4b28      	ldr	r3, [pc, #160]	; (800a9ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	3304      	adds	r3, #4
 800a94e:	4618      	mov	r0, r3
 800a950:	f7fe fbd5 	bl	80090fe <uxListRemove>
 800a954:	4603      	mov	r3, r0
 800a956:	2b00      	cmp	r3, #0
 800a958:	d10b      	bne.n	800a972 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800a95a:	4b24      	ldr	r3, [pc, #144]	; (800a9ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a960:	2201      	movs	r2, #1
 800a962:	fa02 f303 	lsl.w	r3, r2, r3
 800a966:	43da      	mvns	r2, r3
 800a968:	4b21      	ldr	r3, [pc, #132]	; (800a9f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	4013      	ands	r3, r2
 800a96e:	4a20      	ldr	r2, [pc, #128]	; (800a9f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a970:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a978:	d10a      	bne.n	800a990 <prvAddCurrentTaskToDelayedList+0x58>
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d007      	beq.n	800a990 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a980:	4b1a      	ldr	r3, [pc, #104]	; (800a9ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	3304      	adds	r3, #4
 800a986:	4619      	mov	r1, r3
 800a988:	481a      	ldr	r0, [pc, #104]	; (800a9f4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a98a:	f7fe fb5b 	bl	8009044 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a98e:	e026      	b.n	800a9de <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a990:	68fa      	ldr	r2, [r7, #12]
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	4413      	add	r3, r2
 800a996:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a998:	4b14      	ldr	r3, [pc, #80]	; (800a9ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	68ba      	ldr	r2, [r7, #8]
 800a99e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a9a0:	68ba      	ldr	r2, [r7, #8]
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	429a      	cmp	r2, r3
 800a9a6:	d209      	bcs.n	800a9bc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a9a8:	4b13      	ldr	r3, [pc, #76]	; (800a9f8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a9aa:	681a      	ldr	r2, [r3, #0]
 800a9ac:	4b0f      	ldr	r3, [pc, #60]	; (800a9ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	3304      	adds	r3, #4
 800a9b2:	4619      	mov	r1, r3
 800a9b4:	4610      	mov	r0, r2
 800a9b6:	f7fe fb69 	bl	800908c <vListInsert>
}
 800a9ba:	e010      	b.n	800a9de <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a9bc:	4b0f      	ldr	r3, [pc, #60]	; (800a9fc <prvAddCurrentTaskToDelayedList+0xc4>)
 800a9be:	681a      	ldr	r2, [r3, #0]
 800a9c0:	4b0a      	ldr	r3, [pc, #40]	; (800a9ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	3304      	adds	r3, #4
 800a9c6:	4619      	mov	r1, r3
 800a9c8:	4610      	mov	r0, r2
 800a9ca:	f7fe fb5f 	bl	800908c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a9ce:	4b0c      	ldr	r3, [pc, #48]	; (800aa00 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	68ba      	ldr	r2, [r7, #8]
 800a9d4:	429a      	cmp	r2, r3
 800a9d6:	d202      	bcs.n	800a9de <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a9d8:	4a09      	ldr	r2, [pc, #36]	; (800aa00 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	6013      	str	r3, [r2, #0]
}
 800a9de:	bf00      	nop
 800a9e0:	3710      	adds	r7, #16
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}
 800a9e6:	bf00      	nop
 800a9e8:	200010ec 	.word	0x200010ec
 800a9ec:	20000fe8 	.word	0x20000fe8
 800a9f0:	200010f0 	.word	0x200010f0
 800a9f4:	200010d4 	.word	0x200010d4
 800a9f8:	200010a4 	.word	0x200010a4
 800a9fc:	200010a0 	.word	0x200010a0
 800aa00:	20001108 	.word	0x20001108

0800aa04 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b08a      	sub	sp, #40	; 0x28
 800aa08:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800aa0e:	f000 fb1f 	bl	800b050 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800aa12:	4b1c      	ldr	r3, [pc, #112]	; (800aa84 <xTimerCreateTimerTask+0x80>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d021      	beq.n	800aa5e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800aa22:	1d3a      	adds	r2, r7, #4
 800aa24:	f107 0108 	add.w	r1, r7, #8
 800aa28:	f107 030c 	add.w	r3, r7, #12
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f7f6 fc75 	bl	800131c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800aa32:	6879      	ldr	r1, [r7, #4]
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	68fa      	ldr	r2, [r7, #12]
 800aa38:	9202      	str	r2, [sp, #8]
 800aa3a:	9301      	str	r3, [sp, #4]
 800aa3c:	2302      	movs	r3, #2
 800aa3e:	9300      	str	r3, [sp, #0]
 800aa40:	2300      	movs	r3, #0
 800aa42:	460a      	mov	r2, r1
 800aa44:	4910      	ldr	r1, [pc, #64]	; (800aa88 <xTimerCreateTimerTask+0x84>)
 800aa46:	4811      	ldr	r0, [pc, #68]	; (800aa8c <xTimerCreateTimerTask+0x88>)
 800aa48:	f7ff f866 	bl	8009b18 <xTaskCreateStatic>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	4a10      	ldr	r2, [pc, #64]	; (800aa90 <xTimerCreateTimerTask+0x8c>)
 800aa50:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800aa52:	4b0f      	ldr	r3, [pc, #60]	; (800aa90 <xTimerCreateTimerTask+0x8c>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d001      	beq.n	800aa5e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800aa5a:	2301      	movs	r3, #1
 800aa5c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800aa5e:	697b      	ldr	r3, [r7, #20]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d10a      	bne.n	800aa7a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800aa64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa68:	f383 8811 	msr	BASEPRI, r3
 800aa6c:	f3bf 8f6f 	isb	sy
 800aa70:	f3bf 8f4f 	dsb	sy
 800aa74:	613b      	str	r3, [r7, #16]
}
 800aa76:	bf00      	nop
 800aa78:	e7fe      	b.n	800aa78 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800aa7a:	697b      	ldr	r3, [r7, #20]
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	3718      	adds	r7, #24
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd80      	pop	{r7, pc}
 800aa84:	20001144 	.word	0x20001144
 800aa88:	0800f904 	.word	0x0800f904
 800aa8c:	0800ac59 	.word	0x0800ac59
 800aa90:	20001148 	.word	0x20001148

0800aa94 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b088      	sub	sp, #32
 800aa98:	af02      	add	r7, sp, #8
 800aa9a:	60f8      	str	r0, [r7, #12]
 800aa9c:	60b9      	str	r1, [r7, #8]
 800aa9e:	607a      	str	r2, [r7, #4]
 800aaa0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800aaa2:	202c      	movs	r0, #44	; 0x2c
 800aaa4:	f000 fd60 	bl	800b568 <pvPortMalloc>
 800aaa8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d00d      	beq.n	800aacc <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	9301      	str	r3, [sp, #4]
 800aab4:	6a3b      	ldr	r3, [r7, #32]
 800aab6:	9300      	str	r3, [sp, #0]
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	687a      	ldr	r2, [r7, #4]
 800aabc:	68b9      	ldr	r1, [r7, #8]
 800aabe:	68f8      	ldr	r0, [r7, #12]
 800aac0:	f000 f809 	bl	800aad6 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 800aac4:	697b      	ldr	r3, [r7, #20]
 800aac6:	2200      	movs	r2, #0
 800aac8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 800aacc:	697b      	ldr	r3, [r7, #20]
	}
 800aace:	4618      	mov	r0, r3
 800aad0:	3718      	adds	r7, #24
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}

0800aad6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800aad6:	b580      	push	{r7, lr}
 800aad8:	b086      	sub	sp, #24
 800aada:	af00      	add	r7, sp, #0
 800aadc:	60f8      	str	r0, [r7, #12]
 800aade:	60b9      	str	r1, [r7, #8]
 800aae0:	607a      	str	r2, [r7, #4]
 800aae2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d10a      	bne.n	800ab00 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800aaea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaee:	f383 8811 	msr	BASEPRI, r3
 800aaf2:	f3bf 8f6f 	isb	sy
 800aaf6:	f3bf 8f4f 	dsb	sy
 800aafa:	617b      	str	r3, [r7, #20]
}
 800aafc:	bf00      	nop
 800aafe:	e7fe      	b.n	800aafe <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800ab00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d015      	beq.n	800ab32 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800ab06:	f000 faa3 	bl	800b050 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800ab0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab0c:	68fa      	ldr	r2, [r7, #12]
 800ab0e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800ab10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab12:	68ba      	ldr	r2, [r7, #8]
 800ab14:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800ab16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab18:	687a      	ldr	r2, [r7, #4]
 800ab1a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800ab1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab1e:	683a      	ldr	r2, [r7, #0]
 800ab20:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800ab22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab24:	6a3a      	ldr	r2, [r7, #32]
 800ab26:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800ab28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab2a:	3304      	adds	r3, #4
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f7fe fa7c 	bl	800902a <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800ab32:	bf00      	nop
 800ab34:	3718      	adds	r7, #24
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}
	...

0800ab3c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b08a      	sub	sp, #40	; 0x28
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	60f8      	str	r0, [r7, #12]
 800ab44:	60b9      	str	r1, [r7, #8]
 800ab46:	607a      	str	r2, [r7, #4]
 800ab48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d10a      	bne.n	800ab6a <xTimerGenericCommand+0x2e>
	__asm volatile
 800ab54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab58:	f383 8811 	msr	BASEPRI, r3
 800ab5c:	f3bf 8f6f 	isb	sy
 800ab60:	f3bf 8f4f 	dsb	sy
 800ab64:	623b      	str	r3, [r7, #32]
}
 800ab66:	bf00      	nop
 800ab68:	e7fe      	b.n	800ab68 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ab6a:	4b1a      	ldr	r3, [pc, #104]	; (800abd4 <xTimerGenericCommand+0x98>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d02a      	beq.n	800abc8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	2b05      	cmp	r3, #5
 800ab82:	dc18      	bgt.n	800abb6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ab84:	f7ff fe34 	bl	800a7f0 <xTaskGetSchedulerState>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	2b02      	cmp	r3, #2
 800ab8c:	d109      	bne.n	800aba2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ab8e:	4b11      	ldr	r3, [pc, #68]	; (800abd4 <xTimerGenericCommand+0x98>)
 800ab90:	6818      	ldr	r0, [r3, #0]
 800ab92:	f107 0110 	add.w	r1, r7, #16
 800ab96:	2300      	movs	r3, #0
 800ab98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab9a:	f7fe fbd9 	bl	8009350 <xQueueGenericSend>
 800ab9e:	6278      	str	r0, [r7, #36]	; 0x24
 800aba0:	e012      	b.n	800abc8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800aba2:	4b0c      	ldr	r3, [pc, #48]	; (800abd4 <xTimerGenericCommand+0x98>)
 800aba4:	6818      	ldr	r0, [r3, #0]
 800aba6:	f107 0110 	add.w	r1, r7, #16
 800abaa:	2300      	movs	r3, #0
 800abac:	2200      	movs	r2, #0
 800abae:	f7fe fbcf 	bl	8009350 <xQueueGenericSend>
 800abb2:	6278      	str	r0, [r7, #36]	; 0x24
 800abb4:	e008      	b.n	800abc8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800abb6:	4b07      	ldr	r3, [pc, #28]	; (800abd4 <xTimerGenericCommand+0x98>)
 800abb8:	6818      	ldr	r0, [r3, #0]
 800abba:	f107 0110 	add.w	r1, r7, #16
 800abbe:	2300      	movs	r3, #0
 800abc0:	683a      	ldr	r2, [r7, #0]
 800abc2:	f7fe fcc3 	bl	800954c <xQueueGenericSendFromISR>
 800abc6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800abc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800abca:	4618      	mov	r0, r3
 800abcc:	3728      	adds	r7, #40	; 0x28
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}
 800abd2:	bf00      	nop
 800abd4:	20001144 	.word	0x20001144

0800abd8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b088      	sub	sp, #32
 800abdc:	af02      	add	r7, sp, #8
 800abde:	6078      	str	r0, [r7, #4]
 800abe0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800abe2:	4b1c      	ldr	r3, [pc, #112]	; (800ac54 <prvProcessExpiredTimer+0x7c>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	68db      	ldr	r3, [r3, #12]
 800abe8:	68db      	ldr	r3, [r3, #12]
 800abea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800abec:	697b      	ldr	r3, [r7, #20]
 800abee:	3304      	adds	r3, #4
 800abf0:	4618      	mov	r0, r3
 800abf2:	f7fe fa84 	bl	80090fe <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800abf6:	697b      	ldr	r3, [r7, #20]
 800abf8:	69db      	ldr	r3, [r3, #28]
 800abfa:	2b01      	cmp	r3, #1
 800abfc:	d122      	bne.n	800ac44 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	699a      	ldr	r2, [r3, #24]
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	18d1      	adds	r1, r2, r3
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	683a      	ldr	r2, [r7, #0]
 800ac0a:	6978      	ldr	r0, [r7, #20]
 800ac0c:	f000 f8c8 	bl	800ada0 <prvInsertTimerInActiveList>
 800ac10:	4603      	mov	r3, r0
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d016      	beq.n	800ac44 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ac16:	2300      	movs	r3, #0
 800ac18:	9300      	str	r3, [sp, #0]
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	687a      	ldr	r2, [r7, #4]
 800ac1e:	2100      	movs	r1, #0
 800ac20:	6978      	ldr	r0, [r7, #20]
 800ac22:	f7ff ff8b 	bl	800ab3c <xTimerGenericCommand>
 800ac26:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ac28:	693b      	ldr	r3, [r7, #16]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d10a      	bne.n	800ac44 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800ac2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac32:	f383 8811 	msr	BASEPRI, r3
 800ac36:	f3bf 8f6f 	isb	sy
 800ac3a:	f3bf 8f4f 	dsb	sy
 800ac3e:	60fb      	str	r3, [r7, #12]
}
 800ac40:	bf00      	nop
 800ac42:	e7fe      	b.n	800ac42 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ac44:	697b      	ldr	r3, [r7, #20]
 800ac46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac48:	6978      	ldr	r0, [r7, #20]
 800ac4a:	4798      	blx	r3
}
 800ac4c:	bf00      	nop
 800ac4e:	3718      	adds	r7, #24
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}
 800ac54:	2000113c 	.word	0x2000113c

0800ac58 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b084      	sub	sp, #16
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ac60:	f107 0308 	add.w	r3, r7, #8
 800ac64:	4618      	mov	r0, r3
 800ac66:	f000 f857 	bl	800ad18 <prvGetNextExpireTime>
 800ac6a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	4619      	mov	r1, r3
 800ac70:	68f8      	ldr	r0, [r7, #12]
 800ac72:	f000 f803 	bl	800ac7c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ac76:	f000 f8d5 	bl	800ae24 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ac7a:	e7f1      	b.n	800ac60 <prvTimerTask+0x8>

0800ac7c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b084      	sub	sp, #16
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
 800ac84:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ac86:	f7ff f96b 	bl	8009f60 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ac8a:	f107 0308 	add.w	r3, r7, #8
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f000 f866 	bl	800ad60 <prvSampleTimeNow>
 800ac94:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d130      	bne.n	800acfe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d10a      	bne.n	800acb8 <prvProcessTimerOrBlockTask+0x3c>
 800aca2:	687a      	ldr	r2, [r7, #4]
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	429a      	cmp	r2, r3
 800aca8:	d806      	bhi.n	800acb8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800acaa:	f7ff f967 	bl	8009f7c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800acae:	68f9      	ldr	r1, [r7, #12]
 800acb0:	6878      	ldr	r0, [r7, #4]
 800acb2:	f7ff ff91 	bl	800abd8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800acb6:	e024      	b.n	800ad02 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d008      	beq.n	800acd0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800acbe:	4b13      	ldr	r3, [pc, #76]	; (800ad0c <prvProcessTimerOrBlockTask+0x90>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	bf0c      	ite	eq
 800acc8:	2301      	moveq	r3, #1
 800acca:	2300      	movne	r3, #0
 800accc:	b2db      	uxtb	r3, r3
 800acce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800acd0:	4b0f      	ldr	r3, [pc, #60]	; (800ad10 <prvProcessTimerOrBlockTask+0x94>)
 800acd2:	6818      	ldr	r0, [r3, #0]
 800acd4:	687a      	ldr	r2, [r7, #4]
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	1ad3      	subs	r3, r2, r3
 800acda:	683a      	ldr	r2, [r7, #0]
 800acdc:	4619      	mov	r1, r3
 800acde:	f7fe fee7 	bl	8009ab0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ace2:	f7ff f94b 	bl	8009f7c <xTaskResumeAll>
 800ace6:	4603      	mov	r3, r0
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d10a      	bne.n	800ad02 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800acec:	4b09      	ldr	r3, [pc, #36]	; (800ad14 <prvProcessTimerOrBlockTask+0x98>)
 800acee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acf2:	601a      	str	r2, [r3, #0]
 800acf4:	f3bf 8f4f 	dsb	sy
 800acf8:	f3bf 8f6f 	isb	sy
}
 800acfc:	e001      	b.n	800ad02 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800acfe:	f7ff f93d 	bl	8009f7c <xTaskResumeAll>
}
 800ad02:	bf00      	nop
 800ad04:	3710      	adds	r7, #16
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}
 800ad0a:	bf00      	nop
 800ad0c:	20001140 	.word	0x20001140
 800ad10:	20001144 	.word	0x20001144
 800ad14:	e000ed04 	.word	0xe000ed04

0800ad18 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ad18:	b480      	push	{r7}
 800ad1a:	b085      	sub	sp, #20
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ad20:	4b0e      	ldr	r3, [pc, #56]	; (800ad5c <prvGetNextExpireTime+0x44>)
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	bf0c      	ite	eq
 800ad2a:	2301      	moveq	r3, #1
 800ad2c:	2300      	movne	r3, #0
 800ad2e:	b2db      	uxtb	r3, r3
 800ad30:	461a      	mov	r2, r3
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d105      	bne.n	800ad4a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ad3e:	4b07      	ldr	r3, [pc, #28]	; (800ad5c <prvGetNextExpireTime+0x44>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	68db      	ldr	r3, [r3, #12]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	60fb      	str	r3, [r7, #12]
 800ad48:	e001      	b.n	800ad4e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
}
 800ad50:	4618      	mov	r0, r3
 800ad52:	3714      	adds	r7, #20
 800ad54:	46bd      	mov	sp, r7
 800ad56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5a:	4770      	bx	lr
 800ad5c:	2000113c 	.word	0x2000113c

0800ad60 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b084      	sub	sp, #16
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ad68:	f7ff f9a4 	bl	800a0b4 <xTaskGetTickCount>
 800ad6c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ad6e:	4b0b      	ldr	r3, [pc, #44]	; (800ad9c <prvSampleTimeNow+0x3c>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	68fa      	ldr	r2, [r7, #12]
 800ad74:	429a      	cmp	r2, r3
 800ad76:	d205      	bcs.n	800ad84 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ad78:	f000 f908 	bl	800af8c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2201      	movs	r2, #1
 800ad80:	601a      	str	r2, [r3, #0]
 800ad82:	e002      	b.n	800ad8a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2200      	movs	r2, #0
 800ad88:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ad8a:	4a04      	ldr	r2, [pc, #16]	; (800ad9c <prvSampleTimeNow+0x3c>)
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ad90:	68fb      	ldr	r3, [r7, #12]
}
 800ad92:	4618      	mov	r0, r3
 800ad94:	3710      	adds	r7, #16
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}
 800ad9a:	bf00      	nop
 800ad9c:	2000114c 	.word	0x2000114c

0800ada0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b086      	sub	sp, #24
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	60f8      	str	r0, [r7, #12]
 800ada8:	60b9      	str	r1, [r7, #8]
 800adaa:	607a      	str	r2, [r7, #4]
 800adac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800adae:	2300      	movs	r3, #0
 800adb0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	68ba      	ldr	r2, [r7, #8]
 800adb6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	68fa      	ldr	r2, [r7, #12]
 800adbc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800adbe:	68ba      	ldr	r2, [r7, #8]
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	429a      	cmp	r2, r3
 800adc4:	d812      	bhi.n	800adec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800adc6:	687a      	ldr	r2, [r7, #4]
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	1ad2      	subs	r2, r2, r3
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	699b      	ldr	r3, [r3, #24]
 800add0:	429a      	cmp	r2, r3
 800add2:	d302      	bcc.n	800adda <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800add4:	2301      	movs	r3, #1
 800add6:	617b      	str	r3, [r7, #20]
 800add8:	e01b      	b.n	800ae12 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800adda:	4b10      	ldr	r3, [pc, #64]	; (800ae1c <prvInsertTimerInActiveList+0x7c>)
 800addc:	681a      	ldr	r2, [r3, #0]
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	3304      	adds	r3, #4
 800ade2:	4619      	mov	r1, r3
 800ade4:	4610      	mov	r0, r2
 800ade6:	f7fe f951 	bl	800908c <vListInsert>
 800adea:	e012      	b.n	800ae12 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800adec:	687a      	ldr	r2, [r7, #4]
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	429a      	cmp	r2, r3
 800adf2:	d206      	bcs.n	800ae02 <prvInsertTimerInActiveList+0x62>
 800adf4:	68ba      	ldr	r2, [r7, #8]
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	429a      	cmp	r2, r3
 800adfa:	d302      	bcc.n	800ae02 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800adfc:	2301      	movs	r3, #1
 800adfe:	617b      	str	r3, [r7, #20]
 800ae00:	e007      	b.n	800ae12 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ae02:	4b07      	ldr	r3, [pc, #28]	; (800ae20 <prvInsertTimerInActiveList+0x80>)
 800ae04:	681a      	ldr	r2, [r3, #0]
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	3304      	adds	r3, #4
 800ae0a:	4619      	mov	r1, r3
 800ae0c:	4610      	mov	r0, r2
 800ae0e:	f7fe f93d 	bl	800908c <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ae12:	697b      	ldr	r3, [r7, #20]
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	3718      	adds	r7, #24
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}
 800ae1c:	20001140 	.word	0x20001140
 800ae20:	2000113c 	.word	0x2000113c

0800ae24 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b08e      	sub	sp, #56	; 0x38
 800ae28:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ae2a:	e09d      	b.n	800af68 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	da18      	bge.n	800ae64 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ae32:	1d3b      	adds	r3, r7, #4
 800ae34:	3304      	adds	r3, #4
 800ae36:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ae38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d10a      	bne.n	800ae54 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ae3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae42:	f383 8811 	msr	BASEPRI, r3
 800ae46:	f3bf 8f6f 	isb	sy
 800ae4a:	f3bf 8f4f 	dsb	sy
 800ae4e:	61fb      	str	r3, [r7, #28]
}
 800ae50:	bf00      	nop
 800ae52:	e7fe      	b.n	800ae52 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ae54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae5a:	6850      	ldr	r0, [r2, #4]
 800ae5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae5e:	6892      	ldr	r2, [r2, #8]
 800ae60:	4611      	mov	r1, r2
 800ae62:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	db7e      	blt.n	800af68 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ae6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae70:	695b      	ldr	r3, [r3, #20]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d004      	beq.n	800ae80 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ae76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae78:	3304      	adds	r3, #4
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	f7fe f93f 	bl	80090fe <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ae80:	463b      	mov	r3, r7
 800ae82:	4618      	mov	r0, r3
 800ae84:	f7ff ff6c 	bl	800ad60 <prvSampleTimeNow>
 800ae88:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2b09      	cmp	r3, #9
 800ae8e:	d86a      	bhi.n	800af66 <prvProcessReceivedCommands+0x142>
 800ae90:	a201      	add	r2, pc, #4	; (adr r2, 800ae98 <prvProcessReceivedCommands+0x74>)
 800ae92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae96:	bf00      	nop
 800ae98:	0800aec1 	.word	0x0800aec1
 800ae9c:	0800aec1 	.word	0x0800aec1
 800aea0:	0800aec1 	.word	0x0800aec1
 800aea4:	0800af69 	.word	0x0800af69
 800aea8:	0800af1d 	.word	0x0800af1d
 800aeac:	0800af55 	.word	0x0800af55
 800aeb0:	0800aec1 	.word	0x0800aec1
 800aeb4:	0800aec1 	.word	0x0800aec1
 800aeb8:	0800af69 	.word	0x0800af69
 800aebc:	0800af1d 	.word	0x0800af1d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800aec0:	68ba      	ldr	r2, [r7, #8]
 800aec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aec4:	699b      	ldr	r3, [r3, #24]
 800aec6:	18d1      	adds	r1, r2, r3
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aecc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aece:	f7ff ff67 	bl	800ada0 <prvInsertTimerInActiveList>
 800aed2:	4603      	mov	r3, r0
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d047      	beq.n	800af68 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aedc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aede:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800aee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aee2:	69db      	ldr	r3, [r3, #28]
 800aee4:	2b01      	cmp	r3, #1
 800aee6:	d13f      	bne.n	800af68 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800aee8:	68ba      	ldr	r2, [r7, #8]
 800aeea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeec:	699b      	ldr	r3, [r3, #24]
 800aeee:	441a      	add	r2, r3
 800aef0:	2300      	movs	r3, #0
 800aef2:	9300      	str	r3, [sp, #0]
 800aef4:	2300      	movs	r3, #0
 800aef6:	2100      	movs	r1, #0
 800aef8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aefa:	f7ff fe1f 	bl	800ab3c <xTimerGenericCommand>
 800aefe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800af00:	6a3b      	ldr	r3, [r7, #32]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d130      	bne.n	800af68 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800af06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af0a:	f383 8811 	msr	BASEPRI, r3
 800af0e:	f3bf 8f6f 	isb	sy
 800af12:	f3bf 8f4f 	dsb	sy
 800af16:	61bb      	str	r3, [r7, #24]
}
 800af18:	bf00      	nop
 800af1a:	e7fe      	b.n	800af1a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800af1c:	68ba      	ldr	r2, [r7, #8]
 800af1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af20:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800af22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af24:	699b      	ldr	r3, [r3, #24]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d10a      	bne.n	800af40 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800af2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af2e:	f383 8811 	msr	BASEPRI, r3
 800af32:	f3bf 8f6f 	isb	sy
 800af36:	f3bf 8f4f 	dsb	sy
 800af3a:	617b      	str	r3, [r7, #20]
}
 800af3c:	bf00      	nop
 800af3e:	e7fe      	b.n	800af3e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800af40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af42:	699a      	ldr	r2, [r3, #24]
 800af44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af46:	18d1      	adds	r1, r2, r3
 800af48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af4e:	f7ff ff27 	bl	800ada0 <prvInsertTimerInActiveList>
					break;
 800af52:	e009      	b.n	800af68 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800af54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d104      	bne.n	800af68 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800af5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af60:	f000 fbc6 	bl	800b6f0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800af64:	e000      	b.n	800af68 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 800af66:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800af68:	4b07      	ldr	r3, [pc, #28]	; (800af88 <prvProcessReceivedCommands+0x164>)
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	1d39      	adds	r1, r7, #4
 800af6e:	2200      	movs	r2, #0
 800af70:	4618      	mov	r0, r3
 800af72:	f7fe fb83 	bl	800967c <xQueueReceive>
 800af76:	4603      	mov	r3, r0
 800af78:	2b00      	cmp	r3, #0
 800af7a:	f47f af57 	bne.w	800ae2c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800af7e:	bf00      	nop
 800af80:	bf00      	nop
 800af82:	3730      	adds	r7, #48	; 0x30
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}
 800af88:	20001144 	.word	0x20001144

0800af8c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b088      	sub	sp, #32
 800af90:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800af92:	e045      	b.n	800b020 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800af94:	4b2c      	ldr	r3, [pc, #176]	; (800b048 <prvSwitchTimerLists+0xbc>)
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	68db      	ldr	r3, [r3, #12]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800af9e:	4b2a      	ldr	r3, [pc, #168]	; (800b048 <prvSwitchTimerLists+0xbc>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	68db      	ldr	r3, [r3, #12]
 800afa4:	68db      	ldr	r3, [r3, #12]
 800afa6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	3304      	adds	r3, #4
 800afac:	4618      	mov	r0, r3
 800afae:	f7fe f8a6 	bl	80090fe <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afb6:	68f8      	ldr	r0, [r7, #12]
 800afb8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	69db      	ldr	r3, [r3, #28]
 800afbe:	2b01      	cmp	r3, #1
 800afc0:	d12e      	bne.n	800b020 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	699b      	ldr	r3, [r3, #24]
 800afc6:	693a      	ldr	r2, [r7, #16]
 800afc8:	4413      	add	r3, r2
 800afca:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800afcc:	68ba      	ldr	r2, [r7, #8]
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	429a      	cmp	r2, r3
 800afd2:	d90e      	bls.n	800aff2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	68ba      	ldr	r2, [r7, #8]
 800afd8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	68fa      	ldr	r2, [r7, #12]
 800afde:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800afe0:	4b19      	ldr	r3, [pc, #100]	; (800b048 <prvSwitchTimerLists+0xbc>)
 800afe2:	681a      	ldr	r2, [r3, #0]
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	3304      	adds	r3, #4
 800afe8:	4619      	mov	r1, r3
 800afea:	4610      	mov	r0, r2
 800afec:	f7fe f84e 	bl	800908c <vListInsert>
 800aff0:	e016      	b.n	800b020 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aff2:	2300      	movs	r3, #0
 800aff4:	9300      	str	r3, [sp, #0]
 800aff6:	2300      	movs	r3, #0
 800aff8:	693a      	ldr	r2, [r7, #16]
 800affa:	2100      	movs	r1, #0
 800affc:	68f8      	ldr	r0, [r7, #12]
 800affe:	f7ff fd9d 	bl	800ab3c <xTimerGenericCommand>
 800b002:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d10a      	bne.n	800b020 <prvSwitchTimerLists+0x94>
	__asm volatile
 800b00a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b00e:	f383 8811 	msr	BASEPRI, r3
 800b012:	f3bf 8f6f 	isb	sy
 800b016:	f3bf 8f4f 	dsb	sy
 800b01a:	603b      	str	r3, [r7, #0]
}
 800b01c:	bf00      	nop
 800b01e:	e7fe      	b.n	800b01e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b020:	4b09      	ldr	r3, [pc, #36]	; (800b048 <prvSwitchTimerLists+0xbc>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d1b4      	bne.n	800af94 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b02a:	4b07      	ldr	r3, [pc, #28]	; (800b048 <prvSwitchTimerLists+0xbc>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b030:	4b06      	ldr	r3, [pc, #24]	; (800b04c <prvSwitchTimerLists+0xc0>)
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	4a04      	ldr	r2, [pc, #16]	; (800b048 <prvSwitchTimerLists+0xbc>)
 800b036:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b038:	4a04      	ldr	r2, [pc, #16]	; (800b04c <prvSwitchTimerLists+0xc0>)
 800b03a:	697b      	ldr	r3, [r7, #20]
 800b03c:	6013      	str	r3, [r2, #0]
}
 800b03e:	bf00      	nop
 800b040:	3718      	adds	r7, #24
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}
 800b046:	bf00      	nop
 800b048:	2000113c 	.word	0x2000113c
 800b04c:	20001140 	.word	0x20001140

0800b050 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b082      	sub	sp, #8
 800b054:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b056:	f000 f965 	bl	800b324 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b05a:	4b15      	ldr	r3, [pc, #84]	; (800b0b0 <prvCheckForValidListAndQueue+0x60>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d120      	bne.n	800b0a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b062:	4814      	ldr	r0, [pc, #80]	; (800b0b4 <prvCheckForValidListAndQueue+0x64>)
 800b064:	f7fd ffc1 	bl	8008fea <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b068:	4813      	ldr	r0, [pc, #76]	; (800b0b8 <prvCheckForValidListAndQueue+0x68>)
 800b06a:	f7fd ffbe 	bl	8008fea <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b06e:	4b13      	ldr	r3, [pc, #76]	; (800b0bc <prvCheckForValidListAndQueue+0x6c>)
 800b070:	4a10      	ldr	r2, [pc, #64]	; (800b0b4 <prvCheckForValidListAndQueue+0x64>)
 800b072:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b074:	4b12      	ldr	r3, [pc, #72]	; (800b0c0 <prvCheckForValidListAndQueue+0x70>)
 800b076:	4a10      	ldr	r2, [pc, #64]	; (800b0b8 <prvCheckForValidListAndQueue+0x68>)
 800b078:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b07a:	2300      	movs	r3, #0
 800b07c:	9300      	str	r3, [sp, #0]
 800b07e:	4b11      	ldr	r3, [pc, #68]	; (800b0c4 <prvCheckForValidListAndQueue+0x74>)
 800b080:	4a11      	ldr	r2, [pc, #68]	; (800b0c8 <prvCheckForValidListAndQueue+0x78>)
 800b082:	2110      	movs	r1, #16
 800b084:	200a      	movs	r0, #10
 800b086:	f7fe f8cd 	bl	8009224 <xQueueGenericCreateStatic>
 800b08a:	4603      	mov	r3, r0
 800b08c:	4a08      	ldr	r2, [pc, #32]	; (800b0b0 <prvCheckForValidListAndQueue+0x60>)
 800b08e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b090:	4b07      	ldr	r3, [pc, #28]	; (800b0b0 <prvCheckForValidListAndQueue+0x60>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d005      	beq.n	800b0a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b098:	4b05      	ldr	r3, [pc, #20]	; (800b0b0 <prvCheckForValidListAndQueue+0x60>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	490b      	ldr	r1, [pc, #44]	; (800b0cc <prvCheckForValidListAndQueue+0x7c>)
 800b09e:	4618      	mov	r0, r3
 800b0a0:	f7fe fcdc 	bl	8009a5c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b0a4:	f000 f96e 	bl	800b384 <vPortExitCritical>
}
 800b0a8:	bf00      	nop
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}
 800b0ae:	bf00      	nop
 800b0b0:	20001144 	.word	0x20001144
 800b0b4:	20001114 	.word	0x20001114
 800b0b8:	20001128 	.word	0x20001128
 800b0bc:	2000113c 	.word	0x2000113c
 800b0c0:	20001140 	.word	0x20001140
 800b0c4:	200011f0 	.word	0x200011f0
 800b0c8:	20001150 	.word	0x20001150
 800b0cc:	0800f90c 	.word	0x0800f90c

0800b0d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b0d0:	b480      	push	{r7}
 800b0d2:	b085      	sub	sp, #20
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	60f8      	str	r0, [r7, #12]
 800b0d8:	60b9      	str	r1, [r7, #8]
 800b0da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	3b04      	subs	r3, #4
 800b0e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b0e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	3b04      	subs	r3, #4
 800b0ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	f023 0201 	bic.w	r2, r3, #1
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	3b04      	subs	r3, #4
 800b0fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b100:	4a0c      	ldr	r2, [pc, #48]	; (800b134 <pxPortInitialiseStack+0x64>)
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	3b14      	subs	r3, #20
 800b10a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b10c:	687a      	ldr	r2, [r7, #4]
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	3b04      	subs	r3, #4
 800b116:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	f06f 0202 	mvn.w	r2, #2
 800b11e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	3b20      	subs	r3, #32
 800b124:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b126:	68fb      	ldr	r3, [r7, #12]
}
 800b128:	4618      	mov	r0, r3
 800b12a:	3714      	adds	r7, #20
 800b12c:	46bd      	mov	sp, r7
 800b12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b132:	4770      	bx	lr
 800b134:	0800b139 	.word	0x0800b139

0800b138 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b138:	b480      	push	{r7}
 800b13a:	b085      	sub	sp, #20
 800b13c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b13e:	2300      	movs	r3, #0
 800b140:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b142:	4b12      	ldr	r3, [pc, #72]	; (800b18c <prvTaskExitError+0x54>)
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b14a:	d00a      	beq.n	800b162 <prvTaskExitError+0x2a>
	__asm volatile
 800b14c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b150:	f383 8811 	msr	BASEPRI, r3
 800b154:	f3bf 8f6f 	isb	sy
 800b158:	f3bf 8f4f 	dsb	sy
 800b15c:	60fb      	str	r3, [r7, #12]
}
 800b15e:	bf00      	nop
 800b160:	e7fe      	b.n	800b160 <prvTaskExitError+0x28>
	__asm volatile
 800b162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b166:	f383 8811 	msr	BASEPRI, r3
 800b16a:	f3bf 8f6f 	isb	sy
 800b16e:	f3bf 8f4f 	dsb	sy
 800b172:	60bb      	str	r3, [r7, #8]
}
 800b174:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b176:	bf00      	nop
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d0fc      	beq.n	800b178 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b17e:	bf00      	nop
 800b180:	bf00      	nop
 800b182:	3714      	adds	r7, #20
 800b184:	46bd      	mov	sp, r7
 800b186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18a:	4770      	bx	lr
 800b18c:	2000000c 	.word	0x2000000c

0800b190 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b190:	4b07      	ldr	r3, [pc, #28]	; (800b1b0 <pxCurrentTCBConst2>)
 800b192:	6819      	ldr	r1, [r3, #0]
 800b194:	6808      	ldr	r0, [r1, #0]
 800b196:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b19a:	f380 8809 	msr	PSP, r0
 800b19e:	f3bf 8f6f 	isb	sy
 800b1a2:	f04f 0000 	mov.w	r0, #0
 800b1a6:	f380 8811 	msr	BASEPRI, r0
 800b1aa:	4770      	bx	lr
 800b1ac:	f3af 8000 	nop.w

0800b1b0 <pxCurrentTCBConst2>:
 800b1b0:	20000fe8 	.word	0x20000fe8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b1b4:	bf00      	nop
 800b1b6:	bf00      	nop

0800b1b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b1b8:	4808      	ldr	r0, [pc, #32]	; (800b1dc <prvPortStartFirstTask+0x24>)
 800b1ba:	6800      	ldr	r0, [r0, #0]
 800b1bc:	6800      	ldr	r0, [r0, #0]
 800b1be:	f380 8808 	msr	MSP, r0
 800b1c2:	f04f 0000 	mov.w	r0, #0
 800b1c6:	f380 8814 	msr	CONTROL, r0
 800b1ca:	b662      	cpsie	i
 800b1cc:	b661      	cpsie	f
 800b1ce:	f3bf 8f4f 	dsb	sy
 800b1d2:	f3bf 8f6f 	isb	sy
 800b1d6:	df00      	svc	0
 800b1d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b1da:	bf00      	nop
 800b1dc:	e000ed08 	.word	0xe000ed08

0800b1e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b086      	sub	sp, #24
 800b1e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b1e6:	4b46      	ldr	r3, [pc, #280]	; (800b300 <xPortStartScheduler+0x120>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	4a46      	ldr	r2, [pc, #280]	; (800b304 <xPortStartScheduler+0x124>)
 800b1ec:	4293      	cmp	r3, r2
 800b1ee:	d10a      	bne.n	800b206 <xPortStartScheduler+0x26>
	__asm volatile
 800b1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1f4:	f383 8811 	msr	BASEPRI, r3
 800b1f8:	f3bf 8f6f 	isb	sy
 800b1fc:	f3bf 8f4f 	dsb	sy
 800b200:	613b      	str	r3, [r7, #16]
}
 800b202:	bf00      	nop
 800b204:	e7fe      	b.n	800b204 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b206:	4b3e      	ldr	r3, [pc, #248]	; (800b300 <xPortStartScheduler+0x120>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	4a3f      	ldr	r2, [pc, #252]	; (800b308 <xPortStartScheduler+0x128>)
 800b20c:	4293      	cmp	r3, r2
 800b20e:	d10a      	bne.n	800b226 <xPortStartScheduler+0x46>
	__asm volatile
 800b210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b214:	f383 8811 	msr	BASEPRI, r3
 800b218:	f3bf 8f6f 	isb	sy
 800b21c:	f3bf 8f4f 	dsb	sy
 800b220:	60fb      	str	r3, [r7, #12]
}
 800b222:	bf00      	nop
 800b224:	e7fe      	b.n	800b224 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b226:	4b39      	ldr	r3, [pc, #228]	; (800b30c <xPortStartScheduler+0x12c>)
 800b228:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	781b      	ldrb	r3, [r3, #0]
 800b22e:	b2db      	uxtb	r3, r3
 800b230:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b232:	697b      	ldr	r3, [r7, #20]
 800b234:	22ff      	movs	r2, #255	; 0xff
 800b236:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b238:	697b      	ldr	r3, [r7, #20]
 800b23a:	781b      	ldrb	r3, [r3, #0]
 800b23c:	b2db      	uxtb	r3, r3
 800b23e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b240:	78fb      	ldrb	r3, [r7, #3]
 800b242:	b2db      	uxtb	r3, r3
 800b244:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b248:	b2da      	uxtb	r2, r3
 800b24a:	4b31      	ldr	r3, [pc, #196]	; (800b310 <xPortStartScheduler+0x130>)
 800b24c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b24e:	4b31      	ldr	r3, [pc, #196]	; (800b314 <xPortStartScheduler+0x134>)
 800b250:	2207      	movs	r2, #7
 800b252:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b254:	e009      	b.n	800b26a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b256:	4b2f      	ldr	r3, [pc, #188]	; (800b314 <xPortStartScheduler+0x134>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	3b01      	subs	r3, #1
 800b25c:	4a2d      	ldr	r2, [pc, #180]	; (800b314 <xPortStartScheduler+0x134>)
 800b25e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b260:	78fb      	ldrb	r3, [r7, #3]
 800b262:	b2db      	uxtb	r3, r3
 800b264:	005b      	lsls	r3, r3, #1
 800b266:	b2db      	uxtb	r3, r3
 800b268:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b26a:	78fb      	ldrb	r3, [r7, #3]
 800b26c:	b2db      	uxtb	r3, r3
 800b26e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b272:	2b80      	cmp	r3, #128	; 0x80
 800b274:	d0ef      	beq.n	800b256 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b276:	4b27      	ldr	r3, [pc, #156]	; (800b314 <xPortStartScheduler+0x134>)
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	f1c3 0307 	rsb	r3, r3, #7
 800b27e:	2b04      	cmp	r3, #4
 800b280:	d00a      	beq.n	800b298 <xPortStartScheduler+0xb8>
	__asm volatile
 800b282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b286:	f383 8811 	msr	BASEPRI, r3
 800b28a:	f3bf 8f6f 	isb	sy
 800b28e:	f3bf 8f4f 	dsb	sy
 800b292:	60bb      	str	r3, [r7, #8]
}
 800b294:	bf00      	nop
 800b296:	e7fe      	b.n	800b296 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b298:	4b1e      	ldr	r3, [pc, #120]	; (800b314 <xPortStartScheduler+0x134>)
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	021b      	lsls	r3, r3, #8
 800b29e:	4a1d      	ldr	r2, [pc, #116]	; (800b314 <xPortStartScheduler+0x134>)
 800b2a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b2a2:	4b1c      	ldr	r3, [pc, #112]	; (800b314 <xPortStartScheduler+0x134>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b2aa:	4a1a      	ldr	r2, [pc, #104]	; (800b314 <xPortStartScheduler+0x134>)
 800b2ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	b2da      	uxtb	r2, r3
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b2b6:	4b18      	ldr	r3, [pc, #96]	; (800b318 <xPortStartScheduler+0x138>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	4a17      	ldr	r2, [pc, #92]	; (800b318 <xPortStartScheduler+0x138>)
 800b2bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b2c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b2c2:	4b15      	ldr	r3, [pc, #84]	; (800b318 <xPortStartScheduler+0x138>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	4a14      	ldr	r2, [pc, #80]	; (800b318 <xPortStartScheduler+0x138>)
 800b2c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b2cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b2ce:	f000 f8dd 	bl	800b48c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b2d2:	4b12      	ldr	r3, [pc, #72]	; (800b31c <xPortStartScheduler+0x13c>)
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b2d8:	f000 f8fc 	bl	800b4d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b2dc:	4b10      	ldr	r3, [pc, #64]	; (800b320 <xPortStartScheduler+0x140>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	4a0f      	ldr	r2, [pc, #60]	; (800b320 <xPortStartScheduler+0x140>)
 800b2e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b2e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b2e8:	f7ff ff66 	bl	800b1b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b2ec:	f7fe ffb0 	bl	800a250 <vTaskSwitchContext>
	prvTaskExitError();
 800b2f0:	f7ff ff22 	bl	800b138 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b2f4:	2300      	movs	r3, #0
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3718      	adds	r7, #24
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}
 800b2fe:	bf00      	nop
 800b300:	e000ed00 	.word	0xe000ed00
 800b304:	410fc271 	.word	0x410fc271
 800b308:	410fc270 	.word	0x410fc270
 800b30c:	e000e400 	.word	0xe000e400
 800b310:	20001238 	.word	0x20001238
 800b314:	2000123c 	.word	0x2000123c
 800b318:	e000ed20 	.word	0xe000ed20
 800b31c:	2000000c 	.word	0x2000000c
 800b320:	e000ef34 	.word	0xe000ef34

0800b324 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b324:	b480      	push	{r7}
 800b326:	b083      	sub	sp, #12
 800b328:	af00      	add	r7, sp, #0
	__asm volatile
 800b32a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b32e:	f383 8811 	msr	BASEPRI, r3
 800b332:	f3bf 8f6f 	isb	sy
 800b336:	f3bf 8f4f 	dsb	sy
 800b33a:	607b      	str	r3, [r7, #4]
}
 800b33c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b33e:	4b0f      	ldr	r3, [pc, #60]	; (800b37c <vPortEnterCritical+0x58>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	3301      	adds	r3, #1
 800b344:	4a0d      	ldr	r2, [pc, #52]	; (800b37c <vPortEnterCritical+0x58>)
 800b346:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b348:	4b0c      	ldr	r3, [pc, #48]	; (800b37c <vPortEnterCritical+0x58>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	2b01      	cmp	r3, #1
 800b34e:	d10f      	bne.n	800b370 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b350:	4b0b      	ldr	r3, [pc, #44]	; (800b380 <vPortEnterCritical+0x5c>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	b2db      	uxtb	r3, r3
 800b356:	2b00      	cmp	r3, #0
 800b358:	d00a      	beq.n	800b370 <vPortEnterCritical+0x4c>
	__asm volatile
 800b35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b35e:	f383 8811 	msr	BASEPRI, r3
 800b362:	f3bf 8f6f 	isb	sy
 800b366:	f3bf 8f4f 	dsb	sy
 800b36a:	603b      	str	r3, [r7, #0]
}
 800b36c:	bf00      	nop
 800b36e:	e7fe      	b.n	800b36e <vPortEnterCritical+0x4a>
	}
}
 800b370:	bf00      	nop
 800b372:	370c      	adds	r7, #12
 800b374:	46bd      	mov	sp, r7
 800b376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37a:	4770      	bx	lr
 800b37c:	2000000c 	.word	0x2000000c
 800b380:	e000ed04 	.word	0xe000ed04

0800b384 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b384:	b480      	push	{r7}
 800b386:	b083      	sub	sp, #12
 800b388:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b38a:	4b12      	ldr	r3, [pc, #72]	; (800b3d4 <vPortExitCritical+0x50>)
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d10a      	bne.n	800b3a8 <vPortExitCritical+0x24>
	__asm volatile
 800b392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b396:	f383 8811 	msr	BASEPRI, r3
 800b39a:	f3bf 8f6f 	isb	sy
 800b39e:	f3bf 8f4f 	dsb	sy
 800b3a2:	607b      	str	r3, [r7, #4]
}
 800b3a4:	bf00      	nop
 800b3a6:	e7fe      	b.n	800b3a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b3a8:	4b0a      	ldr	r3, [pc, #40]	; (800b3d4 <vPortExitCritical+0x50>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	3b01      	subs	r3, #1
 800b3ae:	4a09      	ldr	r2, [pc, #36]	; (800b3d4 <vPortExitCritical+0x50>)
 800b3b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b3b2:	4b08      	ldr	r3, [pc, #32]	; (800b3d4 <vPortExitCritical+0x50>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d105      	bne.n	800b3c6 <vPortExitCritical+0x42>
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	f383 8811 	msr	BASEPRI, r3
}
 800b3c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b3c6:	bf00      	nop
 800b3c8:	370c      	adds	r7, #12
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d0:	4770      	bx	lr
 800b3d2:	bf00      	nop
 800b3d4:	2000000c 	.word	0x2000000c
	...

0800b3e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b3e0:	f3ef 8009 	mrs	r0, PSP
 800b3e4:	f3bf 8f6f 	isb	sy
 800b3e8:	4b15      	ldr	r3, [pc, #84]	; (800b440 <pxCurrentTCBConst>)
 800b3ea:	681a      	ldr	r2, [r3, #0]
 800b3ec:	f01e 0f10 	tst.w	lr, #16
 800b3f0:	bf08      	it	eq
 800b3f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b3f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3fa:	6010      	str	r0, [r2, #0]
 800b3fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b400:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b404:	f380 8811 	msr	BASEPRI, r0
 800b408:	f3bf 8f4f 	dsb	sy
 800b40c:	f3bf 8f6f 	isb	sy
 800b410:	f7fe ff1e 	bl	800a250 <vTaskSwitchContext>
 800b414:	f04f 0000 	mov.w	r0, #0
 800b418:	f380 8811 	msr	BASEPRI, r0
 800b41c:	bc09      	pop	{r0, r3}
 800b41e:	6819      	ldr	r1, [r3, #0]
 800b420:	6808      	ldr	r0, [r1, #0]
 800b422:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b426:	f01e 0f10 	tst.w	lr, #16
 800b42a:	bf08      	it	eq
 800b42c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b430:	f380 8809 	msr	PSP, r0
 800b434:	f3bf 8f6f 	isb	sy
 800b438:	4770      	bx	lr
 800b43a:	bf00      	nop
 800b43c:	f3af 8000 	nop.w

0800b440 <pxCurrentTCBConst>:
 800b440:	20000fe8 	.word	0x20000fe8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b444:	bf00      	nop
 800b446:	bf00      	nop

0800b448 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b082      	sub	sp, #8
 800b44c:	af00      	add	r7, sp, #0
	__asm volatile
 800b44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b452:	f383 8811 	msr	BASEPRI, r3
 800b456:	f3bf 8f6f 	isb	sy
 800b45a:	f3bf 8f4f 	dsb	sy
 800b45e:	607b      	str	r3, [r7, #4]
}
 800b460:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b462:	f7fe fe37 	bl	800a0d4 <xTaskIncrementTick>
 800b466:	4603      	mov	r3, r0
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d003      	beq.n	800b474 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b46c:	4b06      	ldr	r3, [pc, #24]	; (800b488 <SysTick_Handler+0x40>)
 800b46e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b472:	601a      	str	r2, [r3, #0]
 800b474:	2300      	movs	r3, #0
 800b476:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	f383 8811 	msr	BASEPRI, r3
}
 800b47e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b480:	bf00      	nop
 800b482:	3708      	adds	r7, #8
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}
 800b488:	e000ed04 	.word	0xe000ed04

0800b48c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b48c:	b480      	push	{r7}
 800b48e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b490:	4b0b      	ldr	r3, [pc, #44]	; (800b4c0 <vPortSetupTimerInterrupt+0x34>)
 800b492:	2200      	movs	r2, #0
 800b494:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b496:	4b0b      	ldr	r3, [pc, #44]	; (800b4c4 <vPortSetupTimerInterrupt+0x38>)
 800b498:	2200      	movs	r2, #0
 800b49a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b49c:	4b0a      	ldr	r3, [pc, #40]	; (800b4c8 <vPortSetupTimerInterrupt+0x3c>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	4a0a      	ldr	r2, [pc, #40]	; (800b4cc <vPortSetupTimerInterrupt+0x40>)
 800b4a2:	fba2 2303 	umull	r2, r3, r2, r3
 800b4a6:	099b      	lsrs	r3, r3, #6
 800b4a8:	4a09      	ldr	r2, [pc, #36]	; (800b4d0 <vPortSetupTimerInterrupt+0x44>)
 800b4aa:	3b01      	subs	r3, #1
 800b4ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b4ae:	4b04      	ldr	r3, [pc, #16]	; (800b4c0 <vPortSetupTimerInterrupt+0x34>)
 800b4b0:	2207      	movs	r2, #7
 800b4b2:	601a      	str	r2, [r3, #0]
}
 800b4b4:	bf00      	nop
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4bc:	4770      	bx	lr
 800b4be:	bf00      	nop
 800b4c0:	e000e010 	.word	0xe000e010
 800b4c4:	e000e018 	.word	0xe000e018
 800b4c8:	20000000 	.word	0x20000000
 800b4cc:	10624dd3 	.word	0x10624dd3
 800b4d0:	e000e014 	.word	0xe000e014

0800b4d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b4d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b4e4 <vPortEnableVFP+0x10>
 800b4d8:	6801      	ldr	r1, [r0, #0]
 800b4da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b4de:	6001      	str	r1, [r0, #0]
 800b4e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b4e2:	bf00      	nop
 800b4e4:	e000ed88 	.word	0xe000ed88

0800b4e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b4e8:	b480      	push	{r7}
 800b4ea:	b085      	sub	sp, #20
 800b4ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b4ee:	f3ef 8305 	mrs	r3, IPSR
 800b4f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	2b0f      	cmp	r3, #15
 800b4f8:	d914      	bls.n	800b524 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b4fa:	4a17      	ldr	r2, [pc, #92]	; (800b558 <vPortValidateInterruptPriority+0x70>)
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	4413      	add	r3, r2
 800b500:	781b      	ldrb	r3, [r3, #0]
 800b502:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b504:	4b15      	ldr	r3, [pc, #84]	; (800b55c <vPortValidateInterruptPriority+0x74>)
 800b506:	781b      	ldrb	r3, [r3, #0]
 800b508:	7afa      	ldrb	r2, [r7, #11]
 800b50a:	429a      	cmp	r2, r3
 800b50c:	d20a      	bcs.n	800b524 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b512:	f383 8811 	msr	BASEPRI, r3
 800b516:	f3bf 8f6f 	isb	sy
 800b51a:	f3bf 8f4f 	dsb	sy
 800b51e:	607b      	str	r3, [r7, #4]
}
 800b520:	bf00      	nop
 800b522:	e7fe      	b.n	800b522 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b524:	4b0e      	ldr	r3, [pc, #56]	; (800b560 <vPortValidateInterruptPriority+0x78>)
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b52c:	4b0d      	ldr	r3, [pc, #52]	; (800b564 <vPortValidateInterruptPriority+0x7c>)
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	429a      	cmp	r2, r3
 800b532:	d90a      	bls.n	800b54a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b534:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b538:	f383 8811 	msr	BASEPRI, r3
 800b53c:	f3bf 8f6f 	isb	sy
 800b540:	f3bf 8f4f 	dsb	sy
 800b544:	603b      	str	r3, [r7, #0]
}
 800b546:	bf00      	nop
 800b548:	e7fe      	b.n	800b548 <vPortValidateInterruptPriority+0x60>
	}
 800b54a:	bf00      	nop
 800b54c:	3714      	adds	r7, #20
 800b54e:	46bd      	mov	sp, r7
 800b550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b554:	4770      	bx	lr
 800b556:	bf00      	nop
 800b558:	e000e3f0 	.word	0xe000e3f0
 800b55c:	20001238 	.word	0x20001238
 800b560:	e000ed0c 	.word	0xe000ed0c
 800b564:	2000123c 	.word	0x2000123c

0800b568 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b08a      	sub	sp, #40	; 0x28
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b570:	2300      	movs	r3, #0
 800b572:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b574:	f7fe fcf4 	bl	8009f60 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b578:	4b58      	ldr	r3, [pc, #352]	; (800b6dc <pvPortMalloc+0x174>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d101      	bne.n	800b584 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b580:	f000 f910 	bl	800b7a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b584:	4b56      	ldr	r3, [pc, #344]	; (800b6e0 <pvPortMalloc+0x178>)
 800b586:	681a      	ldr	r2, [r3, #0]
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	4013      	ands	r3, r2
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	f040 808e 	bne.w	800b6ae <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d01d      	beq.n	800b5d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b598:	2208      	movs	r2, #8
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	4413      	add	r3, r2
 800b59e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f003 0307 	and.w	r3, r3, #7
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d014      	beq.n	800b5d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f023 0307 	bic.w	r3, r3, #7
 800b5b0:	3308      	adds	r3, #8
 800b5b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f003 0307 	and.w	r3, r3, #7
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d00a      	beq.n	800b5d4 <pvPortMalloc+0x6c>
	__asm volatile
 800b5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c2:	f383 8811 	msr	BASEPRI, r3
 800b5c6:	f3bf 8f6f 	isb	sy
 800b5ca:	f3bf 8f4f 	dsb	sy
 800b5ce:	617b      	str	r3, [r7, #20]
}
 800b5d0:	bf00      	nop
 800b5d2:	e7fe      	b.n	800b5d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d069      	beq.n	800b6ae <pvPortMalloc+0x146>
 800b5da:	4b42      	ldr	r3, [pc, #264]	; (800b6e4 <pvPortMalloc+0x17c>)
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	687a      	ldr	r2, [r7, #4]
 800b5e0:	429a      	cmp	r2, r3
 800b5e2:	d864      	bhi.n	800b6ae <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b5e4:	4b40      	ldr	r3, [pc, #256]	; (800b6e8 <pvPortMalloc+0x180>)
 800b5e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b5e8:	4b3f      	ldr	r3, [pc, #252]	; (800b6e8 <pvPortMalloc+0x180>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b5ee:	e004      	b.n	800b5fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5fc:	685b      	ldr	r3, [r3, #4]
 800b5fe:	687a      	ldr	r2, [r7, #4]
 800b600:	429a      	cmp	r2, r3
 800b602:	d903      	bls.n	800b60c <pvPortMalloc+0xa4>
 800b604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d1f1      	bne.n	800b5f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b60c:	4b33      	ldr	r3, [pc, #204]	; (800b6dc <pvPortMalloc+0x174>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b612:	429a      	cmp	r2, r3
 800b614:	d04b      	beq.n	800b6ae <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b616:	6a3b      	ldr	r3, [r7, #32]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	2208      	movs	r2, #8
 800b61c:	4413      	add	r3, r2
 800b61e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b622:	681a      	ldr	r2, [r3, #0]
 800b624:	6a3b      	ldr	r3, [r7, #32]
 800b626:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b62a:	685a      	ldr	r2, [r3, #4]
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	1ad2      	subs	r2, r2, r3
 800b630:	2308      	movs	r3, #8
 800b632:	005b      	lsls	r3, r3, #1
 800b634:	429a      	cmp	r2, r3
 800b636:	d91f      	bls.n	800b678 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	4413      	add	r3, r2
 800b63e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b640:	69bb      	ldr	r3, [r7, #24]
 800b642:	f003 0307 	and.w	r3, r3, #7
 800b646:	2b00      	cmp	r3, #0
 800b648:	d00a      	beq.n	800b660 <pvPortMalloc+0xf8>
	__asm volatile
 800b64a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b64e:	f383 8811 	msr	BASEPRI, r3
 800b652:	f3bf 8f6f 	isb	sy
 800b656:	f3bf 8f4f 	dsb	sy
 800b65a:	613b      	str	r3, [r7, #16]
}
 800b65c:	bf00      	nop
 800b65e:	e7fe      	b.n	800b65e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b662:	685a      	ldr	r2, [r3, #4]
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	1ad2      	subs	r2, r2, r3
 800b668:	69bb      	ldr	r3, [r7, #24]
 800b66a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b66e:	687a      	ldr	r2, [r7, #4]
 800b670:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b672:	69b8      	ldr	r0, [r7, #24]
 800b674:	f000 f8f8 	bl	800b868 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b678:	4b1a      	ldr	r3, [pc, #104]	; (800b6e4 <pvPortMalloc+0x17c>)
 800b67a:	681a      	ldr	r2, [r3, #0]
 800b67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b67e:	685b      	ldr	r3, [r3, #4]
 800b680:	1ad3      	subs	r3, r2, r3
 800b682:	4a18      	ldr	r2, [pc, #96]	; (800b6e4 <pvPortMalloc+0x17c>)
 800b684:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b686:	4b17      	ldr	r3, [pc, #92]	; (800b6e4 <pvPortMalloc+0x17c>)
 800b688:	681a      	ldr	r2, [r3, #0]
 800b68a:	4b18      	ldr	r3, [pc, #96]	; (800b6ec <pvPortMalloc+0x184>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	429a      	cmp	r2, r3
 800b690:	d203      	bcs.n	800b69a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b692:	4b14      	ldr	r3, [pc, #80]	; (800b6e4 <pvPortMalloc+0x17c>)
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	4a15      	ldr	r2, [pc, #84]	; (800b6ec <pvPortMalloc+0x184>)
 800b698:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b69c:	685a      	ldr	r2, [r3, #4]
 800b69e:	4b10      	ldr	r3, [pc, #64]	; (800b6e0 <pvPortMalloc+0x178>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	431a      	orrs	r2, r3
 800b6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b6ae:	f7fe fc65 	bl	8009f7c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b6b2:	69fb      	ldr	r3, [r7, #28]
 800b6b4:	f003 0307 	and.w	r3, r3, #7
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d00a      	beq.n	800b6d2 <pvPortMalloc+0x16a>
	__asm volatile
 800b6bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6c0:	f383 8811 	msr	BASEPRI, r3
 800b6c4:	f3bf 8f6f 	isb	sy
 800b6c8:	f3bf 8f4f 	dsb	sy
 800b6cc:	60fb      	str	r3, [r7, #12]
}
 800b6ce:	bf00      	nop
 800b6d0:	e7fe      	b.n	800b6d0 <pvPortMalloc+0x168>
	return pvReturn;
 800b6d2:	69fb      	ldr	r3, [r7, #28]
}
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	3728      	adds	r7, #40	; 0x28
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	bd80      	pop	{r7, pc}
 800b6dc:	20002c48 	.word	0x20002c48
 800b6e0:	20002c54 	.word	0x20002c54
 800b6e4:	20002c4c 	.word	0x20002c4c
 800b6e8:	20002c40 	.word	0x20002c40
 800b6ec:	20002c50 	.word	0x20002c50

0800b6f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b086      	sub	sp, #24
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d048      	beq.n	800b794 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b702:	2308      	movs	r3, #8
 800b704:	425b      	negs	r3, r3
 800b706:	697a      	ldr	r2, [r7, #20]
 800b708:	4413      	add	r3, r2
 800b70a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b70c:	697b      	ldr	r3, [r7, #20]
 800b70e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b710:	693b      	ldr	r3, [r7, #16]
 800b712:	685a      	ldr	r2, [r3, #4]
 800b714:	4b21      	ldr	r3, [pc, #132]	; (800b79c <vPortFree+0xac>)
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	4013      	ands	r3, r2
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d10a      	bne.n	800b734 <vPortFree+0x44>
	__asm volatile
 800b71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b722:	f383 8811 	msr	BASEPRI, r3
 800b726:	f3bf 8f6f 	isb	sy
 800b72a:	f3bf 8f4f 	dsb	sy
 800b72e:	60fb      	str	r3, [r7, #12]
}
 800b730:	bf00      	nop
 800b732:	e7fe      	b.n	800b732 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b734:	693b      	ldr	r3, [r7, #16]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d00a      	beq.n	800b752 <vPortFree+0x62>
	__asm volatile
 800b73c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b740:	f383 8811 	msr	BASEPRI, r3
 800b744:	f3bf 8f6f 	isb	sy
 800b748:	f3bf 8f4f 	dsb	sy
 800b74c:	60bb      	str	r3, [r7, #8]
}
 800b74e:	bf00      	nop
 800b750:	e7fe      	b.n	800b750 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	685a      	ldr	r2, [r3, #4]
 800b756:	4b11      	ldr	r3, [pc, #68]	; (800b79c <vPortFree+0xac>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	4013      	ands	r3, r2
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d019      	beq.n	800b794 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b760:	693b      	ldr	r3, [r7, #16]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d115      	bne.n	800b794 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b768:	693b      	ldr	r3, [r7, #16]
 800b76a:	685a      	ldr	r2, [r3, #4]
 800b76c:	4b0b      	ldr	r3, [pc, #44]	; (800b79c <vPortFree+0xac>)
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	43db      	mvns	r3, r3
 800b772:	401a      	ands	r2, r3
 800b774:	693b      	ldr	r3, [r7, #16]
 800b776:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b778:	f7fe fbf2 	bl	8009f60 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b77c:	693b      	ldr	r3, [r7, #16]
 800b77e:	685a      	ldr	r2, [r3, #4]
 800b780:	4b07      	ldr	r3, [pc, #28]	; (800b7a0 <vPortFree+0xb0>)
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	4413      	add	r3, r2
 800b786:	4a06      	ldr	r2, [pc, #24]	; (800b7a0 <vPortFree+0xb0>)
 800b788:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b78a:	6938      	ldr	r0, [r7, #16]
 800b78c:	f000 f86c 	bl	800b868 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b790:	f7fe fbf4 	bl	8009f7c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b794:	bf00      	nop
 800b796:	3718      	adds	r7, #24
 800b798:	46bd      	mov	sp, r7
 800b79a:	bd80      	pop	{r7, pc}
 800b79c:	20002c54 	.word	0x20002c54
 800b7a0:	20002c4c 	.word	0x20002c4c

0800b7a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b7a4:	b480      	push	{r7}
 800b7a6:	b085      	sub	sp, #20
 800b7a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b7aa:	f44f 53d0 	mov.w	r3, #6656	; 0x1a00
 800b7ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b7b0:	4b27      	ldr	r3, [pc, #156]	; (800b850 <prvHeapInit+0xac>)
 800b7b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	f003 0307 	and.w	r3, r3, #7
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d00c      	beq.n	800b7d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	3307      	adds	r3, #7
 800b7c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	f023 0307 	bic.w	r3, r3, #7
 800b7ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b7cc:	68ba      	ldr	r2, [r7, #8]
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	1ad3      	subs	r3, r2, r3
 800b7d2:	4a1f      	ldr	r2, [pc, #124]	; (800b850 <prvHeapInit+0xac>)
 800b7d4:	4413      	add	r3, r2
 800b7d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b7dc:	4a1d      	ldr	r2, [pc, #116]	; (800b854 <prvHeapInit+0xb0>)
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b7e2:	4b1c      	ldr	r3, [pc, #112]	; (800b854 <prvHeapInit+0xb0>)
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	68ba      	ldr	r2, [r7, #8]
 800b7ec:	4413      	add	r3, r2
 800b7ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b7f0:	2208      	movs	r2, #8
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	1a9b      	subs	r3, r3, r2
 800b7f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	f023 0307 	bic.w	r3, r3, #7
 800b7fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	4a15      	ldr	r2, [pc, #84]	; (800b858 <prvHeapInit+0xb4>)
 800b804:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b806:	4b14      	ldr	r3, [pc, #80]	; (800b858 <prvHeapInit+0xb4>)
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	2200      	movs	r2, #0
 800b80c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b80e:	4b12      	ldr	r3, [pc, #72]	; (800b858 <prvHeapInit+0xb4>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	2200      	movs	r2, #0
 800b814:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	68fa      	ldr	r2, [r7, #12]
 800b81e:	1ad2      	subs	r2, r2, r3
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b824:	4b0c      	ldr	r3, [pc, #48]	; (800b858 <prvHeapInit+0xb4>)
 800b826:	681a      	ldr	r2, [r3, #0]
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	685b      	ldr	r3, [r3, #4]
 800b830:	4a0a      	ldr	r2, [pc, #40]	; (800b85c <prvHeapInit+0xb8>)
 800b832:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	685b      	ldr	r3, [r3, #4]
 800b838:	4a09      	ldr	r2, [pc, #36]	; (800b860 <prvHeapInit+0xbc>)
 800b83a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b83c:	4b09      	ldr	r3, [pc, #36]	; (800b864 <prvHeapInit+0xc0>)
 800b83e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b842:	601a      	str	r2, [r3, #0]
}
 800b844:	bf00      	nop
 800b846:	3714      	adds	r7, #20
 800b848:	46bd      	mov	sp, r7
 800b84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84e:	4770      	bx	lr
 800b850:	20001240 	.word	0x20001240
 800b854:	20002c40 	.word	0x20002c40
 800b858:	20002c48 	.word	0x20002c48
 800b85c:	20002c50 	.word	0x20002c50
 800b860:	20002c4c 	.word	0x20002c4c
 800b864:	20002c54 	.word	0x20002c54

0800b868 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b868:	b480      	push	{r7}
 800b86a:	b085      	sub	sp, #20
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b870:	4b28      	ldr	r3, [pc, #160]	; (800b914 <prvInsertBlockIntoFreeList+0xac>)
 800b872:	60fb      	str	r3, [r7, #12]
 800b874:	e002      	b.n	800b87c <prvInsertBlockIntoFreeList+0x14>
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	60fb      	str	r3, [r7, #12]
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	687a      	ldr	r2, [r7, #4]
 800b882:	429a      	cmp	r2, r3
 800b884:	d8f7      	bhi.n	800b876 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	685b      	ldr	r3, [r3, #4]
 800b88e:	68ba      	ldr	r2, [r7, #8]
 800b890:	4413      	add	r3, r2
 800b892:	687a      	ldr	r2, [r7, #4]
 800b894:	429a      	cmp	r2, r3
 800b896:	d108      	bne.n	800b8aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	685a      	ldr	r2, [r3, #4]
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	685b      	ldr	r3, [r3, #4]
 800b8a0:	441a      	add	r2, r3
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	685b      	ldr	r3, [r3, #4]
 800b8b2:	68ba      	ldr	r2, [r7, #8]
 800b8b4:	441a      	add	r2, r3
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	429a      	cmp	r2, r3
 800b8bc:	d118      	bne.n	800b8f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	681a      	ldr	r2, [r3, #0]
 800b8c2:	4b15      	ldr	r3, [pc, #84]	; (800b918 <prvInsertBlockIntoFreeList+0xb0>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	429a      	cmp	r2, r3
 800b8c8:	d00d      	beq.n	800b8e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	685a      	ldr	r2, [r3, #4]
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	685b      	ldr	r3, [r3, #4]
 800b8d4:	441a      	add	r2, r3
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	681a      	ldr	r2, [r3, #0]
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	601a      	str	r2, [r3, #0]
 800b8e4:	e008      	b.n	800b8f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b8e6:	4b0c      	ldr	r3, [pc, #48]	; (800b918 <prvInsertBlockIntoFreeList+0xb0>)
 800b8e8:	681a      	ldr	r2, [r3, #0]
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	601a      	str	r2, [r3, #0]
 800b8ee:	e003      	b.n	800b8f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	681a      	ldr	r2, [r3, #0]
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b8f8:	68fa      	ldr	r2, [r7, #12]
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	429a      	cmp	r2, r3
 800b8fe:	d002      	beq.n	800b906 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	687a      	ldr	r2, [r7, #4]
 800b904:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b906:	bf00      	nop
 800b908:	3714      	adds	r7, #20
 800b90a:	46bd      	mov	sp, r7
 800b90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b910:	4770      	bx	lr
 800b912:	bf00      	nop
 800b914:	20002c40 	.word	0x20002c40
 800b918:	20002c48 	.word	0x20002c48

0800b91c <__cvt>:
 800b91c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b920:	ec55 4b10 	vmov	r4, r5, d0
 800b924:	2d00      	cmp	r5, #0
 800b926:	460e      	mov	r6, r1
 800b928:	4619      	mov	r1, r3
 800b92a:	462b      	mov	r3, r5
 800b92c:	bfbb      	ittet	lt
 800b92e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b932:	461d      	movlt	r5, r3
 800b934:	2300      	movge	r3, #0
 800b936:	232d      	movlt	r3, #45	; 0x2d
 800b938:	700b      	strb	r3, [r1, #0]
 800b93a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b93c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b940:	4691      	mov	r9, r2
 800b942:	f023 0820 	bic.w	r8, r3, #32
 800b946:	bfbc      	itt	lt
 800b948:	4622      	movlt	r2, r4
 800b94a:	4614      	movlt	r4, r2
 800b94c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b950:	d005      	beq.n	800b95e <__cvt+0x42>
 800b952:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b956:	d100      	bne.n	800b95a <__cvt+0x3e>
 800b958:	3601      	adds	r6, #1
 800b95a:	2102      	movs	r1, #2
 800b95c:	e000      	b.n	800b960 <__cvt+0x44>
 800b95e:	2103      	movs	r1, #3
 800b960:	ab03      	add	r3, sp, #12
 800b962:	9301      	str	r3, [sp, #4]
 800b964:	ab02      	add	r3, sp, #8
 800b966:	9300      	str	r3, [sp, #0]
 800b968:	ec45 4b10 	vmov	d0, r4, r5
 800b96c:	4653      	mov	r3, sl
 800b96e:	4632      	mov	r2, r6
 800b970:	f000 fe62 	bl	800c638 <_dtoa_r>
 800b974:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b978:	4607      	mov	r7, r0
 800b97a:	d102      	bne.n	800b982 <__cvt+0x66>
 800b97c:	f019 0f01 	tst.w	r9, #1
 800b980:	d022      	beq.n	800b9c8 <__cvt+0xac>
 800b982:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b986:	eb07 0906 	add.w	r9, r7, r6
 800b98a:	d110      	bne.n	800b9ae <__cvt+0x92>
 800b98c:	783b      	ldrb	r3, [r7, #0]
 800b98e:	2b30      	cmp	r3, #48	; 0x30
 800b990:	d10a      	bne.n	800b9a8 <__cvt+0x8c>
 800b992:	2200      	movs	r2, #0
 800b994:	2300      	movs	r3, #0
 800b996:	4620      	mov	r0, r4
 800b998:	4629      	mov	r1, r5
 800b99a:	f7f5 f8a5 	bl	8000ae8 <__aeabi_dcmpeq>
 800b99e:	b918      	cbnz	r0, 800b9a8 <__cvt+0x8c>
 800b9a0:	f1c6 0601 	rsb	r6, r6, #1
 800b9a4:	f8ca 6000 	str.w	r6, [sl]
 800b9a8:	f8da 3000 	ldr.w	r3, [sl]
 800b9ac:	4499      	add	r9, r3
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	4620      	mov	r0, r4
 800b9b4:	4629      	mov	r1, r5
 800b9b6:	f7f5 f897 	bl	8000ae8 <__aeabi_dcmpeq>
 800b9ba:	b108      	cbz	r0, 800b9c0 <__cvt+0xa4>
 800b9bc:	f8cd 900c 	str.w	r9, [sp, #12]
 800b9c0:	2230      	movs	r2, #48	; 0x30
 800b9c2:	9b03      	ldr	r3, [sp, #12]
 800b9c4:	454b      	cmp	r3, r9
 800b9c6:	d307      	bcc.n	800b9d8 <__cvt+0xbc>
 800b9c8:	9b03      	ldr	r3, [sp, #12]
 800b9ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b9cc:	1bdb      	subs	r3, r3, r7
 800b9ce:	4638      	mov	r0, r7
 800b9d0:	6013      	str	r3, [r2, #0]
 800b9d2:	b004      	add	sp, #16
 800b9d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9d8:	1c59      	adds	r1, r3, #1
 800b9da:	9103      	str	r1, [sp, #12]
 800b9dc:	701a      	strb	r2, [r3, #0]
 800b9de:	e7f0      	b.n	800b9c2 <__cvt+0xa6>

0800b9e0 <__exponent>:
 800b9e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	2900      	cmp	r1, #0
 800b9e6:	bfb8      	it	lt
 800b9e8:	4249      	neglt	r1, r1
 800b9ea:	f803 2b02 	strb.w	r2, [r3], #2
 800b9ee:	bfb4      	ite	lt
 800b9f0:	222d      	movlt	r2, #45	; 0x2d
 800b9f2:	222b      	movge	r2, #43	; 0x2b
 800b9f4:	2909      	cmp	r1, #9
 800b9f6:	7042      	strb	r2, [r0, #1]
 800b9f8:	dd2a      	ble.n	800ba50 <__exponent+0x70>
 800b9fa:	f10d 0207 	add.w	r2, sp, #7
 800b9fe:	4617      	mov	r7, r2
 800ba00:	260a      	movs	r6, #10
 800ba02:	4694      	mov	ip, r2
 800ba04:	fb91 f5f6 	sdiv	r5, r1, r6
 800ba08:	fb06 1415 	mls	r4, r6, r5, r1
 800ba0c:	3430      	adds	r4, #48	; 0x30
 800ba0e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800ba12:	460c      	mov	r4, r1
 800ba14:	2c63      	cmp	r4, #99	; 0x63
 800ba16:	f102 32ff 	add.w	r2, r2, #4294967295
 800ba1a:	4629      	mov	r1, r5
 800ba1c:	dcf1      	bgt.n	800ba02 <__exponent+0x22>
 800ba1e:	3130      	adds	r1, #48	; 0x30
 800ba20:	f1ac 0402 	sub.w	r4, ip, #2
 800ba24:	f802 1c01 	strb.w	r1, [r2, #-1]
 800ba28:	1c41      	adds	r1, r0, #1
 800ba2a:	4622      	mov	r2, r4
 800ba2c:	42ba      	cmp	r2, r7
 800ba2e:	d30a      	bcc.n	800ba46 <__exponent+0x66>
 800ba30:	f10d 0209 	add.w	r2, sp, #9
 800ba34:	eba2 020c 	sub.w	r2, r2, ip
 800ba38:	42bc      	cmp	r4, r7
 800ba3a:	bf88      	it	hi
 800ba3c:	2200      	movhi	r2, #0
 800ba3e:	4413      	add	r3, r2
 800ba40:	1a18      	subs	r0, r3, r0
 800ba42:	b003      	add	sp, #12
 800ba44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba46:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ba4a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800ba4e:	e7ed      	b.n	800ba2c <__exponent+0x4c>
 800ba50:	2330      	movs	r3, #48	; 0x30
 800ba52:	3130      	adds	r1, #48	; 0x30
 800ba54:	7083      	strb	r3, [r0, #2]
 800ba56:	70c1      	strb	r1, [r0, #3]
 800ba58:	1d03      	adds	r3, r0, #4
 800ba5a:	e7f1      	b.n	800ba40 <__exponent+0x60>

0800ba5c <_printf_float>:
 800ba5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba60:	ed2d 8b02 	vpush	{d8}
 800ba64:	b08d      	sub	sp, #52	; 0x34
 800ba66:	460c      	mov	r4, r1
 800ba68:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ba6c:	4616      	mov	r6, r2
 800ba6e:	461f      	mov	r7, r3
 800ba70:	4605      	mov	r5, r0
 800ba72:	f000 fcd5 	bl	800c420 <_localeconv_r>
 800ba76:	f8d0 a000 	ldr.w	sl, [r0]
 800ba7a:	4650      	mov	r0, sl
 800ba7c:	f7f4 fc08 	bl	8000290 <strlen>
 800ba80:	2300      	movs	r3, #0
 800ba82:	930a      	str	r3, [sp, #40]	; 0x28
 800ba84:	6823      	ldr	r3, [r4, #0]
 800ba86:	9305      	str	r3, [sp, #20]
 800ba88:	f8d8 3000 	ldr.w	r3, [r8]
 800ba8c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ba90:	3307      	adds	r3, #7
 800ba92:	f023 0307 	bic.w	r3, r3, #7
 800ba96:	f103 0208 	add.w	r2, r3, #8
 800ba9a:	f8c8 2000 	str.w	r2, [r8]
 800ba9e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800baa2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800baa6:	9307      	str	r3, [sp, #28]
 800baa8:	f8cd 8018 	str.w	r8, [sp, #24]
 800baac:	ee08 0a10 	vmov	s16, r0
 800bab0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800bab4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bab8:	4b9e      	ldr	r3, [pc, #632]	; (800bd34 <_printf_float+0x2d8>)
 800baba:	f04f 32ff 	mov.w	r2, #4294967295
 800babe:	f7f5 f845 	bl	8000b4c <__aeabi_dcmpun>
 800bac2:	bb88      	cbnz	r0, 800bb28 <_printf_float+0xcc>
 800bac4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bac8:	4b9a      	ldr	r3, [pc, #616]	; (800bd34 <_printf_float+0x2d8>)
 800baca:	f04f 32ff 	mov.w	r2, #4294967295
 800bace:	f7f5 f81f 	bl	8000b10 <__aeabi_dcmple>
 800bad2:	bb48      	cbnz	r0, 800bb28 <_printf_float+0xcc>
 800bad4:	2200      	movs	r2, #0
 800bad6:	2300      	movs	r3, #0
 800bad8:	4640      	mov	r0, r8
 800bada:	4649      	mov	r1, r9
 800badc:	f7f5 f80e 	bl	8000afc <__aeabi_dcmplt>
 800bae0:	b110      	cbz	r0, 800bae8 <_printf_float+0x8c>
 800bae2:	232d      	movs	r3, #45	; 0x2d
 800bae4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bae8:	4a93      	ldr	r2, [pc, #588]	; (800bd38 <_printf_float+0x2dc>)
 800baea:	4b94      	ldr	r3, [pc, #592]	; (800bd3c <_printf_float+0x2e0>)
 800baec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800baf0:	bf94      	ite	ls
 800baf2:	4690      	movls	r8, r2
 800baf4:	4698      	movhi	r8, r3
 800baf6:	2303      	movs	r3, #3
 800baf8:	6123      	str	r3, [r4, #16]
 800bafa:	9b05      	ldr	r3, [sp, #20]
 800bafc:	f023 0304 	bic.w	r3, r3, #4
 800bb00:	6023      	str	r3, [r4, #0]
 800bb02:	f04f 0900 	mov.w	r9, #0
 800bb06:	9700      	str	r7, [sp, #0]
 800bb08:	4633      	mov	r3, r6
 800bb0a:	aa0b      	add	r2, sp, #44	; 0x2c
 800bb0c:	4621      	mov	r1, r4
 800bb0e:	4628      	mov	r0, r5
 800bb10:	f000 f9da 	bl	800bec8 <_printf_common>
 800bb14:	3001      	adds	r0, #1
 800bb16:	f040 8090 	bne.w	800bc3a <_printf_float+0x1de>
 800bb1a:	f04f 30ff 	mov.w	r0, #4294967295
 800bb1e:	b00d      	add	sp, #52	; 0x34
 800bb20:	ecbd 8b02 	vpop	{d8}
 800bb24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb28:	4642      	mov	r2, r8
 800bb2a:	464b      	mov	r3, r9
 800bb2c:	4640      	mov	r0, r8
 800bb2e:	4649      	mov	r1, r9
 800bb30:	f7f5 f80c 	bl	8000b4c <__aeabi_dcmpun>
 800bb34:	b140      	cbz	r0, 800bb48 <_printf_float+0xec>
 800bb36:	464b      	mov	r3, r9
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	bfbc      	itt	lt
 800bb3c:	232d      	movlt	r3, #45	; 0x2d
 800bb3e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bb42:	4a7f      	ldr	r2, [pc, #508]	; (800bd40 <_printf_float+0x2e4>)
 800bb44:	4b7f      	ldr	r3, [pc, #508]	; (800bd44 <_printf_float+0x2e8>)
 800bb46:	e7d1      	b.n	800baec <_printf_float+0x90>
 800bb48:	6863      	ldr	r3, [r4, #4]
 800bb4a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800bb4e:	9206      	str	r2, [sp, #24]
 800bb50:	1c5a      	adds	r2, r3, #1
 800bb52:	d13f      	bne.n	800bbd4 <_printf_float+0x178>
 800bb54:	2306      	movs	r3, #6
 800bb56:	6063      	str	r3, [r4, #4]
 800bb58:	9b05      	ldr	r3, [sp, #20]
 800bb5a:	6861      	ldr	r1, [r4, #4]
 800bb5c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bb60:	2300      	movs	r3, #0
 800bb62:	9303      	str	r3, [sp, #12]
 800bb64:	ab0a      	add	r3, sp, #40	; 0x28
 800bb66:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bb6a:	ab09      	add	r3, sp, #36	; 0x24
 800bb6c:	ec49 8b10 	vmov	d0, r8, r9
 800bb70:	9300      	str	r3, [sp, #0]
 800bb72:	6022      	str	r2, [r4, #0]
 800bb74:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bb78:	4628      	mov	r0, r5
 800bb7a:	f7ff fecf 	bl	800b91c <__cvt>
 800bb7e:	9b06      	ldr	r3, [sp, #24]
 800bb80:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bb82:	2b47      	cmp	r3, #71	; 0x47
 800bb84:	4680      	mov	r8, r0
 800bb86:	d108      	bne.n	800bb9a <_printf_float+0x13e>
 800bb88:	1cc8      	adds	r0, r1, #3
 800bb8a:	db02      	blt.n	800bb92 <_printf_float+0x136>
 800bb8c:	6863      	ldr	r3, [r4, #4]
 800bb8e:	4299      	cmp	r1, r3
 800bb90:	dd41      	ble.n	800bc16 <_printf_float+0x1ba>
 800bb92:	f1ab 0302 	sub.w	r3, fp, #2
 800bb96:	fa5f fb83 	uxtb.w	fp, r3
 800bb9a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bb9e:	d820      	bhi.n	800bbe2 <_printf_float+0x186>
 800bba0:	3901      	subs	r1, #1
 800bba2:	465a      	mov	r2, fp
 800bba4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bba8:	9109      	str	r1, [sp, #36]	; 0x24
 800bbaa:	f7ff ff19 	bl	800b9e0 <__exponent>
 800bbae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bbb0:	1813      	adds	r3, r2, r0
 800bbb2:	2a01      	cmp	r2, #1
 800bbb4:	4681      	mov	r9, r0
 800bbb6:	6123      	str	r3, [r4, #16]
 800bbb8:	dc02      	bgt.n	800bbc0 <_printf_float+0x164>
 800bbba:	6822      	ldr	r2, [r4, #0]
 800bbbc:	07d2      	lsls	r2, r2, #31
 800bbbe:	d501      	bpl.n	800bbc4 <_printf_float+0x168>
 800bbc0:	3301      	adds	r3, #1
 800bbc2:	6123      	str	r3, [r4, #16]
 800bbc4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d09c      	beq.n	800bb06 <_printf_float+0xaa>
 800bbcc:	232d      	movs	r3, #45	; 0x2d
 800bbce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bbd2:	e798      	b.n	800bb06 <_printf_float+0xaa>
 800bbd4:	9a06      	ldr	r2, [sp, #24]
 800bbd6:	2a47      	cmp	r2, #71	; 0x47
 800bbd8:	d1be      	bne.n	800bb58 <_printf_float+0xfc>
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d1bc      	bne.n	800bb58 <_printf_float+0xfc>
 800bbde:	2301      	movs	r3, #1
 800bbe0:	e7b9      	b.n	800bb56 <_printf_float+0xfa>
 800bbe2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bbe6:	d118      	bne.n	800bc1a <_printf_float+0x1be>
 800bbe8:	2900      	cmp	r1, #0
 800bbea:	6863      	ldr	r3, [r4, #4]
 800bbec:	dd0b      	ble.n	800bc06 <_printf_float+0x1aa>
 800bbee:	6121      	str	r1, [r4, #16]
 800bbf0:	b913      	cbnz	r3, 800bbf8 <_printf_float+0x19c>
 800bbf2:	6822      	ldr	r2, [r4, #0]
 800bbf4:	07d0      	lsls	r0, r2, #31
 800bbf6:	d502      	bpl.n	800bbfe <_printf_float+0x1a2>
 800bbf8:	3301      	adds	r3, #1
 800bbfa:	440b      	add	r3, r1
 800bbfc:	6123      	str	r3, [r4, #16]
 800bbfe:	65a1      	str	r1, [r4, #88]	; 0x58
 800bc00:	f04f 0900 	mov.w	r9, #0
 800bc04:	e7de      	b.n	800bbc4 <_printf_float+0x168>
 800bc06:	b913      	cbnz	r3, 800bc0e <_printf_float+0x1b2>
 800bc08:	6822      	ldr	r2, [r4, #0]
 800bc0a:	07d2      	lsls	r2, r2, #31
 800bc0c:	d501      	bpl.n	800bc12 <_printf_float+0x1b6>
 800bc0e:	3302      	adds	r3, #2
 800bc10:	e7f4      	b.n	800bbfc <_printf_float+0x1a0>
 800bc12:	2301      	movs	r3, #1
 800bc14:	e7f2      	b.n	800bbfc <_printf_float+0x1a0>
 800bc16:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800bc1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc1c:	4299      	cmp	r1, r3
 800bc1e:	db05      	blt.n	800bc2c <_printf_float+0x1d0>
 800bc20:	6823      	ldr	r3, [r4, #0]
 800bc22:	6121      	str	r1, [r4, #16]
 800bc24:	07d8      	lsls	r0, r3, #31
 800bc26:	d5ea      	bpl.n	800bbfe <_printf_float+0x1a2>
 800bc28:	1c4b      	adds	r3, r1, #1
 800bc2a:	e7e7      	b.n	800bbfc <_printf_float+0x1a0>
 800bc2c:	2900      	cmp	r1, #0
 800bc2e:	bfd4      	ite	le
 800bc30:	f1c1 0202 	rsble	r2, r1, #2
 800bc34:	2201      	movgt	r2, #1
 800bc36:	4413      	add	r3, r2
 800bc38:	e7e0      	b.n	800bbfc <_printf_float+0x1a0>
 800bc3a:	6823      	ldr	r3, [r4, #0]
 800bc3c:	055a      	lsls	r2, r3, #21
 800bc3e:	d407      	bmi.n	800bc50 <_printf_float+0x1f4>
 800bc40:	6923      	ldr	r3, [r4, #16]
 800bc42:	4642      	mov	r2, r8
 800bc44:	4631      	mov	r1, r6
 800bc46:	4628      	mov	r0, r5
 800bc48:	47b8      	blx	r7
 800bc4a:	3001      	adds	r0, #1
 800bc4c:	d12c      	bne.n	800bca8 <_printf_float+0x24c>
 800bc4e:	e764      	b.n	800bb1a <_printf_float+0xbe>
 800bc50:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bc54:	f240 80e0 	bls.w	800be18 <_printf_float+0x3bc>
 800bc58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	2300      	movs	r3, #0
 800bc60:	f7f4 ff42 	bl	8000ae8 <__aeabi_dcmpeq>
 800bc64:	2800      	cmp	r0, #0
 800bc66:	d034      	beq.n	800bcd2 <_printf_float+0x276>
 800bc68:	4a37      	ldr	r2, [pc, #220]	; (800bd48 <_printf_float+0x2ec>)
 800bc6a:	2301      	movs	r3, #1
 800bc6c:	4631      	mov	r1, r6
 800bc6e:	4628      	mov	r0, r5
 800bc70:	47b8      	blx	r7
 800bc72:	3001      	adds	r0, #1
 800bc74:	f43f af51 	beq.w	800bb1a <_printf_float+0xbe>
 800bc78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bc7c:	429a      	cmp	r2, r3
 800bc7e:	db02      	blt.n	800bc86 <_printf_float+0x22a>
 800bc80:	6823      	ldr	r3, [r4, #0]
 800bc82:	07d8      	lsls	r0, r3, #31
 800bc84:	d510      	bpl.n	800bca8 <_printf_float+0x24c>
 800bc86:	ee18 3a10 	vmov	r3, s16
 800bc8a:	4652      	mov	r2, sl
 800bc8c:	4631      	mov	r1, r6
 800bc8e:	4628      	mov	r0, r5
 800bc90:	47b8      	blx	r7
 800bc92:	3001      	adds	r0, #1
 800bc94:	f43f af41 	beq.w	800bb1a <_printf_float+0xbe>
 800bc98:	f04f 0800 	mov.w	r8, #0
 800bc9c:	f104 091a 	add.w	r9, r4, #26
 800bca0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bca2:	3b01      	subs	r3, #1
 800bca4:	4543      	cmp	r3, r8
 800bca6:	dc09      	bgt.n	800bcbc <_printf_float+0x260>
 800bca8:	6823      	ldr	r3, [r4, #0]
 800bcaa:	079b      	lsls	r3, r3, #30
 800bcac:	f100 8107 	bmi.w	800bebe <_printf_float+0x462>
 800bcb0:	68e0      	ldr	r0, [r4, #12]
 800bcb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bcb4:	4298      	cmp	r0, r3
 800bcb6:	bfb8      	it	lt
 800bcb8:	4618      	movlt	r0, r3
 800bcba:	e730      	b.n	800bb1e <_printf_float+0xc2>
 800bcbc:	2301      	movs	r3, #1
 800bcbe:	464a      	mov	r2, r9
 800bcc0:	4631      	mov	r1, r6
 800bcc2:	4628      	mov	r0, r5
 800bcc4:	47b8      	blx	r7
 800bcc6:	3001      	adds	r0, #1
 800bcc8:	f43f af27 	beq.w	800bb1a <_printf_float+0xbe>
 800bccc:	f108 0801 	add.w	r8, r8, #1
 800bcd0:	e7e6      	b.n	800bca0 <_printf_float+0x244>
 800bcd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	dc39      	bgt.n	800bd4c <_printf_float+0x2f0>
 800bcd8:	4a1b      	ldr	r2, [pc, #108]	; (800bd48 <_printf_float+0x2ec>)
 800bcda:	2301      	movs	r3, #1
 800bcdc:	4631      	mov	r1, r6
 800bcde:	4628      	mov	r0, r5
 800bce0:	47b8      	blx	r7
 800bce2:	3001      	adds	r0, #1
 800bce4:	f43f af19 	beq.w	800bb1a <_printf_float+0xbe>
 800bce8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800bcec:	4313      	orrs	r3, r2
 800bcee:	d102      	bne.n	800bcf6 <_printf_float+0x29a>
 800bcf0:	6823      	ldr	r3, [r4, #0]
 800bcf2:	07d9      	lsls	r1, r3, #31
 800bcf4:	d5d8      	bpl.n	800bca8 <_printf_float+0x24c>
 800bcf6:	ee18 3a10 	vmov	r3, s16
 800bcfa:	4652      	mov	r2, sl
 800bcfc:	4631      	mov	r1, r6
 800bcfe:	4628      	mov	r0, r5
 800bd00:	47b8      	blx	r7
 800bd02:	3001      	adds	r0, #1
 800bd04:	f43f af09 	beq.w	800bb1a <_printf_float+0xbe>
 800bd08:	f04f 0900 	mov.w	r9, #0
 800bd0c:	f104 0a1a 	add.w	sl, r4, #26
 800bd10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd12:	425b      	negs	r3, r3
 800bd14:	454b      	cmp	r3, r9
 800bd16:	dc01      	bgt.n	800bd1c <_printf_float+0x2c0>
 800bd18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd1a:	e792      	b.n	800bc42 <_printf_float+0x1e6>
 800bd1c:	2301      	movs	r3, #1
 800bd1e:	4652      	mov	r2, sl
 800bd20:	4631      	mov	r1, r6
 800bd22:	4628      	mov	r0, r5
 800bd24:	47b8      	blx	r7
 800bd26:	3001      	adds	r0, #1
 800bd28:	f43f aef7 	beq.w	800bb1a <_printf_float+0xbe>
 800bd2c:	f109 0901 	add.w	r9, r9, #1
 800bd30:	e7ee      	b.n	800bd10 <_printf_float+0x2b4>
 800bd32:	bf00      	nop
 800bd34:	7fefffff 	.word	0x7fefffff
 800bd38:	0800f94c 	.word	0x0800f94c
 800bd3c:	0800f950 	.word	0x0800f950
 800bd40:	0800f954 	.word	0x0800f954
 800bd44:	0800f958 	.word	0x0800f958
 800bd48:	0800f95c 	.word	0x0800f95c
 800bd4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bd50:	429a      	cmp	r2, r3
 800bd52:	bfa8      	it	ge
 800bd54:	461a      	movge	r2, r3
 800bd56:	2a00      	cmp	r2, #0
 800bd58:	4691      	mov	r9, r2
 800bd5a:	dc37      	bgt.n	800bdcc <_printf_float+0x370>
 800bd5c:	f04f 0b00 	mov.w	fp, #0
 800bd60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bd64:	f104 021a 	add.w	r2, r4, #26
 800bd68:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bd6a:	9305      	str	r3, [sp, #20]
 800bd6c:	eba3 0309 	sub.w	r3, r3, r9
 800bd70:	455b      	cmp	r3, fp
 800bd72:	dc33      	bgt.n	800bddc <_printf_float+0x380>
 800bd74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bd78:	429a      	cmp	r2, r3
 800bd7a:	db3b      	blt.n	800bdf4 <_printf_float+0x398>
 800bd7c:	6823      	ldr	r3, [r4, #0]
 800bd7e:	07da      	lsls	r2, r3, #31
 800bd80:	d438      	bmi.n	800bdf4 <_printf_float+0x398>
 800bd82:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800bd86:	eba2 0903 	sub.w	r9, r2, r3
 800bd8a:	9b05      	ldr	r3, [sp, #20]
 800bd8c:	1ad2      	subs	r2, r2, r3
 800bd8e:	4591      	cmp	r9, r2
 800bd90:	bfa8      	it	ge
 800bd92:	4691      	movge	r9, r2
 800bd94:	f1b9 0f00 	cmp.w	r9, #0
 800bd98:	dc35      	bgt.n	800be06 <_printf_float+0x3aa>
 800bd9a:	f04f 0800 	mov.w	r8, #0
 800bd9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bda2:	f104 0a1a 	add.w	sl, r4, #26
 800bda6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bdaa:	1a9b      	subs	r3, r3, r2
 800bdac:	eba3 0309 	sub.w	r3, r3, r9
 800bdb0:	4543      	cmp	r3, r8
 800bdb2:	f77f af79 	ble.w	800bca8 <_printf_float+0x24c>
 800bdb6:	2301      	movs	r3, #1
 800bdb8:	4652      	mov	r2, sl
 800bdba:	4631      	mov	r1, r6
 800bdbc:	4628      	mov	r0, r5
 800bdbe:	47b8      	blx	r7
 800bdc0:	3001      	adds	r0, #1
 800bdc2:	f43f aeaa 	beq.w	800bb1a <_printf_float+0xbe>
 800bdc6:	f108 0801 	add.w	r8, r8, #1
 800bdca:	e7ec      	b.n	800bda6 <_printf_float+0x34a>
 800bdcc:	4613      	mov	r3, r2
 800bdce:	4631      	mov	r1, r6
 800bdd0:	4642      	mov	r2, r8
 800bdd2:	4628      	mov	r0, r5
 800bdd4:	47b8      	blx	r7
 800bdd6:	3001      	adds	r0, #1
 800bdd8:	d1c0      	bne.n	800bd5c <_printf_float+0x300>
 800bdda:	e69e      	b.n	800bb1a <_printf_float+0xbe>
 800bddc:	2301      	movs	r3, #1
 800bdde:	4631      	mov	r1, r6
 800bde0:	4628      	mov	r0, r5
 800bde2:	9205      	str	r2, [sp, #20]
 800bde4:	47b8      	blx	r7
 800bde6:	3001      	adds	r0, #1
 800bde8:	f43f ae97 	beq.w	800bb1a <_printf_float+0xbe>
 800bdec:	9a05      	ldr	r2, [sp, #20]
 800bdee:	f10b 0b01 	add.w	fp, fp, #1
 800bdf2:	e7b9      	b.n	800bd68 <_printf_float+0x30c>
 800bdf4:	ee18 3a10 	vmov	r3, s16
 800bdf8:	4652      	mov	r2, sl
 800bdfa:	4631      	mov	r1, r6
 800bdfc:	4628      	mov	r0, r5
 800bdfe:	47b8      	blx	r7
 800be00:	3001      	adds	r0, #1
 800be02:	d1be      	bne.n	800bd82 <_printf_float+0x326>
 800be04:	e689      	b.n	800bb1a <_printf_float+0xbe>
 800be06:	9a05      	ldr	r2, [sp, #20]
 800be08:	464b      	mov	r3, r9
 800be0a:	4442      	add	r2, r8
 800be0c:	4631      	mov	r1, r6
 800be0e:	4628      	mov	r0, r5
 800be10:	47b8      	blx	r7
 800be12:	3001      	adds	r0, #1
 800be14:	d1c1      	bne.n	800bd9a <_printf_float+0x33e>
 800be16:	e680      	b.n	800bb1a <_printf_float+0xbe>
 800be18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800be1a:	2a01      	cmp	r2, #1
 800be1c:	dc01      	bgt.n	800be22 <_printf_float+0x3c6>
 800be1e:	07db      	lsls	r3, r3, #31
 800be20:	d53a      	bpl.n	800be98 <_printf_float+0x43c>
 800be22:	2301      	movs	r3, #1
 800be24:	4642      	mov	r2, r8
 800be26:	4631      	mov	r1, r6
 800be28:	4628      	mov	r0, r5
 800be2a:	47b8      	blx	r7
 800be2c:	3001      	adds	r0, #1
 800be2e:	f43f ae74 	beq.w	800bb1a <_printf_float+0xbe>
 800be32:	ee18 3a10 	vmov	r3, s16
 800be36:	4652      	mov	r2, sl
 800be38:	4631      	mov	r1, r6
 800be3a:	4628      	mov	r0, r5
 800be3c:	47b8      	blx	r7
 800be3e:	3001      	adds	r0, #1
 800be40:	f43f ae6b 	beq.w	800bb1a <_printf_float+0xbe>
 800be44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800be48:	2200      	movs	r2, #0
 800be4a:	2300      	movs	r3, #0
 800be4c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800be50:	f7f4 fe4a 	bl	8000ae8 <__aeabi_dcmpeq>
 800be54:	b9d8      	cbnz	r0, 800be8e <_printf_float+0x432>
 800be56:	f10a 33ff 	add.w	r3, sl, #4294967295
 800be5a:	f108 0201 	add.w	r2, r8, #1
 800be5e:	4631      	mov	r1, r6
 800be60:	4628      	mov	r0, r5
 800be62:	47b8      	blx	r7
 800be64:	3001      	adds	r0, #1
 800be66:	d10e      	bne.n	800be86 <_printf_float+0x42a>
 800be68:	e657      	b.n	800bb1a <_printf_float+0xbe>
 800be6a:	2301      	movs	r3, #1
 800be6c:	4652      	mov	r2, sl
 800be6e:	4631      	mov	r1, r6
 800be70:	4628      	mov	r0, r5
 800be72:	47b8      	blx	r7
 800be74:	3001      	adds	r0, #1
 800be76:	f43f ae50 	beq.w	800bb1a <_printf_float+0xbe>
 800be7a:	f108 0801 	add.w	r8, r8, #1
 800be7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be80:	3b01      	subs	r3, #1
 800be82:	4543      	cmp	r3, r8
 800be84:	dcf1      	bgt.n	800be6a <_printf_float+0x40e>
 800be86:	464b      	mov	r3, r9
 800be88:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800be8c:	e6da      	b.n	800bc44 <_printf_float+0x1e8>
 800be8e:	f04f 0800 	mov.w	r8, #0
 800be92:	f104 0a1a 	add.w	sl, r4, #26
 800be96:	e7f2      	b.n	800be7e <_printf_float+0x422>
 800be98:	2301      	movs	r3, #1
 800be9a:	4642      	mov	r2, r8
 800be9c:	e7df      	b.n	800be5e <_printf_float+0x402>
 800be9e:	2301      	movs	r3, #1
 800bea0:	464a      	mov	r2, r9
 800bea2:	4631      	mov	r1, r6
 800bea4:	4628      	mov	r0, r5
 800bea6:	47b8      	blx	r7
 800bea8:	3001      	adds	r0, #1
 800beaa:	f43f ae36 	beq.w	800bb1a <_printf_float+0xbe>
 800beae:	f108 0801 	add.w	r8, r8, #1
 800beb2:	68e3      	ldr	r3, [r4, #12]
 800beb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800beb6:	1a5b      	subs	r3, r3, r1
 800beb8:	4543      	cmp	r3, r8
 800beba:	dcf0      	bgt.n	800be9e <_printf_float+0x442>
 800bebc:	e6f8      	b.n	800bcb0 <_printf_float+0x254>
 800bebe:	f04f 0800 	mov.w	r8, #0
 800bec2:	f104 0919 	add.w	r9, r4, #25
 800bec6:	e7f4      	b.n	800beb2 <_printf_float+0x456>

0800bec8 <_printf_common>:
 800bec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800becc:	4616      	mov	r6, r2
 800bece:	4699      	mov	r9, r3
 800bed0:	688a      	ldr	r2, [r1, #8]
 800bed2:	690b      	ldr	r3, [r1, #16]
 800bed4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bed8:	4293      	cmp	r3, r2
 800beda:	bfb8      	it	lt
 800bedc:	4613      	movlt	r3, r2
 800bede:	6033      	str	r3, [r6, #0]
 800bee0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bee4:	4607      	mov	r7, r0
 800bee6:	460c      	mov	r4, r1
 800bee8:	b10a      	cbz	r2, 800beee <_printf_common+0x26>
 800beea:	3301      	adds	r3, #1
 800beec:	6033      	str	r3, [r6, #0]
 800beee:	6823      	ldr	r3, [r4, #0]
 800bef0:	0699      	lsls	r1, r3, #26
 800bef2:	bf42      	ittt	mi
 800bef4:	6833      	ldrmi	r3, [r6, #0]
 800bef6:	3302      	addmi	r3, #2
 800bef8:	6033      	strmi	r3, [r6, #0]
 800befa:	6825      	ldr	r5, [r4, #0]
 800befc:	f015 0506 	ands.w	r5, r5, #6
 800bf00:	d106      	bne.n	800bf10 <_printf_common+0x48>
 800bf02:	f104 0a19 	add.w	sl, r4, #25
 800bf06:	68e3      	ldr	r3, [r4, #12]
 800bf08:	6832      	ldr	r2, [r6, #0]
 800bf0a:	1a9b      	subs	r3, r3, r2
 800bf0c:	42ab      	cmp	r3, r5
 800bf0e:	dc26      	bgt.n	800bf5e <_printf_common+0x96>
 800bf10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bf14:	1e13      	subs	r3, r2, #0
 800bf16:	6822      	ldr	r2, [r4, #0]
 800bf18:	bf18      	it	ne
 800bf1a:	2301      	movne	r3, #1
 800bf1c:	0692      	lsls	r2, r2, #26
 800bf1e:	d42b      	bmi.n	800bf78 <_printf_common+0xb0>
 800bf20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bf24:	4649      	mov	r1, r9
 800bf26:	4638      	mov	r0, r7
 800bf28:	47c0      	blx	r8
 800bf2a:	3001      	adds	r0, #1
 800bf2c:	d01e      	beq.n	800bf6c <_printf_common+0xa4>
 800bf2e:	6823      	ldr	r3, [r4, #0]
 800bf30:	6922      	ldr	r2, [r4, #16]
 800bf32:	f003 0306 	and.w	r3, r3, #6
 800bf36:	2b04      	cmp	r3, #4
 800bf38:	bf02      	ittt	eq
 800bf3a:	68e5      	ldreq	r5, [r4, #12]
 800bf3c:	6833      	ldreq	r3, [r6, #0]
 800bf3e:	1aed      	subeq	r5, r5, r3
 800bf40:	68a3      	ldr	r3, [r4, #8]
 800bf42:	bf0c      	ite	eq
 800bf44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bf48:	2500      	movne	r5, #0
 800bf4a:	4293      	cmp	r3, r2
 800bf4c:	bfc4      	itt	gt
 800bf4e:	1a9b      	subgt	r3, r3, r2
 800bf50:	18ed      	addgt	r5, r5, r3
 800bf52:	2600      	movs	r6, #0
 800bf54:	341a      	adds	r4, #26
 800bf56:	42b5      	cmp	r5, r6
 800bf58:	d11a      	bne.n	800bf90 <_printf_common+0xc8>
 800bf5a:	2000      	movs	r0, #0
 800bf5c:	e008      	b.n	800bf70 <_printf_common+0xa8>
 800bf5e:	2301      	movs	r3, #1
 800bf60:	4652      	mov	r2, sl
 800bf62:	4649      	mov	r1, r9
 800bf64:	4638      	mov	r0, r7
 800bf66:	47c0      	blx	r8
 800bf68:	3001      	adds	r0, #1
 800bf6a:	d103      	bne.n	800bf74 <_printf_common+0xac>
 800bf6c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf74:	3501      	adds	r5, #1
 800bf76:	e7c6      	b.n	800bf06 <_printf_common+0x3e>
 800bf78:	18e1      	adds	r1, r4, r3
 800bf7a:	1c5a      	adds	r2, r3, #1
 800bf7c:	2030      	movs	r0, #48	; 0x30
 800bf7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bf82:	4422      	add	r2, r4
 800bf84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bf88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bf8c:	3302      	adds	r3, #2
 800bf8e:	e7c7      	b.n	800bf20 <_printf_common+0x58>
 800bf90:	2301      	movs	r3, #1
 800bf92:	4622      	mov	r2, r4
 800bf94:	4649      	mov	r1, r9
 800bf96:	4638      	mov	r0, r7
 800bf98:	47c0      	blx	r8
 800bf9a:	3001      	adds	r0, #1
 800bf9c:	d0e6      	beq.n	800bf6c <_printf_common+0xa4>
 800bf9e:	3601      	adds	r6, #1
 800bfa0:	e7d9      	b.n	800bf56 <_printf_common+0x8e>
	...

0800bfa4 <_printf_i>:
 800bfa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bfa8:	7e0f      	ldrb	r7, [r1, #24]
 800bfaa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bfac:	2f78      	cmp	r7, #120	; 0x78
 800bfae:	4691      	mov	r9, r2
 800bfb0:	4680      	mov	r8, r0
 800bfb2:	460c      	mov	r4, r1
 800bfb4:	469a      	mov	sl, r3
 800bfb6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bfba:	d807      	bhi.n	800bfcc <_printf_i+0x28>
 800bfbc:	2f62      	cmp	r7, #98	; 0x62
 800bfbe:	d80a      	bhi.n	800bfd6 <_printf_i+0x32>
 800bfc0:	2f00      	cmp	r7, #0
 800bfc2:	f000 80d4 	beq.w	800c16e <_printf_i+0x1ca>
 800bfc6:	2f58      	cmp	r7, #88	; 0x58
 800bfc8:	f000 80c0 	beq.w	800c14c <_printf_i+0x1a8>
 800bfcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bfd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bfd4:	e03a      	b.n	800c04c <_printf_i+0xa8>
 800bfd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bfda:	2b15      	cmp	r3, #21
 800bfdc:	d8f6      	bhi.n	800bfcc <_printf_i+0x28>
 800bfde:	a101      	add	r1, pc, #4	; (adr r1, 800bfe4 <_printf_i+0x40>)
 800bfe0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bfe4:	0800c03d 	.word	0x0800c03d
 800bfe8:	0800c051 	.word	0x0800c051
 800bfec:	0800bfcd 	.word	0x0800bfcd
 800bff0:	0800bfcd 	.word	0x0800bfcd
 800bff4:	0800bfcd 	.word	0x0800bfcd
 800bff8:	0800bfcd 	.word	0x0800bfcd
 800bffc:	0800c051 	.word	0x0800c051
 800c000:	0800bfcd 	.word	0x0800bfcd
 800c004:	0800bfcd 	.word	0x0800bfcd
 800c008:	0800bfcd 	.word	0x0800bfcd
 800c00c:	0800bfcd 	.word	0x0800bfcd
 800c010:	0800c155 	.word	0x0800c155
 800c014:	0800c07d 	.word	0x0800c07d
 800c018:	0800c10f 	.word	0x0800c10f
 800c01c:	0800bfcd 	.word	0x0800bfcd
 800c020:	0800bfcd 	.word	0x0800bfcd
 800c024:	0800c177 	.word	0x0800c177
 800c028:	0800bfcd 	.word	0x0800bfcd
 800c02c:	0800c07d 	.word	0x0800c07d
 800c030:	0800bfcd 	.word	0x0800bfcd
 800c034:	0800bfcd 	.word	0x0800bfcd
 800c038:	0800c117 	.word	0x0800c117
 800c03c:	682b      	ldr	r3, [r5, #0]
 800c03e:	1d1a      	adds	r2, r3, #4
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	602a      	str	r2, [r5, #0]
 800c044:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c048:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c04c:	2301      	movs	r3, #1
 800c04e:	e09f      	b.n	800c190 <_printf_i+0x1ec>
 800c050:	6820      	ldr	r0, [r4, #0]
 800c052:	682b      	ldr	r3, [r5, #0]
 800c054:	0607      	lsls	r7, r0, #24
 800c056:	f103 0104 	add.w	r1, r3, #4
 800c05a:	6029      	str	r1, [r5, #0]
 800c05c:	d501      	bpl.n	800c062 <_printf_i+0xbe>
 800c05e:	681e      	ldr	r6, [r3, #0]
 800c060:	e003      	b.n	800c06a <_printf_i+0xc6>
 800c062:	0646      	lsls	r6, r0, #25
 800c064:	d5fb      	bpl.n	800c05e <_printf_i+0xba>
 800c066:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c06a:	2e00      	cmp	r6, #0
 800c06c:	da03      	bge.n	800c076 <_printf_i+0xd2>
 800c06e:	232d      	movs	r3, #45	; 0x2d
 800c070:	4276      	negs	r6, r6
 800c072:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c076:	485a      	ldr	r0, [pc, #360]	; (800c1e0 <_printf_i+0x23c>)
 800c078:	230a      	movs	r3, #10
 800c07a:	e012      	b.n	800c0a2 <_printf_i+0xfe>
 800c07c:	682b      	ldr	r3, [r5, #0]
 800c07e:	6820      	ldr	r0, [r4, #0]
 800c080:	1d19      	adds	r1, r3, #4
 800c082:	6029      	str	r1, [r5, #0]
 800c084:	0605      	lsls	r5, r0, #24
 800c086:	d501      	bpl.n	800c08c <_printf_i+0xe8>
 800c088:	681e      	ldr	r6, [r3, #0]
 800c08a:	e002      	b.n	800c092 <_printf_i+0xee>
 800c08c:	0641      	lsls	r1, r0, #25
 800c08e:	d5fb      	bpl.n	800c088 <_printf_i+0xe4>
 800c090:	881e      	ldrh	r6, [r3, #0]
 800c092:	4853      	ldr	r0, [pc, #332]	; (800c1e0 <_printf_i+0x23c>)
 800c094:	2f6f      	cmp	r7, #111	; 0x6f
 800c096:	bf0c      	ite	eq
 800c098:	2308      	moveq	r3, #8
 800c09a:	230a      	movne	r3, #10
 800c09c:	2100      	movs	r1, #0
 800c09e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c0a2:	6865      	ldr	r5, [r4, #4]
 800c0a4:	60a5      	str	r5, [r4, #8]
 800c0a6:	2d00      	cmp	r5, #0
 800c0a8:	bfa2      	ittt	ge
 800c0aa:	6821      	ldrge	r1, [r4, #0]
 800c0ac:	f021 0104 	bicge.w	r1, r1, #4
 800c0b0:	6021      	strge	r1, [r4, #0]
 800c0b2:	b90e      	cbnz	r6, 800c0b8 <_printf_i+0x114>
 800c0b4:	2d00      	cmp	r5, #0
 800c0b6:	d04b      	beq.n	800c150 <_printf_i+0x1ac>
 800c0b8:	4615      	mov	r5, r2
 800c0ba:	fbb6 f1f3 	udiv	r1, r6, r3
 800c0be:	fb03 6711 	mls	r7, r3, r1, r6
 800c0c2:	5dc7      	ldrb	r7, [r0, r7]
 800c0c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c0c8:	4637      	mov	r7, r6
 800c0ca:	42bb      	cmp	r3, r7
 800c0cc:	460e      	mov	r6, r1
 800c0ce:	d9f4      	bls.n	800c0ba <_printf_i+0x116>
 800c0d0:	2b08      	cmp	r3, #8
 800c0d2:	d10b      	bne.n	800c0ec <_printf_i+0x148>
 800c0d4:	6823      	ldr	r3, [r4, #0]
 800c0d6:	07de      	lsls	r6, r3, #31
 800c0d8:	d508      	bpl.n	800c0ec <_printf_i+0x148>
 800c0da:	6923      	ldr	r3, [r4, #16]
 800c0dc:	6861      	ldr	r1, [r4, #4]
 800c0de:	4299      	cmp	r1, r3
 800c0e0:	bfde      	ittt	le
 800c0e2:	2330      	movle	r3, #48	; 0x30
 800c0e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c0e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c0ec:	1b52      	subs	r2, r2, r5
 800c0ee:	6122      	str	r2, [r4, #16]
 800c0f0:	f8cd a000 	str.w	sl, [sp]
 800c0f4:	464b      	mov	r3, r9
 800c0f6:	aa03      	add	r2, sp, #12
 800c0f8:	4621      	mov	r1, r4
 800c0fa:	4640      	mov	r0, r8
 800c0fc:	f7ff fee4 	bl	800bec8 <_printf_common>
 800c100:	3001      	adds	r0, #1
 800c102:	d14a      	bne.n	800c19a <_printf_i+0x1f6>
 800c104:	f04f 30ff 	mov.w	r0, #4294967295
 800c108:	b004      	add	sp, #16
 800c10a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c10e:	6823      	ldr	r3, [r4, #0]
 800c110:	f043 0320 	orr.w	r3, r3, #32
 800c114:	6023      	str	r3, [r4, #0]
 800c116:	4833      	ldr	r0, [pc, #204]	; (800c1e4 <_printf_i+0x240>)
 800c118:	2778      	movs	r7, #120	; 0x78
 800c11a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c11e:	6823      	ldr	r3, [r4, #0]
 800c120:	6829      	ldr	r1, [r5, #0]
 800c122:	061f      	lsls	r7, r3, #24
 800c124:	f851 6b04 	ldr.w	r6, [r1], #4
 800c128:	d402      	bmi.n	800c130 <_printf_i+0x18c>
 800c12a:	065f      	lsls	r7, r3, #25
 800c12c:	bf48      	it	mi
 800c12e:	b2b6      	uxthmi	r6, r6
 800c130:	07df      	lsls	r7, r3, #31
 800c132:	bf48      	it	mi
 800c134:	f043 0320 	orrmi.w	r3, r3, #32
 800c138:	6029      	str	r1, [r5, #0]
 800c13a:	bf48      	it	mi
 800c13c:	6023      	strmi	r3, [r4, #0]
 800c13e:	b91e      	cbnz	r6, 800c148 <_printf_i+0x1a4>
 800c140:	6823      	ldr	r3, [r4, #0]
 800c142:	f023 0320 	bic.w	r3, r3, #32
 800c146:	6023      	str	r3, [r4, #0]
 800c148:	2310      	movs	r3, #16
 800c14a:	e7a7      	b.n	800c09c <_printf_i+0xf8>
 800c14c:	4824      	ldr	r0, [pc, #144]	; (800c1e0 <_printf_i+0x23c>)
 800c14e:	e7e4      	b.n	800c11a <_printf_i+0x176>
 800c150:	4615      	mov	r5, r2
 800c152:	e7bd      	b.n	800c0d0 <_printf_i+0x12c>
 800c154:	682b      	ldr	r3, [r5, #0]
 800c156:	6826      	ldr	r6, [r4, #0]
 800c158:	6961      	ldr	r1, [r4, #20]
 800c15a:	1d18      	adds	r0, r3, #4
 800c15c:	6028      	str	r0, [r5, #0]
 800c15e:	0635      	lsls	r5, r6, #24
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	d501      	bpl.n	800c168 <_printf_i+0x1c4>
 800c164:	6019      	str	r1, [r3, #0]
 800c166:	e002      	b.n	800c16e <_printf_i+0x1ca>
 800c168:	0670      	lsls	r0, r6, #25
 800c16a:	d5fb      	bpl.n	800c164 <_printf_i+0x1c0>
 800c16c:	8019      	strh	r1, [r3, #0]
 800c16e:	2300      	movs	r3, #0
 800c170:	6123      	str	r3, [r4, #16]
 800c172:	4615      	mov	r5, r2
 800c174:	e7bc      	b.n	800c0f0 <_printf_i+0x14c>
 800c176:	682b      	ldr	r3, [r5, #0]
 800c178:	1d1a      	adds	r2, r3, #4
 800c17a:	602a      	str	r2, [r5, #0]
 800c17c:	681d      	ldr	r5, [r3, #0]
 800c17e:	6862      	ldr	r2, [r4, #4]
 800c180:	2100      	movs	r1, #0
 800c182:	4628      	mov	r0, r5
 800c184:	f7f4 f834 	bl	80001f0 <memchr>
 800c188:	b108      	cbz	r0, 800c18e <_printf_i+0x1ea>
 800c18a:	1b40      	subs	r0, r0, r5
 800c18c:	6060      	str	r0, [r4, #4]
 800c18e:	6863      	ldr	r3, [r4, #4]
 800c190:	6123      	str	r3, [r4, #16]
 800c192:	2300      	movs	r3, #0
 800c194:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c198:	e7aa      	b.n	800c0f0 <_printf_i+0x14c>
 800c19a:	6923      	ldr	r3, [r4, #16]
 800c19c:	462a      	mov	r2, r5
 800c19e:	4649      	mov	r1, r9
 800c1a0:	4640      	mov	r0, r8
 800c1a2:	47d0      	blx	sl
 800c1a4:	3001      	adds	r0, #1
 800c1a6:	d0ad      	beq.n	800c104 <_printf_i+0x160>
 800c1a8:	6823      	ldr	r3, [r4, #0]
 800c1aa:	079b      	lsls	r3, r3, #30
 800c1ac:	d413      	bmi.n	800c1d6 <_printf_i+0x232>
 800c1ae:	68e0      	ldr	r0, [r4, #12]
 800c1b0:	9b03      	ldr	r3, [sp, #12]
 800c1b2:	4298      	cmp	r0, r3
 800c1b4:	bfb8      	it	lt
 800c1b6:	4618      	movlt	r0, r3
 800c1b8:	e7a6      	b.n	800c108 <_printf_i+0x164>
 800c1ba:	2301      	movs	r3, #1
 800c1bc:	4632      	mov	r2, r6
 800c1be:	4649      	mov	r1, r9
 800c1c0:	4640      	mov	r0, r8
 800c1c2:	47d0      	blx	sl
 800c1c4:	3001      	adds	r0, #1
 800c1c6:	d09d      	beq.n	800c104 <_printf_i+0x160>
 800c1c8:	3501      	adds	r5, #1
 800c1ca:	68e3      	ldr	r3, [r4, #12]
 800c1cc:	9903      	ldr	r1, [sp, #12]
 800c1ce:	1a5b      	subs	r3, r3, r1
 800c1d0:	42ab      	cmp	r3, r5
 800c1d2:	dcf2      	bgt.n	800c1ba <_printf_i+0x216>
 800c1d4:	e7eb      	b.n	800c1ae <_printf_i+0x20a>
 800c1d6:	2500      	movs	r5, #0
 800c1d8:	f104 0619 	add.w	r6, r4, #25
 800c1dc:	e7f5      	b.n	800c1ca <_printf_i+0x226>
 800c1de:	bf00      	nop
 800c1e0:	0800f95e 	.word	0x0800f95e
 800c1e4:	0800f96f 	.word	0x0800f96f

0800c1e8 <std>:
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	b510      	push	{r4, lr}
 800c1ec:	4604      	mov	r4, r0
 800c1ee:	e9c0 3300 	strd	r3, r3, [r0]
 800c1f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c1f6:	6083      	str	r3, [r0, #8]
 800c1f8:	8181      	strh	r1, [r0, #12]
 800c1fa:	6643      	str	r3, [r0, #100]	; 0x64
 800c1fc:	81c2      	strh	r2, [r0, #14]
 800c1fe:	6183      	str	r3, [r0, #24]
 800c200:	4619      	mov	r1, r3
 800c202:	2208      	movs	r2, #8
 800c204:	305c      	adds	r0, #92	; 0x5c
 800c206:	f000 f902 	bl	800c40e <memset>
 800c20a:	4b05      	ldr	r3, [pc, #20]	; (800c220 <std+0x38>)
 800c20c:	6263      	str	r3, [r4, #36]	; 0x24
 800c20e:	4b05      	ldr	r3, [pc, #20]	; (800c224 <std+0x3c>)
 800c210:	62a3      	str	r3, [r4, #40]	; 0x28
 800c212:	4b05      	ldr	r3, [pc, #20]	; (800c228 <std+0x40>)
 800c214:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c216:	4b05      	ldr	r3, [pc, #20]	; (800c22c <std+0x44>)
 800c218:	6224      	str	r4, [r4, #32]
 800c21a:	6323      	str	r3, [r4, #48]	; 0x30
 800c21c:	bd10      	pop	{r4, pc}
 800c21e:	bf00      	nop
 800c220:	0800c389 	.word	0x0800c389
 800c224:	0800c3ab 	.word	0x0800c3ab
 800c228:	0800c3e3 	.word	0x0800c3e3
 800c22c:	0800c407 	.word	0x0800c407

0800c230 <stdio_exit_handler>:
 800c230:	4a02      	ldr	r2, [pc, #8]	; (800c23c <stdio_exit_handler+0xc>)
 800c232:	4903      	ldr	r1, [pc, #12]	; (800c240 <stdio_exit_handler+0x10>)
 800c234:	4803      	ldr	r0, [pc, #12]	; (800c244 <stdio_exit_handler+0x14>)
 800c236:	f000 b869 	b.w	800c30c <_fwalk_sglue>
 800c23a:	bf00      	nop
 800c23c:	20000010 	.word	0x20000010
 800c240:	0800ded1 	.word	0x0800ded1
 800c244:	2000001c 	.word	0x2000001c

0800c248 <cleanup_stdio>:
 800c248:	6841      	ldr	r1, [r0, #4]
 800c24a:	4b0c      	ldr	r3, [pc, #48]	; (800c27c <cleanup_stdio+0x34>)
 800c24c:	4299      	cmp	r1, r3
 800c24e:	b510      	push	{r4, lr}
 800c250:	4604      	mov	r4, r0
 800c252:	d001      	beq.n	800c258 <cleanup_stdio+0x10>
 800c254:	f001 fe3c 	bl	800ded0 <_fflush_r>
 800c258:	68a1      	ldr	r1, [r4, #8]
 800c25a:	4b09      	ldr	r3, [pc, #36]	; (800c280 <cleanup_stdio+0x38>)
 800c25c:	4299      	cmp	r1, r3
 800c25e:	d002      	beq.n	800c266 <cleanup_stdio+0x1e>
 800c260:	4620      	mov	r0, r4
 800c262:	f001 fe35 	bl	800ded0 <_fflush_r>
 800c266:	68e1      	ldr	r1, [r4, #12]
 800c268:	4b06      	ldr	r3, [pc, #24]	; (800c284 <cleanup_stdio+0x3c>)
 800c26a:	4299      	cmp	r1, r3
 800c26c:	d004      	beq.n	800c278 <cleanup_stdio+0x30>
 800c26e:	4620      	mov	r0, r4
 800c270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c274:	f001 be2c 	b.w	800ded0 <_fflush_r>
 800c278:	bd10      	pop	{r4, pc}
 800c27a:	bf00      	nop
 800c27c:	20002c58 	.word	0x20002c58
 800c280:	20002cc0 	.word	0x20002cc0
 800c284:	20002d28 	.word	0x20002d28

0800c288 <global_stdio_init.part.0>:
 800c288:	b510      	push	{r4, lr}
 800c28a:	4b0b      	ldr	r3, [pc, #44]	; (800c2b8 <global_stdio_init.part.0+0x30>)
 800c28c:	4c0b      	ldr	r4, [pc, #44]	; (800c2bc <global_stdio_init.part.0+0x34>)
 800c28e:	4a0c      	ldr	r2, [pc, #48]	; (800c2c0 <global_stdio_init.part.0+0x38>)
 800c290:	601a      	str	r2, [r3, #0]
 800c292:	4620      	mov	r0, r4
 800c294:	2200      	movs	r2, #0
 800c296:	2104      	movs	r1, #4
 800c298:	f7ff ffa6 	bl	800c1e8 <std>
 800c29c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c2a0:	2201      	movs	r2, #1
 800c2a2:	2109      	movs	r1, #9
 800c2a4:	f7ff ffa0 	bl	800c1e8 <std>
 800c2a8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c2ac:	2202      	movs	r2, #2
 800c2ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2b2:	2112      	movs	r1, #18
 800c2b4:	f7ff bf98 	b.w	800c1e8 <std>
 800c2b8:	20002d90 	.word	0x20002d90
 800c2bc:	20002c58 	.word	0x20002c58
 800c2c0:	0800c231 	.word	0x0800c231

0800c2c4 <__sfp_lock_acquire>:
 800c2c4:	4801      	ldr	r0, [pc, #4]	; (800c2cc <__sfp_lock_acquire+0x8>)
 800c2c6:	f000 b91f 	b.w	800c508 <__retarget_lock_acquire_recursive>
 800c2ca:	bf00      	nop
 800c2cc:	20002d99 	.word	0x20002d99

0800c2d0 <__sfp_lock_release>:
 800c2d0:	4801      	ldr	r0, [pc, #4]	; (800c2d8 <__sfp_lock_release+0x8>)
 800c2d2:	f000 b91a 	b.w	800c50a <__retarget_lock_release_recursive>
 800c2d6:	bf00      	nop
 800c2d8:	20002d99 	.word	0x20002d99

0800c2dc <__sinit>:
 800c2dc:	b510      	push	{r4, lr}
 800c2de:	4604      	mov	r4, r0
 800c2e0:	f7ff fff0 	bl	800c2c4 <__sfp_lock_acquire>
 800c2e4:	6a23      	ldr	r3, [r4, #32]
 800c2e6:	b11b      	cbz	r3, 800c2f0 <__sinit+0x14>
 800c2e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2ec:	f7ff bff0 	b.w	800c2d0 <__sfp_lock_release>
 800c2f0:	4b04      	ldr	r3, [pc, #16]	; (800c304 <__sinit+0x28>)
 800c2f2:	6223      	str	r3, [r4, #32]
 800c2f4:	4b04      	ldr	r3, [pc, #16]	; (800c308 <__sinit+0x2c>)
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d1f5      	bne.n	800c2e8 <__sinit+0xc>
 800c2fc:	f7ff ffc4 	bl	800c288 <global_stdio_init.part.0>
 800c300:	e7f2      	b.n	800c2e8 <__sinit+0xc>
 800c302:	bf00      	nop
 800c304:	0800c249 	.word	0x0800c249
 800c308:	20002d90 	.word	0x20002d90

0800c30c <_fwalk_sglue>:
 800c30c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c310:	4607      	mov	r7, r0
 800c312:	4688      	mov	r8, r1
 800c314:	4614      	mov	r4, r2
 800c316:	2600      	movs	r6, #0
 800c318:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c31c:	f1b9 0901 	subs.w	r9, r9, #1
 800c320:	d505      	bpl.n	800c32e <_fwalk_sglue+0x22>
 800c322:	6824      	ldr	r4, [r4, #0]
 800c324:	2c00      	cmp	r4, #0
 800c326:	d1f7      	bne.n	800c318 <_fwalk_sglue+0xc>
 800c328:	4630      	mov	r0, r6
 800c32a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c32e:	89ab      	ldrh	r3, [r5, #12]
 800c330:	2b01      	cmp	r3, #1
 800c332:	d907      	bls.n	800c344 <_fwalk_sglue+0x38>
 800c334:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c338:	3301      	adds	r3, #1
 800c33a:	d003      	beq.n	800c344 <_fwalk_sglue+0x38>
 800c33c:	4629      	mov	r1, r5
 800c33e:	4638      	mov	r0, r7
 800c340:	47c0      	blx	r8
 800c342:	4306      	orrs	r6, r0
 800c344:	3568      	adds	r5, #104	; 0x68
 800c346:	e7e9      	b.n	800c31c <_fwalk_sglue+0x10>

0800c348 <siprintf>:
 800c348:	b40e      	push	{r1, r2, r3}
 800c34a:	b500      	push	{lr}
 800c34c:	b09c      	sub	sp, #112	; 0x70
 800c34e:	ab1d      	add	r3, sp, #116	; 0x74
 800c350:	9002      	str	r0, [sp, #8]
 800c352:	9006      	str	r0, [sp, #24]
 800c354:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c358:	4809      	ldr	r0, [pc, #36]	; (800c380 <siprintf+0x38>)
 800c35a:	9107      	str	r1, [sp, #28]
 800c35c:	9104      	str	r1, [sp, #16]
 800c35e:	4909      	ldr	r1, [pc, #36]	; (800c384 <siprintf+0x3c>)
 800c360:	f853 2b04 	ldr.w	r2, [r3], #4
 800c364:	9105      	str	r1, [sp, #20]
 800c366:	6800      	ldr	r0, [r0, #0]
 800c368:	9301      	str	r3, [sp, #4]
 800c36a:	a902      	add	r1, sp, #8
 800c36c:	f001 fc2c 	bl	800dbc8 <_svfiprintf_r>
 800c370:	9b02      	ldr	r3, [sp, #8]
 800c372:	2200      	movs	r2, #0
 800c374:	701a      	strb	r2, [r3, #0]
 800c376:	b01c      	add	sp, #112	; 0x70
 800c378:	f85d eb04 	ldr.w	lr, [sp], #4
 800c37c:	b003      	add	sp, #12
 800c37e:	4770      	bx	lr
 800c380:	20000068 	.word	0x20000068
 800c384:	ffff0208 	.word	0xffff0208

0800c388 <__sread>:
 800c388:	b510      	push	{r4, lr}
 800c38a:	460c      	mov	r4, r1
 800c38c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c390:	f000 f86c 	bl	800c46c <_read_r>
 800c394:	2800      	cmp	r0, #0
 800c396:	bfab      	itete	ge
 800c398:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c39a:	89a3      	ldrhlt	r3, [r4, #12]
 800c39c:	181b      	addge	r3, r3, r0
 800c39e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c3a2:	bfac      	ite	ge
 800c3a4:	6563      	strge	r3, [r4, #84]	; 0x54
 800c3a6:	81a3      	strhlt	r3, [r4, #12]
 800c3a8:	bd10      	pop	{r4, pc}

0800c3aa <__swrite>:
 800c3aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3ae:	461f      	mov	r7, r3
 800c3b0:	898b      	ldrh	r3, [r1, #12]
 800c3b2:	05db      	lsls	r3, r3, #23
 800c3b4:	4605      	mov	r5, r0
 800c3b6:	460c      	mov	r4, r1
 800c3b8:	4616      	mov	r6, r2
 800c3ba:	d505      	bpl.n	800c3c8 <__swrite+0x1e>
 800c3bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3c0:	2302      	movs	r3, #2
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	f000 f840 	bl	800c448 <_lseek_r>
 800c3c8:	89a3      	ldrh	r3, [r4, #12]
 800c3ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c3d2:	81a3      	strh	r3, [r4, #12]
 800c3d4:	4632      	mov	r2, r6
 800c3d6:	463b      	mov	r3, r7
 800c3d8:	4628      	mov	r0, r5
 800c3da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c3de:	f000 b857 	b.w	800c490 <_write_r>

0800c3e2 <__sseek>:
 800c3e2:	b510      	push	{r4, lr}
 800c3e4:	460c      	mov	r4, r1
 800c3e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3ea:	f000 f82d 	bl	800c448 <_lseek_r>
 800c3ee:	1c43      	adds	r3, r0, #1
 800c3f0:	89a3      	ldrh	r3, [r4, #12]
 800c3f2:	bf15      	itete	ne
 800c3f4:	6560      	strne	r0, [r4, #84]	; 0x54
 800c3f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c3fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c3fe:	81a3      	strheq	r3, [r4, #12]
 800c400:	bf18      	it	ne
 800c402:	81a3      	strhne	r3, [r4, #12]
 800c404:	bd10      	pop	{r4, pc}

0800c406 <__sclose>:
 800c406:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c40a:	f000 b80d 	b.w	800c428 <_close_r>

0800c40e <memset>:
 800c40e:	4402      	add	r2, r0
 800c410:	4603      	mov	r3, r0
 800c412:	4293      	cmp	r3, r2
 800c414:	d100      	bne.n	800c418 <memset+0xa>
 800c416:	4770      	bx	lr
 800c418:	f803 1b01 	strb.w	r1, [r3], #1
 800c41c:	e7f9      	b.n	800c412 <memset+0x4>
	...

0800c420 <_localeconv_r>:
 800c420:	4800      	ldr	r0, [pc, #0]	; (800c424 <_localeconv_r+0x4>)
 800c422:	4770      	bx	lr
 800c424:	2000015c 	.word	0x2000015c

0800c428 <_close_r>:
 800c428:	b538      	push	{r3, r4, r5, lr}
 800c42a:	4d06      	ldr	r5, [pc, #24]	; (800c444 <_close_r+0x1c>)
 800c42c:	2300      	movs	r3, #0
 800c42e:	4604      	mov	r4, r0
 800c430:	4608      	mov	r0, r1
 800c432:	602b      	str	r3, [r5, #0]
 800c434:	f7f7 fe8b 	bl	800414e <_close>
 800c438:	1c43      	adds	r3, r0, #1
 800c43a:	d102      	bne.n	800c442 <_close_r+0x1a>
 800c43c:	682b      	ldr	r3, [r5, #0]
 800c43e:	b103      	cbz	r3, 800c442 <_close_r+0x1a>
 800c440:	6023      	str	r3, [r4, #0]
 800c442:	bd38      	pop	{r3, r4, r5, pc}
 800c444:	20002d94 	.word	0x20002d94

0800c448 <_lseek_r>:
 800c448:	b538      	push	{r3, r4, r5, lr}
 800c44a:	4d07      	ldr	r5, [pc, #28]	; (800c468 <_lseek_r+0x20>)
 800c44c:	4604      	mov	r4, r0
 800c44e:	4608      	mov	r0, r1
 800c450:	4611      	mov	r1, r2
 800c452:	2200      	movs	r2, #0
 800c454:	602a      	str	r2, [r5, #0]
 800c456:	461a      	mov	r2, r3
 800c458:	f7f7 fea0 	bl	800419c <_lseek>
 800c45c:	1c43      	adds	r3, r0, #1
 800c45e:	d102      	bne.n	800c466 <_lseek_r+0x1e>
 800c460:	682b      	ldr	r3, [r5, #0]
 800c462:	b103      	cbz	r3, 800c466 <_lseek_r+0x1e>
 800c464:	6023      	str	r3, [r4, #0]
 800c466:	bd38      	pop	{r3, r4, r5, pc}
 800c468:	20002d94 	.word	0x20002d94

0800c46c <_read_r>:
 800c46c:	b538      	push	{r3, r4, r5, lr}
 800c46e:	4d07      	ldr	r5, [pc, #28]	; (800c48c <_read_r+0x20>)
 800c470:	4604      	mov	r4, r0
 800c472:	4608      	mov	r0, r1
 800c474:	4611      	mov	r1, r2
 800c476:	2200      	movs	r2, #0
 800c478:	602a      	str	r2, [r5, #0]
 800c47a:	461a      	mov	r2, r3
 800c47c:	f7f7 fe2e 	bl	80040dc <_read>
 800c480:	1c43      	adds	r3, r0, #1
 800c482:	d102      	bne.n	800c48a <_read_r+0x1e>
 800c484:	682b      	ldr	r3, [r5, #0]
 800c486:	b103      	cbz	r3, 800c48a <_read_r+0x1e>
 800c488:	6023      	str	r3, [r4, #0]
 800c48a:	bd38      	pop	{r3, r4, r5, pc}
 800c48c:	20002d94 	.word	0x20002d94

0800c490 <_write_r>:
 800c490:	b538      	push	{r3, r4, r5, lr}
 800c492:	4d07      	ldr	r5, [pc, #28]	; (800c4b0 <_write_r+0x20>)
 800c494:	4604      	mov	r4, r0
 800c496:	4608      	mov	r0, r1
 800c498:	4611      	mov	r1, r2
 800c49a:	2200      	movs	r2, #0
 800c49c:	602a      	str	r2, [r5, #0]
 800c49e:	461a      	mov	r2, r3
 800c4a0:	f7f7 fe39 	bl	8004116 <_write>
 800c4a4:	1c43      	adds	r3, r0, #1
 800c4a6:	d102      	bne.n	800c4ae <_write_r+0x1e>
 800c4a8:	682b      	ldr	r3, [r5, #0]
 800c4aa:	b103      	cbz	r3, 800c4ae <_write_r+0x1e>
 800c4ac:	6023      	str	r3, [r4, #0]
 800c4ae:	bd38      	pop	{r3, r4, r5, pc}
 800c4b0:	20002d94 	.word	0x20002d94

0800c4b4 <__errno>:
 800c4b4:	4b01      	ldr	r3, [pc, #4]	; (800c4bc <__errno+0x8>)
 800c4b6:	6818      	ldr	r0, [r3, #0]
 800c4b8:	4770      	bx	lr
 800c4ba:	bf00      	nop
 800c4bc:	20000068 	.word	0x20000068

0800c4c0 <__libc_init_array>:
 800c4c0:	b570      	push	{r4, r5, r6, lr}
 800c4c2:	4d0d      	ldr	r5, [pc, #52]	; (800c4f8 <__libc_init_array+0x38>)
 800c4c4:	4c0d      	ldr	r4, [pc, #52]	; (800c4fc <__libc_init_array+0x3c>)
 800c4c6:	1b64      	subs	r4, r4, r5
 800c4c8:	10a4      	asrs	r4, r4, #2
 800c4ca:	2600      	movs	r6, #0
 800c4cc:	42a6      	cmp	r6, r4
 800c4ce:	d109      	bne.n	800c4e4 <__libc_init_array+0x24>
 800c4d0:	4d0b      	ldr	r5, [pc, #44]	; (800c500 <__libc_init_array+0x40>)
 800c4d2:	4c0c      	ldr	r4, [pc, #48]	; (800c504 <__libc_init_array+0x44>)
 800c4d4:	f002 ffcc 	bl	800f470 <_init>
 800c4d8:	1b64      	subs	r4, r4, r5
 800c4da:	10a4      	asrs	r4, r4, #2
 800c4dc:	2600      	movs	r6, #0
 800c4de:	42a6      	cmp	r6, r4
 800c4e0:	d105      	bne.n	800c4ee <__libc_init_array+0x2e>
 800c4e2:	bd70      	pop	{r4, r5, r6, pc}
 800c4e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4e8:	4798      	blx	r3
 800c4ea:	3601      	adds	r6, #1
 800c4ec:	e7ee      	b.n	800c4cc <__libc_init_array+0xc>
 800c4ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4f2:	4798      	blx	r3
 800c4f4:	3601      	adds	r6, #1
 800c4f6:	e7f2      	b.n	800c4de <__libc_init_array+0x1e>
 800c4f8:	0800fcf0 	.word	0x0800fcf0
 800c4fc:	0800fcf0 	.word	0x0800fcf0
 800c500:	0800fcf0 	.word	0x0800fcf0
 800c504:	0800fcf4 	.word	0x0800fcf4

0800c508 <__retarget_lock_acquire_recursive>:
 800c508:	4770      	bx	lr

0800c50a <__retarget_lock_release_recursive>:
 800c50a:	4770      	bx	lr

0800c50c <memcpy>:
 800c50c:	440a      	add	r2, r1
 800c50e:	4291      	cmp	r1, r2
 800c510:	f100 33ff 	add.w	r3, r0, #4294967295
 800c514:	d100      	bne.n	800c518 <memcpy+0xc>
 800c516:	4770      	bx	lr
 800c518:	b510      	push	{r4, lr}
 800c51a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c51e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c522:	4291      	cmp	r1, r2
 800c524:	d1f9      	bne.n	800c51a <memcpy+0xe>
 800c526:	bd10      	pop	{r4, pc}

0800c528 <quorem>:
 800c528:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c52c:	6903      	ldr	r3, [r0, #16]
 800c52e:	690c      	ldr	r4, [r1, #16]
 800c530:	42a3      	cmp	r3, r4
 800c532:	4607      	mov	r7, r0
 800c534:	db7e      	blt.n	800c634 <quorem+0x10c>
 800c536:	3c01      	subs	r4, #1
 800c538:	f101 0814 	add.w	r8, r1, #20
 800c53c:	f100 0514 	add.w	r5, r0, #20
 800c540:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c544:	9301      	str	r3, [sp, #4]
 800c546:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c54a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c54e:	3301      	adds	r3, #1
 800c550:	429a      	cmp	r2, r3
 800c552:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c556:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c55a:	fbb2 f6f3 	udiv	r6, r2, r3
 800c55e:	d331      	bcc.n	800c5c4 <quorem+0x9c>
 800c560:	f04f 0e00 	mov.w	lr, #0
 800c564:	4640      	mov	r0, r8
 800c566:	46ac      	mov	ip, r5
 800c568:	46f2      	mov	sl, lr
 800c56a:	f850 2b04 	ldr.w	r2, [r0], #4
 800c56e:	b293      	uxth	r3, r2
 800c570:	fb06 e303 	mla	r3, r6, r3, lr
 800c574:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c578:	0c1a      	lsrs	r2, r3, #16
 800c57a:	b29b      	uxth	r3, r3
 800c57c:	ebaa 0303 	sub.w	r3, sl, r3
 800c580:	f8dc a000 	ldr.w	sl, [ip]
 800c584:	fa13 f38a 	uxtah	r3, r3, sl
 800c588:	fb06 220e 	mla	r2, r6, lr, r2
 800c58c:	9300      	str	r3, [sp, #0]
 800c58e:	9b00      	ldr	r3, [sp, #0]
 800c590:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c594:	b292      	uxth	r2, r2
 800c596:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c59a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c59e:	f8bd 3000 	ldrh.w	r3, [sp]
 800c5a2:	4581      	cmp	r9, r0
 800c5a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c5a8:	f84c 3b04 	str.w	r3, [ip], #4
 800c5ac:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c5b0:	d2db      	bcs.n	800c56a <quorem+0x42>
 800c5b2:	f855 300b 	ldr.w	r3, [r5, fp]
 800c5b6:	b92b      	cbnz	r3, 800c5c4 <quorem+0x9c>
 800c5b8:	9b01      	ldr	r3, [sp, #4]
 800c5ba:	3b04      	subs	r3, #4
 800c5bc:	429d      	cmp	r5, r3
 800c5be:	461a      	mov	r2, r3
 800c5c0:	d32c      	bcc.n	800c61c <quorem+0xf4>
 800c5c2:	613c      	str	r4, [r7, #16]
 800c5c4:	4638      	mov	r0, r7
 800c5c6:	f001 f9a5 	bl	800d914 <__mcmp>
 800c5ca:	2800      	cmp	r0, #0
 800c5cc:	db22      	blt.n	800c614 <quorem+0xec>
 800c5ce:	3601      	adds	r6, #1
 800c5d0:	4629      	mov	r1, r5
 800c5d2:	2000      	movs	r0, #0
 800c5d4:	f858 2b04 	ldr.w	r2, [r8], #4
 800c5d8:	f8d1 c000 	ldr.w	ip, [r1]
 800c5dc:	b293      	uxth	r3, r2
 800c5de:	1ac3      	subs	r3, r0, r3
 800c5e0:	0c12      	lsrs	r2, r2, #16
 800c5e2:	fa13 f38c 	uxtah	r3, r3, ip
 800c5e6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c5ea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c5ee:	b29b      	uxth	r3, r3
 800c5f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c5f4:	45c1      	cmp	r9, r8
 800c5f6:	f841 3b04 	str.w	r3, [r1], #4
 800c5fa:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c5fe:	d2e9      	bcs.n	800c5d4 <quorem+0xac>
 800c600:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c604:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c608:	b922      	cbnz	r2, 800c614 <quorem+0xec>
 800c60a:	3b04      	subs	r3, #4
 800c60c:	429d      	cmp	r5, r3
 800c60e:	461a      	mov	r2, r3
 800c610:	d30a      	bcc.n	800c628 <quorem+0x100>
 800c612:	613c      	str	r4, [r7, #16]
 800c614:	4630      	mov	r0, r6
 800c616:	b003      	add	sp, #12
 800c618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c61c:	6812      	ldr	r2, [r2, #0]
 800c61e:	3b04      	subs	r3, #4
 800c620:	2a00      	cmp	r2, #0
 800c622:	d1ce      	bne.n	800c5c2 <quorem+0x9a>
 800c624:	3c01      	subs	r4, #1
 800c626:	e7c9      	b.n	800c5bc <quorem+0x94>
 800c628:	6812      	ldr	r2, [r2, #0]
 800c62a:	3b04      	subs	r3, #4
 800c62c:	2a00      	cmp	r2, #0
 800c62e:	d1f0      	bne.n	800c612 <quorem+0xea>
 800c630:	3c01      	subs	r4, #1
 800c632:	e7eb      	b.n	800c60c <quorem+0xe4>
 800c634:	2000      	movs	r0, #0
 800c636:	e7ee      	b.n	800c616 <quorem+0xee>

0800c638 <_dtoa_r>:
 800c638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c63c:	ed2d 8b04 	vpush	{d8-d9}
 800c640:	69c5      	ldr	r5, [r0, #28]
 800c642:	b093      	sub	sp, #76	; 0x4c
 800c644:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c648:	ec57 6b10 	vmov	r6, r7, d0
 800c64c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c650:	9107      	str	r1, [sp, #28]
 800c652:	4604      	mov	r4, r0
 800c654:	920a      	str	r2, [sp, #40]	; 0x28
 800c656:	930d      	str	r3, [sp, #52]	; 0x34
 800c658:	b975      	cbnz	r5, 800c678 <_dtoa_r+0x40>
 800c65a:	2010      	movs	r0, #16
 800c65c:	f000 fe2a 	bl	800d2b4 <malloc>
 800c660:	4602      	mov	r2, r0
 800c662:	61e0      	str	r0, [r4, #28]
 800c664:	b920      	cbnz	r0, 800c670 <_dtoa_r+0x38>
 800c666:	4bae      	ldr	r3, [pc, #696]	; (800c920 <_dtoa_r+0x2e8>)
 800c668:	21ef      	movs	r1, #239	; 0xef
 800c66a:	48ae      	ldr	r0, [pc, #696]	; (800c924 <_dtoa_r+0x2ec>)
 800c66c:	f001 fc82 	bl	800df74 <__assert_func>
 800c670:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c674:	6005      	str	r5, [r0, #0]
 800c676:	60c5      	str	r5, [r0, #12]
 800c678:	69e3      	ldr	r3, [r4, #28]
 800c67a:	6819      	ldr	r1, [r3, #0]
 800c67c:	b151      	cbz	r1, 800c694 <_dtoa_r+0x5c>
 800c67e:	685a      	ldr	r2, [r3, #4]
 800c680:	604a      	str	r2, [r1, #4]
 800c682:	2301      	movs	r3, #1
 800c684:	4093      	lsls	r3, r2
 800c686:	608b      	str	r3, [r1, #8]
 800c688:	4620      	mov	r0, r4
 800c68a:	f000 ff07 	bl	800d49c <_Bfree>
 800c68e:	69e3      	ldr	r3, [r4, #28]
 800c690:	2200      	movs	r2, #0
 800c692:	601a      	str	r2, [r3, #0]
 800c694:	1e3b      	subs	r3, r7, #0
 800c696:	bfbb      	ittet	lt
 800c698:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c69c:	9303      	strlt	r3, [sp, #12]
 800c69e:	2300      	movge	r3, #0
 800c6a0:	2201      	movlt	r2, #1
 800c6a2:	bfac      	ite	ge
 800c6a4:	f8c8 3000 	strge.w	r3, [r8]
 800c6a8:	f8c8 2000 	strlt.w	r2, [r8]
 800c6ac:	4b9e      	ldr	r3, [pc, #632]	; (800c928 <_dtoa_r+0x2f0>)
 800c6ae:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c6b2:	ea33 0308 	bics.w	r3, r3, r8
 800c6b6:	d11b      	bne.n	800c6f0 <_dtoa_r+0xb8>
 800c6b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c6ba:	f242 730f 	movw	r3, #9999	; 0x270f
 800c6be:	6013      	str	r3, [r2, #0]
 800c6c0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c6c4:	4333      	orrs	r3, r6
 800c6c6:	f000 8593 	beq.w	800d1f0 <_dtoa_r+0xbb8>
 800c6ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c6cc:	b963      	cbnz	r3, 800c6e8 <_dtoa_r+0xb0>
 800c6ce:	4b97      	ldr	r3, [pc, #604]	; (800c92c <_dtoa_r+0x2f4>)
 800c6d0:	e027      	b.n	800c722 <_dtoa_r+0xea>
 800c6d2:	4b97      	ldr	r3, [pc, #604]	; (800c930 <_dtoa_r+0x2f8>)
 800c6d4:	9300      	str	r3, [sp, #0]
 800c6d6:	3308      	adds	r3, #8
 800c6d8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c6da:	6013      	str	r3, [r2, #0]
 800c6dc:	9800      	ldr	r0, [sp, #0]
 800c6de:	b013      	add	sp, #76	; 0x4c
 800c6e0:	ecbd 8b04 	vpop	{d8-d9}
 800c6e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6e8:	4b90      	ldr	r3, [pc, #576]	; (800c92c <_dtoa_r+0x2f4>)
 800c6ea:	9300      	str	r3, [sp, #0]
 800c6ec:	3303      	adds	r3, #3
 800c6ee:	e7f3      	b.n	800c6d8 <_dtoa_r+0xa0>
 800c6f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	ec51 0b17 	vmov	r0, r1, d7
 800c6fa:	eeb0 8a47 	vmov.f32	s16, s14
 800c6fe:	eef0 8a67 	vmov.f32	s17, s15
 800c702:	2300      	movs	r3, #0
 800c704:	f7f4 f9f0 	bl	8000ae8 <__aeabi_dcmpeq>
 800c708:	4681      	mov	r9, r0
 800c70a:	b160      	cbz	r0, 800c726 <_dtoa_r+0xee>
 800c70c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c70e:	2301      	movs	r3, #1
 800c710:	6013      	str	r3, [r2, #0]
 800c712:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c714:	2b00      	cmp	r3, #0
 800c716:	f000 8568 	beq.w	800d1ea <_dtoa_r+0xbb2>
 800c71a:	4b86      	ldr	r3, [pc, #536]	; (800c934 <_dtoa_r+0x2fc>)
 800c71c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c71e:	6013      	str	r3, [r2, #0]
 800c720:	3b01      	subs	r3, #1
 800c722:	9300      	str	r3, [sp, #0]
 800c724:	e7da      	b.n	800c6dc <_dtoa_r+0xa4>
 800c726:	aa10      	add	r2, sp, #64	; 0x40
 800c728:	a911      	add	r1, sp, #68	; 0x44
 800c72a:	4620      	mov	r0, r4
 800c72c:	eeb0 0a48 	vmov.f32	s0, s16
 800c730:	eef0 0a68 	vmov.f32	s1, s17
 800c734:	f001 f994 	bl	800da60 <__d2b>
 800c738:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c73c:	4682      	mov	sl, r0
 800c73e:	2d00      	cmp	r5, #0
 800c740:	d07f      	beq.n	800c842 <_dtoa_r+0x20a>
 800c742:	ee18 3a90 	vmov	r3, s17
 800c746:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c74a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c74e:	ec51 0b18 	vmov	r0, r1, d8
 800c752:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c756:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c75a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c75e:	4619      	mov	r1, r3
 800c760:	2200      	movs	r2, #0
 800c762:	4b75      	ldr	r3, [pc, #468]	; (800c938 <_dtoa_r+0x300>)
 800c764:	f7f3 fda0 	bl	80002a8 <__aeabi_dsub>
 800c768:	a367      	add	r3, pc, #412	; (adr r3, 800c908 <_dtoa_r+0x2d0>)
 800c76a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c76e:	f7f3 ff53 	bl	8000618 <__aeabi_dmul>
 800c772:	a367      	add	r3, pc, #412	; (adr r3, 800c910 <_dtoa_r+0x2d8>)
 800c774:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c778:	f7f3 fd98 	bl	80002ac <__adddf3>
 800c77c:	4606      	mov	r6, r0
 800c77e:	4628      	mov	r0, r5
 800c780:	460f      	mov	r7, r1
 800c782:	f7f3 fedf 	bl	8000544 <__aeabi_i2d>
 800c786:	a364      	add	r3, pc, #400	; (adr r3, 800c918 <_dtoa_r+0x2e0>)
 800c788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c78c:	f7f3 ff44 	bl	8000618 <__aeabi_dmul>
 800c790:	4602      	mov	r2, r0
 800c792:	460b      	mov	r3, r1
 800c794:	4630      	mov	r0, r6
 800c796:	4639      	mov	r1, r7
 800c798:	f7f3 fd88 	bl	80002ac <__adddf3>
 800c79c:	4606      	mov	r6, r0
 800c79e:	460f      	mov	r7, r1
 800c7a0:	f7f4 f9ea 	bl	8000b78 <__aeabi_d2iz>
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	4683      	mov	fp, r0
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	4630      	mov	r0, r6
 800c7ac:	4639      	mov	r1, r7
 800c7ae:	f7f4 f9a5 	bl	8000afc <__aeabi_dcmplt>
 800c7b2:	b148      	cbz	r0, 800c7c8 <_dtoa_r+0x190>
 800c7b4:	4658      	mov	r0, fp
 800c7b6:	f7f3 fec5 	bl	8000544 <__aeabi_i2d>
 800c7ba:	4632      	mov	r2, r6
 800c7bc:	463b      	mov	r3, r7
 800c7be:	f7f4 f993 	bl	8000ae8 <__aeabi_dcmpeq>
 800c7c2:	b908      	cbnz	r0, 800c7c8 <_dtoa_r+0x190>
 800c7c4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c7c8:	f1bb 0f16 	cmp.w	fp, #22
 800c7cc:	d857      	bhi.n	800c87e <_dtoa_r+0x246>
 800c7ce:	4b5b      	ldr	r3, [pc, #364]	; (800c93c <_dtoa_r+0x304>)
 800c7d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d8:	ec51 0b18 	vmov	r0, r1, d8
 800c7dc:	f7f4 f98e 	bl	8000afc <__aeabi_dcmplt>
 800c7e0:	2800      	cmp	r0, #0
 800c7e2:	d04e      	beq.n	800c882 <_dtoa_r+0x24a>
 800c7e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	930c      	str	r3, [sp, #48]	; 0x30
 800c7ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c7ee:	1b5b      	subs	r3, r3, r5
 800c7f0:	1e5a      	subs	r2, r3, #1
 800c7f2:	bf45      	ittet	mi
 800c7f4:	f1c3 0301 	rsbmi	r3, r3, #1
 800c7f8:	9305      	strmi	r3, [sp, #20]
 800c7fa:	2300      	movpl	r3, #0
 800c7fc:	2300      	movmi	r3, #0
 800c7fe:	9206      	str	r2, [sp, #24]
 800c800:	bf54      	ite	pl
 800c802:	9305      	strpl	r3, [sp, #20]
 800c804:	9306      	strmi	r3, [sp, #24]
 800c806:	f1bb 0f00 	cmp.w	fp, #0
 800c80a:	db3c      	blt.n	800c886 <_dtoa_r+0x24e>
 800c80c:	9b06      	ldr	r3, [sp, #24]
 800c80e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800c812:	445b      	add	r3, fp
 800c814:	9306      	str	r3, [sp, #24]
 800c816:	2300      	movs	r3, #0
 800c818:	9308      	str	r3, [sp, #32]
 800c81a:	9b07      	ldr	r3, [sp, #28]
 800c81c:	2b09      	cmp	r3, #9
 800c81e:	d868      	bhi.n	800c8f2 <_dtoa_r+0x2ba>
 800c820:	2b05      	cmp	r3, #5
 800c822:	bfc4      	itt	gt
 800c824:	3b04      	subgt	r3, #4
 800c826:	9307      	strgt	r3, [sp, #28]
 800c828:	9b07      	ldr	r3, [sp, #28]
 800c82a:	f1a3 0302 	sub.w	r3, r3, #2
 800c82e:	bfcc      	ite	gt
 800c830:	2500      	movgt	r5, #0
 800c832:	2501      	movle	r5, #1
 800c834:	2b03      	cmp	r3, #3
 800c836:	f200 8085 	bhi.w	800c944 <_dtoa_r+0x30c>
 800c83a:	e8df f003 	tbb	[pc, r3]
 800c83e:	3b2e      	.short	0x3b2e
 800c840:	5839      	.short	0x5839
 800c842:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c846:	441d      	add	r5, r3
 800c848:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c84c:	2b20      	cmp	r3, #32
 800c84e:	bfc1      	itttt	gt
 800c850:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c854:	fa08 f803 	lslgt.w	r8, r8, r3
 800c858:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800c85c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800c860:	bfd6      	itet	le
 800c862:	f1c3 0320 	rsble	r3, r3, #32
 800c866:	ea48 0003 	orrgt.w	r0, r8, r3
 800c86a:	fa06 f003 	lslle.w	r0, r6, r3
 800c86e:	f7f3 fe59 	bl	8000524 <__aeabi_ui2d>
 800c872:	2201      	movs	r2, #1
 800c874:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800c878:	3d01      	subs	r5, #1
 800c87a:	920e      	str	r2, [sp, #56]	; 0x38
 800c87c:	e76f      	b.n	800c75e <_dtoa_r+0x126>
 800c87e:	2301      	movs	r3, #1
 800c880:	e7b3      	b.n	800c7ea <_dtoa_r+0x1b2>
 800c882:	900c      	str	r0, [sp, #48]	; 0x30
 800c884:	e7b2      	b.n	800c7ec <_dtoa_r+0x1b4>
 800c886:	9b05      	ldr	r3, [sp, #20]
 800c888:	eba3 030b 	sub.w	r3, r3, fp
 800c88c:	9305      	str	r3, [sp, #20]
 800c88e:	f1cb 0300 	rsb	r3, fp, #0
 800c892:	9308      	str	r3, [sp, #32]
 800c894:	2300      	movs	r3, #0
 800c896:	930b      	str	r3, [sp, #44]	; 0x2c
 800c898:	e7bf      	b.n	800c81a <_dtoa_r+0x1e2>
 800c89a:	2300      	movs	r3, #0
 800c89c:	9309      	str	r3, [sp, #36]	; 0x24
 800c89e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	dc52      	bgt.n	800c94a <_dtoa_r+0x312>
 800c8a4:	2301      	movs	r3, #1
 800c8a6:	9301      	str	r3, [sp, #4]
 800c8a8:	9304      	str	r3, [sp, #16]
 800c8aa:	461a      	mov	r2, r3
 800c8ac:	920a      	str	r2, [sp, #40]	; 0x28
 800c8ae:	e00b      	b.n	800c8c8 <_dtoa_r+0x290>
 800c8b0:	2301      	movs	r3, #1
 800c8b2:	e7f3      	b.n	800c89c <_dtoa_r+0x264>
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	9309      	str	r3, [sp, #36]	; 0x24
 800c8b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8ba:	445b      	add	r3, fp
 800c8bc:	9301      	str	r3, [sp, #4]
 800c8be:	3301      	adds	r3, #1
 800c8c0:	2b01      	cmp	r3, #1
 800c8c2:	9304      	str	r3, [sp, #16]
 800c8c4:	bfb8      	it	lt
 800c8c6:	2301      	movlt	r3, #1
 800c8c8:	69e0      	ldr	r0, [r4, #28]
 800c8ca:	2100      	movs	r1, #0
 800c8cc:	2204      	movs	r2, #4
 800c8ce:	f102 0614 	add.w	r6, r2, #20
 800c8d2:	429e      	cmp	r6, r3
 800c8d4:	d93d      	bls.n	800c952 <_dtoa_r+0x31a>
 800c8d6:	6041      	str	r1, [r0, #4]
 800c8d8:	4620      	mov	r0, r4
 800c8da:	f000 fd9f 	bl	800d41c <_Balloc>
 800c8de:	9000      	str	r0, [sp, #0]
 800c8e0:	2800      	cmp	r0, #0
 800c8e2:	d139      	bne.n	800c958 <_dtoa_r+0x320>
 800c8e4:	4b16      	ldr	r3, [pc, #88]	; (800c940 <_dtoa_r+0x308>)
 800c8e6:	4602      	mov	r2, r0
 800c8e8:	f240 11af 	movw	r1, #431	; 0x1af
 800c8ec:	e6bd      	b.n	800c66a <_dtoa_r+0x32>
 800c8ee:	2301      	movs	r3, #1
 800c8f0:	e7e1      	b.n	800c8b6 <_dtoa_r+0x27e>
 800c8f2:	2501      	movs	r5, #1
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	9307      	str	r3, [sp, #28]
 800c8f8:	9509      	str	r5, [sp, #36]	; 0x24
 800c8fa:	f04f 33ff 	mov.w	r3, #4294967295
 800c8fe:	9301      	str	r3, [sp, #4]
 800c900:	9304      	str	r3, [sp, #16]
 800c902:	2200      	movs	r2, #0
 800c904:	2312      	movs	r3, #18
 800c906:	e7d1      	b.n	800c8ac <_dtoa_r+0x274>
 800c908:	636f4361 	.word	0x636f4361
 800c90c:	3fd287a7 	.word	0x3fd287a7
 800c910:	8b60c8b3 	.word	0x8b60c8b3
 800c914:	3fc68a28 	.word	0x3fc68a28
 800c918:	509f79fb 	.word	0x509f79fb
 800c91c:	3fd34413 	.word	0x3fd34413
 800c920:	0800f98d 	.word	0x0800f98d
 800c924:	0800f9a4 	.word	0x0800f9a4
 800c928:	7ff00000 	.word	0x7ff00000
 800c92c:	0800f989 	.word	0x0800f989
 800c930:	0800f980 	.word	0x0800f980
 800c934:	0800f95d 	.word	0x0800f95d
 800c938:	3ff80000 	.word	0x3ff80000
 800c93c:	0800fa90 	.word	0x0800fa90
 800c940:	0800f9fc 	.word	0x0800f9fc
 800c944:	2301      	movs	r3, #1
 800c946:	9309      	str	r3, [sp, #36]	; 0x24
 800c948:	e7d7      	b.n	800c8fa <_dtoa_r+0x2c2>
 800c94a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c94c:	9301      	str	r3, [sp, #4]
 800c94e:	9304      	str	r3, [sp, #16]
 800c950:	e7ba      	b.n	800c8c8 <_dtoa_r+0x290>
 800c952:	3101      	adds	r1, #1
 800c954:	0052      	lsls	r2, r2, #1
 800c956:	e7ba      	b.n	800c8ce <_dtoa_r+0x296>
 800c958:	69e3      	ldr	r3, [r4, #28]
 800c95a:	9a00      	ldr	r2, [sp, #0]
 800c95c:	601a      	str	r2, [r3, #0]
 800c95e:	9b04      	ldr	r3, [sp, #16]
 800c960:	2b0e      	cmp	r3, #14
 800c962:	f200 80a8 	bhi.w	800cab6 <_dtoa_r+0x47e>
 800c966:	2d00      	cmp	r5, #0
 800c968:	f000 80a5 	beq.w	800cab6 <_dtoa_r+0x47e>
 800c96c:	f1bb 0f00 	cmp.w	fp, #0
 800c970:	dd38      	ble.n	800c9e4 <_dtoa_r+0x3ac>
 800c972:	4bc0      	ldr	r3, [pc, #768]	; (800cc74 <_dtoa_r+0x63c>)
 800c974:	f00b 020f 	and.w	r2, fp, #15
 800c978:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c97c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c980:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c984:	ea4f 182b 	mov.w	r8, fp, asr #4
 800c988:	d019      	beq.n	800c9be <_dtoa_r+0x386>
 800c98a:	4bbb      	ldr	r3, [pc, #748]	; (800cc78 <_dtoa_r+0x640>)
 800c98c:	ec51 0b18 	vmov	r0, r1, d8
 800c990:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c994:	f7f3 ff6a 	bl	800086c <__aeabi_ddiv>
 800c998:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c99c:	f008 080f 	and.w	r8, r8, #15
 800c9a0:	2503      	movs	r5, #3
 800c9a2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800cc78 <_dtoa_r+0x640>
 800c9a6:	f1b8 0f00 	cmp.w	r8, #0
 800c9aa:	d10a      	bne.n	800c9c2 <_dtoa_r+0x38a>
 800c9ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c9b0:	4632      	mov	r2, r6
 800c9b2:	463b      	mov	r3, r7
 800c9b4:	f7f3 ff5a 	bl	800086c <__aeabi_ddiv>
 800c9b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c9bc:	e02b      	b.n	800ca16 <_dtoa_r+0x3de>
 800c9be:	2502      	movs	r5, #2
 800c9c0:	e7ef      	b.n	800c9a2 <_dtoa_r+0x36a>
 800c9c2:	f018 0f01 	tst.w	r8, #1
 800c9c6:	d008      	beq.n	800c9da <_dtoa_r+0x3a2>
 800c9c8:	4630      	mov	r0, r6
 800c9ca:	4639      	mov	r1, r7
 800c9cc:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c9d0:	f7f3 fe22 	bl	8000618 <__aeabi_dmul>
 800c9d4:	3501      	adds	r5, #1
 800c9d6:	4606      	mov	r6, r0
 800c9d8:	460f      	mov	r7, r1
 800c9da:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c9de:	f109 0908 	add.w	r9, r9, #8
 800c9e2:	e7e0      	b.n	800c9a6 <_dtoa_r+0x36e>
 800c9e4:	f000 809f 	beq.w	800cb26 <_dtoa_r+0x4ee>
 800c9e8:	f1cb 0600 	rsb	r6, fp, #0
 800c9ec:	4ba1      	ldr	r3, [pc, #644]	; (800cc74 <_dtoa_r+0x63c>)
 800c9ee:	4fa2      	ldr	r7, [pc, #648]	; (800cc78 <_dtoa_r+0x640>)
 800c9f0:	f006 020f 	and.w	r2, r6, #15
 800c9f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9fc:	ec51 0b18 	vmov	r0, r1, d8
 800ca00:	f7f3 fe0a 	bl	8000618 <__aeabi_dmul>
 800ca04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca08:	1136      	asrs	r6, r6, #4
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	2502      	movs	r5, #2
 800ca0e:	2e00      	cmp	r6, #0
 800ca10:	d17e      	bne.n	800cb10 <_dtoa_r+0x4d8>
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d1d0      	bne.n	800c9b8 <_dtoa_r+0x380>
 800ca16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca18:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	f000 8084 	beq.w	800cb2a <_dtoa_r+0x4f2>
 800ca22:	4b96      	ldr	r3, [pc, #600]	; (800cc7c <_dtoa_r+0x644>)
 800ca24:	2200      	movs	r2, #0
 800ca26:	4640      	mov	r0, r8
 800ca28:	4649      	mov	r1, r9
 800ca2a:	f7f4 f867 	bl	8000afc <__aeabi_dcmplt>
 800ca2e:	2800      	cmp	r0, #0
 800ca30:	d07b      	beq.n	800cb2a <_dtoa_r+0x4f2>
 800ca32:	9b04      	ldr	r3, [sp, #16]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d078      	beq.n	800cb2a <_dtoa_r+0x4f2>
 800ca38:	9b01      	ldr	r3, [sp, #4]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	dd39      	ble.n	800cab2 <_dtoa_r+0x47a>
 800ca3e:	4b90      	ldr	r3, [pc, #576]	; (800cc80 <_dtoa_r+0x648>)
 800ca40:	2200      	movs	r2, #0
 800ca42:	4640      	mov	r0, r8
 800ca44:	4649      	mov	r1, r9
 800ca46:	f7f3 fde7 	bl	8000618 <__aeabi_dmul>
 800ca4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca4e:	9e01      	ldr	r6, [sp, #4]
 800ca50:	f10b 37ff 	add.w	r7, fp, #4294967295
 800ca54:	3501      	adds	r5, #1
 800ca56:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ca5a:	4628      	mov	r0, r5
 800ca5c:	f7f3 fd72 	bl	8000544 <__aeabi_i2d>
 800ca60:	4642      	mov	r2, r8
 800ca62:	464b      	mov	r3, r9
 800ca64:	f7f3 fdd8 	bl	8000618 <__aeabi_dmul>
 800ca68:	4b86      	ldr	r3, [pc, #536]	; (800cc84 <_dtoa_r+0x64c>)
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	f7f3 fc1e 	bl	80002ac <__adddf3>
 800ca70:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ca74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca78:	9303      	str	r3, [sp, #12]
 800ca7a:	2e00      	cmp	r6, #0
 800ca7c:	d158      	bne.n	800cb30 <_dtoa_r+0x4f8>
 800ca7e:	4b82      	ldr	r3, [pc, #520]	; (800cc88 <_dtoa_r+0x650>)
 800ca80:	2200      	movs	r2, #0
 800ca82:	4640      	mov	r0, r8
 800ca84:	4649      	mov	r1, r9
 800ca86:	f7f3 fc0f 	bl	80002a8 <__aeabi_dsub>
 800ca8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ca8e:	4680      	mov	r8, r0
 800ca90:	4689      	mov	r9, r1
 800ca92:	f7f4 f851 	bl	8000b38 <__aeabi_dcmpgt>
 800ca96:	2800      	cmp	r0, #0
 800ca98:	f040 8296 	bne.w	800cfc8 <_dtoa_r+0x990>
 800ca9c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800caa0:	4640      	mov	r0, r8
 800caa2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800caa6:	4649      	mov	r1, r9
 800caa8:	f7f4 f828 	bl	8000afc <__aeabi_dcmplt>
 800caac:	2800      	cmp	r0, #0
 800caae:	f040 8289 	bne.w	800cfc4 <_dtoa_r+0x98c>
 800cab2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800cab6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cab8:	2b00      	cmp	r3, #0
 800caba:	f2c0 814e 	blt.w	800cd5a <_dtoa_r+0x722>
 800cabe:	f1bb 0f0e 	cmp.w	fp, #14
 800cac2:	f300 814a 	bgt.w	800cd5a <_dtoa_r+0x722>
 800cac6:	4b6b      	ldr	r3, [pc, #428]	; (800cc74 <_dtoa_r+0x63c>)
 800cac8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800cacc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cad0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	f280 80dc 	bge.w	800cc90 <_dtoa_r+0x658>
 800cad8:	9b04      	ldr	r3, [sp, #16]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	f300 80d8 	bgt.w	800cc90 <_dtoa_r+0x658>
 800cae0:	f040 826f 	bne.w	800cfc2 <_dtoa_r+0x98a>
 800cae4:	4b68      	ldr	r3, [pc, #416]	; (800cc88 <_dtoa_r+0x650>)
 800cae6:	2200      	movs	r2, #0
 800cae8:	4640      	mov	r0, r8
 800caea:	4649      	mov	r1, r9
 800caec:	f7f3 fd94 	bl	8000618 <__aeabi_dmul>
 800caf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800caf4:	f7f4 f816 	bl	8000b24 <__aeabi_dcmpge>
 800caf8:	9e04      	ldr	r6, [sp, #16]
 800cafa:	4637      	mov	r7, r6
 800cafc:	2800      	cmp	r0, #0
 800cafe:	f040 8245 	bne.w	800cf8c <_dtoa_r+0x954>
 800cb02:	9d00      	ldr	r5, [sp, #0]
 800cb04:	2331      	movs	r3, #49	; 0x31
 800cb06:	f805 3b01 	strb.w	r3, [r5], #1
 800cb0a:	f10b 0b01 	add.w	fp, fp, #1
 800cb0e:	e241      	b.n	800cf94 <_dtoa_r+0x95c>
 800cb10:	07f2      	lsls	r2, r6, #31
 800cb12:	d505      	bpl.n	800cb20 <_dtoa_r+0x4e8>
 800cb14:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb18:	f7f3 fd7e 	bl	8000618 <__aeabi_dmul>
 800cb1c:	3501      	adds	r5, #1
 800cb1e:	2301      	movs	r3, #1
 800cb20:	1076      	asrs	r6, r6, #1
 800cb22:	3708      	adds	r7, #8
 800cb24:	e773      	b.n	800ca0e <_dtoa_r+0x3d6>
 800cb26:	2502      	movs	r5, #2
 800cb28:	e775      	b.n	800ca16 <_dtoa_r+0x3de>
 800cb2a:	9e04      	ldr	r6, [sp, #16]
 800cb2c:	465f      	mov	r7, fp
 800cb2e:	e792      	b.n	800ca56 <_dtoa_r+0x41e>
 800cb30:	9900      	ldr	r1, [sp, #0]
 800cb32:	4b50      	ldr	r3, [pc, #320]	; (800cc74 <_dtoa_r+0x63c>)
 800cb34:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cb38:	4431      	add	r1, r6
 800cb3a:	9102      	str	r1, [sp, #8]
 800cb3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cb3e:	eeb0 9a47 	vmov.f32	s18, s14
 800cb42:	eef0 9a67 	vmov.f32	s19, s15
 800cb46:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800cb4a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cb4e:	2900      	cmp	r1, #0
 800cb50:	d044      	beq.n	800cbdc <_dtoa_r+0x5a4>
 800cb52:	494e      	ldr	r1, [pc, #312]	; (800cc8c <_dtoa_r+0x654>)
 800cb54:	2000      	movs	r0, #0
 800cb56:	f7f3 fe89 	bl	800086c <__aeabi_ddiv>
 800cb5a:	ec53 2b19 	vmov	r2, r3, d9
 800cb5e:	f7f3 fba3 	bl	80002a8 <__aeabi_dsub>
 800cb62:	9d00      	ldr	r5, [sp, #0]
 800cb64:	ec41 0b19 	vmov	d9, r0, r1
 800cb68:	4649      	mov	r1, r9
 800cb6a:	4640      	mov	r0, r8
 800cb6c:	f7f4 f804 	bl	8000b78 <__aeabi_d2iz>
 800cb70:	4606      	mov	r6, r0
 800cb72:	f7f3 fce7 	bl	8000544 <__aeabi_i2d>
 800cb76:	4602      	mov	r2, r0
 800cb78:	460b      	mov	r3, r1
 800cb7a:	4640      	mov	r0, r8
 800cb7c:	4649      	mov	r1, r9
 800cb7e:	f7f3 fb93 	bl	80002a8 <__aeabi_dsub>
 800cb82:	3630      	adds	r6, #48	; 0x30
 800cb84:	f805 6b01 	strb.w	r6, [r5], #1
 800cb88:	ec53 2b19 	vmov	r2, r3, d9
 800cb8c:	4680      	mov	r8, r0
 800cb8e:	4689      	mov	r9, r1
 800cb90:	f7f3 ffb4 	bl	8000afc <__aeabi_dcmplt>
 800cb94:	2800      	cmp	r0, #0
 800cb96:	d164      	bne.n	800cc62 <_dtoa_r+0x62a>
 800cb98:	4642      	mov	r2, r8
 800cb9a:	464b      	mov	r3, r9
 800cb9c:	4937      	ldr	r1, [pc, #220]	; (800cc7c <_dtoa_r+0x644>)
 800cb9e:	2000      	movs	r0, #0
 800cba0:	f7f3 fb82 	bl	80002a8 <__aeabi_dsub>
 800cba4:	ec53 2b19 	vmov	r2, r3, d9
 800cba8:	f7f3 ffa8 	bl	8000afc <__aeabi_dcmplt>
 800cbac:	2800      	cmp	r0, #0
 800cbae:	f040 80b6 	bne.w	800cd1e <_dtoa_r+0x6e6>
 800cbb2:	9b02      	ldr	r3, [sp, #8]
 800cbb4:	429d      	cmp	r5, r3
 800cbb6:	f43f af7c 	beq.w	800cab2 <_dtoa_r+0x47a>
 800cbba:	4b31      	ldr	r3, [pc, #196]	; (800cc80 <_dtoa_r+0x648>)
 800cbbc:	ec51 0b19 	vmov	r0, r1, d9
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	f7f3 fd29 	bl	8000618 <__aeabi_dmul>
 800cbc6:	4b2e      	ldr	r3, [pc, #184]	; (800cc80 <_dtoa_r+0x648>)
 800cbc8:	ec41 0b19 	vmov	d9, r0, r1
 800cbcc:	2200      	movs	r2, #0
 800cbce:	4640      	mov	r0, r8
 800cbd0:	4649      	mov	r1, r9
 800cbd2:	f7f3 fd21 	bl	8000618 <__aeabi_dmul>
 800cbd6:	4680      	mov	r8, r0
 800cbd8:	4689      	mov	r9, r1
 800cbda:	e7c5      	b.n	800cb68 <_dtoa_r+0x530>
 800cbdc:	ec51 0b17 	vmov	r0, r1, d7
 800cbe0:	f7f3 fd1a 	bl	8000618 <__aeabi_dmul>
 800cbe4:	9b02      	ldr	r3, [sp, #8]
 800cbe6:	9d00      	ldr	r5, [sp, #0]
 800cbe8:	930f      	str	r3, [sp, #60]	; 0x3c
 800cbea:	ec41 0b19 	vmov	d9, r0, r1
 800cbee:	4649      	mov	r1, r9
 800cbf0:	4640      	mov	r0, r8
 800cbf2:	f7f3 ffc1 	bl	8000b78 <__aeabi_d2iz>
 800cbf6:	4606      	mov	r6, r0
 800cbf8:	f7f3 fca4 	bl	8000544 <__aeabi_i2d>
 800cbfc:	3630      	adds	r6, #48	; 0x30
 800cbfe:	4602      	mov	r2, r0
 800cc00:	460b      	mov	r3, r1
 800cc02:	4640      	mov	r0, r8
 800cc04:	4649      	mov	r1, r9
 800cc06:	f7f3 fb4f 	bl	80002a8 <__aeabi_dsub>
 800cc0a:	f805 6b01 	strb.w	r6, [r5], #1
 800cc0e:	9b02      	ldr	r3, [sp, #8]
 800cc10:	429d      	cmp	r5, r3
 800cc12:	4680      	mov	r8, r0
 800cc14:	4689      	mov	r9, r1
 800cc16:	f04f 0200 	mov.w	r2, #0
 800cc1a:	d124      	bne.n	800cc66 <_dtoa_r+0x62e>
 800cc1c:	4b1b      	ldr	r3, [pc, #108]	; (800cc8c <_dtoa_r+0x654>)
 800cc1e:	ec51 0b19 	vmov	r0, r1, d9
 800cc22:	f7f3 fb43 	bl	80002ac <__adddf3>
 800cc26:	4602      	mov	r2, r0
 800cc28:	460b      	mov	r3, r1
 800cc2a:	4640      	mov	r0, r8
 800cc2c:	4649      	mov	r1, r9
 800cc2e:	f7f3 ff83 	bl	8000b38 <__aeabi_dcmpgt>
 800cc32:	2800      	cmp	r0, #0
 800cc34:	d173      	bne.n	800cd1e <_dtoa_r+0x6e6>
 800cc36:	ec53 2b19 	vmov	r2, r3, d9
 800cc3a:	4914      	ldr	r1, [pc, #80]	; (800cc8c <_dtoa_r+0x654>)
 800cc3c:	2000      	movs	r0, #0
 800cc3e:	f7f3 fb33 	bl	80002a8 <__aeabi_dsub>
 800cc42:	4602      	mov	r2, r0
 800cc44:	460b      	mov	r3, r1
 800cc46:	4640      	mov	r0, r8
 800cc48:	4649      	mov	r1, r9
 800cc4a:	f7f3 ff57 	bl	8000afc <__aeabi_dcmplt>
 800cc4e:	2800      	cmp	r0, #0
 800cc50:	f43f af2f 	beq.w	800cab2 <_dtoa_r+0x47a>
 800cc54:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800cc56:	1e6b      	subs	r3, r5, #1
 800cc58:	930f      	str	r3, [sp, #60]	; 0x3c
 800cc5a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cc5e:	2b30      	cmp	r3, #48	; 0x30
 800cc60:	d0f8      	beq.n	800cc54 <_dtoa_r+0x61c>
 800cc62:	46bb      	mov	fp, r7
 800cc64:	e04a      	b.n	800ccfc <_dtoa_r+0x6c4>
 800cc66:	4b06      	ldr	r3, [pc, #24]	; (800cc80 <_dtoa_r+0x648>)
 800cc68:	f7f3 fcd6 	bl	8000618 <__aeabi_dmul>
 800cc6c:	4680      	mov	r8, r0
 800cc6e:	4689      	mov	r9, r1
 800cc70:	e7bd      	b.n	800cbee <_dtoa_r+0x5b6>
 800cc72:	bf00      	nop
 800cc74:	0800fa90 	.word	0x0800fa90
 800cc78:	0800fa68 	.word	0x0800fa68
 800cc7c:	3ff00000 	.word	0x3ff00000
 800cc80:	40240000 	.word	0x40240000
 800cc84:	401c0000 	.word	0x401c0000
 800cc88:	40140000 	.word	0x40140000
 800cc8c:	3fe00000 	.word	0x3fe00000
 800cc90:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cc94:	9d00      	ldr	r5, [sp, #0]
 800cc96:	4642      	mov	r2, r8
 800cc98:	464b      	mov	r3, r9
 800cc9a:	4630      	mov	r0, r6
 800cc9c:	4639      	mov	r1, r7
 800cc9e:	f7f3 fde5 	bl	800086c <__aeabi_ddiv>
 800cca2:	f7f3 ff69 	bl	8000b78 <__aeabi_d2iz>
 800cca6:	9001      	str	r0, [sp, #4]
 800cca8:	f7f3 fc4c 	bl	8000544 <__aeabi_i2d>
 800ccac:	4642      	mov	r2, r8
 800ccae:	464b      	mov	r3, r9
 800ccb0:	f7f3 fcb2 	bl	8000618 <__aeabi_dmul>
 800ccb4:	4602      	mov	r2, r0
 800ccb6:	460b      	mov	r3, r1
 800ccb8:	4630      	mov	r0, r6
 800ccba:	4639      	mov	r1, r7
 800ccbc:	f7f3 faf4 	bl	80002a8 <__aeabi_dsub>
 800ccc0:	9e01      	ldr	r6, [sp, #4]
 800ccc2:	9f04      	ldr	r7, [sp, #16]
 800ccc4:	3630      	adds	r6, #48	; 0x30
 800ccc6:	f805 6b01 	strb.w	r6, [r5], #1
 800ccca:	9e00      	ldr	r6, [sp, #0]
 800cccc:	1bae      	subs	r6, r5, r6
 800ccce:	42b7      	cmp	r7, r6
 800ccd0:	4602      	mov	r2, r0
 800ccd2:	460b      	mov	r3, r1
 800ccd4:	d134      	bne.n	800cd40 <_dtoa_r+0x708>
 800ccd6:	f7f3 fae9 	bl	80002ac <__adddf3>
 800ccda:	4642      	mov	r2, r8
 800ccdc:	464b      	mov	r3, r9
 800ccde:	4606      	mov	r6, r0
 800cce0:	460f      	mov	r7, r1
 800cce2:	f7f3 ff29 	bl	8000b38 <__aeabi_dcmpgt>
 800cce6:	b9c8      	cbnz	r0, 800cd1c <_dtoa_r+0x6e4>
 800cce8:	4642      	mov	r2, r8
 800ccea:	464b      	mov	r3, r9
 800ccec:	4630      	mov	r0, r6
 800ccee:	4639      	mov	r1, r7
 800ccf0:	f7f3 fefa 	bl	8000ae8 <__aeabi_dcmpeq>
 800ccf4:	b110      	cbz	r0, 800ccfc <_dtoa_r+0x6c4>
 800ccf6:	9b01      	ldr	r3, [sp, #4]
 800ccf8:	07db      	lsls	r3, r3, #31
 800ccfa:	d40f      	bmi.n	800cd1c <_dtoa_r+0x6e4>
 800ccfc:	4651      	mov	r1, sl
 800ccfe:	4620      	mov	r0, r4
 800cd00:	f000 fbcc 	bl	800d49c <_Bfree>
 800cd04:	2300      	movs	r3, #0
 800cd06:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cd08:	702b      	strb	r3, [r5, #0]
 800cd0a:	f10b 0301 	add.w	r3, fp, #1
 800cd0e:	6013      	str	r3, [r2, #0]
 800cd10:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	f43f ace2 	beq.w	800c6dc <_dtoa_r+0xa4>
 800cd18:	601d      	str	r5, [r3, #0]
 800cd1a:	e4df      	b.n	800c6dc <_dtoa_r+0xa4>
 800cd1c:	465f      	mov	r7, fp
 800cd1e:	462b      	mov	r3, r5
 800cd20:	461d      	mov	r5, r3
 800cd22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cd26:	2a39      	cmp	r2, #57	; 0x39
 800cd28:	d106      	bne.n	800cd38 <_dtoa_r+0x700>
 800cd2a:	9a00      	ldr	r2, [sp, #0]
 800cd2c:	429a      	cmp	r2, r3
 800cd2e:	d1f7      	bne.n	800cd20 <_dtoa_r+0x6e8>
 800cd30:	9900      	ldr	r1, [sp, #0]
 800cd32:	2230      	movs	r2, #48	; 0x30
 800cd34:	3701      	adds	r7, #1
 800cd36:	700a      	strb	r2, [r1, #0]
 800cd38:	781a      	ldrb	r2, [r3, #0]
 800cd3a:	3201      	adds	r2, #1
 800cd3c:	701a      	strb	r2, [r3, #0]
 800cd3e:	e790      	b.n	800cc62 <_dtoa_r+0x62a>
 800cd40:	4ba3      	ldr	r3, [pc, #652]	; (800cfd0 <_dtoa_r+0x998>)
 800cd42:	2200      	movs	r2, #0
 800cd44:	f7f3 fc68 	bl	8000618 <__aeabi_dmul>
 800cd48:	2200      	movs	r2, #0
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	4606      	mov	r6, r0
 800cd4e:	460f      	mov	r7, r1
 800cd50:	f7f3 feca 	bl	8000ae8 <__aeabi_dcmpeq>
 800cd54:	2800      	cmp	r0, #0
 800cd56:	d09e      	beq.n	800cc96 <_dtoa_r+0x65e>
 800cd58:	e7d0      	b.n	800ccfc <_dtoa_r+0x6c4>
 800cd5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd5c:	2a00      	cmp	r2, #0
 800cd5e:	f000 80ca 	beq.w	800cef6 <_dtoa_r+0x8be>
 800cd62:	9a07      	ldr	r2, [sp, #28]
 800cd64:	2a01      	cmp	r2, #1
 800cd66:	f300 80ad 	bgt.w	800cec4 <_dtoa_r+0x88c>
 800cd6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cd6c:	2a00      	cmp	r2, #0
 800cd6e:	f000 80a5 	beq.w	800cebc <_dtoa_r+0x884>
 800cd72:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cd76:	9e08      	ldr	r6, [sp, #32]
 800cd78:	9d05      	ldr	r5, [sp, #20]
 800cd7a:	9a05      	ldr	r2, [sp, #20]
 800cd7c:	441a      	add	r2, r3
 800cd7e:	9205      	str	r2, [sp, #20]
 800cd80:	9a06      	ldr	r2, [sp, #24]
 800cd82:	2101      	movs	r1, #1
 800cd84:	441a      	add	r2, r3
 800cd86:	4620      	mov	r0, r4
 800cd88:	9206      	str	r2, [sp, #24]
 800cd8a:	f000 fc3d 	bl	800d608 <__i2b>
 800cd8e:	4607      	mov	r7, r0
 800cd90:	b165      	cbz	r5, 800cdac <_dtoa_r+0x774>
 800cd92:	9b06      	ldr	r3, [sp, #24]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	dd09      	ble.n	800cdac <_dtoa_r+0x774>
 800cd98:	42ab      	cmp	r3, r5
 800cd9a:	9a05      	ldr	r2, [sp, #20]
 800cd9c:	bfa8      	it	ge
 800cd9e:	462b      	movge	r3, r5
 800cda0:	1ad2      	subs	r2, r2, r3
 800cda2:	9205      	str	r2, [sp, #20]
 800cda4:	9a06      	ldr	r2, [sp, #24]
 800cda6:	1aed      	subs	r5, r5, r3
 800cda8:	1ad3      	subs	r3, r2, r3
 800cdaa:	9306      	str	r3, [sp, #24]
 800cdac:	9b08      	ldr	r3, [sp, #32]
 800cdae:	b1f3      	cbz	r3, 800cdee <_dtoa_r+0x7b6>
 800cdb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	f000 80a3 	beq.w	800cefe <_dtoa_r+0x8c6>
 800cdb8:	2e00      	cmp	r6, #0
 800cdba:	dd10      	ble.n	800cdde <_dtoa_r+0x7a6>
 800cdbc:	4639      	mov	r1, r7
 800cdbe:	4632      	mov	r2, r6
 800cdc0:	4620      	mov	r0, r4
 800cdc2:	f000 fce1 	bl	800d788 <__pow5mult>
 800cdc6:	4652      	mov	r2, sl
 800cdc8:	4601      	mov	r1, r0
 800cdca:	4607      	mov	r7, r0
 800cdcc:	4620      	mov	r0, r4
 800cdce:	f000 fc31 	bl	800d634 <__multiply>
 800cdd2:	4651      	mov	r1, sl
 800cdd4:	4680      	mov	r8, r0
 800cdd6:	4620      	mov	r0, r4
 800cdd8:	f000 fb60 	bl	800d49c <_Bfree>
 800cddc:	46c2      	mov	sl, r8
 800cdde:	9b08      	ldr	r3, [sp, #32]
 800cde0:	1b9a      	subs	r2, r3, r6
 800cde2:	d004      	beq.n	800cdee <_dtoa_r+0x7b6>
 800cde4:	4651      	mov	r1, sl
 800cde6:	4620      	mov	r0, r4
 800cde8:	f000 fcce 	bl	800d788 <__pow5mult>
 800cdec:	4682      	mov	sl, r0
 800cdee:	2101      	movs	r1, #1
 800cdf0:	4620      	mov	r0, r4
 800cdf2:	f000 fc09 	bl	800d608 <__i2b>
 800cdf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	4606      	mov	r6, r0
 800cdfc:	f340 8081 	ble.w	800cf02 <_dtoa_r+0x8ca>
 800ce00:	461a      	mov	r2, r3
 800ce02:	4601      	mov	r1, r0
 800ce04:	4620      	mov	r0, r4
 800ce06:	f000 fcbf 	bl	800d788 <__pow5mult>
 800ce0a:	9b07      	ldr	r3, [sp, #28]
 800ce0c:	2b01      	cmp	r3, #1
 800ce0e:	4606      	mov	r6, r0
 800ce10:	dd7a      	ble.n	800cf08 <_dtoa_r+0x8d0>
 800ce12:	f04f 0800 	mov.w	r8, #0
 800ce16:	6933      	ldr	r3, [r6, #16]
 800ce18:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ce1c:	6918      	ldr	r0, [r3, #16]
 800ce1e:	f000 fba5 	bl	800d56c <__hi0bits>
 800ce22:	f1c0 0020 	rsb	r0, r0, #32
 800ce26:	9b06      	ldr	r3, [sp, #24]
 800ce28:	4418      	add	r0, r3
 800ce2a:	f010 001f 	ands.w	r0, r0, #31
 800ce2e:	f000 8094 	beq.w	800cf5a <_dtoa_r+0x922>
 800ce32:	f1c0 0320 	rsb	r3, r0, #32
 800ce36:	2b04      	cmp	r3, #4
 800ce38:	f340 8085 	ble.w	800cf46 <_dtoa_r+0x90e>
 800ce3c:	9b05      	ldr	r3, [sp, #20]
 800ce3e:	f1c0 001c 	rsb	r0, r0, #28
 800ce42:	4403      	add	r3, r0
 800ce44:	9305      	str	r3, [sp, #20]
 800ce46:	9b06      	ldr	r3, [sp, #24]
 800ce48:	4403      	add	r3, r0
 800ce4a:	4405      	add	r5, r0
 800ce4c:	9306      	str	r3, [sp, #24]
 800ce4e:	9b05      	ldr	r3, [sp, #20]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	dd05      	ble.n	800ce60 <_dtoa_r+0x828>
 800ce54:	4651      	mov	r1, sl
 800ce56:	461a      	mov	r2, r3
 800ce58:	4620      	mov	r0, r4
 800ce5a:	f000 fcef 	bl	800d83c <__lshift>
 800ce5e:	4682      	mov	sl, r0
 800ce60:	9b06      	ldr	r3, [sp, #24]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	dd05      	ble.n	800ce72 <_dtoa_r+0x83a>
 800ce66:	4631      	mov	r1, r6
 800ce68:	461a      	mov	r2, r3
 800ce6a:	4620      	mov	r0, r4
 800ce6c:	f000 fce6 	bl	800d83c <__lshift>
 800ce70:	4606      	mov	r6, r0
 800ce72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d072      	beq.n	800cf5e <_dtoa_r+0x926>
 800ce78:	4631      	mov	r1, r6
 800ce7a:	4650      	mov	r0, sl
 800ce7c:	f000 fd4a 	bl	800d914 <__mcmp>
 800ce80:	2800      	cmp	r0, #0
 800ce82:	da6c      	bge.n	800cf5e <_dtoa_r+0x926>
 800ce84:	2300      	movs	r3, #0
 800ce86:	4651      	mov	r1, sl
 800ce88:	220a      	movs	r2, #10
 800ce8a:	4620      	mov	r0, r4
 800ce8c:	f000 fb28 	bl	800d4e0 <__multadd>
 800ce90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce92:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ce96:	4682      	mov	sl, r0
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	f000 81b0 	beq.w	800d1fe <_dtoa_r+0xbc6>
 800ce9e:	2300      	movs	r3, #0
 800cea0:	4639      	mov	r1, r7
 800cea2:	220a      	movs	r2, #10
 800cea4:	4620      	mov	r0, r4
 800cea6:	f000 fb1b 	bl	800d4e0 <__multadd>
 800ceaa:	9b01      	ldr	r3, [sp, #4]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	4607      	mov	r7, r0
 800ceb0:	f300 8096 	bgt.w	800cfe0 <_dtoa_r+0x9a8>
 800ceb4:	9b07      	ldr	r3, [sp, #28]
 800ceb6:	2b02      	cmp	r3, #2
 800ceb8:	dc59      	bgt.n	800cf6e <_dtoa_r+0x936>
 800ceba:	e091      	b.n	800cfe0 <_dtoa_r+0x9a8>
 800cebc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cebe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cec2:	e758      	b.n	800cd76 <_dtoa_r+0x73e>
 800cec4:	9b04      	ldr	r3, [sp, #16]
 800cec6:	1e5e      	subs	r6, r3, #1
 800cec8:	9b08      	ldr	r3, [sp, #32]
 800ceca:	42b3      	cmp	r3, r6
 800cecc:	bfbf      	itttt	lt
 800cece:	9b08      	ldrlt	r3, [sp, #32]
 800ced0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800ced2:	9608      	strlt	r6, [sp, #32]
 800ced4:	1af3      	sublt	r3, r6, r3
 800ced6:	bfb4      	ite	lt
 800ced8:	18d2      	addlt	r2, r2, r3
 800ceda:	1b9e      	subge	r6, r3, r6
 800cedc:	9b04      	ldr	r3, [sp, #16]
 800cede:	bfbc      	itt	lt
 800cee0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800cee2:	2600      	movlt	r6, #0
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	bfb7      	itett	lt
 800cee8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800ceec:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800cef0:	1a9d      	sublt	r5, r3, r2
 800cef2:	2300      	movlt	r3, #0
 800cef4:	e741      	b.n	800cd7a <_dtoa_r+0x742>
 800cef6:	9e08      	ldr	r6, [sp, #32]
 800cef8:	9d05      	ldr	r5, [sp, #20]
 800cefa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800cefc:	e748      	b.n	800cd90 <_dtoa_r+0x758>
 800cefe:	9a08      	ldr	r2, [sp, #32]
 800cf00:	e770      	b.n	800cde4 <_dtoa_r+0x7ac>
 800cf02:	9b07      	ldr	r3, [sp, #28]
 800cf04:	2b01      	cmp	r3, #1
 800cf06:	dc19      	bgt.n	800cf3c <_dtoa_r+0x904>
 800cf08:	9b02      	ldr	r3, [sp, #8]
 800cf0a:	b9bb      	cbnz	r3, 800cf3c <_dtoa_r+0x904>
 800cf0c:	9b03      	ldr	r3, [sp, #12]
 800cf0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cf12:	b99b      	cbnz	r3, 800cf3c <_dtoa_r+0x904>
 800cf14:	9b03      	ldr	r3, [sp, #12]
 800cf16:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cf1a:	0d1b      	lsrs	r3, r3, #20
 800cf1c:	051b      	lsls	r3, r3, #20
 800cf1e:	b183      	cbz	r3, 800cf42 <_dtoa_r+0x90a>
 800cf20:	9b05      	ldr	r3, [sp, #20]
 800cf22:	3301      	adds	r3, #1
 800cf24:	9305      	str	r3, [sp, #20]
 800cf26:	9b06      	ldr	r3, [sp, #24]
 800cf28:	3301      	adds	r3, #1
 800cf2a:	9306      	str	r3, [sp, #24]
 800cf2c:	f04f 0801 	mov.w	r8, #1
 800cf30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	f47f af6f 	bne.w	800ce16 <_dtoa_r+0x7de>
 800cf38:	2001      	movs	r0, #1
 800cf3a:	e774      	b.n	800ce26 <_dtoa_r+0x7ee>
 800cf3c:	f04f 0800 	mov.w	r8, #0
 800cf40:	e7f6      	b.n	800cf30 <_dtoa_r+0x8f8>
 800cf42:	4698      	mov	r8, r3
 800cf44:	e7f4      	b.n	800cf30 <_dtoa_r+0x8f8>
 800cf46:	d082      	beq.n	800ce4e <_dtoa_r+0x816>
 800cf48:	9a05      	ldr	r2, [sp, #20]
 800cf4a:	331c      	adds	r3, #28
 800cf4c:	441a      	add	r2, r3
 800cf4e:	9205      	str	r2, [sp, #20]
 800cf50:	9a06      	ldr	r2, [sp, #24]
 800cf52:	441a      	add	r2, r3
 800cf54:	441d      	add	r5, r3
 800cf56:	9206      	str	r2, [sp, #24]
 800cf58:	e779      	b.n	800ce4e <_dtoa_r+0x816>
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	e7f4      	b.n	800cf48 <_dtoa_r+0x910>
 800cf5e:	9b04      	ldr	r3, [sp, #16]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	dc37      	bgt.n	800cfd4 <_dtoa_r+0x99c>
 800cf64:	9b07      	ldr	r3, [sp, #28]
 800cf66:	2b02      	cmp	r3, #2
 800cf68:	dd34      	ble.n	800cfd4 <_dtoa_r+0x99c>
 800cf6a:	9b04      	ldr	r3, [sp, #16]
 800cf6c:	9301      	str	r3, [sp, #4]
 800cf6e:	9b01      	ldr	r3, [sp, #4]
 800cf70:	b963      	cbnz	r3, 800cf8c <_dtoa_r+0x954>
 800cf72:	4631      	mov	r1, r6
 800cf74:	2205      	movs	r2, #5
 800cf76:	4620      	mov	r0, r4
 800cf78:	f000 fab2 	bl	800d4e0 <__multadd>
 800cf7c:	4601      	mov	r1, r0
 800cf7e:	4606      	mov	r6, r0
 800cf80:	4650      	mov	r0, sl
 800cf82:	f000 fcc7 	bl	800d914 <__mcmp>
 800cf86:	2800      	cmp	r0, #0
 800cf88:	f73f adbb 	bgt.w	800cb02 <_dtoa_r+0x4ca>
 800cf8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf8e:	9d00      	ldr	r5, [sp, #0]
 800cf90:	ea6f 0b03 	mvn.w	fp, r3
 800cf94:	f04f 0800 	mov.w	r8, #0
 800cf98:	4631      	mov	r1, r6
 800cf9a:	4620      	mov	r0, r4
 800cf9c:	f000 fa7e 	bl	800d49c <_Bfree>
 800cfa0:	2f00      	cmp	r7, #0
 800cfa2:	f43f aeab 	beq.w	800ccfc <_dtoa_r+0x6c4>
 800cfa6:	f1b8 0f00 	cmp.w	r8, #0
 800cfaa:	d005      	beq.n	800cfb8 <_dtoa_r+0x980>
 800cfac:	45b8      	cmp	r8, r7
 800cfae:	d003      	beq.n	800cfb8 <_dtoa_r+0x980>
 800cfb0:	4641      	mov	r1, r8
 800cfb2:	4620      	mov	r0, r4
 800cfb4:	f000 fa72 	bl	800d49c <_Bfree>
 800cfb8:	4639      	mov	r1, r7
 800cfba:	4620      	mov	r0, r4
 800cfbc:	f000 fa6e 	bl	800d49c <_Bfree>
 800cfc0:	e69c      	b.n	800ccfc <_dtoa_r+0x6c4>
 800cfc2:	2600      	movs	r6, #0
 800cfc4:	4637      	mov	r7, r6
 800cfc6:	e7e1      	b.n	800cf8c <_dtoa_r+0x954>
 800cfc8:	46bb      	mov	fp, r7
 800cfca:	4637      	mov	r7, r6
 800cfcc:	e599      	b.n	800cb02 <_dtoa_r+0x4ca>
 800cfce:	bf00      	nop
 800cfd0:	40240000 	.word	0x40240000
 800cfd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	f000 80c8 	beq.w	800d16c <_dtoa_r+0xb34>
 800cfdc:	9b04      	ldr	r3, [sp, #16]
 800cfde:	9301      	str	r3, [sp, #4]
 800cfe0:	2d00      	cmp	r5, #0
 800cfe2:	dd05      	ble.n	800cff0 <_dtoa_r+0x9b8>
 800cfe4:	4639      	mov	r1, r7
 800cfe6:	462a      	mov	r2, r5
 800cfe8:	4620      	mov	r0, r4
 800cfea:	f000 fc27 	bl	800d83c <__lshift>
 800cfee:	4607      	mov	r7, r0
 800cff0:	f1b8 0f00 	cmp.w	r8, #0
 800cff4:	d05b      	beq.n	800d0ae <_dtoa_r+0xa76>
 800cff6:	6879      	ldr	r1, [r7, #4]
 800cff8:	4620      	mov	r0, r4
 800cffa:	f000 fa0f 	bl	800d41c <_Balloc>
 800cffe:	4605      	mov	r5, r0
 800d000:	b928      	cbnz	r0, 800d00e <_dtoa_r+0x9d6>
 800d002:	4b83      	ldr	r3, [pc, #524]	; (800d210 <_dtoa_r+0xbd8>)
 800d004:	4602      	mov	r2, r0
 800d006:	f240 21ef 	movw	r1, #751	; 0x2ef
 800d00a:	f7ff bb2e 	b.w	800c66a <_dtoa_r+0x32>
 800d00e:	693a      	ldr	r2, [r7, #16]
 800d010:	3202      	adds	r2, #2
 800d012:	0092      	lsls	r2, r2, #2
 800d014:	f107 010c 	add.w	r1, r7, #12
 800d018:	300c      	adds	r0, #12
 800d01a:	f7ff fa77 	bl	800c50c <memcpy>
 800d01e:	2201      	movs	r2, #1
 800d020:	4629      	mov	r1, r5
 800d022:	4620      	mov	r0, r4
 800d024:	f000 fc0a 	bl	800d83c <__lshift>
 800d028:	9b00      	ldr	r3, [sp, #0]
 800d02a:	3301      	adds	r3, #1
 800d02c:	9304      	str	r3, [sp, #16]
 800d02e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d032:	4413      	add	r3, r2
 800d034:	9308      	str	r3, [sp, #32]
 800d036:	9b02      	ldr	r3, [sp, #8]
 800d038:	f003 0301 	and.w	r3, r3, #1
 800d03c:	46b8      	mov	r8, r7
 800d03e:	9306      	str	r3, [sp, #24]
 800d040:	4607      	mov	r7, r0
 800d042:	9b04      	ldr	r3, [sp, #16]
 800d044:	4631      	mov	r1, r6
 800d046:	3b01      	subs	r3, #1
 800d048:	4650      	mov	r0, sl
 800d04a:	9301      	str	r3, [sp, #4]
 800d04c:	f7ff fa6c 	bl	800c528 <quorem>
 800d050:	4641      	mov	r1, r8
 800d052:	9002      	str	r0, [sp, #8]
 800d054:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d058:	4650      	mov	r0, sl
 800d05a:	f000 fc5b 	bl	800d914 <__mcmp>
 800d05e:	463a      	mov	r2, r7
 800d060:	9005      	str	r0, [sp, #20]
 800d062:	4631      	mov	r1, r6
 800d064:	4620      	mov	r0, r4
 800d066:	f000 fc71 	bl	800d94c <__mdiff>
 800d06a:	68c2      	ldr	r2, [r0, #12]
 800d06c:	4605      	mov	r5, r0
 800d06e:	bb02      	cbnz	r2, 800d0b2 <_dtoa_r+0xa7a>
 800d070:	4601      	mov	r1, r0
 800d072:	4650      	mov	r0, sl
 800d074:	f000 fc4e 	bl	800d914 <__mcmp>
 800d078:	4602      	mov	r2, r0
 800d07a:	4629      	mov	r1, r5
 800d07c:	4620      	mov	r0, r4
 800d07e:	9209      	str	r2, [sp, #36]	; 0x24
 800d080:	f000 fa0c 	bl	800d49c <_Bfree>
 800d084:	9b07      	ldr	r3, [sp, #28]
 800d086:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d088:	9d04      	ldr	r5, [sp, #16]
 800d08a:	ea43 0102 	orr.w	r1, r3, r2
 800d08e:	9b06      	ldr	r3, [sp, #24]
 800d090:	4319      	orrs	r1, r3
 800d092:	d110      	bne.n	800d0b6 <_dtoa_r+0xa7e>
 800d094:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d098:	d029      	beq.n	800d0ee <_dtoa_r+0xab6>
 800d09a:	9b05      	ldr	r3, [sp, #20]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	dd02      	ble.n	800d0a6 <_dtoa_r+0xa6e>
 800d0a0:	9b02      	ldr	r3, [sp, #8]
 800d0a2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800d0a6:	9b01      	ldr	r3, [sp, #4]
 800d0a8:	f883 9000 	strb.w	r9, [r3]
 800d0ac:	e774      	b.n	800cf98 <_dtoa_r+0x960>
 800d0ae:	4638      	mov	r0, r7
 800d0b0:	e7ba      	b.n	800d028 <_dtoa_r+0x9f0>
 800d0b2:	2201      	movs	r2, #1
 800d0b4:	e7e1      	b.n	800d07a <_dtoa_r+0xa42>
 800d0b6:	9b05      	ldr	r3, [sp, #20]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	db04      	blt.n	800d0c6 <_dtoa_r+0xa8e>
 800d0bc:	9907      	ldr	r1, [sp, #28]
 800d0be:	430b      	orrs	r3, r1
 800d0c0:	9906      	ldr	r1, [sp, #24]
 800d0c2:	430b      	orrs	r3, r1
 800d0c4:	d120      	bne.n	800d108 <_dtoa_r+0xad0>
 800d0c6:	2a00      	cmp	r2, #0
 800d0c8:	dded      	ble.n	800d0a6 <_dtoa_r+0xa6e>
 800d0ca:	4651      	mov	r1, sl
 800d0cc:	2201      	movs	r2, #1
 800d0ce:	4620      	mov	r0, r4
 800d0d0:	f000 fbb4 	bl	800d83c <__lshift>
 800d0d4:	4631      	mov	r1, r6
 800d0d6:	4682      	mov	sl, r0
 800d0d8:	f000 fc1c 	bl	800d914 <__mcmp>
 800d0dc:	2800      	cmp	r0, #0
 800d0de:	dc03      	bgt.n	800d0e8 <_dtoa_r+0xab0>
 800d0e0:	d1e1      	bne.n	800d0a6 <_dtoa_r+0xa6e>
 800d0e2:	f019 0f01 	tst.w	r9, #1
 800d0e6:	d0de      	beq.n	800d0a6 <_dtoa_r+0xa6e>
 800d0e8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d0ec:	d1d8      	bne.n	800d0a0 <_dtoa_r+0xa68>
 800d0ee:	9a01      	ldr	r2, [sp, #4]
 800d0f0:	2339      	movs	r3, #57	; 0x39
 800d0f2:	7013      	strb	r3, [r2, #0]
 800d0f4:	462b      	mov	r3, r5
 800d0f6:	461d      	mov	r5, r3
 800d0f8:	3b01      	subs	r3, #1
 800d0fa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d0fe:	2a39      	cmp	r2, #57	; 0x39
 800d100:	d06c      	beq.n	800d1dc <_dtoa_r+0xba4>
 800d102:	3201      	adds	r2, #1
 800d104:	701a      	strb	r2, [r3, #0]
 800d106:	e747      	b.n	800cf98 <_dtoa_r+0x960>
 800d108:	2a00      	cmp	r2, #0
 800d10a:	dd07      	ble.n	800d11c <_dtoa_r+0xae4>
 800d10c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d110:	d0ed      	beq.n	800d0ee <_dtoa_r+0xab6>
 800d112:	9a01      	ldr	r2, [sp, #4]
 800d114:	f109 0301 	add.w	r3, r9, #1
 800d118:	7013      	strb	r3, [r2, #0]
 800d11a:	e73d      	b.n	800cf98 <_dtoa_r+0x960>
 800d11c:	9b04      	ldr	r3, [sp, #16]
 800d11e:	9a08      	ldr	r2, [sp, #32]
 800d120:	f803 9c01 	strb.w	r9, [r3, #-1]
 800d124:	4293      	cmp	r3, r2
 800d126:	d043      	beq.n	800d1b0 <_dtoa_r+0xb78>
 800d128:	4651      	mov	r1, sl
 800d12a:	2300      	movs	r3, #0
 800d12c:	220a      	movs	r2, #10
 800d12e:	4620      	mov	r0, r4
 800d130:	f000 f9d6 	bl	800d4e0 <__multadd>
 800d134:	45b8      	cmp	r8, r7
 800d136:	4682      	mov	sl, r0
 800d138:	f04f 0300 	mov.w	r3, #0
 800d13c:	f04f 020a 	mov.w	r2, #10
 800d140:	4641      	mov	r1, r8
 800d142:	4620      	mov	r0, r4
 800d144:	d107      	bne.n	800d156 <_dtoa_r+0xb1e>
 800d146:	f000 f9cb 	bl	800d4e0 <__multadd>
 800d14a:	4680      	mov	r8, r0
 800d14c:	4607      	mov	r7, r0
 800d14e:	9b04      	ldr	r3, [sp, #16]
 800d150:	3301      	adds	r3, #1
 800d152:	9304      	str	r3, [sp, #16]
 800d154:	e775      	b.n	800d042 <_dtoa_r+0xa0a>
 800d156:	f000 f9c3 	bl	800d4e0 <__multadd>
 800d15a:	4639      	mov	r1, r7
 800d15c:	4680      	mov	r8, r0
 800d15e:	2300      	movs	r3, #0
 800d160:	220a      	movs	r2, #10
 800d162:	4620      	mov	r0, r4
 800d164:	f000 f9bc 	bl	800d4e0 <__multadd>
 800d168:	4607      	mov	r7, r0
 800d16a:	e7f0      	b.n	800d14e <_dtoa_r+0xb16>
 800d16c:	9b04      	ldr	r3, [sp, #16]
 800d16e:	9301      	str	r3, [sp, #4]
 800d170:	9d00      	ldr	r5, [sp, #0]
 800d172:	4631      	mov	r1, r6
 800d174:	4650      	mov	r0, sl
 800d176:	f7ff f9d7 	bl	800c528 <quorem>
 800d17a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d17e:	9b00      	ldr	r3, [sp, #0]
 800d180:	f805 9b01 	strb.w	r9, [r5], #1
 800d184:	1aea      	subs	r2, r5, r3
 800d186:	9b01      	ldr	r3, [sp, #4]
 800d188:	4293      	cmp	r3, r2
 800d18a:	dd07      	ble.n	800d19c <_dtoa_r+0xb64>
 800d18c:	4651      	mov	r1, sl
 800d18e:	2300      	movs	r3, #0
 800d190:	220a      	movs	r2, #10
 800d192:	4620      	mov	r0, r4
 800d194:	f000 f9a4 	bl	800d4e0 <__multadd>
 800d198:	4682      	mov	sl, r0
 800d19a:	e7ea      	b.n	800d172 <_dtoa_r+0xb3a>
 800d19c:	9b01      	ldr	r3, [sp, #4]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	bfc8      	it	gt
 800d1a2:	461d      	movgt	r5, r3
 800d1a4:	9b00      	ldr	r3, [sp, #0]
 800d1a6:	bfd8      	it	le
 800d1a8:	2501      	movle	r5, #1
 800d1aa:	441d      	add	r5, r3
 800d1ac:	f04f 0800 	mov.w	r8, #0
 800d1b0:	4651      	mov	r1, sl
 800d1b2:	2201      	movs	r2, #1
 800d1b4:	4620      	mov	r0, r4
 800d1b6:	f000 fb41 	bl	800d83c <__lshift>
 800d1ba:	4631      	mov	r1, r6
 800d1bc:	4682      	mov	sl, r0
 800d1be:	f000 fba9 	bl	800d914 <__mcmp>
 800d1c2:	2800      	cmp	r0, #0
 800d1c4:	dc96      	bgt.n	800d0f4 <_dtoa_r+0xabc>
 800d1c6:	d102      	bne.n	800d1ce <_dtoa_r+0xb96>
 800d1c8:	f019 0f01 	tst.w	r9, #1
 800d1cc:	d192      	bne.n	800d0f4 <_dtoa_r+0xabc>
 800d1ce:	462b      	mov	r3, r5
 800d1d0:	461d      	mov	r5, r3
 800d1d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d1d6:	2a30      	cmp	r2, #48	; 0x30
 800d1d8:	d0fa      	beq.n	800d1d0 <_dtoa_r+0xb98>
 800d1da:	e6dd      	b.n	800cf98 <_dtoa_r+0x960>
 800d1dc:	9a00      	ldr	r2, [sp, #0]
 800d1de:	429a      	cmp	r2, r3
 800d1e0:	d189      	bne.n	800d0f6 <_dtoa_r+0xabe>
 800d1e2:	f10b 0b01 	add.w	fp, fp, #1
 800d1e6:	2331      	movs	r3, #49	; 0x31
 800d1e8:	e796      	b.n	800d118 <_dtoa_r+0xae0>
 800d1ea:	4b0a      	ldr	r3, [pc, #40]	; (800d214 <_dtoa_r+0xbdc>)
 800d1ec:	f7ff ba99 	b.w	800c722 <_dtoa_r+0xea>
 800d1f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	f47f aa6d 	bne.w	800c6d2 <_dtoa_r+0x9a>
 800d1f8:	4b07      	ldr	r3, [pc, #28]	; (800d218 <_dtoa_r+0xbe0>)
 800d1fa:	f7ff ba92 	b.w	800c722 <_dtoa_r+0xea>
 800d1fe:	9b01      	ldr	r3, [sp, #4]
 800d200:	2b00      	cmp	r3, #0
 800d202:	dcb5      	bgt.n	800d170 <_dtoa_r+0xb38>
 800d204:	9b07      	ldr	r3, [sp, #28]
 800d206:	2b02      	cmp	r3, #2
 800d208:	f73f aeb1 	bgt.w	800cf6e <_dtoa_r+0x936>
 800d20c:	e7b0      	b.n	800d170 <_dtoa_r+0xb38>
 800d20e:	bf00      	nop
 800d210:	0800f9fc 	.word	0x0800f9fc
 800d214:	0800f95c 	.word	0x0800f95c
 800d218:	0800f980 	.word	0x0800f980

0800d21c <_free_r>:
 800d21c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d21e:	2900      	cmp	r1, #0
 800d220:	d044      	beq.n	800d2ac <_free_r+0x90>
 800d222:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d226:	9001      	str	r0, [sp, #4]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	f1a1 0404 	sub.w	r4, r1, #4
 800d22e:	bfb8      	it	lt
 800d230:	18e4      	addlt	r4, r4, r3
 800d232:	f000 f8e7 	bl	800d404 <__malloc_lock>
 800d236:	4a1e      	ldr	r2, [pc, #120]	; (800d2b0 <_free_r+0x94>)
 800d238:	9801      	ldr	r0, [sp, #4]
 800d23a:	6813      	ldr	r3, [r2, #0]
 800d23c:	b933      	cbnz	r3, 800d24c <_free_r+0x30>
 800d23e:	6063      	str	r3, [r4, #4]
 800d240:	6014      	str	r4, [r2, #0]
 800d242:	b003      	add	sp, #12
 800d244:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d248:	f000 b8e2 	b.w	800d410 <__malloc_unlock>
 800d24c:	42a3      	cmp	r3, r4
 800d24e:	d908      	bls.n	800d262 <_free_r+0x46>
 800d250:	6825      	ldr	r5, [r4, #0]
 800d252:	1961      	adds	r1, r4, r5
 800d254:	428b      	cmp	r3, r1
 800d256:	bf01      	itttt	eq
 800d258:	6819      	ldreq	r1, [r3, #0]
 800d25a:	685b      	ldreq	r3, [r3, #4]
 800d25c:	1949      	addeq	r1, r1, r5
 800d25e:	6021      	streq	r1, [r4, #0]
 800d260:	e7ed      	b.n	800d23e <_free_r+0x22>
 800d262:	461a      	mov	r2, r3
 800d264:	685b      	ldr	r3, [r3, #4]
 800d266:	b10b      	cbz	r3, 800d26c <_free_r+0x50>
 800d268:	42a3      	cmp	r3, r4
 800d26a:	d9fa      	bls.n	800d262 <_free_r+0x46>
 800d26c:	6811      	ldr	r1, [r2, #0]
 800d26e:	1855      	adds	r5, r2, r1
 800d270:	42a5      	cmp	r5, r4
 800d272:	d10b      	bne.n	800d28c <_free_r+0x70>
 800d274:	6824      	ldr	r4, [r4, #0]
 800d276:	4421      	add	r1, r4
 800d278:	1854      	adds	r4, r2, r1
 800d27a:	42a3      	cmp	r3, r4
 800d27c:	6011      	str	r1, [r2, #0]
 800d27e:	d1e0      	bne.n	800d242 <_free_r+0x26>
 800d280:	681c      	ldr	r4, [r3, #0]
 800d282:	685b      	ldr	r3, [r3, #4]
 800d284:	6053      	str	r3, [r2, #4]
 800d286:	440c      	add	r4, r1
 800d288:	6014      	str	r4, [r2, #0]
 800d28a:	e7da      	b.n	800d242 <_free_r+0x26>
 800d28c:	d902      	bls.n	800d294 <_free_r+0x78>
 800d28e:	230c      	movs	r3, #12
 800d290:	6003      	str	r3, [r0, #0]
 800d292:	e7d6      	b.n	800d242 <_free_r+0x26>
 800d294:	6825      	ldr	r5, [r4, #0]
 800d296:	1961      	adds	r1, r4, r5
 800d298:	428b      	cmp	r3, r1
 800d29a:	bf04      	itt	eq
 800d29c:	6819      	ldreq	r1, [r3, #0]
 800d29e:	685b      	ldreq	r3, [r3, #4]
 800d2a0:	6063      	str	r3, [r4, #4]
 800d2a2:	bf04      	itt	eq
 800d2a4:	1949      	addeq	r1, r1, r5
 800d2a6:	6021      	streq	r1, [r4, #0]
 800d2a8:	6054      	str	r4, [r2, #4]
 800d2aa:	e7ca      	b.n	800d242 <_free_r+0x26>
 800d2ac:	b003      	add	sp, #12
 800d2ae:	bd30      	pop	{r4, r5, pc}
 800d2b0:	20002d9c 	.word	0x20002d9c

0800d2b4 <malloc>:
 800d2b4:	4b02      	ldr	r3, [pc, #8]	; (800d2c0 <malloc+0xc>)
 800d2b6:	4601      	mov	r1, r0
 800d2b8:	6818      	ldr	r0, [r3, #0]
 800d2ba:	f000 b823 	b.w	800d304 <_malloc_r>
 800d2be:	bf00      	nop
 800d2c0:	20000068 	.word	0x20000068

0800d2c4 <sbrk_aligned>:
 800d2c4:	b570      	push	{r4, r5, r6, lr}
 800d2c6:	4e0e      	ldr	r6, [pc, #56]	; (800d300 <sbrk_aligned+0x3c>)
 800d2c8:	460c      	mov	r4, r1
 800d2ca:	6831      	ldr	r1, [r6, #0]
 800d2cc:	4605      	mov	r5, r0
 800d2ce:	b911      	cbnz	r1, 800d2d6 <sbrk_aligned+0x12>
 800d2d0:	f000 fe40 	bl	800df54 <_sbrk_r>
 800d2d4:	6030      	str	r0, [r6, #0]
 800d2d6:	4621      	mov	r1, r4
 800d2d8:	4628      	mov	r0, r5
 800d2da:	f000 fe3b 	bl	800df54 <_sbrk_r>
 800d2de:	1c43      	adds	r3, r0, #1
 800d2e0:	d00a      	beq.n	800d2f8 <sbrk_aligned+0x34>
 800d2e2:	1cc4      	adds	r4, r0, #3
 800d2e4:	f024 0403 	bic.w	r4, r4, #3
 800d2e8:	42a0      	cmp	r0, r4
 800d2ea:	d007      	beq.n	800d2fc <sbrk_aligned+0x38>
 800d2ec:	1a21      	subs	r1, r4, r0
 800d2ee:	4628      	mov	r0, r5
 800d2f0:	f000 fe30 	bl	800df54 <_sbrk_r>
 800d2f4:	3001      	adds	r0, #1
 800d2f6:	d101      	bne.n	800d2fc <sbrk_aligned+0x38>
 800d2f8:	f04f 34ff 	mov.w	r4, #4294967295
 800d2fc:	4620      	mov	r0, r4
 800d2fe:	bd70      	pop	{r4, r5, r6, pc}
 800d300:	20002da0 	.word	0x20002da0

0800d304 <_malloc_r>:
 800d304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d308:	1ccd      	adds	r5, r1, #3
 800d30a:	f025 0503 	bic.w	r5, r5, #3
 800d30e:	3508      	adds	r5, #8
 800d310:	2d0c      	cmp	r5, #12
 800d312:	bf38      	it	cc
 800d314:	250c      	movcc	r5, #12
 800d316:	2d00      	cmp	r5, #0
 800d318:	4607      	mov	r7, r0
 800d31a:	db01      	blt.n	800d320 <_malloc_r+0x1c>
 800d31c:	42a9      	cmp	r1, r5
 800d31e:	d905      	bls.n	800d32c <_malloc_r+0x28>
 800d320:	230c      	movs	r3, #12
 800d322:	603b      	str	r3, [r7, #0]
 800d324:	2600      	movs	r6, #0
 800d326:	4630      	mov	r0, r6
 800d328:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d32c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d400 <_malloc_r+0xfc>
 800d330:	f000 f868 	bl	800d404 <__malloc_lock>
 800d334:	f8d8 3000 	ldr.w	r3, [r8]
 800d338:	461c      	mov	r4, r3
 800d33a:	bb5c      	cbnz	r4, 800d394 <_malloc_r+0x90>
 800d33c:	4629      	mov	r1, r5
 800d33e:	4638      	mov	r0, r7
 800d340:	f7ff ffc0 	bl	800d2c4 <sbrk_aligned>
 800d344:	1c43      	adds	r3, r0, #1
 800d346:	4604      	mov	r4, r0
 800d348:	d155      	bne.n	800d3f6 <_malloc_r+0xf2>
 800d34a:	f8d8 4000 	ldr.w	r4, [r8]
 800d34e:	4626      	mov	r6, r4
 800d350:	2e00      	cmp	r6, #0
 800d352:	d145      	bne.n	800d3e0 <_malloc_r+0xdc>
 800d354:	2c00      	cmp	r4, #0
 800d356:	d048      	beq.n	800d3ea <_malloc_r+0xe6>
 800d358:	6823      	ldr	r3, [r4, #0]
 800d35a:	4631      	mov	r1, r6
 800d35c:	4638      	mov	r0, r7
 800d35e:	eb04 0903 	add.w	r9, r4, r3
 800d362:	f000 fdf7 	bl	800df54 <_sbrk_r>
 800d366:	4581      	cmp	r9, r0
 800d368:	d13f      	bne.n	800d3ea <_malloc_r+0xe6>
 800d36a:	6821      	ldr	r1, [r4, #0]
 800d36c:	1a6d      	subs	r5, r5, r1
 800d36e:	4629      	mov	r1, r5
 800d370:	4638      	mov	r0, r7
 800d372:	f7ff ffa7 	bl	800d2c4 <sbrk_aligned>
 800d376:	3001      	adds	r0, #1
 800d378:	d037      	beq.n	800d3ea <_malloc_r+0xe6>
 800d37a:	6823      	ldr	r3, [r4, #0]
 800d37c:	442b      	add	r3, r5
 800d37e:	6023      	str	r3, [r4, #0]
 800d380:	f8d8 3000 	ldr.w	r3, [r8]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d038      	beq.n	800d3fa <_malloc_r+0xf6>
 800d388:	685a      	ldr	r2, [r3, #4]
 800d38a:	42a2      	cmp	r2, r4
 800d38c:	d12b      	bne.n	800d3e6 <_malloc_r+0xe2>
 800d38e:	2200      	movs	r2, #0
 800d390:	605a      	str	r2, [r3, #4]
 800d392:	e00f      	b.n	800d3b4 <_malloc_r+0xb0>
 800d394:	6822      	ldr	r2, [r4, #0]
 800d396:	1b52      	subs	r2, r2, r5
 800d398:	d41f      	bmi.n	800d3da <_malloc_r+0xd6>
 800d39a:	2a0b      	cmp	r2, #11
 800d39c:	d917      	bls.n	800d3ce <_malloc_r+0xca>
 800d39e:	1961      	adds	r1, r4, r5
 800d3a0:	42a3      	cmp	r3, r4
 800d3a2:	6025      	str	r5, [r4, #0]
 800d3a4:	bf18      	it	ne
 800d3a6:	6059      	strne	r1, [r3, #4]
 800d3a8:	6863      	ldr	r3, [r4, #4]
 800d3aa:	bf08      	it	eq
 800d3ac:	f8c8 1000 	streq.w	r1, [r8]
 800d3b0:	5162      	str	r2, [r4, r5]
 800d3b2:	604b      	str	r3, [r1, #4]
 800d3b4:	4638      	mov	r0, r7
 800d3b6:	f104 060b 	add.w	r6, r4, #11
 800d3ba:	f000 f829 	bl	800d410 <__malloc_unlock>
 800d3be:	f026 0607 	bic.w	r6, r6, #7
 800d3c2:	1d23      	adds	r3, r4, #4
 800d3c4:	1af2      	subs	r2, r6, r3
 800d3c6:	d0ae      	beq.n	800d326 <_malloc_r+0x22>
 800d3c8:	1b9b      	subs	r3, r3, r6
 800d3ca:	50a3      	str	r3, [r4, r2]
 800d3cc:	e7ab      	b.n	800d326 <_malloc_r+0x22>
 800d3ce:	42a3      	cmp	r3, r4
 800d3d0:	6862      	ldr	r2, [r4, #4]
 800d3d2:	d1dd      	bne.n	800d390 <_malloc_r+0x8c>
 800d3d4:	f8c8 2000 	str.w	r2, [r8]
 800d3d8:	e7ec      	b.n	800d3b4 <_malloc_r+0xb0>
 800d3da:	4623      	mov	r3, r4
 800d3dc:	6864      	ldr	r4, [r4, #4]
 800d3de:	e7ac      	b.n	800d33a <_malloc_r+0x36>
 800d3e0:	4634      	mov	r4, r6
 800d3e2:	6876      	ldr	r6, [r6, #4]
 800d3e4:	e7b4      	b.n	800d350 <_malloc_r+0x4c>
 800d3e6:	4613      	mov	r3, r2
 800d3e8:	e7cc      	b.n	800d384 <_malloc_r+0x80>
 800d3ea:	230c      	movs	r3, #12
 800d3ec:	603b      	str	r3, [r7, #0]
 800d3ee:	4638      	mov	r0, r7
 800d3f0:	f000 f80e 	bl	800d410 <__malloc_unlock>
 800d3f4:	e797      	b.n	800d326 <_malloc_r+0x22>
 800d3f6:	6025      	str	r5, [r4, #0]
 800d3f8:	e7dc      	b.n	800d3b4 <_malloc_r+0xb0>
 800d3fa:	605b      	str	r3, [r3, #4]
 800d3fc:	deff      	udf	#255	; 0xff
 800d3fe:	bf00      	nop
 800d400:	20002d9c 	.word	0x20002d9c

0800d404 <__malloc_lock>:
 800d404:	4801      	ldr	r0, [pc, #4]	; (800d40c <__malloc_lock+0x8>)
 800d406:	f7ff b87f 	b.w	800c508 <__retarget_lock_acquire_recursive>
 800d40a:	bf00      	nop
 800d40c:	20002d98 	.word	0x20002d98

0800d410 <__malloc_unlock>:
 800d410:	4801      	ldr	r0, [pc, #4]	; (800d418 <__malloc_unlock+0x8>)
 800d412:	f7ff b87a 	b.w	800c50a <__retarget_lock_release_recursive>
 800d416:	bf00      	nop
 800d418:	20002d98 	.word	0x20002d98

0800d41c <_Balloc>:
 800d41c:	b570      	push	{r4, r5, r6, lr}
 800d41e:	69c6      	ldr	r6, [r0, #28]
 800d420:	4604      	mov	r4, r0
 800d422:	460d      	mov	r5, r1
 800d424:	b976      	cbnz	r6, 800d444 <_Balloc+0x28>
 800d426:	2010      	movs	r0, #16
 800d428:	f7ff ff44 	bl	800d2b4 <malloc>
 800d42c:	4602      	mov	r2, r0
 800d42e:	61e0      	str	r0, [r4, #28]
 800d430:	b920      	cbnz	r0, 800d43c <_Balloc+0x20>
 800d432:	4b18      	ldr	r3, [pc, #96]	; (800d494 <_Balloc+0x78>)
 800d434:	4818      	ldr	r0, [pc, #96]	; (800d498 <_Balloc+0x7c>)
 800d436:	216b      	movs	r1, #107	; 0x6b
 800d438:	f000 fd9c 	bl	800df74 <__assert_func>
 800d43c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d440:	6006      	str	r6, [r0, #0]
 800d442:	60c6      	str	r6, [r0, #12]
 800d444:	69e6      	ldr	r6, [r4, #28]
 800d446:	68f3      	ldr	r3, [r6, #12]
 800d448:	b183      	cbz	r3, 800d46c <_Balloc+0x50>
 800d44a:	69e3      	ldr	r3, [r4, #28]
 800d44c:	68db      	ldr	r3, [r3, #12]
 800d44e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d452:	b9b8      	cbnz	r0, 800d484 <_Balloc+0x68>
 800d454:	2101      	movs	r1, #1
 800d456:	fa01 f605 	lsl.w	r6, r1, r5
 800d45a:	1d72      	adds	r2, r6, #5
 800d45c:	0092      	lsls	r2, r2, #2
 800d45e:	4620      	mov	r0, r4
 800d460:	f000 fda6 	bl	800dfb0 <_calloc_r>
 800d464:	b160      	cbz	r0, 800d480 <_Balloc+0x64>
 800d466:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d46a:	e00e      	b.n	800d48a <_Balloc+0x6e>
 800d46c:	2221      	movs	r2, #33	; 0x21
 800d46e:	2104      	movs	r1, #4
 800d470:	4620      	mov	r0, r4
 800d472:	f000 fd9d 	bl	800dfb0 <_calloc_r>
 800d476:	69e3      	ldr	r3, [r4, #28]
 800d478:	60f0      	str	r0, [r6, #12]
 800d47a:	68db      	ldr	r3, [r3, #12]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d1e4      	bne.n	800d44a <_Balloc+0x2e>
 800d480:	2000      	movs	r0, #0
 800d482:	bd70      	pop	{r4, r5, r6, pc}
 800d484:	6802      	ldr	r2, [r0, #0]
 800d486:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d48a:	2300      	movs	r3, #0
 800d48c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d490:	e7f7      	b.n	800d482 <_Balloc+0x66>
 800d492:	bf00      	nop
 800d494:	0800f98d 	.word	0x0800f98d
 800d498:	0800fa0d 	.word	0x0800fa0d

0800d49c <_Bfree>:
 800d49c:	b570      	push	{r4, r5, r6, lr}
 800d49e:	69c6      	ldr	r6, [r0, #28]
 800d4a0:	4605      	mov	r5, r0
 800d4a2:	460c      	mov	r4, r1
 800d4a4:	b976      	cbnz	r6, 800d4c4 <_Bfree+0x28>
 800d4a6:	2010      	movs	r0, #16
 800d4a8:	f7ff ff04 	bl	800d2b4 <malloc>
 800d4ac:	4602      	mov	r2, r0
 800d4ae:	61e8      	str	r0, [r5, #28]
 800d4b0:	b920      	cbnz	r0, 800d4bc <_Bfree+0x20>
 800d4b2:	4b09      	ldr	r3, [pc, #36]	; (800d4d8 <_Bfree+0x3c>)
 800d4b4:	4809      	ldr	r0, [pc, #36]	; (800d4dc <_Bfree+0x40>)
 800d4b6:	218f      	movs	r1, #143	; 0x8f
 800d4b8:	f000 fd5c 	bl	800df74 <__assert_func>
 800d4bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d4c0:	6006      	str	r6, [r0, #0]
 800d4c2:	60c6      	str	r6, [r0, #12]
 800d4c4:	b13c      	cbz	r4, 800d4d6 <_Bfree+0x3a>
 800d4c6:	69eb      	ldr	r3, [r5, #28]
 800d4c8:	6862      	ldr	r2, [r4, #4]
 800d4ca:	68db      	ldr	r3, [r3, #12]
 800d4cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d4d0:	6021      	str	r1, [r4, #0]
 800d4d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d4d6:	bd70      	pop	{r4, r5, r6, pc}
 800d4d8:	0800f98d 	.word	0x0800f98d
 800d4dc:	0800fa0d 	.word	0x0800fa0d

0800d4e0 <__multadd>:
 800d4e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4e4:	690d      	ldr	r5, [r1, #16]
 800d4e6:	4607      	mov	r7, r0
 800d4e8:	460c      	mov	r4, r1
 800d4ea:	461e      	mov	r6, r3
 800d4ec:	f101 0c14 	add.w	ip, r1, #20
 800d4f0:	2000      	movs	r0, #0
 800d4f2:	f8dc 3000 	ldr.w	r3, [ip]
 800d4f6:	b299      	uxth	r1, r3
 800d4f8:	fb02 6101 	mla	r1, r2, r1, r6
 800d4fc:	0c1e      	lsrs	r6, r3, #16
 800d4fe:	0c0b      	lsrs	r3, r1, #16
 800d500:	fb02 3306 	mla	r3, r2, r6, r3
 800d504:	b289      	uxth	r1, r1
 800d506:	3001      	adds	r0, #1
 800d508:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d50c:	4285      	cmp	r5, r0
 800d50e:	f84c 1b04 	str.w	r1, [ip], #4
 800d512:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d516:	dcec      	bgt.n	800d4f2 <__multadd+0x12>
 800d518:	b30e      	cbz	r6, 800d55e <__multadd+0x7e>
 800d51a:	68a3      	ldr	r3, [r4, #8]
 800d51c:	42ab      	cmp	r3, r5
 800d51e:	dc19      	bgt.n	800d554 <__multadd+0x74>
 800d520:	6861      	ldr	r1, [r4, #4]
 800d522:	4638      	mov	r0, r7
 800d524:	3101      	adds	r1, #1
 800d526:	f7ff ff79 	bl	800d41c <_Balloc>
 800d52a:	4680      	mov	r8, r0
 800d52c:	b928      	cbnz	r0, 800d53a <__multadd+0x5a>
 800d52e:	4602      	mov	r2, r0
 800d530:	4b0c      	ldr	r3, [pc, #48]	; (800d564 <__multadd+0x84>)
 800d532:	480d      	ldr	r0, [pc, #52]	; (800d568 <__multadd+0x88>)
 800d534:	21ba      	movs	r1, #186	; 0xba
 800d536:	f000 fd1d 	bl	800df74 <__assert_func>
 800d53a:	6922      	ldr	r2, [r4, #16]
 800d53c:	3202      	adds	r2, #2
 800d53e:	f104 010c 	add.w	r1, r4, #12
 800d542:	0092      	lsls	r2, r2, #2
 800d544:	300c      	adds	r0, #12
 800d546:	f7fe ffe1 	bl	800c50c <memcpy>
 800d54a:	4621      	mov	r1, r4
 800d54c:	4638      	mov	r0, r7
 800d54e:	f7ff ffa5 	bl	800d49c <_Bfree>
 800d552:	4644      	mov	r4, r8
 800d554:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d558:	3501      	adds	r5, #1
 800d55a:	615e      	str	r6, [r3, #20]
 800d55c:	6125      	str	r5, [r4, #16]
 800d55e:	4620      	mov	r0, r4
 800d560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d564:	0800f9fc 	.word	0x0800f9fc
 800d568:	0800fa0d 	.word	0x0800fa0d

0800d56c <__hi0bits>:
 800d56c:	0c03      	lsrs	r3, r0, #16
 800d56e:	041b      	lsls	r3, r3, #16
 800d570:	b9d3      	cbnz	r3, 800d5a8 <__hi0bits+0x3c>
 800d572:	0400      	lsls	r0, r0, #16
 800d574:	2310      	movs	r3, #16
 800d576:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d57a:	bf04      	itt	eq
 800d57c:	0200      	lsleq	r0, r0, #8
 800d57e:	3308      	addeq	r3, #8
 800d580:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d584:	bf04      	itt	eq
 800d586:	0100      	lsleq	r0, r0, #4
 800d588:	3304      	addeq	r3, #4
 800d58a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d58e:	bf04      	itt	eq
 800d590:	0080      	lsleq	r0, r0, #2
 800d592:	3302      	addeq	r3, #2
 800d594:	2800      	cmp	r0, #0
 800d596:	db05      	blt.n	800d5a4 <__hi0bits+0x38>
 800d598:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d59c:	f103 0301 	add.w	r3, r3, #1
 800d5a0:	bf08      	it	eq
 800d5a2:	2320      	moveq	r3, #32
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	4770      	bx	lr
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	e7e4      	b.n	800d576 <__hi0bits+0xa>

0800d5ac <__lo0bits>:
 800d5ac:	6803      	ldr	r3, [r0, #0]
 800d5ae:	f013 0207 	ands.w	r2, r3, #7
 800d5b2:	d00c      	beq.n	800d5ce <__lo0bits+0x22>
 800d5b4:	07d9      	lsls	r1, r3, #31
 800d5b6:	d422      	bmi.n	800d5fe <__lo0bits+0x52>
 800d5b8:	079a      	lsls	r2, r3, #30
 800d5ba:	bf49      	itett	mi
 800d5bc:	085b      	lsrmi	r3, r3, #1
 800d5be:	089b      	lsrpl	r3, r3, #2
 800d5c0:	6003      	strmi	r3, [r0, #0]
 800d5c2:	2201      	movmi	r2, #1
 800d5c4:	bf5c      	itt	pl
 800d5c6:	6003      	strpl	r3, [r0, #0]
 800d5c8:	2202      	movpl	r2, #2
 800d5ca:	4610      	mov	r0, r2
 800d5cc:	4770      	bx	lr
 800d5ce:	b299      	uxth	r1, r3
 800d5d0:	b909      	cbnz	r1, 800d5d6 <__lo0bits+0x2a>
 800d5d2:	0c1b      	lsrs	r3, r3, #16
 800d5d4:	2210      	movs	r2, #16
 800d5d6:	b2d9      	uxtb	r1, r3
 800d5d8:	b909      	cbnz	r1, 800d5de <__lo0bits+0x32>
 800d5da:	3208      	adds	r2, #8
 800d5dc:	0a1b      	lsrs	r3, r3, #8
 800d5de:	0719      	lsls	r1, r3, #28
 800d5e0:	bf04      	itt	eq
 800d5e2:	091b      	lsreq	r3, r3, #4
 800d5e4:	3204      	addeq	r2, #4
 800d5e6:	0799      	lsls	r1, r3, #30
 800d5e8:	bf04      	itt	eq
 800d5ea:	089b      	lsreq	r3, r3, #2
 800d5ec:	3202      	addeq	r2, #2
 800d5ee:	07d9      	lsls	r1, r3, #31
 800d5f0:	d403      	bmi.n	800d5fa <__lo0bits+0x4e>
 800d5f2:	085b      	lsrs	r3, r3, #1
 800d5f4:	f102 0201 	add.w	r2, r2, #1
 800d5f8:	d003      	beq.n	800d602 <__lo0bits+0x56>
 800d5fa:	6003      	str	r3, [r0, #0]
 800d5fc:	e7e5      	b.n	800d5ca <__lo0bits+0x1e>
 800d5fe:	2200      	movs	r2, #0
 800d600:	e7e3      	b.n	800d5ca <__lo0bits+0x1e>
 800d602:	2220      	movs	r2, #32
 800d604:	e7e1      	b.n	800d5ca <__lo0bits+0x1e>
	...

0800d608 <__i2b>:
 800d608:	b510      	push	{r4, lr}
 800d60a:	460c      	mov	r4, r1
 800d60c:	2101      	movs	r1, #1
 800d60e:	f7ff ff05 	bl	800d41c <_Balloc>
 800d612:	4602      	mov	r2, r0
 800d614:	b928      	cbnz	r0, 800d622 <__i2b+0x1a>
 800d616:	4b05      	ldr	r3, [pc, #20]	; (800d62c <__i2b+0x24>)
 800d618:	4805      	ldr	r0, [pc, #20]	; (800d630 <__i2b+0x28>)
 800d61a:	f240 1145 	movw	r1, #325	; 0x145
 800d61e:	f000 fca9 	bl	800df74 <__assert_func>
 800d622:	2301      	movs	r3, #1
 800d624:	6144      	str	r4, [r0, #20]
 800d626:	6103      	str	r3, [r0, #16]
 800d628:	bd10      	pop	{r4, pc}
 800d62a:	bf00      	nop
 800d62c:	0800f9fc 	.word	0x0800f9fc
 800d630:	0800fa0d 	.word	0x0800fa0d

0800d634 <__multiply>:
 800d634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d638:	4691      	mov	r9, r2
 800d63a:	690a      	ldr	r2, [r1, #16]
 800d63c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d640:	429a      	cmp	r2, r3
 800d642:	bfb8      	it	lt
 800d644:	460b      	movlt	r3, r1
 800d646:	460c      	mov	r4, r1
 800d648:	bfbc      	itt	lt
 800d64a:	464c      	movlt	r4, r9
 800d64c:	4699      	movlt	r9, r3
 800d64e:	6927      	ldr	r7, [r4, #16]
 800d650:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d654:	68a3      	ldr	r3, [r4, #8]
 800d656:	6861      	ldr	r1, [r4, #4]
 800d658:	eb07 060a 	add.w	r6, r7, sl
 800d65c:	42b3      	cmp	r3, r6
 800d65e:	b085      	sub	sp, #20
 800d660:	bfb8      	it	lt
 800d662:	3101      	addlt	r1, #1
 800d664:	f7ff feda 	bl	800d41c <_Balloc>
 800d668:	b930      	cbnz	r0, 800d678 <__multiply+0x44>
 800d66a:	4602      	mov	r2, r0
 800d66c:	4b44      	ldr	r3, [pc, #272]	; (800d780 <__multiply+0x14c>)
 800d66e:	4845      	ldr	r0, [pc, #276]	; (800d784 <__multiply+0x150>)
 800d670:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800d674:	f000 fc7e 	bl	800df74 <__assert_func>
 800d678:	f100 0514 	add.w	r5, r0, #20
 800d67c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d680:	462b      	mov	r3, r5
 800d682:	2200      	movs	r2, #0
 800d684:	4543      	cmp	r3, r8
 800d686:	d321      	bcc.n	800d6cc <__multiply+0x98>
 800d688:	f104 0314 	add.w	r3, r4, #20
 800d68c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d690:	f109 0314 	add.w	r3, r9, #20
 800d694:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d698:	9202      	str	r2, [sp, #8]
 800d69a:	1b3a      	subs	r2, r7, r4
 800d69c:	3a15      	subs	r2, #21
 800d69e:	f022 0203 	bic.w	r2, r2, #3
 800d6a2:	3204      	adds	r2, #4
 800d6a4:	f104 0115 	add.w	r1, r4, #21
 800d6a8:	428f      	cmp	r7, r1
 800d6aa:	bf38      	it	cc
 800d6ac:	2204      	movcc	r2, #4
 800d6ae:	9201      	str	r2, [sp, #4]
 800d6b0:	9a02      	ldr	r2, [sp, #8]
 800d6b2:	9303      	str	r3, [sp, #12]
 800d6b4:	429a      	cmp	r2, r3
 800d6b6:	d80c      	bhi.n	800d6d2 <__multiply+0x9e>
 800d6b8:	2e00      	cmp	r6, #0
 800d6ba:	dd03      	ble.n	800d6c4 <__multiply+0x90>
 800d6bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d05b      	beq.n	800d77c <__multiply+0x148>
 800d6c4:	6106      	str	r6, [r0, #16]
 800d6c6:	b005      	add	sp, #20
 800d6c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6cc:	f843 2b04 	str.w	r2, [r3], #4
 800d6d0:	e7d8      	b.n	800d684 <__multiply+0x50>
 800d6d2:	f8b3 a000 	ldrh.w	sl, [r3]
 800d6d6:	f1ba 0f00 	cmp.w	sl, #0
 800d6da:	d024      	beq.n	800d726 <__multiply+0xf2>
 800d6dc:	f104 0e14 	add.w	lr, r4, #20
 800d6e0:	46a9      	mov	r9, r5
 800d6e2:	f04f 0c00 	mov.w	ip, #0
 800d6e6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d6ea:	f8d9 1000 	ldr.w	r1, [r9]
 800d6ee:	fa1f fb82 	uxth.w	fp, r2
 800d6f2:	b289      	uxth	r1, r1
 800d6f4:	fb0a 110b 	mla	r1, sl, fp, r1
 800d6f8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d6fc:	f8d9 2000 	ldr.w	r2, [r9]
 800d700:	4461      	add	r1, ip
 800d702:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d706:	fb0a c20b 	mla	r2, sl, fp, ip
 800d70a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d70e:	b289      	uxth	r1, r1
 800d710:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d714:	4577      	cmp	r7, lr
 800d716:	f849 1b04 	str.w	r1, [r9], #4
 800d71a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d71e:	d8e2      	bhi.n	800d6e6 <__multiply+0xb2>
 800d720:	9a01      	ldr	r2, [sp, #4]
 800d722:	f845 c002 	str.w	ip, [r5, r2]
 800d726:	9a03      	ldr	r2, [sp, #12]
 800d728:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d72c:	3304      	adds	r3, #4
 800d72e:	f1b9 0f00 	cmp.w	r9, #0
 800d732:	d021      	beq.n	800d778 <__multiply+0x144>
 800d734:	6829      	ldr	r1, [r5, #0]
 800d736:	f104 0c14 	add.w	ip, r4, #20
 800d73a:	46ae      	mov	lr, r5
 800d73c:	f04f 0a00 	mov.w	sl, #0
 800d740:	f8bc b000 	ldrh.w	fp, [ip]
 800d744:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d748:	fb09 220b 	mla	r2, r9, fp, r2
 800d74c:	4452      	add	r2, sl
 800d74e:	b289      	uxth	r1, r1
 800d750:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d754:	f84e 1b04 	str.w	r1, [lr], #4
 800d758:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d75c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d760:	f8be 1000 	ldrh.w	r1, [lr]
 800d764:	fb09 110a 	mla	r1, r9, sl, r1
 800d768:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d76c:	4567      	cmp	r7, ip
 800d76e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d772:	d8e5      	bhi.n	800d740 <__multiply+0x10c>
 800d774:	9a01      	ldr	r2, [sp, #4]
 800d776:	50a9      	str	r1, [r5, r2]
 800d778:	3504      	adds	r5, #4
 800d77a:	e799      	b.n	800d6b0 <__multiply+0x7c>
 800d77c:	3e01      	subs	r6, #1
 800d77e:	e79b      	b.n	800d6b8 <__multiply+0x84>
 800d780:	0800f9fc 	.word	0x0800f9fc
 800d784:	0800fa0d 	.word	0x0800fa0d

0800d788 <__pow5mult>:
 800d788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d78c:	4615      	mov	r5, r2
 800d78e:	f012 0203 	ands.w	r2, r2, #3
 800d792:	4606      	mov	r6, r0
 800d794:	460f      	mov	r7, r1
 800d796:	d007      	beq.n	800d7a8 <__pow5mult+0x20>
 800d798:	4c25      	ldr	r4, [pc, #148]	; (800d830 <__pow5mult+0xa8>)
 800d79a:	3a01      	subs	r2, #1
 800d79c:	2300      	movs	r3, #0
 800d79e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d7a2:	f7ff fe9d 	bl	800d4e0 <__multadd>
 800d7a6:	4607      	mov	r7, r0
 800d7a8:	10ad      	asrs	r5, r5, #2
 800d7aa:	d03d      	beq.n	800d828 <__pow5mult+0xa0>
 800d7ac:	69f4      	ldr	r4, [r6, #28]
 800d7ae:	b97c      	cbnz	r4, 800d7d0 <__pow5mult+0x48>
 800d7b0:	2010      	movs	r0, #16
 800d7b2:	f7ff fd7f 	bl	800d2b4 <malloc>
 800d7b6:	4602      	mov	r2, r0
 800d7b8:	61f0      	str	r0, [r6, #28]
 800d7ba:	b928      	cbnz	r0, 800d7c8 <__pow5mult+0x40>
 800d7bc:	4b1d      	ldr	r3, [pc, #116]	; (800d834 <__pow5mult+0xac>)
 800d7be:	481e      	ldr	r0, [pc, #120]	; (800d838 <__pow5mult+0xb0>)
 800d7c0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d7c4:	f000 fbd6 	bl	800df74 <__assert_func>
 800d7c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d7cc:	6004      	str	r4, [r0, #0]
 800d7ce:	60c4      	str	r4, [r0, #12]
 800d7d0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d7d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d7d8:	b94c      	cbnz	r4, 800d7ee <__pow5mult+0x66>
 800d7da:	f240 2171 	movw	r1, #625	; 0x271
 800d7de:	4630      	mov	r0, r6
 800d7e0:	f7ff ff12 	bl	800d608 <__i2b>
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	f8c8 0008 	str.w	r0, [r8, #8]
 800d7ea:	4604      	mov	r4, r0
 800d7ec:	6003      	str	r3, [r0, #0]
 800d7ee:	f04f 0900 	mov.w	r9, #0
 800d7f2:	07eb      	lsls	r3, r5, #31
 800d7f4:	d50a      	bpl.n	800d80c <__pow5mult+0x84>
 800d7f6:	4639      	mov	r1, r7
 800d7f8:	4622      	mov	r2, r4
 800d7fa:	4630      	mov	r0, r6
 800d7fc:	f7ff ff1a 	bl	800d634 <__multiply>
 800d800:	4639      	mov	r1, r7
 800d802:	4680      	mov	r8, r0
 800d804:	4630      	mov	r0, r6
 800d806:	f7ff fe49 	bl	800d49c <_Bfree>
 800d80a:	4647      	mov	r7, r8
 800d80c:	106d      	asrs	r5, r5, #1
 800d80e:	d00b      	beq.n	800d828 <__pow5mult+0xa0>
 800d810:	6820      	ldr	r0, [r4, #0]
 800d812:	b938      	cbnz	r0, 800d824 <__pow5mult+0x9c>
 800d814:	4622      	mov	r2, r4
 800d816:	4621      	mov	r1, r4
 800d818:	4630      	mov	r0, r6
 800d81a:	f7ff ff0b 	bl	800d634 <__multiply>
 800d81e:	6020      	str	r0, [r4, #0]
 800d820:	f8c0 9000 	str.w	r9, [r0]
 800d824:	4604      	mov	r4, r0
 800d826:	e7e4      	b.n	800d7f2 <__pow5mult+0x6a>
 800d828:	4638      	mov	r0, r7
 800d82a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d82e:	bf00      	nop
 800d830:	0800fb58 	.word	0x0800fb58
 800d834:	0800f98d 	.word	0x0800f98d
 800d838:	0800fa0d 	.word	0x0800fa0d

0800d83c <__lshift>:
 800d83c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d840:	460c      	mov	r4, r1
 800d842:	6849      	ldr	r1, [r1, #4]
 800d844:	6923      	ldr	r3, [r4, #16]
 800d846:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d84a:	68a3      	ldr	r3, [r4, #8]
 800d84c:	4607      	mov	r7, r0
 800d84e:	4691      	mov	r9, r2
 800d850:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d854:	f108 0601 	add.w	r6, r8, #1
 800d858:	42b3      	cmp	r3, r6
 800d85a:	db0b      	blt.n	800d874 <__lshift+0x38>
 800d85c:	4638      	mov	r0, r7
 800d85e:	f7ff fddd 	bl	800d41c <_Balloc>
 800d862:	4605      	mov	r5, r0
 800d864:	b948      	cbnz	r0, 800d87a <__lshift+0x3e>
 800d866:	4602      	mov	r2, r0
 800d868:	4b28      	ldr	r3, [pc, #160]	; (800d90c <__lshift+0xd0>)
 800d86a:	4829      	ldr	r0, [pc, #164]	; (800d910 <__lshift+0xd4>)
 800d86c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800d870:	f000 fb80 	bl	800df74 <__assert_func>
 800d874:	3101      	adds	r1, #1
 800d876:	005b      	lsls	r3, r3, #1
 800d878:	e7ee      	b.n	800d858 <__lshift+0x1c>
 800d87a:	2300      	movs	r3, #0
 800d87c:	f100 0114 	add.w	r1, r0, #20
 800d880:	f100 0210 	add.w	r2, r0, #16
 800d884:	4618      	mov	r0, r3
 800d886:	4553      	cmp	r3, sl
 800d888:	db33      	blt.n	800d8f2 <__lshift+0xb6>
 800d88a:	6920      	ldr	r0, [r4, #16]
 800d88c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d890:	f104 0314 	add.w	r3, r4, #20
 800d894:	f019 091f 	ands.w	r9, r9, #31
 800d898:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d89c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d8a0:	d02b      	beq.n	800d8fa <__lshift+0xbe>
 800d8a2:	f1c9 0e20 	rsb	lr, r9, #32
 800d8a6:	468a      	mov	sl, r1
 800d8a8:	2200      	movs	r2, #0
 800d8aa:	6818      	ldr	r0, [r3, #0]
 800d8ac:	fa00 f009 	lsl.w	r0, r0, r9
 800d8b0:	4310      	orrs	r0, r2
 800d8b2:	f84a 0b04 	str.w	r0, [sl], #4
 800d8b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8ba:	459c      	cmp	ip, r3
 800d8bc:	fa22 f20e 	lsr.w	r2, r2, lr
 800d8c0:	d8f3      	bhi.n	800d8aa <__lshift+0x6e>
 800d8c2:	ebac 0304 	sub.w	r3, ip, r4
 800d8c6:	3b15      	subs	r3, #21
 800d8c8:	f023 0303 	bic.w	r3, r3, #3
 800d8cc:	3304      	adds	r3, #4
 800d8ce:	f104 0015 	add.w	r0, r4, #21
 800d8d2:	4584      	cmp	ip, r0
 800d8d4:	bf38      	it	cc
 800d8d6:	2304      	movcc	r3, #4
 800d8d8:	50ca      	str	r2, [r1, r3]
 800d8da:	b10a      	cbz	r2, 800d8e0 <__lshift+0xa4>
 800d8dc:	f108 0602 	add.w	r6, r8, #2
 800d8e0:	3e01      	subs	r6, #1
 800d8e2:	4638      	mov	r0, r7
 800d8e4:	612e      	str	r6, [r5, #16]
 800d8e6:	4621      	mov	r1, r4
 800d8e8:	f7ff fdd8 	bl	800d49c <_Bfree>
 800d8ec:	4628      	mov	r0, r5
 800d8ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8f2:	f842 0f04 	str.w	r0, [r2, #4]!
 800d8f6:	3301      	adds	r3, #1
 800d8f8:	e7c5      	b.n	800d886 <__lshift+0x4a>
 800d8fa:	3904      	subs	r1, #4
 800d8fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800d900:	f841 2f04 	str.w	r2, [r1, #4]!
 800d904:	459c      	cmp	ip, r3
 800d906:	d8f9      	bhi.n	800d8fc <__lshift+0xc0>
 800d908:	e7ea      	b.n	800d8e0 <__lshift+0xa4>
 800d90a:	bf00      	nop
 800d90c:	0800f9fc 	.word	0x0800f9fc
 800d910:	0800fa0d 	.word	0x0800fa0d

0800d914 <__mcmp>:
 800d914:	b530      	push	{r4, r5, lr}
 800d916:	6902      	ldr	r2, [r0, #16]
 800d918:	690c      	ldr	r4, [r1, #16]
 800d91a:	1b12      	subs	r2, r2, r4
 800d91c:	d10e      	bne.n	800d93c <__mcmp+0x28>
 800d91e:	f100 0314 	add.w	r3, r0, #20
 800d922:	3114      	adds	r1, #20
 800d924:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d928:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d92c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d930:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d934:	42a5      	cmp	r5, r4
 800d936:	d003      	beq.n	800d940 <__mcmp+0x2c>
 800d938:	d305      	bcc.n	800d946 <__mcmp+0x32>
 800d93a:	2201      	movs	r2, #1
 800d93c:	4610      	mov	r0, r2
 800d93e:	bd30      	pop	{r4, r5, pc}
 800d940:	4283      	cmp	r3, r0
 800d942:	d3f3      	bcc.n	800d92c <__mcmp+0x18>
 800d944:	e7fa      	b.n	800d93c <__mcmp+0x28>
 800d946:	f04f 32ff 	mov.w	r2, #4294967295
 800d94a:	e7f7      	b.n	800d93c <__mcmp+0x28>

0800d94c <__mdiff>:
 800d94c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d950:	460c      	mov	r4, r1
 800d952:	4606      	mov	r6, r0
 800d954:	4611      	mov	r1, r2
 800d956:	4620      	mov	r0, r4
 800d958:	4690      	mov	r8, r2
 800d95a:	f7ff ffdb 	bl	800d914 <__mcmp>
 800d95e:	1e05      	subs	r5, r0, #0
 800d960:	d110      	bne.n	800d984 <__mdiff+0x38>
 800d962:	4629      	mov	r1, r5
 800d964:	4630      	mov	r0, r6
 800d966:	f7ff fd59 	bl	800d41c <_Balloc>
 800d96a:	b930      	cbnz	r0, 800d97a <__mdiff+0x2e>
 800d96c:	4b3a      	ldr	r3, [pc, #232]	; (800da58 <__mdiff+0x10c>)
 800d96e:	4602      	mov	r2, r0
 800d970:	f240 2137 	movw	r1, #567	; 0x237
 800d974:	4839      	ldr	r0, [pc, #228]	; (800da5c <__mdiff+0x110>)
 800d976:	f000 fafd 	bl	800df74 <__assert_func>
 800d97a:	2301      	movs	r3, #1
 800d97c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d980:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d984:	bfa4      	itt	ge
 800d986:	4643      	movge	r3, r8
 800d988:	46a0      	movge	r8, r4
 800d98a:	4630      	mov	r0, r6
 800d98c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d990:	bfa6      	itte	ge
 800d992:	461c      	movge	r4, r3
 800d994:	2500      	movge	r5, #0
 800d996:	2501      	movlt	r5, #1
 800d998:	f7ff fd40 	bl	800d41c <_Balloc>
 800d99c:	b920      	cbnz	r0, 800d9a8 <__mdiff+0x5c>
 800d99e:	4b2e      	ldr	r3, [pc, #184]	; (800da58 <__mdiff+0x10c>)
 800d9a0:	4602      	mov	r2, r0
 800d9a2:	f240 2145 	movw	r1, #581	; 0x245
 800d9a6:	e7e5      	b.n	800d974 <__mdiff+0x28>
 800d9a8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d9ac:	6926      	ldr	r6, [r4, #16]
 800d9ae:	60c5      	str	r5, [r0, #12]
 800d9b0:	f104 0914 	add.w	r9, r4, #20
 800d9b4:	f108 0514 	add.w	r5, r8, #20
 800d9b8:	f100 0e14 	add.w	lr, r0, #20
 800d9bc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d9c0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d9c4:	f108 0210 	add.w	r2, r8, #16
 800d9c8:	46f2      	mov	sl, lr
 800d9ca:	2100      	movs	r1, #0
 800d9cc:	f859 3b04 	ldr.w	r3, [r9], #4
 800d9d0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d9d4:	fa11 f88b 	uxtah	r8, r1, fp
 800d9d8:	b299      	uxth	r1, r3
 800d9da:	0c1b      	lsrs	r3, r3, #16
 800d9dc:	eba8 0801 	sub.w	r8, r8, r1
 800d9e0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d9e4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d9e8:	fa1f f888 	uxth.w	r8, r8
 800d9ec:	1419      	asrs	r1, r3, #16
 800d9ee:	454e      	cmp	r6, r9
 800d9f0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d9f4:	f84a 3b04 	str.w	r3, [sl], #4
 800d9f8:	d8e8      	bhi.n	800d9cc <__mdiff+0x80>
 800d9fa:	1b33      	subs	r3, r6, r4
 800d9fc:	3b15      	subs	r3, #21
 800d9fe:	f023 0303 	bic.w	r3, r3, #3
 800da02:	3304      	adds	r3, #4
 800da04:	3415      	adds	r4, #21
 800da06:	42a6      	cmp	r6, r4
 800da08:	bf38      	it	cc
 800da0a:	2304      	movcc	r3, #4
 800da0c:	441d      	add	r5, r3
 800da0e:	4473      	add	r3, lr
 800da10:	469e      	mov	lr, r3
 800da12:	462e      	mov	r6, r5
 800da14:	4566      	cmp	r6, ip
 800da16:	d30e      	bcc.n	800da36 <__mdiff+0xea>
 800da18:	f10c 0203 	add.w	r2, ip, #3
 800da1c:	1b52      	subs	r2, r2, r5
 800da1e:	f022 0203 	bic.w	r2, r2, #3
 800da22:	3d03      	subs	r5, #3
 800da24:	45ac      	cmp	ip, r5
 800da26:	bf38      	it	cc
 800da28:	2200      	movcc	r2, #0
 800da2a:	4413      	add	r3, r2
 800da2c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800da30:	b17a      	cbz	r2, 800da52 <__mdiff+0x106>
 800da32:	6107      	str	r7, [r0, #16]
 800da34:	e7a4      	b.n	800d980 <__mdiff+0x34>
 800da36:	f856 8b04 	ldr.w	r8, [r6], #4
 800da3a:	fa11 f288 	uxtah	r2, r1, r8
 800da3e:	1414      	asrs	r4, r2, #16
 800da40:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800da44:	b292      	uxth	r2, r2
 800da46:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800da4a:	f84e 2b04 	str.w	r2, [lr], #4
 800da4e:	1421      	asrs	r1, r4, #16
 800da50:	e7e0      	b.n	800da14 <__mdiff+0xc8>
 800da52:	3f01      	subs	r7, #1
 800da54:	e7ea      	b.n	800da2c <__mdiff+0xe0>
 800da56:	bf00      	nop
 800da58:	0800f9fc 	.word	0x0800f9fc
 800da5c:	0800fa0d 	.word	0x0800fa0d

0800da60 <__d2b>:
 800da60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800da64:	460f      	mov	r7, r1
 800da66:	2101      	movs	r1, #1
 800da68:	ec59 8b10 	vmov	r8, r9, d0
 800da6c:	4616      	mov	r6, r2
 800da6e:	f7ff fcd5 	bl	800d41c <_Balloc>
 800da72:	4604      	mov	r4, r0
 800da74:	b930      	cbnz	r0, 800da84 <__d2b+0x24>
 800da76:	4602      	mov	r2, r0
 800da78:	4b24      	ldr	r3, [pc, #144]	; (800db0c <__d2b+0xac>)
 800da7a:	4825      	ldr	r0, [pc, #148]	; (800db10 <__d2b+0xb0>)
 800da7c:	f240 310f 	movw	r1, #783	; 0x30f
 800da80:	f000 fa78 	bl	800df74 <__assert_func>
 800da84:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800da88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800da8c:	bb2d      	cbnz	r5, 800dada <__d2b+0x7a>
 800da8e:	9301      	str	r3, [sp, #4]
 800da90:	f1b8 0300 	subs.w	r3, r8, #0
 800da94:	d026      	beq.n	800dae4 <__d2b+0x84>
 800da96:	4668      	mov	r0, sp
 800da98:	9300      	str	r3, [sp, #0]
 800da9a:	f7ff fd87 	bl	800d5ac <__lo0bits>
 800da9e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800daa2:	b1e8      	cbz	r0, 800dae0 <__d2b+0x80>
 800daa4:	f1c0 0320 	rsb	r3, r0, #32
 800daa8:	fa02 f303 	lsl.w	r3, r2, r3
 800daac:	430b      	orrs	r3, r1
 800daae:	40c2      	lsrs	r2, r0
 800dab0:	6163      	str	r3, [r4, #20]
 800dab2:	9201      	str	r2, [sp, #4]
 800dab4:	9b01      	ldr	r3, [sp, #4]
 800dab6:	61a3      	str	r3, [r4, #24]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	bf14      	ite	ne
 800dabc:	2202      	movne	r2, #2
 800dabe:	2201      	moveq	r2, #1
 800dac0:	6122      	str	r2, [r4, #16]
 800dac2:	b1bd      	cbz	r5, 800daf4 <__d2b+0x94>
 800dac4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800dac8:	4405      	add	r5, r0
 800daca:	603d      	str	r5, [r7, #0]
 800dacc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800dad0:	6030      	str	r0, [r6, #0]
 800dad2:	4620      	mov	r0, r4
 800dad4:	b003      	add	sp, #12
 800dad6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dada:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dade:	e7d6      	b.n	800da8e <__d2b+0x2e>
 800dae0:	6161      	str	r1, [r4, #20]
 800dae2:	e7e7      	b.n	800dab4 <__d2b+0x54>
 800dae4:	a801      	add	r0, sp, #4
 800dae6:	f7ff fd61 	bl	800d5ac <__lo0bits>
 800daea:	9b01      	ldr	r3, [sp, #4]
 800daec:	6163      	str	r3, [r4, #20]
 800daee:	3020      	adds	r0, #32
 800daf0:	2201      	movs	r2, #1
 800daf2:	e7e5      	b.n	800dac0 <__d2b+0x60>
 800daf4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800daf8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800dafc:	6038      	str	r0, [r7, #0]
 800dafe:	6918      	ldr	r0, [r3, #16]
 800db00:	f7ff fd34 	bl	800d56c <__hi0bits>
 800db04:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800db08:	e7e2      	b.n	800dad0 <__d2b+0x70>
 800db0a:	bf00      	nop
 800db0c:	0800f9fc 	.word	0x0800f9fc
 800db10:	0800fa0d 	.word	0x0800fa0d

0800db14 <__ssputs_r>:
 800db14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db18:	688e      	ldr	r6, [r1, #8]
 800db1a:	461f      	mov	r7, r3
 800db1c:	42be      	cmp	r6, r7
 800db1e:	680b      	ldr	r3, [r1, #0]
 800db20:	4682      	mov	sl, r0
 800db22:	460c      	mov	r4, r1
 800db24:	4690      	mov	r8, r2
 800db26:	d82c      	bhi.n	800db82 <__ssputs_r+0x6e>
 800db28:	898a      	ldrh	r2, [r1, #12]
 800db2a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800db2e:	d026      	beq.n	800db7e <__ssputs_r+0x6a>
 800db30:	6965      	ldr	r5, [r4, #20]
 800db32:	6909      	ldr	r1, [r1, #16]
 800db34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800db38:	eba3 0901 	sub.w	r9, r3, r1
 800db3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800db40:	1c7b      	adds	r3, r7, #1
 800db42:	444b      	add	r3, r9
 800db44:	106d      	asrs	r5, r5, #1
 800db46:	429d      	cmp	r5, r3
 800db48:	bf38      	it	cc
 800db4a:	461d      	movcc	r5, r3
 800db4c:	0553      	lsls	r3, r2, #21
 800db4e:	d527      	bpl.n	800dba0 <__ssputs_r+0x8c>
 800db50:	4629      	mov	r1, r5
 800db52:	f7ff fbd7 	bl	800d304 <_malloc_r>
 800db56:	4606      	mov	r6, r0
 800db58:	b360      	cbz	r0, 800dbb4 <__ssputs_r+0xa0>
 800db5a:	6921      	ldr	r1, [r4, #16]
 800db5c:	464a      	mov	r2, r9
 800db5e:	f7fe fcd5 	bl	800c50c <memcpy>
 800db62:	89a3      	ldrh	r3, [r4, #12]
 800db64:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800db68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db6c:	81a3      	strh	r3, [r4, #12]
 800db6e:	6126      	str	r6, [r4, #16]
 800db70:	6165      	str	r5, [r4, #20]
 800db72:	444e      	add	r6, r9
 800db74:	eba5 0509 	sub.w	r5, r5, r9
 800db78:	6026      	str	r6, [r4, #0]
 800db7a:	60a5      	str	r5, [r4, #8]
 800db7c:	463e      	mov	r6, r7
 800db7e:	42be      	cmp	r6, r7
 800db80:	d900      	bls.n	800db84 <__ssputs_r+0x70>
 800db82:	463e      	mov	r6, r7
 800db84:	6820      	ldr	r0, [r4, #0]
 800db86:	4632      	mov	r2, r6
 800db88:	4641      	mov	r1, r8
 800db8a:	f000 f9c9 	bl	800df20 <memmove>
 800db8e:	68a3      	ldr	r3, [r4, #8]
 800db90:	1b9b      	subs	r3, r3, r6
 800db92:	60a3      	str	r3, [r4, #8]
 800db94:	6823      	ldr	r3, [r4, #0]
 800db96:	4433      	add	r3, r6
 800db98:	6023      	str	r3, [r4, #0]
 800db9a:	2000      	movs	r0, #0
 800db9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dba0:	462a      	mov	r2, r5
 800dba2:	f000 fa2d 	bl	800e000 <_realloc_r>
 800dba6:	4606      	mov	r6, r0
 800dba8:	2800      	cmp	r0, #0
 800dbaa:	d1e0      	bne.n	800db6e <__ssputs_r+0x5a>
 800dbac:	6921      	ldr	r1, [r4, #16]
 800dbae:	4650      	mov	r0, sl
 800dbb0:	f7ff fb34 	bl	800d21c <_free_r>
 800dbb4:	230c      	movs	r3, #12
 800dbb6:	f8ca 3000 	str.w	r3, [sl]
 800dbba:	89a3      	ldrh	r3, [r4, #12]
 800dbbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dbc0:	81a3      	strh	r3, [r4, #12]
 800dbc2:	f04f 30ff 	mov.w	r0, #4294967295
 800dbc6:	e7e9      	b.n	800db9c <__ssputs_r+0x88>

0800dbc8 <_svfiprintf_r>:
 800dbc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbcc:	4698      	mov	r8, r3
 800dbce:	898b      	ldrh	r3, [r1, #12]
 800dbd0:	061b      	lsls	r3, r3, #24
 800dbd2:	b09d      	sub	sp, #116	; 0x74
 800dbd4:	4607      	mov	r7, r0
 800dbd6:	460d      	mov	r5, r1
 800dbd8:	4614      	mov	r4, r2
 800dbda:	d50e      	bpl.n	800dbfa <_svfiprintf_r+0x32>
 800dbdc:	690b      	ldr	r3, [r1, #16]
 800dbde:	b963      	cbnz	r3, 800dbfa <_svfiprintf_r+0x32>
 800dbe0:	2140      	movs	r1, #64	; 0x40
 800dbe2:	f7ff fb8f 	bl	800d304 <_malloc_r>
 800dbe6:	6028      	str	r0, [r5, #0]
 800dbe8:	6128      	str	r0, [r5, #16]
 800dbea:	b920      	cbnz	r0, 800dbf6 <_svfiprintf_r+0x2e>
 800dbec:	230c      	movs	r3, #12
 800dbee:	603b      	str	r3, [r7, #0]
 800dbf0:	f04f 30ff 	mov.w	r0, #4294967295
 800dbf4:	e0d0      	b.n	800dd98 <_svfiprintf_r+0x1d0>
 800dbf6:	2340      	movs	r3, #64	; 0x40
 800dbf8:	616b      	str	r3, [r5, #20]
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	9309      	str	r3, [sp, #36]	; 0x24
 800dbfe:	2320      	movs	r3, #32
 800dc00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dc04:	f8cd 800c 	str.w	r8, [sp, #12]
 800dc08:	2330      	movs	r3, #48	; 0x30
 800dc0a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ddb0 <_svfiprintf_r+0x1e8>
 800dc0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dc12:	f04f 0901 	mov.w	r9, #1
 800dc16:	4623      	mov	r3, r4
 800dc18:	469a      	mov	sl, r3
 800dc1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc1e:	b10a      	cbz	r2, 800dc24 <_svfiprintf_r+0x5c>
 800dc20:	2a25      	cmp	r2, #37	; 0x25
 800dc22:	d1f9      	bne.n	800dc18 <_svfiprintf_r+0x50>
 800dc24:	ebba 0b04 	subs.w	fp, sl, r4
 800dc28:	d00b      	beq.n	800dc42 <_svfiprintf_r+0x7a>
 800dc2a:	465b      	mov	r3, fp
 800dc2c:	4622      	mov	r2, r4
 800dc2e:	4629      	mov	r1, r5
 800dc30:	4638      	mov	r0, r7
 800dc32:	f7ff ff6f 	bl	800db14 <__ssputs_r>
 800dc36:	3001      	adds	r0, #1
 800dc38:	f000 80a9 	beq.w	800dd8e <_svfiprintf_r+0x1c6>
 800dc3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dc3e:	445a      	add	r2, fp
 800dc40:	9209      	str	r2, [sp, #36]	; 0x24
 800dc42:	f89a 3000 	ldrb.w	r3, [sl]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	f000 80a1 	beq.w	800dd8e <_svfiprintf_r+0x1c6>
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	f04f 32ff 	mov.w	r2, #4294967295
 800dc52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc56:	f10a 0a01 	add.w	sl, sl, #1
 800dc5a:	9304      	str	r3, [sp, #16]
 800dc5c:	9307      	str	r3, [sp, #28]
 800dc5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dc62:	931a      	str	r3, [sp, #104]	; 0x68
 800dc64:	4654      	mov	r4, sl
 800dc66:	2205      	movs	r2, #5
 800dc68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc6c:	4850      	ldr	r0, [pc, #320]	; (800ddb0 <_svfiprintf_r+0x1e8>)
 800dc6e:	f7f2 fabf 	bl	80001f0 <memchr>
 800dc72:	9a04      	ldr	r2, [sp, #16]
 800dc74:	b9d8      	cbnz	r0, 800dcae <_svfiprintf_r+0xe6>
 800dc76:	06d0      	lsls	r0, r2, #27
 800dc78:	bf44      	itt	mi
 800dc7a:	2320      	movmi	r3, #32
 800dc7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc80:	0711      	lsls	r1, r2, #28
 800dc82:	bf44      	itt	mi
 800dc84:	232b      	movmi	r3, #43	; 0x2b
 800dc86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc8a:	f89a 3000 	ldrb.w	r3, [sl]
 800dc8e:	2b2a      	cmp	r3, #42	; 0x2a
 800dc90:	d015      	beq.n	800dcbe <_svfiprintf_r+0xf6>
 800dc92:	9a07      	ldr	r2, [sp, #28]
 800dc94:	4654      	mov	r4, sl
 800dc96:	2000      	movs	r0, #0
 800dc98:	f04f 0c0a 	mov.w	ip, #10
 800dc9c:	4621      	mov	r1, r4
 800dc9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dca2:	3b30      	subs	r3, #48	; 0x30
 800dca4:	2b09      	cmp	r3, #9
 800dca6:	d94d      	bls.n	800dd44 <_svfiprintf_r+0x17c>
 800dca8:	b1b0      	cbz	r0, 800dcd8 <_svfiprintf_r+0x110>
 800dcaa:	9207      	str	r2, [sp, #28]
 800dcac:	e014      	b.n	800dcd8 <_svfiprintf_r+0x110>
 800dcae:	eba0 0308 	sub.w	r3, r0, r8
 800dcb2:	fa09 f303 	lsl.w	r3, r9, r3
 800dcb6:	4313      	orrs	r3, r2
 800dcb8:	9304      	str	r3, [sp, #16]
 800dcba:	46a2      	mov	sl, r4
 800dcbc:	e7d2      	b.n	800dc64 <_svfiprintf_r+0x9c>
 800dcbe:	9b03      	ldr	r3, [sp, #12]
 800dcc0:	1d19      	adds	r1, r3, #4
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	9103      	str	r1, [sp, #12]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	bfbb      	ittet	lt
 800dcca:	425b      	neglt	r3, r3
 800dccc:	f042 0202 	orrlt.w	r2, r2, #2
 800dcd0:	9307      	strge	r3, [sp, #28]
 800dcd2:	9307      	strlt	r3, [sp, #28]
 800dcd4:	bfb8      	it	lt
 800dcd6:	9204      	strlt	r2, [sp, #16]
 800dcd8:	7823      	ldrb	r3, [r4, #0]
 800dcda:	2b2e      	cmp	r3, #46	; 0x2e
 800dcdc:	d10c      	bne.n	800dcf8 <_svfiprintf_r+0x130>
 800dcde:	7863      	ldrb	r3, [r4, #1]
 800dce0:	2b2a      	cmp	r3, #42	; 0x2a
 800dce2:	d134      	bne.n	800dd4e <_svfiprintf_r+0x186>
 800dce4:	9b03      	ldr	r3, [sp, #12]
 800dce6:	1d1a      	adds	r2, r3, #4
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	9203      	str	r2, [sp, #12]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	bfb8      	it	lt
 800dcf0:	f04f 33ff 	movlt.w	r3, #4294967295
 800dcf4:	3402      	adds	r4, #2
 800dcf6:	9305      	str	r3, [sp, #20]
 800dcf8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ddc0 <_svfiprintf_r+0x1f8>
 800dcfc:	7821      	ldrb	r1, [r4, #0]
 800dcfe:	2203      	movs	r2, #3
 800dd00:	4650      	mov	r0, sl
 800dd02:	f7f2 fa75 	bl	80001f0 <memchr>
 800dd06:	b138      	cbz	r0, 800dd18 <_svfiprintf_r+0x150>
 800dd08:	9b04      	ldr	r3, [sp, #16]
 800dd0a:	eba0 000a 	sub.w	r0, r0, sl
 800dd0e:	2240      	movs	r2, #64	; 0x40
 800dd10:	4082      	lsls	r2, r0
 800dd12:	4313      	orrs	r3, r2
 800dd14:	3401      	adds	r4, #1
 800dd16:	9304      	str	r3, [sp, #16]
 800dd18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd1c:	4825      	ldr	r0, [pc, #148]	; (800ddb4 <_svfiprintf_r+0x1ec>)
 800dd1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dd22:	2206      	movs	r2, #6
 800dd24:	f7f2 fa64 	bl	80001f0 <memchr>
 800dd28:	2800      	cmp	r0, #0
 800dd2a:	d038      	beq.n	800dd9e <_svfiprintf_r+0x1d6>
 800dd2c:	4b22      	ldr	r3, [pc, #136]	; (800ddb8 <_svfiprintf_r+0x1f0>)
 800dd2e:	bb1b      	cbnz	r3, 800dd78 <_svfiprintf_r+0x1b0>
 800dd30:	9b03      	ldr	r3, [sp, #12]
 800dd32:	3307      	adds	r3, #7
 800dd34:	f023 0307 	bic.w	r3, r3, #7
 800dd38:	3308      	adds	r3, #8
 800dd3a:	9303      	str	r3, [sp, #12]
 800dd3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd3e:	4433      	add	r3, r6
 800dd40:	9309      	str	r3, [sp, #36]	; 0x24
 800dd42:	e768      	b.n	800dc16 <_svfiprintf_r+0x4e>
 800dd44:	fb0c 3202 	mla	r2, ip, r2, r3
 800dd48:	460c      	mov	r4, r1
 800dd4a:	2001      	movs	r0, #1
 800dd4c:	e7a6      	b.n	800dc9c <_svfiprintf_r+0xd4>
 800dd4e:	2300      	movs	r3, #0
 800dd50:	3401      	adds	r4, #1
 800dd52:	9305      	str	r3, [sp, #20]
 800dd54:	4619      	mov	r1, r3
 800dd56:	f04f 0c0a 	mov.w	ip, #10
 800dd5a:	4620      	mov	r0, r4
 800dd5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd60:	3a30      	subs	r2, #48	; 0x30
 800dd62:	2a09      	cmp	r2, #9
 800dd64:	d903      	bls.n	800dd6e <_svfiprintf_r+0x1a6>
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d0c6      	beq.n	800dcf8 <_svfiprintf_r+0x130>
 800dd6a:	9105      	str	r1, [sp, #20]
 800dd6c:	e7c4      	b.n	800dcf8 <_svfiprintf_r+0x130>
 800dd6e:	fb0c 2101 	mla	r1, ip, r1, r2
 800dd72:	4604      	mov	r4, r0
 800dd74:	2301      	movs	r3, #1
 800dd76:	e7f0      	b.n	800dd5a <_svfiprintf_r+0x192>
 800dd78:	ab03      	add	r3, sp, #12
 800dd7a:	9300      	str	r3, [sp, #0]
 800dd7c:	462a      	mov	r2, r5
 800dd7e:	4b0f      	ldr	r3, [pc, #60]	; (800ddbc <_svfiprintf_r+0x1f4>)
 800dd80:	a904      	add	r1, sp, #16
 800dd82:	4638      	mov	r0, r7
 800dd84:	f7fd fe6a 	bl	800ba5c <_printf_float>
 800dd88:	1c42      	adds	r2, r0, #1
 800dd8a:	4606      	mov	r6, r0
 800dd8c:	d1d6      	bne.n	800dd3c <_svfiprintf_r+0x174>
 800dd8e:	89ab      	ldrh	r3, [r5, #12]
 800dd90:	065b      	lsls	r3, r3, #25
 800dd92:	f53f af2d 	bmi.w	800dbf0 <_svfiprintf_r+0x28>
 800dd96:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dd98:	b01d      	add	sp, #116	; 0x74
 800dd9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd9e:	ab03      	add	r3, sp, #12
 800dda0:	9300      	str	r3, [sp, #0]
 800dda2:	462a      	mov	r2, r5
 800dda4:	4b05      	ldr	r3, [pc, #20]	; (800ddbc <_svfiprintf_r+0x1f4>)
 800dda6:	a904      	add	r1, sp, #16
 800dda8:	4638      	mov	r0, r7
 800ddaa:	f7fe f8fb 	bl	800bfa4 <_printf_i>
 800ddae:	e7eb      	b.n	800dd88 <_svfiprintf_r+0x1c0>
 800ddb0:	0800fb64 	.word	0x0800fb64
 800ddb4:	0800fb6e 	.word	0x0800fb6e
 800ddb8:	0800ba5d 	.word	0x0800ba5d
 800ddbc:	0800db15 	.word	0x0800db15
 800ddc0:	0800fb6a 	.word	0x0800fb6a

0800ddc4 <__sflush_r>:
 800ddc4:	898a      	ldrh	r2, [r1, #12]
 800ddc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddca:	4605      	mov	r5, r0
 800ddcc:	0710      	lsls	r0, r2, #28
 800ddce:	460c      	mov	r4, r1
 800ddd0:	d458      	bmi.n	800de84 <__sflush_r+0xc0>
 800ddd2:	684b      	ldr	r3, [r1, #4]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	dc05      	bgt.n	800dde4 <__sflush_r+0x20>
 800ddd8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	dc02      	bgt.n	800dde4 <__sflush_r+0x20>
 800ddde:	2000      	movs	r0, #0
 800dde0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dde4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dde6:	2e00      	cmp	r6, #0
 800dde8:	d0f9      	beq.n	800ddde <__sflush_r+0x1a>
 800ddea:	2300      	movs	r3, #0
 800ddec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ddf0:	682f      	ldr	r7, [r5, #0]
 800ddf2:	6a21      	ldr	r1, [r4, #32]
 800ddf4:	602b      	str	r3, [r5, #0]
 800ddf6:	d032      	beq.n	800de5e <__sflush_r+0x9a>
 800ddf8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ddfa:	89a3      	ldrh	r3, [r4, #12]
 800ddfc:	075a      	lsls	r2, r3, #29
 800ddfe:	d505      	bpl.n	800de0c <__sflush_r+0x48>
 800de00:	6863      	ldr	r3, [r4, #4]
 800de02:	1ac0      	subs	r0, r0, r3
 800de04:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800de06:	b10b      	cbz	r3, 800de0c <__sflush_r+0x48>
 800de08:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800de0a:	1ac0      	subs	r0, r0, r3
 800de0c:	2300      	movs	r3, #0
 800de0e:	4602      	mov	r2, r0
 800de10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800de12:	6a21      	ldr	r1, [r4, #32]
 800de14:	4628      	mov	r0, r5
 800de16:	47b0      	blx	r6
 800de18:	1c43      	adds	r3, r0, #1
 800de1a:	89a3      	ldrh	r3, [r4, #12]
 800de1c:	d106      	bne.n	800de2c <__sflush_r+0x68>
 800de1e:	6829      	ldr	r1, [r5, #0]
 800de20:	291d      	cmp	r1, #29
 800de22:	d82b      	bhi.n	800de7c <__sflush_r+0xb8>
 800de24:	4a29      	ldr	r2, [pc, #164]	; (800decc <__sflush_r+0x108>)
 800de26:	410a      	asrs	r2, r1
 800de28:	07d6      	lsls	r6, r2, #31
 800de2a:	d427      	bmi.n	800de7c <__sflush_r+0xb8>
 800de2c:	2200      	movs	r2, #0
 800de2e:	6062      	str	r2, [r4, #4]
 800de30:	04d9      	lsls	r1, r3, #19
 800de32:	6922      	ldr	r2, [r4, #16]
 800de34:	6022      	str	r2, [r4, #0]
 800de36:	d504      	bpl.n	800de42 <__sflush_r+0x7e>
 800de38:	1c42      	adds	r2, r0, #1
 800de3a:	d101      	bne.n	800de40 <__sflush_r+0x7c>
 800de3c:	682b      	ldr	r3, [r5, #0]
 800de3e:	b903      	cbnz	r3, 800de42 <__sflush_r+0x7e>
 800de40:	6560      	str	r0, [r4, #84]	; 0x54
 800de42:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800de44:	602f      	str	r7, [r5, #0]
 800de46:	2900      	cmp	r1, #0
 800de48:	d0c9      	beq.n	800ddde <__sflush_r+0x1a>
 800de4a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800de4e:	4299      	cmp	r1, r3
 800de50:	d002      	beq.n	800de58 <__sflush_r+0x94>
 800de52:	4628      	mov	r0, r5
 800de54:	f7ff f9e2 	bl	800d21c <_free_r>
 800de58:	2000      	movs	r0, #0
 800de5a:	6360      	str	r0, [r4, #52]	; 0x34
 800de5c:	e7c0      	b.n	800dde0 <__sflush_r+0x1c>
 800de5e:	2301      	movs	r3, #1
 800de60:	4628      	mov	r0, r5
 800de62:	47b0      	blx	r6
 800de64:	1c41      	adds	r1, r0, #1
 800de66:	d1c8      	bne.n	800ddfa <__sflush_r+0x36>
 800de68:	682b      	ldr	r3, [r5, #0]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d0c5      	beq.n	800ddfa <__sflush_r+0x36>
 800de6e:	2b1d      	cmp	r3, #29
 800de70:	d001      	beq.n	800de76 <__sflush_r+0xb2>
 800de72:	2b16      	cmp	r3, #22
 800de74:	d101      	bne.n	800de7a <__sflush_r+0xb6>
 800de76:	602f      	str	r7, [r5, #0]
 800de78:	e7b1      	b.n	800ddde <__sflush_r+0x1a>
 800de7a:	89a3      	ldrh	r3, [r4, #12]
 800de7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de80:	81a3      	strh	r3, [r4, #12]
 800de82:	e7ad      	b.n	800dde0 <__sflush_r+0x1c>
 800de84:	690f      	ldr	r7, [r1, #16]
 800de86:	2f00      	cmp	r7, #0
 800de88:	d0a9      	beq.n	800ddde <__sflush_r+0x1a>
 800de8a:	0793      	lsls	r3, r2, #30
 800de8c:	680e      	ldr	r6, [r1, #0]
 800de8e:	bf08      	it	eq
 800de90:	694b      	ldreq	r3, [r1, #20]
 800de92:	600f      	str	r7, [r1, #0]
 800de94:	bf18      	it	ne
 800de96:	2300      	movne	r3, #0
 800de98:	eba6 0807 	sub.w	r8, r6, r7
 800de9c:	608b      	str	r3, [r1, #8]
 800de9e:	f1b8 0f00 	cmp.w	r8, #0
 800dea2:	dd9c      	ble.n	800ddde <__sflush_r+0x1a>
 800dea4:	6a21      	ldr	r1, [r4, #32]
 800dea6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dea8:	4643      	mov	r3, r8
 800deaa:	463a      	mov	r2, r7
 800deac:	4628      	mov	r0, r5
 800deae:	47b0      	blx	r6
 800deb0:	2800      	cmp	r0, #0
 800deb2:	dc06      	bgt.n	800dec2 <__sflush_r+0xfe>
 800deb4:	89a3      	ldrh	r3, [r4, #12]
 800deb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800deba:	81a3      	strh	r3, [r4, #12]
 800debc:	f04f 30ff 	mov.w	r0, #4294967295
 800dec0:	e78e      	b.n	800dde0 <__sflush_r+0x1c>
 800dec2:	4407      	add	r7, r0
 800dec4:	eba8 0800 	sub.w	r8, r8, r0
 800dec8:	e7e9      	b.n	800de9e <__sflush_r+0xda>
 800deca:	bf00      	nop
 800decc:	dfbffffe 	.word	0xdfbffffe

0800ded0 <_fflush_r>:
 800ded0:	b538      	push	{r3, r4, r5, lr}
 800ded2:	690b      	ldr	r3, [r1, #16]
 800ded4:	4605      	mov	r5, r0
 800ded6:	460c      	mov	r4, r1
 800ded8:	b913      	cbnz	r3, 800dee0 <_fflush_r+0x10>
 800deda:	2500      	movs	r5, #0
 800dedc:	4628      	mov	r0, r5
 800dede:	bd38      	pop	{r3, r4, r5, pc}
 800dee0:	b118      	cbz	r0, 800deea <_fflush_r+0x1a>
 800dee2:	6a03      	ldr	r3, [r0, #32]
 800dee4:	b90b      	cbnz	r3, 800deea <_fflush_r+0x1a>
 800dee6:	f7fe f9f9 	bl	800c2dc <__sinit>
 800deea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d0f3      	beq.n	800deda <_fflush_r+0xa>
 800def2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800def4:	07d0      	lsls	r0, r2, #31
 800def6:	d404      	bmi.n	800df02 <_fflush_r+0x32>
 800def8:	0599      	lsls	r1, r3, #22
 800defa:	d402      	bmi.n	800df02 <_fflush_r+0x32>
 800defc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800defe:	f7fe fb03 	bl	800c508 <__retarget_lock_acquire_recursive>
 800df02:	4628      	mov	r0, r5
 800df04:	4621      	mov	r1, r4
 800df06:	f7ff ff5d 	bl	800ddc4 <__sflush_r>
 800df0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800df0c:	07da      	lsls	r2, r3, #31
 800df0e:	4605      	mov	r5, r0
 800df10:	d4e4      	bmi.n	800dedc <_fflush_r+0xc>
 800df12:	89a3      	ldrh	r3, [r4, #12]
 800df14:	059b      	lsls	r3, r3, #22
 800df16:	d4e1      	bmi.n	800dedc <_fflush_r+0xc>
 800df18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800df1a:	f7fe faf6 	bl	800c50a <__retarget_lock_release_recursive>
 800df1e:	e7dd      	b.n	800dedc <_fflush_r+0xc>

0800df20 <memmove>:
 800df20:	4288      	cmp	r0, r1
 800df22:	b510      	push	{r4, lr}
 800df24:	eb01 0402 	add.w	r4, r1, r2
 800df28:	d902      	bls.n	800df30 <memmove+0x10>
 800df2a:	4284      	cmp	r4, r0
 800df2c:	4623      	mov	r3, r4
 800df2e:	d807      	bhi.n	800df40 <memmove+0x20>
 800df30:	1e43      	subs	r3, r0, #1
 800df32:	42a1      	cmp	r1, r4
 800df34:	d008      	beq.n	800df48 <memmove+0x28>
 800df36:	f811 2b01 	ldrb.w	r2, [r1], #1
 800df3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800df3e:	e7f8      	b.n	800df32 <memmove+0x12>
 800df40:	4402      	add	r2, r0
 800df42:	4601      	mov	r1, r0
 800df44:	428a      	cmp	r2, r1
 800df46:	d100      	bne.n	800df4a <memmove+0x2a>
 800df48:	bd10      	pop	{r4, pc}
 800df4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800df4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800df52:	e7f7      	b.n	800df44 <memmove+0x24>

0800df54 <_sbrk_r>:
 800df54:	b538      	push	{r3, r4, r5, lr}
 800df56:	4d06      	ldr	r5, [pc, #24]	; (800df70 <_sbrk_r+0x1c>)
 800df58:	2300      	movs	r3, #0
 800df5a:	4604      	mov	r4, r0
 800df5c:	4608      	mov	r0, r1
 800df5e:	602b      	str	r3, [r5, #0]
 800df60:	f7f6 f92a 	bl	80041b8 <_sbrk>
 800df64:	1c43      	adds	r3, r0, #1
 800df66:	d102      	bne.n	800df6e <_sbrk_r+0x1a>
 800df68:	682b      	ldr	r3, [r5, #0]
 800df6a:	b103      	cbz	r3, 800df6e <_sbrk_r+0x1a>
 800df6c:	6023      	str	r3, [r4, #0]
 800df6e:	bd38      	pop	{r3, r4, r5, pc}
 800df70:	20002d94 	.word	0x20002d94

0800df74 <__assert_func>:
 800df74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800df76:	4614      	mov	r4, r2
 800df78:	461a      	mov	r2, r3
 800df7a:	4b09      	ldr	r3, [pc, #36]	; (800dfa0 <__assert_func+0x2c>)
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	4605      	mov	r5, r0
 800df80:	68d8      	ldr	r0, [r3, #12]
 800df82:	b14c      	cbz	r4, 800df98 <__assert_func+0x24>
 800df84:	4b07      	ldr	r3, [pc, #28]	; (800dfa4 <__assert_func+0x30>)
 800df86:	9100      	str	r1, [sp, #0]
 800df88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800df8c:	4906      	ldr	r1, [pc, #24]	; (800dfa8 <__assert_func+0x34>)
 800df8e:	462b      	mov	r3, r5
 800df90:	f000 f872 	bl	800e078 <fiprintf>
 800df94:	f000 f882 	bl	800e09c <abort>
 800df98:	4b04      	ldr	r3, [pc, #16]	; (800dfac <__assert_func+0x38>)
 800df9a:	461c      	mov	r4, r3
 800df9c:	e7f3      	b.n	800df86 <__assert_func+0x12>
 800df9e:	bf00      	nop
 800dfa0:	20000068 	.word	0x20000068
 800dfa4:	0800fb7f 	.word	0x0800fb7f
 800dfa8:	0800fb8c 	.word	0x0800fb8c
 800dfac:	0800fbba 	.word	0x0800fbba

0800dfb0 <_calloc_r>:
 800dfb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dfb2:	fba1 2402 	umull	r2, r4, r1, r2
 800dfb6:	b94c      	cbnz	r4, 800dfcc <_calloc_r+0x1c>
 800dfb8:	4611      	mov	r1, r2
 800dfba:	9201      	str	r2, [sp, #4]
 800dfbc:	f7ff f9a2 	bl	800d304 <_malloc_r>
 800dfc0:	9a01      	ldr	r2, [sp, #4]
 800dfc2:	4605      	mov	r5, r0
 800dfc4:	b930      	cbnz	r0, 800dfd4 <_calloc_r+0x24>
 800dfc6:	4628      	mov	r0, r5
 800dfc8:	b003      	add	sp, #12
 800dfca:	bd30      	pop	{r4, r5, pc}
 800dfcc:	220c      	movs	r2, #12
 800dfce:	6002      	str	r2, [r0, #0]
 800dfd0:	2500      	movs	r5, #0
 800dfd2:	e7f8      	b.n	800dfc6 <_calloc_r+0x16>
 800dfd4:	4621      	mov	r1, r4
 800dfd6:	f7fe fa1a 	bl	800c40e <memset>
 800dfda:	e7f4      	b.n	800dfc6 <_calloc_r+0x16>

0800dfdc <__ascii_mbtowc>:
 800dfdc:	b082      	sub	sp, #8
 800dfde:	b901      	cbnz	r1, 800dfe2 <__ascii_mbtowc+0x6>
 800dfe0:	a901      	add	r1, sp, #4
 800dfe2:	b142      	cbz	r2, 800dff6 <__ascii_mbtowc+0x1a>
 800dfe4:	b14b      	cbz	r3, 800dffa <__ascii_mbtowc+0x1e>
 800dfe6:	7813      	ldrb	r3, [r2, #0]
 800dfe8:	600b      	str	r3, [r1, #0]
 800dfea:	7812      	ldrb	r2, [r2, #0]
 800dfec:	1e10      	subs	r0, r2, #0
 800dfee:	bf18      	it	ne
 800dff0:	2001      	movne	r0, #1
 800dff2:	b002      	add	sp, #8
 800dff4:	4770      	bx	lr
 800dff6:	4610      	mov	r0, r2
 800dff8:	e7fb      	b.n	800dff2 <__ascii_mbtowc+0x16>
 800dffa:	f06f 0001 	mvn.w	r0, #1
 800dffe:	e7f8      	b.n	800dff2 <__ascii_mbtowc+0x16>

0800e000 <_realloc_r>:
 800e000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e004:	4680      	mov	r8, r0
 800e006:	4614      	mov	r4, r2
 800e008:	460e      	mov	r6, r1
 800e00a:	b921      	cbnz	r1, 800e016 <_realloc_r+0x16>
 800e00c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e010:	4611      	mov	r1, r2
 800e012:	f7ff b977 	b.w	800d304 <_malloc_r>
 800e016:	b92a      	cbnz	r2, 800e024 <_realloc_r+0x24>
 800e018:	f7ff f900 	bl	800d21c <_free_r>
 800e01c:	4625      	mov	r5, r4
 800e01e:	4628      	mov	r0, r5
 800e020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e024:	f000 f841 	bl	800e0aa <_malloc_usable_size_r>
 800e028:	4284      	cmp	r4, r0
 800e02a:	4607      	mov	r7, r0
 800e02c:	d802      	bhi.n	800e034 <_realloc_r+0x34>
 800e02e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e032:	d812      	bhi.n	800e05a <_realloc_r+0x5a>
 800e034:	4621      	mov	r1, r4
 800e036:	4640      	mov	r0, r8
 800e038:	f7ff f964 	bl	800d304 <_malloc_r>
 800e03c:	4605      	mov	r5, r0
 800e03e:	2800      	cmp	r0, #0
 800e040:	d0ed      	beq.n	800e01e <_realloc_r+0x1e>
 800e042:	42bc      	cmp	r4, r7
 800e044:	4622      	mov	r2, r4
 800e046:	4631      	mov	r1, r6
 800e048:	bf28      	it	cs
 800e04a:	463a      	movcs	r2, r7
 800e04c:	f7fe fa5e 	bl	800c50c <memcpy>
 800e050:	4631      	mov	r1, r6
 800e052:	4640      	mov	r0, r8
 800e054:	f7ff f8e2 	bl	800d21c <_free_r>
 800e058:	e7e1      	b.n	800e01e <_realloc_r+0x1e>
 800e05a:	4635      	mov	r5, r6
 800e05c:	e7df      	b.n	800e01e <_realloc_r+0x1e>

0800e05e <__ascii_wctomb>:
 800e05e:	b149      	cbz	r1, 800e074 <__ascii_wctomb+0x16>
 800e060:	2aff      	cmp	r2, #255	; 0xff
 800e062:	bf85      	ittet	hi
 800e064:	238a      	movhi	r3, #138	; 0x8a
 800e066:	6003      	strhi	r3, [r0, #0]
 800e068:	700a      	strbls	r2, [r1, #0]
 800e06a:	f04f 30ff 	movhi.w	r0, #4294967295
 800e06e:	bf98      	it	ls
 800e070:	2001      	movls	r0, #1
 800e072:	4770      	bx	lr
 800e074:	4608      	mov	r0, r1
 800e076:	4770      	bx	lr

0800e078 <fiprintf>:
 800e078:	b40e      	push	{r1, r2, r3}
 800e07a:	b503      	push	{r0, r1, lr}
 800e07c:	4601      	mov	r1, r0
 800e07e:	ab03      	add	r3, sp, #12
 800e080:	4805      	ldr	r0, [pc, #20]	; (800e098 <fiprintf+0x20>)
 800e082:	f853 2b04 	ldr.w	r2, [r3], #4
 800e086:	6800      	ldr	r0, [r0, #0]
 800e088:	9301      	str	r3, [sp, #4]
 800e08a:	f000 f83f 	bl	800e10c <_vfiprintf_r>
 800e08e:	b002      	add	sp, #8
 800e090:	f85d eb04 	ldr.w	lr, [sp], #4
 800e094:	b003      	add	sp, #12
 800e096:	4770      	bx	lr
 800e098:	20000068 	.word	0x20000068

0800e09c <abort>:
 800e09c:	b508      	push	{r3, lr}
 800e09e:	2006      	movs	r0, #6
 800e0a0:	f000 fa0c 	bl	800e4bc <raise>
 800e0a4:	2001      	movs	r0, #1
 800e0a6:	f7f6 f80f 	bl	80040c8 <_exit>

0800e0aa <_malloc_usable_size_r>:
 800e0aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e0ae:	1f18      	subs	r0, r3, #4
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	bfbc      	itt	lt
 800e0b4:	580b      	ldrlt	r3, [r1, r0]
 800e0b6:	18c0      	addlt	r0, r0, r3
 800e0b8:	4770      	bx	lr

0800e0ba <__sfputc_r>:
 800e0ba:	6893      	ldr	r3, [r2, #8]
 800e0bc:	3b01      	subs	r3, #1
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	b410      	push	{r4}
 800e0c2:	6093      	str	r3, [r2, #8]
 800e0c4:	da08      	bge.n	800e0d8 <__sfputc_r+0x1e>
 800e0c6:	6994      	ldr	r4, [r2, #24]
 800e0c8:	42a3      	cmp	r3, r4
 800e0ca:	db01      	blt.n	800e0d0 <__sfputc_r+0x16>
 800e0cc:	290a      	cmp	r1, #10
 800e0ce:	d103      	bne.n	800e0d8 <__sfputc_r+0x1e>
 800e0d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0d4:	f000 b934 	b.w	800e340 <__swbuf_r>
 800e0d8:	6813      	ldr	r3, [r2, #0]
 800e0da:	1c58      	adds	r0, r3, #1
 800e0dc:	6010      	str	r0, [r2, #0]
 800e0de:	7019      	strb	r1, [r3, #0]
 800e0e0:	4608      	mov	r0, r1
 800e0e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0e6:	4770      	bx	lr

0800e0e8 <__sfputs_r>:
 800e0e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0ea:	4606      	mov	r6, r0
 800e0ec:	460f      	mov	r7, r1
 800e0ee:	4614      	mov	r4, r2
 800e0f0:	18d5      	adds	r5, r2, r3
 800e0f2:	42ac      	cmp	r4, r5
 800e0f4:	d101      	bne.n	800e0fa <__sfputs_r+0x12>
 800e0f6:	2000      	movs	r0, #0
 800e0f8:	e007      	b.n	800e10a <__sfputs_r+0x22>
 800e0fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0fe:	463a      	mov	r2, r7
 800e100:	4630      	mov	r0, r6
 800e102:	f7ff ffda 	bl	800e0ba <__sfputc_r>
 800e106:	1c43      	adds	r3, r0, #1
 800e108:	d1f3      	bne.n	800e0f2 <__sfputs_r+0xa>
 800e10a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e10c <_vfiprintf_r>:
 800e10c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e110:	460d      	mov	r5, r1
 800e112:	b09d      	sub	sp, #116	; 0x74
 800e114:	4614      	mov	r4, r2
 800e116:	4698      	mov	r8, r3
 800e118:	4606      	mov	r6, r0
 800e11a:	b118      	cbz	r0, 800e124 <_vfiprintf_r+0x18>
 800e11c:	6a03      	ldr	r3, [r0, #32]
 800e11e:	b90b      	cbnz	r3, 800e124 <_vfiprintf_r+0x18>
 800e120:	f7fe f8dc 	bl	800c2dc <__sinit>
 800e124:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e126:	07d9      	lsls	r1, r3, #31
 800e128:	d405      	bmi.n	800e136 <_vfiprintf_r+0x2a>
 800e12a:	89ab      	ldrh	r3, [r5, #12]
 800e12c:	059a      	lsls	r2, r3, #22
 800e12e:	d402      	bmi.n	800e136 <_vfiprintf_r+0x2a>
 800e130:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e132:	f7fe f9e9 	bl	800c508 <__retarget_lock_acquire_recursive>
 800e136:	89ab      	ldrh	r3, [r5, #12]
 800e138:	071b      	lsls	r3, r3, #28
 800e13a:	d501      	bpl.n	800e140 <_vfiprintf_r+0x34>
 800e13c:	692b      	ldr	r3, [r5, #16]
 800e13e:	b99b      	cbnz	r3, 800e168 <_vfiprintf_r+0x5c>
 800e140:	4629      	mov	r1, r5
 800e142:	4630      	mov	r0, r6
 800e144:	f000 f93a 	bl	800e3bc <__swsetup_r>
 800e148:	b170      	cbz	r0, 800e168 <_vfiprintf_r+0x5c>
 800e14a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e14c:	07dc      	lsls	r4, r3, #31
 800e14e:	d504      	bpl.n	800e15a <_vfiprintf_r+0x4e>
 800e150:	f04f 30ff 	mov.w	r0, #4294967295
 800e154:	b01d      	add	sp, #116	; 0x74
 800e156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e15a:	89ab      	ldrh	r3, [r5, #12]
 800e15c:	0598      	lsls	r0, r3, #22
 800e15e:	d4f7      	bmi.n	800e150 <_vfiprintf_r+0x44>
 800e160:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e162:	f7fe f9d2 	bl	800c50a <__retarget_lock_release_recursive>
 800e166:	e7f3      	b.n	800e150 <_vfiprintf_r+0x44>
 800e168:	2300      	movs	r3, #0
 800e16a:	9309      	str	r3, [sp, #36]	; 0x24
 800e16c:	2320      	movs	r3, #32
 800e16e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e172:	f8cd 800c 	str.w	r8, [sp, #12]
 800e176:	2330      	movs	r3, #48	; 0x30
 800e178:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e32c <_vfiprintf_r+0x220>
 800e17c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e180:	f04f 0901 	mov.w	r9, #1
 800e184:	4623      	mov	r3, r4
 800e186:	469a      	mov	sl, r3
 800e188:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e18c:	b10a      	cbz	r2, 800e192 <_vfiprintf_r+0x86>
 800e18e:	2a25      	cmp	r2, #37	; 0x25
 800e190:	d1f9      	bne.n	800e186 <_vfiprintf_r+0x7a>
 800e192:	ebba 0b04 	subs.w	fp, sl, r4
 800e196:	d00b      	beq.n	800e1b0 <_vfiprintf_r+0xa4>
 800e198:	465b      	mov	r3, fp
 800e19a:	4622      	mov	r2, r4
 800e19c:	4629      	mov	r1, r5
 800e19e:	4630      	mov	r0, r6
 800e1a0:	f7ff ffa2 	bl	800e0e8 <__sfputs_r>
 800e1a4:	3001      	adds	r0, #1
 800e1a6:	f000 80a9 	beq.w	800e2fc <_vfiprintf_r+0x1f0>
 800e1aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e1ac:	445a      	add	r2, fp
 800e1ae:	9209      	str	r2, [sp, #36]	; 0x24
 800e1b0:	f89a 3000 	ldrb.w	r3, [sl]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	f000 80a1 	beq.w	800e2fc <_vfiprintf_r+0x1f0>
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	f04f 32ff 	mov.w	r2, #4294967295
 800e1c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e1c4:	f10a 0a01 	add.w	sl, sl, #1
 800e1c8:	9304      	str	r3, [sp, #16]
 800e1ca:	9307      	str	r3, [sp, #28]
 800e1cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e1d0:	931a      	str	r3, [sp, #104]	; 0x68
 800e1d2:	4654      	mov	r4, sl
 800e1d4:	2205      	movs	r2, #5
 800e1d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1da:	4854      	ldr	r0, [pc, #336]	; (800e32c <_vfiprintf_r+0x220>)
 800e1dc:	f7f2 f808 	bl	80001f0 <memchr>
 800e1e0:	9a04      	ldr	r2, [sp, #16]
 800e1e2:	b9d8      	cbnz	r0, 800e21c <_vfiprintf_r+0x110>
 800e1e4:	06d1      	lsls	r1, r2, #27
 800e1e6:	bf44      	itt	mi
 800e1e8:	2320      	movmi	r3, #32
 800e1ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e1ee:	0713      	lsls	r3, r2, #28
 800e1f0:	bf44      	itt	mi
 800e1f2:	232b      	movmi	r3, #43	; 0x2b
 800e1f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e1f8:	f89a 3000 	ldrb.w	r3, [sl]
 800e1fc:	2b2a      	cmp	r3, #42	; 0x2a
 800e1fe:	d015      	beq.n	800e22c <_vfiprintf_r+0x120>
 800e200:	9a07      	ldr	r2, [sp, #28]
 800e202:	4654      	mov	r4, sl
 800e204:	2000      	movs	r0, #0
 800e206:	f04f 0c0a 	mov.w	ip, #10
 800e20a:	4621      	mov	r1, r4
 800e20c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e210:	3b30      	subs	r3, #48	; 0x30
 800e212:	2b09      	cmp	r3, #9
 800e214:	d94d      	bls.n	800e2b2 <_vfiprintf_r+0x1a6>
 800e216:	b1b0      	cbz	r0, 800e246 <_vfiprintf_r+0x13a>
 800e218:	9207      	str	r2, [sp, #28]
 800e21a:	e014      	b.n	800e246 <_vfiprintf_r+0x13a>
 800e21c:	eba0 0308 	sub.w	r3, r0, r8
 800e220:	fa09 f303 	lsl.w	r3, r9, r3
 800e224:	4313      	orrs	r3, r2
 800e226:	9304      	str	r3, [sp, #16]
 800e228:	46a2      	mov	sl, r4
 800e22a:	e7d2      	b.n	800e1d2 <_vfiprintf_r+0xc6>
 800e22c:	9b03      	ldr	r3, [sp, #12]
 800e22e:	1d19      	adds	r1, r3, #4
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	9103      	str	r1, [sp, #12]
 800e234:	2b00      	cmp	r3, #0
 800e236:	bfbb      	ittet	lt
 800e238:	425b      	neglt	r3, r3
 800e23a:	f042 0202 	orrlt.w	r2, r2, #2
 800e23e:	9307      	strge	r3, [sp, #28]
 800e240:	9307      	strlt	r3, [sp, #28]
 800e242:	bfb8      	it	lt
 800e244:	9204      	strlt	r2, [sp, #16]
 800e246:	7823      	ldrb	r3, [r4, #0]
 800e248:	2b2e      	cmp	r3, #46	; 0x2e
 800e24a:	d10c      	bne.n	800e266 <_vfiprintf_r+0x15a>
 800e24c:	7863      	ldrb	r3, [r4, #1]
 800e24e:	2b2a      	cmp	r3, #42	; 0x2a
 800e250:	d134      	bne.n	800e2bc <_vfiprintf_r+0x1b0>
 800e252:	9b03      	ldr	r3, [sp, #12]
 800e254:	1d1a      	adds	r2, r3, #4
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	9203      	str	r2, [sp, #12]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	bfb8      	it	lt
 800e25e:	f04f 33ff 	movlt.w	r3, #4294967295
 800e262:	3402      	adds	r4, #2
 800e264:	9305      	str	r3, [sp, #20]
 800e266:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e33c <_vfiprintf_r+0x230>
 800e26a:	7821      	ldrb	r1, [r4, #0]
 800e26c:	2203      	movs	r2, #3
 800e26e:	4650      	mov	r0, sl
 800e270:	f7f1 ffbe 	bl	80001f0 <memchr>
 800e274:	b138      	cbz	r0, 800e286 <_vfiprintf_r+0x17a>
 800e276:	9b04      	ldr	r3, [sp, #16]
 800e278:	eba0 000a 	sub.w	r0, r0, sl
 800e27c:	2240      	movs	r2, #64	; 0x40
 800e27e:	4082      	lsls	r2, r0
 800e280:	4313      	orrs	r3, r2
 800e282:	3401      	adds	r4, #1
 800e284:	9304      	str	r3, [sp, #16]
 800e286:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e28a:	4829      	ldr	r0, [pc, #164]	; (800e330 <_vfiprintf_r+0x224>)
 800e28c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e290:	2206      	movs	r2, #6
 800e292:	f7f1 ffad 	bl	80001f0 <memchr>
 800e296:	2800      	cmp	r0, #0
 800e298:	d03f      	beq.n	800e31a <_vfiprintf_r+0x20e>
 800e29a:	4b26      	ldr	r3, [pc, #152]	; (800e334 <_vfiprintf_r+0x228>)
 800e29c:	bb1b      	cbnz	r3, 800e2e6 <_vfiprintf_r+0x1da>
 800e29e:	9b03      	ldr	r3, [sp, #12]
 800e2a0:	3307      	adds	r3, #7
 800e2a2:	f023 0307 	bic.w	r3, r3, #7
 800e2a6:	3308      	adds	r3, #8
 800e2a8:	9303      	str	r3, [sp, #12]
 800e2aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2ac:	443b      	add	r3, r7
 800e2ae:	9309      	str	r3, [sp, #36]	; 0x24
 800e2b0:	e768      	b.n	800e184 <_vfiprintf_r+0x78>
 800e2b2:	fb0c 3202 	mla	r2, ip, r2, r3
 800e2b6:	460c      	mov	r4, r1
 800e2b8:	2001      	movs	r0, #1
 800e2ba:	e7a6      	b.n	800e20a <_vfiprintf_r+0xfe>
 800e2bc:	2300      	movs	r3, #0
 800e2be:	3401      	adds	r4, #1
 800e2c0:	9305      	str	r3, [sp, #20]
 800e2c2:	4619      	mov	r1, r3
 800e2c4:	f04f 0c0a 	mov.w	ip, #10
 800e2c8:	4620      	mov	r0, r4
 800e2ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e2ce:	3a30      	subs	r2, #48	; 0x30
 800e2d0:	2a09      	cmp	r2, #9
 800e2d2:	d903      	bls.n	800e2dc <_vfiprintf_r+0x1d0>
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d0c6      	beq.n	800e266 <_vfiprintf_r+0x15a>
 800e2d8:	9105      	str	r1, [sp, #20]
 800e2da:	e7c4      	b.n	800e266 <_vfiprintf_r+0x15a>
 800e2dc:	fb0c 2101 	mla	r1, ip, r1, r2
 800e2e0:	4604      	mov	r4, r0
 800e2e2:	2301      	movs	r3, #1
 800e2e4:	e7f0      	b.n	800e2c8 <_vfiprintf_r+0x1bc>
 800e2e6:	ab03      	add	r3, sp, #12
 800e2e8:	9300      	str	r3, [sp, #0]
 800e2ea:	462a      	mov	r2, r5
 800e2ec:	4b12      	ldr	r3, [pc, #72]	; (800e338 <_vfiprintf_r+0x22c>)
 800e2ee:	a904      	add	r1, sp, #16
 800e2f0:	4630      	mov	r0, r6
 800e2f2:	f7fd fbb3 	bl	800ba5c <_printf_float>
 800e2f6:	4607      	mov	r7, r0
 800e2f8:	1c78      	adds	r0, r7, #1
 800e2fa:	d1d6      	bne.n	800e2aa <_vfiprintf_r+0x19e>
 800e2fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e2fe:	07d9      	lsls	r1, r3, #31
 800e300:	d405      	bmi.n	800e30e <_vfiprintf_r+0x202>
 800e302:	89ab      	ldrh	r3, [r5, #12]
 800e304:	059a      	lsls	r2, r3, #22
 800e306:	d402      	bmi.n	800e30e <_vfiprintf_r+0x202>
 800e308:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e30a:	f7fe f8fe 	bl	800c50a <__retarget_lock_release_recursive>
 800e30e:	89ab      	ldrh	r3, [r5, #12]
 800e310:	065b      	lsls	r3, r3, #25
 800e312:	f53f af1d 	bmi.w	800e150 <_vfiprintf_r+0x44>
 800e316:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e318:	e71c      	b.n	800e154 <_vfiprintf_r+0x48>
 800e31a:	ab03      	add	r3, sp, #12
 800e31c:	9300      	str	r3, [sp, #0]
 800e31e:	462a      	mov	r2, r5
 800e320:	4b05      	ldr	r3, [pc, #20]	; (800e338 <_vfiprintf_r+0x22c>)
 800e322:	a904      	add	r1, sp, #16
 800e324:	4630      	mov	r0, r6
 800e326:	f7fd fe3d 	bl	800bfa4 <_printf_i>
 800e32a:	e7e4      	b.n	800e2f6 <_vfiprintf_r+0x1ea>
 800e32c:	0800fb64 	.word	0x0800fb64
 800e330:	0800fb6e 	.word	0x0800fb6e
 800e334:	0800ba5d 	.word	0x0800ba5d
 800e338:	0800e0e9 	.word	0x0800e0e9
 800e33c:	0800fb6a 	.word	0x0800fb6a

0800e340 <__swbuf_r>:
 800e340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e342:	460e      	mov	r6, r1
 800e344:	4614      	mov	r4, r2
 800e346:	4605      	mov	r5, r0
 800e348:	b118      	cbz	r0, 800e352 <__swbuf_r+0x12>
 800e34a:	6a03      	ldr	r3, [r0, #32]
 800e34c:	b90b      	cbnz	r3, 800e352 <__swbuf_r+0x12>
 800e34e:	f7fd ffc5 	bl	800c2dc <__sinit>
 800e352:	69a3      	ldr	r3, [r4, #24]
 800e354:	60a3      	str	r3, [r4, #8]
 800e356:	89a3      	ldrh	r3, [r4, #12]
 800e358:	071a      	lsls	r2, r3, #28
 800e35a:	d525      	bpl.n	800e3a8 <__swbuf_r+0x68>
 800e35c:	6923      	ldr	r3, [r4, #16]
 800e35e:	b31b      	cbz	r3, 800e3a8 <__swbuf_r+0x68>
 800e360:	6823      	ldr	r3, [r4, #0]
 800e362:	6922      	ldr	r2, [r4, #16]
 800e364:	1a98      	subs	r0, r3, r2
 800e366:	6963      	ldr	r3, [r4, #20]
 800e368:	b2f6      	uxtb	r6, r6
 800e36a:	4283      	cmp	r3, r0
 800e36c:	4637      	mov	r7, r6
 800e36e:	dc04      	bgt.n	800e37a <__swbuf_r+0x3a>
 800e370:	4621      	mov	r1, r4
 800e372:	4628      	mov	r0, r5
 800e374:	f7ff fdac 	bl	800ded0 <_fflush_r>
 800e378:	b9e0      	cbnz	r0, 800e3b4 <__swbuf_r+0x74>
 800e37a:	68a3      	ldr	r3, [r4, #8]
 800e37c:	3b01      	subs	r3, #1
 800e37e:	60a3      	str	r3, [r4, #8]
 800e380:	6823      	ldr	r3, [r4, #0]
 800e382:	1c5a      	adds	r2, r3, #1
 800e384:	6022      	str	r2, [r4, #0]
 800e386:	701e      	strb	r6, [r3, #0]
 800e388:	6962      	ldr	r2, [r4, #20]
 800e38a:	1c43      	adds	r3, r0, #1
 800e38c:	429a      	cmp	r2, r3
 800e38e:	d004      	beq.n	800e39a <__swbuf_r+0x5a>
 800e390:	89a3      	ldrh	r3, [r4, #12]
 800e392:	07db      	lsls	r3, r3, #31
 800e394:	d506      	bpl.n	800e3a4 <__swbuf_r+0x64>
 800e396:	2e0a      	cmp	r6, #10
 800e398:	d104      	bne.n	800e3a4 <__swbuf_r+0x64>
 800e39a:	4621      	mov	r1, r4
 800e39c:	4628      	mov	r0, r5
 800e39e:	f7ff fd97 	bl	800ded0 <_fflush_r>
 800e3a2:	b938      	cbnz	r0, 800e3b4 <__swbuf_r+0x74>
 800e3a4:	4638      	mov	r0, r7
 800e3a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3a8:	4621      	mov	r1, r4
 800e3aa:	4628      	mov	r0, r5
 800e3ac:	f000 f806 	bl	800e3bc <__swsetup_r>
 800e3b0:	2800      	cmp	r0, #0
 800e3b2:	d0d5      	beq.n	800e360 <__swbuf_r+0x20>
 800e3b4:	f04f 37ff 	mov.w	r7, #4294967295
 800e3b8:	e7f4      	b.n	800e3a4 <__swbuf_r+0x64>
	...

0800e3bc <__swsetup_r>:
 800e3bc:	b538      	push	{r3, r4, r5, lr}
 800e3be:	4b2a      	ldr	r3, [pc, #168]	; (800e468 <__swsetup_r+0xac>)
 800e3c0:	4605      	mov	r5, r0
 800e3c2:	6818      	ldr	r0, [r3, #0]
 800e3c4:	460c      	mov	r4, r1
 800e3c6:	b118      	cbz	r0, 800e3d0 <__swsetup_r+0x14>
 800e3c8:	6a03      	ldr	r3, [r0, #32]
 800e3ca:	b90b      	cbnz	r3, 800e3d0 <__swsetup_r+0x14>
 800e3cc:	f7fd ff86 	bl	800c2dc <__sinit>
 800e3d0:	89a3      	ldrh	r3, [r4, #12]
 800e3d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e3d6:	0718      	lsls	r0, r3, #28
 800e3d8:	d422      	bmi.n	800e420 <__swsetup_r+0x64>
 800e3da:	06d9      	lsls	r1, r3, #27
 800e3dc:	d407      	bmi.n	800e3ee <__swsetup_r+0x32>
 800e3de:	2309      	movs	r3, #9
 800e3e0:	602b      	str	r3, [r5, #0]
 800e3e2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e3e6:	81a3      	strh	r3, [r4, #12]
 800e3e8:	f04f 30ff 	mov.w	r0, #4294967295
 800e3ec:	e034      	b.n	800e458 <__swsetup_r+0x9c>
 800e3ee:	0758      	lsls	r0, r3, #29
 800e3f0:	d512      	bpl.n	800e418 <__swsetup_r+0x5c>
 800e3f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e3f4:	b141      	cbz	r1, 800e408 <__swsetup_r+0x4c>
 800e3f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e3fa:	4299      	cmp	r1, r3
 800e3fc:	d002      	beq.n	800e404 <__swsetup_r+0x48>
 800e3fe:	4628      	mov	r0, r5
 800e400:	f7fe ff0c 	bl	800d21c <_free_r>
 800e404:	2300      	movs	r3, #0
 800e406:	6363      	str	r3, [r4, #52]	; 0x34
 800e408:	89a3      	ldrh	r3, [r4, #12]
 800e40a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e40e:	81a3      	strh	r3, [r4, #12]
 800e410:	2300      	movs	r3, #0
 800e412:	6063      	str	r3, [r4, #4]
 800e414:	6923      	ldr	r3, [r4, #16]
 800e416:	6023      	str	r3, [r4, #0]
 800e418:	89a3      	ldrh	r3, [r4, #12]
 800e41a:	f043 0308 	orr.w	r3, r3, #8
 800e41e:	81a3      	strh	r3, [r4, #12]
 800e420:	6923      	ldr	r3, [r4, #16]
 800e422:	b94b      	cbnz	r3, 800e438 <__swsetup_r+0x7c>
 800e424:	89a3      	ldrh	r3, [r4, #12]
 800e426:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e42a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e42e:	d003      	beq.n	800e438 <__swsetup_r+0x7c>
 800e430:	4621      	mov	r1, r4
 800e432:	4628      	mov	r0, r5
 800e434:	f000 f884 	bl	800e540 <__smakebuf_r>
 800e438:	89a0      	ldrh	r0, [r4, #12]
 800e43a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e43e:	f010 0301 	ands.w	r3, r0, #1
 800e442:	d00a      	beq.n	800e45a <__swsetup_r+0x9e>
 800e444:	2300      	movs	r3, #0
 800e446:	60a3      	str	r3, [r4, #8]
 800e448:	6963      	ldr	r3, [r4, #20]
 800e44a:	425b      	negs	r3, r3
 800e44c:	61a3      	str	r3, [r4, #24]
 800e44e:	6923      	ldr	r3, [r4, #16]
 800e450:	b943      	cbnz	r3, 800e464 <__swsetup_r+0xa8>
 800e452:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e456:	d1c4      	bne.n	800e3e2 <__swsetup_r+0x26>
 800e458:	bd38      	pop	{r3, r4, r5, pc}
 800e45a:	0781      	lsls	r1, r0, #30
 800e45c:	bf58      	it	pl
 800e45e:	6963      	ldrpl	r3, [r4, #20]
 800e460:	60a3      	str	r3, [r4, #8]
 800e462:	e7f4      	b.n	800e44e <__swsetup_r+0x92>
 800e464:	2000      	movs	r0, #0
 800e466:	e7f7      	b.n	800e458 <__swsetup_r+0x9c>
 800e468:	20000068 	.word	0x20000068

0800e46c <_raise_r>:
 800e46c:	291f      	cmp	r1, #31
 800e46e:	b538      	push	{r3, r4, r5, lr}
 800e470:	4604      	mov	r4, r0
 800e472:	460d      	mov	r5, r1
 800e474:	d904      	bls.n	800e480 <_raise_r+0x14>
 800e476:	2316      	movs	r3, #22
 800e478:	6003      	str	r3, [r0, #0]
 800e47a:	f04f 30ff 	mov.w	r0, #4294967295
 800e47e:	bd38      	pop	{r3, r4, r5, pc}
 800e480:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e482:	b112      	cbz	r2, 800e48a <_raise_r+0x1e>
 800e484:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e488:	b94b      	cbnz	r3, 800e49e <_raise_r+0x32>
 800e48a:	4620      	mov	r0, r4
 800e48c:	f000 f830 	bl	800e4f0 <_getpid_r>
 800e490:	462a      	mov	r2, r5
 800e492:	4601      	mov	r1, r0
 800e494:	4620      	mov	r0, r4
 800e496:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e49a:	f000 b817 	b.w	800e4cc <_kill_r>
 800e49e:	2b01      	cmp	r3, #1
 800e4a0:	d00a      	beq.n	800e4b8 <_raise_r+0x4c>
 800e4a2:	1c59      	adds	r1, r3, #1
 800e4a4:	d103      	bne.n	800e4ae <_raise_r+0x42>
 800e4a6:	2316      	movs	r3, #22
 800e4a8:	6003      	str	r3, [r0, #0]
 800e4aa:	2001      	movs	r0, #1
 800e4ac:	e7e7      	b.n	800e47e <_raise_r+0x12>
 800e4ae:	2400      	movs	r4, #0
 800e4b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e4b4:	4628      	mov	r0, r5
 800e4b6:	4798      	blx	r3
 800e4b8:	2000      	movs	r0, #0
 800e4ba:	e7e0      	b.n	800e47e <_raise_r+0x12>

0800e4bc <raise>:
 800e4bc:	4b02      	ldr	r3, [pc, #8]	; (800e4c8 <raise+0xc>)
 800e4be:	4601      	mov	r1, r0
 800e4c0:	6818      	ldr	r0, [r3, #0]
 800e4c2:	f7ff bfd3 	b.w	800e46c <_raise_r>
 800e4c6:	bf00      	nop
 800e4c8:	20000068 	.word	0x20000068

0800e4cc <_kill_r>:
 800e4cc:	b538      	push	{r3, r4, r5, lr}
 800e4ce:	4d07      	ldr	r5, [pc, #28]	; (800e4ec <_kill_r+0x20>)
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	4604      	mov	r4, r0
 800e4d4:	4608      	mov	r0, r1
 800e4d6:	4611      	mov	r1, r2
 800e4d8:	602b      	str	r3, [r5, #0]
 800e4da:	f7f5 fde5 	bl	80040a8 <_kill>
 800e4de:	1c43      	adds	r3, r0, #1
 800e4e0:	d102      	bne.n	800e4e8 <_kill_r+0x1c>
 800e4e2:	682b      	ldr	r3, [r5, #0]
 800e4e4:	b103      	cbz	r3, 800e4e8 <_kill_r+0x1c>
 800e4e6:	6023      	str	r3, [r4, #0]
 800e4e8:	bd38      	pop	{r3, r4, r5, pc}
 800e4ea:	bf00      	nop
 800e4ec:	20002d94 	.word	0x20002d94

0800e4f0 <_getpid_r>:
 800e4f0:	f7f5 bdd2 	b.w	8004098 <_getpid>

0800e4f4 <__swhatbuf_r>:
 800e4f4:	b570      	push	{r4, r5, r6, lr}
 800e4f6:	460c      	mov	r4, r1
 800e4f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4fc:	2900      	cmp	r1, #0
 800e4fe:	b096      	sub	sp, #88	; 0x58
 800e500:	4615      	mov	r5, r2
 800e502:	461e      	mov	r6, r3
 800e504:	da0d      	bge.n	800e522 <__swhatbuf_r+0x2e>
 800e506:	89a3      	ldrh	r3, [r4, #12]
 800e508:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e50c:	f04f 0100 	mov.w	r1, #0
 800e510:	bf0c      	ite	eq
 800e512:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e516:	2340      	movne	r3, #64	; 0x40
 800e518:	2000      	movs	r0, #0
 800e51a:	6031      	str	r1, [r6, #0]
 800e51c:	602b      	str	r3, [r5, #0]
 800e51e:	b016      	add	sp, #88	; 0x58
 800e520:	bd70      	pop	{r4, r5, r6, pc}
 800e522:	466a      	mov	r2, sp
 800e524:	f000 f848 	bl	800e5b8 <_fstat_r>
 800e528:	2800      	cmp	r0, #0
 800e52a:	dbec      	blt.n	800e506 <__swhatbuf_r+0x12>
 800e52c:	9901      	ldr	r1, [sp, #4]
 800e52e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e532:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e536:	4259      	negs	r1, r3
 800e538:	4159      	adcs	r1, r3
 800e53a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e53e:	e7eb      	b.n	800e518 <__swhatbuf_r+0x24>

0800e540 <__smakebuf_r>:
 800e540:	898b      	ldrh	r3, [r1, #12]
 800e542:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e544:	079d      	lsls	r5, r3, #30
 800e546:	4606      	mov	r6, r0
 800e548:	460c      	mov	r4, r1
 800e54a:	d507      	bpl.n	800e55c <__smakebuf_r+0x1c>
 800e54c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e550:	6023      	str	r3, [r4, #0]
 800e552:	6123      	str	r3, [r4, #16]
 800e554:	2301      	movs	r3, #1
 800e556:	6163      	str	r3, [r4, #20]
 800e558:	b002      	add	sp, #8
 800e55a:	bd70      	pop	{r4, r5, r6, pc}
 800e55c:	ab01      	add	r3, sp, #4
 800e55e:	466a      	mov	r2, sp
 800e560:	f7ff ffc8 	bl	800e4f4 <__swhatbuf_r>
 800e564:	9900      	ldr	r1, [sp, #0]
 800e566:	4605      	mov	r5, r0
 800e568:	4630      	mov	r0, r6
 800e56a:	f7fe fecb 	bl	800d304 <_malloc_r>
 800e56e:	b948      	cbnz	r0, 800e584 <__smakebuf_r+0x44>
 800e570:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e574:	059a      	lsls	r2, r3, #22
 800e576:	d4ef      	bmi.n	800e558 <__smakebuf_r+0x18>
 800e578:	f023 0303 	bic.w	r3, r3, #3
 800e57c:	f043 0302 	orr.w	r3, r3, #2
 800e580:	81a3      	strh	r3, [r4, #12]
 800e582:	e7e3      	b.n	800e54c <__smakebuf_r+0xc>
 800e584:	89a3      	ldrh	r3, [r4, #12]
 800e586:	6020      	str	r0, [r4, #0]
 800e588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e58c:	81a3      	strh	r3, [r4, #12]
 800e58e:	9b00      	ldr	r3, [sp, #0]
 800e590:	6163      	str	r3, [r4, #20]
 800e592:	9b01      	ldr	r3, [sp, #4]
 800e594:	6120      	str	r0, [r4, #16]
 800e596:	b15b      	cbz	r3, 800e5b0 <__smakebuf_r+0x70>
 800e598:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e59c:	4630      	mov	r0, r6
 800e59e:	f000 f81d 	bl	800e5dc <_isatty_r>
 800e5a2:	b128      	cbz	r0, 800e5b0 <__smakebuf_r+0x70>
 800e5a4:	89a3      	ldrh	r3, [r4, #12]
 800e5a6:	f023 0303 	bic.w	r3, r3, #3
 800e5aa:	f043 0301 	orr.w	r3, r3, #1
 800e5ae:	81a3      	strh	r3, [r4, #12]
 800e5b0:	89a3      	ldrh	r3, [r4, #12]
 800e5b2:	431d      	orrs	r5, r3
 800e5b4:	81a5      	strh	r5, [r4, #12]
 800e5b6:	e7cf      	b.n	800e558 <__smakebuf_r+0x18>

0800e5b8 <_fstat_r>:
 800e5b8:	b538      	push	{r3, r4, r5, lr}
 800e5ba:	4d07      	ldr	r5, [pc, #28]	; (800e5d8 <_fstat_r+0x20>)
 800e5bc:	2300      	movs	r3, #0
 800e5be:	4604      	mov	r4, r0
 800e5c0:	4608      	mov	r0, r1
 800e5c2:	4611      	mov	r1, r2
 800e5c4:	602b      	str	r3, [r5, #0]
 800e5c6:	f7f5 fdce 	bl	8004166 <_fstat>
 800e5ca:	1c43      	adds	r3, r0, #1
 800e5cc:	d102      	bne.n	800e5d4 <_fstat_r+0x1c>
 800e5ce:	682b      	ldr	r3, [r5, #0]
 800e5d0:	b103      	cbz	r3, 800e5d4 <_fstat_r+0x1c>
 800e5d2:	6023      	str	r3, [r4, #0]
 800e5d4:	bd38      	pop	{r3, r4, r5, pc}
 800e5d6:	bf00      	nop
 800e5d8:	20002d94 	.word	0x20002d94

0800e5dc <_isatty_r>:
 800e5dc:	b538      	push	{r3, r4, r5, lr}
 800e5de:	4d06      	ldr	r5, [pc, #24]	; (800e5f8 <_isatty_r+0x1c>)
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	4604      	mov	r4, r0
 800e5e4:	4608      	mov	r0, r1
 800e5e6:	602b      	str	r3, [r5, #0]
 800e5e8:	f7f5 fdcd 	bl	8004186 <_isatty>
 800e5ec:	1c43      	adds	r3, r0, #1
 800e5ee:	d102      	bne.n	800e5f6 <_isatty_r+0x1a>
 800e5f0:	682b      	ldr	r3, [r5, #0]
 800e5f2:	b103      	cbz	r3, 800e5f6 <_isatty_r+0x1a>
 800e5f4:	6023      	str	r3, [r4, #0]
 800e5f6:	bd38      	pop	{r3, r4, r5, pc}
 800e5f8:	20002d94 	.word	0x20002d94

0800e5fc <pow>:
 800e5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5fe:	ed2d 8b02 	vpush	{d8}
 800e602:	eeb0 8a40 	vmov.f32	s16, s0
 800e606:	eef0 8a60 	vmov.f32	s17, s1
 800e60a:	ec55 4b11 	vmov	r4, r5, d1
 800e60e:	f000 f873 	bl	800e6f8 <__ieee754_pow>
 800e612:	4622      	mov	r2, r4
 800e614:	462b      	mov	r3, r5
 800e616:	4620      	mov	r0, r4
 800e618:	4629      	mov	r1, r5
 800e61a:	ec57 6b10 	vmov	r6, r7, d0
 800e61e:	f7f2 fa95 	bl	8000b4c <__aeabi_dcmpun>
 800e622:	2800      	cmp	r0, #0
 800e624:	d13b      	bne.n	800e69e <pow+0xa2>
 800e626:	ec51 0b18 	vmov	r0, r1, d8
 800e62a:	2200      	movs	r2, #0
 800e62c:	2300      	movs	r3, #0
 800e62e:	f7f2 fa5b 	bl	8000ae8 <__aeabi_dcmpeq>
 800e632:	b1b8      	cbz	r0, 800e664 <pow+0x68>
 800e634:	2200      	movs	r2, #0
 800e636:	2300      	movs	r3, #0
 800e638:	4620      	mov	r0, r4
 800e63a:	4629      	mov	r1, r5
 800e63c:	f7f2 fa54 	bl	8000ae8 <__aeabi_dcmpeq>
 800e640:	2800      	cmp	r0, #0
 800e642:	d146      	bne.n	800e6d2 <pow+0xd6>
 800e644:	ec45 4b10 	vmov	d0, r4, r5
 800e648:	f000 f848 	bl	800e6dc <finite>
 800e64c:	b338      	cbz	r0, 800e69e <pow+0xa2>
 800e64e:	2200      	movs	r2, #0
 800e650:	2300      	movs	r3, #0
 800e652:	4620      	mov	r0, r4
 800e654:	4629      	mov	r1, r5
 800e656:	f7f2 fa51 	bl	8000afc <__aeabi_dcmplt>
 800e65a:	b300      	cbz	r0, 800e69e <pow+0xa2>
 800e65c:	f7fd ff2a 	bl	800c4b4 <__errno>
 800e660:	2322      	movs	r3, #34	; 0x22
 800e662:	e01b      	b.n	800e69c <pow+0xa0>
 800e664:	ec47 6b10 	vmov	d0, r6, r7
 800e668:	f000 f838 	bl	800e6dc <finite>
 800e66c:	b9e0      	cbnz	r0, 800e6a8 <pow+0xac>
 800e66e:	eeb0 0a48 	vmov.f32	s0, s16
 800e672:	eef0 0a68 	vmov.f32	s1, s17
 800e676:	f000 f831 	bl	800e6dc <finite>
 800e67a:	b1a8      	cbz	r0, 800e6a8 <pow+0xac>
 800e67c:	ec45 4b10 	vmov	d0, r4, r5
 800e680:	f000 f82c 	bl	800e6dc <finite>
 800e684:	b180      	cbz	r0, 800e6a8 <pow+0xac>
 800e686:	4632      	mov	r2, r6
 800e688:	463b      	mov	r3, r7
 800e68a:	4630      	mov	r0, r6
 800e68c:	4639      	mov	r1, r7
 800e68e:	f7f2 fa5d 	bl	8000b4c <__aeabi_dcmpun>
 800e692:	2800      	cmp	r0, #0
 800e694:	d0e2      	beq.n	800e65c <pow+0x60>
 800e696:	f7fd ff0d 	bl	800c4b4 <__errno>
 800e69a:	2321      	movs	r3, #33	; 0x21
 800e69c:	6003      	str	r3, [r0, #0]
 800e69e:	ecbd 8b02 	vpop	{d8}
 800e6a2:	ec47 6b10 	vmov	d0, r6, r7
 800e6a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e6a8:	2200      	movs	r2, #0
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	4630      	mov	r0, r6
 800e6ae:	4639      	mov	r1, r7
 800e6b0:	f7f2 fa1a 	bl	8000ae8 <__aeabi_dcmpeq>
 800e6b4:	2800      	cmp	r0, #0
 800e6b6:	d0f2      	beq.n	800e69e <pow+0xa2>
 800e6b8:	eeb0 0a48 	vmov.f32	s0, s16
 800e6bc:	eef0 0a68 	vmov.f32	s1, s17
 800e6c0:	f000 f80c 	bl	800e6dc <finite>
 800e6c4:	2800      	cmp	r0, #0
 800e6c6:	d0ea      	beq.n	800e69e <pow+0xa2>
 800e6c8:	ec45 4b10 	vmov	d0, r4, r5
 800e6cc:	f000 f806 	bl	800e6dc <finite>
 800e6d0:	e7c3      	b.n	800e65a <pow+0x5e>
 800e6d2:	4f01      	ldr	r7, [pc, #4]	; (800e6d8 <pow+0xdc>)
 800e6d4:	2600      	movs	r6, #0
 800e6d6:	e7e2      	b.n	800e69e <pow+0xa2>
 800e6d8:	3ff00000 	.word	0x3ff00000

0800e6dc <finite>:
 800e6dc:	b082      	sub	sp, #8
 800e6de:	ed8d 0b00 	vstr	d0, [sp]
 800e6e2:	9801      	ldr	r0, [sp, #4]
 800e6e4:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800e6e8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e6ec:	0fc0      	lsrs	r0, r0, #31
 800e6ee:	b002      	add	sp, #8
 800e6f0:	4770      	bx	lr
 800e6f2:	0000      	movs	r0, r0
 800e6f4:	0000      	movs	r0, r0
	...

0800e6f8 <__ieee754_pow>:
 800e6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6fc:	ed2d 8b06 	vpush	{d8-d10}
 800e700:	b089      	sub	sp, #36	; 0x24
 800e702:	ed8d 1b00 	vstr	d1, [sp]
 800e706:	e9dd 2900 	ldrd	r2, r9, [sp]
 800e70a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800e70e:	ea58 0102 	orrs.w	r1, r8, r2
 800e712:	ec57 6b10 	vmov	r6, r7, d0
 800e716:	d115      	bne.n	800e744 <__ieee754_pow+0x4c>
 800e718:	19b3      	adds	r3, r6, r6
 800e71a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800e71e:	4152      	adcs	r2, r2
 800e720:	4299      	cmp	r1, r3
 800e722:	4b89      	ldr	r3, [pc, #548]	; (800e948 <__ieee754_pow+0x250>)
 800e724:	4193      	sbcs	r3, r2
 800e726:	f080 84d1 	bcs.w	800f0cc <__ieee754_pow+0x9d4>
 800e72a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e72e:	4630      	mov	r0, r6
 800e730:	4639      	mov	r1, r7
 800e732:	f7f1 fdbb 	bl	80002ac <__adddf3>
 800e736:	ec41 0b10 	vmov	d0, r0, r1
 800e73a:	b009      	add	sp, #36	; 0x24
 800e73c:	ecbd 8b06 	vpop	{d8-d10}
 800e740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e744:	4b81      	ldr	r3, [pc, #516]	; (800e94c <__ieee754_pow+0x254>)
 800e746:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800e74a:	429c      	cmp	r4, r3
 800e74c:	ee10 aa10 	vmov	sl, s0
 800e750:	463d      	mov	r5, r7
 800e752:	dc06      	bgt.n	800e762 <__ieee754_pow+0x6a>
 800e754:	d101      	bne.n	800e75a <__ieee754_pow+0x62>
 800e756:	2e00      	cmp	r6, #0
 800e758:	d1e7      	bne.n	800e72a <__ieee754_pow+0x32>
 800e75a:	4598      	cmp	r8, r3
 800e75c:	dc01      	bgt.n	800e762 <__ieee754_pow+0x6a>
 800e75e:	d10f      	bne.n	800e780 <__ieee754_pow+0x88>
 800e760:	b172      	cbz	r2, 800e780 <__ieee754_pow+0x88>
 800e762:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800e766:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800e76a:	ea55 050a 	orrs.w	r5, r5, sl
 800e76e:	d1dc      	bne.n	800e72a <__ieee754_pow+0x32>
 800e770:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e774:	18db      	adds	r3, r3, r3
 800e776:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800e77a:	4152      	adcs	r2, r2
 800e77c:	429d      	cmp	r5, r3
 800e77e:	e7d0      	b.n	800e722 <__ieee754_pow+0x2a>
 800e780:	2d00      	cmp	r5, #0
 800e782:	da3b      	bge.n	800e7fc <__ieee754_pow+0x104>
 800e784:	4b72      	ldr	r3, [pc, #456]	; (800e950 <__ieee754_pow+0x258>)
 800e786:	4598      	cmp	r8, r3
 800e788:	dc51      	bgt.n	800e82e <__ieee754_pow+0x136>
 800e78a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800e78e:	4598      	cmp	r8, r3
 800e790:	f340 84ab 	ble.w	800f0ea <__ieee754_pow+0x9f2>
 800e794:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e798:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e79c:	2b14      	cmp	r3, #20
 800e79e:	dd0f      	ble.n	800e7c0 <__ieee754_pow+0xc8>
 800e7a0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e7a4:	fa22 f103 	lsr.w	r1, r2, r3
 800e7a8:	fa01 f303 	lsl.w	r3, r1, r3
 800e7ac:	4293      	cmp	r3, r2
 800e7ae:	f040 849c 	bne.w	800f0ea <__ieee754_pow+0x9f2>
 800e7b2:	f001 0101 	and.w	r1, r1, #1
 800e7b6:	f1c1 0302 	rsb	r3, r1, #2
 800e7ba:	9304      	str	r3, [sp, #16]
 800e7bc:	b182      	cbz	r2, 800e7e0 <__ieee754_pow+0xe8>
 800e7be:	e05f      	b.n	800e880 <__ieee754_pow+0x188>
 800e7c0:	2a00      	cmp	r2, #0
 800e7c2:	d15b      	bne.n	800e87c <__ieee754_pow+0x184>
 800e7c4:	f1c3 0314 	rsb	r3, r3, #20
 800e7c8:	fa48 f103 	asr.w	r1, r8, r3
 800e7cc:	fa01 f303 	lsl.w	r3, r1, r3
 800e7d0:	4543      	cmp	r3, r8
 800e7d2:	f040 8487 	bne.w	800f0e4 <__ieee754_pow+0x9ec>
 800e7d6:	f001 0101 	and.w	r1, r1, #1
 800e7da:	f1c1 0302 	rsb	r3, r1, #2
 800e7de:	9304      	str	r3, [sp, #16]
 800e7e0:	4b5c      	ldr	r3, [pc, #368]	; (800e954 <__ieee754_pow+0x25c>)
 800e7e2:	4598      	cmp	r8, r3
 800e7e4:	d132      	bne.n	800e84c <__ieee754_pow+0x154>
 800e7e6:	f1b9 0f00 	cmp.w	r9, #0
 800e7ea:	f280 8477 	bge.w	800f0dc <__ieee754_pow+0x9e4>
 800e7ee:	4959      	ldr	r1, [pc, #356]	; (800e954 <__ieee754_pow+0x25c>)
 800e7f0:	4632      	mov	r2, r6
 800e7f2:	463b      	mov	r3, r7
 800e7f4:	2000      	movs	r0, #0
 800e7f6:	f7f2 f839 	bl	800086c <__aeabi_ddiv>
 800e7fa:	e79c      	b.n	800e736 <__ieee754_pow+0x3e>
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	9304      	str	r3, [sp, #16]
 800e800:	2a00      	cmp	r2, #0
 800e802:	d13d      	bne.n	800e880 <__ieee754_pow+0x188>
 800e804:	4b51      	ldr	r3, [pc, #324]	; (800e94c <__ieee754_pow+0x254>)
 800e806:	4598      	cmp	r8, r3
 800e808:	d1ea      	bne.n	800e7e0 <__ieee754_pow+0xe8>
 800e80a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e80e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e812:	ea53 030a 	orrs.w	r3, r3, sl
 800e816:	f000 8459 	beq.w	800f0cc <__ieee754_pow+0x9d4>
 800e81a:	4b4f      	ldr	r3, [pc, #316]	; (800e958 <__ieee754_pow+0x260>)
 800e81c:	429c      	cmp	r4, r3
 800e81e:	dd08      	ble.n	800e832 <__ieee754_pow+0x13a>
 800e820:	f1b9 0f00 	cmp.w	r9, #0
 800e824:	f2c0 8456 	blt.w	800f0d4 <__ieee754_pow+0x9dc>
 800e828:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e82c:	e783      	b.n	800e736 <__ieee754_pow+0x3e>
 800e82e:	2302      	movs	r3, #2
 800e830:	e7e5      	b.n	800e7fe <__ieee754_pow+0x106>
 800e832:	f1b9 0f00 	cmp.w	r9, #0
 800e836:	f04f 0000 	mov.w	r0, #0
 800e83a:	f04f 0100 	mov.w	r1, #0
 800e83e:	f6bf af7a 	bge.w	800e736 <__ieee754_pow+0x3e>
 800e842:	e9dd 0300 	ldrd	r0, r3, [sp]
 800e846:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e84a:	e774      	b.n	800e736 <__ieee754_pow+0x3e>
 800e84c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800e850:	d106      	bne.n	800e860 <__ieee754_pow+0x168>
 800e852:	4632      	mov	r2, r6
 800e854:	463b      	mov	r3, r7
 800e856:	4630      	mov	r0, r6
 800e858:	4639      	mov	r1, r7
 800e85a:	f7f1 fedd 	bl	8000618 <__aeabi_dmul>
 800e85e:	e76a      	b.n	800e736 <__ieee754_pow+0x3e>
 800e860:	4b3e      	ldr	r3, [pc, #248]	; (800e95c <__ieee754_pow+0x264>)
 800e862:	4599      	cmp	r9, r3
 800e864:	d10c      	bne.n	800e880 <__ieee754_pow+0x188>
 800e866:	2d00      	cmp	r5, #0
 800e868:	db0a      	blt.n	800e880 <__ieee754_pow+0x188>
 800e86a:	ec47 6b10 	vmov	d0, r6, r7
 800e86e:	b009      	add	sp, #36	; 0x24
 800e870:	ecbd 8b06 	vpop	{d8-d10}
 800e874:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e878:	f000 bd20 	b.w	800f2bc <__ieee754_sqrt>
 800e87c:	2300      	movs	r3, #0
 800e87e:	9304      	str	r3, [sp, #16]
 800e880:	ec47 6b10 	vmov	d0, r6, r7
 800e884:	f000 fc62 	bl	800f14c <fabs>
 800e888:	ec51 0b10 	vmov	r0, r1, d0
 800e88c:	f1ba 0f00 	cmp.w	sl, #0
 800e890:	d129      	bne.n	800e8e6 <__ieee754_pow+0x1ee>
 800e892:	b124      	cbz	r4, 800e89e <__ieee754_pow+0x1a6>
 800e894:	4b2f      	ldr	r3, [pc, #188]	; (800e954 <__ieee754_pow+0x25c>)
 800e896:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800e89a:	429a      	cmp	r2, r3
 800e89c:	d123      	bne.n	800e8e6 <__ieee754_pow+0x1ee>
 800e89e:	f1b9 0f00 	cmp.w	r9, #0
 800e8a2:	da05      	bge.n	800e8b0 <__ieee754_pow+0x1b8>
 800e8a4:	4602      	mov	r2, r0
 800e8a6:	460b      	mov	r3, r1
 800e8a8:	2000      	movs	r0, #0
 800e8aa:	492a      	ldr	r1, [pc, #168]	; (800e954 <__ieee754_pow+0x25c>)
 800e8ac:	f7f1 ffde 	bl	800086c <__aeabi_ddiv>
 800e8b0:	2d00      	cmp	r5, #0
 800e8b2:	f6bf af40 	bge.w	800e736 <__ieee754_pow+0x3e>
 800e8b6:	9b04      	ldr	r3, [sp, #16]
 800e8b8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e8bc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e8c0:	431c      	orrs	r4, r3
 800e8c2:	d108      	bne.n	800e8d6 <__ieee754_pow+0x1de>
 800e8c4:	4602      	mov	r2, r0
 800e8c6:	460b      	mov	r3, r1
 800e8c8:	4610      	mov	r0, r2
 800e8ca:	4619      	mov	r1, r3
 800e8cc:	f7f1 fcec 	bl	80002a8 <__aeabi_dsub>
 800e8d0:	4602      	mov	r2, r0
 800e8d2:	460b      	mov	r3, r1
 800e8d4:	e78f      	b.n	800e7f6 <__ieee754_pow+0xfe>
 800e8d6:	9b04      	ldr	r3, [sp, #16]
 800e8d8:	2b01      	cmp	r3, #1
 800e8da:	f47f af2c 	bne.w	800e736 <__ieee754_pow+0x3e>
 800e8de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e8e2:	4619      	mov	r1, r3
 800e8e4:	e727      	b.n	800e736 <__ieee754_pow+0x3e>
 800e8e6:	0feb      	lsrs	r3, r5, #31
 800e8e8:	3b01      	subs	r3, #1
 800e8ea:	9306      	str	r3, [sp, #24]
 800e8ec:	9a06      	ldr	r2, [sp, #24]
 800e8ee:	9b04      	ldr	r3, [sp, #16]
 800e8f0:	4313      	orrs	r3, r2
 800e8f2:	d102      	bne.n	800e8fa <__ieee754_pow+0x202>
 800e8f4:	4632      	mov	r2, r6
 800e8f6:	463b      	mov	r3, r7
 800e8f8:	e7e6      	b.n	800e8c8 <__ieee754_pow+0x1d0>
 800e8fa:	4b19      	ldr	r3, [pc, #100]	; (800e960 <__ieee754_pow+0x268>)
 800e8fc:	4598      	cmp	r8, r3
 800e8fe:	f340 80fb 	ble.w	800eaf8 <__ieee754_pow+0x400>
 800e902:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800e906:	4598      	cmp	r8, r3
 800e908:	4b13      	ldr	r3, [pc, #76]	; (800e958 <__ieee754_pow+0x260>)
 800e90a:	dd0c      	ble.n	800e926 <__ieee754_pow+0x22e>
 800e90c:	429c      	cmp	r4, r3
 800e90e:	dc0f      	bgt.n	800e930 <__ieee754_pow+0x238>
 800e910:	f1b9 0f00 	cmp.w	r9, #0
 800e914:	da0f      	bge.n	800e936 <__ieee754_pow+0x23e>
 800e916:	2000      	movs	r0, #0
 800e918:	b009      	add	sp, #36	; 0x24
 800e91a:	ecbd 8b06 	vpop	{d8-d10}
 800e91e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e922:	f000 bcc2 	b.w	800f2aa <__math_oflow>
 800e926:	429c      	cmp	r4, r3
 800e928:	dbf2      	blt.n	800e910 <__ieee754_pow+0x218>
 800e92a:	4b0a      	ldr	r3, [pc, #40]	; (800e954 <__ieee754_pow+0x25c>)
 800e92c:	429c      	cmp	r4, r3
 800e92e:	dd19      	ble.n	800e964 <__ieee754_pow+0x26c>
 800e930:	f1b9 0f00 	cmp.w	r9, #0
 800e934:	dcef      	bgt.n	800e916 <__ieee754_pow+0x21e>
 800e936:	2000      	movs	r0, #0
 800e938:	b009      	add	sp, #36	; 0x24
 800e93a:	ecbd 8b06 	vpop	{d8-d10}
 800e93e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e942:	f000 bca9 	b.w	800f298 <__math_uflow>
 800e946:	bf00      	nop
 800e948:	fff00000 	.word	0xfff00000
 800e94c:	7ff00000 	.word	0x7ff00000
 800e950:	433fffff 	.word	0x433fffff
 800e954:	3ff00000 	.word	0x3ff00000
 800e958:	3fefffff 	.word	0x3fefffff
 800e95c:	3fe00000 	.word	0x3fe00000
 800e960:	41e00000 	.word	0x41e00000
 800e964:	4b60      	ldr	r3, [pc, #384]	; (800eae8 <__ieee754_pow+0x3f0>)
 800e966:	2200      	movs	r2, #0
 800e968:	f7f1 fc9e 	bl	80002a8 <__aeabi_dsub>
 800e96c:	a354      	add	r3, pc, #336	; (adr r3, 800eac0 <__ieee754_pow+0x3c8>)
 800e96e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e972:	4604      	mov	r4, r0
 800e974:	460d      	mov	r5, r1
 800e976:	f7f1 fe4f 	bl	8000618 <__aeabi_dmul>
 800e97a:	a353      	add	r3, pc, #332	; (adr r3, 800eac8 <__ieee754_pow+0x3d0>)
 800e97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e980:	4606      	mov	r6, r0
 800e982:	460f      	mov	r7, r1
 800e984:	4620      	mov	r0, r4
 800e986:	4629      	mov	r1, r5
 800e988:	f7f1 fe46 	bl	8000618 <__aeabi_dmul>
 800e98c:	4b57      	ldr	r3, [pc, #348]	; (800eaec <__ieee754_pow+0x3f4>)
 800e98e:	4682      	mov	sl, r0
 800e990:	468b      	mov	fp, r1
 800e992:	2200      	movs	r2, #0
 800e994:	4620      	mov	r0, r4
 800e996:	4629      	mov	r1, r5
 800e998:	f7f1 fe3e 	bl	8000618 <__aeabi_dmul>
 800e99c:	4602      	mov	r2, r0
 800e99e:	460b      	mov	r3, r1
 800e9a0:	a14b      	add	r1, pc, #300	; (adr r1, 800ead0 <__ieee754_pow+0x3d8>)
 800e9a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e9a6:	f7f1 fc7f 	bl	80002a8 <__aeabi_dsub>
 800e9aa:	4622      	mov	r2, r4
 800e9ac:	462b      	mov	r3, r5
 800e9ae:	f7f1 fe33 	bl	8000618 <__aeabi_dmul>
 800e9b2:	4602      	mov	r2, r0
 800e9b4:	460b      	mov	r3, r1
 800e9b6:	2000      	movs	r0, #0
 800e9b8:	494d      	ldr	r1, [pc, #308]	; (800eaf0 <__ieee754_pow+0x3f8>)
 800e9ba:	f7f1 fc75 	bl	80002a8 <__aeabi_dsub>
 800e9be:	4622      	mov	r2, r4
 800e9c0:	4680      	mov	r8, r0
 800e9c2:	4689      	mov	r9, r1
 800e9c4:	462b      	mov	r3, r5
 800e9c6:	4620      	mov	r0, r4
 800e9c8:	4629      	mov	r1, r5
 800e9ca:	f7f1 fe25 	bl	8000618 <__aeabi_dmul>
 800e9ce:	4602      	mov	r2, r0
 800e9d0:	460b      	mov	r3, r1
 800e9d2:	4640      	mov	r0, r8
 800e9d4:	4649      	mov	r1, r9
 800e9d6:	f7f1 fe1f 	bl	8000618 <__aeabi_dmul>
 800e9da:	a33f      	add	r3, pc, #252	; (adr r3, 800ead8 <__ieee754_pow+0x3e0>)
 800e9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9e0:	f7f1 fe1a 	bl	8000618 <__aeabi_dmul>
 800e9e4:	4602      	mov	r2, r0
 800e9e6:	460b      	mov	r3, r1
 800e9e8:	4650      	mov	r0, sl
 800e9ea:	4659      	mov	r1, fp
 800e9ec:	f7f1 fc5c 	bl	80002a8 <__aeabi_dsub>
 800e9f0:	4602      	mov	r2, r0
 800e9f2:	460b      	mov	r3, r1
 800e9f4:	4680      	mov	r8, r0
 800e9f6:	4689      	mov	r9, r1
 800e9f8:	4630      	mov	r0, r6
 800e9fa:	4639      	mov	r1, r7
 800e9fc:	f7f1 fc56 	bl	80002ac <__adddf3>
 800ea00:	2000      	movs	r0, #0
 800ea02:	4632      	mov	r2, r6
 800ea04:	463b      	mov	r3, r7
 800ea06:	4604      	mov	r4, r0
 800ea08:	460d      	mov	r5, r1
 800ea0a:	f7f1 fc4d 	bl	80002a8 <__aeabi_dsub>
 800ea0e:	4602      	mov	r2, r0
 800ea10:	460b      	mov	r3, r1
 800ea12:	4640      	mov	r0, r8
 800ea14:	4649      	mov	r1, r9
 800ea16:	f7f1 fc47 	bl	80002a8 <__aeabi_dsub>
 800ea1a:	9b04      	ldr	r3, [sp, #16]
 800ea1c:	9a06      	ldr	r2, [sp, #24]
 800ea1e:	3b01      	subs	r3, #1
 800ea20:	4313      	orrs	r3, r2
 800ea22:	4682      	mov	sl, r0
 800ea24:	468b      	mov	fp, r1
 800ea26:	f040 81e7 	bne.w	800edf8 <__ieee754_pow+0x700>
 800ea2a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800eae0 <__ieee754_pow+0x3e8>
 800ea2e:	eeb0 8a47 	vmov.f32	s16, s14
 800ea32:	eef0 8a67 	vmov.f32	s17, s15
 800ea36:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ea3a:	2600      	movs	r6, #0
 800ea3c:	4632      	mov	r2, r6
 800ea3e:	463b      	mov	r3, r7
 800ea40:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ea44:	f7f1 fc30 	bl	80002a8 <__aeabi_dsub>
 800ea48:	4622      	mov	r2, r4
 800ea4a:	462b      	mov	r3, r5
 800ea4c:	f7f1 fde4 	bl	8000618 <__aeabi_dmul>
 800ea50:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea54:	4680      	mov	r8, r0
 800ea56:	4689      	mov	r9, r1
 800ea58:	4650      	mov	r0, sl
 800ea5a:	4659      	mov	r1, fp
 800ea5c:	f7f1 fddc 	bl	8000618 <__aeabi_dmul>
 800ea60:	4602      	mov	r2, r0
 800ea62:	460b      	mov	r3, r1
 800ea64:	4640      	mov	r0, r8
 800ea66:	4649      	mov	r1, r9
 800ea68:	f7f1 fc20 	bl	80002ac <__adddf3>
 800ea6c:	4632      	mov	r2, r6
 800ea6e:	463b      	mov	r3, r7
 800ea70:	4680      	mov	r8, r0
 800ea72:	4689      	mov	r9, r1
 800ea74:	4620      	mov	r0, r4
 800ea76:	4629      	mov	r1, r5
 800ea78:	f7f1 fdce 	bl	8000618 <__aeabi_dmul>
 800ea7c:	460b      	mov	r3, r1
 800ea7e:	4604      	mov	r4, r0
 800ea80:	460d      	mov	r5, r1
 800ea82:	4602      	mov	r2, r0
 800ea84:	4649      	mov	r1, r9
 800ea86:	4640      	mov	r0, r8
 800ea88:	f7f1 fc10 	bl	80002ac <__adddf3>
 800ea8c:	4b19      	ldr	r3, [pc, #100]	; (800eaf4 <__ieee754_pow+0x3fc>)
 800ea8e:	4299      	cmp	r1, r3
 800ea90:	ec45 4b19 	vmov	d9, r4, r5
 800ea94:	4606      	mov	r6, r0
 800ea96:	460f      	mov	r7, r1
 800ea98:	468b      	mov	fp, r1
 800ea9a:	f340 82f0 	ble.w	800f07e <__ieee754_pow+0x986>
 800ea9e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800eaa2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800eaa6:	4303      	orrs	r3, r0
 800eaa8:	f000 81e4 	beq.w	800ee74 <__ieee754_pow+0x77c>
 800eaac:	ec51 0b18 	vmov	r0, r1, d8
 800eab0:	2200      	movs	r2, #0
 800eab2:	2300      	movs	r3, #0
 800eab4:	f7f2 f822 	bl	8000afc <__aeabi_dcmplt>
 800eab8:	3800      	subs	r0, #0
 800eaba:	bf18      	it	ne
 800eabc:	2001      	movne	r0, #1
 800eabe:	e72b      	b.n	800e918 <__ieee754_pow+0x220>
 800eac0:	60000000 	.word	0x60000000
 800eac4:	3ff71547 	.word	0x3ff71547
 800eac8:	f85ddf44 	.word	0xf85ddf44
 800eacc:	3e54ae0b 	.word	0x3e54ae0b
 800ead0:	55555555 	.word	0x55555555
 800ead4:	3fd55555 	.word	0x3fd55555
 800ead8:	652b82fe 	.word	0x652b82fe
 800eadc:	3ff71547 	.word	0x3ff71547
 800eae0:	00000000 	.word	0x00000000
 800eae4:	bff00000 	.word	0xbff00000
 800eae8:	3ff00000 	.word	0x3ff00000
 800eaec:	3fd00000 	.word	0x3fd00000
 800eaf0:	3fe00000 	.word	0x3fe00000
 800eaf4:	408fffff 	.word	0x408fffff
 800eaf8:	4bd5      	ldr	r3, [pc, #852]	; (800ee50 <__ieee754_pow+0x758>)
 800eafa:	402b      	ands	r3, r5
 800eafc:	2200      	movs	r2, #0
 800eafe:	b92b      	cbnz	r3, 800eb0c <__ieee754_pow+0x414>
 800eb00:	4bd4      	ldr	r3, [pc, #848]	; (800ee54 <__ieee754_pow+0x75c>)
 800eb02:	f7f1 fd89 	bl	8000618 <__aeabi_dmul>
 800eb06:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800eb0a:	460c      	mov	r4, r1
 800eb0c:	1523      	asrs	r3, r4, #20
 800eb0e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800eb12:	4413      	add	r3, r2
 800eb14:	9305      	str	r3, [sp, #20]
 800eb16:	4bd0      	ldr	r3, [pc, #832]	; (800ee58 <__ieee754_pow+0x760>)
 800eb18:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800eb1c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800eb20:	429c      	cmp	r4, r3
 800eb22:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800eb26:	dd08      	ble.n	800eb3a <__ieee754_pow+0x442>
 800eb28:	4bcc      	ldr	r3, [pc, #816]	; (800ee5c <__ieee754_pow+0x764>)
 800eb2a:	429c      	cmp	r4, r3
 800eb2c:	f340 8162 	ble.w	800edf4 <__ieee754_pow+0x6fc>
 800eb30:	9b05      	ldr	r3, [sp, #20]
 800eb32:	3301      	adds	r3, #1
 800eb34:	9305      	str	r3, [sp, #20]
 800eb36:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800eb3a:	2400      	movs	r4, #0
 800eb3c:	00e3      	lsls	r3, r4, #3
 800eb3e:	9307      	str	r3, [sp, #28]
 800eb40:	4bc7      	ldr	r3, [pc, #796]	; (800ee60 <__ieee754_pow+0x768>)
 800eb42:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800eb46:	ed93 7b00 	vldr	d7, [r3]
 800eb4a:	4629      	mov	r1, r5
 800eb4c:	ec53 2b17 	vmov	r2, r3, d7
 800eb50:	eeb0 9a47 	vmov.f32	s18, s14
 800eb54:	eef0 9a67 	vmov.f32	s19, s15
 800eb58:	4682      	mov	sl, r0
 800eb5a:	f7f1 fba5 	bl	80002a8 <__aeabi_dsub>
 800eb5e:	4652      	mov	r2, sl
 800eb60:	4606      	mov	r6, r0
 800eb62:	460f      	mov	r7, r1
 800eb64:	462b      	mov	r3, r5
 800eb66:	ec51 0b19 	vmov	r0, r1, d9
 800eb6a:	f7f1 fb9f 	bl	80002ac <__adddf3>
 800eb6e:	4602      	mov	r2, r0
 800eb70:	460b      	mov	r3, r1
 800eb72:	2000      	movs	r0, #0
 800eb74:	49bb      	ldr	r1, [pc, #748]	; (800ee64 <__ieee754_pow+0x76c>)
 800eb76:	f7f1 fe79 	bl	800086c <__aeabi_ddiv>
 800eb7a:	ec41 0b1a 	vmov	d10, r0, r1
 800eb7e:	4602      	mov	r2, r0
 800eb80:	460b      	mov	r3, r1
 800eb82:	4630      	mov	r0, r6
 800eb84:	4639      	mov	r1, r7
 800eb86:	f7f1 fd47 	bl	8000618 <__aeabi_dmul>
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eb90:	9302      	str	r3, [sp, #8]
 800eb92:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800eb96:	46ab      	mov	fp, r5
 800eb98:	106d      	asrs	r5, r5, #1
 800eb9a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800eb9e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800eba2:	ec41 0b18 	vmov	d8, r0, r1
 800eba6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800ebaa:	2200      	movs	r2, #0
 800ebac:	4640      	mov	r0, r8
 800ebae:	4649      	mov	r1, r9
 800ebb0:	4614      	mov	r4, r2
 800ebb2:	461d      	mov	r5, r3
 800ebb4:	f7f1 fd30 	bl	8000618 <__aeabi_dmul>
 800ebb8:	4602      	mov	r2, r0
 800ebba:	460b      	mov	r3, r1
 800ebbc:	4630      	mov	r0, r6
 800ebbe:	4639      	mov	r1, r7
 800ebc0:	f7f1 fb72 	bl	80002a8 <__aeabi_dsub>
 800ebc4:	ec53 2b19 	vmov	r2, r3, d9
 800ebc8:	4606      	mov	r6, r0
 800ebca:	460f      	mov	r7, r1
 800ebcc:	4620      	mov	r0, r4
 800ebce:	4629      	mov	r1, r5
 800ebd0:	f7f1 fb6a 	bl	80002a8 <__aeabi_dsub>
 800ebd4:	4602      	mov	r2, r0
 800ebd6:	460b      	mov	r3, r1
 800ebd8:	4650      	mov	r0, sl
 800ebda:	4659      	mov	r1, fp
 800ebdc:	f7f1 fb64 	bl	80002a8 <__aeabi_dsub>
 800ebe0:	4642      	mov	r2, r8
 800ebe2:	464b      	mov	r3, r9
 800ebe4:	f7f1 fd18 	bl	8000618 <__aeabi_dmul>
 800ebe8:	4602      	mov	r2, r0
 800ebea:	460b      	mov	r3, r1
 800ebec:	4630      	mov	r0, r6
 800ebee:	4639      	mov	r1, r7
 800ebf0:	f7f1 fb5a 	bl	80002a8 <__aeabi_dsub>
 800ebf4:	ec53 2b1a 	vmov	r2, r3, d10
 800ebf8:	f7f1 fd0e 	bl	8000618 <__aeabi_dmul>
 800ebfc:	ec53 2b18 	vmov	r2, r3, d8
 800ec00:	ec41 0b19 	vmov	d9, r0, r1
 800ec04:	ec51 0b18 	vmov	r0, r1, d8
 800ec08:	f7f1 fd06 	bl	8000618 <__aeabi_dmul>
 800ec0c:	a37c      	add	r3, pc, #496	; (adr r3, 800ee00 <__ieee754_pow+0x708>)
 800ec0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec12:	4604      	mov	r4, r0
 800ec14:	460d      	mov	r5, r1
 800ec16:	f7f1 fcff 	bl	8000618 <__aeabi_dmul>
 800ec1a:	a37b      	add	r3, pc, #492	; (adr r3, 800ee08 <__ieee754_pow+0x710>)
 800ec1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec20:	f7f1 fb44 	bl	80002ac <__adddf3>
 800ec24:	4622      	mov	r2, r4
 800ec26:	462b      	mov	r3, r5
 800ec28:	f7f1 fcf6 	bl	8000618 <__aeabi_dmul>
 800ec2c:	a378      	add	r3, pc, #480	; (adr r3, 800ee10 <__ieee754_pow+0x718>)
 800ec2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec32:	f7f1 fb3b 	bl	80002ac <__adddf3>
 800ec36:	4622      	mov	r2, r4
 800ec38:	462b      	mov	r3, r5
 800ec3a:	f7f1 fced 	bl	8000618 <__aeabi_dmul>
 800ec3e:	a376      	add	r3, pc, #472	; (adr r3, 800ee18 <__ieee754_pow+0x720>)
 800ec40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec44:	f7f1 fb32 	bl	80002ac <__adddf3>
 800ec48:	4622      	mov	r2, r4
 800ec4a:	462b      	mov	r3, r5
 800ec4c:	f7f1 fce4 	bl	8000618 <__aeabi_dmul>
 800ec50:	a373      	add	r3, pc, #460	; (adr r3, 800ee20 <__ieee754_pow+0x728>)
 800ec52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec56:	f7f1 fb29 	bl	80002ac <__adddf3>
 800ec5a:	4622      	mov	r2, r4
 800ec5c:	462b      	mov	r3, r5
 800ec5e:	f7f1 fcdb 	bl	8000618 <__aeabi_dmul>
 800ec62:	a371      	add	r3, pc, #452	; (adr r3, 800ee28 <__ieee754_pow+0x730>)
 800ec64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec68:	f7f1 fb20 	bl	80002ac <__adddf3>
 800ec6c:	4622      	mov	r2, r4
 800ec6e:	4606      	mov	r6, r0
 800ec70:	460f      	mov	r7, r1
 800ec72:	462b      	mov	r3, r5
 800ec74:	4620      	mov	r0, r4
 800ec76:	4629      	mov	r1, r5
 800ec78:	f7f1 fcce 	bl	8000618 <__aeabi_dmul>
 800ec7c:	4602      	mov	r2, r0
 800ec7e:	460b      	mov	r3, r1
 800ec80:	4630      	mov	r0, r6
 800ec82:	4639      	mov	r1, r7
 800ec84:	f7f1 fcc8 	bl	8000618 <__aeabi_dmul>
 800ec88:	4642      	mov	r2, r8
 800ec8a:	4604      	mov	r4, r0
 800ec8c:	460d      	mov	r5, r1
 800ec8e:	464b      	mov	r3, r9
 800ec90:	ec51 0b18 	vmov	r0, r1, d8
 800ec94:	f7f1 fb0a 	bl	80002ac <__adddf3>
 800ec98:	ec53 2b19 	vmov	r2, r3, d9
 800ec9c:	f7f1 fcbc 	bl	8000618 <__aeabi_dmul>
 800eca0:	4622      	mov	r2, r4
 800eca2:	462b      	mov	r3, r5
 800eca4:	f7f1 fb02 	bl	80002ac <__adddf3>
 800eca8:	4642      	mov	r2, r8
 800ecaa:	4682      	mov	sl, r0
 800ecac:	468b      	mov	fp, r1
 800ecae:	464b      	mov	r3, r9
 800ecb0:	4640      	mov	r0, r8
 800ecb2:	4649      	mov	r1, r9
 800ecb4:	f7f1 fcb0 	bl	8000618 <__aeabi_dmul>
 800ecb8:	4b6b      	ldr	r3, [pc, #428]	; (800ee68 <__ieee754_pow+0x770>)
 800ecba:	2200      	movs	r2, #0
 800ecbc:	4606      	mov	r6, r0
 800ecbe:	460f      	mov	r7, r1
 800ecc0:	f7f1 faf4 	bl	80002ac <__adddf3>
 800ecc4:	4652      	mov	r2, sl
 800ecc6:	465b      	mov	r3, fp
 800ecc8:	f7f1 faf0 	bl	80002ac <__adddf3>
 800eccc:	2000      	movs	r0, #0
 800ecce:	4604      	mov	r4, r0
 800ecd0:	460d      	mov	r5, r1
 800ecd2:	4602      	mov	r2, r0
 800ecd4:	460b      	mov	r3, r1
 800ecd6:	4640      	mov	r0, r8
 800ecd8:	4649      	mov	r1, r9
 800ecda:	f7f1 fc9d 	bl	8000618 <__aeabi_dmul>
 800ecde:	4b62      	ldr	r3, [pc, #392]	; (800ee68 <__ieee754_pow+0x770>)
 800ece0:	4680      	mov	r8, r0
 800ece2:	4689      	mov	r9, r1
 800ece4:	2200      	movs	r2, #0
 800ece6:	4620      	mov	r0, r4
 800ece8:	4629      	mov	r1, r5
 800ecea:	f7f1 fadd 	bl	80002a8 <__aeabi_dsub>
 800ecee:	4632      	mov	r2, r6
 800ecf0:	463b      	mov	r3, r7
 800ecf2:	f7f1 fad9 	bl	80002a8 <__aeabi_dsub>
 800ecf6:	4602      	mov	r2, r0
 800ecf8:	460b      	mov	r3, r1
 800ecfa:	4650      	mov	r0, sl
 800ecfc:	4659      	mov	r1, fp
 800ecfe:	f7f1 fad3 	bl	80002a8 <__aeabi_dsub>
 800ed02:	ec53 2b18 	vmov	r2, r3, d8
 800ed06:	f7f1 fc87 	bl	8000618 <__aeabi_dmul>
 800ed0a:	4622      	mov	r2, r4
 800ed0c:	4606      	mov	r6, r0
 800ed0e:	460f      	mov	r7, r1
 800ed10:	462b      	mov	r3, r5
 800ed12:	ec51 0b19 	vmov	r0, r1, d9
 800ed16:	f7f1 fc7f 	bl	8000618 <__aeabi_dmul>
 800ed1a:	4602      	mov	r2, r0
 800ed1c:	460b      	mov	r3, r1
 800ed1e:	4630      	mov	r0, r6
 800ed20:	4639      	mov	r1, r7
 800ed22:	f7f1 fac3 	bl	80002ac <__adddf3>
 800ed26:	4606      	mov	r6, r0
 800ed28:	460f      	mov	r7, r1
 800ed2a:	4602      	mov	r2, r0
 800ed2c:	460b      	mov	r3, r1
 800ed2e:	4640      	mov	r0, r8
 800ed30:	4649      	mov	r1, r9
 800ed32:	f7f1 fabb 	bl	80002ac <__adddf3>
 800ed36:	a33e      	add	r3, pc, #248	; (adr r3, 800ee30 <__ieee754_pow+0x738>)
 800ed38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed3c:	2000      	movs	r0, #0
 800ed3e:	4604      	mov	r4, r0
 800ed40:	460d      	mov	r5, r1
 800ed42:	f7f1 fc69 	bl	8000618 <__aeabi_dmul>
 800ed46:	4642      	mov	r2, r8
 800ed48:	ec41 0b18 	vmov	d8, r0, r1
 800ed4c:	464b      	mov	r3, r9
 800ed4e:	4620      	mov	r0, r4
 800ed50:	4629      	mov	r1, r5
 800ed52:	f7f1 faa9 	bl	80002a8 <__aeabi_dsub>
 800ed56:	4602      	mov	r2, r0
 800ed58:	460b      	mov	r3, r1
 800ed5a:	4630      	mov	r0, r6
 800ed5c:	4639      	mov	r1, r7
 800ed5e:	f7f1 faa3 	bl	80002a8 <__aeabi_dsub>
 800ed62:	a335      	add	r3, pc, #212	; (adr r3, 800ee38 <__ieee754_pow+0x740>)
 800ed64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed68:	f7f1 fc56 	bl	8000618 <__aeabi_dmul>
 800ed6c:	a334      	add	r3, pc, #208	; (adr r3, 800ee40 <__ieee754_pow+0x748>)
 800ed6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed72:	4606      	mov	r6, r0
 800ed74:	460f      	mov	r7, r1
 800ed76:	4620      	mov	r0, r4
 800ed78:	4629      	mov	r1, r5
 800ed7a:	f7f1 fc4d 	bl	8000618 <__aeabi_dmul>
 800ed7e:	4602      	mov	r2, r0
 800ed80:	460b      	mov	r3, r1
 800ed82:	4630      	mov	r0, r6
 800ed84:	4639      	mov	r1, r7
 800ed86:	f7f1 fa91 	bl	80002ac <__adddf3>
 800ed8a:	9a07      	ldr	r2, [sp, #28]
 800ed8c:	4b37      	ldr	r3, [pc, #220]	; (800ee6c <__ieee754_pow+0x774>)
 800ed8e:	4413      	add	r3, r2
 800ed90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed94:	f7f1 fa8a 	bl	80002ac <__adddf3>
 800ed98:	4682      	mov	sl, r0
 800ed9a:	9805      	ldr	r0, [sp, #20]
 800ed9c:	468b      	mov	fp, r1
 800ed9e:	f7f1 fbd1 	bl	8000544 <__aeabi_i2d>
 800eda2:	9a07      	ldr	r2, [sp, #28]
 800eda4:	4b32      	ldr	r3, [pc, #200]	; (800ee70 <__ieee754_pow+0x778>)
 800eda6:	4413      	add	r3, r2
 800eda8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800edac:	4606      	mov	r6, r0
 800edae:	460f      	mov	r7, r1
 800edb0:	4652      	mov	r2, sl
 800edb2:	465b      	mov	r3, fp
 800edb4:	ec51 0b18 	vmov	r0, r1, d8
 800edb8:	f7f1 fa78 	bl	80002ac <__adddf3>
 800edbc:	4642      	mov	r2, r8
 800edbe:	464b      	mov	r3, r9
 800edc0:	f7f1 fa74 	bl	80002ac <__adddf3>
 800edc4:	4632      	mov	r2, r6
 800edc6:	463b      	mov	r3, r7
 800edc8:	f7f1 fa70 	bl	80002ac <__adddf3>
 800edcc:	2000      	movs	r0, #0
 800edce:	4632      	mov	r2, r6
 800edd0:	463b      	mov	r3, r7
 800edd2:	4604      	mov	r4, r0
 800edd4:	460d      	mov	r5, r1
 800edd6:	f7f1 fa67 	bl	80002a8 <__aeabi_dsub>
 800edda:	4642      	mov	r2, r8
 800eddc:	464b      	mov	r3, r9
 800edde:	f7f1 fa63 	bl	80002a8 <__aeabi_dsub>
 800ede2:	ec53 2b18 	vmov	r2, r3, d8
 800ede6:	f7f1 fa5f 	bl	80002a8 <__aeabi_dsub>
 800edea:	4602      	mov	r2, r0
 800edec:	460b      	mov	r3, r1
 800edee:	4650      	mov	r0, sl
 800edf0:	4659      	mov	r1, fp
 800edf2:	e610      	b.n	800ea16 <__ieee754_pow+0x31e>
 800edf4:	2401      	movs	r4, #1
 800edf6:	e6a1      	b.n	800eb3c <__ieee754_pow+0x444>
 800edf8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800ee48 <__ieee754_pow+0x750>
 800edfc:	e617      	b.n	800ea2e <__ieee754_pow+0x336>
 800edfe:	bf00      	nop
 800ee00:	4a454eef 	.word	0x4a454eef
 800ee04:	3fca7e28 	.word	0x3fca7e28
 800ee08:	93c9db65 	.word	0x93c9db65
 800ee0c:	3fcd864a 	.word	0x3fcd864a
 800ee10:	a91d4101 	.word	0xa91d4101
 800ee14:	3fd17460 	.word	0x3fd17460
 800ee18:	518f264d 	.word	0x518f264d
 800ee1c:	3fd55555 	.word	0x3fd55555
 800ee20:	db6fabff 	.word	0xdb6fabff
 800ee24:	3fdb6db6 	.word	0x3fdb6db6
 800ee28:	33333303 	.word	0x33333303
 800ee2c:	3fe33333 	.word	0x3fe33333
 800ee30:	e0000000 	.word	0xe0000000
 800ee34:	3feec709 	.word	0x3feec709
 800ee38:	dc3a03fd 	.word	0xdc3a03fd
 800ee3c:	3feec709 	.word	0x3feec709
 800ee40:	145b01f5 	.word	0x145b01f5
 800ee44:	be3e2fe0 	.word	0xbe3e2fe0
 800ee48:	00000000 	.word	0x00000000
 800ee4c:	3ff00000 	.word	0x3ff00000
 800ee50:	7ff00000 	.word	0x7ff00000
 800ee54:	43400000 	.word	0x43400000
 800ee58:	0003988e 	.word	0x0003988e
 800ee5c:	000bb679 	.word	0x000bb679
 800ee60:	0800fcc0 	.word	0x0800fcc0
 800ee64:	3ff00000 	.word	0x3ff00000
 800ee68:	40080000 	.word	0x40080000
 800ee6c:	0800fce0 	.word	0x0800fce0
 800ee70:	0800fcd0 	.word	0x0800fcd0
 800ee74:	a3b3      	add	r3, pc, #716	; (adr r3, 800f144 <__ieee754_pow+0xa4c>)
 800ee76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee7a:	4640      	mov	r0, r8
 800ee7c:	4649      	mov	r1, r9
 800ee7e:	f7f1 fa15 	bl	80002ac <__adddf3>
 800ee82:	4622      	mov	r2, r4
 800ee84:	ec41 0b1a 	vmov	d10, r0, r1
 800ee88:	462b      	mov	r3, r5
 800ee8a:	4630      	mov	r0, r6
 800ee8c:	4639      	mov	r1, r7
 800ee8e:	f7f1 fa0b 	bl	80002a8 <__aeabi_dsub>
 800ee92:	4602      	mov	r2, r0
 800ee94:	460b      	mov	r3, r1
 800ee96:	ec51 0b1a 	vmov	r0, r1, d10
 800ee9a:	f7f1 fe4d 	bl	8000b38 <__aeabi_dcmpgt>
 800ee9e:	2800      	cmp	r0, #0
 800eea0:	f47f ae04 	bne.w	800eaac <__ieee754_pow+0x3b4>
 800eea4:	4aa2      	ldr	r2, [pc, #648]	; (800f130 <__ieee754_pow+0xa38>)
 800eea6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800eeaa:	4293      	cmp	r3, r2
 800eeac:	f340 8107 	ble.w	800f0be <__ieee754_pow+0x9c6>
 800eeb0:	151b      	asrs	r3, r3, #20
 800eeb2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800eeb6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800eeba:	fa4a fa03 	asr.w	sl, sl, r3
 800eebe:	44da      	add	sl, fp
 800eec0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800eec4:	489b      	ldr	r0, [pc, #620]	; (800f134 <__ieee754_pow+0xa3c>)
 800eec6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800eeca:	4108      	asrs	r0, r1
 800eecc:	ea00 030a 	and.w	r3, r0, sl
 800eed0:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800eed4:	f1c1 0114 	rsb	r1, r1, #20
 800eed8:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800eedc:	fa4a fa01 	asr.w	sl, sl, r1
 800eee0:	f1bb 0f00 	cmp.w	fp, #0
 800eee4:	f04f 0200 	mov.w	r2, #0
 800eee8:	4620      	mov	r0, r4
 800eeea:	4629      	mov	r1, r5
 800eeec:	bfb8      	it	lt
 800eeee:	f1ca 0a00 	rsblt	sl, sl, #0
 800eef2:	f7f1 f9d9 	bl	80002a8 <__aeabi_dsub>
 800eef6:	ec41 0b19 	vmov	d9, r0, r1
 800eefa:	4642      	mov	r2, r8
 800eefc:	464b      	mov	r3, r9
 800eefe:	ec51 0b19 	vmov	r0, r1, d9
 800ef02:	f7f1 f9d3 	bl	80002ac <__adddf3>
 800ef06:	a37a      	add	r3, pc, #488	; (adr r3, 800f0f0 <__ieee754_pow+0x9f8>)
 800ef08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef0c:	2000      	movs	r0, #0
 800ef0e:	4604      	mov	r4, r0
 800ef10:	460d      	mov	r5, r1
 800ef12:	f7f1 fb81 	bl	8000618 <__aeabi_dmul>
 800ef16:	ec53 2b19 	vmov	r2, r3, d9
 800ef1a:	4606      	mov	r6, r0
 800ef1c:	460f      	mov	r7, r1
 800ef1e:	4620      	mov	r0, r4
 800ef20:	4629      	mov	r1, r5
 800ef22:	f7f1 f9c1 	bl	80002a8 <__aeabi_dsub>
 800ef26:	4602      	mov	r2, r0
 800ef28:	460b      	mov	r3, r1
 800ef2a:	4640      	mov	r0, r8
 800ef2c:	4649      	mov	r1, r9
 800ef2e:	f7f1 f9bb 	bl	80002a8 <__aeabi_dsub>
 800ef32:	a371      	add	r3, pc, #452	; (adr r3, 800f0f8 <__ieee754_pow+0xa00>)
 800ef34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef38:	f7f1 fb6e 	bl	8000618 <__aeabi_dmul>
 800ef3c:	a370      	add	r3, pc, #448	; (adr r3, 800f100 <__ieee754_pow+0xa08>)
 800ef3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef42:	4680      	mov	r8, r0
 800ef44:	4689      	mov	r9, r1
 800ef46:	4620      	mov	r0, r4
 800ef48:	4629      	mov	r1, r5
 800ef4a:	f7f1 fb65 	bl	8000618 <__aeabi_dmul>
 800ef4e:	4602      	mov	r2, r0
 800ef50:	460b      	mov	r3, r1
 800ef52:	4640      	mov	r0, r8
 800ef54:	4649      	mov	r1, r9
 800ef56:	f7f1 f9a9 	bl	80002ac <__adddf3>
 800ef5a:	4604      	mov	r4, r0
 800ef5c:	460d      	mov	r5, r1
 800ef5e:	4602      	mov	r2, r0
 800ef60:	460b      	mov	r3, r1
 800ef62:	4630      	mov	r0, r6
 800ef64:	4639      	mov	r1, r7
 800ef66:	f7f1 f9a1 	bl	80002ac <__adddf3>
 800ef6a:	4632      	mov	r2, r6
 800ef6c:	463b      	mov	r3, r7
 800ef6e:	4680      	mov	r8, r0
 800ef70:	4689      	mov	r9, r1
 800ef72:	f7f1 f999 	bl	80002a8 <__aeabi_dsub>
 800ef76:	4602      	mov	r2, r0
 800ef78:	460b      	mov	r3, r1
 800ef7a:	4620      	mov	r0, r4
 800ef7c:	4629      	mov	r1, r5
 800ef7e:	f7f1 f993 	bl	80002a8 <__aeabi_dsub>
 800ef82:	4642      	mov	r2, r8
 800ef84:	4606      	mov	r6, r0
 800ef86:	460f      	mov	r7, r1
 800ef88:	464b      	mov	r3, r9
 800ef8a:	4640      	mov	r0, r8
 800ef8c:	4649      	mov	r1, r9
 800ef8e:	f7f1 fb43 	bl	8000618 <__aeabi_dmul>
 800ef92:	a35d      	add	r3, pc, #372	; (adr r3, 800f108 <__ieee754_pow+0xa10>)
 800ef94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef98:	4604      	mov	r4, r0
 800ef9a:	460d      	mov	r5, r1
 800ef9c:	f7f1 fb3c 	bl	8000618 <__aeabi_dmul>
 800efa0:	a35b      	add	r3, pc, #364	; (adr r3, 800f110 <__ieee754_pow+0xa18>)
 800efa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efa6:	f7f1 f97f 	bl	80002a8 <__aeabi_dsub>
 800efaa:	4622      	mov	r2, r4
 800efac:	462b      	mov	r3, r5
 800efae:	f7f1 fb33 	bl	8000618 <__aeabi_dmul>
 800efb2:	a359      	add	r3, pc, #356	; (adr r3, 800f118 <__ieee754_pow+0xa20>)
 800efb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efb8:	f7f1 f978 	bl	80002ac <__adddf3>
 800efbc:	4622      	mov	r2, r4
 800efbe:	462b      	mov	r3, r5
 800efc0:	f7f1 fb2a 	bl	8000618 <__aeabi_dmul>
 800efc4:	a356      	add	r3, pc, #344	; (adr r3, 800f120 <__ieee754_pow+0xa28>)
 800efc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efca:	f7f1 f96d 	bl	80002a8 <__aeabi_dsub>
 800efce:	4622      	mov	r2, r4
 800efd0:	462b      	mov	r3, r5
 800efd2:	f7f1 fb21 	bl	8000618 <__aeabi_dmul>
 800efd6:	a354      	add	r3, pc, #336	; (adr r3, 800f128 <__ieee754_pow+0xa30>)
 800efd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efdc:	f7f1 f966 	bl	80002ac <__adddf3>
 800efe0:	4622      	mov	r2, r4
 800efe2:	462b      	mov	r3, r5
 800efe4:	f7f1 fb18 	bl	8000618 <__aeabi_dmul>
 800efe8:	4602      	mov	r2, r0
 800efea:	460b      	mov	r3, r1
 800efec:	4640      	mov	r0, r8
 800efee:	4649      	mov	r1, r9
 800eff0:	f7f1 f95a 	bl	80002a8 <__aeabi_dsub>
 800eff4:	4604      	mov	r4, r0
 800eff6:	460d      	mov	r5, r1
 800eff8:	4602      	mov	r2, r0
 800effa:	460b      	mov	r3, r1
 800effc:	4640      	mov	r0, r8
 800effe:	4649      	mov	r1, r9
 800f000:	f7f1 fb0a 	bl	8000618 <__aeabi_dmul>
 800f004:	2200      	movs	r2, #0
 800f006:	ec41 0b19 	vmov	d9, r0, r1
 800f00a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f00e:	4620      	mov	r0, r4
 800f010:	4629      	mov	r1, r5
 800f012:	f7f1 f949 	bl	80002a8 <__aeabi_dsub>
 800f016:	4602      	mov	r2, r0
 800f018:	460b      	mov	r3, r1
 800f01a:	ec51 0b19 	vmov	r0, r1, d9
 800f01e:	f7f1 fc25 	bl	800086c <__aeabi_ddiv>
 800f022:	4632      	mov	r2, r6
 800f024:	4604      	mov	r4, r0
 800f026:	460d      	mov	r5, r1
 800f028:	463b      	mov	r3, r7
 800f02a:	4640      	mov	r0, r8
 800f02c:	4649      	mov	r1, r9
 800f02e:	f7f1 faf3 	bl	8000618 <__aeabi_dmul>
 800f032:	4632      	mov	r2, r6
 800f034:	463b      	mov	r3, r7
 800f036:	f7f1 f939 	bl	80002ac <__adddf3>
 800f03a:	4602      	mov	r2, r0
 800f03c:	460b      	mov	r3, r1
 800f03e:	4620      	mov	r0, r4
 800f040:	4629      	mov	r1, r5
 800f042:	f7f1 f931 	bl	80002a8 <__aeabi_dsub>
 800f046:	4642      	mov	r2, r8
 800f048:	464b      	mov	r3, r9
 800f04a:	f7f1 f92d 	bl	80002a8 <__aeabi_dsub>
 800f04e:	460b      	mov	r3, r1
 800f050:	4602      	mov	r2, r0
 800f052:	4939      	ldr	r1, [pc, #228]	; (800f138 <__ieee754_pow+0xa40>)
 800f054:	2000      	movs	r0, #0
 800f056:	f7f1 f927 	bl	80002a8 <__aeabi_dsub>
 800f05a:	ec41 0b10 	vmov	d0, r0, r1
 800f05e:	ee10 3a90 	vmov	r3, s1
 800f062:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800f066:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f06a:	da2b      	bge.n	800f0c4 <__ieee754_pow+0x9cc>
 800f06c:	4650      	mov	r0, sl
 800f06e:	f000 f877 	bl	800f160 <scalbn>
 800f072:	ec51 0b10 	vmov	r0, r1, d0
 800f076:	ec53 2b18 	vmov	r2, r3, d8
 800f07a:	f7ff bbee 	b.w	800e85a <__ieee754_pow+0x162>
 800f07e:	4b2f      	ldr	r3, [pc, #188]	; (800f13c <__ieee754_pow+0xa44>)
 800f080:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800f084:	429e      	cmp	r6, r3
 800f086:	f77f af0d 	ble.w	800eea4 <__ieee754_pow+0x7ac>
 800f08a:	4b2d      	ldr	r3, [pc, #180]	; (800f140 <__ieee754_pow+0xa48>)
 800f08c:	440b      	add	r3, r1
 800f08e:	4303      	orrs	r3, r0
 800f090:	d009      	beq.n	800f0a6 <__ieee754_pow+0x9ae>
 800f092:	ec51 0b18 	vmov	r0, r1, d8
 800f096:	2200      	movs	r2, #0
 800f098:	2300      	movs	r3, #0
 800f09a:	f7f1 fd2f 	bl	8000afc <__aeabi_dcmplt>
 800f09e:	3800      	subs	r0, #0
 800f0a0:	bf18      	it	ne
 800f0a2:	2001      	movne	r0, #1
 800f0a4:	e448      	b.n	800e938 <__ieee754_pow+0x240>
 800f0a6:	4622      	mov	r2, r4
 800f0a8:	462b      	mov	r3, r5
 800f0aa:	f7f1 f8fd 	bl	80002a8 <__aeabi_dsub>
 800f0ae:	4642      	mov	r2, r8
 800f0b0:	464b      	mov	r3, r9
 800f0b2:	f7f1 fd37 	bl	8000b24 <__aeabi_dcmpge>
 800f0b6:	2800      	cmp	r0, #0
 800f0b8:	f43f aef4 	beq.w	800eea4 <__ieee754_pow+0x7ac>
 800f0bc:	e7e9      	b.n	800f092 <__ieee754_pow+0x99a>
 800f0be:	f04f 0a00 	mov.w	sl, #0
 800f0c2:	e71a      	b.n	800eefa <__ieee754_pow+0x802>
 800f0c4:	ec51 0b10 	vmov	r0, r1, d0
 800f0c8:	4619      	mov	r1, r3
 800f0ca:	e7d4      	b.n	800f076 <__ieee754_pow+0x97e>
 800f0cc:	491a      	ldr	r1, [pc, #104]	; (800f138 <__ieee754_pow+0xa40>)
 800f0ce:	2000      	movs	r0, #0
 800f0d0:	f7ff bb31 	b.w	800e736 <__ieee754_pow+0x3e>
 800f0d4:	2000      	movs	r0, #0
 800f0d6:	2100      	movs	r1, #0
 800f0d8:	f7ff bb2d 	b.w	800e736 <__ieee754_pow+0x3e>
 800f0dc:	4630      	mov	r0, r6
 800f0de:	4639      	mov	r1, r7
 800f0e0:	f7ff bb29 	b.w	800e736 <__ieee754_pow+0x3e>
 800f0e4:	9204      	str	r2, [sp, #16]
 800f0e6:	f7ff bb7b 	b.w	800e7e0 <__ieee754_pow+0xe8>
 800f0ea:	2300      	movs	r3, #0
 800f0ec:	f7ff bb65 	b.w	800e7ba <__ieee754_pow+0xc2>
 800f0f0:	00000000 	.word	0x00000000
 800f0f4:	3fe62e43 	.word	0x3fe62e43
 800f0f8:	fefa39ef 	.word	0xfefa39ef
 800f0fc:	3fe62e42 	.word	0x3fe62e42
 800f100:	0ca86c39 	.word	0x0ca86c39
 800f104:	be205c61 	.word	0xbe205c61
 800f108:	72bea4d0 	.word	0x72bea4d0
 800f10c:	3e663769 	.word	0x3e663769
 800f110:	c5d26bf1 	.word	0xc5d26bf1
 800f114:	3ebbbd41 	.word	0x3ebbbd41
 800f118:	af25de2c 	.word	0xaf25de2c
 800f11c:	3f11566a 	.word	0x3f11566a
 800f120:	16bebd93 	.word	0x16bebd93
 800f124:	3f66c16c 	.word	0x3f66c16c
 800f128:	5555553e 	.word	0x5555553e
 800f12c:	3fc55555 	.word	0x3fc55555
 800f130:	3fe00000 	.word	0x3fe00000
 800f134:	fff00000 	.word	0xfff00000
 800f138:	3ff00000 	.word	0x3ff00000
 800f13c:	4090cbff 	.word	0x4090cbff
 800f140:	3f6f3400 	.word	0x3f6f3400
 800f144:	652b82fe 	.word	0x652b82fe
 800f148:	3c971547 	.word	0x3c971547

0800f14c <fabs>:
 800f14c:	ec51 0b10 	vmov	r0, r1, d0
 800f150:	ee10 2a10 	vmov	r2, s0
 800f154:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f158:	ec43 2b10 	vmov	d0, r2, r3
 800f15c:	4770      	bx	lr
	...

0800f160 <scalbn>:
 800f160:	b570      	push	{r4, r5, r6, lr}
 800f162:	ec55 4b10 	vmov	r4, r5, d0
 800f166:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800f16a:	4606      	mov	r6, r0
 800f16c:	462b      	mov	r3, r5
 800f16e:	b999      	cbnz	r1, 800f198 <scalbn+0x38>
 800f170:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f174:	4323      	orrs	r3, r4
 800f176:	d03f      	beq.n	800f1f8 <scalbn+0x98>
 800f178:	4b35      	ldr	r3, [pc, #212]	; (800f250 <scalbn+0xf0>)
 800f17a:	4629      	mov	r1, r5
 800f17c:	ee10 0a10 	vmov	r0, s0
 800f180:	2200      	movs	r2, #0
 800f182:	f7f1 fa49 	bl	8000618 <__aeabi_dmul>
 800f186:	4b33      	ldr	r3, [pc, #204]	; (800f254 <scalbn+0xf4>)
 800f188:	429e      	cmp	r6, r3
 800f18a:	4604      	mov	r4, r0
 800f18c:	460d      	mov	r5, r1
 800f18e:	da10      	bge.n	800f1b2 <scalbn+0x52>
 800f190:	a327      	add	r3, pc, #156	; (adr r3, 800f230 <scalbn+0xd0>)
 800f192:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f196:	e01f      	b.n	800f1d8 <scalbn+0x78>
 800f198:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800f19c:	4291      	cmp	r1, r2
 800f19e:	d10c      	bne.n	800f1ba <scalbn+0x5a>
 800f1a0:	ee10 2a10 	vmov	r2, s0
 800f1a4:	4620      	mov	r0, r4
 800f1a6:	4629      	mov	r1, r5
 800f1a8:	f7f1 f880 	bl	80002ac <__adddf3>
 800f1ac:	4604      	mov	r4, r0
 800f1ae:	460d      	mov	r5, r1
 800f1b0:	e022      	b.n	800f1f8 <scalbn+0x98>
 800f1b2:	460b      	mov	r3, r1
 800f1b4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800f1b8:	3936      	subs	r1, #54	; 0x36
 800f1ba:	f24c 3250 	movw	r2, #50000	; 0xc350
 800f1be:	4296      	cmp	r6, r2
 800f1c0:	dd0d      	ble.n	800f1de <scalbn+0x7e>
 800f1c2:	2d00      	cmp	r5, #0
 800f1c4:	a11c      	add	r1, pc, #112	; (adr r1, 800f238 <scalbn+0xd8>)
 800f1c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f1ca:	da02      	bge.n	800f1d2 <scalbn+0x72>
 800f1cc:	a11c      	add	r1, pc, #112	; (adr r1, 800f240 <scalbn+0xe0>)
 800f1ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f1d2:	a319      	add	r3, pc, #100	; (adr r3, 800f238 <scalbn+0xd8>)
 800f1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1d8:	f7f1 fa1e 	bl	8000618 <__aeabi_dmul>
 800f1dc:	e7e6      	b.n	800f1ac <scalbn+0x4c>
 800f1de:	1872      	adds	r2, r6, r1
 800f1e0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f1e4:	428a      	cmp	r2, r1
 800f1e6:	dcec      	bgt.n	800f1c2 <scalbn+0x62>
 800f1e8:	2a00      	cmp	r2, #0
 800f1ea:	dd08      	ble.n	800f1fe <scalbn+0x9e>
 800f1ec:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f1f0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f1f4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f1f8:	ec45 4b10 	vmov	d0, r4, r5
 800f1fc:	bd70      	pop	{r4, r5, r6, pc}
 800f1fe:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f202:	da08      	bge.n	800f216 <scalbn+0xb6>
 800f204:	2d00      	cmp	r5, #0
 800f206:	a10a      	add	r1, pc, #40	; (adr r1, 800f230 <scalbn+0xd0>)
 800f208:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f20c:	dac0      	bge.n	800f190 <scalbn+0x30>
 800f20e:	a10e      	add	r1, pc, #56	; (adr r1, 800f248 <scalbn+0xe8>)
 800f210:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f214:	e7bc      	b.n	800f190 <scalbn+0x30>
 800f216:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f21a:	3236      	adds	r2, #54	; 0x36
 800f21c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f220:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f224:	4620      	mov	r0, r4
 800f226:	4b0c      	ldr	r3, [pc, #48]	; (800f258 <scalbn+0xf8>)
 800f228:	2200      	movs	r2, #0
 800f22a:	e7d5      	b.n	800f1d8 <scalbn+0x78>
 800f22c:	f3af 8000 	nop.w
 800f230:	c2f8f359 	.word	0xc2f8f359
 800f234:	01a56e1f 	.word	0x01a56e1f
 800f238:	8800759c 	.word	0x8800759c
 800f23c:	7e37e43c 	.word	0x7e37e43c
 800f240:	8800759c 	.word	0x8800759c
 800f244:	fe37e43c 	.word	0xfe37e43c
 800f248:	c2f8f359 	.word	0xc2f8f359
 800f24c:	81a56e1f 	.word	0x81a56e1f
 800f250:	43500000 	.word	0x43500000
 800f254:	ffff3cb0 	.word	0xffff3cb0
 800f258:	3c900000 	.word	0x3c900000

0800f25c <with_errno>:
 800f25c:	b570      	push	{r4, r5, r6, lr}
 800f25e:	4604      	mov	r4, r0
 800f260:	460d      	mov	r5, r1
 800f262:	4616      	mov	r6, r2
 800f264:	f7fd f926 	bl	800c4b4 <__errno>
 800f268:	4629      	mov	r1, r5
 800f26a:	6006      	str	r6, [r0, #0]
 800f26c:	4620      	mov	r0, r4
 800f26e:	bd70      	pop	{r4, r5, r6, pc}

0800f270 <xflow>:
 800f270:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f272:	4614      	mov	r4, r2
 800f274:	461d      	mov	r5, r3
 800f276:	b108      	cbz	r0, 800f27c <xflow+0xc>
 800f278:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f27c:	e9cd 2300 	strd	r2, r3, [sp]
 800f280:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f284:	4620      	mov	r0, r4
 800f286:	4629      	mov	r1, r5
 800f288:	f7f1 f9c6 	bl	8000618 <__aeabi_dmul>
 800f28c:	2222      	movs	r2, #34	; 0x22
 800f28e:	b003      	add	sp, #12
 800f290:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f294:	f7ff bfe2 	b.w	800f25c <with_errno>

0800f298 <__math_uflow>:
 800f298:	b508      	push	{r3, lr}
 800f29a:	2200      	movs	r2, #0
 800f29c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f2a0:	f7ff ffe6 	bl	800f270 <xflow>
 800f2a4:	ec41 0b10 	vmov	d0, r0, r1
 800f2a8:	bd08      	pop	{r3, pc}

0800f2aa <__math_oflow>:
 800f2aa:	b508      	push	{r3, lr}
 800f2ac:	2200      	movs	r2, #0
 800f2ae:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800f2b2:	f7ff ffdd 	bl	800f270 <xflow>
 800f2b6:	ec41 0b10 	vmov	d0, r0, r1
 800f2ba:	bd08      	pop	{r3, pc}

0800f2bc <__ieee754_sqrt>:
 800f2bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2c0:	ec55 4b10 	vmov	r4, r5, d0
 800f2c4:	4e67      	ldr	r6, [pc, #412]	; (800f464 <__ieee754_sqrt+0x1a8>)
 800f2c6:	43ae      	bics	r6, r5
 800f2c8:	ee10 0a10 	vmov	r0, s0
 800f2cc:	ee10 2a10 	vmov	r2, s0
 800f2d0:	4629      	mov	r1, r5
 800f2d2:	462b      	mov	r3, r5
 800f2d4:	d10d      	bne.n	800f2f2 <__ieee754_sqrt+0x36>
 800f2d6:	f7f1 f99f 	bl	8000618 <__aeabi_dmul>
 800f2da:	4602      	mov	r2, r0
 800f2dc:	460b      	mov	r3, r1
 800f2de:	4620      	mov	r0, r4
 800f2e0:	4629      	mov	r1, r5
 800f2e2:	f7f0 ffe3 	bl	80002ac <__adddf3>
 800f2e6:	4604      	mov	r4, r0
 800f2e8:	460d      	mov	r5, r1
 800f2ea:	ec45 4b10 	vmov	d0, r4, r5
 800f2ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2f2:	2d00      	cmp	r5, #0
 800f2f4:	dc0b      	bgt.n	800f30e <__ieee754_sqrt+0x52>
 800f2f6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f2fa:	4326      	orrs	r6, r4
 800f2fc:	d0f5      	beq.n	800f2ea <__ieee754_sqrt+0x2e>
 800f2fe:	b135      	cbz	r5, 800f30e <__ieee754_sqrt+0x52>
 800f300:	f7f0 ffd2 	bl	80002a8 <__aeabi_dsub>
 800f304:	4602      	mov	r2, r0
 800f306:	460b      	mov	r3, r1
 800f308:	f7f1 fab0 	bl	800086c <__aeabi_ddiv>
 800f30c:	e7eb      	b.n	800f2e6 <__ieee754_sqrt+0x2a>
 800f30e:	1509      	asrs	r1, r1, #20
 800f310:	f000 808d 	beq.w	800f42e <__ieee754_sqrt+0x172>
 800f314:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f318:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800f31c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f320:	07c9      	lsls	r1, r1, #31
 800f322:	bf5c      	itt	pl
 800f324:	005b      	lslpl	r3, r3, #1
 800f326:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800f32a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f32e:	bf58      	it	pl
 800f330:	0052      	lslpl	r2, r2, #1
 800f332:	2500      	movs	r5, #0
 800f334:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800f338:	1076      	asrs	r6, r6, #1
 800f33a:	0052      	lsls	r2, r2, #1
 800f33c:	f04f 0e16 	mov.w	lr, #22
 800f340:	46ac      	mov	ip, r5
 800f342:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f346:	eb0c 0001 	add.w	r0, ip, r1
 800f34a:	4298      	cmp	r0, r3
 800f34c:	bfde      	ittt	le
 800f34e:	1a1b      	suble	r3, r3, r0
 800f350:	eb00 0c01 	addle.w	ip, r0, r1
 800f354:	186d      	addle	r5, r5, r1
 800f356:	005b      	lsls	r3, r3, #1
 800f358:	f1be 0e01 	subs.w	lr, lr, #1
 800f35c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800f360:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800f364:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800f368:	d1ed      	bne.n	800f346 <__ieee754_sqrt+0x8a>
 800f36a:	4674      	mov	r4, lr
 800f36c:	2720      	movs	r7, #32
 800f36e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800f372:	4563      	cmp	r3, ip
 800f374:	eb01 000e 	add.w	r0, r1, lr
 800f378:	dc02      	bgt.n	800f380 <__ieee754_sqrt+0xc4>
 800f37a:	d113      	bne.n	800f3a4 <__ieee754_sqrt+0xe8>
 800f37c:	4290      	cmp	r0, r2
 800f37e:	d811      	bhi.n	800f3a4 <__ieee754_sqrt+0xe8>
 800f380:	2800      	cmp	r0, #0
 800f382:	eb00 0e01 	add.w	lr, r0, r1
 800f386:	da57      	bge.n	800f438 <__ieee754_sqrt+0x17c>
 800f388:	f1be 0f00 	cmp.w	lr, #0
 800f38c:	db54      	blt.n	800f438 <__ieee754_sqrt+0x17c>
 800f38e:	f10c 0801 	add.w	r8, ip, #1
 800f392:	eba3 030c 	sub.w	r3, r3, ip
 800f396:	4290      	cmp	r0, r2
 800f398:	bf88      	it	hi
 800f39a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800f39e:	1a12      	subs	r2, r2, r0
 800f3a0:	440c      	add	r4, r1
 800f3a2:	46c4      	mov	ip, r8
 800f3a4:	005b      	lsls	r3, r3, #1
 800f3a6:	3f01      	subs	r7, #1
 800f3a8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800f3ac:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800f3b0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800f3b4:	d1dd      	bne.n	800f372 <__ieee754_sqrt+0xb6>
 800f3b6:	4313      	orrs	r3, r2
 800f3b8:	d01b      	beq.n	800f3f2 <__ieee754_sqrt+0x136>
 800f3ba:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800f468 <__ieee754_sqrt+0x1ac>
 800f3be:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800f46c <__ieee754_sqrt+0x1b0>
 800f3c2:	e9da 0100 	ldrd	r0, r1, [sl]
 800f3c6:	e9db 2300 	ldrd	r2, r3, [fp]
 800f3ca:	f7f0 ff6d 	bl	80002a8 <__aeabi_dsub>
 800f3ce:	e9da 8900 	ldrd	r8, r9, [sl]
 800f3d2:	4602      	mov	r2, r0
 800f3d4:	460b      	mov	r3, r1
 800f3d6:	4640      	mov	r0, r8
 800f3d8:	4649      	mov	r1, r9
 800f3da:	f7f1 fb99 	bl	8000b10 <__aeabi_dcmple>
 800f3de:	b140      	cbz	r0, 800f3f2 <__ieee754_sqrt+0x136>
 800f3e0:	f1b4 3fff 	cmp.w	r4, #4294967295
 800f3e4:	e9da 0100 	ldrd	r0, r1, [sl]
 800f3e8:	e9db 2300 	ldrd	r2, r3, [fp]
 800f3ec:	d126      	bne.n	800f43c <__ieee754_sqrt+0x180>
 800f3ee:	3501      	adds	r5, #1
 800f3f0:	463c      	mov	r4, r7
 800f3f2:	106a      	asrs	r2, r5, #1
 800f3f4:	0863      	lsrs	r3, r4, #1
 800f3f6:	07e9      	lsls	r1, r5, #31
 800f3f8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800f3fc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800f400:	bf48      	it	mi
 800f402:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800f406:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800f40a:	461c      	mov	r4, r3
 800f40c:	e76d      	b.n	800f2ea <__ieee754_sqrt+0x2e>
 800f40e:	0ad3      	lsrs	r3, r2, #11
 800f410:	3815      	subs	r0, #21
 800f412:	0552      	lsls	r2, r2, #21
 800f414:	2b00      	cmp	r3, #0
 800f416:	d0fa      	beq.n	800f40e <__ieee754_sqrt+0x152>
 800f418:	02dc      	lsls	r4, r3, #11
 800f41a:	d50a      	bpl.n	800f432 <__ieee754_sqrt+0x176>
 800f41c:	f1c1 0420 	rsb	r4, r1, #32
 800f420:	fa22 f404 	lsr.w	r4, r2, r4
 800f424:	1e4d      	subs	r5, r1, #1
 800f426:	408a      	lsls	r2, r1
 800f428:	4323      	orrs	r3, r4
 800f42a:	1b41      	subs	r1, r0, r5
 800f42c:	e772      	b.n	800f314 <__ieee754_sqrt+0x58>
 800f42e:	4608      	mov	r0, r1
 800f430:	e7f0      	b.n	800f414 <__ieee754_sqrt+0x158>
 800f432:	005b      	lsls	r3, r3, #1
 800f434:	3101      	adds	r1, #1
 800f436:	e7ef      	b.n	800f418 <__ieee754_sqrt+0x15c>
 800f438:	46e0      	mov	r8, ip
 800f43a:	e7aa      	b.n	800f392 <__ieee754_sqrt+0xd6>
 800f43c:	f7f0 ff36 	bl	80002ac <__adddf3>
 800f440:	e9da 8900 	ldrd	r8, r9, [sl]
 800f444:	4602      	mov	r2, r0
 800f446:	460b      	mov	r3, r1
 800f448:	4640      	mov	r0, r8
 800f44a:	4649      	mov	r1, r9
 800f44c:	f7f1 fb56 	bl	8000afc <__aeabi_dcmplt>
 800f450:	b120      	cbz	r0, 800f45c <__ieee754_sqrt+0x1a0>
 800f452:	1ca0      	adds	r0, r4, #2
 800f454:	bf08      	it	eq
 800f456:	3501      	addeq	r5, #1
 800f458:	3402      	adds	r4, #2
 800f45a:	e7ca      	b.n	800f3f2 <__ieee754_sqrt+0x136>
 800f45c:	3401      	adds	r4, #1
 800f45e:	f024 0401 	bic.w	r4, r4, #1
 800f462:	e7c6      	b.n	800f3f2 <__ieee754_sqrt+0x136>
 800f464:	7ff00000 	.word	0x7ff00000
 800f468:	200001d8 	.word	0x200001d8
 800f46c:	200001e0 	.word	0x200001e0

0800f470 <_init>:
 800f470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f472:	bf00      	nop
 800f474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f476:	bc08      	pop	{r3}
 800f478:	469e      	mov	lr, r3
 800f47a:	4770      	bx	lr

0800f47c <_fini>:
 800f47c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f47e:	bf00      	nop
 800f480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f482:	bc08      	pop	{r3}
 800f484:	469e      	mov	lr, r3
 800f486:	4770      	bx	lr
