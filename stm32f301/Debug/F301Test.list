
F301Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  0800a28c  0800a28c  0001a28c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a64c  0800a64c  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  0800a64c  0800a64c  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a64c  0800a64c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a64c  0800a64c  0001a64c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a650  0800a650  0001a650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800a654  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002ad8  20000060  0800a6b4  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002b38  0800a6b4  00022b38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bd2d  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f6a  00000000  00000000  0003be00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001808  00000000  00000000  0003fd70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012be  00000000  00000000  00041578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001940c  00000000  00000000  00042836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d8e0  00000000  00000000  0005bc42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009a554  00000000  00000000  00079522  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000694c  00000000  00000000  00113a78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0011a3c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a274 	.word	0x0800a274

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	0800a274 	.word	0x0800a274

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <sendATCommand>:
//	HAL_UART_Transmit(huart, atcom, sizeOfAT, delayms);
//	HAL_UART_Receive(huart, response, sizeOfResp, delayms);
//}

void sendATCommand(UART_HandleTypeDef *huart, const char* atcom, int sizeOfAT, int delayms)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b086      	sub	sp, #24
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	60f8      	str	r0, [r7, #12]
 80002a8:	60b9      	str	r1, [r7, #8]
 80002aa:	607a      	str	r2, [r7, #4]
 80002ac:	603b      	str	r3, [r7, #0]
	for(uint16_t i = 0; i < sizeOfAT; i++) {
 80002ae:	2300      	movs	r3, #0
 80002b0:	82fb      	strh	r3, [r7, #22]
 80002b2:	e00a      	b.n	80002ca <sendATCommand+0x2a>
		if(atcom[i] == '\0') {
 80002b4:	8afb      	ldrh	r3, [r7, #22]
 80002b6:	68ba      	ldr	r2, [r7, #8]
 80002b8:	4413      	add	r3, r2
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d101      	bne.n	80002c4 <sendATCommand+0x24>
			sizeOfAT = i;
 80002c0:	8afb      	ldrh	r3, [r7, #22]
 80002c2:	607b      	str	r3, [r7, #4]
	for(uint16_t i = 0; i < sizeOfAT; i++) {
 80002c4:	8afb      	ldrh	r3, [r7, #22]
 80002c6:	3301      	adds	r3, #1
 80002c8:	82fb      	strh	r3, [r7, #22]
 80002ca:	8afb      	ldrh	r3, [r7, #22]
 80002cc:	687a      	ldr	r2, [r7, #4]
 80002ce:	429a      	cmp	r2, r3
 80002d0:	dcf0      	bgt.n	80002b4 <sendATCommand+0x14>
		}
	}
	HAL_UART_Transmit(huart, atcom, sizeOfAT, delayms);
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	b29a      	uxth	r2, r3
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	68b9      	ldr	r1, [r7, #8]
 80002da:	68f8      	ldr	r0, [r7, #12]
 80002dc:	f006 f86c 	bl	80063b8 <HAL_UART_Transmit>
}
 80002e0:	bf00      	nop
 80002e2:	3718      	adds	r7, #24
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}

080002e8 <receiveAnswer>:

void receiveAnswer(UART_HandleTypeDef *huart, char* response, int sizeOfResp, int delayms)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b086      	sub	sp, #24
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	60f8      	str	r0, [r7, #12]
 80002f0:	60b9      	str	r1, [r7, #8]
 80002f2:	607a      	str	r2, [r7, #4]
 80002f4:	603b      	str	r3, [r7, #0]
	for(uint16_t i = 0; i < sizeOfResp; i++) {
 80002f6:	2300      	movs	r3, #0
 80002f8:	82fb      	strh	r3, [r7, #22]
 80002fa:	e007      	b.n	800030c <receiveAnswer+0x24>
		response[i] = 0;
 80002fc:	8afb      	ldrh	r3, [r7, #22]
 80002fe:	68ba      	ldr	r2, [r7, #8]
 8000300:	4413      	add	r3, r2
 8000302:	2200      	movs	r2, #0
 8000304:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i < sizeOfResp; i++) {
 8000306:	8afb      	ldrh	r3, [r7, #22]
 8000308:	3301      	adds	r3, #1
 800030a:	82fb      	strh	r3, [r7, #22]
 800030c:	8afb      	ldrh	r3, [r7, #22]
 800030e:	687a      	ldr	r2, [r7, #4]
 8000310:	429a      	cmp	r2, r3
 8000312:	dcf3      	bgt.n	80002fc <receiveAnswer+0x14>
	}
	HAL_UART_Receive(huart, response, sizeOfResp, delayms);
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	b29a      	uxth	r2, r3
 8000318:	683b      	ldr	r3, [r7, #0]
 800031a:	68b9      	ldr	r1, [r7, #8]
 800031c:	68f8      	ldr	r0, [r7, #12]
 800031e:	f006 f8d5 	bl	80064cc <HAL_UART_Receive>
}
 8000322:	bf00      	nop
 8000324:	3718      	adds	r7, #24
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
	...

0800032c <atSend_USART3_DMA>:
	resp = HAL_UART_Transmit_DMA(huart, (uint8_t*)pData, sizeof(pData)-1);
	__asm__ volatile("NOP");
}

uint8_t atSend_USART3_DMA(const uint8_t *pData, uint16_t amount)
{
 800032c:	b480      	push	{r7}
 800032e:	b083      	sub	sp, #12
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
 8000334:	460b      	mov	r3, r1
 8000336:	807b      	strh	r3, [r7, #2]
	if((DMA1_Channel2->CCR & DMA_CCR_EN) == DMA_CCR_EN) {
 8000338:	4b25      	ldr	r3, [pc, #148]	; (80003d0 <atSend_USART3_DMA+0xa4>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	f003 0301 	and.w	r3, r3, #1
 8000340:	2b01      	cmp	r3, #1
 8000342:	d129      	bne.n	8000398 <atSend_USART3_DMA+0x6c>
		if((DMA1_Channel2->CNDTR) != 0) {
 8000344:	4b22      	ldr	r3, [pc, #136]	; (80003d0 <atSend_USART3_DMA+0xa4>)
 8000346:	685b      	ldr	r3, [r3, #4]
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <atSend_USART3_DMA+0x24>
			return 1;
 800034c:	2301      	movs	r3, #1
 800034e:	e039      	b.n	80003c4 <atSend_USART3_DMA+0x98>
		} else if((DMA1_Channel2->CCR & DMA_CCR_TCIE) != DMA_CCR_TCIE) {
 8000350:	4b1f      	ldr	r3, [pc, #124]	; (80003d0 <atSend_USART3_DMA+0xa4>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	f003 0302 	and.w	r3, r3, #2
 8000358:	2b02      	cmp	r3, #2
 800035a:	d01d      	beq.n	8000398 <atSend_USART3_DMA+0x6c>
			DMA1_Channel2->CCR &= ~DMA_CCR_EN;
 800035c:	4b1c      	ldr	r3, [pc, #112]	; (80003d0 <atSend_USART3_DMA+0xa4>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a1b      	ldr	r2, [pc, #108]	; (80003d0 <atSend_USART3_DMA+0xa4>)
 8000362:	f023 0301 	bic.w	r3, r3, #1
 8000366:	6013      	str	r3, [r2, #0]
			USART3->CR3 &= ~USART_CR3_DMAT;
 8000368:	4b1a      	ldr	r3, [pc, #104]	; (80003d4 <atSend_USART3_DMA+0xa8>)
 800036a:	689b      	ldr	r3, [r3, #8]
 800036c:	4a19      	ldr	r2, [pc, #100]	; (80003d4 <atSend_USART3_DMA+0xa8>)
 800036e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000372:	6093      	str	r3, [r2, #8]
			if((DMA1->ISR & DMA_ISR_TCIF2) == DMA_ISR_TCIF2) {
 8000374:	4b18      	ldr	r3, [pc, #96]	; (80003d8 <atSend_USART3_DMA+0xac>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	f003 0320 	and.w	r3, r3, #32
 800037c:	2b20      	cmp	r3, #32
 800037e:	d105      	bne.n	800038c <atSend_USART3_DMA+0x60>
				DMA1->IFCR |= DMA_IFCR_CTCIF2;
 8000380:	4b15      	ldr	r3, [pc, #84]	; (80003d8 <atSend_USART3_DMA+0xac>)
 8000382:	685b      	ldr	r3, [r3, #4]
 8000384:	4a14      	ldr	r2, [pc, #80]	; (80003d8 <atSend_USART3_DMA+0xac>)
 8000386:	f043 0320 	orr.w	r3, r3, #32
 800038a:	6053      	str	r3, [r2, #4]
			}
			DMA1_Channel2->CCR |= DMA_CCR_TCIE;
 800038c:	4b10      	ldr	r3, [pc, #64]	; (80003d0 <atSend_USART3_DMA+0xa4>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a0f      	ldr	r2, [pc, #60]	; (80003d0 <atSend_USART3_DMA+0xa4>)
 8000392:	f043 0302 	orr.w	r3, r3, #2
 8000396:	6013      	str	r3, [r2, #0]
		}
	}
	USART3->CR3 |= USART_CR3_DMAT;
 8000398:	4b0e      	ldr	r3, [pc, #56]	; (80003d4 <atSend_USART3_DMA+0xa8>)
 800039a:	689b      	ldr	r3, [r3, #8]
 800039c:	4a0d      	ldr	r2, [pc, #52]	; (80003d4 <atSend_USART3_DMA+0xa8>)
 800039e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003a2:	6093      	str	r3, [r2, #8]

	DMA1_Channel2->CNDTR = amount;
 80003a4:	4a0a      	ldr	r2, [pc, #40]	; (80003d0 <atSend_USART3_DMA+0xa4>)
 80003a6:	887b      	ldrh	r3, [r7, #2]
 80003a8:	6053      	str	r3, [r2, #4]
	DMA1_Channel2->CPAR = (uint32_t)&(USART3->TDR);
 80003aa:	4b09      	ldr	r3, [pc, #36]	; (80003d0 <atSend_USART3_DMA+0xa4>)
 80003ac:	4a0b      	ldr	r2, [pc, #44]	; (80003dc <atSend_USART3_DMA+0xb0>)
 80003ae:	609a      	str	r2, [r3, #8]
	DMA1_Channel2->CMAR = (uint32_t)pData;
 80003b0:	4a07      	ldr	r2, [pc, #28]	; (80003d0 <atSend_USART3_DMA+0xa4>)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	60d3      	str	r3, [r2, #12]

	DMA1_Channel2->CCR |= DMA_CCR_EN;
 80003b6:	4b06      	ldr	r3, [pc, #24]	; (80003d0 <atSend_USART3_DMA+0xa4>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	4a05      	ldr	r2, [pc, #20]	; (80003d0 <atSend_USART3_DMA+0xa4>)
 80003bc:	f043 0301 	orr.w	r3, r3, #1
 80003c0:	6013      	str	r3, [r2, #0]
	return 0;
 80003c2:	2300      	movs	r3, #0
}
 80003c4:	4618      	mov	r0, r3
 80003c6:	370c      	adds	r7, #12
 80003c8:	46bd      	mov	sp, r7
 80003ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ce:	4770      	bx	lr
 80003d0:	4002001c 	.word	0x4002001c
 80003d4:	40004800 	.word	0x40004800
 80003d8:	40020000 	.word	0x40020000
 80003dc:	40004828 	.word	0x40004828

080003e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80003e0:	b480      	push	{r7}
 80003e2:	b085      	sub	sp, #20
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	60f8      	str	r0, [r7, #12]
 80003e8:	60b9      	str	r1, [r7, #8]
 80003ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	4a07      	ldr	r2, [pc, #28]	; (800040c <vApplicationGetIdleTaskMemory+0x2c>)
 80003f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80003f2:	68bb      	ldr	r3, [r7, #8]
 80003f4:	4a06      	ldr	r2, [pc, #24]	; (8000410 <vApplicationGetIdleTaskMemory+0x30>)
 80003f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	2260      	movs	r2, #96	; 0x60
 80003fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80003fe:	bf00      	nop
 8000400:	3714      	adds	r7, #20
 8000402:	46bd      	mov	sp, r7
 8000404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	2000007c 	.word	0x2000007c
 8000410:	200000d4 	.word	0x200000d4

08000414 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000414:	b480      	push	{r7}
 8000416:	b085      	sub	sp, #20
 8000418:	af00      	add	r7, sp, #0
 800041a:	60f8      	str	r0, [r7, #12]
 800041c:	60b9      	str	r1, [r7, #8]
 800041e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	4a07      	ldr	r2, [pc, #28]	; (8000440 <vApplicationGetTimerTaskMemory+0x2c>)
 8000424:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000426:	68bb      	ldr	r3, [r7, #8]
 8000428:	4a06      	ldr	r2, [pc, #24]	; (8000444 <vApplicationGetTimerTaskMemory+0x30>)
 800042a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	22c0      	movs	r2, #192	; 0xc0
 8000430:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000432:	bf00      	nop
 8000434:	3714      	adds	r7, #20
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop
 8000440:	20000254 	.word	0x20000254
 8000444:	200002ac 	.word	0x200002ac

08000448 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000448:	b480      	push	{r7}
 800044a:	b083      	sub	sp, #12
 800044c:	af00      	add	r7, sp, #0
 800044e:	4603      	mov	r3, r0
 8000450:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000456:	2b00      	cmp	r3, #0
 8000458:	db0b      	blt.n	8000472 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800045a:	79fb      	ldrb	r3, [r7, #7]
 800045c:	f003 021f 	and.w	r2, r3, #31
 8000460:	4907      	ldr	r1, [pc, #28]	; (8000480 <__NVIC_EnableIRQ+0x38>)
 8000462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000466:	095b      	lsrs	r3, r3, #5
 8000468:	2001      	movs	r0, #1
 800046a:	fa00 f202 	lsl.w	r2, r0, r2
 800046e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000472:	bf00      	nop
 8000474:	370c      	adds	r7, #12
 8000476:	46bd      	mov	sp, r7
 8000478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	e000e100 	.word	0xe000e100

08000484 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
 800048a:	4603      	mov	r3, r0
 800048c:	6039      	str	r1, [r7, #0]
 800048e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000494:	2b00      	cmp	r3, #0
 8000496:	db0a      	blt.n	80004ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	b2da      	uxtb	r2, r3
 800049c:	490c      	ldr	r1, [pc, #48]	; (80004d0 <__NVIC_SetPriority+0x4c>)
 800049e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004a2:	0112      	lsls	r2, r2, #4
 80004a4:	b2d2      	uxtb	r2, r2
 80004a6:	440b      	add	r3, r1
 80004a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80004ac:	e00a      	b.n	80004c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004ae:	683b      	ldr	r3, [r7, #0]
 80004b0:	b2da      	uxtb	r2, r3
 80004b2:	4908      	ldr	r1, [pc, #32]	; (80004d4 <__NVIC_SetPriority+0x50>)
 80004b4:	79fb      	ldrb	r3, [r7, #7]
 80004b6:	f003 030f 	and.w	r3, r3, #15
 80004ba:	3b04      	subs	r3, #4
 80004bc:	0112      	lsls	r2, r2, #4
 80004be:	b2d2      	uxtb	r2, r2
 80004c0:	440b      	add	r3, r1
 80004c2:	761a      	strb	r2, [r3, #24]
}
 80004c4:	bf00      	nop
 80004c6:	370c      	adds	r7, #12
 80004c8:	46bd      	mov	sp, r7
 80004ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ce:	4770      	bx	lr
 80004d0:	e000e100 	.word	0xe000e100
 80004d4:	e000ed00 	.word	0xe000ed00

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b5b0      	push	{r4, r5, r7, lr}
 80004da:	b0ba      	sub	sp, #232	; 0xe8
 80004dc:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	avrBatVoltage = 0;
 80004de:	4b9e      	ldr	r3, [pc, #632]	; (8000758 <main+0x280>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	801a      	strh	r2, [r3, #0]

	EncoderR.timeNew = 0;
 80004e4:	4b9d      	ldr	r3, [pc, #628]	; (800075c <main+0x284>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
	EncoderR.timeOld = 0;
 80004ea:	4b9c      	ldr	r3, [pc, #624]	; (800075c <main+0x284>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	605a      	str	r2, [r3, #4]
	EncoderR.positionNew = 0;
 80004f0:	4b9a      	ldr	r3, [pc, #616]	; (800075c <main+0x284>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	609a      	str	r2, [r3, #8]
	EncoderR.positionOld = 0;
 80004f6:	4b99      	ldr	r3, [pc, #612]	; (800075c <main+0x284>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	60da      	str	r2, [r3, #12]
	EncoderR.posCntUpdate = 0;
 80004fc:	4b97      	ldr	r3, [pc, #604]	; (800075c <main+0x284>)
 80004fe:	2200      	movs	r2, #0
 8000500:	741a      	strb	r2, [r3, #16]
	EncoderR.rpm = 0;
 8000502:	4b96      	ldr	r3, [pc, #600]	; (800075c <main+0x284>)
 8000504:	2200      	movs	r2, #0
 8000506:	615a      	str	r2, [r3, #20]

	EncoderL.timeNew = 0;
 8000508:	4b95      	ldr	r3, [pc, #596]	; (8000760 <main+0x288>)
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
	EncoderL.timeOld = 0;
 800050e:	4b94      	ldr	r3, [pc, #592]	; (8000760 <main+0x288>)
 8000510:	2200      	movs	r2, #0
 8000512:	605a      	str	r2, [r3, #4]
	EncoderL.positionNew = 0;
 8000514:	4b92      	ldr	r3, [pc, #584]	; (8000760 <main+0x288>)
 8000516:	2200      	movs	r2, #0
 8000518:	609a      	str	r2, [r3, #8]
	EncoderL.positionOld = 0;
 800051a:	4b91      	ldr	r3, [pc, #580]	; (8000760 <main+0x288>)
 800051c:	2200      	movs	r2, #0
 800051e:	60da      	str	r2, [r3, #12]
	EncoderL.posCntUpdate = 0;
 8000520:	4b8f      	ldr	r3, [pc, #572]	; (8000760 <main+0x288>)
 8000522:	2200      	movs	r2, #0
 8000524:	741a      	strb	r2, [r3, #16]
	EncoderL.rpm = 0;
 8000526:	4b8e      	ldr	r3, [pc, #568]	; (8000760 <main+0x288>)
 8000528:	2200      	movs	r2, #0
 800052a:	615a      	str	r2, [r3, #20]

	SoftPwmR.curValue = 0;
 800052c:	4b8d      	ldr	r3, [pc, #564]	; (8000764 <main+0x28c>)
 800052e:	2200      	movs	r2, #0
 8000530:	805a      	strh	r2, [r3, #2]
	SoftPwmR.reqValue = 0;
 8000532:	4b8c      	ldr	r3, [pc, #560]	; (8000764 <main+0x28c>)
 8000534:	2200      	movs	r2, #0
 8000536:	801a      	strh	r2, [r3, #0]
	SoftPwmR.pwmValue = 0;
 8000538:	4b8a      	ldr	r3, [pc, #552]	; (8000764 <main+0x28c>)
 800053a:	2200      	movs	r2, #0
 800053c:	809a      	strh	r2, [r3, #4]
	SoftPwmR.status = 0;
 800053e:	4b89      	ldr	r3, [pc, #548]	; (8000764 <main+0x28c>)
 8000540:	2200      	movs	r2, #0
 8000542:	719a      	strb	r2, [r3, #6]

	SoftPwmL.curValue = 0;
 8000544:	4b88      	ldr	r3, [pc, #544]	; (8000768 <main+0x290>)
 8000546:	2200      	movs	r2, #0
 8000548:	805a      	strh	r2, [r3, #2]
	SoftPwmL.reqValue = 0;
 800054a:	4b87      	ldr	r3, [pc, #540]	; (8000768 <main+0x290>)
 800054c:	2200      	movs	r2, #0
 800054e:	801a      	strh	r2, [r3, #0]
	SoftPwmL.pwmValue = 0;
 8000550:	4b85      	ldr	r3, [pc, #532]	; (8000768 <main+0x290>)
 8000552:	2200      	movs	r2, #0
 8000554:	809a      	strh	r2, [r3, #4]
	SoftPwmL.status = 0;
 8000556:	4b84      	ldr	r3, [pc, #528]	; (8000768 <main+0x290>)
 8000558:	2200      	movs	r2, #0
 800055a:	719a      	strb	r2, [r3, #6]

	softCounterValue = 0;
 800055c:	4b83      	ldr	r3, [pc, #524]	; (800076c <main+0x294>)
 800055e:	2200      	movs	r2, #0
 8000560:	801a      	strh	r2, [r3, #0]

	memset(txBuffer, '\0', sizeof(txBuffer));
 8000562:	f240 12ff 	movw	r2, #511	; 0x1ff
 8000566:	2100      	movs	r1, #0
 8000568:	4881      	ldr	r0, [pc, #516]	; (8000770 <main+0x298>)
 800056a:	f009 f9ff 	bl	800996c <memset>
	memset(rxBuffer, '\0', sizeof(rxBuffer));
 800056e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8000572:	2100      	movs	r1, #0
 8000574:	487f      	ldr	r0, [pc, #508]	; (8000774 <main+0x29c>)
 8000576:	f009 f9f9 	bl	800996c <memset>
	rxBufferHead = 0;
 800057a:	4b7f      	ldr	r3, [pc, #508]	; (8000778 <main+0x2a0>)
 800057c:	2200      	movs	r2, #0
 800057e:	801a      	strh	r2, [r3, #0]

	joyX = 0;
 8000580:	4b7e      	ldr	r3, [pc, #504]	; (800077c <main+0x2a4>)
 8000582:	2200      	movs	r2, #0
 8000584:	701a      	strb	r2, [r3, #0]
	joyY = 0;
 8000586:	4b7e      	ldr	r3, [pc, #504]	; (8000780 <main+0x2a8>)
 8000588:	2200      	movs	r2, #0
 800058a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058c:	f002 fd18 	bl	8002fc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000590:	f000 f928 	bl	80007e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000594:	f000 fb14 	bl	8000bc0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000598:	f000 faec 	bl	8000b74 <MX_DMA_Init>
  MX_ADC1_Init();
 800059c:	f000 f982 	bl	80008a4 <MX_ADC1_Init>
  MX_SPI2_Init();
 80005a0:	f000 f9dc 	bl	800095c <MX_SPI2_Init>
  MX_USART3_UART_Init();
 80005a4:	f000 fab6 	bl	8000b14 <MX_USART3_UART_Init>
  MX_TIM17_Init();
 80005a8:	f000 fa8c 	bl	8000ac4 <MX_TIM17_Init>
  MX_TIM16_Init();
 80005ac:	f000 fa64 	bl	8000a78 <MX_TIM16_Init>
  MX_TIM15_Init();
 80005b0:	f000 fa12 	bl	80009d8 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  ADC1_configuration();
 80005b4:	f000 fbb0 	bl	8000d18 <ADC1_configuration>
  TIM1_configuration();
 80005b8:	f000 fc8c 	bl	8000ed4 <TIM1_configuration>
  TIM2_configuration();
 80005bc:	f000 fd02 	bl	8000fc4 <TIM2_configuration>
  TIM17_additional_configuration();
 80005c0:	f000 fdc2 	bl	8001148 <TIM17_additional_configuration>
  TIM15_additional_configuration();
 80005c4:	f000 fd8a 	bl	80010dc <TIM15_additional_configuration>
  TIM16_additional_configuration();
 80005c8:	f000 fdae 	bl	8001128 <TIM16_additional_configuration>
  USART3_additional_configuration();
 80005cc:	f000 fdd2 	bl	8001174 <USART3_additional_configuration>

  kToRpm = (32*1000*60)/256;
 80005d0:	4b6c      	ldr	r3, [pc, #432]	; (8000784 <main+0x2ac>)
 80005d2:	4a6d      	ldr	r2, [pc, #436]	; (8000788 <main+0x2b0>)
 80005d4:	601a      	str	r2, [r3, #0]

  pc13EventGroup = xEventGroupCreate();
 80005d6:	f006 fc0d 	bl	8006df4 <xEventGroupCreate>
 80005da:	4603      	mov	r3, r0
 80005dc:	4a6b      	ldr	r2, [pc, #428]	; (800078c <main+0x2b4>)
 80005de:	6013      	str	r3, [r2, #0]
  pc14EventGroup = xEventGroupCreate();
 80005e0:	f006 fc08 	bl	8006df4 <xEventGroupCreate>
 80005e4:	4603      	mov	r3, r0
 80005e6:	4a6a      	ldr	r2, [pc, #424]	; (8000790 <main+0x2b8>)
 80005e8:	6013      	str	r3, [r2, #0]
  timerFdsEventGroup = xEventGroupCreate();
 80005ea:	f006 fc03 	bl	8006df4 <xEventGroupCreate>
 80005ee:	4603      	mov	r3, r0
 80005f0:	4a68      	ldr	r2, [pc, #416]	; (8000794 <main+0x2bc>)
 80005f2:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  timerForDataSending = xTimerCreate("TimerForDataSending", pdMS_TO_TICKS(113), pdTRUE, 1, timerForSendDataCallback); //321
 80005f4:	4b68      	ldr	r3, [pc, #416]	; (8000798 <main+0x2c0>)
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	2301      	movs	r3, #1
 80005fa:	2201      	movs	r2, #1
 80005fc:	2171      	movs	r1, #113	; 0x71
 80005fe:	4867      	ldr	r0, [pc, #412]	; (800079c <main+0x2c4>)
 8000600:	f008 fa4e 	bl	8008aa0 <xTimerCreate>
 8000604:	4603      	mov	r3, r0
 8000606:	4a66      	ldr	r2, [pc, #408]	; (80007a0 <main+0x2c8>)
 8000608:	6013      	str	r3, [r2, #0]
  xTimerStart(timerForDataSending, portMAX_DELAY);
 800060a:	4b65      	ldr	r3, [pc, #404]	; (80007a0 <main+0x2c8>)
 800060c:	681c      	ldr	r4, [r3, #0]
 800060e:	f007 fd57 	bl	80080c0 <xTaskGetTickCount>
 8000612:	4602      	mov	r2, r0
 8000614:	f04f 33ff 	mov.w	r3, #4294967295
 8000618:	9300      	str	r3, [sp, #0]
 800061a:	2300      	movs	r3, #0
 800061c:	2101      	movs	r1, #1
 800061e:	4620      	mov	r0, r4
 8000620:	f008 fa92 	bl	8008b48 <xTimerGenericCommand>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of PS_Measure */
  osThreadDef(PS_Measure, psMeasure, osPriorityNormal, 0, 96);
 8000624:	4b5f      	ldr	r3, [pc, #380]	; (80007a4 <main+0x2cc>)
 8000626:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 800062a:	461d      	mov	r5, r3
 800062c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800062e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000630:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000634:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PS_MeasureHandle = osThreadCreate(osThread(PS_Measure), NULL);
 8000638:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f006 fb78 	bl	8006d34 <osThreadCreate>
 8000644:	4603      	mov	r3, r0
 8000646:	4a58      	ldr	r2, [pc, #352]	; (80007a8 <main+0x2d0>)
 8000648:	6013      	str	r3, [r2, #0]

  /* definition and creation of PC_13_LED */
  osThreadDef(PC_13_LED, pc13LedCntrl, osPriorityNormal, 0, 96);
 800064a:	4b58      	ldr	r3, [pc, #352]	; (80007ac <main+0x2d4>)
 800064c:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8000650:	461d      	mov	r5, r3
 8000652:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000654:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000656:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800065a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PC_13_LEDHandle = osThreadCreate(osThread(PC_13_LED), NULL);
 800065e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000662:	2100      	movs	r1, #0
 8000664:	4618      	mov	r0, r3
 8000666:	f006 fb65 	bl	8006d34 <osThreadCreate>
 800066a:	4603      	mov	r3, r0
 800066c:	4a50      	ldr	r2, [pc, #320]	; (80007b0 <main+0x2d8>)
 800066e:	6013      	str	r3, [r2, #0]

  /* definition and creation of PC_14_LED */
  osThreadDef(PC_14_LED, pc14LedCntrl, osPriorityNormal, 0, 96);
 8000670:	4b50      	ldr	r3, [pc, #320]	; (80007b4 <main+0x2dc>)
 8000672:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8000676:	461d      	mov	r5, r3
 8000678:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800067a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800067c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000680:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PC_14_LEDHandle = osThreadCreate(osThread(PC_14_LED), NULL);
 8000684:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f006 fb52 	bl	8006d34 <osThreadCreate>
 8000690:	4603      	mov	r3, r0
 8000692:	4a49      	ldr	r2, [pc, #292]	; (80007b8 <main+0x2e0>)
 8000694:	6013      	str	r3, [r2, #0]

  /* definition and creation of EspCommunication */
  osThreadDef(EspCommunication, espCommunication, osPriorityAboveNormal, 0, 256);
 8000696:	4b49      	ldr	r3, [pc, #292]	; (80007bc <main+0x2e4>)
 8000698:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800069c:	461d      	mov	r5, r3
 800069e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EspCommunicationHandle = osThreadCreate(osThread(EspCommunication), NULL);
 80006aa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80006ae:	2100      	movs	r1, #0
 80006b0:	4618      	mov	r0, r3
 80006b2:	f006 fb3f 	bl	8006d34 <osThreadCreate>
 80006b6:	4603      	mov	r3, r0
 80006b8:	4a41      	ldr	r2, [pc, #260]	; (80007c0 <main+0x2e8>)
 80006ba:	6013      	str	r3, [r2, #0]

  /* definition and creation of EncoderR */
  osThreadDef(EncoderR, encoderR, osPriorityNormal, 0, 128);
 80006bc:	4b41      	ldr	r3, [pc, #260]	; (80007c4 <main+0x2ec>)
 80006be:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80006c2:	461d      	mov	r5, r3
 80006c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EncoderRHandle = osThreadCreate(osThread(EncoderR), NULL);
 80006d0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f006 fb2c 	bl	8006d34 <osThreadCreate>
 80006dc:	4603      	mov	r3, r0
 80006de:	4a3a      	ldr	r2, [pc, #232]	; (80007c8 <main+0x2f0>)
 80006e0:	6013      	str	r3, [r2, #0]

  /* definition and creation of EncoderL */
  osThreadDef(EncoderL, encoderL, osPriorityNormal, 0, 128);
 80006e2:	4b3a      	ldr	r3, [pc, #232]	; (80007cc <main+0x2f4>)
 80006e4:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80006e8:	461d      	mov	r5, r3
 80006ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EncoderLHandle = osThreadCreate(osThread(EncoderL), NULL);
 80006f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006fa:	2100      	movs	r1, #0
 80006fc:	4618      	mov	r0, r3
 80006fe:	f006 fb19 	bl	8006d34 <osThreadCreate>
 8000702:	4603      	mov	r3, r0
 8000704:	4a32      	ldr	r2, [pc, #200]	; (80007d0 <main+0x2f8>)
 8000706:	6013      	str	r3, [r2, #0]

  /* definition and creation of SoftwarePwmR */
  osThreadDef(SoftwarePwmR, softwarePWMR, osPriorityNormal, 0, 156);
 8000708:	4b32      	ldr	r3, [pc, #200]	; (80007d4 <main+0x2fc>)
 800070a:	f107 041c 	add.w	r4, r7, #28
 800070e:	461d      	mov	r5, r3
 8000710:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000712:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000714:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000718:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SoftwarePwmRHandle = osThreadCreate(osThread(SoftwarePwmR), NULL);
 800071c:	f107 031c 	add.w	r3, r7, #28
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f006 fb06 	bl	8006d34 <osThreadCreate>
 8000728:	4603      	mov	r3, r0
 800072a:	4a2b      	ldr	r2, [pc, #172]	; (80007d8 <main+0x300>)
 800072c:	6013      	str	r3, [r2, #0]

  /* definition and creation of SoftwarePwmL */
  osThreadDef(SoftwarePwmL, softwarePWML, osPriorityNormal, 0, 156);
 800072e:	4b2b      	ldr	r3, [pc, #172]	; (80007dc <main+0x304>)
 8000730:	463c      	mov	r4, r7
 8000732:	461d      	mov	r5, r3
 8000734:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000736:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000738:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800073c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SoftwarePwmLHandle = osThreadCreate(osThread(SoftwarePwmL), NULL);
 8000740:	463b      	mov	r3, r7
 8000742:	2100      	movs	r1, #0
 8000744:	4618      	mov	r0, r3
 8000746:	f006 faf5 	bl	8006d34 <osThreadCreate>
 800074a:	4603      	mov	r3, r0
 800074c:	4a24      	ldr	r2, [pc, #144]	; (80007e0 <main+0x308>)
 800074e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000750:	f006 fae9 	bl	8006d26 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000754:	e7fe      	b.n	8000754 <main+0x27c>
 8000756:	bf00      	nop
 8000758:	20000888 	.word	0x20000888
 800075c:	20000894 	.word	0x20000894
 8000760:	200008ac 	.word	0x200008ac
 8000764:	200008c4 	.word	0x200008c4
 8000768:	200008cc 	.word	0x200008cc
 800076c:	200008d8 	.word	0x200008d8
 8000770:	200008dc 	.word	0x200008dc
 8000774:	20000adc 	.word	0x20000adc
 8000778:	20000cdc 	.word	0x20000cdc
 800077c:	20000ce8 	.word	0x20000ce8
 8000780:	20000ce9 	.word	0x20000ce9
 8000784:	200008d4 	.word	0x200008d4
 8000788:	45ea6000 	.word	0x45ea6000
 800078c:	2000088c 	.word	0x2000088c
 8000790:	20000890 	.word	0x20000890
 8000794:	20000ce4 	.word	0x20000ce4
 8000798:	080012a1 	.word	0x080012a1
 800079c:	0800a28c 	.word	0x0800a28c
 80007a0:	20000ce0 	.word	0x20000ce0
 80007a4:	0800a2ac 	.word	0x0800a2ac
 80007a8:	20000854 	.word	0x20000854
 80007ac:	0800a2d4 	.word	0x0800a2d4
 80007b0:	20000858 	.word	0x20000858
 80007b4:	0800a2fc 	.word	0x0800a2fc
 80007b8:	2000085c 	.word	0x2000085c
 80007bc:	0800a32c 	.word	0x0800a32c
 80007c0:	20000860 	.word	0x20000860
 80007c4:	0800a354 	.word	0x0800a354
 80007c8:	20000864 	.word	0x20000864
 80007cc:	0800a37c 	.word	0x0800a37c
 80007d0:	20000868 	.word	0x20000868
 80007d4:	0800a3a8 	.word	0x0800a3a8
 80007d8:	2000086c 	.word	0x2000086c
 80007dc:	0800a3d4 	.word	0x0800a3d4
 80007e0:	20000870 	.word	0x20000870

080007e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b09c      	sub	sp, #112	; 0x70
 80007e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007ee:	2228      	movs	r2, #40	; 0x28
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f009 f8ba 	bl	800996c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
 8000806:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000808:	1d3b      	adds	r3, r7, #4
 800080a:	2230      	movs	r2, #48	; 0x30
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f009 f8ac 	bl	800996c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000814:	2302      	movs	r3, #2
 8000816:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000818:	2301      	movs	r3, #1
 800081a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800081c:	2310      	movs	r3, #16
 800081e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000820:	2302      	movs	r3, #2
 8000822:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000824:	2300      	movs	r3, #0
 8000826:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000828:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800082c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800082e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000832:	4618      	mov	r0, r3
 8000834:	f003 fc56 	bl	80040e4 <HAL_RCC_OscConfig>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800083e:	f001 feaf 	bl	80025a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000842:	230f      	movs	r3, #15
 8000844:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000846:	2302      	movs	r3, #2
 8000848:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800084a:	2300      	movs	r3, #0
 800084c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800084e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000852:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000854:	2300      	movs	r3, #0
 8000856:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000858:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800085c:	2102      	movs	r1, #2
 800085e:	4618      	mov	r0, r3
 8000860:	f004 fc7e 	bl	8005160 <HAL_RCC_ClockConfig>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800086a:	f001 fe99 	bl	80025a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM15|RCC_PERIPHCLK_TIM16
 800086e:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <SystemClock_Config+0xbc>)
 8000870:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM17|RCC_PERIPHCLK_ADC1;
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 8000872:	2300      	movs	r3, #0
 8000874:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 8000876:	2300      	movs	r3, #0
 8000878:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
 800087a:	2300      	movs	r3, #0
 800087c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV2;
 800087e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000882:	61fb      	str	r3, [r7, #28]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	4618      	mov	r0, r3
 8000888:	f004 fed2 	bl	8005630 <HAL_RCCEx_PeriphCLKConfig>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000892:	f001 fe85 	bl	80025a0 <Error_Handler>
  }
}
 8000896:	bf00      	nop
 8000898:	3770      	adds	r7, #112	; 0x70
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	001c0080 	.word	0x001c0080

080008a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b086      	sub	sp, #24
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008aa:	463b      	mov	r3, r7
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
 80008b8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008ba:	4b27      	ldr	r3, [pc, #156]	; (8000958 <MX_ADC1_Init+0xb4>)
 80008bc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008c0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008c2:	4b25      	ldr	r3, [pc, #148]	; (8000958 <MX_ADC1_Init+0xb4>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008c8:	4b23      	ldr	r3, [pc, #140]	; (8000958 <MX_ADC1_Init+0xb4>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008ce:	4b22      	ldr	r3, [pc, #136]	; (8000958 <MX_ADC1_Init+0xb4>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80008d4:	4b20      	ldr	r3, [pc, #128]	; (8000958 <MX_ADC1_Init+0xb4>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008da:	4b1f      	ldr	r3, [pc, #124]	; (8000958 <MX_ADC1_Init+0xb4>)
 80008dc:	2200      	movs	r2, #0
 80008de:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008e2:	4b1d      	ldr	r3, [pc, #116]	; (8000958 <MX_ADC1_Init+0xb4>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008e8:	4b1b      	ldr	r3, [pc, #108]	; (8000958 <MX_ADC1_Init+0xb4>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008ee:	4b1a      	ldr	r3, [pc, #104]	; (8000958 <MX_ADC1_Init+0xb4>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80008f4:	4b18      	ldr	r3, [pc, #96]	; (8000958 <MX_ADC1_Init+0xb4>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008fa:	4b17      	ldr	r3, [pc, #92]	; (8000958 <MX_ADC1_Init+0xb4>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000902:	4b15      	ldr	r3, [pc, #84]	; (8000958 <MX_ADC1_Init+0xb4>)
 8000904:	2204      	movs	r2, #4
 8000906:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000908:	4b13      	ldr	r3, [pc, #76]	; (8000958 <MX_ADC1_Init+0xb4>)
 800090a:	2200      	movs	r2, #0
 800090c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800090e:	4b12      	ldr	r3, [pc, #72]	; (8000958 <MX_ADC1_Init+0xb4>)
 8000910:	2200      	movs	r2, #0
 8000912:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000914:	4810      	ldr	r0, [pc, #64]	; (8000958 <MX_ADC1_Init+0xb4>)
 8000916:	f002 fbad 	bl	8003074 <HAL_ADC_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 8000920:	f001 fe3e 	bl	80025a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000924:	2303      	movs	r3, #3
 8000926:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000928:	2301      	movs	r3, #1
 800092a:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800092c:	2300      	movs	r3, #0
 800092e:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000930:	2300      	movs	r3, #0
 8000932:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000934:	2300      	movs	r3, #0
 8000936:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800093c:	463b      	mov	r3, r7
 800093e:	4619      	mov	r1, r3
 8000940:	4805      	ldr	r0, [pc, #20]	; (8000958 <MX_ADC1_Init+0xb4>)
 8000942:	f002 fd1d 	bl	8003380 <HAL_ADC_ConfigChannel>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800094c:	f001 fe28 	bl	80025a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000950:	bf00      	nop
 8000952:	3718      	adds	r7, #24
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	200005ac 	.word	0x200005ac

0800095c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000960:	4b1b      	ldr	r3, [pc, #108]	; (80009d0 <MX_SPI2_Init+0x74>)
 8000962:	4a1c      	ldr	r2, [pc, #112]	; (80009d4 <MX_SPI2_Init+0x78>)
 8000964:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000966:	4b1a      	ldr	r3, [pc, #104]	; (80009d0 <MX_SPI2_Init+0x74>)
 8000968:	f44f 7282 	mov.w	r2, #260	; 0x104
 800096c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 800096e:	4b18      	ldr	r3, [pc, #96]	; (80009d0 <MX_SPI2_Init+0x74>)
 8000970:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000974:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000976:	4b16      	ldr	r3, [pc, #88]	; (80009d0 <MX_SPI2_Init+0x74>)
 8000978:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800097c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800097e:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <MX_SPI2_Init+0x74>)
 8000980:	2202      	movs	r2, #2
 8000982:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000984:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <MX_SPI2_Init+0x74>)
 8000986:	2201      	movs	r2, #1
 8000988:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800098a:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <MX_SPI2_Init+0x74>)
 800098c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000990:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000992:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <MX_SPI2_Init+0x74>)
 8000994:	2220      	movs	r2, #32
 8000996:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000998:	4b0d      	ldr	r3, [pc, #52]	; (80009d0 <MX_SPI2_Init+0x74>)
 800099a:	2200      	movs	r2, #0
 800099c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800099e:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <MX_SPI2_Init+0x74>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009a4:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <MX_SPI2_Init+0x74>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80009aa:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <MX_SPI2_Init+0x74>)
 80009ac:	2207      	movs	r2, #7
 80009ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009b0:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <MX_SPI2_Init+0x74>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80009b6:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <MX_SPI2_Init+0x74>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80009bc:	4804      	ldr	r0, [pc, #16]	; (80009d0 <MX_SPI2_Init+0x74>)
 80009be:	f004 ffbb 	bl	8005938 <HAL_SPI_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 80009c8:	f001 fdea 	bl	80025a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	200005fc 	.word	0x200005fc
 80009d4:	40003800 	.word	0x40003800

080009d8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b088      	sub	sp, #32
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009de:	f107 0310 	add.w	r3, r7, #16
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ec:	1d3b      	adds	r3, r7, #4
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80009f6:	4b1e      	ldr	r3, [pc, #120]	; (8000a70 <MX_TIM15_Init+0x98>)
 80009f8:	4a1e      	ldr	r2, [pc, #120]	; (8000a74 <MX_TIM15_Init+0x9c>)
 80009fa:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 63;
 80009fc:	4b1c      	ldr	r3, [pc, #112]	; (8000a70 <MX_TIM15_Init+0x98>)
 80009fe:	223f      	movs	r2, #63	; 0x3f
 8000a00:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a02:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <MX_TIM15_Init+0x98>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 100;
 8000a08:	4b19      	ldr	r3, [pc, #100]	; (8000a70 <MX_TIM15_Init+0x98>)
 8000a0a:	2264      	movs	r2, #100	; 0x64
 8000a0c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a0e:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <MX_TIM15_Init+0x98>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000a14:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <MX_TIM15_Init+0x98>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a1a:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <MX_TIM15_Init+0x98>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000a20:	4813      	ldr	r0, [pc, #76]	; (8000a70 <MX_TIM15_Init+0x98>)
 8000a22:	f005 f834 	bl	8005a8e <HAL_TIM_Base_Init>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 8000a2c:	f001 fdb8 	bl	80025a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a34:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000a36:	f107 0310 	add.w	r3, r7, #16
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	480c      	ldr	r0, [pc, #48]	; (8000a70 <MX_TIM15_Init+0x98>)
 8000a3e:	f005 f9f0 	bl	8005e22 <HAL_TIM_ConfigClockSource>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 8000a48:	f001 fdaa 	bl	80025a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a50:	2300      	movs	r3, #0
 8000a52:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000a54:	1d3b      	adds	r3, r7, #4
 8000a56:	4619      	mov	r1, r3
 8000a58:	4805      	ldr	r0, [pc, #20]	; (8000a70 <MX_TIM15_Init+0x98>)
 8000a5a:	f005 fbdb 	bl	8006214 <HAL_TIMEx_MasterConfigSynchronization>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 8000a64:	f001 fd9c 	bl	80025a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000a68:	bf00      	nop
 8000a6a:	3720      	adds	r7, #32
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20000660 	.word	0x20000660
 8000a74:	40014000 	.word	0x40014000

08000a78 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000a7c:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <MX_TIM16_Init+0x44>)
 8000a7e:	4a10      	ldr	r2, [pc, #64]	; (8000ac0 <MX_TIM16_Init+0x48>)
 8000a80:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 63;
 8000a82:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <MX_TIM16_Init+0x44>)
 8000a84:	223f      	movs	r2, #63	; 0x3f
 8000a86:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a88:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <MX_TIM16_Init+0x44>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10;
 8000a8e:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <MX_TIM16_Init+0x44>)
 8000a90:	220a      	movs	r2, #10
 8000a92:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a94:	4b09      	ldr	r3, [pc, #36]	; (8000abc <MX_TIM16_Init+0x44>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000a9a:	4b08      	ldr	r3, [pc, #32]	; (8000abc <MX_TIM16_Init+0x44>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa0:	4b06      	ldr	r3, [pc, #24]	; (8000abc <MX_TIM16_Init+0x44>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000aa6:	4805      	ldr	r0, [pc, #20]	; (8000abc <MX_TIM16_Init+0x44>)
 8000aa8:	f004 fff1 	bl	8005a8e <HAL_TIM_Base_Init>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8000ab2:	f001 fd75 	bl	80025a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	200006ac 	.word	0x200006ac
 8000ac0:	40014400 	.word	0x40014400

08000ac4 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000ac8:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <MX_TIM17_Init+0x48>)
 8000aca:	4a11      	ldr	r2, [pc, #68]	; (8000b10 <MX_TIM17_Init+0x4c>)
 8000acc:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1999;
 8000ace:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <MX_TIM17_Init+0x48>)
 8000ad0:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000ad4:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad6:	4b0d      	ldr	r3, [pc, #52]	; (8000b0c <MX_TIM17_Init+0x48>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000adc:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <MX_TIM17_Init+0x48>)
 8000ade:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ae2:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae4:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <MX_TIM17_Init+0x48>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000aea:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <MX_TIM17_Init+0x48>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <MX_TIM17_Init+0x48>)
 8000af2:	2280      	movs	r2, #128	; 0x80
 8000af4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000af6:	4805      	ldr	r0, [pc, #20]	; (8000b0c <MX_TIM17_Init+0x48>)
 8000af8:	f004 ffc9 	bl	8005a8e <HAL_TIM_Base_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8000b02:	f001 fd4d 	bl	80025a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	200006f8 	.word	0x200006f8
 8000b10:	40014800 	.word	0x40014800

08000b14 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b18:	4b14      	ldr	r3, [pc, #80]	; (8000b6c <MX_USART3_UART_Init+0x58>)
 8000b1a:	4a15      	ldr	r2, [pc, #84]	; (8000b70 <MX_USART3_UART_Init+0x5c>)
 8000b1c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b1e:	4b13      	ldr	r3, [pc, #76]	; (8000b6c <MX_USART3_UART_Init+0x58>)
 8000b20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b24:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b26:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <MX_USART3_UART_Init+0x58>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <MX_USART3_UART_Init+0x58>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b32:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <MX_USART3_UART_Init+0x58>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b38:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <MX_USART3_UART_Init+0x58>)
 8000b3a:	220c      	movs	r2, #12
 8000b3c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	; (8000b6c <MX_USART3_UART_Init+0x58>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b44:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <MX_USART3_UART_Init+0x58>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b4a:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <MX_USART3_UART_Init+0x58>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <MX_USART3_UART_Init+0x58>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b56:	4805      	ldr	r0, [pc, #20]	; (8000b6c <MX_USART3_UART_Init+0x58>)
 8000b58:	f005 fbe0 	bl	800631c <HAL_UART_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b62:	f001 fd1d 	bl	80025a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000744 	.word	0x20000744
 8000b70:	40004800 	.word	0x40004800

08000b74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b7a:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <MX_DMA_Init+0x48>)
 8000b7c:	695b      	ldr	r3, [r3, #20]
 8000b7e:	4a0f      	ldr	r2, [pc, #60]	; (8000bbc <MX_DMA_Init+0x48>)
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	6153      	str	r3, [r2, #20]
 8000b86:	4b0d      	ldr	r3, [pc, #52]	; (8000bbc <MX_DMA_Init+0x48>)
 8000b88:	695b      	ldr	r3, [r3, #20]
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2105      	movs	r1, #5
 8000b96:	200c      	movs	r0, #12
 8000b98:	f002 ffc2 	bl	8003b20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000b9c:	200c      	movs	r0, #12
 8000b9e:	f002 ffdb 	bl	8003b58 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2105      	movs	r1, #5
 8000ba6:	200d      	movs	r0, #13
 8000ba8:	f002 ffba 	bl	8003b20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000bac:	200d      	movs	r0, #13
 8000bae:	f002 ffd3 	bl	8003b58 <HAL_NVIC_EnableIRQ>

}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40021000 	.word	0x40021000

08000bc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b088      	sub	sp, #32
 8000bc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc6:	f107 030c 	add.w	r3, r7, #12
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
 8000bd0:	609a      	str	r2, [r3, #8]
 8000bd2:	60da      	str	r2, [r3, #12]
 8000bd4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd6:	4b4d      	ldr	r3, [pc, #308]	; (8000d0c <MX_GPIO_Init+0x14c>)
 8000bd8:	695b      	ldr	r3, [r3, #20]
 8000bda:	4a4c      	ldr	r2, [pc, #304]	; (8000d0c <MX_GPIO_Init+0x14c>)
 8000bdc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000be0:	6153      	str	r3, [r2, #20]
 8000be2:	4b4a      	ldr	r3, [pc, #296]	; (8000d0c <MX_GPIO_Init+0x14c>)
 8000be4:	695b      	ldr	r3, [r3, #20]
 8000be6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000bea:	60bb      	str	r3, [r7, #8]
 8000bec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bee:	4b47      	ldr	r3, [pc, #284]	; (8000d0c <MX_GPIO_Init+0x14c>)
 8000bf0:	695b      	ldr	r3, [r3, #20]
 8000bf2:	4a46      	ldr	r2, [pc, #280]	; (8000d0c <MX_GPIO_Init+0x14c>)
 8000bf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf8:	6153      	str	r3, [r2, #20]
 8000bfa:	4b44      	ldr	r3, [pc, #272]	; (8000d0c <MX_GPIO_Init+0x14c>)
 8000bfc:	695b      	ldr	r3, [r3, #20]
 8000bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c06:	4b41      	ldr	r3, [pc, #260]	; (8000d0c <MX_GPIO_Init+0x14c>)
 8000c08:	695b      	ldr	r3, [r3, #20]
 8000c0a:	4a40      	ldr	r2, [pc, #256]	; (8000d0c <MX_GPIO_Init+0x14c>)
 8000c0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c10:	6153      	str	r3, [r2, #20]
 8000c12:	4b3e      	ldr	r3, [pc, #248]	; (8000d0c <MX_GPIO_Init+0x14c>)
 8000c14:	695b      	ldr	r3, [r3, #20]
 8000c16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c1a:	603b      	str	r3, [r7, #0]
 8000c1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000c24:	483a      	ldr	r0, [pc, #232]	; (8000d10 <MX_GPIO_Init+0x150>)
 8000c26:	f003 fa21 	bl	800406c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN12_Pin|_1A_Pin|_2A_Pin|EN34_Pin
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	21f8      	movs	r1, #248	; 0xf8
 8000c2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c32:	f003 fa1b 	bl	800406c <HAL_GPIO_WritePin>
                          |_3A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, _4A_Pin|RST_ESP_Pin|EN_ESP_Pin|SPI2_CS_L_Pin
 8000c36:	2200      	movs	r2, #0
 8000c38:	f245 0107 	movw	r1, #20487	; 0x5007
 8000c3c:	4835      	ldr	r0, [pc, #212]	; (8000d14 <MX_GPIO_Init+0x154>)
 8000c3e:	f003 fa15 	bl	800406c <HAL_GPIO_WritePin>
                          |SPI2_CS_R_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000c42:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000c46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c54:	f107 030c 	add.w	r3, r7, #12
 8000c58:	4619      	mov	r1, r3
 8000c5a:	482d      	ldr	r0, [pc, #180]	; (8000d10 <MX_GPIO_Init+0x150>)
 8000c5c:	f003 f894 	bl	8003d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN12_Pin _1A_Pin _2A_Pin EN34_Pin
                           _3A_Pin */
  GPIO_InitStruct.Pin = EN12_Pin|_1A_Pin|_2A_Pin|EN34_Pin
 8000c60:	23f8      	movs	r3, #248	; 0xf8
 8000c62:	60fb      	str	r3, [r7, #12]
                          |_3A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c64:	2301      	movs	r3, #1
 8000c66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c70:	f107 030c 	add.w	r3, r7, #12
 8000c74:	4619      	mov	r1, r3
 8000c76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c7a:	f003 f885 	bl	8003d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : _4A_Pin */
  GPIO_InitStruct.Pin = _4A_Pin;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c82:	2301      	movs	r3, #1
 8000c84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(_4A_GPIO_Port, &GPIO_InitStruct);
 8000c8e:	f107 030c 	add.w	r3, r7, #12
 8000c92:	4619      	mov	r1, r3
 8000c94:	481f      	ldr	r0, [pc, #124]	; (8000d14 <MX_GPIO_Init+0x154>)
 8000c96:	f003 f877 	bl	8003d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : RST_ESP_Pin EN_ESP_Pin */
  GPIO_InitStruct.Pin = RST_ESP_Pin|EN_ESP_Pin;
 8000c9a:	2306      	movs	r3, #6
 8000c9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000caa:	f107 030c 	add.w	r3, r7, #12
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4818      	ldr	r0, [pc, #96]	; (8000d14 <MX_GPIO_Init+0x154>)
 8000cb2:	f003 f869 	bl	8003d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_CS_L_Pin SPI2_CS_R_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_L_Pin|SPI2_CS_R_Pin;
 8000cb6:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000cba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc8:	f107 030c 	add.w	r3, r7, #12
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4811      	ldr	r0, [pc, #68]	; (8000d14 <MX_GPIO_Init+0x154>)
 8000cd0:	f003 f85a 	bl	8003d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000cd4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000cd8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cda:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce4:	f107 030c 	add.w	r3, r7, #12
 8000ce8:	4619      	mov	r1, r3
 8000cea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cee:	f003 f84b 	bl	8003d88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2105      	movs	r1, #5
 8000cf6:	2028      	movs	r0, #40	; 0x28
 8000cf8:	f002 ff12 	bl	8003b20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cfc:	2028      	movs	r0, #40	; 0x28
 8000cfe:	f002 ff2b 	bl	8003b58 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d02:	bf00      	nop
 8000d04:	3720      	adds	r7, #32
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40021000 	.word	0x40021000
 8000d10:	48000800 	.word	0x48000800
 8000d14:	48000400 	.word	0x48000400

08000d18 <ADC1_configuration>:

/* USER CODE BEGIN 4 */
void ADC1_configuration(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
	//NVIC configuration
	NVIC->IP[11] |= 0x70; //Priority 7
 8000d1c:	4b68      	ldr	r3, [pc, #416]	; (8000ec0 <ADC1_configuration+0x1a8>)
 8000d1e:	f893 330b 	ldrb.w	r3, [r3, #779]	; 0x30b
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	4a66      	ldr	r2, [pc, #408]	; (8000ec0 <ADC1_configuration+0x1a8>)
 8000d26:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	f882 330b 	strb.w	r3, [r2, #779]	; 0x30b
	NVIC->ISER[0] |= (1<<11); //Enable DMA1 channel 1 interrupt
 8000d30:	4b63      	ldr	r3, [pc, #396]	; (8000ec0 <ADC1_configuration+0x1a8>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a62      	ldr	r2, [pc, #392]	; (8000ec0 <ADC1_configuration+0x1a8>)
 8000d36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d3a:	6013      	str	r3, [r2, #0]
	NVIC->IP[18] |= 0x70; //Priority 7
 8000d3c:	4b60      	ldr	r3, [pc, #384]	; (8000ec0 <ADC1_configuration+0x1a8>)
 8000d3e:	f893 3312 	ldrb.w	r3, [r3, #786]	; 0x312
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	4a5e      	ldr	r2, [pc, #376]	; (8000ec0 <ADC1_configuration+0x1a8>)
 8000d46:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	f882 3312 	strb.w	r3, [r2, #786]	; 0x312
	NVIC->ISER[0] |= (1<<18); //Enable ADC1 global interrupt
 8000d50:	4b5b      	ldr	r3, [pc, #364]	; (8000ec0 <ADC1_configuration+0x1a8>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a5a      	ldr	r2, [pc, #360]	; (8000ec0 <ADC1_configuration+0x1a8>)
 8000d56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d5a:	6013      	str	r3, [r2, #0]
	//DMA configuration for ADC1
	RCC->AHBENR |= RCC_AHBENR_DMA1EN; // Enable the DMA1 clock
 8000d5c:	4b59      	ldr	r3, [pc, #356]	; (8000ec4 <ADC1_configuration+0x1ac>)
 8000d5e:	695b      	ldr	r3, [r3, #20]
 8000d60:	4a58      	ldr	r2, [pc, #352]	; (8000ec4 <ADC1_configuration+0x1ac>)
 8000d62:	f043 0301 	orr.w	r3, r3, #1
 8000d66:	6153      	str	r3, [r2, #20]
	DMA1_Channel1->CCR &= ~DMA_CCR_EN;
 8000d68:	4b57      	ldr	r3, [pc, #348]	; (8000ec8 <ADC1_configuration+0x1b0>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a56      	ldr	r2, [pc, #344]	; (8000ec8 <ADC1_configuration+0x1b0>)
 8000d6e:	f023 0301 	bic.w	r3, r3, #1
 8000d72:	6013      	str	r3, [r2, #0]

	DMA1_Channel1->CCR |= (1<<10); // Bits 11:10 MSIZE[1:0]: Memory size  01: 16-bits
 8000d74:	4b54      	ldr	r3, [pc, #336]	; (8000ec8 <ADC1_configuration+0x1b0>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a53      	ldr	r2, [pc, #332]	; (8000ec8 <ADC1_configuration+0x1b0>)
 8000d7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d7e:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= (1<<8); // Bits 9:8 PSIZE[1:0]: Peripheral size  01: 16-bits
 8000d80:	4b51      	ldr	r3, [pc, #324]	; (8000ec8 <ADC1_configuration+0x1b0>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a50      	ldr	r2, [pc, #320]	; (8000ec8 <ADC1_configuration+0x1b0>)
 8000d86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d8a:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= DMA_CCR_MINC;
 8000d8c:	4b4e      	ldr	r3, [pc, #312]	; (8000ec8 <ADC1_configuration+0x1b0>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a4d      	ldr	r2, [pc, #308]	; (8000ec8 <ADC1_configuration+0x1b0>)
 8000d92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d96:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= DMA_CCR_CIRC;
 8000d98:	4b4b      	ldr	r3, [pc, #300]	; (8000ec8 <ADC1_configuration+0x1b0>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a4a      	ldr	r2, [pc, #296]	; (8000ec8 <ADC1_configuration+0x1b0>)
 8000d9e:	f043 0320 	orr.w	r3, r3, #32
 8000da2:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= DMA_CCR_TCIE;
 8000da4:	4b48      	ldr	r3, [pc, #288]	; (8000ec8 <ADC1_configuration+0x1b0>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a47      	ldr	r2, [pc, #284]	; (8000ec8 <ADC1_configuration+0x1b0>)
 8000daa:	f043 0302 	orr.w	r3, r3, #2
 8000dae:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR &= ~DMA_CCR_HTIE;
 8000db0:	4b45      	ldr	r3, [pc, #276]	; (8000ec8 <ADC1_configuration+0x1b0>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a44      	ldr	r2, [pc, #272]	; (8000ec8 <ADC1_configuration+0x1b0>)
 8000db6:	f023 0304 	bic.w	r3, r3, #4
 8000dba:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR &= ~DMA_CCR_TEIE;
 8000dbc:	4b42      	ldr	r3, [pc, #264]	; (8000ec8 <ADC1_configuration+0x1b0>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a41      	ldr	r2, [pc, #260]	; (8000ec8 <ADC1_configuration+0x1b0>)
 8000dc2:	f023 0308 	bic.w	r3, r3, #8
 8000dc6:	6013      	str	r3, [r2, #0]

	DMA1_Channel1->CNDTR = 10;
 8000dc8:	4b3f      	ldr	r3, [pc, #252]	; (8000ec8 <ADC1_configuration+0x1b0>)
 8000dca:	220a      	movs	r2, #10
 8000dcc:	605a      	str	r2, [r3, #4]
	DMA1_Channel1->CPAR = (uint32_t)&(ADC1->DR);
 8000dce:	4b3e      	ldr	r3, [pc, #248]	; (8000ec8 <ADC1_configuration+0x1b0>)
 8000dd0:	4a3e      	ldr	r2, [pc, #248]	; (8000ecc <ADC1_configuration+0x1b4>)
 8000dd2:	609a      	str	r2, [r3, #8]
	DMA1_Channel1->CMAR = (uint32_t)&batteryVoltage[0];
 8000dd4:	4b3c      	ldr	r3, [pc, #240]	; (8000ec8 <ADC1_configuration+0x1b0>)
 8000dd6:	4a3e      	ldr	r2, [pc, #248]	; (8000ed0 <ADC1_configuration+0x1b8>)
 8000dd8:	60da      	str	r2, [r3, #12]
//	ADC1->CR |= ADC_CR_ADEN;
//	while((ADC1->ISR & ADC_ISR_ADRDY) != ADC_ISR_ADRDY) __asm__ volatile("NOP");
//	ADC1->CR |= ADC_CR_ADSTART;
//	HAL_Delay(20);
//	DMA1_Channel1->CCR |= DMA_CCR_EN;
	__asm__ volatile("NOP");
 8000dda:	bf00      	nop
	if(batteryVoltage[0] == 0) {
 8000ddc:	4b3c      	ldr	r3, [pc, #240]	; (8000ed0 <ADC1_configuration+0x1b8>)
 8000dde:	881b      	ldrh	r3, [r3, #0]
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d16a      	bne.n	8000ebc <ADC1_configuration+0x1a4>
		if((ADC1->CR & ADC_CR_ADEN) == ADC_CR_ADEN) {
 8000de6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	f003 0301 	and.w	r3, r3, #1
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d12d      	bne.n	8000e50 <ADC1_configuration+0x138>
			DMA1_Channel1->CCR &= ~DMA_CCR_EN;
 8000df4:	4b34      	ldr	r3, [pc, #208]	; (8000ec8 <ADC1_configuration+0x1b0>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a33      	ldr	r2, [pc, #204]	; (8000ec8 <ADC1_configuration+0x1b0>)
 8000dfa:	f023 0301 	bic.w	r3, r3, #1
 8000dfe:	6013      	str	r3, [r2, #0]
			ADC1->CR |= ADC_CR_ADSTP;
 8000e00:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e0a:	f043 0310 	orr.w	r3, r3, #16
 8000e0e:	6093      	str	r3, [r2, #8]
			while((ADC1->CR & ADC_CR_ADSTP) == ADC_CR_ADSTP) __asm__ volatile("NOP");
 8000e10:	e000      	b.n	8000e14 <ADC1_configuration+0xfc>
 8000e12:	bf00      	nop
 8000e14:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	f003 0310 	and.w	r3, r3, #16
 8000e1e:	2b10      	cmp	r3, #16
 8000e20:	d0f7      	beq.n	8000e12 <ADC1_configuration+0xfa>
			HAL_Delay(5);
 8000e22:	2005      	movs	r0, #5
 8000e24:	f002 f902 	bl	800302c <HAL_Delay>
			ADC1->CR |= ADC_CR_ADDIS;
 8000e28:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e32:	f043 0302 	orr.w	r3, r3, #2
 8000e36:	6093      	str	r3, [r2, #8]
			while((ADC1->CR & ADC_CR_ADDIS) == ADC_CR_ADDIS) __asm__ volatile("NOP");
 8000e38:	e000      	b.n	8000e3c <ADC1_configuration+0x124>
 8000e3a:	bf00      	nop
 8000e3c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	f003 0302 	and.w	r3, r3, #2
 8000e46:	2b02      	cmp	r3, #2
 8000e48:	d0f7      	beq.n	8000e3a <ADC1_configuration+0x122>
			HAL_Delay(20);
 8000e4a:	2014      	movs	r0, #20
 8000e4c:	f002 f8ee 	bl	800302c <HAL_Delay>
		}
		MX_ADC1_Init();
 8000e50:	f7ff fd28 	bl	80008a4 <MX_ADC1_Init>
		ADC1->CFGR |= ADC_CFGR_DMACFG;
 8000e54:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000e58:	68db      	ldr	r3, [r3, #12]
 8000e5a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e5e:	f043 0302 	orr.w	r3, r3, #2
 8000e62:	60d3      	str	r3, [r2, #12]
		ADC1->CFGR |= ADC_CFGR_DMAEN;
 8000e64:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000e68:	68db      	ldr	r3, [r3, #12]
 8000e6a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e6e:	f043 0301 	orr.w	r3, r3, #1
 8000e72:	60d3      	str	r3, [r2, #12]
		ADC1->CR |= ADC_CR_ADEN;
 8000e74:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e7e:	f043 0301 	orr.w	r3, r3, #1
 8000e82:	6093      	str	r3, [r2, #8]
		while((ADC1->ISR & ADC_ISR_ADRDY) != ADC_ISR_ADRDY) __asm__ volatile("NOP");
 8000e84:	e000      	b.n	8000e88 <ADC1_configuration+0x170>
 8000e86:	bf00      	nop
 8000e88:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d1f7      	bne.n	8000e86 <ADC1_configuration+0x16e>
		ADC1->CR |= ADC_CR_ADSTART;
 8000e96:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ea0:	f043 0304 	orr.w	r3, r3, #4
 8000ea4:	6093      	str	r3, [r2, #8]
		HAL_Delay(20);
 8000ea6:	2014      	movs	r0, #20
 8000ea8:	f002 f8c0 	bl	800302c <HAL_Delay>
		DMA1_Channel1->CCR |= DMA_CCR_EN;
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <ADC1_configuration+0x1b0>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a05      	ldr	r2, [pc, #20]	; (8000ec8 <ADC1_configuration+0x1b0>)
 8000eb2:	f043 0301 	orr.w	r3, r3, #1
 8000eb6:	6013      	str	r3, [r2, #0]
		__asm__ volatile("NOP");
 8000eb8:	bf00      	nop
	}
	return;
 8000eba:	bf00      	nop
 8000ebc:	bf00      	nop
}
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	e000e100 	.word	0xe000e100
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	40020008 	.word	0x40020008
 8000ecc:	50000040 	.word	0x50000040
 8000ed0:	20000874 	.word	0x20000874

08000ed4 <TIM1_configuration>:

void TIM1_configuration(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
    // Enable the TIM1 clock
    RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8000ed8:	4b38      	ldr	r3, [pc, #224]	; (8000fbc <TIM1_configuration+0xe8>)
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	4a37      	ldr	r2, [pc, #220]	; (8000fbc <TIM1_configuration+0xe8>)
 8000ede:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ee2:	6193      	str	r3, [r2, #24]

    // Configure GPIO pins for TIM1 PA9-CH2 and PA8-CH1
    GPIOA->MODER |= (1<<17);
 8000ee4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000eee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef2:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (1<<19);
 8000ef4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000efe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f02:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR |= (1<<17); //Pull-down
 8000f04:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f08:	68db      	ldr	r3, [r3, #12]
 8000f0a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f12:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR |= (1<<19); //Pull-down
 8000f14:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f18:	68db      	ldr	r3, [r3, #12]
 8000f1a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f1e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f22:	60d3      	str	r3, [r2, #12]
    GPIOA->AFR[1] |= (6); //AF6
 8000f24:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f2a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f2e:	f043 0306 	orr.w	r3, r3, #6
 8000f32:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOA->AFR[1] |= (6<<4); //AF6
 8000f34:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f3a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f3e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000f42:	6253      	str	r3, [r2, #36]	; 0x24

    // Configure TIM1
	TIM1->CR1 |= TIM_CR1_ARPE; //ARPE: Auto-reload preload enable
 8000f44:	4b1e      	ldr	r3, [pc, #120]	; (8000fc0 <TIM1_configuration+0xec>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a1d      	ldr	r2, [pc, #116]	; (8000fc0 <TIM1_configuration+0xec>)
 8000f4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f4e:	6013      	str	r3, [r2, #0]
	TIM1->SMCR |= (TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0); // Encoder mode 3
 8000f50:	4b1b      	ldr	r3, [pc, #108]	; (8000fc0 <TIM1_configuration+0xec>)
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	4a1a      	ldr	r2, [pc, #104]	; (8000fc0 <TIM1_configuration+0xec>)
 8000f56:	f043 0303 	orr.w	r3, r3, #3
 8000f5a:	6093      	str	r3, [r2, #8]
	TIM1->DIER |= TIM_DIER_UIE; //UIE: Update interrupt enable
 8000f5c:	4b18      	ldr	r3, [pc, #96]	; (8000fc0 <TIM1_configuration+0xec>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	4a17      	ldr	r2, [pc, #92]	; (8000fc0 <TIM1_configuration+0xec>)
 8000f62:	f043 0301 	orr.w	r3, r3, #1
 8000f66:	60d3      	str	r3, [r2, #12]

	TIM1->CCMR1 |= (1<<0);
 8000f68:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <TIM1_configuration+0xec>)
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	4a14      	ldr	r2, [pc, #80]	; (8000fc0 <TIM1_configuration+0xec>)
 8000f6e:	f043 0301 	orr.w	r3, r3, #1
 8000f72:	6193      	str	r3, [r2, #24]
	TIM1->CCMR1 |= (1<<8);
 8000f74:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <TIM1_configuration+0xec>)
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	4a11      	ldr	r2, [pc, #68]	; (8000fc0 <TIM1_configuration+0xec>)
 8000f7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f7e:	6193      	str	r3, [r2, #24]
	TIM1->CCER |= (1<<0);
 8000f80:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <TIM1_configuration+0xec>)
 8000f82:	6a1b      	ldr	r3, [r3, #32]
 8000f84:	4a0e      	ldr	r2, [pc, #56]	; (8000fc0 <TIM1_configuration+0xec>)
 8000f86:	f043 0301 	orr.w	r3, r3, #1
 8000f8a:	6213      	str	r3, [r2, #32]
	TIM1->CCER |= (1<<4);
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <TIM1_configuration+0xec>)
 8000f8e:	6a1b      	ldr	r3, [r3, #32]
 8000f90:	4a0b      	ldr	r2, [pc, #44]	; (8000fc0 <TIM1_configuration+0xec>)
 8000f92:	f043 0310 	orr.w	r3, r3, #16
 8000f96:	6213      	str	r3, [r2, #32]

	TIM1->PSC = 7; //7+1 = 8
 8000f98:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <TIM1_configuration+0xec>)
 8000f9a:	2207      	movs	r2, #7
 8000f9c:	629a      	str	r2, [r3, #40]	; 0x28

//	TIM1->RCR = 0xFFFF; // Repetition counter value

    // Enable the TIM1 interrupt
    NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000f9e:	2019      	movs	r0, #25
 8000fa0:	f7ff fa52 	bl	8000448 <__NVIC_EnableIRQ>

    // Set priority for the TIM1 interrupt
    NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5); // Adjust priority as needed
 8000fa4:	2105      	movs	r1, #5
 8000fa6:	2019      	movs	r0, #25
 8000fa8:	f7ff fa6c 	bl	8000484 <__NVIC_SetPriority>

    // Enable the TIM1 counter
    TIM1->CR1 |= TIM_CR1_CEN;
 8000fac:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <TIM1_configuration+0xec>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a03      	ldr	r2, [pc, #12]	; (8000fc0 <TIM1_configuration+0xec>)
 8000fb2:	f043 0301 	orr.w	r3, r3, #1
 8000fb6:	6013      	str	r3, [r2, #0]
}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	40012c00 	.word	0x40012c00

08000fc4 <TIM2_configuration>:

void TIM2_configuration(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
    // Enable the TIM2 clock
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000fc8:	4b43      	ldr	r3, [pc, #268]	; (80010d8 <TIM2_configuration+0x114>)
 8000fca:	69db      	ldr	r3, [r3, #28]
 8000fcc:	4a42      	ldr	r2, [pc, #264]	; (80010d8 <TIM2_configuration+0x114>)
 8000fce:	f043 0301 	orr.w	r3, r3, #1
 8000fd2:	61d3      	str	r3, [r2, #28]

    // Configure GPIO pins for TIM2 PA1-CH2 and PA0-CH1
    GPIOA->MODER |= (1<<1);
 8000fd4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000fde:	f043 0302 	orr.w	r3, r3, #2
 8000fe2:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (1<<3);
 8000fe4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000fee:	f043 0308 	orr.w	r3, r3, #8
 8000ff2:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR |= (1<<1); //Pull-down
 8000ff4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ff8:	68db      	ldr	r3, [r3, #12]
 8000ffa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000ffe:	f043 0302 	orr.w	r3, r3, #2
 8001002:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR |= (1<<3); //Pull-down
 8001004:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001008:	68db      	ldr	r3, [r3, #12]
 800100a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800100e:	f043 0308 	orr.w	r3, r3, #8
 8001012:	60d3      	str	r3, [r2, #12]
    GPIOA->AFR[0] |= (1); //AF1
 8001014:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001018:	6a1b      	ldr	r3, [r3, #32]
 800101a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800101e:	f043 0301 	orr.w	r3, r3, #1
 8001022:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (1<<4); //AF1
 8001024:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001028:	6a1b      	ldr	r3, [r3, #32]
 800102a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800102e:	f043 0310 	orr.w	r3, r3, #16
 8001032:	6213      	str	r3, [r2, #32]

    // Configure TIM2
	TIM2->CR1 |= TIM_CR1_ARPE; //ARPE: Auto-reload preload enable
 8001034:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800103e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001042:	6013      	str	r3, [r2, #0]
	TIM2->SMCR |= (TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0); // Encoder mode 3
 8001044:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800104e:	f043 0303 	orr.w	r3, r3, #3
 8001052:	6093      	str	r3, [r2, #8]
	TIM2->DIER |= TIM_DIER_UIE; //UIE: Update interrupt enable
 8001054:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800105e:	f043 0301 	orr.w	r3, r3, #1
 8001062:	60d3      	str	r3, [r2, #12]

	TIM2->CCMR1 |= (1<<0);
 8001064:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001068:	699b      	ldr	r3, [r3, #24]
 800106a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800106e:	f043 0301 	orr.w	r3, r3, #1
 8001072:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= (1<<8);
 8001074:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001078:	699b      	ldr	r3, [r3, #24]
 800107a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800107e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001082:	6193      	str	r3, [r2, #24]
	TIM2->CCER |= (1<<0);
 8001084:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001088:	6a1b      	ldr	r3, [r3, #32]
 800108a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800108e:	f043 0301 	orr.w	r3, r3, #1
 8001092:	6213      	str	r3, [r2, #32]
	TIM2->CCER |= (1<<4);
 8001094:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001098:	6a1b      	ldr	r3, [r3, #32]
 800109a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800109e:	f043 0310 	orr.w	r3, r3, #16
 80010a2:	6213      	str	r3, [r2, #32]

	TIM2->PSC = 7; //7+1 = 8
 80010a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010a8:	2207      	movs	r2, #7
 80010aa:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 0xFFFF; //65535
 80010ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010b4:	62da      	str	r2, [r3, #44]	; 0x2c

    // Enable the TIM2 interrupt
    NVIC_EnableIRQ(TIM2_IRQn);
 80010b6:	201c      	movs	r0, #28
 80010b8:	f7ff f9c6 	bl	8000448 <__NVIC_EnableIRQ>

    // Set priority for the TIM2 interrupt
    NVIC_SetPriority(TIM2_IRQn, 5); // Adjust priority as needed
 80010bc:	2105      	movs	r1, #5
 80010be:	201c      	movs	r0, #28
 80010c0:	f7ff f9e0 	bl	8000484 <__NVIC_SetPriority>

    // Enable the TIM2 counter
    TIM2->CR1 |= TIM_CR1_CEN;
 80010c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010ce:	f043 0301 	orr.w	r3, r3, #1
 80010d2:	6013      	str	r3, [r2, #0]
}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40021000 	.word	0x40021000

080010dc <TIM15_additional_configuration>:

void TIM15_additional_configuration(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
	TIM15->DIER |= TIM_DIER_CC1IE;
 80010e0:	4b10      	ldr	r3, [pc, #64]	; (8001124 <TIM15_additional_configuration+0x48>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	4a0f      	ldr	r2, [pc, #60]	; (8001124 <TIM15_additional_configuration+0x48>)
 80010e6:	f043 0302 	orr.w	r3, r3, #2
 80010ea:	60d3      	str	r3, [r2, #12]
	TIM15->DIER |= TIM_DIER_CC2IE;
 80010ec:	4b0d      	ldr	r3, [pc, #52]	; (8001124 <TIM15_additional_configuration+0x48>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	4a0c      	ldr	r2, [pc, #48]	; (8001124 <TIM15_additional_configuration+0x48>)
 80010f2:	f043 0304 	orr.w	r3, r3, #4
 80010f6:	60d3      	str	r3, [r2, #12]
	TIM15->DIER |= TIM_DIER_UIE; //UIE: Update interrupt enable
 80010f8:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <TIM15_additional_configuration+0x48>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	4a09      	ldr	r2, [pc, #36]	; (8001124 <TIM15_additional_configuration+0x48>)
 80010fe:	f043 0301 	orr.w	r3, r3, #1
 8001102:	60d3      	str	r3, [r2, #12]

    // Enable the TIM15 interrupt
    NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001104:	2018      	movs	r0, #24
 8001106:	f7ff f99f 	bl	8000448 <__NVIC_EnableIRQ>
    // Set priority for the TIM15 interrupt
    NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 5);
 800110a:	2105      	movs	r1, #5
 800110c:	2018      	movs	r0, #24
 800110e:	f7ff f9b9 	bl	8000484 <__NVIC_SetPriority>

	TIM15->CR1 |= TIM_CR1_CEN;
 8001112:	4b04      	ldr	r3, [pc, #16]	; (8001124 <TIM15_additional_configuration+0x48>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a03      	ldr	r2, [pc, #12]	; (8001124 <TIM15_additional_configuration+0x48>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	6013      	str	r3, [r2, #0]
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40014000 	.word	0x40014000

08001128 <TIM16_additional_configuration>:

void TIM16_additional_configuration(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
	TIM16->DIER |= TIM_DIER_UIE; //UIE: Update interrupt enable
 800112c:	4b05      	ldr	r3, [pc, #20]	; (8001144 <TIM16_additional_configuration+0x1c>)
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	4a04      	ldr	r2, [pc, #16]	; (8001144 <TIM16_additional_configuration+0x1c>)
 8001132:	f043 0301 	orr.w	r3, r3, #1
 8001136:	60d3      	str	r3, [r2, #12]
//	TIM16->CR1 |= TIM_CR1_CEN;
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	40014400 	.word	0x40014400

08001148 <TIM17_additional_configuration>:

void TIM17_additional_configuration(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
	TIM17->DIER |= TIM_DIER_UIE; //UIE: Update interrupt enable
 800114c:	4b08      	ldr	r3, [pc, #32]	; (8001170 <TIM17_additional_configuration+0x28>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	4a07      	ldr	r2, [pc, #28]	; (8001170 <TIM17_additional_configuration+0x28>)
 8001152:	f043 0301 	orr.w	r3, r3, #1
 8001156:	60d3      	str	r3, [r2, #12]
	TIM17->CR1 |= TIM_CR1_CEN;
 8001158:	4b05      	ldr	r3, [pc, #20]	; (8001170 <TIM17_additional_configuration+0x28>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a04      	ldr	r2, [pc, #16]	; (8001170 <TIM17_additional_configuration+0x28>)
 800115e:	f043 0301 	orr.w	r3, r3, #1
 8001162:	6013      	str	r3, [r2, #0]
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	40014800 	.word	0x40014800

08001174 <USART3_additional_configuration>:

void USART3_additional_configuration(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
	//DMA configuration for UART3
	RCC->AHBENR |= RCC_AHBENR_DMA1EN; // Enable the DMA1 clock
 8001178:	4b41      	ldr	r3, [pc, #260]	; (8001280 <USART3_additional_configuration+0x10c>)
 800117a:	695b      	ldr	r3, [r3, #20]
 800117c:	4a40      	ldr	r2, [pc, #256]	; (8001280 <USART3_additional_configuration+0x10c>)
 800117e:	f043 0301 	orr.w	r3, r3, #1
 8001182:	6153      	str	r3, [r2, #20]

	DMA1_Channel3->CCR &= ~DMA_CCR_EN;
 8001184:	4b3f      	ldr	r3, [pc, #252]	; (8001284 <USART3_additional_configuration+0x110>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a3e      	ldr	r2, [pc, #248]	; (8001284 <USART3_additional_configuration+0x110>)
 800118a:	f023 0301 	bic.w	r3, r3, #1
 800118e:	6013      	str	r3, [r2, #0]

	DMA1_Channel3->CCR |= DMA_CCR_MINC;
 8001190:	4b3c      	ldr	r3, [pc, #240]	; (8001284 <USART3_additional_configuration+0x110>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a3b      	ldr	r2, [pc, #236]	; (8001284 <USART3_additional_configuration+0x110>)
 8001196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800119a:	6013      	str	r3, [r2, #0]
	DMA1_Channel3->CCR |= DMA_CCR_CIRC;
 800119c:	4b39      	ldr	r3, [pc, #228]	; (8001284 <USART3_additional_configuration+0x110>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a38      	ldr	r2, [pc, #224]	; (8001284 <USART3_additional_configuration+0x110>)
 80011a2:	f043 0320 	orr.w	r3, r3, #32
 80011a6:	6013      	str	r3, [r2, #0]
//		DMA1_Channel3->CCR |= DMA_CCR_TCIE;
	DMA1_Channel3->CCR &= ~DMA_CCR_TCIE;
 80011a8:	4b36      	ldr	r3, [pc, #216]	; (8001284 <USART3_additional_configuration+0x110>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a35      	ldr	r2, [pc, #212]	; (8001284 <USART3_additional_configuration+0x110>)
 80011ae:	f023 0302 	bic.w	r3, r3, #2
 80011b2:	6013      	str	r3, [r2, #0]
	DMA1_Channel3->CCR &= ~DMA_CCR_HTIE;
 80011b4:	4b33      	ldr	r3, [pc, #204]	; (8001284 <USART3_additional_configuration+0x110>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a32      	ldr	r2, [pc, #200]	; (8001284 <USART3_additional_configuration+0x110>)
 80011ba:	f023 0304 	bic.w	r3, r3, #4
 80011be:	6013      	str	r3, [r2, #0]
	DMA1_Channel3->CCR &= ~DMA_CCR_TEIE;
 80011c0:	4b30      	ldr	r3, [pc, #192]	; (8001284 <USART3_additional_configuration+0x110>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a2f      	ldr	r2, [pc, #188]	; (8001284 <USART3_additional_configuration+0x110>)
 80011c6:	f023 0308 	bic.w	r3, r3, #8
 80011ca:	6013      	str	r3, [r2, #0]

	DMA1_Channel3->CNDTR = ESPRXBUFFERSIZE;
 80011cc:	4b2d      	ldr	r3, [pc, #180]	; (8001284 <USART3_additional_configuration+0x110>)
 80011ce:	f240 12ff 	movw	r2, #511	; 0x1ff
 80011d2:	605a      	str	r2, [r3, #4]
	DMA1_Channel3->CPAR = (uint32_t)&(USART3->RDR);
 80011d4:	4b2b      	ldr	r3, [pc, #172]	; (8001284 <USART3_additional_configuration+0x110>)
 80011d6:	4a2c      	ldr	r2, [pc, #176]	; (8001288 <USART3_additional_configuration+0x114>)
 80011d8:	609a      	str	r2, [r3, #8]
	DMA1_Channel3->CMAR = (uint32_t)&rxBuffer[0];
 80011da:	4b2a      	ldr	r3, [pc, #168]	; (8001284 <USART3_additional_configuration+0x110>)
 80011dc:	4a2b      	ldr	r2, [pc, #172]	; (800128c <USART3_additional_configuration+0x118>)
 80011de:	60da      	str	r2, [r3, #12]

	USART3->CR3 &= ~USART_CR3_DMAR;
 80011e0:	4b2b      	ldr	r3, [pc, #172]	; (8001290 <USART3_additional_configuration+0x11c>)
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	4a2a      	ldr	r2, [pc, #168]	; (8001290 <USART3_additional_configuration+0x11c>)
 80011e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80011ea:	6093      	str	r3, [r2, #8]
	DMA1_Channel3->CCR &= ~DMA_CCR_EN;
 80011ec:	4b25      	ldr	r3, [pc, #148]	; (8001284 <USART3_additional_configuration+0x110>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a24      	ldr	r2, [pc, #144]	; (8001284 <USART3_additional_configuration+0x110>)
 80011f2:	f023 0301 	bic.w	r3, r3, #1
 80011f6:	6013      	str	r3, [r2, #0]

	DMA1_Channel2->CCR &= ~DMA_CCR_EN;
 80011f8:	4b26      	ldr	r3, [pc, #152]	; (8001294 <USART3_additional_configuration+0x120>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a25      	ldr	r2, [pc, #148]	; (8001294 <USART3_additional_configuration+0x120>)
 80011fe:	f023 0301 	bic.w	r3, r3, #1
 8001202:	6013      	str	r3, [r2, #0]

	DMA1_Channel2->CCR |= DMA_CCR_MINC;
 8001204:	4b23      	ldr	r3, [pc, #140]	; (8001294 <USART3_additional_configuration+0x120>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a22      	ldr	r2, [pc, #136]	; (8001294 <USART3_additional_configuration+0x120>)
 800120a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800120e:	6013      	str	r3, [r2, #0]
	DMA1_Channel2->CCR &= ~DMA_CCR_CIRC;
 8001210:	4b20      	ldr	r3, [pc, #128]	; (8001294 <USART3_additional_configuration+0x120>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a1f      	ldr	r2, [pc, #124]	; (8001294 <USART3_additional_configuration+0x120>)
 8001216:	f023 0320 	bic.w	r3, r3, #32
 800121a:	6013      	str	r3, [r2, #0]
	DMA1_Channel2->CCR |= DMA_CCR_DIR;
 800121c:	4b1d      	ldr	r3, [pc, #116]	; (8001294 <USART3_additional_configuration+0x120>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a1c      	ldr	r2, [pc, #112]	; (8001294 <USART3_additional_configuration+0x120>)
 8001222:	f043 0310 	orr.w	r3, r3, #16
 8001226:	6013      	str	r3, [r2, #0]
	DMA1_Channel2->CCR |= DMA_CCR_TCIE;
 8001228:	4b1a      	ldr	r3, [pc, #104]	; (8001294 <USART3_additional_configuration+0x120>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a19      	ldr	r2, [pc, #100]	; (8001294 <USART3_additional_configuration+0x120>)
 800122e:	f043 0302 	orr.w	r3, r3, #2
 8001232:	6013      	str	r3, [r2, #0]
	DMA1_Channel2->CCR &= ~DMA_CCR_HTIE;
 8001234:	4b17      	ldr	r3, [pc, #92]	; (8001294 <USART3_additional_configuration+0x120>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a16      	ldr	r2, [pc, #88]	; (8001294 <USART3_additional_configuration+0x120>)
 800123a:	f023 0304 	bic.w	r3, r3, #4
 800123e:	6013      	str	r3, [r2, #0]
	DMA1_Channel2->CCR &= ~DMA_CCR_TEIE;
 8001240:	4b14      	ldr	r3, [pc, #80]	; (8001294 <USART3_additional_configuration+0x120>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a13      	ldr	r2, [pc, #76]	; (8001294 <USART3_additional_configuration+0x120>)
 8001246:	f023 0308 	bic.w	r3, r3, #8
 800124a:	6013      	str	r3, [r2, #0]

	DMA1_Channel2->CNDTR = 0;
 800124c:	4b11      	ldr	r3, [pc, #68]	; (8001294 <USART3_additional_configuration+0x120>)
 800124e:	2200      	movs	r2, #0
 8001250:	605a      	str	r2, [r3, #4]
	DMA1_Channel2->CPAR = (uint32_t)&(USART3->TDR);
 8001252:	4b10      	ldr	r3, [pc, #64]	; (8001294 <USART3_additional_configuration+0x120>)
 8001254:	4a10      	ldr	r2, [pc, #64]	; (8001298 <USART3_additional_configuration+0x124>)
 8001256:	609a      	str	r2, [r3, #8]
	DMA1_Channel2->CMAR = (uint32_t)&txBuffer[0];
 8001258:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <USART3_additional_configuration+0x120>)
 800125a:	4a10      	ldr	r2, [pc, #64]	; (800129c <USART3_additional_configuration+0x128>)
 800125c:	60da      	str	r2, [r3, #12]

	USART3->CR3 &= ~USART_CR3_DMAT;
 800125e:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <USART3_additional_configuration+0x11c>)
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	4a0b      	ldr	r2, [pc, #44]	; (8001290 <USART3_additional_configuration+0x11c>)
 8001264:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001268:	6093      	str	r3, [r2, #8]
	DMA1_Channel2->CCR &= ~DMA_CCR_EN;
 800126a:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <USART3_additional_configuration+0x120>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a09      	ldr	r2, [pc, #36]	; (8001294 <USART3_additional_configuration+0x120>)
 8001270:	f023 0301 	bic.w	r3, r3, #1
 8001274:	6013      	str	r3, [r2, #0]
}
 8001276:	bf00      	nop
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	40021000 	.word	0x40021000
 8001284:	40020030 	.word	0x40020030
 8001288:	40004824 	.word	0x40004824
 800128c:	20000adc 	.word	0x20000adc
 8001290:	40004800 	.word	0x40004800
 8001294:	4002001c 	.word	0x4002001c
 8001298:	40004828 	.word	0x40004828
 800129c:	200008dc 	.word	0x200008dc

080012a0 <timerForSendDataCallback>:

void timerForSendDataCallback(TimerHandle_t xTimer)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
	xEventGroupSetBits(timerFdsEventGroup, 0x1);
 80012a8:	4b04      	ldr	r3, [pc, #16]	; (80012bc <timerForSendDataCallback+0x1c>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2101      	movs	r1, #1
 80012ae:	4618      	mov	r0, r3
 80012b0:	f005 fe16 	bl	8006ee0 <xEventGroupSetBits>
}
 80012b4:	bf00      	nop
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20000ce4 	.word	0x20000ce4

080012c0 <psMeasure>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_psMeasure */
void psMeasure(void const * argument)
{
 80012c0:	b590      	push	{r4, r7, lr}
 80012c2:	b08b      	sub	sp, #44	; 0x2c
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	char measureResult[30];
	memset(measureResult, ' ', sizeof(measureResult));
 80012c8:	f107 0308 	add.w	r3, r7, #8
 80012cc:	221e      	movs	r2, #30
 80012ce:	2120      	movs	r1, #32
 80012d0:	4618      	mov	r0, r3
 80012d2:	f008 fb4b 	bl	800996c <memset>
  /* Infinite loop */
  for(;;)
  {
    osDelay(8);
 80012d6:	2008      	movs	r0, #8
 80012d8:	f005 fd78 	bl	8006dcc <osDelay>

    for(uint8_t i = 0; i < (sizeof(batteryVoltage)/sizeof(batteryVoltage[0])); i++) {
 80012dc:	2300      	movs	r3, #0
 80012de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80012e2:	e010      	b.n	8001306 <psMeasure+0x46>
    	avrBatVoltage += batteryVoltage[i];
 80012e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012e8:	4a4a      	ldr	r2, [pc, #296]	; (8001414 <psMeasure+0x154>)
 80012ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012ee:	b29a      	uxth	r2, r3
 80012f0:	4b49      	ldr	r3, [pc, #292]	; (8001418 <psMeasure+0x158>)
 80012f2:	881b      	ldrh	r3, [r3, #0]
 80012f4:	4413      	add	r3, r2
 80012f6:	b29a      	uxth	r2, r3
 80012f8:	4b47      	ldr	r3, [pc, #284]	; (8001418 <psMeasure+0x158>)
 80012fa:	801a      	strh	r2, [r3, #0]
    for(uint8_t i = 0; i < (sizeof(batteryVoltage)/sizeof(batteryVoltage[0])); i++) {
 80012fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001300:	3301      	adds	r3, #1
 8001302:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001306:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800130a:	2b09      	cmp	r3, #9
 800130c:	d9ea      	bls.n	80012e4 <psMeasure+0x24>
    }
    avrBatVoltage = avrBatVoltage / (sizeof(batteryVoltage)/sizeof(batteryVoltage[0]));
 800130e:	4b42      	ldr	r3, [pc, #264]	; (8001418 <psMeasure+0x158>)
 8001310:	881b      	ldrh	r3, [r3, #0]
 8001312:	4a42      	ldr	r2, [pc, #264]	; (800141c <psMeasure+0x15c>)
 8001314:	fba2 2303 	umull	r2, r3, r2, r3
 8001318:	08db      	lsrs	r3, r3, #3
 800131a:	b29a      	uxth	r2, r3
 800131c:	4b3e      	ldr	r3, [pc, #248]	; (8001418 <psMeasure+0x158>)
 800131e:	801a      	strh	r2, [r3, #0]
    if(avrBatVoltage > BATMAXV) {
 8001320:	4b3d      	ldr	r3, [pc, #244]	; (8001418 <psMeasure+0x158>)
 8001322:	881b      	ldrh	r3, [r3, #0]
 8001324:	f640 0298 	movw	r2, #2200	; 0x898
 8001328:	4293      	cmp	r3, r2
 800132a:	d92a      	bls.n	8001382 <psMeasure+0xc2>
    	memset(measureResult, ' ', sizeof(measureResult));
 800132c:	f107 0308 	add.w	r3, r7, #8
 8001330:	221e      	movs	r2, #30
 8001332:	2120      	movs	r1, #32
 8001334:	4618      	mov	r0, r3
 8001336:	f008 fb19 	bl	800996c <memset>
    	strcpy(measureResult, "Voltage > MAX");
 800133a:	f107 0308 	add.w	r3, r7, #8
 800133e:	4a38      	ldr	r2, [pc, #224]	; (8001420 <psMeasure+0x160>)
 8001340:	461c      	mov	r4, r3
 8001342:	4613      	mov	r3, r2
 8001344:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001346:	c407      	stmia	r4!, {r0, r1, r2}
 8001348:	8023      	strh	r3, [r4, #0]
    	xEventGroupClearBits(pc13EventGroup, 0xFFFFFF);
 800134a:	4b36      	ldr	r3, [pc, #216]	; (8001424 <psMeasure+0x164>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8001352:	4618      	mov	r0, r3
 8001354:	f005 fd68 	bl	8006e28 <xEventGroupClearBits>
    	xEventGroupSetBits(pc13EventGroup, OVERVOLTAGEONLED);
 8001358:	4b32      	ldr	r3, [pc, #200]	; (8001424 <psMeasure+0x164>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2101      	movs	r1, #1
 800135e:	4618      	mov	r0, r3
 8001360:	f005 fdbe 	bl	8006ee0 <xEventGroupSetBits>
    	xEventGroupClearBits(pc14EventGroup, 0xFFFFFF);
 8001364:	4b30      	ldr	r3, [pc, #192]	; (8001428 <psMeasure+0x168>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800136c:	4618      	mov	r0, r3
 800136e:	f005 fd5b 	bl	8006e28 <xEventGroupClearBits>
    	xEventGroupSetBits(pc14EventGroup, OVERVOLTAGEONLED);
 8001372:	4b2d      	ldr	r3, [pc, #180]	; (8001428 <psMeasure+0x168>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2101      	movs	r1, #1
 8001378:	4618      	mov	r0, r3
 800137a:	f005 fdb1 	bl	8006ee0 <xEventGroupSetBits>
    	__asm__ volatile("NOP");
 800137e:	bf00      	nop
 8001380:	e7a9      	b.n	80012d6 <psMeasure+0x16>
    } else if(avrBatVoltage < BATMINV) {
 8001382:	4b25      	ldr	r3, [pc, #148]	; (8001418 <psMeasure+0x158>)
 8001384:	881b      	ldrh	r3, [r3, #0]
 8001386:	f640 023d 	movw	r2, #2109	; 0x83d
 800138a:	4293      	cmp	r3, r2
 800138c:	d82a      	bhi.n	80013e4 <psMeasure+0x124>
    	memset(measureResult, ' ', sizeof(measureResult));
 800138e:	f107 0308 	add.w	r3, r7, #8
 8001392:	221e      	movs	r2, #30
 8001394:	2120      	movs	r1, #32
 8001396:	4618      	mov	r0, r3
 8001398:	f008 fae8 	bl	800996c <memset>
    	strcpy(measureResult, "Voltage < MIN");
 800139c:	f107 0308 	add.w	r3, r7, #8
 80013a0:	4a22      	ldr	r2, [pc, #136]	; (800142c <psMeasure+0x16c>)
 80013a2:	461c      	mov	r4, r3
 80013a4:	4613      	mov	r3, r2
 80013a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013a8:	c407      	stmia	r4!, {r0, r1, r2}
 80013aa:	8023      	strh	r3, [r4, #0]
    	xEventGroupClearBits(pc13EventGroup, 0xFFFFFF);
 80013ac:	4b1d      	ldr	r3, [pc, #116]	; (8001424 <psMeasure+0x164>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80013b4:	4618      	mov	r0, r3
 80013b6:	f005 fd37 	bl	8006e28 <xEventGroupClearBits>
    	xEventGroupSetBits(pc13EventGroup, UNDERVOLTAGEONLED);
 80013ba:	4b1a      	ldr	r3, [pc, #104]	; (8001424 <psMeasure+0x164>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2102      	movs	r1, #2
 80013c0:	4618      	mov	r0, r3
 80013c2:	f005 fd8d 	bl	8006ee0 <xEventGroupSetBits>
    	xEventGroupClearBits(pc14EventGroup, 0xFFFFFF);
 80013c6:	4b18      	ldr	r3, [pc, #96]	; (8001428 <psMeasure+0x168>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80013ce:	4618      	mov	r0, r3
 80013d0:	f005 fd2a 	bl	8006e28 <xEventGroupClearBits>
    	xEventGroupSetBits(pc14EventGroup, UNDERVOLTAGEONLED);
 80013d4:	4b14      	ldr	r3, [pc, #80]	; (8001428 <psMeasure+0x168>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2102      	movs	r1, #2
 80013da:	4618      	mov	r0, r3
 80013dc:	f005 fd80 	bl	8006ee0 <xEventGroupSetBits>
    	__asm__ volatile("NOP");
 80013e0:	bf00      	nop
 80013e2:	e778      	b.n	80012d6 <psMeasure+0x16>
    } else {
    	memset(measureResult, ' ', sizeof(measureResult));
 80013e4:	f107 0308 	add.w	r3, r7, #8
 80013e8:	221e      	movs	r2, #30
 80013ea:	2120      	movs	r1, #32
 80013ec:	4618      	mov	r0, r3
 80013ee:	f008 fabd 	bl	800996c <memset>
    	xEventGroupClearBits(pc13EventGroup, 0xFFFFFF);
 80013f2:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <psMeasure+0x164>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80013fa:	4618      	mov	r0, r3
 80013fc:	f005 fd14 	bl	8006e28 <xEventGroupClearBits>
    	xEventGroupClearBits(pc14EventGroup, 0xFFFFFF);
 8001400:	4b09      	ldr	r3, [pc, #36]	; (8001428 <psMeasure+0x168>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8001408:	4618      	mov	r0, r3
 800140a:	f005 fd0d 	bl	8006e28 <xEventGroupClearBits>
    	__asm__ volatile("NOP");
 800140e:	bf00      	nop
    osDelay(8);
 8001410:	e761      	b.n	80012d6 <psMeasure+0x16>
 8001412:	bf00      	nop
 8001414:	20000874 	.word	0x20000874
 8001418:	20000888 	.word	0x20000888
 800141c:	cccccccd 	.word	0xcccccccd
 8001420:	0800a3f0 	.word	0x0800a3f0
 8001424:	2000088c 	.word	0x2000088c
 8001428:	20000890 	.word	0x20000890
 800142c:	0800a400 	.word	0x0800a400

08001430 <pc13LedCntrl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pc13LedCntrl */
void pc13LedCntrl(void const * argument)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN pc13LedCntrl */
	EventBits_t eventBits;
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001438:	2001      	movs	r0, #1
 800143a:	f005 fcc7 	bl	8006dcc <osDelay>
    eventBits = xEventGroupGetBits(pc13EventGroup);
 800143e:	4b18      	ldr	r3, [pc, #96]	; (80014a0 <pc13LedCntrl+0x70>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2100      	movs	r1, #0
 8001444:	4618      	mov	r0, r3
 8001446:	f005 fcef 	bl	8006e28 <xEventGroupClearBits>
 800144a:	60f8      	str	r0, [r7, #12]
    switch (eventBits) {
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d003      	beq.n	800145a <pc13LedCntrl+0x2a>
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	2b02      	cmp	r3, #2
 8001456:	d00b      	beq.n	8001470 <pc13LedCntrl+0x40>
 8001458:	e015      	b.n	8001486 <pc13LedCntrl+0x56>
		case OVERVOLTAGEONLED:
			osDelay(100);
 800145a:	2064      	movs	r0, #100	; 0x64
 800145c:	f005 fcb6 	bl	8006dcc <osDelay>
			GPIOC->ODR ^= GPIO_ODR_13;
 8001460:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <pc13LedCntrl+0x74>)
 8001462:	695b      	ldr	r3, [r3, #20]
 8001464:	4a0f      	ldr	r2, [pc, #60]	; (80014a4 <pc13LedCntrl+0x74>)
 8001466:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800146a:	6153      	str	r3, [r2, #20]
			__asm__ volatile("NOP");
 800146c:	bf00      	nop
			break;
 800146e:	e015      	b.n	800149c <pc13LedCntrl+0x6c>
		case UNDERVOLTAGEONLED:
			osDelay(200);
 8001470:	20c8      	movs	r0, #200	; 0xc8
 8001472:	f005 fcab 	bl	8006dcc <osDelay>
			GPIOC->ODR ^= GPIO_ODR_13;
 8001476:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <pc13LedCntrl+0x74>)
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	4a0a      	ldr	r2, [pc, #40]	; (80014a4 <pc13LedCntrl+0x74>)
 800147c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001480:	6153      	str	r3, [r2, #20]
			__asm__ volatile("NOP");
 8001482:	bf00      	nop
			break;
 8001484:	e00a      	b.n	800149c <pc13LedCntrl+0x6c>
		default:
			GPIOC->ODR &= ~GPIO_ODR_13;
 8001486:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <pc13LedCntrl+0x74>)
 8001488:	695b      	ldr	r3, [r3, #20]
 800148a:	4a06      	ldr	r2, [pc, #24]	; (80014a4 <pc13LedCntrl+0x74>)
 800148c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001490:	6153      	str	r3, [r2, #20]
			osDelay(12);
 8001492:	200c      	movs	r0, #12
 8001494:	f005 fc9a 	bl	8006dcc <osDelay>
			__asm__ volatile("NOP");
 8001498:	bf00      	nop
			break;
 800149a:	bf00      	nop
    osDelay(1);
 800149c:	e7cc      	b.n	8001438 <pc13LedCntrl+0x8>
 800149e:	bf00      	nop
 80014a0:	2000088c 	.word	0x2000088c
 80014a4:	48000800 	.word	0x48000800

080014a8 <pc14LedCntrl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pc14LedCntrl */
void pc14LedCntrl(void const * argument)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN pc14LedCntrl */
	EventBits_t eventBits;
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80014b0:	2001      	movs	r0, #1
 80014b2:	f005 fc8b 	bl	8006dcc <osDelay>
    eventBits = xEventGroupGetBits(pc14EventGroup);
 80014b6:	4b18      	ldr	r3, [pc, #96]	; (8001518 <pc14LedCntrl+0x70>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2100      	movs	r1, #0
 80014bc:	4618      	mov	r0, r3
 80014be:	f005 fcb3 	bl	8006e28 <xEventGroupClearBits>
 80014c2:	60f8      	str	r0, [r7, #12]
    switch (eventBits) {
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d003      	beq.n	80014d2 <pc14LedCntrl+0x2a>
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d00b      	beq.n	80014e8 <pc14LedCntrl+0x40>
 80014d0:	e015      	b.n	80014fe <pc14LedCntrl+0x56>
		case OVERVOLTAGEONLED:
			osDelay(100);
 80014d2:	2064      	movs	r0, #100	; 0x64
 80014d4:	f005 fc7a 	bl	8006dcc <osDelay>
			GPIOC->ODR ^= GPIO_ODR_14;
 80014d8:	4b10      	ldr	r3, [pc, #64]	; (800151c <pc14LedCntrl+0x74>)
 80014da:	695b      	ldr	r3, [r3, #20]
 80014dc:	4a0f      	ldr	r2, [pc, #60]	; (800151c <pc14LedCntrl+0x74>)
 80014de:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 80014e2:	6153      	str	r3, [r2, #20]
			__asm__ volatile("NOP");
 80014e4:	bf00      	nop
			break;
 80014e6:	e015      	b.n	8001514 <pc14LedCntrl+0x6c>
		case UNDERVOLTAGEONLED:
			osDelay(200);
 80014e8:	20c8      	movs	r0, #200	; 0xc8
 80014ea:	f005 fc6f 	bl	8006dcc <osDelay>
			GPIOC->ODR ^= GPIO_ODR_14;
 80014ee:	4b0b      	ldr	r3, [pc, #44]	; (800151c <pc14LedCntrl+0x74>)
 80014f0:	695b      	ldr	r3, [r3, #20]
 80014f2:	4a0a      	ldr	r2, [pc, #40]	; (800151c <pc14LedCntrl+0x74>)
 80014f4:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 80014f8:	6153      	str	r3, [r2, #20]
			__asm__ volatile("NOP");
 80014fa:	bf00      	nop
			break;
 80014fc:	e00a      	b.n	8001514 <pc14LedCntrl+0x6c>
		default:
			GPIOC->ODR &= ~GPIO_ODR_14;
 80014fe:	4b07      	ldr	r3, [pc, #28]	; (800151c <pc14LedCntrl+0x74>)
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	4a06      	ldr	r2, [pc, #24]	; (800151c <pc14LedCntrl+0x74>)
 8001504:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001508:	6153      	str	r3, [r2, #20]
			osDelay(12);
 800150a:	200c      	movs	r0, #12
 800150c:	f005 fc5e 	bl	8006dcc <osDelay>
			__asm__ volatile("NOP");
 8001510:	bf00      	nop
			break;
 8001512:	bf00      	nop
    osDelay(1);
 8001514:	e7cc      	b.n	80014b0 <pc14LedCntrl+0x8>
 8001516:	bf00      	nop
 8001518:	20000890 	.word	0x20000890
 800151c:	48000800 	.word	0x48000800

08001520 <espCommunication>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_espCommunication */
void espCommunication(void const * argument)
{
 8001520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001524:	b09d      	sub	sp, #116	; 0x74
 8001526:	af06      	add	r7, sp, #24
 8001528:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN espCommunication */
	vTaskDelay( pdMS_TO_TICKS( 100 ) );
 800152a:	2064      	movs	r0, #100	; 0x64
 800152c:	f006 fc84 	bl	8007e38 <vTaskDelay>
	taskENTER_CRITICAL();
 8001530:	f007 ff00 	bl	8009334 <vPortEnterCritical>
	  GPIOB->ODR |= (1<<1);
 8001534:	4bb7      	ldr	r3, [pc, #732]	; (8001814 <espCommunication+0x2f4>)
 8001536:	695b      	ldr	r3, [r3, #20]
 8001538:	4ab6      	ldr	r2, [pc, #728]	; (8001814 <espCommunication+0x2f4>)
 800153a:	f043 0302 	orr.w	r3, r3, #2
 800153e:	6153      	str	r3, [r2, #20]
	  GPIOB->ODR |= (1<<2);
 8001540:	4bb4      	ldr	r3, [pc, #720]	; (8001814 <espCommunication+0x2f4>)
 8001542:	695b      	ldr	r3, [r3, #20]
 8001544:	4ab3      	ldr	r2, [pc, #716]	; (8001814 <espCommunication+0x2f4>)
 8001546:	f043 0304 	orr.w	r3, r3, #4
 800154a:	6153      	str	r3, [r2, #20]
	  txBuffer[0] = 'A';
 800154c:	4bb2      	ldr	r3, [pc, #712]	; (8001818 <espCommunication+0x2f8>)
 800154e:	2241      	movs	r2, #65	; 0x41
 8001550:	701a      	strb	r2, [r3, #0]
	  txBuffer[1] = 'T';
 8001552:	4bb1      	ldr	r3, [pc, #708]	; (8001818 <espCommunication+0x2f8>)
 8001554:	2254      	movs	r2, #84	; 0x54
 8001556:	705a      	strb	r2, [r3, #1]
	  txBuffer[2] = '\r';
 8001558:	4baf      	ldr	r3, [pc, #700]	; (8001818 <espCommunication+0x2f8>)
 800155a:	220d      	movs	r2, #13
 800155c:	709a      	strb	r2, [r3, #2]
	  txBuffer[3] = '\n';
 800155e:	4bae      	ldr	r3, [pc, #696]	; (8001818 <espCommunication+0x2f8>)
 8001560:	220a      	movs	r2, #10
 8001562:	70da      	strb	r2, [r3, #3]
	  char controlAnsw[] = "AT\r\r\n\r\nOK\r\n";
 8001564:	4aad      	ldr	r2, [pc, #692]	; (800181c <espCommunication+0x2fc>)
 8001566:	f107 031c 	add.w	r3, r7, #28
 800156a:	ca07      	ldmia	r2, {r0, r1, r2}
 800156c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	  while(strcmp(rxBuffer, controlAnsw) != 0) {
 8001570:	e023      	b.n	80015ba <espCommunication+0x9a>
		  for(uint16_t i = 0; i < sizeof(rxBuffer); i++) {
 8001572:	2300      	movs	r3, #0
 8001574:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8001578:	e009      	b.n	800158e <espCommunication+0x6e>
			  rxBuffer[i] = 0;
 800157a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800157e:	4aa8      	ldr	r2, [pc, #672]	; (8001820 <espCommunication+0x300>)
 8001580:	2100      	movs	r1, #0
 8001582:	54d1      	strb	r1, [r2, r3]
		  for(uint16_t i = 0; i < sizeof(rxBuffer); i++) {
 8001584:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001588:	3301      	adds	r3, #1
 800158a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800158e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001592:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8001596:	d9f0      	bls.n	800157a <espCommunication+0x5a>
		  }
		  HAL_UART_Transmit(&huart3, (uint8_t*)txBuffer, 4, 250);
 8001598:	23fa      	movs	r3, #250	; 0xfa
 800159a:	2204      	movs	r2, #4
 800159c:	499e      	ldr	r1, [pc, #632]	; (8001818 <espCommunication+0x2f8>)
 800159e:	48a1      	ldr	r0, [pc, #644]	; (8001824 <espCommunication+0x304>)
 80015a0:	f004 ff0a 	bl	80063b8 <HAL_UART_Transmit>
		  HAL_UART_Receive(&huart3, (uint8_t*)rxBuffer, sizeof(rxBuffer), 250);
 80015a4:	23fa      	movs	r3, #250	; 0xfa
 80015a6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80015aa:	499d      	ldr	r1, [pc, #628]	; (8001820 <espCommunication+0x300>)
 80015ac:	489d      	ldr	r0, [pc, #628]	; (8001824 <espCommunication+0x304>)
 80015ae:	f004 ff8d 	bl	80064cc <HAL_UART_Receive>
		  vTaskDelay( pdMS_TO_TICKS( 100 ) );
 80015b2:	2064      	movs	r0, #100	; 0x64
 80015b4:	f006 fc40 	bl	8007e38 <vTaskDelay>
		  __asm__ volatile("NOP");
 80015b8:	bf00      	nop
	  while(strcmp(rxBuffer, controlAnsw) != 0) {
 80015ba:	f107 031c 	add.w	r3, r7, #28
 80015be:	4619      	mov	r1, r3
 80015c0:	4897      	ldr	r0, [pc, #604]	; (8001820 <espCommunication+0x300>)
 80015c2:	f7fe fe05 	bl	80001d0 <strcmp>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d1d2      	bne.n	8001572 <espCommunication+0x52>
	  }

	  sendATCommand(&huart3, "AT+CWMODE_CUR=1\r\n", 17 , 250);
 80015cc:	23fa      	movs	r3, #250	; 0xfa
 80015ce:	2211      	movs	r2, #17
 80015d0:	4995      	ldr	r1, [pc, #596]	; (8001828 <espCommunication+0x308>)
 80015d2:	4894      	ldr	r0, [pc, #592]	; (8001824 <espCommunication+0x304>)
 80015d4:	f7fe fe64 	bl	80002a0 <sendATCommand>
	  receiveAnswer(&huart3, rxBuffer, sizeof(rxBuffer), 250);
 80015d8:	23fa      	movs	r3, #250	; 0xfa
 80015da:	f240 12ff 	movw	r2, #511	; 0x1ff
 80015de:	4990      	ldr	r1, [pc, #576]	; (8001820 <espCommunication+0x300>)
 80015e0:	4890      	ldr	r0, [pc, #576]	; (8001824 <espCommunication+0x304>)
 80015e2:	f7fe fe81 	bl	80002e8 <receiveAnswer>

	  memset(txBuffer, '\0', sizeof(txBuffer));
 80015e6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80015ea:	2100      	movs	r1, #0
 80015ec:	488a      	ldr	r0, [pc, #552]	; (8001818 <espCommunication+0x2f8>)
 80015ee:	f008 f9bd 	bl	800996c <memset>
	  strcpy(txBuffer, "AT+CWJAP_CUR=\"RedmiGiGidra\",\"DimaDimaDimon\"\r\n");
 80015f2:	4a89      	ldr	r2, [pc, #548]	; (8001818 <espCommunication+0x2f8>)
 80015f4:	4b8d      	ldr	r3, [pc, #564]	; (800182c <espCommunication+0x30c>)
 80015f6:	4614      	mov	r4, r2
 80015f8:	461d      	mov	r5, r3
 80015fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001600:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001602:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001606:	c407      	stmia	r4!, {r0, r1, r2}
 8001608:	8023      	strh	r3, [r4, #0]
	  sendATCommand(&huart3, txBuffer, sizeof(txBuffer), 1000);
 800160a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800160e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8001612:	4981      	ldr	r1, [pc, #516]	; (8001818 <espCommunication+0x2f8>)
 8001614:	4883      	ldr	r0, [pc, #524]	; (8001824 <espCommunication+0x304>)
 8001616:	f7fe fe43 	bl	80002a0 <sendATCommand>
	  receiveAnswer(&huart3, rxBuffer, sizeof(rxBuffer), 10000);
 800161a:	f242 7310 	movw	r3, #10000	; 0x2710
 800161e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8001622:	497f      	ldr	r1, [pc, #508]	; (8001820 <espCommunication+0x300>)
 8001624:	487f      	ldr	r0, [pc, #508]	; (8001824 <espCommunication+0x304>)
 8001626:	f7fe fe5f 	bl	80002e8 <receiveAnswer>

	  taskEXIT_CRITICAL();
 800162a:	f007 feb3 	bl	8009394 <vPortExitCritical>

	  memset(rxBuffer, '\0', sizeof(rxBuffer));
 800162e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8001632:	2100      	movs	r1, #0
 8001634:	487a      	ldr	r0, [pc, #488]	; (8001820 <espCommunication+0x300>)
 8001636:	f008 f999 	bl	800996c <memset>
	  USART3->CR3 |= USART_CR3_DMAR;
 800163a:	4b7d      	ldr	r3, [pc, #500]	; (8001830 <espCommunication+0x310>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	4a7c      	ldr	r2, [pc, #496]	; (8001830 <espCommunication+0x310>)
 8001640:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001644:	6093      	str	r3, [r2, #8]
	  DMA1_Channel3->CCR |= DMA_CCR_EN; //Starting continuous DMA on RX
 8001646:	4b7b      	ldr	r3, [pc, #492]	; (8001834 <espCommunication+0x314>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a7a      	ldr	r2, [pc, #488]	; (8001834 <espCommunication+0x314>)
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	6013      	str	r3, [r2, #0]

	  vTaskDelay( pdMS_TO_TICKS( 2000 ) );
 8001652:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001656:	f006 fbef 	bl	8007e38 <vTaskDelay>

	  sprintf(txBuffer, "ATE0\r\n");
 800165a:	4977      	ldr	r1, [pc, #476]	; (8001838 <espCommunication+0x318>)
 800165c:	486e      	ldr	r0, [pc, #440]	; (8001818 <espCommunication+0x2f8>)
 800165e:	f008 f965 	bl	800992c <siprintf>
	  sendATCommand(&huart3, txBuffer, strlen(txBuffer), 250);
 8001662:	486d      	ldr	r0, [pc, #436]	; (8001818 <espCommunication+0x2f8>)
 8001664:	f7fe fdbe 	bl	80001e4 <strlen>
 8001668:	4603      	mov	r3, r0
 800166a:	461a      	mov	r2, r3
 800166c:	23fa      	movs	r3, #250	; 0xfa
 800166e:	496a      	ldr	r1, [pc, #424]	; (8001818 <espCommunication+0x2f8>)
 8001670:	486c      	ldr	r0, [pc, #432]	; (8001824 <espCommunication+0x304>)
 8001672:	f7fe fe15 	bl	80002a0 <sendATCommand>
	  vTaskDelay( pdMS_TO_TICKS( 100 ) );
 8001676:	2064      	movs	r0, #100	; 0x64
 8001678:	f006 fbde 	bl	8007e38 <vTaskDelay>

	  memset(txBuffer, '\0', sizeof(txBuffer));
 800167c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8001680:	2100      	movs	r1, #0
 8001682:	4865      	ldr	r0, [pc, #404]	; (8001818 <espCommunication+0x2f8>)
 8001684:	f008 f972 	bl	800996c <memset>
	  strcpy(txBuffer, "AT+CIPCLOSE\r\n");
 8001688:	4a63      	ldr	r2, [pc, #396]	; (8001818 <espCommunication+0x2f8>)
 800168a:	4b6c      	ldr	r3, [pc, #432]	; (800183c <espCommunication+0x31c>)
 800168c:	4614      	mov	r4, r2
 800168e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001690:	c407      	stmia	r4!, {r0, r1, r2}
 8001692:	8023      	strh	r3, [r4, #0]
	  sendATCommand(&huart3, txBuffer, sizeof(txBuffer), 250);
 8001694:	23fa      	movs	r3, #250	; 0xfa
 8001696:	f240 12ff 	movw	r2, #511	; 0x1ff
 800169a:	495f      	ldr	r1, [pc, #380]	; (8001818 <espCommunication+0x2f8>)
 800169c:	4861      	ldr	r0, [pc, #388]	; (8001824 <espCommunication+0x304>)
 800169e:	f7fe fdff 	bl	80002a0 <sendATCommand>
	  vTaskDelay( pdMS_TO_TICKS( 250 ) );
 80016a2:	20fa      	movs	r0, #250	; 0xfa
 80016a4:	f006 fbc8 	bl	8007e38 <vTaskDelay>

	  memset(txBuffer, '\0', sizeof(txBuffer));
 80016a8:	f240 12ff 	movw	r2, #511	; 0x1ff
 80016ac:	2100      	movs	r1, #0
 80016ae:	485a      	ldr	r0, [pc, #360]	; (8001818 <espCommunication+0x2f8>)
 80016b0:	f008 f95c 	bl	800996c <memset>
	  strcpy(txBuffer, "AT+CIPSTART=\"TCP\",\"192.168.137.1\",8080\r\n");
 80016b4:	4a58      	ldr	r2, [pc, #352]	; (8001818 <espCommunication+0x2f8>)
 80016b6:	4b62      	ldr	r3, [pc, #392]	; (8001840 <espCommunication+0x320>)
 80016b8:	4614      	mov	r4, r2
 80016ba:	461d      	mov	r5, r3
 80016bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016c8:	c403      	stmia	r4!, {r0, r1}
 80016ca:	7022      	strb	r2, [r4, #0]
	  sendATCommand(&huart3, txBuffer, sizeof(txBuffer), 250);
 80016cc:	23fa      	movs	r3, #250	; 0xfa
 80016ce:	f240 12ff 	movw	r2, #511	; 0x1ff
 80016d2:	4951      	ldr	r1, [pc, #324]	; (8001818 <espCommunication+0x2f8>)
 80016d4:	4853      	ldr	r0, [pc, #332]	; (8001824 <espCommunication+0x304>)
 80016d6:	f7fe fde3 	bl	80002a0 <sendATCommand>
	  vTaskDelay( pdMS_TO_TICKS( 40 ) );
 80016da:	2028      	movs	r0, #40	; 0x28
 80016dc:	f006 fbac 	bl	8007e38 <vTaskDelay>

	  memset(txBuffer, '\0', sizeof(txBuffer));
 80016e0:	f240 12ff 	movw	r2, #511	; 0x1ff
 80016e4:	2100      	movs	r1, #0
 80016e6:	484c      	ldr	r0, [pc, #304]	; (8001818 <espCommunication+0x2f8>)
 80016e8:	f008 f940 	bl	800996c <memset>
		// Create the entire GET request string
		sprintf(txBuffer, "GET /robot HTTP/1.1\r\n"
 80016ec:	4955      	ldr	r1, [pc, #340]	; (8001844 <espCommunication+0x324>)
 80016ee:	484a      	ldr	r0, [pc, #296]	; (8001818 <espCommunication+0x2f8>)
 80016f0:	f008 f91c 	bl	800992c <siprintf>
						  "Host: 192.168.137.1\r\n");
		int getRequestLength = strlen(txBuffer);
 80016f4:	4848      	ldr	r0, [pc, #288]	; (8001818 <espCommunication+0x2f8>)
 80016f6:	f7fe fd75 	bl	80001e4 <strlen>
 80016fa:	4603      	mov	r3, r0
 80016fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  	  uint8_t char_number_get = 0;
 80016fe:	2300      	movs	r3, #0
 8001700:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
  	  int temp_get = getRequestLength;
 8001704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001706:	653b      	str	r3, [r7, #80]	; 0x50
  	  while(temp_get != 0){
 8001708:	e00c      	b.n	8001724 <espCommunication+0x204>
  		  temp_get = temp_get / 10;
 800170a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800170c:	4a4e      	ldr	r2, [pc, #312]	; (8001848 <espCommunication+0x328>)
 800170e:	fb82 1203 	smull	r1, r2, r2, r3
 8001712:	1092      	asrs	r2, r2, #2
 8001714:	17db      	asrs	r3, r3, #31
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	653b      	str	r3, [r7, #80]	; 0x50
  		  char_number_get++;
 800171a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800171e:	3301      	adds	r3, #1
 8001720:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
  	  while(temp_get != 0){
 8001724:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1ef      	bne.n	800170a <espCommunication+0x1ea>
  	  }
  	  char pDataBuf[13+char_number_get];
 800172a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800172e:	f103 040d 	add.w	r4, r3, #13
 8001732:	1e63      	subs	r3, r4, #1
 8001734:	63bb      	str	r3, [r7, #56]	; 0x38
 8001736:	4622      	mov	r2, r4
 8001738:	2300      	movs	r3, #0
 800173a:	60ba      	str	r2, [r7, #8]
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	f04f 0200 	mov.w	r2, #0
 8001742:	f04f 0300 	mov.w	r3, #0
 8001746:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 800174a:	4631      	mov	r1, r6
 800174c:	00cb      	lsls	r3, r1, #3
 800174e:	4629      	mov	r1, r5
 8001750:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001754:	4629      	mov	r1, r5
 8001756:	00ca      	lsls	r2, r1, #3
 8001758:	4622      	mov	r2, r4
 800175a:	2300      	movs	r3, #0
 800175c:	603a      	str	r2, [r7, #0]
 800175e:	607b      	str	r3, [r7, #4]
 8001760:	f04f 0200 	mov.w	r2, #0
 8001764:	f04f 0300 	mov.w	r3, #0
 8001768:	e9d7 5600 	ldrd	r5, r6, [r7]
 800176c:	4631      	mov	r1, r6
 800176e:	00cb      	lsls	r3, r1, #3
 8001770:	4629      	mov	r1, r5
 8001772:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001776:	4629      	mov	r1, r5
 8001778:	00ca      	lsls	r2, r1, #3
 800177a:	4623      	mov	r3, r4
 800177c:	3307      	adds	r3, #7
 800177e:	08db      	lsrs	r3, r3, #3
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	ebad 0d03 	sub.w	sp, sp, r3
 8001786:	ab06      	add	r3, sp, #24
 8001788:	3300      	adds	r3, #0
 800178a:	637b      	str	r3, [r7, #52]	; 0x34
  	  sprintf(pDataBuf, "AT+CIPSEND=%d\r\n", getRequestLength);
 800178c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800178e:	492f      	ldr	r1, [pc, #188]	; (800184c <espCommunication+0x32c>)
 8001790:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001792:	f008 f8cb 	bl	800992c <siprintf>
	  sendATCommand(&huart3, pDataBuf, sizeof(pDataBuf), 250);
 8001796:	23fa      	movs	r3, #250	; 0xfa
 8001798:	4622      	mov	r2, r4
 800179a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800179c:	4821      	ldr	r0, [pc, #132]	; (8001824 <espCommunication+0x304>)
 800179e:	f7fe fd7f 	bl	80002a0 <sendATCommand>
	  vTaskDelay( pdMS_TO_TICKS( 10 ) );
 80017a2:	200a      	movs	r0, #10
 80017a4:	f006 fb48 	bl	8007e38 <vTaskDelay>
	  sendATCommand(&huart3, txBuffer, getRequestLength, 250);
 80017a8:	23fa      	movs	r3, #250	; 0xfa
 80017aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80017ac:	491a      	ldr	r1, [pc, #104]	; (8001818 <espCommunication+0x2f8>)
 80017ae:	481d      	ldr	r0, [pc, #116]	; (8001824 <espCommunication+0x304>)
 80017b0:	f7fe fd76 	bl	80002a0 <sendATCommand>

	  memset(txBuffer, '\0', sizeof(txBuffer));
 80017b4:	f240 12ff 	movw	r2, #511	; 0x1ff
 80017b8:	2100      	movs	r1, #0
 80017ba:	4817      	ldr	r0, [pc, #92]	; (8001818 <espCommunication+0x2f8>)
 80017bc:	f008 f8d6 	bl	800996c <memset>
	  vTaskDelay( pdMS_TO_TICKS( 50 ) );
 80017c0:	2032      	movs	r0, #50	; 0x32
 80017c2:	f006 fb39 	bl	8007e38 <vTaskDelay>

	  __asm__ volatile("NOP");
 80017c6:	bf00      	nop

  /* Infinite loop */
  for(;;)
  {
	  // Calculate the number of bytes received since the last processing
	  uint8_t receivedBytes = 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  if((ESPRXBUFFERSIZE - DMA1_Channel3->CNDTR) < rxBufferHead) {
 80017ce:	4b19      	ldr	r3, [pc, #100]	; (8001834 <espCommunication+0x314>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f5c3 73ff 	rsb	r3, r3, #510	; 0x1fe
 80017d6:	3301      	adds	r3, #1
 80017d8:	4a1d      	ldr	r2, [pc, #116]	; (8001850 <espCommunication+0x330>)
 80017da:	8812      	ldrh	r2, [r2, #0]
 80017dc:	b292      	uxth	r2, r2
 80017de:	4293      	cmp	r3, r2
 80017e0:	d23a      	bcs.n	8001858 <espCommunication+0x338>
		  receivedBytes = (ESPRXBUFFERSIZE - rxBufferHead + ESPRXBUFFERSIZE - DMA1_Channel3->CNDTR) % ESPRXBUFFERSIZE;
 80017e2:	4b1b      	ldr	r3, [pc, #108]	; (8001850 <espCommunication+0x330>)
 80017e4:	881b      	ldrh	r3, [r3, #0]
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	461a      	mov	r2, r3
 80017ea:	4b12      	ldr	r3, [pc, #72]	; (8001834 <espCommunication+0x314>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	4413      	add	r3, r2
 80017f0:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 80017f4:	3302      	adds	r3, #2
 80017f6:	4a17      	ldr	r2, [pc, #92]	; (8001854 <espCommunication+0x334>)
 80017f8:	fba2 1203 	umull	r1, r2, r2, r3
 80017fc:	1a99      	subs	r1, r3, r2
 80017fe:	0849      	lsrs	r1, r1, #1
 8001800:	440a      	add	r2, r1
 8001802:	0a11      	lsrs	r1, r2, #8
 8001804:	460a      	mov	r2, r1
 8001806:	0252      	lsls	r2, r2, #9
 8001808:	1a52      	subs	r2, r2, r1
 800180a:	1a99      	subs	r1, r3, r2
 800180c:	460b      	mov	r3, r1
 800180e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001812:	e038      	b.n	8001886 <espCommunication+0x366>
 8001814:	48000400 	.word	0x48000400
 8001818:	200008dc 	.word	0x200008dc
 800181c:	0800a5bc 	.word	0x0800a5bc
 8001820:	20000adc 	.word	0x20000adc
 8001824:	20000744 	.word	0x20000744
 8001828:	0800a410 	.word	0x0800a410
 800182c:	0800a424 	.word	0x0800a424
 8001830:	40004800 	.word	0x40004800
 8001834:	40020030 	.word	0x40020030
 8001838:	0800a454 	.word	0x0800a454
 800183c:	0800a45c 	.word	0x0800a45c
 8001840:	0800a46c 	.word	0x0800a46c
 8001844:	0800a498 	.word	0x0800a498
 8001848:	66666667 	.word	0x66666667
 800184c:	0800a4c4 	.word	0x0800a4c4
 8001850:	20000cdc 	.word	0x20000cdc
 8001854:	00804021 	.word	0x00804021
	  } else {
		  receivedBytes = (ESPRXBUFFERSIZE - DMA1_Channel3->CNDTR -rxBufferHead) % ESPRXBUFFERSIZE;
 8001858:	4baf      	ldr	r3, [pc, #700]	; (8001b18 <espCommunication+0x5f8>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	4aaf      	ldr	r2, [pc, #700]	; (8001b1c <espCommunication+0x5fc>)
 800185e:	8812      	ldrh	r2, [r2, #0]
 8001860:	b292      	uxth	r2, r2
 8001862:	4413      	add	r3, r2
 8001864:	f5c3 73ff 	rsb	r3, r3, #510	; 0x1fe
 8001868:	3301      	adds	r3, #1
 800186a:	4aad      	ldr	r2, [pc, #692]	; (8001b20 <espCommunication+0x600>)
 800186c:	fba2 1203 	umull	r1, r2, r2, r3
 8001870:	1a99      	subs	r1, r3, r2
 8001872:	0849      	lsrs	r1, r1, #1
 8001874:	440a      	add	r2, r1
 8001876:	0a11      	lsrs	r1, r2, #8
 8001878:	460a      	mov	r2, r1
 800187a:	0252      	lsls	r2, r2, #9
 800187c:	1a52      	subs	r2, r2, r1
 800187e:	1a99      	subs	r1, r3, r2
 8001880:	460b      	mov	r3, r1
 8001882:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  }

	  // Process the received data
      for (uint16_t i = 0; i < receivedBytes; i++) {
 8001886:	2300      	movs	r3, #0
 8001888:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800188c:	e1be      	b.n	8001c0c <espCommunication+0x6ec>
    	  if(rxBuffer[(rxBufferHead + i)%ESPRXBUFFERSIZE] == 'J'){
 800188e:	4ba3      	ldr	r3, [pc, #652]	; (8001b1c <espCommunication+0x5fc>)
 8001890:	881b      	ldrh	r3, [r3, #0]
 8001892:	b29b      	uxth	r3, r3
 8001894:	461a      	mov	r2, r3
 8001896:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800189a:	441a      	add	r2, r3
 800189c:	4ba1      	ldr	r3, [pc, #644]	; (8001b24 <espCommunication+0x604>)
 800189e:	fb83 1302 	smull	r1, r3, r3, r2
 80018a2:	4413      	add	r3, r2
 80018a4:	1219      	asrs	r1, r3, #8
 80018a6:	17d3      	asrs	r3, r2, #31
 80018a8:	1ac9      	subs	r1, r1, r3
 80018aa:	460b      	mov	r3, r1
 80018ac:	025b      	lsls	r3, r3, #9
 80018ae:	1a5b      	subs	r3, r3, r1
 80018b0:	1ad1      	subs	r1, r2, r3
 80018b2:	4b9d      	ldr	r3, [pc, #628]	; (8001b28 <espCommunication+0x608>)
 80018b4:	5c5b      	ldrb	r3, [r3, r1]
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	2b4a      	cmp	r3, #74	; 0x4a
 80018ba:	f040 81a2 	bne.w	8001c02 <espCommunication+0x6e2>
    		  if(rxBuffer[(rxBufferHead + i + 1)%ESPRXBUFFERSIZE] == 'O') {
 80018be:	4b97      	ldr	r3, [pc, #604]	; (8001b1c <espCommunication+0x5fc>)
 80018c0:	881b      	ldrh	r3, [r3, #0]
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	461a      	mov	r2, r3
 80018c6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80018ca:	4413      	add	r3, r2
 80018cc:	1c5a      	adds	r2, r3, #1
 80018ce:	4b95      	ldr	r3, [pc, #596]	; (8001b24 <espCommunication+0x604>)
 80018d0:	fb83 1302 	smull	r1, r3, r3, r2
 80018d4:	4413      	add	r3, r2
 80018d6:	1219      	asrs	r1, r3, #8
 80018d8:	17d3      	asrs	r3, r2, #31
 80018da:	1ac9      	subs	r1, r1, r3
 80018dc:	460b      	mov	r3, r1
 80018de:	025b      	lsls	r3, r3, #9
 80018e0:	1a5b      	subs	r3, r3, r1
 80018e2:	1ad1      	subs	r1, r2, r3
 80018e4:	4b90      	ldr	r3, [pc, #576]	; (8001b28 <espCommunication+0x608>)
 80018e6:	5c5b      	ldrb	r3, [r3, r1]
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2b4f      	cmp	r3, #79	; 0x4f
 80018ec:	f040 8189 	bne.w	8001c02 <espCommunication+0x6e2>
    			  if(rxBuffer[(rxBufferHead + i + 2)%ESPRXBUFFERSIZE] == 'Y') {
 80018f0:	4b8a      	ldr	r3, [pc, #552]	; (8001b1c <espCommunication+0x5fc>)
 80018f2:	881b      	ldrh	r3, [r3, #0]
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	461a      	mov	r2, r3
 80018f8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80018fc:	4413      	add	r3, r2
 80018fe:	1c9a      	adds	r2, r3, #2
 8001900:	4b88      	ldr	r3, [pc, #544]	; (8001b24 <espCommunication+0x604>)
 8001902:	fb83 1302 	smull	r1, r3, r3, r2
 8001906:	4413      	add	r3, r2
 8001908:	1219      	asrs	r1, r3, #8
 800190a:	17d3      	asrs	r3, r2, #31
 800190c:	1ac9      	subs	r1, r1, r3
 800190e:	460b      	mov	r3, r1
 8001910:	025b      	lsls	r3, r3, #9
 8001912:	1a5b      	subs	r3, r3, r1
 8001914:	1ad1      	subs	r1, r2, r3
 8001916:	4b84      	ldr	r3, [pc, #528]	; (8001b28 <espCommunication+0x608>)
 8001918:	5c5b      	ldrb	r3, [r3, r1]
 800191a:	b2db      	uxtb	r3, r3
 800191c:	2b59      	cmp	r3, #89	; 0x59
 800191e:	f040 8170 	bne.w	8001c02 <espCommunication+0x6e2>
    				  if(rxBuffer[(rxBufferHead + i + 3)%ESPRXBUFFERSIZE] == '_') {
 8001922:	4b7e      	ldr	r3, [pc, #504]	; (8001b1c <espCommunication+0x5fc>)
 8001924:	881b      	ldrh	r3, [r3, #0]
 8001926:	b29b      	uxth	r3, r3
 8001928:	461a      	mov	r2, r3
 800192a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800192e:	4413      	add	r3, r2
 8001930:	1cda      	adds	r2, r3, #3
 8001932:	4b7c      	ldr	r3, [pc, #496]	; (8001b24 <espCommunication+0x604>)
 8001934:	fb83 1302 	smull	r1, r3, r3, r2
 8001938:	4413      	add	r3, r2
 800193a:	1219      	asrs	r1, r3, #8
 800193c:	17d3      	asrs	r3, r2, #31
 800193e:	1ac9      	subs	r1, r1, r3
 8001940:	460b      	mov	r3, r1
 8001942:	025b      	lsls	r3, r3, #9
 8001944:	1a5b      	subs	r3, r3, r1
 8001946:	1ad1      	subs	r1, r2, r3
 8001948:	4b77      	ldr	r3, [pc, #476]	; (8001b28 <espCommunication+0x608>)
 800194a:	5c5b      	ldrb	r3, [r3, r1]
 800194c:	b2db      	uxtb	r3, r3
 800194e:	2b5f      	cmp	r3, #95	; 0x5f
 8001950:	f040 8157 	bne.w	8001c02 <espCommunication+0x6e2>
    					  if(rxBuffer[(rxBufferHead + i + 4)%ESPRXBUFFERSIZE] == 'X') {
 8001954:	4b71      	ldr	r3, [pc, #452]	; (8001b1c <espCommunication+0x5fc>)
 8001956:	881b      	ldrh	r3, [r3, #0]
 8001958:	b29b      	uxth	r3, r3
 800195a:	461a      	mov	r2, r3
 800195c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001960:	4413      	add	r3, r2
 8001962:	1d1a      	adds	r2, r3, #4
 8001964:	4b6f      	ldr	r3, [pc, #444]	; (8001b24 <espCommunication+0x604>)
 8001966:	fb83 1302 	smull	r1, r3, r3, r2
 800196a:	4413      	add	r3, r2
 800196c:	1219      	asrs	r1, r3, #8
 800196e:	17d3      	asrs	r3, r2, #31
 8001970:	1ac9      	subs	r1, r1, r3
 8001972:	460b      	mov	r3, r1
 8001974:	025b      	lsls	r3, r3, #9
 8001976:	1a5b      	subs	r3, r3, r1
 8001978:	1ad1      	subs	r1, r2, r3
 800197a:	4b6b      	ldr	r3, [pc, #428]	; (8001b28 <espCommunication+0x608>)
 800197c:	5c5b      	ldrb	r3, [r3, r1]
 800197e:	b2db      	uxtb	r3, r3
 8001980:	2b58      	cmp	r3, #88	; 0x58
 8001982:	f040 813e 	bne.w	8001c02 <espCommunication+0x6e2>
    						  uint16_t j = rxBufferHead + i + 5;
 8001986:	4b65      	ldr	r3, [pc, #404]	; (8001b1c <espCommunication+0x5fc>)
 8001988:	881b      	ldrh	r3, [r3, #0]
 800198a:	b29a      	uxth	r2, r3
 800198c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001990:	4413      	add	r3, r2
 8001992:	b29b      	uxth	r3, r3
 8001994:	3305      	adds	r3, #5
 8001996:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    						  if(rxBuffer[j%ESPRXBUFFERSIZE] == '-') {
 800199a:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800199e:	4b60      	ldr	r3, [pc, #384]	; (8001b20 <espCommunication+0x600>)
 80019a0:	fba3 1302 	umull	r1, r3, r3, r2
 80019a4:	1ad1      	subs	r1, r2, r3
 80019a6:	0849      	lsrs	r1, r1, #1
 80019a8:	440b      	add	r3, r1
 80019aa:	0a19      	lsrs	r1, r3, #8
 80019ac:	460b      	mov	r3, r1
 80019ae:	025b      	lsls	r3, r3, #9
 80019b0:	1a5b      	subs	r3, r3, r1
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	461a      	mov	r2, r3
 80019b8:	4b5b      	ldr	r3, [pc, #364]	; (8001b28 <espCommunication+0x608>)
 80019ba:	5c9b      	ldrb	r3, [r3, r2]
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b2d      	cmp	r3, #45	; 0x2d
 80019c0:	d104      	bne.n	80019cc <espCommunication+0x4ac>
    							  j++;
 80019c2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80019c6:	3301      	adds	r3, #1
 80019c8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    						  }
    						  joyX = 0;
 80019cc:	4b57      	ldr	r3, [pc, #348]	; (8001b2c <espCommunication+0x60c>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	701a      	strb	r2, [r3, #0]
    						  while(rxBuffer[j%ESPRXBUFFERSIZE] != 'Y') {
 80019d2:	e033      	b.n	8001a3c <espCommunication+0x51c>
    							  joyX = (joyX*10) + (rxBuffer[j%ESPRXBUFFERSIZE]-48);
 80019d4:	4b55      	ldr	r3, [pc, #340]	; (8001b2c <espCommunication+0x60c>)
 80019d6:	f993 3000 	ldrsb.w	r3, [r3]
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	461a      	mov	r2, r3
 80019de:	0092      	lsls	r2, r2, #2
 80019e0:	4413      	add	r3, r2
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	b2d8      	uxtb	r0, r3
 80019e6:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80019ea:	4b4d      	ldr	r3, [pc, #308]	; (8001b20 <espCommunication+0x600>)
 80019ec:	fba3 1302 	umull	r1, r3, r3, r2
 80019f0:	1ad1      	subs	r1, r2, r3
 80019f2:	0849      	lsrs	r1, r1, #1
 80019f4:	440b      	add	r3, r1
 80019f6:	0a19      	lsrs	r1, r3, #8
 80019f8:	460b      	mov	r3, r1
 80019fa:	025b      	lsls	r3, r3, #9
 80019fc:	1a5b      	subs	r3, r3, r1
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	461a      	mov	r2, r3
 8001a04:	4b48      	ldr	r3, [pc, #288]	; (8001b28 <espCommunication+0x608>)
 8001a06:	5c9b      	ldrb	r3, [r3, r2]
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	4403      	add	r3, r0
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	3b30      	subs	r3, #48	; 0x30
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	b25a      	sxtb	r2, r3
 8001a14:	4b45      	ldr	r3, [pc, #276]	; (8001b2c <espCommunication+0x60c>)
 8001a16:	701a      	strb	r2, [r3, #0]
    							  j++;
 8001a18:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    							  if(j - (rxBufferHead + i + 5) >= 4) break;
 8001a22:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8001a26:	4b3d      	ldr	r3, [pc, #244]	; (8001b1c <espCommunication+0x5fc>)
 8001a28:	881b      	ldrh	r3, [r3, #0]
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001a32:	440b      	add	r3, r1
 8001a34:	3305      	adds	r3, #5
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	2b03      	cmp	r3, #3
 8001a3a:	dc14      	bgt.n	8001a66 <espCommunication+0x546>
    						  while(rxBuffer[j%ESPRXBUFFERSIZE] != 'Y') {
 8001a3c:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8001a40:	4b37      	ldr	r3, [pc, #220]	; (8001b20 <espCommunication+0x600>)
 8001a42:	fba3 1302 	umull	r1, r3, r3, r2
 8001a46:	1ad1      	subs	r1, r2, r3
 8001a48:	0849      	lsrs	r1, r1, #1
 8001a4a:	440b      	add	r3, r1
 8001a4c:	0a19      	lsrs	r1, r3, #8
 8001a4e:	460b      	mov	r3, r1
 8001a50:	025b      	lsls	r3, r3, #9
 8001a52:	1a5b      	subs	r3, r3, r1
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	461a      	mov	r2, r3
 8001a5a:	4b33      	ldr	r3, [pc, #204]	; (8001b28 <espCommunication+0x608>)
 8001a5c:	5c9b      	ldrb	r3, [r3, r2]
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	2b59      	cmp	r3, #89	; 0x59
 8001a62:	d1b7      	bne.n	80019d4 <espCommunication+0x4b4>
 8001a64:	e000      	b.n	8001a68 <espCommunication+0x548>
    							  if(j - (rxBufferHead + i + 5) >= 4) break;
 8001a66:	bf00      	nop
    						  }
    						  if(rxBuffer[(rxBufferHead + i + 5)%ESPRXBUFFERSIZE] == '-') {
 8001a68:	4b2c      	ldr	r3, [pc, #176]	; (8001b1c <espCommunication+0x5fc>)
 8001a6a:	881b      	ldrh	r3, [r3, #0]
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	461a      	mov	r2, r3
 8001a70:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001a74:	4413      	add	r3, r2
 8001a76:	1d5a      	adds	r2, r3, #5
 8001a78:	4b2a      	ldr	r3, [pc, #168]	; (8001b24 <espCommunication+0x604>)
 8001a7a:	fb83 1302 	smull	r1, r3, r3, r2
 8001a7e:	4413      	add	r3, r2
 8001a80:	1219      	asrs	r1, r3, #8
 8001a82:	17d3      	asrs	r3, r2, #31
 8001a84:	1ac9      	subs	r1, r1, r3
 8001a86:	460b      	mov	r3, r1
 8001a88:	025b      	lsls	r3, r3, #9
 8001a8a:	1a5b      	subs	r3, r3, r1
 8001a8c:	1ad1      	subs	r1, r2, r3
 8001a8e:	4b26      	ldr	r3, [pc, #152]	; (8001b28 <espCommunication+0x608>)
 8001a90:	5c5b      	ldrb	r3, [r3, r1]
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2b2d      	cmp	r3, #45	; 0x2d
 8001a96:	d108      	bne.n	8001aaa <espCommunication+0x58a>
    							  joyX = joyX * (-1);
 8001a98:	4b24      	ldr	r3, [pc, #144]	; (8001b2c <espCommunication+0x60c>)
 8001a9a:	f993 3000 	ldrsb.w	r3, [r3]
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	425b      	negs	r3, r3
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	b25a      	sxtb	r2, r3
 8001aa6:	4b21      	ldr	r3, [pc, #132]	; (8001b2c <espCommunication+0x60c>)
 8001aa8:	701a      	strb	r2, [r3, #0]
    						  }

    						  if(rxBuffer[j%ESPRXBUFFERSIZE] == 'Y') {
 8001aaa:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8001aae:	4b1c      	ldr	r3, [pc, #112]	; (8001b20 <espCommunication+0x600>)
 8001ab0:	fba3 1302 	umull	r1, r3, r3, r2
 8001ab4:	1ad1      	subs	r1, r2, r3
 8001ab6:	0849      	lsrs	r1, r1, #1
 8001ab8:	440b      	add	r3, r1
 8001aba:	0a19      	lsrs	r1, r3, #8
 8001abc:	460b      	mov	r3, r1
 8001abe:	025b      	lsls	r3, r3, #9
 8001ac0:	1a5b      	subs	r3, r3, r1
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	4b17      	ldr	r3, [pc, #92]	; (8001b28 <espCommunication+0x608>)
 8001aca:	5c9b      	ldrb	r3, [r3, r2]
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2b59      	cmp	r3, #89	; 0x59
 8001ad0:	f040 8091 	bne.w	8001bf6 <espCommunication+0x6d6>
    							  uint16_t k = j + 1;
 8001ad4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001ad8:	3301      	adds	r3, #1
 8001ada:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
        						  if(rxBuffer[k%ESPRXBUFFERSIZE] == '-') {
 8001ade:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001ae2:	4b0f      	ldr	r3, [pc, #60]	; (8001b20 <espCommunication+0x600>)
 8001ae4:	fba3 1302 	umull	r1, r3, r3, r2
 8001ae8:	1ad1      	subs	r1, r2, r3
 8001aea:	0849      	lsrs	r1, r1, #1
 8001aec:	440b      	add	r3, r1
 8001aee:	0a19      	lsrs	r1, r3, #8
 8001af0:	460b      	mov	r3, r1
 8001af2:	025b      	lsls	r3, r3, #9
 8001af4:	1a5b      	subs	r3, r3, r1
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	461a      	mov	r2, r3
 8001afc:	4b0a      	ldr	r3, [pc, #40]	; (8001b28 <espCommunication+0x608>)
 8001afe:	5c9b      	ldrb	r3, [r3, r2]
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	2b2d      	cmp	r3, #45	; 0x2d
 8001b04:	d104      	bne.n	8001b10 <espCommunication+0x5f0>
        							  k++;
 8001b06:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
        						  }
        						  joyY = 0;
 8001b10:	4b07      	ldr	r3, [pc, #28]	; (8001b30 <espCommunication+0x610>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	701a      	strb	r2, [r3, #0]
        						  while(rxBuffer[k%ESPRXBUFFERSIZE] != '_') {
 8001b16:	e03c      	b.n	8001b92 <espCommunication+0x672>
 8001b18:	40020030 	.word	0x40020030
 8001b1c:	20000cdc 	.word	0x20000cdc
 8001b20:	00804021 	.word	0x00804021
 8001b24:	80402011 	.word	0x80402011
 8001b28:	20000adc 	.word	0x20000adc
 8001b2c:	20000ce8 	.word	0x20000ce8
 8001b30:	20000ce9 	.word	0x20000ce9
        							  joyY = (joyY*10) + (rxBuffer[k%ESPRXBUFFERSIZE]-48);
 8001b34:	4b92      	ldr	r3, [pc, #584]	; (8001d80 <espCommunication+0x860>)
 8001b36:	f993 3000 	ldrsb.w	r3, [r3]
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	0092      	lsls	r2, r2, #2
 8001b40:	4413      	add	r3, r2
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	b2d8      	uxtb	r0, r3
 8001b46:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001b4a:	4b8e      	ldr	r3, [pc, #568]	; (8001d84 <espCommunication+0x864>)
 8001b4c:	fba3 1302 	umull	r1, r3, r3, r2
 8001b50:	1ad1      	subs	r1, r2, r3
 8001b52:	0849      	lsrs	r1, r1, #1
 8001b54:	440b      	add	r3, r1
 8001b56:	0a19      	lsrs	r1, r3, #8
 8001b58:	460b      	mov	r3, r1
 8001b5a:	025b      	lsls	r3, r3, #9
 8001b5c:	1a5b      	subs	r3, r3, r1
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	461a      	mov	r2, r3
 8001b64:	4b88      	ldr	r3, [pc, #544]	; (8001d88 <espCommunication+0x868>)
 8001b66:	5c9b      	ldrb	r3, [r3, r2]
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	4403      	add	r3, r0
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	3b30      	subs	r3, #48	; 0x30
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	b25a      	sxtb	r2, r3
 8001b74:	4b82      	ldr	r3, [pc, #520]	; (8001d80 <espCommunication+0x860>)
 8001b76:	701a      	strb	r2, [r3, #0]
        							  k++;
 8001b78:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
        							  if(k - (j + 1) >= 4) break;
 8001b82:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001b86:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b03      	cmp	r3, #3
 8001b90:	dc14      	bgt.n	8001bbc <espCommunication+0x69c>
        						  while(rxBuffer[k%ESPRXBUFFERSIZE] != '_') {
 8001b92:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001b96:	4b7b      	ldr	r3, [pc, #492]	; (8001d84 <espCommunication+0x864>)
 8001b98:	fba3 1302 	umull	r1, r3, r3, r2
 8001b9c:	1ad1      	subs	r1, r2, r3
 8001b9e:	0849      	lsrs	r1, r1, #1
 8001ba0:	440b      	add	r3, r1
 8001ba2:	0a19      	lsrs	r1, r3, #8
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	025b      	lsls	r3, r3, #9
 8001ba8:	1a5b      	subs	r3, r3, r1
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	461a      	mov	r2, r3
 8001bb0:	4b75      	ldr	r3, [pc, #468]	; (8001d88 <espCommunication+0x868>)
 8001bb2:	5c9b      	ldrb	r3, [r3, r2]
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b5f      	cmp	r3, #95	; 0x5f
 8001bb8:	d1bc      	bne.n	8001b34 <espCommunication+0x614>
 8001bba:	e000      	b.n	8001bbe <espCommunication+0x69e>
        							  if(k - (j + 1) >= 4) break;
 8001bbc:	bf00      	nop
        						  }
        						  if(rxBuffer[(j + 1)%ESPRXBUFFERSIZE] == '-') {
 8001bbe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001bc2:	1c5a      	adds	r2, r3, #1
 8001bc4:	4b71      	ldr	r3, [pc, #452]	; (8001d8c <espCommunication+0x86c>)
 8001bc6:	fb83 1302 	smull	r1, r3, r3, r2
 8001bca:	4413      	add	r3, r2
 8001bcc:	1219      	asrs	r1, r3, #8
 8001bce:	17d3      	asrs	r3, r2, #31
 8001bd0:	1ac9      	subs	r1, r1, r3
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	025b      	lsls	r3, r3, #9
 8001bd6:	1a5b      	subs	r3, r3, r1
 8001bd8:	1ad1      	subs	r1, r2, r3
 8001bda:	4b6b      	ldr	r3, [pc, #428]	; (8001d88 <espCommunication+0x868>)
 8001bdc:	5c5b      	ldrb	r3, [r3, r1]
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	2b2d      	cmp	r3, #45	; 0x2d
 8001be2:	d108      	bne.n	8001bf6 <espCommunication+0x6d6>
        							  joyY = joyY * (-1);
 8001be4:	4b66      	ldr	r3, [pc, #408]	; (8001d80 <espCommunication+0x860>)
 8001be6:	f993 3000 	ldrsb.w	r3, [r3]
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	425b      	negs	r3, r3
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	b25a      	sxtb	r2, r3
 8001bf2:	4b63      	ldr	r3, [pc, #396]	; (8001d80 <espCommunication+0x860>)
 8001bf4:	701a      	strb	r2, [r3, #0]
        						  }
    						  }

    						  if(joyX < 0) {
 8001bf6:	4b66      	ldr	r3, [pc, #408]	; (8001d90 <espCommunication+0x870>)
 8001bf8:	f993 3000 	ldrsb.w	r3, [r3]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	da00      	bge.n	8001c02 <espCommunication+0x6e2>
    							  __asm__ volatile("NOP");
 8001c00:	bf00      	nop
      for (uint16_t i = 0; i < receivedBytes; i++) {
 8001c02:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001c06:	3301      	adds	r3, #1
 8001c08:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8001c0c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8001c16:	429a      	cmp	r2, r3
 8001c18:	f4ff ae39 	bcc.w	800188e <espCommunication+0x36e>
    		  }
    	  }
      }

      // Update the buffer head index
      rxBufferHead = ((rxBufferHead + receivedBytes) % ESPRXBUFFERSIZE);
 8001c1c:	4b5d      	ldr	r3, [pc, #372]	; (8001d94 <espCommunication+0x874>)
 8001c1e:	881b      	ldrh	r3, [r3, #0]
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	461a      	mov	r2, r3
 8001c24:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001c28:	441a      	add	r2, r3
 8001c2a:	4b58      	ldr	r3, [pc, #352]	; (8001d8c <espCommunication+0x86c>)
 8001c2c:	fb83 1302 	smull	r1, r3, r3, r2
 8001c30:	4413      	add	r3, r2
 8001c32:	1219      	asrs	r1, r3, #8
 8001c34:	17d3      	asrs	r3, r2, #31
 8001c36:	1ac9      	subs	r1, r1, r3
 8001c38:	460b      	mov	r3, r1
 8001c3a:	025b      	lsls	r3, r3, #9
 8001c3c:	1a5b      	subs	r3, r3, r1
 8001c3e:	1ad1      	subs	r1, r2, r3
 8001c40:	b28a      	uxth	r2, r1
 8001c42:	4b54      	ldr	r3, [pc, #336]	; (8001d94 <espCommunication+0x874>)
 8001c44:	801a      	strh	r2, [r3, #0]

      if(xEventGroupGetBitsFromISR(timerFdsEventGroup) == 0x1) {
 8001c46:	4b54      	ldr	r3, [pc, #336]	; (8001d98 <espCommunication+0x878>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f005 f924 	bl	8006e98 <xEventGroupGetBitsFromISR>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	f040 808f 	bne.w	8001d76 <espCommunication+0x856>
 8001c58:	466b      	mov	r3, sp
 8001c5a:	461e      	mov	r6, r3
//    	    char jsonContent[200];
//    	    sprintf(jsonContent, "{\"avrBatVoltage\": \"%d\", \"EncoderR.rpm\": \"%d\", \"EncoderL.rpm\": \"%d\", \"SoftPwmR.pwmValue\": \"%d\", \"SoftPwmL.pwmValue\": \"%d\", \"joyX\": \"%d\", \"joyY\": \"%d\"}", avrBatVoltage, EncoderR.rpm, EncoderL.rpm, SoftPwmR.pwmValue, SoftPwmL.pwmValue, joyX, joyY);

    	    // Create the entire POST request string
//    	    char txBuffer[500];
    	    sprintf(txBuffer, "POST /robot_data HTTP/1.1\r\n"
 8001c5c:	4b4f      	ldr	r3, [pc, #316]	; (8001d9c <espCommunication+0x87c>)
 8001c5e:	881b      	ldrh	r3, [r3, #0]
 8001c60:	469c      	mov	ip, r3
 8001c62:	4b4f      	ldr	r3, [pc, #316]	; (8001da0 <espCommunication+0x880>)
 8001c64:	695a      	ldr	r2, [r3, #20]
 8001c66:	4b4f      	ldr	r3, [pc, #316]	; (8001da4 <espCommunication+0x884>)
 8001c68:	695b      	ldr	r3, [r3, #20]
    	                         "Host: 192.168.137.1\r\n"
    	                         "Content-Type: application/json\r\n"
//    	                         "Content-Length: %d\r\n\r\n"
    	                         "{\"avrBatVoltage\": \"%d\", \"EncoderR.rpm\": \"%d\", \"EncoderL.rpm\": \"%d\", \"SoftPwmR.pwmValue\": \"%d\", \"SoftPwmL.pwmValue\": \"%d\", \"joyX\": \"%d\", \"joyY\": \"%d\"}",
								 avrBatVoltage, EncoderR.rpm, EncoderL.rpm, SoftPwmR.pwmValue, SoftPwmL.pwmValue, joyX, joyY);
 8001c6a:	494f      	ldr	r1, [pc, #316]	; (8001da8 <espCommunication+0x888>)
 8001c6c:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
    	    sprintf(txBuffer, "POST /robot_data HTTP/1.1\r\n"
 8001c70:	4608      	mov	r0, r1
								 avrBatVoltage, EncoderR.rpm, EncoderL.rpm, SoftPwmR.pwmValue, SoftPwmL.pwmValue, joyX, joyY);
 8001c72:	494e      	ldr	r1, [pc, #312]	; (8001dac <espCommunication+0x88c>)
 8001c74:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
    	    sprintf(txBuffer, "POST /robot_data HTTP/1.1\r\n"
 8001c78:	460c      	mov	r4, r1
 8001c7a:	4945      	ldr	r1, [pc, #276]	; (8001d90 <espCommunication+0x870>)
 8001c7c:	f991 1000 	ldrsb.w	r1, [r1]
 8001c80:	460d      	mov	r5, r1
 8001c82:	493f      	ldr	r1, [pc, #252]	; (8001d80 <espCommunication+0x860>)
 8001c84:	f991 1000 	ldrsb.w	r1, [r1]
 8001c88:	9104      	str	r1, [sp, #16]
 8001c8a:	9503      	str	r5, [sp, #12]
 8001c8c:	9402      	str	r4, [sp, #8]
 8001c8e:	9001      	str	r0, [sp, #4]
 8001c90:	9300      	str	r3, [sp, #0]
 8001c92:	4613      	mov	r3, r2
 8001c94:	4662      	mov	r2, ip
 8001c96:	4946      	ldr	r1, [pc, #280]	; (8001db0 <espCommunication+0x890>)
 8001c98:	4846      	ldr	r0, [pc, #280]	; (8001db4 <espCommunication+0x894>)
 8001c9a:	f007 fe47 	bl	800992c <siprintf>

    	    // Calculate the number of characters in the POST request
    	    int postRequestLength = strlen(txBuffer);
 8001c9e:	4845      	ldr	r0, [pc, #276]	; (8001db4 <espCommunication+0x894>)
 8001ca0:	f7fe faa0 	bl	80001e4 <strlen>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	633b      	str	r3, [r7, #48]	; 0x30

//    	  char pData[] = "GET / HTTP/1.1\r\nHost: 192.168.137.1:8080\r\n\r\n";
//    	  int d = sizeof(pData)-1;
    	  uint8_t char_number = 0;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
//    	  int temp = d;
    	  int temp = postRequestLength;
 8001cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cb0:	643b      	str	r3, [r7, #64]	; 0x40
    	  while(temp != 0){
 8001cb2:	e00c      	b.n	8001cce <espCommunication+0x7ae>
    	  temp = temp / 10;
 8001cb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cb6:	4a40      	ldr	r2, [pc, #256]	; (8001db8 <espCommunication+0x898>)
 8001cb8:	fb82 1203 	smull	r1, r2, r2, r3
 8001cbc:	1092      	asrs	r2, r2, #2
 8001cbe:	17db      	asrs	r3, r3, #31
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	643b      	str	r3, [r7, #64]	; 0x40
    	  char_number++;
 8001cc4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001cc8:	3301      	adds	r3, #1
 8001cca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    	  while(temp != 0){
 8001cce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d1ef      	bne.n	8001cb4 <espCommunication+0x794>
    	  }


    	  char pData2[13+char_number];
 8001cd4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001cd8:	f103 040d 	add.w	r4, r3, #13
 8001cdc:	1e63      	subs	r3, r4, #1
 8001cde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ce0:	4622      	mov	r2, r4
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	4690      	mov	r8, r2
 8001ce6:	4699      	mov	r9, r3
 8001ce8:	f04f 0200 	mov.w	r2, #0
 8001cec:	f04f 0300 	mov.w	r3, #0
 8001cf0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cf4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cf8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cfc:	4622      	mov	r2, r4
 8001cfe:	2300      	movs	r3, #0
 8001d00:	4692      	mov	sl, r2
 8001d02:	469b      	mov	fp, r3
 8001d04:	f04f 0200 	mov.w	r2, #0
 8001d08:	f04f 0300 	mov.w	r3, #0
 8001d0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001d10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001d14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001d18:	4623      	mov	r3, r4
 8001d1a:	3307      	adds	r3, #7
 8001d1c:	08db      	lsrs	r3, r3, #3
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	ebad 0d03 	sub.w	sp, sp, r3
 8001d24:	ab06      	add	r3, sp, #24
 8001d26:	3300      	adds	r3, #0
 8001d28:	62bb      	str	r3, [r7, #40]	; 0x28
//    	  sprintf(pData2, "AT+CIPSEND=%d\r\n", d);
    	  sprintf(pData2, "AT+CIPSEND=%d\r\n", postRequestLength);
 8001d2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d2c:	4923      	ldr	r1, [pc, #140]	; (8001dbc <espCommunication+0x89c>)
 8001d2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d30:	f007 fdfc 	bl	800992c <siprintf>
    	  while(atSend_USART3_DMA(pData2, sizeof(pData2)) != 0) {
 8001d34:	e002      	b.n	8001d3c <espCommunication+0x81c>
    	    vTaskDelay( pdMS_TO_TICKS( 10 ) );
 8001d36:	200a      	movs	r0, #10
 8001d38:	f006 f87e 	bl	8007e38 <vTaskDelay>
    	  while(atSend_USART3_DMA(pData2, sizeof(pData2)) != 0) {
 8001d3c:	b2a3      	uxth	r3, r4
 8001d3e:	4619      	mov	r1, r3
 8001d40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d42:	f7fe faf3 	bl	800032c <atSend_USART3_DMA>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1f4      	bne.n	8001d36 <espCommunication+0x816>
    	  }
//    	  while(atSend_USART3_DMA(pData, sizeof(pData)-1) != 0) {
//    	    vTaskDelay( pdMS_TO_TICKS( 10 ) );
//    	  }
    	  while(atSend_USART3_DMA(txBuffer, postRequestLength) != 0) {
 8001d4c:	e002      	b.n	8001d54 <espCommunication+0x834>
    	    vTaskDelay( pdMS_TO_TICKS( 10 ) );
 8001d4e:	200a      	movs	r0, #10
 8001d50:	f006 f872 	bl	8007e38 <vTaskDelay>
    	  while(atSend_USART3_DMA(txBuffer, postRequestLength) != 0) {
 8001d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4816      	ldr	r0, [pc, #88]	; (8001db4 <espCommunication+0x894>)
 8001d5c:	f7fe fae6 	bl	800032c <atSend_USART3_DMA>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1f3      	bne.n	8001d4e <espCommunication+0x82e>
    	  }
    	  xEventGroupClearBits(timerFdsEventGroup, 0xFFFFFF);
 8001d66:	4b0c      	ldr	r3, [pc, #48]	; (8001d98 <espCommunication+0x878>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f005 f85a 	bl	8006e28 <xEventGroupClearBits>
 8001d74:	46b5      	mov	sp, r6
      }

	  vTaskDelay( pdMS_TO_TICKS( 50 ) );
 8001d76:	2032      	movs	r0, #50	; 0x32
 8001d78:	f006 f85e 	bl	8007e38 <vTaskDelay>
  {
 8001d7c:	e524      	b.n	80017c8 <espCommunication+0x2a8>
 8001d7e:	bf00      	nop
 8001d80:	20000ce9 	.word	0x20000ce9
 8001d84:	00804021 	.word	0x00804021
 8001d88:	20000adc 	.word	0x20000adc
 8001d8c:	80402011 	.word	0x80402011
 8001d90:	20000ce8 	.word	0x20000ce8
 8001d94:	20000cdc 	.word	0x20000cdc
 8001d98:	20000ce4 	.word	0x20000ce4
 8001d9c:	20000888 	.word	0x20000888
 8001da0:	20000894 	.word	0x20000894
 8001da4:	200008ac 	.word	0x200008ac
 8001da8:	200008c4 	.word	0x200008c4
 8001dac:	200008cc 	.word	0x200008cc
 8001db0:	0800a4d4 	.word	0x0800a4d4
 8001db4:	200008dc 	.word	0x200008dc
 8001db8:	66666667 	.word	0x66666667
 8001dbc:	0800a4c4 	.word	0x0800a4c4

08001dc0 <encoderR>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_encoderR */
void encoderR(void const * argument)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN encoderR */
  /* Infinite loop */
  for(;;)
  {
	  vTaskDelay(pdMS_TO_TICKS(ENCDELAY));
 8001dc8:	2004      	movs	r0, #4
 8001dca:	f006 f835 	bl	8007e38 <vTaskDelay>

	  EncoderR.timeOld = EncoderR.timeNew;
 8001dce:	4b4b      	ldr	r3, [pc, #300]	; (8001efc <encoderR+0x13c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a4a      	ldr	r2, [pc, #296]	; (8001efc <encoderR+0x13c>)
 8001dd4:	6053      	str	r3, [r2, #4]
	  EncoderR.timeNew = TIM17->CNT;
 8001dd6:	4b4a      	ldr	r3, [pc, #296]	; (8001f00 <encoderR+0x140>)
 8001dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dda:	461a      	mov	r2, r3
 8001ddc:	4b47      	ldr	r3, [pc, #284]	; (8001efc <encoderR+0x13c>)
 8001dde:	601a      	str	r2, [r3, #0]
	  EncoderR.positionOld = EncoderR.positionNew;
 8001de0:	4b46      	ldr	r3, [pc, #280]	; (8001efc <encoderR+0x13c>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	4a45      	ldr	r2, [pc, #276]	; (8001efc <encoderR+0x13c>)
 8001de6:	60d3      	str	r3, [r2, #12]
	  EncoderR.positionNew = TIM1->CNT;
 8001de8:	4b46      	ldr	r3, [pc, #280]	; (8001f04 <encoderR+0x144>)
 8001dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dec:	461a      	mov	r2, r3
 8001dee:	4b43      	ldr	r3, [pc, #268]	; (8001efc <encoderR+0x13c>)
 8001df0:	609a      	str	r2, [r3, #8]

	  if(EncoderR.timeNew - EncoderR.timeOld == 0) {
 8001df2:	4b42      	ldr	r3, [pc, #264]	; (8001efc <encoderR+0x13c>)
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	4b41      	ldr	r3, [pc, #260]	; (8001efc <encoderR+0x13c>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d07c      	beq.n	8001ef8 <encoderR+0x138>
		  continue;
	  }

	  if (!EncoderR.posCntUpdate) {
 8001dfe:	4b3f      	ldr	r3, [pc, #252]	; (8001efc <encoderR+0x13c>)
 8001e00:	7c1b      	ldrb	r3, [r3, #16]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d121      	bne.n	8001e4a <encoderR+0x8a>
		  EncoderR.rpm = -((float)(((float)(EncoderR.positionNew - EncoderR.positionOld)) / ((float)(EncoderR.timeNew - EncoderR.timeOld)))*kToRpm); //(32*1000*60)/256;
 8001e06:	4b3d      	ldr	r3, [pc, #244]	; (8001efc <encoderR+0x13c>)
 8001e08:	689a      	ldr	r2, [r3, #8]
 8001e0a:	4b3c      	ldr	r3, [pc, #240]	; (8001efc <encoderR+0x13c>)
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	ee07 3a90 	vmov	s15, r3
 8001e14:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001e18:	4b38      	ldr	r3, [pc, #224]	; (8001efc <encoderR+0x13c>)
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	4b37      	ldr	r3, [pc, #220]	; (8001efc <encoderR+0x13c>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	ee07 3a90 	vmov	s15, r3
 8001e26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e2e:	4b36      	ldr	r3, [pc, #216]	; (8001f08 <encoderR+0x148>)
 8001e30:	edd3 7a00 	vldr	s15, [r3]
 8001e34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e38:	eef1 7a67 	vneg.f32	s15, s15
 8001e3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e40:	ee17 2a90 	vmov	r2, s15
 8001e44:	4b2d      	ldr	r3, [pc, #180]	; (8001efc <encoderR+0x13c>)
 8001e46:	615a      	str	r2, [r3, #20]
 8001e48:	e054      	b.n	8001ef4 <encoderR+0x134>
	  } else {
		  if((EncoderR.positionOld >= 0) && (EncoderR.positionOld <= 32768) ) {
 8001e4a:	4b2c      	ldr	r3, [pc, #176]	; (8001efc <encoderR+0x13c>)
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	db29      	blt.n	8001ea6 <encoderR+0xe6>
 8001e52:	4b2a      	ldr	r3, [pc, #168]	; (8001efc <encoderR+0x13c>)
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e5a:	dc24      	bgt.n	8001ea6 <encoderR+0xe6>
			  EncoderR.rpm = -((float)(((float)(EncoderR.positionNew - 65535 - EncoderR.positionOld)) / ((float)(EncoderR.timeNew - EncoderR.timeOld)))*kToRpm);
 8001e5c:	4b27      	ldr	r3, [pc, #156]	; (8001efc <encoderR+0x13c>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8001e64:	3bff      	subs	r3, #255	; 0xff
 8001e66:	4a25      	ldr	r2, [pc, #148]	; (8001efc <encoderR+0x13c>)
 8001e68:	68d2      	ldr	r2, [r2, #12]
 8001e6a:	1a9b      	subs	r3, r3, r2
 8001e6c:	ee07 3a90 	vmov	s15, r3
 8001e70:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001e74:	4b21      	ldr	r3, [pc, #132]	; (8001efc <encoderR+0x13c>)
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	4b20      	ldr	r3, [pc, #128]	; (8001efc <encoderR+0x13c>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	ee07 3a90 	vmov	s15, r3
 8001e82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e8a:	4b1f      	ldr	r3, [pc, #124]	; (8001f08 <encoderR+0x148>)
 8001e8c:	edd3 7a00 	vldr	s15, [r3]
 8001e90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e94:	eef1 7a67 	vneg.f32	s15, s15
 8001e98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e9c:	ee17 2a90 	vmov	r2, s15
 8001ea0:	4b16      	ldr	r3, [pc, #88]	; (8001efc <encoderR+0x13c>)
 8001ea2:	615a      	str	r2, [r3, #20]
 8001ea4:	e023      	b.n	8001eee <encoderR+0x12e>
		  } else {
			  EncoderR.rpm = -((float)(((float)(EncoderR.positionNew + (65535 - EncoderR.positionOld))) / ((float)(EncoderR.timeNew - EncoderR.timeOld)))*kToRpm);
 8001ea6:	4b15      	ldr	r3, [pc, #84]	; (8001efc <encoderR+0x13c>)
 8001ea8:	689a      	ldr	r2, [r3, #8]
 8001eaa:	4b14      	ldr	r3, [pc, #80]	; (8001efc <encoderR+0x13c>)
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001eb2:	33ff      	adds	r3, #255	; 0xff
 8001eb4:	4413      	add	r3, r2
 8001eb6:	ee07 3a90 	vmov	s15, r3
 8001eba:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ebe:	4b0f      	ldr	r3, [pc, #60]	; (8001efc <encoderR+0x13c>)
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	4b0e      	ldr	r3, [pc, #56]	; (8001efc <encoderR+0x13c>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	ee07 3a90 	vmov	s15, r3
 8001ecc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ed0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ed4:	4b0c      	ldr	r3, [pc, #48]	; (8001f08 <encoderR+0x148>)
 8001ed6:	edd3 7a00 	vldr	s15, [r3]
 8001eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ede:	eef1 7a67 	vneg.f32	s15, s15
 8001ee2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ee6:	ee17 2a90 	vmov	r2, s15
 8001eea:	4b04      	ldr	r3, [pc, #16]	; (8001efc <encoderR+0x13c>)
 8001eec:	615a      	str	r2, [r3, #20]
		  }
		  EncoderR.posCntUpdate = 0;
 8001eee:	4b03      	ldr	r3, [pc, #12]	; (8001efc <encoderR+0x13c>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	741a      	strb	r2, [r3, #16]
	  }
//	  taskYIELD();
	  __asm__ volatile("NOP");
 8001ef4:	bf00      	nop
 8001ef6:	e767      	b.n	8001dc8 <encoderR+0x8>
		  continue;
 8001ef8:	bf00      	nop
	  vTaskDelay(pdMS_TO_TICKS(ENCDELAY));
 8001efa:	e765      	b.n	8001dc8 <encoderR+0x8>
 8001efc:	20000894 	.word	0x20000894
 8001f00:	40014800 	.word	0x40014800
 8001f04:	40012c00 	.word	0x40012c00
 8001f08:	200008d4 	.word	0x200008d4

08001f0c <encoderL>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_encoderL */
void encoderL(void const * argument)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN encoderL */
  /* Infinite loop */
  for(;;)
  {
	  vTaskDelay(pdMS_TO_TICKS(ENCDELAY));
 8001f14:	2004      	movs	r0, #4
 8001f16:	f005 ff8f 	bl	8007e38 <vTaskDelay>

	  if(TIM2->CNT > TIM2->ARR) {
 8001f1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d907      	bls.n	8001f3a <encoderL+0x2e>
		  TIM2->EGR |= TIM_EGR_UG;
 8001f2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f2e:	695b      	ldr	r3, [r3, #20]
 8001f30:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f34:	f043 0301 	orr.w	r3, r3, #1
 8001f38:	6153      	str	r3, [r2, #20]
	  }

	  EncoderL.timeOld = EncoderL.timeNew;
 8001f3a:	4b49      	ldr	r3, [pc, #292]	; (8002060 <encoderL+0x154>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a48      	ldr	r2, [pc, #288]	; (8002060 <encoderL+0x154>)
 8001f40:	6053      	str	r3, [r2, #4]
	  EncoderL.timeNew = TIM17->CNT;
 8001f42:	4b48      	ldr	r3, [pc, #288]	; (8002064 <encoderL+0x158>)
 8001f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f46:	461a      	mov	r2, r3
 8001f48:	4b45      	ldr	r3, [pc, #276]	; (8002060 <encoderL+0x154>)
 8001f4a:	601a      	str	r2, [r3, #0]
	  EncoderL.positionOld = EncoderL.positionNew;
 8001f4c:	4b44      	ldr	r3, [pc, #272]	; (8002060 <encoderL+0x154>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	4a43      	ldr	r2, [pc, #268]	; (8002060 <encoderL+0x154>)
 8001f52:	60d3      	str	r3, [r2, #12]
	  EncoderL.positionNew = TIM2->CNT;
 8001f54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	4b40      	ldr	r3, [pc, #256]	; (8002060 <encoderL+0x154>)
 8001f5e:	609a      	str	r2, [r3, #8]

	  if(EncoderL.timeNew - EncoderL.timeOld == 0) {
 8001f60:	4b3f      	ldr	r3, [pc, #252]	; (8002060 <encoderL+0x154>)
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	4b3e      	ldr	r3, [pc, #248]	; (8002060 <encoderL+0x154>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d076      	beq.n	800205a <encoderL+0x14e>
		  continue;
	  }

	  if (!EncoderL.posCntUpdate) {
 8001f6c:	4b3c      	ldr	r3, [pc, #240]	; (8002060 <encoderL+0x154>)
 8001f6e:	7c1b      	ldrb	r3, [r3, #16]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d11f      	bne.n	8001fb4 <encoderL+0xa8>
		  EncoderL.rpm = ((float)(((float)(EncoderL.positionNew - EncoderL.positionOld)) / ((float)(EncoderL.timeNew - EncoderL.timeOld)))*kToRpm); //(32*1000*60)/256;
 8001f74:	4b3a      	ldr	r3, [pc, #232]	; (8002060 <encoderL+0x154>)
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	4b39      	ldr	r3, [pc, #228]	; (8002060 <encoderL+0x154>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	ee07 3a90 	vmov	s15, r3
 8001f82:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001f86:	4b36      	ldr	r3, [pc, #216]	; (8002060 <encoderL+0x154>)
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	4b35      	ldr	r3, [pc, #212]	; (8002060 <encoderL+0x154>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	ee07 3a90 	vmov	s15, r3
 8001f94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f9c:	4b32      	ldr	r3, [pc, #200]	; (8002068 <encoderL+0x15c>)
 8001f9e:	edd3 7a00 	vldr	s15, [r3]
 8001fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fa6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001faa:	ee17 2a90 	vmov	r2, s15
 8001fae:	4b2c      	ldr	r3, [pc, #176]	; (8002060 <encoderL+0x154>)
 8001fb0:	615a      	str	r2, [r3, #20]
 8001fb2:	e050      	b.n	8002056 <encoderL+0x14a>
	  } else {
		  if((EncoderL.positionOld >= 0) && (EncoderL.positionOld <= 32768) ) {
 8001fb4:	4b2a      	ldr	r3, [pc, #168]	; (8002060 <encoderL+0x154>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	db27      	blt.n	800200c <encoderL+0x100>
 8001fbc:	4b28      	ldr	r3, [pc, #160]	; (8002060 <encoderL+0x154>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fc4:	dc22      	bgt.n	800200c <encoderL+0x100>
			  EncoderL.rpm = ((float)(((float)(EncoderL.positionNew - 65535 - EncoderL.positionOld)) / ((float)(EncoderL.timeNew - EncoderL.timeOld)))*kToRpm);
 8001fc6:	4b26      	ldr	r3, [pc, #152]	; (8002060 <encoderL+0x154>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8001fce:	3bff      	subs	r3, #255	; 0xff
 8001fd0:	4a23      	ldr	r2, [pc, #140]	; (8002060 <encoderL+0x154>)
 8001fd2:	68d2      	ldr	r2, [r2, #12]
 8001fd4:	1a9b      	subs	r3, r3, r2
 8001fd6:	ee07 3a90 	vmov	s15, r3
 8001fda:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001fde:	4b20      	ldr	r3, [pc, #128]	; (8002060 <encoderL+0x154>)
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	4b1f      	ldr	r3, [pc, #124]	; (8002060 <encoderL+0x154>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	ee07 3a90 	vmov	s15, r3
 8001fec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ff0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ff4:	4b1c      	ldr	r3, [pc, #112]	; (8002068 <encoderL+0x15c>)
 8001ff6:	edd3 7a00 	vldr	s15, [r3]
 8001ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ffe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002002:	ee17 2a90 	vmov	r2, s15
 8002006:	4b16      	ldr	r3, [pc, #88]	; (8002060 <encoderL+0x154>)
 8002008:	615a      	str	r2, [r3, #20]
 800200a:	e021      	b.n	8002050 <encoderL+0x144>
		  } else {
			  EncoderL.rpm = ((float)(((float)(EncoderL.positionNew + (65535 - EncoderL.positionOld))) / ((float)(EncoderL.timeNew - EncoderL.timeOld)))*kToRpm);
 800200c:	4b14      	ldr	r3, [pc, #80]	; (8002060 <encoderL+0x154>)
 800200e:	689a      	ldr	r2, [r3, #8]
 8002010:	4b13      	ldr	r3, [pc, #76]	; (8002060 <encoderL+0x154>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8002018:	33ff      	adds	r3, #255	; 0xff
 800201a:	4413      	add	r3, r2
 800201c:	ee07 3a90 	vmov	s15, r3
 8002020:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002024:	4b0e      	ldr	r3, [pc, #56]	; (8002060 <encoderL+0x154>)
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	4b0d      	ldr	r3, [pc, #52]	; (8002060 <encoderL+0x154>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	ee07 3a90 	vmov	s15, r3
 8002032:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800203a:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <encoderL+0x15c>)
 800203c:	edd3 7a00 	vldr	s15, [r3]
 8002040:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002044:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002048:	ee17 2a90 	vmov	r2, s15
 800204c:	4b04      	ldr	r3, [pc, #16]	; (8002060 <encoderL+0x154>)
 800204e:	615a      	str	r2, [r3, #20]
		  }
		  EncoderL.posCntUpdate = 0;
 8002050:	4b03      	ldr	r3, [pc, #12]	; (8002060 <encoderL+0x154>)
 8002052:	2200      	movs	r2, #0
 8002054:	741a      	strb	r2, [r3, #16]
	  }
//	  taskYIELD();
	  __asm__ volatile("NOP");
 8002056:	bf00      	nop
 8002058:	e75c      	b.n	8001f14 <encoderL+0x8>
		  continue;
 800205a:	bf00      	nop
	  vTaskDelay(pdMS_TO_TICKS(ENCDELAY));
 800205c:	e75a      	b.n	8001f14 <encoderL+0x8>
 800205e:	bf00      	nop
 8002060:	200008ac 	.word	0x200008ac
 8002064:	40014800 	.word	0x40014800
 8002068:	200008d4 	.word	0x200008d4

0800206c <softwarePWMR>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_softwarePWMR */
void softwarePWMR(void const * argument)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b088      	sub	sp, #32
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN softwarePWMR */
	int errorValue = 0;
 8002074:	2300      	movs	r3, #0
 8002076:	613b      	str	r3, [r7, #16]
	float sumValue = 0;
 8002078:	f04f 0300 	mov.w	r3, #0
 800207c:	60fb      	str	r3, [r7, #12]
	float pValue = 0;
 800207e:	f04f 0300 	mov.w	r3, #0
 8002082:	60bb      	str	r3, [r7, #8]
	float iValue = 0;
 8002084:	f04f 0300 	mov.w	r3, #0
 8002088:	61fb      	str	r3, [r7, #28]
	float pwmFloatValue = 0;
 800208a:	f04f 0300 	mov.w	r3, #0
 800208e:	61bb      	str	r3, [r7, #24]
	vTaskDelay( pdMS_TO_TICKS( 10 ) );
 8002090:	200a      	movs	r0, #10
 8002092:	f005 fed1 	bl	8007e38 <vTaskDelay>
	GPIOA->ODR |= (1<<6); //EN34
 8002096:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800209a:	695b      	ldr	r3, [r3, #20]
 800209c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80020a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020a4:	6153      	str	r3, [r2, #20]

	SoftPwmR.reqValue = 6000;
 80020a6:	4b82      	ldr	r3, [pc, #520]	; (80022b0 <softwarePWMR+0x244>)
 80020a8:	f241 7270 	movw	r2, #6000	; 0x1770
 80020ac:	801a      	strh	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
	  float reqValueTemp = MAXRPM*((float)joyY/100);
 80020ae:	4b81      	ldr	r3, [pc, #516]	; (80022b4 <softwarePWMR+0x248>)
 80020b0:	f993 3000 	ldrsb.w	r3, [r3]
 80020b4:	ee07 3a90 	vmov	s15, r3
 80020b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020bc:	eddf 6a7e 	vldr	s13, [pc, #504]	; 80022b8 <softwarePWMR+0x24c>
 80020c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020c4:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80022bc <softwarePWMR+0x250>
 80020c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020cc:	edc7 7a05 	vstr	s15, [r7, #20]
	  if(joyX > 0) {
 80020d0:	4b7b      	ldr	r3, [pc, #492]	; (80022c0 <softwarePWMR+0x254>)
 80020d2:	f993 3000 	ldrsb.w	r3, [r3]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	dd14      	ble.n	8002104 <softwarePWMR+0x98>
		  reqValueTemp = reqValueTemp - reqValueTemp*((float)joyX/100);
 80020da:	4b79      	ldr	r3, [pc, #484]	; (80022c0 <softwarePWMR+0x254>)
 80020dc:	f993 3000 	ldrsb.w	r3, [r3]
 80020e0:	ee07 3a90 	vmov	s15, r3
 80020e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020e8:	eddf 6a73 	vldr	s13, [pc, #460]	; 80022b8 <softwarePWMR+0x24c>
 80020ec:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80020f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80020f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020f8:	ed97 7a05 	vldr	s14, [r7, #20]
 80020fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002100:	edc7 7a05 	vstr	s15, [r7, #20]
	  }
	  if((reqValueTemp >= - 50) && (reqValueTemp <= 50)) {
 8002104:	edd7 7a05 	vldr	s15, [r7, #20]
 8002108:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 80022c4 <softwarePWMR+0x258>
 800210c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002114:	db0b      	blt.n	800212e <softwarePWMR+0xc2>
 8002116:	edd7 7a05 	vldr	s15, [r7, #20]
 800211a:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80022c8 <softwarePWMR+0x25c>
 800211e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002126:	d802      	bhi.n	800212e <softwarePWMR+0xc2>
		  reqValueTemp = 0;
 8002128:	f04f 0300 	mov.w	r3, #0
 800212c:	617b      	str	r3, [r7, #20]
	  }
	  SoftPwmR.reqValue = (int16_t)reqValueTemp;
 800212e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002132:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002136:	ee17 3a90 	vmov	r3, s15
 800213a:	b21a      	sxth	r2, r3
 800213c:	4b5c      	ldr	r3, [pc, #368]	; (80022b0 <softwarePWMR+0x244>)
 800213e:	801a      	strh	r2, [r3, #0]

	  SoftPwmR.curValue = EncoderR.rpm;
 8002140:	4b62      	ldr	r3, [pc, #392]	; (80022cc <softwarePWMR+0x260>)
 8002142:	695b      	ldr	r3, [r3, #20]
 8002144:	b21a      	sxth	r2, r3
 8002146:	4b5a      	ldr	r3, [pc, #360]	; (80022b0 <softwarePWMR+0x244>)
 8002148:	805a      	strh	r2, [r3, #2]
	  errorValue = SoftPwmR.reqValue - SoftPwmR.curValue;
 800214a:	4b59      	ldr	r3, [pc, #356]	; (80022b0 <softwarePWMR+0x244>)
 800214c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002150:	461a      	mov	r2, r3
 8002152:	4b57      	ldr	r3, [pc, #348]	; (80022b0 <softwarePWMR+0x244>)
 8002154:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	613b      	str	r3, [r7, #16]
	  pValue = KP * errorValue;
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	ee07 3a90 	vmov	s15, r3
 8002162:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002166:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 80022d0 <softwarePWMR+0x264>
 800216a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800216e:	edc7 7a02 	vstr	s15, [r7, #8]
	  iValue += KI * errorValue;
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	ee07 3a90 	vmov	s15, r3
 8002178:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800217c:	ed9f 7a55 	vldr	s14, [pc, #340]	; 80022d4 <softwarePWMR+0x268>
 8002180:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002184:	ed97 7a07 	vldr	s14, [r7, #28]
 8002188:	ee77 7a27 	vadd.f32	s15, s14, s15
 800218c:	edc7 7a07 	vstr	s15, [r7, #28]
	  if(iValue > ((float)MAXRPM)) iValue = MAXRPM;
 8002190:	edd7 7a07 	vldr	s15, [r7, #28]
 8002194:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80022bc <softwarePWMR+0x250>
 8002198:	eef4 7ac7 	vcmpe.f32	s15, s14
 800219c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021a0:	dd02      	ble.n	80021a8 <softwarePWMR+0x13c>
 80021a2:	4b4d      	ldr	r3, [pc, #308]	; (80022d8 <softwarePWMR+0x26c>)
 80021a4:	61fb      	str	r3, [r7, #28]
 80021a6:	e00a      	b.n	80021be <softwarePWMR+0x152>
	  else if(iValue < ((float)-MAXRPM)) iValue = -MAXRPM;
 80021a8:	edd7 7a07 	vldr	s15, [r7, #28]
 80021ac:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80022dc <softwarePWMR+0x270>
 80021b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021b8:	d501      	bpl.n	80021be <softwarePWMR+0x152>
 80021ba:	4b49      	ldr	r3, [pc, #292]	; (80022e0 <softwarePWMR+0x274>)
 80021bc:	61fb      	str	r3, [r7, #28]
	  if((iValue <= 50) && (iValue >= -50)) {
 80021be:	edd7 7a07 	vldr	s15, [r7, #28]
 80021c2:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80022c8 <softwarePWMR+0x25c>
 80021c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ce:	d80b      	bhi.n	80021e8 <softwarePWMR+0x17c>
 80021d0:	edd7 7a07 	vldr	s15, [r7, #28]
 80021d4:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80022c4 <softwarePWMR+0x258>
 80021d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021e0:	db02      	blt.n	80021e8 <softwarePWMR+0x17c>
		  iValue = 0;
 80021e2:	f04f 0300 	mov.w	r3, #0
 80021e6:	61fb      	str	r3, [r7, #28]
	  }
	  sumValue = (pValue + iValue);
 80021e8:	ed97 7a02 	vldr	s14, [r7, #8]
 80021ec:	edd7 7a07 	vldr	s15, [r7, #28]
 80021f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021f4:	edc7 7a03 	vstr	s15, [r7, #12]
	  pwmFloatValue += ((((float)sumValue)/((float)MAXRPM))*100);
 80021f8:	ed97 7a03 	vldr	s14, [r7, #12]
 80021fc:	eddf 6a2f 	vldr	s13, [pc, #188]	; 80022bc <softwarePWMR+0x250>
 8002200:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002204:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80022b8 <softwarePWMR+0x24c>
 8002208:	ee67 7a87 	vmul.f32	s15, s15, s14
 800220c:	ed97 7a06 	vldr	s14, [r7, #24]
 8002210:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002214:	edc7 7a06 	vstr	s15, [r7, #24]
	  if(pwmFloatValue > 100) pwmFloatValue = 100;
 8002218:	edd7 7a06 	vldr	s15, [r7, #24]
 800221c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80022b8 <softwarePWMR+0x24c>
 8002220:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002228:	dd02      	ble.n	8002230 <softwarePWMR+0x1c4>
 800222a:	4b2e      	ldr	r3, [pc, #184]	; (80022e4 <softwarePWMR+0x278>)
 800222c:	61bb      	str	r3, [r7, #24]
 800222e:	e00a      	b.n	8002246 <softwarePWMR+0x1da>
	  else if(pwmFloatValue < -100) pwmFloatValue = -100;
 8002230:	edd7 7a06 	vldr	s15, [r7, #24]
 8002234:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80022e8 <softwarePWMR+0x27c>
 8002238:	eef4 7ac7 	vcmpe.f32	s15, s14
 800223c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002240:	d501      	bpl.n	8002246 <softwarePWMR+0x1da>
 8002242:	4b2a      	ldr	r3, [pc, #168]	; (80022ec <softwarePWMR+0x280>)
 8002244:	61bb      	str	r3, [r7, #24]
	  SoftPwmR.pwmValue = (int16_t)pwmFloatValue;
 8002246:	edd7 7a06 	vldr	s15, [r7, #24]
 800224a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800224e:	ee17 3a90 	vmov	r3, s15
 8002252:	b21a      	sxth	r2, r3
 8002254:	4b16      	ldr	r3, [pc, #88]	; (80022b0 <softwarePWMR+0x244>)
 8002256:	809a      	strh	r2, [r3, #4]
//	  if(SoftPwmR.pwmValue > 100) SoftPwmR.pwmValue = 100;
//	  else if(SoftPwmR.pwmValue < -100) SoftPwmR.pwmValue = -100;

	  if(SoftPwmR.pwmValue < 0) {
 8002258:	4b15      	ldr	r3, [pc, #84]	; (80022b0 <softwarePWMR+0x244>)
 800225a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	da0c      	bge.n	800227c <softwarePWMR+0x210>
		  TIM15->CCR1 = TIM15->ARR - SoftPwmR.pwmValue*(-1);
 8002262:	4b23      	ldr	r3, [pc, #140]	; (80022f0 <softwarePWMR+0x284>)
 8002264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002266:	4a12      	ldr	r2, [pc, #72]	; (80022b0 <softwarePWMR+0x244>)
 8002268:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800226c:	4611      	mov	r1, r2
 800226e:	4a20      	ldr	r2, [pc, #128]	; (80022f0 <softwarePWMR+0x284>)
 8002270:	440b      	add	r3, r1
 8002272:	6353      	str	r3, [r2, #52]	; 0x34
		  SoftPwmR.status = 2;
 8002274:	4b0e      	ldr	r3, [pc, #56]	; (80022b0 <softwarePWMR+0x244>)
 8002276:	2202      	movs	r2, #2
 8002278:	719a      	strb	r2, [r3, #6]
 800227a:	e014      	b.n	80022a6 <softwarePWMR+0x23a>
	  } else if(SoftPwmR.pwmValue > 0){
 800227c:	4b0c      	ldr	r3, [pc, #48]	; (80022b0 <softwarePWMR+0x244>)
 800227e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	dd0c      	ble.n	80022a0 <softwarePWMR+0x234>
		  TIM15->CCR1 = TIM15->ARR - SoftPwmR.pwmValue;
 8002286:	4b1a      	ldr	r3, [pc, #104]	; (80022f0 <softwarePWMR+0x284>)
 8002288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228a:	4a09      	ldr	r2, [pc, #36]	; (80022b0 <softwarePWMR+0x244>)
 800228c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8002290:	4611      	mov	r1, r2
 8002292:	4a17      	ldr	r2, [pc, #92]	; (80022f0 <softwarePWMR+0x284>)
 8002294:	1a5b      	subs	r3, r3, r1
 8002296:	6353      	str	r3, [r2, #52]	; 0x34
		  SoftPwmR.status = 1;
 8002298:	4b05      	ldr	r3, [pc, #20]	; (80022b0 <softwarePWMR+0x244>)
 800229a:	2201      	movs	r2, #1
 800229c:	719a      	strb	r2, [r3, #6]
 800229e:	e002      	b.n	80022a6 <softwarePWMR+0x23a>
	  } else {
		  SoftPwmR.status = 0;
 80022a0:	4b03      	ldr	r3, [pc, #12]	; (80022b0 <softwarePWMR+0x244>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	719a      	strb	r2, [r3, #6]
	  }

	  vTaskDelay(pdMS_TO_TICKS(ENCDELAY));
 80022a6:	2004      	movs	r0, #4
 80022a8:	f005 fdc6 	bl	8007e38 <vTaskDelay>
  {
 80022ac:	e6ff      	b.n	80020ae <softwarePWMR+0x42>
 80022ae:	bf00      	nop
 80022b0:	200008c4 	.word	0x200008c4
 80022b4:	20000ce9 	.word	0x20000ce9
 80022b8:	42c80000 	.word	0x42c80000
 80022bc:	464b2000 	.word	0x464b2000
 80022c0:	20000ce8 	.word	0x20000ce8
 80022c4:	c2480000 	.word	0xc2480000
 80022c8:	42480000 	.word	0x42480000
 80022cc:	20000894 	.word	0x20000894
 80022d0:	3c23d70a 	.word	0x3c23d70a
 80022d4:	360637bd 	.word	0x360637bd
 80022d8:	464b2000 	.word	0x464b2000
 80022dc:	c64b2000 	.word	0xc64b2000
 80022e0:	c64b2000 	.word	0xc64b2000
 80022e4:	42c80000 	.word	0x42c80000
 80022e8:	c2c80000 	.word	0xc2c80000
 80022ec:	c2c80000 	.word	0xc2c80000
 80022f0:	40014000 	.word	0x40014000

080022f4 <softwarePWML>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_softwarePWML */
void softwarePWML(void const * argument)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b088      	sub	sp, #32
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN softwarePWML */
	int errorValue = 0;
 80022fc:	2300      	movs	r3, #0
 80022fe:	613b      	str	r3, [r7, #16]
	float sumValue = 0;
 8002300:	f04f 0300 	mov.w	r3, #0
 8002304:	60fb      	str	r3, [r7, #12]
	float pValue = 0;
 8002306:	f04f 0300 	mov.w	r3, #0
 800230a:	60bb      	str	r3, [r7, #8]
	float iValue = 0;
 800230c:	f04f 0300 	mov.w	r3, #0
 8002310:	61fb      	str	r3, [r7, #28]
	float pwmFloatValue = 0;
 8002312:	f04f 0300 	mov.w	r3, #0
 8002316:	61bb      	str	r3, [r7, #24]
	vTaskDelay( pdMS_TO_TICKS( 10 ) );
 8002318:	200a      	movs	r0, #10
 800231a:	f005 fd8d 	bl	8007e38 <vTaskDelay>
	GPIOA->ODR |= (1<<3); //EN12
 800231e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002322:	695b      	ldr	r3, [r3, #20]
 8002324:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002328:	f043 0308 	orr.w	r3, r3, #8
 800232c:	6153      	str	r3, [r2, #20]

	SoftPwmL.reqValue = 6000;
 800232e:	4b82      	ldr	r3, [pc, #520]	; (8002538 <softwarePWML+0x244>)
 8002330:	f241 7270 	movw	r2, #6000	; 0x1770
 8002334:	801a      	strh	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
	  float reqValueTemp = MAXRPM*((float)joyY/100);
 8002336:	4b81      	ldr	r3, [pc, #516]	; (800253c <softwarePWML+0x248>)
 8002338:	f993 3000 	ldrsb.w	r3, [r3]
 800233c:	ee07 3a90 	vmov	s15, r3
 8002340:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002344:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8002540 <softwarePWML+0x24c>
 8002348:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800234c:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8002544 <softwarePWML+0x250>
 8002350:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002354:	edc7 7a05 	vstr	s15, [r7, #20]
	  if(joyX < 0) {
 8002358:	4b7b      	ldr	r3, [pc, #492]	; (8002548 <softwarePWML+0x254>)
 800235a:	f993 3000 	ldrsb.w	r3, [r3]
 800235e:	2b00      	cmp	r3, #0
 8002360:	da14      	bge.n	800238c <softwarePWML+0x98>
		  reqValueTemp = reqValueTemp - reqValueTemp*(-(float)joyX/100);
 8002362:	4b79      	ldr	r3, [pc, #484]	; (8002548 <softwarePWML+0x254>)
 8002364:	f993 3000 	ldrsb.w	r3, [r3]
 8002368:	ee07 3a90 	vmov	s15, r3
 800236c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002370:	eddf 6a73 	vldr	s13, [pc, #460]	; 8002540 <softwarePWML+0x24c>
 8002374:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002378:	edd7 7a05 	vldr	s15, [r7, #20]
 800237c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002380:	ed97 7a05 	vldr	s14, [r7, #20]
 8002384:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002388:	edc7 7a05 	vstr	s15, [r7, #20]
	  }
	  if((reqValueTemp >= - 50) && (reqValueTemp <= 50)) {
 800238c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002390:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 800254c <softwarePWML+0x258>
 8002394:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800239c:	db0b      	blt.n	80023b6 <softwarePWML+0xc2>
 800239e:	edd7 7a05 	vldr	s15, [r7, #20]
 80023a2:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8002550 <softwarePWML+0x25c>
 80023a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ae:	d802      	bhi.n	80023b6 <softwarePWML+0xc2>
		  reqValueTemp = 0;
 80023b0:	f04f 0300 	mov.w	r3, #0
 80023b4:	617b      	str	r3, [r7, #20]
	  }
	  SoftPwmL.reqValue = (int16_t)reqValueTemp;
 80023b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80023ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023be:	ee17 3a90 	vmov	r3, s15
 80023c2:	b21a      	sxth	r2, r3
 80023c4:	4b5c      	ldr	r3, [pc, #368]	; (8002538 <softwarePWML+0x244>)
 80023c6:	801a      	strh	r2, [r3, #0]

	  SoftPwmL.curValue = EncoderL.rpm;
 80023c8:	4b62      	ldr	r3, [pc, #392]	; (8002554 <softwarePWML+0x260>)
 80023ca:	695b      	ldr	r3, [r3, #20]
 80023cc:	b21a      	sxth	r2, r3
 80023ce:	4b5a      	ldr	r3, [pc, #360]	; (8002538 <softwarePWML+0x244>)
 80023d0:	805a      	strh	r2, [r3, #2]
	  errorValue = SoftPwmL.reqValue - SoftPwmL.curValue;
 80023d2:	4b59      	ldr	r3, [pc, #356]	; (8002538 <softwarePWML+0x244>)
 80023d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023d8:	461a      	mov	r2, r3
 80023da:	4b57      	ldr	r3, [pc, #348]	; (8002538 <softwarePWML+0x244>)
 80023dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	613b      	str	r3, [r7, #16]
	  pValue = KP * errorValue;
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	ee07 3a90 	vmov	s15, r3
 80023ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023ee:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8002558 <softwarePWML+0x264>
 80023f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023f6:	edc7 7a02 	vstr	s15, [r7, #8]
	  iValue += KI * errorValue;
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	ee07 3a90 	vmov	s15, r3
 8002400:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002404:	ed9f 7a55 	vldr	s14, [pc, #340]	; 800255c <softwarePWML+0x268>
 8002408:	ee67 7a87 	vmul.f32	s15, s15, s14
 800240c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002410:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002414:	edc7 7a07 	vstr	s15, [r7, #28]
	  if(iValue > ((float)MAXRPM)) iValue = MAXRPM;
 8002418:	edd7 7a07 	vldr	s15, [r7, #28]
 800241c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8002544 <softwarePWML+0x250>
 8002420:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002428:	dd02      	ble.n	8002430 <softwarePWML+0x13c>
 800242a:	4b4d      	ldr	r3, [pc, #308]	; (8002560 <softwarePWML+0x26c>)
 800242c:	61fb      	str	r3, [r7, #28]
 800242e:	e00a      	b.n	8002446 <softwarePWML+0x152>
	  else if(iValue < ((float)-MAXRPM)) iValue = -MAXRPM;
 8002430:	edd7 7a07 	vldr	s15, [r7, #28]
 8002434:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8002564 <softwarePWML+0x270>
 8002438:	eef4 7ac7 	vcmpe.f32	s15, s14
 800243c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002440:	d501      	bpl.n	8002446 <softwarePWML+0x152>
 8002442:	4b49      	ldr	r3, [pc, #292]	; (8002568 <softwarePWML+0x274>)
 8002444:	61fb      	str	r3, [r7, #28]
	  if((iValue <= 50) && (iValue >= -50)) {
 8002446:	edd7 7a07 	vldr	s15, [r7, #28]
 800244a:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8002550 <softwarePWML+0x25c>
 800244e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002456:	d80b      	bhi.n	8002470 <softwarePWML+0x17c>
 8002458:	edd7 7a07 	vldr	s15, [r7, #28]
 800245c:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800254c <softwarePWML+0x258>
 8002460:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002468:	db02      	blt.n	8002470 <softwarePWML+0x17c>
		  iValue = 0;
 800246a:	f04f 0300 	mov.w	r3, #0
 800246e:	61fb      	str	r3, [r7, #28]
	  }
	  sumValue = (pValue + iValue);
 8002470:	ed97 7a02 	vldr	s14, [r7, #8]
 8002474:	edd7 7a07 	vldr	s15, [r7, #28]
 8002478:	ee77 7a27 	vadd.f32	s15, s14, s15
 800247c:	edc7 7a03 	vstr	s15, [r7, #12]
	  pwmFloatValue += ((((float)sumValue)/((float)MAXRPM))*100);
 8002480:	ed97 7a03 	vldr	s14, [r7, #12]
 8002484:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8002544 <softwarePWML+0x250>
 8002488:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800248c:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8002540 <softwarePWML+0x24c>
 8002490:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002494:	ed97 7a06 	vldr	s14, [r7, #24]
 8002498:	ee77 7a27 	vadd.f32	s15, s14, s15
 800249c:	edc7 7a06 	vstr	s15, [r7, #24]
	  if(pwmFloatValue > 100) pwmFloatValue = 100;
 80024a0:	edd7 7a06 	vldr	s15, [r7, #24]
 80024a4:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002540 <softwarePWML+0x24c>
 80024a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024b0:	dd02      	ble.n	80024b8 <softwarePWML+0x1c4>
 80024b2:	4b2e      	ldr	r3, [pc, #184]	; (800256c <softwarePWML+0x278>)
 80024b4:	61bb      	str	r3, [r7, #24]
 80024b6:	e00a      	b.n	80024ce <softwarePWML+0x1da>
	  else if(pwmFloatValue < -100) pwmFloatValue = -100;
 80024b8:	edd7 7a06 	vldr	s15, [r7, #24]
 80024bc:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8002570 <softwarePWML+0x27c>
 80024c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024c8:	d501      	bpl.n	80024ce <softwarePWML+0x1da>
 80024ca:	4b2a      	ldr	r3, [pc, #168]	; (8002574 <softwarePWML+0x280>)
 80024cc:	61bb      	str	r3, [r7, #24]
	  SoftPwmL.pwmValue = (int16_t)pwmFloatValue;
 80024ce:	edd7 7a06 	vldr	s15, [r7, #24]
 80024d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024d6:	ee17 3a90 	vmov	r3, s15
 80024da:	b21a      	sxth	r2, r3
 80024dc:	4b16      	ldr	r3, [pc, #88]	; (8002538 <softwarePWML+0x244>)
 80024de:	809a      	strh	r2, [r3, #4]
//	  if(SoftPwmL.pwmValue > 100) SoftPwmL.pwmValue = 100;
//	  else if(SoftPwmL.pwmValue < -100) SoftPwmL.pwmValue = -100;

	  if(SoftPwmL.pwmValue < 0) {
 80024e0:	4b15      	ldr	r3, [pc, #84]	; (8002538 <softwarePWML+0x244>)
 80024e2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	da0c      	bge.n	8002504 <softwarePWML+0x210>
		  TIM15->CCR2 = TIM15->ARR - SoftPwmL.pwmValue*(-1);
 80024ea:	4b23      	ldr	r3, [pc, #140]	; (8002578 <softwarePWML+0x284>)
 80024ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ee:	4a12      	ldr	r2, [pc, #72]	; (8002538 <softwarePWML+0x244>)
 80024f0:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80024f4:	4611      	mov	r1, r2
 80024f6:	4a20      	ldr	r2, [pc, #128]	; (8002578 <softwarePWML+0x284>)
 80024f8:	440b      	add	r3, r1
 80024fa:	6393      	str	r3, [r2, #56]	; 0x38
		  SoftPwmL.status = 2;
 80024fc:	4b0e      	ldr	r3, [pc, #56]	; (8002538 <softwarePWML+0x244>)
 80024fe:	2202      	movs	r2, #2
 8002500:	719a      	strb	r2, [r3, #6]
 8002502:	e014      	b.n	800252e <softwarePWML+0x23a>
	  } else if(SoftPwmL.pwmValue > 0) {
 8002504:	4b0c      	ldr	r3, [pc, #48]	; (8002538 <softwarePWML+0x244>)
 8002506:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	dd0c      	ble.n	8002528 <softwarePWML+0x234>
		  TIM15->CCR2 = TIM15->ARR - SoftPwmL.pwmValue;
 800250e:	4b1a      	ldr	r3, [pc, #104]	; (8002578 <softwarePWML+0x284>)
 8002510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002512:	4a09      	ldr	r2, [pc, #36]	; (8002538 <softwarePWML+0x244>)
 8002514:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8002518:	4611      	mov	r1, r2
 800251a:	4a17      	ldr	r2, [pc, #92]	; (8002578 <softwarePWML+0x284>)
 800251c:	1a5b      	subs	r3, r3, r1
 800251e:	6393      	str	r3, [r2, #56]	; 0x38
		  SoftPwmL.status = 1;
 8002520:	4b05      	ldr	r3, [pc, #20]	; (8002538 <softwarePWML+0x244>)
 8002522:	2201      	movs	r2, #1
 8002524:	719a      	strb	r2, [r3, #6]
 8002526:	e002      	b.n	800252e <softwarePWML+0x23a>
	  } else {
		  SoftPwmL.status = 0;
 8002528:	4b03      	ldr	r3, [pc, #12]	; (8002538 <softwarePWML+0x244>)
 800252a:	2200      	movs	r2, #0
 800252c:	719a      	strb	r2, [r3, #6]
	  }

	  vTaskDelay(pdMS_TO_TICKS(ENCDELAY));
 800252e:	2004      	movs	r0, #4
 8002530:	f005 fc82 	bl	8007e38 <vTaskDelay>
  {
 8002534:	e6ff      	b.n	8002336 <softwarePWML+0x42>
 8002536:	bf00      	nop
 8002538:	200008cc 	.word	0x200008cc
 800253c:	20000ce9 	.word	0x20000ce9
 8002540:	42c80000 	.word	0x42c80000
 8002544:	464b2000 	.word	0x464b2000
 8002548:	20000ce8 	.word	0x20000ce8
 800254c:	c2480000 	.word	0xc2480000
 8002550:	42480000 	.word	0x42480000
 8002554:	200008ac 	.word	0x200008ac
 8002558:	3c23d70a 	.word	0x3c23d70a
 800255c:	360637bd 	.word	0x360637bd
 8002560:	464b2000 	.word	0x464b2000
 8002564:	c64b2000 	.word	0xc64b2000
 8002568:	c64b2000 	.word	0xc64b2000
 800256c:	42c80000 	.word	0x42c80000
 8002570:	c2c80000 	.word	0xc2c80000
 8002574:	c2c80000 	.word	0xc2c80000
 8002578:	40014000 	.word	0x40014000

0800257c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a04      	ldr	r2, [pc, #16]	; (800259c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d101      	bne.n	8002592 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800258e:	f000 fd2d 	bl	8002fec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002592:	bf00      	nop
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40001000 	.word	0x40001000

080025a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025a4:	b672      	cpsid	i
}
 80025a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025a8:	e7fe      	b.n	80025a8 <Error_Handler+0x8>
	...

080025ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025b2:	4b11      	ldr	r3, [pc, #68]	; (80025f8 <HAL_MspInit+0x4c>)
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	4a10      	ldr	r2, [pc, #64]	; (80025f8 <HAL_MspInit+0x4c>)
 80025b8:	f043 0301 	orr.w	r3, r3, #1
 80025bc:	6193      	str	r3, [r2, #24]
 80025be:	4b0e      	ldr	r3, [pc, #56]	; (80025f8 <HAL_MspInit+0x4c>)
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	607b      	str	r3, [r7, #4]
 80025c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025ca:	4b0b      	ldr	r3, [pc, #44]	; (80025f8 <HAL_MspInit+0x4c>)
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	4a0a      	ldr	r2, [pc, #40]	; (80025f8 <HAL_MspInit+0x4c>)
 80025d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d4:	61d3      	str	r3, [r2, #28]
 80025d6:	4b08      	ldr	r3, [pc, #32]	; (80025f8 <HAL_MspInit+0x4c>)
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025de:	603b      	str	r3, [r7, #0]
 80025e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80025e2:	2200      	movs	r2, #0
 80025e4:	210f      	movs	r1, #15
 80025e6:	f06f 0001 	mvn.w	r0, #1
 80025ea:	f001 fa99 	bl	8003b20 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025ee:	bf00      	nop
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40021000 	.word	0x40021000

080025fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b08a      	sub	sp, #40	; 0x28
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002604:	f107 0314 	add.w	r3, r7, #20
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	605a      	str	r2, [r3, #4]
 800260e:	609a      	str	r2, [r3, #8]
 8002610:	60da      	str	r2, [r3, #12]
 8002612:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800261c:	d124      	bne.n	8002668 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800261e:	4b14      	ldr	r3, [pc, #80]	; (8002670 <HAL_ADC_MspInit+0x74>)
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	4a13      	ldr	r2, [pc, #76]	; (8002670 <HAL_ADC_MspInit+0x74>)
 8002624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002628:	6153      	str	r3, [r2, #20]
 800262a:	4b11      	ldr	r3, [pc, #68]	; (8002670 <HAL_ADC_MspInit+0x74>)
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002632:	613b      	str	r3, [r7, #16]
 8002634:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002636:	4b0e      	ldr	r3, [pc, #56]	; (8002670 <HAL_ADC_MspInit+0x74>)
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	4a0d      	ldr	r2, [pc, #52]	; (8002670 <HAL_ADC_MspInit+0x74>)
 800263c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002640:	6153      	str	r3, [r2, #20]
 8002642:	4b0b      	ldr	r3, [pc, #44]	; (8002670 <HAL_ADC_MspInit+0x74>)
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800264e:	2304      	movs	r3, #4
 8002650:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002652:	2303      	movs	r3, #3
 8002654:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002656:	2300      	movs	r3, #0
 8002658:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800265a:	f107 0314 	add.w	r3, r7, #20
 800265e:	4619      	mov	r1, r3
 8002660:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002664:	f001 fb90 	bl	8003d88 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002668:	bf00      	nop
 800266a:	3728      	adds	r7, #40	; 0x28
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40021000 	.word	0x40021000

08002674 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b08a      	sub	sp, #40	; 0x28
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800267c:	f107 0314 	add.w	r3, r7, #20
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	605a      	str	r2, [r3, #4]
 8002686:	609a      	str	r2, [r3, #8]
 8002688:	60da      	str	r2, [r3, #12]
 800268a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a17      	ldr	r2, [pc, #92]	; (80026f0 <HAL_SPI_MspInit+0x7c>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d128      	bne.n	80026e8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002696:	4b17      	ldr	r3, [pc, #92]	; (80026f4 <HAL_SPI_MspInit+0x80>)
 8002698:	69db      	ldr	r3, [r3, #28]
 800269a:	4a16      	ldr	r2, [pc, #88]	; (80026f4 <HAL_SPI_MspInit+0x80>)
 800269c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026a0:	61d3      	str	r3, [r2, #28]
 80026a2:	4b14      	ldr	r3, [pc, #80]	; (80026f4 <HAL_SPI_MspInit+0x80>)
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026aa:	613b      	str	r3, [r7, #16]
 80026ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ae:	4b11      	ldr	r3, [pc, #68]	; (80026f4 <HAL_SPI_MspInit+0x80>)
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	4a10      	ldr	r2, [pc, #64]	; (80026f4 <HAL_SPI_MspInit+0x80>)
 80026b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026b8:	6153      	str	r3, [r2, #20]
 80026ba:	4b0e      	ldr	r3, [pc, #56]	; (80026f4 <HAL_SPI_MspInit+0x80>)
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026c2:	60fb      	str	r3, [r7, #12]
 80026c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80026c6:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80026ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026cc:	2302      	movs	r3, #2
 80026ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d0:	2300      	movs	r3, #0
 80026d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026d4:	2303      	movs	r3, #3
 80026d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80026d8:	2305      	movs	r3, #5
 80026da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026dc:	f107 0314 	add.w	r3, r7, #20
 80026e0:	4619      	mov	r1, r3
 80026e2:	4805      	ldr	r0, [pc, #20]	; (80026f8 <HAL_SPI_MspInit+0x84>)
 80026e4:	f001 fb50 	bl	8003d88 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80026e8:	bf00      	nop
 80026ea:	3728      	adds	r7, #40	; 0x28
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40003800 	.word	0x40003800
 80026f4:	40021000 	.word	0x40021000
 80026f8:	48000400 	.word	0x48000400

080026fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a1f      	ldr	r2, [pc, #124]	; (8002788 <HAL_TIM_Base_MspInit+0x8c>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d10c      	bne.n	8002728 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 800270e:	4b1f      	ldr	r3, [pc, #124]	; (800278c <HAL_TIM_Base_MspInit+0x90>)
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	4a1e      	ldr	r2, [pc, #120]	; (800278c <HAL_TIM_Base_MspInit+0x90>)
 8002714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002718:	6193      	str	r3, [r2, #24]
 800271a:	4b1c      	ldr	r3, [pc, #112]	; (800278c <HAL_TIM_Base_MspInit+0x90>)
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002722:	617b      	str	r3, [r7, #20]
 8002724:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002726:	e02a      	b.n	800277e <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM16)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a18      	ldr	r2, [pc, #96]	; (8002790 <HAL_TIM_Base_MspInit+0x94>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d10c      	bne.n	800274c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002732:	4b16      	ldr	r3, [pc, #88]	; (800278c <HAL_TIM_Base_MspInit+0x90>)
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	4a15      	ldr	r2, [pc, #84]	; (800278c <HAL_TIM_Base_MspInit+0x90>)
 8002738:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800273c:	6193      	str	r3, [r2, #24]
 800273e:	4b13      	ldr	r3, [pc, #76]	; (800278c <HAL_TIM_Base_MspInit+0x90>)
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002746:	613b      	str	r3, [r7, #16]
 8002748:	693b      	ldr	r3, [r7, #16]
}
 800274a:	e018      	b.n	800277e <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM17)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a10      	ldr	r2, [pc, #64]	; (8002794 <HAL_TIM_Base_MspInit+0x98>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d113      	bne.n	800277e <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002756:	4b0d      	ldr	r3, [pc, #52]	; (800278c <HAL_TIM_Base_MspInit+0x90>)
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	4a0c      	ldr	r2, [pc, #48]	; (800278c <HAL_TIM_Base_MspInit+0x90>)
 800275c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002760:	6193      	str	r3, [r2, #24]
 8002762:	4b0a      	ldr	r3, [pc, #40]	; (800278c <HAL_TIM_Base_MspInit+0x90>)
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800276a:	60fb      	str	r3, [r7, #12]
 800276c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 5, 0);
 800276e:	2200      	movs	r2, #0
 8002770:	2105      	movs	r1, #5
 8002772:	201a      	movs	r0, #26
 8002774:	f001 f9d4 	bl	8003b20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002778:	201a      	movs	r0, #26
 800277a:	f001 f9ed 	bl	8003b58 <HAL_NVIC_EnableIRQ>
}
 800277e:	bf00      	nop
 8002780:	3718      	adds	r7, #24
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	40014000 	.word	0x40014000
 800278c:	40021000 	.word	0x40021000
 8002790:	40014400 	.word	0x40014400
 8002794:	40014800 	.word	0x40014800

08002798 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b08a      	sub	sp, #40	; 0x28
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a0:	f107 0314 	add.w	r3, r7, #20
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	605a      	str	r2, [r3, #4]
 80027aa:	609a      	str	r2, [r3, #8]
 80027ac:	60da      	str	r2, [r3, #12]
 80027ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a3e      	ldr	r2, [pc, #248]	; (80028b0 <HAL_UART_MspInit+0x118>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d176      	bne.n	80028a8 <HAL_UART_MspInit+0x110>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80027ba:	4b3e      	ldr	r3, [pc, #248]	; (80028b4 <HAL_UART_MspInit+0x11c>)
 80027bc:	69db      	ldr	r3, [r3, #28]
 80027be:	4a3d      	ldr	r2, [pc, #244]	; (80028b4 <HAL_UART_MspInit+0x11c>)
 80027c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027c4:	61d3      	str	r3, [r2, #28]
 80027c6:	4b3b      	ldr	r3, [pc, #236]	; (80028b4 <HAL_UART_MspInit+0x11c>)
 80027c8:	69db      	ldr	r3, [r3, #28]
 80027ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027ce:	613b      	str	r3, [r7, #16]
 80027d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027d2:	4b38      	ldr	r3, [pc, #224]	; (80028b4 <HAL_UART_MspInit+0x11c>)
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	4a37      	ldr	r2, [pc, #220]	; (80028b4 <HAL_UART_MspInit+0x11c>)
 80027d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027dc:	6153      	str	r3, [r2, #20]
 80027de:	4b35      	ldr	r3, [pc, #212]	; (80028b4 <HAL_UART_MspInit+0x11c>)
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027e6:	60fb      	str	r3, [r7, #12]
 80027e8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80027ea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80027ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f0:	2302      	movs	r3, #2
 80027f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f4:	2300      	movs	r3, #0
 80027f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027f8:	2303      	movs	r3, #3
 80027fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80027fc:	2307      	movs	r3, #7
 80027fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002800:	f107 0314 	add.w	r3, r7, #20
 8002804:	4619      	mov	r1, r3
 8002806:	482c      	ldr	r0, [pc, #176]	; (80028b8 <HAL_UART_MspInit+0x120>)
 8002808:	f001 fabe 	bl	8003d88 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 800280c:	4b2b      	ldr	r3, [pc, #172]	; (80028bc <HAL_UART_MspInit+0x124>)
 800280e:	4a2c      	ldr	r2, [pc, #176]	; (80028c0 <HAL_UART_MspInit+0x128>)
 8002810:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002812:	4b2a      	ldr	r3, [pc, #168]	; (80028bc <HAL_UART_MspInit+0x124>)
 8002814:	2200      	movs	r2, #0
 8002816:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002818:	4b28      	ldr	r3, [pc, #160]	; (80028bc <HAL_UART_MspInit+0x124>)
 800281a:	2200      	movs	r2, #0
 800281c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800281e:	4b27      	ldr	r3, [pc, #156]	; (80028bc <HAL_UART_MspInit+0x124>)
 8002820:	2280      	movs	r2, #128	; 0x80
 8002822:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002824:	4b25      	ldr	r3, [pc, #148]	; (80028bc <HAL_UART_MspInit+0x124>)
 8002826:	2200      	movs	r2, #0
 8002828:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800282a:	4b24      	ldr	r3, [pc, #144]	; (80028bc <HAL_UART_MspInit+0x124>)
 800282c:	2200      	movs	r2, #0
 800282e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002830:	4b22      	ldr	r3, [pc, #136]	; (80028bc <HAL_UART_MspInit+0x124>)
 8002832:	2220      	movs	r2, #32
 8002834:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002836:	4b21      	ldr	r3, [pc, #132]	; (80028bc <HAL_UART_MspInit+0x124>)
 8002838:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800283c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800283e:	481f      	ldr	r0, [pc, #124]	; (80028bc <HAL_UART_MspInit+0x124>)
 8002840:	f001 f998 	bl	8003b74 <HAL_DMA_Init>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 800284a:	f7ff fea9 	bl	80025a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a1a      	ldr	r2, [pc, #104]	; (80028bc <HAL_UART_MspInit+0x124>)
 8002852:	675a      	str	r2, [r3, #116]	; 0x74
 8002854:	4a19      	ldr	r2, [pc, #100]	; (80028bc <HAL_UART_MspInit+0x124>)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 800285a:	4b1a      	ldr	r3, [pc, #104]	; (80028c4 <HAL_UART_MspInit+0x12c>)
 800285c:	4a1a      	ldr	r2, [pc, #104]	; (80028c8 <HAL_UART_MspInit+0x130>)
 800285e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002860:	4b18      	ldr	r3, [pc, #96]	; (80028c4 <HAL_UART_MspInit+0x12c>)
 8002862:	2210      	movs	r2, #16
 8002864:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002866:	4b17      	ldr	r3, [pc, #92]	; (80028c4 <HAL_UART_MspInit+0x12c>)
 8002868:	2200      	movs	r2, #0
 800286a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800286c:	4b15      	ldr	r3, [pc, #84]	; (80028c4 <HAL_UART_MspInit+0x12c>)
 800286e:	2280      	movs	r2, #128	; 0x80
 8002870:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002872:	4b14      	ldr	r3, [pc, #80]	; (80028c4 <HAL_UART_MspInit+0x12c>)
 8002874:	2200      	movs	r2, #0
 8002876:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002878:	4b12      	ldr	r3, [pc, #72]	; (80028c4 <HAL_UART_MspInit+0x12c>)
 800287a:	2200      	movs	r2, #0
 800287c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800287e:	4b11      	ldr	r3, [pc, #68]	; (80028c4 <HAL_UART_MspInit+0x12c>)
 8002880:	2200      	movs	r2, #0
 8002882:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002884:	4b0f      	ldr	r3, [pc, #60]	; (80028c4 <HAL_UART_MspInit+0x12c>)
 8002886:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800288a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800288c:	480d      	ldr	r0, [pc, #52]	; (80028c4 <HAL_UART_MspInit+0x12c>)
 800288e:	f001 f971 	bl	8003b74 <HAL_DMA_Init>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <HAL_UART_MspInit+0x104>
    {
      Error_Handler();
 8002898:	f7ff fe82 	bl	80025a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a09      	ldr	r2, [pc, #36]	; (80028c4 <HAL_UART_MspInit+0x12c>)
 80028a0:	671a      	str	r2, [r3, #112]	; 0x70
 80028a2:	4a08      	ldr	r2, [pc, #32]	; (80028c4 <HAL_UART_MspInit+0x12c>)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80028a8:	bf00      	nop
 80028aa:	3728      	adds	r7, #40	; 0x28
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	40004800 	.word	0x40004800
 80028b4:	40021000 	.word	0x40021000
 80028b8:	48000400 	.word	0x48000400
 80028bc:	200007cc 	.word	0x200007cc
 80028c0:	40020030 	.word	0x40020030
 80028c4:	20000810 	.word	0x20000810
 80028c8:	4002001c 	.word	0x4002001c

080028cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b08e      	sub	sp, #56	; 0x38
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80028d4:	2300      	movs	r3, #0
 80028d6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80028d8:	2300      	movs	r3, #0
 80028da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80028dc:	4b33      	ldr	r3, [pc, #204]	; (80029ac <HAL_InitTick+0xe0>)
 80028de:	69db      	ldr	r3, [r3, #28]
 80028e0:	4a32      	ldr	r2, [pc, #200]	; (80029ac <HAL_InitTick+0xe0>)
 80028e2:	f043 0310 	orr.w	r3, r3, #16
 80028e6:	61d3      	str	r3, [r2, #28]
 80028e8:	4b30      	ldr	r3, [pc, #192]	; (80029ac <HAL_InitTick+0xe0>)
 80028ea:	69db      	ldr	r3, [r3, #28]
 80028ec:	f003 0310 	and.w	r3, r3, #16
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80028f4:	f107 0210 	add.w	r2, r7, #16
 80028f8:	f107 0314 	add.w	r3, r7, #20
 80028fc:	4611      	mov	r1, r2
 80028fe:	4618      	mov	r0, r3
 8002900:	f002 fe64 	bl	80055cc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002904:	6a3b      	ldr	r3, [r7, #32]
 8002906:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800290a:	2b00      	cmp	r3, #0
 800290c:	d103      	bne.n	8002916 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800290e:	f002 fe19 	bl	8005544 <HAL_RCC_GetPCLK1Freq>
 8002912:	6378      	str	r0, [r7, #52]	; 0x34
 8002914:	e004      	b.n	8002920 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002916:	f002 fe15 	bl	8005544 <HAL_RCC_GetPCLK1Freq>
 800291a:	4603      	mov	r3, r0
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002922:	4a23      	ldr	r2, [pc, #140]	; (80029b0 <HAL_InitTick+0xe4>)
 8002924:	fba2 2303 	umull	r2, r3, r2, r3
 8002928:	0c9b      	lsrs	r3, r3, #18
 800292a:	3b01      	subs	r3, #1
 800292c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800292e:	4b21      	ldr	r3, [pc, #132]	; (80029b4 <HAL_InitTick+0xe8>)
 8002930:	4a21      	ldr	r2, [pc, #132]	; (80029b8 <HAL_InitTick+0xec>)
 8002932:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002934:	4b1f      	ldr	r3, [pc, #124]	; (80029b4 <HAL_InitTick+0xe8>)
 8002936:	f240 32e7 	movw	r2, #999	; 0x3e7
 800293a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800293c:	4a1d      	ldr	r2, [pc, #116]	; (80029b4 <HAL_InitTick+0xe8>)
 800293e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002940:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002942:	4b1c      	ldr	r3, [pc, #112]	; (80029b4 <HAL_InitTick+0xe8>)
 8002944:	2200      	movs	r2, #0
 8002946:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002948:	4b1a      	ldr	r3, [pc, #104]	; (80029b4 <HAL_InitTick+0xe8>)
 800294a:	2200      	movs	r2, #0
 800294c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800294e:	4b19      	ldr	r3, [pc, #100]	; (80029b4 <HAL_InitTick+0xe8>)
 8002950:	2200      	movs	r2, #0
 8002952:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002954:	4817      	ldr	r0, [pc, #92]	; (80029b4 <HAL_InitTick+0xe8>)
 8002956:	f003 f89a 	bl	8005a8e <HAL_TIM_Base_Init>
 800295a:	4603      	mov	r3, r0
 800295c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002960:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002964:	2b00      	cmp	r3, #0
 8002966:	d11b      	bne.n	80029a0 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002968:	4812      	ldr	r0, [pc, #72]	; (80029b4 <HAL_InitTick+0xe8>)
 800296a:	f003 f8e7 	bl	8005b3c <HAL_TIM_Base_Start_IT>
 800296e:	4603      	mov	r3, r0
 8002970:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002974:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002978:	2b00      	cmp	r3, #0
 800297a:	d111      	bne.n	80029a0 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800297c:	2036      	movs	r0, #54	; 0x36
 800297e:	f001 f8eb 	bl	8003b58 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2b0f      	cmp	r3, #15
 8002986:	d808      	bhi.n	800299a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002988:	2200      	movs	r2, #0
 800298a:	6879      	ldr	r1, [r7, #4]
 800298c:	2036      	movs	r0, #54	; 0x36
 800298e:	f001 f8c7 	bl	8003b20 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002992:	4a0a      	ldr	r2, [pc, #40]	; (80029bc <HAL_InitTick+0xf0>)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6013      	str	r3, [r2, #0]
 8002998:	e002      	b.n	80029a0 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80029a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3738      	adds	r7, #56	; 0x38
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	40021000 	.word	0x40021000
 80029b0:	431bde83 	.word	0x431bde83
 80029b4:	20000cec 	.word	0x20000cec
 80029b8:	40001000 	.word	0x40001000
 80029bc:	20000004 	.word	0x20000004

080029c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029c4:	e7fe      	b.n	80029c4 <NMI_Handler+0x4>

080029c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029c6:	b480      	push	{r7}
 80029c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029ca:	e7fe      	b.n	80029ca <HardFault_Handler+0x4>

080029cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029d0:	e7fe      	b.n	80029d0 <MemManage_Handler+0x4>

080029d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029d2:	b480      	push	{r7}
 80029d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029d6:	e7fe      	b.n	80029d6 <BusFault_Handler+0x4>

080029d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029dc:	e7fe      	b.n	80029dc <UsageFault_Handler+0x4>

080029de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029de:	b480      	push	{r7}
 80029e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029e2:	bf00      	nop
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */
	DMA1_Channel2->CCR &= ~DMA_CCR_EN;
 80029f0:	4b08      	ldr	r3, [pc, #32]	; (8002a14 <DMA1_Channel2_IRQHandler+0x28>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a07      	ldr	r2, [pc, #28]	; (8002a14 <DMA1_Channel2_IRQHandler+0x28>)
 80029f6:	f023 0301 	bic.w	r3, r3, #1
 80029fa:	6013      	str	r3, [r2, #0]
	USART3->CR3 &= ~USART_CR3_DMAT;
 80029fc:	4b06      	ldr	r3, [pc, #24]	; (8002a18 <DMA1_Channel2_IRQHandler+0x2c>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	4a05      	ldr	r2, [pc, #20]	; (8002a18 <DMA1_Channel2_IRQHandler+0x2c>)
 8002a02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a06:	6093      	str	r3, [r2, #8]
  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002a08:	4804      	ldr	r0, [pc, #16]	; (8002a1c <DMA1_Channel2_IRQHandler+0x30>)
 8002a0a:	f001 f8fa 	bl	8003c02 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002a0e:	bf00      	nop
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	4002001c 	.word	0x4002001c
 8002a18:	40004800 	.word	0x40004800
 8002a1c:	20000810 	.word	0x20000810

08002a20 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002a24:	4802      	ldr	r0, [pc, #8]	; (8002a30 <DMA1_Channel3_IRQHandler+0x10>)
 8002a26:	f001 f8ec 	bl	8003c02 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002a2a:	bf00      	nop
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	200007cc 	.word	0x200007cc

08002a34 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	if((TIM17->SR & TIM_SR_UIF) == TIM_SR_UIF) {
 8002a38:	4b0b      	ldr	r3, [pc, #44]	; (8002a68 <TIM1_TRG_COM_TIM17_IRQHandler+0x34>)
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d10c      	bne.n	8002a5e <TIM1_TRG_COM_TIM17_IRQHandler+0x2a>
		EncoderR.timeNew = -(65535 - EncoderR.timeNew);
 8002a44:	4b09      	ldr	r3, [pc, #36]	; (8002a6c <TIM1_TRG_COM_TIM17_IRQHandler+0x38>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8002a4c:	3bff      	subs	r3, #255	; 0xff
 8002a4e:	4a07      	ldr	r2, [pc, #28]	; (8002a6c <TIM1_TRG_COM_TIM17_IRQHandler+0x38>)
 8002a50:	6013      	str	r3, [r2, #0]
		TIM17->SR &= ~(TIM_SR_UIF);
 8002a52:	4b05      	ldr	r3, [pc, #20]	; (8002a68 <TIM1_TRG_COM_TIM17_IRQHandler+0x34>)
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	4a04      	ldr	r2, [pc, #16]	; (8002a68 <TIM1_TRG_COM_TIM17_IRQHandler+0x34>)
 8002a58:	f023 0301 	bic.w	r3, r3, #1
 8002a5c:	6113      	str	r3, [r2, #16]
	}

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002a5e:	4804      	ldr	r0, [pc, #16]	; (8002a70 <TIM1_TRG_COM_TIM17_IRQHandler+0x3c>)
 8002a60:	f003 f8c0 	bl	8005be4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8002a64:	bf00      	nop
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40014800 	.word	0x40014800
 8002a6c:	20000894 	.word	0x20000894
 8002a70:	200006f8 	.word	0x200006f8

08002a74 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002a78:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002a7c:	f001 fb0e 	bl	800409c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002a80:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002a84:	f001 fb0a 	bl	800409c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002a88:	bf00      	nop
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002a90:	4802      	ldr	r0, [pc, #8]	; (8002a9c <TIM6_DAC_IRQHandler+0x10>)
 8002a92:	f003 f8a7 	bl	8005be4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002a96:	bf00      	nop
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	20000cec 	.word	0x20000cec

08002aa0 <DMA1_Channel1_IRQHandler>:

/* USER CODE BEGIN 1 */
void DMA1_Channel1_IRQHandler(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
	__asm__ volatile("NOP");
 8002aa4:	bf00      	nop
	DMA1->IFCR |= DMA_IFCR_CGIF1;
 8002aa6:	4b06      	ldr	r3, [pc, #24]	; (8002ac0 <DMA1_Channel1_IRQHandler+0x20>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	4a05      	ldr	r2, [pc, #20]	; (8002ac0 <DMA1_Channel1_IRQHandler+0x20>)
 8002aac:	f043 0301 	orr.w	r3, r3, #1
 8002ab0:	6053      	str	r3, [r2, #4]
	__asm__ volatile("NOP");
 8002ab2:	bf00      	nop
}
 8002ab4:	bf00      	nop
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	40020000 	.word	0x40020000

08002ac4 <ADC1_IRQHandler>:

void ADC1_IRQHandler(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
	__asm__ volatile("NOP");
 8002ac8:	bf00      	nop
	ADC1->ISR |= ADC_ISR_AWD1;
 8002aca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ad8:	6013      	str	r3, [r2, #0]
	__asm__ volatile("NOP");
 8002ada:	bf00      	nop
}
 8002adc:	bf00      	nop
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
	...

08002ae8 <TIM1_UP_TIM16_IRQHandler>:

void TIM1_UP_TIM16_IRQHandler(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
	if((TIM1->SR & TIM_SR_UIF) == TIM_SR_UIF) {
 8002aec:	4b8c      	ldr	r3, [pc, #560]	; (8002d20 <TIM1_UP_TIM16_IRQHandler+0x238>)
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d108      	bne.n	8002b0a <TIM1_UP_TIM16_IRQHandler+0x22>
		EncoderR.posCntUpdate = 1;
 8002af8:	4b8a      	ldr	r3, [pc, #552]	; (8002d24 <TIM1_UP_TIM16_IRQHandler+0x23c>)
 8002afa:	2201      	movs	r2, #1
 8002afc:	741a      	strb	r2, [r3, #16]
		TIM1->SR &= ~(TIM_SR_UIF);
 8002afe:	4b88      	ldr	r3, [pc, #544]	; (8002d20 <TIM1_UP_TIM16_IRQHandler+0x238>)
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	4a87      	ldr	r2, [pc, #540]	; (8002d20 <TIM1_UP_TIM16_IRQHandler+0x238>)
 8002b04:	f023 0301 	bic.w	r3, r3, #1
 8002b08:	6113      	str	r3, [r2, #16]
	}
	if((TIM16->SR & TIM_SR_UIF) == TIM_SR_UIF) {
 8002b0a:	4b87      	ldr	r3, [pc, #540]	; (8002d28 <TIM1_UP_TIM16_IRQHandler+0x240>)
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	f040 80ff 	bne.w	8002d16 <TIM1_UP_TIM16_IRQHandler+0x22e>
		softCounterValue++;
 8002b18:	4b84      	ldr	r3, [pc, #528]	; (8002d2c <TIM1_UP_TIM16_IRQHandler+0x244>)
 8002b1a:	881b      	ldrh	r3, [r3, #0]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	4b82      	ldr	r3, [pc, #520]	; (8002d2c <TIM1_UP_TIM16_IRQHandler+0x244>)
 8002b22:	801a      	strh	r2, [r3, #0]

		if(softCounterValue >= 100) {
 8002b24:	4b81      	ldr	r3, [pc, #516]	; (8002d2c <TIM1_UP_TIM16_IRQHandler+0x244>)
 8002b26:	881b      	ldrh	r3, [r3, #0]
 8002b28:	2b63      	cmp	r3, #99	; 0x63
 8002b2a:	d902      	bls.n	8002b32 <TIM1_UP_TIM16_IRQHandler+0x4a>
			softCounterValue = 0;
 8002b2c:	4b7f      	ldr	r3, [pc, #508]	; (8002d2c <TIM1_UP_TIM16_IRQHandler+0x244>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	801a      	strh	r2, [r3, #0]
		}

		if(SoftPwmR.pwmValue >= 0) {
 8002b32:	4b7f      	ldr	r3, [pc, #508]	; (8002d30 <TIM1_UP_TIM16_IRQHandler+0x248>)
 8002b34:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	db33      	blt.n	8002ba4 <TIM1_UP_TIM16_IRQHandler+0xbc>
			if(softCounterValue < SoftPwmR.pwmValue) {
 8002b3c:	4b7b      	ldr	r3, [pc, #492]	; (8002d2c <TIM1_UP_TIM16_IRQHandler+0x244>)
 8002b3e:	881b      	ldrh	r3, [r3, #0]
 8002b40:	461a      	mov	r2, r3
 8002b42:	4b7b      	ldr	r3, [pc, #492]	; (8002d30 <TIM1_UP_TIM16_IRQHandler+0x248>)
 8002b44:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	da15      	bge.n	8002b78 <TIM1_UP_TIM16_IRQHandler+0x90>
				if(SoftPwmR.status != 1) {
 8002b4c:	4b78      	ldr	r3, [pc, #480]	; (8002d30 <TIM1_UP_TIM16_IRQHandler+0x248>)
 8002b4e:	799b      	ldrb	r3, [r3, #6]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d060      	beq.n	8002c16 <TIM1_UP_TIM16_IRQHandler+0x12e>
					GPIOA->ODR &= ~(1<<7); //_3A
 8002b54:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002b5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b62:	6153      	str	r3, [r2, #20]
					GPIOB->ODR |= (1<<0); //_4A
 8002b64:	4b73      	ldr	r3, [pc, #460]	; (8002d34 <TIM1_UP_TIM16_IRQHandler+0x24c>)
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	4a72      	ldr	r2, [pc, #456]	; (8002d34 <TIM1_UP_TIM16_IRQHandler+0x24c>)
 8002b6a:	f043 0301 	orr.w	r3, r3, #1
 8002b6e:	6153      	str	r3, [r2, #20]
					SoftPwmR.status = 1;
 8002b70:	4b6f      	ldr	r3, [pc, #444]	; (8002d30 <TIM1_UP_TIM16_IRQHandler+0x248>)
 8002b72:	2201      	movs	r2, #1
 8002b74:	719a      	strb	r2, [r3, #6]
 8002b76:	e04e      	b.n	8002c16 <TIM1_UP_TIM16_IRQHandler+0x12e>
				}
			} else {
				if(SoftPwmR.status != 0) {
 8002b78:	4b6d      	ldr	r3, [pc, #436]	; (8002d30 <TIM1_UP_TIM16_IRQHandler+0x248>)
 8002b7a:	799b      	ldrb	r3, [r3, #6]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d04a      	beq.n	8002c16 <TIM1_UP_TIM16_IRQHandler+0x12e>
					GPIOA->ODR &= ~(1<<7); //_3A
 8002b80:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002b8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b8e:	6153      	str	r3, [r2, #20]
					GPIOB->ODR &= ~(1<<0); //_4A
 8002b90:	4b68      	ldr	r3, [pc, #416]	; (8002d34 <TIM1_UP_TIM16_IRQHandler+0x24c>)
 8002b92:	695b      	ldr	r3, [r3, #20]
 8002b94:	4a67      	ldr	r2, [pc, #412]	; (8002d34 <TIM1_UP_TIM16_IRQHandler+0x24c>)
 8002b96:	f023 0301 	bic.w	r3, r3, #1
 8002b9a:	6153      	str	r3, [r2, #20]
					SoftPwmR.status = 0;
 8002b9c:	4b64      	ldr	r3, [pc, #400]	; (8002d30 <TIM1_UP_TIM16_IRQHandler+0x248>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	719a      	strb	r2, [r3, #6]
 8002ba2:	e038      	b.n	8002c16 <TIM1_UP_TIM16_IRQHandler+0x12e>
				}
			}
		} else if(SoftPwmR.pwmValue < 0) {
 8002ba4:	4b62      	ldr	r3, [pc, #392]	; (8002d30 <TIM1_UP_TIM16_IRQHandler+0x248>)
 8002ba6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	da33      	bge.n	8002c16 <TIM1_UP_TIM16_IRQHandler+0x12e>
			if(softCounterValue < (-SoftPwmR.pwmValue)) {
 8002bae:	4b5f      	ldr	r3, [pc, #380]	; (8002d2c <TIM1_UP_TIM16_IRQHandler+0x244>)
 8002bb0:	881b      	ldrh	r3, [r3, #0]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	4b5e      	ldr	r3, [pc, #376]	; (8002d30 <TIM1_UP_TIM16_IRQHandler+0x248>)
 8002bb6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002bba:	425b      	negs	r3, r3
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	da15      	bge.n	8002bec <TIM1_UP_TIM16_IRQHandler+0x104>
				if(SoftPwmR.status != 2) {
 8002bc0:	4b5b      	ldr	r3, [pc, #364]	; (8002d30 <TIM1_UP_TIM16_IRQHandler+0x248>)
 8002bc2:	799b      	ldrb	r3, [r3, #6]
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d026      	beq.n	8002c16 <TIM1_UP_TIM16_IRQHandler+0x12e>
					GPIOA->ODR |= (1<<7); //_3A
 8002bc8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002bd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bd6:	6153      	str	r3, [r2, #20]
					GPIOB->ODR &= ~(1<<0); //_4A
 8002bd8:	4b56      	ldr	r3, [pc, #344]	; (8002d34 <TIM1_UP_TIM16_IRQHandler+0x24c>)
 8002bda:	695b      	ldr	r3, [r3, #20]
 8002bdc:	4a55      	ldr	r2, [pc, #340]	; (8002d34 <TIM1_UP_TIM16_IRQHandler+0x24c>)
 8002bde:	f023 0301 	bic.w	r3, r3, #1
 8002be2:	6153      	str	r3, [r2, #20]
					SoftPwmR.status = 2;
 8002be4:	4b52      	ldr	r3, [pc, #328]	; (8002d30 <TIM1_UP_TIM16_IRQHandler+0x248>)
 8002be6:	2202      	movs	r2, #2
 8002be8:	719a      	strb	r2, [r3, #6]
 8002bea:	e014      	b.n	8002c16 <TIM1_UP_TIM16_IRQHandler+0x12e>
				}
			} else {
				if(SoftPwmR.status != 0) {
 8002bec:	4b50      	ldr	r3, [pc, #320]	; (8002d30 <TIM1_UP_TIM16_IRQHandler+0x248>)
 8002bee:	799b      	ldrb	r3, [r3, #6]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d010      	beq.n	8002c16 <TIM1_UP_TIM16_IRQHandler+0x12e>
					GPIOA->ODR &= ~(1<<7); //_3A
 8002bf4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002bfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c02:	6153      	str	r3, [r2, #20]
					GPIOB->ODR &= ~(1<<0); //_4A
 8002c04:	4b4b      	ldr	r3, [pc, #300]	; (8002d34 <TIM1_UP_TIM16_IRQHandler+0x24c>)
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	4a4a      	ldr	r2, [pc, #296]	; (8002d34 <TIM1_UP_TIM16_IRQHandler+0x24c>)
 8002c0a:	f023 0301 	bic.w	r3, r3, #1
 8002c0e:	6153      	str	r3, [r2, #20]
					SoftPwmR.status = 0;
 8002c10:	4b47      	ldr	r3, [pc, #284]	; (8002d30 <TIM1_UP_TIM16_IRQHandler+0x248>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	719a      	strb	r2, [r3, #6]
				}
			}
		}

		if(SoftPwmL.pwmValue >= 0) {
 8002c16:	4b48      	ldr	r3, [pc, #288]	; (8002d38 <TIM1_UP_TIM16_IRQHandler+0x250>)
 8002c18:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	db37      	blt.n	8002c90 <TIM1_UP_TIM16_IRQHandler+0x1a8>
			if(softCounterValue < SoftPwmL.pwmValue) {
 8002c20:	4b42      	ldr	r3, [pc, #264]	; (8002d2c <TIM1_UP_TIM16_IRQHandler+0x244>)
 8002c22:	881b      	ldrh	r3, [r3, #0]
 8002c24:	461a      	mov	r2, r3
 8002c26:	4b44      	ldr	r3, [pc, #272]	; (8002d38 <TIM1_UP_TIM16_IRQHandler+0x250>)
 8002c28:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	da17      	bge.n	8002c60 <TIM1_UP_TIM16_IRQHandler+0x178>
				if(SoftPwmL.status != 1) {
 8002c30:	4b41      	ldr	r3, [pc, #260]	; (8002d38 <TIM1_UP_TIM16_IRQHandler+0x250>)
 8002c32:	799b      	ldrb	r3, [r3, #6]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d068      	beq.n	8002d0a <TIM1_UP_TIM16_IRQHandler+0x222>
					GPIOA->ODR &= ~(1<<4); //_1A
 8002c38:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002c42:	f023 0310 	bic.w	r3, r3, #16
 8002c46:	6153      	str	r3, [r2, #20]
					GPIOA->ODR |= (1<<5); //_2A
 8002c48:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002c52:	f043 0320 	orr.w	r3, r3, #32
 8002c56:	6153      	str	r3, [r2, #20]
					SoftPwmL.status = 1;
 8002c58:	4b37      	ldr	r3, [pc, #220]	; (8002d38 <TIM1_UP_TIM16_IRQHandler+0x250>)
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	719a      	strb	r2, [r3, #6]
 8002c5e:	e054      	b.n	8002d0a <TIM1_UP_TIM16_IRQHandler+0x222>
				}
			} else {
				if(SoftPwmL.status != 0) {
 8002c60:	4b35      	ldr	r3, [pc, #212]	; (8002d38 <TIM1_UP_TIM16_IRQHandler+0x250>)
 8002c62:	799b      	ldrb	r3, [r3, #6]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d050      	beq.n	8002d0a <TIM1_UP_TIM16_IRQHandler+0x222>
					GPIOA->ODR &= ~(1<<4); //_1A
 8002c68:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002c72:	f023 0310 	bic.w	r3, r3, #16
 8002c76:	6153      	str	r3, [r2, #20]
					GPIOA->ODR &= ~(1<<5); //_2A
 8002c78:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002c82:	f023 0320 	bic.w	r3, r3, #32
 8002c86:	6153      	str	r3, [r2, #20]
					SoftPwmL.status = 0;
 8002c88:	4b2b      	ldr	r3, [pc, #172]	; (8002d38 <TIM1_UP_TIM16_IRQHandler+0x250>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	719a      	strb	r2, [r3, #6]
 8002c8e:	e03c      	b.n	8002d0a <TIM1_UP_TIM16_IRQHandler+0x222>
				}
			}
		} else if(SoftPwmL.pwmValue < 0) {
 8002c90:	4b29      	ldr	r3, [pc, #164]	; (8002d38 <TIM1_UP_TIM16_IRQHandler+0x250>)
 8002c92:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	da37      	bge.n	8002d0a <TIM1_UP_TIM16_IRQHandler+0x222>
			if(softCounterValue < (-SoftPwmL.pwmValue)) {
 8002c9a:	4b24      	ldr	r3, [pc, #144]	; (8002d2c <TIM1_UP_TIM16_IRQHandler+0x244>)
 8002c9c:	881b      	ldrh	r3, [r3, #0]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	4b25      	ldr	r3, [pc, #148]	; (8002d38 <TIM1_UP_TIM16_IRQHandler+0x250>)
 8002ca2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002ca6:	425b      	negs	r3, r3
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	da17      	bge.n	8002cdc <TIM1_UP_TIM16_IRQHandler+0x1f4>
				if(SoftPwmL.status != 2) {
 8002cac:	4b22      	ldr	r3, [pc, #136]	; (8002d38 <TIM1_UP_TIM16_IRQHandler+0x250>)
 8002cae:	799b      	ldrb	r3, [r3, #6]
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d02a      	beq.n	8002d0a <TIM1_UP_TIM16_IRQHandler+0x222>
					GPIOA->ODR |= (1<<4); //_1A
 8002cb4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002cbe:	f043 0310 	orr.w	r3, r3, #16
 8002cc2:	6153      	str	r3, [r2, #20]
					GPIOA->ODR &= ~(1<<5); //_2A
 8002cc4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002cce:	f023 0320 	bic.w	r3, r3, #32
 8002cd2:	6153      	str	r3, [r2, #20]
					SoftPwmL.status = 2;
 8002cd4:	4b18      	ldr	r3, [pc, #96]	; (8002d38 <TIM1_UP_TIM16_IRQHandler+0x250>)
 8002cd6:	2202      	movs	r2, #2
 8002cd8:	719a      	strb	r2, [r3, #6]
 8002cda:	e016      	b.n	8002d0a <TIM1_UP_TIM16_IRQHandler+0x222>
				}
			} else {
				if(SoftPwmL.status != 0) {
 8002cdc:	4b16      	ldr	r3, [pc, #88]	; (8002d38 <TIM1_UP_TIM16_IRQHandler+0x250>)
 8002cde:	799b      	ldrb	r3, [r3, #6]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d012      	beq.n	8002d0a <TIM1_UP_TIM16_IRQHandler+0x222>
					GPIOA->ODR &= ~(1<<4); //_1A
 8002ce4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002cee:	f023 0310 	bic.w	r3, r3, #16
 8002cf2:	6153      	str	r3, [r2, #20]
					GPIOA->ODR &= ~(1<<5); //_2A
 8002cf4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002cfe:	f023 0320 	bic.w	r3, r3, #32
 8002d02:	6153      	str	r3, [r2, #20]
					SoftPwmL.status = 0;
 8002d04:	4b0c      	ldr	r3, [pc, #48]	; (8002d38 <TIM1_UP_TIM16_IRQHandler+0x250>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	719a      	strb	r2, [r3, #6]
				}
			}
		}

		TIM16->SR &= ~(TIM_SR_UIF);
 8002d0a:	4b07      	ldr	r3, [pc, #28]	; (8002d28 <TIM1_UP_TIM16_IRQHandler+0x240>)
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	4a06      	ldr	r2, [pc, #24]	; (8002d28 <TIM1_UP_TIM16_IRQHandler+0x240>)
 8002d10:	f023 0301 	bic.w	r3, r3, #1
 8002d14:	6113      	str	r3, [r2, #16]
	}

}
 8002d16:	bf00      	nop
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr
 8002d20:	40012c00 	.word	0x40012c00
 8002d24:	20000894 	.word	0x20000894
 8002d28:	40014400 	.word	0x40014400
 8002d2c:	200008d8 	.word	0x200008d8
 8002d30:	200008c4 	.word	0x200008c4
 8002d34:	48000400 	.word	0x48000400
 8002d38:	200008cc 	.word	0x200008cc

08002d3c <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
	__asm__ volatile("NOP");
 8002d40:	bf00      	nop
	EncoderL.posCntUpdate = 1;
 8002d42:	4b08      	ldr	r3, [pc, #32]	; (8002d64 <TIM2_IRQHandler+0x28>)
 8002d44:	2201      	movs	r2, #1
 8002d46:	741a      	strb	r2, [r3, #16]
	TIM2->SR &= ~(TIM_SR_UIF);
 8002d48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d52:	f023 0301 	bic.w	r3, r3, #1
 8002d56:	6113      	str	r3, [r2, #16]
	__asm__ volatile("NOP");
 8002d58:	bf00      	nop
}
 8002d5a:	bf00      	nop
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	200008ac 	.word	0x200008ac

08002d68 <TIM1_BRK_TIM15_IRQHandler>:

void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
	if((TIM15->SR & TIM_SR_UIF) == TIM_SR_UIF) {
 8002d6c:	4b57      	ldr	r3, [pc, #348]	; (8002ecc <TIM1_BRK_TIM15_IRQHandler+0x164>)
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	f003 0301 	and.w	r3, r3, #1
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d12c      	bne.n	8002dd2 <TIM1_BRK_TIM15_IRQHandler+0x6a>
		__asm__ volatile("NOP");
 8002d78:	bf00      	nop

		GPIOA->ODR &= ~(1<<7); //_3A
 8002d7a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002d7e:	695b      	ldr	r3, [r3, #20]
 8002d80:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002d84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d88:	6153      	str	r3, [r2, #20]
		GPIOB->ODR &= ~(1<<0); //_4A
 8002d8a:	4b51      	ldr	r3, [pc, #324]	; (8002ed0 <TIM1_BRK_TIM15_IRQHandler+0x168>)
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	4a50      	ldr	r2, [pc, #320]	; (8002ed0 <TIM1_BRK_TIM15_IRQHandler+0x168>)
 8002d90:	f023 0301 	bic.w	r3, r3, #1
 8002d94:	6153      	str	r3, [r2, #20]

		GPIOA->ODR &= ~(1<<4); //_1A
 8002d96:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002d9a:	695b      	ldr	r3, [r3, #20]
 8002d9c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002da0:	f023 0310 	bic.w	r3, r3, #16
 8002da4:	6153      	str	r3, [r2, #20]
		GPIOA->ODR &= ~(1<<5); //_2A
 8002da6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002daa:	695b      	ldr	r3, [r3, #20]
 8002dac:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002db0:	f023 0320 	bic.w	r3, r3, #32
 8002db4:	6153      	str	r3, [r2, #20]

		TIM15->SR &= ~(TIM_SR_UIF);
 8002db6:	4b45      	ldr	r3, [pc, #276]	; (8002ecc <TIM1_BRK_TIM15_IRQHandler+0x164>)
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	4a44      	ldr	r2, [pc, #272]	; (8002ecc <TIM1_BRK_TIM15_IRQHandler+0x164>)
 8002dbc:	f023 0301 	bic.w	r3, r3, #1
 8002dc0:	6113      	str	r3, [r2, #16]
		if((TIM15->SR & TIM_SR_UIF) == 0) {
 8002dc2:	4b42      	ldr	r3, [pc, #264]	; (8002ecc <TIM1_BRK_TIM15_IRQHandler+0x164>)
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d100      	bne.n	8002dd0 <TIM1_BRK_TIM15_IRQHandler+0x68>
			__asm__ volatile("NOP");
 8002dce:	bf00      	nop
		}
		__asm__ volatile("NOP");
 8002dd0:	bf00      	nop
	}

	if((TIM15->SR & TIM_SR_CC1IF) == TIM_SR_CC1IF) {
 8002dd2:	4b3e      	ldr	r3, [pc, #248]	; (8002ecc <TIM1_BRK_TIM15_IRQHandler+0x164>)
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d133      	bne.n	8002e46 <TIM1_BRK_TIM15_IRQHandler+0xde>
		__asm__ volatile("NOP");
 8002dde:	bf00      	nop

		if(SoftPwmR.status == 1) {
 8002de0:	4b3c      	ldr	r3, [pc, #240]	; (8002ed4 <TIM1_BRK_TIM15_IRQHandler+0x16c>)
 8002de2:	799b      	ldrb	r3, [r3, #6]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d10e      	bne.n	8002e06 <TIM1_BRK_TIM15_IRQHandler+0x9e>
			GPIOA->ODR |= (1<<7); //_3A
 8002de8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002dec:	695b      	ldr	r3, [r3, #20]
 8002dee:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002df2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002df6:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~(1<<0); //_4A
 8002df8:	4b35      	ldr	r3, [pc, #212]	; (8002ed0 <TIM1_BRK_TIM15_IRQHandler+0x168>)
 8002dfa:	695b      	ldr	r3, [r3, #20]
 8002dfc:	4a34      	ldr	r2, [pc, #208]	; (8002ed0 <TIM1_BRK_TIM15_IRQHandler+0x168>)
 8002dfe:	f023 0301 	bic.w	r3, r3, #1
 8002e02:	6153      	str	r3, [r2, #20]
 8002e04:	e011      	b.n	8002e2a <TIM1_BRK_TIM15_IRQHandler+0xc2>
		} else if(SoftPwmR.status == 2) {
 8002e06:	4b33      	ldr	r3, [pc, #204]	; (8002ed4 <TIM1_BRK_TIM15_IRQHandler+0x16c>)
 8002e08:	799b      	ldrb	r3, [r3, #6]
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d10d      	bne.n	8002e2a <TIM1_BRK_TIM15_IRQHandler+0xc2>
			GPIOA->ODR &= ~(1<<7); //_3A
 8002e0e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002e12:	695b      	ldr	r3, [r3, #20]
 8002e14:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002e18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e1c:	6153      	str	r3, [r2, #20]
			GPIOB->ODR |= (1<<0); //_4A
 8002e1e:	4b2c      	ldr	r3, [pc, #176]	; (8002ed0 <TIM1_BRK_TIM15_IRQHandler+0x168>)
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	4a2b      	ldr	r2, [pc, #172]	; (8002ed0 <TIM1_BRK_TIM15_IRQHandler+0x168>)
 8002e24:	f043 0301 	orr.w	r3, r3, #1
 8002e28:	6153      	str	r3, [r2, #20]
		}

		TIM15->SR &= ~(TIM_SR_CC1IF);
 8002e2a:	4b28      	ldr	r3, [pc, #160]	; (8002ecc <TIM1_BRK_TIM15_IRQHandler+0x164>)
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	4a27      	ldr	r2, [pc, #156]	; (8002ecc <TIM1_BRK_TIM15_IRQHandler+0x164>)
 8002e30:	f023 0302 	bic.w	r3, r3, #2
 8002e34:	6113      	str	r3, [r2, #16]
		if((TIM15->SR & TIM_SR_CC1IF) == 0) {
 8002e36:	4b25      	ldr	r3, [pc, #148]	; (8002ecc <TIM1_BRK_TIM15_IRQHandler+0x164>)
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d100      	bne.n	8002e44 <TIM1_BRK_TIM15_IRQHandler+0xdc>
			__asm__ volatile("NOP");
 8002e42:	bf00      	nop
		}
		__asm__ volatile("NOP");
 8002e44:	bf00      	nop
	}

	if((TIM15->SR & TIM_SR_CC2IF) == TIM_SR_CC2IF) {
 8002e46:	4b21      	ldr	r3, [pc, #132]	; (8002ecc <TIM1_BRK_TIM15_IRQHandler+0x164>)
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	f003 0304 	and.w	r3, r3, #4
 8002e4e:	2b04      	cmp	r3, #4
 8002e50:	d137      	bne.n	8002ec2 <TIM1_BRK_TIM15_IRQHandler+0x15a>
		__asm__ volatile("NOP");
 8002e52:	bf00      	nop

		if(SoftPwmL.status == 1) {
 8002e54:	4b20      	ldr	r3, [pc, #128]	; (8002ed8 <TIM1_BRK_TIM15_IRQHandler+0x170>)
 8002e56:	799b      	ldrb	r3, [r3, #6]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d110      	bne.n	8002e7e <TIM1_BRK_TIM15_IRQHandler+0x116>
			GPIOA->ODR &= ~(1<<4); //_1A
 8002e5c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002e66:	f023 0310 	bic.w	r3, r3, #16
 8002e6a:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (1<<5); //_2A
 8002e6c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002e76:	f043 0320 	orr.w	r3, r3, #32
 8002e7a:	6153      	str	r3, [r2, #20]
 8002e7c:	e013      	b.n	8002ea6 <TIM1_BRK_TIM15_IRQHandler+0x13e>
		} else if(SoftPwmL.status == 2) {
 8002e7e:	4b16      	ldr	r3, [pc, #88]	; (8002ed8 <TIM1_BRK_TIM15_IRQHandler+0x170>)
 8002e80:	799b      	ldrb	r3, [r3, #6]
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d10f      	bne.n	8002ea6 <TIM1_BRK_TIM15_IRQHandler+0x13e>
			GPIOA->ODR |= (1<<4); //_1A
 8002e86:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002e8a:	695b      	ldr	r3, [r3, #20]
 8002e8c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002e90:	f043 0310 	orr.w	r3, r3, #16
 8002e94:	6153      	str	r3, [r2, #20]
			GPIOA->ODR &= ~(1<<5); //_2A
 8002e96:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002ea0:	f023 0320 	bic.w	r3, r3, #32
 8002ea4:	6153      	str	r3, [r2, #20]
		}


		TIM15->SR &= ~(TIM_SR_CC2IF);
 8002ea6:	4b09      	ldr	r3, [pc, #36]	; (8002ecc <TIM1_BRK_TIM15_IRQHandler+0x164>)
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	4a08      	ldr	r2, [pc, #32]	; (8002ecc <TIM1_BRK_TIM15_IRQHandler+0x164>)
 8002eac:	f023 0304 	bic.w	r3, r3, #4
 8002eb0:	6113      	str	r3, [r2, #16]
		if((TIM15->SR & TIM_SR_CC2IF) == 0) {
 8002eb2:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <TIM1_BRK_TIM15_IRQHandler+0x164>)
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	f003 0304 	and.w	r3, r3, #4
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d100      	bne.n	8002ec0 <TIM1_BRK_TIM15_IRQHandler+0x158>
			__asm__ volatile("NOP");
 8002ebe:	bf00      	nop
		}
		__asm__ volatile("NOP");
 8002ec0:	bf00      	nop
	}
}
 8002ec2:	bf00      	nop
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr
 8002ecc:	40014000 	.word	0x40014000
 8002ed0:	48000400 	.word	0x48000400
 8002ed4:	200008c4 	.word	0x200008c4
 8002ed8:	200008cc 	.word	0x200008cc

08002edc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ee4:	4a14      	ldr	r2, [pc, #80]	; (8002f38 <_sbrk+0x5c>)
 8002ee6:	4b15      	ldr	r3, [pc, #84]	; (8002f3c <_sbrk+0x60>)
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ef0:	4b13      	ldr	r3, [pc, #76]	; (8002f40 <_sbrk+0x64>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d102      	bne.n	8002efe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ef8:	4b11      	ldr	r3, [pc, #68]	; (8002f40 <_sbrk+0x64>)
 8002efa:	4a12      	ldr	r2, [pc, #72]	; (8002f44 <_sbrk+0x68>)
 8002efc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002efe:	4b10      	ldr	r3, [pc, #64]	; (8002f40 <_sbrk+0x64>)
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4413      	add	r3, r2
 8002f06:	693a      	ldr	r2, [r7, #16]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d207      	bcs.n	8002f1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f0c:	f006 fd36 	bl	800997c <__errno>
 8002f10:	4603      	mov	r3, r0
 8002f12:	220c      	movs	r2, #12
 8002f14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f16:	f04f 33ff 	mov.w	r3, #4294967295
 8002f1a:	e009      	b.n	8002f30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f1c:	4b08      	ldr	r3, [pc, #32]	; (8002f40 <_sbrk+0x64>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f22:	4b07      	ldr	r3, [pc, #28]	; (8002f40 <_sbrk+0x64>)
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4413      	add	r3, r2
 8002f2a:	4a05      	ldr	r2, [pc, #20]	; (8002f40 <_sbrk+0x64>)
 8002f2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3718      	adds	r7, #24
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	20004000 	.word	0x20004000
 8002f3c:	00000400 	.word	0x00000400
 8002f40:	20000d38 	.word	0x20000d38
 8002f44:	20002b38 	.word	0x20002b38

08002f48 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f4c:	4b06      	ldr	r3, [pc, #24]	; (8002f68 <SystemInit+0x20>)
 8002f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f52:	4a05      	ldr	r2, [pc, #20]	; (8002f68 <SystemInit+0x20>)
 8002f54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f5c:	bf00      	nop
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	e000ed00 	.word	0xe000ed00

08002f6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002f6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fa4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002f70:	f7ff ffea 	bl	8002f48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f74:	480c      	ldr	r0, [pc, #48]	; (8002fa8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002f76:	490d      	ldr	r1, [pc, #52]	; (8002fac <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f78:	4a0d      	ldr	r2, [pc, #52]	; (8002fb0 <LoopForever+0xe>)
  movs r3, #0
 8002f7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f7c:	e002      	b.n	8002f84 <LoopCopyDataInit>

08002f7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f82:	3304      	adds	r3, #4

08002f84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f88:	d3f9      	bcc.n	8002f7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f8a:	4a0a      	ldr	r2, [pc, #40]	; (8002fb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f8c:	4c0a      	ldr	r4, [pc, #40]	; (8002fb8 <LoopForever+0x16>)
  movs r3, #0
 8002f8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f90:	e001      	b.n	8002f96 <LoopFillZerobss>

08002f92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f94:	3204      	adds	r2, #4

08002f96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f98:	d3fb      	bcc.n	8002f92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f9a:	f006 fcf5 	bl	8009988 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002f9e:	f7fd fa9b 	bl	80004d8 <main>

08002fa2 <LoopForever>:

LoopForever:
    b LoopForever
 8002fa2:	e7fe      	b.n	8002fa2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002fa4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002fa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fac:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002fb0:	0800a654 	.word	0x0800a654
  ldr r2, =_sbss
 8002fb4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002fb8:	20002b38 	.word	0x20002b38

08002fbc <COMP2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002fbc:	e7fe      	b.n	8002fbc <COMP2_IRQHandler>
	...

08002fc0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fc4:	4b08      	ldr	r3, [pc, #32]	; (8002fe8 <HAL_Init+0x28>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a07      	ldr	r2, [pc, #28]	; (8002fe8 <HAL_Init+0x28>)
 8002fca:	f043 0310 	orr.w	r3, r3, #16
 8002fce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fd0:	2003      	movs	r0, #3
 8002fd2:	f000 fd9a 	bl	8003b0a <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fd6:	2004      	movs	r0, #4
 8002fd8:	f7ff fc78 	bl	80028cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fdc:	f7ff fae6 	bl	80025ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	40022000 	.word	0x40022000

08002fec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ff0:	4b06      	ldr	r3, [pc, #24]	; (800300c <HAL_IncTick+0x20>)
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	4b06      	ldr	r3, [pc, #24]	; (8003010 <HAL_IncTick+0x24>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	4a04      	ldr	r2, [pc, #16]	; (8003010 <HAL_IncTick+0x24>)
 8002ffe:	6013      	str	r3, [r2, #0]
}
 8003000:	bf00      	nop
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	20000008 	.word	0x20000008
 8003010:	20000d3c 	.word	0x20000d3c

08003014 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
  return uwTick;  
 8003018:	4b03      	ldr	r3, [pc, #12]	; (8003028 <HAL_GetTick+0x14>)
 800301a:	681b      	ldr	r3, [r3, #0]
}
 800301c:	4618      	mov	r0, r3
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	20000d3c 	.word	0x20000d3c

0800302c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003034:	f7ff ffee 	bl	8003014 <HAL_GetTick>
 8003038:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003044:	d005      	beq.n	8003052 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003046:	4b0a      	ldr	r3, [pc, #40]	; (8003070 <HAL_Delay+0x44>)
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	461a      	mov	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	4413      	add	r3, r2
 8003050:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003052:	bf00      	nop
 8003054:	f7ff ffde 	bl	8003014 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	429a      	cmp	r2, r3
 8003062:	d8f7      	bhi.n	8003054 <HAL_Delay+0x28>
  {
  }
}
 8003064:	bf00      	nop
 8003066:	bf00      	nop
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	20000008 	.word	0x20000008

08003074 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b09a      	sub	sp, #104	; 0x68
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800307c:	2300      	movs	r3, #0
 800307e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8003082:	2300      	movs	r3, #0
 8003084:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8003086:	2300      	movs	r3, #0
 8003088:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d101      	bne.n	8003094 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e169      	b.n	8003368 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	f003 0310 	and.w	r3, r3, #16
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d176      	bne.n	8003194 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d152      	bne.n	8003154 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f7ff fa97 	bl	80025fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d13b      	bne.n	8003154 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f000 fc01 	bl	80038e4 <ADC_Disable>
 80030e2:	4603      	mov	r3, r0
 80030e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ec:	f003 0310 	and.w	r3, r3, #16
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d12f      	bne.n	8003154 <HAL_ADC_Init+0xe0>
 80030f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d12b      	bne.n	8003154 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003100:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003104:	f023 0302 	bic.w	r3, r3, #2
 8003108:	f043 0202 	orr.w	r2, r3, #2
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	689a      	ldr	r2, [r3, #8]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800311e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	689a      	ldr	r2, [r3, #8]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800312e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003130:	4b8f      	ldr	r3, [pc, #572]	; (8003370 <HAL_ADC_Init+0x2fc>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a8f      	ldr	r2, [pc, #572]	; (8003374 <HAL_ADC_Init+0x300>)
 8003136:	fba2 2303 	umull	r2, r3, r2, r3
 800313a:	0c9a      	lsrs	r2, r3, #18
 800313c:	4613      	mov	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	4413      	add	r3, r2
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003146:	e002      	b.n	800314e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	3b01      	subs	r3, #1
 800314c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1f9      	bne.n	8003148 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d007      	beq.n	8003172 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800316c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003170:	d110      	bne.n	8003194 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003176:	f023 0312 	bic.w	r3, r3, #18
 800317a:	f043 0210 	orr.w	r2, r3, #16
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003186:	f043 0201 	orr.w	r2, r3, #1
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003198:	f003 0310 	and.w	r3, r3, #16
 800319c:	2b00      	cmp	r3, #0
 800319e:	f040 80d6 	bne.w	800334e <HAL_ADC_Init+0x2da>
 80031a2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f040 80d1 	bne.w	800334e <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f040 80c9 	bne.w	800334e <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80031c4:	f043 0202 	orr.w	r2, r3, #2
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031cc:	4b6a      	ldr	r3, [pc, #424]	; (8003378 <HAL_ADC_Init+0x304>)
 80031ce:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80031d0:	2300      	movs	r3, #0
 80031d2:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f003 0303 	and.w	r3, r3, #3
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d108      	bne.n	80031f4 <HAL_ADC_Init+0x180>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d101      	bne.n	80031f4 <HAL_ADC_Init+0x180>
 80031f0:	2301      	movs	r3, #1
 80031f2:	e000      	b.n	80031f6 <HAL_ADC_Init+0x182>
 80031f4:	2300      	movs	r3, #0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d11c      	bne.n	8003234 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80031fa:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d010      	beq.n	8003222 <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f003 0303 	and.w	r3, r3, #3
 8003208:	2b01      	cmp	r3, #1
 800320a:	d107      	bne.n	800321c <HAL_ADC_Init+0x1a8>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0301 	and.w	r3, r3, #1
 8003214:	2b01      	cmp	r3, #1
 8003216:	d101      	bne.n	800321c <HAL_ADC_Init+0x1a8>
 8003218:	2301      	movs	r3, #1
 800321a:	e000      	b.n	800321e <HAL_ADC_Init+0x1aa>
 800321c:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800321e:	2b00      	cmp	r3, #0
 8003220:	d108      	bne.n	8003234 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8003222:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	431a      	orrs	r2, r3
 8003230:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003232:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	7e5b      	ldrb	r3, [r3, #25]
 8003238:	035b      	lsls	r3, r3, #13
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800323e:	2a01      	cmp	r2, #1
 8003240:	d002      	beq.n	8003248 <HAL_ADC_Init+0x1d4>
 8003242:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003246:	e000      	b.n	800324a <HAL_ADC_Init+0x1d6>
 8003248:	2200      	movs	r2, #0
 800324a:	431a      	orrs	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	431a      	orrs	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	4313      	orrs	r3, r2
 8003258:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800325a:	4313      	orrs	r3, r2
 800325c:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d11b      	bne.n	80032a0 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	7e5b      	ldrb	r3, [r3, #25]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d109      	bne.n	8003284 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003274:	3b01      	subs	r3, #1
 8003276:	045a      	lsls	r2, r3, #17
 8003278:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800327a:	4313      	orrs	r3, r2
 800327c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003280:	663b      	str	r3, [r7, #96]	; 0x60
 8003282:	e00d      	b.n	80032a0 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003288:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800328c:	f043 0220 	orr.w	r2, r3, #32
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003298:	f043 0201 	orr.w	r2, r3, #1
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d007      	beq.n	80032b8 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b0:	4313      	orrs	r3, r2
 80032b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80032b4:	4313      	orrs	r3, r2
 80032b6:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 030c 	and.w	r3, r3, #12
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d114      	bne.n	80032f0 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	6812      	ldr	r2, [r2, #0]
 80032d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032d4:	f023 0302 	bic.w	r3, r3, #2
 80032d8:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	7e1b      	ldrb	r3, [r3, #24]
 80032de:	039a      	lsls	r2, r3, #14
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	4313      	orrs	r3, r2
 80032ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80032ec:	4313      	orrs	r3, r2
 80032ee:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68da      	ldr	r2, [r3, #12]
 80032f6:	4b21      	ldr	r3, [pc, #132]	; (800337c <HAL_ADC_Init+0x308>)
 80032f8:	4013      	ands	r3, r2
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	6812      	ldr	r2, [r2, #0]
 80032fe:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003300:	430b      	orrs	r3, r1
 8003302:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d10c      	bne.n	8003326 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003312:	f023 010f 	bic.w	r1, r3, #15
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	1e5a      	subs	r2, r3, #1
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	430a      	orrs	r2, r1
 8003322:	631a      	str	r2, [r3, #48]	; 0x30
 8003324:	e007      	b.n	8003336 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f022 020f 	bic.w	r2, r2, #15
 8003334:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003340:	f023 0303 	bic.w	r3, r3, #3
 8003344:	f043 0201 	orr.w	r2, r3, #1
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	641a      	str	r2, [r3, #64]	; 0x40
 800334c:	e00a      	b.n	8003364 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003352:	f023 0312 	bic.w	r3, r3, #18
 8003356:	f043 0210 	orr.w	r2, r3, #16
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800335e:	2301      	movs	r3, #1
 8003360:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8003364:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003368:	4618      	mov	r0, r3
 800336a:	3768      	adds	r7, #104	; 0x68
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	20000000 	.word	0x20000000
 8003374:	431bde83 	.word	0x431bde83
 8003378:	50000300 	.word	0x50000300
 800337c:	fff0c007 	.word	0xfff0c007

08003380 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003380:	b480      	push	{r7}
 8003382:	b09b      	sub	sp, #108	; 0x6c
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800338a:	2300      	movs	r3, #0
 800338c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8003390:	2300      	movs	r3, #0
 8003392:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800339a:	2b01      	cmp	r3, #1
 800339c:	d101      	bne.n	80033a2 <HAL_ADC_ConfigChannel+0x22>
 800339e:	2302      	movs	r3, #2
 80033a0:	e295      	b.n	80038ce <HAL_ADC_ConfigChannel+0x54e>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f003 0304 	and.w	r3, r3, #4
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f040 8279 	bne.w	80038ac <HAL_ADC_ConfigChannel+0x52c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	2b04      	cmp	r3, #4
 80033c0:	d81c      	bhi.n	80033fc <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685a      	ldr	r2, [r3, #4]
 80033cc:	4613      	mov	r3, r2
 80033ce:	005b      	lsls	r3, r3, #1
 80033d0:	4413      	add	r3, r2
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	461a      	mov	r2, r3
 80033d6:	231f      	movs	r3, #31
 80033d8:	4093      	lsls	r3, r2
 80033da:	43db      	mvns	r3, r3
 80033dc:	4019      	ands	r1, r3
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	6818      	ldr	r0, [r3, #0]
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685a      	ldr	r2, [r3, #4]
 80033e6:	4613      	mov	r3, r2
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	4413      	add	r3, r2
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	fa00 f203 	lsl.w	r2, r0, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	430a      	orrs	r2, r1
 80033f8:	631a      	str	r2, [r3, #48]	; 0x30
 80033fa:	e063      	b.n	80034c4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	2b09      	cmp	r3, #9
 8003402:	d81e      	bhi.n	8003442 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685a      	ldr	r2, [r3, #4]
 800340e:	4613      	mov	r3, r2
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	4413      	add	r3, r2
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	3b1e      	subs	r3, #30
 8003418:	221f      	movs	r2, #31
 800341a:	fa02 f303 	lsl.w	r3, r2, r3
 800341e:	43db      	mvns	r3, r3
 8003420:	4019      	ands	r1, r3
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	6818      	ldr	r0, [r3, #0]
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	4613      	mov	r3, r2
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	4413      	add	r3, r2
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	3b1e      	subs	r3, #30
 8003434:	fa00 f203 	lsl.w	r2, r0, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	430a      	orrs	r2, r1
 800343e:	635a      	str	r2, [r3, #52]	; 0x34
 8003440:	e040      	b.n	80034c4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	2b0e      	cmp	r3, #14
 8003448:	d81e      	bhi.n	8003488 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	4613      	mov	r3, r2
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	4413      	add	r3, r2
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	3b3c      	subs	r3, #60	; 0x3c
 800345e:	221f      	movs	r2, #31
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	43db      	mvns	r3, r3
 8003466:	4019      	ands	r1, r3
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	6818      	ldr	r0, [r3, #0]
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685a      	ldr	r2, [r3, #4]
 8003470:	4613      	mov	r3, r2
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	4413      	add	r3, r2
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	3b3c      	subs	r3, #60	; 0x3c
 800347a:	fa00 f203 	lsl.w	r2, r0, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	430a      	orrs	r2, r1
 8003484:	639a      	str	r2, [r3, #56]	; 0x38
 8003486:	e01d      	b.n	80034c4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	685a      	ldr	r2, [r3, #4]
 8003492:	4613      	mov	r3, r2
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	4413      	add	r3, r2
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	3b5a      	subs	r3, #90	; 0x5a
 800349c:	221f      	movs	r2, #31
 800349e:	fa02 f303 	lsl.w	r3, r2, r3
 80034a2:	43db      	mvns	r3, r3
 80034a4:	4019      	ands	r1, r3
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	6818      	ldr	r0, [r3, #0]
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685a      	ldr	r2, [r3, #4]
 80034ae:	4613      	mov	r3, r2
 80034b0:	005b      	lsls	r3, r3, #1
 80034b2:	4413      	add	r3, r2
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	3b5a      	subs	r3, #90	; 0x5a
 80034b8:	fa00 f203 	lsl.w	r2, r0, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	430a      	orrs	r2, r1
 80034c2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f003 030c 	and.w	r3, r3, #12
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f040 80e5 	bne.w	800369e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2b09      	cmp	r3, #9
 80034da:	d91c      	bls.n	8003516 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	6999      	ldr	r1, [r3, #24]
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	4613      	mov	r3, r2
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	4413      	add	r3, r2
 80034ec:	3b1e      	subs	r3, #30
 80034ee:	2207      	movs	r2, #7
 80034f0:	fa02 f303 	lsl.w	r3, r2, r3
 80034f4:	43db      	mvns	r3, r3
 80034f6:	4019      	ands	r1, r3
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	6898      	ldr	r0, [r3, #8]
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	4613      	mov	r3, r2
 8003502:	005b      	lsls	r3, r3, #1
 8003504:	4413      	add	r3, r2
 8003506:	3b1e      	subs	r3, #30
 8003508:	fa00 f203 	lsl.w	r2, r0, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	430a      	orrs	r2, r1
 8003512:	619a      	str	r2, [r3, #24]
 8003514:	e019      	b.n	800354a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6959      	ldr	r1, [r3, #20]
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	4613      	mov	r3, r2
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	4413      	add	r3, r2
 8003526:	2207      	movs	r2, #7
 8003528:	fa02 f303 	lsl.w	r3, r2, r3
 800352c:	43db      	mvns	r3, r3
 800352e:	4019      	ands	r1, r3
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	6898      	ldr	r0, [r3, #8]
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	4613      	mov	r3, r2
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	4413      	add	r3, r2
 800353e:	fa00 f203 	lsl.w	r2, r0, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	430a      	orrs	r2, r1
 8003548:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	695a      	ldr	r2, [r3, #20]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	08db      	lsrs	r3, r3, #3
 8003556:	f003 0303 	and.w	r3, r3, #3
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	fa02 f303 	lsl.w	r3, r2, r3
 8003560:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	3b01      	subs	r3, #1
 8003568:	2b03      	cmp	r3, #3
 800356a:	d84f      	bhi.n	800360c <HAL_ADC_ConfigChannel+0x28c>
 800356c:	a201      	add	r2, pc, #4	; (adr r2, 8003574 <HAL_ADC_ConfigChannel+0x1f4>)
 800356e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003572:	bf00      	nop
 8003574:	08003585 	.word	0x08003585
 8003578:	080035a7 	.word	0x080035a7
 800357c:	080035c9 	.word	0x080035c9
 8003580:	080035eb 	.word	0x080035eb
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800358a:	4b97      	ldr	r3, [pc, #604]	; (80037e8 <HAL_ADC_ConfigChannel+0x468>)
 800358c:	4013      	ands	r3, r2
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	6812      	ldr	r2, [r2, #0]
 8003592:	0691      	lsls	r1, r2, #26
 8003594:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003596:	430a      	orrs	r2, r1
 8003598:	431a      	orrs	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80035a2:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80035a4:	e07b      	b.n	800369e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80035ac:	4b8e      	ldr	r3, [pc, #568]	; (80037e8 <HAL_ADC_ConfigChannel+0x468>)
 80035ae:	4013      	ands	r3, r2
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	6812      	ldr	r2, [r2, #0]
 80035b4:	0691      	lsls	r1, r2, #26
 80035b6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80035b8:	430a      	orrs	r2, r1
 80035ba:	431a      	orrs	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80035c4:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80035c6:	e06a      	b.n	800369e <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80035ce:	4b86      	ldr	r3, [pc, #536]	; (80037e8 <HAL_ADC_ConfigChannel+0x468>)
 80035d0:	4013      	ands	r3, r2
 80035d2:	683a      	ldr	r2, [r7, #0]
 80035d4:	6812      	ldr	r2, [r2, #0]
 80035d6:	0691      	lsls	r1, r2, #26
 80035d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80035da:	430a      	orrs	r2, r1
 80035dc:	431a      	orrs	r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80035e6:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80035e8:	e059      	b.n	800369e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80035f0:	4b7d      	ldr	r3, [pc, #500]	; (80037e8 <HAL_ADC_ConfigChannel+0x468>)
 80035f2:	4013      	ands	r3, r2
 80035f4:	683a      	ldr	r2, [r7, #0]
 80035f6:	6812      	ldr	r2, [r2, #0]
 80035f8:	0691      	lsls	r1, r2, #26
 80035fa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80035fc:	430a      	orrs	r2, r1
 80035fe:	431a      	orrs	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003608:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800360a:	e048      	b.n	800369e <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003612:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	069b      	lsls	r3, r3, #26
 800361c:	429a      	cmp	r2, r3
 800361e:	d107      	bne.n	8003630 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800362e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003636:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	069b      	lsls	r3, r3, #26
 8003640:	429a      	cmp	r2, r3
 8003642:	d107      	bne.n	8003654 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003652:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800365a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	069b      	lsls	r3, r3, #26
 8003664:	429a      	cmp	r2, r3
 8003666:	d107      	bne.n	8003678 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003676:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800367e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	069b      	lsls	r3, r3, #26
 8003688:	429a      	cmp	r2, r3
 800368a:	d107      	bne.n	800369c <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800369a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 800369c:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f003 0303 	and.w	r3, r3, #3
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d108      	bne.n	80036be <HAL_ADC_ConfigChannel+0x33e>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d101      	bne.n	80036be <HAL_ADC_ConfigChannel+0x33e>
 80036ba:	2301      	movs	r3, #1
 80036bc:	e000      	b.n	80036c0 <HAL_ADC_ConfigChannel+0x340>
 80036be:	2300      	movs	r3, #0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f040 80fe 	bne.w	80038c2 <HAL_ADC_ConfigChannel+0x542>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d00f      	beq.n	80036ee <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2201      	movs	r2, #1
 80036dc:	fa02 f303 	lsl.w	r3, r2, r3
 80036e0:	43da      	mvns	r2, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	400a      	ands	r2, r1
 80036e8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80036ec:	e049      	b.n	8003782 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2201      	movs	r2, #1
 80036fc:	409a      	lsls	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	430a      	orrs	r2, r1
 8003704:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2b09      	cmp	r3, #9
 800370e:	d91c      	bls.n	800374a <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	6999      	ldr	r1, [r3, #24]
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	4613      	mov	r3, r2
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	4413      	add	r3, r2
 8003720:	3b1b      	subs	r3, #27
 8003722:	2207      	movs	r2, #7
 8003724:	fa02 f303 	lsl.w	r3, r2, r3
 8003728:	43db      	mvns	r3, r3
 800372a:	4019      	ands	r1, r3
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	6898      	ldr	r0, [r3, #8]
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	4613      	mov	r3, r2
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	4413      	add	r3, r2
 800373a:	3b1b      	subs	r3, #27
 800373c:	fa00 f203 	lsl.w	r2, r0, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	430a      	orrs	r2, r1
 8003746:	619a      	str	r2, [r3, #24]
 8003748:	e01b      	b.n	8003782 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	6959      	ldr	r1, [r3, #20]
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	1c5a      	adds	r2, r3, #1
 8003756:	4613      	mov	r3, r2
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	4413      	add	r3, r2
 800375c:	2207      	movs	r2, #7
 800375e:	fa02 f303 	lsl.w	r3, r2, r3
 8003762:	43db      	mvns	r3, r3
 8003764:	4019      	ands	r1, r3
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	6898      	ldr	r0, [r3, #8]
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	1c5a      	adds	r2, r3, #1
 8003770:	4613      	mov	r3, r2
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	4413      	add	r3, r2
 8003776:	fa00 f203 	lsl.w	r2, r0, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	430a      	orrs	r2, r1
 8003780:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003782:	4b1a      	ldr	r3, [pc, #104]	; (80037ec <HAL_ADC_ConfigChannel+0x46c>)
 8003784:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2b10      	cmp	r3, #16
 800378c:	d105      	bne.n	800379a <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800378e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003796:	2b00      	cmp	r3, #0
 8003798:	d014      	beq.n	80037c4 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800379e:	2b11      	cmp	r3, #17
 80037a0:	d105      	bne.n	80037ae <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80037a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00a      	beq.n	80037c4 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80037b2:	2b12      	cmp	r3, #18
 80037b4:	f040 8085 	bne.w	80038c2 <HAL_ADC_ConfigChannel+0x542>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80037b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d17e      	bne.n	80038c2 <HAL_ADC_ConfigChannel+0x542>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80037c4:	2300      	movs	r3, #0
 80037c6:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f003 0303 	and.w	r3, r3, #3
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d10c      	bne.n	80037f0 <HAL_ADC_ConfigChannel+0x470>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0301 	and.w	r3, r3, #1
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d105      	bne.n	80037f0 <HAL_ADC_ConfigChannel+0x470>
 80037e4:	2301      	movs	r3, #1
 80037e6:	e004      	b.n	80037f2 <HAL_ADC_ConfigChannel+0x472>
 80037e8:	83fff000 	.word	0x83fff000
 80037ec:	50000300 	.word	0x50000300
 80037f0:	2300      	movs	r3, #0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d150      	bne.n	8003898 <HAL_ADC_ConfigChannel+0x518>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80037f6:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d010      	beq.n	800381e <HAL_ADC_ConfigChannel+0x49e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f003 0303 	and.w	r3, r3, #3
 8003804:	2b01      	cmp	r3, #1
 8003806:	d107      	bne.n	8003818 <HAL_ADC_ConfigChannel+0x498>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0301 	and.w	r3, r3, #1
 8003810:	2b01      	cmp	r3, #1
 8003812:	d101      	bne.n	8003818 <HAL_ADC_ConfigChannel+0x498>
 8003814:	2301      	movs	r3, #1
 8003816:	e000      	b.n	800381a <HAL_ADC_ConfigChannel+0x49a>
 8003818:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800381a:	2b00      	cmp	r3, #0
 800381c:	d13c      	bne.n	8003898 <HAL_ADC_ConfigChannel+0x518>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2b10      	cmp	r3, #16
 8003824:	d11d      	bne.n	8003862 <HAL_ADC_ConfigChannel+0x4e2>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800382e:	d118      	bne.n	8003862 <HAL_ADC_ConfigChannel+0x4e2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003830:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003838:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800383a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800383c:	4b27      	ldr	r3, [pc, #156]	; (80038dc <HAL_ADC_ConfigChannel+0x55c>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a27      	ldr	r2, [pc, #156]	; (80038e0 <HAL_ADC_ConfigChannel+0x560>)
 8003842:	fba2 2303 	umull	r2, r3, r2, r3
 8003846:	0c9a      	lsrs	r2, r3, #18
 8003848:	4613      	mov	r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	4413      	add	r3, r2
 800384e:	005b      	lsls	r3, r3, #1
 8003850:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003852:	e002      	b.n	800385a <HAL_ADC_ConfigChannel+0x4da>
          {
            wait_loop_index--;
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	3b01      	subs	r3, #1
 8003858:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1f9      	bne.n	8003854 <HAL_ADC_ConfigChannel+0x4d4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003860:	e02e      	b.n	80038c0 <HAL_ADC_ConfigChannel+0x540>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2b11      	cmp	r3, #17
 8003868:	d10b      	bne.n	8003882 <HAL_ADC_ConfigChannel+0x502>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003872:	d106      	bne.n	8003882 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003874:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800387c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800387e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003880:	e01e      	b.n	80038c0 <HAL_ADC_ConfigChannel+0x540>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2b12      	cmp	r3, #18
 8003888:	d11a      	bne.n	80038c0 <HAL_ADC_ConfigChannel+0x540>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800388a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003892:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003894:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003896:	e013      	b.n	80038c0 <HAL_ADC_ConfigChannel+0x540>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389c:	f043 0220 	orr.w	r2, r3, #32
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80038aa:	e00a      	b.n	80038c2 <HAL_ADC_ConfigChannel+0x542>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b0:	f043 0220 	orr.w	r2, r3, #32
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80038be:	e000      	b.n	80038c2 <HAL_ADC_ConfigChannel+0x542>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80038c0:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80038ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	376c      	adds	r7, #108	; 0x6c
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	20000000 	.word	0x20000000
 80038e0:	431bde83 	.word	0x431bde83

080038e4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038ec:	2300      	movs	r3, #0
 80038ee:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f003 0303 	and.w	r3, r3, #3
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d108      	bne.n	8003910 <ADC_Disable+0x2c>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0301 	and.w	r3, r3, #1
 8003908:	2b01      	cmp	r3, #1
 800390a:	d101      	bne.n	8003910 <ADC_Disable+0x2c>
 800390c:	2301      	movs	r3, #1
 800390e:	e000      	b.n	8003912 <ADC_Disable+0x2e>
 8003910:	2300      	movs	r3, #0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d047      	beq.n	80039a6 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f003 030d 	and.w	r3, r3, #13
 8003920:	2b01      	cmp	r3, #1
 8003922:	d10f      	bne.n	8003944 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	689a      	ldr	r2, [r3, #8]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f042 0202 	orr.w	r2, r2, #2
 8003932:	609a      	str	r2, [r3, #8]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2203      	movs	r2, #3
 800393a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800393c:	f7ff fb6a 	bl	8003014 <HAL_GetTick>
 8003940:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003942:	e029      	b.n	8003998 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003948:	f043 0210 	orr.w	r2, r3, #16
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003954:	f043 0201 	orr.w	r2, r3, #1
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e023      	b.n	80039a8 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003960:	f7ff fb58 	bl	8003014 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d914      	bls.n	8003998 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f003 0301 	and.w	r3, r3, #1
 8003978:	2b01      	cmp	r3, #1
 800397a:	d10d      	bne.n	8003998 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003980:	f043 0210 	orr.w	r2, r3, #16
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398c:	f043 0201 	orr.w	r2, r3, #1
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e007      	b.n	80039a8 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d0dc      	beq.n	8003960 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3710      	adds	r7, #16
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <__NVIC_SetPriorityGrouping>:
{
 80039b0:	b480      	push	{r7}
 80039b2:	b085      	sub	sp, #20
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f003 0307 	and.w	r3, r3, #7
 80039be:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039c0:	4b0c      	ldr	r3, [pc, #48]	; (80039f4 <__NVIC_SetPriorityGrouping+0x44>)
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039c6:	68ba      	ldr	r2, [r7, #8]
 80039c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039cc:	4013      	ands	r3, r2
 80039ce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039e2:	4a04      	ldr	r2, [pc, #16]	; (80039f4 <__NVIC_SetPriorityGrouping+0x44>)
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	60d3      	str	r3, [r2, #12]
}
 80039e8:	bf00      	nop
 80039ea:	3714      	adds	r7, #20
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr
 80039f4:	e000ed00 	.word	0xe000ed00

080039f8 <__NVIC_GetPriorityGrouping>:
{
 80039f8:	b480      	push	{r7}
 80039fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039fc:	4b04      	ldr	r3, [pc, #16]	; (8003a10 <__NVIC_GetPriorityGrouping+0x18>)
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	0a1b      	lsrs	r3, r3, #8
 8003a02:	f003 0307 	and.w	r3, r3, #7
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr
 8003a10:	e000ed00 	.word	0xe000ed00

08003a14 <__NVIC_EnableIRQ>:
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	db0b      	blt.n	8003a3e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a26:	79fb      	ldrb	r3, [r7, #7]
 8003a28:	f003 021f 	and.w	r2, r3, #31
 8003a2c:	4907      	ldr	r1, [pc, #28]	; (8003a4c <__NVIC_EnableIRQ+0x38>)
 8003a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a32:	095b      	lsrs	r3, r3, #5
 8003a34:	2001      	movs	r0, #1
 8003a36:	fa00 f202 	lsl.w	r2, r0, r2
 8003a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003a3e:	bf00      	nop
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	e000e100 	.word	0xe000e100

08003a50 <__NVIC_SetPriority>:
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	4603      	mov	r3, r0
 8003a58:	6039      	str	r1, [r7, #0]
 8003a5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	db0a      	blt.n	8003a7a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	b2da      	uxtb	r2, r3
 8003a68:	490c      	ldr	r1, [pc, #48]	; (8003a9c <__NVIC_SetPriority+0x4c>)
 8003a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a6e:	0112      	lsls	r2, r2, #4
 8003a70:	b2d2      	uxtb	r2, r2
 8003a72:	440b      	add	r3, r1
 8003a74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003a78:	e00a      	b.n	8003a90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	b2da      	uxtb	r2, r3
 8003a7e:	4908      	ldr	r1, [pc, #32]	; (8003aa0 <__NVIC_SetPriority+0x50>)
 8003a80:	79fb      	ldrb	r3, [r7, #7]
 8003a82:	f003 030f 	and.w	r3, r3, #15
 8003a86:	3b04      	subs	r3, #4
 8003a88:	0112      	lsls	r2, r2, #4
 8003a8a:	b2d2      	uxtb	r2, r2
 8003a8c:	440b      	add	r3, r1
 8003a8e:	761a      	strb	r2, [r3, #24]
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr
 8003a9c:	e000e100 	.word	0xe000e100
 8003aa0:	e000ed00 	.word	0xe000ed00

08003aa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b089      	sub	sp, #36	; 0x24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f003 0307 	and.w	r3, r3, #7
 8003ab6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	f1c3 0307 	rsb	r3, r3, #7
 8003abe:	2b04      	cmp	r3, #4
 8003ac0:	bf28      	it	cs
 8003ac2:	2304      	movcs	r3, #4
 8003ac4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	3304      	adds	r3, #4
 8003aca:	2b06      	cmp	r3, #6
 8003acc:	d902      	bls.n	8003ad4 <NVIC_EncodePriority+0x30>
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	3b03      	subs	r3, #3
 8003ad2:	e000      	b.n	8003ad6 <NVIC_EncodePriority+0x32>
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae2:	43da      	mvns	r2, r3
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	401a      	ands	r2, r3
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003aec:	f04f 31ff 	mov.w	r1, #4294967295
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	fa01 f303 	lsl.w	r3, r1, r3
 8003af6:	43d9      	mvns	r1, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003afc:	4313      	orrs	r3, r2
         );
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3724      	adds	r7, #36	; 0x24
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b082      	sub	sp, #8
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f7ff ff4c 	bl	80039b0 <__NVIC_SetPriorityGrouping>
}
 8003b18:	bf00      	nop
 8003b1a:	3708      	adds	r7, #8
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	4603      	mov	r3, r0
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	607a      	str	r2, [r7, #4]
 8003b2c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b32:	f7ff ff61 	bl	80039f8 <__NVIC_GetPriorityGrouping>
 8003b36:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	68b9      	ldr	r1, [r7, #8]
 8003b3c:	6978      	ldr	r0, [r7, #20]
 8003b3e:	f7ff ffb1 	bl	8003aa4 <NVIC_EncodePriority>
 8003b42:	4602      	mov	r2, r0
 8003b44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b48:	4611      	mov	r1, r2
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7ff ff80 	bl	8003a50 <__NVIC_SetPriority>
}
 8003b50:	bf00      	nop
 8003b52:	3718      	adds	r7, #24
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	4603      	mov	r3, r0
 8003b60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7ff ff54 	bl	8003a14 <__NVIC_EnableIRQ>
}
 8003b6c:	bf00      	nop
 8003b6e:	3708      	adds	r7, #8
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e037      	b.n	8003bfa <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2202      	movs	r2, #2
 8003b8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003ba0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003ba4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003bae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bc6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	69db      	ldr	r3, [r3, #28]
 8003bcc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 f8b3 	bl	8003d48 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}  
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b084      	sub	sp, #16
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	2204      	movs	r2, #4
 8003c20:	409a      	lsls	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	4013      	ands	r3, r2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d024      	beq.n	8003c74 <HAL_DMA_IRQHandler+0x72>
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	f003 0304 	and.w	r3, r3, #4
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d01f      	beq.n	8003c74 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0320 	and.w	r3, r3, #32
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d107      	bne.n	8003c52 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f022 0204 	bic.w	r2, r2, #4
 8003c50:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5a:	2104      	movs	r1, #4
 8003c5c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c60:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d06a      	beq.n	8003d40 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003c72:	e065      	b.n	8003d40 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c78:	2202      	movs	r2, #2
 8003c7a:	409a      	lsls	r2, r3
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	4013      	ands	r3, r2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d02c      	beq.n	8003cde <HAL_DMA_IRQHandler+0xdc>
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d027      	beq.n	8003cde <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0320 	and.w	r3, r3, #32
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d10b      	bne.n	8003cb4 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f022 020a 	bic.w	r2, r2, #10
 8003caa:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cbc:	2102      	movs	r1, #2
 8003cbe:	fa01 f202 	lsl.w	r2, r1, r2
 8003cc2:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d035      	beq.n	8003d40 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003cdc:	e030      	b.n	8003d40 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce2:	2208      	movs	r2, #8
 8003ce4:	409a      	lsls	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	4013      	ands	r3, r2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d028      	beq.n	8003d40 <HAL_DMA_IRQHandler+0x13e>
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	f003 0308 	and.w	r3, r3, #8
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d023      	beq.n	8003d40 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f022 020e 	bic.w	r2, r2, #14
 8003d06:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d10:	2101      	movs	r1, #1
 8003d12:	fa01 f202 	lsl.w	r2, r1, r2
 8003d16:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d004      	beq.n	8003d40 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	4798      	blx	r3
    }
  }
}  
 8003d3e:	e7ff      	b.n	8003d40 <HAL_DMA_IRQHandler+0x13e>
 8003d40:	bf00      	nop
 8003d42:	3710      	adds	r7, #16
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	461a      	mov	r2, r3
 8003d56:	4b09      	ldr	r3, [pc, #36]	; (8003d7c <DMA_CalcBaseAndBitshift+0x34>)
 8003d58:	4413      	add	r3, r2
 8003d5a:	4a09      	ldr	r2, [pc, #36]	; (8003d80 <DMA_CalcBaseAndBitshift+0x38>)
 8003d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d60:	091b      	lsrs	r3, r3, #4
 8003d62:	009a      	lsls	r2, r3, #2
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a06      	ldr	r2, [pc, #24]	; (8003d84 <DMA_CalcBaseAndBitshift+0x3c>)
 8003d6c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8003d6e:	bf00      	nop
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	bffdfff8 	.word	0xbffdfff8
 8003d80:	cccccccd 	.word	0xcccccccd
 8003d84:	40020000 	.word	0x40020000

08003d88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b087      	sub	sp, #28
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d92:	2300      	movs	r3, #0
 8003d94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d96:	e14e      	b.n	8004036 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	2101      	movs	r1, #1
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	fa01 f303 	lsl.w	r3, r1, r3
 8003da4:	4013      	ands	r3, r2
 8003da6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f000 8140 	beq.w	8004030 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f003 0303 	and.w	r3, r3, #3
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d005      	beq.n	8003dc8 <HAL_GPIO_Init+0x40>
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f003 0303 	and.w	r3, r3, #3
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d130      	bne.n	8003e2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	005b      	lsls	r3, r3, #1
 8003dd2:	2203      	movs	r2, #3
 8003dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd8:	43db      	mvns	r3, r3
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	4013      	ands	r3, r2
 8003dde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	68da      	ldr	r2, [r3, #12]
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	005b      	lsls	r3, r3, #1
 8003de8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003dfe:	2201      	movs	r2, #1
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	fa02 f303 	lsl.w	r3, r2, r3
 8003e06:	43db      	mvns	r3, r3
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	091b      	lsrs	r3, r3, #4
 8003e14:	f003 0201 	and.w	r2, r3, #1
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f003 0303 	and.w	r3, r3, #3
 8003e32:	2b03      	cmp	r3, #3
 8003e34:	d017      	beq.n	8003e66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	005b      	lsls	r3, r3, #1
 8003e40:	2203      	movs	r2, #3
 8003e42:	fa02 f303 	lsl.w	r3, r2, r3
 8003e46:	43db      	mvns	r3, r3
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	689a      	ldr	r2, [r3, #8]
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	005b      	lsls	r3, r3, #1
 8003e56:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5a:	693a      	ldr	r2, [r7, #16]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f003 0303 	and.w	r3, r3, #3
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d123      	bne.n	8003eba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	08da      	lsrs	r2, r3, #3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	3208      	adds	r2, #8
 8003e7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	f003 0307 	and.w	r3, r3, #7
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	220f      	movs	r2, #15
 8003e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8e:	43db      	mvns	r3, r3
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	4013      	ands	r3, r2
 8003e94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	691a      	ldr	r2, [r3, #16]
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	f003 0307 	and.w	r3, r3, #7
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	08da      	lsrs	r2, r3, #3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	3208      	adds	r2, #8
 8003eb4:	6939      	ldr	r1, [r7, #16]
 8003eb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	005b      	lsls	r3, r3, #1
 8003ec4:	2203      	movs	r2, #3
 8003ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eca:	43db      	mvns	r3, r3
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	4013      	ands	r3, r2
 8003ed0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f003 0203 	and.w	r2, r3, #3
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	f000 809a 	beq.w	8004030 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003efc:	4b55      	ldr	r3, [pc, #340]	; (8004054 <HAL_GPIO_Init+0x2cc>)
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	4a54      	ldr	r2, [pc, #336]	; (8004054 <HAL_GPIO_Init+0x2cc>)
 8003f02:	f043 0301 	orr.w	r3, r3, #1
 8003f06:	6193      	str	r3, [r2, #24]
 8003f08:	4b52      	ldr	r3, [pc, #328]	; (8004054 <HAL_GPIO_Init+0x2cc>)
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	f003 0301 	and.w	r3, r3, #1
 8003f10:	60bb      	str	r3, [r7, #8]
 8003f12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003f14:	4a50      	ldr	r2, [pc, #320]	; (8004058 <HAL_GPIO_Init+0x2d0>)
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	089b      	lsrs	r3, r3, #2
 8003f1a:	3302      	adds	r3, #2
 8003f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	f003 0303 	and.w	r3, r3, #3
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	220f      	movs	r2, #15
 8003f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f30:	43db      	mvns	r3, r3
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	4013      	ands	r3, r2
 8003f36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003f3e:	d013      	beq.n	8003f68 <HAL_GPIO_Init+0x1e0>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a46      	ldr	r2, [pc, #280]	; (800405c <HAL_GPIO_Init+0x2d4>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d00d      	beq.n	8003f64 <HAL_GPIO_Init+0x1dc>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a45      	ldr	r2, [pc, #276]	; (8004060 <HAL_GPIO_Init+0x2d8>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d007      	beq.n	8003f60 <HAL_GPIO_Init+0x1d8>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a44      	ldr	r2, [pc, #272]	; (8004064 <HAL_GPIO_Init+0x2dc>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d101      	bne.n	8003f5c <HAL_GPIO_Init+0x1d4>
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e006      	b.n	8003f6a <HAL_GPIO_Init+0x1e2>
 8003f5c:	2305      	movs	r3, #5
 8003f5e:	e004      	b.n	8003f6a <HAL_GPIO_Init+0x1e2>
 8003f60:	2302      	movs	r3, #2
 8003f62:	e002      	b.n	8003f6a <HAL_GPIO_Init+0x1e2>
 8003f64:	2301      	movs	r3, #1
 8003f66:	e000      	b.n	8003f6a <HAL_GPIO_Init+0x1e2>
 8003f68:	2300      	movs	r3, #0
 8003f6a:	697a      	ldr	r2, [r7, #20]
 8003f6c:	f002 0203 	and.w	r2, r2, #3
 8003f70:	0092      	lsls	r2, r2, #2
 8003f72:	4093      	lsls	r3, r2
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003f7a:	4937      	ldr	r1, [pc, #220]	; (8004058 <HAL_GPIO_Init+0x2d0>)
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	089b      	lsrs	r3, r3, #2
 8003f80:	3302      	adds	r3, #2
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f88:	4b37      	ldr	r3, [pc, #220]	; (8004068 <HAL_GPIO_Init+0x2e0>)
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	43db      	mvns	r3, r3
 8003f92:	693a      	ldr	r2, [r7, #16]
 8003f94:	4013      	ands	r3, r2
 8003f96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d003      	beq.n	8003fac <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003fa4:	693a      	ldr	r2, [r7, #16]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003fac:	4a2e      	ldr	r2, [pc, #184]	; (8004068 <HAL_GPIO_Init+0x2e0>)
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003fb2:	4b2d      	ldr	r3, [pc, #180]	; (8004068 <HAL_GPIO_Init+0x2e0>)
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	43db      	mvns	r3, r3
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d003      	beq.n	8003fd6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003fd6:	4a24      	ldr	r2, [pc, #144]	; (8004068 <HAL_GPIO_Init+0x2e0>)
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003fdc:	4b22      	ldr	r3, [pc, #136]	; (8004068 <HAL_GPIO_Init+0x2e0>)
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	43db      	mvns	r3, r3
 8003fe6:	693a      	ldr	r2, [r7, #16]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d003      	beq.n	8004000 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004000:	4a19      	ldr	r2, [pc, #100]	; (8004068 <HAL_GPIO_Init+0x2e0>)
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004006:	4b18      	ldr	r3, [pc, #96]	; (8004068 <HAL_GPIO_Init+0x2e0>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	43db      	mvns	r3, r3
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	4013      	ands	r3, r2
 8004014:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d003      	beq.n	800402a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	4313      	orrs	r3, r2
 8004028:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800402a:	4a0f      	ldr	r2, [pc, #60]	; (8004068 <HAL_GPIO_Init+0x2e0>)
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	3301      	adds	r3, #1
 8004034:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	fa22 f303 	lsr.w	r3, r2, r3
 8004040:	2b00      	cmp	r3, #0
 8004042:	f47f aea9 	bne.w	8003d98 <HAL_GPIO_Init+0x10>
  }
}
 8004046:	bf00      	nop
 8004048:	bf00      	nop
 800404a:	371c      	adds	r7, #28
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr
 8004054:	40021000 	.word	0x40021000
 8004058:	40010000 	.word	0x40010000
 800405c:	48000400 	.word	0x48000400
 8004060:	48000800 	.word	0x48000800
 8004064:	48000c00 	.word	0x48000c00
 8004068:	40010400 	.word	0x40010400

0800406c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	460b      	mov	r3, r1
 8004076:	807b      	strh	r3, [r7, #2]
 8004078:	4613      	mov	r3, r2
 800407a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800407c:	787b      	ldrb	r3, [r7, #1]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d003      	beq.n	800408a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004082:	887a      	ldrh	r2, [r7, #2]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004088:	e002      	b.n	8004090 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800408a:	887a      	ldrh	r2, [r7, #2]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004090:	bf00      	nop
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	4603      	mov	r3, r0
 80040a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80040a6:	4b08      	ldr	r3, [pc, #32]	; (80040c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040a8:	695a      	ldr	r2, [r3, #20]
 80040aa:	88fb      	ldrh	r3, [r7, #6]
 80040ac:	4013      	ands	r3, r2
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d006      	beq.n	80040c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80040b2:	4a05      	ldr	r2, [pc, #20]	; (80040c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040b4:	88fb      	ldrh	r3, [r7, #6]
 80040b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80040b8:	88fb      	ldrh	r3, [r7, #6]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f000 f806 	bl	80040cc <HAL_GPIO_EXTI_Callback>
  }
}
 80040c0:	bf00      	nop
 80040c2:	3708      	adds	r7, #8
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	40010400 	.word	0x40010400

080040cc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	4603      	mov	r3, r0
 80040d4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80040d6:	bf00      	nop
 80040d8:	370c      	adds	r7, #12
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
	...

080040e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040f4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d102      	bne.n	800410a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	f001 b823 	b.w	8005150 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800410a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800410e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b00      	cmp	r3, #0
 800411c:	f000 817d 	beq.w	800441a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004120:	4bbc      	ldr	r3, [pc, #752]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f003 030c 	and.w	r3, r3, #12
 8004128:	2b04      	cmp	r3, #4
 800412a:	d00c      	beq.n	8004146 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800412c:	4bb9      	ldr	r3, [pc, #740]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f003 030c 	and.w	r3, r3, #12
 8004134:	2b08      	cmp	r3, #8
 8004136:	d15c      	bne.n	80041f2 <HAL_RCC_OscConfig+0x10e>
 8004138:	4bb6      	ldr	r3, [pc, #728]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004144:	d155      	bne.n	80041f2 <HAL_RCC_OscConfig+0x10e>
 8004146:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800414a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800414e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004152:	fa93 f3a3 	rbit	r3, r3
 8004156:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800415a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800415e:	fab3 f383 	clz	r3, r3
 8004162:	b2db      	uxtb	r3, r3
 8004164:	095b      	lsrs	r3, r3, #5
 8004166:	b2db      	uxtb	r3, r3
 8004168:	f043 0301 	orr.w	r3, r3, #1
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b01      	cmp	r3, #1
 8004170:	d102      	bne.n	8004178 <HAL_RCC_OscConfig+0x94>
 8004172:	4ba8      	ldr	r3, [pc, #672]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	e015      	b.n	80041a4 <HAL_RCC_OscConfig+0xc0>
 8004178:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800417c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004180:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004184:	fa93 f3a3 	rbit	r3, r3
 8004188:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800418c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004190:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004194:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004198:	fa93 f3a3 	rbit	r3, r3
 800419c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80041a0:	4b9c      	ldr	r3, [pc, #624]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 80041a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80041a8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80041ac:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80041b0:	fa92 f2a2 	rbit	r2, r2
 80041b4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80041b8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80041bc:	fab2 f282 	clz	r2, r2
 80041c0:	b2d2      	uxtb	r2, r2
 80041c2:	f042 0220 	orr.w	r2, r2, #32
 80041c6:	b2d2      	uxtb	r2, r2
 80041c8:	f002 021f 	and.w	r2, r2, #31
 80041cc:	2101      	movs	r1, #1
 80041ce:	fa01 f202 	lsl.w	r2, r1, r2
 80041d2:	4013      	ands	r3, r2
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	f000 811f 	beq.w	8004418 <HAL_RCC_OscConfig+0x334>
 80041da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f040 8116 	bne.w	8004418 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	f000 bfaf 	b.w	8005150 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004202:	d106      	bne.n	8004212 <HAL_RCC_OscConfig+0x12e>
 8004204:	4b83      	ldr	r3, [pc, #524]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a82      	ldr	r2, [pc, #520]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 800420a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800420e:	6013      	str	r3, [r2, #0]
 8004210:	e036      	b.n	8004280 <HAL_RCC_OscConfig+0x19c>
 8004212:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004216:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d10c      	bne.n	800423c <HAL_RCC_OscConfig+0x158>
 8004222:	4b7c      	ldr	r3, [pc, #496]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a7b      	ldr	r2, [pc, #492]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 8004228:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800422c:	6013      	str	r3, [r2, #0]
 800422e:	4b79      	ldr	r3, [pc, #484]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a78      	ldr	r2, [pc, #480]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 8004234:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004238:	6013      	str	r3, [r2, #0]
 800423a:	e021      	b.n	8004280 <HAL_RCC_OscConfig+0x19c>
 800423c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004240:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800424c:	d10c      	bne.n	8004268 <HAL_RCC_OscConfig+0x184>
 800424e:	4b71      	ldr	r3, [pc, #452]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a70      	ldr	r2, [pc, #448]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 8004254:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004258:	6013      	str	r3, [r2, #0]
 800425a:	4b6e      	ldr	r3, [pc, #440]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a6d      	ldr	r2, [pc, #436]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 8004260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004264:	6013      	str	r3, [r2, #0]
 8004266:	e00b      	b.n	8004280 <HAL_RCC_OscConfig+0x19c>
 8004268:	4b6a      	ldr	r3, [pc, #424]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a69      	ldr	r2, [pc, #420]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 800426e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004272:	6013      	str	r3, [r2, #0]
 8004274:	4b67      	ldr	r3, [pc, #412]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a66      	ldr	r2, [pc, #408]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 800427a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800427e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004280:	4b64      	ldr	r3, [pc, #400]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 8004282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004284:	f023 020f 	bic.w	r2, r3, #15
 8004288:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800428c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	495f      	ldr	r1, [pc, #380]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 8004296:	4313      	orrs	r3, r2
 8004298:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800429a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800429e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d059      	beq.n	800435e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042aa:	f7fe feb3 	bl	8003014 <HAL_GetTick>
 80042ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042b2:	e00a      	b.n	80042ca <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042b4:	f7fe feae 	bl	8003014 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	2b64      	cmp	r3, #100	; 0x64
 80042c2:	d902      	bls.n	80042ca <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	f000 bf43 	b.w	8005150 <HAL_RCC_OscConfig+0x106c>
 80042ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042ce:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80042d6:	fa93 f3a3 	rbit	r3, r3
 80042da:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80042de:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042e2:	fab3 f383 	clz	r3, r3
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	095b      	lsrs	r3, r3, #5
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	f043 0301 	orr.w	r3, r3, #1
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d102      	bne.n	80042fc <HAL_RCC_OscConfig+0x218>
 80042f6:	4b47      	ldr	r3, [pc, #284]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	e015      	b.n	8004328 <HAL_RCC_OscConfig+0x244>
 80042fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004300:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004304:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004308:	fa93 f3a3 	rbit	r3, r3
 800430c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004310:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004314:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004318:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800431c:	fa93 f3a3 	rbit	r3, r3
 8004320:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004324:	4b3b      	ldr	r3, [pc, #236]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 8004326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004328:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800432c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004330:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004334:	fa92 f2a2 	rbit	r2, r2
 8004338:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800433c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004340:	fab2 f282 	clz	r2, r2
 8004344:	b2d2      	uxtb	r2, r2
 8004346:	f042 0220 	orr.w	r2, r2, #32
 800434a:	b2d2      	uxtb	r2, r2
 800434c:	f002 021f 	and.w	r2, r2, #31
 8004350:	2101      	movs	r1, #1
 8004352:	fa01 f202 	lsl.w	r2, r1, r2
 8004356:	4013      	ands	r3, r2
 8004358:	2b00      	cmp	r3, #0
 800435a:	d0ab      	beq.n	80042b4 <HAL_RCC_OscConfig+0x1d0>
 800435c:	e05d      	b.n	800441a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800435e:	f7fe fe59 	bl	8003014 <HAL_GetTick>
 8004362:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004366:	e00a      	b.n	800437e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004368:	f7fe fe54 	bl	8003014 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	2b64      	cmp	r3, #100	; 0x64
 8004376:	d902      	bls.n	800437e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	f000 bee9 	b.w	8005150 <HAL_RCC_OscConfig+0x106c>
 800437e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004382:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004386:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800438a:	fa93 f3a3 	rbit	r3, r3
 800438e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004392:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004396:	fab3 f383 	clz	r3, r3
 800439a:	b2db      	uxtb	r3, r3
 800439c:	095b      	lsrs	r3, r3, #5
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	f043 0301 	orr.w	r3, r3, #1
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d102      	bne.n	80043b0 <HAL_RCC_OscConfig+0x2cc>
 80043aa:	4b1a      	ldr	r3, [pc, #104]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	e015      	b.n	80043dc <HAL_RCC_OscConfig+0x2f8>
 80043b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043b4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80043bc:	fa93 f3a3 	rbit	r3, r3
 80043c0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80043c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043c8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80043cc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80043d0:	fa93 f3a3 	rbit	r3, r3
 80043d4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80043d8:	4b0e      	ldr	r3, [pc, #56]	; (8004414 <HAL_RCC_OscConfig+0x330>)
 80043da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80043e0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80043e4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80043e8:	fa92 f2a2 	rbit	r2, r2
 80043ec:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80043f0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80043f4:	fab2 f282 	clz	r2, r2
 80043f8:	b2d2      	uxtb	r2, r2
 80043fa:	f042 0220 	orr.w	r2, r2, #32
 80043fe:	b2d2      	uxtb	r2, r2
 8004400:	f002 021f 	and.w	r2, r2, #31
 8004404:	2101      	movs	r1, #1
 8004406:	fa01 f202 	lsl.w	r2, r1, r2
 800440a:	4013      	ands	r3, r2
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1ab      	bne.n	8004368 <HAL_RCC_OscConfig+0x284>
 8004410:	e003      	b.n	800441a <HAL_RCC_OscConfig+0x336>
 8004412:	bf00      	nop
 8004414:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004418:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800441a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800441e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b00      	cmp	r3, #0
 800442c:	f000 817d 	beq.w	800472a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004430:	4ba6      	ldr	r3, [pc, #664]	; (80046cc <HAL_RCC_OscConfig+0x5e8>)
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f003 030c 	and.w	r3, r3, #12
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00b      	beq.n	8004454 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800443c:	4ba3      	ldr	r3, [pc, #652]	; (80046cc <HAL_RCC_OscConfig+0x5e8>)
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f003 030c 	and.w	r3, r3, #12
 8004444:	2b08      	cmp	r3, #8
 8004446:	d172      	bne.n	800452e <HAL_RCC_OscConfig+0x44a>
 8004448:	4ba0      	ldr	r3, [pc, #640]	; (80046cc <HAL_RCC_OscConfig+0x5e8>)
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d16c      	bne.n	800452e <HAL_RCC_OscConfig+0x44a>
 8004454:	2302      	movs	r3, #2
 8004456:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800445a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800445e:	fa93 f3a3 	rbit	r3, r3
 8004462:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004466:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800446a:	fab3 f383 	clz	r3, r3
 800446e:	b2db      	uxtb	r3, r3
 8004470:	095b      	lsrs	r3, r3, #5
 8004472:	b2db      	uxtb	r3, r3
 8004474:	f043 0301 	orr.w	r3, r3, #1
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b01      	cmp	r3, #1
 800447c:	d102      	bne.n	8004484 <HAL_RCC_OscConfig+0x3a0>
 800447e:	4b93      	ldr	r3, [pc, #588]	; (80046cc <HAL_RCC_OscConfig+0x5e8>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	e013      	b.n	80044ac <HAL_RCC_OscConfig+0x3c8>
 8004484:	2302      	movs	r3, #2
 8004486:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800448a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800448e:	fa93 f3a3 	rbit	r3, r3
 8004492:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004496:	2302      	movs	r3, #2
 8004498:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800449c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80044a0:	fa93 f3a3 	rbit	r3, r3
 80044a4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80044a8:	4b88      	ldr	r3, [pc, #544]	; (80046cc <HAL_RCC_OscConfig+0x5e8>)
 80044aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ac:	2202      	movs	r2, #2
 80044ae:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80044b2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80044b6:	fa92 f2a2 	rbit	r2, r2
 80044ba:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80044be:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80044c2:	fab2 f282 	clz	r2, r2
 80044c6:	b2d2      	uxtb	r2, r2
 80044c8:	f042 0220 	orr.w	r2, r2, #32
 80044cc:	b2d2      	uxtb	r2, r2
 80044ce:	f002 021f 	and.w	r2, r2, #31
 80044d2:	2101      	movs	r1, #1
 80044d4:	fa01 f202 	lsl.w	r2, r1, r2
 80044d8:	4013      	ands	r3, r2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00a      	beq.n	80044f4 <HAL_RCC_OscConfig+0x410>
 80044de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d002      	beq.n	80044f4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	f000 be2e 	b.w	8005150 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044f4:	4b75      	ldr	r3, [pc, #468]	; (80046cc <HAL_RCC_OscConfig+0x5e8>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004500:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	695b      	ldr	r3, [r3, #20]
 8004508:	21f8      	movs	r1, #248	; 0xf8
 800450a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800450e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004512:	fa91 f1a1 	rbit	r1, r1
 8004516:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800451a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800451e:	fab1 f181 	clz	r1, r1
 8004522:	b2c9      	uxtb	r1, r1
 8004524:	408b      	lsls	r3, r1
 8004526:	4969      	ldr	r1, [pc, #420]	; (80046cc <HAL_RCC_OscConfig+0x5e8>)
 8004528:	4313      	orrs	r3, r2
 800452a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800452c:	e0fd      	b.n	800472a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800452e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004532:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	2b00      	cmp	r3, #0
 800453c:	f000 8088 	beq.w	8004650 <HAL_RCC_OscConfig+0x56c>
 8004540:	2301      	movs	r3, #1
 8004542:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004546:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800454a:	fa93 f3a3 	rbit	r3, r3
 800454e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004552:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004556:	fab3 f383 	clz	r3, r3
 800455a:	b2db      	uxtb	r3, r3
 800455c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004560:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	461a      	mov	r2, r3
 8004568:	2301      	movs	r3, #1
 800456a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800456c:	f7fe fd52 	bl	8003014 <HAL_GetTick>
 8004570:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004574:	e00a      	b.n	800458c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004576:	f7fe fd4d 	bl	8003014 <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	2b02      	cmp	r3, #2
 8004584:	d902      	bls.n	800458c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	f000 bde2 	b.w	8005150 <HAL_RCC_OscConfig+0x106c>
 800458c:	2302      	movs	r3, #2
 800458e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004592:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004596:	fa93 f3a3 	rbit	r3, r3
 800459a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800459e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045a2:	fab3 f383 	clz	r3, r3
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	095b      	lsrs	r3, r3, #5
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	f043 0301 	orr.w	r3, r3, #1
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d102      	bne.n	80045bc <HAL_RCC_OscConfig+0x4d8>
 80045b6:	4b45      	ldr	r3, [pc, #276]	; (80046cc <HAL_RCC_OscConfig+0x5e8>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	e013      	b.n	80045e4 <HAL_RCC_OscConfig+0x500>
 80045bc:	2302      	movs	r3, #2
 80045be:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80045c6:	fa93 f3a3 	rbit	r3, r3
 80045ca:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80045ce:	2302      	movs	r3, #2
 80045d0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80045d4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80045d8:	fa93 f3a3 	rbit	r3, r3
 80045dc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80045e0:	4b3a      	ldr	r3, [pc, #232]	; (80046cc <HAL_RCC_OscConfig+0x5e8>)
 80045e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e4:	2202      	movs	r2, #2
 80045e6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80045ea:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80045ee:	fa92 f2a2 	rbit	r2, r2
 80045f2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80045f6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80045fa:	fab2 f282 	clz	r2, r2
 80045fe:	b2d2      	uxtb	r2, r2
 8004600:	f042 0220 	orr.w	r2, r2, #32
 8004604:	b2d2      	uxtb	r2, r2
 8004606:	f002 021f 	and.w	r2, r2, #31
 800460a:	2101      	movs	r1, #1
 800460c:	fa01 f202 	lsl.w	r2, r1, r2
 8004610:	4013      	ands	r3, r2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d0af      	beq.n	8004576 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004616:	4b2d      	ldr	r3, [pc, #180]	; (80046cc <HAL_RCC_OscConfig+0x5e8>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800461e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004622:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	695b      	ldr	r3, [r3, #20]
 800462a:	21f8      	movs	r1, #248	; 0xf8
 800462c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004630:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004634:	fa91 f1a1 	rbit	r1, r1
 8004638:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800463c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004640:	fab1 f181 	clz	r1, r1
 8004644:	b2c9      	uxtb	r1, r1
 8004646:	408b      	lsls	r3, r1
 8004648:	4920      	ldr	r1, [pc, #128]	; (80046cc <HAL_RCC_OscConfig+0x5e8>)
 800464a:	4313      	orrs	r3, r2
 800464c:	600b      	str	r3, [r1, #0]
 800464e:	e06c      	b.n	800472a <HAL_RCC_OscConfig+0x646>
 8004650:	2301      	movs	r3, #1
 8004652:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004656:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800465a:	fa93 f3a3 	rbit	r3, r3
 800465e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004662:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004666:	fab3 f383 	clz	r3, r3
 800466a:	b2db      	uxtb	r3, r3
 800466c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004670:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	461a      	mov	r2, r3
 8004678:	2300      	movs	r3, #0
 800467a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800467c:	f7fe fcca 	bl	8003014 <HAL_GetTick>
 8004680:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004684:	e00a      	b.n	800469c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004686:	f7fe fcc5 	bl	8003014 <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	2b02      	cmp	r3, #2
 8004694:	d902      	bls.n	800469c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	f000 bd5a 	b.w	8005150 <HAL_RCC_OscConfig+0x106c>
 800469c:	2302      	movs	r3, #2
 800469e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80046a6:	fa93 f3a3 	rbit	r3, r3
 80046aa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80046ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046b2:	fab3 f383 	clz	r3, r3
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	095b      	lsrs	r3, r3, #5
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	f043 0301 	orr.w	r3, r3, #1
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d104      	bne.n	80046d0 <HAL_RCC_OscConfig+0x5ec>
 80046c6:	4b01      	ldr	r3, [pc, #4]	; (80046cc <HAL_RCC_OscConfig+0x5e8>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	e015      	b.n	80046f8 <HAL_RCC_OscConfig+0x614>
 80046cc:	40021000 	.word	0x40021000
 80046d0:	2302      	movs	r3, #2
 80046d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80046da:	fa93 f3a3 	rbit	r3, r3
 80046de:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80046e2:	2302      	movs	r3, #2
 80046e4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80046e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80046ec:	fa93 f3a3 	rbit	r3, r3
 80046f0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80046f4:	4bc8      	ldr	r3, [pc, #800]	; (8004a18 <HAL_RCC_OscConfig+0x934>)
 80046f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f8:	2202      	movs	r2, #2
 80046fa:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80046fe:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004702:	fa92 f2a2 	rbit	r2, r2
 8004706:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800470a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800470e:	fab2 f282 	clz	r2, r2
 8004712:	b2d2      	uxtb	r2, r2
 8004714:	f042 0220 	orr.w	r2, r2, #32
 8004718:	b2d2      	uxtb	r2, r2
 800471a:	f002 021f 	and.w	r2, r2, #31
 800471e:	2101      	movs	r1, #1
 8004720:	fa01 f202 	lsl.w	r2, r1, r2
 8004724:	4013      	ands	r3, r2
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1ad      	bne.n	8004686 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800472a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800472e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0308 	and.w	r3, r3, #8
 800473a:	2b00      	cmp	r3, #0
 800473c:	f000 8110 	beq.w	8004960 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004740:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004744:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	699b      	ldr	r3, [r3, #24]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d079      	beq.n	8004844 <HAL_RCC_OscConfig+0x760>
 8004750:	2301      	movs	r3, #1
 8004752:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004756:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800475a:	fa93 f3a3 	rbit	r3, r3
 800475e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004762:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004766:	fab3 f383 	clz	r3, r3
 800476a:	b2db      	uxtb	r3, r3
 800476c:	461a      	mov	r2, r3
 800476e:	4bab      	ldr	r3, [pc, #684]	; (8004a1c <HAL_RCC_OscConfig+0x938>)
 8004770:	4413      	add	r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	461a      	mov	r2, r3
 8004776:	2301      	movs	r3, #1
 8004778:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800477a:	f7fe fc4b 	bl	8003014 <HAL_GetTick>
 800477e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004782:	e00a      	b.n	800479a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004784:	f7fe fc46 	bl	8003014 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	2b02      	cmp	r3, #2
 8004792:	d902      	bls.n	800479a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	f000 bcdb 	b.w	8005150 <HAL_RCC_OscConfig+0x106c>
 800479a:	2302      	movs	r3, #2
 800479c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80047a4:	fa93 f3a3 	rbit	r3, r3
 80047a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80047ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047b0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80047b4:	2202      	movs	r2, #2
 80047b6:	601a      	str	r2, [r3, #0]
 80047b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047bc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	fa93 f2a3 	rbit	r2, r3
 80047c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80047ce:	601a      	str	r2, [r3, #0]
 80047d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047d8:	2202      	movs	r2, #2
 80047da:	601a      	str	r2, [r3, #0]
 80047dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	fa93 f2a3 	rbit	r2, r3
 80047ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047ee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80047f2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047f4:	4b88      	ldr	r3, [pc, #544]	; (8004a18 <HAL_RCC_OscConfig+0x934>)
 80047f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047fc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004800:	2102      	movs	r1, #2
 8004802:	6019      	str	r1, [r3, #0]
 8004804:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004808:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	fa93 f1a3 	rbit	r1, r3
 8004812:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004816:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800481a:	6019      	str	r1, [r3, #0]
  return result;
 800481c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004820:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	fab3 f383 	clz	r3, r3
 800482a:	b2db      	uxtb	r3, r3
 800482c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004830:	b2db      	uxtb	r3, r3
 8004832:	f003 031f 	and.w	r3, r3, #31
 8004836:	2101      	movs	r1, #1
 8004838:	fa01 f303 	lsl.w	r3, r1, r3
 800483c:	4013      	ands	r3, r2
 800483e:	2b00      	cmp	r3, #0
 8004840:	d0a0      	beq.n	8004784 <HAL_RCC_OscConfig+0x6a0>
 8004842:	e08d      	b.n	8004960 <HAL_RCC_OscConfig+0x87c>
 8004844:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004848:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800484c:	2201      	movs	r2, #1
 800484e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004850:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004854:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	fa93 f2a3 	rbit	r2, r3
 800485e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004862:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004866:	601a      	str	r2, [r3, #0]
  return result;
 8004868:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800486c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004870:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004872:	fab3 f383 	clz	r3, r3
 8004876:	b2db      	uxtb	r3, r3
 8004878:	461a      	mov	r2, r3
 800487a:	4b68      	ldr	r3, [pc, #416]	; (8004a1c <HAL_RCC_OscConfig+0x938>)
 800487c:	4413      	add	r3, r2
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	461a      	mov	r2, r3
 8004882:	2300      	movs	r3, #0
 8004884:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004886:	f7fe fbc5 	bl	8003014 <HAL_GetTick>
 800488a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800488e:	e00a      	b.n	80048a6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004890:	f7fe fbc0 	bl	8003014 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	2b02      	cmp	r3, #2
 800489e:	d902      	bls.n	80048a6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	f000 bc55 	b.w	8005150 <HAL_RCC_OscConfig+0x106c>
 80048a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048aa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80048ae:	2202      	movs	r2, #2
 80048b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048b6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	fa93 f2a3 	rbit	r2, r3
 80048c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048c4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80048c8:	601a      	str	r2, [r3, #0]
 80048ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048ce:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80048d2:	2202      	movs	r2, #2
 80048d4:	601a      	str	r2, [r3, #0]
 80048d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048da:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	fa93 f2a3 	rbit	r2, r3
 80048e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80048ec:	601a      	str	r2, [r3, #0]
 80048ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048f6:	2202      	movs	r2, #2
 80048f8:	601a      	str	r2, [r3, #0]
 80048fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	fa93 f2a3 	rbit	r2, r3
 8004908:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800490c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004910:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004912:	4b41      	ldr	r3, [pc, #260]	; (8004a18 <HAL_RCC_OscConfig+0x934>)
 8004914:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004916:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800491a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800491e:	2102      	movs	r1, #2
 8004920:	6019      	str	r1, [r3, #0]
 8004922:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004926:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	fa93 f1a3 	rbit	r1, r3
 8004930:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004934:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004938:	6019      	str	r1, [r3, #0]
  return result;
 800493a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800493e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	fab3 f383 	clz	r3, r3
 8004948:	b2db      	uxtb	r3, r3
 800494a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800494e:	b2db      	uxtb	r3, r3
 8004950:	f003 031f 	and.w	r3, r3, #31
 8004954:	2101      	movs	r1, #1
 8004956:	fa01 f303 	lsl.w	r3, r1, r3
 800495a:	4013      	ands	r3, r2
 800495c:	2b00      	cmp	r3, #0
 800495e:	d197      	bne.n	8004890 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004960:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004964:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0304 	and.w	r3, r3, #4
 8004970:	2b00      	cmp	r3, #0
 8004972:	f000 81a1 	beq.w	8004cb8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004976:	2300      	movs	r3, #0
 8004978:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800497c:	4b26      	ldr	r3, [pc, #152]	; (8004a18 <HAL_RCC_OscConfig+0x934>)
 800497e:	69db      	ldr	r3, [r3, #28]
 8004980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d116      	bne.n	80049b6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004988:	4b23      	ldr	r3, [pc, #140]	; (8004a18 <HAL_RCC_OscConfig+0x934>)
 800498a:	69db      	ldr	r3, [r3, #28]
 800498c:	4a22      	ldr	r2, [pc, #136]	; (8004a18 <HAL_RCC_OscConfig+0x934>)
 800498e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004992:	61d3      	str	r3, [r2, #28]
 8004994:	4b20      	ldr	r3, [pc, #128]	; (8004a18 <HAL_RCC_OscConfig+0x934>)
 8004996:	69db      	ldr	r3, [r3, #28]
 8004998:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800499c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049a0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80049a4:	601a      	str	r2, [r3, #0]
 80049a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049aa:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80049ae:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80049b0:	2301      	movs	r3, #1
 80049b2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049b6:	4b1a      	ldr	r3, [pc, #104]	; (8004a20 <HAL_RCC_OscConfig+0x93c>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d11a      	bne.n	80049f8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049c2:	4b17      	ldr	r3, [pc, #92]	; (8004a20 <HAL_RCC_OscConfig+0x93c>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a16      	ldr	r2, [pc, #88]	; (8004a20 <HAL_RCC_OscConfig+0x93c>)
 80049c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049cc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049ce:	f7fe fb21 	bl	8003014 <HAL_GetTick>
 80049d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049d6:	e009      	b.n	80049ec <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049d8:	f7fe fb1c 	bl	8003014 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	2b64      	cmp	r3, #100	; 0x64
 80049e6:	d901      	bls.n	80049ec <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	e3b1      	b.n	8005150 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049ec:	4b0c      	ldr	r3, [pc, #48]	; (8004a20 <HAL_RCC_OscConfig+0x93c>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d0ef      	beq.n	80049d8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d10d      	bne.n	8004a24 <HAL_RCC_OscConfig+0x940>
 8004a08:	4b03      	ldr	r3, [pc, #12]	; (8004a18 <HAL_RCC_OscConfig+0x934>)
 8004a0a:	6a1b      	ldr	r3, [r3, #32]
 8004a0c:	4a02      	ldr	r2, [pc, #8]	; (8004a18 <HAL_RCC_OscConfig+0x934>)
 8004a0e:	f043 0301 	orr.w	r3, r3, #1
 8004a12:	6213      	str	r3, [r2, #32]
 8004a14:	e03c      	b.n	8004a90 <HAL_RCC_OscConfig+0x9ac>
 8004a16:	bf00      	nop
 8004a18:	40021000 	.word	0x40021000
 8004a1c:	10908120 	.word	0x10908120
 8004a20:	40007000 	.word	0x40007000
 8004a24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a28:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d10c      	bne.n	8004a4e <HAL_RCC_OscConfig+0x96a>
 8004a34:	4bc1      	ldr	r3, [pc, #772]	; (8004d3c <HAL_RCC_OscConfig+0xc58>)
 8004a36:	6a1b      	ldr	r3, [r3, #32]
 8004a38:	4ac0      	ldr	r2, [pc, #768]	; (8004d3c <HAL_RCC_OscConfig+0xc58>)
 8004a3a:	f023 0301 	bic.w	r3, r3, #1
 8004a3e:	6213      	str	r3, [r2, #32]
 8004a40:	4bbe      	ldr	r3, [pc, #760]	; (8004d3c <HAL_RCC_OscConfig+0xc58>)
 8004a42:	6a1b      	ldr	r3, [r3, #32]
 8004a44:	4abd      	ldr	r2, [pc, #756]	; (8004d3c <HAL_RCC_OscConfig+0xc58>)
 8004a46:	f023 0304 	bic.w	r3, r3, #4
 8004a4a:	6213      	str	r3, [r2, #32]
 8004a4c:	e020      	b.n	8004a90 <HAL_RCC_OscConfig+0x9ac>
 8004a4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	2b05      	cmp	r3, #5
 8004a5c:	d10c      	bne.n	8004a78 <HAL_RCC_OscConfig+0x994>
 8004a5e:	4bb7      	ldr	r3, [pc, #732]	; (8004d3c <HAL_RCC_OscConfig+0xc58>)
 8004a60:	6a1b      	ldr	r3, [r3, #32]
 8004a62:	4ab6      	ldr	r2, [pc, #728]	; (8004d3c <HAL_RCC_OscConfig+0xc58>)
 8004a64:	f043 0304 	orr.w	r3, r3, #4
 8004a68:	6213      	str	r3, [r2, #32]
 8004a6a:	4bb4      	ldr	r3, [pc, #720]	; (8004d3c <HAL_RCC_OscConfig+0xc58>)
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
 8004a6e:	4ab3      	ldr	r2, [pc, #716]	; (8004d3c <HAL_RCC_OscConfig+0xc58>)
 8004a70:	f043 0301 	orr.w	r3, r3, #1
 8004a74:	6213      	str	r3, [r2, #32]
 8004a76:	e00b      	b.n	8004a90 <HAL_RCC_OscConfig+0x9ac>
 8004a78:	4bb0      	ldr	r3, [pc, #704]	; (8004d3c <HAL_RCC_OscConfig+0xc58>)
 8004a7a:	6a1b      	ldr	r3, [r3, #32]
 8004a7c:	4aaf      	ldr	r2, [pc, #700]	; (8004d3c <HAL_RCC_OscConfig+0xc58>)
 8004a7e:	f023 0301 	bic.w	r3, r3, #1
 8004a82:	6213      	str	r3, [r2, #32]
 8004a84:	4bad      	ldr	r3, [pc, #692]	; (8004d3c <HAL_RCC_OscConfig+0xc58>)
 8004a86:	6a1b      	ldr	r3, [r3, #32]
 8004a88:	4aac      	ldr	r2, [pc, #688]	; (8004d3c <HAL_RCC_OscConfig+0xc58>)
 8004a8a:	f023 0304 	bic.w	r3, r3, #4
 8004a8e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a94:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f000 8081 	beq.w	8004ba4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aa2:	f7fe fab7 	bl	8003014 <HAL_GetTick>
 8004aa6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aaa:	e00b      	b.n	8004ac4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004aac:	f7fe fab2 	bl	8003014 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d901      	bls.n	8004ac4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e345      	b.n	8005150 <HAL_RCC_OscConfig+0x106c>
 8004ac4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ac8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004acc:	2202      	movs	r2, #2
 8004ace:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ad4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	fa93 f2a3 	rbit	r2, r3
 8004ade:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ae2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004ae6:	601a      	str	r2, [r3, #0]
 8004ae8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aec:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004af0:	2202      	movs	r2, #2
 8004af2:	601a      	str	r2, [r3, #0]
 8004af4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004af8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	fa93 f2a3 	rbit	r2, r3
 8004b02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b06:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004b0a:	601a      	str	r2, [r3, #0]
  return result;
 8004b0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b10:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004b14:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b16:	fab3 f383 	clz	r3, r3
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	095b      	lsrs	r3, r3, #5
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	f043 0302 	orr.w	r3, r3, #2
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d102      	bne.n	8004b30 <HAL_RCC_OscConfig+0xa4c>
 8004b2a:	4b84      	ldr	r3, [pc, #528]	; (8004d3c <HAL_RCC_OscConfig+0xc58>)
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
 8004b2e:	e013      	b.n	8004b58 <HAL_RCC_OscConfig+0xa74>
 8004b30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b34:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004b38:	2202      	movs	r2, #2
 8004b3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b40:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	fa93 f2a3 	rbit	r2, r3
 8004b4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b4e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004b52:	601a      	str	r2, [r3, #0]
 8004b54:	4b79      	ldr	r3, [pc, #484]	; (8004d3c <HAL_RCC_OscConfig+0xc58>)
 8004b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b58:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b5c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004b60:	2102      	movs	r1, #2
 8004b62:	6011      	str	r1, [r2, #0]
 8004b64:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b68:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004b6c:	6812      	ldr	r2, [r2, #0]
 8004b6e:	fa92 f1a2 	rbit	r1, r2
 8004b72:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b76:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004b7a:	6011      	str	r1, [r2, #0]
  return result;
 8004b7c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b80:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004b84:	6812      	ldr	r2, [r2, #0]
 8004b86:	fab2 f282 	clz	r2, r2
 8004b8a:	b2d2      	uxtb	r2, r2
 8004b8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b90:	b2d2      	uxtb	r2, r2
 8004b92:	f002 021f 	and.w	r2, r2, #31
 8004b96:	2101      	movs	r1, #1
 8004b98:	fa01 f202 	lsl.w	r2, r1, r2
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d084      	beq.n	8004aac <HAL_RCC_OscConfig+0x9c8>
 8004ba2:	e07f      	b.n	8004ca4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ba4:	f7fe fa36 	bl	8003014 <HAL_GetTick>
 8004ba8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bac:	e00b      	b.n	8004bc6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bae:	f7fe fa31 	bl	8003014 <HAL_GetTick>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d901      	bls.n	8004bc6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e2c4      	b.n	8005150 <HAL_RCC_OscConfig+0x106c>
 8004bc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bca:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004bce:	2202      	movs	r2, #2
 8004bd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bd6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	fa93 f2a3 	rbit	r2, r3
 8004be0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004be4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004be8:	601a      	str	r2, [r3, #0]
 8004bea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bee:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004bf2:	2202      	movs	r2, #2
 8004bf4:	601a      	str	r2, [r3, #0]
 8004bf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bfa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	fa93 f2a3 	rbit	r2, r3
 8004c04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c08:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004c0c:	601a      	str	r2, [r3, #0]
  return result;
 8004c0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c12:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004c16:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c18:	fab3 f383 	clz	r3, r3
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	095b      	lsrs	r3, r3, #5
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	f043 0302 	orr.w	r3, r3, #2
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d102      	bne.n	8004c32 <HAL_RCC_OscConfig+0xb4e>
 8004c2c:	4b43      	ldr	r3, [pc, #268]	; (8004d3c <HAL_RCC_OscConfig+0xc58>)
 8004c2e:	6a1b      	ldr	r3, [r3, #32]
 8004c30:	e013      	b.n	8004c5a <HAL_RCC_OscConfig+0xb76>
 8004c32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c36:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c42:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	fa93 f2a3 	rbit	r2, r3
 8004c4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c50:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004c54:	601a      	str	r2, [r3, #0]
 8004c56:	4b39      	ldr	r3, [pc, #228]	; (8004d3c <HAL_RCC_OscConfig+0xc58>)
 8004c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c5e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004c62:	2102      	movs	r1, #2
 8004c64:	6011      	str	r1, [r2, #0]
 8004c66:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c6a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004c6e:	6812      	ldr	r2, [r2, #0]
 8004c70:	fa92 f1a2 	rbit	r1, r2
 8004c74:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c78:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004c7c:	6011      	str	r1, [r2, #0]
  return result;
 8004c7e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c82:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004c86:	6812      	ldr	r2, [r2, #0]
 8004c88:	fab2 f282 	clz	r2, r2
 8004c8c:	b2d2      	uxtb	r2, r2
 8004c8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c92:	b2d2      	uxtb	r2, r2
 8004c94:	f002 021f 	and.w	r2, r2, #31
 8004c98:	2101      	movs	r1, #1
 8004c9a:	fa01 f202 	lsl.w	r2, r1, r2
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d184      	bne.n	8004bae <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004ca4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d105      	bne.n	8004cb8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cac:	4b23      	ldr	r3, [pc, #140]	; (8004d3c <HAL_RCC_OscConfig+0xc58>)
 8004cae:	69db      	ldr	r3, [r3, #28]
 8004cb0:	4a22      	ldr	r2, [pc, #136]	; (8004d3c <HAL_RCC_OscConfig+0xc58>)
 8004cb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cb6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cbc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	69db      	ldr	r3, [r3, #28]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	f000 8242 	beq.w	800514e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004cca:	4b1c      	ldr	r3, [pc, #112]	; (8004d3c <HAL_RCC_OscConfig+0xc58>)
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	f003 030c 	and.w	r3, r3, #12
 8004cd2:	2b08      	cmp	r3, #8
 8004cd4:	f000 8213 	beq.w	80050fe <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cdc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	69db      	ldr	r3, [r3, #28]
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	f040 8162 	bne.w	8004fae <HAL_RCC_OscConfig+0xeca>
 8004cea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cee:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004cf2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004cf6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cfc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	fa93 f2a3 	rbit	r2, r3
 8004d06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d0a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004d0e:	601a      	str	r2, [r3, #0]
  return result;
 8004d10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d14:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004d18:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d1a:	fab3 f383 	clz	r3, r3
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004d24:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d30:	f7fe f970 	bl	8003014 <HAL_GetTick>
 8004d34:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d38:	e00c      	b.n	8004d54 <HAL_RCC_OscConfig+0xc70>
 8004d3a:	bf00      	nop
 8004d3c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d40:	f7fe f968 	bl	8003014 <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d901      	bls.n	8004d54 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	e1fd      	b.n	8005150 <HAL_RCC_OscConfig+0x106c>
 8004d54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d58:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004d5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d66:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	fa93 f2a3 	rbit	r2, r3
 8004d70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d74:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004d78:	601a      	str	r2, [r3, #0]
  return result;
 8004d7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d7e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004d82:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d84:	fab3 f383 	clz	r3, r3
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	095b      	lsrs	r3, r3, #5
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	f043 0301 	orr.w	r3, r3, #1
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d102      	bne.n	8004d9e <HAL_RCC_OscConfig+0xcba>
 8004d98:	4bb0      	ldr	r3, [pc, #704]	; (800505c <HAL_RCC_OscConfig+0xf78>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	e027      	b.n	8004dee <HAL_RCC_OscConfig+0xd0a>
 8004d9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004da2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004da6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004daa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004db0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	fa93 f2a3 	rbit	r2, r3
 8004dba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dbe:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004dc2:	601a      	str	r2, [r3, #0]
 8004dc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dc8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004dcc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004dd0:	601a      	str	r2, [r3, #0]
 8004dd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dd6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	fa93 f2a3 	rbit	r2, r3
 8004de0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004de4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004de8:	601a      	str	r2, [r3, #0]
 8004dea:	4b9c      	ldr	r3, [pc, #624]	; (800505c <HAL_RCC_OscConfig+0xf78>)
 8004dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004df2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004df6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004dfa:	6011      	str	r1, [r2, #0]
 8004dfc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e00:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004e04:	6812      	ldr	r2, [r2, #0]
 8004e06:	fa92 f1a2 	rbit	r1, r2
 8004e0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e0e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004e12:	6011      	str	r1, [r2, #0]
  return result;
 8004e14:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e18:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004e1c:	6812      	ldr	r2, [r2, #0]
 8004e1e:	fab2 f282 	clz	r2, r2
 8004e22:	b2d2      	uxtb	r2, r2
 8004e24:	f042 0220 	orr.w	r2, r2, #32
 8004e28:	b2d2      	uxtb	r2, r2
 8004e2a:	f002 021f 	and.w	r2, r2, #31
 8004e2e:	2101      	movs	r1, #1
 8004e30:	fa01 f202 	lsl.w	r2, r1, r2
 8004e34:	4013      	ands	r3, r2
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d182      	bne.n	8004d40 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e3a:	4b88      	ldr	r3, [pc, #544]	; (800505c <HAL_RCC_OscConfig+0xf78>)
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004e42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004e4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	430b      	orrs	r3, r1
 8004e5c:	497f      	ldr	r1, [pc, #508]	; (800505c <HAL_RCC_OscConfig+0xf78>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	604b      	str	r3, [r1, #4]
 8004e62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e66:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004e6a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004e6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e74:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	fa93 f2a3 	rbit	r2, r3
 8004e7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e82:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004e86:	601a      	str	r2, [r3, #0]
  return result;
 8004e88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e8c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004e90:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e92:	fab3 f383 	clz	r3, r3
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004e9c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ea8:	f7fe f8b4 	bl	8003014 <HAL_GetTick>
 8004eac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004eb0:	e009      	b.n	8004ec6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004eb2:	f7fe f8af 	bl	8003014 <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d901      	bls.n	8004ec6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e144      	b.n	8005150 <HAL_RCC_OscConfig+0x106c>
 8004ec6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eca:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004ece:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ed2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ed4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ed8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	fa93 f2a3 	rbit	r2, r3
 8004ee2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ee6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004eea:	601a      	str	r2, [r3, #0]
  return result;
 8004eec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ef0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004ef4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ef6:	fab3 f383 	clz	r3, r3
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	095b      	lsrs	r3, r3, #5
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	f043 0301 	orr.w	r3, r3, #1
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d102      	bne.n	8004f10 <HAL_RCC_OscConfig+0xe2c>
 8004f0a:	4b54      	ldr	r3, [pc, #336]	; (800505c <HAL_RCC_OscConfig+0xf78>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	e027      	b.n	8004f60 <HAL_RCC_OscConfig+0xe7c>
 8004f10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f14:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004f18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f22:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	fa93 f2a3 	rbit	r2, r3
 8004f2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f30:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004f34:	601a      	str	r2, [r3, #0]
 8004f36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f3a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004f3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f42:	601a      	str	r2, [r3, #0]
 8004f44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f48:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	fa93 f2a3 	rbit	r2, r3
 8004f52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f56:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004f5a:	601a      	str	r2, [r3, #0]
 8004f5c:	4b3f      	ldr	r3, [pc, #252]	; (800505c <HAL_RCC_OscConfig+0xf78>)
 8004f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f60:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f64:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004f68:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004f6c:	6011      	str	r1, [r2, #0]
 8004f6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f72:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004f76:	6812      	ldr	r2, [r2, #0]
 8004f78:	fa92 f1a2 	rbit	r1, r2
 8004f7c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f80:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004f84:	6011      	str	r1, [r2, #0]
  return result;
 8004f86:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f8a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004f8e:	6812      	ldr	r2, [r2, #0]
 8004f90:	fab2 f282 	clz	r2, r2
 8004f94:	b2d2      	uxtb	r2, r2
 8004f96:	f042 0220 	orr.w	r2, r2, #32
 8004f9a:	b2d2      	uxtb	r2, r2
 8004f9c:	f002 021f 	and.w	r2, r2, #31
 8004fa0:	2101      	movs	r1, #1
 8004fa2:	fa01 f202 	lsl.w	r2, r1, r2
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d082      	beq.n	8004eb2 <HAL_RCC_OscConfig+0xdce>
 8004fac:	e0cf      	b.n	800514e <HAL_RCC_OscConfig+0x106a>
 8004fae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fb2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004fb6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004fba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fc0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	fa93 f2a3 	rbit	r2, r3
 8004fca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fce:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004fd2:	601a      	str	r2, [r3, #0]
  return result;
 8004fd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fd8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004fdc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fde:	fab3 f383 	clz	r3, r3
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004fe8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	461a      	mov	r2, r3
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ff4:	f7fe f80e 	bl	8003014 <HAL_GetTick>
 8004ff8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ffc:	e009      	b.n	8005012 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ffe:	f7fe f809 	bl	8003014 <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	2b02      	cmp	r3, #2
 800500c:	d901      	bls.n	8005012 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e09e      	b.n	8005150 <HAL_RCC_OscConfig+0x106c>
 8005012:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005016:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800501a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800501e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005020:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005024:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	fa93 f2a3 	rbit	r2, r3
 800502e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005032:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005036:	601a      	str	r2, [r3, #0]
  return result;
 8005038:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800503c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005040:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005042:	fab3 f383 	clz	r3, r3
 8005046:	b2db      	uxtb	r3, r3
 8005048:	095b      	lsrs	r3, r3, #5
 800504a:	b2db      	uxtb	r3, r3
 800504c:	f043 0301 	orr.w	r3, r3, #1
 8005050:	b2db      	uxtb	r3, r3
 8005052:	2b01      	cmp	r3, #1
 8005054:	d104      	bne.n	8005060 <HAL_RCC_OscConfig+0xf7c>
 8005056:	4b01      	ldr	r3, [pc, #4]	; (800505c <HAL_RCC_OscConfig+0xf78>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	e029      	b.n	80050b0 <HAL_RCC_OscConfig+0xfcc>
 800505c:	40021000 	.word	0x40021000
 8005060:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005064:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005068:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800506c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800506e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005072:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	fa93 f2a3 	rbit	r2, r3
 800507c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005080:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005084:	601a      	str	r2, [r3, #0]
 8005086:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800508a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800508e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005092:	601a      	str	r2, [r3, #0]
 8005094:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005098:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	fa93 f2a3 	rbit	r2, r3
 80050a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050a6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80050aa:	601a      	str	r2, [r3, #0]
 80050ac:	4b2b      	ldr	r3, [pc, #172]	; (800515c <HAL_RCC_OscConfig+0x1078>)
 80050ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80050b4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80050b8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80050bc:	6011      	str	r1, [r2, #0]
 80050be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80050c2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80050c6:	6812      	ldr	r2, [r2, #0]
 80050c8:	fa92 f1a2 	rbit	r1, r2
 80050cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80050d0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80050d4:	6011      	str	r1, [r2, #0]
  return result;
 80050d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80050da:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80050de:	6812      	ldr	r2, [r2, #0]
 80050e0:	fab2 f282 	clz	r2, r2
 80050e4:	b2d2      	uxtb	r2, r2
 80050e6:	f042 0220 	orr.w	r2, r2, #32
 80050ea:	b2d2      	uxtb	r2, r2
 80050ec:	f002 021f 	and.w	r2, r2, #31
 80050f0:	2101      	movs	r1, #1
 80050f2:	fa01 f202 	lsl.w	r2, r1, r2
 80050f6:	4013      	ands	r3, r2
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d180      	bne.n	8004ffe <HAL_RCC_OscConfig+0xf1a>
 80050fc:	e027      	b.n	800514e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005102:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	69db      	ldr	r3, [r3, #28]
 800510a:	2b01      	cmp	r3, #1
 800510c:	d101      	bne.n	8005112 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e01e      	b.n	8005150 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005112:	4b12      	ldr	r3, [pc, #72]	; (800515c <HAL_RCC_OscConfig+0x1078>)
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800511a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800511e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005122:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005126:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	429a      	cmp	r2, r3
 8005130:	d10b      	bne.n	800514a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005132:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005136:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800513a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800513e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005146:	429a      	cmp	r2, r3
 8005148:	d001      	beq.n	800514e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e000      	b.n	8005150 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	40021000 	.word	0x40021000

08005160 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b09e      	sub	sp, #120	; 0x78
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800516a:	2300      	movs	r3, #0
 800516c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d101      	bne.n	8005178 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e162      	b.n	800543e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005178:	4b90      	ldr	r3, [pc, #576]	; (80053bc <HAL_RCC_ClockConfig+0x25c>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0307 	and.w	r3, r3, #7
 8005180:	683a      	ldr	r2, [r7, #0]
 8005182:	429a      	cmp	r2, r3
 8005184:	d910      	bls.n	80051a8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005186:	4b8d      	ldr	r3, [pc, #564]	; (80053bc <HAL_RCC_ClockConfig+0x25c>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f023 0207 	bic.w	r2, r3, #7
 800518e:	498b      	ldr	r1, [pc, #556]	; (80053bc <HAL_RCC_ClockConfig+0x25c>)
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	4313      	orrs	r3, r2
 8005194:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005196:	4b89      	ldr	r3, [pc, #548]	; (80053bc <HAL_RCC_ClockConfig+0x25c>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0307 	and.w	r3, r3, #7
 800519e:	683a      	ldr	r2, [r7, #0]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d001      	beq.n	80051a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e14a      	b.n	800543e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0302 	and.w	r3, r3, #2
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d008      	beq.n	80051c6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051b4:	4b82      	ldr	r3, [pc, #520]	; (80053c0 <HAL_RCC_ClockConfig+0x260>)
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	497f      	ldr	r1, [pc, #508]	; (80053c0 <HAL_RCC_ClockConfig+0x260>)
 80051c2:	4313      	orrs	r3, r2
 80051c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0301 	and.w	r3, r3, #1
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	f000 80dc 	beq.w	800538c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d13c      	bne.n	8005256 <HAL_RCC_ClockConfig+0xf6>
 80051dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80051e0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051e4:	fa93 f3a3 	rbit	r3, r3
 80051e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80051ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051ec:	fab3 f383 	clz	r3, r3
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	095b      	lsrs	r3, r3, #5
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	f043 0301 	orr.w	r3, r3, #1
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d102      	bne.n	8005206 <HAL_RCC_ClockConfig+0xa6>
 8005200:	4b6f      	ldr	r3, [pc, #444]	; (80053c0 <HAL_RCC_ClockConfig+0x260>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	e00f      	b.n	8005226 <HAL_RCC_ClockConfig+0xc6>
 8005206:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800520a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800520c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800520e:	fa93 f3a3 	rbit	r3, r3
 8005212:	667b      	str	r3, [r7, #100]	; 0x64
 8005214:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005218:	663b      	str	r3, [r7, #96]	; 0x60
 800521a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800521c:	fa93 f3a3 	rbit	r3, r3
 8005220:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005222:	4b67      	ldr	r3, [pc, #412]	; (80053c0 <HAL_RCC_ClockConfig+0x260>)
 8005224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005226:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800522a:	65ba      	str	r2, [r7, #88]	; 0x58
 800522c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800522e:	fa92 f2a2 	rbit	r2, r2
 8005232:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005234:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005236:	fab2 f282 	clz	r2, r2
 800523a:	b2d2      	uxtb	r2, r2
 800523c:	f042 0220 	orr.w	r2, r2, #32
 8005240:	b2d2      	uxtb	r2, r2
 8005242:	f002 021f 	and.w	r2, r2, #31
 8005246:	2101      	movs	r1, #1
 8005248:	fa01 f202 	lsl.w	r2, r1, r2
 800524c:	4013      	ands	r3, r2
 800524e:	2b00      	cmp	r3, #0
 8005250:	d17b      	bne.n	800534a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e0f3      	b.n	800543e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	2b02      	cmp	r3, #2
 800525c:	d13c      	bne.n	80052d8 <HAL_RCC_ClockConfig+0x178>
 800525e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005262:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005264:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005266:	fa93 f3a3 	rbit	r3, r3
 800526a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800526c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800526e:	fab3 f383 	clz	r3, r3
 8005272:	b2db      	uxtb	r3, r3
 8005274:	095b      	lsrs	r3, r3, #5
 8005276:	b2db      	uxtb	r3, r3
 8005278:	f043 0301 	orr.w	r3, r3, #1
 800527c:	b2db      	uxtb	r3, r3
 800527e:	2b01      	cmp	r3, #1
 8005280:	d102      	bne.n	8005288 <HAL_RCC_ClockConfig+0x128>
 8005282:	4b4f      	ldr	r3, [pc, #316]	; (80053c0 <HAL_RCC_ClockConfig+0x260>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	e00f      	b.n	80052a8 <HAL_RCC_ClockConfig+0x148>
 8005288:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800528c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800528e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005290:	fa93 f3a3 	rbit	r3, r3
 8005294:	647b      	str	r3, [r7, #68]	; 0x44
 8005296:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800529a:	643b      	str	r3, [r7, #64]	; 0x40
 800529c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800529e:	fa93 f3a3 	rbit	r3, r3
 80052a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052a4:	4b46      	ldr	r3, [pc, #280]	; (80053c0 <HAL_RCC_ClockConfig+0x260>)
 80052a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80052ac:	63ba      	str	r2, [r7, #56]	; 0x38
 80052ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052b0:	fa92 f2a2 	rbit	r2, r2
 80052b4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80052b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052b8:	fab2 f282 	clz	r2, r2
 80052bc:	b2d2      	uxtb	r2, r2
 80052be:	f042 0220 	orr.w	r2, r2, #32
 80052c2:	b2d2      	uxtb	r2, r2
 80052c4:	f002 021f 	and.w	r2, r2, #31
 80052c8:	2101      	movs	r1, #1
 80052ca:	fa01 f202 	lsl.w	r2, r1, r2
 80052ce:	4013      	ands	r3, r2
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d13a      	bne.n	800534a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e0b2      	b.n	800543e <HAL_RCC_ClockConfig+0x2de>
 80052d8:	2302      	movs	r3, #2
 80052da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052de:	fa93 f3a3 	rbit	r3, r3
 80052e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80052e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052e6:	fab3 f383 	clz	r3, r3
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	095b      	lsrs	r3, r3, #5
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	f043 0301 	orr.w	r3, r3, #1
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d102      	bne.n	8005300 <HAL_RCC_ClockConfig+0x1a0>
 80052fa:	4b31      	ldr	r3, [pc, #196]	; (80053c0 <HAL_RCC_ClockConfig+0x260>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	e00d      	b.n	800531c <HAL_RCC_ClockConfig+0x1bc>
 8005300:	2302      	movs	r3, #2
 8005302:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005306:	fa93 f3a3 	rbit	r3, r3
 800530a:	627b      	str	r3, [r7, #36]	; 0x24
 800530c:	2302      	movs	r3, #2
 800530e:	623b      	str	r3, [r7, #32]
 8005310:	6a3b      	ldr	r3, [r7, #32]
 8005312:	fa93 f3a3 	rbit	r3, r3
 8005316:	61fb      	str	r3, [r7, #28]
 8005318:	4b29      	ldr	r3, [pc, #164]	; (80053c0 <HAL_RCC_ClockConfig+0x260>)
 800531a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531c:	2202      	movs	r2, #2
 800531e:	61ba      	str	r2, [r7, #24]
 8005320:	69ba      	ldr	r2, [r7, #24]
 8005322:	fa92 f2a2 	rbit	r2, r2
 8005326:	617a      	str	r2, [r7, #20]
  return result;
 8005328:	697a      	ldr	r2, [r7, #20]
 800532a:	fab2 f282 	clz	r2, r2
 800532e:	b2d2      	uxtb	r2, r2
 8005330:	f042 0220 	orr.w	r2, r2, #32
 8005334:	b2d2      	uxtb	r2, r2
 8005336:	f002 021f 	and.w	r2, r2, #31
 800533a:	2101      	movs	r1, #1
 800533c:	fa01 f202 	lsl.w	r2, r1, r2
 8005340:	4013      	ands	r3, r2
 8005342:	2b00      	cmp	r3, #0
 8005344:	d101      	bne.n	800534a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e079      	b.n	800543e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800534a:	4b1d      	ldr	r3, [pc, #116]	; (80053c0 <HAL_RCC_ClockConfig+0x260>)
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	f023 0203 	bic.w	r2, r3, #3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	491a      	ldr	r1, [pc, #104]	; (80053c0 <HAL_RCC_ClockConfig+0x260>)
 8005358:	4313      	orrs	r3, r2
 800535a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800535c:	f7fd fe5a 	bl	8003014 <HAL_GetTick>
 8005360:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005362:	e00a      	b.n	800537a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005364:	f7fd fe56 	bl	8003014 <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005372:	4293      	cmp	r3, r2
 8005374:	d901      	bls.n	800537a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	e061      	b.n	800543e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800537a:	4b11      	ldr	r3, [pc, #68]	; (80053c0 <HAL_RCC_ClockConfig+0x260>)
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	f003 020c 	and.w	r2, r3, #12
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	429a      	cmp	r2, r3
 800538a:	d1eb      	bne.n	8005364 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800538c:	4b0b      	ldr	r3, [pc, #44]	; (80053bc <HAL_RCC_ClockConfig+0x25c>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0307 	and.w	r3, r3, #7
 8005394:	683a      	ldr	r2, [r7, #0]
 8005396:	429a      	cmp	r2, r3
 8005398:	d214      	bcs.n	80053c4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800539a:	4b08      	ldr	r3, [pc, #32]	; (80053bc <HAL_RCC_ClockConfig+0x25c>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f023 0207 	bic.w	r2, r3, #7
 80053a2:	4906      	ldr	r1, [pc, #24]	; (80053bc <HAL_RCC_ClockConfig+0x25c>)
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053aa:	4b04      	ldr	r3, [pc, #16]	; (80053bc <HAL_RCC_ClockConfig+0x25c>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0307 	and.w	r3, r3, #7
 80053b2:	683a      	ldr	r2, [r7, #0]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d005      	beq.n	80053c4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e040      	b.n	800543e <HAL_RCC_ClockConfig+0x2de>
 80053bc:	40022000 	.word	0x40022000
 80053c0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 0304 	and.w	r3, r3, #4
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d008      	beq.n	80053e2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053d0:	4b1d      	ldr	r3, [pc, #116]	; (8005448 <HAL_RCC_ClockConfig+0x2e8>)
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	491a      	ldr	r1, [pc, #104]	; (8005448 <HAL_RCC_ClockConfig+0x2e8>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0308 	and.w	r3, r3, #8
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d009      	beq.n	8005402 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053ee:	4b16      	ldr	r3, [pc, #88]	; (8005448 <HAL_RCC_ClockConfig+0x2e8>)
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	00db      	lsls	r3, r3, #3
 80053fc:	4912      	ldr	r1, [pc, #72]	; (8005448 <HAL_RCC_ClockConfig+0x2e8>)
 80053fe:	4313      	orrs	r3, r2
 8005400:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005402:	f000 f829 	bl	8005458 <HAL_RCC_GetSysClockFreq>
 8005406:	4601      	mov	r1, r0
 8005408:	4b0f      	ldr	r3, [pc, #60]	; (8005448 <HAL_RCC_ClockConfig+0x2e8>)
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005410:	22f0      	movs	r2, #240	; 0xf0
 8005412:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005414:	693a      	ldr	r2, [r7, #16]
 8005416:	fa92 f2a2 	rbit	r2, r2
 800541a:	60fa      	str	r2, [r7, #12]
  return result;
 800541c:	68fa      	ldr	r2, [r7, #12]
 800541e:	fab2 f282 	clz	r2, r2
 8005422:	b2d2      	uxtb	r2, r2
 8005424:	40d3      	lsrs	r3, r2
 8005426:	4a09      	ldr	r2, [pc, #36]	; (800544c <HAL_RCC_ClockConfig+0x2ec>)
 8005428:	5cd3      	ldrb	r3, [r2, r3]
 800542a:	fa21 f303 	lsr.w	r3, r1, r3
 800542e:	4a08      	ldr	r2, [pc, #32]	; (8005450 <HAL_RCC_ClockConfig+0x2f0>)
 8005430:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005432:	4b08      	ldr	r3, [pc, #32]	; (8005454 <HAL_RCC_ClockConfig+0x2f4>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4618      	mov	r0, r3
 8005438:	f7fd fa48 	bl	80028cc <HAL_InitTick>
  
  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3778      	adds	r7, #120	; 0x78
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	40021000 	.word	0x40021000
 800544c:	0800a5e0 	.word	0x0800a5e0
 8005450:	20000000 	.word	0x20000000
 8005454:	20000004 	.word	0x20000004

08005458 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005458:	b480      	push	{r7}
 800545a:	b08b      	sub	sp, #44	; 0x2c
 800545c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800545e:	2300      	movs	r3, #0
 8005460:	61fb      	str	r3, [r7, #28]
 8005462:	2300      	movs	r3, #0
 8005464:	61bb      	str	r3, [r7, #24]
 8005466:	2300      	movs	r3, #0
 8005468:	627b      	str	r3, [r7, #36]	; 0x24
 800546a:	2300      	movs	r3, #0
 800546c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800546e:	2300      	movs	r3, #0
 8005470:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005472:	4b29      	ldr	r3, [pc, #164]	; (8005518 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	f003 030c 	and.w	r3, r3, #12
 800547e:	2b04      	cmp	r3, #4
 8005480:	d002      	beq.n	8005488 <HAL_RCC_GetSysClockFreq+0x30>
 8005482:	2b08      	cmp	r3, #8
 8005484:	d003      	beq.n	800548e <HAL_RCC_GetSysClockFreq+0x36>
 8005486:	e03c      	b.n	8005502 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005488:	4b24      	ldr	r3, [pc, #144]	; (800551c <HAL_RCC_GetSysClockFreq+0xc4>)
 800548a:	623b      	str	r3, [r7, #32]
      break;
 800548c:	e03c      	b.n	8005508 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005494:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005498:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800549a:	68ba      	ldr	r2, [r7, #8]
 800549c:	fa92 f2a2 	rbit	r2, r2
 80054a0:	607a      	str	r2, [r7, #4]
  return result;
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	fab2 f282 	clz	r2, r2
 80054a8:	b2d2      	uxtb	r2, r2
 80054aa:	40d3      	lsrs	r3, r2
 80054ac:	4a1c      	ldr	r2, [pc, #112]	; (8005520 <HAL_RCC_GetSysClockFreq+0xc8>)
 80054ae:	5cd3      	ldrb	r3, [r2, r3]
 80054b0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80054b2:	4b19      	ldr	r3, [pc, #100]	; (8005518 <HAL_RCC_GetSysClockFreq+0xc0>)
 80054b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b6:	f003 030f 	and.w	r3, r3, #15
 80054ba:	220f      	movs	r2, #15
 80054bc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054be:	693a      	ldr	r2, [r7, #16]
 80054c0:	fa92 f2a2 	rbit	r2, r2
 80054c4:	60fa      	str	r2, [r7, #12]
  return result;
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	fab2 f282 	clz	r2, r2
 80054cc:	b2d2      	uxtb	r2, r2
 80054ce:	40d3      	lsrs	r3, r2
 80054d0:	4a14      	ldr	r2, [pc, #80]	; (8005524 <HAL_RCC_GetSysClockFreq+0xcc>)
 80054d2:	5cd3      	ldrb	r3, [r2, r3]
 80054d4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d008      	beq.n	80054f2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80054e0:	4a0e      	ldr	r2, [pc, #56]	; (800551c <HAL_RCC_GetSysClockFreq+0xc4>)
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	fb02 f303 	mul.w	r3, r2, r3
 80054ee:	627b      	str	r3, [r7, #36]	; 0x24
 80054f0:	e004      	b.n	80054fc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	4a0c      	ldr	r2, [pc, #48]	; (8005528 <HAL_RCC_GetSysClockFreq+0xd0>)
 80054f6:	fb02 f303 	mul.w	r3, r2, r3
 80054fa:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80054fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fe:	623b      	str	r3, [r7, #32]
      break;
 8005500:	e002      	b.n	8005508 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005502:	4b06      	ldr	r3, [pc, #24]	; (800551c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005504:	623b      	str	r3, [r7, #32]
      break;
 8005506:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005508:	6a3b      	ldr	r3, [r7, #32]
}
 800550a:	4618      	mov	r0, r3
 800550c:	372c      	adds	r7, #44	; 0x2c
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop
 8005518:	40021000 	.word	0x40021000
 800551c:	007a1200 	.word	0x007a1200
 8005520:	0800a5f8 	.word	0x0800a5f8
 8005524:	0800a608 	.word	0x0800a608
 8005528:	003d0900 	.word	0x003d0900

0800552c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800552c:	b480      	push	{r7}
 800552e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005530:	4b03      	ldr	r3, [pc, #12]	; (8005540 <HAL_RCC_GetHCLKFreq+0x14>)
 8005532:	681b      	ldr	r3, [r3, #0]
}
 8005534:	4618      	mov	r0, r3
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	20000000 	.word	0x20000000

08005544 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800554a:	f7ff ffef 	bl	800552c <HAL_RCC_GetHCLKFreq>
 800554e:	4601      	mov	r1, r0
 8005550:	4b0b      	ldr	r3, [pc, #44]	; (8005580 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005558:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800555c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	fa92 f2a2 	rbit	r2, r2
 8005564:	603a      	str	r2, [r7, #0]
  return result;
 8005566:	683a      	ldr	r2, [r7, #0]
 8005568:	fab2 f282 	clz	r2, r2
 800556c:	b2d2      	uxtb	r2, r2
 800556e:	40d3      	lsrs	r3, r2
 8005570:	4a04      	ldr	r2, [pc, #16]	; (8005584 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005572:	5cd3      	ldrb	r3, [r2, r3]
 8005574:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005578:	4618      	mov	r0, r3
 800557a:	3708      	adds	r7, #8
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	40021000 	.word	0x40021000
 8005584:	0800a5f0 	.word	0x0800a5f0

08005588 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800558e:	f7ff ffcd 	bl	800552c <HAL_RCC_GetHCLKFreq>
 8005592:	4601      	mov	r1, r0
 8005594:	4b0b      	ldr	r3, [pc, #44]	; (80055c4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800559c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80055a0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	fa92 f2a2 	rbit	r2, r2
 80055a8:	603a      	str	r2, [r7, #0]
  return result;
 80055aa:	683a      	ldr	r2, [r7, #0]
 80055ac:	fab2 f282 	clz	r2, r2
 80055b0:	b2d2      	uxtb	r2, r2
 80055b2:	40d3      	lsrs	r3, r2
 80055b4:	4a04      	ldr	r2, [pc, #16]	; (80055c8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80055b6:	5cd3      	ldrb	r3, [r2, r3]
 80055b8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80055bc:	4618      	mov	r0, r3
 80055be:	3708      	adds	r7, #8
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	40021000 	.word	0x40021000
 80055c8:	0800a5f0 	.word	0x0800a5f0

080055cc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	220f      	movs	r2, #15
 80055da:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80055dc:	4b12      	ldr	r3, [pc, #72]	; (8005628 <HAL_RCC_GetClockConfig+0x5c>)
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	f003 0203 	and.w	r2, r3, #3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80055e8:	4b0f      	ldr	r3, [pc, #60]	; (8005628 <HAL_RCC_GetClockConfig+0x5c>)
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80055f4:	4b0c      	ldr	r3, [pc, #48]	; (8005628 <HAL_RCC_GetClockConfig+0x5c>)
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005600:	4b09      	ldr	r3, [pc, #36]	; (8005628 <HAL_RCC_GetClockConfig+0x5c>)
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	08db      	lsrs	r3, r3, #3
 8005606:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800560e:	4b07      	ldr	r3, [pc, #28]	; (800562c <HAL_RCC_GetClockConfig+0x60>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0207 	and.w	r2, r3, #7
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	601a      	str	r2, [r3, #0]
}
 800561a:	bf00      	nop
 800561c:	370c      	adds	r7, #12
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr
 8005626:	bf00      	nop
 8005628:	40021000 	.word	0x40021000
 800562c:	40022000 	.word	0x40022000

08005630 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b092      	sub	sp, #72	; 0x48
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005638:	2300      	movs	r3, #0
 800563a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800563c:	2300      	movs	r3, #0
 800563e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005640:	2300      	movs	r3, #0
 8005642:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800564e:	2b00      	cmp	r3, #0
 8005650:	f000 80d4 	beq.w	80057fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005654:	4b4e      	ldr	r3, [pc, #312]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005656:	69db      	ldr	r3, [r3, #28]
 8005658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800565c:	2b00      	cmp	r3, #0
 800565e:	d10e      	bne.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005660:	4b4b      	ldr	r3, [pc, #300]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005662:	69db      	ldr	r3, [r3, #28]
 8005664:	4a4a      	ldr	r2, [pc, #296]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800566a:	61d3      	str	r3, [r2, #28]
 800566c:	4b48      	ldr	r3, [pc, #288]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800566e:	69db      	ldr	r3, [r3, #28]
 8005670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005674:	60bb      	str	r3, [r7, #8]
 8005676:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005678:	2301      	movs	r3, #1
 800567a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800567e:	4b45      	ldr	r3, [pc, #276]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005686:	2b00      	cmp	r3, #0
 8005688:	d118      	bne.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800568a:	4b42      	ldr	r3, [pc, #264]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a41      	ldr	r2, [pc, #260]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005694:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005696:	f7fd fcbd 	bl	8003014 <HAL_GetTick>
 800569a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800569c:	e008      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800569e:	f7fd fcb9 	bl	8003014 <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	2b64      	cmp	r3, #100	; 0x64
 80056aa:	d901      	bls.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80056ac:	2303      	movs	r3, #3
 80056ae:	e13c      	b.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056b0:	4b38      	ldr	r3, [pc, #224]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d0f0      	beq.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80056bc:	4b34      	ldr	r3, [pc, #208]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056be:	6a1b      	ldr	r3, [r3, #32]
 80056c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80056c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	f000 8084 	beq.w	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80056d8:	429a      	cmp	r2, r3
 80056da:	d07c      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80056dc:	4b2c      	ldr	r3, [pc, #176]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056de:	6a1b      	ldr	r3, [r3, #32]
 80056e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80056ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ee:	fa93 f3a3 	rbit	r3, r3
 80056f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80056f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80056f6:	fab3 f383 	clz	r3, r3
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	461a      	mov	r2, r3
 80056fe:	4b26      	ldr	r3, [pc, #152]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005700:	4413      	add	r3, r2
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	461a      	mov	r2, r3
 8005706:	2301      	movs	r3, #1
 8005708:	6013      	str	r3, [r2, #0]
 800570a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800570e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005712:	fa93 f3a3 	rbit	r3, r3
 8005716:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800571a:	fab3 f383 	clz	r3, r3
 800571e:	b2db      	uxtb	r3, r3
 8005720:	461a      	mov	r2, r3
 8005722:	4b1d      	ldr	r3, [pc, #116]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005724:	4413      	add	r3, r2
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	461a      	mov	r2, r3
 800572a:	2300      	movs	r3, #0
 800572c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800572e:	4a18      	ldr	r2, [pc, #96]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005732:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005736:	f003 0301 	and.w	r3, r3, #1
 800573a:	2b00      	cmp	r3, #0
 800573c:	d04b      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800573e:	f7fd fc69 	bl	8003014 <HAL_GetTick>
 8005742:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005744:	e00a      	b.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005746:	f7fd fc65 	bl	8003014 <HAL_GetTick>
 800574a:	4602      	mov	r2, r0
 800574c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	f241 3288 	movw	r2, #5000	; 0x1388
 8005754:	4293      	cmp	r3, r2
 8005756:	d901      	bls.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005758:	2303      	movs	r3, #3
 800575a:	e0e6      	b.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 800575c:	2302      	movs	r3, #2
 800575e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005762:	fa93 f3a3 	rbit	r3, r3
 8005766:	627b      	str	r3, [r7, #36]	; 0x24
 8005768:	2302      	movs	r3, #2
 800576a:	623b      	str	r3, [r7, #32]
 800576c:	6a3b      	ldr	r3, [r7, #32]
 800576e:	fa93 f3a3 	rbit	r3, r3
 8005772:	61fb      	str	r3, [r7, #28]
  return result;
 8005774:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005776:	fab3 f383 	clz	r3, r3
 800577a:	b2db      	uxtb	r3, r3
 800577c:	095b      	lsrs	r3, r3, #5
 800577e:	b2db      	uxtb	r3, r3
 8005780:	f043 0302 	orr.w	r3, r3, #2
 8005784:	b2db      	uxtb	r3, r3
 8005786:	2b02      	cmp	r3, #2
 8005788:	d108      	bne.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800578a:	4b01      	ldr	r3, [pc, #4]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800578c:	6a1b      	ldr	r3, [r3, #32]
 800578e:	e00d      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005790:	40021000 	.word	0x40021000
 8005794:	40007000 	.word	0x40007000
 8005798:	10908100 	.word	0x10908100
 800579c:	2302      	movs	r3, #2
 800579e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	fa93 f3a3 	rbit	r3, r3
 80057a6:	617b      	str	r3, [r7, #20]
 80057a8:	4b62      	ldr	r3, [pc, #392]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80057aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ac:	2202      	movs	r2, #2
 80057ae:	613a      	str	r2, [r7, #16]
 80057b0:	693a      	ldr	r2, [r7, #16]
 80057b2:	fa92 f2a2 	rbit	r2, r2
 80057b6:	60fa      	str	r2, [r7, #12]
  return result;
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	fab2 f282 	clz	r2, r2
 80057be:	b2d2      	uxtb	r2, r2
 80057c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057c4:	b2d2      	uxtb	r2, r2
 80057c6:	f002 021f 	and.w	r2, r2, #31
 80057ca:	2101      	movs	r1, #1
 80057cc:	fa01 f202 	lsl.w	r2, r1, r2
 80057d0:	4013      	ands	r3, r2
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d0b7      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80057d6:	4b57      	ldr	r3, [pc, #348]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80057d8:	6a1b      	ldr	r3, [r3, #32]
 80057da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	4954      	ldr	r1, [pc, #336]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80057e4:	4313      	orrs	r3, r2
 80057e6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80057e8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d105      	bne.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057f0:	4b50      	ldr	r3, [pc, #320]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80057f2:	69db      	ldr	r3, [r3, #28]
 80057f4:	4a4f      	ldr	r2, [pc, #316]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80057f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057fa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 0301 	and.w	r3, r3, #1
 8005804:	2b00      	cmp	r3, #0
 8005806:	d008      	beq.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005808:	4b4a      	ldr	r3, [pc, #296]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800580a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800580c:	f023 0203 	bic.w	r2, r3, #3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	4947      	ldr	r1, [pc, #284]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005816:	4313      	orrs	r3, r2
 8005818:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 0320 	and.w	r3, r3, #32
 8005822:	2b00      	cmp	r3, #0
 8005824:	d008      	beq.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005826:	4b43      	ldr	r3, [pc, #268]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800582a:	f023 0210 	bic.w	r2, r3, #16
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	4940      	ldr	r1, [pc, #256]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005834:	4313      	orrs	r3, r2
 8005836:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005840:	2b00      	cmp	r3, #0
 8005842:	d008      	beq.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005844:	4b3b      	ldr	r3, [pc, #236]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005848:	f023 0220 	bic.w	r2, r3, #32
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	4938      	ldr	r1, [pc, #224]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005852:	4313      	orrs	r3, r2
 8005854:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d008      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005862:	4b34      	ldr	r3, [pc, #208]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005866:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	695b      	ldr	r3, [r3, #20]
 800586e:	4931      	ldr	r1, [pc, #196]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005870:	4313      	orrs	r3, r2
 8005872:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800587c:	2b00      	cmp	r3, #0
 800587e:	d008      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005880:	4b2c      	ldr	r3, [pc, #176]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	69db      	ldr	r3, [r3, #28]
 800588c:	4929      	ldr	r1, [pc, #164]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800588e:	4313      	orrs	r3, r2
 8005890:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800589a:	2b00      	cmp	r3, #0
 800589c:	d008      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 800589e:	4b25      	ldr	r3, [pc, #148]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80058a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	699b      	ldr	r3, [r3, #24]
 80058aa:	4922      	ldr	r1, [pc, #136]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80058ac:	4313      	orrs	r3, r2
 80058ae:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d008      	beq.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80058bc:	4b1d      	ldr	r3, [pc, #116]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80058be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a1b      	ldr	r3, [r3, #32]
 80058c8:	491a      	ldr	r1, [pc, #104]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80058ca:	4313      	orrs	r3, r2
 80058cc:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d008      	beq.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80058da:	4b16      	ldr	r3, [pc, #88]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80058dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058de:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e6:	4913      	ldr	r1, [pc, #76]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80058e8:	4313      	orrs	r3, r2
 80058ea:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d008      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80058f8:	4b0e      	ldr	r3, [pc, #56]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80058fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005904:	490b      	ldr	r1, [pc, #44]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005906:	4313      	orrs	r3, r2
 8005908:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d008      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8005916:	4b07      	ldr	r3, [pc, #28]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800591a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005922:	4904      	ldr	r1, [pc, #16]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005924:	4313      	orrs	r3, r2
 8005926:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	3748      	adds	r7, #72	; 0x48
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	40021000 	.word	0x40021000

08005938 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d101      	bne.n	800594a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e09d      	b.n	8005a86 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594e:	2b00      	cmp	r3, #0
 8005950:	d108      	bne.n	8005964 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800595a:	d009      	beq.n	8005970 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	61da      	str	r2, [r3, #28]
 8005962:	e005      	b.n	8005970 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800597c:	b2db      	uxtb	r3, r3
 800597e:	2b00      	cmp	r3, #0
 8005980:	d106      	bne.n	8005990 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f7fc fe72 	bl	8002674 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2202      	movs	r2, #2
 8005994:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059a6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80059b0:	d902      	bls.n	80059b8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80059b2:	2300      	movs	r3, #0
 80059b4:	60fb      	str	r3, [r7, #12]
 80059b6:	e002      	b.n	80059be <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80059b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80059bc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80059c6:	d007      	beq.n	80059d8 <HAL_SPI_Init+0xa0>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80059d0:	d002      	beq.n	80059d8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80059e8:	431a      	orrs	r2, r3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	f003 0302 	and.w	r3, r3, #2
 80059f2:	431a      	orrs	r2, r3
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	695b      	ldr	r3, [r3, #20]
 80059f8:	f003 0301 	and.w	r3, r3, #1
 80059fc:	431a      	orrs	r2, r3
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	699b      	ldr	r3, [r3, #24]
 8005a02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a06:	431a      	orrs	r2, r3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	69db      	ldr	r3, [r3, #28]
 8005a0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a10:	431a      	orrs	r2, r3
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a1b      	ldr	r3, [r3, #32]
 8005a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a1a:	ea42 0103 	orr.w	r1, r2, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a22:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	430a      	orrs	r2, r1
 8005a2c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	0c1b      	lsrs	r3, r3, #16
 8005a34:	f003 0204 	and.w	r2, r3, #4
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3c:	f003 0310 	and.w	r3, r3, #16
 8005a40:	431a      	orrs	r2, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a46:	f003 0308 	and.w	r3, r3, #8
 8005a4a:	431a      	orrs	r2, r3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005a54:	ea42 0103 	orr.w	r1, r2, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	430a      	orrs	r2, r1
 8005a64:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	69da      	ldr	r2, [r3, #28]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a74:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3710      	adds	r7, #16
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}

08005a8e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a8e:	b580      	push	{r7, lr}
 8005a90:	b082      	sub	sp, #8
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d101      	bne.n	8005aa0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e049      	b.n	8005b34 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d106      	bne.n	8005aba <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f7fc fe21 	bl	80026fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2202      	movs	r2, #2
 8005abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	3304      	adds	r3, #4
 8005aca:	4619      	mov	r1, r3
 8005acc:	4610      	mov	r0, r2
 8005ace:	f000 fa99 	bl	8006004 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2201      	movs	r2, #1
 8005ade:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2201      	movs	r2, #1
 8005aee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2201      	movs	r2, #1
 8005af6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2201      	movs	r2, #1
 8005afe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2201      	movs	r2, #1
 8005b06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2201      	movs	r2, #1
 8005b16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2201      	movs	r2, #1
 8005b26:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3708      	adds	r7, #8
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d001      	beq.n	8005b54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	e03b      	b.n	8005bcc <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2202      	movs	r2, #2
 8005b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	68da      	ldr	r2, [r3, #12]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f042 0201 	orr.w	r2, r2, #1
 8005b6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a19      	ldr	r2, [pc, #100]	; (8005bd8 <HAL_TIM_Base_Start_IT+0x9c>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d009      	beq.n	8005b8a <HAL_TIM_Base_Start_IT+0x4e>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b7e:	d004      	beq.n	8005b8a <HAL_TIM_Base_Start_IT+0x4e>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a15      	ldr	r2, [pc, #84]	; (8005bdc <HAL_TIM_Base_Start_IT+0xa0>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d115      	bne.n	8005bb6 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	689a      	ldr	r2, [r3, #8]
 8005b90:	4b13      	ldr	r3, [pc, #76]	; (8005be0 <HAL_TIM_Base_Start_IT+0xa4>)
 8005b92:	4013      	ands	r3, r2
 8005b94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2b06      	cmp	r3, #6
 8005b9a:	d015      	beq.n	8005bc8 <HAL_TIM_Base_Start_IT+0x8c>
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ba2:	d011      	beq.n	8005bc8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f042 0201 	orr.w	r2, r2, #1
 8005bb2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bb4:	e008      	b.n	8005bc8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f042 0201 	orr.w	r2, r2, #1
 8005bc4:	601a      	str	r2, [r3, #0]
 8005bc6:	e000      	b.n	8005bca <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bc8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3714      	adds	r7, #20
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr
 8005bd8:	40012c00 	.word	0x40012c00
 8005bdc:	40014000 	.word	0x40014000
 8005be0:	00010007 	.word	0x00010007

08005be4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	f003 0302 	and.w	r3, r3, #2
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d122      	bne.n	8005c40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	f003 0302 	and.w	r3, r3, #2
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d11b      	bne.n	8005c40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f06f 0202 	mvn.w	r2, #2
 8005c10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2201      	movs	r2, #1
 8005c16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	f003 0303 	and.w	r3, r3, #3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d003      	beq.n	8005c2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 f9ce 	bl	8005fc8 <HAL_TIM_IC_CaptureCallback>
 8005c2c:	e005      	b.n	8005c3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 f9c0 	bl	8005fb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 f9d1 	bl	8005fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	f003 0304 	and.w	r3, r3, #4
 8005c4a:	2b04      	cmp	r3, #4
 8005c4c:	d122      	bne.n	8005c94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	f003 0304 	and.w	r3, r3, #4
 8005c58:	2b04      	cmp	r3, #4
 8005c5a:	d11b      	bne.n	8005c94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f06f 0204 	mvn.w	r2, #4
 8005c64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2202      	movs	r2, #2
 8005c6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	699b      	ldr	r3, [r3, #24]
 8005c72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d003      	beq.n	8005c82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 f9a4 	bl	8005fc8 <HAL_TIM_IC_CaptureCallback>
 8005c80:	e005      	b.n	8005c8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 f996 	bl	8005fb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f000 f9a7 	bl	8005fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	f003 0308 	and.w	r3, r3, #8
 8005c9e:	2b08      	cmp	r3, #8
 8005ca0:	d122      	bne.n	8005ce8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	f003 0308 	and.w	r3, r3, #8
 8005cac:	2b08      	cmp	r3, #8
 8005cae:	d11b      	bne.n	8005ce8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f06f 0208 	mvn.w	r2, #8
 8005cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2204      	movs	r2, #4
 8005cbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	69db      	ldr	r3, [r3, #28]
 8005cc6:	f003 0303 	and.w	r3, r3, #3
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d003      	beq.n	8005cd6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 f97a 	bl	8005fc8 <HAL_TIM_IC_CaptureCallback>
 8005cd4:	e005      	b.n	8005ce2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 f96c 	bl	8005fb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f000 f97d 	bl	8005fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	f003 0310 	and.w	r3, r3, #16
 8005cf2:	2b10      	cmp	r3, #16
 8005cf4:	d122      	bne.n	8005d3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	f003 0310 	and.w	r3, r3, #16
 8005d00:	2b10      	cmp	r3, #16
 8005d02:	d11b      	bne.n	8005d3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f06f 0210 	mvn.w	r2, #16
 8005d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2208      	movs	r2, #8
 8005d12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	69db      	ldr	r3, [r3, #28]
 8005d1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d003      	beq.n	8005d2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 f950 	bl	8005fc8 <HAL_TIM_IC_CaptureCallback>
 8005d28:	e005      	b.n	8005d36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 f942 	bl	8005fb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 f953 	bl	8005fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	f003 0301 	and.w	r3, r3, #1
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d10e      	bne.n	8005d68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	f003 0301 	and.w	r3, r3, #1
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d107      	bne.n	8005d68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f06f 0201 	mvn.w	r2, #1
 8005d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f7fc fc0a 	bl	800257c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d72:	2b80      	cmp	r3, #128	; 0x80
 8005d74:	d10e      	bne.n	8005d94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d80:	2b80      	cmp	r3, #128	; 0x80
 8005d82:	d107      	bne.n	8005d94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 fab0 	bl	80062f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005da2:	d10e      	bne.n	8005dc2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dae:	2b80      	cmp	r3, #128	; 0x80
 8005db0:	d107      	bne.n	8005dc2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005dba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 faa3 	bl	8006308 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dcc:	2b40      	cmp	r3, #64	; 0x40
 8005dce:	d10e      	bne.n	8005dee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dda:	2b40      	cmp	r3, #64	; 0x40
 8005ddc:	d107      	bne.n	8005dee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005de6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f000 f901 	bl	8005ff0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	f003 0320 	and.w	r3, r3, #32
 8005df8:	2b20      	cmp	r3, #32
 8005dfa:	d10e      	bne.n	8005e1a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	f003 0320 	and.w	r3, r3, #32
 8005e06:	2b20      	cmp	r3, #32
 8005e08:	d107      	bne.n	8005e1a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f06f 0220 	mvn.w	r2, #32
 8005e12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 fa63 	bl	80062e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e1a:	bf00      	nop
 8005e1c:	3708      	adds	r7, #8
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}

08005e22 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e22:	b580      	push	{r7, lr}
 8005e24:	b084      	sub	sp, #16
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
 8005e2a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d101      	bne.n	8005e3e <HAL_TIM_ConfigClockSource+0x1c>
 8005e3a:	2302      	movs	r3, #2
 8005e3c:	e0b6      	b.n	8005fac <HAL_TIM_ConfigClockSource+0x18a>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2201      	movs	r2, #1
 8005e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2202      	movs	r2, #2
 8005e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e5c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e60:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e68:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68ba      	ldr	r2, [r7, #8]
 8005e70:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e7a:	d03e      	beq.n	8005efa <HAL_TIM_ConfigClockSource+0xd8>
 8005e7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e80:	f200 8087 	bhi.w	8005f92 <HAL_TIM_ConfigClockSource+0x170>
 8005e84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e88:	f000 8086 	beq.w	8005f98 <HAL_TIM_ConfigClockSource+0x176>
 8005e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e90:	d87f      	bhi.n	8005f92 <HAL_TIM_ConfigClockSource+0x170>
 8005e92:	2b70      	cmp	r3, #112	; 0x70
 8005e94:	d01a      	beq.n	8005ecc <HAL_TIM_ConfigClockSource+0xaa>
 8005e96:	2b70      	cmp	r3, #112	; 0x70
 8005e98:	d87b      	bhi.n	8005f92 <HAL_TIM_ConfigClockSource+0x170>
 8005e9a:	2b60      	cmp	r3, #96	; 0x60
 8005e9c:	d050      	beq.n	8005f40 <HAL_TIM_ConfigClockSource+0x11e>
 8005e9e:	2b60      	cmp	r3, #96	; 0x60
 8005ea0:	d877      	bhi.n	8005f92 <HAL_TIM_ConfigClockSource+0x170>
 8005ea2:	2b50      	cmp	r3, #80	; 0x50
 8005ea4:	d03c      	beq.n	8005f20 <HAL_TIM_ConfigClockSource+0xfe>
 8005ea6:	2b50      	cmp	r3, #80	; 0x50
 8005ea8:	d873      	bhi.n	8005f92 <HAL_TIM_ConfigClockSource+0x170>
 8005eaa:	2b40      	cmp	r3, #64	; 0x40
 8005eac:	d058      	beq.n	8005f60 <HAL_TIM_ConfigClockSource+0x13e>
 8005eae:	2b40      	cmp	r3, #64	; 0x40
 8005eb0:	d86f      	bhi.n	8005f92 <HAL_TIM_ConfigClockSource+0x170>
 8005eb2:	2b30      	cmp	r3, #48	; 0x30
 8005eb4:	d064      	beq.n	8005f80 <HAL_TIM_ConfigClockSource+0x15e>
 8005eb6:	2b30      	cmp	r3, #48	; 0x30
 8005eb8:	d86b      	bhi.n	8005f92 <HAL_TIM_ConfigClockSource+0x170>
 8005eba:	2b20      	cmp	r3, #32
 8005ebc:	d060      	beq.n	8005f80 <HAL_TIM_ConfigClockSource+0x15e>
 8005ebe:	2b20      	cmp	r3, #32
 8005ec0:	d867      	bhi.n	8005f92 <HAL_TIM_ConfigClockSource+0x170>
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d05c      	beq.n	8005f80 <HAL_TIM_ConfigClockSource+0x15e>
 8005ec6:	2b10      	cmp	r3, #16
 8005ec8:	d05a      	beq.n	8005f80 <HAL_TIM_ConfigClockSource+0x15e>
 8005eca:	e062      	b.n	8005f92 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005edc:	f000 f97a 	bl	80061d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005eee:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68ba      	ldr	r2, [r7, #8]
 8005ef6:	609a      	str	r2, [r3, #8]
      break;
 8005ef8:	e04f      	b.n	8005f9a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f0a:	f000 f963 	bl	80061d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	689a      	ldr	r2, [r3, #8]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f1c:	609a      	str	r2, [r3, #8]
      break;
 8005f1e:	e03c      	b.n	8005f9a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	f000 f8d7 	bl	80060e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2150      	movs	r1, #80	; 0x50
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f000 f930 	bl	800619e <TIM_ITRx_SetConfig>
      break;
 8005f3e:	e02c      	b.n	8005f9a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	f000 f8f6 	bl	800613e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	2160      	movs	r1, #96	; 0x60
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f000 f920 	bl	800619e <TIM_ITRx_SetConfig>
      break;
 8005f5e:	e01c      	b.n	8005f9a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	f000 f8b7 	bl	80060e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	2140      	movs	r1, #64	; 0x40
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f000 f910 	bl	800619e <TIM_ITRx_SetConfig>
      break;
 8005f7e:	e00c      	b.n	8005f9a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4619      	mov	r1, r3
 8005f8a:	4610      	mov	r0, r2
 8005f8c:	f000 f907 	bl	800619e <TIM_ITRx_SetConfig>
      break;
 8005f90:	e003      	b.n	8005f9a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	73fb      	strb	r3, [r7, #15]
      break;
 8005f96:	e000      	b.n	8005f9a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005f98:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3710      	adds	r7, #16
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fbc:	bf00      	nop
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005fd0:	bf00      	nop
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005fe4:	bf00      	nop
 8005fe6:	370c      	adds	r7, #12
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ff8:	bf00      	nop
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a2e      	ldr	r2, [pc, #184]	; (80060d0 <TIM_Base_SetConfig+0xcc>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d003      	beq.n	8006024 <TIM_Base_SetConfig+0x20>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006022:	d108      	bne.n	8006036 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800602a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	68fa      	ldr	r2, [r7, #12]
 8006032:	4313      	orrs	r3, r2
 8006034:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a25      	ldr	r2, [pc, #148]	; (80060d0 <TIM_Base_SetConfig+0xcc>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d00f      	beq.n	800605e <TIM_Base_SetConfig+0x5a>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006044:	d00b      	beq.n	800605e <TIM_Base_SetConfig+0x5a>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a22      	ldr	r2, [pc, #136]	; (80060d4 <TIM_Base_SetConfig+0xd0>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d007      	beq.n	800605e <TIM_Base_SetConfig+0x5a>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a21      	ldr	r2, [pc, #132]	; (80060d8 <TIM_Base_SetConfig+0xd4>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d003      	beq.n	800605e <TIM_Base_SetConfig+0x5a>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a20      	ldr	r2, [pc, #128]	; (80060dc <TIM_Base_SetConfig+0xd8>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d108      	bne.n	8006070 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006064:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	4313      	orrs	r3, r2
 800606e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	695b      	ldr	r3, [r3, #20]
 800607a:	4313      	orrs	r3, r2
 800607c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	689a      	ldr	r2, [r3, #8]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a0e      	ldr	r2, [pc, #56]	; (80060d0 <TIM_Base_SetConfig+0xcc>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d00b      	beq.n	80060b4 <TIM_Base_SetConfig+0xb0>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a0d      	ldr	r2, [pc, #52]	; (80060d4 <TIM_Base_SetConfig+0xd0>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d007      	beq.n	80060b4 <TIM_Base_SetConfig+0xb0>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4a0c      	ldr	r2, [pc, #48]	; (80060d8 <TIM_Base_SetConfig+0xd4>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d003      	beq.n	80060b4 <TIM_Base_SetConfig+0xb0>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a0b      	ldr	r2, [pc, #44]	; (80060dc <TIM_Base_SetConfig+0xd8>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d103      	bne.n	80060bc <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	691a      	ldr	r2, [r3, #16]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	615a      	str	r2, [r3, #20]
}
 80060c2:	bf00      	nop
 80060c4:	3714      	adds	r7, #20
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr
 80060ce:	bf00      	nop
 80060d0:	40012c00 	.word	0x40012c00
 80060d4:	40014000 	.word	0x40014000
 80060d8:	40014400 	.word	0x40014400
 80060dc:	40014800 	.word	0x40014800

080060e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b087      	sub	sp, #28
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6a1b      	ldr	r3, [r3, #32]
 80060f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6a1b      	ldr	r3, [r3, #32]
 80060f6:	f023 0201 	bic.w	r2, r3, #1
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	699b      	ldr	r3, [r3, #24]
 8006102:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800610a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	011b      	lsls	r3, r3, #4
 8006110:	693a      	ldr	r2, [r7, #16]
 8006112:	4313      	orrs	r3, r2
 8006114:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	f023 030a 	bic.w	r3, r3, #10
 800611c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800611e:	697a      	ldr	r2, [r7, #20]
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	4313      	orrs	r3, r2
 8006124:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	693a      	ldr	r2, [r7, #16]
 800612a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	697a      	ldr	r2, [r7, #20]
 8006130:	621a      	str	r2, [r3, #32]
}
 8006132:	bf00      	nop
 8006134:	371c      	adds	r7, #28
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr

0800613e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800613e:	b480      	push	{r7}
 8006140:	b087      	sub	sp, #28
 8006142:	af00      	add	r7, sp, #0
 8006144:	60f8      	str	r0, [r7, #12]
 8006146:	60b9      	str	r1, [r7, #8]
 8006148:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6a1b      	ldr	r3, [r3, #32]
 800614e:	f023 0210 	bic.w	r2, r3, #16
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	699b      	ldr	r3, [r3, #24]
 800615a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6a1b      	ldr	r3, [r3, #32]
 8006160:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006168:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	031b      	lsls	r3, r3, #12
 800616e:	697a      	ldr	r2, [r7, #20]
 8006170:	4313      	orrs	r3, r2
 8006172:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800617a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	011b      	lsls	r3, r3, #4
 8006180:	693a      	ldr	r2, [r7, #16]
 8006182:	4313      	orrs	r3, r2
 8006184:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	697a      	ldr	r2, [r7, #20]
 800618a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	693a      	ldr	r2, [r7, #16]
 8006190:	621a      	str	r2, [r3, #32]
}
 8006192:	bf00      	nop
 8006194:	371c      	adds	r7, #28
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr

0800619e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800619e:	b480      	push	{r7}
 80061a0:	b085      	sub	sp, #20
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
 80061a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061b6:	683a      	ldr	r2, [r7, #0]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	f043 0307 	orr.w	r3, r3, #7
 80061c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	609a      	str	r2, [r3, #8]
}
 80061c8:	bf00      	nop
 80061ca:	3714      	adds	r7, #20
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b087      	sub	sp, #28
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	607a      	str	r2, [r7, #4]
 80061e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	021a      	lsls	r2, r3, #8
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	431a      	orrs	r2, r3
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	697a      	ldr	r2, [r7, #20]
 80061fe:	4313      	orrs	r3, r2
 8006200:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	697a      	ldr	r2, [r7, #20]
 8006206:	609a      	str	r2, [r3, #8]
}
 8006208:	bf00      	nop
 800620a:	371c      	adds	r7, #28
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006214:	b480      	push	{r7}
 8006216:	b085      	sub	sp, #20
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006224:	2b01      	cmp	r3, #1
 8006226:	d101      	bne.n	800622c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006228:	2302      	movs	r3, #2
 800622a:	e04f      	b.n	80062cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2202      	movs	r2, #2
 8006238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a21      	ldr	r2, [pc, #132]	; (80062d8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d108      	bne.n	8006268 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800625c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	4313      	orrs	r3, r2
 8006266:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800626e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	4313      	orrs	r3, r2
 8006278:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a14      	ldr	r2, [pc, #80]	; (80062d8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d009      	beq.n	80062a0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006294:	d004      	beq.n	80062a0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a10      	ldr	r2, [pc, #64]	; (80062dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d10c      	bne.n	80062ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	68ba      	ldr	r2, [r7, #8]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68ba      	ldr	r2, [r7, #8]
 80062b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2201      	movs	r2, #1
 80062be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062ca:	2300      	movs	r3, #0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3714      	adds	r7, #20
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr
 80062d8:	40012c00 	.word	0x40012c00
 80062dc:	40014000 	.word	0x40014000

080062e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062e8:	bf00      	nop
 80062ea:	370c      	adds	r7, #12
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062fc:	bf00      	nop
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006310:	bf00      	nop
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b082      	sub	sp, #8
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d101      	bne.n	800632e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e040      	b.n	80063b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006332:	2b00      	cmp	r3, #0
 8006334:	d106      	bne.n	8006344 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f7fc fa2a 	bl	8002798 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2224      	movs	r2, #36	; 0x24
 8006348:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f022 0201 	bic.w	r2, r2, #1
 8006358:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 f980 	bl	8006660 <UART_SetConfig>
 8006360:	4603      	mov	r3, r0
 8006362:	2b01      	cmp	r3, #1
 8006364:	d101      	bne.n	800636a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e022      	b.n	80063b0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636e:	2b00      	cmp	r3, #0
 8006370:	d002      	beq.n	8006378 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 faaa 	bl	80068cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	685a      	ldr	r2, [r3, #4]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006386:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	689a      	ldr	r2, [r3, #8]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006396:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f042 0201 	orr.w	r2, r2, #1
 80063a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 fb31 	bl	8006a10 <UART_CheckIdleState>
 80063ae:	4603      	mov	r3, r0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3708      	adds	r7, #8
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b08a      	sub	sp, #40	; 0x28
 80063bc:	af02      	add	r7, sp, #8
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	603b      	str	r3, [r7, #0]
 80063c4:	4613      	mov	r3, r2
 80063c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063cc:	2b20      	cmp	r3, #32
 80063ce:	d178      	bne.n	80064c2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d002      	beq.n	80063dc <HAL_UART_Transmit+0x24>
 80063d6:	88fb      	ldrh	r3, [r7, #6]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d101      	bne.n	80063e0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	e071      	b.n	80064c4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2221      	movs	r2, #33	; 0x21
 80063ec:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063ee:	f7fc fe11 	bl	8003014 <HAL_GetTick>
 80063f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	88fa      	ldrh	r2, [r7, #6]
 80063f8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	88fa      	ldrh	r2, [r7, #6]
 8006400:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800640c:	d108      	bne.n	8006420 <HAL_UART_Transmit+0x68>
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d104      	bne.n	8006420 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006416:	2300      	movs	r3, #0
 8006418:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	61bb      	str	r3, [r7, #24]
 800641e:	e003      	b.n	8006428 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006424:	2300      	movs	r3, #0
 8006426:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006428:	e030      	b.n	800648c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	9300      	str	r3, [sp, #0]
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	2200      	movs	r2, #0
 8006432:	2180      	movs	r1, #128	; 0x80
 8006434:	68f8      	ldr	r0, [r7, #12]
 8006436:	f000 fb93 	bl	8006b60 <UART_WaitOnFlagUntilTimeout>
 800643a:	4603      	mov	r3, r0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d004      	beq.n	800644a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2220      	movs	r2, #32
 8006444:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006446:	2303      	movs	r3, #3
 8006448:	e03c      	b.n	80064c4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d10b      	bne.n	8006468 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	881a      	ldrh	r2, [r3, #0]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800645c:	b292      	uxth	r2, r2
 800645e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	3302      	adds	r3, #2
 8006464:	61bb      	str	r3, [r7, #24]
 8006466:	e008      	b.n	800647a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	781a      	ldrb	r2, [r3, #0]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	b292      	uxth	r2, r2
 8006472:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	3301      	adds	r3, #1
 8006478:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006480:	b29b      	uxth	r3, r3
 8006482:	3b01      	subs	r3, #1
 8006484:	b29a      	uxth	r2, r3
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006492:	b29b      	uxth	r3, r3
 8006494:	2b00      	cmp	r3, #0
 8006496:	d1c8      	bne.n	800642a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	9300      	str	r3, [sp, #0]
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	2200      	movs	r2, #0
 80064a0:	2140      	movs	r1, #64	; 0x40
 80064a2:	68f8      	ldr	r0, [r7, #12]
 80064a4:	f000 fb5c 	bl	8006b60 <UART_WaitOnFlagUntilTimeout>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d004      	beq.n	80064b8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2220      	movs	r2, #32
 80064b2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80064b4:	2303      	movs	r3, #3
 80064b6:	e005      	b.n	80064c4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2220      	movs	r2, #32
 80064bc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80064be:	2300      	movs	r3, #0
 80064c0:	e000      	b.n	80064c4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80064c2:	2302      	movs	r3, #2
  }
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3720      	adds	r7, #32
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b08a      	sub	sp, #40	; 0x28
 80064d0:	af02      	add	r7, sp, #8
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	60b9      	str	r1, [r7, #8]
 80064d6:	603b      	str	r3, [r7, #0]
 80064d8:	4613      	mov	r3, r2
 80064da:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064e2:	2b20      	cmp	r3, #32
 80064e4:	f040 80b6 	bne.w	8006654 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d002      	beq.n	80064f4 <HAL_UART_Receive+0x28>
 80064ee:	88fb      	ldrh	r3, [r7, #6]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d101      	bne.n	80064f8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	e0ae      	b.n	8006656 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2200      	movs	r2, #0
 80064fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2222      	movs	r2, #34	; 0x22
 8006504:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2200      	movs	r2, #0
 800650c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800650e:	f7fc fd81 	bl	8003014 <HAL_GetTick>
 8006512:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	88fa      	ldrh	r2, [r7, #6]
 8006518:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	88fa      	ldrh	r2, [r7, #6]
 8006520:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800652c:	d10e      	bne.n	800654c <HAL_UART_Receive+0x80>
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d105      	bne.n	8006542 <HAL_UART_Receive+0x76>
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f240 12ff 	movw	r2, #511	; 0x1ff
 800653c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006540:	e02d      	b.n	800659e <HAL_UART_Receive+0xd2>
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	22ff      	movs	r2, #255	; 0xff
 8006546:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800654a:	e028      	b.n	800659e <HAL_UART_Receive+0xd2>
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d10d      	bne.n	8006570 <HAL_UART_Receive+0xa4>
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	691b      	ldr	r3, [r3, #16]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d104      	bne.n	8006566 <HAL_UART_Receive+0x9a>
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	22ff      	movs	r2, #255	; 0xff
 8006560:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006564:	e01b      	b.n	800659e <HAL_UART_Receive+0xd2>
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	227f      	movs	r2, #127	; 0x7f
 800656a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800656e:	e016      	b.n	800659e <HAL_UART_Receive+0xd2>
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006578:	d10d      	bne.n	8006596 <HAL_UART_Receive+0xca>
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d104      	bne.n	800658c <HAL_UART_Receive+0xc0>
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	227f      	movs	r2, #127	; 0x7f
 8006586:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800658a:	e008      	b.n	800659e <HAL_UART_Receive+0xd2>
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	223f      	movs	r2, #63	; 0x3f
 8006590:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006594:	e003      	b.n	800659e <HAL_UART_Receive+0xd2>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2200      	movs	r2, #0
 800659a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80065a4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065ae:	d108      	bne.n	80065c2 <HAL_UART_Receive+0xf6>
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	691b      	ldr	r3, [r3, #16]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d104      	bne.n	80065c2 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80065b8:	2300      	movs	r3, #0
 80065ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	61bb      	str	r3, [r7, #24]
 80065c0:	e003      	b.n	80065ca <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80065c6:	2300      	movs	r3, #0
 80065c8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80065ca:	e037      	b.n	800663c <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	9300      	str	r3, [sp, #0]
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	2200      	movs	r2, #0
 80065d4:	2120      	movs	r1, #32
 80065d6:	68f8      	ldr	r0, [r7, #12]
 80065d8:	f000 fac2 	bl	8006b60 <UART_WaitOnFlagUntilTimeout>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d005      	beq.n	80065ee <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2220      	movs	r2, #32
 80065e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80065ea:	2303      	movs	r3, #3
 80065ec:	e033      	b.n	8006656 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80065ee:	69fb      	ldr	r3, [r7, #28]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d10c      	bne.n	800660e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80065fa:	b29a      	uxth	r2, r3
 80065fc:	8a7b      	ldrh	r3, [r7, #18]
 80065fe:	4013      	ands	r3, r2
 8006600:	b29a      	uxth	r2, r3
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	3302      	adds	r3, #2
 800660a:	61bb      	str	r3, [r7, #24]
 800660c:	e00d      	b.n	800662a <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006614:	b29b      	uxth	r3, r3
 8006616:	b2da      	uxtb	r2, r3
 8006618:	8a7b      	ldrh	r3, [r7, #18]
 800661a:	b2db      	uxtb	r3, r3
 800661c:	4013      	ands	r3, r2
 800661e:	b2da      	uxtb	r2, r3
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006624:	69fb      	ldr	r3, [r7, #28]
 8006626:	3301      	adds	r3, #1
 8006628:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006630:	b29b      	uxth	r3, r3
 8006632:	3b01      	subs	r3, #1
 8006634:	b29a      	uxth	r2, r3
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006642:	b29b      	uxth	r3, r3
 8006644:	2b00      	cmp	r3, #0
 8006646:	d1c1      	bne.n	80065cc <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2220      	movs	r2, #32
 800664c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8006650:	2300      	movs	r3, #0
 8006652:	e000      	b.n	8006656 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8006654:	2302      	movs	r3, #2
  }
}
 8006656:	4618      	mov	r0, r3
 8006658:	3720      	adds	r7, #32
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
	...

08006660 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b088      	sub	sp, #32
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006668:	2300      	movs	r3, #0
 800666a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	689a      	ldr	r2, [r3, #8]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	691b      	ldr	r3, [r3, #16]
 8006674:	431a      	orrs	r2, r3
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	695b      	ldr	r3, [r3, #20]
 800667a:	431a      	orrs	r2, r3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	69db      	ldr	r3, [r3, #28]
 8006680:	4313      	orrs	r3, r2
 8006682:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	4b8a      	ldr	r3, [pc, #552]	; (80068b4 <UART_SetConfig+0x254>)
 800668c:	4013      	ands	r3, r2
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	6812      	ldr	r2, [r2, #0]
 8006692:	6979      	ldr	r1, [r7, #20]
 8006694:	430b      	orrs	r3, r1
 8006696:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	68da      	ldr	r2, [r3, #12]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	430a      	orrs	r2, r1
 80066ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	699b      	ldr	r3, [r3, #24]
 80066b2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6a1b      	ldr	r3, [r3, #32]
 80066b8:	697a      	ldr	r2, [r7, #20]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	697a      	ldr	r2, [r7, #20]
 80066ce:	430a      	orrs	r2, r1
 80066d0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a78      	ldr	r2, [pc, #480]	; (80068b8 <UART_SetConfig+0x258>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d120      	bne.n	800671e <UART_SetConfig+0xbe>
 80066dc:	4b77      	ldr	r3, [pc, #476]	; (80068bc <UART_SetConfig+0x25c>)
 80066de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e0:	f003 0303 	and.w	r3, r3, #3
 80066e4:	2b03      	cmp	r3, #3
 80066e6:	d817      	bhi.n	8006718 <UART_SetConfig+0xb8>
 80066e8:	a201      	add	r2, pc, #4	; (adr r2, 80066f0 <UART_SetConfig+0x90>)
 80066ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ee:	bf00      	nop
 80066f0:	08006701 	.word	0x08006701
 80066f4:	0800670d 	.word	0x0800670d
 80066f8:	08006713 	.word	0x08006713
 80066fc:	08006707 	.word	0x08006707
 8006700:	2300      	movs	r3, #0
 8006702:	77fb      	strb	r3, [r7, #31]
 8006704:	e01d      	b.n	8006742 <UART_SetConfig+0xe2>
 8006706:	2302      	movs	r3, #2
 8006708:	77fb      	strb	r3, [r7, #31]
 800670a:	e01a      	b.n	8006742 <UART_SetConfig+0xe2>
 800670c:	2304      	movs	r3, #4
 800670e:	77fb      	strb	r3, [r7, #31]
 8006710:	e017      	b.n	8006742 <UART_SetConfig+0xe2>
 8006712:	2308      	movs	r3, #8
 8006714:	77fb      	strb	r3, [r7, #31]
 8006716:	e014      	b.n	8006742 <UART_SetConfig+0xe2>
 8006718:	2310      	movs	r3, #16
 800671a:	77fb      	strb	r3, [r7, #31]
 800671c:	e011      	b.n	8006742 <UART_SetConfig+0xe2>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a67      	ldr	r2, [pc, #412]	; (80068c0 <UART_SetConfig+0x260>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d102      	bne.n	800672e <UART_SetConfig+0xce>
 8006728:	2300      	movs	r3, #0
 800672a:	77fb      	strb	r3, [r7, #31]
 800672c:	e009      	b.n	8006742 <UART_SetConfig+0xe2>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a64      	ldr	r2, [pc, #400]	; (80068c4 <UART_SetConfig+0x264>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d102      	bne.n	800673e <UART_SetConfig+0xde>
 8006738:	2300      	movs	r3, #0
 800673a:	77fb      	strb	r3, [r7, #31]
 800673c:	e001      	b.n	8006742 <UART_SetConfig+0xe2>
 800673e:	2310      	movs	r3, #16
 8006740:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	69db      	ldr	r3, [r3, #28]
 8006746:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800674a:	d15a      	bne.n	8006802 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 800674c:	7ffb      	ldrb	r3, [r7, #31]
 800674e:	2b08      	cmp	r3, #8
 8006750:	d827      	bhi.n	80067a2 <UART_SetConfig+0x142>
 8006752:	a201      	add	r2, pc, #4	; (adr r2, 8006758 <UART_SetConfig+0xf8>)
 8006754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006758:	0800677d 	.word	0x0800677d
 800675c:	08006785 	.word	0x08006785
 8006760:	0800678d 	.word	0x0800678d
 8006764:	080067a3 	.word	0x080067a3
 8006768:	08006793 	.word	0x08006793
 800676c:	080067a3 	.word	0x080067a3
 8006770:	080067a3 	.word	0x080067a3
 8006774:	080067a3 	.word	0x080067a3
 8006778:	0800679b 	.word	0x0800679b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800677c:	f7fe fee2 	bl	8005544 <HAL_RCC_GetPCLK1Freq>
 8006780:	61b8      	str	r0, [r7, #24]
        break;
 8006782:	e013      	b.n	80067ac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006784:	f7fe ff00 	bl	8005588 <HAL_RCC_GetPCLK2Freq>
 8006788:	61b8      	str	r0, [r7, #24]
        break;
 800678a:	e00f      	b.n	80067ac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800678c:	4b4e      	ldr	r3, [pc, #312]	; (80068c8 <UART_SetConfig+0x268>)
 800678e:	61bb      	str	r3, [r7, #24]
        break;
 8006790:	e00c      	b.n	80067ac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006792:	f7fe fe61 	bl	8005458 <HAL_RCC_GetSysClockFreq>
 8006796:	61b8      	str	r0, [r7, #24]
        break;
 8006798:	e008      	b.n	80067ac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800679a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800679e:	61bb      	str	r3, [r7, #24]
        break;
 80067a0:	e004      	b.n	80067ac <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80067a2:	2300      	movs	r3, #0
 80067a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	77bb      	strb	r3, [r7, #30]
        break;
 80067aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d074      	beq.n	800689c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80067b2:	69bb      	ldr	r3, [r7, #24]
 80067b4:	005a      	lsls	r2, r3, #1
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	085b      	lsrs	r3, r3, #1
 80067bc:	441a      	add	r2, r3
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80067c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	2b0f      	cmp	r3, #15
 80067cc:	d916      	bls.n	80067fc <UART_SetConfig+0x19c>
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067d4:	d212      	bcs.n	80067fc <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	b29b      	uxth	r3, r3
 80067da:	f023 030f 	bic.w	r3, r3, #15
 80067de:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	085b      	lsrs	r3, r3, #1
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	f003 0307 	and.w	r3, r3, #7
 80067ea:	b29a      	uxth	r2, r3
 80067ec:	89fb      	ldrh	r3, [r7, #14]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	89fa      	ldrh	r2, [r7, #14]
 80067f8:	60da      	str	r2, [r3, #12]
 80067fa:	e04f      	b.n	800689c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	77bb      	strb	r3, [r7, #30]
 8006800:	e04c      	b.n	800689c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006802:	7ffb      	ldrb	r3, [r7, #31]
 8006804:	2b08      	cmp	r3, #8
 8006806:	d828      	bhi.n	800685a <UART_SetConfig+0x1fa>
 8006808:	a201      	add	r2, pc, #4	; (adr r2, 8006810 <UART_SetConfig+0x1b0>)
 800680a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800680e:	bf00      	nop
 8006810:	08006835 	.word	0x08006835
 8006814:	0800683d 	.word	0x0800683d
 8006818:	08006845 	.word	0x08006845
 800681c:	0800685b 	.word	0x0800685b
 8006820:	0800684b 	.word	0x0800684b
 8006824:	0800685b 	.word	0x0800685b
 8006828:	0800685b 	.word	0x0800685b
 800682c:	0800685b 	.word	0x0800685b
 8006830:	08006853 	.word	0x08006853
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006834:	f7fe fe86 	bl	8005544 <HAL_RCC_GetPCLK1Freq>
 8006838:	61b8      	str	r0, [r7, #24]
        break;
 800683a:	e013      	b.n	8006864 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800683c:	f7fe fea4 	bl	8005588 <HAL_RCC_GetPCLK2Freq>
 8006840:	61b8      	str	r0, [r7, #24]
        break;
 8006842:	e00f      	b.n	8006864 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006844:	4b20      	ldr	r3, [pc, #128]	; (80068c8 <UART_SetConfig+0x268>)
 8006846:	61bb      	str	r3, [r7, #24]
        break;
 8006848:	e00c      	b.n	8006864 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800684a:	f7fe fe05 	bl	8005458 <HAL_RCC_GetSysClockFreq>
 800684e:	61b8      	str	r0, [r7, #24]
        break;
 8006850:	e008      	b.n	8006864 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006852:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006856:	61bb      	str	r3, [r7, #24]
        break;
 8006858:	e004      	b.n	8006864 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800685a:	2300      	movs	r3, #0
 800685c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	77bb      	strb	r3, [r7, #30]
        break;
 8006862:	bf00      	nop
    }

    if (pclk != 0U)
 8006864:	69bb      	ldr	r3, [r7, #24]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d018      	beq.n	800689c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	085a      	lsrs	r2, r3, #1
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	441a      	add	r2, r3
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	fbb2 f3f3 	udiv	r3, r2, r3
 800687c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	2b0f      	cmp	r3, #15
 8006882:	d909      	bls.n	8006898 <UART_SetConfig+0x238>
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800688a:	d205      	bcs.n	8006898 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	b29a      	uxth	r2, r3
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	60da      	str	r2, [r3, #12]
 8006896:	e001      	b.n	800689c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80068a8:	7fbb      	ldrb	r3, [r7, #30]
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3720      	adds	r7, #32
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	efff69f3 	.word	0xefff69f3
 80068b8:	40013800 	.word	0x40013800
 80068bc:	40021000 	.word	0x40021000
 80068c0:	40004400 	.word	0x40004400
 80068c4:	40004800 	.word	0x40004800
 80068c8:	007a1200 	.word	0x007a1200

080068cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d8:	f003 0301 	and.w	r3, r3, #1
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d00a      	beq.n	80068f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	430a      	orrs	r2, r1
 80068f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fa:	f003 0302 	and.w	r3, r3, #2
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d00a      	beq.n	8006918 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	430a      	orrs	r2, r1
 8006916:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691c:	f003 0304 	and.w	r3, r3, #4
 8006920:	2b00      	cmp	r3, #0
 8006922:	d00a      	beq.n	800693a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	430a      	orrs	r2, r1
 8006938:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693e:	f003 0308 	and.w	r3, r3, #8
 8006942:	2b00      	cmp	r3, #0
 8006944:	d00a      	beq.n	800695c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	430a      	orrs	r2, r1
 800695a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006960:	f003 0310 	and.w	r3, r3, #16
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00a      	beq.n	800697e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	430a      	orrs	r2, r1
 800697c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006982:	f003 0320 	and.w	r3, r3, #32
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00a      	beq.n	80069a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	430a      	orrs	r2, r1
 800699e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d01a      	beq.n	80069e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	430a      	orrs	r2, r1
 80069c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069ca:	d10a      	bne.n	80069e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	430a      	orrs	r2, r1
 80069e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d00a      	beq.n	8006a04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	430a      	orrs	r2, r1
 8006a02:	605a      	str	r2, [r3, #4]
  }
}
 8006a04:	bf00      	nop
 8006a06:	370c      	adds	r7, #12
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b098      	sub	sp, #96	; 0x60
 8006a14:	af02      	add	r7, sp, #8
 8006a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a20:	f7fc faf8 	bl	8003014 <HAL_GetTick>
 8006a24:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 0308 	and.w	r3, r3, #8
 8006a30:	2b08      	cmp	r3, #8
 8006a32:	d12e      	bne.n	8006a92 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a38:	9300      	str	r3, [sp, #0]
 8006a3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 f88c 	bl	8006b60 <UART_WaitOnFlagUntilTimeout>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d021      	beq.n	8006a92 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a56:	e853 3f00 	ldrex	r3, [r3]
 8006a5a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a62:	653b      	str	r3, [r7, #80]	; 0x50
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	461a      	mov	r2, r3
 8006a6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a6c:	647b      	str	r3, [r7, #68]	; 0x44
 8006a6e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a70:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a74:	e841 2300 	strex	r3, r2, [r1]
 8006a78:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d1e6      	bne.n	8006a4e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2220      	movs	r2, #32
 8006a84:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	e062      	b.n	8006b58 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f003 0304 	and.w	r3, r3, #4
 8006a9c:	2b04      	cmp	r3, #4
 8006a9e:	d149      	bne.n	8006b34 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006aa0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006aa4:	9300      	str	r3, [sp, #0]
 8006aa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 f856 	bl	8006b60 <UART_WaitOnFlagUntilTimeout>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d03c      	beq.n	8006b34 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac2:	e853 3f00 	ldrex	r3, [r3]
 8006ac6:	623b      	str	r3, [r7, #32]
   return(result);
 8006ac8:	6a3b      	ldr	r3, [r7, #32]
 8006aca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ace:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ad8:	633b      	str	r3, [r7, #48]	; 0x30
 8006ada:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006adc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ade:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ae0:	e841 2300 	strex	r3, r2, [r1]
 8006ae4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d1e6      	bne.n	8006aba <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	3308      	adds	r3, #8
 8006af2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	e853 3f00 	ldrex	r3, [r3]
 8006afa:	60fb      	str	r3, [r7, #12]
   return(result);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f023 0301 	bic.w	r3, r3, #1
 8006b02:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	3308      	adds	r3, #8
 8006b0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b0c:	61fa      	str	r2, [r7, #28]
 8006b0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b10:	69b9      	ldr	r1, [r7, #24]
 8006b12:	69fa      	ldr	r2, [r7, #28]
 8006b14:	e841 2300 	strex	r3, r2, [r1]
 8006b18:	617b      	str	r3, [r7, #20]
   return(result);
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d1e5      	bne.n	8006aec <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2220      	movs	r2, #32
 8006b24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b30:	2303      	movs	r3, #3
 8006b32:	e011      	b.n	8006b58 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2220      	movs	r2, #32
 8006b38:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2220      	movs	r2, #32
 8006b3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006b56:	2300      	movs	r3, #0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3758      	adds	r7, #88	; 0x58
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	603b      	str	r3, [r7, #0]
 8006b6c:	4613      	mov	r3, r2
 8006b6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b70:	e049      	b.n	8006c06 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b72:	69bb      	ldr	r3, [r7, #24]
 8006b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b78:	d045      	beq.n	8006c06 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b7a:	f7fc fa4b 	bl	8003014 <HAL_GetTick>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	1ad3      	subs	r3, r2, r3
 8006b84:	69ba      	ldr	r2, [r7, #24]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d302      	bcc.n	8006b90 <UART_WaitOnFlagUntilTimeout+0x30>
 8006b8a:	69bb      	ldr	r3, [r7, #24]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d101      	bne.n	8006b94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006b90:	2303      	movs	r3, #3
 8006b92:	e048      	b.n	8006c26 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f003 0304 	and.w	r3, r3, #4
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d031      	beq.n	8006c06 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	69db      	ldr	r3, [r3, #28]
 8006ba8:	f003 0308 	and.w	r3, r3, #8
 8006bac:	2b08      	cmp	r3, #8
 8006bae:	d110      	bne.n	8006bd2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	2208      	movs	r2, #8
 8006bb6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006bb8:	68f8      	ldr	r0, [r7, #12]
 8006bba:	f000 f838 	bl	8006c2e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2208      	movs	r2, #8
 8006bc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e029      	b.n	8006c26 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	69db      	ldr	r3, [r3, #28]
 8006bd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006be0:	d111      	bne.n	8006c06 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006bea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006bec:	68f8      	ldr	r0, [r7, #12]
 8006bee:	f000 f81e 	bl	8006c2e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2220      	movs	r2, #32
 8006bf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006c02:	2303      	movs	r3, #3
 8006c04:	e00f      	b.n	8006c26 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	69da      	ldr	r2, [r3, #28]
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	4013      	ands	r3, r2
 8006c10:	68ba      	ldr	r2, [r7, #8]
 8006c12:	429a      	cmp	r2, r3
 8006c14:	bf0c      	ite	eq
 8006c16:	2301      	moveq	r3, #1
 8006c18:	2300      	movne	r3, #0
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	79fb      	ldrb	r3, [r7, #7]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d0a6      	beq.n	8006b72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3710      	adds	r7, #16
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}

08006c2e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c2e:	b480      	push	{r7}
 8006c30:	b095      	sub	sp, #84	; 0x54
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c3e:	e853 3f00 	ldrex	r3, [r3]
 8006c42:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c46:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	461a      	mov	r2, r3
 8006c52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c54:	643b      	str	r3, [r7, #64]	; 0x40
 8006c56:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c58:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c5c:	e841 2300 	strex	r3, r2, [r1]
 8006c60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d1e6      	bne.n	8006c36 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	3308      	adds	r3, #8
 8006c6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c70:	6a3b      	ldr	r3, [r7, #32]
 8006c72:	e853 3f00 	ldrex	r3, [r3]
 8006c76:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	f023 0301 	bic.w	r3, r3, #1
 8006c7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	3308      	adds	r3, #8
 8006c86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c88:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c90:	e841 2300 	strex	r3, r2, [r1]
 8006c94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d1e5      	bne.n	8006c68 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d118      	bne.n	8006cd6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	e853 3f00 	ldrex	r3, [r3]
 8006cb0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	f023 0310 	bic.w	r3, r3, #16
 8006cb8:	647b      	str	r3, [r7, #68]	; 0x44
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cc2:	61bb      	str	r3, [r7, #24]
 8006cc4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc6:	6979      	ldr	r1, [r7, #20]
 8006cc8:	69ba      	ldr	r2, [r7, #24]
 8006cca:	e841 2300 	strex	r3, r2, [r1]
 8006cce:	613b      	str	r3, [r7, #16]
   return(result);
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d1e6      	bne.n	8006ca4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2220      	movs	r2, #32
 8006cda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006cea:	bf00      	nop
 8006cec:	3754      	adds	r7, #84	; 0x54
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr

08006cf6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006cf6:	b480      	push	{r7}
 8006cf8:	b085      	sub	sp, #20
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006d00:	2300      	movs	r3, #0
 8006d02:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006d04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006d08:	2b84      	cmp	r3, #132	; 0x84
 8006d0a:	d005      	beq.n	8006d18 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006d0c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	4413      	add	r3, r2
 8006d14:	3303      	adds	r3, #3
 8006d16:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006d18:	68fb      	ldr	r3, [r7, #12]
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3714      	adds	r7, #20
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr

08006d26 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006d26:	b580      	push	{r7, lr}
 8006d28:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006d2a:	f001 f8b9 	bl	8007ea0 <vTaskStartScheduler>
  
  return osOK;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006d34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d36:	b089      	sub	sp, #36	; 0x24
 8006d38:	af04      	add	r7, sp, #16
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	695b      	ldr	r3, [r3, #20]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d020      	beq.n	8006d88 <osThreadCreate+0x54>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	699b      	ldr	r3, [r3, #24]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d01c      	beq.n	8006d88 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	685c      	ldr	r4, [r3, #4]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	691e      	ldr	r6, [r3, #16]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d60:	4618      	mov	r0, r3
 8006d62:	f7ff ffc8 	bl	8006cf6 <makeFreeRtosPriority>
 8006d66:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	695b      	ldr	r3, [r3, #20]
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d70:	9202      	str	r2, [sp, #8]
 8006d72:	9301      	str	r3, [sp, #4]
 8006d74:	9100      	str	r1, [sp, #0]
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	4632      	mov	r2, r6
 8006d7a:	4629      	mov	r1, r5
 8006d7c:	4620      	mov	r0, r4
 8006d7e:	f000 fed1 	bl	8007b24 <xTaskCreateStatic>
 8006d82:	4603      	mov	r3, r0
 8006d84:	60fb      	str	r3, [r7, #12]
 8006d86:	e01c      	b.n	8006dc2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	685c      	ldr	r4, [r3, #4]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d94:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f7ff ffaa 	bl	8006cf6 <makeFreeRtosPriority>
 8006da2:	4602      	mov	r2, r0
 8006da4:	f107 030c 	add.w	r3, r7, #12
 8006da8:	9301      	str	r3, [sp, #4]
 8006daa:	9200      	str	r2, [sp, #0]
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	4632      	mov	r2, r6
 8006db0:	4629      	mov	r1, r5
 8006db2:	4620      	mov	r0, r4
 8006db4:	f000 ff12 	bl	8007bdc <xTaskCreate>
 8006db8:	4603      	mov	r3, r0
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d001      	beq.n	8006dc2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	e000      	b.n	8006dc4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3714      	adds	r7, #20
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006dcc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d001      	beq.n	8006de2 <osDelay+0x16>
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	e000      	b.n	8006de4 <osDelay+0x18>
 8006de2:	2301      	movs	r3, #1
 8006de4:	4618      	mov	r0, r3
 8006de6:	f001 f827 	bl	8007e38 <vTaskDelay>
  
  return osOK;
 8006dea:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3710      	adds	r7, #16
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b082      	sub	sp, #8
 8006df8:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8006dfa:	201c      	movs	r0, #28
 8006dfc:	f002 fbbc 	bl	8009578 <pvPortMalloc>
 8006e00:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d00a      	beq.n	8006e1e <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	3304      	adds	r3, #4
 8006e12:	4618      	mov	r0, r3
 8006e14:	f000 f8ef 	bl	8006ff6 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8006e1e:	687b      	ldr	r3, [r7, #4]
	}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3708      	adds	r7, #8
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <xEventGroupClearBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b086      	sub	sp, #24
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d10a      	bne.n	8006e52 <xEventGroupClearBits+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e40:	f383 8811 	msr	BASEPRI, r3
 8006e44:	f3bf 8f6f 	isb	sy
 8006e48:	f3bf 8f4f 	dsb	sy
 8006e4c:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006e4e:	bf00      	nop
 8006e50:	e7fe      	b.n	8006e50 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d00a      	beq.n	8006e72 <xEventGroupClearBits+0x4a>
	__asm volatile
 8006e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e60:	f383 8811 	msr	BASEPRI, r3
 8006e64:	f3bf 8f6f 	isb	sy
 8006e68:	f3bf 8f4f 	dsb	sy
 8006e6c:	60bb      	str	r3, [r7, #8]
}
 8006e6e:	bf00      	nop
 8006e70:	e7fe      	b.n	8006e70 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8006e72:	f002 fa5f 	bl	8009334 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	43db      	mvns	r3, r3
 8006e84:	401a      	ands	r2, r3
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8006e8a:	f002 fa83 	bl	8009394 <vPortExitCritical>

	return uxReturn;
 8006e8e:	693b      	ldr	r3, [r7, #16]
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3718      	adds	r7, #24
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b089      	sub	sp, #36	; 0x24
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006ea4:	f3ef 8211 	mrs	r2, BASEPRI
 8006ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eac:	f383 8811 	msr	BASEPRI, r3
 8006eb0:	f3bf 8f6f 	isb	sy
 8006eb4:	f3bf 8f4f 	dsb	sy
 8006eb8:	60fa      	str	r2, [r7, #12]
 8006eba:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006ebe:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8006ec0:	69fb      	ldr	r3, [r7, #28]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	617b      	str	r3, [r7, #20]
 8006ec6:	69bb      	ldr	r3, [r7, #24]
 8006ec8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006ed0:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8006ed2:	697b      	ldr	r3, [r7, #20]
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3724      	adds	r7, #36	; 0x24
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b08e      	sub	sp, #56	; 0x38
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8006eea:	2300      	movs	r3, #0
 8006eec:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d10a      	bne.n	8006f12 <xEventGroupSetBits+0x32>
	__asm volatile
 8006efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f00:	f383 8811 	msr	BASEPRI, r3
 8006f04:	f3bf 8f6f 	isb	sy
 8006f08:	f3bf 8f4f 	dsb	sy
 8006f0c:	613b      	str	r3, [r7, #16]
}
 8006f0e:	bf00      	nop
 8006f10:	e7fe      	b.n	8006f10 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d00a      	beq.n	8006f32 <xEventGroupSetBits+0x52>
	__asm volatile
 8006f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f20:	f383 8811 	msr	BASEPRI, r3
 8006f24:	f3bf 8f6f 	isb	sy
 8006f28:	f3bf 8f4f 	dsb	sy
 8006f2c:	60fb      	str	r3, [r7, #12]
}
 8006f2e:	bf00      	nop
 8006f30:	e7fe      	b.n	8006f30 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8006f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f34:	3304      	adds	r3, #4
 8006f36:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3a:	3308      	adds	r3, #8
 8006f3c:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8006f3e:	f001 f815 	bl	8007f6c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8006f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f44:	68db      	ldr	r3, [r3, #12]
 8006f46:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8006f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	431a      	orrs	r2, r3
 8006f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f52:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8006f54:	e03c      	b.n	8006fd0 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8006f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8006f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8006f62:	2300      	movs	r3, #0
 8006f64:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006f6c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8006f6e:	69bb      	ldr	r3, [r7, #24]
 8006f70:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006f74:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d108      	bne.n	8006f92 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8006f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	69bb      	ldr	r3, [r7, #24]
 8006f86:	4013      	ands	r3, r2
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d00b      	beq.n	8006fa4 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f90:	e008      	b.n	8006fa4 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8006f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	69bb      	ldr	r3, [r7, #24]
 8006f98:	4013      	ands	r3, r2
 8006f9a:	69ba      	ldr	r2, [r7, #24]
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d101      	bne.n	8006fa4 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8006fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d010      	beq.n	8006fcc <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d003      	beq.n	8006fbc <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8006fb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fb6:	69bb      	ldr	r3, [r7, #24]
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8006fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006fc4:	4619      	mov	r1, r3
 8006fc6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006fc8:	f001 fa56 	bl	8008478 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8006fd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fd2:	6a3b      	ldr	r3, [r7, #32]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d1be      	bne.n	8006f56 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8006fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fde:	43db      	mvns	r3, r3
 8006fe0:	401a      	ands	r2, r3
 8006fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe4:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8006fe6:	f000 ffcf 	bl	8007f88 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8006fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fec:	681b      	ldr	r3, [r3, #0]
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3738      	adds	r7, #56	; 0x38
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}

08006ff6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006ff6:	b480      	push	{r7}
 8006ff8:	b083      	sub	sp, #12
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f103 0208 	add.w	r2, r3, #8
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f04f 32ff 	mov.w	r2, #4294967295
 800700e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f103 0208 	add.w	r2, r3, #8
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f103 0208 	add.w	r2, r3, #8
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800702a:	bf00      	nop
 800702c:	370c      	adds	r7, #12
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr

08007036 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007036:	b480      	push	{r7}
 8007038:	b083      	sub	sp, #12
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007044:	bf00      	nop
 8007046:	370c      	adds	r7, #12
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr

08007050 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007050:	b480      	push	{r7}
 8007052:	b085      	sub	sp, #20
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	68fa      	ldr	r2, [r7, #12]
 8007064:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	689a      	ldr	r2, [r3, #8]
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	683a      	ldr	r2, [r7, #0]
 8007074:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	683a      	ldr	r2, [r7, #0]
 800707a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	1c5a      	adds	r2, r3, #1
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	601a      	str	r2, [r3, #0]
}
 800708c:	bf00      	nop
 800708e:	3714      	adds	r7, #20
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr

08007098 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007098:	b480      	push	{r7}
 800709a:	b085      	sub	sp, #20
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ae:	d103      	bne.n	80070b8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	691b      	ldr	r3, [r3, #16]
 80070b4:	60fb      	str	r3, [r7, #12]
 80070b6:	e00c      	b.n	80070d2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	3308      	adds	r3, #8
 80070bc:	60fb      	str	r3, [r7, #12]
 80070be:	e002      	b.n	80070c6 <vListInsert+0x2e>
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	60fb      	str	r3, [r7, #12]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	68ba      	ldr	r2, [r7, #8]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d2f6      	bcs.n	80070c0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	685a      	ldr	r2, [r3, #4]
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	683a      	ldr	r2, [r7, #0]
 80070e0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	68fa      	ldr	r2, [r7, #12]
 80070e6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	683a      	ldr	r2, [r7, #0]
 80070ec:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	1c5a      	adds	r2, r3, #1
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	601a      	str	r2, [r3, #0]
}
 80070fe:	bf00      	nop
 8007100:	3714      	adds	r7, #20
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr

0800710a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800710a:	b480      	push	{r7}
 800710c:	b085      	sub	sp, #20
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	6892      	ldr	r2, [r2, #8]
 8007120:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	6852      	ldr	r2, [r2, #4]
 800712a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	687a      	ldr	r2, [r7, #4]
 8007132:	429a      	cmp	r2, r3
 8007134:	d103      	bne.n	800713e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	689a      	ldr	r2, [r3, #8]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	1e5a      	subs	r2, r3, #1
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
}
 8007152:	4618      	mov	r0, r3
 8007154:	3714      	adds	r7, #20
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr
	...

08007160 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d10a      	bne.n	800718a <xQueueGenericReset+0x2a>
	__asm volatile
 8007174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007178:	f383 8811 	msr	BASEPRI, r3
 800717c:	f3bf 8f6f 	isb	sy
 8007180:	f3bf 8f4f 	dsb	sy
 8007184:	60bb      	str	r3, [r7, #8]
}
 8007186:	bf00      	nop
 8007188:	e7fe      	b.n	8007188 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800718a:	f002 f8d3 	bl	8009334 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007196:	68f9      	ldr	r1, [r7, #12]
 8007198:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800719a:	fb01 f303 	mul.w	r3, r1, r3
 800719e:	441a      	add	r2, r3
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2200      	movs	r2, #0
 80071a8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ba:	3b01      	subs	r3, #1
 80071bc:	68f9      	ldr	r1, [r7, #12]
 80071be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80071c0:	fb01 f303 	mul.w	r3, r1, r3
 80071c4:	441a      	add	r2, r3
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	22ff      	movs	r2, #255	; 0xff
 80071ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	22ff      	movs	r2, #255	; 0xff
 80071d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d114      	bne.n	800720a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	691b      	ldr	r3, [r3, #16]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d01a      	beq.n	800721e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	3310      	adds	r3, #16
 80071ec:	4618      	mov	r0, r3
 80071ee:	f001 f8e1 	bl	80083b4 <xTaskRemoveFromEventList>
 80071f2:	4603      	mov	r3, r0
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d012      	beq.n	800721e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80071f8:	4b0c      	ldr	r3, [pc, #48]	; (800722c <xQueueGenericReset+0xcc>)
 80071fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071fe:	601a      	str	r2, [r3, #0]
 8007200:	f3bf 8f4f 	dsb	sy
 8007204:	f3bf 8f6f 	isb	sy
 8007208:	e009      	b.n	800721e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	3310      	adds	r3, #16
 800720e:	4618      	mov	r0, r3
 8007210:	f7ff fef1 	bl	8006ff6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	3324      	adds	r3, #36	; 0x24
 8007218:	4618      	mov	r0, r3
 800721a:	f7ff feec 	bl	8006ff6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800721e:	f002 f8b9 	bl	8009394 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007222:	2301      	movs	r3, #1
}
 8007224:	4618      	mov	r0, r3
 8007226:	3710      	adds	r7, #16
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}
 800722c:	e000ed04 	.word	0xe000ed04

08007230 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007230:	b580      	push	{r7, lr}
 8007232:	b08e      	sub	sp, #56	; 0x38
 8007234:	af02      	add	r7, sp, #8
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	60b9      	str	r1, [r7, #8]
 800723a:	607a      	str	r2, [r7, #4]
 800723c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d10a      	bne.n	800725a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007248:	f383 8811 	msr	BASEPRI, r3
 800724c:	f3bf 8f6f 	isb	sy
 8007250:	f3bf 8f4f 	dsb	sy
 8007254:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007256:	bf00      	nop
 8007258:	e7fe      	b.n	8007258 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d10a      	bne.n	8007276 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007264:	f383 8811 	msr	BASEPRI, r3
 8007268:	f3bf 8f6f 	isb	sy
 800726c:	f3bf 8f4f 	dsb	sy
 8007270:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007272:	bf00      	nop
 8007274:	e7fe      	b.n	8007274 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d002      	beq.n	8007282 <xQueueGenericCreateStatic+0x52>
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d001      	beq.n	8007286 <xQueueGenericCreateStatic+0x56>
 8007282:	2301      	movs	r3, #1
 8007284:	e000      	b.n	8007288 <xQueueGenericCreateStatic+0x58>
 8007286:	2300      	movs	r3, #0
 8007288:	2b00      	cmp	r3, #0
 800728a:	d10a      	bne.n	80072a2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800728c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007290:	f383 8811 	msr	BASEPRI, r3
 8007294:	f3bf 8f6f 	isb	sy
 8007298:	f3bf 8f4f 	dsb	sy
 800729c:	623b      	str	r3, [r7, #32]
}
 800729e:	bf00      	nop
 80072a0:	e7fe      	b.n	80072a0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d102      	bne.n	80072ae <xQueueGenericCreateStatic+0x7e>
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d101      	bne.n	80072b2 <xQueueGenericCreateStatic+0x82>
 80072ae:	2301      	movs	r3, #1
 80072b0:	e000      	b.n	80072b4 <xQueueGenericCreateStatic+0x84>
 80072b2:	2300      	movs	r3, #0
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d10a      	bne.n	80072ce <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80072b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072bc:	f383 8811 	msr	BASEPRI, r3
 80072c0:	f3bf 8f6f 	isb	sy
 80072c4:	f3bf 8f4f 	dsb	sy
 80072c8:	61fb      	str	r3, [r7, #28]
}
 80072ca:	bf00      	nop
 80072cc:	e7fe      	b.n	80072cc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80072ce:	2348      	movs	r3, #72	; 0x48
 80072d0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	2b48      	cmp	r3, #72	; 0x48
 80072d6:	d00a      	beq.n	80072ee <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80072d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072dc:	f383 8811 	msr	BASEPRI, r3
 80072e0:	f3bf 8f6f 	isb	sy
 80072e4:	f3bf 8f4f 	dsb	sy
 80072e8:	61bb      	str	r3, [r7, #24]
}
 80072ea:	bf00      	nop
 80072ec:	e7fe      	b.n	80072ec <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80072f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d00d      	beq.n	8007314 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80072f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072fa:	2201      	movs	r2, #1
 80072fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007300:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007306:	9300      	str	r3, [sp, #0]
 8007308:	4613      	mov	r3, r2
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	68b9      	ldr	r1, [r7, #8]
 800730e:	68f8      	ldr	r0, [r7, #12]
 8007310:	f000 f805 	bl	800731e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007316:	4618      	mov	r0, r3
 8007318:	3730      	adds	r7, #48	; 0x30
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}

0800731e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800731e:	b580      	push	{r7, lr}
 8007320:	b084      	sub	sp, #16
 8007322:	af00      	add	r7, sp, #0
 8007324:	60f8      	str	r0, [r7, #12]
 8007326:	60b9      	str	r1, [r7, #8]
 8007328:	607a      	str	r2, [r7, #4]
 800732a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d103      	bne.n	800733a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007332:	69bb      	ldr	r3, [r7, #24]
 8007334:	69ba      	ldr	r2, [r7, #24]
 8007336:	601a      	str	r2, [r3, #0]
 8007338:	e002      	b.n	8007340 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800733a:	69bb      	ldr	r3, [r7, #24]
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007340:	69bb      	ldr	r3, [r7, #24]
 8007342:	68fa      	ldr	r2, [r7, #12]
 8007344:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007346:	69bb      	ldr	r3, [r7, #24]
 8007348:	68ba      	ldr	r2, [r7, #8]
 800734a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800734c:	2101      	movs	r1, #1
 800734e:	69b8      	ldr	r0, [r7, #24]
 8007350:	f7ff ff06 	bl	8007160 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007354:	bf00      	nop
 8007356:	3710      	adds	r7, #16
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}

0800735c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b08e      	sub	sp, #56	; 0x38
 8007360:	af00      	add	r7, sp, #0
 8007362:	60f8      	str	r0, [r7, #12]
 8007364:	60b9      	str	r1, [r7, #8]
 8007366:	607a      	str	r2, [r7, #4]
 8007368:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800736a:	2300      	movs	r3, #0
 800736c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007374:	2b00      	cmp	r3, #0
 8007376:	d10a      	bne.n	800738e <xQueueGenericSend+0x32>
	__asm volatile
 8007378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800737c:	f383 8811 	msr	BASEPRI, r3
 8007380:	f3bf 8f6f 	isb	sy
 8007384:	f3bf 8f4f 	dsb	sy
 8007388:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800738a:	bf00      	nop
 800738c:	e7fe      	b.n	800738c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d103      	bne.n	800739c <xQueueGenericSend+0x40>
 8007394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007398:	2b00      	cmp	r3, #0
 800739a:	d101      	bne.n	80073a0 <xQueueGenericSend+0x44>
 800739c:	2301      	movs	r3, #1
 800739e:	e000      	b.n	80073a2 <xQueueGenericSend+0x46>
 80073a0:	2300      	movs	r3, #0
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d10a      	bne.n	80073bc <xQueueGenericSend+0x60>
	__asm volatile
 80073a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073aa:	f383 8811 	msr	BASEPRI, r3
 80073ae:	f3bf 8f6f 	isb	sy
 80073b2:	f3bf 8f4f 	dsb	sy
 80073b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80073b8:	bf00      	nop
 80073ba:	e7fe      	b.n	80073ba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	2b02      	cmp	r3, #2
 80073c0:	d103      	bne.n	80073ca <xQueueGenericSend+0x6e>
 80073c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d101      	bne.n	80073ce <xQueueGenericSend+0x72>
 80073ca:	2301      	movs	r3, #1
 80073cc:	e000      	b.n	80073d0 <xQueueGenericSend+0x74>
 80073ce:	2300      	movs	r3, #0
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d10a      	bne.n	80073ea <xQueueGenericSend+0x8e>
	__asm volatile
 80073d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d8:	f383 8811 	msr	BASEPRI, r3
 80073dc:	f3bf 8f6f 	isb	sy
 80073e0:	f3bf 8f4f 	dsb	sy
 80073e4:	623b      	str	r3, [r7, #32]
}
 80073e6:	bf00      	nop
 80073e8:	e7fe      	b.n	80073e8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80073ea:	f001 fa07 	bl	80087fc <xTaskGetSchedulerState>
 80073ee:	4603      	mov	r3, r0
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d102      	bne.n	80073fa <xQueueGenericSend+0x9e>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d101      	bne.n	80073fe <xQueueGenericSend+0xa2>
 80073fa:	2301      	movs	r3, #1
 80073fc:	e000      	b.n	8007400 <xQueueGenericSend+0xa4>
 80073fe:	2300      	movs	r3, #0
 8007400:	2b00      	cmp	r3, #0
 8007402:	d10a      	bne.n	800741a <xQueueGenericSend+0xbe>
	__asm volatile
 8007404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007408:	f383 8811 	msr	BASEPRI, r3
 800740c:	f3bf 8f6f 	isb	sy
 8007410:	f3bf 8f4f 	dsb	sy
 8007414:	61fb      	str	r3, [r7, #28]
}
 8007416:	bf00      	nop
 8007418:	e7fe      	b.n	8007418 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800741a:	f001 ff8b 	bl	8009334 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800741e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007420:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007426:	429a      	cmp	r2, r3
 8007428:	d302      	bcc.n	8007430 <xQueueGenericSend+0xd4>
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	2b02      	cmp	r3, #2
 800742e:	d129      	bne.n	8007484 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007430:	683a      	ldr	r2, [r7, #0]
 8007432:	68b9      	ldr	r1, [r7, #8]
 8007434:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007436:	f000 fa07 	bl	8007848 <prvCopyDataToQueue>
 800743a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800743c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800743e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007440:	2b00      	cmp	r3, #0
 8007442:	d010      	beq.n	8007466 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007446:	3324      	adds	r3, #36	; 0x24
 8007448:	4618      	mov	r0, r3
 800744a:	f000 ffb3 	bl	80083b4 <xTaskRemoveFromEventList>
 800744e:	4603      	mov	r3, r0
 8007450:	2b00      	cmp	r3, #0
 8007452:	d013      	beq.n	800747c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007454:	4b3f      	ldr	r3, [pc, #252]	; (8007554 <xQueueGenericSend+0x1f8>)
 8007456:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800745a:	601a      	str	r2, [r3, #0]
 800745c:	f3bf 8f4f 	dsb	sy
 8007460:	f3bf 8f6f 	isb	sy
 8007464:	e00a      	b.n	800747c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007468:	2b00      	cmp	r3, #0
 800746a:	d007      	beq.n	800747c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800746c:	4b39      	ldr	r3, [pc, #228]	; (8007554 <xQueueGenericSend+0x1f8>)
 800746e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007472:	601a      	str	r2, [r3, #0]
 8007474:	f3bf 8f4f 	dsb	sy
 8007478:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800747c:	f001 ff8a 	bl	8009394 <vPortExitCritical>
				return pdPASS;
 8007480:	2301      	movs	r3, #1
 8007482:	e063      	b.n	800754c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d103      	bne.n	8007492 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800748a:	f001 ff83 	bl	8009394 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800748e:	2300      	movs	r3, #0
 8007490:	e05c      	b.n	800754c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007494:	2b00      	cmp	r3, #0
 8007496:	d106      	bne.n	80074a6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007498:	f107 0314 	add.w	r3, r7, #20
 800749c:	4618      	mov	r0, r3
 800749e:	f001 f84d 	bl	800853c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80074a2:	2301      	movs	r3, #1
 80074a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80074a6:	f001 ff75 	bl	8009394 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80074aa:	f000 fd5f 	bl	8007f6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80074ae:	f001 ff41 	bl	8009334 <vPortEnterCritical>
 80074b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074b8:	b25b      	sxtb	r3, r3
 80074ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074be:	d103      	bne.n	80074c8 <xQueueGenericSend+0x16c>
 80074c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c2:	2200      	movs	r2, #0
 80074c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074ce:	b25b      	sxtb	r3, r3
 80074d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074d4:	d103      	bne.n	80074de <xQueueGenericSend+0x182>
 80074d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d8:	2200      	movs	r2, #0
 80074da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074de:	f001 ff59 	bl	8009394 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80074e2:	1d3a      	adds	r2, r7, #4
 80074e4:	f107 0314 	add.w	r3, r7, #20
 80074e8:	4611      	mov	r1, r2
 80074ea:	4618      	mov	r0, r3
 80074ec:	f001 f83c 	bl	8008568 <xTaskCheckForTimeOut>
 80074f0:	4603      	mov	r3, r0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d124      	bne.n	8007540 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80074f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074f8:	f000 fa9e 	bl	8007a38 <prvIsQueueFull>
 80074fc:	4603      	mov	r3, r0
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d018      	beq.n	8007534 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007504:	3310      	adds	r3, #16
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	4611      	mov	r1, r2
 800750a:	4618      	mov	r0, r3
 800750c:	f000 ff02 	bl	8008314 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007510:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007512:	f000 fa29 	bl	8007968 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007516:	f000 fd37 	bl	8007f88 <xTaskResumeAll>
 800751a:	4603      	mov	r3, r0
 800751c:	2b00      	cmp	r3, #0
 800751e:	f47f af7c 	bne.w	800741a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007522:	4b0c      	ldr	r3, [pc, #48]	; (8007554 <xQueueGenericSend+0x1f8>)
 8007524:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007528:	601a      	str	r2, [r3, #0]
 800752a:	f3bf 8f4f 	dsb	sy
 800752e:	f3bf 8f6f 	isb	sy
 8007532:	e772      	b.n	800741a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007534:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007536:	f000 fa17 	bl	8007968 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800753a:	f000 fd25 	bl	8007f88 <xTaskResumeAll>
 800753e:	e76c      	b.n	800741a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007540:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007542:	f000 fa11 	bl	8007968 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007546:	f000 fd1f 	bl	8007f88 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800754a:	2300      	movs	r3, #0
		}
	}
}
 800754c:	4618      	mov	r0, r3
 800754e:	3738      	adds	r7, #56	; 0x38
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}
 8007554:	e000ed04 	.word	0xe000ed04

08007558 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b08e      	sub	sp, #56	; 0x38
 800755c:	af00      	add	r7, sp, #0
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	60b9      	str	r1, [r7, #8]
 8007562:	607a      	str	r2, [r7, #4]
 8007564:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800756a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800756c:	2b00      	cmp	r3, #0
 800756e:	d10a      	bne.n	8007586 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007574:	f383 8811 	msr	BASEPRI, r3
 8007578:	f3bf 8f6f 	isb	sy
 800757c:	f3bf 8f4f 	dsb	sy
 8007580:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007582:	bf00      	nop
 8007584:	e7fe      	b.n	8007584 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d103      	bne.n	8007594 <xQueueGenericSendFromISR+0x3c>
 800758c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800758e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007590:	2b00      	cmp	r3, #0
 8007592:	d101      	bne.n	8007598 <xQueueGenericSendFromISR+0x40>
 8007594:	2301      	movs	r3, #1
 8007596:	e000      	b.n	800759a <xQueueGenericSendFromISR+0x42>
 8007598:	2300      	movs	r3, #0
 800759a:	2b00      	cmp	r3, #0
 800759c:	d10a      	bne.n	80075b4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800759e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a2:	f383 8811 	msr	BASEPRI, r3
 80075a6:	f3bf 8f6f 	isb	sy
 80075aa:	f3bf 8f4f 	dsb	sy
 80075ae:	623b      	str	r3, [r7, #32]
}
 80075b0:	bf00      	nop
 80075b2:	e7fe      	b.n	80075b2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	2b02      	cmp	r3, #2
 80075b8:	d103      	bne.n	80075c2 <xQueueGenericSendFromISR+0x6a>
 80075ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d101      	bne.n	80075c6 <xQueueGenericSendFromISR+0x6e>
 80075c2:	2301      	movs	r3, #1
 80075c4:	e000      	b.n	80075c8 <xQueueGenericSendFromISR+0x70>
 80075c6:	2300      	movs	r3, #0
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d10a      	bne.n	80075e2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80075cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d0:	f383 8811 	msr	BASEPRI, r3
 80075d4:	f3bf 8f6f 	isb	sy
 80075d8:	f3bf 8f4f 	dsb	sy
 80075dc:	61fb      	str	r3, [r7, #28]
}
 80075de:	bf00      	nop
 80075e0:	e7fe      	b.n	80075e0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80075e2:	f001 ff89 	bl	80094f8 <vPortValidateInterruptPriority>
	__asm volatile
 80075e6:	f3ef 8211 	mrs	r2, BASEPRI
 80075ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ee:	f383 8811 	msr	BASEPRI, r3
 80075f2:	f3bf 8f6f 	isb	sy
 80075f6:	f3bf 8f4f 	dsb	sy
 80075fa:	61ba      	str	r2, [r7, #24]
 80075fc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80075fe:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007600:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007604:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800760a:	429a      	cmp	r2, r3
 800760c:	d302      	bcc.n	8007614 <xQueueGenericSendFromISR+0xbc>
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	2b02      	cmp	r3, #2
 8007612:	d12c      	bne.n	800766e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007616:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800761a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800761e:	683a      	ldr	r2, [r7, #0]
 8007620:	68b9      	ldr	r1, [r7, #8]
 8007622:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007624:	f000 f910 	bl	8007848 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007628:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800762c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007630:	d112      	bne.n	8007658 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007636:	2b00      	cmp	r3, #0
 8007638:	d016      	beq.n	8007668 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800763a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800763c:	3324      	adds	r3, #36	; 0x24
 800763e:	4618      	mov	r0, r3
 8007640:	f000 feb8 	bl	80083b4 <xTaskRemoveFromEventList>
 8007644:	4603      	mov	r3, r0
 8007646:	2b00      	cmp	r3, #0
 8007648:	d00e      	beq.n	8007668 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d00b      	beq.n	8007668 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2201      	movs	r2, #1
 8007654:	601a      	str	r2, [r3, #0]
 8007656:	e007      	b.n	8007668 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007658:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800765c:	3301      	adds	r3, #1
 800765e:	b2db      	uxtb	r3, r3
 8007660:	b25a      	sxtb	r2, r3
 8007662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007664:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007668:	2301      	movs	r3, #1
 800766a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800766c:	e001      	b.n	8007672 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800766e:	2300      	movs	r3, #0
 8007670:	637b      	str	r3, [r7, #52]	; 0x34
 8007672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007674:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	f383 8811 	msr	BASEPRI, r3
}
 800767c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800767e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007680:	4618      	mov	r0, r3
 8007682:	3738      	adds	r7, #56	; 0x38
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}

08007688 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b08c      	sub	sp, #48	; 0x30
 800768c:	af00      	add	r7, sp, #0
 800768e:	60f8      	str	r0, [r7, #12]
 8007690:	60b9      	str	r1, [r7, #8]
 8007692:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007694:	2300      	movs	r3, #0
 8007696:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800769c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d10a      	bne.n	80076b8 <xQueueReceive+0x30>
	__asm volatile
 80076a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a6:	f383 8811 	msr	BASEPRI, r3
 80076aa:	f3bf 8f6f 	isb	sy
 80076ae:	f3bf 8f4f 	dsb	sy
 80076b2:	623b      	str	r3, [r7, #32]
}
 80076b4:	bf00      	nop
 80076b6:	e7fe      	b.n	80076b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d103      	bne.n	80076c6 <xQueueReceive+0x3e>
 80076be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d101      	bne.n	80076ca <xQueueReceive+0x42>
 80076c6:	2301      	movs	r3, #1
 80076c8:	e000      	b.n	80076cc <xQueueReceive+0x44>
 80076ca:	2300      	movs	r3, #0
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d10a      	bne.n	80076e6 <xQueueReceive+0x5e>
	__asm volatile
 80076d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d4:	f383 8811 	msr	BASEPRI, r3
 80076d8:	f3bf 8f6f 	isb	sy
 80076dc:	f3bf 8f4f 	dsb	sy
 80076e0:	61fb      	str	r3, [r7, #28]
}
 80076e2:	bf00      	nop
 80076e4:	e7fe      	b.n	80076e4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80076e6:	f001 f889 	bl	80087fc <xTaskGetSchedulerState>
 80076ea:	4603      	mov	r3, r0
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d102      	bne.n	80076f6 <xQueueReceive+0x6e>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d101      	bne.n	80076fa <xQueueReceive+0x72>
 80076f6:	2301      	movs	r3, #1
 80076f8:	e000      	b.n	80076fc <xQueueReceive+0x74>
 80076fa:	2300      	movs	r3, #0
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d10a      	bne.n	8007716 <xQueueReceive+0x8e>
	__asm volatile
 8007700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007704:	f383 8811 	msr	BASEPRI, r3
 8007708:	f3bf 8f6f 	isb	sy
 800770c:	f3bf 8f4f 	dsb	sy
 8007710:	61bb      	str	r3, [r7, #24]
}
 8007712:	bf00      	nop
 8007714:	e7fe      	b.n	8007714 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007716:	f001 fe0d 	bl	8009334 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800771a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800771c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800771e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007722:	2b00      	cmp	r3, #0
 8007724:	d01f      	beq.n	8007766 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007726:	68b9      	ldr	r1, [r7, #8]
 8007728:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800772a:	f000 f8f7 	bl	800791c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800772e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007730:	1e5a      	subs	r2, r3, #1
 8007732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007734:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007738:	691b      	ldr	r3, [r3, #16]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d00f      	beq.n	800775e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800773e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007740:	3310      	adds	r3, #16
 8007742:	4618      	mov	r0, r3
 8007744:	f000 fe36 	bl	80083b4 <xTaskRemoveFromEventList>
 8007748:	4603      	mov	r3, r0
 800774a:	2b00      	cmp	r3, #0
 800774c:	d007      	beq.n	800775e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800774e:	4b3d      	ldr	r3, [pc, #244]	; (8007844 <xQueueReceive+0x1bc>)
 8007750:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007754:	601a      	str	r2, [r3, #0]
 8007756:	f3bf 8f4f 	dsb	sy
 800775a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800775e:	f001 fe19 	bl	8009394 <vPortExitCritical>
				return pdPASS;
 8007762:	2301      	movs	r3, #1
 8007764:	e069      	b.n	800783a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d103      	bne.n	8007774 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800776c:	f001 fe12 	bl	8009394 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007770:	2300      	movs	r3, #0
 8007772:	e062      	b.n	800783a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007776:	2b00      	cmp	r3, #0
 8007778:	d106      	bne.n	8007788 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800777a:	f107 0310 	add.w	r3, r7, #16
 800777e:	4618      	mov	r0, r3
 8007780:	f000 fedc 	bl	800853c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007784:	2301      	movs	r3, #1
 8007786:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007788:	f001 fe04 	bl	8009394 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800778c:	f000 fbee 	bl	8007f6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007790:	f001 fdd0 	bl	8009334 <vPortEnterCritical>
 8007794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007796:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800779a:	b25b      	sxtb	r3, r3
 800779c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077a0:	d103      	bne.n	80077aa <xQueueReceive+0x122>
 80077a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a4:	2200      	movs	r2, #0
 80077a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077b0:	b25b      	sxtb	r3, r3
 80077b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077b6:	d103      	bne.n	80077c0 <xQueueReceive+0x138>
 80077b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ba:	2200      	movs	r2, #0
 80077bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80077c0:	f001 fde8 	bl	8009394 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80077c4:	1d3a      	adds	r2, r7, #4
 80077c6:	f107 0310 	add.w	r3, r7, #16
 80077ca:	4611      	mov	r1, r2
 80077cc:	4618      	mov	r0, r3
 80077ce:	f000 fecb 	bl	8008568 <xTaskCheckForTimeOut>
 80077d2:	4603      	mov	r3, r0
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d123      	bne.n	8007820 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80077d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077da:	f000 f917 	bl	8007a0c <prvIsQueueEmpty>
 80077de:	4603      	mov	r3, r0
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d017      	beq.n	8007814 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80077e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e6:	3324      	adds	r3, #36	; 0x24
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	4611      	mov	r1, r2
 80077ec:	4618      	mov	r0, r3
 80077ee:	f000 fd91 	bl	8008314 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80077f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077f4:	f000 f8b8 	bl	8007968 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80077f8:	f000 fbc6 	bl	8007f88 <xTaskResumeAll>
 80077fc:	4603      	mov	r3, r0
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d189      	bne.n	8007716 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007802:	4b10      	ldr	r3, [pc, #64]	; (8007844 <xQueueReceive+0x1bc>)
 8007804:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007808:	601a      	str	r2, [r3, #0]
 800780a:	f3bf 8f4f 	dsb	sy
 800780e:	f3bf 8f6f 	isb	sy
 8007812:	e780      	b.n	8007716 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007814:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007816:	f000 f8a7 	bl	8007968 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800781a:	f000 fbb5 	bl	8007f88 <xTaskResumeAll>
 800781e:	e77a      	b.n	8007716 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007820:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007822:	f000 f8a1 	bl	8007968 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007826:	f000 fbaf 	bl	8007f88 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800782a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800782c:	f000 f8ee 	bl	8007a0c <prvIsQueueEmpty>
 8007830:	4603      	mov	r3, r0
 8007832:	2b00      	cmp	r3, #0
 8007834:	f43f af6f 	beq.w	8007716 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007838:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800783a:	4618      	mov	r0, r3
 800783c:	3730      	adds	r7, #48	; 0x30
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}
 8007842:	bf00      	nop
 8007844:	e000ed04 	.word	0xe000ed04

08007848 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b086      	sub	sp, #24
 800784c:	af00      	add	r7, sp, #0
 800784e:	60f8      	str	r0, [r7, #12]
 8007850:	60b9      	str	r1, [r7, #8]
 8007852:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007854:	2300      	movs	r3, #0
 8007856:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800785c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007862:	2b00      	cmp	r3, #0
 8007864:	d10d      	bne.n	8007882 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d14d      	bne.n	800790a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	4618      	mov	r0, r3
 8007874:	f000 ffe0 	bl	8008838 <xTaskPriorityDisinherit>
 8007878:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2200      	movs	r2, #0
 800787e:	605a      	str	r2, [r3, #4]
 8007880:	e043      	b.n	800790a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d119      	bne.n	80078bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	6898      	ldr	r0, [r3, #8]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007890:	461a      	mov	r2, r3
 8007892:	68b9      	ldr	r1, [r7, #8]
 8007894:	f002 f89e 	bl	80099d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	689a      	ldr	r2, [r3, #8]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a0:	441a      	add	r2, r3
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	689a      	ldr	r2, [r3, #8]
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d32b      	bcc.n	800790a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	609a      	str	r2, [r3, #8]
 80078ba:	e026      	b.n	800790a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	68d8      	ldr	r0, [r3, #12]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c4:	461a      	mov	r2, r3
 80078c6:	68b9      	ldr	r1, [r7, #8]
 80078c8:	f002 f884 	bl	80099d4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	68da      	ldr	r2, [r3, #12]
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d4:	425b      	negs	r3, r3
 80078d6:	441a      	add	r2, r3
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	68da      	ldr	r2, [r3, #12]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d207      	bcs.n	80078f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	685a      	ldr	r2, [r3, #4]
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f0:	425b      	negs	r3, r3
 80078f2:	441a      	add	r2, r3
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2b02      	cmp	r3, #2
 80078fc:	d105      	bne.n	800790a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d002      	beq.n	800790a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	3b01      	subs	r3, #1
 8007908:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	1c5a      	adds	r2, r3, #1
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007912:	697b      	ldr	r3, [r7, #20]
}
 8007914:	4618      	mov	r0, r3
 8007916:	3718      	adds	r7, #24
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b082      	sub	sp, #8
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800792a:	2b00      	cmp	r3, #0
 800792c:	d018      	beq.n	8007960 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	68da      	ldr	r2, [r3, #12]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007936:	441a      	add	r2, r3
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	68da      	ldr	r2, [r3, #12]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	429a      	cmp	r2, r3
 8007946:	d303      	bcc.n	8007950 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	68d9      	ldr	r1, [r3, #12]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007958:	461a      	mov	r2, r3
 800795a:	6838      	ldr	r0, [r7, #0]
 800795c:	f002 f83a 	bl	80099d4 <memcpy>
	}
}
 8007960:	bf00      	nop
 8007962:	3708      	adds	r7, #8
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b084      	sub	sp, #16
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007970:	f001 fce0 	bl	8009334 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800797a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800797c:	e011      	b.n	80079a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007982:	2b00      	cmp	r3, #0
 8007984:	d012      	beq.n	80079ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	3324      	adds	r3, #36	; 0x24
 800798a:	4618      	mov	r0, r3
 800798c:	f000 fd12 	bl	80083b4 <xTaskRemoveFromEventList>
 8007990:	4603      	mov	r3, r0
 8007992:	2b00      	cmp	r3, #0
 8007994:	d001      	beq.n	800799a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007996:	f000 fe49 	bl	800862c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800799a:	7bfb      	ldrb	r3, [r7, #15]
 800799c:	3b01      	subs	r3, #1
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80079a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	dce9      	bgt.n	800797e <prvUnlockQueue+0x16>
 80079aa:	e000      	b.n	80079ae <prvUnlockQueue+0x46>
					break;
 80079ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	22ff      	movs	r2, #255	; 0xff
 80079b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80079b6:	f001 fced 	bl	8009394 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80079ba:	f001 fcbb 	bl	8009334 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80079c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80079c6:	e011      	b.n	80079ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	691b      	ldr	r3, [r3, #16]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d012      	beq.n	80079f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	3310      	adds	r3, #16
 80079d4:	4618      	mov	r0, r3
 80079d6:	f000 fced 	bl	80083b4 <xTaskRemoveFromEventList>
 80079da:	4603      	mov	r3, r0
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d001      	beq.n	80079e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80079e0:	f000 fe24 	bl	800862c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80079e4:	7bbb      	ldrb	r3, [r7, #14]
 80079e6:	3b01      	subs	r3, #1
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80079ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	dce9      	bgt.n	80079c8 <prvUnlockQueue+0x60>
 80079f4:	e000      	b.n	80079f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80079f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	22ff      	movs	r2, #255	; 0xff
 80079fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007a00:	f001 fcc8 	bl	8009394 <vPortExitCritical>
}
 8007a04:	bf00      	nop
 8007a06:	3710      	adds	r7, #16
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007a14:	f001 fc8e 	bl	8009334 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d102      	bne.n	8007a26 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007a20:	2301      	movs	r3, #1
 8007a22:	60fb      	str	r3, [r7, #12]
 8007a24:	e001      	b.n	8007a2a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007a26:	2300      	movs	r3, #0
 8007a28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007a2a:	f001 fcb3 	bl	8009394 <vPortExitCritical>

	return xReturn;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3710      	adds	r7, #16
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b084      	sub	sp, #16
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007a40:	f001 fc78 	bl	8009334 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d102      	bne.n	8007a56 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007a50:	2301      	movs	r3, #1
 8007a52:	60fb      	str	r3, [r7, #12]
 8007a54:	e001      	b.n	8007a5a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007a56:	2300      	movs	r3, #0
 8007a58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007a5a:	f001 fc9b 	bl	8009394 <vPortExitCritical>

	return xReturn;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3710      	adds	r7, #16
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007a68:	b480      	push	{r7}
 8007a6a:	b085      	sub	sp, #20
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a72:	2300      	movs	r3, #0
 8007a74:	60fb      	str	r3, [r7, #12]
 8007a76:	e014      	b.n	8007aa2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007a78:	4a0f      	ldr	r2, [pc, #60]	; (8007ab8 <vQueueAddToRegistry+0x50>)
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d10b      	bne.n	8007a9c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007a84:	490c      	ldr	r1, [pc, #48]	; (8007ab8 <vQueueAddToRegistry+0x50>)
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	683a      	ldr	r2, [r7, #0]
 8007a8a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007a8e:	4a0a      	ldr	r2, [pc, #40]	; (8007ab8 <vQueueAddToRegistry+0x50>)
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	00db      	lsls	r3, r3, #3
 8007a94:	4413      	add	r3, r2
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007a9a:	e006      	b.n	8007aaa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	3301      	adds	r3, #1
 8007aa0:	60fb      	str	r3, [r7, #12]
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2b07      	cmp	r3, #7
 8007aa6:	d9e7      	bls.n	8007a78 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007aa8:	bf00      	nop
 8007aaa:	bf00      	nop
 8007aac:	3714      	adds	r7, #20
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr
 8007ab6:	bf00      	nop
 8007ab8:	20000d40 	.word	0x20000d40

08007abc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b086      	sub	sp, #24
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	60b9      	str	r1, [r7, #8]
 8007ac6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007acc:	f001 fc32 	bl	8009334 <vPortEnterCritical>
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ad6:	b25b      	sxtb	r3, r3
 8007ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007adc:	d103      	bne.n	8007ae6 <vQueueWaitForMessageRestricted+0x2a>
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007aec:	b25b      	sxtb	r3, r3
 8007aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007af2:	d103      	bne.n	8007afc <vQueueWaitForMessageRestricted+0x40>
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	2200      	movs	r2, #0
 8007af8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007afc:	f001 fc4a 	bl	8009394 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d106      	bne.n	8007b16 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	3324      	adds	r3, #36	; 0x24
 8007b0c:	687a      	ldr	r2, [r7, #4]
 8007b0e:	68b9      	ldr	r1, [r7, #8]
 8007b10:	4618      	mov	r0, r3
 8007b12:	f000 fc23 	bl	800835c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007b16:	6978      	ldr	r0, [r7, #20]
 8007b18:	f7ff ff26 	bl	8007968 <prvUnlockQueue>
	}
 8007b1c:	bf00      	nop
 8007b1e:	3718      	adds	r7, #24
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b08e      	sub	sp, #56	; 0x38
 8007b28:	af04      	add	r7, sp, #16
 8007b2a:	60f8      	str	r0, [r7, #12]
 8007b2c:	60b9      	str	r1, [r7, #8]
 8007b2e:	607a      	str	r2, [r7, #4]
 8007b30:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d10a      	bne.n	8007b4e <xTaskCreateStatic+0x2a>
	__asm volatile
 8007b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b3c:	f383 8811 	msr	BASEPRI, r3
 8007b40:	f3bf 8f6f 	isb	sy
 8007b44:	f3bf 8f4f 	dsb	sy
 8007b48:	623b      	str	r3, [r7, #32]
}
 8007b4a:	bf00      	nop
 8007b4c:	e7fe      	b.n	8007b4c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d10a      	bne.n	8007b6a <xTaskCreateStatic+0x46>
	__asm volatile
 8007b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b58:	f383 8811 	msr	BASEPRI, r3
 8007b5c:	f3bf 8f6f 	isb	sy
 8007b60:	f3bf 8f4f 	dsb	sy
 8007b64:	61fb      	str	r3, [r7, #28]
}
 8007b66:	bf00      	nop
 8007b68:	e7fe      	b.n	8007b68 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007b6a:	2358      	movs	r3, #88	; 0x58
 8007b6c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	2b58      	cmp	r3, #88	; 0x58
 8007b72:	d00a      	beq.n	8007b8a <xTaskCreateStatic+0x66>
	__asm volatile
 8007b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b78:	f383 8811 	msr	BASEPRI, r3
 8007b7c:	f3bf 8f6f 	isb	sy
 8007b80:	f3bf 8f4f 	dsb	sy
 8007b84:	61bb      	str	r3, [r7, #24]
}
 8007b86:	bf00      	nop
 8007b88:	e7fe      	b.n	8007b88 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d01e      	beq.n	8007bce <xTaskCreateStatic+0xaa>
 8007b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d01b      	beq.n	8007bce <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b98:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b9e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba2:	2202      	movs	r2, #2
 8007ba4:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007ba8:	2300      	movs	r3, #0
 8007baa:	9303      	str	r3, [sp, #12]
 8007bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bae:	9302      	str	r3, [sp, #8]
 8007bb0:	f107 0314 	add.w	r3, r7, #20
 8007bb4:	9301      	str	r3, [sp, #4]
 8007bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb8:	9300      	str	r3, [sp, #0]
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	68b9      	ldr	r1, [r7, #8]
 8007bc0:	68f8      	ldr	r0, [r7, #12]
 8007bc2:	f000 f850 	bl	8007c66 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007bc6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007bc8:	f000 f8cc 	bl	8007d64 <prvAddNewTaskToReadyList>
 8007bcc:	e001      	b.n	8007bd2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007bd2:	697b      	ldr	r3, [r7, #20]
	}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3728      	adds	r7, #40	; 0x28
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b08c      	sub	sp, #48	; 0x30
 8007be0:	af04      	add	r7, sp, #16
 8007be2:	60f8      	str	r0, [r7, #12]
 8007be4:	60b9      	str	r1, [r7, #8]
 8007be6:	603b      	str	r3, [r7, #0]
 8007be8:	4613      	mov	r3, r2
 8007bea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bec:	88fb      	ldrh	r3, [r7, #6]
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f001 fcc1 	bl	8009578 <pvPortMalloc>
 8007bf6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d00e      	beq.n	8007c1c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007bfe:	2058      	movs	r0, #88	; 0x58
 8007c00:	f001 fcba 	bl	8009578 <pvPortMalloc>
 8007c04:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007c06:	69fb      	ldr	r3, [r7, #28]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d003      	beq.n	8007c14 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007c0c:	69fb      	ldr	r3, [r7, #28]
 8007c0e:	697a      	ldr	r2, [r7, #20]
 8007c10:	631a      	str	r2, [r3, #48]	; 0x30
 8007c12:	e005      	b.n	8007c20 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007c14:	6978      	ldr	r0, [r7, #20]
 8007c16:	f001 fd73 	bl	8009700 <vPortFree>
 8007c1a:	e001      	b.n	8007c20 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007c20:	69fb      	ldr	r3, [r7, #28]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d017      	beq.n	8007c56 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007c26:	69fb      	ldr	r3, [r7, #28]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007c2e:	88fa      	ldrh	r2, [r7, #6]
 8007c30:	2300      	movs	r3, #0
 8007c32:	9303      	str	r3, [sp, #12]
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	9302      	str	r3, [sp, #8]
 8007c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c3a:	9301      	str	r3, [sp, #4]
 8007c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c3e:	9300      	str	r3, [sp, #0]
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	68b9      	ldr	r1, [r7, #8]
 8007c44:	68f8      	ldr	r0, [r7, #12]
 8007c46:	f000 f80e 	bl	8007c66 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c4a:	69f8      	ldr	r0, [r7, #28]
 8007c4c:	f000 f88a 	bl	8007d64 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007c50:	2301      	movs	r3, #1
 8007c52:	61bb      	str	r3, [r7, #24]
 8007c54:	e002      	b.n	8007c5c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007c56:	f04f 33ff 	mov.w	r3, #4294967295
 8007c5a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007c5c:	69bb      	ldr	r3, [r7, #24]
	}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3720      	adds	r7, #32
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}

08007c66 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007c66:	b580      	push	{r7, lr}
 8007c68:	b088      	sub	sp, #32
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	60f8      	str	r0, [r7, #12]
 8007c6e:	60b9      	str	r1, [r7, #8]
 8007c70:	607a      	str	r2, [r7, #4]
 8007c72:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007c7e:	3b01      	subs	r3, #1
 8007c80:	009b      	lsls	r3, r3, #2
 8007c82:	4413      	add	r3, r2
 8007c84:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007c86:	69bb      	ldr	r3, [r7, #24]
 8007c88:	f023 0307 	bic.w	r3, r3, #7
 8007c8c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007c8e:	69bb      	ldr	r3, [r7, #24]
 8007c90:	f003 0307 	and.w	r3, r3, #7
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d00a      	beq.n	8007cae <prvInitialiseNewTask+0x48>
	__asm volatile
 8007c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c9c:	f383 8811 	msr	BASEPRI, r3
 8007ca0:	f3bf 8f6f 	isb	sy
 8007ca4:	f3bf 8f4f 	dsb	sy
 8007ca8:	617b      	str	r3, [r7, #20]
}
 8007caa:	bf00      	nop
 8007cac:	e7fe      	b.n	8007cac <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007cae:	2300      	movs	r3, #0
 8007cb0:	61fb      	str	r3, [r7, #28]
 8007cb2:	e012      	b.n	8007cda <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007cb4:	68ba      	ldr	r2, [r7, #8]
 8007cb6:	69fb      	ldr	r3, [r7, #28]
 8007cb8:	4413      	add	r3, r2
 8007cba:	7819      	ldrb	r1, [r3, #0]
 8007cbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cbe:	69fb      	ldr	r3, [r7, #28]
 8007cc0:	4413      	add	r3, r2
 8007cc2:	3334      	adds	r3, #52	; 0x34
 8007cc4:	460a      	mov	r2, r1
 8007cc6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007cc8:	68ba      	ldr	r2, [r7, #8]
 8007cca:	69fb      	ldr	r3, [r7, #28]
 8007ccc:	4413      	add	r3, r2
 8007cce:	781b      	ldrb	r3, [r3, #0]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d006      	beq.n	8007ce2 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007cd4:	69fb      	ldr	r3, [r7, #28]
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	61fb      	str	r3, [r7, #28]
 8007cda:	69fb      	ldr	r3, [r7, #28]
 8007cdc:	2b11      	cmp	r3, #17
 8007cde:	d9e9      	bls.n	8007cb4 <prvInitialiseNewTask+0x4e>
 8007ce0:	e000      	b.n	8007ce4 <prvInitialiseNewTask+0x7e>
		{
			break;
 8007ce2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cee:	2b06      	cmp	r3, #6
 8007cf0:	d901      	bls.n	8007cf6 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007cf2:	2306      	movs	r3, #6
 8007cf4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cfa:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d00:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8007d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d04:	2200      	movs	r2, #0
 8007d06:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d0a:	3304      	adds	r3, #4
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f7ff f992 	bl	8007036 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d14:	3318      	adds	r3, #24
 8007d16:	4618      	mov	r0, r3
 8007d18:	f7ff f98d 	bl	8007036 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d20:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d24:	f1c3 0207 	rsb	r2, r3, #7
 8007d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d2a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d30:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d34:	2200      	movs	r2, #0
 8007d36:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007d40:	683a      	ldr	r2, [r7, #0]
 8007d42:	68f9      	ldr	r1, [r7, #12]
 8007d44:	69b8      	ldr	r0, [r7, #24]
 8007d46:	f001 f9c9 	bl	80090dc <pxPortInitialiseStack>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d002      	beq.n	8007d5c <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d5a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d5c:	bf00      	nop
 8007d5e:	3720      	adds	r7, #32
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b082      	sub	sp, #8
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007d6c:	f001 fae2 	bl	8009334 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007d70:	4b2a      	ldr	r3, [pc, #168]	; (8007e1c <prvAddNewTaskToReadyList+0xb8>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	3301      	adds	r3, #1
 8007d76:	4a29      	ldr	r2, [pc, #164]	; (8007e1c <prvAddNewTaskToReadyList+0xb8>)
 8007d78:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007d7a:	4b29      	ldr	r3, [pc, #164]	; (8007e20 <prvAddNewTaskToReadyList+0xbc>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d109      	bne.n	8007d96 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007d82:	4a27      	ldr	r2, [pc, #156]	; (8007e20 <prvAddNewTaskToReadyList+0xbc>)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007d88:	4b24      	ldr	r3, [pc, #144]	; (8007e1c <prvAddNewTaskToReadyList+0xb8>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d110      	bne.n	8007db2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007d90:	f000 fc70 	bl	8008674 <prvInitialiseTaskLists>
 8007d94:	e00d      	b.n	8007db2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007d96:	4b23      	ldr	r3, [pc, #140]	; (8007e24 <prvAddNewTaskToReadyList+0xc0>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d109      	bne.n	8007db2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007d9e:	4b20      	ldr	r3, [pc, #128]	; (8007e20 <prvAddNewTaskToReadyList+0xbc>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da8:	429a      	cmp	r2, r3
 8007daa:	d802      	bhi.n	8007db2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007dac:	4a1c      	ldr	r2, [pc, #112]	; (8007e20 <prvAddNewTaskToReadyList+0xbc>)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007db2:	4b1d      	ldr	r3, [pc, #116]	; (8007e28 <prvAddNewTaskToReadyList+0xc4>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	3301      	adds	r3, #1
 8007db8:	4a1b      	ldr	r2, [pc, #108]	; (8007e28 <prvAddNewTaskToReadyList+0xc4>)
 8007dba:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	409a      	lsls	r2, r3
 8007dc4:	4b19      	ldr	r3, [pc, #100]	; (8007e2c <prvAddNewTaskToReadyList+0xc8>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	4a18      	ldr	r2, [pc, #96]	; (8007e2c <prvAddNewTaskToReadyList+0xc8>)
 8007dcc:	6013      	str	r3, [r2, #0]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dd2:	4613      	mov	r3, r2
 8007dd4:	009b      	lsls	r3, r3, #2
 8007dd6:	4413      	add	r3, r2
 8007dd8:	009b      	lsls	r3, r3, #2
 8007dda:	4a15      	ldr	r2, [pc, #84]	; (8007e30 <prvAddNewTaskToReadyList+0xcc>)
 8007ddc:	441a      	add	r2, r3
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	3304      	adds	r3, #4
 8007de2:	4619      	mov	r1, r3
 8007de4:	4610      	mov	r0, r2
 8007de6:	f7ff f933 	bl	8007050 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007dea:	f001 fad3 	bl	8009394 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007dee:	4b0d      	ldr	r3, [pc, #52]	; (8007e24 <prvAddNewTaskToReadyList+0xc0>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d00e      	beq.n	8007e14 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007df6:	4b0a      	ldr	r3, [pc, #40]	; (8007e20 <prvAddNewTaskToReadyList+0xbc>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d207      	bcs.n	8007e14 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007e04:	4b0b      	ldr	r3, [pc, #44]	; (8007e34 <prvAddNewTaskToReadyList+0xd0>)
 8007e06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e0a:	601a      	str	r2, [r3, #0]
 8007e0c:	f3bf 8f4f 	dsb	sy
 8007e10:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e14:	bf00      	nop
 8007e16:	3708      	adds	r7, #8
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}
 8007e1c:	20000e80 	.word	0x20000e80
 8007e20:	20000d80 	.word	0x20000d80
 8007e24:	20000e8c 	.word	0x20000e8c
 8007e28:	20000e9c 	.word	0x20000e9c
 8007e2c:	20000e88 	.word	0x20000e88
 8007e30:	20000d84 	.word	0x20000d84
 8007e34:	e000ed04 	.word	0xe000ed04

08007e38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b084      	sub	sp, #16
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007e40:	2300      	movs	r3, #0
 8007e42:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d017      	beq.n	8007e7a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007e4a:	4b13      	ldr	r3, [pc, #76]	; (8007e98 <vTaskDelay+0x60>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d00a      	beq.n	8007e68 <vTaskDelay+0x30>
	__asm volatile
 8007e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e56:	f383 8811 	msr	BASEPRI, r3
 8007e5a:	f3bf 8f6f 	isb	sy
 8007e5e:	f3bf 8f4f 	dsb	sy
 8007e62:	60bb      	str	r3, [r7, #8]
}
 8007e64:	bf00      	nop
 8007e66:	e7fe      	b.n	8007e66 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007e68:	f000 f880 	bl	8007f6c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007e6c:	2100      	movs	r1, #0
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 fd68 	bl	8008944 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007e74:	f000 f888 	bl	8007f88 <xTaskResumeAll>
 8007e78:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d107      	bne.n	8007e90 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007e80:	4b06      	ldr	r3, [pc, #24]	; (8007e9c <vTaskDelay+0x64>)
 8007e82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e86:	601a      	str	r2, [r3, #0]
 8007e88:	f3bf 8f4f 	dsb	sy
 8007e8c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007e90:	bf00      	nop
 8007e92:	3710      	adds	r7, #16
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}
 8007e98:	20000ea8 	.word	0x20000ea8
 8007e9c:	e000ed04 	.word	0xe000ed04

08007ea0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b08a      	sub	sp, #40	; 0x28
 8007ea4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007eae:	463a      	mov	r2, r7
 8007eb0:	1d39      	adds	r1, r7, #4
 8007eb2:	f107 0308 	add.w	r3, r7, #8
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f7f8 fa92 	bl	80003e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007ebc:	6839      	ldr	r1, [r7, #0]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	68ba      	ldr	r2, [r7, #8]
 8007ec2:	9202      	str	r2, [sp, #8]
 8007ec4:	9301      	str	r3, [sp, #4]
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	9300      	str	r3, [sp, #0]
 8007eca:	2300      	movs	r3, #0
 8007ecc:	460a      	mov	r2, r1
 8007ece:	4921      	ldr	r1, [pc, #132]	; (8007f54 <vTaskStartScheduler+0xb4>)
 8007ed0:	4821      	ldr	r0, [pc, #132]	; (8007f58 <vTaskStartScheduler+0xb8>)
 8007ed2:	f7ff fe27 	bl	8007b24 <xTaskCreateStatic>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	4a20      	ldr	r2, [pc, #128]	; (8007f5c <vTaskStartScheduler+0xbc>)
 8007eda:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007edc:	4b1f      	ldr	r3, [pc, #124]	; (8007f5c <vTaskStartScheduler+0xbc>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d002      	beq.n	8007eea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	617b      	str	r3, [r7, #20]
 8007ee8:	e001      	b.n	8007eee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007eea:	2300      	movs	r3, #0
 8007eec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	d102      	bne.n	8007efa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007ef4:	f000 fd8c 	bl	8008a10 <xTimerCreateTimerTask>
 8007ef8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d116      	bne.n	8007f2e <vTaskStartScheduler+0x8e>
	__asm volatile
 8007f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f04:	f383 8811 	msr	BASEPRI, r3
 8007f08:	f3bf 8f6f 	isb	sy
 8007f0c:	f3bf 8f4f 	dsb	sy
 8007f10:	613b      	str	r3, [r7, #16]
}
 8007f12:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007f14:	4b12      	ldr	r3, [pc, #72]	; (8007f60 <vTaskStartScheduler+0xc0>)
 8007f16:	f04f 32ff 	mov.w	r2, #4294967295
 8007f1a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007f1c:	4b11      	ldr	r3, [pc, #68]	; (8007f64 <vTaskStartScheduler+0xc4>)
 8007f1e:	2201      	movs	r2, #1
 8007f20:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007f22:	4b11      	ldr	r3, [pc, #68]	; (8007f68 <vTaskStartScheduler+0xc8>)
 8007f24:	2200      	movs	r2, #0
 8007f26:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007f28:	f001 f962 	bl	80091f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007f2c:	e00e      	b.n	8007f4c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f34:	d10a      	bne.n	8007f4c <vTaskStartScheduler+0xac>
	__asm volatile
 8007f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f3a:	f383 8811 	msr	BASEPRI, r3
 8007f3e:	f3bf 8f6f 	isb	sy
 8007f42:	f3bf 8f4f 	dsb	sy
 8007f46:	60fb      	str	r3, [r7, #12]
}
 8007f48:	bf00      	nop
 8007f4a:	e7fe      	b.n	8007f4a <vTaskStartScheduler+0xaa>
}
 8007f4c:	bf00      	nop
 8007f4e:	3718      	adds	r7, #24
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}
 8007f54:	0800a5c8 	.word	0x0800a5c8
 8007f58:	08008645 	.word	0x08008645
 8007f5c:	20000ea4 	.word	0x20000ea4
 8007f60:	20000ea0 	.word	0x20000ea0
 8007f64:	20000e8c 	.word	0x20000e8c
 8007f68:	20000e84 	.word	0x20000e84

08007f6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007f70:	4b04      	ldr	r3, [pc, #16]	; (8007f84 <vTaskSuspendAll+0x18>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	3301      	adds	r3, #1
 8007f76:	4a03      	ldr	r2, [pc, #12]	; (8007f84 <vTaskSuspendAll+0x18>)
 8007f78:	6013      	str	r3, [r2, #0]
}
 8007f7a:	bf00      	nop
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr
 8007f84:	20000ea8 	.word	0x20000ea8

08007f88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007f92:	2300      	movs	r3, #0
 8007f94:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007f96:	4b41      	ldr	r3, [pc, #260]	; (800809c <xTaskResumeAll+0x114>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d10a      	bne.n	8007fb4 <xTaskResumeAll+0x2c>
	__asm volatile
 8007f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa2:	f383 8811 	msr	BASEPRI, r3
 8007fa6:	f3bf 8f6f 	isb	sy
 8007faa:	f3bf 8f4f 	dsb	sy
 8007fae:	603b      	str	r3, [r7, #0]
}
 8007fb0:	bf00      	nop
 8007fb2:	e7fe      	b.n	8007fb2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007fb4:	f001 f9be 	bl	8009334 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007fb8:	4b38      	ldr	r3, [pc, #224]	; (800809c <xTaskResumeAll+0x114>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	3b01      	subs	r3, #1
 8007fbe:	4a37      	ldr	r2, [pc, #220]	; (800809c <xTaskResumeAll+0x114>)
 8007fc0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fc2:	4b36      	ldr	r3, [pc, #216]	; (800809c <xTaskResumeAll+0x114>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d161      	bne.n	800808e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007fca:	4b35      	ldr	r3, [pc, #212]	; (80080a0 <xTaskResumeAll+0x118>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d05d      	beq.n	800808e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007fd2:	e02e      	b.n	8008032 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007fd4:	4b33      	ldr	r3, [pc, #204]	; (80080a4 <xTaskResumeAll+0x11c>)
 8007fd6:	68db      	ldr	r3, [r3, #12]
 8007fd8:	68db      	ldr	r3, [r3, #12]
 8007fda:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	3318      	adds	r3, #24
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f7ff f892 	bl	800710a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	3304      	adds	r3, #4
 8007fea:	4618      	mov	r0, r3
 8007fec:	f7ff f88d 	bl	800710a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	409a      	lsls	r2, r3
 8007ff8:	4b2b      	ldr	r3, [pc, #172]	; (80080a8 <xTaskResumeAll+0x120>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	4a2a      	ldr	r2, [pc, #168]	; (80080a8 <xTaskResumeAll+0x120>)
 8008000:	6013      	str	r3, [r2, #0]
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008006:	4613      	mov	r3, r2
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	4413      	add	r3, r2
 800800c:	009b      	lsls	r3, r3, #2
 800800e:	4a27      	ldr	r2, [pc, #156]	; (80080ac <xTaskResumeAll+0x124>)
 8008010:	441a      	add	r2, r3
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	3304      	adds	r3, #4
 8008016:	4619      	mov	r1, r3
 8008018:	4610      	mov	r0, r2
 800801a:	f7ff f819 	bl	8007050 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008022:	4b23      	ldr	r3, [pc, #140]	; (80080b0 <xTaskResumeAll+0x128>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008028:	429a      	cmp	r2, r3
 800802a:	d302      	bcc.n	8008032 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800802c:	4b21      	ldr	r3, [pc, #132]	; (80080b4 <xTaskResumeAll+0x12c>)
 800802e:	2201      	movs	r2, #1
 8008030:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008032:	4b1c      	ldr	r3, [pc, #112]	; (80080a4 <xTaskResumeAll+0x11c>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d1cc      	bne.n	8007fd4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d001      	beq.n	8008044 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008040:	f000 fbb6 	bl	80087b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008044:	4b1c      	ldr	r3, [pc, #112]	; (80080b8 <xTaskResumeAll+0x130>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d010      	beq.n	8008072 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008050:	f000 f846 	bl	80080e0 <xTaskIncrementTick>
 8008054:	4603      	mov	r3, r0
 8008056:	2b00      	cmp	r3, #0
 8008058:	d002      	beq.n	8008060 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800805a:	4b16      	ldr	r3, [pc, #88]	; (80080b4 <xTaskResumeAll+0x12c>)
 800805c:	2201      	movs	r2, #1
 800805e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	3b01      	subs	r3, #1
 8008064:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d1f1      	bne.n	8008050 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800806c:	4b12      	ldr	r3, [pc, #72]	; (80080b8 <xTaskResumeAll+0x130>)
 800806e:	2200      	movs	r2, #0
 8008070:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008072:	4b10      	ldr	r3, [pc, #64]	; (80080b4 <xTaskResumeAll+0x12c>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d009      	beq.n	800808e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800807a:	2301      	movs	r3, #1
 800807c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800807e:	4b0f      	ldr	r3, [pc, #60]	; (80080bc <xTaskResumeAll+0x134>)
 8008080:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008084:	601a      	str	r2, [r3, #0]
 8008086:	f3bf 8f4f 	dsb	sy
 800808a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800808e:	f001 f981 	bl	8009394 <vPortExitCritical>

	return xAlreadyYielded;
 8008092:	68bb      	ldr	r3, [r7, #8]
}
 8008094:	4618      	mov	r0, r3
 8008096:	3710      	adds	r7, #16
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}
 800809c:	20000ea8 	.word	0x20000ea8
 80080a0:	20000e80 	.word	0x20000e80
 80080a4:	20000e40 	.word	0x20000e40
 80080a8:	20000e88 	.word	0x20000e88
 80080ac:	20000d84 	.word	0x20000d84
 80080b0:	20000d80 	.word	0x20000d80
 80080b4:	20000e94 	.word	0x20000e94
 80080b8:	20000e90 	.word	0x20000e90
 80080bc:	e000ed04 	.word	0xe000ed04

080080c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80080c6:	4b05      	ldr	r3, [pc, #20]	; (80080dc <xTaskGetTickCount+0x1c>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80080cc:	687b      	ldr	r3, [r7, #4]
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	370c      	adds	r7, #12
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr
 80080da:	bf00      	nop
 80080dc:	20000e84 	.word	0x20000e84

080080e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b086      	sub	sp, #24
 80080e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80080e6:	2300      	movs	r3, #0
 80080e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080ea:	4b51      	ldr	r3, [pc, #324]	; (8008230 <xTaskIncrementTick+0x150>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	f040 808d 	bne.w	800820e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80080f4:	4b4f      	ldr	r3, [pc, #316]	; (8008234 <xTaskIncrementTick+0x154>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	3301      	adds	r3, #1
 80080fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80080fc:	4a4d      	ldr	r2, [pc, #308]	; (8008234 <xTaskIncrementTick+0x154>)
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d120      	bne.n	800814a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008108:	4b4b      	ldr	r3, [pc, #300]	; (8008238 <xTaskIncrementTick+0x158>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d00a      	beq.n	8008128 <xTaskIncrementTick+0x48>
	__asm volatile
 8008112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008116:	f383 8811 	msr	BASEPRI, r3
 800811a:	f3bf 8f6f 	isb	sy
 800811e:	f3bf 8f4f 	dsb	sy
 8008122:	603b      	str	r3, [r7, #0]
}
 8008124:	bf00      	nop
 8008126:	e7fe      	b.n	8008126 <xTaskIncrementTick+0x46>
 8008128:	4b43      	ldr	r3, [pc, #268]	; (8008238 <xTaskIncrementTick+0x158>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	60fb      	str	r3, [r7, #12]
 800812e:	4b43      	ldr	r3, [pc, #268]	; (800823c <xTaskIncrementTick+0x15c>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a41      	ldr	r2, [pc, #260]	; (8008238 <xTaskIncrementTick+0x158>)
 8008134:	6013      	str	r3, [r2, #0]
 8008136:	4a41      	ldr	r2, [pc, #260]	; (800823c <xTaskIncrementTick+0x15c>)
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6013      	str	r3, [r2, #0]
 800813c:	4b40      	ldr	r3, [pc, #256]	; (8008240 <xTaskIncrementTick+0x160>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	3301      	adds	r3, #1
 8008142:	4a3f      	ldr	r2, [pc, #252]	; (8008240 <xTaskIncrementTick+0x160>)
 8008144:	6013      	str	r3, [r2, #0]
 8008146:	f000 fb33 	bl	80087b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800814a:	4b3e      	ldr	r3, [pc, #248]	; (8008244 <xTaskIncrementTick+0x164>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	693a      	ldr	r2, [r7, #16]
 8008150:	429a      	cmp	r2, r3
 8008152:	d34d      	bcc.n	80081f0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008154:	4b38      	ldr	r3, [pc, #224]	; (8008238 <xTaskIncrementTick+0x158>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d101      	bne.n	8008162 <xTaskIncrementTick+0x82>
 800815e:	2301      	movs	r3, #1
 8008160:	e000      	b.n	8008164 <xTaskIncrementTick+0x84>
 8008162:	2300      	movs	r3, #0
 8008164:	2b00      	cmp	r3, #0
 8008166:	d004      	beq.n	8008172 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008168:	4b36      	ldr	r3, [pc, #216]	; (8008244 <xTaskIncrementTick+0x164>)
 800816a:	f04f 32ff 	mov.w	r2, #4294967295
 800816e:	601a      	str	r2, [r3, #0]
					break;
 8008170:	e03e      	b.n	80081f0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008172:	4b31      	ldr	r3, [pc, #196]	; (8008238 <xTaskIncrementTick+0x158>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	68db      	ldr	r3, [r3, #12]
 8008178:	68db      	ldr	r3, [r3, #12]
 800817a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008182:	693a      	ldr	r2, [r7, #16]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	429a      	cmp	r2, r3
 8008188:	d203      	bcs.n	8008192 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800818a:	4a2e      	ldr	r2, [pc, #184]	; (8008244 <xTaskIncrementTick+0x164>)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6013      	str	r3, [r2, #0]
						break;
 8008190:	e02e      	b.n	80081f0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	3304      	adds	r3, #4
 8008196:	4618      	mov	r0, r3
 8008198:	f7fe ffb7 	bl	800710a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d004      	beq.n	80081ae <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	3318      	adds	r3, #24
 80081a8:	4618      	mov	r0, r3
 80081aa:	f7fe ffae 	bl	800710a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b2:	2201      	movs	r2, #1
 80081b4:	409a      	lsls	r2, r3
 80081b6:	4b24      	ldr	r3, [pc, #144]	; (8008248 <xTaskIncrementTick+0x168>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4313      	orrs	r3, r2
 80081bc:	4a22      	ldr	r2, [pc, #136]	; (8008248 <xTaskIncrementTick+0x168>)
 80081be:	6013      	str	r3, [r2, #0]
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081c4:	4613      	mov	r3, r2
 80081c6:	009b      	lsls	r3, r3, #2
 80081c8:	4413      	add	r3, r2
 80081ca:	009b      	lsls	r3, r3, #2
 80081cc:	4a1f      	ldr	r2, [pc, #124]	; (800824c <xTaskIncrementTick+0x16c>)
 80081ce:	441a      	add	r2, r3
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	3304      	adds	r3, #4
 80081d4:	4619      	mov	r1, r3
 80081d6:	4610      	mov	r0, r2
 80081d8:	f7fe ff3a 	bl	8007050 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081e0:	4b1b      	ldr	r3, [pc, #108]	; (8008250 <xTaskIncrementTick+0x170>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d3b4      	bcc.n	8008154 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80081ea:	2301      	movs	r3, #1
 80081ec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80081ee:	e7b1      	b.n	8008154 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80081f0:	4b17      	ldr	r3, [pc, #92]	; (8008250 <xTaskIncrementTick+0x170>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081f6:	4915      	ldr	r1, [pc, #84]	; (800824c <xTaskIncrementTick+0x16c>)
 80081f8:	4613      	mov	r3, r2
 80081fa:	009b      	lsls	r3, r3, #2
 80081fc:	4413      	add	r3, r2
 80081fe:	009b      	lsls	r3, r3, #2
 8008200:	440b      	add	r3, r1
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	2b01      	cmp	r3, #1
 8008206:	d907      	bls.n	8008218 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8008208:	2301      	movs	r3, #1
 800820a:	617b      	str	r3, [r7, #20]
 800820c:	e004      	b.n	8008218 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800820e:	4b11      	ldr	r3, [pc, #68]	; (8008254 <xTaskIncrementTick+0x174>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	3301      	adds	r3, #1
 8008214:	4a0f      	ldr	r2, [pc, #60]	; (8008254 <xTaskIncrementTick+0x174>)
 8008216:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008218:	4b0f      	ldr	r3, [pc, #60]	; (8008258 <xTaskIncrementTick+0x178>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d001      	beq.n	8008224 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8008220:	2301      	movs	r3, #1
 8008222:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008224:	697b      	ldr	r3, [r7, #20]
}
 8008226:	4618      	mov	r0, r3
 8008228:	3718      	adds	r7, #24
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
 800822e:	bf00      	nop
 8008230:	20000ea8 	.word	0x20000ea8
 8008234:	20000e84 	.word	0x20000e84
 8008238:	20000e38 	.word	0x20000e38
 800823c:	20000e3c 	.word	0x20000e3c
 8008240:	20000e98 	.word	0x20000e98
 8008244:	20000ea0 	.word	0x20000ea0
 8008248:	20000e88 	.word	0x20000e88
 800824c:	20000d84 	.word	0x20000d84
 8008250:	20000d80 	.word	0x20000d80
 8008254:	20000e90 	.word	0x20000e90
 8008258:	20000e94 	.word	0x20000e94

0800825c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800825c:	b480      	push	{r7}
 800825e:	b087      	sub	sp, #28
 8008260:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008262:	4b27      	ldr	r3, [pc, #156]	; (8008300 <vTaskSwitchContext+0xa4>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d003      	beq.n	8008272 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800826a:	4b26      	ldr	r3, [pc, #152]	; (8008304 <vTaskSwitchContext+0xa8>)
 800826c:	2201      	movs	r2, #1
 800826e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008270:	e03f      	b.n	80082f2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8008272:	4b24      	ldr	r3, [pc, #144]	; (8008304 <vTaskSwitchContext+0xa8>)
 8008274:	2200      	movs	r2, #0
 8008276:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008278:	4b23      	ldr	r3, [pc, #140]	; (8008308 <vTaskSwitchContext+0xac>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	fab3 f383 	clz	r3, r3
 8008284:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008286:	7afb      	ldrb	r3, [r7, #11]
 8008288:	f1c3 031f 	rsb	r3, r3, #31
 800828c:	617b      	str	r3, [r7, #20]
 800828e:	491f      	ldr	r1, [pc, #124]	; (800830c <vTaskSwitchContext+0xb0>)
 8008290:	697a      	ldr	r2, [r7, #20]
 8008292:	4613      	mov	r3, r2
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	4413      	add	r3, r2
 8008298:	009b      	lsls	r3, r3, #2
 800829a:	440b      	add	r3, r1
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d10a      	bne.n	80082b8 <vTaskSwitchContext+0x5c>
	__asm volatile
 80082a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a6:	f383 8811 	msr	BASEPRI, r3
 80082aa:	f3bf 8f6f 	isb	sy
 80082ae:	f3bf 8f4f 	dsb	sy
 80082b2:	607b      	str	r3, [r7, #4]
}
 80082b4:	bf00      	nop
 80082b6:	e7fe      	b.n	80082b6 <vTaskSwitchContext+0x5a>
 80082b8:	697a      	ldr	r2, [r7, #20]
 80082ba:	4613      	mov	r3, r2
 80082bc:	009b      	lsls	r3, r3, #2
 80082be:	4413      	add	r3, r2
 80082c0:	009b      	lsls	r3, r3, #2
 80082c2:	4a12      	ldr	r2, [pc, #72]	; (800830c <vTaskSwitchContext+0xb0>)
 80082c4:	4413      	add	r3, r2
 80082c6:	613b      	str	r3, [r7, #16]
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	685a      	ldr	r2, [r3, #4]
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	605a      	str	r2, [r3, #4]
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	685a      	ldr	r2, [r3, #4]
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	3308      	adds	r3, #8
 80082da:	429a      	cmp	r2, r3
 80082dc:	d104      	bne.n	80082e8 <vTaskSwitchContext+0x8c>
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	685a      	ldr	r2, [r3, #4]
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	605a      	str	r2, [r3, #4]
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	68db      	ldr	r3, [r3, #12]
 80082ee:	4a08      	ldr	r2, [pc, #32]	; (8008310 <vTaskSwitchContext+0xb4>)
 80082f0:	6013      	str	r3, [r2, #0]
}
 80082f2:	bf00      	nop
 80082f4:	371c      	adds	r7, #28
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr
 80082fe:	bf00      	nop
 8008300:	20000ea8 	.word	0x20000ea8
 8008304:	20000e94 	.word	0x20000e94
 8008308:	20000e88 	.word	0x20000e88
 800830c:	20000d84 	.word	0x20000d84
 8008310:	20000d80 	.word	0x20000d80

08008314 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b084      	sub	sp, #16
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d10a      	bne.n	800833a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008328:	f383 8811 	msr	BASEPRI, r3
 800832c:	f3bf 8f6f 	isb	sy
 8008330:	f3bf 8f4f 	dsb	sy
 8008334:	60fb      	str	r3, [r7, #12]
}
 8008336:	bf00      	nop
 8008338:	e7fe      	b.n	8008338 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800833a:	4b07      	ldr	r3, [pc, #28]	; (8008358 <vTaskPlaceOnEventList+0x44>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	3318      	adds	r3, #24
 8008340:	4619      	mov	r1, r3
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f7fe fea8 	bl	8007098 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008348:	2101      	movs	r1, #1
 800834a:	6838      	ldr	r0, [r7, #0]
 800834c:	f000 fafa 	bl	8008944 <prvAddCurrentTaskToDelayedList>
}
 8008350:	bf00      	nop
 8008352:	3710      	adds	r7, #16
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}
 8008358:	20000d80 	.word	0x20000d80

0800835c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800835c:	b580      	push	{r7, lr}
 800835e:	b086      	sub	sp, #24
 8008360:	af00      	add	r7, sp, #0
 8008362:	60f8      	str	r0, [r7, #12]
 8008364:	60b9      	str	r1, [r7, #8]
 8008366:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d10a      	bne.n	8008384 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800836e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008372:	f383 8811 	msr	BASEPRI, r3
 8008376:	f3bf 8f6f 	isb	sy
 800837a:	f3bf 8f4f 	dsb	sy
 800837e:	617b      	str	r3, [r7, #20]
}
 8008380:	bf00      	nop
 8008382:	e7fe      	b.n	8008382 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008384:	4b0a      	ldr	r3, [pc, #40]	; (80083b0 <vTaskPlaceOnEventListRestricted+0x54>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	3318      	adds	r3, #24
 800838a:	4619      	mov	r1, r3
 800838c:	68f8      	ldr	r0, [r7, #12]
 800838e:	f7fe fe5f 	bl	8007050 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d002      	beq.n	800839e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008398:	f04f 33ff 	mov.w	r3, #4294967295
 800839c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800839e:	6879      	ldr	r1, [r7, #4]
 80083a0:	68b8      	ldr	r0, [r7, #8]
 80083a2:	f000 facf 	bl	8008944 <prvAddCurrentTaskToDelayedList>
	}
 80083a6:	bf00      	nop
 80083a8:	3718      	adds	r7, #24
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
 80083ae:	bf00      	nop
 80083b0:	20000d80 	.word	0x20000d80

080083b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b086      	sub	sp, #24
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	68db      	ldr	r3, [r3, #12]
 80083c0:	68db      	ldr	r3, [r3, #12]
 80083c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d10a      	bne.n	80083e0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80083ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ce:	f383 8811 	msr	BASEPRI, r3
 80083d2:	f3bf 8f6f 	isb	sy
 80083d6:	f3bf 8f4f 	dsb	sy
 80083da:	60fb      	str	r3, [r7, #12]
}
 80083dc:	bf00      	nop
 80083de:	e7fe      	b.n	80083de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	3318      	adds	r3, #24
 80083e4:	4618      	mov	r0, r3
 80083e6:	f7fe fe90 	bl	800710a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083ea:	4b1d      	ldr	r3, [pc, #116]	; (8008460 <xTaskRemoveFromEventList+0xac>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d11c      	bne.n	800842c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	3304      	adds	r3, #4
 80083f6:	4618      	mov	r0, r3
 80083f8:	f7fe fe87 	bl	800710a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008400:	2201      	movs	r2, #1
 8008402:	409a      	lsls	r2, r3
 8008404:	4b17      	ldr	r3, [pc, #92]	; (8008464 <xTaskRemoveFromEventList+0xb0>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4313      	orrs	r3, r2
 800840a:	4a16      	ldr	r2, [pc, #88]	; (8008464 <xTaskRemoveFromEventList+0xb0>)
 800840c:	6013      	str	r3, [r2, #0]
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008412:	4613      	mov	r3, r2
 8008414:	009b      	lsls	r3, r3, #2
 8008416:	4413      	add	r3, r2
 8008418:	009b      	lsls	r3, r3, #2
 800841a:	4a13      	ldr	r2, [pc, #76]	; (8008468 <xTaskRemoveFromEventList+0xb4>)
 800841c:	441a      	add	r2, r3
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	3304      	adds	r3, #4
 8008422:	4619      	mov	r1, r3
 8008424:	4610      	mov	r0, r2
 8008426:	f7fe fe13 	bl	8007050 <vListInsertEnd>
 800842a:	e005      	b.n	8008438 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	3318      	adds	r3, #24
 8008430:	4619      	mov	r1, r3
 8008432:	480e      	ldr	r0, [pc, #56]	; (800846c <xTaskRemoveFromEventList+0xb8>)
 8008434:	f7fe fe0c 	bl	8007050 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800843c:	4b0c      	ldr	r3, [pc, #48]	; (8008470 <xTaskRemoveFromEventList+0xbc>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008442:	429a      	cmp	r2, r3
 8008444:	d905      	bls.n	8008452 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008446:	2301      	movs	r3, #1
 8008448:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800844a:	4b0a      	ldr	r3, [pc, #40]	; (8008474 <xTaskRemoveFromEventList+0xc0>)
 800844c:	2201      	movs	r2, #1
 800844e:	601a      	str	r2, [r3, #0]
 8008450:	e001      	b.n	8008456 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8008452:	2300      	movs	r3, #0
 8008454:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8008456:	697b      	ldr	r3, [r7, #20]
}
 8008458:	4618      	mov	r0, r3
 800845a:	3718      	adds	r7, #24
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}
 8008460:	20000ea8 	.word	0x20000ea8
 8008464:	20000e88 	.word	0x20000e88
 8008468:	20000d84 	.word	0x20000d84
 800846c:	20000e40 	.word	0x20000e40
 8008470:	20000d80 	.word	0x20000d80
 8008474:	20000e94 	.word	0x20000e94

08008478 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b086      	sub	sp, #24
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8008482:	4b29      	ldr	r3, [pc, #164]	; (8008528 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d10a      	bne.n	80084a0 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800848a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800848e:	f383 8811 	msr	BASEPRI, r3
 8008492:	f3bf 8f6f 	isb	sy
 8008496:	f3bf 8f4f 	dsb	sy
 800849a:	613b      	str	r3, [r7, #16]
}
 800849c:	bf00      	nop
 800849e:	e7fe      	b.n	800849e <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	68db      	ldr	r3, [r3, #12]
 80084ae:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d10a      	bne.n	80084cc <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 80084b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ba:	f383 8811 	msr	BASEPRI, r3
 80084be:	f3bf 8f6f 	isb	sy
 80084c2:	f3bf 8f4f 	dsb	sy
 80084c6:	60fb      	str	r3, [r7, #12]
}
 80084c8:	bf00      	nop
 80084ca:	e7fe      	b.n	80084ca <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f7fe fe1c 	bl	800710a <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	3304      	adds	r3, #4
 80084d6:	4618      	mov	r0, r3
 80084d8:	f7fe fe17 	bl	800710a <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084e0:	2201      	movs	r2, #1
 80084e2:	409a      	lsls	r2, r3
 80084e4:	4b11      	ldr	r3, [pc, #68]	; (800852c <vTaskRemoveFromUnorderedEventList+0xb4>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4313      	orrs	r3, r2
 80084ea:	4a10      	ldr	r2, [pc, #64]	; (800852c <vTaskRemoveFromUnorderedEventList+0xb4>)
 80084ec:	6013      	str	r3, [r2, #0]
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084f2:	4613      	mov	r3, r2
 80084f4:	009b      	lsls	r3, r3, #2
 80084f6:	4413      	add	r3, r2
 80084f8:	009b      	lsls	r3, r3, #2
 80084fa:	4a0d      	ldr	r2, [pc, #52]	; (8008530 <vTaskRemoveFromUnorderedEventList+0xb8>)
 80084fc:	441a      	add	r2, r3
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	3304      	adds	r3, #4
 8008502:	4619      	mov	r1, r3
 8008504:	4610      	mov	r0, r2
 8008506:	f7fe fda3 	bl	8007050 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800850e:	4b09      	ldr	r3, [pc, #36]	; (8008534 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008514:	429a      	cmp	r2, r3
 8008516:	d902      	bls.n	800851e <vTaskRemoveFromUnorderedEventList+0xa6>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8008518:	4b07      	ldr	r3, [pc, #28]	; (8008538 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800851a:	2201      	movs	r2, #1
 800851c:	601a      	str	r2, [r3, #0]
	}
}
 800851e:	bf00      	nop
 8008520:	3718      	adds	r7, #24
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}
 8008526:	bf00      	nop
 8008528:	20000ea8 	.word	0x20000ea8
 800852c:	20000e88 	.word	0x20000e88
 8008530:	20000d84 	.word	0x20000d84
 8008534:	20000d80 	.word	0x20000d80
 8008538:	20000e94 	.word	0x20000e94

0800853c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800853c:	b480      	push	{r7}
 800853e:	b083      	sub	sp, #12
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008544:	4b06      	ldr	r3, [pc, #24]	; (8008560 <vTaskInternalSetTimeOutState+0x24>)
 8008546:	681a      	ldr	r2, [r3, #0]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800854c:	4b05      	ldr	r3, [pc, #20]	; (8008564 <vTaskInternalSetTimeOutState+0x28>)
 800854e:	681a      	ldr	r2, [r3, #0]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	605a      	str	r2, [r3, #4]
}
 8008554:	bf00      	nop
 8008556:	370c      	adds	r7, #12
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr
 8008560:	20000e98 	.word	0x20000e98
 8008564:	20000e84 	.word	0x20000e84

08008568 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b088      	sub	sp, #32
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d10a      	bne.n	800858e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800857c:	f383 8811 	msr	BASEPRI, r3
 8008580:	f3bf 8f6f 	isb	sy
 8008584:	f3bf 8f4f 	dsb	sy
 8008588:	613b      	str	r3, [r7, #16]
}
 800858a:	bf00      	nop
 800858c:	e7fe      	b.n	800858c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d10a      	bne.n	80085aa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008598:	f383 8811 	msr	BASEPRI, r3
 800859c:	f3bf 8f6f 	isb	sy
 80085a0:	f3bf 8f4f 	dsb	sy
 80085a4:	60fb      	str	r3, [r7, #12]
}
 80085a6:	bf00      	nop
 80085a8:	e7fe      	b.n	80085a8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80085aa:	f000 fec3 	bl	8009334 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80085ae:	4b1d      	ldr	r3, [pc, #116]	; (8008624 <xTaskCheckForTimeOut+0xbc>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	69ba      	ldr	r2, [r7, #24]
 80085ba:	1ad3      	subs	r3, r2, r3
 80085bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085c6:	d102      	bne.n	80085ce <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80085c8:	2300      	movs	r3, #0
 80085ca:	61fb      	str	r3, [r7, #28]
 80085cc:	e023      	b.n	8008616 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681a      	ldr	r2, [r3, #0]
 80085d2:	4b15      	ldr	r3, [pc, #84]	; (8008628 <xTaskCheckForTimeOut+0xc0>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d007      	beq.n	80085ea <xTaskCheckForTimeOut+0x82>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	69ba      	ldr	r2, [r7, #24]
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d302      	bcc.n	80085ea <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80085e4:	2301      	movs	r3, #1
 80085e6:	61fb      	str	r3, [r7, #28]
 80085e8:	e015      	b.n	8008616 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	697a      	ldr	r2, [r7, #20]
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d20b      	bcs.n	800860c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	681a      	ldr	r2, [r3, #0]
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	1ad2      	subs	r2, r2, r3
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f7ff ff9b 	bl	800853c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008606:	2300      	movs	r3, #0
 8008608:	61fb      	str	r3, [r7, #28]
 800860a:	e004      	b.n	8008616 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	2200      	movs	r2, #0
 8008610:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008612:	2301      	movs	r3, #1
 8008614:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008616:	f000 febd 	bl	8009394 <vPortExitCritical>

	return xReturn;
 800861a:	69fb      	ldr	r3, [r7, #28]
}
 800861c:	4618      	mov	r0, r3
 800861e:	3720      	adds	r7, #32
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}
 8008624:	20000e84 	.word	0x20000e84
 8008628:	20000e98 	.word	0x20000e98

0800862c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800862c:	b480      	push	{r7}
 800862e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008630:	4b03      	ldr	r3, [pc, #12]	; (8008640 <vTaskMissedYield+0x14>)
 8008632:	2201      	movs	r2, #1
 8008634:	601a      	str	r2, [r3, #0]
}
 8008636:	bf00      	nop
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr
 8008640:	20000e94 	.word	0x20000e94

08008644 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b082      	sub	sp, #8
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800864c:	f000 f852 	bl	80086f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008650:	4b06      	ldr	r3, [pc, #24]	; (800866c <prvIdleTask+0x28>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	2b01      	cmp	r3, #1
 8008656:	d9f9      	bls.n	800864c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008658:	4b05      	ldr	r3, [pc, #20]	; (8008670 <prvIdleTask+0x2c>)
 800865a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800865e:	601a      	str	r2, [r3, #0]
 8008660:	f3bf 8f4f 	dsb	sy
 8008664:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008668:	e7f0      	b.n	800864c <prvIdleTask+0x8>
 800866a:	bf00      	nop
 800866c:	20000d84 	.word	0x20000d84
 8008670:	e000ed04 	.word	0xe000ed04

08008674 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b082      	sub	sp, #8
 8008678:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800867a:	2300      	movs	r3, #0
 800867c:	607b      	str	r3, [r7, #4]
 800867e:	e00c      	b.n	800869a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008680:	687a      	ldr	r2, [r7, #4]
 8008682:	4613      	mov	r3, r2
 8008684:	009b      	lsls	r3, r3, #2
 8008686:	4413      	add	r3, r2
 8008688:	009b      	lsls	r3, r3, #2
 800868a:	4a12      	ldr	r2, [pc, #72]	; (80086d4 <prvInitialiseTaskLists+0x60>)
 800868c:	4413      	add	r3, r2
 800868e:	4618      	mov	r0, r3
 8008690:	f7fe fcb1 	bl	8006ff6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	3301      	adds	r3, #1
 8008698:	607b      	str	r3, [r7, #4]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2b06      	cmp	r3, #6
 800869e:	d9ef      	bls.n	8008680 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80086a0:	480d      	ldr	r0, [pc, #52]	; (80086d8 <prvInitialiseTaskLists+0x64>)
 80086a2:	f7fe fca8 	bl	8006ff6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80086a6:	480d      	ldr	r0, [pc, #52]	; (80086dc <prvInitialiseTaskLists+0x68>)
 80086a8:	f7fe fca5 	bl	8006ff6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80086ac:	480c      	ldr	r0, [pc, #48]	; (80086e0 <prvInitialiseTaskLists+0x6c>)
 80086ae:	f7fe fca2 	bl	8006ff6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80086b2:	480c      	ldr	r0, [pc, #48]	; (80086e4 <prvInitialiseTaskLists+0x70>)
 80086b4:	f7fe fc9f 	bl	8006ff6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80086b8:	480b      	ldr	r0, [pc, #44]	; (80086e8 <prvInitialiseTaskLists+0x74>)
 80086ba:	f7fe fc9c 	bl	8006ff6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80086be:	4b0b      	ldr	r3, [pc, #44]	; (80086ec <prvInitialiseTaskLists+0x78>)
 80086c0:	4a05      	ldr	r2, [pc, #20]	; (80086d8 <prvInitialiseTaskLists+0x64>)
 80086c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80086c4:	4b0a      	ldr	r3, [pc, #40]	; (80086f0 <prvInitialiseTaskLists+0x7c>)
 80086c6:	4a05      	ldr	r2, [pc, #20]	; (80086dc <prvInitialiseTaskLists+0x68>)
 80086c8:	601a      	str	r2, [r3, #0]
}
 80086ca:	bf00      	nop
 80086cc:	3708      	adds	r7, #8
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	20000d84 	.word	0x20000d84
 80086d8:	20000e10 	.word	0x20000e10
 80086dc:	20000e24 	.word	0x20000e24
 80086e0:	20000e40 	.word	0x20000e40
 80086e4:	20000e54 	.word	0x20000e54
 80086e8:	20000e6c 	.word	0x20000e6c
 80086ec:	20000e38 	.word	0x20000e38
 80086f0:	20000e3c 	.word	0x20000e3c

080086f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b082      	sub	sp, #8
 80086f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80086fa:	e019      	b.n	8008730 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80086fc:	f000 fe1a 	bl	8009334 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008700:	4b10      	ldr	r3, [pc, #64]	; (8008744 <prvCheckTasksWaitingTermination+0x50>)
 8008702:	68db      	ldr	r3, [r3, #12]
 8008704:	68db      	ldr	r3, [r3, #12]
 8008706:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	3304      	adds	r3, #4
 800870c:	4618      	mov	r0, r3
 800870e:	f7fe fcfc 	bl	800710a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008712:	4b0d      	ldr	r3, [pc, #52]	; (8008748 <prvCheckTasksWaitingTermination+0x54>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	3b01      	subs	r3, #1
 8008718:	4a0b      	ldr	r2, [pc, #44]	; (8008748 <prvCheckTasksWaitingTermination+0x54>)
 800871a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800871c:	4b0b      	ldr	r3, [pc, #44]	; (800874c <prvCheckTasksWaitingTermination+0x58>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	3b01      	subs	r3, #1
 8008722:	4a0a      	ldr	r2, [pc, #40]	; (800874c <prvCheckTasksWaitingTermination+0x58>)
 8008724:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008726:	f000 fe35 	bl	8009394 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 f810 	bl	8008750 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008730:	4b06      	ldr	r3, [pc, #24]	; (800874c <prvCheckTasksWaitingTermination+0x58>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d1e1      	bne.n	80086fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008738:	bf00      	nop
 800873a:	bf00      	nop
 800873c:	3708      	adds	r7, #8
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}
 8008742:	bf00      	nop
 8008744:	20000e54 	.word	0x20000e54
 8008748:	20000e80 	.word	0x20000e80
 800874c:	20000e68 	.word	0x20000e68

08008750 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008750:	b580      	push	{r7, lr}
 8008752:	b084      	sub	sp, #16
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800875e:	2b00      	cmp	r3, #0
 8008760:	d108      	bne.n	8008774 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008766:	4618      	mov	r0, r3
 8008768:	f000 ffca 	bl	8009700 <vPortFree>
				vPortFree( pxTCB );
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f000 ffc7 	bl	8009700 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008772:	e018      	b.n	80087a6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800877a:	2b01      	cmp	r3, #1
 800877c:	d103      	bne.n	8008786 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f000 ffbe 	bl	8009700 <vPortFree>
	}
 8008784:	e00f      	b.n	80087a6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800878c:	2b02      	cmp	r3, #2
 800878e:	d00a      	beq.n	80087a6 <prvDeleteTCB+0x56>
	__asm volatile
 8008790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008794:	f383 8811 	msr	BASEPRI, r3
 8008798:	f3bf 8f6f 	isb	sy
 800879c:	f3bf 8f4f 	dsb	sy
 80087a0:	60fb      	str	r3, [r7, #12]
}
 80087a2:	bf00      	nop
 80087a4:	e7fe      	b.n	80087a4 <prvDeleteTCB+0x54>
	}
 80087a6:	bf00      	nop
 80087a8:	3710      	adds	r7, #16
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
	...

080087b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80087b0:	b480      	push	{r7}
 80087b2:	b083      	sub	sp, #12
 80087b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80087b6:	4b0f      	ldr	r3, [pc, #60]	; (80087f4 <prvResetNextTaskUnblockTime+0x44>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d101      	bne.n	80087c4 <prvResetNextTaskUnblockTime+0x14>
 80087c0:	2301      	movs	r3, #1
 80087c2:	e000      	b.n	80087c6 <prvResetNextTaskUnblockTime+0x16>
 80087c4:	2300      	movs	r3, #0
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d004      	beq.n	80087d4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80087ca:	4b0b      	ldr	r3, [pc, #44]	; (80087f8 <prvResetNextTaskUnblockTime+0x48>)
 80087cc:	f04f 32ff 	mov.w	r2, #4294967295
 80087d0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80087d2:	e008      	b.n	80087e6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80087d4:	4b07      	ldr	r3, [pc, #28]	; (80087f4 <prvResetNextTaskUnblockTime+0x44>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	68db      	ldr	r3, [r3, #12]
 80087da:	68db      	ldr	r3, [r3, #12]
 80087dc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	4a05      	ldr	r2, [pc, #20]	; (80087f8 <prvResetNextTaskUnblockTime+0x48>)
 80087e4:	6013      	str	r3, [r2, #0]
}
 80087e6:	bf00      	nop
 80087e8:	370c      	adds	r7, #12
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr
 80087f2:	bf00      	nop
 80087f4:	20000e38 	.word	0x20000e38
 80087f8:	20000ea0 	.word	0x20000ea0

080087fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80087fc:	b480      	push	{r7}
 80087fe:	b083      	sub	sp, #12
 8008800:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008802:	4b0b      	ldr	r3, [pc, #44]	; (8008830 <xTaskGetSchedulerState+0x34>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d102      	bne.n	8008810 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800880a:	2301      	movs	r3, #1
 800880c:	607b      	str	r3, [r7, #4]
 800880e:	e008      	b.n	8008822 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008810:	4b08      	ldr	r3, [pc, #32]	; (8008834 <xTaskGetSchedulerState+0x38>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d102      	bne.n	800881e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008818:	2302      	movs	r3, #2
 800881a:	607b      	str	r3, [r7, #4]
 800881c:	e001      	b.n	8008822 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800881e:	2300      	movs	r3, #0
 8008820:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008822:	687b      	ldr	r3, [r7, #4]
	}
 8008824:	4618      	mov	r0, r3
 8008826:	370c      	adds	r7, #12
 8008828:	46bd      	mov	sp, r7
 800882a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882e:	4770      	bx	lr
 8008830:	20000e8c 	.word	0x20000e8c
 8008834:	20000ea8 	.word	0x20000ea8

08008838 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008838:	b580      	push	{r7, lr}
 800883a:	b086      	sub	sp, #24
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008844:	2300      	movs	r3, #0
 8008846:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d06e      	beq.n	800892c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800884e:	4b3a      	ldr	r3, [pc, #232]	; (8008938 <xTaskPriorityDisinherit+0x100>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	693a      	ldr	r2, [r7, #16]
 8008854:	429a      	cmp	r2, r3
 8008856:	d00a      	beq.n	800886e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800885c:	f383 8811 	msr	BASEPRI, r3
 8008860:	f3bf 8f6f 	isb	sy
 8008864:	f3bf 8f4f 	dsb	sy
 8008868:	60fb      	str	r3, [r7, #12]
}
 800886a:	bf00      	nop
 800886c:	e7fe      	b.n	800886c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008872:	2b00      	cmp	r3, #0
 8008874:	d10a      	bne.n	800888c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800887a:	f383 8811 	msr	BASEPRI, r3
 800887e:	f3bf 8f6f 	isb	sy
 8008882:	f3bf 8f4f 	dsb	sy
 8008886:	60bb      	str	r3, [r7, #8]
}
 8008888:	bf00      	nop
 800888a:	e7fe      	b.n	800888a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008890:	1e5a      	subs	r2, r3, #1
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800889e:	429a      	cmp	r2, r3
 80088a0:	d044      	beq.n	800892c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d140      	bne.n	800892c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	3304      	adds	r3, #4
 80088ae:	4618      	mov	r0, r3
 80088b0:	f7fe fc2b 	bl	800710a <uxListRemove>
 80088b4:	4603      	mov	r3, r0
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d115      	bne.n	80088e6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088be:	491f      	ldr	r1, [pc, #124]	; (800893c <xTaskPriorityDisinherit+0x104>)
 80088c0:	4613      	mov	r3, r2
 80088c2:	009b      	lsls	r3, r3, #2
 80088c4:	4413      	add	r3, r2
 80088c6:	009b      	lsls	r3, r3, #2
 80088c8:	440b      	add	r3, r1
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d10a      	bne.n	80088e6 <xTaskPriorityDisinherit+0xae>
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088d4:	2201      	movs	r2, #1
 80088d6:	fa02 f303 	lsl.w	r3, r2, r3
 80088da:	43da      	mvns	r2, r3
 80088dc:	4b18      	ldr	r3, [pc, #96]	; (8008940 <xTaskPriorityDisinherit+0x108>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4013      	ands	r3, r2
 80088e2:	4a17      	ldr	r2, [pc, #92]	; (8008940 <xTaskPriorityDisinherit+0x108>)
 80088e4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f2:	f1c3 0207 	rsb	r2, r3, #7
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088fe:	2201      	movs	r2, #1
 8008900:	409a      	lsls	r2, r3
 8008902:	4b0f      	ldr	r3, [pc, #60]	; (8008940 <xTaskPriorityDisinherit+0x108>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4313      	orrs	r3, r2
 8008908:	4a0d      	ldr	r2, [pc, #52]	; (8008940 <xTaskPriorityDisinherit+0x108>)
 800890a:	6013      	str	r3, [r2, #0]
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008910:	4613      	mov	r3, r2
 8008912:	009b      	lsls	r3, r3, #2
 8008914:	4413      	add	r3, r2
 8008916:	009b      	lsls	r3, r3, #2
 8008918:	4a08      	ldr	r2, [pc, #32]	; (800893c <xTaskPriorityDisinherit+0x104>)
 800891a:	441a      	add	r2, r3
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	3304      	adds	r3, #4
 8008920:	4619      	mov	r1, r3
 8008922:	4610      	mov	r0, r2
 8008924:	f7fe fb94 	bl	8007050 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008928:	2301      	movs	r3, #1
 800892a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800892c:	697b      	ldr	r3, [r7, #20]
	}
 800892e:	4618      	mov	r0, r3
 8008930:	3718      	adds	r7, #24
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}
 8008936:	bf00      	nop
 8008938:	20000d80 	.word	0x20000d80
 800893c:	20000d84 	.word	0x20000d84
 8008940:	20000e88 	.word	0x20000e88

08008944 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b084      	sub	sp, #16
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800894e:	4b29      	ldr	r3, [pc, #164]	; (80089f4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008954:	4b28      	ldr	r3, [pc, #160]	; (80089f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	3304      	adds	r3, #4
 800895a:	4618      	mov	r0, r3
 800895c:	f7fe fbd5 	bl	800710a <uxListRemove>
 8008960:	4603      	mov	r3, r0
 8008962:	2b00      	cmp	r3, #0
 8008964:	d10b      	bne.n	800897e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8008966:	4b24      	ldr	r3, [pc, #144]	; (80089f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800896c:	2201      	movs	r2, #1
 800896e:	fa02 f303 	lsl.w	r3, r2, r3
 8008972:	43da      	mvns	r2, r3
 8008974:	4b21      	ldr	r3, [pc, #132]	; (80089fc <prvAddCurrentTaskToDelayedList+0xb8>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4013      	ands	r3, r2
 800897a:	4a20      	ldr	r2, [pc, #128]	; (80089fc <prvAddCurrentTaskToDelayedList+0xb8>)
 800897c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008984:	d10a      	bne.n	800899c <prvAddCurrentTaskToDelayedList+0x58>
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d007      	beq.n	800899c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800898c:	4b1a      	ldr	r3, [pc, #104]	; (80089f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	3304      	adds	r3, #4
 8008992:	4619      	mov	r1, r3
 8008994:	481a      	ldr	r0, [pc, #104]	; (8008a00 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008996:	f7fe fb5b 	bl	8007050 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800899a:	e026      	b.n	80089ea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800899c:	68fa      	ldr	r2, [r7, #12]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	4413      	add	r3, r2
 80089a2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80089a4:	4b14      	ldr	r3, [pc, #80]	; (80089f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	68ba      	ldr	r2, [r7, #8]
 80089aa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80089ac:	68ba      	ldr	r2, [r7, #8]
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d209      	bcs.n	80089c8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80089b4:	4b13      	ldr	r3, [pc, #76]	; (8008a04 <prvAddCurrentTaskToDelayedList+0xc0>)
 80089b6:	681a      	ldr	r2, [r3, #0]
 80089b8:	4b0f      	ldr	r3, [pc, #60]	; (80089f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	3304      	adds	r3, #4
 80089be:	4619      	mov	r1, r3
 80089c0:	4610      	mov	r0, r2
 80089c2:	f7fe fb69 	bl	8007098 <vListInsert>
}
 80089c6:	e010      	b.n	80089ea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80089c8:	4b0f      	ldr	r3, [pc, #60]	; (8008a08 <prvAddCurrentTaskToDelayedList+0xc4>)
 80089ca:	681a      	ldr	r2, [r3, #0]
 80089cc:	4b0a      	ldr	r3, [pc, #40]	; (80089f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	3304      	adds	r3, #4
 80089d2:	4619      	mov	r1, r3
 80089d4:	4610      	mov	r0, r2
 80089d6:	f7fe fb5f 	bl	8007098 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80089da:	4b0c      	ldr	r3, [pc, #48]	; (8008a0c <prvAddCurrentTaskToDelayedList+0xc8>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	68ba      	ldr	r2, [r7, #8]
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d202      	bcs.n	80089ea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80089e4:	4a09      	ldr	r2, [pc, #36]	; (8008a0c <prvAddCurrentTaskToDelayedList+0xc8>)
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	6013      	str	r3, [r2, #0]
}
 80089ea:	bf00      	nop
 80089ec:	3710      	adds	r7, #16
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}
 80089f2:	bf00      	nop
 80089f4:	20000e84 	.word	0x20000e84
 80089f8:	20000d80 	.word	0x20000d80
 80089fc:	20000e88 	.word	0x20000e88
 8008a00:	20000e6c 	.word	0x20000e6c
 8008a04:	20000e3c 	.word	0x20000e3c
 8008a08:	20000e38 	.word	0x20000e38
 8008a0c:	20000ea0 	.word	0x20000ea0

08008a10 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b08a      	sub	sp, #40	; 0x28
 8008a14:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008a16:	2300      	movs	r3, #0
 8008a18:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008a1a:	f000 fb1f 	bl	800905c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008a1e:	4b1c      	ldr	r3, [pc, #112]	; (8008a90 <xTimerCreateTimerTask+0x80>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d021      	beq.n	8008a6a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008a26:	2300      	movs	r3, #0
 8008a28:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008a2e:	1d3a      	adds	r2, r7, #4
 8008a30:	f107 0108 	add.w	r1, r7, #8
 8008a34:	f107 030c 	add.w	r3, r7, #12
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f7f7 fceb 	bl	8000414 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008a3e:	6879      	ldr	r1, [r7, #4]
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	68fa      	ldr	r2, [r7, #12]
 8008a44:	9202      	str	r2, [sp, #8]
 8008a46:	9301      	str	r3, [sp, #4]
 8008a48:	2302      	movs	r3, #2
 8008a4a:	9300      	str	r3, [sp, #0]
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	460a      	mov	r2, r1
 8008a50:	4910      	ldr	r1, [pc, #64]	; (8008a94 <xTimerCreateTimerTask+0x84>)
 8008a52:	4811      	ldr	r0, [pc, #68]	; (8008a98 <xTimerCreateTimerTask+0x88>)
 8008a54:	f7ff f866 	bl	8007b24 <xTaskCreateStatic>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	4a10      	ldr	r2, [pc, #64]	; (8008a9c <xTimerCreateTimerTask+0x8c>)
 8008a5c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008a5e:	4b0f      	ldr	r3, [pc, #60]	; (8008a9c <xTimerCreateTimerTask+0x8c>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d001      	beq.n	8008a6a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008a66:	2301      	movs	r3, #1
 8008a68:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d10a      	bne.n	8008a86 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a74:	f383 8811 	msr	BASEPRI, r3
 8008a78:	f3bf 8f6f 	isb	sy
 8008a7c:	f3bf 8f4f 	dsb	sy
 8008a80:	613b      	str	r3, [r7, #16]
}
 8008a82:	bf00      	nop
 8008a84:	e7fe      	b.n	8008a84 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008a86:	697b      	ldr	r3, [r7, #20]
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3718      	adds	r7, #24
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}
 8008a90:	20000edc 	.word	0x20000edc
 8008a94:	0800a5d0 	.word	0x0800a5d0
 8008a98:	08008c65 	.word	0x08008c65
 8008a9c:	20000ee0 	.word	0x20000ee0

08008aa0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b088      	sub	sp, #32
 8008aa4:	af02      	add	r7, sp, #8
 8008aa6:	60f8      	str	r0, [r7, #12]
 8008aa8:	60b9      	str	r1, [r7, #8]
 8008aaa:	607a      	str	r2, [r7, #4]
 8008aac:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8008aae:	202c      	movs	r0, #44	; 0x2c
 8008ab0:	f000 fd62 	bl	8009578 <pvPortMalloc>
 8008ab4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d00d      	beq.n	8008ad8 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	9301      	str	r3, [sp, #4]
 8008ac0:	6a3b      	ldr	r3, [r7, #32]
 8008ac2:	9300      	str	r3, [sp, #0]
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	687a      	ldr	r2, [r7, #4]
 8008ac8:	68b9      	ldr	r1, [r7, #8]
 8008aca:	68f8      	ldr	r0, [r7, #12]
 8008acc:	f000 f809 	bl	8008ae2 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8008ad8:	697b      	ldr	r3, [r7, #20]
	}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3718      	adds	r7, #24
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}

08008ae2 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8008ae2:	b580      	push	{r7, lr}
 8008ae4:	b086      	sub	sp, #24
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	60f8      	str	r0, [r7, #12]
 8008aea:	60b9      	str	r1, [r7, #8]
 8008aec:	607a      	str	r2, [r7, #4]
 8008aee:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d10a      	bne.n	8008b0c <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8008af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008afa:	f383 8811 	msr	BASEPRI, r3
 8008afe:	f3bf 8f6f 	isb	sy
 8008b02:	f3bf 8f4f 	dsb	sy
 8008b06:	617b      	str	r3, [r7, #20]
}
 8008b08:	bf00      	nop
 8008b0a:	e7fe      	b.n	8008b0a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8008b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d015      	beq.n	8008b3e <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8008b12:	f000 faa3 	bl	800905c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8008b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b18:	68fa      	ldr	r2, [r7, #12]
 8008b1a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8008b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1e:	68ba      	ldr	r2, [r7, #8]
 8008b20:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8008b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8008b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2a:	683a      	ldr	r2, [r7, #0]
 8008b2c:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8008b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b30:	6a3a      	ldr	r2, [r7, #32]
 8008b32:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8008b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b36:	3304      	adds	r3, #4
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f7fe fa7c 	bl	8007036 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8008b3e:	bf00      	nop
 8008b40:	3718      	adds	r7, #24
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
	...

08008b48 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b08a      	sub	sp, #40	; 0x28
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	60f8      	str	r0, [r7, #12]
 8008b50:	60b9      	str	r1, [r7, #8]
 8008b52:	607a      	str	r2, [r7, #4]
 8008b54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008b56:	2300      	movs	r3, #0
 8008b58:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d10a      	bne.n	8008b76 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b64:	f383 8811 	msr	BASEPRI, r3
 8008b68:	f3bf 8f6f 	isb	sy
 8008b6c:	f3bf 8f4f 	dsb	sy
 8008b70:	623b      	str	r3, [r7, #32]
}
 8008b72:	bf00      	nop
 8008b74:	e7fe      	b.n	8008b74 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008b76:	4b1a      	ldr	r3, [pc, #104]	; (8008be0 <xTimerGenericCommand+0x98>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d02a      	beq.n	8008bd4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	2b05      	cmp	r3, #5
 8008b8e:	dc18      	bgt.n	8008bc2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008b90:	f7ff fe34 	bl	80087fc <xTaskGetSchedulerState>
 8008b94:	4603      	mov	r3, r0
 8008b96:	2b02      	cmp	r3, #2
 8008b98:	d109      	bne.n	8008bae <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008b9a:	4b11      	ldr	r3, [pc, #68]	; (8008be0 <xTimerGenericCommand+0x98>)
 8008b9c:	6818      	ldr	r0, [r3, #0]
 8008b9e:	f107 0110 	add.w	r1, r7, #16
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ba6:	f7fe fbd9 	bl	800735c <xQueueGenericSend>
 8008baa:	6278      	str	r0, [r7, #36]	; 0x24
 8008bac:	e012      	b.n	8008bd4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008bae:	4b0c      	ldr	r3, [pc, #48]	; (8008be0 <xTimerGenericCommand+0x98>)
 8008bb0:	6818      	ldr	r0, [r3, #0]
 8008bb2:	f107 0110 	add.w	r1, r7, #16
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	2200      	movs	r2, #0
 8008bba:	f7fe fbcf 	bl	800735c <xQueueGenericSend>
 8008bbe:	6278      	str	r0, [r7, #36]	; 0x24
 8008bc0:	e008      	b.n	8008bd4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008bc2:	4b07      	ldr	r3, [pc, #28]	; (8008be0 <xTimerGenericCommand+0x98>)
 8008bc4:	6818      	ldr	r0, [r3, #0]
 8008bc6:	f107 0110 	add.w	r1, r7, #16
 8008bca:	2300      	movs	r3, #0
 8008bcc:	683a      	ldr	r2, [r7, #0]
 8008bce:	f7fe fcc3 	bl	8007558 <xQueueGenericSendFromISR>
 8008bd2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3728      	adds	r7, #40	; 0x28
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}
 8008bde:	bf00      	nop
 8008be0:	20000edc 	.word	0x20000edc

08008be4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b088      	sub	sp, #32
 8008be8:	af02      	add	r7, sp, #8
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008bee:	4b1c      	ldr	r3, [pc, #112]	; (8008c60 <prvProcessExpiredTimer+0x7c>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	68db      	ldr	r3, [r3, #12]
 8008bf4:	68db      	ldr	r3, [r3, #12]
 8008bf6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	3304      	adds	r3, #4
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f7fe fa84 	bl	800710a <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	69db      	ldr	r3, [r3, #28]
 8008c06:	2b01      	cmp	r3, #1
 8008c08:	d122      	bne.n	8008c50 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	699a      	ldr	r2, [r3, #24]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	18d1      	adds	r1, r2, r3
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	683a      	ldr	r2, [r7, #0]
 8008c16:	6978      	ldr	r0, [r7, #20]
 8008c18:	f000 f8c8 	bl	8008dac <prvInsertTimerInActiveList>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d016      	beq.n	8008c50 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008c22:	2300      	movs	r3, #0
 8008c24:	9300      	str	r3, [sp, #0]
 8008c26:	2300      	movs	r3, #0
 8008c28:	687a      	ldr	r2, [r7, #4]
 8008c2a:	2100      	movs	r1, #0
 8008c2c:	6978      	ldr	r0, [r7, #20]
 8008c2e:	f7ff ff8b 	bl	8008b48 <xTimerGenericCommand>
 8008c32:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d10a      	bne.n	8008c50 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8008c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c3e:	f383 8811 	msr	BASEPRI, r3
 8008c42:	f3bf 8f6f 	isb	sy
 8008c46:	f3bf 8f4f 	dsb	sy
 8008c4a:	60fb      	str	r3, [r7, #12]
}
 8008c4c:	bf00      	nop
 8008c4e:	e7fe      	b.n	8008c4e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c54:	6978      	ldr	r0, [r7, #20]
 8008c56:	4798      	blx	r3
}
 8008c58:	bf00      	nop
 8008c5a:	3718      	adds	r7, #24
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}
 8008c60:	20000ed4 	.word	0x20000ed4

08008c64 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b084      	sub	sp, #16
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008c6c:	f107 0308 	add.w	r3, r7, #8
 8008c70:	4618      	mov	r0, r3
 8008c72:	f000 f857 	bl	8008d24 <prvGetNextExpireTime>
 8008c76:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	4619      	mov	r1, r3
 8008c7c:	68f8      	ldr	r0, [r7, #12]
 8008c7e:	f000 f803 	bl	8008c88 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008c82:	f000 f8d5 	bl	8008e30 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008c86:	e7f1      	b.n	8008c6c <prvTimerTask+0x8>

08008c88 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b084      	sub	sp, #16
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008c92:	f7ff f96b 	bl	8007f6c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008c96:	f107 0308 	add.w	r3, r7, #8
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f000 f866 	bl	8008d6c <prvSampleTimeNow>
 8008ca0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d130      	bne.n	8008d0a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d10a      	bne.n	8008cc4 <prvProcessTimerOrBlockTask+0x3c>
 8008cae:	687a      	ldr	r2, [r7, #4]
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d806      	bhi.n	8008cc4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008cb6:	f7ff f967 	bl	8007f88 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008cba:	68f9      	ldr	r1, [r7, #12]
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f7ff ff91 	bl	8008be4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008cc2:	e024      	b.n	8008d0e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d008      	beq.n	8008cdc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008cca:	4b13      	ldr	r3, [pc, #76]	; (8008d18 <prvProcessTimerOrBlockTask+0x90>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	bf0c      	ite	eq
 8008cd4:	2301      	moveq	r3, #1
 8008cd6:	2300      	movne	r3, #0
 8008cd8:	b2db      	uxtb	r3, r3
 8008cda:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008cdc:	4b0f      	ldr	r3, [pc, #60]	; (8008d1c <prvProcessTimerOrBlockTask+0x94>)
 8008cde:	6818      	ldr	r0, [r3, #0]
 8008ce0:	687a      	ldr	r2, [r7, #4]
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	1ad3      	subs	r3, r2, r3
 8008ce6:	683a      	ldr	r2, [r7, #0]
 8008ce8:	4619      	mov	r1, r3
 8008cea:	f7fe fee7 	bl	8007abc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008cee:	f7ff f94b 	bl	8007f88 <xTaskResumeAll>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d10a      	bne.n	8008d0e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008cf8:	4b09      	ldr	r3, [pc, #36]	; (8008d20 <prvProcessTimerOrBlockTask+0x98>)
 8008cfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cfe:	601a      	str	r2, [r3, #0]
 8008d00:	f3bf 8f4f 	dsb	sy
 8008d04:	f3bf 8f6f 	isb	sy
}
 8008d08:	e001      	b.n	8008d0e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008d0a:	f7ff f93d 	bl	8007f88 <xTaskResumeAll>
}
 8008d0e:	bf00      	nop
 8008d10:	3710      	adds	r7, #16
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}
 8008d16:	bf00      	nop
 8008d18:	20000ed8 	.word	0x20000ed8
 8008d1c:	20000edc 	.word	0x20000edc
 8008d20:	e000ed04 	.word	0xe000ed04

08008d24 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008d24:	b480      	push	{r7}
 8008d26:	b085      	sub	sp, #20
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008d2c:	4b0e      	ldr	r3, [pc, #56]	; (8008d68 <prvGetNextExpireTime+0x44>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	bf0c      	ite	eq
 8008d36:	2301      	moveq	r3, #1
 8008d38:	2300      	movne	r3, #0
 8008d3a:	b2db      	uxtb	r3, r3
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d105      	bne.n	8008d56 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008d4a:	4b07      	ldr	r3, [pc, #28]	; (8008d68 <prvGetNextExpireTime+0x44>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	68db      	ldr	r3, [r3, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	60fb      	str	r3, [r7, #12]
 8008d54:	e001      	b.n	8008d5a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008d56:	2300      	movs	r3, #0
 8008d58:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3714      	adds	r7, #20
 8008d60:	46bd      	mov	sp, r7
 8008d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d66:	4770      	bx	lr
 8008d68:	20000ed4 	.word	0x20000ed4

08008d6c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b084      	sub	sp, #16
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008d74:	f7ff f9a4 	bl	80080c0 <xTaskGetTickCount>
 8008d78:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008d7a:	4b0b      	ldr	r3, [pc, #44]	; (8008da8 <prvSampleTimeNow+0x3c>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	68fa      	ldr	r2, [r7, #12]
 8008d80:	429a      	cmp	r2, r3
 8008d82:	d205      	bcs.n	8008d90 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008d84:	f000 f908 	bl	8008f98 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	601a      	str	r2, [r3, #0]
 8008d8e:	e002      	b.n	8008d96 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2200      	movs	r2, #0
 8008d94:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008d96:	4a04      	ldr	r2, [pc, #16]	; (8008da8 <prvSampleTimeNow+0x3c>)
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3710      	adds	r7, #16
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}
 8008da6:	bf00      	nop
 8008da8:	20000ee4 	.word	0x20000ee4

08008dac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b086      	sub	sp, #24
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	60f8      	str	r0, [r7, #12]
 8008db4:	60b9      	str	r1, [r7, #8]
 8008db6:	607a      	str	r2, [r7, #4]
 8008db8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	68ba      	ldr	r2, [r7, #8]
 8008dc2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	68fa      	ldr	r2, [r7, #12]
 8008dc8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008dca:	68ba      	ldr	r2, [r7, #8]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	429a      	cmp	r2, r3
 8008dd0:	d812      	bhi.n	8008df8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	1ad2      	subs	r2, r2, r3
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	699b      	ldr	r3, [r3, #24]
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d302      	bcc.n	8008de6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008de0:	2301      	movs	r3, #1
 8008de2:	617b      	str	r3, [r7, #20]
 8008de4:	e01b      	b.n	8008e1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008de6:	4b10      	ldr	r3, [pc, #64]	; (8008e28 <prvInsertTimerInActiveList+0x7c>)
 8008de8:	681a      	ldr	r2, [r3, #0]
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	3304      	adds	r3, #4
 8008dee:	4619      	mov	r1, r3
 8008df0:	4610      	mov	r0, r2
 8008df2:	f7fe f951 	bl	8007098 <vListInsert>
 8008df6:	e012      	b.n	8008e1e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008df8:	687a      	ldr	r2, [r7, #4]
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d206      	bcs.n	8008e0e <prvInsertTimerInActiveList+0x62>
 8008e00:	68ba      	ldr	r2, [r7, #8]
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	429a      	cmp	r2, r3
 8008e06:	d302      	bcc.n	8008e0e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008e08:	2301      	movs	r3, #1
 8008e0a:	617b      	str	r3, [r7, #20]
 8008e0c:	e007      	b.n	8008e1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008e0e:	4b07      	ldr	r3, [pc, #28]	; (8008e2c <prvInsertTimerInActiveList+0x80>)
 8008e10:	681a      	ldr	r2, [r3, #0]
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	3304      	adds	r3, #4
 8008e16:	4619      	mov	r1, r3
 8008e18:	4610      	mov	r0, r2
 8008e1a:	f7fe f93d 	bl	8007098 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008e1e:	697b      	ldr	r3, [r7, #20]
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3718      	adds	r7, #24
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}
 8008e28:	20000ed8 	.word	0x20000ed8
 8008e2c:	20000ed4 	.word	0x20000ed4

08008e30 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b08e      	sub	sp, #56	; 0x38
 8008e34:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008e36:	e09d      	b.n	8008f74 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	da18      	bge.n	8008e70 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008e3e:	1d3b      	adds	r3, r7, #4
 8008e40:	3304      	adds	r3, #4
 8008e42:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d10a      	bne.n	8008e60 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e4e:	f383 8811 	msr	BASEPRI, r3
 8008e52:	f3bf 8f6f 	isb	sy
 8008e56:	f3bf 8f4f 	dsb	sy
 8008e5a:	61fb      	str	r3, [r7, #28]
}
 8008e5c:	bf00      	nop
 8008e5e:	e7fe      	b.n	8008e5e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e66:	6850      	ldr	r0, [r2, #4]
 8008e68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e6a:	6892      	ldr	r2, [r2, #8]
 8008e6c:	4611      	mov	r1, r2
 8008e6e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	db7e      	blt.n	8008f74 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e7c:	695b      	ldr	r3, [r3, #20]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d004      	beq.n	8008e8c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e84:	3304      	adds	r3, #4
 8008e86:	4618      	mov	r0, r3
 8008e88:	f7fe f93f 	bl	800710a <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008e8c:	463b      	mov	r3, r7
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f7ff ff6c 	bl	8008d6c <prvSampleTimeNow>
 8008e94:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2b09      	cmp	r3, #9
 8008e9a:	d86a      	bhi.n	8008f72 <prvProcessReceivedCommands+0x142>
 8008e9c:	a201      	add	r2, pc, #4	; (adr r2, 8008ea4 <prvProcessReceivedCommands+0x74>)
 8008e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ea2:	bf00      	nop
 8008ea4:	08008ecd 	.word	0x08008ecd
 8008ea8:	08008ecd 	.word	0x08008ecd
 8008eac:	08008ecd 	.word	0x08008ecd
 8008eb0:	08008f75 	.word	0x08008f75
 8008eb4:	08008f29 	.word	0x08008f29
 8008eb8:	08008f61 	.word	0x08008f61
 8008ebc:	08008ecd 	.word	0x08008ecd
 8008ec0:	08008ecd 	.word	0x08008ecd
 8008ec4:	08008f75 	.word	0x08008f75
 8008ec8:	08008f29 	.word	0x08008f29
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008ecc:	68ba      	ldr	r2, [r7, #8]
 8008ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ed0:	699b      	ldr	r3, [r3, #24]
 8008ed2:	18d1      	adds	r1, r2, r3
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ed8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008eda:	f7ff ff67 	bl	8008dac <prvInsertTimerInActiveList>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d047      	beq.n	8008f74 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008eea:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eee:	69db      	ldr	r3, [r3, #28]
 8008ef0:	2b01      	cmp	r3, #1
 8008ef2:	d13f      	bne.n	8008f74 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008ef4:	68ba      	ldr	r2, [r7, #8]
 8008ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ef8:	699b      	ldr	r3, [r3, #24]
 8008efa:	441a      	add	r2, r3
 8008efc:	2300      	movs	r3, #0
 8008efe:	9300      	str	r3, [sp, #0]
 8008f00:	2300      	movs	r3, #0
 8008f02:	2100      	movs	r1, #0
 8008f04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f06:	f7ff fe1f 	bl	8008b48 <xTimerGenericCommand>
 8008f0a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008f0c:	6a3b      	ldr	r3, [r7, #32]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d130      	bne.n	8008f74 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8008f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f16:	f383 8811 	msr	BASEPRI, r3
 8008f1a:	f3bf 8f6f 	isb	sy
 8008f1e:	f3bf 8f4f 	dsb	sy
 8008f22:	61bb      	str	r3, [r7, #24]
}
 8008f24:	bf00      	nop
 8008f26:	e7fe      	b.n	8008f26 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008f28:	68ba      	ldr	r2, [r7, #8]
 8008f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f2c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f30:	699b      	ldr	r3, [r3, #24]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d10a      	bne.n	8008f4c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8008f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f3a:	f383 8811 	msr	BASEPRI, r3
 8008f3e:	f3bf 8f6f 	isb	sy
 8008f42:	f3bf 8f4f 	dsb	sy
 8008f46:	617b      	str	r3, [r7, #20]
}
 8008f48:	bf00      	nop
 8008f4a:	e7fe      	b.n	8008f4a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f4e:	699a      	ldr	r2, [r3, #24]
 8008f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f52:	18d1      	adds	r1, r2, r3
 8008f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f5a:	f7ff ff27 	bl	8008dac <prvInsertTimerInActiveList>
					break;
 8008f5e:	e009      	b.n	8008f74 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d104      	bne.n	8008f74 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8008f6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f6c:	f000 fbc8 	bl	8009700 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008f70:	e000      	b.n	8008f74 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8008f72:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008f74:	4b07      	ldr	r3, [pc, #28]	; (8008f94 <prvProcessReceivedCommands+0x164>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	1d39      	adds	r1, r7, #4
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f7fe fb83 	bl	8007688 <xQueueReceive>
 8008f82:	4603      	mov	r3, r0
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	f47f af57 	bne.w	8008e38 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008f8a:	bf00      	nop
 8008f8c:	bf00      	nop
 8008f8e:	3730      	adds	r7, #48	; 0x30
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}
 8008f94:	20000edc 	.word	0x20000edc

08008f98 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b088      	sub	sp, #32
 8008f9c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008f9e:	e045      	b.n	800902c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008fa0:	4b2c      	ldr	r3, [pc, #176]	; (8009054 <prvSwitchTimerLists+0xbc>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	68db      	ldr	r3, [r3, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008faa:	4b2a      	ldr	r3, [pc, #168]	; (8009054 <prvSwitchTimerLists+0xbc>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	68db      	ldr	r3, [r3, #12]
 8008fb0:	68db      	ldr	r3, [r3, #12]
 8008fb2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	3304      	adds	r3, #4
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f7fe f8a6 	bl	800710a <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc2:	68f8      	ldr	r0, [r7, #12]
 8008fc4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	69db      	ldr	r3, [r3, #28]
 8008fca:	2b01      	cmp	r3, #1
 8008fcc:	d12e      	bne.n	800902c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	699b      	ldr	r3, [r3, #24]
 8008fd2:	693a      	ldr	r2, [r7, #16]
 8008fd4:	4413      	add	r3, r2
 8008fd6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008fd8:	68ba      	ldr	r2, [r7, #8]
 8008fda:	693b      	ldr	r3, [r7, #16]
 8008fdc:	429a      	cmp	r2, r3
 8008fde:	d90e      	bls.n	8008ffe <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	68ba      	ldr	r2, [r7, #8]
 8008fe4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	68fa      	ldr	r2, [r7, #12]
 8008fea:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008fec:	4b19      	ldr	r3, [pc, #100]	; (8009054 <prvSwitchTimerLists+0xbc>)
 8008fee:	681a      	ldr	r2, [r3, #0]
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	3304      	adds	r3, #4
 8008ff4:	4619      	mov	r1, r3
 8008ff6:	4610      	mov	r0, r2
 8008ff8:	f7fe f84e 	bl	8007098 <vListInsert>
 8008ffc:	e016      	b.n	800902c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ffe:	2300      	movs	r3, #0
 8009000:	9300      	str	r3, [sp, #0]
 8009002:	2300      	movs	r3, #0
 8009004:	693a      	ldr	r2, [r7, #16]
 8009006:	2100      	movs	r1, #0
 8009008:	68f8      	ldr	r0, [r7, #12]
 800900a:	f7ff fd9d 	bl	8008b48 <xTimerGenericCommand>
 800900e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d10a      	bne.n	800902c <prvSwitchTimerLists+0x94>
	__asm volatile
 8009016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800901a:	f383 8811 	msr	BASEPRI, r3
 800901e:	f3bf 8f6f 	isb	sy
 8009022:	f3bf 8f4f 	dsb	sy
 8009026:	603b      	str	r3, [r7, #0]
}
 8009028:	bf00      	nop
 800902a:	e7fe      	b.n	800902a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800902c:	4b09      	ldr	r3, [pc, #36]	; (8009054 <prvSwitchTimerLists+0xbc>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d1b4      	bne.n	8008fa0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009036:	4b07      	ldr	r3, [pc, #28]	; (8009054 <prvSwitchTimerLists+0xbc>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800903c:	4b06      	ldr	r3, [pc, #24]	; (8009058 <prvSwitchTimerLists+0xc0>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a04      	ldr	r2, [pc, #16]	; (8009054 <prvSwitchTimerLists+0xbc>)
 8009042:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009044:	4a04      	ldr	r2, [pc, #16]	; (8009058 <prvSwitchTimerLists+0xc0>)
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	6013      	str	r3, [r2, #0]
}
 800904a:	bf00      	nop
 800904c:	3718      	adds	r7, #24
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}
 8009052:	bf00      	nop
 8009054:	20000ed4 	.word	0x20000ed4
 8009058:	20000ed8 	.word	0x20000ed8

0800905c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b082      	sub	sp, #8
 8009060:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009062:	f000 f967 	bl	8009334 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009066:	4b15      	ldr	r3, [pc, #84]	; (80090bc <prvCheckForValidListAndQueue+0x60>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d120      	bne.n	80090b0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800906e:	4814      	ldr	r0, [pc, #80]	; (80090c0 <prvCheckForValidListAndQueue+0x64>)
 8009070:	f7fd ffc1 	bl	8006ff6 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009074:	4813      	ldr	r0, [pc, #76]	; (80090c4 <prvCheckForValidListAndQueue+0x68>)
 8009076:	f7fd ffbe 	bl	8006ff6 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800907a:	4b13      	ldr	r3, [pc, #76]	; (80090c8 <prvCheckForValidListAndQueue+0x6c>)
 800907c:	4a10      	ldr	r2, [pc, #64]	; (80090c0 <prvCheckForValidListAndQueue+0x64>)
 800907e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009080:	4b12      	ldr	r3, [pc, #72]	; (80090cc <prvCheckForValidListAndQueue+0x70>)
 8009082:	4a10      	ldr	r2, [pc, #64]	; (80090c4 <prvCheckForValidListAndQueue+0x68>)
 8009084:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009086:	2300      	movs	r3, #0
 8009088:	9300      	str	r3, [sp, #0]
 800908a:	4b11      	ldr	r3, [pc, #68]	; (80090d0 <prvCheckForValidListAndQueue+0x74>)
 800908c:	4a11      	ldr	r2, [pc, #68]	; (80090d4 <prvCheckForValidListAndQueue+0x78>)
 800908e:	2110      	movs	r1, #16
 8009090:	200a      	movs	r0, #10
 8009092:	f7fe f8cd 	bl	8007230 <xQueueGenericCreateStatic>
 8009096:	4603      	mov	r3, r0
 8009098:	4a08      	ldr	r2, [pc, #32]	; (80090bc <prvCheckForValidListAndQueue+0x60>)
 800909a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800909c:	4b07      	ldr	r3, [pc, #28]	; (80090bc <prvCheckForValidListAndQueue+0x60>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d005      	beq.n	80090b0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80090a4:	4b05      	ldr	r3, [pc, #20]	; (80090bc <prvCheckForValidListAndQueue+0x60>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	490b      	ldr	r1, [pc, #44]	; (80090d8 <prvCheckForValidListAndQueue+0x7c>)
 80090aa:	4618      	mov	r0, r3
 80090ac:	f7fe fcdc 	bl	8007a68 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80090b0:	f000 f970 	bl	8009394 <vPortExitCritical>
}
 80090b4:	bf00      	nop
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	20000edc 	.word	0x20000edc
 80090c0:	20000eac 	.word	0x20000eac
 80090c4:	20000ec0 	.word	0x20000ec0
 80090c8:	20000ed4 	.word	0x20000ed4
 80090cc:	20000ed8 	.word	0x20000ed8
 80090d0:	20000f88 	.word	0x20000f88
 80090d4:	20000ee8 	.word	0x20000ee8
 80090d8:	0800a5d8 	.word	0x0800a5d8

080090dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80090dc:	b480      	push	{r7}
 80090de:	b085      	sub	sp, #20
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	60f8      	str	r0, [r7, #12]
 80090e4:	60b9      	str	r1, [r7, #8]
 80090e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	3b04      	subs	r3, #4
 80090ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80090f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	3b04      	subs	r3, #4
 80090fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	f023 0201 	bic.w	r2, r3, #1
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	3b04      	subs	r3, #4
 800910a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800910c:	4a0c      	ldr	r2, [pc, #48]	; (8009140 <pxPortInitialiseStack+0x64>)
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	3b14      	subs	r3, #20
 8009116:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009118:	687a      	ldr	r2, [r7, #4]
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	3b04      	subs	r3, #4
 8009122:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f06f 0202 	mvn.w	r2, #2
 800912a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	3b20      	subs	r3, #32
 8009130:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009132:	68fb      	ldr	r3, [r7, #12]
}
 8009134:	4618      	mov	r0, r3
 8009136:	3714      	adds	r7, #20
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr
 8009140:	08009145 	.word	0x08009145

08009144 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009144:	b480      	push	{r7}
 8009146:	b085      	sub	sp, #20
 8009148:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800914a:	2300      	movs	r3, #0
 800914c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800914e:	4b12      	ldr	r3, [pc, #72]	; (8009198 <prvTaskExitError+0x54>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009156:	d00a      	beq.n	800916e <prvTaskExitError+0x2a>
	__asm volatile
 8009158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800915c:	f383 8811 	msr	BASEPRI, r3
 8009160:	f3bf 8f6f 	isb	sy
 8009164:	f3bf 8f4f 	dsb	sy
 8009168:	60fb      	str	r3, [r7, #12]
}
 800916a:	bf00      	nop
 800916c:	e7fe      	b.n	800916c <prvTaskExitError+0x28>
	__asm volatile
 800916e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009172:	f383 8811 	msr	BASEPRI, r3
 8009176:	f3bf 8f6f 	isb	sy
 800917a:	f3bf 8f4f 	dsb	sy
 800917e:	60bb      	str	r3, [r7, #8]
}
 8009180:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009182:	bf00      	nop
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d0fc      	beq.n	8009184 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800918a:	bf00      	nop
 800918c:	bf00      	nop
 800918e:	3714      	adds	r7, #20
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr
 8009198:	2000000c 	.word	0x2000000c
 800919c:	00000000 	.word	0x00000000

080091a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80091a0:	4b07      	ldr	r3, [pc, #28]	; (80091c0 <pxCurrentTCBConst2>)
 80091a2:	6819      	ldr	r1, [r3, #0]
 80091a4:	6808      	ldr	r0, [r1, #0]
 80091a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091aa:	f380 8809 	msr	PSP, r0
 80091ae:	f3bf 8f6f 	isb	sy
 80091b2:	f04f 0000 	mov.w	r0, #0
 80091b6:	f380 8811 	msr	BASEPRI, r0
 80091ba:	4770      	bx	lr
 80091bc:	f3af 8000 	nop.w

080091c0 <pxCurrentTCBConst2>:
 80091c0:	20000d80 	.word	0x20000d80
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80091c4:	bf00      	nop
 80091c6:	bf00      	nop

080091c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80091c8:	4808      	ldr	r0, [pc, #32]	; (80091ec <prvPortStartFirstTask+0x24>)
 80091ca:	6800      	ldr	r0, [r0, #0]
 80091cc:	6800      	ldr	r0, [r0, #0]
 80091ce:	f380 8808 	msr	MSP, r0
 80091d2:	f04f 0000 	mov.w	r0, #0
 80091d6:	f380 8814 	msr	CONTROL, r0
 80091da:	b662      	cpsie	i
 80091dc:	b661      	cpsie	f
 80091de:	f3bf 8f4f 	dsb	sy
 80091e2:	f3bf 8f6f 	isb	sy
 80091e6:	df00      	svc	0
 80091e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80091ea:	bf00      	nop
 80091ec:	e000ed08 	.word	0xe000ed08

080091f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b086      	sub	sp, #24
 80091f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80091f6:	4b46      	ldr	r3, [pc, #280]	; (8009310 <xPortStartScheduler+0x120>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	4a46      	ldr	r2, [pc, #280]	; (8009314 <xPortStartScheduler+0x124>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d10a      	bne.n	8009216 <xPortStartScheduler+0x26>
	__asm volatile
 8009200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009204:	f383 8811 	msr	BASEPRI, r3
 8009208:	f3bf 8f6f 	isb	sy
 800920c:	f3bf 8f4f 	dsb	sy
 8009210:	613b      	str	r3, [r7, #16]
}
 8009212:	bf00      	nop
 8009214:	e7fe      	b.n	8009214 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009216:	4b3e      	ldr	r3, [pc, #248]	; (8009310 <xPortStartScheduler+0x120>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	4a3f      	ldr	r2, [pc, #252]	; (8009318 <xPortStartScheduler+0x128>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d10a      	bne.n	8009236 <xPortStartScheduler+0x46>
	__asm volatile
 8009220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009224:	f383 8811 	msr	BASEPRI, r3
 8009228:	f3bf 8f6f 	isb	sy
 800922c:	f3bf 8f4f 	dsb	sy
 8009230:	60fb      	str	r3, [r7, #12]
}
 8009232:	bf00      	nop
 8009234:	e7fe      	b.n	8009234 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009236:	4b39      	ldr	r3, [pc, #228]	; (800931c <xPortStartScheduler+0x12c>)
 8009238:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	781b      	ldrb	r3, [r3, #0]
 800923e:	b2db      	uxtb	r3, r3
 8009240:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	22ff      	movs	r2, #255	; 0xff
 8009246:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	781b      	ldrb	r3, [r3, #0]
 800924c:	b2db      	uxtb	r3, r3
 800924e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009250:	78fb      	ldrb	r3, [r7, #3]
 8009252:	b2db      	uxtb	r3, r3
 8009254:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009258:	b2da      	uxtb	r2, r3
 800925a:	4b31      	ldr	r3, [pc, #196]	; (8009320 <xPortStartScheduler+0x130>)
 800925c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800925e:	4b31      	ldr	r3, [pc, #196]	; (8009324 <xPortStartScheduler+0x134>)
 8009260:	2207      	movs	r2, #7
 8009262:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009264:	e009      	b.n	800927a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009266:	4b2f      	ldr	r3, [pc, #188]	; (8009324 <xPortStartScheduler+0x134>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	3b01      	subs	r3, #1
 800926c:	4a2d      	ldr	r2, [pc, #180]	; (8009324 <xPortStartScheduler+0x134>)
 800926e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009270:	78fb      	ldrb	r3, [r7, #3]
 8009272:	b2db      	uxtb	r3, r3
 8009274:	005b      	lsls	r3, r3, #1
 8009276:	b2db      	uxtb	r3, r3
 8009278:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800927a:	78fb      	ldrb	r3, [r7, #3]
 800927c:	b2db      	uxtb	r3, r3
 800927e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009282:	2b80      	cmp	r3, #128	; 0x80
 8009284:	d0ef      	beq.n	8009266 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009286:	4b27      	ldr	r3, [pc, #156]	; (8009324 <xPortStartScheduler+0x134>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f1c3 0307 	rsb	r3, r3, #7
 800928e:	2b04      	cmp	r3, #4
 8009290:	d00a      	beq.n	80092a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8009292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009296:	f383 8811 	msr	BASEPRI, r3
 800929a:	f3bf 8f6f 	isb	sy
 800929e:	f3bf 8f4f 	dsb	sy
 80092a2:	60bb      	str	r3, [r7, #8]
}
 80092a4:	bf00      	nop
 80092a6:	e7fe      	b.n	80092a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80092a8:	4b1e      	ldr	r3, [pc, #120]	; (8009324 <xPortStartScheduler+0x134>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	021b      	lsls	r3, r3, #8
 80092ae:	4a1d      	ldr	r2, [pc, #116]	; (8009324 <xPortStartScheduler+0x134>)
 80092b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80092b2:	4b1c      	ldr	r3, [pc, #112]	; (8009324 <xPortStartScheduler+0x134>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80092ba:	4a1a      	ldr	r2, [pc, #104]	; (8009324 <xPortStartScheduler+0x134>)
 80092bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	b2da      	uxtb	r2, r3
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80092c6:	4b18      	ldr	r3, [pc, #96]	; (8009328 <xPortStartScheduler+0x138>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	4a17      	ldr	r2, [pc, #92]	; (8009328 <xPortStartScheduler+0x138>)
 80092cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80092d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80092d2:	4b15      	ldr	r3, [pc, #84]	; (8009328 <xPortStartScheduler+0x138>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	4a14      	ldr	r2, [pc, #80]	; (8009328 <xPortStartScheduler+0x138>)
 80092d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80092dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80092de:	f000 f8dd 	bl	800949c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80092e2:	4b12      	ldr	r3, [pc, #72]	; (800932c <xPortStartScheduler+0x13c>)
 80092e4:	2200      	movs	r2, #0
 80092e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80092e8:	f000 f8fc 	bl	80094e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80092ec:	4b10      	ldr	r3, [pc, #64]	; (8009330 <xPortStartScheduler+0x140>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4a0f      	ldr	r2, [pc, #60]	; (8009330 <xPortStartScheduler+0x140>)
 80092f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80092f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80092f8:	f7ff ff66 	bl	80091c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80092fc:	f7fe ffae 	bl	800825c <vTaskSwitchContext>
	prvTaskExitError();
 8009300:	f7ff ff20 	bl	8009144 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009304:	2300      	movs	r3, #0
}
 8009306:	4618      	mov	r0, r3
 8009308:	3718      	adds	r7, #24
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}
 800930e:	bf00      	nop
 8009310:	e000ed00 	.word	0xe000ed00
 8009314:	410fc271 	.word	0x410fc271
 8009318:	410fc270 	.word	0x410fc270
 800931c:	e000e400 	.word	0xe000e400
 8009320:	20000fd0 	.word	0x20000fd0
 8009324:	20000fd4 	.word	0x20000fd4
 8009328:	e000ed20 	.word	0xe000ed20
 800932c:	2000000c 	.word	0x2000000c
 8009330:	e000ef34 	.word	0xe000ef34

08009334 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009334:	b480      	push	{r7}
 8009336:	b083      	sub	sp, #12
 8009338:	af00      	add	r7, sp, #0
	__asm volatile
 800933a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800933e:	f383 8811 	msr	BASEPRI, r3
 8009342:	f3bf 8f6f 	isb	sy
 8009346:	f3bf 8f4f 	dsb	sy
 800934a:	607b      	str	r3, [r7, #4]
}
 800934c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800934e:	4b0f      	ldr	r3, [pc, #60]	; (800938c <vPortEnterCritical+0x58>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	3301      	adds	r3, #1
 8009354:	4a0d      	ldr	r2, [pc, #52]	; (800938c <vPortEnterCritical+0x58>)
 8009356:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009358:	4b0c      	ldr	r3, [pc, #48]	; (800938c <vPortEnterCritical+0x58>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	2b01      	cmp	r3, #1
 800935e:	d10f      	bne.n	8009380 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009360:	4b0b      	ldr	r3, [pc, #44]	; (8009390 <vPortEnterCritical+0x5c>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	b2db      	uxtb	r3, r3
 8009366:	2b00      	cmp	r3, #0
 8009368:	d00a      	beq.n	8009380 <vPortEnterCritical+0x4c>
	__asm volatile
 800936a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800936e:	f383 8811 	msr	BASEPRI, r3
 8009372:	f3bf 8f6f 	isb	sy
 8009376:	f3bf 8f4f 	dsb	sy
 800937a:	603b      	str	r3, [r7, #0]
}
 800937c:	bf00      	nop
 800937e:	e7fe      	b.n	800937e <vPortEnterCritical+0x4a>
	}
}
 8009380:	bf00      	nop
 8009382:	370c      	adds	r7, #12
 8009384:	46bd      	mov	sp, r7
 8009386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938a:	4770      	bx	lr
 800938c:	2000000c 	.word	0x2000000c
 8009390:	e000ed04 	.word	0xe000ed04

08009394 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009394:	b480      	push	{r7}
 8009396:	b083      	sub	sp, #12
 8009398:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800939a:	4b12      	ldr	r3, [pc, #72]	; (80093e4 <vPortExitCritical+0x50>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d10a      	bne.n	80093b8 <vPortExitCritical+0x24>
	__asm volatile
 80093a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a6:	f383 8811 	msr	BASEPRI, r3
 80093aa:	f3bf 8f6f 	isb	sy
 80093ae:	f3bf 8f4f 	dsb	sy
 80093b2:	607b      	str	r3, [r7, #4]
}
 80093b4:	bf00      	nop
 80093b6:	e7fe      	b.n	80093b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80093b8:	4b0a      	ldr	r3, [pc, #40]	; (80093e4 <vPortExitCritical+0x50>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	3b01      	subs	r3, #1
 80093be:	4a09      	ldr	r2, [pc, #36]	; (80093e4 <vPortExitCritical+0x50>)
 80093c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80093c2:	4b08      	ldr	r3, [pc, #32]	; (80093e4 <vPortExitCritical+0x50>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d105      	bne.n	80093d6 <vPortExitCritical+0x42>
 80093ca:	2300      	movs	r3, #0
 80093cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	f383 8811 	msr	BASEPRI, r3
}
 80093d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80093d6:	bf00      	nop
 80093d8:	370c      	adds	r7, #12
 80093da:	46bd      	mov	sp, r7
 80093dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e0:	4770      	bx	lr
 80093e2:	bf00      	nop
 80093e4:	2000000c 	.word	0x2000000c
	...

080093f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80093f0:	f3ef 8009 	mrs	r0, PSP
 80093f4:	f3bf 8f6f 	isb	sy
 80093f8:	4b15      	ldr	r3, [pc, #84]	; (8009450 <pxCurrentTCBConst>)
 80093fa:	681a      	ldr	r2, [r3, #0]
 80093fc:	f01e 0f10 	tst.w	lr, #16
 8009400:	bf08      	it	eq
 8009402:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009406:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800940a:	6010      	str	r0, [r2, #0]
 800940c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009410:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009414:	f380 8811 	msr	BASEPRI, r0
 8009418:	f3bf 8f4f 	dsb	sy
 800941c:	f3bf 8f6f 	isb	sy
 8009420:	f7fe ff1c 	bl	800825c <vTaskSwitchContext>
 8009424:	f04f 0000 	mov.w	r0, #0
 8009428:	f380 8811 	msr	BASEPRI, r0
 800942c:	bc09      	pop	{r0, r3}
 800942e:	6819      	ldr	r1, [r3, #0]
 8009430:	6808      	ldr	r0, [r1, #0]
 8009432:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009436:	f01e 0f10 	tst.w	lr, #16
 800943a:	bf08      	it	eq
 800943c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009440:	f380 8809 	msr	PSP, r0
 8009444:	f3bf 8f6f 	isb	sy
 8009448:	4770      	bx	lr
 800944a:	bf00      	nop
 800944c:	f3af 8000 	nop.w

08009450 <pxCurrentTCBConst>:
 8009450:	20000d80 	.word	0x20000d80
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009454:	bf00      	nop
 8009456:	bf00      	nop

08009458 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b082      	sub	sp, #8
 800945c:	af00      	add	r7, sp, #0
	__asm volatile
 800945e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009462:	f383 8811 	msr	BASEPRI, r3
 8009466:	f3bf 8f6f 	isb	sy
 800946a:	f3bf 8f4f 	dsb	sy
 800946e:	607b      	str	r3, [r7, #4]
}
 8009470:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009472:	f7fe fe35 	bl	80080e0 <xTaskIncrementTick>
 8009476:	4603      	mov	r3, r0
 8009478:	2b00      	cmp	r3, #0
 800947a:	d003      	beq.n	8009484 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800947c:	4b06      	ldr	r3, [pc, #24]	; (8009498 <SysTick_Handler+0x40>)
 800947e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009482:	601a      	str	r2, [r3, #0]
 8009484:	2300      	movs	r3, #0
 8009486:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	f383 8811 	msr	BASEPRI, r3
}
 800948e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009490:	bf00      	nop
 8009492:	3708      	adds	r7, #8
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}
 8009498:	e000ed04 	.word	0xe000ed04

0800949c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800949c:	b480      	push	{r7}
 800949e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80094a0:	4b0b      	ldr	r3, [pc, #44]	; (80094d0 <vPortSetupTimerInterrupt+0x34>)
 80094a2:	2200      	movs	r2, #0
 80094a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80094a6:	4b0b      	ldr	r3, [pc, #44]	; (80094d4 <vPortSetupTimerInterrupt+0x38>)
 80094a8:	2200      	movs	r2, #0
 80094aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80094ac:	4b0a      	ldr	r3, [pc, #40]	; (80094d8 <vPortSetupTimerInterrupt+0x3c>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	4a0a      	ldr	r2, [pc, #40]	; (80094dc <vPortSetupTimerInterrupt+0x40>)
 80094b2:	fba2 2303 	umull	r2, r3, r2, r3
 80094b6:	099b      	lsrs	r3, r3, #6
 80094b8:	4a09      	ldr	r2, [pc, #36]	; (80094e0 <vPortSetupTimerInterrupt+0x44>)
 80094ba:	3b01      	subs	r3, #1
 80094bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80094be:	4b04      	ldr	r3, [pc, #16]	; (80094d0 <vPortSetupTimerInterrupt+0x34>)
 80094c0:	2207      	movs	r2, #7
 80094c2:	601a      	str	r2, [r3, #0]
}
 80094c4:	bf00      	nop
 80094c6:	46bd      	mov	sp, r7
 80094c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094cc:	4770      	bx	lr
 80094ce:	bf00      	nop
 80094d0:	e000e010 	.word	0xe000e010
 80094d4:	e000e018 	.word	0xe000e018
 80094d8:	20000000 	.word	0x20000000
 80094dc:	10624dd3 	.word	0x10624dd3
 80094e0:	e000e014 	.word	0xe000e014

080094e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80094e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80094f4 <vPortEnableVFP+0x10>
 80094e8:	6801      	ldr	r1, [r0, #0]
 80094ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80094ee:	6001      	str	r1, [r0, #0]
 80094f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80094f2:	bf00      	nop
 80094f4:	e000ed88 	.word	0xe000ed88

080094f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80094f8:	b480      	push	{r7}
 80094fa:	b085      	sub	sp, #20
 80094fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80094fe:	f3ef 8305 	mrs	r3, IPSR
 8009502:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	2b0f      	cmp	r3, #15
 8009508:	d914      	bls.n	8009534 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800950a:	4a17      	ldr	r2, [pc, #92]	; (8009568 <vPortValidateInterruptPriority+0x70>)
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	4413      	add	r3, r2
 8009510:	781b      	ldrb	r3, [r3, #0]
 8009512:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009514:	4b15      	ldr	r3, [pc, #84]	; (800956c <vPortValidateInterruptPriority+0x74>)
 8009516:	781b      	ldrb	r3, [r3, #0]
 8009518:	7afa      	ldrb	r2, [r7, #11]
 800951a:	429a      	cmp	r2, r3
 800951c:	d20a      	bcs.n	8009534 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800951e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009522:	f383 8811 	msr	BASEPRI, r3
 8009526:	f3bf 8f6f 	isb	sy
 800952a:	f3bf 8f4f 	dsb	sy
 800952e:	607b      	str	r3, [r7, #4]
}
 8009530:	bf00      	nop
 8009532:	e7fe      	b.n	8009532 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009534:	4b0e      	ldr	r3, [pc, #56]	; (8009570 <vPortValidateInterruptPriority+0x78>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800953c:	4b0d      	ldr	r3, [pc, #52]	; (8009574 <vPortValidateInterruptPriority+0x7c>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	429a      	cmp	r2, r3
 8009542:	d90a      	bls.n	800955a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009548:	f383 8811 	msr	BASEPRI, r3
 800954c:	f3bf 8f6f 	isb	sy
 8009550:	f3bf 8f4f 	dsb	sy
 8009554:	603b      	str	r3, [r7, #0]
}
 8009556:	bf00      	nop
 8009558:	e7fe      	b.n	8009558 <vPortValidateInterruptPriority+0x60>
	}
 800955a:	bf00      	nop
 800955c:	3714      	adds	r7, #20
 800955e:	46bd      	mov	sp, r7
 8009560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009564:	4770      	bx	lr
 8009566:	bf00      	nop
 8009568:	e000e3f0 	.word	0xe000e3f0
 800956c:	20000fd0 	.word	0x20000fd0
 8009570:	e000ed0c 	.word	0xe000ed0c
 8009574:	20000fd4 	.word	0x20000fd4

08009578 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b08a      	sub	sp, #40	; 0x28
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009580:	2300      	movs	r3, #0
 8009582:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009584:	f7fe fcf2 	bl	8007f6c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009588:	4b58      	ldr	r3, [pc, #352]	; (80096ec <pvPortMalloc+0x174>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d101      	bne.n	8009594 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009590:	f000 f910 	bl	80097b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009594:	4b56      	ldr	r3, [pc, #344]	; (80096f0 <pvPortMalloc+0x178>)
 8009596:	681a      	ldr	r2, [r3, #0]
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	4013      	ands	r3, r2
 800959c:	2b00      	cmp	r3, #0
 800959e:	f040 808e 	bne.w	80096be <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d01d      	beq.n	80095e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80095a8:	2208      	movs	r2, #8
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	4413      	add	r3, r2
 80095ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f003 0307 	and.w	r3, r3, #7
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d014      	beq.n	80095e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f023 0307 	bic.w	r3, r3, #7
 80095c0:	3308      	adds	r3, #8
 80095c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f003 0307 	and.w	r3, r3, #7
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d00a      	beq.n	80095e4 <pvPortMalloc+0x6c>
	__asm volatile
 80095ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d2:	f383 8811 	msr	BASEPRI, r3
 80095d6:	f3bf 8f6f 	isb	sy
 80095da:	f3bf 8f4f 	dsb	sy
 80095de:	617b      	str	r3, [r7, #20]
}
 80095e0:	bf00      	nop
 80095e2:	e7fe      	b.n	80095e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d069      	beq.n	80096be <pvPortMalloc+0x146>
 80095ea:	4b42      	ldr	r3, [pc, #264]	; (80096f4 <pvPortMalloc+0x17c>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	687a      	ldr	r2, [r7, #4]
 80095f0:	429a      	cmp	r2, r3
 80095f2:	d864      	bhi.n	80096be <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80095f4:	4b40      	ldr	r3, [pc, #256]	; (80096f8 <pvPortMalloc+0x180>)
 80095f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80095f8:	4b3f      	ldr	r3, [pc, #252]	; (80096f8 <pvPortMalloc+0x180>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80095fe:	e004      	b.n	800960a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009602:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800960a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800960c:	685b      	ldr	r3, [r3, #4]
 800960e:	687a      	ldr	r2, [r7, #4]
 8009610:	429a      	cmp	r2, r3
 8009612:	d903      	bls.n	800961c <pvPortMalloc+0xa4>
 8009614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d1f1      	bne.n	8009600 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800961c:	4b33      	ldr	r3, [pc, #204]	; (80096ec <pvPortMalloc+0x174>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009622:	429a      	cmp	r2, r3
 8009624:	d04b      	beq.n	80096be <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009626:	6a3b      	ldr	r3, [r7, #32]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	2208      	movs	r2, #8
 800962c:	4413      	add	r3, r2
 800962e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009632:	681a      	ldr	r2, [r3, #0]
 8009634:	6a3b      	ldr	r3, [r7, #32]
 8009636:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800963a:	685a      	ldr	r2, [r3, #4]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	1ad2      	subs	r2, r2, r3
 8009640:	2308      	movs	r3, #8
 8009642:	005b      	lsls	r3, r3, #1
 8009644:	429a      	cmp	r2, r3
 8009646:	d91f      	bls.n	8009688 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	4413      	add	r3, r2
 800964e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009650:	69bb      	ldr	r3, [r7, #24]
 8009652:	f003 0307 	and.w	r3, r3, #7
 8009656:	2b00      	cmp	r3, #0
 8009658:	d00a      	beq.n	8009670 <pvPortMalloc+0xf8>
	__asm volatile
 800965a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800965e:	f383 8811 	msr	BASEPRI, r3
 8009662:	f3bf 8f6f 	isb	sy
 8009666:	f3bf 8f4f 	dsb	sy
 800966a:	613b      	str	r3, [r7, #16]
}
 800966c:	bf00      	nop
 800966e:	e7fe      	b.n	800966e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009672:	685a      	ldr	r2, [r3, #4]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	1ad2      	subs	r2, r2, r3
 8009678:	69bb      	ldr	r3, [r7, #24]
 800967a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800967c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800967e:	687a      	ldr	r2, [r7, #4]
 8009680:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009682:	69b8      	ldr	r0, [r7, #24]
 8009684:	f000 f8f8 	bl	8009878 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009688:	4b1a      	ldr	r3, [pc, #104]	; (80096f4 <pvPortMalloc+0x17c>)
 800968a:	681a      	ldr	r2, [r3, #0]
 800968c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800968e:	685b      	ldr	r3, [r3, #4]
 8009690:	1ad3      	subs	r3, r2, r3
 8009692:	4a18      	ldr	r2, [pc, #96]	; (80096f4 <pvPortMalloc+0x17c>)
 8009694:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009696:	4b17      	ldr	r3, [pc, #92]	; (80096f4 <pvPortMalloc+0x17c>)
 8009698:	681a      	ldr	r2, [r3, #0]
 800969a:	4b18      	ldr	r3, [pc, #96]	; (80096fc <pvPortMalloc+0x184>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	429a      	cmp	r2, r3
 80096a0:	d203      	bcs.n	80096aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80096a2:	4b14      	ldr	r3, [pc, #80]	; (80096f4 <pvPortMalloc+0x17c>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	4a15      	ldr	r2, [pc, #84]	; (80096fc <pvPortMalloc+0x184>)
 80096a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80096aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ac:	685a      	ldr	r2, [r3, #4]
 80096ae:	4b10      	ldr	r3, [pc, #64]	; (80096f0 <pvPortMalloc+0x178>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	431a      	orrs	r2, r3
 80096b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80096b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ba:	2200      	movs	r2, #0
 80096bc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80096be:	f7fe fc63 	bl	8007f88 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80096c2:	69fb      	ldr	r3, [r7, #28]
 80096c4:	f003 0307 	and.w	r3, r3, #7
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d00a      	beq.n	80096e2 <pvPortMalloc+0x16a>
	__asm volatile
 80096cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d0:	f383 8811 	msr	BASEPRI, r3
 80096d4:	f3bf 8f6f 	isb	sy
 80096d8:	f3bf 8f4f 	dsb	sy
 80096dc:	60fb      	str	r3, [r7, #12]
}
 80096de:	bf00      	nop
 80096e0:	e7fe      	b.n	80096e0 <pvPortMalloc+0x168>
	return pvReturn;
 80096e2:	69fb      	ldr	r3, [r7, #28]
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	3728      	adds	r7, #40	; 0x28
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}
 80096ec:	200029e0 	.word	0x200029e0
 80096f0:	200029ec 	.word	0x200029ec
 80096f4:	200029e4 	.word	0x200029e4
 80096f8:	200029d8 	.word	0x200029d8
 80096fc:	200029e8 	.word	0x200029e8

08009700 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b086      	sub	sp, #24
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d048      	beq.n	80097a4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009712:	2308      	movs	r3, #8
 8009714:	425b      	negs	r3, r3
 8009716:	697a      	ldr	r2, [r7, #20]
 8009718:	4413      	add	r3, r2
 800971a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	685a      	ldr	r2, [r3, #4]
 8009724:	4b21      	ldr	r3, [pc, #132]	; (80097ac <vPortFree+0xac>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4013      	ands	r3, r2
 800972a:	2b00      	cmp	r3, #0
 800972c:	d10a      	bne.n	8009744 <vPortFree+0x44>
	__asm volatile
 800972e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009732:	f383 8811 	msr	BASEPRI, r3
 8009736:	f3bf 8f6f 	isb	sy
 800973a:	f3bf 8f4f 	dsb	sy
 800973e:	60fb      	str	r3, [r7, #12]
}
 8009740:	bf00      	nop
 8009742:	e7fe      	b.n	8009742 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009744:	693b      	ldr	r3, [r7, #16]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d00a      	beq.n	8009762 <vPortFree+0x62>
	__asm volatile
 800974c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009750:	f383 8811 	msr	BASEPRI, r3
 8009754:	f3bf 8f6f 	isb	sy
 8009758:	f3bf 8f4f 	dsb	sy
 800975c:	60bb      	str	r3, [r7, #8]
}
 800975e:	bf00      	nop
 8009760:	e7fe      	b.n	8009760 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	685a      	ldr	r2, [r3, #4]
 8009766:	4b11      	ldr	r3, [pc, #68]	; (80097ac <vPortFree+0xac>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	4013      	ands	r3, r2
 800976c:	2b00      	cmp	r3, #0
 800976e:	d019      	beq.n	80097a4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d115      	bne.n	80097a4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	685a      	ldr	r2, [r3, #4]
 800977c:	4b0b      	ldr	r3, [pc, #44]	; (80097ac <vPortFree+0xac>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	43db      	mvns	r3, r3
 8009782:	401a      	ands	r2, r3
 8009784:	693b      	ldr	r3, [r7, #16]
 8009786:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009788:	f7fe fbf0 	bl	8007f6c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800978c:	693b      	ldr	r3, [r7, #16]
 800978e:	685a      	ldr	r2, [r3, #4]
 8009790:	4b07      	ldr	r3, [pc, #28]	; (80097b0 <vPortFree+0xb0>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	4413      	add	r3, r2
 8009796:	4a06      	ldr	r2, [pc, #24]	; (80097b0 <vPortFree+0xb0>)
 8009798:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800979a:	6938      	ldr	r0, [r7, #16]
 800979c:	f000 f86c 	bl	8009878 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80097a0:	f7fe fbf2 	bl	8007f88 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80097a4:	bf00      	nop
 80097a6:	3718      	adds	r7, #24
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}
 80097ac:	200029ec 	.word	0x200029ec
 80097b0:	200029e4 	.word	0x200029e4

080097b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80097b4:	b480      	push	{r7}
 80097b6:	b085      	sub	sp, #20
 80097b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80097ba:	f44f 53d0 	mov.w	r3, #6656	; 0x1a00
 80097be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80097c0:	4b27      	ldr	r3, [pc, #156]	; (8009860 <prvHeapInit+0xac>)
 80097c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f003 0307 	and.w	r3, r3, #7
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d00c      	beq.n	80097e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	3307      	adds	r3, #7
 80097d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f023 0307 	bic.w	r3, r3, #7
 80097da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80097dc:	68ba      	ldr	r2, [r7, #8]
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	1ad3      	subs	r3, r2, r3
 80097e2:	4a1f      	ldr	r2, [pc, #124]	; (8009860 <prvHeapInit+0xac>)
 80097e4:	4413      	add	r3, r2
 80097e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80097ec:	4a1d      	ldr	r2, [pc, #116]	; (8009864 <prvHeapInit+0xb0>)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80097f2:	4b1c      	ldr	r3, [pc, #112]	; (8009864 <prvHeapInit+0xb0>)
 80097f4:	2200      	movs	r2, #0
 80097f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	68ba      	ldr	r2, [r7, #8]
 80097fc:	4413      	add	r3, r2
 80097fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009800:	2208      	movs	r2, #8
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	1a9b      	subs	r3, r3, r2
 8009806:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	f023 0307 	bic.w	r3, r3, #7
 800980e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	4a15      	ldr	r2, [pc, #84]	; (8009868 <prvHeapInit+0xb4>)
 8009814:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009816:	4b14      	ldr	r3, [pc, #80]	; (8009868 <prvHeapInit+0xb4>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	2200      	movs	r2, #0
 800981c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800981e:	4b12      	ldr	r3, [pc, #72]	; (8009868 <prvHeapInit+0xb4>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	2200      	movs	r2, #0
 8009824:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	68fa      	ldr	r2, [r7, #12]
 800982e:	1ad2      	subs	r2, r2, r3
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009834:	4b0c      	ldr	r3, [pc, #48]	; (8009868 <prvHeapInit+0xb4>)
 8009836:	681a      	ldr	r2, [r3, #0]
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	685b      	ldr	r3, [r3, #4]
 8009840:	4a0a      	ldr	r2, [pc, #40]	; (800986c <prvHeapInit+0xb8>)
 8009842:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	685b      	ldr	r3, [r3, #4]
 8009848:	4a09      	ldr	r2, [pc, #36]	; (8009870 <prvHeapInit+0xbc>)
 800984a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800984c:	4b09      	ldr	r3, [pc, #36]	; (8009874 <prvHeapInit+0xc0>)
 800984e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009852:	601a      	str	r2, [r3, #0]
}
 8009854:	bf00      	nop
 8009856:	3714      	adds	r7, #20
 8009858:	46bd      	mov	sp, r7
 800985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985e:	4770      	bx	lr
 8009860:	20000fd8 	.word	0x20000fd8
 8009864:	200029d8 	.word	0x200029d8
 8009868:	200029e0 	.word	0x200029e0
 800986c:	200029e8 	.word	0x200029e8
 8009870:	200029e4 	.word	0x200029e4
 8009874:	200029ec 	.word	0x200029ec

08009878 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009878:	b480      	push	{r7}
 800987a:	b085      	sub	sp, #20
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009880:	4b28      	ldr	r3, [pc, #160]	; (8009924 <prvInsertBlockIntoFreeList+0xac>)
 8009882:	60fb      	str	r3, [r7, #12]
 8009884:	e002      	b.n	800988c <prvInsertBlockIntoFreeList+0x14>
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	60fb      	str	r3, [r7, #12]
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	687a      	ldr	r2, [r7, #4]
 8009892:	429a      	cmp	r2, r3
 8009894:	d8f7      	bhi.n	8009886 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	685b      	ldr	r3, [r3, #4]
 800989e:	68ba      	ldr	r2, [r7, #8]
 80098a0:	4413      	add	r3, r2
 80098a2:	687a      	ldr	r2, [r7, #4]
 80098a4:	429a      	cmp	r2, r3
 80098a6:	d108      	bne.n	80098ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	685a      	ldr	r2, [r3, #4]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	685b      	ldr	r3, [r3, #4]
 80098b0:	441a      	add	r2, r3
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	685b      	ldr	r3, [r3, #4]
 80098c2:	68ba      	ldr	r2, [r7, #8]
 80098c4:	441a      	add	r2, r3
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	429a      	cmp	r2, r3
 80098cc:	d118      	bne.n	8009900 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681a      	ldr	r2, [r3, #0]
 80098d2:	4b15      	ldr	r3, [pc, #84]	; (8009928 <prvInsertBlockIntoFreeList+0xb0>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	429a      	cmp	r2, r3
 80098d8:	d00d      	beq.n	80098f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	685a      	ldr	r2, [r3, #4]
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	685b      	ldr	r3, [r3, #4]
 80098e4:	441a      	add	r2, r3
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	681a      	ldr	r2, [r3, #0]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	601a      	str	r2, [r3, #0]
 80098f4:	e008      	b.n	8009908 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80098f6:	4b0c      	ldr	r3, [pc, #48]	; (8009928 <prvInsertBlockIntoFreeList+0xb0>)
 80098f8:	681a      	ldr	r2, [r3, #0]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	601a      	str	r2, [r3, #0]
 80098fe:	e003      	b.n	8009908 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681a      	ldr	r2, [r3, #0]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009908:	68fa      	ldr	r2, [r7, #12]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	429a      	cmp	r2, r3
 800990e:	d002      	beq.n	8009916 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	687a      	ldr	r2, [r7, #4]
 8009914:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009916:	bf00      	nop
 8009918:	3714      	adds	r7, #20
 800991a:	46bd      	mov	sp, r7
 800991c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009920:	4770      	bx	lr
 8009922:	bf00      	nop
 8009924:	200029d8 	.word	0x200029d8
 8009928:	200029e0 	.word	0x200029e0

0800992c <siprintf>:
 800992c:	b40e      	push	{r1, r2, r3}
 800992e:	b500      	push	{lr}
 8009930:	b09c      	sub	sp, #112	; 0x70
 8009932:	ab1d      	add	r3, sp, #116	; 0x74
 8009934:	9002      	str	r0, [sp, #8]
 8009936:	9006      	str	r0, [sp, #24]
 8009938:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800993c:	4809      	ldr	r0, [pc, #36]	; (8009964 <siprintf+0x38>)
 800993e:	9107      	str	r1, [sp, #28]
 8009940:	9104      	str	r1, [sp, #16]
 8009942:	4909      	ldr	r1, [pc, #36]	; (8009968 <siprintf+0x3c>)
 8009944:	f853 2b04 	ldr.w	r2, [r3], #4
 8009948:	9105      	str	r1, [sp, #20]
 800994a:	6800      	ldr	r0, [r0, #0]
 800994c:	9301      	str	r3, [sp, #4]
 800994e:	a902      	add	r1, sp, #8
 8009950:	f000 f9a0 	bl	8009c94 <_svfiprintf_r>
 8009954:	9b02      	ldr	r3, [sp, #8]
 8009956:	2200      	movs	r2, #0
 8009958:	701a      	strb	r2, [r3, #0]
 800995a:	b01c      	add	sp, #112	; 0x70
 800995c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009960:	b003      	add	sp, #12
 8009962:	4770      	bx	lr
 8009964:	2000005c 	.word	0x2000005c
 8009968:	ffff0208 	.word	0xffff0208

0800996c <memset>:
 800996c:	4402      	add	r2, r0
 800996e:	4603      	mov	r3, r0
 8009970:	4293      	cmp	r3, r2
 8009972:	d100      	bne.n	8009976 <memset+0xa>
 8009974:	4770      	bx	lr
 8009976:	f803 1b01 	strb.w	r1, [r3], #1
 800997a:	e7f9      	b.n	8009970 <memset+0x4>

0800997c <__errno>:
 800997c:	4b01      	ldr	r3, [pc, #4]	; (8009984 <__errno+0x8>)
 800997e:	6818      	ldr	r0, [r3, #0]
 8009980:	4770      	bx	lr
 8009982:	bf00      	nop
 8009984:	2000005c 	.word	0x2000005c

08009988 <__libc_init_array>:
 8009988:	b570      	push	{r4, r5, r6, lr}
 800998a:	4d0d      	ldr	r5, [pc, #52]	; (80099c0 <__libc_init_array+0x38>)
 800998c:	4c0d      	ldr	r4, [pc, #52]	; (80099c4 <__libc_init_array+0x3c>)
 800998e:	1b64      	subs	r4, r4, r5
 8009990:	10a4      	asrs	r4, r4, #2
 8009992:	2600      	movs	r6, #0
 8009994:	42a6      	cmp	r6, r4
 8009996:	d109      	bne.n	80099ac <__libc_init_array+0x24>
 8009998:	4d0b      	ldr	r5, [pc, #44]	; (80099c8 <__libc_init_array+0x40>)
 800999a:	4c0c      	ldr	r4, [pc, #48]	; (80099cc <__libc_init_array+0x44>)
 800999c:	f000 fc6a 	bl	800a274 <_init>
 80099a0:	1b64      	subs	r4, r4, r5
 80099a2:	10a4      	asrs	r4, r4, #2
 80099a4:	2600      	movs	r6, #0
 80099a6:	42a6      	cmp	r6, r4
 80099a8:	d105      	bne.n	80099b6 <__libc_init_array+0x2e>
 80099aa:	bd70      	pop	{r4, r5, r6, pc}
 80099ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80099b0:	4798      	blx	r3
 80099b2:	3601      	adds	r6, #1
 80099b4:	e7ee      	b.n	8009994 <__libc_init_array+0xc>
 80099b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80099ba:	4798      	blx	r3
 80099bc:	3601      	adds	r6, #1
 80099be:	e7f2      	b.n	80099a6 <__libc_init_array+0x1e>
 80099c0:	0800a64c 	.word	0x0800a64c
 80099c4:	0800a64c 	.word	0x0800a64c
 80099c8:	0800a64c 	.word	0x0800a64c
 80099cc:	0800a650 	.word	0x0800a650

080099d0 <__retarget_lock_acquire_recursive>:
 80099d0:	4770      	bx	lr

080099d2 <__retarget_lock_release_recursive>:
 80099d2:	4770      	bx	lr

080099d4 <memcpy>:
 80099d4:	440a      	add	r2, r1
 80099d6:	4291      	cmp	r1, r2
 80099d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80099dc:	d100      	bne.n	80099e0 <memcpy+0xc>
 80099de:	4770      	bx	lr
 80099e0:	b510      	push	{r4, lr}
 80099e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099ea:	4291      	cmp	r1, r2
 80099ec:	d1f9      	bne.n	80099e2 <memcpy+0xe>
 80099ee:	bd10      	pop	{r4, pc}

080099f0 <_free_r>:
 80099f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80099f2:	2900      	cmp	r1, #0
 80099f4:	d044      	beq.n	8009a80 <_free_r+0x90>
 80099f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099fa:	9001      	str	r0, [sp, #4]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	f1a1 0404 	sub.w	r4, r1, #4
 8009a02:	bfb8      	it	lt
 8009a04:	18e4      	addlt	r4, r4, r3
 8009a06:	f000 f8df 	bl	8009bc8 <__malloc_lock>
 8009a0a:	4a1e      	ldr	r2, [pc, #120]	; (8009a84 <_free_r+0x94>)
 8009a0c:	9801      	ldr	r0, [sp, #4]
 8009a0e:	6813      	ldr	r3, [r2, #0]
 8009a10:	b933      	cbnz	r3, 8009a20 <_free_r+0x30>
 8009a12:	6063      	str	r3, [r4, #4]
 8009a14:	6014      	str	r4, [r2, #0]
 8009a16:	b003      	add	sp, #12
 8009a18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a1c:	f000 b8da 	b.w	8009bd4 <__malloc_unlock>
 8009a20:	42a3      	cmp	r3, r4
 8009a22:	d908      	bls.n	8009a36 <_free_r+0x46>
 8009a24:	6825      	ldr	r5, [r4, #0]
 8009a26:	1961      	adds	r1, r4, r5
 8009a28:	428b      	cmp	r3, r1
 8009a2a:	bf01      	itttt	eq
 8009a2c:	6819      	ldreq	r1, [r3, #0]
 8009a2e:	685b      	ldreq	r3, [r3, #4]
 8009a30:	1949      	addeq	r1, r1, r5
 8009a32:	6021      	streq	r1, [r4, #0]
 8009a34:	e7ed      	b.n	8009a12 <_free_r+0x22>
 8009a36:	461a      	mov	r2, r3
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	b10b      	cbz	r3, 8009a40 <_free_r+0x50>
 8009a3c:	42a3      	cmp	r3, r4
 8009a3e:	d9fa      	bls.n	8009a36 <_free_r+0x46>
 8009a40:	6811      	ldr	r1, [r2, #0]
 8009a42:	1855      	adds	r5, r2, r1
 8009a44:	42a5      	cmp	r5, r4
 8009a46:	d10b      	bne.n	8009a60 <_free_r+0x70>
 8009a48:	6824      	ldr	r4, [r4, #0]
 8009a4a:	4421      	add	r1, r4
 8009a4c:	1854      	adds	r4, r2, r1
 8009a4e:	42a3      	cmp	r3, r4
 8009a50:	6011      	str	r1, [r2, #0]
 8009a52:	d1e0      	bne.n	8009a16 <_free_r+0x26>
 8009a54:	681c      	ldr	r4, [r3, #0]
 8009a56:	685b      	ldr	r3, [r3, #4]
 8009a58:	6053      	str	r3, [r2, #4]
 8009a5a:	440c      	add	r4, r1
 8009a5c:	6014      	str	r4, [r2, #0]
 8009a5e:	e7da      	b.n	8009a16 <_free_r+0x26>
 8009a60:	d902      	bls.n	8009a68 <_free_r+0x78>
 8009a62:	230c      	movs	r3, #12
 8009a64:	6003      	str	r3, [r0, #0]
 8009a66:	e7d6      	b.n	8009a16 <_free_r+0x26>
 8009a68:	6825      	ldr	r5, [r4, #0]
 8009a6a:	1961      	adds	r1, r4, r5
 8009a6c:	428b      	cmp	r3, r1
 8009a6e:	bf04      	itt	eq
 8009a70:	6819      	ldreq	r1, [r3, #0]
 8009a72:	685b      	ldreq	r3, [r3, #4]
 8009a74:	6063      	str	r3, [r4, #4]
 8009a76:	bf04      	itt	eq
 8009a78:	1949      	addeq	r1, r1, r5
 8009a7a:	6021      	streq	r1, [r4, #0]
 8009a7c:	6054      	str	r4, [r2, #4]
 8009a7e:	e7ca      	b.n	8009a16 <_free_r+0x26>
 8009a80:	b003      	add	sp, #12
 8009a82:	bd30      	pop	{r4, r5, pc}
 8009a84:	20002b30 	.word	0x20002b30

08009a88 <sbrk_aligned>:
 8009a88:	b570      	push	{r4, r5, r6, lr}
 8009a8a:	4e0e      	ldr	r6, [pc, #56]	; (8009ac4 <sbrk_aligned+0x3c>)
 8009a8c:	460c      	mov	r4, r1
 8009a8e:	6831      	ldr	r1, [r6, #0]
 8009a90:	4605      	mov	r5, r0
 8009a92:	b911      	cbnz	r1, 8009a9a <sbrk_aligned+0x12>
 8009a94:	f000 fba6 	bl	800a1e4 <_sbrk_r>
 8009a98:	6030      	str	r0, [r6, #0]
 8009a9a:	4621      	mov	r1, r4
 8009a9c:	4628      	mov	r0, r5
 8009a9e:	f000 fba1 	bl	800a1e4 <_sbrk_r>
 8009aa2:	1c43      	adds	r3, r0, #1
 8009aa4:	d00a      	beq.n	8009abc <sbrk_aligned+0x34>
 8009aa6:	1cc4      	adds	r4, r0, #3
 8009aa8:	f024 0403 	bic.w	r4, r4, #3
 8009aac:	42a0      	cmp	r0, r4
 8009aae:	d007      	beq.n	8009ac0 <sbrk_aligned+0x38>
 8009ab0:	1a21      	subs	r1, r4, r0
 8009ab2:	4628      	mov	r0, r5
 8009ab4:	f000 fb96 	bl	800a1e4 <_sbrk_r>
 8009ab8:	3001      	adds	r0, #1
 8009aba:	d101      	bne.n	8009ac0 <sbrk_aligned+0x38>
 8009abc:	f04f 34ff 	mov.w	r4, #4294967295
 8009ac0:	4620      	mov	r0, r4
 8009ac2:	bd70      	pop	{r4, r5, r6, pc}
 8009ac4:	20002b34 	.word	0x20002b34

08009ac8 <_malloc_r>:
 8009ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009acc:	1ccd      	adds	r5, r1, #3
 8009ace:	f025 0503 	bic.w	r5, r5, #3
 8009ad2:	3508      	adds	r5, #8
 8009ad4:	2d0c      	cmp	r5, #12
 8009ad6:	bf38      	it	cc
 8009ad8:	250c      	movcc	r5, #12
 8009ada:	2d00      	cmp	r5, #0
 8009adc:	4607      	mov	r7, r0
 8009ade:	db01      	blt.n	8009ae4 <_malloc_r+0x1c>
 8009ae0:	42a9      	cmp	r1, r5
 8009ae2:	d905      	bls.n	8009af0 <_malloc_r+0x28>
 8009ae4:	230c      	movs	r3, #12
 8009ae6:	603b      	str	r3, [r7, #0]
 8009ae8:	2600      	movs	r6, #0
 8009aea:	4630      	mov	r0, r6
 8009aec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009af0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009bc4 <_malloc_r+0xfc>
 8009af4:	f000 f868 	bl	8009bc8 <__malloc_lock>
 8009af8:	f8d8 3000 	ldr.w	r3, [r8]
 8009afc:	461c      	mov	r4, r3
 8009afe:	bb5c      	cbnz	r4, 8009b58 <_malloc_r+0x90>
 8009b00:	4629      	mov	r1, r5
 8009b02:	4638      	mov	r0, r7
 8009b04:	f7ff ffc0 	bl	8009a88 <sbrk_aligned>
 8009b08:	1c43      	adds	r3, r0, #1
 8009b0a:	4604      	mov	r4, r0
 8009b0c:	d155      	bne.n	8009bba <_malloc_r+0xf2>
 8009b0e:	f8d8 4000 	ldr.w	r4, [r8]
 8009b12:	4626      	mov	r6, r4
 8009b14:	2e00      	cmp	r6, #0
 8009b16:	d145      	bne.n	8009ba4 <_malloc_r+0xdc>
 8009b18:	2c00      	cmp	r4, #0
 8009b1a:	d048      	beq.n	8009bae <_malloc_r+0xe6>
 8009b1c:	6823      	ldr	r3, [r4, #0]
 8009b1e:	4631      	mov	r1, r6
 8009b20:	4638      	mov	r0, r7
 8009b22:	eb04 0903 	add.w	r9, r4, r3
 8009b26:	f000 fb5d 	bl	800a1e4 <_sbrk_r>
 8009b2a:	4581      	cmp	r9, r0
 8009b2c:	d13f      	bne.n	8009bae <_malloc_r+0xe6>
 8009b2e:	6821      	ldr	r1, [r4, #0]
 8009b30:	1a6d      	subs	r5, r5, r1
 8009b32:	4629      	mov	r1, r5
 8009b34:	4638      	mov	r0, r7
 8009b36:	f7ff ffa7 	bl	8009a88 <sbrk_aligned>
 8009b3a:	3001      	adds	r0, #1
 8009b3c:	d037      	beq.n	8009bae <_malloc_r+0xe6>
 8009b3e:	6823      	ldr	r3, [r4, #0]
 8009b40:	442b      	add	r3, r5
 8009b42:	6023      	str	r3, [r4, #0]
 8009b44:	f8d8 3000 	ldr.w	r3, [r8]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d038      	beq.n	8009bbe <_malloc_r+0xf6>
 8009b4c:	685a      	ldr	r2, [r3, #4]
 8009b4e:	42a2      	cmp	r2, r4
 8009b50:	d12b      	bne.n	8009baa <_malloc_r+0xe2>
 8009b52:	2200      	movs	r2, #0
 8009b54:	605a      	str	r2, [r3, #4]
 8009b56:	e00f      	b.n	8009b78 <_malloc_r+0xb0>
 8009b58:	6822      	ldr	r2, [r4, #0]
 8009b5a:	1b52      	subs	r2, r2, r5
 8009b5c:	d41f      	bmi.n	8009b9e <_malloc_r+0xd6>
 8009b5e:	2a0b      	cmp	r2, #11
 8009b60:	d917      	bls.n	8009b92 <_malloc_r+0xca>
 8009b62:	1961      	adds	r1, r4, r5
 8009b64:	42a3      	cmp	r3, r4
 8009b66:	6025      	str	r5, [r4, #0]
 8009b68:	bf18      	it	ne
 8009b6a:	6059      	strne	r1, [r3, #4]
 8009b6c:	6863      	ldr	r3, [r4, #4]
 8009b6e:	bf08      	it	eq
 8009b70:	f8c8 1000 	streq.w	r1, [r8]
 8009b74:	5162      	str	r2, [r4, r5]
 8009b76:	604b      	str	r3, [r1, #4]
 8009b78:	4638      	mov	r0, r7
 8009b7a:	f104 060b 	add.w	r6, r4, #11
 8009b7e:	f000 f829 	bl	8009bd4 <__malloc_unlock>
 8009b82:	f026 0607 	bic.w	r6, r6, #7
 8009b86:	1d23      	adds	r3, r4, #4
 8009b88:	1af2      	subs	r2, r6, r3
 8009b8a:	d0ae      	beq.n	8009aea <_malloc_r+0x22>
 8009b8c:	1b9b      	subs	r3, r3, r6
 8009b8e:	50a3      	str	r3, [r4, r2]
 8009b90:	e7ab      	b.n	8009aea <_malloc_r+0x22>
 8009b92:	42a3      	cmp	r3, r4
 8009b94:	6862      	ldr	r2, [r4, #4]
 8009b96:	d1dd      	bne.n	8009b54 <_malloc_r+0x8c>
 8009b98:	f8c8 2000 	str.w	r2, [r8]
 8009b9c:	e7ec      	b.n	8009b78 <_malloc_r+0xb0>
 8009b9e:	4623      	mov	r3, r4
 8009ba0:	6864      	ldr	r4, [r4, #4]
 8009ba2:	e7ac      	b.n	8009afe <_malloc_r+0x36>
 8009ba4:	4634      	mov	r4, r6
 8009ba6:	6876      	ldr	r6, [r6, #4]
 8009ba8:	e7b4      	b.n	8009b14 <_malloc_r+0x4c>
 8009baa:	4613      	mov	r3, r2
 8009bac:	e7cc      	b.n	8009b48 <_malloc_r+0x80>
 8009bae:	230c      	movs	r3, #12
 8009bb0:	603b      	str	r3, [r7, #0]
 8009bb2:	4638      	mov	r0, r7
 8009bb4:	f000 f80e 	bl	8009bd4 <__malloc_unlock>
 8009bb8:	e797      	b.n	8009aea <_malloc_r+0x22>
 8009bba:	6025      	str	r5, [r4, #0]
 8009bbc:	e7dc      	b.n	8009b78 <_malloc_r+0xb0>
 8009bbe:	605b      	str	r3, [r3, #4]
 8009bc0:	deff      	udf	#255	; 0xff
 8009bc2:	bf00      	nop
 8009bc4:	20002b30 	.word	0x20002b30

08009bc8 <__malloc_lock>:
 8009bc8:	4801      	ldr	r0, [pc, #4]	; (8009bd0 <__malloc_lock+0x8>)
 8009bca:	f7ff bf01 	b.w	80099d0 <__retarget_lock_acquire_recursive>
 8009bce:	bf00      	nop
 8009bd0:	20002b2c 	.word	0x20002b2c

08009bd4 <__malloc_unlock>:
 8009bd4:	4801      	ldr	r0, [pc, #4]	; (8009bdc <__malloc_unlock+0x8>)
 8009bd6:	f7ff befc 	b.w	80099d2 <__retarget_lock_release_recursive>
 8009bda:	bf00      	nop
 8009bdc:	20002b2c 	.word	0x20002b2c

08009be0 <__ssputs_r>:
 8009be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009be4:	688e      	ldr	r6, [r1, #8]
 8009be6:	461f      	mov	r7, r3
 8009be8:	42be      	cmp	r6, r7
 8009bea:	680b      	ldr	r3, [r1, #0]
 8009bec:	4682      	mov	sl, r0
 8009bee:	460c      	mov	r4, r1
 8009bf0:	4690      	mov	r8, r2
 8009bf2:	d82c      	bhi.n	8009c4e <__ssputs_r+0x6e>
 8009bf4:	898a      	ldrh	r2, [r1, #12]
 8009bf6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009bfa:	d026      	beq.n	8009c4a <__ssputs_r+0x6a>
 8009bfc:	6965      	ldr	r5, [r4, #20]
 8009bfe:	6909      	ldr	r1, [r1, #16]
 8009c00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c04:	eba3 0901 	sub.w	r9, r3, r1
 8009c08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c0c:	1c7b      	adds	r3, r7, #1
 8009c0e:	444b      	add	r3, r9
 8009c10:	106d      	asrs	r5, r5, #1
 8009c12:	429d      	cmp	r5, r3
 8009c14:	bf38      	it	cc
 8009c16:	461d      	movcc	r5, r3
 8009c18:	0553      	lsls	r3, r2, #21
 8009c1a:	d527      	bpl.n	8009c6c <__ssputs_r+0x8c>
 8009c1c:	4629      	mov	r1, r5
 8009c1e:	f7ff ff53 	bl	8009ac8 <_malloc_r>
 8009c22:	4606      	mov	r6, r0
 8009c24:	b360      	cbz	r0, 8009c80 <__ssputs_r+0xa0>
 8009c26:	6921      	ldr	r1, [r4, #16]
 8009c28:	464a      	mov	r2, r9
 8009c2a:	f7ff fed3 	bl	80099d4 <memcpy>
 8009c2e:	89a3      	ldrh	r3, [r4, #12]
 8009c30:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009c34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c38:	81a3      	strh	r3, [r4, #12]
 8009c3a:	6126      	str	r6, [r4, #16]
 8009c3c:	6165      	str	r5, [r4, #20]
 8009c3e:	444e      	add	r6, r9
 8009c40:	eba5 0509 	sub.w	r5, r5, r9
 8009c44:	6026      	str	r6, [r4, #0]
 8009c46:	60a5      	str	r5, [r4, #8]
 8009c48:	463e      	mov	r6, r7
 8009c4a:	42be      	cmp	r6, r7
 8009c4c:	d900      	bls.n	8009c50 <__ssputs_r+0x70>
 8009c4e:	463e      	mov	r6, r7
 8009c50:	6820      	ldr	r0, [r4, #0]
 8009c52:	4632      	mov	r2, r6
 8009c54:	4641      	mov	r1, r8
 8009c56:	f000 faab 	bl	800a1b0 <memmove>
 8009c5a:	68a3      	ldr	r3, [r4, #8]
 8009c5c:	1b9b      	subs	r3, r3, r6
 8009c5e:	60a3      	str	r3, [r4, #8]
 8009c60:	6823      	ldr	r3, [r4, #0]
 8009c62:	4433      	add	r3, r6
 8009c64:	6023      	str	r3, [r4, #0]
 8009c66:	2000      	movs	r0, #0
 8009c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c6c:	462a      	mov	r2, r5
 8009c6e:	f000 fac9 	bl	800a204 <_realloc_r>
 8009c72:	4606      	mov	r6, r0
 8009c74:	2800      	cmp	r0, #0
 8009c76:	d1e0      	bne.n	8009c3a <__ssputs_r+0x5a>
 8009c78:	6921      	ldr	r1, [r4, #16]
 8009c7a:	4650      	mov	r0, sl
 8009c7c:	f7ff feb8 	bl	80099f0 <_free_r>
 8009c80:	230c      	movs	r3, #12
 8009c82:	f8ca 3000 	str.w	r3, [sl]
 8009c86:	89a3      	ldrh	r3, [r4, #12]
 8009c88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c8c:	81a3      	strh	r3, [r4, #12]
 8009c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8009c92:	e7e9      	b.n	8009c68 <__ssputs_r+0x88>

08009c94 <_svfiprintf_r>:
 8009c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c98:	4698      	mov	r8, r3
 8009c9a:	898b      	ldrh	r3, [r1, #12]
 8009c9c:	061b      	lsls	r3, r3, #24
 8009c9e:	b09d      	sub	sp, #116	; 0x74
 8009ca0:	4607      	mov	r7, r0
 8009ca2:	460d      	mov	r5, r1
 8009ca4:	4614      	mov	r4, r2
 8009ca6:	d50e      	bpl.n	8009cc6 <_svfiprintf_r+0x32>
 8009ca8:	690b      	ldr	r3, [r1, #16]
 8009caa:	b963      	cbnz	r3, 8009cc6 <_svfiprintf_r+0x32>
 8009cac:	2140      	movs	r1, #64	; 0x40
 8009cae:	f7ff ff0b 	bl	8009ac8 <_malloc_r>
 8009cb2:	6028      	str	r0, [r5, #0]
 8009cb4:	6128      	str	r0, [r5, #16]
 8009cb6:	b920      	cbnz	r0, 8009cc2 <_svfiprintf_r+0x2e>
 8009cb8:	230c      	movs	r3, #12
 8009cba:	603b      	str	r3, [r7, #0]
 8009cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8009cc0:	e0d0      	b.n	8009e64 <_svfiprintf_r+0x1d0>
 8009cc2:	2340      	movs	r3, #64	; 0x40
 8009cc4:	616b      	str	r3, [r5, #20]
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	9309      	str	r3, [sp, #36]	; 0x24
 8009cca:	2320      	movs	r3, #32
 8009ccc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009cd0:	f8cd 800c 	str.w	r8, [sp, #12]
 8009cd4:	2330      	movs	r3, #48	; 0x30
 8009cd6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009e7c <_svfiprintf_r+0x1e8>
 8009cda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009cde:	f04f 0901 	mov.w	r9, #1
 8009ce2:	4623      	mov	r3, r4
 8009ce4:	469a      	mov	sl, r3
 8009ce6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cea:	b10a      	cbz	r2, 8009cf0 <_svfiprintf_r+0x5c>
 8009cec:	2a25      	cmp	r2, #37	; 0x25
 8009cee:	d1f9      	bne.n	8009ce4 <_svfiprintf_r+0x50>
 8009cf0:	ebba 0b04 	subs.w	fp, sl, r4
 8009cf4:	d00b      	beq.n	8009d0e <_svfiprintf_r+0x7a>
 8009cf6:	465b      	mov	r3, fp
 8009cf8:	4622      	mov	r2, r4
 8009cfa:	4629      	mov	r1, r5
 8009cfc:	4638      	mov	r0, r7
 8009cfe:	f7ff ff6f 	bl	8009be0 <__ssputs_r>
 8009d02:	3001      	adds	r0, #1
 8009d04:	f000 80a9 	beq.w	8009e5a <_svfiprintf_r+0x1c6>
 8009d08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d0a:	445a      	add	r2, fp
 8009d0c:	9209      	str	r2, [sp, #36]	; 0x24
 8009d0e:	f89a 3000 	ldrb.w	r3, [sl]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	f000 80a1 	beq.w	8009e5a <_svfiprintf_r+0x1c6>
 8009d18:	2300      	movs	r3, #0
 8009d1a:	f04f 32ff 	mov.w	r2, #4294967295
 8009d1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d22:	f10a 0a01 	add.w	sl, sl, #1
 8009d26:	9304      	str	r3, [sp, #16]
 8009d28:	9307      	str	r3, [sp, #28]
 8009d2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d2e:	931a      	str	r3, [sp, #104]	; 0x68
 8009d30:	4654      	mov	r4, sl
 8009d32:	2205      	movs	r2, #5
 8009d34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d38:	4850      	ldr	r0, [pc, #320]	; (8009e7c <_svfiprintf_r+0x1e8>)
 8009d3a:	f7f6 fa61 	bl	8000200 <memchr>
 8009d3e:	9a04      	ldr	r2, [sp, #16]
 8009d40:	b9d8      	cbnz	r0, 8009d7a <_svfiprintf_r+0xe6>
 8009d42:	06d0      	lsls	r0, r2, #27
 8009d44:	bf44      	itt	mi
 8009d46:	2320      	movmi	r3, #32
 8009d48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d4c:	0711      	lsls	r1, r2, #28
 8009d4e:	bf44      	itt	mi
 8009d50:	232b      	movmi	r3, #43	; 0x2b
 8009d52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d56:	f89a 3000 	ldrb.w	r3, [sl]
 8009d5a:	2b2a      	cmp	r3, #42	; 0x2a
 8009d5c:	d015      	beq.n	8009d8a <_svfiprintf_r+0xf6>
 8009d5e:	9a07      	ldr	r2, [sp, #28]
 8009d60:	4654      	mov	r4, sl
 8009d62:	2000      	movs	r0, #0
 8009d64:	f04f 0c0a 	mov.w	ip, #10
 8009d68:	4621      	mov	r1, r4
 8009d6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d6e:	3b30      	subs	r3, #48	; 0x30
 8009d70:	2b09      	cmp	r3, #9
 8009d72:	d94d      	bls.n	8009e10 <_svfiprintf_r+0x17c>
 8009d74:	b1b0      	cbz	r0, 8009da4 <_svfiprintf_r+0x110>
 8009d76:	9207      	str	r2, [sp, #28]
 8009d78:	e014      	b.n	8009da4 <_svfiprintf_r+0x110>
 8009d7a:	eba0 0308 	sub.w	r3, r0, r8
 8009d7e:	fa09 f303 	lsl.w	r3, r9, r3
 8009d82:	4313      	orrs	r3, r2
 8009d84:	9304      	str	r3, [sp, #16]
 8009d86:	46a2      	mov	sl, r4
 8009d88:	e7d2      	b.n	8009d30 <_svfiprintf_r+0x9c>
 8009d8a:	9b03      	ldr	r3, [sp, #12]
 8009d8c:	1d19      	adds	r1, r3, #4
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	9103      	str	r1, [sp, #12]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	bfbb      	ittet	lt
 8009d96:	425b      	neglt	r3, r3
 8009d98:	f042 0202 	orrlt.w	r2, r2, #2
 8009d9c:	9307      	strge	r3, [sp, #28]
 8009d9e:	9307      	strlt	r3, [sp, #28]
 8009da0:	bfb8      	it	lt
 8009da2:	9204      	strlt	r2, [sp, #16]
 8009da4:	7823      	ldrb	r3, [r4, #0]
 8009da6:	2b2e      	cmp	r3, #46	; 0x2e
 8009da8:	d10c      	bne.n	8009dc4 <_svfiprintf_r+0x130>
 8009daa:	7863      	ldrb	r3, [r4, #1]
 8009dac:	2b2a      	cmp	r3, #42	; 0x2a
 8009dae:	d134      	bne.n	8009e1a <_svfiprintf_r+0x186>
 8009db0:	9b03      	ldr	r3, [sp, #12]
 8009db2:	1d1a      	adds	r2, r3, #4
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	9203      	str	r2, [sp, #12]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	bfb8      	it	lt
 8009dbc:	f04f 33ff 	movlt.w	r3, #4294967295
 8009dc0:	3402      	adds	r4, #2
 8009dc2:	9305      	str	r3, [sp, #20]
 8009dc4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009e8c <_svfiprintf_r+0x1f8>
 8009dc8:	7821      	ldrb	r1, [r4, #0]
 8009dca:	2203      	movs	r2, #3
 8009dcc:	4650      	mov	r0, sl
 8009dce:	f7f6 fa17 	bl	8000200 <memchr>
 8009dd2:	b138      	cbz	r0, 8009de4 <_svfiprintf_r+0x150>
 8009dd4:	9b04      	ldr	r3, [sp, #16]
 8009dd6:	eba0 000a 	sub.w	r0, r0, sl
 8009dda:	2240      	movs	r2, #64	; 0x40
 8009ddc:	4082      	lsls	r2, r0
 8009dde:	4313      	orrs	r3, r2
 8009de0:	3401      	adds	r4, #1
 8009de2:	9304      	str	r3, [sp, #16]
 8009de4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009de8:	4825      	ldr	r0, [pc, #148]	; (8009e80 <_svfiprintf_r+0x1ec>)
 8009dea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009dee:	2206      	movs	r2, #6
 8009df0:	f7f6 fa06 	bl	8000200 <memchr>
 8009df4:	2800      	cmp	r0, #0
 8009df6:	d038      	beq.n	8009e6a <_svfiprintf_r+0x1d6>
 8009df8:	4b22      	ldr	r3, [pc, #136]	; (8009e84 <_svfiprintf_r+0x1f0>)
 8009dfa:	bb1b      	cbnz	r3, 8009e44 <_svfiprintf_r+0x1b0>
 8009dfc:	9b03      	ldr	r3, [sp, #12]
 8009dfe:	3307      	adds	r3, #7
 8009e00:	f023 0307 	bic.w	r3, r3, #7
 8009e04:	3308      	adds	r3, #8
 8009e06:	9303      	str	r3, [sp, #12]
 8009e08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e0a:	4433      	add	r3, r6
 8009e0c:	9309      	str	r3, [sp, #36]	; 0x24
 8009e0e:	e768      	b.n	8009ce2 <_svfiprintf_r+0x4e>
 8009e10:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e14:	460c      	mov	r4, r1
 8009e16:	2001      	movs	r0, #1
 8009e18:	e7a6      	b.n	8009d68 <_svfiprintf_r+0xd4>
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	3401      	adds	r4, #1
 8009e1e:	9305      	str	r3, [sp, #20]
 8009e20:	4619      	mov	r1, r3
 8009e22:	f04f 0c0a 	mov.w	ip, #10
 8009e26:	4620      	mov	r0, r4
 8009e28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e2c:	3a30      	subs	r2, #48	; 0x30
 8009e2e:	2a09      	cmp	r2, #9
 8009e30:	d903      	bls.n	8009e3a <_svfiprintf_r+0x1a6>
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d0c6      	beq.n	8009dc4 <_svfiprintf_r+0x130>
 8009e36:	9105      	str	r1, [sp, #20]
 8009e38:	e7c4      	b.n	8009dc4 <_svfiprintf_r+0x130>
 8009e3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e3e:	4604      	mov	r4, r0
 8009e40:	2301      	movs	r3, #1
 8009e42:	e7f0      	b.n	8009e26 <_svfiprintf_r+0x192>
 8009e44:	ab03      	add	r3, sp, #12
 8009e46:	9300      	str	r3, [sp, #0]
 8009e48:	462a      	mov	r2, r5
 8009e4a:	4b0f      	ldr	r3, [pc, #60]	; (8009e88 <_svfiprintf_r+0x1f4>)
 8009e4c:	a904      	add	r1, sp, #16
 8009e4e:	4638      	mov	r0, r7
 8009e50:	f3af 8000 	nop.w
 8009e54:	1c42      	adds	r2, r0, #1
 8009e56:	4606      	mov	r6, r0
 8009e58:	d1d6      	bne.n	8009e08 <_svfiprintf_r+0x174>
 8009e5a:	89ab      	ldrh	r3, [r5, #12]
 8009e5c:	065b      	lsls	r3, r3, #25
 8009e5e:	f53f af2d 	bmi.w	8009cbc <_svfiprintf_r+0x28>
 8009e62:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e64:	b01d      	add	sp, #116	; 0x74
 8009e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e6a:	ab03      	add	r3, sp, #12
 8009e6c:	9300      	str	r3, [sp, #0]
 8009e6e:	462a      	mov	r2, r5
 8009e70:	4b05      	ldr	r3, [pc, #20]	; (8009e88 <_svfiprintf_r+0x1f4>)
 8009e72:	a904      	add	r1, sp, #16
 8009e74:	4638      	mov	r0, r7
 8009e76:	f000 f879 	bl	8009f6c <_printf_i>
 8009e7a:	e7eb      	b.n	8009e54 <_svfiprintf_r+0x1c0>
 8009e7c:	0800a618 	.word	0x0800a618
 8009e80:	0800a622 	.word	0x0800a622
 8009e84:	00000000 	.word	0x00000000
 8009e88:	08009be1 	.word	0x08009be1
 8009e8c:	0800a61e 	.word	0x0800a61e

08009e90 <_printf_common>:
 8009e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e94:	4616      	mov	r6, r2
 8009e96:	4699      	mov	r9, r3
 8009e98:	688a      	ldr	r2, [r1, #8]
 8009e9a:	690b      	ldr	r3, [r1, #16]
 8009e9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	bfb8      	it	lt
 8009ea4:	4613      	movlt	r3, r2
 8009ea6:	6033      	str	r3, [r6, #0]
 8009ea8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009eac:	4607      	mov	r7, r0
 8009eae:	460c      	mov	r4, r1
 8009eb0:	b10a      	cbz	r2, 8009eb6 <_printf_common+0x26>
 8009eb2:	3301      	adds	r3, #1
 8009eb4:	6033      	str	r3, [r6, #0]
 8009eb6:	6823      	ldr	r3, [r4, #0]
 8009eb8:	0699      	lsls	r1, r3, #26
 8009eba:	bf42      	ittt	mi
 8009ebc:	6833      	ldrmi	r3, [r6, #0]
 8009ebe:	3302      	addmi	r3, #2
 8009ec0:	6033      	strmi	r3, [r6, #0]
 8009ec2:	6825      	ldr	r5, [r4, #0]
 8009ec4:	f015 0506 	ands.w	r5, r5, #6
 8009ec8:	d106      	bne.n	8009ed8 <_printf_common+0x48>
 8009eca:	f104 0a19 	add.w	sl, r4, #25
 8009ece:	68e3      	ldr	r3, [r4, #12]
 8009ed0:	6832      	ldr	r2, [r6, #0]
 8009ed2:	1a9b      	subs	r3, r3, r2
 8009ed4:	42ab      	cmp	r3, r5
 8009ed6:	dc26      	bgt.n	8009f26 <_printf_common+0x96>
 8009ed8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009edc:	1e13      	subs	r3, r2, #0
 8009ede:	6822      	ldr	r2, [r4, #0]
 8009ee0:	bf18      	it	ne
 8009ee2:	2301      	movne	r3, #1
 8009ee4:	0692      	lsls	r2, r2, #26
 8009ee6:	d42b      	bmi.n	8009f40 <_printf_common+0xb0>
 8009ee8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009eec:	4649      	mov	r1, r9
 8009eee:	4638      	mov	r0, r7
 8009ef0:	47c0      	blx	r8
 8009ef2:	3001      	adds	r0, #1
 8009ef4:	d01e      	beq.n	8009f34 <_printf_common+0xa4>
 8009ef6:	6823      	ldr	r3, [r4, #0]
 8009ef8:	6922      	ldr	r2, [r4, #16]
 8009efa:	f003 0306 	and.w	r3, r3, #6
 8009efe:	2b04      	cmp	r3, #4
 8009f00:	bf02      	ittt	eq
 8009f02:	68e5      	ldreq	r5, [r4, #12]
 8009f04:	6833      	ldreq	r3, [r6, #0]
 8009f06:	1aed      	subeq	r5, r5, r3
 8009f08:	68a3      	ldr	r3, [r4, #8]
 8009f0a:	bf0c      	ite	eq
 8009f0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f10:	2500      	movne	r5, #0
 8009f12:	4293      	cmp	r3, r2
 8009f14:	bfc4      	itt	gt
 8009f16:	1a9b      	subgt	r3, r3, r2
 8009f18:	18ed      	addgt	r5, r5, r3
 8009f1a:	2600      	movs	r6, #0
 8009f1c:	341a      	adds	r4, #26
 8009f1e:	42b5      	cmp	r5, r6
 8009f20:	d11a      	bne.n	8009f58 <_printf_common+0xc8>
 8009f22:	2000      	movs	r0, #0
 8009f24:	e008      	b.n	8009f38 <_printf_common+0xa8>
 8009f26:	2301      	movs	r3, #1
 8009f28:	4652      	mov	r2, sl
 8009f2a:	4649      	mov	r1, r9
 8009f2c:	4638      	mov	r0, r7
 8009f2e:	47c0      	blx	r8
 8009f30:	3001      	adds	r0, #1
 8009f32:	d103      	bne.n	8009f3c <_printf_common+0xac>
 8009f34:	f04f 30ff 	mov.w	r0, #4294967295
 8009f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f3c:	3501      	adds	r5, #1
 8009f3e:	e7c6      	b.n	8009ece <_printf_common+0x3e>
 8009f40:	18e1      	adds	r1, r4, r3
 8009f42:	1c5a      	adds	r2, r3, #1
 8009f44:	2030      	movs	r0, #48	; 0x30
 8009f46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009f4a:	4422      	add	r2, r4
 8009f4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009f50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009f54:	3302      	adds	r3, #2
 8009f56:	e7c7      	b.n	8009ee8 <_printf_common+0x58>
 8009f58:	2301      	movs	r3, #1
 8009f5a:	4622      	mov	r2, r4
 8009f5c:	4649      	mov	r1, r9
 8009f5e:	4638      	mov	r0, r7
 8009f60:	47c0      	blx	r8
 8009f62:	3001      	adds	r0, #1
 8009f64:	d0e6      	beq.n	8009f34 <_printf_common+0xa4>
 8009f66:	3601      	adds	r6, #1
 8009f68:	e7d9      	b.n	8009f1e <_printf_common+0x8e>
	...

08009f6c <_printf_i>:
 8009f6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f70:	7e0f      	ldrb	r7, [r1, #24]
 8009f72:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009f74:	2f78      	cmp	r7, #120	; 0x78
 8009f76:	4691      	mov	r9, r2
 8009f78:	4680      	mov	r8, r0
 8009f7a:	460c      	mov	r4, r1
 8009f7c:	469a      	mov	sl, r3
 8009f7e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009f82:	d807      	bhi.n	8009f94 <_printf_i+0x28>
 8009f84:	2f62      	cmp	r7, #98	; 0x62
 8009f86:	d80a      	bhi.n	8009f9e <_printf_i+0x32>
 8009f88:	2f00      	cmp	r7, #0
 8009f8a:	f000 80d4 	beq.w	800a136 <_printf_i+0x1ca>
 8009f8e:	2f58      	cmp	r7, #88	; 0x58
 8009f90:	f000 80c0 	beq.w	800a114 <_printf_i+0x1a8>
 8009f94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009f9c:	e03a      	b.n	800a014 <_printf_i+0xa8>
 8009f9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009fa2:	2b15      	cmp	r3, #21
 8009fa4:	d8f6      	bhi.n	8009f94 <_printf_i+0x28>
 8009fa6:	a101      	add	r1, pc, #4	; (adr r1, 8009fac <_printf_i+0x40>)
 8009fa8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009fac:	0800a005 	.word	0x0800a005
 8009fb0:	0800a019 	.word	0x0800a019
 8009fb4:	08009f95 	.word	0x08009f95
 8009fb8:	08009f95 	.word	0x08009f95
 8009fbc:	08009f95 	.word	0x08009f95
 8009fc0:	08009f95 	.word	0x08009f95
 8009fc4:	0800a019 	.word	0x0800a019
 8009fc8:	08009f95 	.word	0x08009f95
 8009fcc:	08009f95 	.word	0x08009f95
 8009fd0:	08009f95 	.word	0x08009f95
 8009fd4:	08009f95 	.word	0x08009f95
 8009fd8:	0800a11d 	.word	0x0800a11d
 8009fdc:	0800a045 	.word	0x0800a045
 8009fe0:	0800a0d7 	.word	0x0800a0d7
 8009fe4:	08009f95 	.word	0x08009f95
 8009fe8:	08009f95 	.word	0x08009f95
 8009fec:	0800a13f 	.word	0x0800a13f
 8009ff0:	08009f95 	.word	0x08009f95
 8009ff4:	0800a045 	.word	0x0800a045
 8009ff8:	08009f95 	.word	0x08009f95
 8009ffc:	08009f95 	.word	0x08009f95
 800a000:	0800a0df 	.word	0x0800a0df
 800a004:	682b      	ldr	r3, [r5, #0]
 800a006:	1d1a      	adds	r2, r3, #4
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	602a      	str	r2, [r5, #0]
 800a00c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a010:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a014:	2301      	movs	r3, #1
 800a016:	e09f      	b.n	800a158 <_printf_i+0x1ec>
 800a018:	6820      	ldr	r0, [r4, #0]
 800a01a:	682b      	ldr	r3, [r5, #0]
 800a01c:	0607      	lsls	r7, r0, #24
 800a01e:	f103 0104 	add.w	r1, r3, #4
 800a022:	6029      	str	r1, [r5, #0]
 800a024:	d501      	bpl.n	800a02a <_printf_i+0xbe>
 800a026:	681e      	ldr	r6, [r3, #0]
 800a028:	e003      	b.n	800a032 <_printf_i+0xc6>
 800a02a:	0646      	lsls	r6, r0, #25
 800a02c:	d5fb      	bpl.n	800a026 <_printf_i+0xba>
 800a02e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a032:	2e00      	cmp	r6, #0
 800a034:	da03      	bge.n	800a03e <_printf_i+0xd2>
 800a036:	232d      	movs	r3, #45	; 0x2d
 800a038:	4276      	negs	r6, r6
 800a03a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a03e:	485a      	ldr	r0, [pc, #360]	; (800a1a8 <_printf_i+0x23c>)
 800a040:	230a      	movs	r3, #10
 800a042:	e012      	b.n	800a06a <_printf_i+0xfe>
 800a044:	682b      	ldr	r3, [r5, #0]
 800a046:	6820      	ldr	r0, [r4, #0]
 800a048:	1d19      	adds	r1, r3, #4
 800a04a:	6029      	str	r1, [r5, #0]
 800a04c:	0605      	lsls	r5, r0, #24
 800a04e:	d501      	bpl.n	800a054 <_printf_i+0xe8>
 800a050:	681e      	ldr	r6, [r3, #0]
 800a052:	e002      	b.n	800a05a <_printf_i+0xee>
 800a054:	0641      	lsls	r1, r0, #25
 800a056:	d5fb      	bpl.n	800a050 <_printf_i+0xe4>
 800a058:	881e      	ldrh	r6, [r3, #0]
 800a05a:	4853      	ldr	r0, [pc, #332]	; (800a1a8 <_printf_i+0x23c>)
 800a05c:	2f6f      	cmp	r7, #111	; 0x6f
 800a05e:	bf0c      	ite	eq
 800a060:	2308      	moveq	r3, #8
 800a062:	230a      	movne	r3, #10
 800a064:	2100      	movs	r1, #0
 800a066:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a06a:	6865      	ldr	r5, [r4, #4]
 800a06c:	60a5      	str	r5, [r4, #8]
 800a06e:	2d00      	cmp	r5, #0
 800a070:	bfa2      	ittt	ge
 800a072:	6821      	ldrge	r1, [r4, #0]
 800a074:	f021 0104 	bicge.w	r1, r1, #4
 800a078:	6021      	strge	r1, [r4, #0]
 800a07a:	b90e      	cbnz	r6, 800a080 <_printf_i+0x114>
 800a07c:	2d00      	cmp	r5, #0
 800a07e:	d04b      	beq.n	800a118 <_printf_i+0x1ac>
 800a080:	4615      	mov	r5, r2
 800a082:	fbb6 f1f3 	udiv	r1, r6, r3
 800a086:	fb03 6711 	mls	r7, r3, r1, r6
 800a08a:	5dc7      	ldrb	r7, [r0, r7]
 800a08c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a090:	4637      	mov	r7, r6
 800a092:	42bb      	cmp	r3, r7
 800a094:	460e      	mov	r6, r1
 800a096:	d9f4      	bls.n	800a082 <_printf_i+0x116>
 800a098:	2b08      	cmp	r3, #8
 800a09a:	d10b      	bne.n	800a0b4 <_printf_i+0x148>
 800a09c:	6823      	ldr	r3, [r4, #0]
 800a09e:	07de      	lsls	r6, r3, #31
 800a0a0:	d508      	bpl.n	800a0b4 <_printf_i+0x148>
 800a0a2:	6923      	ldr	r3, [r4, #16]
 800a0a4:	6861      	ldr	r1, [r4, #4]
 800a0a6:	4299      	cmp	r1, r3
 800a0a8:	bfde      	ittt	le
 800a0aa:	2330      	movle	r3, #48	; 0x30
 800a0ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a0b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a0b4:	1b52      	subs	r2, r2, r5
 800a0b6:	6122      	str	r2, [r4, #16]
 800a0b8:	f8cd a000 	str.w	sl, [sp]
 800a0bc:	464b      	mov	r3, r9
 800a0be:	aa03      	add	r2, sp, #12
 800a0c0:	4621      	mov	r1, r4
 800a0c2:	4640      	mov	r0, r8
 800a0c4:	f7ff fee4 	bl	8009e90 <_printf_common>
 800a0c8:	3001      	adds	r0, #1
 800a0ca:	d14a      	bne.n	800a162 <_printf_i+0x1f6>
 800a0cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a0d0:	b004      	add	sp, #16
 800a0d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0d6:	6823      	ldr	r3, [r4, #0]
 800a0d8:	f043 0320 	orr.w	r3, r3, #32
 800a0dc:	6023      	str	r3, [r4, #0]
 800a0de:	4833      	ldr	r0, [pc, #204]	; (800a1ac <_printf_i+0x240>)
 800a0e0:	2778      	movs	r7, #120	; 0x78
 800a0e2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a0e6:	6823      	ldr	r3, [r4, #0]
 800a0e8:	6829      	ldr	r1, [r5, #0]
 800a0ea:	061f      	lsls	r7, r3, #24
 800a0ec:	f851 6b04 	ldr.w	r6, [r1], #4
 800a0f0:	d402      	bmi.n	800a0f8 <_printf_i+0x18c>
 800a0f2:	065f      	lsls	r7, r3, #25
 800a0f4:	bf48      	it	mi
 800a0f6:	b2b6      	uxthmi	r6, r6
 800a0f8:	07df      	lsls	r7, r3, #31
 800a0fa:	bf48      	it	mi
 800a0fc:	f043 0320 	orrmi.w	r3, r3, #32
 800a100:	6029      	str	r1, [r5, #0]
 800a102:	bf48      	it	mi
 800a104:	6023      	strmi	r3, [r4, #0]
 800a106:	b91e      	cbnz	r6, 800a110 <_printf_i+0x1a4>
 800a108:	6823      	ldr	r3, [r4, #0]
 800a10a:	f023 0320 	bic.w	r3, r3, #32
 800a10e:	6023      	str	r3, [r4, #0]
 800a110:	2310      	movs	r3, #16
 800a112:	e7a7      	b.n	800a064 <_printf_i+0xf8>
 800a114:	4824      	ldr	r0, [pc, #144]	; (800a1a8 <_printf_i+0x23c>)
 800a116:	e7e4      	b.n	800a0e2 <_printf_i+0x176>
 800a118:	4615      	mov	r5, r2
 800a11a:	e7bd      	b.n	800a098 <_printf_i+0x12c>
 800a11c:	682b      	ldr	r3, [r5, #0]
 800a11e:	6826      	ldr	r6, [r4, #0]
 800a120:	6961      	ldr	r1, [r4, #20]
 800a122:	1d18      	adds	r0, r3, #4
 800a124:	6028      	str	r0, [r5, #0]
 800a126:	0635      	lsls	r5, r6, #24
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	d501      	bpl.n	800a130 <_printf_i+0x1c4>
 800a12c:	6019      	str	r1, [r3, #0]
 800a12e:	e002      	b.n	800a136 <_printf_i+0x1ca>
 800a130:	0670      	lsls	r0, r6, #25
 800a132:	d5fb      	bpl.n	800a12c <_printf_i+0x1c0>
 800a134:	8019      	strh	r1, [r3, #0]
 800a136:	2300      	movs	r3, #0
 800a138:	6123      	str	r3, [r4, #16]
 800a13a:	4615      	mov	r5, r2
 800a13c:	e7bc      	b.n	800a0b8 <_printf_i+0x14c>
 800a13e:	682b      	ldr	r3, [r5, #0]
 800a140:	1d1a      	adds	r2, r3, #4
 800a142:	602a      	str	r2, [r5, #0]
 800a144:	681d      	ldr	r5, [r3, #0]
 800a146:	6862      	ldr	r2, [r4, #4]
 800a148:	2100      	movs	r1, #0
 800a14a:	4628      	mov	r0, r5
 800a14c:	f7f6 f858 	bl	8000200 <memchr>
 800a150:	b108      	cbz	r0, 800a156 <_printf_i+0x1ea>
 800a152:	1b40      	subs	r0, r0, r5
 800a154:	6060      	str	r0, [r4, #4]
 800a156:	6863      	ldr	r3, [r4, #4]
 800a158:	6123      	str	r3, [r4, #16]
 800a15a:	2300      	movs	r3, #0
 800a15c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a160:	e7aa      	b.n	800a0b8 <_printf_i+0x14c>
 800a162:	6923      	ldr	r3, [r4, #16]
 800a164:	462a      	mov	r2, r5
 800a166:	4649      	mov	r1, r9
 800a168:	4640      	mov	r0, r8
 800a16a:	47d0      	blx	sl
 800a16c:	3001      	adds	r0, #1
 800a16e:	d0ad      	beq.n	800a0cc <_printf_i+0x160>
 800a170:	6823      	ldr	r3, [r4, #0]
 800a172:	079b      	lsls	r3, r3, #30
 800a174:	d413      	bmi.n	800a19e <_printf_i+0x232>
 800a176:	68e0      	ldr	r0, [r4, #12]
 800a178:	9b03      	ldr	r3, [sp, #12]
 800a17a:	4298      	cmp	r0, r3
 800a17c:	bfb8      	it	lt
 800a17e:	4618      	movlt	r0, r3
 800a180:	e7a6      	b.n	800a0d0 <_printf_i+0x164>
 800a182:	2301      	movs	r3, #1
 800a184:	4632      	mov	r2, r6
 800a186:	4649      	mov	r1, r9
 800a188:	4640      	mov	r0, r8
 800a18a:	47d0      	blx	sl
 800a18c:	3001      	adds	r0, #1
 800a18e:	d09d      	beq.n	800a0cc <_printf_i+0x160>
 800a190:	3501      	adds	r5, #1
 800a192:	68e3      	ldr	r3, [r4, #12]
 800a194:	9903      	ldr	r1, [sp, #12]
 800a196:	1a5b      	subs	r3, r3, r1
 800a198:	42ab      	cmp	r3, r5
 800a19a:	dcf2      	bgt.n	800a182 <_printf_i+0x216>
 800a19c:	e7eb      	b.n	800a176 <_printf_i+0x20a>
 800a19e:	2500      	movs	r5, #0
 800a1a0:	f104 0619 	add.w	r6, r4, #25
 800a1a4:	e7f5      	b.n	800a192 <_printf_i+0x226>
 800a1a6:	bf00      	nop
 800a1a8:	0800a629 	.word	0x0800a629
 800a1ac:	0800a63a 	.word	0x0800a63a

0800a1b0 <memmove>:
 800a1b0:	4288      	cmp	r0, r1
 800a1b2:	b510      	push	{r4, lr}
 800a1b4:	eb01 0402 	add.w	r4, r1, r2
 800a1b8:	d902      	bls.n	800a1c0 <memmove+0x10>
 800a1ba:	4284      	cmp	r4, r0
 800a1bc:	4623      	mov	r3, r4
 800a1be:	d807      	bhi.n	800a1d0 <memmove+0x20>
 800a1c0:	1e43      	subs	r3, r0, #1
 800a1c2:	42a1      	cmp	r1, r4
 800a1c4:	d008      	beq.n	800a1d8 <memmove+0x28>
 800a1c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a1ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a1ce:	e7f8      	b.n	800a1c2 <memmove+0x12>
 800a1d0:	4402      	add	r2, r0
 800a1d2:	4601      	mov	r1, r0
 800a1d4:	428a      	cmp	r2, r1
 800a1d6:	d100      	bne.n	800a1da <memmove+0x2a>
 800a1d8:	bd10      	pop	{r4, pc}
 800a1da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a1de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a1e2:	e7f7      	b.n	800a1d4 <memmove+0x24>

0800a1e4 <_sbrk_r>:
 800a1e4:	b538      	push	{r3, r4, r5, lr}
 800a1e6:	4d06      	ldr	r5, [pc, #24]	; (800a200 <_sbrk_r+0x1c>)
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	4604      	mov	r4, r0
 800a1ec:	4608      	mov	r0, r1
 800a1ee:	602b      	str	r3, [r5, #0]
 800a1f0:	f7f8 fe74 	bl	8002edc <_sbrk>
 800a1f4:	1c43      	adds	r3, r0, #1
 800a1f6:	d102      	bne.n	800a1fe <_sbrk_r+0x1a>
 800a1f8:	682b      	ldr	r3, [r5, #0]
 800a1fa:	b103      	cbz	r3, 800a1fe <_sbrk_r+0x1a>
 800a1fc:	6023      	str	r3, [r4, #0]
 800a1fe:	bd38      	pop	{r3, r4, r5, pc}
 800a200:	20002b28 	.word	0x20002b28

0800a204 <_realloc_r>:
 800a204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a208:	4680      	mov	r8, r0
 800a20a:	4614      	mov	r4, r2
 800a20c:	460e      	mov	r6, r1
 800a20e:	b921      	cbnz	r1, 800a21a <_realloc_r+0x16>
 800a210:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a214:	4611      	mov	r1, r2
 800a216:	f7ff bc57 	b.w	8009ac8 <_malloc_r>
 800a21a:	b92a      	cbnz	r2, 800a228 <_realloc_r+0x24>
 800a21c:	f7ff fbe8 	bl	80099f0 <_free_r>
 800a220:	4625      	mov	r5, r4
 800a222:	4628      	mov	r0, r5
 800a224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a228:	f000 f81b 	bl	800a262 <_malloc_usable_size_r>
 800a22c:	4284      	cmp	r4, r0
 800a22e:	4607      	mov	r7, r0
 800a230:	d802      	bhi.n	800a238 <_realloc_r+0x34>
 800a232:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a236:	d812      	bhi.n	800a25e <_realloc_r+0x5a>
 800a238:	4621      	mov	r1, r4
 800a23a:	4640      	mov	r0, r8
 800a23c:	f7ff fc44 	bl	8009ac8 <_malloc_r>
 800a240:	4605      	mov	r5, r0
 800a242:	2800      	cmp	r0, #0
 800a244:	d0ed      	beq.n	800a222 <_realloc_r+0x1e>
 800a246:	42bc      	cmp	r4, r7
 800a248:	4622      	mov	r2, r4
 800a24a:	4631      	mov	r1, r6
 800a24c:	bf28      	it	cs
 800a24e:	463a      	movcs	r2, r7
 800a250:	f7ff fbc0 	bl	80099d4 <memcpy>
 800a254:	4631      	mov	r1, r6
 800a256:	4640      	mov	r0, r8
 800a258:	f7ff fbca 	bl	80099f0 <_free_r>
 800a25c:	e7e1      	b.n	800a222 <_realloc_r+0x1e>
 800a25e:	4635      	mov	r5, r6
 800a260:	e7df      	b.n	800a222 <_realloc_r+0x1e>

0800a262 <_malloc_usable_size_r>:
 800a262:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a266:	1f18      	subs	r0, r3, #4
 800a268:	2b00      	cmp	r3, #0
 800a26a:	bfbc      	itt	lt
 800a26c:	580b      	ldrlt	r3, [r1, r0]
 800a26e:	18c0      	addlt	r0, r0, r3
 800a270:	4770      	bx	lr
	...

0800a274 <_init>:
 800a274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a276:	bf00      	nop
 800a278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a27a:	bc08      	pop	{r3}
 800a27c:	469e      	mov	lr, r3
 800a27e:	4770      	bx	lr

0800a280 <_fini>:
 800a280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a282:	bf00      	nop
 800a284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a286:	bc08      	pop	{r3}
 800a288:	469e      	mov	lr, r3
 800a28a:	4770      	bx	lr
