
F301Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e238  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000778  0800e3c8  0800e3c8  0001e3c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eb40  0800eb40  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800eb40  0800eb40  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800eb40  0800eb40  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eb40  0800eb40  0001eb40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eb44  0800eb44  0001eb44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800eb48  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002b64  200001e8  0800ed30  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002d4c  0800ed30  00022d4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c4dc  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004163  00000000  00000000  0003c737  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018b0  00000000  00000000  000408a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001337  00000000  00000000  00042150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a266  00000000  00000000  00043487  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e26a  00000000  00000000  0005d6ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009c957  00000000  00000000  0007b957  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007b40  00000000  00000000  001182b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0011fdf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e3b0 	.word	0x0800e3b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800e3b0 	.word	0x0800e3b0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <sendATCommand>:
//	HAL_UART_Transmit(huart, atcom, sizeOfAT, delayms);
//	HAL_UART_Receive(huart, response, sizeOfResp, delayms);
//}

void sendATCommand(UART_HandleTypeDef *huart, const char* atcom, int sizeOfAT, int delayms)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	60f8      	str	r0, [r7, #12]
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	607a      	str	r2, [r7, #4]
 8000c74:	603b      	str	r3, [r7, #0]
	for(uint16_t i = 0; i < sizeOfAT; i++) {
 8000c76:	2300      	movs	r3, #0
 8000c78:	82fb      	strh	r3, [r7, #22]
 8000c7a:	e00a      	b.n	8000c92 <sendATCommand+0x2a>
		if(atcom[i] == '\0') {
 8000c7c:	8afb      	ldrh	r3, [r7, #22]
 8000c7e:	68ba      	ldr	r2, [r7, #8]
 8000c80:	4413      	add	r3, r2
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d101      	bne.n	8000c8c <sendATCommand+0x24>
			sizeOfAT = i;
 8000c88:	8afb      	ldrh	r3, [r7, #22]
 8000c8a:	607b      	str	r3, [r7, #4]
	for(uint16_t i = 0; i < sizeOfAT; i++) {
 8000c8c:	8afb      	ldrh	r3, [r7, #22]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	82fb      	strh	r3, [r7, #22]
 8000c92:	8afb      	ldrh	r3, [r7, #22]
 8000c94:	687a      	ldr	r2, [r7, #4]
 8000c96:	429a      	cmp	r2, r3
 8000c98:	dcf0      	bgt.n	8000c7c <sendATCommand+0x14>
		}
	}
	HAL_UART_Transmit(huart, atcom, sizeOfAT, delayms);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	b29a      	uxth	r2, r3
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	68b9      	ldr	r1, [r7, #8]
 8000ca2:	68f8      	ldr	r0, [r7, #12]
 8000ca4:	f006 fb1c 	bl	80072e0 <HAL_UART_Transmit>
}
 8000ca8:	bf00      	nop
 8000caa:	3718      	adds	r7, #24
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <receiveAnswer>:

void receiveAnswer(UART_HandleTypeDef *huart, char* response, int sizeOfResp, int delayms)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
 8000cbc:	603b      	str	r3, [r7, #0]
	for(uint16_t i = 0; i < sizeOfResp; i++) {
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	82fb      	strh	r3, [r7, #22]
 8000cc2:	e007      	b.n	8000cd4 <receiveAnswer+0x24>
		response[i] = 0;
 8000cc4:	8afb      	ldrh	r3, [r7, #22]
 8000cc6:	68ba      	ldr	r2, [r7, #8]
 8000cc8:	4413      	add	r3, r2
 8000cca:	2200      	movs	r2, #0
 8000ccc:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i < sizeOfResp; i++) {
 8000cce:	8afb      	ldrh	r3, [r7, #22]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	82fb      	strh	r3, [r7, #22]
 8000cd4:	8afb      	ldrh	r3, [r7, #22]
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	dcf3      	bgt.n	8000cc4 <receiveAnswer+0x14>
	}
	HAL_UART_Receive(huart, response, sizeOfResp, delayms);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	b29a      	uxth	r2, r3
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	68b9      	ldr	r1, [r7, #8]
 8000ce4:	68f8      	ldr	r0, [r7, #12]
 8000ce6:	f006 fb85 	bl	80073f4 <HAL_UART_Receive>
}
 8000cea:	bf00      	nop
 8000cec:	3718      	adds	r7, #24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
	...

08000cf4 <atSend_USART3_DMA>:
	resp = HAL_UART_Transmit_DMA(huart, (uint8_t*)pData, sizeof(pData)-1);
	__asm__ volatile("NOP");
}

uint8_t atSend_USART3_DMA(const uint8_t *pData, uint16_t amount)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	807b      	strh	r3, [r7, #2]
	if((DMA1_Channel2->CCR & DMA_CCR_EN) == DMA_CCR_EN) {
 8000d00:	4b25      	ldr	r3, [pc, #148]	; (8000d98 <atSend_USART3_DMA+0xa4>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d129      	bne.n	8000d60 <atSend_USART3_DMA+0x6c>
		if((DMA1_Channel2->CNDTR) != 0) {
 8000d0c:	4b22      	ldr	r3, [pc, #136]	; (8000d98 <atSend_USART3_DMA+0xa4>)
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <atSend_USART3_DMA+0x24>
			return 1;
 8000d14:	2301      	movs	r3, #1
 8000d16:	e039      	b.n	8000d8c <atSend_USART3_DMA+0x98>
		} else if((DMA1_Channel2->CCR & DMA_CCR_TCIE) != DMA_CCR_TCIE) {
 8000d18:	4b1f      	ldr	r3, [pc, #124]	; (8000d98 <atSend_USART3_DMA+0xa4>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f003 0302 	and.w	r3, r3, #2
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	d01d      	beq.n	8000d60 <atSend_USART3_DMA+0x6c>
			DMA1_Channel2->CCR &= ~DMA_CCR_EN;
 8000d24:	4b1c      	ldr	r3, [pc, #112]	; (8000d98 <atSend_USART3_DMA+0xa4>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a1b      	ldr	r2, [pc, #108]	; (8000d98 <atSend_USART3_DMA+0xa4>)
 8000d2a:	f023 0301 	bic.w	r3, r3, #1
 8000d2e:	6013      	str	r3, [r2, #0]
			USART3->CR3 &= ~USART_CR3_DMAT;
 8000d30:	4b1a      	ldr	r3, [pc, #104]	; (8000d9c <atSend_USART3_DMA+0xa8>)
 8000d32:	689b      	ldr	r3, [r3, #8]
 8000d34:	4a19      	ldr	r2, [pc, #100]	; (8000d9c <atSend_USART3_DMA+0xa8>)
 8000d36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000d3a:	6093      	str	r3, [r2, #8]
			if((DMA1->ISR & DMA_ISR_TCIF2) == DMA_ISR_TCIF2) {
 8000d3c:	4b18      	ldr	r3, [pc, #96]	; (8000da0 <atSend_USART3_DMA+0xac>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f003 0320 	and.w	r3, r3, #32
 8000d44:	2b20      	cmp	r3, #32
 8000d46:	d105      	bne.n	8000d54 <atSend_USART3_DMA+0x60>
				DMA1->IFCR |= DMA_IFCR_CTCIF2;
 8000d48:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <atSend_USART3_DMA+0xac>)
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	4a14      	ldr	r2, [pc, #80]	; (8000da0 <atSend_USART3_DMA+0xac>)
 8000d4e:	f043 0320 	orr.w	r3, r3, #32
 8000d52:	6053      	str	r3, [r2, #4]
			}
			DMA1_Channel2->CCR |= DMA_CCR_TCIE;
 8000d54:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <atSend_USART3_DMA+0xa4>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a0f      	ldr	r2, [pc, #60]	; (8000d98 <atSend_USART3_DMA+0xa4>)
 8000d5a:	f043 0302 	orr.w	r3, r3, #2
 8000d5e:	6013      	str	r3, [r2, #0]
		}
	}
	USART3->CR3 |= USART_CR3_DMAT;
 8000d60:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <atSend_USART3_DMA+0xa8>)
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	4a0d      	ldr	r2, [pc, #52]	; (8000d9c <atSend_USART3_DMA+0xa8>)
 8000d66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d6a:	6093      	str	r3, [r2, #8]

	DMA1_Channel2->CNDTR = amount;
 8000d6c:	4a0a      	ldr	r2, [pc, #40]	; (8000d98 <atSend_USART3_DMA+0xa4>)
 8000d6e:	887b      	ldrh	r3, [r7, #2]
 8000d70:	6053      	str	r3, [r2, #4]
	DMA1_Channel2->CPAR = (uint32_t)&(USART3->TDR);
 8000d72:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <atSend_USART3_DMA+0xa4>)
 8000d74:	4a0b      	ldr	r2, [pc, #44]	; (8000da4 <atSend_USART3_DMA+0xb0>)
 8000d76:	609a      	str	r2, [r3, #8]
	DMA1_Channel2->CMAR = (uint32_t)pData;
 8000d78:	4a07      	ldr	r2, [pc, #28]	; (8000d98 <atSend_USART3_DMA+0xa4>)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	60d3      	str	r3, [r2, #12]

	DMA1_Channel2->CCR |= DMA_CCR_EN;
 8000d7e:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <atSend_USART3_DMA+0xa4>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a05      	ldr	r2, [pc, #20]	; (8000d98 <atSend_USART3_DMA+0xa4>)
 8000d84:	f043 0301 	orr.w	r3, r3, #1
 8000d88:	6013      	str	r3, [r2, #0]
	return 0;
 8000d8a:	2300      	movs	r3, #0
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	4002001c 	.word	0x4002001c
 8000d9c:	40004800 	.word	0x40004800
 8000da0:	40020000 	.word	0x40020000
 8000da4:	40004828 	.word	0x40004828

08000da8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	4a07      	ldr	r2, [pc, #28]	; (8000dd4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000db8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	4a06      	ldr	r2, [pc, #24]	; (8000dd8 <vApplicationGetIdleTaskMemory+0x30>)
 8000dbe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2260      	movs	r2, #96	; 0x60
 8000dc4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000dc6:	bf00      	nop
 8000dc8:	3714      	adds	r7, #20
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	20000204 	.word	0x20000204
 8000dd8:	2000025c 	.word	0x2000025c

08000ddc <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	4a07      	ldr	r2, [pc, #28]	; (8000e08 <vApplicationGetTimerTaskMemory+0x2c>)
 8000dec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	4a06      	ldr	r2, [pc, #24]	; (8000e0c <vApplicationGetTimerTaskMemory+0x30>)
 8000df2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	22c0      	movs	r2, #192	; 0xc0
 8000df8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000dfa:	bf00      	nop
 8000dfc:	3714      	adds	r7, #20
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	200003dc 	.word	0x200003dc
 8000e0c:	20000434 	.word	0x20000434

08000e10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	db0b      	blt.n	8000e3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	f003 021f 	and.w	r2, r3, #31
 8000e28:	4907      	ldr	r1, [pc, #28]	; (8000e48 <__NVIC_EnableIRQ+0x38>)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	095b      	lsrs	r3, r3, #5
 8000e30:	2001      	movs	r0, #1
 8000e32:	fa00 f202 	lsl.w	r2, r0, r2
 8000e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e3a:	bf00      	nop
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	e000e100 	.word	0xe000e100

08000e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	6039      	str	r1, [r7, #0]
 8000e56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	db0a      	blt.n	8000e76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	b2da      	uxtb	r2, r3
 8000e64:	490c      	ldr	r1, [pc, #48]	; (8000e98 <__NVIC_SetPriority+0x4c>)
 8000e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6a:	0112      	lsls	r2, r2, #4
 8000e6c:	b2d2      	uxtb	r2, r2
 8000e6e:	440b      	add	r3, r1
 8000e70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e74:	e00a      	b.n	8000e8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	b2da      	uxtb	r2, r3
 8000e7a:	4908      	ldr	r1, [pc, #32]	; (8000e9c <__NVIC_SetPriority+0x50>)
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	f003 030f 	and.w	r3, r3, #15
 8000e82:	3b04      	subs	r3, #4
 8000e84:	0112      	lsls	r2, r2, #4
 8000e86:	b2d2      	uxtb	r2, r2
 8000e88:	440b      	add	r3, r1
 8000e8a:	761a      	strb	r2, [r3, #24]
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000e100 	.word	0xe000e100
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea0:	b5b0      	push	{r4, r5, r7, lr}
 8000ea2:	b0ba      	sub	sp, #232	; 0xe8
 8000ea4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	avrBatVoltage = 0;
 8000ea6:	4ba4      	ldr	r3, [pc, #656]	; (8001138 <main+0x298>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	801a      	strh	r2, [r3, #0]

	EncoderR.timeNew = 0;
 8000eac:	4ba3      	ldr	r3, [pc, #652]	; (800113c <main+0x29c>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
	EncoderR.timeOld = 0;
 8000eb2:	4ba2      	ldr	r3, [pc, #648]	; (800113c <main+0x29c>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	605a      	str	r2, [r3, #4]
	EncoderR.positionNew = 0;
 8000eb8:	4ba0      	ldr	r3, [pc, #640]	; (800113c <main+0x29c>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
	EncoderR.positionOld = 0;
 8000ebe:	4b9f      	ldr	r3, [pc, #636]	; (800113c <main+0x29c>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	60da      	str	r2, [r3, #12]
	EncoderR.posCntUpdate = 0;
 8000ec4:	4b9d      	ldr	r3, [pc, #628]	; (800113c <main+0x29c>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	741a      	strb	r2, [r3, #16]
	EncoderR.rpm = 0;
 8000eca:	4b9c      	ldr	r3, [pc, #624]	; (800113c <main+0x29c>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	615a      	str	r2, [r3, #20]

	EncoderL.timeNew = 0;
 8000ed0:	4b9b      	ldr	r3, [pc, #620]	; (8001140 <main+0x2a0>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
	EncoderL.timeOld = 0;
 8000ed6:	4b9a      	ldr	r3, [pc, #616]	; (8001140 <main+0x2a0>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	605a      	str	r2, [r3, #4]
	EncoderL.positionNew = 0;
 8000edc:	4b98      	ldr	r3, [pc, #608]	; (8001140 <main+0x2a0>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
	EncoderL.positionOld = 0;
 8000ee2:	4b97      	ldr	r3, [pc, #604]	; (8001140 <main+0x2a0>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	60da      	str	r2, [r3, #12]
	EncoderL.posCntUpdate = 0;
 8000ee8:	4b95      	ldr	r3, [pc, #596]	; (8001140 <main+0x2a0>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	741a      	strb	r2, [r3, #16]
	EncoderL.rpm = 0;
 8000eee:	4b94      	ldr	r3, [pc, #592]	; (8001140 <main+0x2a0>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	615a      	str	r2, [r3, #20]

	SoftPwmR.curValue = 0;
 8000ef4:	4b93      	ldr	r3, [pc, #588]	; (8001144 <main+0x2a4>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	805a      	strh	r2, [r3, #2]
	SoftPwmR.reqValue = 0;
 8000efa:	4b92      	ldr	r3, [pc, #584]	; (8001144 <main+0x2a4>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	801a      	strh	r2, [r3, #0]
	SoftPwmR.pwmValue = 0;
 8000f00:	4b90      	ldr	r3, [pc, #576]	; (8001144 <main+0x2a4>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	809a      	strh	r2, [r3, #4]
	SoftPwmR.status = 0;
 8000f06:	4b8f      	ldr	r3, [pc, #572]	; (8001144 <main+0x2a4>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	719a      	strb	r2, [r3, #6]

	SoftPwmL.curValue = 0;
 8000f0c:	4b8e      	ldr	r3, [pc, #568]	; (8001148 <main+0x2a8>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	805a      	strh	r2, [r3, #2]
	SoftPwmL.reqValue = 0;
 8000f12:	4b8d      	ldr	r3, [pc, #564]	; (8001148 <main+0x2a8>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	801a      	strh	r2, [r3, #0]
	SoftPwmL.pwmValue = 0;
 8000f18:	4b8b      	ldr	r3, [pc, #556]	; (8001148 <main+0x2a8>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	809a      	strh	r2, [r3, #4]
	SoftPwmL.status = 0;
 8000f1e:	4b8a      	ldr	r3, [pc, #552]	; (8001148 <main+0x2a8>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	719a      	strb	r2, [r3, #6]

	softCounterValue = 0;
 8000f24:	4b89      	ldr	r3, [pc, #548]	; (800114c <main+0x2ac>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	801a      	strh	r2, [r3, #0]

	memset(txBuffer, '\0', sizeof(txBuffer));
 8000f2a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4887      	ldr	r0, [pc, #540]	; (8001150 <main+0x2b0>)
 8000f32:	f00a fa0c 	bl	800b34e <memset>
	memset(rxBuffer, '\0', sizeof(rxBuffer));
 8000f36:	f240 12ff 	movw	r2, #511	; 0x1ff
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	4885      	ldr	r0, [pc, #532]	; (8001154 <main+0x2b4>)
 8000f3e:	f00a fa06 	bl	800b34e <memset>
	rxBufferHead = 0;
 8000f42:	4b85      	ldr	r3, [pc, #532]	; (8001158 <main+0x2b8>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	801a      	strh	r2, [r3, #0]
	memset(rxBufferCopy, '\0', sizeof(rxBufferCopy));
 8000f48:	2280      	movs	r2, #128	; 0x80
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	4883      	ldr	r0, [pc, #524]	; (800115c <main+0x2bc>)
 8000f4e:	f00a f9fe 	bl	800b34e <memset>

	joyX = 0;
 8000f52:	4b83      	ldr	r3, [pc, #524]	; (8001160 <main+0x2c0>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	701a      	strb	r2, [r3, #0]
	joyY = 0;
 8000f58:	4b82      	ldr	r3, [pc, #520]	; (8001164 <main+0x2c4>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	701a      	strb	r2, [r3, #0]
	tSpeed = 0;
 8000f5e:	4b82      	ldr	r3, [pc, #520]	; (8001168 <main+0x2c8>)
 8000f60:	f04f 0200 	mov.w	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
	aSpeed = 0;
 8000f66:	4b81      	ldr	r3, [pc, #516]	; (800116c <main+0x2cc>)
 8000f68:	f04f 0200 	mov.w	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f6e:	f002 ffbb 	bl	8003ee8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f72:	f000 f92d 	bl	80011d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f76:	f000 fb1b 	bl	80015b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f7a:	f000 faf3 	bl	8001564 <MX_DMA_Init>
  MX_ADC1_Init();
 8000f7e:	f000 f987 	bl	8001290 <MX_ADC1_Init>
  MX_SPI2_Init();
 8000f82:	f000 f9e1 	bl	8001348 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 8000f86:	f000 fabd 	bl	8001504 <MX_USART3_UART_Init>
  MX_TIM17_Init();
 8000f8a:	f000 fa93 	bl	80014b4 <MX_TIM17_Init>
  MX_TIM16_Init();
 8000f8e:	f000 fa6b 	bl	8001468 <MX_TIM16_Init>
  MX_TIM15_Init();
 8000f92:	f000 fa17 	bl	80013c4 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  ADC1_configuration();
 8000f96:	f000 fbb7 	bl	8001708 <ADC1_configuration>
  TIM1_configuration();
 8000f9a:	f000 fc93 	bl	80018c4 <TIM1_configuration>
  TIM2_configuration();
 8000f9e:	f000 fd09 	bl	80019b4 <TIM2_configuration>
  TIM17_additional_configuration();
 8000fa2:	f000 fdc9 	bl	8001b38 <TIM17_additional_configuration>
  TIM15_additional_configuration();
 8000fa6:	f000 fd91 	bl	8001acc <TIM15_additional_configuration>
  TIM16_additional_configuration();
 8000faa:	f000 fdb5 	bl	8001b18 <TIM16_additional_configuration>
  USART3_additional_configuration();
 8000fae:	f000 fdd9 	bl	8001b64 <USART3_additional_configuration>

  kToRpm = (32*1000*60)/256;
 8000fb2:	4b6f      	ldr	r3, [pc, #444]	; (8001170 <main+0x2d0>)
 8000fb4:	4a6f      	ldr	r2, [pc, #444]	; (8001174 <main+0x2d4>)
 8000fb6:	601a      	str	r2, [r3, #0]

  pc13EventGroup = xEventGroupCreate();
 8000fb8:	f006 feb0 	bl	8007d1c <xEventGroupCreate>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	4a6e      	ldr	r2, [pc, #440]	; (8001178 <main+0x2d8>)
 8000fc0:	6013      	str	r3, [r2, #0]
  pc14EventGroup = xEventGroupCreate();
 8000fc2:	f006 feab 	bl	8007d1c <xEventGroupCreate>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	4a6c      	ldr	r2, [pc, #432]	; (800117c <main+0x2dc>)
 8000fca:	6013      	str	r3, [r2, #0]
  timerFdsEventGroup = xEventGroupCreate();
 8000fcc:	f006 fea6 	bl	8007d1c <xEventGroupCreate>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	4a6b      	ldr	r2, [pc, #428]	; (8001180 <main+0x2e0>)
 8000fd4:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  timerForDataSending = xTimerCreate("TimerForDataSending", pdMS_TO_TICKS(211), pdTRUE, 1, timerForSendDataCallback); //321
 8000fd6:	4b6b      	ldr	r3, [pc, #428]	; (8001184 <main+0x2e4>)
 8000fd8:	9300      	str	r3, [sp, #0]
 8000fda:	2301      	movs	r3, #1
 8000fdc:	2201      	movs	r2, #1
 8000fde:	21d3      	movs	r1, #211	; 0xd3
 8000fe0:	4869      	ldr	r0, [pc, #420]	; (8001188 <main+0x2e8>)
 8000fe2:	f008 fcf1 	bl	80099c8 <xTimerCreate>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	4a68      	ldr	r2, [pc, #416]	; (800118c <main+0x2ec>)
 8000fea:	6013      	str	r3, [r2, #0]
  xTimerStart(timerForDataSending, portMAX_DELAY);
 8000fec:	4b67      	ldr	r3, [pc, #412]	; (800118c <main+0x2ec>)
 8000fee:	681c      	ldr	r4, [r3, #0]
 8000ff0:	f007 fffa 	bl	8008fe8 <xTaskGetTickCount>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	2101      	movs	r1, #1
 8001000:	4620      	mov	r0, r4
 8001002:	f008 fd35 	bl	8009a70 <xTimerGenericCommand>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of PS_Measure */
  osThreadDef(PS_Measure, psMeasure, osPriorityNormal, 0, 96);
 8001006:	4b62      	ldr	r3, [pc, #392]	; (8001190 <main+0x2f0>)
 8001008:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 800100c:	461d      	mov	r5, r3
 800100e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001010:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001012:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001016:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PS_MeasureHandle = osThreadCreate(osThread(PS_Measure), NULL);
 800101a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800101e:	2100      	movs	r1, #0
 8001020:	4618      	mov	r0, r3
 8001022:	f006 fe1b 	bl	8007c5c <osThreadCreate>
 8001026:	4603      	mov	r3, r0
 8001028:	4a5a      	ldr	r2, [pc, #360]	; (8001194 <main+0x2f4>)
 800102a:	6013      	str	r3, [r2, #0]

  /* definition and creation of PC_13_LED */
  osThreadDef(PC_13_LED, pc13LedCntrl, osPriorityNormal, 0, 96);
 800102c:	4b5a      	ldr	r3, [pc, #360]	; (8001198 <main+0x2f8>)
 800102e:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8001032:	461d      	mov	r5, r3
 8001034:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001036:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001038:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800103c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PC_13_LEDHandle = osThreadCreate(osThread(PC_13_LED), NULL);
 8001040:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001044:	2100      	movs	r1, #0
 8001046:	4618      	mov	r0, r3
 8001048:	f006 fe08 	bl	8007c5c <osThreadCreate>
 800104c:	4603      	mov	r3, r0
 800104e:	4a53      	ldr	r2, [pc, #332]	; (800119c <main+0x2fc>)
 8001050:	6013      	str	r3, [r2, #0]

  /* definition and creation of PC_14_LED */
  osThreadDef(PC_14_LED, pc14LedCntrl, osPriorityNormal, 0, 96);
 8001052:	4b53      	ldr	r3, [pc, #332]	; (80011a0 <main+0x300>)
 8001054:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8001058:	461d      	mov	r5, r3
 800105a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800105c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800105e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001062:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PC_14_LEDHandle = osThreadCreate(osThread(PC_14_LED), NULL);
 8001066:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800106a:	2100      	movs	r1, #0
 800106c:	4618      	mov	r0, r3
 800106e:	f006 fdf5 	bl	8007c5c <osThreadCreate>
 8001072:	4603      	mov	r3, r0
 8001074:	4a4b      	ldr	r2, [pc, #300]	; (80011a4 <main+0x304>)
 8001076:	6013      	str	r3, [r2, #0]

  /* definition and creation of EspCommunication */
  osThreadDef(EspCommunication, espCommunication, osPriorityAboveNormal, 0, 256);
 8001078:	4b4b      	ldr	r3, [pc, #300]	; (80011a8 <main+0x308>)
 800107a:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800107e:	461d      	mov	r5, r3
 8001080:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001082:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001084:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001088:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EspCommunicationHandle = osThreadCreate(osThread(EspCommunication), NULL);
 800108c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001090:	2100      	movs	r1, #0
 8001092:	4618      	mov	r0, r3
 8001094:	f006 fde2 	bl	8007c5c <osThreadCreate>
 8001098:	4603      	mov	r3, r0
 800109a:	4a44      	ldr	r2, [pc, #272]	; (80011ac <main+0x30c>)
 800109c:	6013      	str	r3, [r2, #0]

  /* definition and creation of EncoderR */
  osThreadDef(EncoderR, encoderR, osPriorityNormal, 0, 128);
 800109e:	4b44      	ldr	r3, [pc, #272]	; (80011b0 <main+0x310>)
 80010a0:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80010a4:	461d      	mov	r5, r3
 80010a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EncoderRHandle = osThreadCreate(osThread(EncoderR), NULL);
 80010b2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010b6:	2100      	movs	r1, #0
 80010b8:	4618      	mov	r0, r3
 80010ba:	f006 fdcf 	bl	8007c5c <osThreadCreate>
 80010be:	4603      	mov	r3, r0
 80010c0:	4a3c      	ldr	r2, [pc, #240]	; (80011b4 <main+0x314>)
 80010c2:	6013      	str	r3, [r2, #0]

  /* definition and creation of EncoderL */
  osThreadDef(EncoderL, encoderL, osPriorityNormal, 0, 128);
 80010c4:	4b3c      	ldr	r3, [pc, #240]	; (80011b8 <main+0x318>)
 80010c6:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80010ca:	461d      	mov	r5, r3
 80010cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EncoderLHandle = osThreadCreate(osThread(EncoderL), NULL);
 80010d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010dc:	2100      	movs	r1, #0
 80010de:	4618      	mov	r0, r3
 80010e0:	f006 fdbc 	bl	8007c5c <osThreadCreate>
 80010e4:	4603      	mov	r3, r0
 80010e6:	4a35      	ldr	r2, [pc, #212]	; (80011bc <main+0x31c>)
 80010e8:	6013      	str	r3, [r2, #0]

  /* definition and creation of SoftwarePwmR */
  osThreadDef(SoftwarePwmR, softwarePWMR, osPriorityNormal, 0, 156);
 80010ea:	4b35      	ldr	r3, [pc, #212]	; (80011c0 <main+0x320>)
 80010ec:	f107 041c 	add.w	r4, r7, #28
 80010f0:	461d      	mov	r5, r3
 80010f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SoftwarePwmRHandle = osThreadCreate(osThread(SoftwarePwmR), NULL);
 80010fe:	f107 031c 	add.w	r3, r7, #28
 8001102:	2100      	movs	r1, #0
 8001104:	4618      	mov	r0, r3
 8001106:	f006 fda9 	bl	8007c5c <osThreadCreate>
 800110a:	4603      	mov	r3, r0
 800110c:	4a2d      	ldr	r2, [pc, #180]	; (80011c4 <main+0x324>)
 800110e:	6013      	str	r3, [r2, #0]

  /* definition and creation of SoftwarePwmL */
  osThreadDef(SoftwarePwmL, softwarePWML, osPriorityNormal, 0, 156);
 8001110:	4b2d      	ldr	r3, [pc, #180]	; (80011c8 <main+0x328>)
 8001112:	463c      	mov	r4, r7
 8001114:	461d      	mov	r5, r3
 8001116:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001118:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800111a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800111e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SoftwarePwmLHandle = osThreadCreate(osThread(SoftwarePwmL), NULL);
 8001122:	463b      	mov	r3, r7
 8001124:	2100      	movs	r1, #0
 8001126:	4618      	mov	r0, r3
 8001128:	f006 fd98 	bl	8007c5c <osThreadCreate>
 800112c:	4603      	mov	r3, r0
 800112e:	4a27      	ldr	r2, [pc, #156]	; (80011cc <main+0x32c>)
 8001130:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001132:	f006 fd8c 	bl	8007c4e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001136:	e7fe      	b.n	8001136 <main+0x296>
 8001138:	20000a10 	.word	0x20000a10
 800113c:	20000a1c 	.word	0x20000a1c
 8001140:	20000a34 	.word	0x20000a34
 8001144:	20000a4c 	.word	0x20000a4c
 8001148:	20000a54 	.word	0x20000a54
 800114c:	20000a60 	.word	0x20000a60
 8001150:	20000a64 	.word	0x20000a64
 8001154:	20000c64 	.word	0x20000c64
 8001158:	20000e64 	.word	0x20000e64
 800115c:	20000e68 	.word	0x20000e68
 8001160:	20000ef0 	.word	0x20000ef0
 8001164:	20000ef1 	.word	0x20000ef1
 8001168:	20000ef4 	.word	0x20000ef4
 800116c:	20000ef8 	.word	0x20000ef8
 8001170:	20000a5c 	.word	0x20000a5c
 8001174:	45ea6000 	.word	0x45ea6000
 8001178:	20000a14 	.word	0x20000a14
 800117c:	20000a18 	.word	0x20000a18
 8001180:	20000eec 	.word	0x20000eec
 8001184:	08001c91 	.word	0x08001c91
 8001188:	0800e3c8 	.word	0x0800e3c8
 800118c:	20000ee8 	.word	0x20000ee8
 8001190:	0800e3e8 	.word	0x0800e3e8
 8001194:	200009dc 	.word	0x200009dc
 8001198:	0800e410 	.word	0x0800e410
 800119c:	200009e0 	.word	0x200009e0
 80011a0:	0800e438 	.word	0x0800e438
 80011a4:	200009e4 	.word	0x200009e4
 80011a8:	0800e468 	.word	0x0800e468
 80011ac:	200009e8 	.word	0x200009e8
 80011b0:	0800e490 	.word	0x0800e490
 80011b4:	200009ec 	.word	0x200009ec
 80011b8:	0800e4b8 	.word	0x0800e4b8
 80011bc:	200009f0 	.word	0x200009f0
 80011c0:	0800e4e4 	.word	0x0800e4e4
 80011c4:	200009f4 	.word	0x200009f4
 80011c8:	0800e510 	.word	0x0800e510
 80011cc:	200009f8 	.word	0x200009f8

080011d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b09c      	sub	sp, #112	; 0x70
 80011d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011da:	2228      	movs	r2, #40	; 0x28
 80011dc:	2100      	movs	r1, #0
 80011de:	4618      	mov	r0, r3
 80011e0:	f00a f8b5 	bl	800b34e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011f4:	1d3b      	adds	r3, r7, #4
 80011f6:	2230      	movs	r2, #48	; 0x30
 80011f8:	2100      	movs	r1, #0
 80011fa:	4618      	mov	r0, r3
 80011fc:	f00a f8a7 	bl	800b34e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001200:	2302      	movs	r3, #2
 8001202:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001204:	2301      	movs	r3, #1
 8001206:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001208:	2310      	movs	r3, #16
 800120a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800120c:	2302      	movs	r3, #2
 800120e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001210:	2300      	movs	r3, #0
 8001212:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001214:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001218:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800121a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800121e:	4618      	mov	r0, r3
 8001220:	f003 fef4 	bl	800500c <HAL_RCC_OscConfig>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800122a:	f002 f8a3 	bl	8003374 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800122e:	230f      	movs	r3, #15
 8001230:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001232:	2302      	movs	r3, #2
 8001234:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001236:	2300      	movs	r3, #0
 8001238:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800123a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800123e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001240:	2300      	movs	r3, #0
 8001242:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001244:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001248:	2102      	movs	r1, #2
 800124a:	4618      	mov	r0, r3
 800124c:	f004 ff1c 	bl	8006088 <HAL_RCC_ClockConfig>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001256:	f002 f88d 	bl	8003374 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM15|RCC_PERIPHCLK_TIM16
 800125a:	4b0c      	ldr	r3, [pc, #48]	; (800128c <SystemClock_Config+0xbc>)
 800125c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM17|RCC_PERIPHCLK_ADC1;
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 800125e:	2300      	movs	r3, #0
 8001260:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 8001262:	2300      	movs	r3, #0
 8001264:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
 8001266:	2300      	movs	r3, #0
 8001268:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV2;
 800126a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800126e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001270:	1d3b      	adds	r3, r7, #4
 8001272:	4618      	mov	r0, r3
 8001274:	f005 f970 	bl	8006558 <HAL_RCCEx_PeriphCLKConfig>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800127e:	f002 f879 	bl	8003374 <Error_Handler>
  }
}
 8001282:	bf00      	nop
 8001284:	3770      	adds	r7, #112	; 0x70
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	001c0080 	.word	0x001c0080

08001290 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001296:	463b      	mov	r3, r7
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
 80012a4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012a6:	4b27      	ldr	r3, [pc, #156]	; (8001344 <MX_ADC1_Init+0xb4>)
 80012a8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80012ac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80012ae:	4b25      	ldr	r3, [pc, #148]	; (8001344 <MX_ADC1_Init+0xb4>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012b4:	4b23      	ldr	r3, [pc, #140]	; (8001344 <MX_ADC1_Init+0xb4>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012ba:	4b22      	ldr	r3, [pc, #136]	; (8001344 <MX_ADC1_Init+0xb4>)
 80012bc:	2200      	movs	r2, #0
 80012be:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012c0:	4b20      	ldr	r3, [pc, #128]	; (8001344 <MX_ADC1_Init+0xb4>)
 80012c2:	2201      	movs	r2, #1
 80012c4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012c6:	4b1f      	ldr	r3, [pc, #124]	; (8001344 <MX_ADC1_Init+0xb4>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012ce:	4b1d      	ldr	r3, [pc, #116]	; (8001344 <MX_ADC1_Init+0xb4>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012d4:	4b1b      	ldr	r3, [pc, #108]	; (8001344 <MX_ADC1_Init+0xb4>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012da:	4b1a      	ldr	r3, [pc, #104]	; (8001344 <MX_ADC1_Init+0xb4>)
 80012dc:	2200      	movs	r2, #0
 80012de:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80012e0:	4b18      	ldr	r3, [pc, #96]	; (8001344 <MX_ADC1_Init+0xb4>)
 80012e2:	2201      	movs	r2, #1
 80012e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012e6:	4b17      	ldr	r3, [pc, #92]	; (8001344 <MX_ADC1_Init+0xb4>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012ee:	4b15      	ldr	r3, [pc, #84]	; (8001344 <MX_ADC1_Init+0xb4>)
 80012f0:	2204      	movs	r2, #4
 80012f2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012f4:	4b13      	ldr	r3, [pc, #76]	; (8001344 <MX_ADC1_Init+0xb4>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80012fa:	4b12      	ldr	r3, [pc, #72]	; (8001344 <MX_ADC1_Init+0xb4>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001300:	4810      	ldr	r0, [pc, #64]	; (8001344 <MX_ADC1_Init+0xb4>)
 8001302:	f002 fe4b 	bl	8003f9c <HAL_ADC_Init>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 800130c:	f002 f832 	bl	8003374 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001310:	2303      	movs	r3, #3
 8001312:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001314:	2301      	movs	r3, #1
 8001316:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001318:	2300      	movs	r3, #0
 800131a:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800131c:	2300      	movs	r3, #0
 800131e:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001320:	2300      	movs	r3, #0
 8001322:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001328:	463b      	mov	r3, r7
 800132a:	4619      	mov	r1, r3
 800132c:	4805      	ldr	r0, [pc, #20]	; (8001344 <MX_ADC1_Init+0xb4>)
 800132e:	f002 ffbb 	bl	80042a8 <HAL_ADC_ConfigChannel>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001338:	f002 f81c 	bl	8003374 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800133c:	bf00      	nop
 800133e:	3718      	adds	r7, #24
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20000734 	.word	0x20000734

08001348 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800134c:	4b1b      	ldr	r3, [pc, #108]	; (80013bc <MX_SPI2_Init+0x74>)
 800134e:	4a1c      	ldr	r2, [pc, #112]	; (80013c0 <MX_SPI2_Init+0x78>)
 8001350:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001352:	4b1a      	ldr	r3, [pc, #104]	; (80013bc <MX_SPI2_Init+0x74>)
 8001354:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001358:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 800135a:	4b18      	ldr	r3, [pc, #96]	; (80013bc <MX_SPI2_Init+0x74>)
 800135c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001360:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001362:	4b16      	ldr	r3, [pc, #88]	; (80013bc <MX_SPI2_Init+0x74>)
 8001364:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001368:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800136a:	4b14      	ldr	r3, [pc, #80]	; (80013bc <MX_SPI2_Init+0x74>)
 800136c:	2202      	movs	r2, #2
 800136e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001370:	4b12      	ldr	r3, [pc, #72]	; (80013bc <MX_SPI2_Init+0x74>)
 8001372:	2201      	movs	r2, #1
 8001374:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001376:	4b11      	ldr	r3, [pc, #68]	; (80013bc <MX_SPI2_Init+0x74>)
 8001378:	f44f 7200 	mov.w	r2, #512	; 0x200
 800137c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800137e:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <MX_SPI2_Init+0x74>)
 8001380:	2220      	movs	r2, #32
 8001382:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001384:	4b0d      	ldr	r3, [pc, #52]	; (80013bc <MX_SPI2_Init+0x74>)
 8001386:	2200      	movs	r2, #0
 8001388:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800138a:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <MX_SPI2_Init+0x74>)
 800138c:	2200      	movs	r2, #0
 800138e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001390:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <MX_SPI2_Init+0x74>)
 8001392:	2200      	movs	r2, #0
 8001394:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001396:	4b09      	ldr	r3, [pc, #36]	; (80013bc <MX_SPI2_Init+0x74>)
 8001398:	2207      	movs	r2, #7
 800139a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800139c:	4b07      	ldr	r3, [pc, #28]	; (80013bc <MX_SPI2_Init+0x74>)
 800139e:	2200      	movs	r2, #0
 80013a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80013a2:	4b06      	ldr	r3, [pc, #24]	; (80013bc <MX_SPI2_Init+0x74>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80013a8:	4804      	ldr	r0, [pc, #16]	; (80013bc <MX_SPI2_Init+0x74>)
 80013aa:	f005 fa59 	bl	8006860 <HAL_SPI_Init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 80013b4:	f001 ffde 	bl	8003374 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80013b8:	bf00      	nop
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20000784 	.word	0x20000784
 80013c0:	40003800 	.word	0x40003800

080013c4 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b088      	sub	sp, #32
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ca:	f107 0310 	add.w	r3, r7, #16
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	609a      	str	r2, [r3, #8]
 80013d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d8:	1d3b      	adds	r3, r7, #4
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80013e2:	4b1f      	ldr	r3, [pc, #124]	; (8001460 <MX_TIM15_Init+0x9c>)
 80013e4:	4a1f      	ldr	r2, [pc, #124]	; (8001464 <MX_TIM15_Init+0xa0>)
 80013e6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 15;
 80013e8:	4b1d      	ldr	r3, [pc, #116]	; (8001460 <MX_TIM15_Init+0x9c>)
 80013ea:	220f      	movs	r2, #15
 80013ec:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ee:	4b1c      	ldr	r3, [pc, #112]	; (8001460 <MX_TIM15_Init+0x9c>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 400;
 80013f4:	4b1a      	ldr	r3, [pc, #104]	; (8001460 <MX_TIM15_Init+0x9c>)
 80013f6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80013fa:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013fc:	4b18      	ldr	r3, [pc, #96]	; (8001460 <MX_TIM15_Init+0x9c>)
 80013fe:	2200      	movs	r2, #0
 8001400:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001402:	4b17      	ldr	r3, [pc, #92]	; (8001460 <MX_TIM15_Init+0x9c>)
 8001404:	2200      	movs	r2, #0
 8001406:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001408:	4b15      	ldr	r3, [pc, #84]	; (8001460 <MX_TIM15_Init+0x9c>)
 800140a:	2200      	movs	r2, #0
 800140c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800140e:	4814      	ldr	r0, [pc, #80]	; (8001460 <MX_TIM15_Init+0x9c>)
 8001410:	f005 fad1 	bl	80069b6 <HAL_TIM_Base_Init>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 800141a:	f001 ffab 	bl	8003374 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800141e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001422:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001424:	f107 0310 	add.w	r3, r7, #16
 8001428:	4619      	mov	r1, r3
 800142a:	480d      	ldr	r0, [pc, #52]	; (8001460 <MX_TIM15_Init+0x9c>)
 800142c:	f005 fc8d 	bl	8006d4a <HAL_TIM_ConfigClockSource>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8001436:	f001 ff9d 	bl	8003374 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800143a:	2300      	movs	r3, #0
 800143c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001442:	1d3b      	adds	r3, r7, #4
 8001444:	4619      	mov	r1, r3
 8001446:	4806      	ldr	r0, [pc, #24]	; (8001460 <MX_TIM15_Init+0x9c>)
 8001448:	f005 fe78 	bl	800713c <HAL_TIMEx_MasterConfigSynchronization>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8001452:	f001 ff8f 	bl	8003374 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001456:	bf00      	nop
 8001458:	3720      	adds	r7, #32
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	200007e8 	.word	0x200007e8
 8001464:	40014000 	.word	0x40014000

08001468 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800146c:	4b0f      	ldr	r3, [pc, #60]	; (80014ac <MX_TIM16_Init+0x44>)
 800146e:	4a10      	ldr	r2, [pc, #64]	; (80014b0 <MX_TIM16_Init+0x48>)
 8001470:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 63;
 8001472:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <MX_TIM16_Init+0x44>)
 8001474:	223f      	movs	r2, #63	; 0x3f
 8001476:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001478:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <MX_TIM16_Init+0x44>)
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10;
 800147e:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <MX_TIM16_Init+0x44>)
 8001480:	220a      	movs	r2, #10
 8001482:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001484:	4b09      	ldr	r3, [pc, #36]	; (80014ac <MX_TIM16_Init+0x44>)
 8001486:	2200      	movs	r2, #0
 8001488:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800148a:	4b08      	ldr	r3, [pc, #32]	; (80014ac <MX_TIM16_Init+0x44>)
 800148c:	2200      	movs	r2, #0
 800148e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001490:	4b06      	ldr	r3, [pc, #24]	; (80014ac <MX_TIM16_Init+0x44>)
 8001492:	2200      	movs	r2, #0
 8001494:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001496:	4805      	ldr	r0, [pc, #20]	; (80014ac <MX_TIM16_Init+0x44>)
 8001498:	f005 fa8d 	bl	80069b6 <HAL_TIM_Base_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 80014a2:	f001 ff67 	bl	8003374 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000834 	.word	0x20000834
 80014b0:	40014400 	.word	0x40014400

080014b4 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80014b8:	4b10      	ldr	r3, [pc, #64]	; (80014fc <MX_TIM17_Init+0x48>)
 80014ba:	4a11      	ldr	r2, [pc, #68]	; (8001500 <MX_TIM17_Init+0x4c>)
 80014bc:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1999;
 80014be:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <MX_TIM17_Init+0x48>)
 80014c0:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80014c4:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c6:	4b0d      	ldr	r3, [pc, #52]	; (80014fc <MX_TIM17_Init+0x48>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 80014cc:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <MX_TIM17_Init+0x48>)
 80014ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014d2:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d4:	4b09      	ldr	r3, [pc, #36]	; (80014fc <MX_TIM17_Init+0x48>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80014da:	4b08      	ldr	r3, [pc, #32]	; (80014fc <MX_TIM17_Init+0x48>)
 80014dc:	2200      	movs	r2, #0
 80014de:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014e0:	4b06      	ldr	r3, [pc, #24]	; (80014fc <MX_TIM17_Init+0x48>)
 80014e2:	2280      	movs	r2, #128	; 0x80
 80014e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80014e6:	4805      	ldr	r0, [pc, #20]	; (80014fc <MX_TIM17_Init+0x48>)
 80014e8:	f005 fa65 	bl	80069b6 <HAL_TIM_Base_Init>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 80014f2:	f001 ff3f 	bl	8003374 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20000880 	.word	0x20000880
 8001500:	40014800 	.word	0x40014800

08001504 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001508:	4b14      	ldr	r3, [pc, #80]	; (800155c <MX_USART3_UART_Init+0x58>)
 800150a:	4a15      	ldr	r2, [pc, #84]	; (8001560 <MX_USART3_UART_Init+0x5c>)
 800150c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800150e:	4b13      	ldr	r3, [pc, #76]	; (800155c <MX_USART3_UART_Init+0x58>)
 8001510:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001514:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001516:	4b11      	ldr	r3, [pc, #68]	; (800155c <MX_USART3_UART_Init+0x58>)
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800151c:	4b0f      	ldr	r3, [pc, #60]	; (800155c <MX_USART3_UART_Init+0x58>)
 800151e:	2200      	movs	r2, #0
 8001520:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001522:	4b0e      	ldr	r3, [pc, #56]	; (800155c <MX_USART3_UART_Init+0x58>)
 8001524:	2200      	movs	r2, #0
 8001526:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001528:	4b0c      	ldr	r3, [pc, #48]	; (800155c <MX_USART3_UART_Init+0x58>)
 800152a:	220c      	movs	r2, #12
 800152c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800152e:	4b0b      	ldr	r3, [pc, #44]	; (800155c <MX_USART3_UART_Init+0x58>)
 8001530:	2200      	movs	r2, #0
 8001532:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001534:	4b09      	ldr	r3, [pc, #36]	; (800155c <MX_USART3_UART_Init+0x58>)
 8001536:	2200      	movs	r2, #0
 8001538:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800153a:	4b08      	ldr	r3, [pc, #32]	; (800155c <MX_USART3_UART_Init+0x58>)
 800153c:	2200      	movs	r2, #0
 800153e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001540:	4b06      	ldr	r3, [pc, #24]	; (800155c <MX_USART3_UART_Init+0x58>)
 8001542:	2200      	movs	r2, #0
 8001544:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001546:	4805      	ldr	r0, [pc, #20]	; (800155c <MX_USART3_UART_Init+0x58>)
 8001548:	f005 fe7c 	bl	8007244 <HAL_UART_Init>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001552:	f001 ff0f 	bl	8003374 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	200008cc 	.word	0x200008cc
 8001560:	40004800 	.word	0x40004800

08001564 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <MX_DMA_Init+0x48>)
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	4a0f      	ldr	r2, [pc, #60]	; (80015ac <MX_DMA_Init+0x48>)
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	6153      	str	r3, [r2, #20]
 8001576:	4b0d      	ldr	r3, [pc, #52]	; (80015ac <MX_DMA_Init+0x48>)
 8001578:	695b      	ldr	r3, [r3, #20]
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	607b      	str	r3, [r7, #4]
 8001580:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001582:	2200      	movs	r2, #0
 8001584:	2105      	movs	r1, #5
 8001586:	200c      	movs	r0, #12
 8001588:	f003 fa5e 	bl	8004a48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800158c:	200c      	movs	r0, #12
 800158e:	f003 fa77 	bl	8004a80 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8001592:	2200      	movs	r2, #0
 8001594:	2105      	movs	r1, #5
 8001596:	200d      	movs	r0, #13
 8001598:	f003 fa56 	bl	8004a48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800159c:	200d      	movs	r0, #13
 800159e:	f003 fa6f 	bl	8004a80 <HAL_NVIC_EnableIRQ>

}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40021000 	.word	0x40021000

080015b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b088      	sub	sp, #32
 80015b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b6:	f107 030c 	add.w	r3, r7, #12
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	605a      	str	r2, [r3, #4]
 80015c0:	609a      	str	r2, [r3, #8]
 80015c2:	60da      	str	r2, [r3, #12]
 80015c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c6:	4b4d      	ldr	r3, [pc, #308]	; (80016fc <MX_GPIO_Init+0x14c>)
 80015c8:	695b      	ldr	r3, [r3, #20]
 80015ca:	4a4c      	ldr	r2, [pc, #304]	; (80016fc <MX_GPIO_Init+0x14c>)
 80015cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80015d0:	6153      	str	r3, [r2, #20]
 80015d2:	4b4a      	ldr	r3, [pc, #296]	; (80016fc <MX_GPIO_Init+0x14c>)
 80015d4:	695b      	ldr	r3, [r3, #20]
 80015d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015da:	60bb      	str	r3, [r7, #8]
 80015dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015de:	4b47      	ldr	r3, [pc, #284]	; (80016fc <MX_GPIO_Init+0x14c>)
 80015e0:	695b      	ldr	r3, [r3, #20]
 80015e2:	4a46      	ldr	r2, [pc, #280]	; (80016fc <MX_GPIO_Init+0x14c>)
 80015e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015e8:	6153      	str	r3, [r2, #20]
 80015ea:	4b44      	ldr	r3, [pc, #272]	; (80016fc <MX_GPIO_Init+0x14c>)
 80015ec:	695b      	ldr	r3, [r3, #20]
 80015ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f6:	4b41      	ldr	r3, [pc, #260]	; (80016fc <MX_GPIO_Init+0x14c>)
 80015f8:	695b      	ldr	r3, [r3, #20]
 80015fa:	4a40      	ldr	r2, [pc, #256]	; (80016fc <MX_GPIO_Init+0x14c>)
 80015fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001600:	6153      	str	r3, [r2, #20]
 8001602:	4b3e      	ldr	r3, [pc, #248]	; (80016fc <MX_GPIO_Init+0x14c>)
 8001604:	695b      	ldr	r3, [r3, #20]
 8001606:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800160a:	603b      	str	r3, [r7, #0]
 800160c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 800160e:	2200      	movs	r2, #0
 8001610:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001614:	483a      	ldr	r0, [pc, #232]	; (8001700 <MX_GPIO_Init+0x150>)
 8001616:	f003 fcbd 	bl	8004f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN12_Pin|_1A_Pin|_2A_Pin|EN34_Pin
 800161a:	2200      	movs	r2, #0
 800161c:	21f8      	movs	r1, #248	; 0xf8
 800161e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001622:	f003 fcb7 	bl	8004f94 <HAL_GPIO_WritePin>
                          |_3A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, _4A_Pin|RST_ESP_Pin|EN_ESP_Pin|SPI2_CS_L_Pin
 8001626:	2200      	movs	r2, #0
 8001628:	f245 0107 	movw	r1, #20487	; 0x5007
 800162c:	4835      	ldr	r0, [pc, #212]	; (8001704 <MX_GPIO_Init+0x154>)
 800162e:	f003 fcb1 	bl	8004f94 <HAL_GPIO_WritePin>
                          |SPI2_CS_R_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001632:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001636:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001638:	2301      	movs	r3, #1
 800163a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001640:	2300      	movs	r3, #0
 8001642:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001644:	f107 030c 	add.w	r3, r7, #12
 8001648:	4619      	mov	r1, r3
 800164a:	482d      	ldr	r0, [pc, #180]	; (8001700 <MX_GPIO_Init+0x150>)
 800164c:	f003 fb30 	bl	8004cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN12_Pin _1A_Pin _2A_Pin EN34_Pin
                           _3A_Pin */
  GPIO_InitStruct.Pin = EN12_Pin|_1A_Pin|_2A_Pin|EN34_Pin
 8001650:	23f8      	movs	r3, #248	; 0xf8
 8001652:	60fb      	str	r3, [r7, #12]
                          |_3A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001654:	2301      	movs	r3, #1
 8001656:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800165c:	2303      	movs	r3, #3
 800165e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001660:	f107 030c 	add.w	r3, r7, #12
 8001664:	4619      	mov	r1, r3
 8001666:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800166a:	f003 fb21 	bl	8004cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : _4A_Pin */
  GPIO_InitStruct.Pin = _4A_Pin;
 800166e:	2301      	movs	r3, #1
 8001670:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001672:	2301      	movs	r3, #1
 8001674:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800167a:	2303      	movs	r3, #3
 800167c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(_4A_GPIO_Port, &GPIO_InitStruct);
 800167e:	f107 030c 	add.w	r3, r7, #12
 8001682:	4619      	mov	r1, r3
 8001684:	481f      	ldr	r0, [pc, #124]	; (8001704 <MX_GPIO_Init+0x154>)
 8001686:	f003 fb13 	bl	8004cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RST_ESP_Pin EN_ESP_Pin */
  GPIO_InitStruct.Pin = RST_ESP_Pin|EN_ESP_Pin;
 800168a:	2306      	movs	r3, #6
 800168c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168e:	2301      	movs	r3, #1
 8001690:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001692:	2300      	movs	r3, #0
 8001694:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001696:	2300      	movs	r3, #0
 8001698:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800169a:	f107 030c 	add.w	r3, r7, #12
 800169e:	4619      	mov	r1, r3
 80016a0:	4818      	ldr	r0, [pc, #96]	; (8001704 <MX_GPIO_Init+0x154>)
 80016a2:	f003 fb05 	bl	8004cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_CS_L_Pin SPI2_CS_R_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_L_Pin|SPI2_CS_R_Pin;
 80016a6:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80016aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ac:	2301      	movs	r3, #1
 80016ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80016b4:	2301      	movs	r3, #1
 80016b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b8:	f107 030c 	add.w	r3, r7, #12
 80016bc:	4619      	mov	r1, r3
 80016be:	4811      	ldr	r0, [pc, #68]	; (8001704 <MX_GPIO_Init+0x154>)
 80016c0:	f003 faf6 	bl	8004cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80016c4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80016c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016ca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d4:	f107 030c 	add.w	r3, r7, #12
 80016d8:	4619      	mov	r1, r3
 80016da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016de:	f003 fae7 	bl	8004cb0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80016e2:	2200      	movs	r2, #0
 80016e4:	2105      	movs	r1, #5
 80016e6:	2028      	movs	r0, #40	; 0x28
 80016e8:	f003 f9ae 	bl	8004a48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016ec:	2028      	movs	r0, #40	; 0x28
 80016ee:	f003 f9c7 	bl	8004a80 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016f2:	bf00      	nop
 80016f4:	3720      	adds	r7, #32
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40021000 	.word	0x40021000
 8001700:	48000800 	.word	0x48000800
 8001704:	48000400 	.word	0x48000400

08001708 <ADC1_configuration>:

/* USER CODE BEGIN 4 */
void ADC1_configuration(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
	//NVIC configuration
	NVIC->IP[11] |= 0x70; //Priority 7
 800170c:	4b68      	ldr	r3, [pc, #416]	; (80018b0 <ADC1_configuration+0x1a8>)
 800170e:	f893 330b 	ldrb.w	r3, [r3, #779]	; 0x30b
 8001712:	b2db      	uxtb	r3, r3
 8001714:	4a66      	ldr	r2, [pc, #408]	; (80018b0 <ADC1_configuration+0x1a8>)
 8001716:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800171a:	b2db      	uxtb	r3, r3
 800171c:	f882 330b 	strb.w	r3, [r2, #779]	; 0x30b
	NVIC->ISER[0] |= (1<<11); //Enable DMA1 channel 1 interrupt
 8001720:	4b63      	ldr	r3, [pc, #396]	; (80018b0 <ADC1_configuration+0x1a8>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a62      	ldr	r2, [pc, #392]	; (80018b0 <ADC1_configuration+0x1a8>)
 8001726:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800172a:	6013      	str	r3, [r2, #0]
	NVIC->IP[18] |= 0x70; //Priority 7
 800172c:	4b60      	ldr	r3, [pc, #384]	; (80018b0 <ADC1_configuration+0x1a8>)
 800172e:	f893 3312 	ldrb.w	r3, [r3, #786]	; 0x312
 8001732:	b2db      	uxtb	r3, r3
 8001734:	4a5e      	ldr	r2, [pc, #376]	; (80018b0 <ADC1_configuration+0x1a8>)
 8001736:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800173a:	b2db      	uxtb	r3, r3
 800173c:	f882 3312 	strb.w	r3, [r2, #786]	; 0x312
	NVIC->ISER[0] |= (1<<18); //Enable ADC1 global interrupt
 8001740:	4b5b      	ldr	r3, [pc, #364]	; (80018b0 <ADC1_configuration+0x1a8>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a5a      	ldr	r2, [pc, #360]	; (80018b0 <ADC1_configuration+0x1a8>)
 8001746:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800174a:	6013      	str	r3, [r2, #0]
	//DMA configuration for ADC1
	RCC->AHBENR |= RCC_AHBENR_DMA1EN; // Enable the DMA1 clock
 800174c:	4b59      	ldr	r3, [pc, #356]	; (80018b4 <ADC1_configuration+0x1ac>)
 800174e:	695b      	ldr	r3, [r3, #20]
 8001750:	4a58      	ldr	r2, [pc, #352]	; (80018b4 <ADC1_configuration+0x1ac>)
 8001752:	f043 0301 	orr.w	r3, r3, #1
 8001756:	6153      	str	r3, [r2, #20]
	DMA1_Channel1->CCR &= ~DMA_CCR_EN;
 8001758:	4b57      	ldr	r3, [pc, #348]	; (80018b8 <ADC1_configuration+0x1b0>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a56      	ldr	r2, [pc, #344]	; (80018b8 <ADC1_configuration+0x1b0>)
 800175e:	f023 0301 	bic.w	r3, r3, #1
 8001762:	6013      	str	r3, [r2, #0]

	DMA1_Channel1->CCR |= (1<<10); // Bits 11:10 MSIZE[1:0]: Memory size  01: 16-bits
 8001764:	4b54      	ldr	r3, [pc, #336]	; (80018b8 <ADC1_configuration+0x1b0>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a53      	ldr	r2, [pc, #332]	; (80018b8 <ADC1_configuration+0x1b0>)
 800176a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800176e:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= (1<<8); // Bits 9:8 PSIZE[1:0]: Peripheral size  01: 16-bits
 8001770:	4b51      	ldr	r3, [pc, #324]	; (80018b8 <ADC1_configuration+0x1b0>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a50      	ldr	r2, [pc, #320]	; (80018b8 <ADC1_configuration+0x1b0>)
 8001776:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800177a:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= DMA_CCR_MINC;
 800177c:	4b4e      	ldr	r3, [pc, #312]	; (80018b8 <ADC1_configuration+0x1b0>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a4d      	ldr	r2, [pc, #308]	; (80018b8 <ADC1_configuration+0x1b0>)
 8001782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001786:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= DMA_CCR_CIRC;
 8001788:	4b4b      	ldr	r3, [pc, #300]	; (80018b8 <ADC1_configuration+0x1b0>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a4a      	ldr	r2, [pc, #296]	; (80018b8 <ADC1_configuration+0x1b0>)
 800178e:	f043 0320 	orr.w	r3, r3, #32
 8001792:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= DMA_CCR_TCIE;
 8001794:	4b48      	ldr	r3, [pc, #288]	; (80018b8 <ADC1_configuration+0x1b0>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a47      	ldr	r2, [pc, #284]	; (80018b8 <ADC1_configuration+0x1b0>)
 800179a:	f043 0302 	orr.w	r3, r3, #2
 800179e:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR &= ~DMA_CCR_HTIE;
 80017a0:	4b45      	ldr	r3, [pc, #276]	; (80018b8 <ADC1_configuration+0x1b0>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a44      	ldr	r2, [pc, #272]	; (80018b8 <ADC1_configuration+0x1b0>)
 80017a6:	f023 0304 	bic.w	r3, r3, #4
 80017aa:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR &= ~DMA_CCR_TEIE;
 80017ac:	4b42      	ldr	r3, [pc, #264]	; (80018b8 <ADC1_configuration+0x1b0>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a41      	ldr	r2, [pc, #260]	; (80018b8 <ADC1_configuration+0x1b0>)
 80017b2:	f023 0308 	bic.w	r3, r3, #8
 80017b6:	6013      	str	r3, [r2, #0]

	DMA1_Channel1->CNDTR = 10;
 80017b8:	4b3f      	ldr	r3, [pc, #252]	; (80018b8 <ADC1_configuration+0x1b0>)
 80017ba:	220a      	movs	r2, #10
 80017bc:	605a      	str	r2, [r3, #4]
	DMA1_Channel1->CPAR = (uint32_t)&(ADC1->DR);
 80017be:	4b3e      	ldr	r3, [pc, #248]	; (80018b8 <ADC1_configuration+0x1b0>)
 80017c0:	4a3e      	ldr	r2, [pc, #248]	; (80018bc <ADC1_configuration+0x1b4>)
 80017c2:	609a      	str	r2, [r3, #8]
	DMA1_Channel1->CMAR = (uint32_t)&batteryVoltage[0];
 80017c4:	4b3c      	ldr	r3, [pc, #240]	; (80018b8 <ADC1_configuration+0x1b0>)
 80017c6:	4a3e      	ldr	r2, [pc, #248]	; (80018c0 <ADC1_configuration+0x1b8>)
 80017c8:	60da      	str	r2, [r3, #12]
//	ADC1->CR |= ADC_CR_ADEN;
//	while((ADC1->ISR & ADC_ISR_ADRDY) != ADC_ISR_ADRDY) __asm__ volatile("NOP");
//	ADC1->CR |= ADC_CR_ADSTART;
//	HAL_Delay(20);
//	DMA1_Channel1->CCR |= DMA_CCR_EN;
	__asm__ volatile("NOP");
 80017ca:	bf00      	nop
	if(batteryVoltage[0] == 0) {
 80017cc:	4b3c      	ldr	r3, [pc, #240]	; (80018c0 <ADC1_configuration+0x1b8>)
 80017ce:	881b      	ldrh	r3, [r3, #0]
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d16a      	bne.n	80018ac <ADC1_configuration+0x1a4>
		if((ADC1->CR & ADC_CR_ADEN) == ADC_CR_ADEN) {
 80017d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f003 0301 	and.w	r3, r3, #1
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d12d      	bne.n	8001840 <ADC1_configuration+0x138>
			DMA1_Channel1->CCR &= ~DMA_CCR_EN;
 80017e4:	4b34      	ldr	r3, [pc, #208]	; (80018b8 <ADC1_configuration+0x1b0>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a33      	ldr	r2, [pc, #204]	; (80018b8 <ADC1_configuration+0x1b0>)
 80017ea:	f023 0301 	bic.w	r3, r3, #1
 80017ee:	6013      	str	r3, [r2, #0]
			ADC1->CR |= ADC_CR_ADSTP;
 80017f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80017fa:	f043 0310 	orr.w	r3, r3, #16
 80017fe:	6093      	str	r3, [r2, #8]
			while((ADC1->CR & ADC_CR_ADSTP) == ADC_CR_ADSTP) __asm__ volatile("NOP");
 8001800:	e000      	b.n	8001804 <ADC1_configuration+0xfc>
 8001802:	bf00      	nop
 8001804:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	f003 0310 	and.w	r3, r3, #16
 800180e:	2b10      	cmp	r3, #16
 8001810:	d0f7      	beq.n	8001802 <ADC1_configuration+0xfa>
			HAL_Delay(5);
 8001812:	2005      	movs	r0, #5
 8001814:	f002 fb9e 	bl	8003f54 <HAL_Delay>
			ADC1->CR |= ADC_CR_ADDIS;
 8001818:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001822:	f043 0302 	orr.w	r3, r3, #2
 8001826:	6093      	str	r3, [r2, #8]
			while((ADC1->CR & ADC_CR_ADDIS) == ADC_CR_ADDIS) __asm__ volatile("NOP");
 8001828:	e000      	b.n	800182c <ADC1_configuration+0x124>
 800182a:	bf00      	nop
 800182c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b02      	cmp	r3, #2
 8001838:	d0f7      	beq.n	800182a <ADC1_configuration+0x122>
			HAL_Delay(20);
 800183a:	2014      	movs	r0, #20
 800183c:	f002 fb8a 	bl	8003f54 <HAL_Delay>
		}
		MX_ADC1_Init();
 8001840:	f7ff fd26 	bl	8001290 <MX_ADC1_Init>
		ADC1->CFGR |= ADC_CFGR_DMACFG;
 8001844:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800184e:	f043 0302 	orr.w	r3, r3, #2
 8001852:	60d3      	str	r3, [r2, #12]
		ADC1->CFGR |= ADC_CFGR_DMAEN;
 8001854:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800185e:	f043 0301 	orr.w	r3, r3, #1
 8001862:	60d3      	str	r3, [r2, #12]
		ADC1->CR |= ADC_CR_ADEN;
 8001864:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800186e:	f043 0301 	orr.w	r3, r3, #1
 8001872:	6093      	str	r3, [r2, #8]
		while((ADC1->ISR & ADC_ISR_ADRDY) != ADC_ISR_ADRDY) __asm__ volatile("NOP");
 8001874:	e000      	b.n	8001878 <ADC1_configuration+0x170>
 8001876:	bf00      	nop
 8001878:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	2b01      	cmp	r3, #1
 8001884:	d1f7      	bne.n	8001876 <ADC1_configuration+0x16e>
		ADC1->CR |= ADC_CR_ADSTART;
 8001886:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001890:	f043 0304 	orr.w	r3, r3, #4
 8001894:	6093      	str	r3, [r2, #8]
		HAL_Delay(20);
 8001896:	2014      	movs	r0, #20
 8001898:	f002 fb5c 	bl	8003f54 <HAL_Delay>
		DMA1_Channel1->CCR |= DMA_CCR_EN;
 800189c:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <ADC1_configuration+0x1b0>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a05      	ldr	r2, [pc, #20]	; (80018b8 <ADC1_configuration+0x1b0>)
 80018a2:	f043 0301 	orr.w	r3, r3, #1
 80018a6:	6013      	str	r3, [r2, #0]
		__asm__ volatile("NOP");
 80018a8:	bf00      	nop
	}
	return;
 80018aa:	bf00      	nop
 80018ac:	bf00      	nop
}
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	e000e100 	.word	0xe000e100
 80018b4:	40021000 	.word	0x40021000
 80018b8:	40020008 	.word	0x40020008
 80018bc:	50000040 	.word	0x50000040
 80018c0:	200009fc 	.word	0x200009fc

080018c4 <TIM1_configuration>:

void TIM1_configuration(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
    // Enable the TIM1 clock
    RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 80018c8:	4b38      	ldr	r3, [pc, #224]	; (80019ac <TIM1_configuration+0xe8>)
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	4a37      	ldr	r2, [pc, #220]	; (80019ac <TIM1_configuration+0xe8>)
 80018ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018d2:	6193      	str	r3, [r2, #24]

    // Configure GPIO pins for TIM1 PA9-CH2 and PA8-CH1
    GPIOA->MODER |= (1<<17);
 80018d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80018de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018e2:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (1<<19);
 80018e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80018ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80018f2:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR |= (1<<17); //Pull-down
 80018f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80018fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001902:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR |= (1<<19); //Pull-down
 8001904:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800190e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001912:	60d3      	str	r3, [r2, #12]
    GPIOA->AFR[1] |= (6); //AF6
 8001914:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800191e:	f043 0306 	orr.w	r3, r3, #6
 8001922:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOA->AFR[1] |= (6<<4); //AF6
 8001924:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800192e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001932:	6253      	str	r3, [r2, #36]	; 0x24

    // Configure TIM1
	TIM1->CR1 |= TIM_CR1_ARPE; //ARPE: Auto-reload preload enable
 8001934:	4b1e      	ldr	r3, [pc, #120]	; (80019b0 <TIM1_configuration+0xec>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a1d      	ldr	r2, [pc, #116]	; (80019b0 <TIM1_configuration+0xec>)
 800193a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800193e:	6013      	str	r3, [r2, #0]
	TIM1->SMCR |= (TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0); // Encoder mode 3
 8001940:	4b1b      	ldr	r3, [pc, #108]	; (80019b0 <TIM1_configuration+0xec>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	4a1a      	ldr	r2, [pc, #104]	; (80019b0 <TIM1_configuration+0xec>)
 8001946:	f043 0303 	orr.w	r3, r3, #3
 800194a:	6093      	str	r3, [r2, #8]
	TIM1->DIER |= TIM_DIER_UIE; //UIE: Update interrupt enable
 800194c:	4b18      	ldr	r3, [pc, #96]	; (80019b0 <TIM1_configuration+0xec>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	4a17      	ldr	r2, [pc, #92]	; (80019b0 <TIM1_configuration+0xec>)
 8001952:	f043 0301 	orr.w	r3, r3, #1
 8001956:	60d3      	str	r3, [r2, #12]

	TIM1->CCMR1 |= (1<<0);
 8001958:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <TIM1_configuration+0xec>)
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	4a14      	ldr	r2, [pc, #80]	; (80019b0 <TIM1_configuration+0xec>)
 800195e:	f043 0301 	orr.w	r3, r3, #1
 8001962:	6193      	str	r3, [r2, #24]
	TIM1->CCMR1 |= (1<<8);
 8001964:	4b12      	ldr	r3, [pc, #72]	; (80019b0 <TIM1_configuration+0xec>)
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	4a11      	ldr	r2, [pc, #68]	; (80019b0 <TIM1_configuration+0xec>)
 800196a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800196e:	6193      	str	r3, [r2, #24]
	TIM1->CCER |= (1<<0);
 8001970:	4b0f      	ldr	r3, [pc, #60]	; (80019b0 <TIM1_configuration+0xec>)
 8001972:	6a1b      	ldr	r3, [r3, #32]
 8001974:	4a0e      	ldr	r2, [pc, #56]	; (80019b0 <TIM1_configuration+0xec>)
 8001976:	f043 0301 	orr.w	r3, r3, #1
 800197a:	6213      	str	r3, [r2, #32]
	TIM1->CCER |= (1<<4);
 800197c:	4b0c      	ldr	r3, [pc, #48]	; (80019b0 <TIM1_configuration+0xec>)
 800197e:	6a1b      	ldr	r3, [r3, #32]
 8001980:	4a0b      	ldr	r2, [pc, #44]	; (80019b0 <TIM1_configuration+0xec>)
 8001982:	f043 0310 	orr.w	r3, r3, #16
 8001986:	6213      	str	r3, [r2, #32]

	TIM1->PSC = 7; //7+1 = 8
 8001988:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <TIM1_configuration+0xec>)
 800198a:	2207      	movs	r2, #7
 800198c:	629a      	str	r2, [r3, #40]	; 0x28

//	TIM1->RCR = 0xFFFF; // Repetition counter value

    // Enable the TIM1 interrupt
    NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800198e:	2019      	movs	r0, #25
 8001990:	f7ff fa3e 	bl	8000e10 <__NVIC_EnableIRQ>

    // Set priority for the TIM1 interrupt
    NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5); // Adjust priority as needed
 8001994:	2105      	movs	r1, #5
 8001996:	2019      	movs	r0, #25
 8001998:	f7ff fa58 	bl	8000e4c <__NVIC_SetPriority>

    // Enable the TIM1 counter
    TIM1->CR1 |= TIM_CR1_CEN;
 800199c:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <TIM1_configuration+0xec>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a03      	ldr	r2, [pc, #12]	; (80019b0 <TIM1_configuration+0xec>)
 80019a2:	f043 0301 	orr.w	r3, r3, #1
 80019a6:	6013      	str	r3, [r2, #0]
}
 80019a8:	bf00      	nop
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40021000 	.word	0x40021000
 80019b0:	40012c00 	.word	0x40012c00

080019b4 <TIM2_configuration>:

void TIM2_configuration(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
    // Enable the TIM2 clock
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80019b8:	4b43      	ldr	r3, [pc, #268]	; (8001ac8 <TIM2_configuration+0x114>)
 80019ba:	69db      	ldr	r3, [r3, #28]
 80019bc:	4a42      	ldr	r2, [pc, #264]	; (8001ac8 <TIM2_configuration+0x114>)
 80019be:	f043 0301 	orr.w	r3, r3, #1
 80019c2:	61d3      	str	r3, [r2, #28]

    // Configure GPIO pins for TIM2 PA1-CH2 and PA0-CH1
    GPIOA->MODER |= (1<<1);
 80019c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80019ce:	f043 0302 	orr.w	r3, r3, #2
 80019d2:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (1<<3);
 80019d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80019de:	f043 0308 	orr.w	r3, r3, #8
 80019e2:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR |= (1<<1); //Pull-down
 80019e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80019ee:	f043 0302 	orr.w	r3, r3, #2
 80019f2:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR |= (1<<3); //Pull-down
 80019f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80019fe:	f043 0308 	orr.w	r3, r3, #8
 8001a02:	60d3      	str	r3, [r2, #12]
    GPIOA->AFR[0] |= (1); //AF1
 8001a04:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001a08:	6a1b      	ldr	r3, [r3, #32]
 8001a0a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001a0e:	f043 0301 	orr.w	r3, r3, #1
 8001a12:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (1<<4); //AF1
 8001a14:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001a18:	6a1b      	ldr	r3, [r3, #32]
 8001a1a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001a1e:	f043 0310 	orr.w	r3, r3, #16
 8001a22:	6213      	str	r3, [r2, #32]

    // Configure TIM2
	TIM2->CR1 |= TIM_CR1_ARPE; //ARPE: Auto-reload preload enable
 8001a24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a32:	6013      	str	r3, [r2, #0]
	TIM2->SMCR |= (TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0); // Encoder mode 3
 8001a34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a3e:	f043 0303 	orr.w	r3, r3, #3
 8001a42:	6093      	str	r3, [r2, #8]
	TIM2->DIER |= TIM_DIER_UIE; //UIE: Update interrupt enable
 8001a44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a4e:	f043 0301 	orr.w	r3, r3, #1
 8001a52:	60d3      	str	r3, [r2, #12]

	TIM2->CCMR1 |= (1<<0);
 8001a54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a5e:	f043 0301 	orr.w	r3, r3, #1
 8001a62:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= (1<<8);
 8001a64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a72:	6193      	str	r3, [r2, #24]
	TIM2->CCER |= (1<<0);
 8001a74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a78:	6a1b      	ldr	r3, [r3, #32]
 8001a7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a7e:	f043 0301 	orr.w	r3, r3, #1
 8001a82:	6213      	str	r3, [r2, #32]
	TIM2->CCER |= (1<<4);
 8001a84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a88:	6a1b      	ldr	r3, [r3, #32]
 8001a8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a8e:	f043 0310 	orr.w	r3, r3, #16
 8001a92:	6213      	str	r3, [r2, #32]

	TIM2->PSC = 7; //7+1 = 8
 8001a94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a98:	2207      	movs	r2, #7
 8001a9a:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 0xFFFF; //65535
 8001a9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001aa0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001aa4:	62da      	str	r2, [r3, #44]	; 0x2c

    // Enable the TIM2 interrupt
    NVIC_EnableIRQ(TIM2_IRQn);
 8001aa6:	201c      	movs	r0, #28
 8001aa8:	f7ff f9b2 	bl	8000e10 <__NVIC_EnableIRQ>

    // Set priority for the TIM2 interrupt
    NVIC_SetPriority(TIM2_IRQn, 5); // Adjust priority as needed
 8001aac:	2105      	movs	r1, #5
 8001aae:	201c      	movs	r0, #28
 8001ab0:	f7ff f9cc 	bl	8000e4c <__NVIC_SetPriority>

    // Enable the TIM2 counter
    TIM2->CR1 |= TIM_CR1_CEN;
 8001ab4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001abe:	f043 0301 	orr.w	r3, r3, #1
 8001ac2:	6013      	str	r3, [r2, #0]
}
 8001ac4:	bf00      	nop
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40021000 	.word	0x40021000

08001acc <TIM15_additional_configuration>:

void TIM15_additional_configuration(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
	TIM15->DIER |= TIM_DIER_CC1IE;
 8001ad0:	4b10      	ldr	r3, [pc, #64]	; (8001b14 <TIM15_additional_configuration+0x48>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	4a0f      	ldr	r2, [pc, #60]	; (8001b14 <TIM15_additional_configuration+0x48>)
 8001ad6:	f043 0302 	orr.w	r3, r3, #2
 8001ada:	60d3      	str	r3, [r2, #12]
	TIM15->DIER |= TIM_DIER_CC2IE;
 8001adc:	4b0d      	ldr	r3, [pc, #52]	; (8001b14 <TIM15_additional_configuration+0x48>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	4a0c      	ldr	r2, [pc, #48]	; (8001b14 <TIM15_additional_configuration+0x48>)
 8001ae2:	f043 0304 	orr.w	r3, r3, #4
 8001ae6:	60d3      	str	r3, [r2, #12]
	TIM15->DIER |= TIM_DIER_UIE; //UIE: Update interrupt enable
 8001ae8:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <TIM15_additional_configuration+0x48>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	4a09      	ldr	r2, [pc, #36]	; (8001b14 <TIM15_additional_configuration+0x48>)
 8001aee:	f043 0301 	orr.w	r3, r3, #1
 8001af2:	60d3      	str	r3, [r2, #12]

    // Enable the TIM15 interrupt
    NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001af4:	2018      	movs	r0, #24
 8001af6:	f7ff f98b 	bl	8000e10 <__NVIC_EnableIRQ>
    // Set priority for the TIM15 interrupt
    NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 5);
 8001afa:	2105      	movs	r1, #5
 8001afc:	2018      	movs	r0, #24
 8001afe:	f7ff f9a5 	bl	8000e4c <__NVIC_SetPriority>

	TIM15->CR1 |= TIM_CR1_CEN;
 8001b02:	4b04      	ldr	r3, [pc, #16]	; (8001b14 <TIM15_additional_configuration+0x48>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a03      	ldr	r2, [pc, #12]	; (8001b14 <TIM15_additional_configuration+0x48>)
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	6013      	str	r3, [r2, #0]
}
 8001b0e:	bf00      	nop
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40014000 	.word	0x40014000

08001b18 <TIM16_additional_configuration>:

void TIM16_additional_configuration(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
	TIM16->DIER |= TIM_DIER_UIE; //UIE: Update interrupt enable
 8001b1c:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <TIM16_additional_configuration+0x1c>)
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	4a04      	ldr	r2, [pc, #16]	; (8001b34 <TIM16_additional_configuration+0x1c>)
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	60d3      	str	r3, [r2, #12]
//	TIM16->CR1 |= TIM_CR1_CEN;
}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	40014400 	.word	0x40014400

08001b38 <TIM17_additional_configuration>:

void TIM17_additional_configuration(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
	TIM17->DIER |= TIM_DIER_UIE; //UIE: Update interrupt enable
 8001b3c:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <TIM17_additional_configuration+0x28>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	4a07      	ldr	r2, [pc, #28]	; (8001b60 <TIM17_additional_configuration+0x28>)
 8001b42:	f043 0301 	orr.w	r3, r3, #1
 8001b46:	60d3      	str	r3, [r2, #12]
	TIM17->CR1 |= TIM_CR1_CEN;
 8001b48:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <TIM17_additional_configuration+0x28>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a04      	ldr	r2, [pc, #16]	; (8001b60 <TIM17_additional_configuration+0x28>)
 8001b4e:	f043 0301 	orr.w	r3, r3, #1
 8001b52:	6013      	str	r3, [r2, #0]
}
 8001b54:	bf00      	nop
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	40014800 	.word	0x40014800

08001b64 <USART3_additional_configuration>:

void USART3_additional_configuration(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
	//DMA configuration for UART3
	RCC->AHBENR |= RCC_AHBENR_DMA1EN; // Enable the DMA1 clock
 8001b68:	4b41      	ldr	r3, [pc, #260]	; (8001c70 <USART3_additional_configuration+0x10c>)
 8001b6a:	695b      	ldr	r3, [r3, #20]
 8001b6c:	4a40      	ldr	r2, [pc, #256]	; (8001c70 <USART3_additional_configuration+0x10c>)
 8001b6e:	f043 0301 	orr.w	r3, r3, #1
 8001b72:	6153      	str	r3, [r2, #20]

	DMA1_Channel3->CCR &= ~DMA_CCR_EN;
 8001b74:	4b3f      	ldr	r3, [pc, #252]	; (8001c74 <USART3_additional_configuration+0x110>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a3e      	ldr	r2, [pc, #248]	; (8001c74 <USART3_additional_configuration+0x110>)
 8001b7a:	f023 0301 	bic.w	r3, r3, #1
 8001b7e:	6013      	str	r3, [r2, #0]

	DMA1_Channel3->CCR |= DMA_CCR_MINC;
 8001b80:	4b3c      	ldr	r3, [pc, #240]	; (8001c74 <USART3_additional_configuration+0x110>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a3b      	ldr	r2, [pc, #236]	; (8001c74 <USART3_additional_configuration+0x110>)
 8001b86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b8a:	6013      	str	r3, [r2, #0]
	DMA1_Channel3->CCR |= DMA_CCR_CIRC;
 8001b8c:	4b39      	ldr	r3, [pc, #228]	; (8001c74 <USART3_additional_configuration+0x110>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a38      	ldr	r2, [pc, #224]	; (8001c74 <USART3_additional_configuration+0x110>)
 8001b92:	f043 0320 	orr.w	r3, r3, #32
 8001b96:	6013      	str	r3, [r2, #0]
//		DMA1_Channel3->CCR |= DMA_CCR_TCIE;
	DMA1_Channel3->CCR &= ~DMA_CCR_TCIE;
 8001b98:	4b36      	ldr	r3, [pc, #216]	; (8001c74 <USART3_additional_configuration+0x110>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a35      	ldr	r2, [pc, #212]	; (8001c74 <USART3_additional_configuration+0x110>)
 8001b9e:	f023 0302 	bic.w	r3, r3, #2
 8001ba2:	6013      	str	r3, [r2, #0]
	DMA1_Channel3->CCR &= ~DMA_CCR_HTIE;
 8001ba4:	4b33      	ldr	r3, [pc, #204]	; (8001c74 <USART3_additional_configuration+0x110>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a32      	ldr	r2, [pc, #200]	; (8001c74 <USART3_additional_configuration+0x110>)
 8001baa:	f023 0304 	bic.w	r3, r3, #4
 8001bae:	6013      	str	r3, [r2, #0]
	DMA1_Channel3->CCR &= ~DMA_CCR_TEIE;
 8001bb0:	4b30      	ldr	r3, [pc, #192]	; (8001c74 <USART3_additional_configuration+0x110>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a2f      	ldr	r2, [pc, #188]	; (8001c74 <USART3_additional_configuration+0x110>)
 8001bb6:	f023 0308 	bic.w	r3, r3, #8
 8001bba:	6013      	str	r3, [r2, #0]

	DMA1_Channel3->CNDTR = ESPRXBUFFERSIZE;
 8001bbc:	4b2d      	ldr	r3, [pc, #180]	; (8001c74 <USART3_additional_configuration+0x110>)
 8001bbe:	f240 12ff 	movw	r2, #511	; 0x1ff
 8001bc2:	605a      	str	r2, [r3, #4]
	DMA1_Channel3->CPAR = (uint32_t)&(USART3->RDR);
 8001bc4:	4b2b      	ldr	r3, [pc, #172]	; (8001c74 <USART3_additional_configuration+0x110>)
 8001bc6:	4a2c      	ldr	r2, [pc, #176]	; (8001c78 <USART3_additional_configuration+0x114>)
 8001bc8:	609a      	str	r2, [r3, #8]
	DMA1_Channel3->CMAR = (uint32_t)&rxBuffer[0];
 8001bca:	4b2a      	ldr	r3, [pc, #168]	; (8001c74 <USART3_additional_configuration+0x110>)
 8001bcc:	4a2b      	ldr	r2, [pc, #172]	; (8001c7c <USART3_additional_configuration+0x118>)
 8001bce:	60da      	str	r2, [r3, #12]

	USART3->CR3 &= ~USART_CR3_DMAR;
 8001bd0:	4b2b      	ldr	r3, [pc, #172]	; (8001c80 <USART3_additional_configuration+0x11c>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	4a2a      	ldr	r2, [pc, #168]	; (8001c80 <USART3_additional_configuration+0x11c>)
 8001bd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001bda:	6093      	str	r3, [r2, #8]
	DMA1_Channel3->CCR &= ~DMA_CCR_EN;
 8001bdc:	4b25      	ldr	r3, [pc, #148]	; (8001c74 <USART3_additional_configuration+0x110>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a24      	ldr	r2, [pc, #144]	; (8001c74 <USART3_additional_configuration+0x110>)
 8001be2:	f023 0301 	bic.w	r3, r3, #1
 8001be6:	6013      	str	r3, [r2, #0]

	DMA1_Channel2->CCR &= ~DMA_CCR_EN;
 8001be8:	4b26      	ldr	r3, [pc, #152]	; (8001c84 <USART3_additional_configuration+0x120>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a25      	ldr	r2, [pc, #148]	; (8001c84 <USART3_additional_configuration+0x120>)
 8001bee:	f023 0301 	bic.w	r3, r3, #1
 8001bf2:	6013      	str	r3, [r2, #0]

	DMA1_Channel2->CCR |= DMA_CCR_MINC;
 8001bf4:	4b23      	ldr	r3, [pc, #140]	; (8001c84 <USART3_additional_configuration+0x120>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a22      	ldr	r2, [pc, #136]	; (8001c84 <USART3_additional_configuration+0x120>)
 8001bfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bfe:	6013      	str	r3, [r2, #0]
	DMA1_Channel2->CCR &= ~DMA_CCR_CIRC;
 8001c00:	4b20      	ldr	r3, [pc, #128]	; (8001c84 <USART3_additional_configuration+0x120>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a1f      	ldr	r2, [pc, #124]	; (8001c84 <USART3_additional_configuration+0x120>)
 8001c06:	f023 0320 	bic.w	r3, r3, #32
 8001c0a:	6013      	str	r3, [r2, #0]
	DMA1_Channel2->CCR |= DMA_CCR_DIR;
 8001c0c:	4b1d      	ldr	r3, [pc, #116]	; (8001c84 <USART3_additional_configuration+0x120>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a1c      	ldr	r2, [pc, #112]	; (8001c84 <USART3_additional_configuration+0x120>)
 8001c12:	f043 0310 	orr.w	r3, r3, #16
 8001c16:	6013      	str	r3, [r2, #0]
	DMA1_Channel2->CCR |= DMA_CCR_TCIE;
 8001c18:	4b1a      	ldr	r3, [pc, #104]	; (8001c84 <USART3_additional_configuration+0x120>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a19      	ldr	r2, [pc, #100]	; (8001c84 <USART3_additional_configuration+0x120>)
 8001c1e:	f043 0302 	orr.w	r3, r3, #2
 8001c22:	6013      	str	r3, [r2, #0]
	DMA1_Channel2->CCR &= ~DMA_CCR_HTIE;
 8001c24:	4b17      	ldr	r3, [pc, #92]	; (8001c84 <USART3_additional_configuration+0x120>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a16      	ldr	r2, [pc, #88]	; (8001c84 <USART3_additional_configuration+0x120>)
 8001c2a:	f023 0304 	bic.w	r3, r3, #4
 8001c2e:	6013      	str	r3, [r2, #0]
	DMA1_Channel2->CCR &= ~DMA_CCR_TEIE;
 8001c30:	4b14      	ldr	r3, [pc, #80]	; (8001c84 <USART3_additional_configuration+0x120>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a13      	ldr	r2, [pc, #76]	; (8001c84 <USART3_additional_configuration+0x120>)
 8001c36:	f023 0308 	bic.w	r3, r3, #8
 8001c3a:	6013      	str	r3, [r2, #0]

	DMA1_Channel2->CNDTR = 0;
 8001c3c:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <USART3_additional_configuration+0x120>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	605a      	str	r2, [r3, #4]
	DMA1_Channel2->CPAR = (uint32_t)&(USART3->TDR);
 8001c42:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <USART3_additional_configuration+0x120>)
 8001c44:	4a10      	ldr	r2, [pc, #64]	; (8001c88 <USART3_additional_configuration+0x124>)
 8001c46:	609a      	str	r2, [r3, #8]
	DMA1_Channel2->CMAR = (uint32_t)&txBuffer[0];
 8001c48:	4b0e      	ldr	r3, [pc, #56]	; (8001c84 <USART3_additional_configuration+0x120>)
 8001c4a:	4a10      	ldr	r2, [pc, #64]	; (8001c8c <USART3_additional_configuration+0x128>)
 8001c4c:	60da      	str	r2, [r3, #12]

	USART3->CR3 &= ~USART_CR3_DMAT;
 8001c4e:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <USART3_additional_configuration+0x11c>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	4a0b      	ldr	r2, [pc, #44]	; (8001c80 <USART3_additional_configuration+0x11c>)
 8001c54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c58:	6093      	str	r3, [r2, #8]
	DMA1_Channel2->CCR &= ~DMA_CCR_EN;
 8001c5a:	4b0a      	ldr	r3, [pc, #40]	; (8001c84 <USART3_additional_configuration+0x120>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a09      	ldr	r2, [pc, #36]	; (8001c84 <USART3_additional_configuration+0x120>)
 8001c60:	f023 0301 	bic.w	r3, r3, #1
 8001c64:	6013      	str	r3, [r2, #0]
}
 8001c66:	bf00      	nop
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	40021000 	.word	0x40021000
 8001c74:	40020030 	.word	0x40020030
 8001c78:	40004824 	.word	0x40004824
 8001c7c:	20000c64 	.word	0x20000c64
 8001c80:	40004800 	.word	0x40004800
 8001c84:	4002001c 	.word	0x4002001c
 8001c88:	40004828 	.word	0x40004828
 8001c8c:	20000a64 	.word	0x20000a64

08001c90 <timerForSendDataCallback>:

void timerForSendDataCallback(TimerHandle_t xTimer)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
	xEventGroupSetBits(timerFdsEventGroup, 0x1);
 8001c98:	4b04      	ldr	r3, [pc, #16]	; (8001cac <timerForSendDataCallback+0x1c>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f006 f8b2 	bl	8007e08 <xEventGroupSetBits>
}
 8001ca4:	bf00      	nop
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	20000eec 	.word	0x20000eec

08001cb0 <psMeasure>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_psMeasure */
void psMeasure(void const * argument)
{
 8001cb0:	b590      	push	{r4, r7, lr}
 8001cb2:	b08b      	sub	sp, #44	; 0x2c
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	char measureResult[30];
	memset(measureResult, ' ', sizeof(measureResult));
 8001cb8:	f107 0308 	add.w	r3, r7, #8
 8001cbc:	221e      	movs	r2, #30
 8001cbe:	2120      	movs	r1, #32
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f009 fb44 	bl	800b34e <memset>
  /* Infinite loop */
  for(;;)
  {
    osDelay(8);
 8001cc6:	2008      	movs	r0, #8
 8001cc8:	f006 f814 	bl	8007cf4 <osDelay>

    for(uint8_t i = 0; i < (sizeof(batteryVoltage)/sizeof(batteryVoltage[0])); i++) {
 8001ccc:	2300      	movs	r3, #0
 8001cce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001cd2:	e010      	b.n	8001cf6 <psMeasure+0x46>
    	avrBatVoltage += batteryVoltage[i];
 8001cd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001cd8:	4a4a      	ldr	r2, [pc, #296]	; (8001e04 <psMeasure+0x154>)
 8001cda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	4b49      	ldr	r3, [pc, #292]	; (8001e08 <psMeasure+0x158>)
 8001ce2:	881b      	ldrh	r3, [r3, #0]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	4b47      	ldr	r3, [pc, #284]	; (8001e08 <psMeasure+0x158>)
 8001cea:	801a      	strh	r2, [r3, #0]
    for(uint8_t i = 0; i < (sizeof(batteryVoltage)/sizeof(batteryVoltage[0])); i++) {
 8001cec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001cf6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001cfa:	2b09      	cmp	r3, #9
 8001cfc:	d9ea      	bls.n	8001cd4 <psMeasure+0x24>
    }
    avrBatVoltage = avrBatVoltage / (sizeof(batteryVoltage)/sizeof(batteryVoltage[0]));
 8001cfe:	4b42      	ldr	r3, [pc, #264]	; (8001e08 <psMeasure+0x158>)
 8001d00:	881b      	ldrh	r3, [r3, #0]
 8001d02:	4a42      	ldr	r2, [pc, #264]	; (8001e0c <psMeasure+0x15c>)
 8001d04:	fba2 2303 	umull	r2, r3, r2, r3
 8001d08:	08db      	lsrs	r3, r3, #3
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	4b3e      	ldr	r3, [pc, #248]	; (8001e08 <psMeasure+0x158>)
 8001d0e:	801a      	strh	r2, [r3, #0]
    if(avrBatVoltage > BATMAXV) {
 8001d10:	4b3d      	ldr	r3, [pc, #244]	; (8001e08 <psMeasure+0x158>)
 8001d12:	881b      	ldrh	r3, [r3, #0]
 8001d14:	f640 0298 	movw	r2, #2200	; 0x898
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d92a      	bls.n	8001d72 <psMeasure+0xc2>
    	memset(measureResult, ' ', sizeof(measureResult));
 8001d1c:	f107 0308 	add.w	r3, r7, #8
 8001d20:	221e      	movs	r2, #30
 8001d22:	2120      	movs	r1, #32
 8001d24:	4618      	mov	r0, r3
 8001d26:	f009 fb12 	bl	800b34e <memset>
    	strcpy(measureResult, "Voltage > MAX");
 8001d2a:	f107 0308 	add.w	r3, r7, #8
 8001d2e:	4a38      	ldr	r2, [pc, #224]	; (8001e10 <psMeasure+0x160>)
 8001d30:	461c      	mov	r4, r3
 8001d32:	4613      	mov	r3, r2
 8001d34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d36:	c407      	stmia	r4!, {r0, r1, r2}
 8001d38:	8023      	strh	r3, [r4, #0]
    	xEventGroupClearBits(pc13EventGroup, 0xFFFFFF);
 8001d3a:	4b36      	ldr	r3, [pc, #216]	; (8001e14 <psMeasure+0x164>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8001d42:	4618      	mov	r0, r3
 8001d44:	f006 f804 	bl	8007d50 <xEventGroupClearBits>
    	xEventGroupSetBits(pc13EventGroup, OVERVOLTAGEONLED);
 8001d48:	4b32      	ldr	r3, [pc, #200]	; (8001e14 <psMeasure+0x164>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2101      	movs	r1, #1
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f006 f85a 	bl	8007e08 <xEventGroupSetBits>
    	xEventGroupClearBits(pc14EventGroup, 0xFFFFFF);
 8001d54:	4b30      	ldr	r3, [pc, #192]	; (8001e18 <psMeasure+0x168>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f005 fff7 	bl	8007d50 <xEventGroupClearBits>
    	xEventGroupSetBits(pc14EventGroup, OVERVOLTAGEONLED);
 8001d62:	4b2d      	ldr	r3, [pc, #180]	; (8001e18 <psMeasure+0x168>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2101      	movs	r1, #1
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f006 f84d 	bl	8007e08 <xEventGroupSetBits>
    	__asm__ volatile("NOP");
 8001d6e:	bf00      	nop
 8001d70:	e7a9      	b.n	8001cc6 <psMeasure+0x16>
    } else if(avrBatVoltage < BATMINV) {
 8001d72:	4b25      	ldr	r3, [pc, #148]	; (8001e08 <psMeasure+0x158>)
 8001d74:	881b      	ldrh	r3, [r3, #0]
 8001d76:	f640 023d 	movw	r2, #2109	; 0x83d
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d82a      	bhi.n	8001dd4 <psMeasure+0x124>
    	memset(measureResult, ' ', sizeof(measureResult));
 8001d7e:	f107 0308 	add.w	r3, r7, #8
 8001d82:	221e      	movs	r2, #30
 8001d84:	2120      	movs	r1, #32
 8001d86:	4618      	mov	r0, r3
 8001d88:	f009 fae1 	bl	800b34e <memset>
    	strcpy(measureResult, "Voltage < MIN");
 8001d8c:	f107 0308 	add.w	r3, r7, #8
 8001d90:	4a22      	ldr	r2, [pc, #136]	; (8001e1c <psMeasure+0x16c>)
 8001d92:	461c      	mov	r4, r3
 8001d94:	4613      	mov	r3, r2
 8001d96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d98:	c407      	stmia	r4!, {r0, r1, r2}
 8001d9a:	8023      	strh	r3, [r4, #0]
    	xEventGroupClearBits(pc13EventGroup, 0xFFFFFF);
 8001d9c:	4b1d      	ldr	r3, [pc, #116]	; (8001e14 <psMeasure+0x164>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8001da4:	4618      	mov	r0, r3
 8001da6:	f005 ffd3 	bl	8007d50 <xEventGroupClearBits>
    	xEventGroupSetBits(pc13EventGroup, UNDERVOLTAGEONLED);
 8001daa:	4b1a      	ldr	r3, [pc, #104]	; (8001e14 <psMeasure+0x164>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2102      	movs	r1, #2
 8001db0:	4618      	mov	r0, r3
 8001db2:	f006 f829 	bl	8007e08 <xEventGroupSetBits>
    	xEventGroupClearBits(pc14EventGroup, 0xFFFFFF);
 8001db6:	4b18      	ldr	r3, [pc, #96]	; (8001e18 <psMeasure+0x168>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f005 ffc6 	bl	8007d50 <xEventGroupClearBits>
    	xEventGroupSetBits(pc14EventGroup, UNDERVOLTAGEONLED);
 8001dc4:	4b14      	ldr	r3, [pc, #80]	; (8001e18 <psMeasure+0x168>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2102      	movs	r1, #2
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f006 f81c 	bl	8007e08 <xEventGroupSetBits>
    	__asm__ volatile("NOP");
 8001dd0:	bf00      	nop
 8001dd2:	e778      	b.n	8001cc6 <psMeasure+0x16>
    } else {
    	memset(measureResult, ' ', sizeof(measureResult));
 8001dd4:	f107 0308 	add.w	r3, r7, #8
 8001dd8:	221e      	movs	r2, #30
 8001dda:	2120      	movs	r1, #32
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f009 fab6 	bl	800b34e <memset>
    	xEventGroupClearBits(pc13EventGroup, 0xFFFFFF);
 8001de2:	4b0c      	ldr	r3, [pc, #48]	; (8001e14 <psMeasure+0x164>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8001dea:	4618      	mov	r0, r3
 8001dec:	f005 ffb0 	bl	8007d50 <xEventGroupClearBits>
    	xEventGroupClearBits(pc14EventGroup, 0xFFFFFF);
 8001df0:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <psMeasure+0x168>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f005 ffa9 	bl	8007d50 <xEventGroupClearBits>
    	__asm__ volatile("NOP");
 8001dfe:	bf00      	nop
    osDelay(8);
 8001e00:	e761      	b.n	8001cc6 <psMeasure+0x16>
 8001e02:	bf00      	nop
 8001e04:	200009fc 	.word	0x200009fc
 8001e08:	20000a10 	.word	0x20000a10
 8001e0c:	cccccccd 	.word	0xcccccccd
 8001e10:	0800e52c 	.word	0x0800e52c
 8001e14:	20000a14 	.word	0x20000a14
 8001e18:	20000a18 	.word	0x20000a18
 8001e1c:	0800e53c 	.word	0x0800e53c

08001e20 <pc13LedCntrl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pc13LedCntrl */
void pc13LedCntrl(void const * argument)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN pc13LedCntrl */
	EventBits_t eventBits;
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001e28:	2001      	movs	r0, #1
 8001e2a:	f005 ff63 	bl	8007cf4 <osDelay>
    eventBits = xEventGroupGetBits(pc13EventGroup);
 8001e2e:	4b18      	ldr	r3, [pc, #96]	; (8001e90 <pc13LedCntrl+0x70>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2100      	movs	r1, #0
 8001e34:	4618      	mov	r0, r3
 8001e36:	f005 ff8b 	bl	8007d50 <xEventGroupClearBits>
 8001e3a:	60f8      	str	r0, [r7, #12]
    switch (eventBits) {
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d003      	beq.n	8001e4a <pc13LedCntrl+0x2a>
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d00b      	beq.n	8001e60 <pc13LedCntrl+0x40>
 8001e48:	e016      	b.n	8001e78 <pc13LedCntrl+0x58>
		case OVERVOLTAGEONLED:
			osDelay(200);
 8001e4a:	20c8      	movs	r0, #200	; 0xc8
 8001e4c:	f005 ff52 	bl	8007cf4 <osDelay>
			GPIOC->ODR ^= GPIO_ODR_13;
 8001e50:	4b10      	ldr	r3, [pc, #64]	; (8001e94 <pc13LedCntrl+0x74>)
 8001e52:	695b      	ldr	r3, [r3, #20]
 8001e54:	4a0f      	ldr	r2, [pc, #60]	; (8001e94 <pc13LedCntrl+0x74>)
 8001e56:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001e5a:	6153      	str	r3, [r2, #20]
			__asm__ volatile("NOP");
 8001e5c:	bf00      	nop
			break;
 8001e5e:	e016      	b.n	8001e8e <pc13LedCntrl+0x6e>
		case UNDERVOLTAGEONLED:
			osDelay(300);
 8001e60:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001e64:	f005 ff46 	bl	8007cf4 <osDelay>
			GPIOC->ODR ^= GPIO_ODR_13;
 8001e68:	4b0a      	ldr	r3, [pc, #40]	; (8001e94 <pc13LedCntrl+0x74>)
 8001e6a:	695b      	ldr	r3, [r3, #20]
 8001e6c:	4a09      	ldr	r2, [pc, #36]	; (8001e94 <pc13LedCntrl+0x74>)
 8001e6e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001e72:	6153      	str	r3, [r2, #20]
			__asm__ volatile("NOP");
 8001e74:	bf00      	nop
			break;
 8001e76:	e00a      	b.n	8001e8e <pc13LedCntrl+0x6e>
		default:
			GPIOC->ODR &= ~GPIO_ODR_13;
 8001e78:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <pc13LedCntrl+0x74>)
 8001e7a:	695b      	ldr	r3, [r3, #20]
 8001e7c:	4a05      	ldr	r2, [pc, #20]	; (8001e94 <pc13LedCntrl+0x74>)
 8001e7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001e82:	6153      	str	r3, [r2, #20]
			osDelay(200);
 8001e84:	20c8      	movs	r0, #200	; 0xc8
 8001e86:	f005 ff35 	bl	8007cf4 <osDelay>
			__asm__ volatile("NOP");
 8001e8a:	bf00      	nop
			break;
 8001e8c:	bf00      	nop
    osDelay(1);
 8001e8e:	e7cb      	b.n	8001e28 <pc13LedCntrl+0x8>
 8001e90:	20000a14 	.word	0x20000a14
 8001e94:	48000800 	.word	0x48000800

08001e98 <pc14LedCntrl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pc14LedCntrl */
void pc14LedCntrl(void const * argument)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN pc14LedCntrl */
	EventBits_t eventBits;
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001ea0:	2001      	movs	r0, #1
 8001ea2:	f005 ff27 	bl	8007cf4 <osDelay>
    eventBits = xEventGroupGetBits(pc14EventGroup);
 8001ea6:	4b18      	ldr	r3, [pc, #96]	; (8001f08 <pc14LedCntrl+0x70>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2100      	movs	r1, #0
 8001eac:	4618      	mov	r0, r3
 8001eae:	f005 ff4f 	bl	8007d50 <xEventGroupClearBits>
 8001eb2:	60f8      	str	r0, [r7, #12]
    switch (eventBits) {
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d003      	beq.n	8001ec2 <pc14LedCntrl+0x2a>
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d00b      	beq.n	8001ed8 <pc14LedCntrl+0x40>
 8001ec0:	e016      	b.n	8001ef0 <pc14LedCntrl+0x58>
		case OVERVOLTAGEONLED:
			osDelay(200);
 8001ec2:	20c8      	movs	r0, #200	; 0xc8
 8001ec4:	f005 ff16 	bl	8007cf4 <osDelay>
			GPIOC->ODR ^= GPIO_ODR_14;
 8001ec8:	4b10      	ldr	r3, [pc, #64]	; (8001f0c <pc14LedCntrl+0x74>)
 8001eca:	695b      	ldr	r3, [r3, #20]
 8001ecc:	4a0f      	ldr	r2, [pc, #60]	; (8001f0c <pc14LedCntrl+0x74>)
 8001ece:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 8001ed2:	6153      	str	r3, [r2, #20]
			__asm__ volatile("NOP");
 8001ed4:	bf00      	nop
			break;
 8001ed6:	e016      	b.n	8001f06 <pc14LedCntrl+0x6e>
		case UNDERVOLTAGEONLED:
			osDelay(300);
 8001ed8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001edc:	f005 ff0a 	bl	8007cf4 <osDelay>
			GPIOC->ODR ^= GPIO_ODR_14;
 8001ee0:	4b0a      	ldr	r3, [pc, #40]	; (8001f0c <pc14LedCntrl+0x74>)
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	4a09      	ldr	r2, [pc, #36]	; (8001f0c <pc14LedCntrl+0x74>)
 8001ee6:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 8001eea:	6153      	str	r3, [r2, #20]
			__asm__ volatile("NOP");
 8001eec:	bf00      	nop
			break;
 8001eee:	e00a      	b.n	8001f06 <pc14LedCntrl+0x6e>
		default:
			GPIOC->ODR &= ~GPIO_ODR_14;
 8001ef0:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <pc14LedCntrl+0x74>)
 8001ef2:	695b      	ldr	r3, [r3, #20]
 8001ef4:	4a05      	ldr	r2, [pc, #20]	; (8001f0c <pc14LedCntrl+0x74>)
 8001ef6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001efa:	6153      	str	r3, [r2, #20]
			osDelay(200);
 8001efc:	20c8      	movs	r0, #200	; 0xc8
 8001efe:	f005 fef9 	bl	8007cf4 <osDelay>
			__asm__ volatile("NOP");
 8001f02:	bf00      	nop
			break;
 8001f04:	bf00      	nop
    osDelay(1);
 8001f06:	e7cb      	b.n	8001ea0 <pc14LedCntrl+0x8>
 8001f08:	20000a18 	.word	0x20000a18
 8001f0c:	48000800 	.word	0x48000800

08001f10 <espCommunication>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_espCommunication */
void espCommunication(void const * argument)
{
 8001f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f14:	b0a9      	sub	sp, #164	; 0xa4
 8001f16:	af0c      	add	r7, sp, #48	; 0x30
 8001f18:	6278      	str	r0, [r7, #36]	; 0x24
  /* USER CODE BEGIN espCommunication */
	vTaskDelay( pdMS_TO_TICKS( 100 ) );
 8001f1a:	2064      	movs	r0, #100	; 0x64
 8001f1c:	f006 ff20 	bl	8008d60 <vTaskDelay>
	taskENTER_CRITICAL();
 8001f20:	f008 f9a0 	bl	800a264 <vPortEnterCritical>
	  GPIOB->ODR |= (1<<1);
 8001f24:	4bb4      	ldr	r3, [pc, #720]	; (80021f8 <espCommunication+0x2e8>)
 8001f26:	695b      	ldr	r3, [r3, #20]
 8001f28:	4ab3      	ldr	r2, [pc, #716]	; (80021f8 <espCommunication+0x2e8>)
 8001f2a:	f043 0302 	orr.w	r3, r3, #2
 8001f2e:	6153      	str	r3, [r2, #20]
	  GPIOB->ODR |= (1<<2);
 8001f30:	4bb1      	ldr	r3, [pc, #708]	; (80021f8 <espCommunication+0x2e8>)
 8001f32:	695b      	ldr	r3, [r3, #20]
 8001f34:	4ab0      	ldr	r2, [pc, #704]	; (80021f8 <espCommunication+0x2e8>)
 8001f36:	f043 0304 	orr.w	r3, r3, #4
 8001f3a:	6153      	str	r3, [r2, #20]
	  txBuffer[0] = 'A';
 8001f3c:	4baf      	ldr	r3, [pc, #700]	; (80021fc <espCommunication+0x2ec>)
 8001f3e:	2241      	movs	r2, #65	; 0x41
 8001f40:	701a      	strb	r2, [r3, #0]
	  txBuffer[1] = 'T';
 8001f42:	4bae      	ldr	r3, [pc, #696]	; (80021fc <espCommunication+0x2ec>)
 8001f44:	2254      	movs	r2, #84	; 0x54
 8001f46:	705a      	strb	r2, [r3, #1]
	  txBuffer[2] = '\r';
 8001f48:	4bac      	ldr	r3, [pc, #688]	; (80021fc <espCommunication+0x2ec>)
 8001f4a:	220d      	movs	r2, #13
 8001f4c:	709a      	strb	r2, [r3, #2]
	  txBuffer[3] = '\n';
 8001f4e:	4bab      	ldr	r3, [pc, #684]	; (80021fc <espCommunication+0x2ec>)
 8001f50:	220a      	movs	r2, #10
 8001f52:	70da      	strb	r2, [r3, #3]
	  char controlAnsw[] = "AT\r\r\n\r\nOK\r\n";
 8001f54:	4aaa      	ldr	r2, [pc, #680]	; (8002200 <espCommunication+0x2f0>)
 8001f56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f5a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f5c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	  while(strcmp(rxBuffer, controlAnsw) != 0) {
 8001f60:	e023      	b.n	8001faa <espCommunication+0x9a>
		  for(uint16_t i = 0; i < sizeof(rxBuffer); i++) {
 8001f62:	2300      	movs	r3, #0
 8001f64:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 8001f68:	e009      	b.n	8001f7e <espCommunication+0x6e>
			  rxBuffer[i] = 0;
 8001f6a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8001f6e:	4aa5      	ldr	r2, [pc, #660]	; (8002204 <espCommunication+0x2f4>)
 8001f70:	2100      	movs	r1, #0
 8001f72:	54d1      	strb	r1, [r2, r3]
		  for(uint16_t i = 0; i < sizeof(rxBuffer); i++) {
 8001f74:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8001f78:	3301      	adds	r3, #1
 8001f7a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 8001f7e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8001f82:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8001f86:	d9f0      	bls.n	8001f6a <espCommunication+0x5a>
		  }
		  HAL_UART_Transmit(&huart3, (uint8_t*)txBuffer, 4, 250);
 8001f88:	23fa      	movs	r3, #250	; 0xfa
 8001f8a:	2204      	movs	r2, #4
 8001f8c:	499b      	ldr	r1, [pc, #620]	; (80021fc <espCommunication+0x2ec>)
 8001f8e:	489e      	ldr	r0, [pc, #632]	; (8002208 <espCommunication+0x2f8>)
 8001f90:	f005 f9a6 	bl	80072e0 <HAL_UART_Transmit>
		  HAL_UART_Receive(&huart3, (uint8_t*)rxBuffer, sizeof(rxBuffer), 250);
 8001f94:	23fa      	movs	r3, #250	; 0xfa
 8001f96:	f240 12ff 	movw	r2, #511	; 0x1ff
 8001f9a:	499a      	ldr	r1, [pc, #616]	; (8002204 <espCommunication+0x2f4>)
 8001f9c:	489a      	ldr	r0, [pc, #616]	; (8002208 <espCommunication+0x2f8>)
 8001f9e:	f005 fa29 	bl	80073f4 <HAL_UART_Receive>
		  vTaskDelay( pdMS_TO_TICKS( 100 ) );
 8001fa2:	2064      	movs	r0, #100	; 0x64
 8001fa4:	f006 fedc 	bl	8008d60 <vTaskDelay>
		  __asm__ volatile("NOP");
 8001fa8:	bf00      	nop
	  while(strcmp(rxBuffer, controlAnsw) != 0) {
 8001faa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4894      	ldr	r0, [pc, #592]	; (8002204 <espCommunication+0x2f4>)
 8001fb2:	f7fe f90d 	bl	80001d0 <strcmp>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d1d2      	bne.n	8001f62 <espCommunication+0x52>
	  }

	  sendATCommand(&huart3, "AT+CWMODE_CUR=1\r\n", 17 , 250);
 8001fbc:	23fa      	movs	r3, #250	; 0xfa
 8001fbe:	2211      	movs	r2, #17
 8001fc0:	4992      	ldr	r1, [pc, #584]	; (800220c <espCommunication+0x2fc>)
 8001fc2:	4891      	ldr	r0, [pc, #580]	; (8002208 <espCommunication+0x2f8>)
 8001fc4:	f7fe fe50 	bl	8000c68 <sendATCommand>
	  receiveAnswer(&huart3, rxBuffer, sizeof(rxBuffer), 250);
 8001fc8:	23fa      	movs	r3, #250	; 0xfa
 8001fca:	f240 12ff 	movw	r2, #511	; 0x1ff
 8001fce:	498d      	ldr	r1, [pc, #564]	; (8002204 <espCommunication+0x2f4>)
 8001fd0:	488d      	ldr	r0, [pc, #564]	; (8002208 <espCommunication+0x2f8>)
 8001fd2:	f7fe fe6d 	bl	8000cb0 <receiveAnswer>

	  memset(txBuffer, '\0', sizeof(txBuffer));
 8001fd6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8001fda:	2100      	movs	r1, #0
 8001fdc:	4887      	ldr	r0, [pc, #540]	; (80021fc <espCommunication+0x2ec>)
 8001fde:	f009 f9b6 	bl	800b34e <memset>
	  strcpy(txBuffer, "AT+CWJAP_CUR=\"RedmiGiGidra\",\"DimaDimaDimon\"\r\n");
 8001fe2:	4a86      	ldr	r2, [pc, #536]	; (80021fc <espCommunication+0x2ec>)
 8001fe4:	4b8a      	ldr	r3, [pc, #552]	; (8002210 <espCommunication+0x300>)
 8001fe6:	4614      	mov	r4, r2
 8001fe8:	461d      	mov	r5, r3
 8001fea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ff0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ff2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001ff6:	c407      	stmia	r4!, {r0, r1, r2}
 8001ff8:	8023      	strh	r3, [r4, #0]
	  sendATCommand(&huart3, txBuffer, sizeof(txBuffer), 1000);
 8001ffa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ffe:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002002:	497e      	ldr	r1, [pc, #504]	; (80021fc <espCommunication+0x2ec>)
 8002004:	4880      	ldr	r0, [pc, #512]	; (8002208 <espCommunication+0x2f8>)
 8002006:	f7fe fe2f 	bl	8000c68 <sendATCommand>
	  receiveAnswer(&huart3, rxBuffer, sizeof(rxBuffer), 10000);
 800200a:	f242 7310 	movw	r3, #10000	; 0x2710
 800200e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002012:	497c      	ldr	r1, [pc, #496]	; (8002204 <espCommunication+0x2f4>)
 8002014:	487c      	ldr	r0, [pc, #496]	; (8002208 <espCommunication+0x2f8>)
 8002016:	f7fe fe4b 	bl	8000cb0 <receiveAnswer>

	  taskEXIT_CRITICAL();
 800201a:	f008 f953 	bl	800a2c4 <vPortExitCritical>

	  memset(rxBuffer, '\0', sizeof(rxBuffer));
 800201e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002022:	2100      	movs	r1, #0
 8002024:	4877      	ldr	r0, [pc, #476]	; (8002204 <espCommunication+0x2f4>)
 8002026:	f009 f992 	bl	800b34e <memset>
	  USART3->CR3 |= USART_CR3_DMAR;
 800202a:	4b7a      	ldr	r3, [pc, #488]	; (8002214 <espCommunication+0x304>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	4a79      	ldr	r2, [pc, #484]	; (8002214 <espCommunication+0x304>)
 8002030:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002034:	6093      	str	r3, [r2, #8]
	  DMA1_Channel3->CCR |= DMA_CCR_EN; //Starting continuous DMA on RX
 8002036:	4b78      	ldr	r3, [pc, #480]	; (8002218 <espCommunication+0x308>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a77      	ldr	r2, [pc, #476]	; (8002218 <espCommunication+0x308>)
 800203c:	f043 0301 	orr.w	r3, r3, #1
 8002040:	6013      	str	r3, [r2, #0]

	  vTaskDelay( pdMS_TO_TICKS( 2000 ) );
 8002042:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002046:	f006 fe8b 	bl	8008d60 <vTaskDelay>

	  sprintf(txBuffer, "ATE0\r\n");
 800204a:	4974      	ldr	r1, [pc, #464]	; (800221c <espCommunication+0x30c>)
 800204c:	486b      	ldr	r0, [pc, #428]	; (80021fc <espCommunication+0x2ec>)
 800204e:	f009 f91b 	bl	800b288 <siprintf>
	  sendATCommand(&huart3, txBuffer, strlen(txBuffer), 250);
 8002052:	486a      	ldr	r0, [pc, #424]	; (80021fc <espCommunication+0x2ec>)
 8002054:	f7fe f91c 	bl	8000290 <strlen>
 8002058:	4603      	mov	r3, r0
 800205a:	461a      	mov	r2, r3
 800205c:	23fa      	movs	r3, #250	; 0xfa
 800205e:	4967      	ldr	r1, [pc, #412]	; (80021fc <espCommunication+0x2ec>)
 8002060:	4869      	ldr	r0, [pc, #420]	; (8002208 <espCommunication+0x2f8>)
 8002062:	f7fe fe01 	bl	8000c68 <sendATCommand>
	  vTaskDelay( pdMS_TO_TICKS( 100 ) );
 8002066:	2064      	movs	r0, #100	; 0x64
 8002068:	f006 fe7a 	bl	8008d60 <vTaskDelay>

	  memset(txBuffer, '\0', sizeof(txBuffer));
 800206c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002070:	2100      	movs	r1, #0
 8002072:	4862      	ldr	r0, [pc, #392]	; (80021fc <espCommunication+0x2ec>)
 8002074:	f009 f96b 	bl	800b34e <memset>
	  strcpy(txBuffer, "AT+CIPCLOSE\r\n");
 8002078:	4a60      	ldr	r2, [pc, #384]	; (80021fc <espCommunication+0x2ec>)
 800207a:	4b69      	ldr	r3, [pc, #420]	; (8002220 <espCommunication+0x310>)
 800207c:	4614      	mov	r4, r2
 800207e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002080:	c407      	stmia	r4!, {r0, r1, r2}
 8002082:	8023      	strh	r3, [r4, #0]
	  sendATCommand(&huart3, txBuffer, sizeof(txBuffer), 250);
 8002084:	23fa      	movs	r3, #250	; 0xfa
 8002086:	f240 12ff 	movw	r2, #511	; 0x1ff
 800208a:	495c      	ldr	r1, [pc, #368]	; (80021fc <espCommunication+0x2ec>)
 800208c:	485e      	ldr	r0, [pc, #376]	; (8002208 <espCommunication+0x2f8>)
 800208e:	f7fe fdeb 	bl	8000c68 <sendATCommand>
	  vTaskDelay( pdMS_TO_TICKS( 250 ) );
 8002092:	20fa      	movs	r0, #250	; 0xfa
 8002094:	f006 fe64 	bl	8008d60 <vTaskDelay>

	  memset(txBuffer, '\0', sizeof(txBuffer));
 8002098:	f240 12ff 	movw	r2, #511	; 0x1ff
 800209c:	2100      	movs	r1, #0
 800209e:	4857      	ldr	r0, [pc, #348]	; (80021fc <espCommunication+0x2ec>)
 80020a0:	f009 f955 	bl	800b34e <memset>
	  strcpy(txBuffer, "AT+CIPSTART=\"TCP\",\"192.168.137.1\",8080\r\n");
 80020a4:	4a55      	ldr	r2, [pc, #340]	; (80021fc <espCommunication+0x2ec>)
 80020a6:	4b5f      	ldr	r3, [pc, #380]	; (8002224 <espCommunication+0x314>)
 80020a8:	4614      	mov	r4, r2
 80020aa:	461d      	mov	r5, r3
 80020ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80020b8:	c403      	stmia	r4!, {r0, r1}
 80020ba:	7022      	strb	r2, [r4, #0]
	  sendATCommand(&huart3, txBuffer, sizeof(txBuffer), 250);
 80020bc:	23fa      	movs	r3, #250	; 0xfa
 80020be:	f240 12ff 	movw	r2, #511	; 0x1ff
 80020c2:	494e      	ldr	r1, [pc, #312]	; (80021fc <espCommunication+0x2ec>)
 80020c4:	4850      	ldr	r0, [pc, #320]	; (8002208 <espCommunication+0x2f8>)
 80020c6:	f7fe fdcf 	bl	8000c68 <sendATCommand>
	  vTaskDelay( pdMS_TO_TICKS( 40 ) );
 80020ca:	2028      	movs	r0, #40	; 0x28
 80020cc:	f006 fe48 	bl	8008d60 <vTaskDelay>

	  memset(txBuffer, '\0', sizeof(txBuffer));
 80020d0:	f240 12ff 	movw	r2, #511	; 0x1ff
 80020d4:	2100      	movs	r1, #0
 80020d6:	4849      	ldr	r0, [pc, #292]	; (80021fc <espCommunication+0x2ec>)
 80020d8:	f009 f939 	bl	800b34e <memset>
		// Create the entire GET request string
		sprintf(txBuffer, "GET /robot HTTP/1.1\r\n"
 80020dc:	4952      	ldr	r1, [pc, #328]	; (8002228 <espCommunication+0x318>)
 80020de:	4847      	ldr	r0, [pc, #284]	; (80021fc <espCommunication+0x2ec>)
 80020e0:	f009 f8d2 	bl	800b288 <siprintf>
						  "Host: 192.168.137.1\r\n");
		int getRequestLength = strlen(txBuffer);
 80020e4:	4845      	ldr	r0, [pc, #276]	; (80021fc <espCommunication+0x2ec>)
 80020e6:	f7fe f8d3 	bl	8000290 <strlen>
 80020ea:	4603      	mov	r3, r0
 80020ec:	653b      	str	r3, [r7, #80]	; 0x50
  	  uint8_t char_number_get = 0;
 80020ee:	2300      	movs	r3, #0
 80020f0:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
  	  int temp_get = getRequestLength;
 80020f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020f6:	66bb      	str	r3, [r7, #104]	; 0x68
  	  while(temp_get != 0){
 80020f8:	e00c      	b.n	8002114 <espCommunication+0x204>
  		  temp_get = temp_get / 10;
 80020fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020fc:	4a4b      	ldr	r2, [pc, #300]	; (800222c <espCommunication+0x31c>)
 80020fe:	fb82 1203 	smull	r1, r2, r2, r3
 8002102:	1092      	asrs	r2, r2, #2
 8002104:	17db      	asrs	r3, r3, #31
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	66bb      	str	r3, [r7, #104]	; 0x68
  		  char_number_get++;
 800210a:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800210e:	3301      	adds	r3, #1
 8002110:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
  	  while(temp_get != 0){
 8002114:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1ef      	bne.n	80020fa <espCommunication+0x1ea>
  	  }
  	  char pDataBuf[13+char_number_get];
 800211a:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800211e:	f103 040d 	add.w	r4, r3, #13
 8002122:	1e63      	subs	r3, r4, #1
 8002124:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002126:	4622      	mov	r2, r4
 8002128:	2300      	movs	r3, #0
 800212a:	4692      	mov	sl, r2
 800212c:	469b      	mov	fp, r3
 800212e:	f04f 0200 	mov.w	r2, #0
 8002132:	f04f 0300 	mov.w	r3, #0
 8002136:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800213a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800213e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002142:	4622      	mov	r2, r4
 8002144:	2300      	movs	r3, #0
 8002146:	4690      	mov	r8, r2
 8002148:	4699      	mov	r9, r3
 800214a:	f04f 0200 	mov.w	r2, #0
 800214e:	f04f 0300 	mov.w	r3, #0
 8002152:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002156:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800215a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800215e:	4623      	mov	r3, r4
 8002160:	3307      	adds	r3, #7
 8002162:	08db      	lsrs	r3, r3, #3
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	ebad 0d03 	sub.w	sp, sp, r3
 800216a:	ab0c      	add	r3, sp, #48	; 0x30
 800216c:	3300      	adds	r3, #0
 800216e:	64bb      	str	r3, [r7, #72]	; 0x48
  	  sprintf(pDataBuf, "AT+CIPSEND=%d\r\n", getRequestLength);
 8002170:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002172:	492f      	ldr	r1, [pc, #188]	; (8002230 <espCommunication+0x320>)
 8002174:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002176:	f009 f887 	bl	800b288 <siprintf>
	  sendATCommand(&huart3, pDataBuf, sizeof(pDataBuf), 250);
 800217a:	23fa      	movs	r3, #250	; 0xfa
 800217c:	4622      	mov	r2, r4
 800217e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002180:	4821      	ldr	r0, [pc, #132]	; (8002208 <espCommunication+0x2f8>)
 8002182:	f7fe fd71 	bl	8000c68 <sendATCommand>
	  vTaskDelay( pdMS_TO_TICKS( 10 ) );
 8002186:	200a      	movs	r0, #10
 8002188:	f006 fdea 	bl	8008d60 <vTaskDelay>
	  sendATCommand(&huart3, txBuffer, getRequestLength, 250);
 800218c:	23fa      	movs	r3, #250	; 0xfa
 800218e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002190:	491a      	ldr	r1, [pc, #104]	; (80021fc <espCommunication+0x2ec>)
 8002192:	481d      	ldr	r0, [pc, #116]	; (8002208 <espCommunication+0x2f8>)
 8002194:	f7fe fd68 	bl	8000c68 <sendATCommand>

	  memset(txBuffer, '\0', sizeof(txBuffer));
 8002198:	f240 12ff 	movw	r2, #511	; 0x1ff
 800219c:	2100      	movs	r1, #0
 800219e:	4817      	ldr	r0, [pc, #92]	; (80021fc <espCommunication+0x2ec>)
 80021a0:	f009 f8d5 	bl	800b34e <memset>
	  vTaskDelay( pdMS_TO_TICKS( 50 ) );
 80021a4:	2032      	movs	r0, #50	; 0x32
 80021a6:	f006 fddb 	bl	8008d60 <vTaskDelay>

	  __asm__ volatile("NOP");
 80021aa:	bf00      	nop

  /* Infinite loop */
  for(;;)
  {
	  // Calculate the number of bytes received since the last processing
	  uint8_t receivedBytes = 0;
 80021ac:	2300      	movs	r3, #0
 80021ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	  if((ESPRXBUFFERSIZE - DMA1_Channel3->CNDTR) < rxBufferHead) {
 80021b2:	4b19      	ldr	r3, [pc, #100]	; (8002218 <espCommunication+0x308>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f5c3 73ff 	rsb	r3, r3, #510	; 0x1fe
 80021ba:	3301      	adds	r3, #1
 80021bc:	4a1d      	ldr	r2, [pc, #116]	; (8002234 <espCommunication+0x324>)
 80021be:	8812      	ldrh	r2, [r2, #0]
 80021c0:	b292      	uxth	r2, r2
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d23a      	bcs.n	800223c <espCommunication+0x32c>
		  receivedBytes = (ESPRXBUFFERSIZE - rxBufferHead + ESPRXBUFFERSIZE - DMA1_Channel3->CNDTR) % ESPRXBUFFERSIZE;
 80021c6:	4b1b      	ldr	r3, [pc, #108]	; (8002234 <espCommunication+0x324>)
 80021c8:	881b      	ldrh	r3, [r3, #0]
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	461a      	mov	r2, r3
 80021ce:	4b12      	ldr	r3, [pc, #72]	; (8002218 <espCommunication+0x308>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	4413      	add	r3, r2
 80021d4:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 80021d8:	3302      	adds	r3, #2
 80021da:	4a17      	ldr	r2, [pc, #92]	; (8002238 <espCommunication+0x328>)
 80021dc:	fba2 1203 	umull	r1, r2, r2, r3
 80021e0:	1a99      	subs	r1, r3, r2
 80021e2:	0849      	lsrs	r1, r1, #1
 80021e4:	440a      	add	r2, r1
 80021e6:	0a11      	lsrs	r1, r2, #8
 80021e8:	460a      	mov	r2, r1
 80021ea:	0252      	lsls	r2, r2, #9
 80021ec:	1a52      	subs	r2, r2, r1
 80021ee:	1a99      	subs	r1, r3, r2
 80021f0:	460b      	mov	r3, r1
 80021f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80021f6:	e038      	b.n	800226a <espCommunication+0x35a>
 80021f8:	48000400 	.word	0x48000400
 80021fc:	20000a64 	.word	0x20000a64
 8002200:	0800e73c 	.word	0x0800e73c
 8002204:	20000c64 	.word	0x20000c64
 8002208:	200008cc 	.word	0x200008cc
 800220c:	0800e54c 	.word	0x0800e54c
 8002210:	0800e560 	.word	0x0800e560
 8002214:	40004800 	.word	0x40004800
 8002218:	40020030 	.word	0x40020030
 800221c:	0800e590 	.word	0x0800e590
 8002220:	0800e598 	.word	0x0800e598
 8002224:	0800e5a8 	.word	0x0800e5a8
 8002228:	0800e5d4 	.word	0x0800e5d4
 800222c:	66666667 	.word	0x66666667
 8002230:	0800e600 	.word	0x0800e600
 8002234:	20000e64 	.word	0x20000e64
 8002238:	00804021 	.word	0x00804021
	  } else {
		  receivedBytes = (ESPRXBUFFERSIZE - DMA1_Channel3->CNDTR -rxBufferHead) % ESPRXBUFFERSIZE;
 800223c:	4bb4      	ldr	r3, [pc, #720]	; (8002510 <espCommunication+0x600>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	4ab4      	ldr	r2, [pc, #720]	; (8002514 <espCommunication+0x604>)
 8002242:	8812      	ldrh	r2, [r2, #0]
 8002244:	b292      	uxth	r2, r2
 8002246:	4413      	add	r3, r2
 8002248:	f5c3 73ff 	rsb	r3, r3, #510	; 0x1fe
 800224c:	3301      	adds	r3, #1
 800224e:	4ab2      	ldr	r2, [pc, #712]	; (8002518 <espCommunication+0x608>)
 8002250:	fba2 1203 	umull	r1, r2, r2, r3
 8002254:	1a99      	subs	r1, r3, r2
 8002256:	0849      	lsrs	r1, r1, #1
 8002258:	440a      	add	r2, r1
 800225a:	0a11      	lsrs	r1, r2, #8
 800225c:	460a      	mov	r2, r1
 800225e:	0252      	lsls	r2, r2, #9
 8002260:	1a52      	subs	r2, r2, r1
 8002262:	1a99      	subs	r1, r3, r2
 8002264:	460b      	mov	r3, r1
 8002266:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	  }

	  memset(rxBufferCopy, '\0', sizeof(rxBufferCopy));
 800226a:	2280      	movs	r2, #128	; 0x80
 800226c:	2100      	movs	r1, #0
 800226e:	48ab      	ldr	r0, [pc, #684]	; (800251c <espCommunication+0x60c>)
 8002270:	f009 f86d 	bl	800b34e <memset>
	  for(uint16_t i = 0; i < receivedBytes; i++) {
 8002274:	2300      	movs	r3, #0
 8002276:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800227a:	e01d      	b.n	80022b8 <espCommunication+0x3a8>
		  rxBufferCopy[i] = rxBuffer[(rxBufferHead + i)%ESPRXBUFFERSIZE];
 800227c:	4ba5      	ldr	r3, [pc, #660]	; (8002514 <espCommunication+0x604>)
 800227e:	881b      	ldrh	r3, [r3, #0]
 8002280:	b29b      	uxth	r3, r3
 8002282:	461a      	mov	r2, r3
 8002284:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002288:	441a      	add	r2, r3
 800228a:	4ba5      	ldr	r3, [pc, #660]	; (8002520 <espCommunication+0x610>)
 800228c:	fb83 1302 	smull	r1, r3, r3, r2
 8002290:	4413      	add	r3, r2
 8002292:	1219      	asrs	r1, r3, #8
 8002294:	17d3      	asrs	r3, r2, #31
 8002296:	1ac9      	subs	r1, r1, r3
 8002298:	460b      	mov	r3, r1
 800229a:	025b      	lsls	r3, r3, #9
 800229c:	1a5b      	subs	r3, r3, r1
 800229e:	1ad1      	subs	r1, r2, r3
 80022a0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80022a4:	4a9f      	ldr	r2, [pc, #636]	; (8002524 <espCommunication+0x614>)
 80022a6:	5c52      	ldrb	r2, [r2, r1]
 80022a8:	b2d1      	uxtb	r1, r2
 80022aa:	4a9c      	ldr	r2, [pc, #624]	; (800251c <espCommunication+0x60c>)
 80022ac:	54d1      	strb	r1, [r2, r3]
	  for(uint16_t i = 0; i < receivedBytes; i++) {
 80022ae:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80022b2:	3301      	adds	r3, #1
 80022b4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80022b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80022bc:	b29b      	uxth	r3, r3
 80022be:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d3da      	bcc.n	800227c <espCommunication+0x36c>
	  }

	  // Process the received data
      for (uint16_t i = 0; i < receivedBytes; i++) {
 80022c6:	2300      	movs	r3, #0
 80022c8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80022cc:	e37c      	b.n	80029c8 <espCommunication+0xab8>
    	  if(rxBuffer[(rxBufferHead + i)%ESPRXBUFFERSIZE] == 'J'){
 80022ce:	4b91      	ldr	r3, [pc, #580]	; (8002514 <espCommunication+0x604>)
 80022d0:	881b      	ldrh	r3, [r3, #0]
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	461a      	mov	r2, r3
 80022d6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80022da:	441a      	add	r2, r3
 80022dc:	4b90      	ldr	r3, [pc, #576]	; (8002520 <espCommunication+0x610>)
 80022de:	fb83 1302 	smull	r1, r3, r3, r2
 80022e2:	4413      	add	r3, r2
 80022e4:	1219      	asrs	r1, r3, #8
 80022e6:	17d3      	asrs	r3, r2, #31
 80022e8:	1ac9      	subs	r1, r1, r3
 80022ea:	460b      	mov	r3, r1
 80022ec:	025b      	lsls	r3, r3, #9
 80022ee:	1a5b      	subs	r3, r3, r1
 80022f0:	1ad1      	subs	r1, r2, r3
 80022f2:	4b8c      	ldr	r3, [pc, #560]	; (8002524 <espCommunication+0x614>)
 80022f4:	5c5b      	ldrb	r3, [r3, r1]
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	2b4a      	cmp	r3, #74	; 0x4a
 80022fa:	f040 8360 	bne.w	80029be <espCommunication+0xaae>
    		  if(rxBuffer[(rxBufferHead + i + 1)%ESPRXBUFFERSIZE] == 'O') {
 80022fe:	4b85      	ldr	r3, [pc, #532]	; (8002514 <espCommunication+0x604>)
 8002300:	881b      	ldrh	r3, [r3, #0]
 8002302:	b29b      	uxth	r3, r3
 8002304:	461a      	mov	r2, r3
 8002306:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800230a:	4413      	add	r3, r2
 800230c:	1c5a      	adds	r2, r3, #1
 800230e:	4b84      	ldr	r3, [pc, #528]	; (8002520 <espCommunication+0x610>)
 8002310:	fb83 1302 	smull	r1, r3, r3, r2
 8002314:	4413      	add	r3, r2
 8002316:	1219      	asrs	r1, r3, #8
 8002318:	17d3      	asrs	r3, r2, #31
 800231a:	1ac9      	subs	r1, r1, r3
 800231c:	460b      	mov	r3, r1
 800231e:	025b      	lsls	r3, r3, #9
 8002320:	1a5b      	subs	r3, r3, r1
 8002322:	1ad1      	subs	r1, r2, r3
 8002324:	4b7f      	ldr	r3, [pc, #508]	; (8002524 <espCommunication+0x614>)
 8002326:	5c5b      	ldrb	r3, [r3, r1]
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b4f      	cmp	r3, #79	; 0x4f
 800232c:	f040 8347 	bne.w	80029be <espCommunication+0xaae>
    			  if(rxBuffer[(rxBufferHead + i + 2)%ESPRXBUFFERSIZE] == 'Y') {
 8002330:	4b78      	ldr	r3, [pc, #480]	; (8002514 <espCommunication+0x604>)
 8002332:	881b      	ldrh	r3, [r3, #0]
 8002334:	b29b      	uxth	r3, r3
 8002336:	461a      	mov	r2, r3
 8002338:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800233c:	4413      	add	r3, r2
 800233e:	1c9a      	adds	r2, r3, #2
 8002340:	4b77      	ldr	r3, [pc, #476]	; (8002520 <espCommunication+0x610>)
 8002342:	fb83 1302 	smull	r1, r3, r3, r2
 8002346:	4413      	add	r3, r2
 8002348:	1219      	asrs	r1, r3, #8
 800234a:	17d3      	asrs	r3, r2, #31
 800234c:	1ac9      	subs	r1, r1, r3
 800234e:	460b      	mov	r3, r1
 8002350:	025b      	lsls	r3, r3, #9
 8002352:	1a5b      	subs	r3, r3, r1
 8002354:	1ad1      	subs	r1, r2, r3
 8002356:	4b73      	ldr	r3, [pc, #460]	; (8002524 <espCommunication+0x614>)
 8002358:	5c5b      	ldrb	r3, [r3, r1]
 800235a:	b2db      	uxtb	r3, r3
 800235c:	2b59      	cmp	r3, #89	; 0x59
 800235e:	f040 832e 	bne.w	80029be <espCommunication+0xaae>
    				  if(rxBuffer[(rxBufferHead + i + 3)%ESPRXBUFFERSIZE] == '_') {
 8002362:	4b6c      	ldr	r3, [pc, #432]	; (8002514 <espCommunication+0x604>)
 8002364:	881b      	ldrh	r3, [r3, #0]
 8002366:	b29b      	uxth	r3, r3
 8002368:	461a      	mov	r2, r3
 800236a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800236e:	4413      	add	r3, r2
 8002370:	1cda      	adds	r2, r3, #3
 8002372:	4b6b      	ldr	r3, [pc, #428]	; (8002520 <espCommunication+0x610>)
 8002374:	fb83 1302 	smull	r1, r3, r3, r2
 8002378:	4413      	add	r3, r2
 800237a:	1219      	asrs	r1, r3, #8
 800237c:	17d3      	asrs	r3, r2, #31
 800237e:	1ac9      	subs	r1, r1, r3
 8002380:	460b      	mov	r3, r1
 8002382:	025b      	lsls	r3, r3, #9
 8002384:	1a5b      	subs	r3, r3, r1
 8002386:	1ad1      	subs	r1, r2, r3
 8002388:	4b66      	ldr	r3, [pc, #408]	; (8002524 <espCommunication+0x614>)
 800238a:	5c5b      	ldrb	r3, [r3, r1]
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b5f      	cmp	r3, #95	; 0x5f
 8002390:	f040 8315 	bne.w	80029be <espCommunication+0xaae>
    					  if(rxBuffer[(rxBufferHead + i + 4)%ESPRXBUFFERSIZE] == 'T') {
 8002394:	4b5f      	ldr	r3, [pc, #380]	; (8002514 <espCommunication+0x604>)
 8002396:	881b      	ldrh	r3, [r3, #0]
 8002398:	b29b      	uxth	r3, r3
 800239a:	461a      	mov	r2, r3
 800239c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80023a0:	4413      	add	r3, r2
 80023a2:	1d1a      	adds	r2, r3, #4
 80023a4:	4b5e      	ldr	r3, [pc, #376]	; (8002520 <espCommunication+0x610>)
 80023a6:	fb83 1302 	smull	r1, r3, r3, r2
 80023aa:	4413      	add	r3, r2
 80023ac:	1219      	asrs	r1, r3, #8
 80023ae:	17d3      	asrs	r3, r2, #31
 80023b0:	1ac9      	subs	r1, r1, r3
 80023b2:	460b      	mov	r3, r1
 80023b4:	025b      	lsls	r3, r3, #9
 80023b6:	1a5b      	subs	r3, r3, r1
 80023b8:	1ad1      	subs	r1, r2, r3
 80023ba:	4b5a      	ldr	r3, [pc, #360]	; (8002524 <espCommunication+0x614>)
 80023bc:	5c5b      	ldrb	r3, [r3, r1]
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	2b54      	cmp	r3, #84	; 0x54
 80023c2:	f040 82fc 	bne.w	80029be <espCommunication+0xaae>
    						  uint16_t j = rxBufferHead + i + 5;
 80023c6:	4b53      	ldr	r3, [pc, #332]	; (8002514 <espCommunication+0x604>)
 80023c8:	881b      	ldrh	r3, [r3, #0]
 80023ca:	b29a      	uxth	r2, r3
 80023cc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80023d0:	4413      	add	r3, r2
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	3305      	adds	r3, #5
 80023d6:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
    						  if(rxBuffer[j%ESPRXBUFFERSIZE] == '-') {
 80023da:	f8b7 2060 	ldrh.w	r2, [r7, #96]	; 0x60
 80023de:	4b4e      	ldr	r3, [pc, #312]	; (8002518 <espCommunication+0x608>)
 80023e0:	fba3 1302 	umull	r1, r3, r3, r2
 80023e4:	1ad1      	subs	r1, r2, r3
 80023e6:	0849      	lsrs	r1, r1, #1
 80023e8:	440b      	add	r3, r1
 80023ea:	0a19      	lsrs	r1, r3, #8
 80023ec:	460b      	mov	r3, r1
 80023ee:	025b      	lsls	r3, r3, #9
 80023f0:	1a5b      	subs	r3, r3, r1
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	461a      	mov	r2, r3
 80023f8:	4b4a      	ldr	r3, [pc, #296]	; (8002524 <espCommunication+0x614>)
 80023fa:	5c9b      	ldrb	r3, [r3, r2]
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b2d      	cmp	r3, #45	; 0x2d
 8002400:	d104      	bne.n	800240c <espCommunication+0x4fc>
    							  j++;
 8002402:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8002406:	3301      	adds	r3, #1
 8002408:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
    						  }
    						  float tSpeedOld = tSpeed;
 800240c:	4b46      	ldr	r3, [pc, #280]	; (8002528 <espCommunication+0x618>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	63bb      	str	r3, [r7, #56]	; 0x38
    						  tSpeed = 0;
 8002412:	4b45      	ldr	r3, [pc, #276]	; (8002528 <espCommunication+0x618>)
 8002414:	f04f 0200 	mov.w	r2, #0
 8002418:	601a      	str	r2, [r3, #0]
    						  while(rxBuffer[j%ESPRXBUFFERSIZE] != 'A') {
 800241a:	e11b      	b.n	8002654 <espCommunication+0x744>
    							  if((j - (rxBufferHead + i + 5) > 5) || (j%ESPRXBUFFERSIZE >= (rxBufferHead + receivedBytes)%ESPRXBUFFERSIZE)) {
 800241c:	f8b7 2060 	ldrh.w	r2, [r7, #96]	; 0x60
 8002420:	4b3c      	ldr	r3, [pc, #240]	; (8002514 <espCommunication+0x604>)
 8002422:	881b      	ldrh	r3, [r3, #0]
 8002424:	b29b      	uxth	r3, r3
 8002426:	4619      	mov	r1, r3
 8002428:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800242c:	440b      	add	r3, r1
 800242e:	3305      	adds	r3, #5
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b05      	cmp	r3, #5
 8002434:	dc22      	bgt.n	800247c <espCommunication+0x56c>
 8002436:	f8b7 2060 	ldrh.w	r2, [r7, #96]	; 0x60
 800243a:	4b37      	ldr	r3, [pc, #220]	; (8002518 <espCommunication+0x608>)
 800243c:	fba3 1302 	umull	r1, r3, r3, r2
 8002440:	1ad1      	subs	r1, r2, r3
 8002442:	0849      	lsrs	r1, r1, #1
 8002444:	440b      	add	r3, r1
 8002446:	0a19      	lsrs	r1, r3, #8
 8002448:	460b      	mov	r3, r1
 800244a:	025b      	lsls	r3, r3, #9
 800244c:	1a5b      	subs	r3, r3, r1
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	b29b      	uxth	r3, r3
 8002452:	4618      	mov	r0, r3
 8002454:	4b2f      	ldr	r3, [pc, #188]	; (8002514 <espCommunication+0x604>)
 8002456:	881b      	ldrh	r3, [r3, #0]
 8002458:	b29b      	uxth	r3, r3
 800245a:	461a      	mov	r2, r3
 800245c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002460:	441a      	add	r2, r3
 8002462:	4b2f      	ldr	r3, [pc, #188]	; (8002520 <espCommunication+0x610>)
 8002464:	fb83 1302 	smull	r1, r3, r3, r2
 8002468:	4413      	add	r3, r2
 800246a:	1219      	asrs	r1, r3, #8
 800246c:	17d3      	asrs	r3, r2, #31
 800246e:	1ac9      	subs	r1, r1, r3
 8002470:	460b      	mov	r3, r1
 8002472:	025b      	lsls	r3, r3, #9
 8002474:	1a5b      	subs	r3, r3, r1
 8002476:	1ad1      	subs	r1, r2, r3
 8002478:	4288      	cmp	r0, r1
 800247a:	db03      	blt.n	8002484 <espCommunication+0x574>
    								  tSpeed = tSpeedOld;
 800247c:	4a2a      	ldr	r2, [pc, #168]	; (8002528 <espCommunication+0x618>)
 800247e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002480:	6013      	str	r3, [r2, #0]
    								  break;
 8002482:	e0fc      	b.n	800267e <espCommunication+0x76e>
    							  }
    							  tSpeed = (tSpeed*10) + (rxBuffer[j%ESPRXBUFFERSIZE]-48);
 8002484:	4b28      	ldr	r3, [pc, #160]	; (8002528 <espCommunication+0x618>)
 8002486:	edd3 7a00 	vldr	s15, [r3]
 800248a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800248e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002492:	f8b7 2060 	ldrh.w	r2, [r7, #96]	; 0x60
 8002496:	4b20      	ldr	r3, [pc, #128]	; (8002518 <espCommunication+0x608>)
 8002498:	fba3 1302 	umull	r1, r3, r3, r2
 800249c:	1ad1      	subs	r1, r2, r3
 800249e:	0849      	lsrs	r1, r1, #1
 80024a0:	440b      	add	r3, r1
 80024a2:	0a19      	lsrs	r1, r3, #8
 80024a4:	460b      	mov	r3, r1
 80024a6:	025b      	lsls	r3, r3, #9
 80024a8:	1a5b      	subs	r3, r3, r1
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	461a      	mov	r2, r3
 80024b0:	4b1c      	ldr	r3, [pc, #112]	; (8002524 <espCommunication+0x614>)
 80024b2:	5c9b      	ldrb	r3, [r3, r2]
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	3b30      	subs	r3, #48	; 0x30
 80024b8:	ee07 3a90 	vmov	s15, r3
 80024bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024c4:	4b18      	ldr	r3, [pc, #96]	; (8002528 <espCommunication+0x618>)
 80024c6:	edc3 7a00 	vstr	s15, [r3]
    							  j++;
 80024ca:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 80024ce:	3301      	adds	r3, #1
 80024d0:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
    							  if(rxBuffer[j%ESPRXBUFFERSIZE] == '.') {
 80024d4:	f8b7 2060 	ldrh.w	r2, [r7, #96]	; 0x60
 80024d8:	4b0f      	ldr	r3, [pc, #60]	; (8002518 <espCommunication+0x608>)
 80024da:	fba3 1302 	umull	r1, r3, r3, r2
 80024de:	1ad1      	subs	r1, r2, r3
 80024e0:	0849      	lsrs	r1, r1, #1
 80024e2:	440b      	add	r3, r1
 80024e4:	0a19      	lsrs	r1, r3, #8
 80024e6:	460b      	mov	r3, r1
 80024e8:	025b      	lsls	r3, r3, #9
 80024ea:	1a5b      	subs	r3, r3, r1
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	461a      	mov	r2, r3
 80024f2:	4b0c      	ldr	r3, [pc, #48]	; (8002524 <espCommunication+0x614>)
 80024f4:	5c9b      	ldrb	r3, [r3, r2]
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	2b2e      	cmp	r3, #46	; 0x2e
 80024fa:	f040 80ab 	bne.w	8002654 <espCommunication+0x744>
    								  j++;
 80024fe:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8002502:	3301      	adds	r3, #1
 8002504:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
    								  uint8_t fp = 1;
 8002508:	2301      	movs	r3, #1
 800250a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    								  while (rxBuffer[j%ESPRXBUFFERSIZE] != 'A') {
 800250e:	e08c      	b.n	800262a <espCommunication+0x71a>
 8002510:	40020030 	.word	0x40020030
 8002514:	20000e64 	.word	0x20000e64
 8002518:	00804021 	.word	0x00804021
 800251c:	20000e68 	.word	0x20000e68
 8002520:	80402011 	.word	0x80402011
 8002524:	20000c64 	.word	0x20000c64
 8002528:	20000ef4 	.word	0x20000ef4
    	    							  if((j - (rxBufferHead + i + 5) > 5) || (j%ESPRXBUFFERSIZE >= (rxBufferHead + receivedBytes)%ESPRXBUFFERSIZE)) {
 800252c:	f8b7 2060 	ldrh.w	r2, [r7, #96]	; 0x60
 8002530:	4bbd      	ldr	r3, [pc, #756]	; (8002828 <espCommunication+0x918>)
 8002532:	881b      	ldrh	r3, [r3, #0]
 8002534:	b29b      	uxth	r3, r3
 8002536:	4619      	mov	r1, r3
 8002538:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800253c:	440b      	add	r3, r1
 800253e:	3305      	adds	r3, #5
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b05      	cmp	r3, #5
 8002544:	dc22      	bgt.n	800258c <espCommunication+0x67c>
 8002546:	f8b7 2060 	ldrh.w	r2, [r7, #96]	; 0x60
 800254a:	4bb8      	ldr	r3, [pc, #736]	; (800282c <espCommunication+0x91c>)
 800254c:	fba3 1302 	umull	r1, r3, r3, r2
 8002550:	1ad1      	subs	r1, r2, r3
 8002552:	0849      	lsrs	r1, r1, #1
 8002554:	440b      	add	r3, r1
 8002556:	0a19      	lsrs	r1, r3, #8
 8002558:	460b      	mov	r3, r1
 800255a:	025b      	lsls	r3, r3, #9
 800255c:	1a5b      	subs	r3, r3, r1
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	b29b      	uxth	r3, r3
 8002562:	4618      	mov	r0, r3
 8002564:	4bb0      	ldr	r3, [pc, #704]	; (8002828 <espCommunication+0x918>)
 8002566:	881b      	ldrh	r3, [r3, #0]
 8002568:	b29b      	uxth	r3, r3
 800256a:	461a      	mov	r2, r3
 800256c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002570:	441a      	add	r2, r3
 8002572:	4baf      	ldr	r3, [pc, #700]	; (8002830 <espCommunication+0x920>)
 8002574:	fb83 1302 	smull	r1, r3, r3, r2
 8002578:	4413      	add	r3, r2
 800257a:	1219      	asrs	r1, r3, #8
 800257c:	17d3      	asrs	r3, r2, #31
 800257e:	1ac9      	subs	r1, r1, r3
 8002580:	460b      	mov	r3, r1
 8002582:	025b      	lsls	r3, r3, #9
 8002584:	1a5b      	subs	r3, r3, r1
 8002586:	1ad1      	subs	r1, r2, r3
 8002588:	4288      	cmp	r0, r1
 800258a:	db03      	blt.n	8002594 <espCommunication+0x684>
    	    								  tSpeed = tSpeedOld;
 800258c:	4aa9      	ldr	r2, [pc, #676]	; (8002834 <espCommunication+0x924>)
 800258e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002590:	6013      	str	r3, [r2, #0]
    	    								  break;
 8002592:	e05f      	b.n	8002654 <espCommunication+0x744>
    	    							  }
    									  tSpeed = tSpeed + (rxBuffer[j%ESPRXBUFFERSIZE]-48)/pow(10,fp);
 8002594:	4ba7      	ldr	r3, [pc, #668]	; (8002834 <espCommunication+0x924>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4618      	mov	r0, r3
 800259a:	f7fd ffe5 	bl	8000568 <__aeabi_f2d>
 800259e:	4604      	mov	r4, r0
 80025a0:	460d      	mov	r5, r1
 80025a2:	f8b7 2060 	ldrh.w	r2, [r7, #96]	; 0x60
 80025a6:	4ba1      	ldr	r3, [pc, #644]	; (800282c <espCommunication+0x91c>)
 80025a8:	fba3 1302 	umull	r1, r3, r3, r2
 80025ac:	1ad1      	subs	r1, r2, r3
 80025ae:	0849      	lsrs	r1, r1, #1
 80025b0:	440b      	add	r3, r1
 80025b2:	0a19      	lsrs	r1, r3, #8
 80025b4:	460b      	mov	r3, r1
 80025b6:	025b      	lsls	r3, r3, #9
 80025b8:	1a5b      	subs	r3, r3, r1
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	b29b      	uxth	r3, r3
 80025be:	461a      	mov	r2, r3
 80025c0:	4b9d      	ldr	r3, [pc, #628]	; (8002838 <espCommunication+0x928>)
 80025c2:	5c9b      	ldrb	r3, [r3, r2]
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	3b30      	subs	r3, #48	; 0x30
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7fd ffbb 	bl	8000544 <__aeabi_i2d>
 80025ce:	4680      	mov	r8, r0
 80025d0:	4689      	mov	r9, r1
 80025d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7fd ffa4 	bl	8000524 <__aeabi_ui2d>
 80025dc:	4602      	mov	r2, r0
 80025de:	460b      	mov	r3, r1
 80025e0:	ec43 2b11 	vmov	d1, r2, r3
 80025e4:	ed9f 0b8e 	vldr	d0, [pc, #568]	; 8002820 <espCommunication+0x910>
 80025e8:	f00a ffa8 	bl	800d53c <pow>
 80025ec:	ec53 2b10 	vmov	r2, r3, d0
 80025f0:	4640      	mov	r0, r8
 80025f2:	4649      	mov	r1, r9
 80025f4:	f7fe f93a 	bl	800086c <__aeabi_ddiv>
 80025f8:	4602      	mov	r2, r0
 80025fa:	460b      	mov	r3, r1
 80025fc:	4620      	mov	r0, r4
 80025fe:	4629      	mov	r1, r5
 8002600:	f7fd fe54 	bl	80002ac <__adddf3>
 8002604:	4602      	mov	r2, r0
 8002606:	460b      	mov	r3, r1
 8002608:	4610      	mov	r0, r2
 800260a:	4619      	mov	r1, r3
 800260c:	f7fe fadc 	bl	8000bc8 <__aeabi_d2f>
 8002610:	4603      	mov	r3, r0
 8002612:	4a88      	ldr	r2, [pc, #544]	; (8002834 <espCommunication+0x924>)
 8002614:	6013      	str	r3, [r2, #0]
    	    							  j++;
 8002616:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800261a:	3301      	adds	r3, #1
 800261c:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
    	    							  fp++;
 8002620:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002624:	3301      	adds	r3, #1
 8002626:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    								  while (rxBuffer[j%ESPRXBUFFERSIZE] != 'A') {
 800262a:	f8b7 2060 	ldrh.w	r2, [r7, #96]	; 0x60
 800262e:	4b7f      	ldr	r3, [pc, #508]	; (800282c <espCommunication+0x91c>)
 8002630:	fba3 1302 	umull	r1, r3, r3, r2
 8002634:	1ad1      	subs	r1, r2, r3
 8002636:	0849      	lsrs	r1, r1, #1
 8002638:	440b      	add	r3, r1
 800263a:	0a19      	lsrs	r1, r3, #8
 800263c:	460b      	mov	r3, r1
 800263e:	025b      	lsls	r3, r3, #9
 8002640:	1a5b      	subs	r3, r3, r1
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	b29b      	uxth	r3, r3
 8002646:	461a      	mov	r2, r3
 8002648:	4b7b      	ldr	r3, [pc, #492]	; (8002838 <espCommunication+0x928>)
 800264a:	5c9b      	ldrb	r3, [r3, r2]
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b41      	cmp	r3, #65	; 0x41
 8002650:	f47f af6c 	bne.w	800252c <espCommunication+0x61c>
    						  while(rxBuffer[j%ESPRXBUFFERSIZE] != 'A') {
 8002654:	f8b7 2060 	ldrh.w	r2, [r7, #96]	; 0x60
 8002658:	4b74      	ldr	r3, [pc, #464]	; (800282c <espCommunication+0x91c>)
 800265a:	fba3 1302 	umull	r1, r3, r3, r2
 800265e:	1ad1      	subs	r1, r2, r3
 8002660:	0849      	lsrs	r1, r1, #1
 8002662:	440b      	add	r3, r1
 8002664:	0a19      	lsrs	r1, r3, #8
 8002666:	460b      	mov	r3, r1
 8002668:	025b      	lsls	r3, r3, #9
 800266a:	1a5b      	subs	r3, r3, r1
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	b29b      	uxth	r3, r3
 8002670:	461a      	mov	r2, r3
 8002672:	4b71      	ldr	r3, [pc, #452]	; (8002838 <espCommunication+0x928>)
 8002674:	5c9b      	ldrb	r3, [r3, r2]
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b41      	cmp	r3, #65	; 0x41
 800267a:	f47f aecf 	bne.w	800241c <espCommunication+0x50c>
    								  }
    							  }
    						  }
    						  if(rxBuffer[(rxBufferHead + i + 5)%ESPRXBUFFERSIZE] == '-') {
 800267e:	4b6a      	ldr	r3, [pc, #424]	; (8002828 <espCommunication+0x918>)
 8002680:	881b      	ldrh	r3, [r3, #0]
 8002682:	b29b      	uxth	r3, r3
 8002684:	461a      	mov	r2, r3
 8002686:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800268a:	4413      	add	r3, r2
 800268c:	1d5a      	adds	r2, r3, #5
 800268e:	4b68      	ldr	r3, [pc, #416]	; (8002830 <espCommunication+0x920>)
 8002690:	fb83 1302 	smull	r1, r3, r3, r2
 8002694:	4413      	add	r3, r2
 8002696:	1219      	asrs	r1, r3, #8
 8002698:	17d3      	asrs	r3, r2, #31
 800269a:	1ac9      	subs	r1, r1, r3
 800269c:	460b      	mov	r3, r1
 800269e:	025b      	lsls	r3, r3, #9
 80026a0:	1a5b      	subs	r3, r3, r1
 80026a2:	1ad1      	subs	r1, r2, r3
 80026a4:	4b64      	ldr	r3, [pc, #400]	; (8002838 <espCommunication+0x928>)
 80026a6:	5c5b      	ldrb	r3, [r3, r1]
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b2d      	cmp	r3, #45	; 0x2d
 80026ac:	d107      	bne.n	80026be <espCommunication+0x7ae>
    							  tSpeed = tSpeed * (-1);
 80026ae:	4b61      	ldr	r3, [pc, #388]	; (8002834 <espCommunication+0x924>)
 80026b0:	edd3 7a00 	vldr	s15, [r3]
 80026b4:	eef1 7a67 	vneg.f32	s15, s15
 80026b8:	4b5e      	ldr	r3, [pc, #376]	; (8002834 <espCommunication+0x924>)
 80026ba:	edc3 7a00 	vstr	s15, [r3]
    						  }

    						  if(rxBuffer[j%ESPRXBUFFERSIZE] == 'A') {
 80026be:	f8b7 2060 	ldrh.w	r2, [r7, #96]	; 0x60
 80026c2:	4b5a      	ldr	r3, [pc, #360]	; (800282c <espCommunication+0x91c>)
 80026c4:	fba3 1302 	umull	r1, r3, r3, r2
 80026c8:	1ad1      	subs	r1, r2, r3
 80026ca:	0849      	lsrs	r1, r1, #1
 80026cc:	440b      	add	r3, r1
 80026ce:	0a19      	lsrs	r1, r3, #8
 80026d0:	460b      	mov	r3, r1
 80026d2:	025b      	lsls	r3, r3, #9
 80026d4:	1a5b      	subs	r3, r3, r1
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	b29b      	uxth	r3, r3
 80026da:	461a      	mov	r2, r3
 80026dc:	4b56      	ldr	r3, [pc, #344]	; (8002838 <espCommunication+0x928>)
 80026de:	5c9b      	ldrb	r3, [r3, r2]
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b41      	cmp	r3, #65	; 0x41
 80026e4:	f040 816b 	bne.w	80029be <espCommunication+0xaae>
    							  uint16_t k = j + 1;
 80026e8:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 80026ec:	3301      	adds	r3, #1
 80026ee:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        						  if(rxBuffer[k%ESPRXBUFFERSIZE] == '-') {
 80026f2:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 80026f6:	4b4d      	ldr	r3, [pc, #308]	; (800282c <espCommunication+0x91c>)
 80026f8:	fba3 1302 	umull	r1, r3, r3, r2
 80026fc:	1ad1      	subs	r1, r2, r3
 80026fe:	0849      	lsrs	r1, r1, #1
 8002700:	440b      	add	r3, r1
 8002702:	0a19      	lsrs	r1, r3, #8
 8002704:	460b      	mov	r3, r1
 8002706:	025b      	lsls	r3, r3, #9
 8002708:	1a5b      	subs	r3, r3, r1
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	b29b      	uxth	r3, r3
 800270e:	461a      	mov	r2, r3
 8002710:	4b49      	ldr	r3, [pc, #292]	; (8002838 <espCommunication+0x928>)
 8002712:	5c9b      	ldrb	r3, [r3, r2]
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b2d      	cmp	r3, #45	; 0x2d
 8002718:	d104      	bne.n	8002724 <espCommunication+0x814>
        							  k++;
 800271a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800271e:	3301      	adds	r3, #1
 8002720:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        						  }
        						  float aSpeedOld = aSpeed;
 8002724:	4b45      	ldr	r3, [pc, #276]	; (800283c <espCommunication+0x92c>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	637b      	str	r3, [r7, #52]	; 0x34
        						  aSpeed = 0;
 800272a:	4b44      	ldr	r3, [pc, #272]	; (800283c <espCommunication+0x92c>)
 800272c:	f04f 0200 	mov.w	r2, #0
 8002730:	601a      	str	r2, [r3, #0]
        						  while(rxBuffer[k%ESPRXBUFFERSIZE] != '_') {
 8002732:	e114      	b.n	800295e <espCommunication+0xa4e>
        							  if((k - (j + 1) >= 5) || (k%ESPRXBUFFERSIZE >= (rxBufferHead + receivedBytes)%ESPRXBUFFERSIZE)) {
 8002734:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8002738:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800273c:	3301      	adds	r3, #1
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b04      	cmp	r3, #4
 8002742:	dc22      	bgt.n	800278a <espCommunication+0x87a>
 8002744:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8002748:	4b38      	ldr	r3, [pc, #224]	; (800282c <espCommunication+0x91c>)
 800274a:	fba3 1302 	umull	r1, r3, r3, r2
 800274e:	1ad1      	subs	r1, r2, r3
 8002750:	0849      	lsrs	r1, r1, #1
 8002752:	440b      	add	r3, r1
 8002754:	0a19      	lsrs	r1, r3, #8
 8002756:	460b      	mov	r3, r1
 8002758:	025b      	lsls	r3, r3, #9
 800275a:	1a5b      	subs	r3, r3, r1
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	b29b      	uxth	r3, r3
 8002760:	4618      	mov	r0, r3
 8002762:	4b31      	ldr	r3, [pc, #196]	; (8002828 <espCommunication+0x918>)
 8002764:	881b      	ldrh	r3, [r3, #0]
 8002766:	b29b      	uxth	r3, r3
 8002768:	461a      	mov	r2, r3
 800276a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800276e:	441a      	add	r2, r3
 8002770:	4b2f      	ldr	r3, [pc, #188]	; (8002830 <espCommunication+0x920>)
 8002772:	fb83 1302 	smull	r1, r3, r3, r2
 8002776:	4413      	add	r3, r2
 8002778:	1219      	asrs	r1, r3, #8
 800277a:	17d3      	asrs	r3, r2, #31
 800277c:	1ac9      	subs	r1, r1, r3
 800277e:	460b      	mov	r3, r1
 8002780:	025b      	lsls	r3, r3, #9
 8002782:	1a5b      	subs	r3, r3, r1
 8002784:	1ad1      	subs	r1, r2, r3
 8002786:	4288      	cmp	r0, r1
 8002788:	db03      	blt.n	8002792 <espCommunication+0x882>
        								  aSpeed = aSpeedOld;
 800278a:	4a2c      	ldr	r2, [pc, #176]	; (800283c <espCommunication+0x92c>)
 800278c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800278e:	6013      	str	r3, [r2, #0]
        								  break;
 8002790:	e0fa      	b.n	8002988 <espCommunication+0xa78>
        							  }
        							  aSpeed = (aSpeed*10) + (rxBuffer[k%ESPRXBUFFERSIZE]-48);
 8002792:	4b2a      	ldr	r3, [pc, #168]	; (800283c <espCommunication+0x92c>)
 8002794:	edd3 7a00 	vldr	s15, [r3]
 8002798:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800279c:	ee27 7a87 	vmul.f32	s14, s15, s14
 80027a0:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 80027a4:	4b21      	ldr	r3, [pc, #132]	; (800282c <espCommunication+0x91c>)
 80027a6:	fba3 1302 	umull	r1, r3, r3, r2
 80027aa:	1ad1      	subs	r1, r2, r3
 80027ac:	0849      	lsrs	r1, r1, #1
 80027ae:	440b      	add	r3, r1
 80027b0:	0a19      	lsrs	r1, r3, #8
 80027b2:	460b      	mov	r3, r1
 80027b4:	025b      	lsls	r3, r3, #9
 80027b6:	1a5b      	subs	r3, r3, r1
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	461a      	mov	r2, r3
 80027be:	4b1e      	ldr	r3, [pc, #120]	; (8002838 <espCommunication+0x928>)
 80027c0:	5c9b      	ldrb	r3, [r3, r2]
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	3b30      	subs	r3, #48	; 0x30
 80027c6:	ee07 3a90 	vmov	s15, r3
 80027ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027d2:	4b1a      	ldr	r3, [pc, #104]	; (800283c <espCommunication+0x92c>)
 80027d4:	edc3 7a00 	vstr	s15, [r3]
        							  k++;
 80027d8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80027dc:	3301      	adds	r3, #1
 80027de:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        							  if(rxBuffer[k%ESPRXBUFFERSIZE] == '.') {
 80027e2:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 80027e6:	4b11      	ldr	r3, [pc, #68]	; (800282c <espCommunication+0x91c>)
 80027e8:	fba3 1302 	umull	r1, r3, r3, r2
 80027ec:	1ad1      	subs	r1, r2, r3
 80027ee:	0849      	lsrs	r1, r1, #1
 80027f0:	440b      	add	r3, r1
 80027f2:	0a19      	lsrs	r1, r3, #8
 80027f4:	460b      	mov	r3, r1
 80027f6:	025b      	lsls	r3, r3, #9
 80027f8:	1a5b      	subs	r3, r3, r1
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	461a      	mov	r2, r3
 8002800:	4b0d      	ldr	r3, [pc, #52]	; (8002838 <espCommunication+0x928>)
 8002802:	5c9b      	ldrb	r3, [r3, r2]
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b2e      	cmp	r3, #46	; 0x2e
 8002808:	f040 80a9 	bne.w	800295e <espCommunication+0xa4e>
        								  k++;
 800280c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002810:	3301      	adds	r3, #1
 8002812:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        								  uint8_t fp = 1;
 8002816:	2301      	movs	r3, #1
 8002818:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
        								  while(rxBuffer[k%ESPRXBUFFERSIZE] != '_') {
 800281c:	e08a      	b.n	8002934 <espCommunication+0xa24>
 800281e:	bf00      	nop
 8002820:	00000000 	.word	0x00000000
 8002824:	40240000 	.word	0x40240000
 8002828:	20000e64 	.word	0x20000e64
 800282c:	00804021 	.word	0x00804021
 8002830:	80402011 	.word	0x80402011
 8002834:	20000ef4 	.word	0x20000ef4
 8002838:	20000c64 	.word	0x20000c64
 800283c:	20000ef8 	.word	0x20000ef8
        									  if((k - (j + 1) >= 5) || (k%ESPRXBUFFERSIZE >= (rxBufferHead + receivedBytes)%ESPRXBUFFERSIZE)) {
 8002840:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8002844:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8002848:	3301      	adds	r3, #1
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b04      	cmp	r3, #4
 800284e:	dc22      	bgt.n	8002896 <espCommunication+0x986>
 8002850:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8002854:	4bbc      	ldr	r3, [pc, #752]	; (8002b48 <espCommunication+0xc38>)
 8002856:	fba3 1302 	umull	r1, r3, r3, r2
 800285a:	1ad1      	subs	r1, r2, r3
 800285c:	0849      	lsrs	r1, r1, #1
 800285e:	440b      	add	r3, r1
 8002860:	0a19      	lsrs	r1, r3, #8
 8002862:	460b      	mov	r3, r1
 8002864:	025b      	lsls	r3, r3, #9
 8002866:	1a5b      	subs	r3, r3, r1
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	b29b      	uxth	r3, r3
 800286c:	4618      	mov	r0, r3
 800286e:	4bb7      	ldr	r3, [pc, #732]	; (8002b4c <espCommunication+0xc3c>)
 8002870:	881b      	ldrh	r3, [r3, #0]
 8002872:	b29b      	uxth	r3, r3
 8002874:	461a      	mov	r2, r3
 8002876:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800287a:	441a      	add	r2, r3
 800287c:	4bb4      	ldr	r3, [pc, #720]	; (8002b50 <espCommunication+0xc40>)
 800287e:	fb83 1302 	smull	r1, r3, r3, r2
 8002882:	4413      	add	r3, r2
 8002884:	1219      	asrs	r1, r3, #8
 8002886:	17d3      	asrs	r3, r2, #31
 8002888:	1ac9      	subs	r1, r1, r3
 800288a:	460b      	mov	r3, r1
 800288c:	025b      	lsls	r3, r3, #9
 800288e:	1a5b      	subs	r3, r3, r1
 8002890:	1ad1      	subs	r1, r2, r3
 8002892:	4288      	cmp	r0, r1
 8002894:	db03      	blt.n	800289e <espCommunication+0x98e>
        										  aSpeed = aSpeedOld;
 8002896:	4aaf      	ldr	r2, [pc, #700]	; (8002b54 <espCommunication+0xc44>)
 8002898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800289a:	6013      	str	r3, [r2, #0]
        										  break;
 800289c:	e05f      	b.n	800295e <espCommunication+0xa4e>
        									  }
        									  aSpeed = aSpeed + (rxBuffer[k%ESPRXBUFFERSIZE]-48)/pow(10,fp);
 800289e:	4bad      	ldr	r3, [pc, #692]	; (8002b54 <espCommunication+0xc44>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7fd fe60 	bl	8000568 <__aeabi_f2d>
 80028a8:	4604      	mov	r4, r0
 80028aa:	460d      	mov	r5, r1
 80028ac:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 80028b0:	4ba5      	ldr	r3, [pc, #660]	; (8002b48 <espCommunication+0xc38>)
 80028b2:	fba3 1302 	umull	r1, r3, r3, r2
 80028b6:	1ad1      	subs	r1, r2, r3
 80028b8:	0849      	lsrs	r1, r1, #1
 80028ba:	440b      	add	r3, r1
 80028bc:	0a19      	lsrs	r1, r3, #8
 80028be:	460b      	mov	r3, r1
 80028c0:	025b      	lsls	r3, r3, #9
 80028c2:	1a5b      	subs	r3, r3, r1
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	461a      	mov	r2, r3
 80028ca:	4ba3      	ldr	r3, [pc, #652]	; (8002b58 <espCommunication+0xc48>)
 80028cc:	5c9b      	ldrb	r3, [r3, r2]
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	3b30      	subs	r3, #48	; 0x30
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7fd fe36 	bl	8000544 <__aeabi_i2d>
 80028d8:	4680      	mov	r8, r0
 80028da:	4689      	mov	r9, r1
 80028dc:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7fd fe1f 	bl	8000524 <__aeabi_ui2d>
 80028e6:	4602      	mov	r2, r0
 80028e8:	460b      	mov	r3, r1
 80028ea:	ec43 2b11 	vmov	d1, r2, r3
 80028ee:	ed9f 0b94 	vldr	d0, [pc, #592]	; 8002b40 <espCommunication+0xc30>
 80028f2:	f00a fe23 	bl	800d53c <pow>
 80028f6:	ec53 2b10 	vmov	r2, r3, d0
 80028fa:	4640      	mov	r0, r8
 80028fc:	4649      	mov	r1, r9
 80028fe:	f7fd ffb5 	bl	800086c <__aeabi_ddiv>
 8002902:	4602      	mov	r2, r0
 8002904:	460b      	mov	r3, r1
 8002906:	4620      	mov	r0, r4
 8002908:	4629      	mov	r1, r5
 800290a:	f7fd fccf 	bl	80002ac <__adddf3>
 800290e:	4602      	mov	r2, r0
 8002910:	460b      	mov	r3, r1
 8002912:	4610      	mov	r0, r2
 8002914:	4619      	mov	r1, r3
 8002916:	f7fe f957 	bl	8000bc8 <__aeabi_d2f>
 800291a:	4603      	mov	r3, r0
 800291c:	4a8d      	ldr	r2, [pc, #564]	; (8002b54 <espCommunication+0xc44>)
 800291e:	6013      	str	r3, [r2, #0]
        									  k++;
 8002920:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002924:	3301      	adds	r3, #1
 8002926:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        									  fp++;
 800292a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800292e:	3301      	adds	r3, #1
 8002930:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
        								  while(rxBuffer[k%ESPRXBUFFERSIZE] != '_') {
 8002934:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8002938:	4b83      	ldr	r3, [pc, #524]	; (8002b48 <espCommunication+0xc38>)
 800293a:	fba3 1302 	umull	r1, r3, r3, r2
 800293e:	1ad1      	subs	r1, r2, r3
 8002940:	0849      	lsrs	r1, r1, #1
 8002942:	440b      	add	r3, r1
 8002944:	0a19      	lsrs	r1, r3, #8
 8002946:	460b      	mov	r3, r1
 8002948:	025b      	lsls	r3, r3, #9
 800294a:	1a5b      	subs	r3, r3, r1
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	b29b      	uxth	r3, r3
 8002950:	461a      	mov	r2, r3
 8002952:	4b81      	ldr	r3, [pc, #516]	; (8002b58 <espCommunication+0xc48>)
 8002954:	5c9b      	ldrb	r3, [r3, r2]
 8002956:	b2db      	uxtb	r3, r3
 8002958:	2b5f      	cmp	r3, #95	; 0x5f
 800295a:	f47f af71 	bne.w	8002840 <espCommunication+0x930>
        						  while(rxBuffer[k%ESPRXBUFFERSIZE] != '_') {
 800295e:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8002962:	4b79      	ldr	r3, [pc, #484]	; (8002b48 <espCommunication+0xc38>)
 8002964:	fba3 1302 	umull	r1, r3, r3, r2
 8002968:	1ad1      	subs	r1, r2, r3
 800296a:	0849      	lsrs	r1, r1, #1
 800296c:	440b      	add	r3, r1
 800296e:	0a19      	lsrs	r1, r3, #8
 8002970:	460b      	mov	r3, r1
 8002972:	025b      	lsls	r3, r3, #9
 8002974:	1a5b      	subs	r3, r3, r1
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	b29b      	uxth	r3, r3
 800297a:	461a      	mov	r2, r3
 800297c:	4b76      	ldr	r3, [pc, #472]	; (8002b58 <espCommunication+0xc48>)
 800297e:	5c9b      	ldrb	r3, [r3, r2]
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b5f      	cmp	r3, #95	; 0x5f
 8002984:	f47f aed6 	bne.w	8002734 <espCommunication+0x824>
        								  }
        							  }
        						  }
        						  if(rxBuffer[(j + 1)%ESPRXBUFFERSIZE] == '-') {
 8002988:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800298c:	1c5a      	adds	r2, r3, #1
 800298e:	4b70      	ldr	r3, [pc, #448]	; (8002b50 <espCommunication+0xc40>)
 8002990:	fb83 1302 	smull	r1, r3, r3, r2
 8002994:	4413      	add	r3, r2
 8002996:	1219      	asrs	r1, r3, #8
 8002998:	17d3      	asrs	r3, r2, #31
 800299a:	1ac9      	subs	r1, r1, r3
 800299c:	460b      	mov	r3, r1
 800299e:	025b      	lsls	r3, r3, #9
 80029a0:	1a5b      	subs	r3, r3, r1
 80029a2:	1ad1      	subs	r1, r2, r3
 80029a4:	4b6c      	ldr	r3, [pc, #432]	; (8002b58 <espCommunication+0xc48>)
 80029a6:	5c5b      	ldrb	r3, [r3, r1]
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b2d      	cmp	r3, #45	; 0x2d
 80029ac:	d107      	bne.n	80029be <espCommunication+0xaae>
        							  aSpeed = aSpeed * (-1);
 80029ae:	4b69      	ldr	r3, [pc, #420]	; (8002b54 <espCommunication+0xc44>)
 80029b0:	edd3 7a00 	vldr	s15, [r3]
 80029b4:	eef1 7a67 	vneg.f32	s15, s15
 80029b8:	4b66      	ldr	r3, [pc, #408]	; (8002b54 <espCommunication+0xc44>)
 80029ba:	edc3 7a00 	vstr	s15, [r3]
      for (uint16_t i = 0; i < receivedBytes; i++) {
 80029be:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80029c2:	3301      	adds	r3, #1
 80029c4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80029c8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 80029d2:	429a      	cmp	r2, r3
 80029d4:	f4ff ac7b 	bcc.w	80022ce <espCommunication+0x3be>
//      if((tSpeed != 0) || (aSpeed != 0)) {
//    	  __asm__ volatile("NOP");
//      }

      // Update the buffer head index
      rxBufferHead = ((rxBufferHead + receivedBytes) % ESPRXBUFFERSIZE);
 80029d8:	4b5c      	ldr	r3, [pc, #368]	; (8002b4c <espCommunication+0xc3c>)
 80029da:	881b      	ldrh	r3, [r3, #0]
 80029dc:	b29b      	uxth	r3, r3
 80029de:	461a      	mov	r2, r3
 80029e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80029e4:	441a      	add	r2, r3
 80029e6:	4b5a      	ldr	r3, [pc, #360]	; (8002b50 <espCommunication+0xc40>)
 80029e8:	fb83 1302 	smull	r1, r3, r3, r2
 80029ec:	4413      	add	r3, r2
 80029ee:	1219      	asrs	r1, r3, #8
 80029f0:	17d3      	asrs	r3, r2, #31
 80029f2:	1ac9      	subs	r1, r1, r3
 80029f4:	460b      	mov	r3, r1
 80029f6:	025b      	lsls	r3, r3, #9
 80029f8:	1a5b      	subs	r3, r3, r1
 80029fa:	1ad1      	subs	r1, r2, r3
 80029fc:	b28a      	uxth	r2, r1
 80029fe:	4b53      	ldr	r3, [pc, #332]	; (8002b4c <espCommunication+0xc3c>)
 8002a00:	801a      	strh	r2, [r3, #0]

      if(xEventGroupGetBitsFromISR(timerFdsEventGroup) == 0x1) {
 8002a02:	4b56      	ldr	r3, [pc, #344]	; (8002b5c <espCommunication+0xc4c>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f005 f9da 	bl	8007dc0 <xEventGroupGetBitsFromISR>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	f040 80de 	bne.w	8002bd0 <espCommunication+0xcc0>
 8002a14:	466b      	mov	r3, sp
 8002a16:	4698      	mov	r8, r3
//    	    char jsonContent[200];
//    	    sprintf(jsonContent, "{\"avrBatVoltage\": \"%d\", \"EncoderR.rpm\": \"%d\", \"EncoderL.rpm\": \"%d\", \"SoftPwmR.pwmValue\": \"%d\", \"SoftPwmL.pwmValue\": \"%d\", \"joyX\": \"%d\", \"joyY\": \"%d\"}", avrBatVoltage, EncoderR.rpm, EncoderL.rpm, SoftPwmR.pwmValue, SoftPwmL.pwmValue, joyX, joyY);

    	    // Create the entire POST request string
//    	    char txBuffer[500];
    	    sprintf(txBuffer, "POST /robot_data HTTP/1.1\r\n"
 8002a18:	4b51      	ldr	r3, [pc, #324]	; (8002b60 <espCommunication+0xc50>)
 8002a1a:	881b      	ldrh	r3, [r3, #0]
 8002a1c:	4699      	mov	r9, r3
 8002a1e:	4b51      	ldr	r3, [pc, #324]	; (8002b64 <espCommunication+0xc54>)
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	623b      	str	r3, [r7, #32]
 8002a24:	4b50      	ldr	r3, [pc, #320]	; (8002b68 <espCommunication+0xc58>)
 8002a26:	695e      	ldr	r6, [r3, #20]
    	                         "Host: 192.168.137.1\r\n"
    	                         "Content-Type: application/json\r\n"
//    	                         "Content-Length: %d\r\n\r\n"
    	                         "{\"avrBatVoltage\": \"%d\", \"EncoderR.rpm\": \"%d\", \"EncoderL.rpm\": \"%d\", \"SoftPwmR.pwmValue\": \"%d\", \"SoftPwmL.pwmValue\": \"%d\", \"joyX\": \"%d\", \"joyY\": \"%d\", \"tSpeed\": \"%f\", \"aSpeed\": \"%f\", \"rReqValue\": \"%d\", \"lReqValue\": \"%d\"}",
								 avrBatVoltage, EncoderR.rpm, EncoderL.rpm, SoftPwmR.pwmValue, SoftPwmL.pwmValue, joyX, joyY, tSpeed, aSpeed, SoftPwmR.reqValue, SoftPwmL.reqValue);
 8002a28:	4b50      	ldr	r3, [pc, #320]	; (8002b6c <espCommunication+0xc5c>)
 8002a2a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    	    sprintf(txBuffer, "POST /robot_data HTTP/1.1\r\n"
 8002a2e:	60fb      	str	r3, [r7, #12]
								 avrBatVoltage, EncoderR.rpm, EncoderL.rpm, SoftPwmR.pwmValue, SoftPwmL.pwmValue, joyX, joyY, tSpeed, aSpeed, SoftPwmR.reqValue, SoftPwmL.reqValue);
 8002a30:	4b4f      	ldr	r3, [pc, #316]	; (8002b70 <espCommunication+0xc60>)
 8002a32:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    	    sprintf(txBuffer, "POST /robot_data HTTP/1.1\r\n"
 8002a36:	60bb      	str	r3, [r7, #8]
 8002a38:	4b4e      	ldr	r3, [pc, #312]	; (8002b74 <espCommunication+0xc64>)
 8002a3a:	f993 3000 	ldrsb.w	r3, [r3]
 8002a3e:	607b      	str	r3, [r7, #4]
 8002a40:	4b4d      	ldr	r3, [pc, #308]	; (8002b78 <espCommunication+0xc68>)
 8002a42:	f993 3000 	ldrsb.w	r3, [r3]
 8002a46:	603b      	str	r3, [r7, #0]
 8002a48:	4b4c      	ldr	r3, [pc, #304]	; (8002b7c <espCommunication+0xc6c>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7fd fd8b 	bl	8000568 <__aeabi_f2d>
 8002a52:	4604      	mov	r4, r0
 8002a54:	460d      	mov	r5, r1
 8002a56:	4b3f      	ldr	r3, [pc, #252]	; (8002b54 <espCommunication+0xc44>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7fd fd84 	bl	8000568 <__aeabi_f2d>
								 avrBatVoltage, EncoderR.rpm, EncoderL.rpm, SoftPwmR.pwmValue, SoftPwmL.pwmValue, joyX, joyY, tSpeed, aSpeed, SoftPwmR.reqValue, SoftPwmL.reqValue);
 8002a60:	4b42      	ldr	r3, [pc, #264]	; (8002b6c <espCommunication+0xc5c>)
 8002a62:	f9b3 3000 	ldrsh.w	r3, [r3]
    	    sprintf(txBuffer, "POST /robot_data HTTP/1.1\r\n"
 8002a66:	461a      	mov	r2, r3
								 avrBatVoltage, EncoderR.rpm, EncoderL.rpm, SoftPwmR.pwmValue, SoftPwmL.pwmValue, joyX, joyY, tSpeed, aSpeed, SoftPwmR.reqValue, SoftPwmL.reqValue);
 8002a68:	4b41      	ldr	r3, [pc, #260]	; (8002b70 <espCommunication+0xc60>)
 8002a6a:	f9b3 3000 	ldrsh.w	r3, [r3]
    	    sprintf(txBuffer, "POST /robot_data HTTP/1.1\r\n"
 8002a6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8002a70:	920a      	str	r2, [sp, #40]	; 0x28
 8002a72:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8002a76:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8002a7a:	683a      	ldr	r2, [r7, #0]
 8002a7c:	9204      	str	r2, [sp, #16]
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	9203      	str	r2, [sp, #12]
 8002a82:	68ba      	ldr	r2, [r7, #8]
 8002a84:	9202      	str	r2, [sp, #8]
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	9201      	str	r2, [sp, #4]
 8002a8a:	9600      	str	r6, [sp, #0]
 8002a8c:	6a3b      	ldr	r3, [r7, #32]
 8002a8e:	464a      	mov	r2, r9
 8002a90:	493b      	ldr	r1, [pc, #236]	; (8002b80 <espCommunication+0xc70>)
 8002a92:	483c      	ldr	r0, [pc, #240]	; (8002b84 <espCommunication+0xc74>)
 8002a94:	f008 fbf8 	bl	800b288 <siprintf>

    	    // Calculate the number of characters in the POST request
    	    int postRequestLength = strlen(txBuffer);
 8002a98:	483a      	ldr	r0, [pc, #232]	; (8002b84 <espCommunication+0xc74>)
 8002a9a:	f7fd fbf9 	bl	8000290 <strlen>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	647b      	str	r3, [r7, #68]	; 0x44

//    	  char pData[] = "GET / HTTP/1.1\r\nHost: 192.168.137.1:8080\r\n\r\n";
//    	  int d = sizeof(pData)-1;
    	  uint8_t char_number = 0;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
//    	  int temp = d;
    	  int temp = postRequestLength;
 8002aa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002aaa:	657b      	str	r3, [r7, #84]	; 0x54
    	  while(temp != 0){
 8002aac:	e00c      	b.n	8002ac8 <espCommunication+0xbb8>
    	  temp = temp / 10;
 8002aae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ab0:	4a35      	ldr	r2, [pc, #212]	; (8002b88 <espCommunication+0xc78>)
 8002ab2:	fb82 1203 	smull	r1, r2, r2, r3
 8002ab6:	1092      	asrs	r2, r2, #2
 8002ab8:	17db      	asrs	r3, r3, #31
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	657b      	str	r3, [r7, #84]	; 0x54
    	  char_number++;
 8002abe:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
    	  while(temp != 0){
 8002ac8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1ef      	bne.n	8002aae <espCommunication+0xb9e>
    	  }


    	  char pData2[13+char_number];
 8002ace:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8002ad2:	f103 040d 	add.w	r4, r3, #13
 8002ad6:	1e63      	subs	r3, r4, #1
 8002ad8:	643b      	str	r3, [r7, #64]	; 0x40
 8002ada:	4622      	mov	r2, r4
 8002adc:	2300      	movs	r3, #0
 8002ade:	61ba      	str	r2, [r7, #24]
 8002ae0:	61fb      	str	r3, [r7, #28]
 8002ae2:	f04f 0200 	mov.w	r2, #0
 8002ae6:	f04f 0300 	mov.w	r3, #0
 8002aea:	e9d7 5606 	ldrd	r5, r6, [r7, #24]
 8002aee:	4631      	mov	r1, r6
 8002af0:	00cb      	lsls	r3, r1, #3
 8002af2:	4629      	mov	r1, r5
 8002af4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002af8:	4629      	mov	r1, r5
 8002afa:	00ca      	lsls	r2, r1, #3
 8002afc:	4622      	mov	r2, r4
 8002afe:	2300      	movs	r3, #0
 8002b00:	613a      	str	r2, [r7, #16]
 8002b02:	617b      	str	r3, [r7, #20]
 8002b04:	f04f 0200 	mov.w	r2, #0
 8002b08:	f04f 0300 	mov.w	r3, #0
 8002b0c:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 8002b10:	4631      	mov	r1, r6
 8002b12:	00cb      	lsls	r3, r1, #3
 8002b14:	4629      	mov	r1, r5
 8002b16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b1a:	4629      	mov	r1, r5
 8002b1c:	00ca      	lsls	r2, r1, #3
 8002b1e:	4623      	mov	r3, r4
 8002b20:	3307      	adds	r3, #7
 8002b22:	08db      	lsrs	r3, r3, #3
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	ebad 0d03 	sub.w	sp, sp, r3
 8002b2a:	ab0c      	add	r3, sp, #48	; 0x30
 8002b2c:	3300      	adds	r3, #0
 8002b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
//    	  sprintf(pData2, "AT+CIPSEND=%d\r\n", d);
    	  sprintf(pData2, "AT+CIPSEND=%d\r\n", postRequestLength);
 8002b30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b32:	4916      	ldr	r1, [pc, #88]	; (8002b8c <espCommunication+0xc7c>)
 8002b34:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002b36:	f008 fba7 	bl	800b288 <siprintf>
    	  while(atSend_USART3_DMA(pData2, sizeof(pData2)) != 0) {
 8002b3a:	e02c      	b.n	8002b96 <espCommunication+0xc86>
 8002b3c:	f3af 8000 	nop.w
 8002b40:	00000000 	.word	0x00000000
 8002b44:	40240000 	.word	0x40240000
 8002b48:	00804021 	.word	0x00804021
 8002b4c:	20000e64 	.word	0x20000e64
 8002b50:	80402011 	.word	0x80402011
 8002b54:	20000ef8 	.word	0x20000ef8
 8002b58:	20000c64 	.word	0x20000c64
 8002b5c:	20000eec 	.word	0x20000eec
 8002b60:	20000a10 	.word	0x20000a10
 8002b64:	20000a1c 	.word	0x20000a1c
 8002b68:	20000a34 	.word	0x20000a34
 8002b6c:	20000a4c 	.word	0x20000a4c
 8002b70:	20000a54 	.word	0x20000a54
 8002b74:	20000ef0 	.word	0x20000ef0
 8002b78:	20000ef1 	.word	0x20000ef1
 8002b7c:	20000ef4 	.word	0x20000ef4
 8002b80:	0800e610 	.word	0x0800e610
 8002b84:	20000a64 	.word	0x20000a64
 8002b88:	66666667 	.word	0x66666667
 8002b8c:	0800e600 	.word	0x0800e600
    	    vTaskDelay( pdMS_TO_TICKS( 10 ) );
 8002b90:	200a      	movs	r0, #10
 8002b92:	f006 f8e5 	bl	8008d60 <vTaskDelay>
    	  while(atSend_USART3_DMA(pData2, sizeof(pData2)) != 0) {
 8002b96:	b2a3      	uxth	r3, r4
 8002b98:	4619      	mov	r1, r3
 8002b9a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002b9c:	f7fe f8aa 	bl	8000cf4 <atSend_USART3_DMA>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1f4      	bne.n	8002b90 <espCommunication+0xc80>
    	  }
//    	  while(atSend_USART3_DMA(pData, sizeof(pData)-1) != 0) {
//    	    vTaskDelay( pdMS_TO_TICKS( 10 ) );
//    	  }
    	  while(atSend_USART3_DMA(txBuffer, postRequestLength) != 0) {
 8002ba6:	e002      	b.n	8002bae <espCommunication+0xc9e>
    	    vTaskDelay( pdMS_TO_TICKS( 10 ) );
 8002ba8:	200a      	movs	r0, #10
 8002baa:	f006 f8d9 	bl	8008d60 <vTaskDelay>
    	  while(atSend_USART3_DMA(txBuffer, postRequestLength) != 0) {
 8002bae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	4809      	ldr	r0, [pc, #36]	; (8002bdc <espCommunication+0xccc>)
 8002bb6:	f7fe f89d 	bl	8000cf4 <atSend_USART3_DMA>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1f3      	bne.n	8002ba8 <espCommunication+0xc98>
    	  }
    	  xEventGroupClearBits(timerFdsEventGroup, 0xFFFFFF);
 8002bc0:	4b07      	ldr	r3, [pc, #28]	; (8002be0 <espCommunication+0xcd0>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f005 f8c1 	bl	8007d50 <xEventGroupClearBits>
 8002bce:	46c5      	mov	sp, r8
      }

	  vTaskDelay( pdMS_TO_TICKS( 50 ) );
 8002bd0:	2032      	movs	r0, #50	; 0x32
 8002bd2:	f006 f8c5 	bl	8008d60 <vTaskDelay>
  {
 8002bd6:	f7ff bae9 	b.w	80021ac <espCommunication+0x29c>
 8002bda:	bf00      	nop
 8002bdc:	20000a64 	.word	0x20000a64
 8002be0:	20000eec 	.word	0x20000eec

08002be4 <encoderR>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_encoderR */
void encoderR(void const * argument)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN encoderR */
  /* Infinite loop */
  for(;;)
  {
	  vTaskDelay(pdMS_TO_TICKS(ENCDELAY));
 8002bec:	2001      	movs	r0, #1
 8002bee:	f006 f8b7 	bl	8008d60 <vTaskDelay>

	  EncoderR.timeOld = EncoderR.timeNew;
 8002bf2:	4b22      	ldr	r3, [pc, #136]	; (8002c7c <encoderR+0x98>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a21      	ldr	r2, [pc, #132]	; (8002c7c <encoderR+0x98>)
 8002bf8:	6053      	str	r3, [r2, #4]
	  EncoderR.timeNew = TIM17->CNT;
 8002bfa:	4b21      	ldr	r3, [pc, #132]	; (8002c80 <encoderR+0x9c>)
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfe:	461a      	mov	r2, r3
 8002c00:	4b1e      	ldr	r3, [pc, #120]	; (8002c7c <encoderR+0x98>)
 8002c02:	601a      	str	r2, [r3, #0]
	  EncoderR.positionOld = EncoderR.positionNew;
 8002c04:	4b1d      	ldr	r3, [pc, #116]	; (8002c7c <encoderR+0x98>)
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	4a1c      	ldr	r2, [pc, #112]	; (8002c7c <encoderR+0x98>)
 8002c0a:	60d3      	str	r3, [r2, #12]
	  EncoderR.positionNew = TIM1->CNT;
 8002c0c:	4b1d      	ldr	r3, [pc, #116]	; (8002c84 <encoderR+0xa0>)
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c10:	461a      	mov	r2, r3
 8002c12:	4b1a      	ldr	r3, [pc, #104]	; (8002c7c <encoderR+0x98>)
 8002c14:	609a      	str	r2, [r3, #8]

	  if(EncoderR.timeNew - EncoderR.timeOld == 0) {
 8002c16:	4b19      	ldr	r3, [pc, #100]	; (8002c7c <encoderR+0x98>)
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	4b18      	ldr	r3, [pc, #96]	; (8002c7c <encoderR+0x98>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d02a      	beq.n	8002c78 <encoderR+0x94>
		  continue;
	  }

	  if (!EncoderR.posCntUpdate) {
 8002c22:	4b16      	ldr	r3, [pc, #88]	; (8002c7c <encoderR+0x98>)
 8002c24:	7c1b      	ldrb	r3, [r3, #16]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d121      	bne.n	8002c6e <encoderR+0x8a>
		  EncoderR.rpm = -((float)(((float)(EncoderR.positionNew - EncoderR.positionOld)) / ((float)(EncoderR.timeNew - EncoderR.timeOld)))*kToRpm); //(32*1000*60)/256;
 8002c2a:	4b14      	ldr	r3, [pc, #80]	; (8002c7c <encoderR+0x98>)
 8002c2c:	689a      	ldr	r2, [r3, #8]
 8002c2e:	4b13      	ldr	r3, [pc, #76]	; (8002c7c <encoderR+0x98>)
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	ee07 3a90 	vmov	s15, r3
 8002c38:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002c3c:	4b0f      	ldr	r3, [pc, #60]	; (8002c7c <encoderR+0x98>)
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	4b0e      	ldr	r3, [pc, #56]	; (8002c7c <encoderR+0x98>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	ee07 3a90 	vmov	s15, r3
 8002c4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c52:	4b0d      	ldr	r3, [pc, #52]	; (8002c88 <encoderR+0xa4>)
 8002c54:	edd3 7a00 	vldr	s15, [r3]
 8002c58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c5c:	eef1 7a67 	vneg.f32	s15, s15
 8002c60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c64:	ee17 2a90 	vmov	r2, s15
 8002c68:	4b04      	ldr	r3, [pc, #16]	; (8002c7c <encoderR+0x98>)
 8002c6a:	615a      	str	r2, [r3, #20]
 8002c6c:	e002      	b.n	8002c74 <encoderR+0x90>
//		  if((EncoderR.positionOld >= 0) && (EncoderR.positionOld <= 32768) ) {
//			  EncoderR.rpm = -((float)(((float)(EncoderR.positionNew - 65535 - EncoderR.positionOld)) / ((float)(EncoderR.timeNew - EncoderR.timeOld)))*kToRpm);
//		  } else {
//			  EncoderR.rpm = -((float)(((float)(EncoderR.positionNew + (65535 - EncoderR.positionOld))) / ((float)(EncoderR.timeNew - EncoderR.timeOld)))*kToRpm);
//		  }
		  EncoderR.posCntUpdate = 0;
 8002c6e:	4b03      	ldr	r3, [pc, #12]	; (8002c7c <encoderR+0x98>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	741a      	strb	r2, [r3, #16]
	  }
//	  taskYIELD();
	  __asm__ volatile("NOP");
 8002c74:	bf00      	nop
 8002c76:	e7b9      	b.n	8002bec <encoderR+0x8>
		  continue;
 8002c78:	bf00      	nop
	  vTaskDelay(pdMS_TO_TICKS(ENCDELAY));
 8002c7a:	e7b7      	b.n	8002bec <encoderR+0x8>
 8002c7c:	20000a1c 	.word	0x20000a1c
 8002c80:	40014800 	.word	0x40014800
 8002c84:	40012c00 	.word	0x40012c00
 8002c88:	20000a5c 	.word	0x20000a5c

08002c8c <encoderL>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_encoderL */
void encoderL(void const * argument)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN encoderL */
  /* Infinite loop */
  for(;;)
  {
	  vTaskDelay(pdMS_TO_TICKS(ENCDELAY));
 8002c94:	2001      	movs	r0, #1
 8002c96:	f006 f863 	bl	8008d60 <vTaskDelay>

	  if(TIM2->CNT > TIM2->ARR) {
 8002c9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ca0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d907      	bls.n	8002cba <encoderL+0x2e>
		  TIM2->EGR |= TIM_EGR_UG;
 8002caa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002cae:	695b      	ldr	r3, [r3, #20]
 8002cb0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002cb4:	f043 0301 	orr.w	r3, r3, #1
 8002cb8:	6153      	str	r3, [r2, #20]
	  }

	  EncoderL.timeOld = EncoderL.timeNew;
 8002cba:	4b22      	ldr	r3, [pc, #136]	; (8002d44 <encoderL+0xb8>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a21      	ldr	r2, [pc, #132]	; (8002d44 <encoderL+0xb8>)
 8002cc0:	6053      	str	r3, [r2, #4]
	  EncoderL.timeNew = TIM17->CNT;
 8002cc2:	4b21      	ldr	r3, [pc, #132]	; (8002d48 <encoderL+0xbc>)
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	4b1e      	ldr	r3, [pc, #120]	; (8002d44 <encoderL+0xb8>)
 8002cca:	601a      	str	r2, [r3, #0]
	  EncoderL.positionOld = EncoderL.positionNew;
 8002ccc:	4b1d      	ldr	r3, [pc, #116]	; (8002d44 <encoderL+0xb8>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	4a1c      	ldr	r2, [pc, #112]	; (8002d44 <encoderL+0xb8>)
 8002cd2:	60d3      	str	r3, [r2, #12]
	  EncoderL.positionNew = TIM2->CNT;
 8002cd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cda:	461a      	mov	r2, r3
 8002cdc:	4b19      	ldr	r3, [pc, #100]	; (8002d44 <encoderL+0xb8>)
 8002cde:	609a      	str	r2, [r3, #8]

	  if(EncoderL.timeNew - EncoderL.timeOld == 0) {
 8002ce0:	4b18      	ldr	r3, [pc, #96]	; (8002d44 <encoderL+0xb8>)
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	4b17      	ldr	r3, [pc, #92]	; (8002d44 <encoderL+0xb8>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d028      	beq.n	8002d3e <encoderL+0xb2>
		  continue;
	  }

	  if (!EncoderL.posCntUpdate) {
 8002cec:	4b15      	ldr	r3, [pc, #84]	; (8002d44 <encoderL+0xb8>)
 8002cee:	7c1b      	ldrb	r3, [r3, #16]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d11f      	bne.n	8002d34 <encoderL+0xa8>
		  EncoderL.rpm = ((float)(((float)(EncoderL.positionNew - EncoderL.positionOld)) / ((float)(EncoderL.timeNew - EncoderL.timeOld)))*kToRpm); //(32*1000*60)/256;
 8002cf4:	4b13      	ldr	r3, [pc, #76]	; (8002d44 <encoderL+0xb8>)
 8002cf6:	689a      	ldr	r2, [r3, #8]
 8002cf8:	4b12      	ldr	r3, [pc, #72]	; (8002d44 <encoderL+0xb8>)
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	ee07 3a90 	vmov	s15, r3
 8002d02:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002d06:	4b0f      	ldr	r3, [pc, #60]	; (8002d44 <encoderL+0xb8>)
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	4b0e      	ldr	r3, [pc, #56]	; (8002d44 <encoderL+0xb8>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	ee07 3a90 	vmov	s15, r3
 8002d14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d1c:	4b0b      	ldr	r3, [pc, #44]	; (8002d4c <encoderL+0xc0>)
 8002d1e:	edd3 7a00 	vldr	s15, [r3]
 8002d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d2a:	ee17 2a90 	vmov	r2, s15
 8002d2e:	4b05      	ldr	r3, [pc, #20]	; (8002d44 <encoderL+0xb8>)
 8002d30:	615a      	str	r2, [r3, #20]
 8002d32:	e002      	b.n	8002d3a <encoderL+0xae>
//		  if((EncoderL.positionOld >= 0) && (EncoderL.positionOld <= 32768) ) {
//			  EncoderL.rpm = ((float)(((float)(EncoderL.positionNew - 65535 - EncoderL.positionOld)) / ((float)(EncoderL.timeNew - EncoderL.timeOld)))*kToRpm);
//		  } else {
//			  EncoderL.rpm = ((float)(((float)(EncoderL.positionNew + (65535 - EncoderL.positionOld))) / ((float)(EncoderL.timeNew - EncoderL.timeOld)))*kToRpm);
//		  }
		  EncoderL.posCntUpdate = 0;
 8002d34:	4b03      	ldr	r3, [pc, #12]	; (8002d44 <encoderL+0xb8>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	741a      	strb	r2, [r3, #16]
	  }
//	  taskYIELD();
	  __asm__ volatile("NOP");
 8002d3a:	bf00      	nop
 8002d3c:	e7aa      	b.n	8002c94 <encoderL+0x8>
		  continue;
 8002d3e:	bf00      	nop
	  vTaskDelay(pdMS_TO_TICKS(ENCDELAY));
 8002d40:	e7a8      	b.n	8002c94 <encoderL+0x8>
 8002d42:	bf00      	nop
 8002d44:	20000a34 	.word	0x20000a34
 8002d48:	40014800 	.word	0x40014800
 8002d4c:	20000a5c 	.word	0x20000a5c

08002d50 <softwarePWMR>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_softwarePWMR */
void softwarePWMR(void const * argument)
{
 8002d50:	b5b0      	push	{r4, r5, r7, lr}
 8002d52:	b08a      	sub	sp, #40	; 0x28
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN softwarePWMR */
	int errorValue = 0;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	617b      	str	r3, [r7, #20]
	float sumValue = 0;
 8002d5c:	f04f 0300 	mov.w	r3, #0
 8002d60:	627b      	str	r3, [r7, #36]	; 0x24
	float pValue = 0;
 8002d62:	f04f 0300 	mov.w	r3, #0
 8002d66:	613b      	str	r3, [r7, #16]
	float iValue = 0;
 8002d68:	f04f 0300 	mov.w	r3, #0
 8002d6c:	623b      	str	r3, [r7, #32]
	float pwmFloatValue = 0;
 8002d6e:	f04f 0300 	mov.w	r3, #0
 8002d72:	61fb      	str	r3, [r7, #28]
	vTaskDelay( pdMS_TO_TICKS( 10 ) );
 8002d74:	200a      	movs	r0, #10
 8002d76:	f005 fff3 	bl	8008d60 <vTaskDelay>
	GPIOA->ODR |= (1<<6); //EN34
 8002d7a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002d7e:	695b      	ldr	r3, [r3, #20]
 8002d80:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002d84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d88:	6153      	str	r3, [r2, #20]

	SoftPwmR.reqValue = 6000;
 8002d8a:	4b9f      	ldr	r3, [pc, #636]	; (8003008 <softwarePWMR+0x2b8>)
 8002d8c:	f241 7270 	movw	r2, #6000	; 0x1770
 8002d90:	801a      	strh	r2, [r3, #0]
//		  reqValueTemp = reqValueTemp - reqValueTemp*((float)joyX/100);
//	  }
//	  if((reqValueTemp >= - 50) && (reqValueTemp <= 50)) {
//		  reqValueTemp = 0;
//	  }
	  float rWheelSpeed = tSpeed - aSpeed*DISBETWHEELS/2;
 8002d92:	4b9e      	ldr	r3, [pc, #632]	; (800300c <softwarePWMR+0x2bc>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7fd fbe6 	bl	8000568 <__aeabi_f2d>
 8002d9c:	4604      	mov	r4, r0
 8002d9e:	460d      	mov	r5, r1
 8002da0:	4b9b      	ldr	r3, [pc, #620]	; (8003010 <softwarePWMR+0x2c0>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7fd fbdf 	bl	8000568 <__aeabi_f2d>
 8002daa:	a393      	add	r3, pc, #588	; (adr r3, 8002ff8 <softwarePWMR+0x2a8>)
 8002dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db0:	f7fd fc32 	bl	8000618 <__aeabi_dmul>
 8002db4:	4602      	mov	r2, r0
 8002db6:	460b      	mov	r3, r1
 8002db8:	4610      	mov	r0, r2
 8002dba:	4619      	mov	r1, r3
 8002dbc:	f04f 0200 	mov.w	r2, #0
 8002dc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002dc4:	f7fd fd52 	bl	800086c <__aeabi_ddiv>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	460b      	mov	r3, r1
 8002dcc:	4620      	mov	r0, r4
 8002dce:	4629      	mov	r1, r5
 8002dd0:	f7fd fa6a 	bl	80002a8 <__aeabi_dsub>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	4610      	mov	r0, r2
 8002dda:	4619      	mov	r1, r3
 8002ddc:	f7fd fef4 	bl	8000bc8 <__aeabi_d2f>
 8002de0:	4603      	mov	r3, r0
 8002de2:	60fb      	str	r3, [r7, #12]
	  float reqValueTemp = (rWheelSpeed*60)/(2*3.14*RWHEEL);
 8002de4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002de8:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8003014 <softwarePWMR+0x2c4>
 8002dec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002df0:	ee17 0a90 	vmov	r0, s15
 8002df4:	f7fd fbb8 	bl	8000568 <__aeabi_f2d>
 8002df8:	a381      	add	r3, pc, #516	; (adr r3, 8003000 <softwarePWMR+0x2b0>)
 8002dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dfe:	f7fd fd35 	bl	800086c <__aeabi_ddiv>
 8002e02:	4602      	mov	r2, r0
 8002e04:	460b      	mov	r3, r1
 8002e06:	4610      	mov	r0, r2
 8002e08:	4619      	mov	r1, r3
 8002e0a:	f7fd fedd 	bl	8000bc8 <__aeabi_d2f>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	61bb      	str	r3, [r7, #24]
	  if((reqValueTemp >= - 50) && (reqValueTemp <= 50)) {
 8002e12:	edd7 7a06 	vldr	s15, [r7, #24]
 8002e16:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8003018 <softwarePWMR+0x2c8>
 8002e1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e22:	db0c      	blt.n	8002e3e <softwarePWMR+0xee>
 8002e24:	edd7 7a06 	vldr	s15, [r7, #24]
 8002e28:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 800301c <softwarePWMR+0x2cc>
 8002e2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e34:	d803      	bhi.n	8002e3e <softwarePWMR+0xee>
		  reqValueTemp = 0;
 8002e36:	f04f 0300 	mov.w	r3, #0
 8002e3a:	61bb      	str	r3, [r7, #24]
 8002e3c:	e016      	b.n	8002e6c <softwarePWMR+0x11c>
	  } else if((reqValueTemp > MAXRPM)) {
 8002e3e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002e42:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8003020 <softwarePWMR+0x2d0>
 8002e46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e4e:	dd02      	ble.n	8002e56 <softwarePWMR+0x106>
		  reqValueTemp = MAXRPM;
 8002e50:	4b74      	ldr	r3, [pc, #464]	; (8003024 <softwarePWMR+0x2d4>)
 8002e52:	61bb      	str	r3, [r7, #24]
 8002e54:	e00a      	b.n	8002e6c <softwarePWMR+0x11c>
	  } else if((reqValueTemp < -MAXRPM)) {
 8002e56:	edd7 7a06 	vldr	s15, [r7, #24]
 8002e5a:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8003028 <softwarePWMR+0x2d8>
 8002e5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e66:	d501      	bpl.n	8002e6c <softwarePWMR+0x11c>
		  reqValueTemp = -MAXRPM;
 8002e68:	4b70      	ldr	r3, [pc, #448]	; (800302c <softwarePWMR+0x2dc>)
 8002e6a:	61bb      	str	r3, [r7, #24]
	  }
	  SoftPwmR.reqValue = (int16_t)reqValueTemp;
 8002e6c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002e70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e74:	ee17 3a90 	vmov	r3, s15
 8002e78:	b21a      	sxth	r2, r3
 8002e7a:	4b63      	ldr	r3, [pc, #396]	; (8003008 <softwarePWMR+0x2b8>)
 8002e7c:	801a      	strh	r2, [r3, #0]

	  SoftPwmR.curValue = EncoderR.rpm;
 8002e7e:	4b6c      	ldr	r3, [pc, #432]	; (8003030 <softwarePWMR+0x2e0>)
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	b21a      	sxth	r2, r3
 8002e84:	4b60      	ldr	r3, [pc, #384]	; (8003008 <softwarePWMR+0x2b8>)
 8002e86:	805a      	strh	r2, [r3, #2]
	  errorValue = SoftPwmR.reqValue - SoftPwmR.curValue;
 8002e88:	4b5f      	ldr	r3, [pc, #380]	; (8003008 <softwarePWMR+0x2b8>)
 8002e8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e8e:	461a      	mov	r2, r3
 8002e90:	4b5d      	ldr	r3, [pc, #372]	; (8003008 <softwarePWMR+0x2b8>)
 8002e92:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	617b      	str	r3, [r7, #20]
	  pValue = KP * errorValue;
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	ee07 3a90 	vmov	s15, r3
 8002ea0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ea4:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8003034 <softwarePWMR+0x2e4>
 8002ea8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002eac:	edc7 7a04 	vstr	s15, [r7, #16]
	  iValue += KI * errorValue;
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	ee07 3a90 	vmov	s15, r3
 8002eb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002eba:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8003038 <softwarePWMR+0x2e8>
 8002ebe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ec2:	ed97 7a08 	vldr	s14, [r7, #32]
 8002ec6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eca:	edc7 7a08 	vstr	s15, [r7, #32]
	  if(iValue > ((float)MAXRPM)) iValue = MAXRPM;
 8002ece:	edd7 7a08 	vldr	s15, [r7, #32]
 8002ed2:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8003020 <softwarePWMR+0x2d0>
 8002ed6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ede:	dd02      	ble.n	8002ee6 <softwarePWMR+0x196>
 8002ee0:	4b50      	ldr	r3, [pc, #320]	; (8003024 <softwarePWMR+0x2d4>)
 8002ee2:	623b      	str	r3, [r7, #32]
 8002ee4:	e00a      	b.n	8002efc <softwarePWMR+0x1ac>
	  else if(iValue < ((float)-MAXRPM)) iValue = -MAXRPM;
 8002ee6:	edd7 7a08 	vldr	s15, [r7, #32]
 8002eea:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8003028 <softwarePWMR+0x2d8>
 8002eee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ef6:	d501      	bpl.n	8002efc <softwarePWMR+0x1ac>
 8002ef8:	4b4c      	ldr	r3, [pc, #304]	; (800302c <softwarePWMR+0x2dc>)
 8002efa:	623b      	str	r3, [r7, #32]
	  if((iValue <= 50) && (iValue >= -50)) {
 8002efc:	edd7 7a08 	vldr	s15, [r7, #32]
 8002f00:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800301c <softwarePWMR+0x2cc>
 8002f04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f0c:	d80b      	bhi.n	8002f26 <softwarePWMR+0x1d6>
 8002f0e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002f12:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8003018 <softwarePWMR+0x2c8>
 8002f16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f1e:	db02      	blt.n	8002f26 <softwarePWMR+0x1d6>
		  sumValue = pValue;
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	627b      	str	r3, [r7, #36]	; 0x24
 8002f24:	e007      	b.n	8002f36 <softwarePWMR+0x1e6>
	  } else {
		  sumValue = (pValue + iValue);
 8002f26:	ed97 7a04 	vldr	s14, [r7, #16]
 8002f2a:	edd7 7a08 	vldr	s15, [r7, #32]
 8002f2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f32:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	  }
	  pwmFloatValue += ((((float)sumValue)/((float)MAXRPM))*PWMVAL);
 8002f36:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002f3a:	eddf 6a39 	vldr	s13, [pc, #228]	; 8003020 <softwarePWMR+0x2d0>
 8002f3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f42:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800303c <softwarePWMR+0x2ec>
 8002f46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f4a:	ed97 7a07 	vldr	s14, [r7, #28]
 8002f4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f52:	edc7 7a07 	vstr	s15, [r7, #28]
	  if(pwmFloatValue > PWMVAL) pwmFloatValue = PWMVAL;
 8002f56:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f5a:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800303c <softwarePWMR+0x2ec>
 8002f5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f66:	dd02      	ble.n	8002f6e <softwarePWMR+0x21e>
 8002f68:	4b35      	ldr	r3, [pc, #212]	; (8003040 <softwarePWMR+0x2f0>)
 8002f6a:	61fb      	str	r3, [r7, #28]
 8002f6c:	e00a      	b.n	8002f84 <softwarePWMR+0x234>
	  else if(pwmFloatValue < -PWMVAL) pwmFloatValue = -PWMVAL;
 8002f6e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f72:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8003044 <softwarePWMR+0x2f4>
 8002f76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f7e:	d501      	bpl.n	8002f84 <softwarePWMR+0x234>
 8002f80:	4b31      	ldr	r3, [pc, #196]	; (8003048 <softwarePWMR+0x2f8>)
 8002f82:	61fb      	str	r3, [r7, #28]
	  SoftPwmR.pwmValue = (int16_t)pwmFloatValue;
 8002f84:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f8c:	ee17 3a90 	vmov	r3, s15
 8002f90:	b21a      	sxth	r2, r3
 8002f92:	4b1d      	ldr	r3, [pc, #116]	; (8003008 <softwarePWMR+0x2b8>)
 8002f94:	809a      	strh	r2, [r3, #4]
	  if(SoftPwmR.reqValue = 0) {
 8002f96:	4b1c      	ldr	r3, [pc, #112]	; (8003008 <softwarePWMR+0x2b8>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	801a      	strh	r2, [r3, #0]
		  SoftPwmR.pwmValue -= 1;
	  }
//	  if(SoftPwmR.pwmValue > 100) SoftPwmR.pwmValue = 100;
//	  else if(SoftPwmR.pwmValue < -100) SoftPwmR.pwmValue = -100;

	  if(SoftPwmR.pwmValue < 0) {
 8002f9c:	4b1a      	ldr	r3, [pc, #104]	; (8003008 <softwarePWMR+0x2b8>)
 8002f9e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	da0c      	bge.n	8002fc0 <softwarePWMR+0x270>
		  TIM15->CCR1 = TIM15->ARR - SoftPwmR.pwmValue*(-1);
 8002fa6:	4b29      	ldr	r3, [pc, #164]	; (800304c <softwarePWMR+0x2fc>)
 8002fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002faa:	4a17      	ldr	r2, [pc, #92]	; (8003008 <softwarePWMR+0x2b8>)
 8002fac:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8002fb0:	4611      	mov	r1, r2
 8002fb2:	4a26      	ldr	r2, [pc, #152]	; (800304c <softwarePWMR+0x2fc>)
 8002fb4:	440b      	add	r3, r1
 8002fb6:	6353      	str	r3, [r2, #52]	; 0x34
		  SoftPwmR.status = 2;
 8002fb8:	4b13      	ldr	r3, [pc, #76]	; (8003008 <softwarePWMR+0x2b8>)
 8002fba:	2202      	movs	r2, #2
 8002fbc:	719a      	strb	r2, [r3, #6]
 8002fbe:	e014      	b.n	8002fea <softwarePWMR+0x29a>
	  } else if(SoftPwmR.pwmValue > 0){
 8002fc0:	4b11      	ldr	r3, [pc, #68]	; (8003008 <softwarePWMR+0x2b8>)
 8002fc2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	dd0c      	ble.n	8002fe4 <softwarePWMR+0x294>
		  TIM15->CCR1 = TIM15->ARR - SoftPwmR.pwmValue;
 8002fca:	4b20      	ldr	r3, [pc, #128]	; (800304c <softwarePWMR+0x2fc>)
 8002fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fce:	4a0e      	ldr	r2, [pc, #56]	; (8003008 <softwarePWMR+0x2b8>)
 8002fd0:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8002fd4:	4611      	mov	r1, r2
 8002fd6:	4a1d      	ldr	r2, [pc, #116]	; (800304c <softwarePWMR+0x2fc>)
 8002fd8:	1a5b      	subs	r3, r3, r1
 8002fda:	6353      	str	r3, [r2, #52]	; 0x34
		  SoftPwmR.status = 1;
 8002fdc:	4b0a      	ldr	r3, [pc, #40]	; (8003008 <softwarePWMR+0x2b8>)
 8002fde:	2201      	movs	r2, #1
 8002fe0:	719a      	strb	r2, [r3, #6]
 8002fe2:	e002      	b.n	8002fea <softwarePWMR+0x29a>
	  } else {
		  SoftPwmR.status = 0;
 8002fe4:	4b08      	ldr	r3, [pc, #32]	; (8003008 <softwarePWMR+0x2b8>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	719a      	strb	r2, [r3, #6]
	  }

	  vTaskDelay(pdMS_TO_TICKS(ENCDELAY));
 8002fea:	2001      	movs	r0, #1
 8002fec:	f005 feb8 	bl	8008d60 <vTaskDelay>
  {
 8002ff0:	e6cf      	b.n	8002d92 <softwarePWMR+0x42>
 8002ff2:	bf00      	nop
 8002ff4:	f3af 8000 	nop.w
 8002ff8:	1eb851ec 	.word	0x1eb851ec
 8002ffc:	3fb1eb85 	.word	0x3fb1eb85
 8003000:	09d49519 	.word	0x09d49519
 8003004:	3fbc2268 	.word	0x3fbc2268
 8003008:	20000a4c 	.word	0x20000a4c
 800300c:	20000ef4 	.word	0x20000ef4
 8003010:	20000ef8 	.word	0x20000ef8
 8003014:	42700000 	.word	0x42700000
 8003018:	c2480000 	.word	0xc2480000
 800301c:	42480000 	.word	0x42480000
 8003020:	44fa0000 	.word	0x44fa0000
 8003024:	44fa0000 	.word	0x44fa0000
 8003028:	c4fa0000 	.word	0xc4fa0000
 800302c:	c4fa0000 	.word	0xc4fa0000
 8003030:	20000a1c 	.word	0x20000a1c
 8003034:	3a83126f 	.word	0x3a83126f
 8003038:	33d6bf95 	.word	0x33d6bf95
 800303c:	43c80000 	.word	0x43c80000
 8003040:	43c80000 	.word	0x43c80000
 8003044:	c3c80000 	.word	0xc3c80000
 8003048:	c3c80000 	.word	0xc3c80000
 800304c:	40014000 	.word	0x40014000

08003050 <softwarePWML>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_softwarePWML */
void softwarePWML(void const * argument)
{
 8003050:	b5b0      	push	{r4, r5, r7, lr}
 8003052:	b08a      	sub	sp, #40	; 0x28
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN softwarePWML */
	int errorValue = 0;
 8003058:	2300      	movs	r3, #0
 800305a:	617b      	str	r3, [r7, #20]
	float sumValue = 0;
 800305c:	f04f 0300 	mov.w	r3, #0
 8003060:	627b      	str	r3, [r7, #36]	; 0x24
	float pValue = 0;
 8003062:	f04f 0300 	mov.w	r3, #0
 8003066:	613b      	str	r3, [r7, #16]
	float iValue = 0;
 8003068:	f04f 0300 	mov.w	r3, #0
 800306c:	623b      	str	r3, [r7, #32]
	float pwmFloatValue = 0;
 800306e:	f04f 0300 	mov.w	r3, #0
 8003072:	61fb      	str	r3, [r7, #28]
	vTaskDelay( pdMS_TO_TICKS( 10 ) );
 8003074:	200a      	movs	r0, #10
 8003076:	f005 fe73 	bl	8008d60 <vTaskDelay>
	GPIOA->ODR |= (1<<3); //EN12
 800307a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800307e:	695b      	ldr	r3, [r3, #20]
 8003080:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003084:	f043 0308 	orr.w	r3, r3, #8
 8003088:	6153      	str	r3, [r2, #20]

	SoftPwmL.reqValue = 6000;
 800308a:	4b9f      	ldr	r3, [pc, #636]	; (8003308 <softwarePWML+0x2b8>)
 800308c:	f241 7270 	movw	r2, #6000	; 0x1770
 8003090:	801a      	strh	r2, [r3, #0]
//		  reqValueTemp = reqValueTemp - reqValueTemp*(-(float)joyX/100);
//	  }
//	  if((reqValueTemp >= - 50) && (reqValueTemp <= 50)) {
//		  reqValueTemp = 0;
//	  }
	  float lWheelSpeed = tSpeed + aSpeed*DISBETWHEELS/2;
 8003092:	4b9e      	ldr	r3, [pc, #632]	; (800330c <softwarePWML+0x2bc>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4618      	mov	r0, r3
 8003098:	f7fd fa66 	bl	8000568 <__aeabi_f2d>
 800309c:	4604      	mov	r4, r0
 800309e:	460d      	mov	r5, r1
 80030a0:	4b9b      	ldr	r3, [pc, #620]	; (8003310 <softwarePWML+0x2c0>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7fd fa5f 	bl	8000568 <__aeabi_f2d>
 80030aa:	a393      	add	r3, pc, #588	; (adr r3, 80032f8 <softwarePWML+0x2a8>)
 80030ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b0:	f7fd fab2 	bl	8000618 <__aeabi_dmul>
 80030b4:	4602      	mov	r2, r0
 80030b6:	460b      	mov	r3, r1
 80030b8:	4610      	mov	r0, r2
 80030ba:	4619      	mov	r1, r3
 80030bc:	f04f 0200 	mov.w	r2, #0
 80030c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80030c4:	f7fd fbd2 	bl	800086c <__aeabi_ddiv>
 80030c8:	4602      	mov	r2, r0
 80030ca:	460b      	mov	r3, r1
 80030cc:	4620      	mov	r0, r4
 80030ce:	4629      	mov	r1, r5
 80030d0:	f7fd f8ec 	bl	80002ac <__adddf3>
 80030d4:	4602      	mov	r2, r0
 80030d6:	460b      	mov	r3, r1
 80030d8:	4610      	mov	r0, r2
 80030da:	4619      	mov	r1, r3
 80030dc:	f7fd fd74 	bl	8000bc8 <__aeabi_d2f>
 80030e0:	4603      	mov	r3, r0
 80030e2:	60fb      	str	r3, [r7, #12]
	  float reqValueTemp = (lWheelSpeed*60)/(2*3.14*RWHEEL);
 80030e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80030e8:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8003314 <softwarePWML+0x2c4>
 80030ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030f0:	ee17 0a90 	vmov	r0, s15
 80030f4:	f7fd fa38 	bl	8000568 <__aeabi_f2d>
 80030f8:	a381      	add	r3, pc, #516	; (adr r3, 8003300 <softwarePWML+0x2b0>)
 80030fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030fe:	f7fd fbb5 	bl	800086c <__aeabi_ddiv>
 8003102:	4602      	mov	r2, r0
 8003104:	460b      	mov	r3, r1
 8003106:	4610      	mov	r0, r2
 8003108:	4619      	mov	r1, r3
 800310a:	f7fd fd5d 	bl	8000bc8 <__aeabi_d2f>
 800310e:	4603      	mov	r3, r0
 8003110:	61bb      	str	r3, [r7, #24]
	  if((reqValueTemp >= - 50) && (reqValueTemp <= 50)) {
 8003112:	edd7 7a06 	vldr	s15, [r7, #24]
 8003116:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8003318 <softwarePWML+0x2c8>
 800311a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800311e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003122:	db0c      	blt.n	800313e <softwarePWML+0xee>
 8003124:	edd7 7a06 	vldr	s15, [r7, #24]
 8003128:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 800331c <softwarePWML+0x2cc>
 800312c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003134:	d803      	bhi.n	800313e <softwarePWML+0xee>
		  reqValueTemp = 0;
 8003136:	f04f 0300 	mov.w	r3, #0
 800313a:	61bb      	str	r3, [r7, #24]
 800313c:	e016      	b.n	800316c <softwarePWML+0x11c>
	  } else if((reqValueTemp > MAXRPM)) {
 800313e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003142:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8003320 <softwarePWML+0x2d0>
 8003146:	eef4 7ac7 	vcmpe.f32	s15, s14
 800314a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800314e:	dd02      	ble.n	8003156 <softwarePWML+0x106>
		  reqValueTemp = MAXRPM;
 8003150:	4b74      	ldr	r3, [pc, #464]	; (8003324 <softwarePWML+0x2d4>)
 8003152:	61bb      	str	r3, [r7, #24]
 8003154:	e00a      	b.n	800316c <softwarePWML+0x11c>
	  } else if((reqValueTemp < -MAXRPM)) {
 8003156:	edd7 7a06 	vldr	s15, [r7, #24]
 800315a:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8003328 <softwarePWML+0x2d8>
 800315e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003166:	d501      	bpl.n	800316c <softwarePWML+0x11c>
		  reqValueTemp = -MAXRPM;
 8003168:	4b70      	ldr	r3, [pc, #448]	; (800332c <softwarePWML+0x2dc>)
 800316a:	61bb      	str	r3, [r7, #24]
	  }
	  SoftPwmL.reqValue = (int16_t)reqValueTemp;
 800316c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003170:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003174:	ee17 3a90 	vmov	r3, s15
 8003178:	b21a      	sxth	r2, r3
 800317a:	4b63      	ldr	r3, [pc, #396]	; (8003308 <softwarePWML+0x2b8>)
 800317c:	801a      	strh	r2, [r3, #0]

	  SoftPwmL.curValue = EncoderL.rpm;
 800317e:	4b6c      	ldr	r3, [pc, #432]	; (8003330 <softwarePWML+0x2e0>)
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	b21a      	sxth	r2, r3
 8003184:	4b60      	ldr	r3, [pc, #384]	; (8003308 <softwarePWML+0x2b8>)
 8003186:	805a      	strh	r2, [r3, #2]
	  errorValue = SoftPwmL.reqValue - SoftPwmL.curValue;
 8003188:	4b5f      	ldr	r3, [pc, #380]	; (8003308 <softwarePWML+0x2b8>)
 800318a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800318e:	461a      	mov	r2, r3
 8003190:	4b5d      	ldr	r3, [pc, #372]	; (8003308 <softwarePWML+0x2b8>)
 8003192:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	617b      	str	r3, [r7, #20]
	  pValue = KP * errorValue;
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	ee07 3a90 	vmov	s15, r3
 80031a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031a4:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8003334 <softwarePWML+0x2e4>
 80031a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031ac:	edc7 7a04 	vstr	s15, [r7, #16]
	  iValue += KI * errorValue;
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	ee07 3a90 	vmov	s15, r3
 80031b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031ba:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8003338 <softwarePWML+0x2e8>
 80031be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031c2:	ed97 7a08 	vldr	s14, [r7, #32]
 80031c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031ca:	edc7 7a08 	vstr	s15, [r7, #32]
	  if(iValue > ((float)MAXRPM)) iValue = MAXRPM;
 80031ce:	edd7 7a08 	vldr	s15, [r7, #32]
 80031d2:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8003320 <softwarePWML+0x2d0>
 80031d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031de:	dd02      	ble.n	80031e6 <softwarePWML+0x196>
 80031e0:	4b50      	ldr	r3, [pc, #320]	; (8003324 <softwarePWML+0x2d4>)
 80031e2:	623b      	str	r3, [r7, #32]
 80031e4:	e00a      	b.n	80031fc <softwarePWML+0x1ac>
	  else if(iValue < ((float)-MAXRPM)) iValue = -MAXRPM;
 80031e6:	edd7 7a08 	vldr	s15, [r7, #32]
 80031ea:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8003328 <softwarePWML+0x2d8>
 80031ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031f6:	d501      	bpl.n	80031fc <softwarePWML+0x1ac>
 80031f8:	4b4c      	ldr	r3, [pc, #304]	; (800332c <softwarePWML+0x2dc>)
 80031fa:	623b      	str	r3, [r7, #32]
	  if((iValue <= 50) && (iValue >= -50)) {
 80031fc:	edd7 7a08 	vldr	s15, [r7, #32]
 8003200:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800331c <softwarePWML+0x2cc>
 8003204:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800320c:	d80b      	bhi.n	8003226 <softwarePWML+0x1d6>
 800320e:	edd7 7a08 	vldr	s15, [r7, #32]
 8003212:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8003318 <softwarePWML+0x2c8>
 8003216:	eef4 7ac7 	vcmpe.f32	s15, s14
 800321a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800321e:	db02      	blt.n	8003226 <softwarePWML+0x1d6>
		  sumValue = pValue;
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	627b      	str	r3, [r7, #36]	; 0x24
 8003224:	e007      	b.n	8003236 <softwarePWML+0x1e6>
	  } else {
		  sumValue = (pValue + iValue);
 8003226:	ed97 7a04 	vldr	s14, [r7, #16]
 800322a:	edd7 7a08 	vldr	s15, [r7, #32]
 800322e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003232:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	  }
	  pwmFloatValue += ((((float)sumValue)/((float)MAXRPM))*PWMVAL);
 8003236:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800323a:	eddf 6a39 	vldr	s13, [pc, #228]	; 8003320 <softwarePWML+0x2d0>
 800323e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003242:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800333c <softwarePWML+0x2ec>
 8003246:	ee67 7a87 	vmul.f32	s15, s15, s14
 800324a:	ed97 7a07 	vldr	s14, [r7, #28]
 800324e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003252:	edc7 7a07 	vstr	s15, [r7, #28]
	  if(pwmFloatValue > PWMVAL) pwmFloatValue = PWMVAL;
 8003256:	edd7 7a07 	vldr	s15, [r7, #28]
 800325a:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800333c <softwarePWML+0x2ec>
 800325e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003266:	dd02      	ble.n	800326e <softwarePWML+0x21e>
 8003268:	4b35      	ldr	r3, [pc, #212]	; (8003340 <softwarePWML+0x2f0>)
 800326a:	61fb      	str	r3, [r7, #28]
 800326c:	e00a      	b.n	8003284 <softwarePWML+0x234>
	  else if(pwmFloatValue < -PWMVAL) pwmFloatValue = -PWMVAL;
 800326e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003272:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8003344 <softwarePWML+0x2f4>
 8003276:	eef4 7ac7 	vcmpe.f32	s15, s14
 800327a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800327e:	d501      	bpl.n	8003284 <softwarePWML+0x234>
 8003280:	4b31      	ldr	r3, [pc, #196]	; (8003348 <softwarePWML+0x2f8>)
 8003282:	61fb      	str	r3, [r7, #28]
	  SoftPwmL.pwmValue = (int16_t)pwmFloatValue;
 8003284:	edd7 7a07 	vldr	s15, [r7, #28]
 8003288:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800328c:	ee17 3a90 	vmov	r3, s15
 8003290:	b21a      	sxth	r2, r3
 8003292:	4b1d      	ldr	r3, [pc, #116]	; (8003308 <softwarePWML+0x2b8>)
 8003294:	809a      	strh	r2, [r3, #4]
	  if(SoftPwmL.reqValue = 0) {
 8003296:	4b1c      	ldr	r3, [pc, #112]	; (8003308 <softwarePWML+0x2b8>)
 8003298:	2200      	movs	r2, #0
 800329a:	801a      	strh	r2, [r3, #0]
		  SoftPwmL.pwmValue -= 1;
	  }
//	  if(SoftPwmL.pwmValue > 100) SoftPwmL.pwmValue = 100;
//	  else if(SoftPwmL.pwmValue < -100) SoftPwmL.pwmValue = -100;

	  if(SoftPwmL.pwmValue < 0) {
 800329c:	4b1a      	ldr	r3, [pc, #104]	; (8003308 <softwarePWML+0x2b8>)
 800329e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	da0c      	bge.n	80032c0 <softwarePWML+0x270>
		  TIM15->CCR2 = TIM15->ARR - SoftPwmL.pwmValue*(-1);
 80032a6:	4b29      	ldr	r3, [pc, #164]	; (800334c <softwarePWML+0x2fc>)
 80032a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032aa:	4a17      	ldr	r2, [pc, #92]	; (8003308 <softwarePWML+0x2b8>)
 80032ac:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80032b0:	4611      	mov	r1, r2
 80032b2:	4a26      	ldr	r2, [pc, #152]	; (800334c <softwarePWML+0x2fc>)
 80032b4:	440b      	add	r3, r1
 80032b6:	6393      	str	r3, [r2, #56]	; 0x38
		  SoftPwmL.status = 2;
 80032b8:	4b13      	ldr	r3, [pc, #76]	; (8003308 <softwarePWML+0x2b8>)
 80032ba:	2202      	movs	r2, #2
 80032bc:	719a      	strb	r2, [r3, #6]
 80032be:	e014      	b.n	80032ea <softwarePWML+0x29a>
	  } else if(SoftPwmL.pwmValue > 0) {
 80032c0:	4b11      	ldr	r3, [pc, #68]	; (8003308 <softwarePWML+0x2b8>)
 80032c2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	dd0c      	ble.n	80032e4 <softwarePWML+0x294>
		  TIM15->CCR2 = TIM15->ARR - SoftPwmL.pwmValue;
 80032ca:	4b20      	ldr	r3, [pc, #128]	; (800334c <softwarePWML+0x2fc>)
 80032cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ce:	4a0e      	ldr	r2, [pc, #56]	; (8003308 <softwarePWML+0x2b8>)
 80032d0:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80032d4:	4611      	mov	r1, r2
 80032d6:	4a1d      	ldr	r2, [pc, #116]	; (800334c <softwarePWML+0x2fc>)
 80032d8:	1a5b      	subs	r3, r3, r1
 80032da:	6393      	str	r3, [r2, #56]	; 0x38
		  SoftPwmL.status = 1;
 80032dc:	4b0a      	ldr	r3, [pc, #40]	; (8003308 <softwarePWML+0x2b8>)
 80032de:	2201      	movs	r2, #1
 80032e0:	719a      	strb	r2, [r3, #6]
 80032e2:	e002      	b.n	80032ea <softwarePWML+0x29a>
	  } else {
		  SoftPwmL.status = 0;
 80032e4:	4b08      	ldr	r3, [pc, #32]	; (8003308 <softwarePWML+0x2b8>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	719a      	strb	r2, [r3, #6]
	  }

	  vTaskDelay(pdMS_TO_TICKS(ENCDELAY));
 80032ea:	2001      	movs	r0, #1
 80032ec:	f005 fd38 	bl	8008d60 <vTaskDelay>
  {
 80032f0:	e6cf      	b.n	8003092 <softwarePWML+0x42>
 80032f2:	bf00      	nop
 80032f4:	f3af 8000 	nop.w
 80032f8:	1eb851ec 	.word	0x1eb851ec
 80032fc:	3fb1eb85 	.word	0x3fb1eb85
 8003300:	09d49519 	.word	0x09d49519
 8003304:	3fbc2268 	.word	0x3fbc2268
 8003308:	20000a54 	.word	0x20000a54
 800330c:	20000ef4 	.word	0x20000ef4
 8003310:	20000ef8 	.word	0x20000ef8
 8003314:	42700000 	.word	0x42700000
 8003318:	c2480000 	.word	0xc2480000
 800331c:	42480000 	.word	0x42480000
 8003320:	44fa0000 	.word	0x44fa0000
 8003324:	44fa0000 	.word	0x44fa0000
 8003328:	c4fa0000 	.word	0xc4fa0000
 800332c:	c4fa0000 	.word	0xc4fa0000
 8003330:	20000a34 	.word	0x20000a34
 8003334:	3a83126f 	.word	0x3a83126f
 8003338:	33d6bf95 	.word	0x33d6bf95
 800333c:	43c80000 	.word	0x43c80000
 8003340:	43c80000 	.word	0x43c80000
 8003344:	c3c80000 	.word	0xc3c80000
 8003348:	c3c80000 	.word	0xc3c80000
 800334c:	40014000 	.word	0x40014000

08003350 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a04      	ldr	r2, [pc, #16]	; (8003370 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d101      	bne.n	8003366 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003362:	f000 fdd7 	bl	8003f14 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003366:	bf00      	nop
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	40001000 	.word	0x40001000

08003374 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003378:	b672      	cpsid	i
}
 800337a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800337c:	e7fe      	b.n	800337c <Error_Handler+0x8>
	...

08003380 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003386:	4b11      	ldr	r3, [pc, #68]	; (80033cc <HAL_MspInit+0x4c>)
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	4a10      	ldr	r2, [pc, #64]	; (80033cc <HAL_MspInit+0x4c>)
 800338c:	f043 0301 	orr.w	r3, r3, #1
 8003390:	6193      	str	r3, [r2, #24]
 8003392:	4b0e      	ldr	r3, [pc, #56]	; (80033cc <HAL_MspInit+0x4c>)
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	607b      	str	r3, [r7, #4]
 800339c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800339e:	4b0b      	ldr	r3, [pc, #44]	; (80033cc <HAL_MspInit+0x4c>)
 80033a0:	69db      	ldr	r3, [r3, #28]
 80033a2:	4a0a      	ldr	r2, [pc, #40]	; (80033cc <HAL_MspInit+0x4c>)
 80033a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033a8:	61d3      	str	r3, [r2, #28]
 80033aa:	4b08      	ldr	r3, [pc, #32]	; (80033cc <HAL_MspInit+0x4c>)
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b2:	603b      	str	r3, [r7, #0]
 80033b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80033b6:	2200      	movs	r2, #0
 80033b8:	210f      	movs	r1, #15
 80033ba:	f06f 0001 	mvn.w	r0, #1
 80033be:	f001 fb43 	bl	8004a48 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033c2:	bf00      	nop
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	40021000 	.word	0x40021000

080033d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b08a      	sub	sp, #40	; 0x28
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033d8:	f107 0314 	add.w	r3, r7, #20
 80033dc:	2200      	movs	r2, #0
 80033de:	601a      	str	r2, [r3, #0]
 80033e0:	605a      	str	r2, [r3, #4]
 80033e2:	609a      	str	r2, [r3, #8]
 80033e4:	60da      	str	r2, [r3, #12]
 80033e6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033f0:	d124      	bne.n	800343c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80033f2:	4b14      	ldr	r3, [pc, #80]	; (8003444 <HAL_ADC_MspInit+0x74>)
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	4a13      	ldr	r2, [pc, #76]	; (8003444 <HAL_ADC_MspInit+0x74>)
 80033f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033fc:	6153      	str	r3, [r2, #20]
 80033fe:	4b11      	ldr	r3, [pc, #68]	; (8003444 <HAL_ADC_MspInit+0x74>)
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003406:	613b      	str	r3, [r7, #16]
 8003408:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800340a:	4b0e      	ldr	r3, [pc, #56]	; (8003444 <HAL_ADC_MspInit+0x74>)
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	4a0d      	ldr	r2, [pc, #52]	; (8003444 <HAL_ADC_MspInit+0x74>)
 8003410:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003414:	6153      	str	r3, [r2, #20]
 8003416:	4b0b      	ldr	r3, [pc, #44]	; (8003444 <HAL_ADC_MspInit+0x74>)
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341e:	60fb      	str	r3, [r7, #12]
 8003420:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003422:	2304      	movs	r3, #4
 8003424:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003426:	2303      	movs	r3, #3
 8003428:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800342a:	2300      	movs	r3, #0
 800342c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800342e:	f107 0314 	add.w	r3, r7, #20
 8003432:	4619      	mov	r1, r3
 8003434:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003438:	f001 fc3a 	bl	8004cb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800343c:	bf00      	nop
 800343e:	3728      	adds	r7, #40	; 0x28
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	40021000 	.word	0x40021000

08003448 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b08a      	sub	sp, #40	; 0x28
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003450:	f107 0314 	add.w	r3, r7, #20
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]
 8003458:	605a      	str	r2, [r3, #4]
 800345a:	609a      	str	r2, [r3, #8]
 800345c:	60da      	str	r2, [r3, #12]
 800345e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a17      	ldr	r2, [pc, #92]	; (80034c4 <HAL_SPI_MspInit+0x7c>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d128      	bne.n	80034bc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800346a:	4b17      	ldr	r3, [pc, #92]	; (80034c8 <HAL_SPI_MspInit+0x80>)
 800346c:	69db      	ldr	r3, [r3, #28]
 800346e:	4a16      	ldr	r2, [pc, #88]	; (80034c8 <HAL_SPI_MspInit+0x80>)
 8003470:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003474:	61d3      	str	r3, [r2, #28]
 8003476:	4b14      	ldr	r3, [pc, #80]	; (80034c8 <HAL_SPI_MspInit+0x80>)
 8003478:	69db      	ldr	r3, [r3, #28]
 800347a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800347e:	613b      	str	r3, [r7, #16]
 8003480:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003482:	4b11      	ldr	r3, [pc, #68]	; (80034c8 <HAL_SPI_MspInit+0x80>)
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	4a10      	ldr	r2, [pc, #64]	; (80034c8 <HAL_SPI_MspInit+0x80>)
 8003488:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800348c:	6153      	str	r3, [r2, #20]
 800348e:	4b0e      	ldr	r3, [pc, #56]	; (80034c8 <HAL_SPI_MspInit+0x80>)
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003496:	60fb      	str	r3, [r7, #12]
 8003498:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800349a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800349e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a0:	2302      	movs	r3, #2
 80034a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a4:	2300      	movs	r3, #0
 80034a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034a8:	2303      	movs	r3, #3
 80034aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80034ac:	2305      	movs	r3, #5
 80034ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034b0:	f107 0314 	add.w	r3, r7, #20
 80034b4:	4619      	mov	r1, r3
 80034b6:	4805      	ldr	r0, [pc, #20]	; (80034cc <HAL_SPI_MspInit+0x84>)
 80034b8:	f001 fbfa 	bl	8004cb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80034bc:	bf00      	nop
 80034be:	3728      	adds	r7, #40	; 0x28
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	40003800 	.word	0x40003800
 80034c8:	40021000 	.word	0x40021000
 80034cc:	48000400 	.word	0x48000400

080034d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b086      	sub	sp, #24
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a1f      	ldr	r2, [pc, #124]	; (800355c <HAL_TIM_Base_MspInit+0x8c>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d10c      	bne.n	80034fc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 80034e2:	4b1f      	ldr	r3, [pc, #124]	; (8003560 <HAL_TIM_Base_MspInit+0x90>)
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	4a1e      	ldr	r2, [pc, #120]	; (8003560 <HAL_TIM_Base_MspInit+0x90>)
 80034e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ec:	6193      	str	r3, [r2, #24]
 80034ee:	4b1c      	ldr	r3, [pc, #112]	; (8003560 <HAL_TIM_Base_MspInit+0x90>)
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034f6:	617b      	str	r3, [r7, #20]
 80034f8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80034fa:	e02a      	b.n	8003552 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM16)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a18      	ldr	r2, [pc, #96]	; (8003564 <HAL_TIM_Base_MspInit+0x94>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d10c      	bne.n	8003520 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003506:	4b16      	ldr	r3, [pc, #88]	; (8003560 <HAL_TIM_Base_MspInit+0x90>)
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	4a15      	ldr	r2, [pc, #84]	; (8003560 <HAL_TIM_Base_MspInit+0x90>)
 800350c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003510:	6193      	str	r3, [r2, #24]
 8003512:	4b13      	ldr	r3, [pc, #76]	; (8003560 <HAL_TIM_Base_MspInit+0x90>)
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800351a:	613b      	str	r3, [r7, #16]
 800351c:	693b      	ldr	r3, [r7, #16]
}
 800351e:	e018      	b.n	8003552 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM17)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a10      	ldr	r2, [pc, #64]	; (8003568 <HAL_TIM_Base_MspInit+0x98>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d113      	bne.n	8003552 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800352a:	4b0d      	ldr	r3, [pc, #52]	; (8003560 <HAL_TIM_Base_MspInit+0x90>)
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	4a0c      	ldr	r2, [pc, #48]	; (8003560 <HAL_TIM_Base_MspInit+0x90>)
 8003530:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003534:	6193      	str	r3, [r2, #24]
 8003536:	4b0a      	ldr	r3, [pc, #40]	; (8003560 <HAL_TIM_Base_MspInit+0x90>)
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800353e:	60fb      	str	r3, [r7, #12]
 8003540:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 5, 0);
 8003542:	2200      	movs	r2, #0
 8003544:	2105      	movs	r1, #5
 8003546:	201a      	movs	r0, #26
 8003548:	f001 fa7e 	bl	8004a48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800354c:	201a      	movs	r0, #26
 800354e:	f001 fa97 	bl	8004a80 <HAL_NVIC_EnableIRQ>
}
 8003552:	bf00      	nop
 8003554:	3718      	adds	r7, #24
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	40014000 	.word	0x40014000
 8003560:	40021000 	.word	0x40021000
 8003564:	40014400 	.word	0x40014400
 8003568:	40014800 	.word	0x40014800

0800356c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b08a      	sub	sp, #40	; 0x28
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003574:	f107 0314 	add.w	r3, r7, #20
 8003578:	2200      	movs	r2, #0
 800357a:	601a      	str	r2, [r3, #0]
 800357c:	605a      	str	r2, [r3, #4]
 800357e:	609a      	str	r2, [r3, #8]
 8003580:	60da      	str	r2, [r3, #12]
 8003582:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a3e      	ldr	r2, [pc, #248]	; (8003684 <HAL_UART_MspInit+0x118>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d176      	bne.n	800367c <HAL_UART_MspInit+0x110>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800358e:	4b3e      	ldr	r3, [pc, #248]	; (8003688 <HAL_UART_MspInit+0x11c>)
 8003590:	69db      	ldr	r3, [r3, #28]
 8003592:	4a3d      	ldr	r2, [pc, #244]	; (8003688 <HAL_UART_MspInit+0x11c>)
 8003594:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003598:	61d3      	str	r3, [r2, #28]
 800359a:	4b3b      	ldr	r3, [pc, #236]	; (8003688 <HAL_UART_MspInit+0x11c>)
 800359c:	69db      	ldr	r3, [r3, #28]
 800359e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035a2:	613b      	str	r3, [r7, #16]
 80035a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035a6:	4b38      	ldr	r3, [pc, #224]	; (8003688 <HAL_UART_MspInit+0x11c>)
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	4a37      	ldr	r2, [pc, #220]	; (8003688 <HAL_UART_MspInit+0x11c>)
 80035ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035b0:	6153      	str	r3, [r2, #20]
 80035b2:	4b35      	ldr	r3, [pc, #212]	; (8003688 <HAL_UART_MspInit+0x11c>)
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035ba:	60fb      	str	r3, [r7, #12]
 80035bc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80035be:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80035c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035c4:	2302      	movs	r3, #2
 80035c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c8:	2300      	movs	r3, #0
 80035ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035cc:	2303      	movs	r3, #3
 80035ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80035d0:	2307      	movs	r3, #7
 80035d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035d4:	f107 0314 	add.w	r3, r7, #20
 80035d8:	4619      	mov	r1, r3
 80035da:	482c      	ldr	r0, [pc, #176]	; (800368c <HAL_UART_MspInit+0x120>)
 80035dc:	f001 fb68 	bl	8004cb0 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80035e0:	4b2b      	ldr	r3, [pc, #172]	; (8003690 <HAL_UART_MspInit+0x124>)
 80035e2:	4a2c      	ldr	r2, [pc, #176]	; (8003694 <HAL_UART_MspInit+0x128>)
 80035e4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035e6:	4b2a      	ldr	r3, [pc, #168]	; (8003690 <HAL_UART_MspInit+0x124>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035ec:	4b28      	ldr	r3, [pc, #160]	; (8003690 <HAL_UART_MspInit+0x124>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80035f2:	4b27      	ldr	r3, [pc, #156]	; (8003690 <HAL_UART_MspInit+0x124>)
 80035f4:	2280      	movs	r2, #128	; 0x80
 80035f6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035f8:	4b25      	ldr	r3, [pc, #148]	; (8003690 <HAL_UART_MspInit+0x124>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035fe:	4b24      	ldr	r3, [pc, #144]	; (8003690 <HAL_UART_MspInit+0x124>)
 8003600:	2200      	movs	r2, #0
 8003602:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8003604:	4b22      	ldr	r3, [pc, #136]	; (8003690 <HAL_UART_MspInit+0x124>)
 8003606:	2220      	movs	r2, #32
 8003608:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800360a:	4b21      	ldr	r3, [pc, #132]	; (8003690 <HAL_UART_MspInit+0x124>)
 800360c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003610:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003612:	481f      	ldr	r0, [pc, #124]	; (8003690 <HAL_UART_MspInit+0x124>)
 8003614:	f001 fa42 	bl	8004a9c <HAL_DMA_Init>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 800361e:	f7ff fea9 	bl	8003374 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a1a      	ldr	r2, [pc, #104]	; (8003690 <HAL_UART_MspInit+0x124>)
 8003626:	675a      	str	r2, [r3, #116]	; 0x74
 8003628:	4a19      	ldr	r2, [pc, #100]	; (8003690 <HAL_UART_MspInit+0x124>)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 800362e:	4b1a      	ldr	r3, [pc, #104]	; (8003698 <HAL_UART_MspInit+0x12c>)
 8003630:	4a1a      	ldr	r2, [pc, #104]	; (800369c <HAL_UART_MspInit+0x130>)
 8003632:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003634:	4b18      	ldr	r3, [pc, #96]	; (8003698 <HAL_UART_MspInit+0x12c>)
 8003636:	2210      	movs	r2, #16
 8003638:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800363a:	4b17      	ldr	r3, [pc, #92]	; (8003698 <HAL_UART_MspInit+0x12c>)
 800363c:	2200      	movs	r2, #0
 800363e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003640:	4b15      	ldr	r3, [pc, #84]	; (8003698 <HAL_UART_MspInit+0x12c>)
 8003642:	2280      	movs	r2, #128	; 0x80
 8003644:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003646:	4b14      	ldr	r3, [pc, #80]	; (8003698 <HAL_UART_MspInit+0x12c>)
 8003648:	2200      	movs	r2, #0
 800364a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800364c:	4b12      	ldr	r3, [pc, #72]	; (8003698 <HAL_UART_MspInit+0x12c>)
 800364e:	2200      	movs	r2, #0
 8003650:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003652:	4b11      	ldr	r3, [pc, #68]	; (8003698 <HAL_UART_MspInit+0x12c>)
 8003654:	2200      	movs	r2, #0
 8003656:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003658:	4b0f      	ldr	r3, [pc, #60]	; (8003698 <HAL_UART_MspInit+0x12c>)
 800365a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800365e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003660:	480d      	ldr	r0, [pc, #52]	; (8003698 <HAL_UART_MspInit+0x12c>)
 8003662:	f001 fa1b 	bl	8004a9c <HAL_DMA_Init>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d001      	beq.n	8003670 <HAL_UART_MspInit+0x104>
    {
      Error_Handler();
 800366c:	f7ff fe82 	bl	8003374 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a09      	ldr	r2, [pc, #36]	; (8003698 <HAL_UART_MspInit+0x12c>)
 8003674:	671a      	str	r2, [r3, #112]	; 0x70
 8003676:	4a08      	ldr	r2, [pc, #32]	; (8003698 <HAL_UART_MspInit+0x12c>)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800367c:	bf00      	nop
 800367e:	3728      	adds	r7, #40	; 0x28
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	40004800 	.word	0x40004800
 8003688:	40021000 	.word	0x40021000
 800368c:	48000400 	.word	0x48000400
 8003690:	20000954 	.word	0x20000954
 8003694:	40020030 	.word	0x40020030
 8003698:	20000998 	.word	0x20000998
 800369c:	4002001c 	.word	0x4002001c

080036a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b08e      	sub	sp, #56	; 0x38
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80036a8:	2300      	movs	r3, #0
 80036aa:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80036ac:	2300      	movs	r3, #0
 80036ae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80036b0:	4b33      	ldr	r3, [pc, #204]	; (8003780 <HAL_InitTick+0xe0>)
 80036b2:	69db      	ldr	r3, [r3, #28]
 80036b4:	4a32      	ldr	r2, [pc, #200]	; (8003780 <HAL_InitTick+0xe0>)
 80036b6:	f043 0310 	orr.w	r3, r3, #16
 80036ba:	61d3      	str	r3, [r2, #28]
 80036bc:	4b30      	ldr	r3, [pc, #192]	; (8003780 <HAL_InitTick+0xe0>)
 80036be:	69db      	ldr	r3, [r3, #28]
 80036c0:	f003 0310 	and.w	r3, r3, #16
 80036c4:	60fb      	str	r3, [r7, #12]
 80036c6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80036c8:	f107 0210 	add.w	r2, r7, #16
 80036cc:	f107 0314 	add.w	r3, r7, #20
 80036d0:	4611      	mov	r1, r2
 80036d2:	4618      	mov	r0, r3
 80036d4:	f002 ff0e 	bl	80064f4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80036d8:	6a3b      	ldr	r3, [r7, #32]
 80036da:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80036dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d103      	bne.n	80036ea <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80036e2:	f002 fec3 	bl	800646c <HAL_RCC_GetPCLK1Freq>
 80036e6:	6378      	str	r0, [r7, #52]	; 0x34
 80036e8:	e004      	b.n	80036f4 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80036ea:	f002 febf 	bl	800646c <HAL_RCC_GetPCLK1Freq>
 80036ee:	4603      	mov	r3, r0
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80036f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036f6:	4a23      	ldr	r2, [pc, #140]	; (8003784 <HAL_InitTick+0xe4>)
 80036f8:	fba2 2303 	umull	r2, r3, r2, r3
 80036fc:	0c9b      	lsrs	r3, r3, #18
 80036fe:	3b01      	subs	r3, #1
 8003700:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003702:	4b21      	ldr	r3, [pc, #132]	; (8003788 <HAL_InitTick+0xe8>)
 8003704:	4a21      	ldr	r2, [pc, #132]	; (800378c <HAL_InitTick+0xec>)
 8003706:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003708:	4b1f      	ldr	r3, [pc, #124]	; (8003788 <HAL_InitTick+0xe8>)
 800370a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800370e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003710:	4a1d      	ldr	r2, [pc, #116]	; (8003788 <HAL_InitTick+0xe8>)
 8003712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003714:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003716:	4b1c      	ldr	r3, [pc, #112]	; (8003788 <HAL_InitTick+0xe8>)
 8003718:	2200      	movs	r2, #0
 800371a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800371c:	4b1a      	ldr	r3, [pc, #104]	; (8003788 <HAL_InitTick+0xe8>)
 800371e:	2200      	movs	r2, #0
 8003720:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003722:	4b19      	ldr	r3, [pc, #100]	; (8003788 <HAL_InitTick+0xe8>)
 8003724:	2200      	movs	r2, #0
 8003726:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003728:	4817      	ldr	r0, [pc, #92]	; (8003788 <HAL_InitTick+0xe8>)
 800372a:	f003 f944 	bl	80069b6 <HAL_TIM_Base_Init>
 800372e:	4603      	mov	r3, r0
 8003730:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003734:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003738:	2b00      	cmp	r3, #0
 800373a:	d11b      	bne.n	8003774 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800373c:	4812      	ldr	r0, [pc, #72]	; (8003788 <HAL_InitTick+0xe8>)
 800373e:	f003 f991 	bl	8006a64 <HAL_TIM_Base_Start_IT>
 8003742:	4603      	mov	r3, r0
 8003744:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003748:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800374c:	2b00      	cmp	r3, #0
 800374e:	d111      	bne.n	8003774 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003750:	2036      	movs	r0, #54	; 0x36
 8003752:	f001 f995 	bl	8004a80 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2b0f      	cmp	r3, #15
 800375a:	d808      	bhi.n	800376e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800375c:	2200      	movs	r2, #0
 800375e:	6879      	ldr	r1, [r7, #4]
 8003760:	2036      	movs	r0, #54	; 0x36
 8003762:	f001 f971 	bl	8004a48 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003766:	4a0a      	ldr	r2, [pc, #40]	; (8003790 <HAL_InitTick+0xf0>)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6013      	str	r3, [r2, #0]
 800376c:	e002      	b.n	8003774 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003774:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003778:	4618      	mov	r0, r3
 800377a:	3738      	adds	r7, #56	; 0x38
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	40021000 	.word	0x40021000
 8003784:	431bde83 	.word	0x431bde83
 8003788:	20000efc 	.word	0x20000efc
 800378c:	40001000 	.word	0x40001000
 8003790:	20000004 	.word	0x20000004

08003794 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003798:	e7fe      	b.n	8003798 <NMI_Handler+0x4>
	...

0800379c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	GPIOC->ODR &= ~GPIO_ODR_13;
 80037a2:	4b0b      	ldr	r3, [pc, #44]	; (80037d0 <HardFault_Handler+0x34>)
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	4a0a      	ldr	r2, [pc, #40]	; (80037d0 <HardFault_Handler+0x34>)
 80037a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037ac:	6153      	str	r3, [r2, #20]
	uint16_t cntLed = 0;
 80037ae:	2300      	movs	r3, #0
 80037b0:	80fb      	strh	r3, [r7, #6]

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  if(cntLed == 50000) {
 80037b2:	88fb      	ldrh	r3, [r7, #6]
 80037b4:	f24c 3250 	movw	r2, #50000	; 0xc350
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d105      	bne.n	80037c8 <HardFault_Handler+0x2c>
		  GPIOC->ODR ^= GPIO_ODR_14;
 80037bc:	4b04      	ldr	r3, [pc, #16]	; (80037d0 <HardFault_Handler+0x34>)
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	4a03      	ldr	r2, [pc, #12]	; (80037d0 <HardFault_Handler+0x34>)
 80037c2:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 80037c6:	6153      	str	r3, [r2, #20]
	  }
	  cntLed++;
 80037c8:	88fb      	ldrh	r3, [r7, #6]
 80037ca:	3301      	adds	r3, #1
 80037cc:	80fb      	strh	r3, [r7, #6]
	  if(cntLed == 50000) {
 80037ce:	e7f0      	b.n	80037b2 <HardFault_Handler+0x16>
 80037d0:	48000800 	.word	0x48000800

080037d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037d4:	b480      	push	{r7}
 80037d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80037d8:	e7fe      	b.n	80037d8 <MemManage_Handler+0x4>

080037da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80037da:	b480      	push	{r7}
 80037dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80037de:	e7fe      	b.n	80037de <BusFault_Handler+0x4>

080037e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037e0:	b480      	push	{r7}
 80037e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80037e4:	e7fe      	b.n	80037e4 <UsageFault_Handler+0x4>

080037e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80037e6:	b480      	push	{r7}
 80037e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80037ea:	bf00      	nop
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */
	DMA1_Channel2->CCR &= ~DMA_CCR_EN;
 80037f8:	4b08      	ldr	r3, [pc, #32]	; (800381c <DMA1_Channel2_IRQHandler+0x28>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a07      	ldr	r2, [pc, #28]	; (800381c <DMA1_Channel2_IRQHandler+0x28>)
 80037fe:	f023 0301 	bic.w	r3, r3, #1
 8003802:	6013      	str	r3, [r2, #0]
	USART3->CR3 &= ~USART_CR3_DMAT;
 8003804:	4b06      	ldr	r3, [pc, #24]	; (8003820 <DMA1_Channel2_IRQHandler+0x2c>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	4a05      	ldr	r2, [pc, #20]	; (8003820 <DMA1_Channel2_IRQHandler+0x2c>)
 800380a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800380e:	6093      	str	r3, [r2, #8]
  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003810:	4804      	ldr	r0, [pc, #16]	; (8003824 <DMA1_Channel2_IRQHandler+0x30>)
 8003812:	f001 f98a 	bl	8004b2a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003816:	bf00      	nop
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	4002001c 	.word	0x4002001c
 8003820:	40004800 	.word	0x40004800
 8003824:	20000998 	.word	0x20000998

08003828 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800382c:	4802      	ldr	r0, [pc, #8]	; (8003838 <DMA1_Channel3_IRQHandler+0x10>)
 800382e:	f001 f97c 	bl	8004b2a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003832:	bf00      	nop
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	20000954 	.word	0x20000954

0800383c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	if((TIM17->SR & TIM_SR_UIF) == TIM_SR_UIF) {
 8003840:	4b0b      	ldr	r3, [pc, #44]	; (8003870 <TIM1_TRG_COM_TIM17_IRQHandler+0x34>)
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	f003 0301 	and.w	r3, r3, #1
 8003848:	2b01      	cmp	r3, #1
 800384a:	d10c      	bne.n	8003866 <TIM1_TRG_COM_TIM17_IRQHandler+0x2a>
		EncoderR.timeNew = -(65535 - EncoderR.timeNew);
 800384c:	4b09      	ldr	r3, [pc, #36]	; (8003874 <TIM1_TRG_COM_TIM17_IRQHandler+0x38>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8003854:	3bff      	subs	r3, #255	; 0xff
 8003856:	4a07      	ldr	r2, [pc, #28]	; (8003874 <TIM1_TRG_COM_TIM17_IRQHandler+0x38>)
 8003858:	6013      	str	r3, [r2, #0]
		TIM17->SR &= ~(TIM_SR_UIF);
 800385a:	4b05      	ldr	r3, [pc, #20]	; (8003870 <TIM1_TRG_COM_TIM17_IRQHandler+0x34>)
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	4a04      	ldr	r2, [pc, #16]	; (8003870 <TIM1_TRG_COM_TIM17_IRQHandler+0x34>)
 8003860:	f023 0301 	bic.w	r3, r3, #1
 8003864:	6113      	str	r3, [r2, #16]
	}

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8003866:	4804      	ldr	r0, [pc, #16]	; (8003878 <TIM1_TRG_COM_TIM17_IRQHandler+0x3c>)
 8003868:	f003 f950 	bl	8006b0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800386c:	bf00      	nop
 800386e:	bd80      	pop	{r7, pc}
 8003870:	40014800 	.word	0x40014800
 8003874:	20000a1c 	.word	0x20000a1c
 8003878:	20000880 	.word	0x20000880

0800387c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003880:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003884:	f001 fb9e 	bl	8004fc4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003888:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800388c:	f001 fb9a 	bl	8004fc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003890:	bf00      	nop
 8003892:	bd80      	pop	{r7, pc}

08003894 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003898:	4802      	ldr	r0, [pc, #8]	; (80038a4 <TIM6_DAC_IRQHandler+0x10>)
 800389a:	f003 f937 	bl	8006b0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800389e:	bf00      	nop
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	20000efc 	.word	0x20000efc

080038a8 <DMA1_Channel1_IRQHandler>:

/* USER CODE BEGIN 1 */
void DMA1_Channel1_IRQHandler(void)
{
 80038a8:	b480      	push	{r7}
 80038aa:	af00      	add	r7, sp, #0
	__asm__ volatile("NOP");
 80038ac:	bf00      	nop
	DMA1->IFCR |= DMA_IFCR_CGIF1;
 80038ae:	4b06      	ldr	r3, [pc, #24]	; (80038c8 <DMA1_Channel1_IRQHandler+0x20>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	4a05      	ldr	r2, [pc, #20]	; (80038c8 <DMA1_Channel1_IRQHandler+0x20>)
 80038b4:	f043 0301 	orr.w	r3, r3, #1
 80038b8:	6053      	str	r3, [r2, #4]
	__asm__ volatile("NOP");
 80038ba:	bf00      	nop
}
 80038bc:	bf00      	nop
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	40020000 	.word	0x40020000

080038cc <ADC1_IRQHandler>:

void ADC1_IRQHandler(void)
{
 80038cc:	b480      	push	{r7}
 80038ce:	af00      	add	r7, sp, #0
	__asm__ volatile("NOP");
 80038d0:	bf00      	nop
	ADC1->ISR |= ADC_ISR_AWD1;
 80038d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80038dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038e0:	6013      	str	r3, [r2, #0]
	__asm__ volatile("NOP");
 80038e2:	bf00      	nop
}
 80038e4:	bf00      	nop
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
	...

080038f0 <TIM1_UP_TIM16_IRQHandler>:

void TIM1_UP_TIM16_IRQHandler(void)
{
 80038f0:	b480      	push	{r7}
 80038f2:	af00      	add	r7, sp, #0
	if((TIM1->SR & TIM_SR_UIF) == TIM_SR_UIF) {
 80038f4:	4b8c      	ldr	r3, [pc, #560]	; (8003b28 <TIM1_UP_TIM16_IRQHandler+0x238>)
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d108      	bne.n	8003912 <TIM1_UP_TIM16_IRQHandler+0x22>
		EncoderR.posCntUpdate = 1;
 8003900:	4b8a      	ldr	r3, [pc, #552]	; (8003b2c <TIM1_UP_TIM16_IRQHandler+0x23c>)
 8003902:	2201      	movs	r2, #1
 8003904:	741a      	strb	r2, [r3, #16]
		TIM1->SR &= ~(TIM_SR_UIF);
 8003906:	4b88      	ldr	r3, [pc, #544]	; (8003b28 <TIM1_UP_TIM16_IRQHandler+0x238>)
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	4a87      	ldr	r2, [pc, #540]	; (8003b28 <TIM1_UP_TIM16_IRQHandler+0x238>)
 800390c:	f023 0301 	bic.w	r3, r3, #1
 8003910:	6113      	str	r3, [r2, #16]
	}
	if((TIM16->SR & TIM_SR_UIF) == TIM_SR_UIF) {
 8003912:	4b87      	ldr	r3, [pc, #540]	; (8003b30 <TIM1_UP_TIM16_IRQHandler+0x240>)
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	2b01      	cmp	r3, #1
 800391c:	f040 80ff 	bne.w	8003b1e <TIM1_UP_TIM16_IRQHandler+0x22e>
		softCounterValue++;
 8003920:	4b84      	ldr	r3, [pc, #528]	; (8003b34 <TIM1_UP_TIM16_IRQHandler+0x244>)
 8003922:	881b      	ldrh	r3, [r3, #0]
 8003924:	3301      	adds	r3, #1
 8003926:	b29a      	uxth	r2, r3
 8003928:	4b82      	ldr	r3, [pc, #520]	; (8003b34 <TIM1_UP_TIM16_IRQHandler+0x244>)
 800392a:	801a      	strh	r2, [r3, #0]

		if(softCounterValue >= 100) {
 800392c:	4b81      	ldr	r3, [pc, #516]	; (8003b34 <TIM1_UP_TIM16_IRQHandler+0x244>)
 800392e:	881b      	ldrh	r3, [r3, #0]
 8003930:	2b63      	cmp	r3, #99	; 0x63
 8003932:	d902      	bls.n	800393a <TIM1_UP_TIM16_IRQHandler+0x4a>
			softCounterValue = 0;
 8003934:	4b7f      	ldr	r3, [pc, #508]	; (8003b34 <TIM1_UP_TIM16_IRQHandler+0x244>)
 8003936:	2200      	movs	r2, #0
 8003938:	801a      	strh	r2, [r3, #0]
		}

		if(SoftPwmR.pwmValue >= 0) {
 800393a:	4b7f      	ldr	r3, [pc, #508]	; (8003b38 <TIM1_UP_TIM16_IRQHandler+0x248>)
 800393c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003940:	2b00      	cmp	r3, #0
 8003942:	db33      	blt.n	80039ac <TIM1_UP_TIM16_IRQHandler+0xbc>
			if(softCounterValue < SoftPwmR.pwmValue) {
 8003944:	4b7b      	ldr	r3, [pc, #492]	; (8003b34 <TIM1_UP_TIM16_IRQHandler+0x244>)
 8003946:	881b      	ldrh	r3, [r3, #0]
 8003948:	461a      	mov	r2, r3
 800394a:	4b7b      	ldr	r3, [pc, #492]	; (8003b38 <TIM1_UP_TIM16_IRQHandler+0x248>)
 800394c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003950:	429a      	cmp	r2, r3
 8003952:	da15      	bge.n	8003980 <TIM1_UP_TIM16_IRQHandler+0x90>
				if(SoftPwmR.status != 1) {
 8003954:	4b78      	ldr	r3, [pc, #480]	; (8003b38 <TIM1_UP_TIM16_IRQHandler+0x248>)
 8003956:	799b      	ldrb	r3, [r3, #6]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d060      	beq.n	8003a1e <TIM1_UP_TIM16_IRQHandler+0x12e>
					GPIOA->ODR &= ~(1<<7); //_3A
 800395c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003966:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800396a:	6153      	str	r3, [r2, #20]
					GPIOB->ODR |= (1<<0); //_4A
 800396c:	4b73      	ldr	r3, [pc, #460]	; (8003b3c <TIM1_UP_TIM16_IRQHandler+0x24c>)
 800396e:	695b      	ldr	r3, [r3, #20]
 8003970:	4a72      	ldr	r2, [pc, #456]	; (8003b3c <TIM1_UP_TIM16_IRQHandler+0x24c>)
 8003972:	f043 0301 	orr.w	r3, r3, #1
 8003976:	6153      	str	r3, [r2, #20]
					SoftPwmR.status = 1;
 8003978:	4b6f      	ldr	r3, [pc, #444]	; (8003b38 <TIM1_UP_TIM16_IRQHandler+0x248>)
 800397a:	2201      	movs	r2, #1
 800397c:	719a      	strb	r2, [r3, #6]
 800397e:	e04e      	b.n	8003a1e <TIM1_UP_TIM16_IRQHandler+0x12e>
				}
			} else {
				if(SoftPwmR.status != 0) {
 8003980:	4b6d      	ldr	r3, [pc, #436]	; (8003b38 <TIM1_UP_TIM16_IRQHandler+0x248>)
 8003982:	799b      	ldrb	r3, [r3, #6]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d04a      	beq.n	8003a1e <TIM1_UP_TIM16_IRQHandler+0x12e>
					GPIOA->ODR &= ~(1<<7); //_3A
 8003988:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003992:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003996:	6153      	str	r3, [r2, #20]
					GPIOB->ODR &= ~(1<<0); //_4A
 8003998:	4b68      	ldr	r3, [pc, #416]	; (8003b3c <TIM1_UP_TIM16_IRQHandler+0x24c>)
 800399a:	695b      	ldr	r3, [r3, #20]
 800399c:	4a67      	ldr	r2, [pc, #412]	; (8003b3c <TIM1_UP_TIM16_IRQHandler+0x24c>)
 800399e:	f023 0301 	bic.w	r3, r3, #1
 80039a2:	6153      	str	r3, [r2, #20]
					SoftPwmR.status = 0;
 80039a4:	4b64      	ldr	r3, [pc, #400]	; (8003b38 <TIM1_UP_TIM16_IRQHandler+0x248>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	719a      	strb	r2, [r3, #6]
 80039aa:	e038      	b.n	8003a1e <TIM1_UP_TIM16_IRQHandler+0x12e>
				}
			}
		} else if(SoftPwmR.pwmValue < 0) {
 80039ac:	4b62      	ldr	r3, [pc, #392]	; (8003b38 <TIM1_UP_TIM16_IRQHandler+0x248>)
 80039ae:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	da33      	bge.n	8003a1e <TIM1_UP_TIM16_IRQHandler+0x12e>
			if(softCounterValue < (-SoftPwmR.pwmValue)) {
 80039b6:	4b5f      	ldr	r3, [pc, #380]	; (8003b34 <TIM1_UP_TIM16_IRQHandler+0x244>)
 80039b8:	881b      	ldrh	r3, [r3, #0]
 80039ba:	461a      	mov	r2, r3
 80039bc:	4b5e      	ldr	r3, [pc, #376]	; (8003b38 <TIM1_UP_TIM16_IRQHandler+0x248>)
 80039be:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80039c2:	425b      	negs	r3, r3
 80039c4:	429a      	cmp	r2, r3
 80039c6:	da15      	bge.n	80039f4 <TIM1_UP_TIM16_IRQHandler+0x104>
				if(SoftPwmR.status != 2) {
 80039c8:	4b5b      	ldr	r3, [pc, #364]	; (8003b38 <TIM1_UP_TIM16_IRQHandler+0x248>)
 80039ca:	799b      	ldrb	r3, [r3, #6]
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d026      	beq.n	8003a1e <TIM1_UP_TIM16_IRQHandler+0x12e>
					GPIOA->ODR |= (1<<7); //_3A
 80039d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80039da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039de:	6153      	str	r3, [r2, #20]
					GPIOB->ODR &= ~(1<<0); //_4A
 80039e0:	4b56      	ldr	r3, [pc, #344]	; (8003b3c <TIM1_UP_TIM16_IRQHandler+0x24c>)
 80039e2:	695b      	ldr	r3, [r3, #20]
 80039e4:	4a55      	ldr	r2, [pc, #340]	; (8003b3c <TIM1_UP_TIM16_IRQHandler+0x24c>)
 80039e6:	f023 0301 	bic.w	r3, r3, #1
 80039ea:	6153      	str	r3, [r2, #20]
					SoftPwmR.status = 2;
 80039ec:	4b52      	ldr	r3, [pc, #328]	; (8003b38 <TIM1_UP_TIM16_IRQHandler+0x248>)
 80039ee:	2202      	movs	r2, #2
 80039f0:	719a      	strb	r2, [r3, #6]
 80039f2:	e014      	b.n	8003a1e <TIM1_UP_TIM16_IRQHandler+0x12e>
				}
			} else {
				if(SoftPwmR.status != 0) {
 80039f4:	4b50      	ldr	r3, [pc, #320]	; (8003b38 <TIM1_UP_TIM16_IRQHandler+0x248>)
 80039f6:	799b      	ldrb	r3, [r3, #6]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d010      	beq.n	8003a1e <TIM1_UP_TIM16_IRQHandler+0x12e>
					GPIOA->ODR &= ~(1<<7); //_3A
 80039fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003a06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a0a:	6153      	str	r3, [r2, #20]
					GPIOB->ODR &= ~(1<<0); //_4A
 8003a0c:	4b4b      	ldr	r3, [pc, #300]	; (8003b3c <TIM1_UP_TIM16_IRQHandler+0x24c>)
 8003a0e:	695b      	ldr	r3, [r3, #20]
 8003a10:	4a4a      	ldr	r2, [pc, #296]	; (8003b3c <TIM1_UP_TIM16_IRQHandler+0x24c>)
 8003a12:	f023 0301 	bic.w	r3, r3, #1
 8003a16:	6153      	str	r3, [r2, #20]
					SoftPwmR.status = 0;
 8003a18:	4b47      	ldr	r3, [pc, #284]	; (8003b38 <TIM1_UP_TIM16_IRQHandler+0x248>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	719a      	strb	r2, [r3, #6]
				}
			}
		}

		if(SoftPwmL.pwmValue >= 0) {
 8003a1e:	4b48      	ldr	r3, [pc, #288]	; (8003b40 <TIM1_UP_TIM16_IRQHandler+0x250>)
 8003a20:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	db37      	blt.n	8003a98 <TIM1_UP_TIM16_IRQHandler+0x1a8>
			if(softCounterValue < SoftPwmL.pwmValue) {
 8003a28:	4b42      	ldr	r3, [pc, #264]	; (8003b34 <TIM1_UP_TIM16_IRQHandler+0x244>)
 8003a2a:	881b      	ldrh	r3, [r3, #0]
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	4b44      	ldr	r3, [pc, #272]	; (8003b40 <TIM1_UP_TIM16_IRQHandler+0x250>)
 8003a30:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	da17      	bge.n	8003a68 <TIM1_UP_TIM16_IRQHandler+0x178>
				if(SoftPwmL.status != 1) {
 8003a38:	4b41      	ldr	r3, [pc, #260]	; (8003b40 <TIM1_UP_TIM16_IRQHandler+0x250>)
 8003a3a:	799b      	ldrb	r3, [r3, #6]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d068      	beq.n	8003b12 <TIM1_UP_TIM16_IRQHandler+0x222>
					GPIOA->ODR &= ~(1<<4); //_1A
 8003a40:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003a4a:	f023 0310 	bic.w	r3, r3, #16
 8003a4e:	6153      	str	r3, [r2, #20]
					GPIOA->ODR |= (1<<5); //_2A
 8003a50:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003a5a:	f043 0320 	orr.w	r3, r3, #32
 8003a5e:	6153      	str	r3, [r2, #20]
					SoftPwmL.status = 1;
 8003a60:	4b37      	ldr	r3, [pc, #220]	; (8003b40 <TIM1_UP_TIM16_IRQHandler+0x250>)
 8003a62:	2201      	movs	r2, #1
 8003a64:	719a      	strb	r2, [r3, #6]
 8003a66:	e054      	b.n	8003b12 <TIM1_UP_TIM16_IRQHandler+0x222>
				}
			} else {
				if(SoftPwmL.status != 0) {
 8003a68:	4b35      	ldr	r3, [pc, #212]	; (8003b40 <TIM1_UP_TIM16_IRQHandler+0x250>)
 8003a6a:	799b      	ldrb	r3, [r3, #6]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d050      	beq.n	8003b12 <TIM1_UP_TIM16_IRQHandler+0x222>
					GPIOA->ODR &= ~(1<<4); //_1A
 8003a70:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003a7a:	f023 0310 	bic.w	r3, r3, #16
 8003a7e:	6153      	str	r3, [r2, #20]
					GPIOA->ODR &= ~(1<<5); //_2A
 8003a80:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003a8a:	f023 0320 	bic.w	r3, r3, #32
 8003a8e:	6153      	str	r3, [r2, #20]
					SoftPwmL.status = 0;
 8003a90:	4b2b      	ldr	r3, [pc, #172]	; (8003b40 <TIM1_UP_TIM16_IRQHandler+0x250>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	719a      	strb	r2, [r3, #6]
 8003a96:	e03c      	b.n	8003b12 <TIM1_UP_TIM16_IRQHandler+0x222>
				}
			}
		} else if(SoftPwmL.pwmValue < 0) {
 8003a98:	4b29      	ldr	r3, [pc, #164]	; (8003b40 <TIM1_UP_TIM16_IRQHandler+0x250>)
 8003a9a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	da37      	bge.n	8003b12 <TIM1_UP_TIM16_IRQHandler+0x222>
			if(softCounterValue < (-SoftPwmL.pwmValue)) {
 8003aa2:	4b24      	ldr	r3, [pc, #144]	; (8003b34 <TIM1_UP_TIM16_IRQHandler+0x244>)
 8003aa4:	881b      	ldrh	r3, [r3, #0]
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	4b25      	ldr	r3, [pc, #148]	; (8003b40 <TIM1_UP_TIM16_IRQHandler+0x250>)
 8003aaa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003aae:	425b      	negs	r3, r3
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	da17      	bge.n	8003ae4 <TIM1_UP_TIM16_IRQHandler+0x1f4>
				if(SoftPwmL.status != 2) {
 8003ab4:	4b22      	ldr	r3, [pc, #136]	; (8003b40 <TIM1_UP_TIM16_IRQHandler+0x250>)
 8003ab6:	799b      	ldrb	r3, [r3, #6]
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d02a      	beq.n	8003b12 <TIM1_UP_TIM16_IRQHandler+0x222>
					GPIOA->ODR |= (1<<4); //_1A
 8003abc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003ac6:	f043 0310 	orr.w	r3, r3, #16
 8003aca:	6153      	str	r3, [r2, #20]
					GPIOA->ODR &= ~(1<<5); //_2A
 8003acc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003ad6:	f023 0320 	bic.w	r3, r3, #32
 8003ada:	6153      	str	r3, [r2, #20]
					SoftPwmL.status = 2;
 8003adc:	4b18      	ldr	r3, [pc, #96]	; (8003b40 <TIM1_UP_TIM16_IRQHandler+0x250>)
 8003ade:	2202      	movs	r2, #2
 8003ae0:	719a      	strb	r2, [r3, #6]
 8003ae2:	e016      	b.n	8003b12 <TIM1_UP_TIM16_IRQHandler+0x222>
				}
			} else {
				if(SoftPwmL.status != 0) {
 8003ae4:	4b16      	ldr	r3, [pc, #88]	; (8003b40 <TIM1_UP_TIM16_IRQHandler+0x250>)
 8003ae6:	799b      	ldrb	r3, [r3, #6]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d012      	beq.n	8003b12 <TIM1_UP_TIM16_IRQHandler+0x222>
					GPIOA->ODR &= ~(1<<4); //_1A
 8003aec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003af6:	f023 0310 	bic.w	r3, r3, #16
 8003afa:	6153      	str	r3, [r2, #20]
					GPIOA->ODR &= ~(1<<5); //_2A
 8003afc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003b06:	f023 0320 	bic.w	r3, r3, #32
 8003b0a:	6153      	str	r3, [r2, #20]
					SoftPwmL.status = 0;
 8003b0c:	4b0c      	ldr	r3, [pc, #48]	; (8003b40 <TIM1_UP_TIM16_IRQHandler+0x250>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	719a      	strb	r2, [r3, #6]
				}
			}
		}

		TIM16->SR &= ~(TIM_SR_UIF);
 8003b12:	4b07      	ldr	r3, [pc, #28]	; (8003b30 <TIM1_UP_TIM16_IRQHandler+0x240>)
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	4a06      	ldr	r2, [pc, #24]	; (8003b30 <TIM1_UP_TIM16_IRQHandler+0x240>)
 8003b18:	f023 0301 	bic.w	r3, r3, #1
 8003b1c:	6113      	str	r3, [r2, #16]
	}

}
 8003b1e:	bf00      	nop
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr
 8003b28:	40012c00 	.word	0x40012c00
 8003b2c:	20000a1c 	.word	0x20000a1c
 8003b30:	40014400 	.word	0x40014400
 8003b34:	20000a60 	.word	0x20000a60
 8003b38:	20000a4c 	.word	0x20000a4c
 8003b3c:	48000400 	.word	0x48000400
 8003b40:	20000a54 	.word	0x20000a54

08003b44 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8003b44:	b480      	push	{r7}
 8003b46:	af00      	add	r7, sp, #0
	__asm__ volatile("NOP");
 8003b48:	bf00      	nop
	EncoderL.posCntUpdate = 1;
 8003b4a:	4b08      	ldr	r3, [pc, #32]	; (8003b6c <TIM2_IRQHandler+0x28>)
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	741a      	strb	r2, [r3, #16]
	TIM2->SR &= ~(TIM_SR_UIF);
 8003b50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003b5a:	f023 0301 	bic.w	r3, r3, #1
 8003b5e:	6113      	str	r3, [r2, #16]
	__asm__ volatile("NOP");
 8003b60:	bf00      	nop
}
 8003b62:	bf00      	nop
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr
 8003b6c:	20000a34 	.word	0x20000a34

08003b70 <TIM1_BRK_TIM15_IRQHandler>:

void TIM1_BRK_TIM15_IRQHandler(void)
{
 8003b70:	b480      	push	{r7}
 8003b72:	af00      	add	r7, sp, #0
	if((TIM15->SR & TIM_SR_UIF) == TIM_SR_UIF) {
 8003b74:	4b57      	ldr	r3, [pc, #348]	; (8003cd4 <TIM1_BRK_TIM15_IRQHandler+0x164>)
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d12c      	bne.n	8003bda <TIM1_BRK_TIM15_IRQHandler+0x6a>
		__asm__ volatile("NOP");
 8003b80:	bf00      	nop

		GPIOA->ODR &= ~(1<<7); //_3A
 8003b82:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003b8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b90:	6153      	str	r3, [r2, #20]
		GPIOB->ODR &= ~(1<<0); //_4A
 8003b92:	4b51      	ldr	r3, [pc, #324]	; (8003cd8 <TIM1_BRK_TIM15_IRQHandler+0x168>)
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	4a50      	ldr	r2, [pc, #320]	; (8003cd8 <TIM1_BRK_TIM15_IRQHandler+0x168>)
 8003b98:	f023 0301 	bic.w	r3, r3, #1
 8003b9c:	6153      	str	r3, [r2, #20]

		GPIOA->ODR &= ~(1<<4); //_1A
 8003b9e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ba2:	695b      	ldr	r3, [r3, #20]
 8003ba4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003ba8:	f023 0310 	bic.w	r3, r3, #16
 8003bac:	6153      	str	r3, [r2, #20]
		GPIOA->ODR &= ~(1<<5); //_2A
 8003bae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003bb2:	695b      	ldr	r3, [r3, #20]
 8003bb4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003bb8:	f023 0320 	bic.w	r3, r3, #32
 8003bbc:	6153      	str	r3, [r2, #20]

		TIM15->SR &= ~(TIM_SR_UIF);
 8003bbe:	4b45      	ldr	r3, [pc, #276]	; (8003cd4 <TIM1_BRK_TIM15_IRQHandler+0x164>)
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	4a44      	ldr	r2, [pc, #272]	; (8003cd4 <TIM1_BRK_TIM15_IRQHandler+0x164>)
 8003bc4:	f023 0301 	bic.w	r3, r3, #1
 8003bc8:	6113      	str	r3, [r2, #16]
		if((TIM15->SR & TIM_SR_UIF) == 0) {
 8003bca:	4b42      	ldr	r3, [pc, #264]	; (8003cd4 <TIM1_BRK_TIM15_IRQHandler+0x164>)
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d100      	bne.n	8003bd8 <TIM1_BRK_TIM15_IRQHandler+0x68>
			__asm__ volatile("NOP");
 8003bd6:	bf00      	nop
		}
		__asm__ volatile("NOP");
 8003bd8:	bf00      	nop
	}

	if((TIM15->SR & TIM_SR_CC1IF) == TIM_SR_CC1IF) {
 8003bda:	4b3e      	ldr	r3, [pc, #248]	; (8003cd4 <TIM1_BRK_TIM15_IRQHandler+0x164>)
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d133      	bne.n	8003c4e <TIM1_BRK_TIM15_IRQHandler+0xde>
		__asm__ volatile("NOP");
 8003be6:	bf00      	nop

		if(SoftPwmR.status == 1) {
 8003be8:	4b3c      	ldr	r3, [pc, #240]	; (8003cdc <TIM1_BRK_TIM15_IRQHandler+0x16c>)
 8003bea:	799b      	ldrb	r3, [r3, #6]
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d10e      	bne.n	8003c0e <TIM1_BRK_TIM15_IRQHandler+0x9e>
			GPIOA->ODR |= (1<<7); //_3A
 8003bf0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003bfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bfe:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~(1<<0); //_4A
 8003c00:	4b35      	ldr	r3, [pc, #212]	; (8003cd8 <TIM1_BRK_TIM15_IRQHandler+0x168>)
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	4a34      	ldr	r2, [pc, #208]	; (8003cd8 <TIM1_BRK_TIM15_IRQHandler+0x168>)
 8003c06:	f023 0301 	bic.w	r3, r3, #1
 8003c0a:	6153      	str	r3, [r2, #20]
 8003c0c:	e011      	b.n	8003c32 <TIM1_BRK_TIM15_IRQHandler+0xc2>
		} else if(SoftPwmR.status == 2) {
 8003c0e:	4b33      	ldr	r3, [pc, #204]	; (8003cdc <TIM1_BRK_TIM15_IRQHandler+0x16c>)
 8003c10:	799b      	ldrb	r3, [r3, #6]
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d10d      	bne.n	8003c32 <TIM1_BRK_TIM15_IRQHandler+0xc2>
			GPIOA->ODR &= ~(1<<7); //_3A
 8003c16:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003c1a:	695b      	ldr	r3, [r3, #20]
 8003c1c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003c20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c24:	6153      	str	r3, [r2, #20]
			GPIOB->ODR |= (1<<0); //_4A
 8003c26:	4b2c      	ldr	r3, [pc, #176]	; (8003cd8 <TIM1_BRK_TIM15_IRQHandler+0x168>)
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	4a2b      	ldr	r2, [pc, #172]	; (8003cd8 <TIM1_BRK_TIM15_IRQHandler+0x168>)
 8003c2c:	f043 0301 	orr.w	r3, r3, #1
 8003c30:	6153      	str	r3, [r2, #20]
		}

		TIM15->SR &= ~(TIM_SR_CC1IF);
 8003c32:	4b28      	ldr	r3, [pc, #160]	; (8003cd4 <TIM1_BRK_TIM15_IRQHandler+0x164>)
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	4a27      	ldr	r2, [pc, #156]	; (8003cd4 <TIM1_BRK_TIM15_IRQHandler+0x164>)
 8003c38:	f023 0302 	bic.w	r3, r3, #2
 8003c3c:	6113      	str	r3, [r2, #16]
		if((TIM15->SR & TIM_SR_CC1IF) == 0) {
 8003c3e:	4b25      	ldr	r3, [pc, #148]	; (8003cd4 <TIM1_BRK_TIM15_IRQHandler+0x164>)
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d100      	bne.n	8003c4c <TIM1_BRK_TIM15_IRQHandler+0xdc>
			__asm__ volatile("NOP");
 8003c4a:	bf00      	nop
		}
		__asm__ volatile("NOP");
 8003c4c:	bf00      	nop
	}

	if((TIM15->SR & TIM_SR_CC2IF) == TIM_SR_CC2IF) {
 8003c4e:	4b21      	ldr	r3, [pc, #132]	; (8003cd4 <TIM1_BRK_TIM15_IRQHandler+0x164>)
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	f003 0304 	and.w	r3, r3, #4
 8003c56:	2b04      	cmp	r3, #4
 8003c58:	d137      	bne.n	8003cca <TIM1_BRK_TIM15_IRQHandler+0x15a>
		__asm__ volatile("NOP");
 8003c5a:	bf00      	nop

		if(SoftPwmL.status == 1) {
 8003c5c:	4b20      	ldr	r3, [pc, #128]	; (8003ce0 <TIM1_BRK_TIM15_IRQHandler+0x170>)
 8003c5e:	799b      	ldrb	r3, [r3, #6]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d110      	bne.n	8003c86 <TIM1_BRK_TIM15_IRQHandler+0x116>
			GPIOA->ODR &= ~(1<<4); //_1A
 8003c64:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003c6e:	f023 0310 	bic.w	r3, r3, #16
 8003c72:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (1<<5); //_2A
 8003c74:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003c7e:	f043 0320 	orr.w	r3, r3, #32
 8003c82:	6153      	str	r3, [r2, #20]
 8003c84:	e013      	b.n	8003cae <TIM1_BRK_TIM15_IRQHandler+0x13e>
		} else if(SoftPwmL.status == 2) {
 8003c86:	4b16      	ldr	r3, [pc, #88]	; (8003ce0 <TIM1_BRK_TIM15_IRQHandler+0x170>)
 8003c88:	799b      	ldrb	r3, [r3, #6]
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d10f      	bne.n	8003cae <TIM1_BRK_TIM15_IRQHandler+0x13e>
			GPIOA->ODR |= (1<<4); //_1A
 8003c8e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003c92:	695b      	ldr	r3, [r3, #20]
 8003c94:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003c98:	f043 0310 	orr.w	r3, r3, #16
 8003c9c:	6153      	str	r3, [r2, #20]
			GPIOA->ODR &= ~(1<<5); //_2A
 8003c9e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003ca8:	f023 0320 	bic.w	r3, r3, #32
 8003cac:	6153      	str	r3, [r2, #20]
		}


		TIM15->SR &= ~(TIM_SR_CC2IF);
 8003cae:	4b09      	ldr	r3, [pc, #36]	; (8003cd4 <TIM1_BRK_TIM15_IRQHandler+0x164>)
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	4a08      	ldr	r2, [pc, #32]	; (8003cd4 <TIM1_BRK_TIM15_IRQHandler+0x164>)
 8003cb4:	f023 0304 	bic.w	r3, r3, #4
 8003cb8:	6113      	str	r3, [r2, #16]
		if((TIM15->SR & TIM_SR_CC2IF) == 0) {
 8003cba:	4b06      	ldr	r3, [pc, #24]	; (8003cd4 <TIM1_BRK_TIM15_IRQHandler+0x164>)
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	f003 0304 	and.w	r3, r3, #4
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d100      	bne.n	8003cc8 <TIM1_BRK_TIM15_IRQHandler+0x158>
			__asm__ volatile("NOP");
 8003cc6:	bf00      	nop
		}
		__asm__ volatile("NOP");
 8003cc8:	bf00      	nop
	}
}
 8003cca:	bf00      	nop
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr
 8003cd4:	40014000 	.word	0x40014000
 8003cd8:	48000400 	.word	0x48000400
 8003cdc:	20000a4c 	.word	0x20000a4c
 8003ce0:	20000a54 	.word	0x20000a54

08003ce4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	af00      	add	r7, sp, #0
  return 1;
 8003ce8:	2301      	movs	r3, #1
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <_kill>:

int _kill(int pid, int sig)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003cfe:	f007 fb79 	bl	800b3f4 <__errno>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2216      	movs	r2, #22
 8003d06:	601a      	str	r2, [r3, #0]
  return -1;
 8003d08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3708      	adds	r7, #8
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <_exit>:

void _exit (int status)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003d1c:	f04f 31ff 	mov.w	r1, #4294967295
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f7ff ffe7 	bl	8003cf4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003d26:	e7fe      	b.n	8003d26 <_exit+0x12>

08003d28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d34:	2300      	movs	r3, #0
 8003d36:	617b      	str	r3, [r7, #20]
 8003d38:	e00a      	b.n	8003d50 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003d3a:	f3af 8000 	nop.w
 8003d3e:	4601      	mov	r1, r0
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	1c5a      	adds	r2, r3, #1
 8003d44:	60ba      	str	r2, [r7, #8]
 8003d46:	b2ca      	uxtb	r2, r1
 8003d48:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	617b      	str	r3, [r7, #20]
 8003d50:	697a      	ldr	r2, [r7, #20]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	dbf0      	blt.n	8003d3a <_read+0x12>
  }

  return len;
 8003d58:	687b      	ldr	r3, [r7, #4]
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3718      	adds	r7, #24
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b086      	sub	sp, #24
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	60f8      	str	r0, [r7, #12]
 8003d6a:	60b9      	str	r1, [r7, #8]
 8003d6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d6e:	2300      	movs	r3, #0
 8003d70:	617b      	str	r3, [r7, #20]
 8003d72:	e009      	b.n	8003d88 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	1c5a      	adds	r2, r3, #1
 8003d78:	60ba      	str	r2, [r7, #8]
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	3301      	adds	r3, #1
 8003d86:	617b      	str	r3, [r7, #20]
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	dbf1      	blt.n	8003d74 <_write+0x12>
  }
  return len;
 8003d90:	687b      	ldr	r3, [r7, #4]
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3718      	adds	r7, #24
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}

08003d9a <_close>:

int _close(int file)
{
 8003d9a:	b480      	push	{r7}
 8003d9c:	b083      	sub	sp, #12
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003da2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	370c      	adds	r7, #12
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr

08003db2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003db2:	b480      	push	{r7}
 8003db4:	b083      	sub	sp, #12
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
 8003dba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003dc2:	605a      	str	r2, [r3, #4]
  return 0;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr

08003dd2 <_isatty>:

int _isatty(int file)
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	b083      	sub	sp, #12
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003dda:	2301      	movs	r3, #1
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3714      	adds	r7, #20
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
	...

08003e04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e0c:	4a14      	ldr	r2, [pc, #80]	; (8003e60 <_sbrk+0x5c>)
 8003e0e:	4b15      	ldr	r3, [pc, #84]	; (8003e64 <_sbrk+0x60>)
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e18:	4b13      	ldr	r3, [pc, #76]	; (8003e68 <_sbrk+0x64>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d102      	bne.n	8003e26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e20:	4b11      	ldr	r3, [pc, #68]	; (8003e68 <_sbrk+0x64>)
 8003e22:	4a12      	ldr	r2, [pc, #72]	; (8003e6c <_sbrk+0x68>)
 8003e24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e26:	4b10      	ldr	r3, [pc, #64]	; (8003e68 <_sbrk+0x64>)
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	693a      	ldr	r2, [r7, #16]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d207      	bcs.n	8003e44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e34:	f007 fade 	bl	800b3f4 <__errno>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	220c      	movs	r2, #12
 8003e3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e42:	e009      	b.n	8003e58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e44:	4b08      	ldr	r3, [pc, #32]	; (8003e68 <_sbrk+0x64>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e4a:	4b07      	ldr	r3, [pc, #28]	; (8003e68 <_sbrk+0x64>)
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4413      	add	r3, r2
 8003e52:	4a05      	ldr	r2, [pc, #20]	; (8003e68 <_sbrk+0x64>)
 8003e54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e56:	68fb      	ldr	r3, [r7, #12]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3718      	adds	r7, #24
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	20004000 	.word	0x20004000
 8003e64:	00000400 	.word	0x00000400
 8003e68:	20000f48 	.word	0x20000f48
 8003e6c:	20002d50 	.word	0x20002d50

08003e70 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e70:	b480      	push	{r7}
 8003e72:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003e74:	4b06      	ldr	r3, [pc, #24]	; (8003e90 <SystemInit+0x20>)
 8003e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e7a:	4a05      	ldr	r2, [pc, #20]	; (8003e90 <SystemInit+0x20>)
 8003e7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e84:	bf00      	nop
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	e000ed00 	.word	0xe000ed00

08003e94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003e94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ecc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003e98:	f7ff ffea 	bl	8003e70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003e9c:	480c      	ldr	r0, [pc, #48]	; (8003ed0 <LoopForever+0x6>)
  ldr r1, =_edata
 8003e9e:	490d      	ldr	r1, [pc, #52]	; (8003ed4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003ea0:	4a0d      	ldr	r2, [pc, #52]	; (8003ed8 <LoopForever+0xe>)
  movs r3, #0
 8003ea2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ea4:	e002      	b.n	8003eac <LoopCopyDataInit>

08003ea6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ea6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ea8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003eaa:	3304      	adds	r3, #4

08003eac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003eac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003eae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003eb0:	d3f9      	bcc.n	8003ea6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003eb2:	4a0a      	ldr	r2, [pc, #40]	; (8003edc <LoopForever+0x12>)
  ldr r4, =_ebss
 8003eb4:	4c0a      	ldr	r4, [pc, #40]	; (8003ee0 <LoopForever+0x16>)
  movs r3, #0
 8003eb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003eb8:	e001      	b.n	8003ebe <LoopFillZerobss>

08003eba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003eba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ebc:	3204      	adds	r2, #4

08003ebe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ebe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ec0:	d3fb      	bcc.n	8003eba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003ec2:	f007 fa9d 	bl	800b400 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003ec6:	f7fc ffeb 	bl	8000ea0 <main>

08003eca <LoopForever>:

LoopForever:
    b LoopForever
 8003eca:	e7fe      	b.n	8003eca <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003ecc:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8003ed0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ed4:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8003ed8:	0800eb48 	.word	0x0800eb48
  ldr r2, =_sbss
 8003edc:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8003ee0:	20002d4c 	.word	0x20002d4c

08003ee4 <COMP2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003ee4:	e7fe      	b.n	8003ee4 <COMP2_IRQHandler>
	...

08003ee8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003eec:	4b08      	ldr	r3, [pc, #32]	; (8003f10 <HAL_Init+0x28>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a07      	ldr	r2, [pc, #28]	; (8003f10 <HAL_Init+0x28>)
 8003ef2:	f043 0310 	orr.w	r3, r3, #16
 8003ef6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ef8:	2003      	movs	r0, #3
 8003efa:	f000 fd9a 	bl	8004a32 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003efe:	2004      	movs	r0, #4
 8003f00:	f7ff fbce 	bl	80036a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f04:	f7ff fa3c 	bl	8003380 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	40022000 	.word	0x40022000

08003f14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f14:	b480      	push	{r7}
 8003f16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f18:	4b06      	ldr	r3, [pc, #24]	; (8003f34 <HAL_IncTick+0x20>)
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	4b06      	ldr	r3, [pc, #24]	; (8003f38 <HAL_IncTick+0x24>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4413      	add	r3, r2
 8003f24:	4a04      	ldr	r2, [pc, #16]	; (8003f38 <HAL_IncTick+0x24>)
 8003f26:	6013      	str	r3, [r2, #0]
}
 8003f28:	bf00      	nop
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	20000008 	.word	0x20000008
 8003f38:	20000f4c 	.word	0x20000f4c

08003f3c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	af00      	add	r7, sp, #0
  return uwTick;  
 8003f40:	4b03      	ldr	r3, [pc, #12]	; (8003f50 <HAL_GetTick+0x14>)
 8003f42:	681b      	ldr	r3, [r3, #0]
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	20000f4c 	.word	0x20000f4c

08003f54 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f5c:	f7ff ffee 	bl	8003f3c <HAL_GetTick>
 8003f60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f6c:	d005      	beq.n	8003f7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f6e:	4b0a      	ldr	r3, [pc, #40]	; (8003f98 <HAL_Delay+0x44>)
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	461a      	mov	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	4413      	add	r3, r2
 8003f78:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003f7a:	bf00      	nop
 8003f7c:	f7ff ffde 	bl	8003f3c <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d8f7      	bhi.n	8003f7c <HAL_Delay+0x28>
  {
  }
}
 8003f8c:	bf00      	nop
 8003f8e:	bf00      	nop
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	20000008 	.word	0x20000008

08003f9c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b09a      	sub	sp, #104	; 0x68
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8003faa:	2300      	movs	r3, #0
 8003fac:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d101      	bne.n	8003fbc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e169      	b.n	8004290 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc6:	f003 0310 	and.w	r3, r3, #16
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d176      	bne.n	80040bc <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d152      	bne.n	800407c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f7ff f9ed 	bl	80033d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d13b      	bne.n	800407c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 fc01 	bl	800480c <ADC_Disable>
 800400a:	4603      	mov	r3, r0
 800400c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004014:	f003 0310 	and.w	r3, r3, #16
 8004018:	2b00      	cmp	r3, #0
 800401a:	d12f      	bne.n	800407c <HAL_ADC_Init+0xe0>
 800401c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004020:	2b00      	cmp	r3, #0
 8004022:	d12b      	bne.n	800407c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004028:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800402c:	f023 0302 	bic.w	r3, r3, #2
 8004030:	f043 0202 	orr.w	r2, r3, #2
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	689a      	ldr	r2, [r3, #8]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004046:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	689a      	ldr	r2, [r3, #8]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004056:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004058:	4b8f      	ldr	r3, [pc, #572]	; (8004298 <HAL_ADC_Init+0x2fc>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a8f      	ldr	r2, [pc, #572]	; (800429c <HAL_ADC_Init+0x300>)
 800405e:	fba2 2303 	umull	r2, r3, r2, r3
 8004062:	0c9a      	lsrs	r2, r3, #18
 8004064:	4613      	mov	r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	4413      	add	r3, r2
 800406a:	005b      	lsls	r3, r3, #1
 800406c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800406e:	e002      	b.n	8004076 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	3b01      	subs	r3, #1
 8004074:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d1f9      	bne.n	8004070 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d007      	beq.n	800409a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8004094:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004098:	d110      	bne.n	80040bc <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409e:	f023 0312 	bic.w	r3, r3, #18
 80040a2:	f043 0210 	orr.w	r2, r3, #16
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ae:	f043 0201 	orr.w	r2, r3, #1
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c0:	f003 0310 	and.w	r3, r3, #16
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f040 80d6 	bne.w	8004276 <HAL_ADC_Init+0x2da>
 80040ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	f040 80d1 	bne.w	8004276 <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f040 80c9 	bne.w	8004276 <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80040ec:	f043 0202 	orr.w	r2, r3, #2
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80040f4:	4b6a      	ldr	r3, [pc, #424]	; (80042a0 <HAL_ADC_Init+0x304>)
 80040f6:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80040f8:	2300      	movs	r3, #0
 80040fa:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f003 0303 	and.w	r3, r3, #3
 8004106:	2b01      	cmp	r3, #1
 8004108:	d108      	bne.n	800411c <HAL_ADC_Init+0x180>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0301 	and.w	r3, r3, #1
 8004114:	2b01      	cmp	r3, #1
 8004116:	d101      	bne.n	800411c <HAL_ADC_Init+0x180>
 8004118:	2301      	movs	r3, #1
 800411a:	e000      	b.n	800411e <HAL_ADC_Init+0x182>
 800411c:	2300      	movs	r3, #0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d11c      	bne.n	800415c <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004122:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8004124:	2b00      	cmp	r3, #0
 8004126:	d010      	beq.n	800414a <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f003 0303 	and.w	r3, r3, #3
 8004130:	2b01      	cmp	r3, #1
 8004132:	d107      	bne.n	8004144 <HAL_ADC_Init+0x1a8>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0301 	and.w	r3, r3, #1
 800413c:	2b01      	cmp	r3, #1
 800413e:	d101      	bne.n	8004144 <HAL_ADC_Init+0x1a8>
 8004140:	2301      	movs	r3, #1
 8004142:	e000      	b.n	8004146 <HAL_ADC_Init+0x1aa>
 8004144:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004146:	2b00      	cmp	r3, #0
 8004148:	d108      	bne.n	800415c <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800414a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	431a      	orrs	r2, r3
 8004158:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800415a:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	7e5b      	ldrb	r3, [r3, #25]
 8004160:	035b      	lsls	r3, r3, #13
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004166:	2a01      	cmp	r2, #1
 8004168:	d002      	beq.n	8004170 <HAL_ADC_Init+0x1d4>
 800416a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800416e:	e000      	b.n	8004172 <HAL_ADC_Init+0x1d6>
 8004170:	2200      	movs	r2, #0
 8004172:	431a      	orrs	r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	431a      	orrs	r2, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	4313      	orrs	r3, r2
 8004180:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004182:	4313      	orrs	r3, r2
 8004184:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 3020 	ldrb.w	r3, [r3, #32]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d11b      	bne.n	80041c8 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	7e5b      	ldrb	r3, [r3, #25]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d109      	bne.n	80041ac <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419c:	3b01      	subs	r3, #1
 800419e:	045a      	lsls	r2, r3, #17
 80041a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041a2:	4313      	orrs	r3, r2
 80041a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041a8:	663b      	str	r3, [r7, #96]	; 0x60
 80041aa:	e00d      	b.n	80041c8 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80041b4:	f043 0220 	orr.w	r2, r3, #32
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c0:	f043 0201 	orr.w	r2, r3, #1
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d007      	beq.n	80041e0 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d8:	4313      	orrs	r3, r2
 80041da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041dc:	4313      	orrs	r3, r2
 80041de:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f003 030c 	and.w	r3, r3, #12
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d114      	bne.n	8004218 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	6812      	ldr	r2, [r2, #0]
 80041f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041fc:	f023 0302 	bic.w	r3, r3, #2
 8004200:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	7e1b      	ldrb	r3, [r3, #24]
 8004206:	039a      	lsls	r2, r3, #14
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800420e:	005b      	lsls	r3, r3, #1
 8004210:	4313      	orrs	r3, r2
 8004212:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004214:	4313      	orrs	r3, r2
 8004216:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68da      	ldr	r2, [r3, #12]
 800421e:	4b21      	ldr	r3, [pc, #132]	; (80042a4 <HAL_ADC_Init+0x308>)
 8004220:	4013      	ands	r3, r2
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	6812      	ldr	r2, [r2, #0]
 8004226:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004228:	430b      	orrs	r3, r1
 800422a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d10c      	bne.n	800424e <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423a:	f023 010f 	bic.w	r1, r3, #15
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	69db      	ldr	r3, [r3, #28]
 8004242:	1e5a      	subs	r2, r3, #1
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	430a      	orrs	r2, r1
 800424a:	631a      	str	r2, [r3, #48]	; 0x30
 800424c:	e007      	b.n	800425e <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f022 020f 	bic.w	r2, r2, #15
 800425c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004268:	f023 0303 	bic.w	r3, r3, #3
 800426c:	f043 0201 	orr.w	r2, r3, #1
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	641a      	str	r2, [r3, #64]	; 0x40
 8004274:	e00a      	b.n	800428c <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427a:	f023 0312 	bic.w	r3, r3, #18
 800427e:	f043 0210 	orr.w	r2, r3, #16
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8004286:	2301      	movs	r3, #1
 8004288:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800428c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004290:	4618      	mov	r0, r3
 8004292:	3768      	adds	r7, #104	; 0x68
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	20000000 	.word	0x20000000
 800429c:	431bde83 	.word	0x431bde83
 80042a0:	50000300 	.word	0x50000300
 80042a4:	fff0c007 	.word	0xfff0c007

080042a8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b09b      	sub	sp, #108	; 0x6c
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042b2:	2300      	movs	r3, #0
 80042b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80042b8:	2300      	movs	r3, #0
 80042ba:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d101      	bne.n	80042ca <HAL_ADC_ConfigChannel+0x22>
 80042c6:	2302      	movs	r3, #2
 80042c8:	e295      	b.n	80047f6 <HAL_ADC_ConfigChannel+0x54e>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2201      	movs	r2, #1
 80042ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f003 0304 	and.w	r3, r3, #4
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f040 8279 	bne.w	80047d4 <HAL_ADC_ConfigChannel+0x52c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	2b04      	cmp	r3, #4
 80042e8:	d81c      	bhi.n	8004324 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	685a      	ldr	r2, [r3, #4]
 80042f4:	4613      	mov	r3, r2
 80042f6:	005b      	lsls	r3, r3, #1
 80042f8:	4413      	add	r3, r2
 80042fa:	005b      	lsls	r3, r3, #1
 80042fc:	461a      	mov	r2, r3
 80042fe:	231f      	movs	r3, #31
 8004300:	4093      	lsls	r3, r2
 8004302:	43db      	mvns	r3, r3
 8004304:	4019      	ands	r1, r3
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	6818      	ldr	r0, [r3, #0]
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	685a      	ldr	r2, [r3, #4]
 800430e:	4613      	mov	r3, r2
 8004310:	005b      	lsls	r3, r3, #1
 8004312:	4413      	add	r3, r2
 8004314:	005b      	lsls	r3, r3, #1
 8004316:	fa00 f203 	lsl.w	r2, r0, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	430a      	orrs	r2, r1
 8004320:	631a      	str	r2, [r3, #48]	; 0x30
 8004322:	e063      	b.n	80043ec <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	2b09      	cmp	r3, #9
 800432a:	d81e      	bhi.n	800436a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	685a      	ldr	r2, [r3, #4]
 8004336:	4613      	mov	r3, r2
 8004338:	005b      	lsls	r3, r3, #1
 800433a:	4413      	add	r3, r2
 800433c:	005b      	lsls	r3, r3, #1
 800433e:	3b1e      	subs	r3, #30
 8004340:	221f      	movs	r2, #31
 8004342:	fa02 f303 	lsl.w	r3, r2, r3
 8004346:	43db      	mvns	r3, r3
 8004348:	4019      	ands	r1, r3
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	6818      	ldr	r0, [r3, #0]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	685a      	ldr	r2, [r3, #4]
 8004352:	4613      	mov	r3, r2
 8004354:	005b      	lsls	r3, r3, #1
 8004356:	4413      	add	r3, r2
 8004358:	005b      	lsls	r3, r3, #1
 800435a:	3b1e      	subs	r3, #30
 800435c:	fa00 f203 	lsl.w	r2, r0, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	430a      	orrs	r2, r1
 8004366:	635a      	str	r2, [r3, #52]	; 0x34
 8004368:	e040      	b.n	80043ec <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	2b0e      	cmp	r3, #14
 8004370:	d81e      	bhi.n	80043b0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	685a      	ldr	r2, [r3, #4]
 800437c:	4613      	mov	r3, r2
 800437e:	005b      	lsls	r3, r3, #1
 8004380:	4413      	add	r3, r2
 8004382:	005b      	lsls	r3, r3, #1
 8004384:	3b3c      	subs	r3, #60	; 0x3c
 8004386:	221f      	movs	r2, #31
 8004388:	fa02 f303 	lsl.w	r3, r2, r3
 800438c:	43db      	mvns	r3, r3
 800438e:	4019      	ands	r1, r3
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	6818      	ldr	r0, [r3, #0]
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	4613      	mov	r3, r2
 800439a:	005b      	lsls	r3, r3, #1
 800439c:	4413      	add	r3, r2
 800439e:	005b      	lsls	r3, r3, #1
 80043a0:	3b3c      	subs	r3, #60	; 0x3c
 80043a2:	fa00 f203 	lsl.w	r2, r0, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	430a      	orrs	r2, r1
 80043ac:	639a      	str	r2, [r3, #56]	; 0x38
 80043ae:	e01d      	b.n	80043ec <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	685a      	ldr	r2, [r3, #4]
 80043ba:	4613      	mov	r3, r2
 80043bc:	005b      	lsls	r3, r3, #1
 80043be:	4413      	add	r3, r2
 80043c0:	005b      	lsls	r3, r3, #1
 80043c2:	3b5a      	subs	r3, #90	; 0x5a
 80043c4:	221f      	movs	r2, #31
 80043c6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ca:	43db      	mvns	r3, r3
 80043cc:	4019      	ands	r1, r3
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	6818      	ldr	r0, [r3, #0]
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	4613      	mov	r3, r2
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	4413      	add	r3, r2
 80043dc:	005b      	lsls	r3, r3, #1
 80043de:	3b5a      	subs	r3, #90	; 0x5a
 80043e0:	fa00 f203 	lsl.w	r2, r0, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	430a      	orrs	r2, r1
 80043ea:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f003 030c 	and.w	r3, r3, #12
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	f040 80e5 	bne.w	80045c6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2b09      	cmp	r3, #9
 8004402:	d91c      	bls.n	800443e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	6999      	ldr	r1, [r3, #24]
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	4613      	mov	r3, r2
 8004410:	005b      	lsls	r3, r3, #1
 8004412:	4413      	add	r3, r2
 8004414:	3b1e      	subs	r3, #30
 8004416:	2207      	movs	r2, #7
 8004418:	fa02 f303 	lsl.w	r3, r2, r3
 800441c:	43db      	mvns	r3, r3
 800441e:	4019      	ands	r1, r3
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	6898      	ldr	r0, [r3, #8]
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	4613      	mov	r3, r2
 800442a:	005b      	lsls	r3, r3, #1
 800442c:	4413      	add	r3, r2
 800442e:	3b1e      	subs	r3, #30
 8004430:	fa00 f203 	lsl.w	r2, r0, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	430a      	orrs	r2, r1
 800443a:	619a      	str	r2, [r3, #24]
 800443c:	e019      	b.n	8004472 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	6959      	ldr	r1, [r3, #20]
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	4613      	mov	r3, r2
 800444a:	005b      	lsls	r3, r3, #1
 800444c:	4413      	add	r3, r2
 800444e:	2207      	movs	r2, #7
 8004450:	fa02 f303 	lsl.w	r3, r2, r3
 8004454:	43db      	mvns	r3, r3
 8004456:	4019      	ands	r1, r3
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	6898      	ldr	r0, [r3, #8]
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	4613      	mov	r3, r2
 8004462:	005b      	lsls	r3, r3, #1
 8004464:	4413      	add	r3, r2
 8004466:	fa00 f203 	lsl.w	r2, r0, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	430a      	orrs	r2, r1
 8004470:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	695a      	ldr	r2, [r3, #20]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	08db      	lsrs	r3, r3, #3
 800447e:	f003 0303 	and.w	r3, r3, #3
 8004482:	005b      	lsls	r3, r3, #1
 8004484:	fa02 f303 	lsl.w	r3, r2, r3
 8004488:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	3b01      	subs	r3, #1
 8004490:	2b03      	cmp	r3, #3
 8004492:	d84f      	bhi.n	8004534 <HAL_ADC_ConfigChannel+0x28c>
 8004494:	a201      	add	r2, pc, #4	; (adr r2, 800449c <HAL_ADC_ConfigChannel+0x1f4>)
 8004496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800449a:	bf00      	nop
 800449c:	080044ad 	.word	0x080044ad
 80044a0:	080044cf 	.word	0x080044cf
 80044a4:	080044f1 	.word	0x080044f1
 80044a8:	08004513 	.word	0x08004513
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80044b2:	4b97      	ldr	r3, [pc, #604]	; (8004710 <HAL_ADC_ConfigChannel+0x468>)
 80044b4:	4013      	ands	r3, r2
 80044b6:	683a      	ldr	r2, [r7, #0]
 80044b8:	6812      	ldr	r2, [r2, #0]
 80044ba:	0691      	lsls	r1, r2, #26
 80044bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80044be:	430a      	orrs	r2, r1
 80044c0:	431a      	orrs	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80044ca:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80044cc:	e07b      	b.n	80045c6 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80044d4:	4b8e      	ldr	r3, [pc, #568]	; (8004710 <HAL_ADC_ConfigChannel+0x468>)
 80044d6:	4013      	ands	r3, r2
 80044d8:	683a      	ldr	r2, [r7, #0]
 80044da:	6812      	ldr	r2, [r2, #0]
 80044dc:	0691      	lsls	r1, r2, #26
 80044de:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80044e0:	430a      	orrs	r2, r1
 80044e2:	431a      	orrs	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80044ec:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80044ee:	e06a      	b.n	80045c6 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80044f6:	4b86      	ldr	r3, [pc, #536]	; (8004710 <HAL_ADC_ConfigChannel+0x468>)
 80044f8:	4013      	ands	r3, r2
 80044fa:	683a      	ldr	r2, [r7, #0]
 80044fc:	6812      	ldr	r2, [r2, #0]
 80044fe:	0691      	lsls	r1, r2, #26
 8004500:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004502:	430a      	orrs	r2, r1
 8004504:	431a      	orrs	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800450e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004510:	e059      	b.n	80045c6 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004518:	4b7d      	ldr	r3, [pc, #500]	; (8004710 <HAL_ADC_ConfigChannel+0x468>)
 800451a:	4013      	ands	r3, r2
 800451c:	683a      	ldr	r2, [r7, #0]
 800451e:	6812      	ldr	r2, [r2, #0]
 8004520:	0691      	lsls	r1, r2, #26
 8004522:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004524:	430a      	orrs	r2, r1
 8004526:	431a      	orrs	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004530:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004532:	e048      	b.n	80045c6 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800453a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	069b      	lsls	r3, r3, #26
 8004544:	429a      	cmp	r2, r3
 8004546:	d107      	bne.n	8004558 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004556:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800455e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	069b      	lsls	r3, r3, #26
 8004568:	429a      	cmp	r2, r3
 800456a:	d107      	bne.n	800457c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800457a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004582:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	069b      	lsls	r3, r3, #26
 800458c:	429a      	cmp	r2, r3
 800458e:	d107      	bne.n	80045a0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800459e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	069b      	lsls	r3, r3, #26
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d107      	bne.n	80045c4 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80045c2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80045c4:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f003 0303 	and.w	r3, r3, #3
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d108      	bne.n	80045e6 <HAL_ADC_ConfigChannel+0x33e>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d101      	bne.n	80045e6 <HAL_ADC_ConfigChannel+0x33e>
 80045e2:	2301      	movs	r3, #1
 80045e4:	e000      	b.n	80045e8 <HAL_ADC_ConfigChannel+0x340>
 80045e6:	2300      	movs	r3, #0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f040 80fe 	bne.w	80047ea <HAL_ADC_ConfigChannel+0x542>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d00f      	beq.n	8004616 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2201      	movs	r2, #1
 8004604:	fa02 f303 	lsl.w	r3, r2, r3
 8004608:	43da      	mvns	r2, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	400a      	ands	r2, r1
 8004610:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8004614:	e049      	b.n	80046aa <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2201      	movs	r2, #1
 8004624:	409a      	lsls	r2, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	430a      	orrs	r2, r1
 800462c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2b09      	cmp	r3, #9
 8004636:	d91c      	bls.n	8004672 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	6999      	ldr	r1, [r3, #24]
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	4613      	mov	r3, r2
 8004644:	005b      	lsls	r3, r3, #1
 8004646:	4413      	add	r3, r2
 8004648:	3b1b      	subs	r3, #27
 800464a:	2207      	movs	r2, #7
 800464c:	fa02 f303 	lsl.w	r3, r2, r3
 8004650:	43db      	mvns	r3, r3
 8004652:	4019      	ands	r1, r3
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	6898      	ldr	r0, [r3, #8]
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	4613      	mov	r3, r2
 800465e:	005b      	lsls	r3, r3, #1
 8004660:	4413      	add	r3, r2
 8004662:	3b1b      	subs	r3, #27
 8004664:	fa00 f203 	lsl.w	r2, r0, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	430a      	orrs	r2, r1
 800466e:	619a      	str	r2, [r3, #24]
 8004670:	e01b      	b.n	80046aa <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	6959      	ldr	r1, [r3, #20]
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	1c5a      	adds	r2, r3, #1
 800467e:	4613      	mov	r3, r2
 8004680:	005b      	lsls	r3, r3, #1
 8004682:	4413      	add	r3, r2
 8004684:	2207      	movs	r2, #7
 8004686:	fa02 f303 	lsl.w	r3, r2, r3
 800468a:	43db      	mvns	r3, r3
 800468c:	4019      	ands	r1, r3
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	6898      	ldr	r0, [r3, #8]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	1c5a      	adds	r2, r3, #1
 8004698:	4613      	mov	r3, r2
 800469a:	005b      	lsls	r3, r3, #1
 800469c:	4413      	add	r3, r2
 800469e:	fa00 f203 	lsl.w	r2, r0, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	430a      	orrs	r2, r1
 80046a8:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80046aa:	4b1a      	ldr	r3, [pc, #104]	; (8004714 <HAL_ADC_ConfigChannel+0x46c>)
 80046ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2b10      	cmp	r3, #16
 80046b4:	d105      	bne.n	80046c2 <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80046b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d014      	beq.n	80046ec <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80046c6:	2b11      	cmp	r3, #17
 80046c8:	d105      	bne.n	80046d6 <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80046ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00a      	beq.n	80046ec <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80046da:	2b12      	cmp	r3, #18
 80046dc:	f040 8085 	bne.w	80047ea <HAL_ADC_ConfigChannel+0x542>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80046e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d17e      	bne.n	80047ea <HAL_ADC_ConfigChannel+0x542>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80046ec:	2300      	movs	r3, #0
 80046ee:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f003 0303 	and.w	r3, r3, #3
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d10c      	bne.n	8004718 <HAL_ADC_ConfigChannel+0x470>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	2b01      	cmp	r3, #1
 800470a:	d105      	bne.n	8004718 <HAL_ADC_ConfigChannel+0x470>
 800470c:	2301      	movs	r3, #1
 800470e:	e004      	b.n	800471a <HAL_ADC_ConfigChannel+0x472>
 8004710:	83fff000 	.word	0x83fff000
 8004714:	50000300 	.word	0x50000300
 8004718:	2300      	movs	r3, #0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d150      	bne.n	80047c0 <HAL_ADC_ConfigChannel+0x518>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800471e:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004720:	2b00      	cmp	r3, #0
 8004722:	d010      	beq.n	8004746 <HAL_ADC_ConfigChannel+0x49e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	f003 0303 	and.w	r3, r3, #3
 800472c:	2b01      	cmp	r3, #1
 800472e:	d107      	bne.n	8004740 <HAL_ADC_ConfigChannel+0x498>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0301 	and.w	r3, r3, #1
 8004738:	2b01      	cmp	r3, #1
 800473a:	d101      	bne.n	8004740 <HAL_ADC_ConfigChannel+0x498>
 800473c:	2301      	movs	r3, #1
 800473e:	e000      	b.n	8004742 <HAL_ADC_ConfigChannel+0x49a>
 8004740:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004742:	2b00      	cmp	r3, #0
 8004744:	d13c      	bne.n	80047c0 <HAL_ADC_ConfigChannel+0x518>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2b10      	cmp	r3, #16
 800474c:	d11d      	bne.n	800478a <HAL_ADC_ConfigChannel+0x4e2>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004756:	d118      	bne.n	800478a <HAL_ADC_ConfigChannel+0x4e2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8004758:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004760:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004762:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004764:	4b27      	ldr	r3, [pc, #156]	; (8004804 <HAL_ADC_ConfigChannel+0x55c>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a27      	ldr	r2, [pc, #156]	; (8004808 <HAL_ADC_ConfigChannel+0x560>)
 800476a:	fba2 2303 	umull	r2, r3, r2, r3
 800476e:	0c9a      	lsrs	r2, r3, #18
 8004770:	4613      	mov	r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	4413      	add	r3, r2
 8004776:	005b      	lsls	r3, r3, #1
 8004778:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800477a:	e002      	b.n	8004782 <HAL_ADC_ConfigChannel+0x4da>
          {
            wait_loop_index--;
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	3b01      	subs	r3, #1
 8004780:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1f9      	bne.n	800477c <HAL_ADC_ConfigChannel+0x4d4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004788:	e02e      	b.n	80047e8 <HAL_ADC_ConfigChannel+0x540>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2b11      	cmp	r3, #17
 8004790:	d10b      	bne.n	80047aa <HAL_ADC_ConfigChannel+0x502>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800479a:	d106      	bne.n	80047aa <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800479c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80047a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047a6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80047a8:	e01e      	b.n	80047e8 <HAL_ADC_ConfigChannel+0x540>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2b12      	cmp	r3, #18
 80047b0:	d11a      	bne.n	80047e8 <HAL_ADC_ConfigChannel+0x540>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80047b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80047ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047bc:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80047be:	e013      	b.n	80047e8 <HAL_ADC_ConfigChannel+0x540>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c4:	f043 0220 	orr.w	r2, r3, #32
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80047d2:	e00a      	b.n	80047ea <HAL_ADC_ConfigChannel+0x542>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d8:	f043 0220 	orr.w	r2, r3, #32
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80047e6:	e000      	b.n	80047ea <HAL_ADC_ConfigChannel+0x542>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80047e8:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80047f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	376c      	adds	r7, #108	; 0x6c
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	20000000 	.word	0x20000000
 8004808:	431bde83 	.word	0x431bde83

0800480c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004814:	2300      	movs	r3, #0
 8004816:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f003 0303 	and.w	r3, r3, #3
 8004822:	2b01      	cmp	r3, #1
 8004824:	d108      	bne.n	8004838 <ADC_Disable+0x2c>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0301 	and.w	r3, r3, #1
 8004830:	2b01      	cmp	r3, #1
 8004832:	d101      	bne.n	8004838 <ADC_Disable+0x2c>
 8004834:	2301      	movs	r3, #1
 8004836:	e000      	b.n	800483a <ADC_Disable+0x2e>
 8004838:	2300      	movs	r3, #0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d047      	beq.n	80048ce <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f003 030d 	and.w	r3, r3, #13
 8004848:	2b01      	cmp	r3, #1
 800484a:	d10f      	bne.n	800486c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	689a      	ldr	r2, [r3, #8]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f042 0202 	orr.w	r2, r2, #2
 800485a:	609a      	str	r2, [r3, #8]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2203      	movs	r2, #3
 8004862:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8004864:	f7ff fb6a 	bl	8003f3c <HAL_GetTick>
 8004868:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800486a:	e029      	b.n	80048c0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004870:	f043 0210 	orr.w	r2, r3, #16
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800487c:	f043 0201 	orr.w	r2, r3, #1
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e023      	b.n	80048d0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004888:	f7ff fb58 	bl	8003f3c <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	2b02      	cmp	r3, #2
 8004894:	d914      	bls.n	80048c0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f003 0301 	and.w	r3, r3, #1
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d10d      	bne.n	80048c0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a8:	f043 0210 	orr.w	r2, r3, #16
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048b4:	f043 0201 	orr.w	r2, r3, #1
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e007      	b.n	80048d0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d0dc      	beq.n	8004888 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3710      	adds	r7, #16
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <__NVIC_SetPriorityGrouping>:
{
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f003 0307 	and.w	r3, r3, #7
 80048e6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048e8:	4b0c      	ldr	r3, [pc, #48]	; (800491c <__NVIC_SetPriorityGrouping+0x44>)
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048ee:	68ba      	ldr	r2, [r7, #8]
 80048f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80048f4:	4013      	ands	r3, r2
 80048f6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004900:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004904:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004908:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800490a:	4a04      	ldr	r2, [pc, #16]	; (800491c <__NVIC_SetPriorityGrouping+0x44>)
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	60d3      	str	r3, [r2, #12]
}
 8004910:	bf00      	nop
 8004912:	3714      	adds	r7, #20
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr
 800491c:	e000ed00 	.word	0xe000ed00

08004920 <__NVIC_GetPriorityGrouping>:
{
 8004920:	b480      	push	{r7}
 8004922:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004924:	4b04      	ldr	r3, [pc, #16]	; (8004938 <__NVIC_GetPriorityGrouping+0x18>)
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	0a1b      	lsrs	r3, r3, #8
 800492a:	f003 0307 	and.w	r3, r3, #7
}
 800492e:	4618      	mov	r0, r3
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr
 8004938:	e000ed00 	.word	0xe000ed00

0800493c <__NVIC_EnableIRQ>:
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	4603      	mov	r3, r0
 8004944:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800494a:	2b00      	cmp	r3, #0
 800494c:	db0b      	blt.n	8004966 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800494e:	79fb      	ldrb	r3, [r7, #7]
 8004950:	f003 021f 	and.w	r2, r3, #31
 8004954:	4907      	ldr	r1, [pc, #28]	; (8004974 <__NVIC_EnableIRQ+0x38>)
 8004956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800495a:	095b      	lsrs	r3, r3, #5
 800495c:	2001      	movs	r0, #1
 800495e:	fa00 f202 	lsl.w	r2, r0, r2
 8004962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004966:	bf00      	nop
 8004968:	370c      	adds	r7, #12
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	e000e100 	.word	0xe000e100

08004978 <__NVIC_SetPriority>:
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	4603      	mov	r3, r0
 8004980:	6039      	str	r1, [r7, #0]
 8004982:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004988:	2b00      	cmp	r3, #0
 800498a:	db0a      	blt.n	80049a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	b2da      	uxtb	r2, r3
 8004990:	490c      	ldr	r1, [pc, #48]	; (80049c4 <__NVIC_SetPriority+0x4c>)
 8004992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004996:	0112      	lsls	r2, r2, #4
 8004998:	b2d2      	uxtb	r2, r2
 800499a:	440b      	add	r3, r1
 800499c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80049a0:	e00a      	b.n	80049b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	b2da      	uxtb	r2, r3
 80049a6:	4908      	ldr	r1, [pc, #32]	; (80049c8 <__NVIC_SetPriority+0x50>)
 80049a8:	79fb      	ldrb	r3, [r7, #7]
 80049aa:	f003 030f 	and.w	r3, r3, #15
 80049ae:	3b04      	subs	r3, #4
 80049b0:	0112      	lsls	r2, r2, #4
 80049b2:	b2d2      	uxtb	r2, r2
 80049b4:	440b      	add	r3, r1
 80049b6:	761a      	strb	r2, [r3, #24]
}
 80049b8:	bf00      	nop
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr
 80049c4:	e000e100 	.word	0xe000e100
 80049c8:	e000ed00 	.word	0xe000ed00

080049cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b089      	sub	sp, #36	; 0x24
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f003 0307 	and.w	r3, r3, #7
 80049de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	f1c3 0307 	rsb	r3, r3, #7
 80049e6:	2b04      	cmp	r3, #4
 80049e8:	bf28      	it	cs
 80049ea:	2304      	movcs	r3, #4
 80049ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	3304      	adds	r3, #4
 80049f2:	2b06      	cmp	r3, #6
 80049f4:	d902      	bls.n	80049fc <NVIC_EncodePriority+0x30>
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	3b03      	subs	r3, #3
 80049fa:	e000      	b.n	80049fe <NVIC_EncodePriority+0x32>
 80049fc:	2300      	movs	r3, #0
 80049fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a00:	f04f 32ff 	mov.w	r2, #4294967295
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0a:	43da      	mvns	r2, r3
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	401a      	ands	r2, r3
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a14:	f04f 31ff 	mov.w	r1, #4294967295
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a1e:	43d9      	mvns	r1, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a24:	4313      	orrs	r3, r2
         );
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3724      	adds	r7, #36	; 0x24
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr

08004a32 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a32:	b580      	push	{r7, lr}
 8004a34:	b082      	sub	sp, #8
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f7ff ff4c 	bl	80048d8 <__NVIC_SetPriorityGrouping>
}
 8004a40:	bf00      	nop
 8004a42:	3708      	adds	r7, #8
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b086      	sub	sp, #24
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	4603      	mov	r3, r0
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]
 8004a54:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004a56:	2300      	movs	r3, #0
 8004a58:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004a5a:	f7ff ff61 	bl	8004920 <__NVIC_GetPriorityGrouping>
 8004a5e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	68b9      	ldr	r1, [r7, #8]
 8004a64:	6978      	ldr	r0, [r7, #20]
 8004a66:	f7ff ffb1 	bl	80049cc <NVIC_EncodePriority>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a70:	4611      	mov	r1, r2
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7ff ff80 	bl	8004978 <__NVIC_SetPriority>
}
 8004a78:	bf00      	nop
 8004a7a:	3718      	adds	r7, #24
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	4603      	mov	r3, r0
 8004a88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f7ff ff54 	bl	800493c <__NVIC_EnableIRQ>
}
 8004a94:	bf00      	nop
 8004a96:	3708      	adds	r7, #8
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d101      	bne.n	8004ab2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e037      	b.n	8004b22 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2202      	movs	r2, #2
 8004ab6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004ac8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004acc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004ad6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ae2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	695b      	ldr	r3, [r3, #20]
 8004ae8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004aee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	69db      	ldr	r3, [r3, #28]
 8004af4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 f8b3 	bl	8004c70 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}  
 8004b22:	4618      	mov	r0, r3
 8004b24:	3710      	adds	r7, #16
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b084      	sub	sp, #16
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b46:	2204      	movs	r2, #4
 8004b48:	409a      	lsls	r2, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d024      	beq.n	8004b9c <HAL_DMA_IRQHandler+0x72>
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	f003 0304 	and.w	r3, r3, #4
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d01f      	beq.n	8004b9c <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0320 	and.w	r3, r3, #32
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d107      	bne.n	8004b7a <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f022 0204 	bic.w	r2, r2, #4
 8004b78:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b82:	2104      	movs	r1, #4
 8004b84:	fa01 f202 	lsl.w	r2, r1, r2
 8004b88:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d06a      	beq.n	8004c68 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8004b9a:	e065      	b.n	8004c68 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba0:	2202      	movs	r2, #2
 8004ba2:	409a      	lsls	r2, r3
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d02c      	beq.n	8004c06 <HAL_DMA_IRQHandler+0xdc>
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	f003 0302 	and.w	r3, r3, #2
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d027      	beq.n	8004c06 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0320 	and.w	r3, r3, #32
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10b      	bne.n	8004bdc <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f022 020a 	bic.w	r2, r2, #10
 8004bd2:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be4:	2102      	movs	r1, #2
 8004be6:	fa01 f202 	lsl.w	r2, r1, r2
 8004bea:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d035      	beq.n	8004c68 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8004c04:	e030      	b.n	8004c68 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0a:	2208      	movs	r2, #8
 8004c0c:	409a      	lsls	r2, r3
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	4013      	ands	r3, r2
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d028      	beq.n	8004c68 <HAL_DMA_IRQHandler+0x13e>
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	f003 0308 	and.w	r3, r3, #8
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d023      	beq.n	8004c68 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f022 020e 	bic.w	r2, r2, #14
 8004c2e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c38:	2101      	movs	r1, #1
 8004c3a:	fa01 f202 	lsl.w	r2, r1, r2
 8004c3e:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d004      	beq.n	8004c68 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	4798      	blx	r3
    }
  }
}  
 8004c66:	e7ff      	b.n	8004c68 <HAL_DMA_IRQHandler+0x13e>
 8004c68:	bf00      	nop
 8004c6a:	3710      	adds	r7, #16
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	4b09      	ldr	r3, [pc, #36]	; (8004ca4 <DMA_CalcBaseAndBitshift+0x34>)
 8004c80:	4413      	add	r3, r2
 8004c82:	4a09      	ldr	r2, [pc, #36]	; (8004ca8 <DMA_CalcBaseAndBitshift+0x38>)
 8004c84:	fba2 2303 	umull	r2, r3, r2, r3
 8004c88:	091b      	lsrs	r3, r3, #4
 8004c8a:	009a      	lsls	r2, r3, #2
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a06      	ldr	r2, [pc, #24]	; (8004cac <DMA_CalcBaseAndBitshift+0x3c>)
 8004c94:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8004c96:	bf00      	nop
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	bffdfff8 	.word	0xbffdfff8
 8004ca8:	cccccccd 	.word	0xcccccccd
 8004cac:	40020000 	.word	0x40020000

08004cb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b087      	sub	sp, #28
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004cbe:	e14e      	b.n	8004f5e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	2101      	movs	r1, #1
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8004ccc:	4013      	ands	r3, r2
 8004cce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	f000 8140 	beq.w	8004f58 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f003 0303 	and.w	r3, r3, #3
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d005      	beq.n	8004cf0 <HAL_GPIO_Init+0x40>
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f003 0303 	and.w	r3, r3, #3
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d130      	bne.n	8004d52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	005b      	lsls	r3, r3, #1
 8004cfa:	2203      	movs	r2, #3
 8004cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004d00:	43db      	mvns	r3, r3
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	4013      	ands	r3, r2
 8004d06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	68da      	ldr	r2, [r3, #12]
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	005b      	lsls	r3, r3, #1
 8004d10:	fa02 f303 	lsl.w	r3, r2, r3
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	693a      	ldr	r2, [r7, #16]
 8004d1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d26:	2201      	movs	r2, #1
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2e:	43db      	mvns	r3, r3
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	4013      	ands	r3, r2
 8004d34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	091b      	lsrs	r3, r3, #4
 8004d3c:	f003 0201 	and.w	r2, r3, #1
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	fa02 f303 	lsl.w	r3, r2, r3
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	693a      	ldr	r2, [r7, #16]
 8004d50:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f003 0303 	and.w	r3, r3, #3
 8004d5a:	2b03      	cmp	r3, #3
 8004d5c:	d017      	beq.n	8004d8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	005b      	lsls	r3, r3, #1
 8004d68:	2203      	movs	r2, #3
 8004d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6e:	43db      	mvns	r3, r3
 8004d70:	693a      	ldr	r2, [r7, #16]
 8004d72:	4013      	ands	r3, r2
 8004d74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	689a      	ldr	r2, [r3, #8]
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	005b      	lsls	r3, r3, #1
 8004d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	693a      	ldr	r2, [r7, #16]
 8004d8c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f003 0303 	and.w	r3, r3, #3
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d123      	bne.n	8004de2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	08da      	lsrs	r2, r3, #3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	3208      	adds	r2, #8
 8004da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004da6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	f003 0307 	and.w	r3, r3, #7
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	220f      	movs	r2, #15
 8004db2:	fa02 f303 	lsl.w	r3, r2, r3
 8004db6:	43db      	mvns	r3, r3
 8004db8:	693a      	ldr	r2, [r7, #16]
 8004dba:	4013      	ands	r3, r2
 8004dbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	691a      	ldr	r2, [r3, #16]
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	f003 0307 	and.w	r3, r3, #7
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	fa02 f303 	lsl.w	r3, r2, r3
 8004dce:	693a      	ldr	r2, [r7, #16]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	08da      	lsrs	r2, r3, #3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	3208      	adds	r2, #8
 8004ddc:	6939      	ldr	r1, [r7, #16]
 8004dde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	005b      	lsls	r3, r3, #1
 8004dec:	2203      	movs	r2, #3
 8004dee:	fa02 f303 	lsl.w	r3, r2, r3
 8004df2:	43db      	mvns	r3, r3
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	4013      	ands	r3, r2
 8004df8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f003 0203 	and.w	r2, r3, #3
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	005b      	lsls	r3, r3, #1
 8004e06:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0a:	693a      	ldr	r2, [r7, #16]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	693a      	ldr	r2, [r7, #16]
 8004e14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	f000 809a 	beq.w	8004f58 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e24:	4b55      	ldr	r3, [pc, #340]	; (8004f7c <HAL_GPIO_Init+0x2cc>)
 8004e26:	699b      	ldr	r3, [r3, #24]
 8004e28:	4a54      	ldr	r2, [pc, #336]	; (8004f7c <HAL_GPIO_Init+0x2cc>)
 8004e2a:	f043 0301 	orr.w	r3, r3, #1
 8004e2e:	6193      	str	r3, [r2, #24]
 8004e30:	4b52      	ldr	r3, [pc, #328]	; (8004f7c <HAL_GPIO_Init+0x2cc>)
 8004e32:	699b      	ldr	r3, [r3, #24]
 8004e34:	f003 0301 	and.w	r3, r3, #1
 8004e38:	60bb      	str	r3, [r7, #8]
 8004e3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004e3c:	4a50      	ldr	r2, [pc, #320]	; (8004f80 <HAL_GPIO_Init+0x2d0>)
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	089b      	lsrs	r3, r3, #2
 8004e42:	3302      	adds	r3, #2
 8004e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	f003 0303 	and.w	r3, r3, #3
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	220f      	movs	r2, #15
 8004e54:	fa02 f303 	lsl.w	r3, r2, r3
 8004e58:	43db      	mvns	r3, r3
 8004e5a:	693a      	ldr	r2, [r7, #16]
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004e66:	d013      	beq.n	8004e90 <HAL_GPIO_Init+0x1e0>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a46      	ldr	r2, [pc, #280]	; (8004f84 <HAL_GPIO_Init+0x2d4>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d00d      	beq.n	8004e8c <HAL_GPIO_Init+0x1dc>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a45      	ldr	r2, [pc, #276]	; (8004f88 <HAL_GPIO_Init+0x2d8>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d007      	beq.n	8004e88 <HAL_GPIO_Init+0x1d8>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a44      	ldr	r2, [pc, #272]	; (8004f8c <HAL_GPIO_Init+0x2dc>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d101      	bne.n	8004e84 <HAL_GPIO_Init+0x1d4>
 8004e80:	2303      	movs	r3, #3
 8004e82:	e006      	b.n	8004e92 <HAL_GPIO_Init+0x1e2>
 8004e84:	2305      	movs	r3, #5
 8004e86:	e004      	b.n	8004e92 <HAL_GPIO_Init+0x1e2>
 8004e88:	2302      	movs	r3, #2
 8004e8a:	e002      	b.n	8004e92 <HAL_GPIO_Init+0x1e2>
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e000      	b.n	8004e92 <HAL_GPIO_Init+0x1e2>
 8004e90:	2300      	movs	r3, #0
 8004e92:	697a      	ldr	r2, [r7, #20]
 8004e94:	f002 0203 	and.w	r2, r2, #3
 8004e98:	0092      	lsls	r2, r2, #2
 8004e9a:	4093      	lsls	r3, r2
 8004e9c:	693a      	ldr	r2, [r7, #16]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004ea2:	4937      	ldr	r1, [pc, #220]	; (8004f80 <HAL_GPIO_Init+0x2d0>)
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	089b      	lsrs	r3, r3, #2
 8004ea8:	3302      	adds	r3, #2
 8004eaa:	693a      	ldr	r2, [r7, #16]
 8004eac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004eb0:	4b37      	ldr	r3, [pc, #220]	; (8004f90 <HAL_GPIO_Init+0x2e0>)
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	43db      	mvns	r3, r3
 8004eba:	693a      	ldr	r2, [r7, #16]
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d003      	beq.n	8004ed4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8004ecc:	693a      	ldr	r2, [r7, #16]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004ed4:	4a2e      	ldr	r2, [pc, #184]	; (8004f90 <HAL_GPIO_Init+0x2e0>)
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004eda:	4b2d      	ldr	r3, [pc, #180]	; (8004f90 <HAL_GPIO_Init+0x2e0>)
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	43db      	mvns	r3, r3
 8004ee4:	693a      	ldr	r2, [r7, #16]
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d003      	beq.n	8004efe <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004efe:	4a24      	ldr	r2, [pc, #144]	; (8004f90 <HAL_GPIO_Init+0x2e0>)
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004f04:	4b22      	ldr	r3, [pc, #136]	; (8004f90 <HAL_GPIO_Init+0x2e0>)
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	43db      	mvns	r3, r3
 8004f0e:	693a      	ldr	r2, [r7, #16]
 8004f10:	4013      	ands	r3, r2
 8004f12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d003      	beq.n	8004f28 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004f28:	4a19      	ldr	r2, [pc, #100]	; (8004f90 <HAL_GPIO_Init+0x2e0>)
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f2e:	4b18      	ldr	r3, [pc, #96]	; (8004f90 <HAL_GPIO_Init+0x2e0>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	43db      	mvns	r3, r3
 8004f38:	693a      	ldr	r2, [r7, #16]
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d003      	beq.n	8004f52 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8004f4a:	693a      	ldr	r2, [r7, #16]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004f52:	4a0f      	ldr	r2, [pc, #60]	; (8004f90 <HAL_GPIO_Init+0x2e0>)
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	fa22 f303 	lsr.w	r3, r2, r3
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f47f aea9 	bne.w	8004cc0 <HAL_GPIO_Init+0x10>
  }
}
 8004f6e:	bf00      	nop
 8004f70:	bf00      	nop
 8004f72:	371c      	adds	r7, #28
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr
 8004f7c:	40021000 	.word	0x40021000
 8004f80:	40010000 	.word	0x40010000
 8004f84:	48000400 	.word	0x48000400
 8004f88:	48000800 	.word	0x48000800
 8004f8c:	48000c00 	.word	0x48000c00
 8004f90:	40010400 	.word	0x40010400

08004f94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	807b      	strh	r3, [r7, #2]
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004fa4:	787b      	ldrb	r3, [r7, #1]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d003      	beq.n	8004fb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004faa:	887a      	ldrh	r2, [r7, #2]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004fb0:	e002      	b.n	8004fb8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004fb2:	887a      	ldrh	r2, [r7, #2]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004fb8:	bf00      	nop
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	4603      	mov	r3, r0
 8004fcc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004fce:	4b08      	ldr	r3, [pc, #32]	; (8004ff0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004fd0:	695a      	ldr	r2, [r3, #20]
 8004fd2:	88fb      	ldrh	r3, [r7, #6]
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d006      	beq.n	8004fe8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004fda:	4a05      	ldr	r2, [pc, #20]	; (8004ff0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004fdc:	88fb      	ldrh	r3, [r7, #6]
 8004fde:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004fe0:	88fb      	ldrh	r3, [r7, #6]
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f000 f806 	bl	8004ff4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004fe8:	bf00      	nop
 8004fea:	3708      	adds	r7, #8
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	40010400 	.word	0x40010400

08004ff4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004ffe:	bf00      	nop
 8005000:	370c      	adds	r7, #12
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
	...

0800500c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8005012:	af00      	add	r7, sp, #0
 8005014:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005018:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800501c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800501e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005022:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d102      	bne.n	8005032 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	f001 b823 	b.w	8006078 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005032:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005036:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0301 	and.w	r3, r3, #1
 8005042:	2b00      	cmp	r3, #0
 8005044:	f000 817d 	beq.w	8005342 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005048:	4bbc      	ldr	r3, [pc, #752]	; (800533c <HAL_RCC_OscConfig+0x330>)
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	f003 030c 	and.w	r3, r3, #12
 8005050:	2b04      	cmp	r3, #4
 8005052:	d00c      	beq.n	800506e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005054:	4bb9      	ldr	r3, [pc, #740]	; (800533c <HAL_RCC_OscConfig+0x330>)
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	f003 030c 	and.w	r3, r3, #12
 800505c:	2b08      	cmp	r3, #8
 800505e:	d15c      	bne.n	800511a <HAL_RCC_OscConfig+0x10e>
 8005060:	4bb6      	ldr	r3, [pc, #728]	; (800533c <HAL_RCC_OscConfig+0x330>)
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800506c:	d155      	bne.n	800511a <HAL_RCC_OscConfig+0x10e>
 800506e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005072:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005076:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800507a:	fa93 f3a3 	rbit	r3, r3
 800507e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005082:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005086:	fab3 f383 	clz	r3, r3
 800508a:	b2db      	uxtb	r3, r3
 800508c:	095b      	lsrs	r3, r3, #5
 800508e:	b2db      	uxtb	r3, r3
 8005090:	f043 0301 	orr.w	r3, r3, #1
 8005094:	b2db      	uxtb	r3, r3
 8005096:	2b01      	cmp	r3, #1
 8005098:	d102      	bne.n	80050a0 <HAL_RCC_OscConfig+0x94>
 800509a:	4ba8      	ldr	r3, [pc, #672]	; (800533c <HAL_RCC_OscConfig+0x330>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	e015      	b.n	80050cc <HAL_RCC_OscConfig+0xc0>
 80050a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80050a4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050a8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80050ac:	fa93 f3a3 	rbit	r3, r3
 80050b0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80050b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80050b8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80050bc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80050c0:	fa93 f3a3 	rbit	r3, r3
 80050c4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80050c8:	4b9c      	ldr	r3, [pc, #624]	; (800533c <HAL_RCC_OscConfig+0x330>)
 80050ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80050d0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80050d4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80050d8:	fa92 f2a2 	rbit	r2, r2
 80050dc:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80050e0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80050e4:	fab2 f282 	clz	r2, r2
 80050e8:	b2d2      	uxtb	r2, r2
 80050ea:	f042 0220 	orr.w	r2, r2, #32
 80050ee:	b2d2      	uxtb	r2, r2
 80050f0:	f002 021f 	and.w	r2, r2, #31
 80050f4:	2101      	movs	r1, #1
 80050f6:	fa01 f202 	lsl.w	r2, r1, r2
 80050fa:	4013      	ands	r3, r2
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f000 811f 	beq.w	8005340 <HAL_RCC_OscConfig+0x334>
 8005102:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005106:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	2b00      	cmp	r3, #0
 8005110:	f040 8116 	bne.w	8005340 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	f000 bfaf 	b.w	8006078 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800511a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800511e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800512a:	d106      	bne.n	800513a <HAL_RCC_OscConfig+0x12e>
 800512c:	4b83      	ldr	r3, [pc, #524]	; (800533c <HAL_RCC_OscConfig+0x330>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a82      	ldr	r2, [pc, #520]	; (800533c <HAL_RCC_OscConfig+0x330>)
 8005132:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005136:	6013      	str	r3, [r2, #0]
 8005138:	e036      	b.n	80051a8 <HAL_RCC_OscConfig+0x19c>
 800513a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800513e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d10c      	bne.n	8005164 <HAL_RCC_OscConfig+0x158>
 800514a:	4b7c      	ldr	r3, [pc, #496]	; (800533c <HAL_RCC_OscConfig+0x330>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a7b      	ldr	r2, [pc, #492]	; (800533c <HAL_RCC_OscConfig+0x330>)
 8005150:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005154:	6013      	str	r3, [r2, #0]
 8005156:	4b79      	ldr	r3, [pc, #484]	; (800533c <HAL_RCC_OscConfig+0x330>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a78      	ldr	r2, [pc, #480]	; (800533c <HAL_RCC_OscConfig+0x330>)
 800515c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005160:	6013      	str	r3, [r2, #0]
 8005162:	e021      	b.n	80051a8 <HAL_RCC_OscConfig+0x19c>
 8005164:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005168:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005174:	d10c      	bne.n	8005190 <HAL_RCC_OscConfig+0x184>
 8005176:	4b71      	ldr	r3, [pc, #452]	; (800533c <HAL_RCC_OscConfig+0x330>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a70      	ldr	r2, [pc, #448]	; (800533c <HAL_RCC_OscConfig+0x330>)
 800517c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005180:	6013      	str	r3, [r2, #0]
 8005182:	4b6e      	ldr	r3, [pc, #440]	; (800533c <HAL_RCC_OscConfig+0x330>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a6d      	ldr	r2, [pc, #436]	; (800533c <HAL_RCC_OscConfig+0x330>)
 8005188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800518c:	6013      	str	r3, [r2, #0]
 800518e:	e00b      	b.n	80051a8 <HAL_RCC_OscConfig+0x19c>
 8005190:	4b6a      	ldr	r3, [pc, #424]	; (800533c <HAL_RCC_OscConfig+0x330>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a69      	ldr	r2, [pc, #420]	; (800533c <HAL_RCC_OscConfig+0x330>)
 8005196:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800519a:	6013      	str	r3, [r2, #0]
 800519c:	4b67      	ldr	r3, [pc, #412]	; (800533c <HAL_RCC_OscConfig+0x330>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a66      	ldr	r2, [pc, #408]	; (800533c <HAL_RCC_OscConfig+0x330>)
 80051a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051a6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80051a8:	4b64      	ldr	r3, [pc, #400]	; (800533c <HAL_RCC_OscConfig+0x330>)
 80051aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ac:	f023 020f 	bic.w	r2, r3, #15
 80051b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	495f      	ldr	r1, [pc, #380]	; (800533c <HAL_RCC_OscConfig+0x330>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d059      	beq.n	8005286 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051d2:	f7fe feb3 	bl	8003f3c <HAL_GetTick>
 80051d6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051da:	e00a      	b.n	80051f2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051dc:	f7fe feae 	bl	8003f3c <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	2b64      	cmp	r3, #100	; 0x64
 80051ea:	d902      	bls.n	80051f2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	f000 bf43 	b.w	8006078 <HAL_RCC_OscConfig+0x106c>
 80051f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80051f6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051fa:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80051fe:	fa93 f3a3 	rbit	r3, r3
 8005202:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8005206:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800520a:	fab3 f383 	clz	r3, r3
 800520e:	b2db      	uxtb	r3, r3
 8005210:	095b      	lsrs	r3, r3, #5
 8005212:	b2db      	uxtb	r3, r3
 8005214:	f043 0301 	orr.w	r3, r3, #1
 8005218:	b2db      	uxtb	r3, r3
 800521a:	2b01      	cmp	r3, #1
 800521c:	d102      	bne.n	8005224 <HAL_RCC_OscConfig+0x218>
 800521e:	4b47      	ldr	r3, [pc, #284]	; (800533c <HAL_RCC_OscConfig+0x330>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	e015      	b.n	8005250 <HAL_RCC_OscConfig+0x244>
 8005224:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005228:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800522c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8005230:	fa93 f3a3 	rbit	r3, r3
 8005234:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8005238:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800523c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8005240:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8005244:	fa93 f3a3 	rbit	r3, r3
 8005248:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800524c:	4b3b      	ldr	r3, [pc, #236]	; (800533c <HAL_RCC_OscConfig+0x330>)
 800524e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005250:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005254:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8005258:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800525c:	fa92 f2a2 	rbit	r2, r2
 8005260:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8005264:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8005268:	fab2 f282 	clz	r2, r2
 800526c:	b2d2      	uxtb	r2, r2
 800526e:	f042 0220 	orr.w	r2, r2, #32
 8005272:	b2d2      	uxtb	r2, r2
 8005274:	f002 021f 	and.w	r2, r2, #31
 8005278:	2101      	movs	r1, #1
 800527a:	fa01 f202 	lsl.w	r2, r1, r2
 800527e:	4013      	ands	r3, r2
 8005280:	2b00      	cmp	r3, #0
 8005282:	d0ab      	beq.n	80051dc <HAL_RCC_OscConfig+0x1d0>
 8005284:	e05d      	b.n	8005342 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005286:	f7fe fe59 	bl	8003f3c <HAL_GetTick>
 800528a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800528e:	e00a      	b.n	80052a6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005290:	f7fe fe54 	bl	8003f3c <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	2b64      	cmp	r3, #100	; 0x64
 800529e:	d902      	bls.n	80052a6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80052a0:	2303      	movs	r3, #3
 80052a2:	f000 bee9 	b.w	8006078 <HAL_RCC_OscConfig+0x106c>
 80052a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80052aa:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ae:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80052b2:	fa93 f3a3 	rbit	r3, r3
 80052b6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80052ba:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052be:	fab3 f383 	clz	r3, r3
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	095b      	lsrs	r3, r3, #5
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	f043 0301 	orr.w	r3, r3, #1
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d102      	bne.n	80052d8 <HAL_RCC_OscConfig+0x2cc>
 80052d2:	4b1a      	ldr	r3, [pc, #104]	; (800533c <HAL_RCC_OscConfig+0x330>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	e015      	b.n	8005304 <HAL_RCC_OscConfig+0x2f8>
 80052d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80052dc:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052e0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80052e4:	fa93 f3a3 	rbit	r3, r3
 80052e8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80052ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80052f0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80052f4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80052f8:	fa93 f3a3 	rbit	r3, r3
 80052fc:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8005300:	4b0e      	ldr	r3, [pc, #56]	; (800533c <HAL_RCC_OscConfig+0x330>)
 8005302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005304:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005308:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800530c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8005310:	fa92 f2a2 	rbit	r2, r2
 8005314:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8005318:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800531c:	fab2 f282 	clz	r2, r2
 8005320:	b2d2      	uxtb	r2, r2
 8005322:	f042 0220 	orr.w	r2, r2, #32
 8005326:	b2d2      	uxtb	r2, r2
 8005328:	f002 021f 	and.w	r2, r2, #31
 800532c:	2101      	movs	r1, #1
 800532e:	fa01 f202 	lsl.w	r2, r1, r2
 8005332:	4013      	ands	r3, r2
 8005334:	2b00      	cmp	r3, #0
 8005336:	d1ab      	bne.n	8005290 <HAL_RCC_OscConfig+0x284>
 8005338:	e003      	b.n	8005342 <HAL_RCC_OscConfig+0x336>
 800533a:	bf00      	nop
 800533c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005340:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005342:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005346:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 0302 	and.w	r3, r3, #2
 8005352:	2b00      	cmp	r3, #0
 8005354:	f000 817d 	beq.w	8005652 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005358:	4ba6      	ldr	r3, [pc, #664]	; (80055f4 <HAL_RCC_OscConfig+0x5e8>)
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	f003 030c 	and.w	r3, r3, #12
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00b      	beq.n	800537c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005364:	4ba3      	ldr	r3, [pc, #652]	; (80055f4 <HAL_RCC_OscConfig+0x5e8>)
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	f003 030c 	and.w	r3, r3, #12
 800536c:	2b08      	cmp	r3, #8
 800536e:	d172      	bne.n	8005456 <HAL_RCC_OscConfig+0x44a>
 8005370:	4ba0      	ldr	r3, [pc, #640]	; (80055f4 <HAL_RCC_OscConfig+0x5e8>)
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005378:	2b00      	cmp	r3, #0
 800537a:	d16c      	bne.n	8005456 <HAL_RCC_OscConfig+0x44a>
 800537c:	2302      	movs	r3, #2
 800537e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005382:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8005386:	fa93 f3a3 	rbit	r3, r3
 800538a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800538e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005392:	fab3 f383 	clz	r3, r3
 8005396:	b2db      	uxtb	r3, r3
 8005398:	095b      	lsrs	r3, r3, #5
 800539a:	b2db      	uxtb	r3, r3
 800539c:	f043 0301 	orr.w	r3, r3, #1
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d102      	bne.n	80053ac <HAL_RCC_OscConfig+0x3a0>
 80053a6:	4b93      	ldr	r3, [pc, #588]	; (80055f4 <HAL_RCC_OscConfig+0x5e8>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	e013      	b.n	80053d4 <HAL_RCC_OscConfig+0x3c8>
 80053ac:	2302      	movs	r3, #2
 80053ae:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053b2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80053b6:	fa93 f3a3 	rbit	r3, r3
 80053ba:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80053be:	2302      	movs	r3, #2
 80053c0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80053c4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80053c8:	fa93 f3a3 	rbit	r3, r3
 80053cc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80053d0:	4b88      	ldr	r3, [pc, #544]	; (80055f4 <HAL_RCC_OscConfig+0x5e8>)
 80053d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d4:	2202      	movs	r2, #2
 80053d6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80053da:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80053de:	fa92 f2a2 	rbit	r2, r2
 80053e2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80053e6:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80053ea:	fab2 f282 	clz	r2, r2
 80053ee:	b2d2      	uxtb	r2, r2
 80053f0:	f042 0220 	orr.w	r2, r2, #32
 80053f4:	b2d2      	uxtb	r2, r2
 80053f6:	f002 021f 	and.w	r2, r2, #31
 80053fa:	2101      	movs	r1, #1
 80053fc:	fa01 f202 	lsl.w	r2, r1, r2
 8005400:	4013      	ands	r3, r2
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00a      	beq.n	800541c <HAL_RCC_OscConfig+0x410>
 8005406:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800540a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	2b01      	cmp	r3, #1
 8005414:	d002      	beq.n	800541c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	f000 be2e 	b.w	8006078 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800541c:	4b75      	ldr	r3, [pc, #468]	; (80055f4 <HAL_RCC_OscConfig+0x5e8>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005424:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005428:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	695b      	ldr	r3, [r3, #20]
 8005430:	21f8      	movs	r1, #248	; 0xf8
 8005432:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005436:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800543a:	fa91 f1a1 	rbit	r1, r1
 800543e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8005442:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8005446:	fab1 f181 	clz	r1, r1
 800544a:	b2c9      	uxtb	r1, r1
 800544c:	408b      	lsls	r3, r1
 800544e:	4969      	ldr	r1, [pc, #420]	; (80055f4 <HAL_RCC_OscConfig+0x5e8>)
 8005450:	4313      	orrs	r3, r2
 8005452:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005454:	e0fd      	b.n	8005652 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005456:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800545a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	2b00      	cmp	r3, #0
 8005464:	f000 8088 	beq.w	8005578 <HAL_RCC_OscConfig+0x56c>
 8005468:	2301      	movs	r3, #1
 800546a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800546e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005472:	fa93 f3a3 	rbit	r3, r3
 8005476:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800547a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800547e:	fab3 f383 	clz	r3, r3
 8005482:	b2db      	uxtb	r3, r3
 8005484:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005488:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	461a      	mov	r2, r3
 8005490:	2301      	movs	r3, #1
 8005492:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005494:	f7fe fd52 	bl	8003f3c <HAL_GetTick>
 8005498:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800549c:	e00a      	b.n	80054b4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800549e:	f7fe fd4d 	bl	8003f3c <HAL_GetTick>
 80054a2:	4602      	mov	r2, r0
 80054a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d902      	bls.n	80054b4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	f000 bde2 	b.w	8006078 <HAL_RCC_OscConfig+0x106c>
 80054b4:	2302      	movs	r3, #2
 80054b6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054ba:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80054be:	fa93 f3a3 	rbit	r3, r3
 80054c2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80054c6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054ca:	fab3 f383 	clz	r3, r3
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	095b      	lsrs	r3, r3, #5
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	f043 0301 	orr.w	r3, r3, #1
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d102      	bne.n	80054e4 <HAL_RCC_OscConfig+0x4d8>
 80054de:	4b45      	ldr	r3, [pc, #276]	; (80055f4 <HAL_RCC_OscConfig+0x5e8>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	e013      	b.n	800550c <HAL_RCC_OscConfig+0x500>
 80054e4:	2302      	movs	r3, #2
 80054e6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054ea:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80054ee:	fa93 f3a3 	rbit	r3, r3
 80054f2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80054f6:	2302      	movs	r3, #2
 80054f8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80054fc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8005500:	fa93 f3a3 	rbit	r3, r3
 8005504:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8005508:	4b3a      	ldr	r3, [pc, #232]	; (80055f4 <HAL_RCC_OscConfig+0x5e8>)
 800550a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550c:	2202      	movs	r2, #2
 800550e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8005512:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8005516:	fa92 f2a2 	rbit	r2, r2
 800551a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800551e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8005522:	fab2 f282 	clz	r2, r2
 8005526:	b2d2      	uxtb	r2, r2
 8005528:	f042 0220 	orr.w	r2, r2, #32
 800552c:	b2d2      	uxtb	r2, r2
 800552e:	f002 021f 	and.w	r2, r2, #31
 8005532:	2101      	movs	r1, #1
 8005534:	fa01 f202 	lsl.w	r2, r1, r2
 8005538:	4013      	ands	r3, r2
 800553a:	2b00      	cmp	r3, #0
 800553c:	d0af      	beq.n	800549e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800553e:	4b2d      	ldr	r3, [pc, #180]	; (80055f4 <HAL_RCC_OscConfig+0x5e8>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005546:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800554a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	21f8      	movs	r1, #248	; 0xf8
 8005554:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005558:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800555c:	fa91 f1a1 	rbit	r1, r1
 8005560:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8005564:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8005568:	fab1 f181 	clz	r1, r1
 800556c:	b2c9      	uxtb	r1, r1
 800556e:	408b      	lsls	r3, r1
 8005570:	4920      	ldr	r1, [pc, #128]	; (80055f4 <HAL_RCC_OscConfig+0x5e8>)
 8005572:	4313      	orrs	r3, r2
 8005574:	600b      	str	r3, [r1, #0]
 8005576:	e06c      	b.n	8005652 <HAL_RCC_OscConfig+0x646>
 8005578:	2301      	movs	r3, #1
 800557a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800557e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005582:	fa93 f3a3 	rbit	r3, r3
 8005586:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800558a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800558e:	fab3 f383 	clz	r3, r3
 8005592:	b2db      	uxtb	r3, r3
 8005594:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005598:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	461a      	mov	r2, r3
 80055a0:	2300      	movs	r3, #0
 80055a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055a4:	f7fe fcca 	bl	8003f3c <HAL_GetTick>
 80055a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055ac:	e00a      	b.n	80055c4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055ae:	f7fe fcc5 	bl	8003f3c <HAL_GetTick>
 80055b2:	4602      	mov	r2, r0
 80055b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d902      	bls.n	80055c4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	f000 bd5a 	b.w	8006078 <HAL_RCC_OscConfig+0x106c>
 80055c4:	2302      	movs	r3, #2
 80055c6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ca:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80055ce:	fa93 f3a3 	rbit	r3, r3
 80055d2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80055d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055da:	fab3 f383 	clz	r3, r3
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	095b      	lsrs	r3, r3, #5
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	f043 0301 	orr.w	r3, r3, #1
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d104      	bne.n	80055f8 <HAL_RCC_OscConfig+0x5ec>
 80055ee:	4b01      	ldr	r3, [pc, #4]	; (80055f4 <HAL_RCC_OscConfig+0x5e8>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	e015      	b.n	8005620 <HAL_RCC_OscConfig+0x614>
 80055f4:	40021000 	.word	0x40021000
 80055f8:	2302      	movs	r3, #2
 80055fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005602:	fa93 f3a3 	rbit	r3, r3
 8005606:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800560a:	2302      	movs	r3, #2
 800560c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005610:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005614:	fa93 f3a3 	rbit	r3, r3
 8005618:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800561c:	4bc8      	ldr	r3, [pc, #800]	; (8005940 <HAL_RCC_OscConfig+0x934>)
 800561e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005620:	2202      	movs	r2, #2
 8005622:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8005626:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800562a:	fa92 f2a2 	rbit	r2, r2
 800562e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8005632:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005636:	fab2 f282 	clz	r2, r2
 800563a:	b2d2      	uxtb	r2, r2
 800563c:	f042 0220 	orr.w	r2, r2, #32
 8005640:	b2d2      	uxtb	r2, r2
 8005642:	f002 021f 	and.w	r2, r2, #31
 8005646:	2101      	movs	r1, #1
 8005648:	fa01 f202 	lsl.w	r2, r1, r2
 800564c:	4013      	ands	r3, r2
 800564e:	2b00      	cmp	r3, #0
 8005650:	d1ad      	bne.n	80055ae <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005652:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005656:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0308 	and.w	r3, r3, #8
 8005662:	2b00      	cmp	r3, #0
 8005664:	f000 8110 	beq.w	8005888 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005668:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800566c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	699b      	ldr	r3, [r3, #24]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d079      	beq.n	800576c <HAL_RCC_OscConfig+0x760>
 8005678:	2301      	movs	r3, #1
 800567a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800567e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005682:	fa93 f3a3 	rbit	r3, r3
 8005686:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800568a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800568e:	fab3 f383 	clz	r3, r3
 8005692:	b2db      	uxtb	r3, r3
 8005694:	461a      	mov	r2, r3
 8005696:	4bab      	ldr	r3, [pc, #684]	; (8005944 <HAL_RCC_OscConfig+0x938>)
 8005698:	4413      	add	r3, r2
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	461a      	mov	r2, r3
 800569e:	2301      	movs	r3, #1
 80056a0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056a2:	f7fe fc4b 	bl	8003f3c <HAL_GetTick>
 80056a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056aa:	e00a      	b.n	80056c2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056ac:	f7fe fc46 	bl	8003f3c <HAL_GetTick>
 80056b0:	4602      	mov	r2, r0
 80056b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d902      	bls.n	80056c2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	f000 bcdb 	b.w	8006078 <HAL_RCC_OscConfig+0x106c>
 80056c2:	2302      	movs	r3, #2
 80056c4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80056cc:	fa93 f3a3 	rbit	r3, r3
 80056d0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80056d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056d8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80056dc:	2202      	movs	r2, #2
 80056de:	601a      	str	r2, [r3, #0]
 80056e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056e4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	fa93 f2a3 	rbit	r2, r3
 80056ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056f6:	601a      	str	r2, [r3, #0]
 80056f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005700:	2202      	movs	r2, #2
 8005702:	601a      	str	r2, [r3, #0]
 8005704:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005708:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	fa93 f2a3 	rbit	r2, r3
 8005712:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005716:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800571a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800571c:	4b88      	ldr	r3, [pc, #544]	; (8005940 <HAL_RCC_OscConfig+0x934>)
 800571e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005720:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005724:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005728:	2102      	movs	r1, #2
 800572a:	6019      	str	r1, [r3, #0]
 800572c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005730:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	fa93 f1a3 	rbit	r1, r3
 800573a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800573e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005742:	6019      	str	r1, [r3, #0]
  return result;
 8005744:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005748:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	fab3 f383 	clz	r3, r3
 8005752:	b2db      	uxtb	r3, r3
 8005754:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005758:	b2db      	uxtb	r3, r3
 800575a:	f003 031f 	and.w	r3, r3, #31
 800575e:	2101      	movs	r1, #1
 8005760:	fa01 f303 	lsl.w	r3, r1, r3
 8005764:	4013      	ands	r3, r2
 8005766:	2b00      	cmp	r3, #0
 8005768:	d0a0      	beq.n	80056ac <HAL_RCC_OscConfig+0x6a0>
 800576a:	e08d      	b.n	8005888 <HAL_RCC_OscConfig+0x87c>
 800576c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005770:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005774:	2201      	movs	r2, #1
 8005776:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005778:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800577c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	fa93 f2a3 	rbit	r2, r3
 8005786:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800578a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800578e:	601a      	str	r2, [r3, #0]
  return result;
 8005790:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005794:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005798:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800579a:	fab3 f383 	clz	r3, r3
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	461a      	mov	r2, r3
 80057a2:	4b68      	ldr	r3, [pc, #416]	; (8005944 <HAL_RCC_OscConfig+0x938>)
 80057a4:	4413      	add	r3, r2
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	461a      	mov	r2, r3
 80057aa:	2300      	movs	r3, #0
 80057ac:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057ae:	f7fe fbc5 	bl	8003f3c <HAL_GetTick>
 80057b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057b6:	e00a      	b.n	80057ce <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057b8:	f7fe fbc0 	bl	8003f3c <HAL_GetTick>
 80057bc:	4602      	mov	r2, r0
 80057be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	d902      	bls.n	80057ce <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	f000 bc55 	b.w	8006078 <HAL_RCC_OscConfig+0x106c>
 80057ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057d2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80057d6:	2202      	movs	r2, #2
 80057d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057de:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	fa93 f2a3 	rbit	r2, r3
 80057e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057ec:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80057f0:	601a      	str	r2, [r3, #0]
 80057f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057f6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80057fa:	2202      	movs	r2, #2
 80057fc:	601a      	str	r2, [r3, #0]
 80057fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005802:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	fa93 f2a3 	rbit	r2, r3
 800580c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005810:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005814:	601a      	str	r2, [r3, #0]
 8005816:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800581a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800581e:	2202      	movs	r2, #2
 8005820:	601a      	str	r2, [r3, #0]
 8005822:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005826:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	fa93 f2a3 	rbit	r2, r3
 8005830:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005834:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005838:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800583a:	4b41      	ldr	r3, [pc, #260]	; (8005940 <HAL_RCC_OscConfig+0x934>)
 800583c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800583e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005842:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005846:	2102      	movs	r1, #2
 8005848:	6019      	str	r1, [r3, #0]
 800584a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800584e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	fa93 f1a3 	rbit	r1, r3
 8005858:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800585c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005860:	6019      	str	r1, [r3, #0]
  return result;
 8005862:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005866:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	fab3 f383 	clz	r3, r3
 8005870:	b2db      	uxtb	r3, r3
 8005872:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005876:	b2db      	uxtb	r3, r3
 8005878:	f003 031f 	and.w	r3, r3, #31
 800587c:	2101      	movs	r1, #1
 800587e:	fa01 f303 	lsl.w	r3, r1, r3
 8005882:	4013      	ands	r3, r2
 8005884:	2b00      	cmp	r3, #0
 8005886:	d197      	bne.n	80057b8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005888:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800588c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 0304 	and.w	r3, r3, #4
 8005898:	2b00      	cmp	r3, #0
 800589a:	f000 81a1 	beq.w	8005be0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800589e:	2300      	movs	r3, #0
 80058a0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058a4:	4b26      	ldr	r3, [pc, #152]	; (8005940 <HAL_RCC_OscConfig+0x934>)
 80058a6:	69db      	ldr	r3, [r3, #28]
 80058a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d116      	bne.n	80058de <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058b0:	4b23      	ldr	r3, [pc, #140]	; (8005940 <HAL_RCC_OscConfig+0x934>)
 80058b2:	69db      	ldr	r3, [r3, #28]
 80058b4:	4a22      	ldr	r2, [pc, #136]	; (8005940 <HAL_RCC_OscConfig+0x934>)
 80058b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058ba:	61d3      	str	r3, [r2, #28]
 80058bc:	4b20      	ldr	r3, [pc, #128]	; (8005940 <HAL_RCC_OscConfig+0x934>)
 80058be:	69db      	ldr	r3, [r3, #28]
 80058c0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80058c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058c8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80058cc:	601a      	str	r2, [r3, #0]
 80058ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058d2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80058d6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80058d8:	2301      	movs	r3, #1
 80058da:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058de:	4b1a      	ldr	r3, [pc, #104]	; (8005948 <HAL_RCC_OscConfig+0x93c>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d11a      	bne.n	8005920 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058ea:	4b17      	ldr	r3, [pc, #92]	; (8005948 <HAL_RCC_OscConfig+0x93c>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a16      	ldr	r2, [pc, #88]	; (8005948 <HAL_RCC_OscConfig+0x93c>)
 80058f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058f4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058f6:	f7fe fb21 	bl	8003f3c <HAL_GetTick>
 80058fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058fe:	e009      	b.n	8005914 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005900:	f7fe fb1c 	bl	8003f3c <HAL_GetTick>
 8005904:	4602      	mov	r2, r0
 8005906:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800590a:	1ad3      	subs	r3, r2, r3
 800590c:	2b64      	cmp	r3, #100	; 0x64
 800590e:	d901      	bls.n	8005914 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8005910:	2303      	movs	r3, #3
 8005912:	e3b1      	b.n	8006078 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005914:	4b0c      	ldr	r3, [pc, #48]	; (8005948 <HAL_RCC_OscConfig+0x93c>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800591c:	2b00      	cmp	r3, #0
 800591e:	d0ef      	beq.n	8005900 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005920:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005924:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	2b01      	cmp	r3, #1
 800592e:	d10d      	bne.n	800594c <HAL_RCC_OscConfig+0x940>
 8005930:	4b03      	ldr	r3, [pc, #12]	; (8005940 <HAL_RCC_OscConfig+0x934>)
 8005932:	6a1b      	ldr	r3, [r3, #32]
 8005934:	4a02      	ldr	r2, [pc, #8]	; (8005940 <HAL_RCC_OscConfig+0x934>)
 8005936:	f043 0301 	orr.w	r3, r3, #1
 800593a:	6213      	str	r3, [r2, #32]
 800593c:	e03c      	b.n	80059b8 <HAL_RCC_OscConfig+0x9ac>
 800593e:	bf00      	nop
 8005940:	40021000 	.word	0x40021000
 8005944:	10908120 	.word	0x10908120
 8005948:	40007000 	.word	0x40007000
 800594c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005950:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d10c      	bne.n	8005976 <HAL_RCC_OscConfig+0x96a>
 800595c:	4bc1      	ldr	r3, [pc, #772]	; (8005c64 <HAL_RCC_OscConfig+0xc58>)
 800595e:	6a1b      	ldr	r3, [r3, #32]
 8005960:	4ac0      	ldr	r2, [pc, #768]	; (8005c64 <HAL_RCC_OscConfig+0xc58>)
 8005962:	f023 0301 	bic.w	r3, r3, #1
 8005966:	6213      	str	r3, [r2, #32]
 8005968:	4bbe      	ldr	r3, [pc, #760]	; (8005c64 <HAL_RCC_OscConfig+0xc58>)
 800596a:	6a1b      	ldr	r3, [r3, #32]
 800596c:	4abd      	ldr	r2, [pc, #756]	; (8005c64 <HAL_RCC_OscConfig+0xc58>)
 800596e:	f023 0304 	bic.w	r3, r3, #4
 8005972:	6213      	str	r3, [r2, #32]
 8005974:	e020      	b.n	80059b8 <HAL_RCC_OscConfig+0x9ac>
 8005976:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800597a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	2b05      	cmp	r3, #5
 8005984:	d10c      	bne.n	80059a0 <HAL_RCC_OscConfig+0x994>
 8005986:	4bb7      	ldr	r3, [pc, #732]	; (8005c64 <HAL_RCC_OscConfig+0xc58>)
 8005988:	6a1b      	ldr	r3, [r3, #32]
 800598a:	4ab6      	ldr	r2, [pc, #728]	; (8005c64 <HAL_RCC_OscConfig+0xc58>)
 800598c:	f043 0304 	orr.w	r3, r3, #4
 8005990:	6213      	str	r3, [r2, #32]
 8005992:	4bb4      	ldr	r3, [pc, #720]	; (8005c64 <HAL_RCC_OscConfig+0xc58>)
 8005994:	6a1b      	ldr	r3, [r3, #32]
 8005996:	4ab3      	ldr	r2, [pc, #716]	; (8005c64 <HAL_RCC_OscConfig+0xc58>)
 8005998:	f043 0301 	orr.w	r3, r3, #1
 800599c:	6213      	str	r3, [r2, #32]
 800599e:	e00b      	b.n	80059b8 <HAL_RCC_OscConfig+0x9ac>
 80059a0:	4bb0      	ldr	r3, [pc, #704]	; (8005c64 <HAL_RCC_OscConfig+0xc58>)
 80059a2:	6a1b      	ldr	r3, [r3, #32]
 80059a4:	4aaf      	ldr	r2, [pc, #700]	; (8005c64 <HAL_RCC_OscConfig+0xc58>)
 80059a6:	f023 0301 	bic.w	r3, r3, #1
 80059aa:	6213      	str	r3, [r2, #32]
 80059ac:	4bad      	ldr	r3, [pc, #692]	; (8005c64 <HAL_RCC_OscConfig+0xc58>)
 80059ae:	6a1b      	ldr	r3, [r3, #32]
 80059b0:	4aac      	ldr	r2, [pc, #688]	; (8005c64 <HAL_RCC_OscConfig+0xc58>)
 80059b2:	f023 0304 	bic.w	r3, r3, #4
 80059b6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80059b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f000 8081 	beq.w	8005acc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059ca:	f7fe fab7 	bl	8003f3c <HAL_GetTick>
 80059ce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059d2:	e00b      	b.n	80059ec <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059d4:	f7fe fab2 	bl	8003f3c <HAL_GetTick>
 80059d8:	4602      	mov	r2, r0
 80059da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d901      	bls.n	80059ec <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80059e8:	2303      	movs	r3, #3
 80059ea:	e345      	b.n	8006078 <HAL_RCC_OscConfig+0x106c>
 80059ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059f0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80059f4:	2202      	movs	r2, #2
 80059f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059fc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	fa93 f2a3 	rbit	r2, r3
 8005a06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a0a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005a0e:	601a      	str	r2, [r3, #0]
 8005a10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a14:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005a18:	2202      	movs	r2, #2
 8005a1a:	601a      	str	r2, [r3, #0]
 8005a1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a20:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	fa93 f2a3 	rbit	r2, r3
 8005a2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a2e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005a32:	601a      	str	r2, [r3, #0]
  return result;
 8005a34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a38:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005a3c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a3e:	fab3 f383 	clz	r3, r3
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	095b      	lsrs	r3, r3, #5
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	f043 0302 	orr.w	r3, r3, #2
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d102      	bne.n	8005a58 <HAL_RCC_OscConfig+0xa4c>
 8005a52:	4b84      	ldr	r3, [pc, #528]	; (8005c64 <HAL_RCC_OscConfig+0xc58>)
 8005a54:	6a1b      	ldr	r3, [r3, #32]
 8005a56:	e013      	b.n	8005a80 <HAL_RCC_OscConfig+0xa74>
 8005a58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a5c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005a60:	2202      	movs	r2, #2
 8005a62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a68:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	fa93 f2a3 	rbit	r2, r3
 8005a72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a76:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8005a7a:	601a      	str	r2, [r3, #0]
 8005a7c:	4b79      	ldr	r3, [pc, #484]	; (8005c64 <HAL_RCC_OscConfig+0xc58>)
 8005a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a80:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005a84:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005a88:	2102      	movs	r1, #2
 8005a8a:	6011      	str	r1, [r2, #0]
 8005a8c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005a90:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005a94:	6812      	ldr	r2, [r2, #0]
 8005a96:	fa92 f1a2 	rbit	r1, r2
 8005a9a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005a9e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005aa2:	6011      	str	r1, [r2, #0]
  return result;
 8005aa4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005aa8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005aac:	6812      	ldr	r2, [r2, #0]
 8005aae:	fab2 f282 	clz	r2, r2
 8005ab2:	b2d2      	uxtb	r2, r2
 8005ab4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ab8:	b2d2      	uxtb	r2, r2
 8005aba:	f002 021f 	and.w	r2, r2, #31
 8005abe:	2101      	movs	r1, #1
 8005ac0:	fa01 f202 	lsl.w	r2, r1, r2
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d084      	beq.n	80059d4 <HAL_RCC_OscConfig+0x9c8>
 8005aca:	e07f      	b.n	8005bcc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005acc:	f7fe fa36 	bl	8003f3c <HAL_GetTick>
 8005ad0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ad4:	e00b      	b.n	8005aee <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ad6:	f7fe fa31 	bl	8003f3c <HAL_GetTick>
 8005ada:	4602      	mov	r2, r0
 8005adc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d901      	bls.n	8005aee <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8005aea:	2303      	movs	r3, #3
 8005aec:	e2c4      	b.n	8006078 <HAL_RCC_OscConfig+0x106c>
 8005aee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005af2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8005af6:	2202      	movs	r2, #2
 8005af8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005afa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005afe:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	fa93 f2a3 	rbit	r2, r3
 8005b08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b0c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8005b10:	601a      	str	r2, [r3, #0]
 8005b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b16:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005b1a:	2202      	movs	r2, #2
 8005b1c:	601a      	str	r2, [r3, #0]
 8005b1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b22:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	fa93 f2a3 	rbit	r2, r3
 8005b2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b30:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005b34:	601a      	str	r2, [r3, #0]
  return result;
 8005b36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b3a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005b3e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b40:	fab3 f383 	clz	r3, r3
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	095b      	lsrs	r3, r3, #5
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	f043 0302 	orr.w	r3, r3, #2
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	2b02      	cmp	r3, #2
 8005b52:	d102      	bne.n	8005b5a <HAL_RCC_OscConfig+0xb4e>
 8005b54:	4b43      	ldr	r3, [pc, #268]	; (8005c64 <HAL_RCC_OscConfig+0xc58>)
 8005b56:	6a1b      	ldr	r3, [r3, #32]
 8005b58:	e013      	b.n	8005b82 <HAL_RCC_OscConfig+0xb76>
 8005b5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b5e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005b62:	2202      	movs	r2, #2
 8005b64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b6a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	fa93 f2a3 	rbit	r2, r3
 8005b74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b78:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005b7c:	601a      	str	r2, [r3, #0]
 8005b7e:	4b39      	ldr	r3, [pc, #228]	; (8005c64 <HAL_RCC_OscConfig+0xc58>)
 8005b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b82:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005b86:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8005b8a:	2102      	movs	r1, #2
 8005b8c:	6011      	str	r1, [r2, #0]
 8005b8e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005b92:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8005b96:	6812      	ldr	r2, [r2, #0]
 8005b98:	fa92 f1a2 	rbit	r1, r2
 8005b9c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005ba0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005ba4:	6011      	str	r1, [r2, #0]
  return result;
 8005ba6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005baa:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005bae:	6812      	ldr	r2, [r2, #0]
 8005bb0:	fab2 f282 	clz	r2, r2
 8005bb4:	b2d2      	uxtb	r2, r2
 8005bb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bba:	b2d2      	uxtb	r2, r2
 8005bbc:	f002 021f 	and.w	r2, r2, #31
 8005bc0:	2101      	movs	r1, #1
 8005bc2:	fa01 f202 	lsl.w	r2, r1, r2
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d184      	bne.n	8005ad6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005bcc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d105      	bne.n	8005be0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bd4:	4b23      	ldr	r3, [pc, #140]	; (8005c64 <HAL_RCC_OscConfig+0xc58>)
 8005bd6:	69db      	ldr	r3, [r3, #28]
 8005bd8:	4a22      	ldr	r2, [pc, #136]	; (8005c64 <HAL_RCC_OscConfig+0xc58>)
 8005bda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bde:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005be0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005be4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	69db      	ldr	r3, [r3, #28]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	f000 8242 	beq.w	8006076 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005bf2:	4b1c      	ldr	r3, [pc, #112]	; (8005c64 <HAL_RCC_OscConfig+0xc58>)
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	f003 030c 	and.w	r3, r3, #12
 8005bfa:	2b08      	cmp	r3, #8
 8005bfc:	f000 8213 	beq.w	8006026 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c04:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	69db      	ldr	r3, [r3, #28]
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	f040 8162 	bne.w	8005ed6 <HAL_RCC_OscConfig+0xeca>
 8005c12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c16:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005c1a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005c1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c24:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	fa93 f2a3 	rbit	r2, r3
 8005c2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c32:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005c36:	601a      	str	r2, [r3, #0]
  return result;
 8005c38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c3c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005c40:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c42:	fab3 f383 	clz	r3, r3
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005c4c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	461a      	mov	r2, r3
 8005c54:	2300      	movs	r3, #0
 8005c56:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c58:	f7fe f970 	bl	8003f3c <HAL_GetTick>
 8005c5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c60:	e00c      	b.n	8005c7c <HAL_RCC_OscConfig+0xc70>
 8005c62:	bf00      	nop
 8005c64:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c68:	f7fe f968 	bl	8003f3c <HAL_GetTick>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	d901      	bls.n	8005c7c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8005c78:	2303      	movs	r3, #3
 8005c7a:	e1fd      	b.n	8006078 <HAL_RCC_OscConfig+0x106c>
 8005c7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c80:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005c84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005c88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c8e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	fa93 f2a3 	rbit	r2, r3
 8005c98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c9c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005ca0:	601a      	str	r2, [r3, #0]
  return result;
 8005ca2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ca6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005caa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005cac:	fab3 f383 	clz	r3, r3
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	095b      	lsrs	r3, r3, #5
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	f043 0301 	orr.w	r3, r3, #1
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d102      	bne.n	8005cc6 <HAL_RCC_OscConfig+0xcba>
 8005cc0:	4bb0      	ldr	r3, [pc, #704]	; (8005f84 <HAL_RCC_OscConfig+0xf78>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	e027      	b.n	8005d16 <HAL_RCC_OscConfig+0xd0a>
 8005cc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cca:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005cce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005cd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cd8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	fa93 f2a3 	rbit	r2, r3
 8005ce2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ce6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005cea:	601a      	str	r2, [r3, #0]
 8005cec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cf0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005cf4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005cf8:	601a      	str	r2, [r3, #0]
 8005cfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cfe:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	fa93 f2a3 	rbit	r2, r3
 8005d08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d0c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005d10:	601a      	str	r2, [r3, #0]
 8005d12:	4b9c      	ldr	r3, [pc, #624]	; (8005f84 <HAL_RCC_OscConfig+0xf78>)
 8005d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d16:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005d1a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005d1e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005d22:	6011      	str	r1, [r2, #0]
 8005d24:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005d28:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005d2c:	6812      	ldr	r2, [r2, #0]
 8005d2e:	fa92 f1a2 	rbit	r1, r2
 8005d32:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005d36:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005d3a:	6011      	str	r1, [r2, #0]
  return result;
 8005d3c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005d40:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005d44:	6812      	ldr	r2, [r2, #0]
 8005d46:	fab2 f282 	clz	r2, r2
 8005d4a:	b2d2      	uxtb	r2, r2
 8005d4c:	f042 0220 	orr.w	r2, r2, #32
 8005d50:	b2d2      	uxtb	r2, r2
 8005d52:	f002 021f 	and.w	r2, r2, #31
 8005d56:	2101      	movs	r1, #1
 8005d58:	fa01 f202 	lsl.w	r2, r1, r2
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d182      	bne.n	8005c68 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d62:	4b88      	ldr	r3, [pc, #544]	; (8005f84 <HAL_RCC_OscConfig+0xf78>)
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005d6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005d76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	6a1b      	ldr	r3, [r3, #32]
 8005d82:	430b      	orrs	r3, r1
 8005d84:	497f      	ldr	r1, [pc, #508]	; (8005f84 <HAL_RCC_OscConfig+0xf78>)
 8005d86:	4313      	orrs	r3, r2
 8005d88:	604b      	str	r3, [r1, #4]
 8005d8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d8e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005d92:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005d96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d9c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	fa93 f2a3 	rbit	r2, r3
 8005da6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005daa:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005dae:	601a      	str	r2, [r3, #0]
  return result;
 8005db0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005db4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005db8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005dba:	fab3 f383 	clz	r3, r3
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005dc4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	461a      	mov	r2, r3
 8005dcc:	2301      	movs	r3, #1
 8005dce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dd0:	f7fe f8b4 	bl	8003f3c <HAL_GetTick>
 8005dd4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005dd8:	e009      	b.n	8005dee <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dda:	f7fe f8af 	bl	8003f3c <HAL_GetTick>
 8005dde:	4602      	mov	r2, r0
 8005de0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	2b02      	cmp	r3, #2
 8005de8:	d901      	bls.n	8005dee <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8005dea:	2303      	movs	r3, #3
 8005dec:	e144      	b.n	8006078 <HAL_RCC_OscConfig+0x106c>
 8005dee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005df2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005df6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005dfa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e00:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	fa93 f2a3 	rbit	r2, r3
 8005e0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e0e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005e12:	601a      	str	r2, [r3, #0]
  return result;
 8005e14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e18:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005e1c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005e1e:	fab3 f383 	clz	r3, r3
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	095b      	lsrs	r3, r3, #5
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	f043 0301 	orr.w	r3, r3, #1
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d102      	bne.n	8005e38 <HAL_RCC_OscConfig+0xe2c>
 8005e32:	4b54      	ldr	r3, [pc, #336]	; (8005f84 <HAL_RCC_OscConfig+0xf78>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	e027      	b.n	8005e88 <HAL_RCC_OscConfig+0xe7c>
 8005e38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e3c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005e40:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005e44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e4a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	fa93 f2a3 	rbit	r2, r3
 8005e54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e58:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005e5c:	601a      	str	r2, [r3, #0]
 8005e5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e62:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005e66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005e6a:	601a      	str	r2, [r3, #0]
 8005e6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e70:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	fa93 f2a3 	rbit	r2, r3
 8005e7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e7e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8005e82:	601a      	str	r2, [r3, #0]
 8005e84:	4b3f      	ldr	r3, [pc, #252]	; (8005f84 <HAL_RCC_OscConfig+0xf78>)
 8005e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e88:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005e8c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005e90:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005e94:	6011      	str	r1, [r2, #0]
 8005e96:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005e9a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005e9e:	6812      	ldr	r2, [r2, #0]
 8005ea0:	fa92 f1a2 	rbit	r1, r2
 8005ea4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005ea8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005eac:	6011      	str	r1, [r2, #0]
  return result;
 8005eae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005eb2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005eb6:	6812      	ldr	r2, [r2, #0]
 8005eb8:	fab2 f282 	clz	r2, r2
 8005ebc:	b2d2      	uxtb	r2, r2
 8005ebe:	f042 0220 	orr.w	r2, r2, #32
 8005ec2:	b2d2      	uxtb	r2, r2
 8005ec4:	f002 021f 	and.w	r2, r2, #31
 8005ec8:	2101      	movs	r1, #1
 8005eca:	fa01 f202 	lsl.w	r2, r1, r2
 8005ece:	4013      	ands	r3, r2
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d082      	beq.n	8005dda <HAL_RCC_OscConfig+0xdce>
 8005ed4:	e0cf      	b.n	8006076 <HAL_RCC_OscConfig+0x106a>
 8005ed6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005eda:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005ede:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005ee2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ee4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ee8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	fa93 f2a3 	rbit	r2, r3
 8005ef2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ef6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005efa:	601a      	str	r2, [r3, #0]
  return result;
 8005efc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f00:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005f04:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f06:	fab3 f383 	clz	r3, r3
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005f10:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	461a      	mov	r2, r3
 8005f18:	2300      	movs	r3, #0
 8005f1a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f1c:	f7fe f80e 	bl	8003f3c <HAL_GetTick>
 8005f20:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f24:	e009      	b.n	8005f3a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f26:	f7fe f809 	bl	8003f3c <HAL_GetTick>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005f30:	1ad3      	subs	r3, r2, r3
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	d901      	bls.n	8005f3a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8005f36:	2303      	movs	r3, #3
 8005f38:	e09e      	b.n	8006078 <HAL_RCC_OscConfig+0x106c>
 8005f3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f3e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005f42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005f46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f4c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	fa93 f2a3 	rbit	r2, r3
 8005f56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f5a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005f5e:	601a      	str	r2, [r3, #0]
  return result;
 8005f60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f64:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005f68:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f6a:	fab3 f383 	clz	r3, r3
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	095b      	lsrs	r3, r3, #5
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	f043 0301 	orr.w	r3, r3, #1
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d104      	bne.n	8005f88 <HAL_RCC_OscConfig+0xf7c>
 8005f7e:	4b01      	ldr	r3, [pc, #4]	; (8005f84 <HAL_RCC_OscConfig+0xf78>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	e029      	b.n	8005fd8 <HAL_RCC_OscConfig+0xfcc>
 8005f84:	40021000 	.word	0x40021000
 8005f88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f8c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005f90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005f94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f9a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	fa93 f2a3 	rbit	r2, r3
 8005fa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005fa8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005fac:	601a      	str	r2, [r3, #0]
 8005fae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005fb2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005fb6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005fba:	601a      	str	r2, [r3, #0]
 8005fbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005fc0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	fa93 f2a3 	rbit	r2, r3
 8005fca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005fce:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8005fd2:	601a      	str	r2, [r3, #0]
 8005fd4:	4b2b      	ldr	r3, [pc, #172]	; (8006084 <HAL_RCC_OscConfig+0x1078>)
 8005fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005fdc:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005fe0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005fe4:	6011      	str	r1, [r2, #0]
 8005fe6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005fea:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005fee:	6812      	ldr	r2, [r2, #0]
 8005ff0:	fa92 f1a2 	rbit	r1, r2
 8005ff4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005ff8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005ffc:	6011      	str	r1, [r2, #0]
  return result;
 8005ffe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006002:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8006006:	6812      	ldr	r2, [r2, #0]
 8006008:	fab2 f282 	clz	r2, r2
 800600c:	b2d2      	uxtb	r2, r2
 800600e:	f042 0220 	orr.w	r2, r2, #32
 8006012:	b2d2      	uxtb	r2, r2
 8006014:	f002 021f 	and.w	r2, r2, #31
 8006018:	2101      	movs	r1, #1
 800601a:	fa01 f202 	lsl.w	r2, r1, r2
 800601e:	4013      	ands	r3, r2
 8006020:	2b00      	cmp	r3, #0
 8006022:	d180      	bne.n	8005f26 <HAL_RCC_OscConfig+0xf1a>
 8006024:	e027      	b.n	8006076 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006026:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800602a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	69db      	ldr	r3, [r3, #28]
 8006032:	2b01      	cmp	r3, #1
 8006034:	d101      	bne.n	800603a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e01e      	b.n	8006078 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800603a:	4b12      	ldr	r3, [pc, #72]	; (8006084 <HAL_RCC_OscConfig+0x1078>)
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006042:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006046:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800604a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800604e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	6a1b      	ldr	r3, [r3, #32]
 8006056:	429a      	cmp	r2, r3
 8006058:	d10b      	bne.n	8006072 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800605a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800605e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006062:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006066:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800606e:	429a      	cmp	r2, r3
 8006070:	d001      	beq.n	8006076 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e000      	b.n	8006078 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	40021000 	.word	0x40021000

08006088 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b09e      	sub	sp, #120	; 0x78
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006092:	2300      	movs	r3, #0
 8006094:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d101      	bne.n	80060a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	e162      	b.n	8006366 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80060a0:	4b90      	ldr	r3, [pc, #576]	; (80062e4 <HAL_RCC_ClockConfig+0x25c>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 0307 	and.w	r3, r3, #7
 80060a8:	683a      	ldr	r2, [r7, #0]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d910      	bls.n	80060d0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060ae:	4b8d      	ldr	r3, [pc, #564]	; (80062e4 <HAL_RCC_ClockConfig+0x25c>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f023 0207 	bic.w	r2, r3, #7
 80060b6:	498b      	ldr	r1, [pc, #556]	; (80062e4 <HAL_RCC_ClockConfig+0x25c>)
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060be:	4b89      	ldr	r3, [pc, #548]	; (80062e4 <HAL_RCC_ClockConfig+0x25c>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 0307 	and.w	r3, r3, #7
 80060c6:	683a      	ldr	r2, [r7, #0]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d001      	beq.n	80060d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	e14a      	b.n	8006366 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 0302 	and.w	r3, r3, #2
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d008      	beq.n	80060ee <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060dc:	4b82      	ldr	r3, [pc, #520]	; (80062e8 <HAL_RCC_ClockConfig+0x260>)
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	497f      	ldr	r1, [pc, #508]	; (80062e8 <HAL_RCC_ClockConfig+0x260>)
 80060ea:	4313      	orrs	r3, r2
 80060ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 0301 	and.w	r3, r3, #1
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	f000 80dc 	beq.w	80062b4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	2b01      	cmp	r3, #1
 8006102:	d13c      	bne.n	800617e <HAL_RCC_ClockConfig+0xf6>
 8006104:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006108:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800610a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800610c:	fa93 f3a3 	rbit	r3, r3
 8006110:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8006112:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006114:	fab3 f383 	clz	r3, r3
 8006118:	b2db      	uxtb	r3, r3
 800611a:	095b      	lsrs	r3, r3, #5
 800611c:	b2db      	uxtb	r3, r3
 800611e:	f043 0301 	orr.w	r3, r3, #1
 8006122:	b2db      	uxtb	r3, r3
 8006124:	2b01      	cmp	r3, #1
 8006126:	d102      	bne.n	800612e <HAL_RCC_ClockConfig+0xa6>
 8006128:	4b6f      	ldr	r3, [pc, #444]	; (80062e8 <HAL_RCC_ClockConfig+0x260>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	e00f      	b.n	800614e <HAL_RCC_ClockConfig+0xc6>
 800612e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006132:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006134:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006136:	fa93 f3a3 	rbit	r3, r3
 800613a:	667b      	str	r3, [r7, #100]	; 0x64
 800613c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006140:	663b      	str	r3, [r7, #96]	; 0x60
 8006142:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006144:	fa93 f3a3 	rbit	r3, r3
 8006148:	65fb      	str	r3, [r7, #92]	; 0x5c
 800614a:	4b67      	ldr	r3, [pc, #412]	; (80062e8 <HAL_RCC_ClockConfig+0x260>)
 800614c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006152:	65ba      	str	r2, [r7, #88]	; 0x58
 8006154:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006156:	fa92 f2a2 	rbit	r2, r2
 800615a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800615c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800615e:	fab2 f282 	clz	r2, r2
 8006162:	b2d2      	uxtb	r2, r2
 8006164:	f042 0220 	orr.w	r2, r2, #32
 8006168:	b2d2      	uxtb	r2, r2
 800616a:	f002 021f 	and.w	r2, r2, #31
 800616e:	2101      	movs	r1, #1
 8006170:	fa01 f202 	lsl.w	r2, r1, r2
 8006174:	4013      	ands	r3, r2
 8006176:	2b00      	cmp	r3, #0
 8006178:	d17b      	bne.n	8006272 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e0f3      	b.n	8006366 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	2b02      	cmp	r3, #2
 8006184:	d13c      	bne.n	8006200 <HAL_RCC_ClockConfig+0x178>
 8006186:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800618a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800618c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800618e:	fa93 f3a3 	rbit	r3, r3
 8006192:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006194:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006196:	fab3 f383 	clz	r3, r3
 800619a:	b2db      	uxtb	r3, r3
 800619c:	095b      	lsrs	r3, r3, #5
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	f043 0301 	orr.w	r3, r3, #1
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d102      	bne.n	80061b0 <HAL_RCC_ClockConfig+0x128>
 80061aa:	4b4f      	ldr	r3, [pc, #316]	; (80062e8 <HAL_RCC_ClockConfig+0x260>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	e00f      	b.n	80061d0 <HAL_RCC_ClockConfig+0x148>
 80061b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80061b4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061b8:	fa93 f3a3 	rbit	r3, r3
 80061bc:	647b      	str	r3, [r7, #68]	; 0x44
 80061be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80061c2:	643b      	str	r3, [r7, #64]	; 0x40
 80061c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061c6:	fa93 f3a3 	rbit	r3, r3
 80061ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061cc:	4b46      	ldr	r3, [pc, #280]	; (80062e8 <HAL_RCC_ClockConfig+0x260>)
 80061ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80061d4:	63ba      	str	r2, [r7, #56]	; 0x38
 80061d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061d8:	fa92 f2a2 	rbit	r2, r2
 80061dc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80061de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061e0:	fab2 f282 	clz	r2, r2
 80061e4:	b2d2      	uxtb	r2, r2
 80061e6:	f042 0220 	orr.w	r2, r2, #32
 80061ea:	b2d2      	uxtb	r2, r2
 80061ec:	f002 021f 	and.w	r2, r2, #31
 80061f0:	2101      	movs	r1, #1
 80061f2:	fa01 f202 	lsl.w	r2, r1, r2
 80061f6:	4013      	ands	r3, r2
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d13a      	bne.n	8006272 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e0b2      	b.n	8006366 <HAL_RCC_ClockConfig+0x2de>
 8006200:	2302      	movs	r3, #2
 8006202:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006206:	fa93 f3a3 	rbit	r3, r3
 800620a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800620c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800620e:	fab3 f383 	clz	r3, r3
 8006212:	b2db      	uxtb	r3, r3
 8006214:	095b      	lsrs	r3, r3, #5
 8006216:	b2db      	uxtb	r3, r3
 8006218:	f043 0301 	orr.w	r3, r3, #1
 800621c:	b2db      	uxtb	r3, r3
 800621e:	2b01      	cmp	r3, #1
 8006220:	d102      	bne.n	8006228 <HAL_RCC_ClockConfig+0x1a0>
 8006222:	4b31      	ldr	r3, [pc, #196]	; (80062e8 <HAL_RCC_ClockConfig+0x260>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	e00d      	b.n	8006244 <HAL_RCC_ClockConfig+0x1bc>
 8006228:	2302      	movs	r3, #2
 800622a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800622c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622e:	fa93 f3a3 	rbit	r3, r3
 8006232:	627b      	str	r3, [r7, #36]	; 0x24
 8006234:	2302      	movs	r3, #2
 8006236:	623b      	str	r3, [r7, #32]
 8006238:	6a3b      	ldr	r3, [r7, #32]
 800623a:	fa93 f3a3 	rbit	r3, r3
 800623e:	61fb      	str	r3, [r7, #28]
 8006240:	4b29      	ldr	r3, [pc, #164]	; (80062e8 <HAL_RCC_ClockConfig+0x260>)
 8006242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006244:	2202      	movs	r2, #2
 8006246:	61ba      	str	r2, [r7, #24]
 8006248:	69ba      	ldr	r2, [r7, #24]
 800624a:	fa92 f2a2 	rbit	r2, r2
 800624e:	617a      	str	r2, [r7, #20]
  return result;
 8006250:	697a      	ldr	r2, [r7, #20]
 8006252:	fab2 f282 	clz	r2, r2
 8006256:	b2d2      	uxtb	r2, r2
 8006258:	f042 0220 	orr.w	r2, r2, #32
 800625c:	b2d2      	uxtb	r2, r2
 800625e:	f002 021f 	and.w	r2, r2, #31
 8006262:	2101      	movs	r1, #1
 8006264:	fa01 f202 	lsl.w	r2, r1, r2
 8006268:	4013      	ands	r3, r2
 800626a:	2b00      	cmp	r3, #0
 800626c:	d101      	bne.n	8006272 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e079      	b.n	8006366 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006272:	4b1d      	ldr	r3, [pc, #116]	; (80062e8 <HAL_RCC_ClockConfig+0x260>)
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	f023 0203 	bic.w	r2, r3, #3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	491a      	ldr	r1, [pc, #104]	; (80062e8 <HAL_RCC_ClockConfig+0x260>)
 8006280:	4313      	orrs	r3, r2
 8006282:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006284:	f7fd fe5a 	bl	8003f3c <HAL_GetTick>
 8006288:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800628a:	e00a      	b.n	80062a2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800628c:	f7fd fe56 	bl	8003f3c <HAL_GetTick>
 8006290:	4602      	mov	r2, r0
 8006292:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006294:	1ad3      	subs	r3, r2, r3
 8006296:	f241 3288 	movw	r2, #5000	; 0x1388
 800629a:	4293      	cmp	r3, r2
 800629c:	d901      	bls.n	80062a2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800629e:	2303      	movs	r3, #3
 80062a0:	e061      	b.n	8006366 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062a2:	4b11      	ldr	r3, [pc, #68]	; (80062e8 <HAL_RCC_ClockConfig+0x260>)
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	f003 020c 	and.w	r2, r3, #12
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d1eb      	bne.n	800628c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80062b4:	4b0b      	ldr	r3, [pc, #44]	; (80062e4 <HAL_RCC_ClockConfig+0x25c>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 0307 	and.w	r3, r3, #7
 80062bc:	683a      	ldr	r2, [r7, #0]
 80062be:	429a      	cmp	r2, r3
 80062c0:	d214      	bcs.n	80062ec <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062c2:	4b08      	ldr	r3, [pc, #32]	; (80062e4 <HAL_RCC_ClockConfig+0x25c>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f023 0207 	bic.w	r2, r3, #7
 80062ca:	4906      	ldr	r1, [pc, #24]	; (80062e4 <HAL_RCC_ClockConfig+0x25c>)
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062d2:	4b04      	ldr	r3, [pc, #16]	; (80062e4 <HAL_RCC_ClockConfig+0x25c>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 0307 	and.w	r3, r3, #7
 80062da:	683a      	ldr	r2, [r7, #0]
 80062dc:	429a      	cmp	r2, r3
 80062de:	d005      	beq.n	80062ec <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	e040      	b.n	8006366 <HAL_RCC_ClockConfig+0x2de>
 80062e4:	40022000 	.word	0x40022000
 80062e8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 0304 	and.w	r3, r3, #4
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d008      	beq.n	800630a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062f8:	4b1d      	ldr	r3, [pc, #116]	; (8006370 <HAL_RCC_ClockConfig+0x2e8>)
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	491a      	ldr	r1, [pc, #104]	; (8006370 <HAL_RCC_ClockConfig+0x2e8>)
 8006306:	4313      	orrs	r3, r2
 8006308:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 0308 	and.w	r3, r3, #8
 8006312:	2b00      	cmp	r3, #0
 8006314:	d009      	beq.n	800632a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006316:	4b16      	ldr	r3, [pc, #88]	; (8006370 <HAL_RCC_ClockConfig+0x2e8>)
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	00db      	lsls	r3, r3, #3
 8006324:	4912      	ldr	r1, [pc, #72]	; (8006370 <HAL_RCC_ClockConfig+0x2e8>)
 8006326:	4313      	orrs	r3, r2
 8006328:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800632a:	f000 f829 	bl	8006380 <HAL_RCC_GetSysClockFreq>
 800632e:	4601      	mov	r1, r0
 8006330:	4b0f      	ldr	r3, [pc, #60]	; (8006370 <HAL_RCC_ClockConfig+0x2e8>)
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006338:	22f0      	movs	r2, #240	; 0xf0
 800633a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800633c:	693a      	ldr	r2, [r7, #16]
 800633e:	fa92 f2a2 	rbit	r2, r2
 8006342:	60fa      	str	r2, [r7, #12]
  return result;
 8006344:	68fa      	ldr	r2, [r7, #12]
 8006346:	fab2 f282 	clz	r2, r2
 800634a:	b2d2      	uxtb	r2, r2
 800634c:	40d3      	lsrs	r3, r2
 800634e:	4a09      	ldr	r2, [pc, #36]	; (8006374 <HAL_RCC_ClockConfig+0x2ec>)
 8006350:	5cd3      	ldrb	r3, [r2, r3]
 8006352:	fa21 f303 	lsr.w	r3, r1, r3
 8006356:	4a08      	ldr	r2, [pc, #32]	; (8006378 <HAL_RCC_ClockConfig+0x2f0>)
 8006358:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800635a:	4b08      	ldr	r3, [pc, #32]	; (800637c <HAL_RCC_ClockConfig+0x2f4>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4618      	mov	r0, r3
 8006360:	f7fd f99e 	bl	80036a0 <HAL_InitTick>
  
  return HAL_OK;
 8006364:	2300      	movs	r3, #0
}
 8006366:	4618      	mov	r0, r3
 8006368:	3778      	adds	r7, #120	; 0x78
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	40021000 	.word	0x40021000
 8006374:	0800e760 	.word	0x0800e760
 8006378:	20000000 	.word	0x20000000
 800637c:	20000004 	.word	0x20000004

08006380 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006380:	b480      	push	{r7}
 8006382:	b08b      	sub	sp, #44	; 0x2c
 8006384:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006386:	2300      	movs	r3, #0
 8006388:	61fb      	str	r3, [r7, #28]
 800638a:	2300      	movs	r3, #0
 800638c:	61bb      	str	r3, [r7, #24]
 800638e:	2300      	movs	r3, #0
 8006390:	627b      	str	r3, [r7, #36]	; 0x24
 8006392:	2300      	movs	r3, #0
 8006394:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006396:	2300      	movs	r3, #0
 8006398:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800639a:	4b29      	ldr	r3, [pc, #164]	; (8006440 <HAL_RCC_GetSysClockFreq+0xc0>)
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	f003 030c 	and.w	r3, r3, #12
 80063a6:	2b04      	cmp	r3, #4
 80063a8:	d002      	beq.n	80063b0 <HAL_RCC_GetSysClockFreq+0x30>
 80063aa:	2b08      	cmp	r3, #8
 80063ac:	d003      	beq.n	80063b6 <HAL_RCC_GetSysClockFreq+0x36>
 80063ae:	e03c      	b.n	800642a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80063b0:	4b24      	ldr	r3, [pc, #144]	; (8006444 <HAL_RCC_GetSysClockFreq+0xc4>)
 80063b2:	623b      	str	r3, [r7, #32]
      break;
 80063b4:	e03c      	b.n	8006430 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80063bc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80063c0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063c2:	68ba      	ldr	r2, [r7, #8]
 80063c4:	fa92 f2a2 	rbit	r2, r2
 80063c8:	607a      	str	r2, [r7, #4]
  return result;
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	fab2 f282 	clz	r2, r2
 80063d0:	b2d2      	uxtb	r2, r2
 80063d2:	40d3      	lsrs	r3, r2
 80063d4:	4a1c      	ldr	r2, [pc, #112]	; (8006448 <HAL_RCC_GetSysClockFreq+0xc8>)
 80063d6:	5cd3      	ldrb	r3, [r2, r3]
 80063d8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80063da:	4b19      	ldr	r3, [pc, #100]	; (8006440 <HAL_RCC_GetSysClockFreq+0xc0>)
 80063dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063de:	f003 030f 	and.w	r3, r3, #15
 80063e2:	220f      	movs	r2, #15
 80063e4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063e6:	693a      	ldr	r2, [r7, #16]
 80063e8:	fa92 f2a2 	rbit	r2, r2
 80063ec:	60fa      	str	r2, [r7, #12]
  return result;
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	fab2 f282 	clz	r2, r2
 80063f4:	b2d2      	uxtb	r2, r2
 80063f6:	40d3      	lsrs	r3, r2
 80063f8:	4a14      	ldr	r2, [pc, #80]	; (800644c <HAL_RCC_GetSysClockFreq+0xcc>)
 80063fa:	5cd3      	ldrb	r3, [r2, r3]
 80063fc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80063fe:	69fb      	ldr	r3, [r7, #28]
 8006400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006404:	2b00      	cmp	r3, #0
 8006406:	d008      	beq.n	800641a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006408:	4a0e      	ldr	r2, [pc, #56]	; (8006444 <HAL_RCC_GetSysClockFreq+0xc4>)
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	fb02 f303 	mul.w	r3, r2, r3
 8006416:	627b      	str	r3, [r7, #36]	; 0x24
 8006418:	e004      	b.n	8006424 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	4a0c      	ldr	r2, [pc, #48]	; (8006450 <HAL_RCC_GetSysClockFreq+0xd0>)
 800641e:	fb02 f303 	mul.w	r3, r2, r3
 8006422:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8006424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006426:	623b      	str	r3, [r7, #32]
      break;
 8006428:	e002      	b.n	8006430 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800642a:	4b06      	ldr	r3, [pc, #24]	; (8006444 <HAL_RCC_GetSysClockFreq+0xc4>)
 800642c:	623b      	str	r3, [r7, #32]
      break;
 800642e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006430:	6a3b      	ldr	r3, [r7, #32]
}
 8006432:	4618      	mov	r0, r3
 8006434:	372c      	adds	r7, #44	; 0x2c
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr
 800643e:	bf00      	nop
 8006440:	40021000 	.word	0x40021000
 8006444:	007a1200 	.word	0x007a1200
 8006448:	0800e778 	.word	0x0800e778
 800644c:	0800e788 	.word	0x0800e788
 8006450:	003d0900 	.word	0x003d0900

08006454 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006454:	b480      	push	{r7}
 8006456:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006458:	4b03      	ldr	r3, [pc, #12]	; (8006468 <HAL_RCC_GetHCLKFreq+0x14>)
 800645a:	681b      	ldr	r3, [r3, #0]
}
 800645c:	4618      	mov	r0, r3
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop
 8006468:	20000000 	.word	0x20000000

0800646c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8006472:	f7ff ffef 	bl	8006454 <HAL_RCC_GetHCLKFreq>
 8006476:	4601      	mov	r1, r0
 8006478:	4b0b      	ldr	r3, [pc, #44]	; (80064a8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006480:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006484:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	fa92 f2a2 	rbit	r2, r2
 800648c:	603a      	str	r2, [r7, #0]
  return result;
 800648e:	683a      	ldr	r2, [r7, #0]
 8006490:	fab2 f282 	clz	r2, r2
 8006494:	b2d2      	uxtb	r2, r2
 8006496:	40d3      	lsrs	r3, r2
 8006498:	4a04      	ldr	r2, [pc, #16]	; (80064ac <HAL_RCC_GetPCLK1Freq+0x40>)
 800649a:	5cd3      	ldrb	r3, [r2, r3]
 800649c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80064a0:	4618      	mov	r0, r3
 80064a2:	3708      	adds	r7, #8
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}
 80064a8:	40021000 	.word	0x40021000
 80064ac:	0800e770 	.word	0x0800e770

080064b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80064b6:	f7ff ffcd 	bl	8006454 <HAL_RCC_GetHCLKFreq>
 80064ba:	4601      	mov	r1, r0
 80064bc:	4b0b      	ldr	r3, [pc, #44]	; (80064ec <HAL_RCC_GetPCLK2Freq+0x3c>)
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80064c4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80064c8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	fa92 f2a2 	rbit	r2, r2
 80064d0:	603a      	str	r2, [r7, #0]
  return result;
 80064d2:	683a      	ldr	r2, [r7, #0]
 80064d4:	fab2 f282 	clz	r2, r2
 80064d8:	b2d2      	uxtb	r2, r2
 80064da:	40d3      	lsrs	r3, r2
 80064dc:	4a04      	ldr	r2, [pc, #16]	; (80064f0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80064de:	5cd3      	ldrb	r3, [r2, r3]
 80064e0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80064e4:	4618      	mov	r0, r3
 80064e6:	3708      	adds	r7, #8
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	40021000 	.word	0x40021000
 80064f0:	0800e770 	.word	0x0800e770

080064f4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	220f      	movs	r2, #15
 8006502:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006504:	4b12      	ldr	r3, [pc, #72]	; (8006550 <HAL_RCC_GetClockConfig+0x5c>)
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	f003 0203 	and.w	r2, r3, #3
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8006510:	4b0f      	ldr	r3, [pc, #60]	; (8006550 <HAL_RCC_GetClockConfig+0x5c>)
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800651c:	4b0c      	ldr	r3, [pc, #48]	; (8006550 <HAL_RCC_GetClockConfig+0x5c>)
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006528:	4b09      	ldr	r3, [pc, #36]	; (8006550 <HAL_RCC_GetClockConfig+0x5c>)
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	08db      	lsrs	r3, r3, #3
 800652e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8006536:	4b07      	ldr	r3, [pc, #28]	; (8006554 <HAL_RCC_GetClockConfig+0x60>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f003 0207 	and.w	r2, r3, #7
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	601a      	str	r2, [r3, #0]
}
 8006542:	bf00      	nop
 8006544:	370c      	adds	r7, #12
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr
 800654e:	bf00      	nop
 8006550:	40021000 	.word	0x40021000
 8006554:	40022000 	.word	0x40022000

08006558 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b092      	sub	sp, #72	; 0x48
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006560:	2300      	movs	r3, #0
 8006562:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8006564:	2300      	movs	r3, #0
 8006566:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8006568:	2300      	movs	r3, #0
 800656a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006576:	2b00      	cmp	r3, #0
 8006578:	f000 80d4 	beq.w	8006724 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800657c:	4b4e      	ldr	r3, [pc, #312]	; (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800657e:	69db      	ldr	r3, [r3, #28]
 8006580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006584:	2b00      	cmp	r3, #0
 8006586:	d10e      	bne.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006588:	4b4b      	ldr	r3, [pc, #300]	; (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800658a:	69db      	ldr	r3, [r3, #28]
 800658c:	4a4a      	ldr	r2, [pc, #296]	; (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800658e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006592:	61d3      	str	r3, [r2, #28]
 8006594:	4b48      	ldr	r3, [pc, #288]	; (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006596:	69db      	ldr	r3, [r3, #28]
 8006598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800659c:	60bb      	str	r3, [r7, #8]
 800659e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065a0:	2301      	movs	r3, #1
 80065a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065a6:	4b45      	ldr	r3, [pc, #276]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d118      	bne.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065b2:	4b42      	ldr	r3, [pc, #264]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a41      	ldr	r2, [pc, #260]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80065b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065bc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065be:	f7fd fcbd 	bl	8003f3c <HAL_GetTick>
 80065c2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065c4:	e008      	b.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065c6:	f7fd fcb9 	bl	8003f3c <HAL_GetTick>
 80065ca:	4602      	mov	r2, r0
 80065cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065ce:	1ad3      	subs	r3, r2, r3
 80065d0:	2b64      	cmp	r3, #100	; 0x64
 80065d2:	d901      	bls.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80065d4:	2303      	movs	r3, #3
 80065d6:	e13c      	b.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065d8:	4b38      	ldr	r3, [pc, #224]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d0f0      	beq.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80065e4:	4b34      	ldr	r3, [pc, #208]	; (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065e6:	6a1b      	ldr	r3, [r3, #32]
 80065e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80065ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	f000 8084 	beq.w	80066fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006600:	429a      	cmp	r2, r3
 8006602:	d07c      	beq.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006604:	4b2c      	ldr	r3, [pc, #176]	; (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006606:	6a1b      	ldr	r3, [r3, #32]
 8006608:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800660c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800660e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006612:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006616:	fa93 f3a3 	rbit	r3, r3
 800661a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800661c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800661e:	fab3 f383 	clz	r3, r3
 8006622:	b2db      	uxtb	r3, r3
 8006624:	461a      	mov	r2, r3
 8006626:	4b26      	ldr	r3, [pc, #152]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006628:	4413      	add	r3, r2
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	461a      	mov	r2, r3
 800662e:	2301      	movs	r3, #1
 8006630:	6013      	str	r3, [r2, #0]
 8006632:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006636:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800663a:	fa93 f3a3 	rbit	r3, r3
 800663e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006642:	fab3 f383 	clz	r3, r3
 8006646:	b2db      	uxtb	r3, r3
 8006648:	461a      	mov	r2, r3
 800664a:	4b1d      	ldr	r3, [pc, #116]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800664c:	4413      	add	r3, r2
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	461a      	mov	r2, r3
 8006652:	2300      	movs	r3, #0
 8006654:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006656:	4a18      	ldr	r2, [pc, #96]	; (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800665a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800665c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800665e:	f003 0301 	and.w	r3, r3, #1
 8006662:	2b00      	cmp	r3, #0
 8006664:	d04b      	beq.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006666:	f7fd fc69 	bl	8003f3c <HAL_GetTick>
 800666a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800666c:	e00a      	b.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800666e:	f7fd fc65 	bl	8003f3c <HAL_GetTick>
 8006672:	4602      	mov	r2, r0
 8006674:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006676:	1ad3      	subs	r3, r2, r3
 8006678:	f241 3288 	movw	r2, #5000	; 0x1388
 800667c:	4293      	cmp	r3, r2
 800667e:	d901      	bls.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006680:	2303      	movs	r3, #3
 8006682:	e0e6      	b.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8006684:	2302      	movs	r3, #2
 8006686:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800668a:	fa93 f3a3 	rbit	r3, r3
 800668e:	627b      	str	r3, [r7, #36]	; 0x24
 8006690:	2302      	movs	r3, #2
 8006692:	623b      	str	r3, [r7, #32]
 8006694:	6a3b      	ldr	r3, [r7, #32]
 8006696:	fa93 f3a3 	rbit	r3, r3
 800669a:	61fb      	str	r3, [r7, #28]
  return result;
 800669c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800669e:	fab3 f383 	clz	r3, r3
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	095b      	lsrs	r3, r3, #5
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	f043 0302 	orr.w	r3, r3, #2
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	2b02      	cmp	r3, #2
 80066b0:	d108      	bne.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80066b2:	4b01      	ldr	r3, [pc, #4]	; (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066b4:	6a1b      	ldr	r3, [r3, #32]
 80066b6:	e00d      	b.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80066b8:	40021000 	.word	0x40021000
 80066bc:	40007000 	.word	0x40007000
 80066c0:	10908100 	.word	0x10908100
 80066c4:	2302      	movs	r3, #2
 80066c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	fa93 f3a3 	rbit	r3, r3
 80066ce:	617b      	str	r3, [r7, #20]
 80066d0:	4b62      	ldr	r3, [pc, #392]	; (800685c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80066d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d4:	2202      	movs	r2, #2
 80066d6:	613a      	str	r2, [r7, #16]
 80066d8:	693a      	ldr	r2, [r7, #16]
 80066da:	fa92 f2a2 	rbit	r2, r2
 80066de:	60fa      	str	r2, [r7, #12]
  return result;
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	fab2 f282 	clz	r2, r2
 80066e6:	b2d2      	uxtb	r2, r2
 80066e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066ec:	b2d2      	uxtb	r2, r2
 80066ee:	f002 021f 	and.w	r2, r2, #31
 80066f2:	2101      	movs	r1, #1
 80066f4:	fa01 f202 	lsl.w	r2, r1, r2
 80066f8:	4013      	ands	r3, r2
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d0b7      	beq.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80066fe:	4b57      	ldr	r3, [pc, #348]	; (800685c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006700:	6a1b      	ldr	r3, [r3, #32]
 8006702:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	4954      	ldr	r1, [pc, #336]	; (800685c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800670c:	4313      	orrs	r3, r2
 800670e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006710:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006714:	2b01      	cmp	r3, #1
 8006716:	d105      	bne.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006718:	4b50      	ldr	r3, [pc, #320]	; (800685c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800671a:	69db      	ldr	r3, [r3, #28]
 800671c:	4a4f      	ldr	r2, [pc, #316]	; (800685c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800671e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006722:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 0301 	and.w	r3, r3, #1
 800672c:	2b00      	cmp	r3, #0
 800672e:	d008      	beq.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006730:	4b4a      	ldr	r3, [pc, #296]	; (800685c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006734:	f023 0203 	bic.w	r2, r3, #3
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	4947      	ldr	r1, [pc, #284]	; (800685c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800673e:	4313      	orrs	r3, r2
 8006740:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 0320 	and.w	r3, r3, #32
 800674a:	2b00      	cmp	r3, #0
 800674c:	d008      	beq.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800674e:	4b43      	ldr	r3, [pc, #268]	; (800685c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006752:	f023 0210 	bic.w	r2, r3, #16
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	4940      	ldr	r1, [pc, #256]	; (800685c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800675c:	4313      	orrs	r3, r2
 800675e:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006768:	2b00      	cmp	r3, #0
 800676a:	d008      	beq.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800676c:	4b3b      	ldr	r3, [pc, #236]	; (800685c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800676e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006770:	f023 0220 	bic.w	r2, r3, #32
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	4938      	ldr	r1, [pc, #224]	; (800685c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800677a:	4313      	orrs	r3, r2
 800677c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006786:	2b00      	cmp	r3, #0
 8006788:	d008      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800678a:	4b34      	ldr	r3, [pc, #208]	; (800685c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800678c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800678e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	695b      	ldr	r3, [r3, #20]
 8006796:	4931      	ldr	r1, [pc, #196]	; (800685c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006798:	4313      	orrs	r3, r2
 800679a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d008      	beq.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80067a8:	4b2c      	ldr	r3, [pc, #176]	; (800685c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	69db      	ldr	r3, [r3, #28]
 80067b4:	4929      	ldr	r1, [pc, #164]	; (800685c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80067b6:	4313      	orrs	r3, r2
 80067b8:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d008      	beq.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80067c6:	4b25      	ldr	r3, [pc, #148]	; (800685c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80067c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ca:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	699b      	ldr	r3, [r3, #24]
 80067d2:	4922      	ldr	r1, [pc, #136]	; (800685c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80067d4:	4313      	orrs	r3, r2
 80067d6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d008      	beq.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80067e4:	4b1d      	ldr	r3, [pc, #116]	; (800685c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80067e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6a1b      	ldr	r3, [r3, #32]
 80067f0:	491a      	ldr	r1, [pc, #104]	; (800685c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80067f2:	4313      	orrs	r3, r2
 80067f4:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d008      	beq.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8006802:	4b16      	ldr	r3, [pc, #88]	; (800685c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006806:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680e:	4913      	ldr	r1, [pc, #76]	; (800685c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006810:	4313      	orrs	r3, r2
 8006812:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800681c:	2b00      	cmp	r3, #0
 800681e:	d008      	beq.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8006820:	4b0e      	ldr	r3, [pc, #56]	; (800685c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006824:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800682c:	490b      	ldr	r1, [pc, #44]	; (800685c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800682e:	4313      	orrs	r3, r2
 8006830:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800683a:	2b00      	cmp	r3, #0
 800683c:	d008      	beq.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800683e:	4b07      	ldr	r3, [pc, #28]	; (800685c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006842:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800684a:	4904      	ldr	r1, [pc, #16]	; (800685c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800684c:	4313      	orrs	r3, r2
 800684e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006850:	2300      	movs	r3, #0
}
 8006852:	4618      	mov	r0, r3
 8006854:	3748      	adds	r7, #72	; 0x48
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	40021000 	.word	0x40021000

08006860 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d101      	bne.n	8006872 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	e09d      	b.n	80069ae <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006876:	2b00      	cmp	r3, #0
 8006878:	d108      	bne.n	800688c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006882:	d009      	beq.n	8006898 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	61da      	str	r2, [r3, #28]
 800688a:	e005      	b.n	8006898 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d106      	bne.n	80068b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f7fc fdc8 	bl	8003448 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2202      	movs	r2, #2
 80068bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068ce:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80068d8:	d902      	bls.n	80068e0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80068da:	2300      	movs	r3, #0
 80068dc:	60fb      	str	r3, [r7, #12]
 80068de:	e002      	b.n	80068e6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80068e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80068e4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	68db      	ldr	r3, [r3, #12]
 80068ea:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80068ee:	d007      	beq.n	8006900 <HAL_SPI_Init+0xa0>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80068f8:	d002      	beq.n	8006900 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006910:	431a      	orrs	r2, r3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	f003 0302 	and.w	r3, r3, #2
 800691a:	431a      	orrs	r2, r3
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	695b      	ldr	r3, [r3, #20]
 8006920:	f003 0301 	and.w	r3, r3, #1
 8006924:	431a      	orrs	r2, r3
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	699b      	ldr	r3, [r3, #24]
 800692a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800692e:	431a      	orrs	r2, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	69db      	ldr	r3, [r3, #28]
 8006934:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006938:	431a      	orrs	r2, r3
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a1b      	ldr	r3, [r3, #32]
 800693e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006942:	ea42 0103 	orr.w	r1, r2, r3
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800694a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	430a      	orrs	r2, r1
 8006954:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	699b      	ldr	r3, [r3, #24]
 800695a:	0c1b      	lsrs	r3, r3, #16
 800695c:	f003 0204 	and.w	r2, r3, #4
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006964:	f003 0310 	and.w	r3, r3, #16
 8006968:	431a      	orrs	r2, r3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800696e:	f003 0308 	and.w	r3, r3, #8
 8006972:	431a      	orrs	r2, r3
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800697c:	ea42 0103 	orr.w	r1, r2, r3
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	430a      	orrs	r2, r1
 800698c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	69da      	ldr	r2, [r3, #28]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800699c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80069ac:	2300      	movs	r3, #0
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3710      	adds	r7, #16
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}

080069b6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80069b6:	b580      	push	{r7, lr}
 80069b8:	b082      	sub	sp, #8
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d101      	bne.n	80069c8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	e049      	b.n	8006a5c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d106      	bne.n	80069e2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f7fc fd77 	bl	80034d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2202      	movs	r2, #2
 80069e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	3304      	adds	r3, #4
 80069f2:	4619      	mov	r1, r3
 80069f4:	4610      	mov	r0, r2
 80069f6:	f000 fa99 	bl	8006f2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2201      	movs	r2, #1
 80069fe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2201      	movs	r2, #1
 8006a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2201      	movs	r2, #1
 8006a16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2201      	movs	r2, #1
 8006a26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2201      	movs	r2, #1
 8006a36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2201      	movs	r2, #1
 8006a46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2201      	movs	r2, #1
 8006a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a5a:	2300      	movs	r3, #0
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3708      	adds	r7, #8
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b085      	sub	sp, #20
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d001      	beq.n	8006a7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e03b      	b.n	8006af4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2202      	movs	r2, #2
 8006a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68da      	ldr	r2, [r3, #12]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f042 0201 	orr.w	r2, r2, #1
 8006a92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a19      	ldr	r2, [pc, #100]	; (8006b00 <HAL_TIM_Base_Start_IT+0x9c>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d009      	beq.n	8006ab2 <HAL_TIM_Base_Start_IT+0x4e>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006aa6:	d004      	beq.n	8006ab2 <HAL_TIM_Base_Start_IT+0x4e>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a15      	ldr	r2, [pc, #84]	; (8006b04 <HAL_TIM_Base_Start_IT+0xa0>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d115      	bne.n	8006ade <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	689a      	ldr	r2, [r3, #8]
 8006ab8:	4b13      	ldr	r3, [pc, #76]	; (8006b08 <HAL_TIM_Base_Start_IT+0xa4>)
 8006aba:	4013      	ands	r3, r2
 8006abc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2b06      	cmp	r3, #6
 8006ac2:	d015      	beq.n	8006af0 <HAL_TIM_Base_Start_IT+0x8c>
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006aca:	d011      	beq.n	8006af0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f042 0201 	orr.w	r2, r2, #1
 8006ada:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006adc:	e008      	b.n	8006af0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f042 0201 	orr.w	r2, r2, #1
 8006aec:	601a      	str	r2, [r3, #0]
 8006aee:	e000      	b.n	8006af2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006af0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3714      	adds	r7, #20
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr
 8006b00:	40012c00 	.word	0x40012c00
 8006b04:	40014000 	.word	0x40014000
 8006b08:	00010007 	.word	0x00010007

08006b0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	f003 0302 	and.w	r3, r3, #2
 8006b1e:	2b02      	cmp	r3, #2
 8006b20:	d122      	bne.n	8006b68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	f003 0302 	and.w	r3, r3, #2
 8006b2c:	2b02      	cmp	r3, #2
 8006b2e:	d11b      	bne.n	8006b68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f06f 0202 	mvn.w	r2, #2
 8006b38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	699b      	ldr	r3, [r3, #24]
 8006b46:	f003 0303 	and.w	r3, r3, #3
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d003      	beq.n	8006b56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 f9ce 	bl	8006ef0 <HAL_TIM_IC_CaptureCallback>
 8006b54:	e005      	b.n	8006b62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 f9c0 	bl	8006edc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 f9d1 	bl	8006f04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	f003 0304 	and.w	r3, r3, #4
 8006b72:	2b04      	cmp	r3, #4
 8006b74:	d122      	bne.n	8006bbc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	f003 0304 	and.w	r3, r3, #4
 8006b80:	2b04      	cmp	r3, #4
 8006b82:	d11b      	bne.n	8006bbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f06f 0204 	mvn.w	r2, #4
 8006b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2202      	movs	r2, #2
 8006b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	699b      	ldr	r3, [r3, #24]
 8006b9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d003      	beq.n	8006baa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 f9a4 	bl	8006ef0 <HAL_TIM_IC_CaptureCallback>
 8006ba8:	e005      	b.n	8006bb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 f996 	bl	8006edc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 f9a7 	bl	8006f04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	f003 0308 	and.w	r3, r3, #8
 8006bc6:	2b08      	cmp	r3, #8
 8006bc8:	d122      	bne.n	8006c10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	f003 0308 	and.w	r3, r3, #8
 8006bd4:	2b08      	cmp	r3, #8
 8006bd6:	d11b      	bne.n	8006c10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f06f 0208 	mvn.w	r2, #8
 8006be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2204      	movs	r2, #4
 8006be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	69db      	ldr	r3, [r3, #28]
 8006bee:	f003 0303 	and.w	r3, r3, #3
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d003      	beq.n	8006bfe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 f97a 	bl	8006ef0 <HAL_TIM_IC_CaptureCallback>
 8006bfc:	e005      	b.n	8006c0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 f96c 	bl	8006edc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 f97d 	bl	8006f04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	691b      	ldr	r3, [r3, #16]
 8006c16:	f003 0310 	and.w	r3, r3, #16
 8006c1a:	2b10      	cmp	r3, #16
 8006c1c:	d122      	bne.n	8006c64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	f003 0310 	and.w	r3, r3, #16
 8006c28:	2b10      	cmp	r3, #16
 8006c2a:	d11b      	bne.n	8006c64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f06f 0210 	mvn.w	r2, #16
 8006c34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2208      	movs	r2, #8
 8006c3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	69db      	ldr	r3, [r3, #28]
 8006c42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d003      	beq.n	8006c52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 f950 	bl	8006ef0 <HAL_TIM_IC_CaptureCallback>
 8006c50:	e005      	b.n	8006c5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 f942 	bl	8006edc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 f953 	bl	8006f04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	691b      	ldr	r3, [r3, #16]
 8006c6a:	f003 0301 	and.w	r3, r3, #1
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d10e      	bne.n	8006c90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	68db      	ldr	r3, [r3, #12]
 8006c78:	f003 0301 	and.w	r3, r3, #1
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d107      	bne.n	8006c90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f06f 0201 	mvn.w	r2, #1
 8006c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f7fc fb60 	bl	8003350 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	691b      	ldr	r3, [r3, #16]
 8006c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c9a:	2b80      	cmp	r3, #128	; 0x80
 8006c9c:	d10e      	bne.n	8006cbc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ca8:	2b80      	cmp	r3, #128	; 0x80
 8006caa:	d107      	bne.n	8006cbc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 fab0 	bl	800721c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cca:	d10e      	bne.n	8006cea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	68db      	ldr	r3, [r3, #12]
 8006cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cd6:	2b80      	cmp	r3, #128	; 0x80
 8006cd8:	d107      	bne.n	8006cea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006ce2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f000 faa3 	bl	8007230 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	691b      	ldr	r3, [r3, #16]
 8006cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cf4:	2b40      	cmp	r3, #64	; 0x40
 8006cf6:	d10e      	bne.n	8006d16 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	68db      	ldr	r3, [r3, #12]
 8006cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d02:	2b40      	cmp	r3, #64	; 0x40
 8006d04:	d107      	bne.n	8006d16 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006d0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f000 f901 	bl	8006f18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	691b      	ldr	r3, [r3, #16]
 8006d1c:	f003 0320 	and.w	r3, r3, #32
 8006d20:	2b20      	cmp	r3, #32
 8006d22:	d10e      	bne.n	8006d42 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	f003 0320 	and.w	r3, r3, #32
 8006d2e:	2b20      	cmp	r3, #32
 8006d30:	d107      	bne.n	8006d42 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f06f 0220 	mvn.w	r2, #32
 8006d3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 fa63 	bl	8007208 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d42:	bf00      	nop
 8006d44:	3708      	adds	r7, #8
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}

08006d4a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d4a:	b580      	push	{r7, lr}
 8006d4c:	b084      	sub	sp, #16
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
 8006d52:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d54:	2300      	movs	r3, #0
 8006d56:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d101      	bne.n	8006d66 <HAL_TIM_ConfigClockSource+0x1c>
 8006d62:	2302      	movs	r3, #2
 8006d64:	e0b6      	b.n	8006ed4 <HAL_TIM_ConfigClockSource+0x18a>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2201      	movs	r2, #1
 8006d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2202      	movs	r2, #2
 8006d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d84:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006d88:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d90:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	68ba      	ldr	r2, [r7, #8]
 8006d98:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006da2:	d03e      	beq.n	8006e22 <HAL_TIM_ConfigClockSource+0xd8>
 8006da4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006da8:	f200 8087 	bhi.w	8006eba <HAL_TIM_ConfigClockSource+0x170>
 8006dac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006db0:	f000 8086 	beq.w	8006ec0 <HAL_TIM_ConfigClockSource+0x176>
 8006db4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006db8:	d87f      	bhi.n	8006eba <HAL_TIM_ConfigClockSource+0x170>
 8006dba:	2b70      	cmp	r3, #112	; 0x70
 8006dbc:	d01a      	beq.n	8006df4 <HAL_TIM_ConfigClockSource+0xaa>
 8006dbe:	2b70      	cmp	r3, #112	; 0x70
 8006dc0:	d87b      	bhi.n	8006eba <HAL_TIM_ConfigClockSource+0x170>
 8006dc2:	2b60      	cmp	r3, #96	; 0x60
 8006dc4:	d050      	beq.n	8006e68 <HAL_TIM_ConfigClockSource+0x11e>
 8006dc6:	2b60      	cmp	r3, #96	; 0x60
 8006dc8:	d877      	bhi.n	8006eba <HAL_TIM_ConfigClockSource+0x170>
 8006dca:	2b50      	cmp	r3, #80	; 0x50
 8006dcc:	d03c      	beq.n	8006e48 <HAL_TIM_ConfigClockSource+0xfe>
 8006dce:	2b50      	cmp	r3, #80	; 0x50
 8006dd0:	d873      	bhi.n	8006eba <HAL_TIM_ConfigClockSource+0x170>
 8006dd2:	2b40      	cmp	r3, #64	; 0x40
 8006dd4:	d058      	beq.n	8006e88 <HAL_TIM_ConfigClockSource+0x13e>
 8006dd6:	2b40      	cmp	r3, #64	; 0x40
 8006dd8:	d86f      	bhi.n	8006eba <HAL_TIM_ConfigClockSource+0x170>
 8006dda:	2b30      	cmp	r3, #48	; 0x30
 8006ddc:	d064      	beq.n	8006ea8 <HAL_TIM_ConfigClockSource+0x15e>
 8006dde:	2b30      	cmp	r3, #48	; 0x30
 8006de0:	d86b      	bhi.n	8006eba <HAL_TIM_ConfigClockSource+0x170>
 8006de2:	2b20      	cmp	r3, #32
 8006de4:	d060      	beq.n	8006ea8 <HAL_TIM_ConfigClockSource+0x15e>
 8006de6:	2b20      	cmp	r3, #32
 8006de8:	d867      	bhi.n	8006eba <HAL_TIM_ConfigClockSource+0x170>
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d05c      	beq.n	8006ea8 <HAL_TIM_ConfigClockSource+0x15e>
 8006dee:	2b10      	cmp	r3, #16
 8006df0:	d05a      	beq.n	8006ea8 <HAL_TIM_ConfigClockSource+0x15e>
 8006df2:	e062      	b.n	8006eba <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006e04:	f000 f97a 	bl	80070fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006e16:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	68ba      	ldr	r2, [r7, #8]
 8006e1e:	609a      	str	r2, [r3, #8]
      break;
 8006e20:	e04f      	b.n	8006ec2 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006e32:	f000 f963 	bl	80070fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	689a      	ldr	r2, [r3, #8]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e44:	609a      	str	r2, [r3, #8]
      break;
 8006e46:	e03c      	b.n	8006ec2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e54:	461a      	mov	r2, r3
 8006e56:	f000 f8d7 	bl	8007008 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	2150      	movs	r1, #80	; 0x50
 8006e60:	4618      	mov	r0, r3
 8006e62:	f000 f930 	bl	80070c6 <TIM_ITRx_SetConfig>
      break;
 8006e66:	e02c      	b.n	8006ec2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e74:	461a      	mov	r2, r3
 8006e76:	f000 f8f6 	bl	8007066 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2160      	movs	r1, #96	; 0x60
 8006e80:	4618      	mov	r0, r3
 8006e82:	f000 f920 	bl	80070c6 <TIM_ITRx_SetConfig>
      break;
 8006e86:	e01c      	b.n	8006ec2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e94:	461a      	mov	r2, r3
 8006e96:	f000 f8b7 	bl	8007008 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	2140      	movs	r1, #64	; 0x40
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f000 f910 	bl	80070c6 <TIM_ITRx_SetConfig>
      break;
 8006ea6:	e00c      	b.n	8006ec2 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	4610      	mov	r0, r2
 8006eb4:	f000 f907 	bl	80070c6 <TIM_ITRx_SetConfig>
      break;
 8006eb8:	e003      	b.n	8006ec2 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	73fb      	strb	r3, [r7, #15]
      break;
 8006ebe:	e000      	b.n	8006ec2 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006ec0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3710      	adds	r7, #16
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b083      	sub	sp, #12
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ee4:	bf00      	nop
 8006ee6:	370c      	adds	r7, #12
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b083      	sub	sp, #12
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ef8:	bf00      	nop
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f0c:	bf00      	nop
 8006f0e:	370c      	adds	r7, #12
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f20:	bf00      	nop
 8006f22:	370c      	adds	r7, #12
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b085      	sub	sp, #20
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	4a2e      	ldr	r2, [pc, #184]	; (8006ff8 <TIM_Base_SetConfig+0xcc>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d003      	beq.n	8006f4c <TIM_Base_SetConfig+0x20>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f4a:	d108      	bne.n	8006f5e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4a25      	ldr	r2, [pc, #148]	; (8006ff8 <TIM_Base_SetConfig+0xcc>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d00f      	beq.n	8006f86 <TIM_Base_SetConfig+0x5a>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f6c:	d00b      	beq.n	8006f86 <TIM_Base_SetConfig+0x5a>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4a22      	ldr	r2, [pc, #136]	; (8006ffc <TIM_Base_SetConfig+0xd0>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d007      	beq.n	8006f86 <TIM_Base_SetConfig+0x5a>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a21      	ldr	r2, [pc, #132]	; (8007000 <TIM_Base_SetConfig+0xd4>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d003      	beq.n	8006f86 <TIM_Base_SetConfig+0x5a>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4a20      	ldr	r2, [pc, #128]	; (8007004 <TIM_Base_SetConfig+0xd8>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d108      	bne.n	8006f98 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	68fa      	ldr	r2, [r7, #12]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	695b      	ldr	r3, [r3, #20]
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	68fa      	ldr	r2, [r7, #12]
 8006faa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	689a      	ldr	r2, [r3, #8]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4a0e      	ldr	r2, [pc, #56]	; (8006ff8 <TIM_Base_SetConfig+0xcc>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d00b      	beq.n	8006fdc <TIM_Base_SetConfig+0xb0>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	4a0d      	ldr	r2, [pc, #52]	; (8006ffc <TIM_Base_SetConfig+0xd0>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d007      	beq.n	8006fdc <TIM_Base_SetConfig+0xb0>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	4a0c      	ldr	r2, [pc, #48]	; (8007000 <TIM_Base_SetConfig+0xd4>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d003      	beq.n	8006fdc <TIM_Base_SetConfig+0xb0>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	4a0b      	ldr	r2, [pc, #44]	; (8007004 <TIM_Base_SetConfig+0xd8>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d103      	bne.n	8006fe4 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	691a      	ldr	r2, [r3, #16]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	615a      	str	r2, [r3, #20]
}
 8006fea:	bf00      	nop
 8006fec:	3714      	adds	r7, #20
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr
 8006ff6:	bf00      	nop
 8006ff8:	40012c00 	.word	0x40012c00
 8006ffc:	40014000 	.word	0x40014000
 8007000:	40014400 	.word	0x40014400
 8007004:	40014800 	.word	0x40014800

08007008 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007008:	b480      	push	{r7}
 800700a:	b087      	sub	sp, #28
 800700c:	af00      	add	r7, sp, #0
 800700e:	60f8      	str	r0, [r7, #12]
 8007010:	60b9      	str	r1, [r7, #8]
 8007012:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6a1b      	ldr	r3, [r3, #32]
 8007018:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	6a1b      	ldr	r3, [r3, #32]
 800701e:	f023 0201 	bic.w	r2, r3, #1
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	699b      	ldr	r3, [r3, #24]
 800702a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007032:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	011b      	lsls	r3, r3, #4
 8007038:	693a      	ldr	r2, [r7, #16]
 800703a:	4313      	orrs	r3, r2
 800703c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	f023 030a 	bic.w	r3, r3, #10
 8007044:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007046:	697a      	ldr	r2, [r7, #20]
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	4313      	orrs	r3, r2
 800704c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	693a      	ldr	r2, [r7, #16]
 8007052:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	697a      	ldr	r2, [r7, #20]
 8007058:	621a      	str	r2, [r3, #32]
}
 800705a:	bf00      	nop
 800705c:	371c      	adds	r7, #28
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr

08007066 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007066:	b480      	push	{r7}
 8007068:	b087      	sub	sp, #28
 800706a:	af00      	add	r7, sp, #0
 800706c:	60f8      	str	r0, [r7, #12]
 800706e:	60b9      	str	r1, [r7, #8]
 8007070:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	6a1b      	ldr	r3, [r3, #32]
 8007076:	f023 0210 	bic.w	r2, r3, #16
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	699b      	ldr	r3, [r3, #24]
 8007082:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	6a1b      	ldr	r3, [r3, #32]
 8007088:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007090:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	031b      	lsls	r3, r3, #12
 8007096:	697a      	ldr	r2, [r7, #20]
 8007098:	4313      	orrs	r3, r2
 800709a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80070a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	011b      	lsls	r3, r3, #4
 80070a8:	693a      	ldr	r2, [r7, #16]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	697a      	ldr	r2, [r7, #20]
 80070b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	693a      	ldr	r2, [r7, #16]
 80070b8:	621a      	str	r2, [r3, #32]
}
 80070ba:	bf00      	nop
 80070bc:	371c      	adds	r7, #28
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr

080070c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80070c6:	b480      	push	{r7}
 80070c8:	b085      	sub	sp, #20
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
 80070ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80070de:	683a      	ldr	r2, [r7, #0]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	4313      	orrs	r3, r2
 80070e4:	f043 0307 	orr.w	r3, r3, #7
 80070e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	68fa      	ldr	r2, [r7, #12]
 80070ee:	609a      	str	r2, [r3, #8]
}
 80070f0:	bf00      	nop
 80070f2:	3714      	adds	r7, #20
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b087      	sub	sp, #28
 8007100:	af00      	add	r7, sp, #0
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	60b9      	str	r1, [r7, #8]
 8007106:	607a      	str	r2, [r7, #4]
 8007108:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007116:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	021a      	lsls	r2, r3, #8
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	431a      	orrs	r2, r3
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	4313      	orrs	r3, r2
 8007124:	697a      	ldr	r2, [r7, #20]
 8007126:	4313      	orrs	r3, r2
 8007128:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	697a      	ldr	r2, [r7, #20]
 800712e:	609a      	str	r2, [r3, #8]
}
 8007130:	bf00      	nop
 8007132:	371c      	adds	r7, #28
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr

0800713c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800713c:	b480      	push	{r7}
 800713e:	b085      	sub	sp, #20
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800714c:	2b01      	cmp	r3, #1
 800714e:	d101      	bne.n	8007154 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007150:	2302      	movs	r3, #2
 8007152:	e04f      	b.n	80071f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2201      	movs	r2, #1
 8007158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2202      	movs	r2, #2
 8007160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a21      	ldr	r2, [pc, #132]	; (8007200 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d108      	bne.n	8007190 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007184:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	68fa      	ldr	r2, [r7, #12]
 800718c:	4313      	orrs	r3, r2
 800718e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007196:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	68fa      	ldr	r2, [r7, #12]
 800719e:	4313      	orrs	r3, r2
 80071a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	68fa      	ldr	r2, [r7, #12]
 80071a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a14      	ldr	r2, [pc, #80]	; (8007200 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d009      	beq.n	80071c8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071bc:	d004      	beq.n	80071c8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a10      	ldr	r2, [pc, #64]	; (8007204 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d10c      	bne.n	80071e2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	68ba      	ldr	r2, [r7, #8]
 80071d6:	4313      	orrs	r3, r2
 80071d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	68ba      	ldr	r2, [r7, #8]
 80071e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2201      	movs	r2, #1
 80071e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071f2:	2300      	movs	r3, #0
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3714      	adds	r7, #20
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr
 8007200:	40012c00 	.word	0x40012c00
 8007204:	40014000 	.word	0x40014000

08007208 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007210:	bf00      	nop
 8007212:	370c      	adds	r7, #12
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007224:	bf00      	nop
 8007226:	370c      	adds	r7, #12
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr

08007230 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007230:	b480      	push	{r7}
 8007232:	b083      	sub	sp, #12
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007238:	bf00      	nop
 800723a:	370c      	adds	r7, #12
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b082      	sub	sp, #8
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d101      	bne.n	8007256 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	e040      	b.n	80072d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800725a:	2b00      	cmp	r3, #0
 800725c:	d106      	bne.n	800726c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f7fc f980 	bl	800356c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2224      	movs	r2, #36	; 0x24
 8007270:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f022 0201 	bic.w	r2, r2, #1
 8007280:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 f980 	bl	8007588 <UART_SetConfig>
 8007288:	4603      	mov	r3, r0
 800728a:	2b01      	cmp	r3, #1
 800728c:	d101      	bne.n	8007292 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	e022      	b.n	80072d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007296:	2b00      	cmp	r3, #0
 8007298:	d002      	beq.n	80072a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 faaa 	bl	80077f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	685a      	ldr	r2, [r3, #4]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80072ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	689a      	ldr	r2, [r3, #8]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80072be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f042 0201 	orr.w	r2, r2, #1
 80072ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 fb31 	bl	8007938 <UART_CheckIdleState>
 80072d6:	4603      	mov	r3, r0
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3708      	adds	r7, #8
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}

080072e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b08a      	sub	sp, #40	; 0x28
 80072e4:	af02      	add	r7, sp, #8
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	603b      	str	r3, [r7, #0]
 80072ec:	4613      	mov	r3, r2
 80072ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072f4:	2b20      	cmp	r3, #32
 80072f6:	d178      	bne.n	80073ea <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d002      	beq.n	8007304 <HAL_UART_Transmit+0x24>
 80072fe:	88fb      	ldrh	r3, [r7, #6]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d101      	bne.n	8007308 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007304:	2301      	movs	r3, #1
 8007306:	e071      	b.n	80073ec <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2200      	movs	r2, #0
 800730c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2221      	movs	r2, #33	; 0x21
 8007314:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007316:	f7fc fe11 	bl	8003f3c <HAL_GetTick>
 800731a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	88fa      	ldrh	r2, [r7, #6]
 8007320:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	88fa      	ldrh	r2, [r7, #6]
 8007328:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007334:	d108      	bne.n	8007348 <HAL_UART_Transmit+0x68>
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d104      	bne.n	8007348 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800733e:	2300      	movs	r3, #0
 8007340:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	61bb      	str	r3, [r7, #24]
 8007346:	e003      	b.n	8007350 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800734c:	2300      	movs	r3, #0
 800734e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007350:	e030      	b.n	80073b4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	9300      	str	r3, [sp, #0]
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	2200      	movs	r2, #0
 800735a:	2180      	movs	r1, #128	; 0x80
 800735c:	68f8      	ldr	r0, [r7, #12]
 800735e:	f000 fb93 	bl	8007a88 <UART_WaitOnFlagUntilTimeout>
 8007362:	4603      	mov	r3, r0
 8007364:	2b00      	cmp	r3, #0
 8007366:	d004      	beq.n	8007372 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2220      	movs	r2, #32
 800736c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800736e:	2303      	movs	r3, #3
 8007370:	e03c      	b.n	80073ec <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8007372:	69fb      	ldr	r3, [r7, #28]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d10b      	bne.n	8007390 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007378:	69bb      	ldr	r3, [r7, #24]
 800737a:	881a      	ldrh	r2, [r3, #0]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007384:	b292      	uxth	r2, r2
 8007386:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007388:	69bb      	ldr	r3, [r7, #24]
 800738a:	3302      	adds	r3, #2
 800738c:	61bb      	str	r3, [r7, #24]
 800738e:	e008      	b.n	80073a2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007390:	69fb      	ldr	r3, [r7, #28]
 8007392:	781a      	ldrb	r2, [r3, #0]
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	b292      	uxth	r2, r2
 800739a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800739c:	69fb      	ldr	r3, [r7, #28]
 800739e:	3301      	adds	r3, #1
 80073a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	3b01      	subs	r3, #1
 80073ac:	b29a      	uxth	r2, r3
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d1c8      	bne.n	8007352 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	9300      	str	r3, [sp, #0]
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	2200      	movs	r2, #0
 80073c8:	2140      	movs	r1, #64	; 0x40
 80073ca:	68f8      	ldr	r0, [r7, #12]
 80073cc:	f000 fb5c 	bl	8007a88 <UART_WaitOnFlagUntilTimeout>
 80073d0:	4603      	mov	r3, r0
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d004      	beq.n	80073e0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2220      	movs	r2, #32
 80073da:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80073dc:	2303      	movs	r3, #3
 80073de:	e005      	b.n	80073ec <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2220      	movs	r2, #32
 80073e4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80073e6:	2300      	movs	r3, #0
 80073e8:	e000      	b.n	80073ec <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80073ea:	2302      	movs	r3, #2
  }
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3720      	adds	r7, #32
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b08a      	sub	sp, #40	; 0x28
 80073f8:	af02      	add	r7, sp, #8
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	603b      	str	r3, [r7, #0]
 8007400:	4613      	mov	r3, r2
 8007402:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800740a:	2b20      	cmp	r3, #32
 800740c:	f040 80b6 	bne.w	800757c <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d002      	beq.n	800741c <HAL_UART_Receive+0x28>
 8007416:	88fb      	ldrh	r3, [r7, #6]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d101      	bne.n	8007420 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800741c:	2301      	movs	r3, #1
 800741e:	e0ae      	b.n	800757e <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2200      	movs	r2, #0
 8007424:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2222      	movs	r2, #34	; 0x22
 800742c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2200      	movs	r2, #0
 8007434:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007436:	f7fc fd81 	bl	8003f3c <HAL_GetTick>
 800743a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	88fa      	ldrh	r2, [r7, #6]
 8007440:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	88fa      	ldrh	r2, [r7, #6]
 8007448:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007454:	d10e      	bne.n	8007474 <HAL_UART_Receive+0x80>
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	691b      	ldr	r3, [r3, #16]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d105      	bne.n	800746a <HAL_UART_Receive+0x76>
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007464:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007468:	e02d      	b.n	80074c6 <HAL_UART_Receive+0xd2>
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	22ff      	movs	r2, #255	; 0xff
 800746e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007472:	e028      	b.n	80074c6 <HAL_UART_Receive+0xd2>
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d10d      	bne.n	8007498 <HAL_UART_Receive+0xa4>
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	691b      	ldr	r3, [r3, #16]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d104      	bne.n	800748e <HAL_UART_Receive+0x9a>
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	22ff      	movs	r2, #255	; 0xff
 8007488:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800748c:	e01b      	b.n	80074c6 <HAL_UART_Receive+0xd2>
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	227f      	movs	r2, #127	; 0x7f
 8007492:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007496:	e016      	b.n	80074c6 <HAL_UART_Receive+0xd2>
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074a0:	d10d      	bne.n	80074be <HAL_UART_Receive+0xca>
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	691b      	ldr	r3, [r3, #16]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d104      	bne.n	80074b4 <HAL_UART_Receive+0xc0>
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	227f      	movs	r2, #127	; 0x7f
 80074ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80074b2:	e008      	b.n	80074c6 <HAL_UART_Receive+0xd2>
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	223f      	movs	r2, #63	; 0x3f
 80074b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80074bc:	e003      	b.n	80074c6 <HAL_UART_Receive+0xd2>
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2200      	movs	r2, #0
 80074c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80074cc:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074d6:	d108      	bne.n	80074ea <HAL_UART_Receive+0xf6>
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	691b      	ldr	r3, [r3, #16]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d104      	bne.n	80074ea <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80074e0:	2300      	movs	r3, #0
 80074e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	61bb      	str	r3, [r7, #24]
 80074e8:	e003      	b.n	80074f2 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80074ee:	2300      	movs	r3, #0
 80074f0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80074f2:	e037      	b.n	8007564 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	9300      	str	r3, [sp, #0]
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	2200      	movs	r2, #0
 80074fc:	2120      	movs	r1, #32
 80074fe:	68f8      	ldr	r0, [r7, #12]
 8007500:	f000 fac2 	bl	8007a88 <UART_WaitOnFlagUntilTimeout>
 8007504:	4603      	mov	r3, r0
 8007506:	2b00      	cmp	r3, #0
 8007508:	d005      	beq.n	8007516 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2220      	movs	r2, #32
 800750e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007512:	2303      	movs	r3, #3
 8007514:	e033      	b.n	800757e <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8007516:	69fb      	ldr	r3, [r7, #28]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d10c      	bne.n	8007536 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007522:	b29a      	uxth	r2, r3
 8007524:	8a7b      	ldrh	r3, [r7, #18]
 8007526:	4013      	ands	r3, r2
 8007528:	b29a      	uxth	r2, r3
 800752a:	69bb      	ldr	r3, [r7, #24]
 800752c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800752e:	69bb      	ldr	r3, [r7, #24]
 8007530:	3302      	adds	r3, #2
 8007532:	61bb      	str	r3, [r7, #24]
 8007534:	e00d      	b.n	8007552 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800753c:	b29b      	uxth	r3, r3
 800753e:	b2da      	uxtb	r2, r3
 8007540:	8a7b      	ldrh	r3, [r7, #18]
 8007542:	b2db      	uxtb	r3, r3
 8007544:	4013      	ands	r3, r2
 8007546:	b2da      	uxtb	r2, r3
 8007548:	69fb      	ldr	r3, [r7, #28]
 800754a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800754c:	69fb      	ldr	r3, [r7, #28]
 800754e:	3301      	adds	r3, #1
 8007550:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007558:	b29b      	uxth	r3, r3
 800755a:	3b01      	subs	r3, #1
 800755c:	b29a      	uxth	r2, r3
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800756a:	b29b      	uxth	r3, r3
 800756c:	2b00      	cmp	r3, #0
 800756e:	d1c1      	bne.n	80074f4 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2220      	movs	r2, #32
 8007574:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8007578:	2300      	movs	r3, #0
 800757a:	e000      	b.n	800757e <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 800757c:	2302      	movs	r3, #2
  }
}
 800757e:	4618      	mov	r0, r3
 8007580:	3720      	adds	r7, #32
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
	...

08007588 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b088      	sub	sp, #32
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007590:	2300      	movs	r3, #0
 8007592:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	689a      	ldr	r2, [r3, #8]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	691b      	ldr	r3, [r3, #16]
 800759c:	431a      	orrs	r2, r3
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	695b      	ldr	r3, [r3, #20]
 80075a2:	431a      	orrs	r2, r3
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	69db      	ldr	r3, [r3, #28]
 80075a8:	4313      	orrs	r3, r2
 80075aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	4b8a      	ldr	r3, [pc, #552]	; (80077dc <UART_SetConfig+0x254>)
 80075b4:	4013      	ands	r3, r2
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	6812      	ldr	r2, [r2, #0]
 80075ba:	6979      	ldr	r1, [r7, #20]
 80075bc:	430b      	orrs	r3, r1
 80075be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	68da      	ldr	r2, [r3, #12]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	430a      	orrs	r2, r1
 80075d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	699b      	ldr	r3, [r3, #24]
 80075da:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6a1b      	ldr	r3, [r3, #32]
 80075e0:	697a      	ldr	r2, [r7, #20]
 80075e2:	4313      	orrs	r3, r2
 80075e4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	697a      	ldr	r2, [r7, #20]
 80075f6:	430a      	orrs	r2, r1
 80075f8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a78      	ldr	r2, [pc, #480]	; (80077e0 <UART_SetConfig+0x258>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d120      	bne.n	8007646 <UART_SetConfig+0xbe>
 8007604:	4b77      	ldr	r3, [pc, #476]	; (80077e4 <UART_SetConfig+0x25c>)
 8007606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007608:	f003 0303 	and.w	r3, r3, #3
 800760c:	2b03      	cmp	r3, #3
 800760e:	d817      	bhi.n	8007640 <UART_SetConfig+0xb8>
 8007610:	a201      	add	r2, pc, #4	; (adr r2, 8007618 <UART_SetConfig+0x90>)
 8007612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007616:	bf00      	nop
 8007618:	08007629 	.word	0x08007629
 800761c:	08007635 	.word	0x08007635
 8007620:	0800763b 	.word	0x0800763b
 8007624:	0800762f 	.word	0x0800762f
 8007628:	2300      	movs	r3, #0
 800762a:	77fb      	strb	r3, [r7, #31]
 800762c:	e01d      	b.n	800766a <UART_SetConfig+0xe2>
 800762e:	2302      	movs	r3, #2
 8007630:	77fb      	strb	r3, [r7, #31]
 8007632:	e01a      	b.n	800766a <UART_SetConfig+0xe2>
 8007634:	2304      	movs	r3, #4
 8007636:	77fb      	strb	r3, [r7, #31]
 8007638:	e017      	b.n	800766a <UART_SetConfig+0xe2>
 800763a:	2308      	movs	r3, #8
 800763c:	77fb      	strb	r3, [r7, #31]
 800763e:	e014      	b.n	800766a <UART_SetConfig+0xe2>
 8007640:	2310      	movs	r3, #16
 8007642:	77fb      	strb	r3, [r7, #31]
 8007644:	e011      	b.n	800766a <UART_SetConfig+0xe2>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a67      	ldr	r2, [pc, #412]	; (80077e8 <UART_SetConfig+0x260>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d102      	bne.n	8007656 <UART_SetConfig+0xce>
 8007650:	2300      	movs	r3, #0
 8007652:	77fb      	strb	r3, [r7, #31]
 8007654:	e009      	b.n	800766a <UART_SetConfig+0xe2>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a64      	ldr	r2, [pc, #400]	; (80077ec <UART_SetConfig+0x264>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d102      	bne.n	8007666 <UART_SetConfig+0xde>
 8007660:	2300      	movs	r3, #0
 8007662:	77fb      	strb	r3, [r7, #31]
 8007664:	e001      	b.n	800766a <UART_SetConfig+0xe2>
 8007666:	2310      	movs	r3, #16
 8007668:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	69db      	ldr	r3, [r3, #28]
 800766e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007672:	d15a      	bne.n	800772a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8007674:	7ffb      	ldrb	r3, [r7, #31]
 8007676:	2b08      	cmp	r3, #8
 8007678:	d827      	bhi.n	80076ca <UART_SetConfig+0x142>
 800767a:	a201      	add	r2, pc, #4	; (adr r2, 8007680 <UART_SetConfig+0xf8>)
 800767c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007680:	080076a5 	.word	0x080076a5
 8007684:	080076ad 	.word	0x080076ad
 8007688:	080076b5 	.word	0x080076b5
 800768c:	080076cb 	.word	0x080076cb
 8007690:	080076bb 	.word	0x080076bb
 8007694:	080076cb 	.word	0x080076cb
 8007698:	080076cb 	.word	0x080076cb
 800769c:	080076cb 	.word	0x080076cb
 80076a0:	080076c3 	.word	0x080076c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076a4:	f7fe fee2 	bl	800646c <HAL_RCC_GetPCLK1Freq>
 80076a8:	61b8      	str	r0, [r7, #24]
        break;
 80076aa:	e013      	b.n	80076d4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076ac:	f7fe ff00 	bl	80064b0 <HAL_RCC_GetPCLK2Freq>
 80076b0:	61b8      	str	r0, [r7, #24]
        break;
 80076b2:	e00f      	b.n	80076d4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076b4:	4b4e      	ldr	r3, [pc, #312]	; (80077f0 <UART_SetConfig+0x268>)
 80076b6:	61bb      	str	r3, [r7, #24]
        break;
 80076b8:	e00c      	b.n	80076d4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076ba:	f7fe fe61 	bl	8006380 <HAL_RCC_GetSysClockFreq>
 80076be:	61b8      	str	r0, [r7, #24]
        break;
 80076c0:	e008      	b.n	80076d4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076c6:	61bb      	str	r3, [r7, #24]
        break;
 80076c8:	e004      	b.n	80076d4 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80076ca:	2300      	movs	r3, #0
 80076cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80076ce:	2301      	movs	r3, #1
 80076d0:	77bb      	strb	r3, [r7, #30]
        break;
 80076d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80076d4:	69bb      	ldr	r3, [r7, #24]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d074      	beq.n	80077c4 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80076da:	69bb      	ldr	r3, [r7, #24]
 80076dc:	005a      	lsls	r2, r3, #1
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	085b      	lsrs	r3, r3, #1
 80076e4:	441a      	add	r2, r3
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80076ee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	2b0f      	cmp	r3, #15
 80076f4:	d916      	bls.n	8007724 <UART_SetConfig+0x19c>
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076fc:	d212      	bcs.n	8007724 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	b29b      	uxth	r3, r3
 8007702:	f023 030f 	bic.w	r3, r3, #15
 8007706:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	085b      	lsrs	r3, r3, #1
 800770c:	b29b      	uxth	r3, r3
 800770e:	f003 0307 	and.w	r3, r3, #7
 8007712:	b29a      	uxth	r2, r3
 8007714:	89fb      	ldrh	r3, [r7, #14]
 8007716:	4313      	orrs	r3, r2
 8007718:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	89fa      	ldrh	r2, [r7, #14]
 8007720:	60da      	str	r2, [r3, #12]
 8007722:	e04f      	b.n	80077c4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8007724:	2301      	movs	r3, #1
 8007726:	77bb      	strb	r3, [r7, #30]
 8007728:	e04c      	b.n	80077c4 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800772a:	7ffb      	ldrb	r3, [r7, #31]
 800772c:	2b08      	cmp	r3, #8
 800772e:	d828      	bhi.n	8007782 <UART_SetConfig+0x1fa>
 8007730:	a201      	add	r2, pc, #4	; (adr r2, 8007738 <UART_SetConfig+0x1b0>)
 8007732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007736:	bf00      	nop
 8007738:	0800775d 	.word	0x0800775d
 800773c:	08007765 	.word	0x08007765
 8007740:	0800776d 	.word	0x0800776d
 8007744:	08007783 	.word	0x08007783
 8007748:	08007773 	.word	0x08007773
 800774c:	08007783 	.word	0x08007783
 8007750:	08007783 	.word	0x08007783
 8007754:	08007783 	.word	0x08007783
 8007758:	0800777b 	.word	0x0800777b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800775c:	f7fe fe86 	bl	800646c <HAL_RCC_GetPCLK1Freq>
 8007760:	61b8      	str	r0, [r7, #24]
        break;
 8007762:	e013      	b.n	800778c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007764:	f7fe fea4 	bl	80064b0 <HAL_RCC_GetPCLK2Freq>
 8007768:	61b8      	str	r0, [r7, #24]
        break;
 800776a:	e00f      	b.n	800778c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800776c:	4b20      	ldr	r3, [pc, #128]	; (80077f0 <UART_SetConfig+0x268>)
 800776e:	61bb      	str	r3, [r7, #24]
        break;
 8007770:	e00c      	b.n	800778c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007772:	f7fe fe05 	bl	8006380 <HAL_RCC_GetSysClockFreq>
 8007776:	61b8      	str	r0, [r7, #24]
        break;
 8007778:	e008      	b.n	800778c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800777a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800777e:	61bb      	str	r3, [r7, #24]
        break;
 8007780:	e004      	b.n	800778c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8007782:	2300      	movs	r3, #0
 8007784:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007786:	2301      	movs	r3, #1
 8007788:	77bb      	strb	r3, [r7, #30]
        break;
 800778a:	bf00      	nop
    }

    if (pclk != 0U)
 800778c:	69bb      	ldr	r3, [r7, #24]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d018      	beq.n	80077c4 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	085a      	lsrs	r2, r3, #1
 8007798:	69bb      	ldr	r3, [r7, #24]
 800779a:	441a      	add	r2, r3
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80077a4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	2b0f      	cmp	r3, #15
 80077aa:	d909      	bls.n	80077c0 <UART_SetConfig+0x238>
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077b2:	d205      	bcs.n	80077c0 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	b29a      	uxth	r2, r3
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	60da      	str	r2, [r3, #12]
 80077be:	e001      	b.n	80077c4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80077c0:	2301      	movs	r3, #1
 80077c2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2200      	movs	r2, #0
 80077c8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80077d0:	7fbb      	ldrb	r3, [r7, #30]
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3720      	adds	r7, #32
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}
 80077da:	bf00      	nop
 80077dc:	efff69f3 	.word	0xefff69f3
 80077e0:	40013800 	.word	0x40013800
 80077e4:	40021000 	.word	0x40021000
 80077e8:	40004400 	.word	0x40004400
 80077ec:	40004800 	.word	0x40004800
 80077f0:	007a1200 	.word	0x007a1200

080077f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007800:	f003 0301 	and.w	r3, r3, #1
 8007804:	2b00      	cmp	r3, #0
 8007806:	d00a      	beq.n	800781e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	430a      	orrs	r2, r1
 800781c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007822:	f003 0302 	and.w	r3, r3, #2
 8007826:	2b00      	cmp	r3, #0
 8007828:	d00a      	beq.n	8007840 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	430a      	orrs	r2, r1
 800783e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007844:	f003 0304 	and.w	r3, r3, #4
 8007848:	2b00      	cmp	r3, #0
 800784a:	d00a      	beq.n	8007862 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	430a      	orrs	r2, r1
 8007860:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007866:	f003 0308 	and.w	r3, r3, #8
 800786a:	2b00      	cmp	r3, #0
 800786c:	d00a      	beq.n	8007884 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	430a      	orrs	r2, r1
 8007882:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007888:	f003 0310 	and.w	r3, r3, #16
 800788c:	2b00      	cmp	r3, #0
 800788e:	d00a      	beq.n	80078a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	430a      	orrs	r2, r1
 80078a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078aa:	f003 0320 	and.w	r3, r3, #32
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d00a      	beq.n	80078c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	430a      	orrs	r2, r1
 80078c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d01a      	beq.n	800790a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	430a      	orrs	r2, r1
 80078e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078f2:	d10a      	bne.n	800790a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	430a      	orrs	r2, r1
 8007908:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800790e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007912:	2b00      	cmp	r3, #0
 8007914:	d00a      	beq.n	800792c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	430a      	orrs	r2, r1
 800792a:	605a      	str	r2, [r3, #4]
  }
}
 800792c:	bf00      	nop
 800792e:	370c      	adds	r7, #12
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr

08007938 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b098      	sub	sp, #96	; 0x60
 800793c:	af02      	add	r7, sp, #8
 800793e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007948:	f7fc faf8 	bl	8003f3c <HAL_GetTick>
 800794c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f003 0308 	and.w	r3, r3, #8
 8007958:	2b08      	cmp	r3, #8
 800795a:	d12e      	bne.n	80079ba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800795c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007960:	9300      	str	r3, [sp, #0]
 8007962:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007964:	2200      	movs	r2, #0
 8007966:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 f88c 	bl	8007a88 <UART_WaitOnFlagUntilTimeout>
 8007970:	4603      	mov	r3, r0
 8007972:	2b00      	cmp	r3, #0
 8007974:	d021      	beq.n	80079ba <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800797c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800797e:	e853 3f00 	ldrex	r3, [r3]
 8007982:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007986:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800798a:	653b      	str	r3, [r7, #80]	; 0x50
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	461a      	mov	r2, r3
 8007992:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007994:	647b      	str	r3, [r7, #68]	; 0x44
 8007996:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007998:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800799a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800799c:	e841 2300 	strex	r3, r2, [r1]
 80079a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80079a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d1e6      	bne.n	8007976 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2220      	movs	r2, #32
 80079ac:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2200      	movs	r2, #0
 80079b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079b6:	2303      	movs	r3, #3
 80079b8:	e062      	b.n	8007a80 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f003 0304 	and.w	r3, r3, #4
 80079c4:	2b04      	cmp	r3, #4
 80079c6:	d149      	bne.n	8007a5c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80079cc:	9300      	str	r3, [sp, #0]
 80079ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079d0:	2200      	movs	r2, #0
 80079d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 f856 	bl	8007a88 <UART_WaitOnFlagUntilTimeout>
 80079dc:	4603      	mov	r3, r0
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d03c      	beq.n	8007a5c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ea:	e853 3f00 	ldrex	r3, [r3]
 80079ee:	623b      	str	r3, [r7, #32]
   return(result);
 80079f0:	6a3b      	ldr	r3, [r7, #32]
 80079f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	461a      	mov	r2, r3
 80079fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a00:	633b      	str	r3, [r7, #48]	; 0x30
 8007a02:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a08:	e841 2300 	strex	r3, r2, [r1]
 8007a0c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d1e6      	bne.n	80079e2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	3308      	adds	r3, #8
 8007a1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	e853 3f00 	ldrex	r3, [r3]
 8007a22:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f023 0301 	bic.w	r3, r3, #1
 8007a2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	3308      	adds	r3, #8
 8007a32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a34:	61fa      	str	r2, [r7, #28]
 8007a36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a38:	69b9      	ldr	r1, [r7, #24]
 8007a3a:	69fa      	ldr	r2, [r7, #28]
 8007a3c:	e841 2300 	strex	r3, r2, [r1]
 8007a40:	617b      	str	r3, [r7, #20]
   return(result);
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d1e5      	bne.n	8007a14 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2220      	movs	r2, #32
 8007a4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2200      	movs	r2, #0
 8007a54:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a58:	2303      	movs	r3, #3
 8007a5a:	e011      	b.n	8007a80 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2220      	movs	r2, #32
 8007a60:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2220      	movs	r2, #32
 8007a66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2200      	movs	r2, #0
 8007a74:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007a7e:	2300      	movs	r3, #0
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3758      	adds	r7, #88	; 0x58
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b084      	sub	sp, #16
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	60f8      	str	r0, [r7, #12]
 8007a90:	60b9      	str	r1, [r7, #8]
 8007a92:	603b      	str	r3, [r7, #0]
 8007a94:	4613      	mov	r3, r2
 8007a96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a98:	e049      	b.n	8007b2e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a9a:	69bb      	ldr	r3, [r7, #24]
 8007a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aa0:	d045      	beq.n	8007b2e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007aa2:	f7fc fa4b 	bl	8003f3c <HAL_GetTick>
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	1ad3      	subs	r3, r2, r3
 8007aac:	69ba      	ldr	r2, [r7, #24]
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d302      	bcc.n	8007ab8 <UART_WaitOnFlagUntilTimeout+0x30>
 8007ab2:	69bb      	ldr	r3, [r7, #24]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d101      	bne.n	8007abc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007ab8:	2303      	movs	r3, #3
 8007aba:	e048      	b.n	8007b4e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f003 0304 	and.w	r3, r3, #4
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d031      	beq.n	8007b2e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	69db      	ldr	r3, [r3, #28]
 8007ad0:	f003 0308 	and.w	r3, r3, #8
 8007ad4:	2b08      	cmp	r3, #8
 8007ad6:	d110      	bne.n	8007afa <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	2208      	movs	r2, #8
 8007ade:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007ae0:	68f8      	ldr	r0, [r7, #12]
 8007ae2:	f000 f838 	bl	8007b56 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2208      	movs	r2, #8
 8007aea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2200      	movs	r2, #0
 8007af2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	e029      	b.n	8007b4e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	69db      	ldr	r3, [r3, #28]
 8007b00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b08:	d111      	bne.n	8007b2e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b14:	68f8      	ldr	r0, [r7, #12]
 8007b16:	f000 f81e 	bl	8007b56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2220      	movs	r2, #32
 8007b1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2200      	movs	r2, #0
 8007b26:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007b2a:	2303      	movs	r3, #3
 8007b2c:	e00f      	b.n	8007b4e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	69da      	ldr	r2, [r3, #28]
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	4013      	ands	r3, r2
 8007b38:	68ba      	ldr	r2, [r7, #8]
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	bf0c      	ite	eq
 8007b3e:	2301      	moveq	r3, #1
 8007b40:	2300      	movne	r3, #0
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	461a      	mov	r2, r3
 8007b46:	79fb      	ldrb	r3, [r7, #7]
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d0a6      	beq.n	8007a9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b4c:	2300      	movs	r3, #0
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3710      	adds	r7, #16
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}

08007b56 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b56:	b480      	push	{r7}
 8007b58:	b095      	sub	sp, #84	; 0x54
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b66:	e853 3f00 	ldrex	r3, [r3]
 8007b6a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	461a      	mov	r2, r3
 8007b7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b7c:	643b      	str	r3, [r7, #64]	; 0x40
 8007b7e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007b82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007b84:	e841 2300 	strex	r3, r2, [r1]
 8007b88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d1e6      	bne.n	8007b5e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	3308      	adds	r3, #8
 8007b96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b98:	6a3b      	ldr	r3, [r7, #32]
 8007b9a:	e853 3f00 	ldrex	r3, [r3]
 8007b9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ba0:	69fb      	ldr	r3, [r7, #28]
 8007ba2:	f023 0301 	bic.w	r3, r3, #1
 8007ba6:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	3308      	adds	r3, #8
 8007bae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007bb0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007bb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bb8:	e841 2300 	strex	r3, r2, [r1]
 8007bbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d1e5      	bne.n	8007b90 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	d118      	bne.n	8007bfe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	e853 3f00 	ldrex	r3, [r3]
 8007bd8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	f023 0310 	bic.w	r3, r3, #16
 8007be0:	647b      	str	r3, [r7, #68]	; 0x44
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	461a      	mov	r2, r3
 8007be8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bea:	61bb      	str	r3, [r7, #24]
 8007bec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bee:	6979      	ldr	r1, [r7, #20]
 8007bf0:	69ba      	ldr	r2, [r7, #24]
 8007bf2:	e841 2300 	strex	r3, r2, [r1]
 8007bf6:	613b      	str	r3, [r7, #16]
   return(result);
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d1e6      	bne.n	8007bcc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2220      	movs	r2, #32
 8007c02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007c12:	bf00      	nop
 8007c14:	3754      	adds	r7, #84	; 0x54
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr

08007c1e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007c1e:	b480      	push	{r7}
 8007c20:	b085      	sub	sp, #20
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	4603      	mov	r3, r0
 8007c26:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007c2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007c30:	2b84      	cmp	r3, #132	; 0x84
 8007c32:	d005      	beq.n	8007c40 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007c34:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	4413      	add	r3, r2
 8007c3c:	3303      	adds	r3, #3
 8007c3e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007c40:	68fb      	ldr	r3, [r7, #12]
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3714      	adds	r7, #20
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr

08007c4e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007c52:	f001 f8b9 	bl	8008dc8 <vTaskStartScheduler>
  
  return osOK;
 8007c56:	2300      	movs	r3, #0
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c5e:	b089      	sub	sp, #36	; 0x24
 8007c60:	af04      	add	r7, sp, #16
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	695b      	ldr	r3, [r3, #20]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d020      	beq.n	8007cb0 <osThreadCreate+0x54>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	699b      	ldr	r3, [r3, #24]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d01c      	beq.n	8007cb0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	685c      	ldr	r4, [r3, #4]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	691e      	ldr	r6, [r3, #16]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f7ff ffc8 	bl	8007c1e <makeFreeRtosPriority>
 8007c8e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	695b      	ldr	r3, [r3, #20]
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007c98:	9202      	str	r2, [sp, #8]
 8007c9a:	9301      	str	r3, [sp, #4]
 8007c9c:	9100      	str	r1, [sp, #0]
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	4632      	mov	r2, r6
 8007ca2:	4629      	mov	r1, r5
 8007ca4:	4620      	mov	r0, r4
 8007ca6:	f000 fed1 	bl	8008a4c <xTaskCreateStatic>
 8007caa:	4603      	mov	r3, r0
 8007cac:	60fb      	str	r3, [r7, #12]
 8007cae:	e01c      	b.n	8007cea <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	685c      	ldr	r4, [r3, #4]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007cbc:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f7ff ffaa 	bl	8007c1e <makeFreeRtosPriority>
 8007cca:	4602      	mov	r2, r0
 8007ccc:	f107 030c 	add.w	r3, r7, #12
 8007cd0:	9301      	str	r3, [sp, #4]
 8007cd2:	9200      	str	r2, [sp, #0]
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	4632      	mov	r2, r6
 8007cd8:	4629      	mov	r1, r5
 8007cda:	4620      	mov	r0, r4
 8007cdc:	f000 ff12 	bl	8008b04 <xTaskCreate>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d001      	beq.n	8007cea <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	e000      	b.n	8007cec <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007cea:	68fb      	ldr	r3, [r7, #12]
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3714      	adds	r7, #20
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007cf4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d001      	beq.n	8007d0a <osDelay+0x16>
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	e000      	b.n	8007d0c <osDelay+0x18>
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f001 f827 	bl	8008d60 <vTaskDelay>
  
  return osOK;
 8007d12:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3710      	adds	r7, #16
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b082      	sub	sp, #8
 8007d20:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8007d22:	201c      	movs	r0, #28
 8007d24:	f002 fbc0 	bl	800a4a8 <pvPortMalloc>
 8007d28:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d00a      	beq.n	8007d46 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2200      	movs	r2, #0
 8007d34:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	3304      	adds	r3, #4
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f000 f8ef 	bl	8007f1e <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2200      	movs	r2, #0
 8007d44:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8007d46:	687b      	ldr	r3, [r7, #4]
	}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3708      	adds	r7, #8
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <xEventGroupClearBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b086      	sub	sp, #24
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d10a      	bne.n	8007d7a <xEventGroupClearBits+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d68:	f383 8811 	msr	BASEPRI, r3
 8007d6c:	f3bf 8f6f 	isb	sy
 8007d70:	f3bf 8f4f 	dsb	sy
 8007d74:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007d76:	bf00      	nop
 8007d78:	e7fe      	b.n	8007d78 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d00a      	beq.n	8007d9a <xEventGroupClearBits+0x4a>
	__asm volatile
 8007d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d88:	f383 8811 	msr	BASEPRI, r3
 8007d8c:	f3bf 8f6f 	isb	sy
 8007d90:	f3bf 8f4f 	dsb	sy
 8007d94:	60bb      	str	r3, [r7, #8]
}
 8007d96:	bf00      	nop
 8007d98:	e7fe      	b.n	8007d98 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8007d9a:	f002 fa63 	bl	800a264 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	681a      	ldr	r2, [r3, #0]
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	43db      	mvns	r3, r3
 8007dac:	401a      	ands	r2, r3
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8007db2:	f002 fa87 	bl	800a2c4 <vPortExitCritical>

	return uxReturn;
 8007db6:	693b      	ldr	r3, [r7, #16]
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3718      	adds	r7, #24
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b089      	sub	sp, #36	; 0x24
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007dcc:	f3ef 8211 	mrs	r2, BASEPRI
 8007dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd4:	f383 8811 	msr	BASEPRI, r3
 8007dd8:	f3bf 8f6f 	isb	sy
 8007ddc:	f3bf 8f4f 	dsb	sy
 8007de0:	60fa      	str	r2, [r7, #12]
 8007de2:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007de4:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007de6:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8007de8:	69fb      	ldr	r3, [r7, #28]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	617b      	str	r3, [r7, #20]
 8007dee:	69bb      	ldr	r3, [r7, #24]
 8007df0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007df8:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8007dfa:	697b      	ldr	r3, [r7, #20]
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3724      	adds	r7, #36	; 0x24
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr

08007e08 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b08e      	sub	sp, #56	; 0x38
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8007e12:	2300      	movs	r3, #0
 8007e14:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d10a      	bne.n	8007e3a <xEventGroupSetBits+0x32>
	__asm volatile
 8007e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e28:	f383 8811 	msr	BASEPRI, r3
 8007e2c:	f3bf 8f6f 	isb	sy
 8007e30:	f3bf 8f4f 	dsb	sy
 8007e34:	613b      	str	r3, [r7, #16]
}
 8007e36:	bf00      	nop
 8007e38:	e7fe      	b.n	8007e38 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d00a      	beq.n	8007e5a <xEventGroupSetBits+0x52>
	__asm volatile
 8007e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e48:	f383 8811 	msr	BASEPRI, r3
 8007e4c:	f3bf 8f6f 	isb	sy
 8007e50:	f3bf 8f4f 	dsb	sy
 8007e54:	60fb      	str	r3, [r7, #12]
}
 8007e56:	bf00      	nop
 8007e58:	e7fe      	b.n	8007e58 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8007e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e5c:	3304      	adds	r3, #4
 8007e5e:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e62:	3308      	adds	r3, #8
 8007e64:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8007e66:	f001 f815 	bl	8008e94 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8007e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6c:	68db      	ldr	r3, [r3, #12]
 8007e6e:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8007e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e72:	681a      	ldr	r2, [r3, #0]
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	431a      	orrs	r2, r3
 8007e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e7a:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8007e7c:	e03c      	b.n	8007ef8 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8007e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8007e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8007e8e:	69bb      	ldr	r3, [r7, #24]
 8007e90:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007e94:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8007e96:	69bb      	ldr	r3, [r7, #24]
 8007e98:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007e9c:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d108      	bne.n	8007eba <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8007ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eaa:	681a      	ldr	r2, [r3, #0]
 8007eac:	69bb      	ldr	r3, [r7, #24]
 8007eae:	4013      	ands	r3, r2
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d00b      	beq.n	8007ecc <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007eb8:	e008      	b.n	8007ecc <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8007eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ebc:	681a      	ldr	r2, [r3, #0]
 8007ebe:	69bb      	ldr	r3, [r7, #24]
 8007ec0:	4013      	ands	r3, r2
 8007ec2:	69ba      	ldr	r2, [r7, #24]
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d101      	bne.n	8007ecc <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8007ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d010      	beq.n	8007ef4 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d003      	beq.n	8007ee4 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8007edc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ede:	69bb      	ldr	r3, [r7, #24]
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8007ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007eec:	4619      	mov	r1, r3
 8007eee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007ef0:	f001 fa56 	bl	80093a0 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8007ef4:	69fb      	ldr	r3, [r7, #28]
 8007ef6:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8007ef8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007efa:	6a3b      	ldr	r3, [r7, #32]
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d1be      	bne.n	8007e7e <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8007f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f06:	43db      	mvns	r3, r3
 8007f08:	401a      	ands	r2, r3
 8007f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f0c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8007f0e:	f000 ffcf 	bl	8008eb0 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8007f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f14:	681b      	ldr	r3, [r3, #0]
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3738      	adds	r7, #56	; 0x38
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}

08007f1e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007f1e:	b480      	push	{r7}
 8007f20:	b083      	sub	sp, #12
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f103 0208 	add.w	r2, r3, #8
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f04f 32ff 	mov.w	r2, #4294967295
 8007f36:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f103 0208 	add.w	r2, r3, #8
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f103 0208 	add.w	r2, r3, #8
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007f52:	bf00      	nop
 8007f54:	370c      	adds	r7, #12
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr

08007f5e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007f5e:	b480      	push	{r7}
 8007f60:	b083      	sub	sp, #12
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007f6c:	bf00      	nop
 8007f6e:	370c      	adds	r7, #12
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr

08007f78 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b085      	sub	sp, #20
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	68fa      	ldr	r2, [r7, #12]
 8007f8c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	689a      	ldr	r2, [r3, #8]
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	689b      	ldr	r3, [r3, #8]
 8007f9a:	683a      	ldr	r2, [r7, #0]
 8007f9c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	683a      	ldr	r2, [r7, #0]
 8007fa2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	1c5a      	adds	r2, r3, #1
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	601a      	str	r2, [r3, #0]
}
 8007fb4:	bf00      	nop
 8007fb6:	3714      	adds	r7, #20
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr

08007fc0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b085      	sub	sp, #20
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fd6:	d103      	bne.n	8007fe0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	691b      	ldr	r3, [r3, #16]
 8007fdc:	60fb      	str	r3, [r7, #12]
 8007fde:	e00c      	b.n	8007ffa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	3308      	adds	r3, #8
 8007fe4:	60fb      	str	r3, [r7, #12]
 8007fe6:	e002      	b.n	8007fee <vListInsert+0x2e>
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	60fb      	str	r3, [r7, #12]
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	68ba      	ldr	r2, [r7, #8]
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d2f6      	bcs.n	8007fe8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	685a      	ldr	r2, [r3, #4]
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	683a      	ldr	r2, [r7, #0]
 8008008:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	68fa      	ldr	r2, [r7, #12]
 800800e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	683a      	ldr	r2, [r7, #0]
 8008014:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	687a      	ldr	r2, [r7, #4]
 800801a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	1c5a      	adds	r2, r3, #1
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	601a      	str	r2, [r3, #0]
}
 8008026:	bf00      	nop
 8008028:	3714      	adds	r7, #20
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr

08008032 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008032:	b480      	push	{r7}
 8008034:	b085      	sub	sp, #20
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	691b      	ldr	r3, [r3, #16]
 800803e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	6892      	ldr	r2, [r2, #8]
 8008048:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	6852      	ldr	r2, [r2, #4]
 8008052:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	429a      	cmp	r2, r3
 800805c:	d103      	bne.n	8008066 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	689a      	ldr	r2, [r3, #8]
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2200      	movs	r2, #0
 800806a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	1e5a      	subs	r2, r3, #1
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
}
 800807a:	4618      	mov	r0, r3
 800807c:	3714      	adds	r7, #20
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr
	...

08008088 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b084      	sub	sp, #16
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d10a      	bne.n	80080b2 <xQueueGenericReset+0x2a>
	__asm volatile
 800809c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a0:	f383 8811 	msr	BASEPRI, r3
 80080a4:	f3bf 8f6f 	isb	sy
 80080a8:	f3bf 8f4f 	dsb	sy
 80080ac:	60bb      	str	r3, [r7, #8]
}
 80080ae:	bf00      	nop
 80080b0:	e7fe      	b.n	80080b0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80080b2:	f002 f8d7 	bl	800a264 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080be:	68f9      	ldr	r1, [r7, #12]
 80080c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80080c2:	fb01 f303 	mul.w	r3, r1, r3
 80080c6:	441a      	add	r2, r3
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	2200      	movs	r2, #0
 80080d0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080e2:	3b01      	subs	r3, #1
 80080e4:	68f9      	ldr	r1, [r7, #12]
 80080e6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80080e8:	fb01 f303 	mul.w	r3, r1, r3
 80080ec:	441a      	add	r2, r3
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	22ff      	movs	r2, #255	; 0xff
 80080f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	22ff      	movs	r2, #255	; 0xff
 80080fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d114      	bne.n	8008132 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	691b      	ldr	r3, [r3, #16]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d01a      	beq.n	8008146 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	3310      	adds	r3, #16
 8008114:	4618      	mov	r0, r3
 8008116:	f001 f8e1 	bl	80092dc <xTaskRemoveFromEventList>
 800811a:	4603      	mov	r3, r0
 800811c:	2b00      	cmp	r3, #0
 800811e:	d012      	beq.n	8008146 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008120:	4b0c      	ldr	r3, [pc, #48]	; (8008154 <xQueueGenericReset+0xcc>)
 8008122:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008126:	601a      	str	r2, [r3, #0]
 8008128:	f3bf 8f4f 	dsb	sy
 800812c:	f3bf 8f6f 	isb	sy
 8008130:	e009      	b.n	8008146 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	3310      	adds	r3, #16
 8008136:	4618      	mov	r0, r3
 8008138:	f7ff fef1 	bl	8007f1e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	3324      	adds	r3, #36	; 0x24
 8008140:	4618      	mov	r0, r3
 8008142:	f7ff feec 	bl	8007f1e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008146:	f002 f8bd 	bl	800a2c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800814a:	2301      	movs	r3, #1
}
 800814c:	4618      	mov	r0, r3
 800814e:	3710      	adds	r7, #16
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}
 8008154:	e000ed04 	.word	0xe000ed04

08008158 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008158:	b580      	push	{r7, lr}
 800815a:	b08e      	sub	sp, #56	; 0x38
 800815c:	af02      	add	r7, sp, #8
 800815e:	60f8      	str	r0, [r7, #12]
 8008160:	60b9      	str	r1, [r7, #8]
 8008162:	607a      	str	r2, [r7, #4]
 8008164:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d10a      	bne.n	8008182 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800816c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008170:	f383 8811 	msr	BASEPRI, r3
 8008174:	f3bf 8f6f 	isb	sy
 8008178:	f3bf 8f4f 	dsb	sy
 800817c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800817e:	bf00      	nop
 8008180:	e7fe      	b.n	8008180 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d10a      	bne.n	800819e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800818c:	f383 8811 	msr	BASEPRI, r3
 8008190:	f3bf 8f6f 	isb	sy
 8008194:	f3bf 8f4f 	dsb	sy
 8008198:	627b      	str	r3, [r7, #36]	; 0x24
}
 800819a:	bf00      	nop
 800819c:	e7fe      	b.n	800819c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d002      	beq.n	80081aa <xQueueGenericCreateStatic+0x52>
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d001      	beq.n	80081ae <xQueueGenericCreateStatic+0x56>
 80081aa:	2301      	movs	r3, #1
 80081ac:	e000      	b.n	80081b0 <xQueueGenericCreateStatic+0x58>
 80081ae:	2300      	movs	r3, #0
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d10a      	bne.n	80081ca <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80081b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b8:	f383 8811 	msr	BASEPRI, r3
 80081bc:	f3bf 8f6f 	isb	sy
 80081c0:	f3bf 8f4f 	dsb	sy
 80081c4:	623b      	str	r3, [r7, #32]
}
 80081c6:	bf00      	nop
 80081c8:	e7fe      	b.n	80081c8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d102      	bne.n	80081d6 <xQueueGenericCreateStatic+0x7e>
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d101      	bne.n	80081da <xQueueGenericCreateStatic+0x82>
 80081d6:	2301      	movs	r3, #1
 80081d8:	e000      	b.n	80081dc <xQueueGenericCreateStatic+0x84>
 80081da:	2300      	movs	r3, #0
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d10a      	bne.n	80081f6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80081e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e4:	f383 8811 	msr	BASEPRI, r3
 80081e8:	f3bf 8f6f 	isb	sy
 80081ec:	f3bf 8f4f 	dsb	sy
 80081f0:	61fb      	str	r3, [r7, #28]
}
 80081f2:	bf00      	nop
 80081f4:	e7fe      	b.n	80081f4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80081f6:	2348      	movs	r3, #72	; 0x48
 80081f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	2b48      	cmp	r3, #72	; 0x48
 80081fe:	d00a      	beq.n	8008216 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008204:	f383 8811 	msr	BASEPRI, r3
 8008208:	f3bf 8f6f 	isb	sy
 800820c:	f3bf 8f4f 	dsb	sy
 8008210:	61bb      	str	r3, [r7, #24]
}
 8008212:	bf00      	nop
 8008214:	e7fe      	b.n	8008214 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800821a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800821c:	2b00      	cmp	r3, #0
 800821e:	d00d      	beq.n	800823c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008222:	2201      	movs	r2, #1
 8008224:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008228:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800822c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800822e:	9300      	str	r3, [sp, #0]
 8008230:	4613      	mov	r3, r2
 8008232:	687a      	ldr	r2, [r7, #4]
 8008234:	68b9      	ldr	r1, [r7, #8]
 8008236:	68f8      	ldr	r0, [r7, #12]
 8008238:	f000 f805 	bl	8008246 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800823c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800823e:	4618      	mov	r0, r3
 8008240:	3730      	adds	r7, #48	; 0x30
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}

08008246 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008246:	b580      	push	{r7, lr}
 8008248:	b084      	sub	sp, #16
 800824a:	af00      	add	r7, sp, #0
 800824c:	60f8      	str	r0, [r7, #12]
 800824e:	60b9      	str	r1, [r7, #8]
 8008250:	607a      	str	r2, [r7, #4]
 8008252:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d103      	bne.n	8008262 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800825a:	69bb      	ldr	r3, [r7, #24]
 800825c:	69ba      	ldr	r2, [r7, #24]
 800825e:	601a      	str	r2, [r3, #0]
 8008260:	e002      	b.n	8008268 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008262:	69bb      	ldr	r3, [r7, #24]
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008268:	69bb      	ldr	r3, [r7, #24]
 800826a:	68fa      	ldr	r2, [r7, #12]
 800826c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800826e:	69bb      	ldr	r3, [r7, #24]
 8008270:	68ba      	ldr	r2, [r7, #8]
 8008272:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008274:	2101      	movs	r1, #1
 8008276:	69b8      	ldr	r0, [r7, #24]
 8008278:	f7ff ff06 	bl	8008088 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800827c:	bf00      	nop
 800827e:	3710      	adds	r7, #16
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b08e      	sub	sp, #56	; 0x38
 8008288:	af00      	add	r7, sp, #0
 800828a:	60f8      	str	r0, [r7, #12]
 800828c:	60b9      	str	r1, [r7, #8]
 800828e:	607a      	str	r2, [r7, #4]
 8008290:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008292:	2300      	movs	r3, #0
 8008294:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800829a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800829c:	2b00      	cmp	r3, #0
 800829e:	d10a      	bne.n	80082b6 <xQueueGenericSend+0x32>
	__asm volatile
 80082a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a4:	f383 8811 	msr	BASEPRI, r3
 80082a8:	f3bf 8f6f 	isb	sy
 80082ac:	f3bf 8f4f 	dsb	sy
 80082b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80082b2:	bf00      	nop
 80082b4:	e7fe      	b.n	80082b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d103      	bne.n	80082c4 <xQueueGenericSend+0x40>
 80082bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d101      	bne.n	80082c8 <xQueueGenericSend+0x44>
 80082c4:	2301      	movs	r3, #1
 80082c6:	e000      	b.n	80082ca <xQueueGenericSend+0x46>
 80082c8:	2300      	movs	r3, #0
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d10a      	bne.n	80082e4 <xQueueGenericSend+0x60>
	__asm volatile
 80082ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d2:	f383 8811 	msr	BASEPRI, r3
 80082d6:	f3bf 8f6f 	isb	sy
 80082da:	f3bf 8f4f 	dsb	sy
 80082de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80082e0:	bf00      	nop
 80082e2:	e7fe      	b.n	80082e2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	2b02      	cmp	r3, #2
 80082e8:	d103      	bne.n	80082f2 <xQueueGenericSend+0x6e>
 80082ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d101      	bne.n	80082f6 <xQueueGenericSend+0x72>
 80082f2:	2301      	movs	r3, #1
 80082f4:	e000      	b.n	80082f8 <xQueueGenericSend+0x74>
 80082f6:	2300      	movs	r3, #0
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d10a      	bne.n	8008312 <xQueueGenericSend+0x8e>
	__asm volatile
 80082fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008300:	f383 8811 	msr	BASEPRI, r3
 8008304:	f3bf 8f6f 	isb	sy
 8008308:	f3bf 8f4f 	dsb	sy
 800830c:	623b      	str	r3, [r7, #32]
}
 800830e:	bf00      	nop
 8008310:	e7fe      	b.n	8008310 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008312:	f001 fa07 	bl	8009724 <xTaskGetSchedulerState>
 8008316:	4603      	mov	r3, r0
 8008318:	2b00      	cmp	r3, #0
 800831a:	d102      	bne.n	8008322 <xQueueGenericSend+0x9e>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d101      	bne.n	8008326 <xQueueGenericSend+0xa2>
 8008322:	2301      	movs	r3, #1
 8008324:	e000      	b.n	8008328 <xQueueGenericSend+0xa4>
 8008326:	2300      	movs	r3, #0
 8008328:	2b00      	cmp	r3, #0
 800832a:	d10a      	bne.n	8008342 <xQueueGenericSend+0xbe>
	__asm volatile
 800832c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008330:	f383 8811 	msr	BASEPRI, r3
 8008334:	f3bf 8f6f 	isb	sy
 8008338:	f3bf 8f4f 	dsb	sy
 800833c:	61fb      	str	r3, [r7, #28]
}
 800833e:	bf00      	nop
 8008340:	e7fe      	b.n	8008340 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008342:	f001 ff8f 	bl	800a264 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008348:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800834a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800834c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800834e:	429a      	cmp	r2, r3
 8008350:	d302      	bcc.n	8008358 <xQueueGenericSend+0xd4>
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	2b02      	cmp	r3, #2
 8008356:	d129      	bne.n	80083ac <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008358:	683a      	ldr	r2, [r7, #0]
 800835a:	68b9      	ldr	r1, [r7, #8]
 800835c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800835e:	f000 fa07 	bl	8008770 <prvCopyDataToQueue>
 8008362:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008368:	2b00      	cmp	r3, #0
 800836a:	d010      	beq.n	800838e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800836c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800836e:	3324      	adds	r3, #36	; 0x24
 8008370:	4618      	mov	r0, r3
 8008372:	f000 ffb3 	bl	80092dc <xTaskRemoveFromEventList>
 8008376:	4603      	mov	r3, r0
 8008378:	2b00      	cmp	r3, #0
 800837a:	d013      	beq.n	80083a4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800837c:	4b3f      	ldr	r3, [pc, #252]	; (800847c <xQueueGenericSend+0x1f8>)
 800837e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008382:	601a      	str	r2, [r3, #0]
 8008384:	f3bf 8f4f 	dsb	sy
 8008388:	f3bf 8f6f 	isb	sy
 800838c:	e00a      	b.n	80083a4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800838e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008390:	2b00      	cmp	r3, #0
 8008392:	d007      	beq.n	80083a4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008394:	4b39      	ldr	r3, [pc, #228]	; (800847c <xQueueGenericSend+0x1f8>)
 8008396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800839a:	601a      	str	r2, [r3, #0]
 800839c:	f3bf 8f4f 	dsb	sy
 80083a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80083a4:	f001 ff8e 	bl	800a2c4 <vPortExitCritical>
				return pdPASS;
 80083a8:	2301      	movs	r3, #1
 80083aa:	e063      	b.n	8008474 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d103      	bne.n	80083ba <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80083b2:	f001 ff87 	bl	800a2c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80083b6:	2300      	movs	r3, #0
 80083b8:	e05c      	b.n	8008474 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80083ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d106      	bne.n	80083ce <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80083c0:	f107 0314 	add.w	r3, r7, #20
 80083c4:	4618      	mov	r0, r3
 80083c6:	f001 f84d 	bl	8009464 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80083ca:	2301      	movs	r3, #1
 80083cc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80083ce:	f001 ff79 	bl	800a2c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80083d2:	f000 fd5f 	bl	8008e94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80083d6:	f001 ff45 	bl	800a264 <vPortEnterCritical>
 80083da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083e0:	b25b      	sxtb	r3, r3
 80083e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083e6:	d103      	bne.n	80083f0 <xQueueGenericSend+0x16c>
 80083e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ea:	2200      	movs	r2, #0
 80083ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083f6:	b25b      	sxtb	r3, r3
 80083f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083fc:	d103      	bne.n	8008406 <xQueueGenericSend+0x182>
 80083fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008400:	2200      	movs	r2, #0
 8008402:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008406:	f001 ff5d 	bl	800a2c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800840a:	1d3a      	adds	r2, r7, #4
 800840c:	f107 0314 	add.w	r3, r7, #20
 8008410:	4611      	mov	r1, r2
 8008412:	4618      	mov	r0, r3
 8008414:	f001 f83c 	bl	8009490 <xTaskCheckForTimeOut>
 8008418:	4603      	mov	r3, r0
 800841a:	2b00      	cmp	r3, #0
 800841c:	d124      	bne.n	8008468 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800841e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008420:	f000 fa9e 	bl	8008960 <prvIsQueueFull>
 8008424:	4603      	mov	r3, r0
 8008426:	2b00      	cmp	r3, #0
 8008428:	d018      	beq.n	800845c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800842a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800842c:	3310      	adds	r3, #16
 800842e:	687a      	ldr	r2, [r7, #4]
 8008430:	4611      	mov	r1, r2
 8008432:	4618      	mov	r0, r3
 8008434:	f000 ff02 	bl	800923c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008438:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800843a:	f000 fa29 	bl	8008890 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800843e:	f000 fd37 	bl	8008eb0 <xTaskResumeAll>
 8008442:	4603      	mov	r3, r0
 8008444:	2b00      	cmp	r3, #0
 8008446:	f47f af7c 	bne.w	8008342 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800844a:	4b0c      	ldr	r3, [pc, #48]	; (800847c <xQueueGenericSend+0x1f8>)
 800844c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008450:	601a      	str	r2, [r3, #0]
 8008452:	f3bf 8f4f 	dsb	sy
 8008456:	f3bf 8f6f 	isb	sy
 800845a:	e772      	b.n	8008342 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800845c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800845e:	f000 fa17 	bl	8008890 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008462:	f000 fd25 	bl	8008eb0 <xTaskResumeAll>
 8008466:	e76c      	b.n	8008342 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008468:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800846a:	f000 fa11 	bl	8008890 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800846e:	f000 fd1f 	bl	8008eb0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008472:	2300      	movs	r3, #0
		}
	}
}
 8008474:	4618      	mov	r0, r3
 8008476:	3738      	adds	r7, #56	; 0x38
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}
 800847c:	e000ed04 	.word	0xe000ed04

08008480 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b08e      	sub	sp, #56	; 0x38
 8008484:	af00      	add	r7, sp, #0
 8008486:	60f8      	str	r0, [r7, #12]
 8008488:	60b9      	str	r1, [r7, #8]
 800848a:	607a      	str	r2, [r7, #4]
 800848c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008494:	2b00      	cmp	r3, #0
 8008496:	d10a      	bne.n	80084ae <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800849c:	f383 8811 	msr	BASEPRI, r3
 80084a0:	f3bf 8f6f 	isb	sy
 80084a4:	f3bf 8f4f 	dsb	sy
 80084a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80084aa:	bf00      	nop
 80084ac:	e7fe      	b.n	80084ac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d103      	bne.n	80084bc <xQueueGenericSendFromISR+0x3c>
 80084b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d101      	bne.n	80084c0 <xQueueGenericSendFromISR+0x40>
 80084bc:	2301      	movs	r3, #1
 80084be:	e000      	b.n	80084c2 <xQueueGenericSendFromISR+0x42>
 80084c0:	2300      	movs	r3, #0
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d10a      	bne.n	80084dc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80084c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ca:	f383 8811 	msr	BASEPRI, r3
 80084ce:	f3bf 8f6f 	isb	sy
 80084d2:	f3bf 8f4f 	dsb	sy
 80084d6:	623b      	str	r3, [r7, #32]
}
 80084d8:	bf00      	nop
 80084da:	e7fe      	b.n	80084da <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	2b02      	cmp	r3, #2
 80084e0:	d103      	bne.n	80084ea <xQueueGenericSendFromISR+0x6a>
 80084e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	d101      	bne.n	80084ee <xQueueGenericSendFromISR+0x6e>
 80084ea:	2301      	movs	r3, #1
 80084ec:	e000      	b.n	80084f0 <xQueueGenericSendFromISR+0x70>
 80084ee:	2300      	movs	r3, #0
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d10a      	bne.n	800850a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80084f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f8:	f383 8811 	msr	BASEPRI, r3
 80084fc:	f3bf 8f6f 	isb	sy
 8008500:	f3bf 8f4f 	dsb	sy
 8008504:	61fb      	str	r3, [r7, #28]
}
 8008506:	bf00      	nop
 8008508:	e7fe      	b.n	8008508 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800850a:	f001 ff8d 	bl	800a428 <vPortValidateInterruptPriority>
	__asm volatile
 800850e:	f3ef 8211 	mrs	r2, BASEPRI
 8008512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008516:	f383 8811 	msr	BASEPRI, r3
 800851a:	f3bf 8f6f 	isb	sy
 800851e:	f3bf 8f4f 	dsb	sy
 8008522:	61ba      	str	r2, [r7, #24]
 8008524:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008526:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008528:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800852a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800852c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800852e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008532:	429a      	cmp	r2, r3
 8008534:	d302      	bcc.n	800853c <xQueueGenericSendFromISR+0xbc>
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	2b02      	cmp	r3, #2
 800853a:	d12c      	bne.n	8008596 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800853c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800853e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008542:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008546:	683a      	ldr	r2, [r7, #0]
 8008548:	68b9      	ldr	r1, [r7, #8]
 800854a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800854c:	f000 f910 	bl	8008770 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008550:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008558:	d112      	bne.n	8008580 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800855a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800855c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800855e:	2b00      	cmp	r3, #0
 8008560:	d016      	beq.n	8008590 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008564:	3324      	adds	r3, #36	; 0x24
 8008566:	4618      	mov	r0, r3
 8008568:	f000 feb8 	bl	80092dc <xTaskRemoveFromEventList>
 800856c:	4603      	mov	r3, r0
 800856e:	2b00      	cmp	r3, #0
 8008570:	d00e      	beq.n	8008590 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d00b      	beq.n	8008590 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2201      	movs	r2, #1
 800857c:	601a      	str	r2, [r3, #0]
 800857e:	e007      	b.n	8008590 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008580:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008584:	3301      	adds	r3, #1
 8008586:	b2db      	uxtb	r3, r3
 8008588:	b25a      	sxtb	r2, r3
 800858a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800858c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008590:	2301      	movs	r3, #1
 8008592:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008594:	e001      	b.n	800859a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008596:	2300      	movs	r3, #0
 8008598:	637b      	str	r3, [r7, #52]	; 0x34
 800859a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800859c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	f383 8811 	msr	BASEPRI, r3
}
 80085a4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80085a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3738      	adds	r7, #56	; 0x38
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b08c      	sub	sp, #48	; 0x30
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	60b9      	str	r1, [r7, #8]
 80085ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80085bc:	2300      	movs	r3, #0
 80085be:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80085c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d10a      	bne.n	80085e0 <xQueueReceive+0x30>
	__asm volatile
 80085ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ce:	f383 8811 	msr	BASEPRI, r3
 80085d2:	f3bf 8f6f 	isb	sy
 80085d6:	f3bf 8f4f 	dsb	sy
 80085da:	623b      	str	r3, [r7, #32]
}
 80085dc:	bf00      	nop
 80085de:	e7fe      	b.n	80085de <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d103      	bne.n	80085ee <xQueueReceive+0x3e>
 80085e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d101      	bne.n	80085f2 <xQueueReceive+0x42>
 80085ee:	2301      	movs	r3, #1
 80085f0:	e000      	b.n	80085f4 <xQueueReceive+0x44>
 80085f2:	2300      	movs	r3, #0
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d10a      	bne.n	800860e <xQueueReceive+0x5e>
	__asm volatile
 80085f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085fc:	f383 8811 	msr	BASEPRI, r3
 8008600:	f3bf 8f6f 	isb	sy
 8008604:	f3bf 8f4f 	dsb	sy
 8008608:	61fb      	str	r3, [r7, #28]
}
 800860a:	bf00      	nop
 800860c:	e7fe      	b.n	800860c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800860e:	f001 f889 	bl	8009724 <xTaskGetSchedulerState>
 8008612:	4603      	mov	r3, r0
 8008614:	2b00      	cmp	r3, #0
 8008616:	d102      	bne.n	800861e <xQueueReceive+0x6e>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d101      	bne.n	8008622 <xQueueReceive+0x72>
 800861e:	2301      	movs	r3, #1
 8008620:	e000      	b.n	8008624 <xQueueReceive+0x74>
 8008622:	2300      	movs	r3, #0
 8008624:	2b00      	cmp	r3, #0
 8008626:	d10a      	bne.n	800863e <xQueueReceive+0x8e>
	__asm volatile
 8008628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800862c:	f383 8811 	msr	BASEPRI, r3
 8008630:	f3bf 8f6f 	isb	sy
 8008634:	f3bf 8f4f 	dsb	sy
 8008638:	61bb      	str	r3, [r7, #24]
}
 800863a:	bf00      	nop
 800863c:	e7fe      	b.n	800863c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800863e:	f001 fe11 	bl	800a264 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008646:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864a:	2b00      	cmp	r3, #0
 800864c:	d01f      	beq.n	800868e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800864e:	68b9      	ldr	r1, [r7, #8]
 8008650:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008652:	f000 f8f7 	bl	8008844 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008658:	1e5a      	subs	r2, r3, #1
 800865a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800865c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800865e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008660:	691b      	ldr	r3, [r3, #16]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d00f      	beq.n	8008686 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008668:	3310      	adds	r3, #16
 800866a:	4618      	mov	r0, r3
 800866c:	f000 fe36 	bl	80092dc <xTaskRemoveFromEventList>
 8008670:	4603      	mov	r3, r0
 8008672:	2b00      	cmp	r3, #0
 8008674:	d007      	beq.n	8008686 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008676:	4b3d      	ldr	r3, [pc, #244]	; (800876c <xQueueReceive+0x1bc>)
 8008678:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800867c:	601a      	str	r2, [r3, #0]
 800867e:	f3bf 8f4f 	dsb	sy
 8008682:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008686:	f001 fe1d 	bl	800a2c4 <vPortExitCritical>
				return pdPASS;
 800868a:	2301      	movs	r3, #1
 800868c:	e069      	b.n	8008762 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d103      	bne.n	800869c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008694:	f001 fe16 	bl	800a2c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008698:	2300      	movs	r3, #0
 800869a:	e062      	b.n	8008762 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800869c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d106      	bne.n	80086b0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80086a2:	f107 0310 	add.w	r3, r7, #16
 80086a6:	4618      	mov	r0, r3
 80086a8:	f000 fedc 	bl	8009464 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80086ac:	2301      	movs	r3, #1
 80086ae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80086b0:	f001 fe08 	bl	800a2c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80086b4:	f000 fbee 	bl	8008e94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80086b8:	f001 fdd4 	bl	800a264 <vPortEnterCritical>
 80086bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80086c2:	b25b      	sxtb	r3, r3
 80086c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086c8:	d103      	bne.n	80086d2 <xQueueReceive+0x122>
 80086ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086cc:	2200      	movs	r2, #0
 80086ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80086d8:	b25b      	sxtb	r3, r3
 80086da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086de:	d103      	bne.n	80086e8 <xQueueReceive+0x138>
 80086e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e2:	2200      	movs	r2, #0
 80086e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80086e8:	f001 fdec 	bl	800a2c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80086ec:	1d3a      	adds	r2, r7, #4
 80086ee:	f107 0310 	add.w	r3, r7, #16
 80086f2:	4611      	mov	r1, r2
 80086f4:	4618      	mov	r0, r3
 80086f6:	f000 fecb 	bl	8009490 <xTaskCheckForTimeOut>
 80086fa:	4603      	mov	r3, r0
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d123      	bne.n	8008748 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008700:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008702:	f000 f917 	bl	8008934 <prvIsQueueEmpty>
 8008706:	4603      	mov	r3, r0
 8008708:	2b00      	cmp	r3, #0
 800870a:	d017      	beq.n	800873c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800870c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800870e:	3324      	adds	r3, #36	; 0x24
 8008710:	687a      	ldr	r2, [r7, #4]
 8008712:	4611      	mov	r1, r2
 8008714:	4618      	mov	r0, r3
 8008716:	f000 fd91 	bl	800923c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800871a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800871c:	f000 f8b8 	bl	8008890 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008720:	f000 fbc6 	bl	8008eb0 <xTaskResumeAll>
 8008724:	4603      	mov	r3, r0
 8008726:	2b00      	cmp	r3, #0
 8008728:	d189      	bne.n	800863e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800872a:	4b10      	ldr	r3, [pc, #64]	; (800876c <xQueueReceive+0x1bc>)
 800872c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008730:	601a      	str	r2, [r3, #0]
 8008732:	f3bf 8f4f 	dsb	sy
 8008736:	f3bf 8f6f 	isb	sy
 800873a:	e780      	b.n	800863e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800873c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800873e:	f000 f8a7 	bl	8008890 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008742:	f000 fbb5 	bl	8008eb0 <xTaskResumeAll>
 8008746:	e77a      	b.n	800863e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008748:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800874a:	f000 f8a1 	bl	8008890 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800874e:	f000 fbaf 	bl	8008eb0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008752:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008754:	f000 f8ee 	bl	8008934 <prvIsQueueEmpty>
 8008758:	4603      	mov	r3, r0
 800875a:	2b00      	cmp	r3, #0
 800875c:	f43f af6f 	beq.w	800863e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008760:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008762:	4618      	mov	r0, r3
 8008764:	3730      	adds	r7, #48	; 0x30
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
 800876a:	bf00      	nop
 800876c:	e000ed04 	.word	0xe000ed04

08008770 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b086      	sub	sp, #24
 8008774:	af00      	add	r7, sp, #0
 8008776:	60f8      	str	r0, [r7, #12]
 8008778:	60b9      	str	r1, [r7, #8]
 800877a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800877c:	2300      	movs	r3, #0
 800877e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008784:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800878a:	2b00      	cmp	r3, #0
 800878c:	d10d      	bne.n	80087aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d14d      	bne.n	8008832 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	4618      	mov	r0, r3
 800879c:	f000 ffe0 	bl	8009760 <xTaskPriorityDisinherit>
 80087a0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2200      	movs	r2, #0
 80087a6:	605a      	str	r2, [r3, #4]
 80087a8:	e043      	b.n	8008832 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d119      	bne.n	80087e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	6898      	ldr	r0, [r3, #8]
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087b8:	461a      	mov	r2, r3
 80087ba:	68b9      	ldr	r1, [r7, #8]
 80087bc:	f002 fe46 	bl	800b44c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	689a      	ldr	r2, [r3, #8]
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087c8:	441a      	add	r2, r3
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	689a      	ldr	r2, [r3, #8]
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	429a      	cmp	r2, r3
 80087d8:	d32b      	bcc.n	8008832 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681a      	ldr	r2, [r3, #0]
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	609a      	str	r2, [r3, #8]
 80087e2:	e026      	b.n	8008832 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	68d8      	ldr	r0, [r3, #12]
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ec:	461a      	mov	r2, r3
 80087ee:	68b9      	ldr	r1, [r7, #8]
 80087f0:	f002 fe2c 	bl	800b44c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	68da      	ldr	r2, [r3, #12]
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087fc:	425b      	negs	r3, r3
 80087fe:	441a      	add	r2, r3
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	68da      	ldr	r2, [r3, #12]
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	429a      	cmp	r2, r3
 800880e:	d207      	bcs.n	8008820 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	685a      	ldr	r2, [r3, #4]
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008818:	425b      	negs	r3, r3
 800881a:	441a      	add	r2, r3
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2b02      	cmp	r3, #2
 8008824:	d105      	bne.n	8008832 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d002      	beq.n	8008832 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	3b01      	subs	r3, #1
 8008830:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	1c5a      	adds	r2, r3, #1
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800883a:	697b      	ldr	r3, [r7, #20]
}
 800883c:	4618      	mov	r0, r3
 800883e:	3718      	adds	r7, #24
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}

08008844 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b082      	sub	sp, #8
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008852:	2b00      	cmp	r3, #0
 8008854:	d018      	beq.n	8008888 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	68da      	ldr	r2, [r3, #12]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800885e:	441a      	add	r2, r3
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	68da      	ldr	r2, [r3, #12]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	429a      	cmp	r2, r3
 800886e:	d303      	bcc.n	8008878 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681a      	ldr	r2, [r3, #0]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	68d9      	ldr	r1, [r3, #12]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008880:	461a      	mov	r2, r3
 8008882:	6838      	ldr	r0, [r7, #0]
 8008884:	f002 fde2 	bl	800b44c <memcpy>
	}
}
 8008888:	bf00      	nop
 800888a:	3708      	adds	r7, #8
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b084      	sub	sp, #16
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008898:	f001 fce4 	bl	800a264 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80088a4:	e011      	b.n	80088ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d012      	beq.n	80088d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	3324      	adds	r3, #36	; 0x24
 80088b2:	4618      	mov	r0, r3
 80088b4:	f000 fd12 	bl	80092dc <xTaskRemoveFromEventList>
 80088b8:	4603      	mov	r3, r0
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d001      	beq.n	80088c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80088be:	f000 fe49 	bl	8009554 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80088c2:	7bfb      	ldrb	r3, [r7, #15]
 80088c4:	3b01      	subs	r3, #1
 80088c6:	b2db      	uxtb	r3, r3
 80088c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80088ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	dce9      	bgt.n	80088a6 <prvUnlockQueue+0x16>
 80088d2:	e000      	b.n	80088d6 <prvUnlockQueue+0x46>
					break;
 80088d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	22ff      	movs	r2, #255	; 0xff
 80088da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80088de:	f001 fcf1 	bl	800a2c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80088e2:	f001 fcbf 	bl	800a264 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80088ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80088ee:	e011      	b.n	8008914 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	691b      	ldr	r3, [r3, #16]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d012      	beq.n	800891e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	3310      	adds	r3, #16
 80088fc:	4618      	mov	r0, r3
 80088fe:	f000 fced 	bl	80092dc <xTaskRemoveFromEventList>
 8008902:	4603      	mov	r3, r0
 8008904:	2b00      	cmp	r3, #0
 8008906:	d001      	beq.n	800890c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008908:	f000 fe24 	bl	8009554 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800890c:	7bbb      	ldrb	r3, [r7, #14]
 800890e:	3b01      	subs	r3, #1
 8008910:	b2db      	uxtb	r3, r3
 8008912:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008914:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008918:	2b00      	cmp	r3, #0
 800891a:	dce9      	bgt.n	80088f0 <prvUnlockQueue+0x60>
 800891c:	e000      	b.n	8008920 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800891e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	22ff      	movs	r2, #255	; 0xff
 8008924:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008928:	f001 fccc 	bl	800a2c4 <vPortExitCritical>
}
 800892c:	bf00      	nop
 800892e:	3710      	adds	r7, #16
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b084      	sub	sp, #16
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800893c:	f001 fc92 	bl	800a264 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008944:	2b00      	cmp	r3, #0
 8008946:	d102      	bne.n	800894e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008948:	2301      	movs	r3, #1
 800894a:	60fb      	str	r3, [r7, #12]
 800894c:	e001      	b.n	8008952 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800894e:	2300      	movs	r3, #0
 8008950:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008952:	f001 fcb7 	bl	800a2c4 <vPortExitCritical>

	return xReturn;
 8008956:	68fb      	ldr	r3, [r7, #12]
}
 8008958:	4618      	mov	r0, r3
 800895a:	3710      	adds	r7, #16
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}

08008960 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b084      	sub	sp, #16
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008968:	f001 fc7c 	bl	800a264 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008974:	429a      	cmp	r2, r3
 8008976:	d102      	bne.n	800897e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008978:	2301      	movs	r3, #1
 800897a:	60fb      	str	r3, [r7, #12]
 800897c:	e001      	b.n	8008982 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800897e:	2300      	movs	r3, #0
 8008980:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008982:	f001 fc9f 	bl	800a2c4 <vPortExitCritical>

	return xReturn;
 8008986:	68fb      	ldr	r3, [r7, #12]
}
 8008988:	4618      	mov	r0, r3
 800898a:	3710      	adds	r7, #16
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}

08008990 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008990:	b480      	push	{r7}
 8008992:	b085      	sub	sp, #20
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800899a:	2300      	movs	r3, #0
 800899c:	60fb      	str	r3, [r7, #12]
 800899e:	e014      	b.n	80089ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80089a0:	4a0f      	ldr	r2, [pc, #60]	; (80089e0 <vQueueAddToRegistry+0x50>)
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d10b      	bne.n	80089c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80089ac:	490c      	ldr	r1, [pc, #48]	; (80089e0 <vQueueAddToRegistry+0x50>)
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	683a      	ldr	r2, [r7, #0]
 80089b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80089b6:	4a0a      	ldr	r2, [pc, #40]	; (80089e0 <vQueueAddToRegistry+0x50>)
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	00db      	lsls	r3, r3, #3
 80089bc:	4413      	add	r3, r2
 80089be:	687a      	ldr	r2, [r7, #4]
 80089c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80089c2:	e006      	b.n	80089d2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	3301      	adds	r3, #1
 80089c8:	60fb      	str	r3, [r7, #12]
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2b07      	cmp	r3, #7
 80089ce:	d9e7      	bls.n	80089a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80089d0:	bf00      	nop
 80089d2:	bf00      	nop
 80089d4:	3714      	adds	r7, #20
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr
 80089de:	bf00      	nop
 80089e0:	20000f50 	.word	0x20000f50

080089e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b086      	sub	sp, #24
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	60f8      	str	r0, [r7, #12]
 80089ec:	60b9      	str	r1, [r7, #8]
 80089ee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80089f4:	f001 fc36 	bl	800a264 <vPortEnterCritical>
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80089fe:	b25b      	sxtb	r3, r3
 8008a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a04:	d103      	bne.n	8008a0e <vQueueWaitForMessageRestricted+0x2a>
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a14:	b25b      	sxtb	r3, r3
 8008a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a1a:	d103      	bne.n	8008a24 <vQueueWaitForMessageRestricted+0x40>
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a24:	f001 fc4e 	bl	800a2c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d106      	bne.n	8008a3e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	3324      	adds	r3, #36	; 0x24
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	68b9      	ldr	r1, [r7, #8]
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f000 fc23 	bl	8009284 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008a3e:	6978      	ldr	r0, [r7, #20]
 8008a40:	f7ff ff26 	bl	8008890 <prvUnlockQueue>
	}
 8008a44:	bf00      	nop
 8008a46:	3718      	adds	r7, #24
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}

08008a4c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b08e      	sub	sp, #56	; 0x38
 8008a50:	af04      	add	r7, sp, #16
 8008a52:	60f8      	str	r0, [r7, #12]
 8008a54:	60b9      	str	r1, [r7, #8]
 8008a56:	607a      	str	r2, [r7, #4]
 8008a58:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d10a      	bne.n	8008a76 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a64:	f383 8811 	msr	BASEPRI, r3
 8008a68:	f3bf 8f6f 	isb	sy
 8008a6c:	f3bf 8f4f 	dsb	sy
 8008a70:	623b      	str	r3, [r7, #32]
}
 8008a72:	bf00      	nop
 8008a74:	e7fe      	b.n	8008a74 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d10a      	bne.n	8008a92 <xTaskCreateStatic+0x46>
	__asm volatile
 8008a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a80:	f383 8811 	msr	BASEPRI, r3
 8008a84:	f3bf 8f6f 	isb	sy
 8008a88:	f3bf 8f4f 	dsb	sy
 8008a8c:	61fb      	str	r3, [r7, #28]
}
 8008a8e:	bf00      	nop
 8008a90:	e7fe      	b.n	8008a90 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008a92:	2358      	movs	r3, #88	; 0x58
 8008a94:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	2b58      	cmp	r3, #88	; 0x58
 8008a9a:	d00a      	beq.n	8008ab2 <xTaskCreateStatic+0x66>
	__asm volatile
 8008a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa0:	f383 8811 	msr	BASEPRI, r3
 8008aa4:	f3bf 8f6f 	isb	sy
 8008aa8:	f3bf 8f4f 	dsb	sy
 8008aac:	61bb      	str	r3, [r7, #24]
}
 8008aae:	bf00      	nop
 8008ab0:	e7fe      	b.n	8008ab0 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d01e      	beq.n	8008af6 <xTaskCreateStatic+0xaa>
 8008ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d01b      	beq.n	8008af6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ac0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ac6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aca:	2202      	movs	r2, #2
 8008acc:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	9303      	str	r3, [sp, #12]
 8008ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad6:	9302      	str	r3, [sp, #8]
 8008ad8:	f107 0314 	add.w	r3, r7, #20
 8008adc:	9301      	str	r3, [sp, #4]
 8008ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae0:	9300      	str	r3, [sp, #0]
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	687a      	ldr	r2, [r7, #4]
 8008ae6:	68b9      	ldr	r1, [r7, #8]
 8008ae8:	68f8      	ldr	r0, [r7, #12]
 8008aea:	f000 f850 	bl	8008b8e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008aee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008af0:	f000 f8cc 	bl	8008c8c <prvAddNewTaskToReadyList>
 8008af4:	e001      	b.n	8008afa <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8008af6:	2300      	movs	r3, #0
 8008af8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008afa:	697b      	ldr	r3, [r7, #20]
	}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3728      	adds	r7, #40	; 0x28
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b08c      	sub	sp, #48	; 0x30
 8008b08:	af04      	add	r7, sp, #16
 8008b0a:	60f8      	str	r0, [r7, #12]
 8008b0c:	60b9      	str	r1, [r7, #8]
 8008b0e:	603b      	str	r3, [r7, #0]
 8008b10:	4613      	mov	r3, r2
 8008b12:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b14:	88fb      	ldrh	r3, [r7, #6]
 8008b16:	009b      	lsls	r3, r3, #2
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f001 fcc5 	bl	800a4a8 <pvPortMalloc>
 8008b1e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d00e      	beq.n	8008b44 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008b26:	2058      	movs	r0, #88	; 0x58
 8008b28:	f001 fcbe 	bl	800a4a8 <pvPortMalloc>
 8008b2c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008b2e:	69fb      	ldr	r3, [r7, #28]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d003      	beq.n	8008b3c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008b34:	69fb      	ldr	r3, [r7, #28]
 8008b36:	697a      	ldr	r2, [r7, #20]
 8008b38:	631a      	str	r2, [r3, #48]	; 0x30
 8008b3a:	e005      	b.n	8008b48 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008b3c:	6978      	ldr	r0, [r7, #20]
 8008b3e:	f001 fd77 	bl	800a630 <vPortFree>
 8008b42:	e001      	b.n	8008b48 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008b44:	2300      	movs	r3, #0
 8008b46:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008b48:	69fb      	ldr	r3, [r7, #28]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d017      	beq.n	8008b7e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008b4e:	69fb      	ldr	r3, [r7, #28]
 8008b50:	2200      	movs	r2, #0
 8008b52:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008b56:	88fa      	ldrh	r2, [r7, #6]
 8008b58:	2300      	movs	r3, #0
 8008b5a:	9303      	str	r3, [sp, #12]
 8008b5c:	69fb      	ldr	r3, [r7, #28]
 8008b5e:	9302      	str	r3, [sp, #8]
 8008b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b62:	9301      	str	r3, [sp, #4]
 8008b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b66:	9300      	str	r3, [sp, #0]
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	68b9      	ldr	r1, [r7, #8]
 8008b6c:	68f8      	ldr	r0, [r7, #12]
 8008b6e:	f000 f80e 	bl	8008b8e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b72:	69f8      	ldr	r0, [r7, #28]
 8008b74:	f000 f88a 	bl	8008c8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008b78:	2301      	movs	r3, #1
 8008b7a:	61bb      	str	r3, [r7, #24]
 8008b7c:	e002      	b.n	8008b84 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8008b82:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008b84:	69bb      	ldr	r3, [r7, #24]
	}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3720      	adds	r7, #32
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}

08008b8e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008b8e:	b580      	push	{r7, lr}
 8008b90:	b088      	sub	sp, #32
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	60f8      	str	r0, [r7, #12]
 8008b96:	60b9      	str	r1, [r7, #8]
 8008b98:	607a      	str	r2, [r7, #4]
 8008b9a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008ba6:	3b01      	subs	r3, #1
 8008ba8:	009b      	lsls	r3, r3, #2
 8008baa:	4413      	add	r3, r2
 8008bac:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008bae:	69bb      	ldr	r3, [r7, #24]
 8008bb0:	f023 0307 	bic.w	r3, r3, #7
 8008bb4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008bb6:	69bb      	ldr	r3, [r7, #24]
 8008bb8:	f003 0307 	and.w	r3, r3, #7
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d00a      	beq.n	8008bd6 <prvInitialiseNewTask+0x48>
	__asm volatile
 8008bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc4:	f383 8811 	msr	BASEPRI, r3
 8008bc8:	f3bf 8f6f 	isb	sy
 8008bcc:	f3bf 8f4f 	dsb	sy
 8008bd0:	617b      	str	r3, [r7, #20]
}
 8008bd2:	bf00      	nop
 8008bd4:	e7fe      	b.n	8008bd4 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	61fb      	str	r3, [r7, #28]
 8008bda:	e012      	b.n	8008c02 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008bdc:	68ba      	ldr	r2, [r7, #8]
 8008bde:	69fb      	ldr	r3, [r7, #28]
 8008be0:	4413      	add	r3, r2
 8008be2:	7819      	ldrb	r1, [r3, #0]
 8008be4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008be6:	69fb      	ldr	r3, [r7, #28]
 8008be8:	4413      	add	r3, r2
 8008bea:	3334      	adds	r3, #52	; 0x34
 8008bec:	460a      	mov	r2, r1
 8008bee:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008bf0:	68ba      	ldr	r2, [r7, #8]
 8008bf2:	69fb      	ldr	r3, [r7, #28]
 8008bf4:	4413      	add	r3, r2
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d006      	beq.n	8008c0a <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008bfc:	69fb      	ldr	r3, [r7, #28]
 8008bfe:	3301      	adds	r3, #1
 8008c00:	61fb      	str	r3, [r7, #28]
 8008c02:	69fb      	ldr	r3, [r7, #28]
 8008c04:	2b11      	cmp	r3, #17
 8008c06:	d9e9      	bls.n	8008bdc <prvInitialiseNewTask+0x4e>
 8008c08:	e000      	b.n	8008c0c <prvInitialiseNewTask+0x7e>
		{
			break;
 8008c0a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c0e:	2200      	movs	r2, #0
 8008c10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c16:	2b06      	cmp	r3, #6
 8008c18:	d901      	bls.n	8008c1e <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008c1a:	2306      	movs	r3, #6
 8008c1c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c22:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c28:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8008c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c32:	3304      	adds	r3, #4
 8008c34:	4618      	mov	r0, r3
 8008c36:	f7ff f992 	bl	8007f5e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c3c:	3318      	adds	r3, #24
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f7ff f98d 	bl	8007f5e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c48:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c4c:	f1c3 0207 	rsb	r2, r3, #7
 8008c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c52:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c58:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c62:	2200      	movs	r2, #0
 8008c64:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008c68:	683a      	ldr	r2, [r7, #0]
 8008c6a:	68f9      	ldr	r1, [r7, #12]
 8008c6c:	69b8      	ldr	r0, [r7, #24]
 8008c6e:	f001 f9c9 	bl	800a004 <pxPortInitialiseStack>
 8008c72:	4602      	mov	r2, r0
 8008c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c76:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d002      	beq.n	8008c84 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c82:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c84:	bf00      	nop
 8008c86:	3720      	adds	r7, #32
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b082      	sub	sp, #8
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008c94:	f001 fae6 	bl	800a264 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008c98:	4b2a      	ldr	r3, [pc, #168]	; (8008d44 <prvAddNewTaskToReadyList+0xb8>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	3301      	adds	r3, #1
 8008c9e:	4a29      	ldr	r2, [pc, #164]	; (8008d44 <prvAddNewTaskToReadyList+0xb8>)
 8008ca0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008ca2:	4b29      	ldr	r3, [pc, #164]	; (8008d48 <prvAddNewTaskToReadyList+0xbc>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d109      	bne.n	8008cbe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008caa:	4a27      	ldr	r2, [pc, #156]	; (8008d48 <prvAddNewTaskToReadyList+0xbc>)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008cb0:	4b24      	ldr	r3, [pc, #144]	; (8008d44 <prvAddNewTaskToReadyList+0xb8>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	d110      	bne.n	8008cda <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008cb8:	f000 fc70 	bl	800959c <prvInitialiseTaskLists>
 8008cbc:	e00d      	b.n	8008cda <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008cbe:	4b23      	ldr	r3, [pc, #140]	; (8008d4c <prvAddNewTaskToReadyList+0xc0>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d109      	bne.n	8008cda <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008cc6:	4b20      	ldr	r3, [pc, #128]	; (8008d48 <prvAddNewTaskToReadyList+0xbc>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	d802      	bhi.n	8008cda <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008cd4:	4a1c      	ldr	r2, [pc, #112]	; (8008d48 <prvAddNewTaskToReadyList+0xbc>)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008cda:	4b1d      	ldr	r3, [pc, #116]	; (8008d50 <prvAddNewTaskToReadyList+0xc4>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	3301      	adds	r3, #1
 8008ce0:	4a1b      	ldr	r2, [pc, #108]	; (8008d50 <prvAddNewTaskToReadyList+0xc4>)
 8008ce2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce8:	2201      	movs	r2, #1
 8008cea:	409a      	lsls	r2, r3
 8008cec:	4b19      	ldr	r3, [pc, #100]	; (8008d54 <prvAddNewTaskToReadyList+0xc8>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	4a18      	ldr	r2, [pc, #96]	; (8008d54 <prvAddNewTaskToReadyList+0xc8>)
 8008cf4:	6013      	str	r3, [r2, #0]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cfa:	4613      	mov	r3, r2
 8008cfc:	009b      	lsls	r3, r3, #2
 8008cfe:	4413      	add	r3, r2
 8008d00:	009b      	lsls	r3, r3, #2
 8008d02:	4a15      	ldr	r2, [pc, #84]	; (8008d58 <prvAddNewTaskToReadyList+0xcc>)
 8008d04:	441a      	add	r2, r3
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	3304      	adds	r3, #4
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	4610      	mov	r0, r2
 8008d0e:	f7ff f933 	bl	8007f78 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008d12:	f001 fad7 	bl	800a2c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008d16:	4b0d      	ldr	r3, [pc, #52]	; (8008d4c <prvAddNewTaskToReadyList+0xc0>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d00e      	beq.n	8008d3c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008d1e:	4b0a      	ldr	r3, [pc, #40]	; (8008d48 <prvAddNewTaskToReadyList+0xbc>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	d207      	bcs.n	8008d3c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008d2c:	4b0b      	ldr	r3, [pc, #44]	; (8008d5c <prvAddNewTaskToReadyList+0xd0>)
 8008d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d32:	601a      	str	r2, [r3, #0]
 8008d34:	f3bf 8f4f 	dsb	sy
 8008d38:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d3c:	bf00      	nop
 8008d3e:	3708      	adds	r7, #8
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}
 8008d44:	20001090 	.word	0x20001090
 8008d48:	20000f90 	.word	0x20000f90
 8008d4c:	2000109c 	.word	0x2000109c
 8008d50:	200010ac 	.word	0x200010ac
 8008d54:	20001098 	.word	0x20001098
 8008d58:	20000f94 	.word	0x20000f94
 8008d5c:	e000ed04 	.word	0xe000ed04

08008d60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b084      	sub	sp, #16
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d017      	beq.n	8008da2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008d72:	4b13      	ldr	r3, [pc, #76]	; (8008dc0 <vTaskDelay+0x60>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d00a      	beq.n	8008d90 <vTaskDelay+0x30>
	__asm volatile
 8008d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d7e:	f383 8811 	msr	BASEPRI, r3
 8008d82:	f3bf 8f6f 	isb	sy
 8008d86:	f3bf 8f4f 	dsb	sy
 8008d8a:	60bb      	str	r3, [r7, #8]
}
 8008d8c:	bf00      	nop
 8008d8e:	e7fe      	b.n	8008d8e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008d90:	f000 f880 	bl	8008e94 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008d94:	2100      	movs	r1, #0
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 fd68 	bl	800986c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008d9c:	f000 f888 	bl	8008eb0 <xTaskResumeAll>
 8008da0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d107      	bne.n	8008db8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008da8:	4b06      	ldr	r3, [pc, #24]	; (8008dc4 <vTaskDelay+0x64>)
 8008daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dae:	601a      	str	r2, [r3, #0]
 8008db0:	f3bf 8f4f 	dsb	sy
 8008db4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008db8:	bf00      	nop
 8008dba:	3710      	adds	r7, #16
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}
 8008dc0:	200010b8 	.word	0x200010b8
 8008dc4:	e000ed04 	.word	0xe000ed04

08008dc8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b08a      	sub	sp, #40	; 0x28
 8008dcc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008dd6:	463a      	mov	r2, r7
 8008dd8:	1d39      	adds	r1, r7, #4
 8008dda:	f107 0308 	add.w	r3, r7, #8
 8008dde:	4618      	mov	r0, r3
 8008de0:	f7f7 ffe2 	bl	8000da8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008de4:	6839      	ldr	r1, [r7, #0]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	68ba      	ldr	r2, [r7, #8]
 8008dea:	9202      	str	r2, [sp, #8]
 8008dec:	9301      	str	r3, [sp, #4]
 8008dee:	2300      	movs	r3, #0
 8008df0:	9300      	str	r3, [sp, #0]
 8008df2:	2300      	movs	r3, #0
 8008df4:	460a      	mov	r2, r1
 8008df6:	4921      	ldr	r1, [pc, #132]	; (8008e7c <vTaskStartScheduler+0xb4>)
 8008df8:	4821      	ldr	r0, [pc, #132]	; (8008e80 <vTaskStartScheduler+0xb8>)
 8008dfa:	f7ff fe27 	bl	8008a4c <xTaskCreateStatic>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	4a20      	ldr	r2, [pc, #128]	; (8008e84 <vTaskStartScheduler+0xbc>)
 8008e02:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008e04:	4b1f      	ldr	r3, [pc, #124]	; (8008e84 <vTaskStartScheduler+0xbc>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d002      	beq.n	8008e12 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	617b      	str	r3, [r7, #20]
 8008e10:	e001      	b.n	8008e16 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008e12:	2300      	movs	r3, #0
 8008e14:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d102      	bne.n	8008e22 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008e1c:	f000 fd8c 	bl	8009938 <xTimerCreateTimerTask>
 8008e20:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	2b01      	cmp	r3, #1
 8008e26:	d116      	bne.n	8008e56 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e2c:	f383 8811 	msr	BASEPRI, r3
 8008e30:	f3bf 8f6f 	isb	sy
 8008e34:	f3bf 8f4f 	dsb	sy
 8008e38:	613b      	str	r3, [r7, #16]
}
 8008e3a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008e3c:	4b12      	ldr	r3, [pc, #72]	; (8008e88 <vTaskStartScheduler+0xc0>)
 8008e3e:	f04f 32ff 	mov.w	r2, #4294967295
 8008e42:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008e44:	4b11      	ldr	r3, [pc, #68]	; (8008e8c <vTaskStartScheduler+0xc4>)
 8008e46:	2201      	movs	r2, #1
 8008e48:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008e4a:	4b11      	ldr	r3, [pc, #68]	; (8008e90 <vTaskStartScheduler+0xc8>)
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008e50:	f001 f966 	bl	800a120 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008e54:	e00e      	b.n	8008e74 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e5c:	d10a      	bne.n	8008e74 <vTaskStartScheduler+0xac>
	__asm volatile
 8008e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e62:	f383 8811 	msr	BASEPRI, r3
 8008e66:	f3bf 8f6f 	isb	sy
 8008e6a:	f3bf 8f4f 	dsb	sy
 8008e6e:	60fb      	str	r3, [r7, #12]
}
 8008e70:	bf00      	nop
 8008e72:	e7fe      	b.n	8008e72 <vTaskStartScheduler+0xaa>
}
 8008e74:	bf00      	nop
 8008e76:	3718      	adds	r7, #24
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}
 8008e7c:	0800e748 	.word	0x0800e748
 8008e80:	0800956d 	.word	0x0800956d
 8008e84:	200010b4 	.word	0x200010b4
 8008e88:	200010b0 	.word	0x200010b0
 8008e8c:	2000109c 	.word	0x2000109c
 8008e90:	20001094 	.word	0x20001094

08008e94 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008e94:	b480      	push	{r7}
 8008e96:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008e98:	4b04      	ldr	r3, [pc, #16]	; (8008eac <vTaskSuspendAll+0x18>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	3301      	adds	r3, #1
 8008e9e:	4a03      	ldr	r2, [pc, #12]	; (8008eac <vTaskSuspendAll+0x18>)
 8008ea0:	6013      	str	r3, [r2, #0]
}
 8008ea2:	bf00      	nop
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr
 8008eac:	200010b8 	.word	0x200010b8

08008eb0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b084      	sub	sp, #16
 8008eb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008ebe:	4b41      	ldr	r3, [pc, #260]	; (8008fc4 <xTaskResumeAll+0x114>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d10a      	bne.n	8008edc <xTaskResumeAll+0x2c>
	__asm volatile
 8008ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eca:	f383 8811 	msr	BASEPRI, r3
 8008ece:	f3bf 8f6f 	isb	sy
 8008ed2:	f3bf 8f4f 	dsb	sy
 8008ed6:	603b      	str	r3, [r7, #0]
}
 8008ed8:	bf00      	nop
 8008eda:	e7fe      	b.n	8008eda <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008edc:	f001 f9c2 	bl	800a264 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008ee0:	4b38      	ldr	r3, [pc, #224]	; (8008fc4 <xTaskResumeAll+0x114>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	3b01      	subs	r3, #1
 8008ee6:	4a37      	ldr	r2, [pc, #220]	; (8008fc4 <xTaskResumeAll+0x114>)
 8008ee8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008eea:	4b36      	ldr	r3, [pc, #216]	; (8008fc4 <xTaskResumeAll+0x114>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d161      	bne.n	8008fb6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008ef2:	4b35      	ldr	r3, [pc, #212]	; (8008fc8 <xTaskResumeAll+0x118>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d05d      	beq.n	8008fb6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008efa:	e02e      	b.n	8008f5a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008efc:	4b33      	ldr	r3, [pc, #204]	; (8008fcc <xTaskResumeAll+0x11c>)
 8008efe:	68db      	ldr	r3, [r3, #12]
 8008f00:	68db      	ldr	r3, [r3, #12]
 8008f02:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	3318      	adds	r3, #24
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f7ff f892 	bl	8008032 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	3304      	adds	r3, #4
 8008f12:	4618      	mov	r0, r3
 8008f14:	f7ff f88d 	bl	8008032 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f1c:	2201      	movs	r2, #1
 8008f1e:	409a      	lsls	r2, r3
 8008f20:	4b2b      	ldr	r3, [pc, #172]	; (8008fd0 <xTaskResumeAll+0x120>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4313      	orrs	r3, r2
 8008f26:	4a2a      	ldr	r2, [pc, #168]	; (8008fd0 <xTaskResumeAll+0x120>)
 8008f28:	6013      	str	r3, [r2, #0]
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f2e:	4613      	mov	r3, r2
 8008f30:	009b      	lsls	r3, r3, #2
 8008f32:	4413      	add	r3, r2
 8008f34:	009b      	lsls	r3, r3, #2
 8008f36:	4a27      	ldr	r2, [pc, #156]	; (8008fd4 <xTaskResumeAll+0x124>)
 8008f38:	441a      	add	r2, r3
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	3304      	adds	r3, #4
 8008f3e:	4619      	mov	r1, r3
 8008f40:	4610      	mov	r0, r2
 8008f42:	f7ff f819 	bl	8007f78 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f4a:	4b23      	ldr	r3, [pc, #140]	; (8008fd8 <xTaskResumeAll+0x128>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f50:	429a      	cmp	r2, r3
 8008f52:	d302      	bcc.n	8008f5a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008f54:	4b21      	ldr	r3, [pc, #132]	; (8008fdc <xTaskResumeAll+0x12c>)
 8008f56:	2201      	movs	r2, #1
 8008f58:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f5a:	4b1c      	ldr	r3, [pc, #112]	; (8008fcc <xTaskResumeAll+0x11c>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d1cc      	bne.n	8008efc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d001      	beq.n	8008f6c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008f68:	f000 fbb6 	bl	80096d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008f6c:	4b1c      	ldr	r3, [pc, #112]	; (8008fe0 <xTaskResumeAll+0x130>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d010      	beq.n	8008f9a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008f78:	f000 f846 	bl	8009008 <xTaskIncrementTick>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d002      	beq.n	8008f88 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008f82:	4b16      	ldr	r3, [pc, #88]	; (8008fdc <xTaskResumeAll+0x12c>)
 8008f84:	2201      	movs	r2, #1
 8008f86:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	3b01      	subs	r3, #1
 8008f8c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d1f1      	bne.n	8008f78 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8008f94:	4b12      	ldr	r3, [pc, #72]	; (8008fe0 <xTaskResumeAll+0x130>)
 8008f96:	2200      	movs	r2, #0
 8008f98:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008f9a:	4b10      	ldr	r3, [pc, #64]	; (8008fdc <xTaskResumeAll+0x12c>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d009      	beq.n	8008fb6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008fa6:	4b0f      	ldr	r3, [pc, #60]	; (8008fe4 <xTaskResumeAll+0x134>)
 8008fa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fac:	601a      	str	r2, [r3, #0]
 8008fae:	f3bf 8f4f 	dsb	sy
 8008fb2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008fb6:	f001 f985 	bl	800a2c4 <vPortExitCritical>

	return xAlreadyYielded;
 8008fba:	68bb      	ldr	r3, [r7, #8]
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3710      	adds	r7, #16
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}
 8008fc4:	200010b8 	.word	0x200010b8
 8008fc8:	20001090 	.word	0x20001090
 8008fcc:	20001050 	.word	0x20001050
 8008fd0:	20001098 	.word	0x20001098
 8008fd4:	20000f94 	.word	0x20000f94
 8008fd8:	20000f90 	.word	0x20000f90
 8008fdc:	200010a4 	.word	0x200010a4
 8008fe0:	200010a0 	.word	0x200010a0
 8008fe4:	e000ed04 	.word	0xe000ed04

08008fe8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b083      	sub	sp, #12
 8008fec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008fee:	4b05      	ldr	r3, [pc, #20]	; (8009004 <xTaskGetTickCount+0x1c>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008ff4:	687b      	ldr	r3, [r7, #4]
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	370c      	adds	r7, #12
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009000:	4770      	bx	lr
 8009002:	bf00      	nop
 8009004:	20001094 	.word	0x20001094

08009008 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b086      	sub	sp, #24
 800900c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800900e:	2300      	movs	r3, #0
 8009010:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009012:	4b51      	ldr	r3, [pc, #324]	; (8009158 <xTaskIncrementTick+0x150>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	2b00      	cmp	r3, #0
 8009018:	f040 808d 	bne.w	8009136 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800901c:	4b4f      	ldr	r3, [pc, #316]	; (800915c <xTaskIncrementTick+0x154>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	3301      	adds	r3, #1
 8009022:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009024:	4a4d      	ldr	r2, [pc, #308]	; (800915c <xTaskIncrementTick+0x154>)
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d120      	bne.n	8009072 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009030:	4b4b      	ldr	r3, [pc, #300]	; (8009160 <xTaskIncrementTick+0x158>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d00a      	beq.n	8009050 <xTaskIncrementTick+0x48>
	__asm volatile
 800903a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800903e:	f383 8811 	msr	BASEPRI, r3
 8009042:	f3bf 8f6f 	isb	sy
 8009046:	f3bf 8f4f 	dsb	sy
 800904a:	603b      	str	r3, [r7, #0]
}
 800904c:	bf00      	nop
 800904e:	e7fe      	b.n	800904e <xTaskIncrementTick+0x46>
 8009050:	4b43      	ldr	r3, [pc, #268]	; (8009160 <xTaskIncrementTick+0x158>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	60fb      	str	r3, [r7, #12]
 8009056:	4b43      	ldr	r3, [pc, #268]	; (8009164 <xTaskIncrementTick+0x15c>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4a41      	ldr	r2, [pc, #260]	; (8009160 <xTaskIncrementTick+0x158>)
 800905c:	6013      	str	r3, [r2, #0]
 800905e:	4a41      	ldr	r2, [pc, #260]	; (8009164 <xTaskIncrementTick+0x15c>)
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	6013      	str	r3, [r2, #0]
 8009064:	4b40      	ldr	r3, [pc, #256]	; (8009168 <xTaskIncrementTick+0x160>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	3301      	adds	r3, #1
 800906a:	4a3f      	ldr	r2, [pc, #252]	; (8009168 <xTaskIncrementTick+0x160>)
 800906c:	6013      	str	r3, [r2, #0]
 800906e:	f000 fb33 	bl	80096d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009072:	4b3e      	ldr	r3, [pc, #248]	; (800916c <xTaskIncrementTick+0x164>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	693a      	ldr	r2, [r7, #16]
 8009078:	429a      	cmp	r2, r3
 800907a:	d34d      	bcc.n	8009118 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800907c:	4b38      	ldr	r3, [pc, #224]	; (8009160 <xTaskIncrementTick+0x158>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d101      	bne.n	800908a <xTaskIncrementTick+0x82>
 8009086:	2301      	movs	r3, #1
 8009088:	e000      	b.n	800908c <xTaskIncrementTick+0x84>
 800908a:	2300      	movs	r3, #0
 800908c:	2b00      	cmp	r3, #0
 800908e:	d004      	beq.n	800909a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009090:	4b36      	ldr	r3, [pc, #216]	; (800916c <xTaskIncrementTick+0x164>)
 8009092:	f04f 32ff 	mov.w	r2, #4294967295
 8009096:	601a      	str	r2, [r3, #0]
					break;
 8009098:	e03e      	b.n	8009118 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800909a:	4b31      	ldr	r3, [pc, #196]	; (8009160 <xTaskIncrementTick+0x158>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	68db      	ldr	r3, [r3, #12]
 80090a0:	68db      	ldr	r3, [r3, #12]
 80090a2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80090aa:	693a      	ldr	r2, [r7, #16]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d203      	bcs.n	80090ba <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80090b2:	4a2e      	ldr	r2, [pc, #184]	; (800916c <xTaskIncrementTick+0x164>)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6013      	str	r3, [r2, #0]
						break;
 80090b8:	e02e      	b.n	8009118 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	3304      	adds	r3, #4
 80090be:	4618      	mov	r0, r3
 80090c0:	f7fe ffb7 	bl	8008032 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d004      	beq.n	80090d6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	3318      	adds	r3, #24
 80090d0:	4618      	mov	r0, r3
 80090d2:	f7fe ffae 	bl	8008032 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090da:	2201      	movs	r2, #1
 80090dc:	409a      	lsls	r2, r3
 80090de:	4b24      	ldr	r3, [pc, #144]	; (8009170 <xTaskIncrementTick+0x168>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	4313      	orrs	r3, r2
 80090e4:	4a22      	ldr	r2, [pc, #136]	; (8009170 <xTaskIncrementTick+0x168>)
 80090e6:	6013      	str	r3, [r2, #0]
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090ec:	4613      	mov	r3, r2
 80090ee:	009b      	lsls	r3, r3, #2
 80090f0:	4413      	add	r3, r2
 80090f2:	009b      	lsls	r3, r3, #2
 80090f4:	4a1f      	ldr	r2, [pc, #124]	; (8009174 <xTaskIncrementTick+0x16c>)
 80090f6:	441a      	add	r2, r3
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	3304      	adds	r3, #4
 80090fc:	4619      	mov	r1, r3
 80090fe:	4610      	mov	r0, r2
 8009100:	f7fe ff3a 	bl	8007f78 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009108:	4b1b      	ldr	r3, [pc, #108]	; (8009178 <xTaskIncrementTick+0x170>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800910e:	429a      	cmp	r2, r3
 8009110:	d3b4      	bcc.n	800907c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009112:	2301      	movs	r3, #1
 8009114:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009116:	e7b1      	b.n	800907c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009118:	4b17      	ldr	r3, [pc, #92]	; (8009178 <xTaskIncrementTick+0x170>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800911e:	4915      	ldr	r1, [pc, #84]	; (8009174 <xTaskIncrementTick+0x16c>)
 8009120:	4613      	mov	r3, r2
 8009122:	009b      	lsls	r3, r3, #2
 8009124:	4413      	add	r3, r2
 8009126:	009b      	lsls	r3, r3, #2
 8009128:	440b      	add	r3, r1
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	2b01      	cmp	r3, #1
 800912e:	d907      	bls.n	8009140 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8009130:	2301      	movs	r3, #1
 8009132:	617b      	str	r3, [r7, #20]
 8009134:	e004      	b.n	8009140 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009136:	4b11      	ldr	r3, [pc, #68]	; (800917c <xTaskIncrementTick+0x174>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	3301      	adds	r3, #1
 800913c:	4a0f      	ldr	r2, [pc, #60]	; (800917c <xTaskIncrementTick+0x174>)
 800913e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009140:	4b0f      	ldr	r3, [pc, #60]	; (8009180 <xTaskIncrementTick+0x178>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d001      	beq.n	800914c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8009148:	2301      	movs	r3, #1
 800914a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800914c:	697b      	ldr	r3, [r7, #20]
}
 800914e:	4618      	mov	r0, r3
 8009150:	3718      	adds	r7, #24
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}
 8009156:	bf00      	nop
 8009158:	200010b8 	.word	0x200010b8
 800915c:	20001094 	.word	0x20001094
 8009160:	20001048 	.word	0x20001048
 8009164:	2000104c 	.word	0x2000104c
 8009168:	200010a8 	.word	0x200010a8
 800916c:	200010b0 	.word	0x200010b0
 8009170:	20001098 	.word	0x20001098
 8009174:	20000f94 	.word	0x20000f94
 8009178:	20000f90 	.word	0x20000f90
 800917c:	200010a0 	.word	0x200010a0
 8009180:	200010a4 	.word	0x200010a4

08009184 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009184:	b480      	push	{r7}
 8009186:	b087      	sub	sp, #28
 8009188:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800918a:	4b27      	ldr	r3, [pc, #156]	; (8009228 <vTaskSwitchContext+0xa4>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d003      	beq.n	800919a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009192:	4b26      	ldr	r3, [pc, #152]	; (800922c <vTaskSwitchContext+0xa8>)
 8009194:	2201      	movs	r2, #1
 8009196:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009198:	e03f      	b.n	800921a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800919a:	4b24      	ldr	r3, [pc, #144]	; (800922c <vTaskSwitchContext+0xa8>)
 800919c:	2200      	movs	r2, #0
 800919e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80091a0:	4b23      	ldr	r3, [pc, #140]	; (8009230 <vTaskSwitchContext+0xac>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	fab3 f383 	clz	r3, r3
 80091ac:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80091ae:	7afb      	ldrb	r3, [r7, #11]
 80091b0:	f1c3 031f 	rsb	r3, r3, #31
 80091b4:	617b      	str	r3, [r7, #20]
 80091b6:	491f      	ldr	r1, [pc, #124]	; (8009234 <vTaskSwitchContext+0xb0>)
 80091b8:	697a      	ldr	r2, [r7, #20]
 80091ba:	4613      	mov	r3, r2
 80091bc:	009b      	lsls	r3, r3, #2
 80091be:	4413      	add	r3, r2
 80091c0:	009b      	lsls	r3, r3, #2
 80091c2:	440b      	add	r3, r1
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d10a      	bne.n	80091e0 <vTaskSwitchContext+0x5c>
	__asm volatile
 80091ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ce:	f383 8811 	msr	BASEPRI, r3
 80091d2:	f3bf 8f6f 	isb	sy
 80091d6:	f3bf 8f4f 	dsb	sy
 80091da:	607b      	str	r3, [r7, #4]
}
 80091dc:	bf00      	nop
 80091de:	e7fe      	b.n	80091de <vTaskSwitchContext+0x5a>
 80091e0:	697a      	ldr	r2, [r7, #20]
 80091e2:	4613      	mov	r3, r2
 80091e4:	009b      	lsls	r3, r3, #2
 80091e6:	4413      	add	r3, r2
 80091e8:	009b      	lsls	r3, r3, #2
 80091ea:	4a12      	ldr	r2, [pc, #72]	; (8009234 <vTaskSwitchContext+0xb0>)
 80091ec:	4413      	add	r3, r2
 80091ee:	613b      	str	r3, [r7, #16]
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	685a      	ldr	r2, [r3, #4]
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	605a      	str	r2, [r3, #4]
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	685a      	ldr	r2, [r3, #4]
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	3308      	adds	r3, #8
 8009202:	429a      	cmp	r2, r3
 8009204:	d104      	bne.n	8009210 <vTaskSwitchContext+0x8c>
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	685b      	ldr	r3, [r3, #4]
 800920a:	685a      	ldr	r2, [r3, #4]
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	605a      	str	r2, [r3, #4]
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	68db      	ldr	r3, [r3, #12]
 8009216:	4a08      	ldr	r2, [pc, #32]	; (8009238 <vTaskSwitchContext+0xb4>)
 8009218:	6013      	str	r3, [r2, #0]
}
 800921a:	bf00      	nop
 800921c:	371c      	adds	r7, #28
 800921e:	46bd      	mov	sp, r7
 8009220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009224:	4770      	bx	lr
 8009226:	bf00      	nop
 8009228:	200010b8 	.word	0x200010b8
 800922c:	200010a4 	.word	0x200010a4
 8009230:	20001098 	.word	0x20001098
 8009234:	20000f94 	.word	0x20000f94
 8009238:	20000f90 	.word	0x20000f90

0800923c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b084      	sub	sp, #16
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d10a      	bne.n	8009262 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800924c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009250:	f383 8811 	msr	BASEPRI, r3
 8009254:	f3bf 8f6f 	isb	sy
 8009258:	f3bf 8f4f 	dsb	sy
 800925c:	60fb      	str	r3, [r7, #12]
}
 800925e:	bf00      	nop
 8009260:	e7fe      	b.n	8009260 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009262:	4b07      	ldr	r3, [pc, #28]	; (8009280 <vTaskPlaceOnEventList+0x44>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	3318      	adds	r3, #24
 8009268:	4619      	mov	r1, r3
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f7fe fea8 	bl	8007fc0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009270:	2101      	movs	r1, #1
 8009272:	6838      	ldr	r0, [r7, #0]
 8009274:	f000 fafa 	bl	800986c <prvAddCurrentTaskToDelayedList>
}
 8009278:	bf00      	nop
 800927a:	3710      	adds	r7, #16
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}
 8009280:	20000f90 	.word	0x20000f90

08009284 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009284:	b580      	push	{r7, lr}
 8009286:	b086      	sub	sp, #24
 8009288:	af00      	add	r7, sp, #0
 800928a:	60f8      	str	r0, [r7, #12]
 800928c:	60b9      	str	r1, [r7, #8]
 800928e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d10a      	bne.n	80092ac <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800929a:	f383 8811 	msr	BASEPRI, r3
 800929e:	f3bf 8f6f 	isb	sy
 80092a2:	f3bf 8f4f 	dsb	sy
 80092a6:	617b      	str	r3, [r7, #20]
}
 80092a8:	bf00      	nop
 80092aa:	e7fe      	b.n	80092aa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80092ac:	4b0a      	ldr	r3, [pc, #40]	; (80092d8 <vTaskPlaceOnEventListRestricted+0x54>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	3318      	adds	r3, #24
 80092b2:	4619      	mov	r1, r3
 80092b4:	68f8      	ldr	r0, [r7, #12]
 80092b6:	f7fe fe5f 	bl	8007f78 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d002      	beq.n	80092c6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80092c0:	f04f 33ff 	mov.w	r3, #4294967295
 80092c4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80092c6:	6879      	ldr	r1, [r7, #4]
 80092c8:	68b8      	ldr	r0, [r7, #8]
 80092ca:	f000 facf 	bl	800986c <prvAddCurrentTaskToDelayedList>
	}
 80092ce:	bf00      	nop
 80092d0:	3718      	adds	r7, #24
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}
 80092d6:	bf00      	nop
 80092d8:	20000f90 	.word	0x20000f90

080092dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b086      	sub	sp, #24
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	68db      	ldr	r3, [r3, #12]
 80092e8:	68db      	ldr	r3, [r3, #12]
 80092ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d10a      	bne.n	8009308 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80092f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f6:	f383 8811 	msr	BASEPRI, r3
 80092fa:	f3bf 8f6f 	isb	sy
 80092fe:	f3bf 8f4f 	dsb	sy
 8009302:	60fb      	str	r3, [r7, #12]
}
 8009304:	bf00      	nop
 8009306:	e7fe      	b.n	8009306 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	3318      	adds	r3, #24
 800930c:	4618      	mov	r0, r3
 800930e:	f7fe fe90 	bl	8008032 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009312:	4b1d      	ldr	r3, [pc, #116]	; (8009388 <xTaskRemoveFromEventList+0xac>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d11c      	bne.n	8009354 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	3304      	adds	r3, #4
 800931e:	4618      	mov	r0, r3
 8009320:	f7fe fe87 	bl	8008032 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009328:	2201      	movs	r2, #1
 800932a:	409a      	lsls	r2, r3
 800932c:	4b17      	ldr	r3, [pc, #92]	; (800938c <xTaskRemoveFromEventList+0xb0>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4313      	orrs	r3, r2
 8009332:	4a16      	ldr	r2, [pc, #88]	; (800938c <xTaskRemoveFromEventList+0xb0>)
 8009334:	6013      	str	r3, [r2, #0]
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800933a:	4613      	mov	r3, r2
 800933c:	009b      	lsls	r3, r3, #2
 800933e:	4413      	add	r3, r2
 8009340:	009b      	lsls	r3, r3, #2
 8009342:	4a13      	ldr	r2, [pc, #76]	; (8009390 <xTaskRemoveFromEventList+0xb4>)
 8009344:	441a      	add	r2, r3
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	3304      	adds	r3, #4
 800934a:	4619      	mov	r1, r3
 800934c:	4610      	mov	r0, r2
 800934e:	f7fe fe13 	bl	8007f78 <vListInsertEnd>
 8009352:	e005      	b.n	8009360 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	3318      	adds	r3, #24
 8009358:	4619      	mov	r1, r3
 800935a:	480e      	ldr	r0, [pc, #56]	; (8009394 <xTaskRemoveFromEventList+0xb8>)
 800935c:	f7fe fe0c 	bl	8007f78 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009364:	4b0c      	ldr	r3, [pc, #48]	; (8009398 <xTaskRemoveFromEventList+0xbc>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800936a:	429a      	cmp	r2, r3
 800936c:	d905      	bls.n	800937a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800936e:	2301      	movs	r3, #1
 8009370:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009372:	4b0a      	ldr	r3, [pc, #40]	; (800939c <xTaskRemoveFromEventList+0xc0>)
 8009374:	2201      	movs	r2, #1
 8009376:	601a      	str	r2, [r3, #0]
 8009378:	e001      	b.n	800937e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800937a:	2300      	movs	r3, #0
 800937c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800937e:	697b      	ldr	r3, [r7, #20]
}
 8009380:	4618      	mov	r0, r3
 8009382:	3718      	adds	r7, #24
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}
 8009388:	200010b8 	.word	0x200010b8
 800938c:	20001098 	.word	0x20001098
 8009390:	20000f94 	.word	0x20000f94
 8009394:	20001050 	.word	0x20001050
 8009398:	20000f90 	.word	0x20000f90
 800939c:	200010a4 	.word	0x200010a4

080093a0 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b086      	sub	sp, #24
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80093aa:	4b29      	ldr	r3, [pc, #164]	; (8009450 <vTaskRemoveFromUnorderedEventList+0xb0>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d10a      	bne.n	80093c8 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 80093b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b6:	f383 8811 	msr	BASEPRI, r3
 80093ba:	f3bf 8f6f 	isb	sy
 80093be:	f3bf 8f4f 	dsb	sy
 80093c2:	613b      	str	r3, [r7, #16]
}
 80093c4:	bf00      	nop
 80093c6:	e7fe      	b.n	80093c6 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	68db      	ldr	r3, [r3, #12]
 80093d6:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d10a      	bne.n	80093f4 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 80093de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e2:	f383 8811 	msr	BASEPRI, r3
 80093e6:	f3bf 8f6f 	isb	sy
 80093ea:	f3bf 8f4f 	dsb	sy
 80093ee:	60fb      	str	r3, [r7, #12]
}
 80093f0:	bf00      	nop
 80093f2:	e7fe      	b.n	80093f2 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f7fe fe1c 	bl	8008032 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	3304      	adds	r3, #4
 80093fe:	4618      	mov	r0, r3
 8009400:	f7fe fe17 	bl	8008032 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009408:	2201      	movs	r2, #1
 800940a:	409a      	lsls	r2, r3
 800940c:	4b11      	ldr	r3, [pc, #68]	; (8009454 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	4313      	orrs	r3, r2
 8009412:	4a10      	ldr	r2, [pc, #64]	; (8009454 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8009414:	6013      	str	r3, [r2, #0]
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800941a:	4613      	mov	r3, r2
 800941c:	009b      	lsls	r3, r3, #2
 800941e:	4413      	add	r3, r2
 8009420:	009b      	lsls	r3, r3, #2
 8009422:	4a0d      	ldr	r2, [pc, #52]	; (8009458 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8009424:	441a      	add	r2, r3
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	3304      	adds	r3, #4
 800942a:	4619      	mov	r1, r3
 800942c:	4610      	mov	r0, r2
 800942e:	f7fe fda3 	bl	8007f78 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009436:	4b09      	ldr	r3, [pc, #36]	; (800945c <vTaskRemoveFromUnorderedEventList+0xbc>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800943c:	429a      	cmp	r2, r3
 800943e:	d902      	bls.n	8009446 <vTaskRemoveFromUnorderedEventList+0xa6>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8009440:	4b07      	ldr	r3, [pc, #28]	; (8009460 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8009442:	2201      	movs	r2, #1
 8009444:	601a      	str	r2, [r3, #0]
	}
}
 8009446:	bf00      	nop
 8009448:	3718      	adds	r7, #24
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}
 800944e:	bf00      	nop
 8009450:	200010b8 	.word	0x200010b8
 8009454:	20001098 	.word	0x20001098
 8009458:	20000f94 	.word	0x20000f94
 800945c:	20000f90 	.word	0x20000f90
 8009460:	200010a4 	.word	0x200010a4

08009464 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009464:	b480      	push	{r7}
 8009466:	b083      	sub	sp, #12
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800946c:	4b06      	ldr	r3, [pc, #24]	; (8009488 <vTaskInternalSetTimeOutState+0x24>)
 800946e:	681a      	ldr	r2, [r3, #0]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009474:	4b05      	ldr	r3, [pc, #20]	; (800948c <vTaskInternalSetTimeOutState+0x28>)
 8009476:	681a      	ldr	r2, [r3, #0]
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	605a      	str	r2, [r3, #4]
}
 800947c:	bf00      	nop
 800947e:	370c      	adds	r7, #12
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr
 8009488:	200010a8 	.word	0x200010a8
 800948c:	20001094 	.word	0x20001094

08009490 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b088      	sub	sp, #32
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
 8009498:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d10a      	bne.n	80094b6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80094a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a4:	f383 8811 	msr	BASEPRI, r3
 80094a8:	f3bf 8f6f 	isb	sy
 80094ac:	f3bf 8f4f 	dsb	sy
 80094b0:	613b      	str	r3, [r7, #16]
}
 80094b2:	bf00      	nop
 80094b4:	e7fe      	b.n	80094b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d10a      	bne.n	80094d2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80094bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c0:	f383 8811 	msr	BASEPRI, r3
 80094c4:	f3bf 8f6f 	isb	sy
 80094c8:	f3bf 8f4f 	dsb	sy
 80094cc:	60fb      	str	r3, [r7, #12]
}
 80094ce:	bf00      	nop
 80094d0:	e7fe      	b.n	80094d0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80094d2:	f000 fec7 	bl	800a264 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80094d6:	4b1d      	ldr	r3, [pc, #116]	; (800954c <xTaskCheckForTimeOut+0xbc>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	685b      	ldr	r3, [r3, #4]
 80094e0:	69ba      	ldr	r2, [r7, #24]
 80094e2:	1ad3      	subs	r3, r2, r3
 80094e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094ee:	d102      	bne.n	80094f6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80094f0:	2300      	movs	r3, #0
 80094f2:	61fb      	str	r3, [r7, #28]
 80094f4:	e023      	b.n	800953e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681a      	ldr	r2, [r3, #0]
 80094fa:	4b15      	ldr	r3, [pc, #84]	; (8009550 <xTaskCheckForTimeOut+0xc0>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	429a      	cmp	r2, r3
 8009500:	d007      	beq.n	8009512 <xTaskCheckForTimeOut+0x82>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	69ba      	ldr	r2, [r7, #24]
 8009508:	429a      	cmp	r2, r3
 800950a:	d302      	bcc.n	8009512 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800950c:	2301      	movs	r3, #1
 800950e:	61fb      	str	r3, [r7, #28]
 8009510:	e015      	b.n	800953e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	697a      	ldr	r2, [r7, #20]
 8009518:	429a      	cmp	r2, r3
 800951a:	d20b      	bcs.n	8009534 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	681a      	ldr	r2, [r3, #0]
 8009520:	697b      	ldr	r3, [r7, #20]
 8009522:	1ad2      	subs	r2, r2, r3
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f7ff ff9b 	bl	8009464 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800952e:	2300      	movs	r3, #0
 8009530:	61fb      	str	r3, [r7, #28]
 8009532:	e004      	b.n	800953e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	2200      	movs	r2, #0
 8009538:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800953a:	2301      	movs	r3, #1
 800953c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800953e:	f000 fec1 	bl	800a2c4 <vPortExitCritical>

	return xReturn;
 8009542:	69fb      	ldr	r3, [r7, #28]
}
 8009544:	4618      	mov	r0, r3
 8009546:	3720      	adds	r7, #32
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}
 800954c:	20001094 	.word	0x20001094
 8009550:	200010a8 	.word	0x200010a8

08009554 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009554:	b480      	push	{r7}
 8009556:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009558:	4b03      	ldr	r3, [pc, #12]	; (8009568 <vTaskMissedYield+0x14>)
 800955a:	2201      	movs	r2, #1
 800955c:	601a      	str	r2, [r3, #0]
}
 800955e:	bf00      	nop
 8009560:	46bd      	mov	sp, r7
 8009562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009566:	4770      	bx	lr
 8009568:	200010a4 	.word	0x200010a4

0800956c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b082      	sub	sp, #8
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009574:	f000 f852 	bl	800961c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009578:	4b06      	ldr	r3, [pc, #24]	; (8009594 <prvIdleTask+0x28>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	2b01      	cmp	r3, #1
 800957e:	d9f9      	bls.n	8009574 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009580:	4b05      	ldr	r3, [pc, #20]	; (8009598 <prvIdleTask+0x2c>)
 8009582:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009586:	601a      	str	r2, [r3, #0]
 8009588:	f3bf 8f4f 	dsb	sy
 800958c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009590:	e7f0      	b.n	8009574 <prvIdleTask+0x8>
 8009592:	bf00      	nop
 8009594:	20000f94 	.word	0x20000f94
 8009598:	e000ed04 	.word	0xe000ed04

0800959c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b082      	sub	sp, #8
 80095a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80095a2:	2300      	movs	r3, #0
 80095a4:	607b      	str	r3, [r7, #4]
 80095a6:	e00c      	b.n	80095c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80095a8:	687a      	ldr	r2, [r7, #4]
 80095aa:	4613      	mov	r3, r2
 80095ac:	009b      	lsls	r3, r3, #2
 80095ae:	4413      	add	r3, r2
 80095b0:	009b      	lsls	r3, r3, #2
 80095b2:	4a12      	ldr	r2, [pc, #72]	; (80095fc <prvInitialiseTaskLists+0x60>)
 80095b4:	4413      	add	r3, r2
 80095b6:	4618      	mov	r0, r3
 80095b8:	f7fe fcb1 	bl	8007f1e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	3301      	adds	r3, #1
 80095c0:	607b      	str	r3, [r7, #4]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2b06      	cmp	r3, #6
 80095c6:	d9ef      	bls.n	80095a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80095c8:	480d      	ldr	r0, [pc, #52]	; (8009600 <prvInitialiseTaskLists+0x64>)
 80095ca:	f7fe fca8 	bl	8007f1e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80095ce:	480d      	ldr	r0, [pc, #52]	; (8009604 <prvInitialiseTaskLists+0x68>)
 80095d0:	f7fe fca5 	bl	8007f1e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80095d4:	480c      	ldr	r0, [pc, #48]	; (8009608 <prvInitialiseTaskLists+0x6c>)
 80095d6:	f7fe fca2 	bl	8007f1e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80095da:	480c      	ldr	r0, [pc, #48]	; (800960c <prvInitialiseTaskLists+0x70>)
 80095dc:	f7fe fc9f 	bl	8007f1e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80095e0:	480b      	ldr	r0, [pc, #44]	; (8009610 <prvInitialiseTaskLists+0x74>)
 80095e2:	f7fe fc9c 	bl	8007f1e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80095e6:	4b0b      	ldr	r3, [pc, #44]	; (8009614 <prvInitialiseTaskLists+0x78>)
 80095e8:	4a05      	ldr	r2, [pc, #20]	; (8009600 <prvInitialiseTaskLists+0x64>)
 80095ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80095ec:	4b0a      	ldr	r3, [pc, #40]	; (8009618 <prvInitialiseTaskLists+0x7c>)
 80095ee:	4a05      	ldr	r2, [pc, #20]	; (8009604 <prvInitialiseTaskLists+0x68>)
 80095f0:	601a      	str	r2, [r3, #0]
}
 80095f2:	bf00      	nop
 80095f4:	3708      	adds	r7, #8
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
 80095fa:	bf00      	nop
 80095fc:	20000f94 	.word	0x20000f94
 8009600:	20001020 	.word	0x20001020
 8009604:	20001034 	.word	0x20001034
 8009608:	20001050 	.word	0x20001050
 800960c:	20001064 	.word	0x20001064
 8009610:	2000107c 	.word	0x2000107c
 8009614:	20001048 	.word	0x20001048
 8009618:	2000104c 	.word	0x2000104c

0800961c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b082      	sub	sp, #8
 8009620:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009622:	e019      	b.n	8009658 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009624:	f000 fe1e 	bl	800a264 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009628:	4b10      	ldr	r3, [pc, #64]	; (800966c <prvCheckTasksWaitingTermination+0x50>)
 800962a:	68db      	ldr	r3, [r3, #12]
 800962c:	68db      	ldr	r3, [r3, #12]
 800962e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	3304      	adds	r3, #4
 8009634:	4618      	mov	r0, r3
 8009636:	f7fe fcfc 	bl	8008032 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800963a:	4b0d      	ldr	r3, [pc, #52]	; (8009670 <prvCheckTasksWaitingTermination+0x54>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	3b01      	subs	r3, #1
 8009640:	4a0b      	ldr	r2, [pc, #44]	; (8009670 <prvCheckTasksWaitingTermination+0x54>)
 8009642:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009644:	4b0b      	ldr	r3, [pc, #44]	; (8009674 <prvCheckTasksWaitingTermination+0x58>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	3b01      	subs	r3, #1
 800964a:	4a0a      	ldr	r2, [pc, #40]	; (8009674 <prvCheckTasksWaitingTermination+0x58>)
 800964c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800964e:	f000 fe39 	bl	800a2c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f000 f810 	bl	8009678 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009658:	4b06      	ldr	r3, [pc, #24]	; (8009674 <prvCheckTasksWaitingTermination+0x58>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d1e1      	bne.n	8009624 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009660:	bf00      	nop
 8009662:	bf00      	nop
 8009664:	3708      	adds	r7, #8
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}
 800966a:	bf00      	nop
 800966c:	20001064 	.word	0x20001064
 8009670:	20001090 	.word	0x20001090
 8009674:	20001078 	.word	0x20001078

08009678 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009678:	b580      	push	{r7, lr}
 800967a:	b084      	sub	sp, #16
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8009686:	2b00      	cmp	r3, #0
 8009688:	d108      	bne.n	800969c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800968e:	4618      	mov	r0, r3
 8009690:	f000 ffce 	bl	800a630 <vPortFree>
				vPortFree( pxTCB );
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f000 ffcb 	bl	800a630 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800969a:	e018      	b.n	80096ce <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80096a2:	2b01      	cmp	r3, #1
 80096a4:	d103      	bne.n	80096ae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f000 ffc2 	bl	800a630 <vPortFree>
	}
 80096ac:	e00f      	b.n	80096ce <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80096b4:	2b02      	cmp	r3, #2
 80096b6:	d00a      	beq.n	80096ce <prvDeleteTCB+0x56>
	__asm volatile
 80096b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096bc:	f383 8811 	msr	BASEPRI, r3
 80096c0:	f3bf 8f6f 	isb	sy
 80096c4:	f3bf 8f4f 	dsb	sy
 80096c8:	60fb      	str	r3, [r7, #12]
}
 80096ca:	bf00      	nop
 80096cc:	e7fe      	b.n	80096cc <prvDeleteTCB+0x54>
	}
 80096ce:	bf00      	nop
 80096d0:	3710      	adds	r7, #16
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
	...

080096d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80096d8:	b480      	push	{r7}
 80096da:	b083      	sub	sp, #12
 80096dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80096de:	4b0f      	ldr	r3, [pc, #60]	; (800971c <prvResetNextTaskUnblockTime+0x44>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d101      	bne.n	80096ec <prvResetNextTaskUnblockTime+0x14>
 80096e8:	2301      	movs	r3, #1
 80096ea:	e000      	b.n	80096ee <prvResetNextTaskUnblockTime+0x16>
 80096ec:	2300      	movs	r3, #0
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d004      	beq.n	80096fc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80096f2:	4b0b      	ldr	r3, [pc, #44]	; (8009720 <prvResetNextTaskUnblockTime+0x48>)
 80096f4:	f04f 32ff 	mov.w	r2, #4294967295
 80096f8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80096fa:	e008      	b.n	800970e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80096fc:	4b07      	ldr	r3, [pc, #28]	; (800971c <prvResetNextTaskUnblockTime+0x44>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	68db      	ldr	r3, [r3, #12]
 8009702:	68db      	ldr	r3, [r3, #12]
 8009704:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	685b      	ldr	r3, [r3, #4]
 800970a:	4a05      	ldr	r2, [pc, #20]	; (8009720 <prvResetNextTaskUnblockTime+0x48>)
 800970c:	6013      	str	r3, [r2, #0]
}
 800970e:	bf00      	nop
 8009710:	370c      	adds	r7, #12
 8009712:	46bd      	mov	sp, r7
 8009714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009718:	4770      	bx	lr
 800971a:	bf00      	nop
 800971c:	20001048 	.word	0x20001048
 8009720:	200010b0 	.word	0x200010b0

08009724 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009724:	b480      	push	{r7}
 8009726:	b083      	sub	sp, #12
 8009728:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800972a:	4b0b      	ldr	r3, [pc, #44]	; (8009758 <xTaskGetSchedulerState+0x34>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d102      	bne.n	8009738 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009732:	2301      	movs	r3, #1
 8009734:	607b      	str	r3, [r7, #4]
 8009736:	e008      	b.n	800974a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009738:	4b08      	ldr	r3, [pc, #32]	; (800975c <xTaskGetSchedulerState+0x38>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d102      	bne.n	8009746 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009740:	2302      	movs	r3, #2
 8009742:	607b      	str	r3, [r7, #4]
 8009744:	e001      	b.n	800974a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009746:	2300      	movs	r3, #0
 8009748:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800974a:	687b      	ldr	r3, [r7, #4]
	}
 800974c:	4618      	mov	r0, r3
 800974e:	370c      	adds	r7, #12
 8009750:	46bd      	mov	sp, r7
 8009752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009756:	4770      	bx	lr
 8009758:	2000109c 	.word	0x2000109c
 800975c:	200010b8 	.word	0x200010b8

08009760 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009760:	b580      	push	{r7, lr}
 8009762:	b086      	sub	sp, #24
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800976c:	2300      	movs	r3, #0
 800976e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d06e      	beq.n	8009854 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009776:	4b3a      	ldr	r3, [pc, #232]	; (8009860 <xTaskPriorityDisinherit+0x100>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	693a      	ldr	r2, [r7, #16]
 800977c:	429a      	cmp	r2, r3
 800977e:	d00a      	beq.n	8009796 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009784:	f383 8811 	msr	BASEPRI, r3
 8009788:	f3bf 8f6f 	isb	sy
 800978c:	f3bf 8f4f 	dsb	sy
 8009790:	60fb      	str	r3, [r7, #12]
}
 8009792:	bf00      	nop
 8009794:	e7fe      	b.n	8009794 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800979a:	2b00      	cmp	r3, #0
 800979c:	d10a      	bne.n	80097b4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800979e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a2:	f383 8811 	msr	BASEPRI, r3
 80097a6:	f3bf 8f6f 	isb	sy
 80097aa:	f3bf 8f4f 	dsb	sy
 80097ae:	60bb      	str	r3, [r7, #8]
}
 80097b0:	bf00      	nop
 80097b2:	e7fe      	b.n	80097b2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097b8:	1e5a      	subs	r2, r3, #1
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097c6:	429a      	cmp	r2, r3
 80097c8:	d044      	beq.n	8009854 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d140      	bne.n	8009854 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	3304      	adds	r3, #4
 80097d6:	4618      	mov	r0, r3
 80097d8:	f7fe fc2b 	bl	8008032 <uxListRemove>
 80097dc:	4603      	mov	r3, r0
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d115      	bne.n	800980e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097e6:	491f      	ldr	r1, [pc, #124]	; (8009864 <xTaskPriorityDisinherit+0x104>)
 80097e8:	4613      	mov	r3, r2
 80097ea:	009b      	lsls	r3, r3, #2
 80097ec:	4413      	add	r3, r2
 80097ee:	009b      	lsls	r3, r3, #2
 80097f0:	440b      	add	r3, r1
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d10a      	bne.n	800980e <xTaskPriorityDisinherit+0xae>
 80097f8:	693b      	ldr	r3, [r7, #16]
 80097fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097fc:	2201      	movs	r2, #1
 80097fe:	fa02 f303 	lsl.w	r3, r2, r3
 8009802:	43da      	mvns	r2, r3
 8009804:	4b18      	ldr	r3, [pc, #96]	; (8009868 <xTaskPriorityDisinherit+0x108>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	4013      	ands	r3, r2
 800980a:	4a17      	ldr	r2, [pc, #92]	; (8009868 <xTaskPriorityDisinherit+0x108>)
 800980c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800981a:	f1c3 0207 	rsb	r2, r3, #7
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009826:	2201      	movs	r2, #1
 8009828:	409a      	lsls	r2, r3
 800982a:	4b0f      	ldr	r3, [pc, #60]	; (8009868 <xTaskPriorityDisinherit+0x108>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	4313      	orrs	r3, r2
 8009830:	4a0d      	ldr	r2, [pc, #52]	; (8009868 <xTaskPriorityDisinherit+0x108>)
 8009832:	6013      	str	r3, [r2, #0]
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009838:	4613      	mov	r3, r2
 800983a:	009b      	lsls	r3, r3, #2
 800983c:	4413      	add	r3, r2
 800983e:	009b      	lsls	r3, r3, #2
 8009840:	4a08      	ldr	r2, [pc, #32]	; (8009864 <xTaskPriorityDisinherit+0x104>)
 8009842:	441a      	add	r2, r3
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	3304      	adds	r3, #4
 8009848:	4619      	mov	r1, r3
 800984a:	4610      	mov	r0, r2
 800984c:	f7fe fb94 	bl	8007f78 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009850:	2301      	movs	r3, #1
 8009852:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009854:	697b      	ldr	r3, [r7, #20]
	}
 8009856:	4618      	mov	r0, r3
 8009858:	3718      	adds	r7, #24
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}
 800985e:	bf00      	nop
 8009860:	20000f90 	.word	0x20000f90
 8009864:	20000f94 	.word	0x20000f94
 8009868:	20001098 	.word	0x20001098

0800986c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b084      	sub	sp, #16
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009876:	4b29      	ldr	r3, [pc, #164]	; (800991c <prvAddCurrentTaskToDelayedList+0xb0>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800987c:	4b28      	ldr	r3, [pc, #160]	; (8009920 <prvAddCurrentTaskToDelayedList+0xb4>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	3304      	adds	r3, #4
 8009882:	4618      	mov	r0, r3
 8009884:	f7fe fbd5 	bl	8008032 <uxListRemove>
 8009888:	4603      	mov	r3, r0
 800988a:	2b00      	cmp	r3, #0
 800988c:	d10b      	bne.n	80098a6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800988e:	4b24      	ldr	r3, [pc, #144]	; (8009920 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009894:	2201      	movs	r2, #1
 8009896:	fa02 f303 	lsl.w	r3, r2, r3
 800989a:	43da      	mvns	r2, r3
 800989c:	4b21      	ldr	r3, [pc, #132]	; (8009924 <prvAddCurrentTaskToDelayedList+0xb8>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4013      	ands	r3, r2
 80098a2:	4a20      	ldr	r2, [pc, #128]	; (8009924 <prvAddCurrentTaskToDelayedList+0xb8>)
 80098a4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098ac:	d10a      	bne.n	80098c4 <prvAddCurrentTaskToDelayedList+0x58>
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d007      	beq.n	80098c4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80098b4:	4b1a      	ldr	r3, [pc, #104]	; (8009920 <prvAddCurrentTaskToDelayedList+0xb4>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	3304      	adds	r3, #4
 80098ba:	4619      	mov	r1, r3
 80098bc:	481a      	ldr	r0, [pc, #104]	; (8009928 <prvAddCurrentTaskToDelayedList+0xbc>)
 80098be:	f7fe fb5b 	bl	8007f78 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80098c2:	e026      	b.n	8009912 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80098c4:	68fa      	ldr	r2, [r7, #12]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	4413      	add	r3, r2
 80098ca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80098cc:	4b14      	ldr	r3, [pc, #80]	; (8009920 <prvAddCurrentTaskToDelayedList+0xb4>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	68ba      	ldr	r2, [r7, #8]
 80098d2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80098d4:	68ba      	ldr	r2, [r7, #8]
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	429a      	cmp	r2, r3
 80098da:	d209      	bcs.n	80098f0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80098dc:	4b13      	ldr	r3, [pc, #76]	; (800992c <prvAddCurrentTaskToDelayedList+0xc0>)
 80098de:	681a      	ldr	r2, [r3, #0]
 80098e0:	4b0f      	ldr	r3, [pc, #60]	; (8009920 <prvAddCurrentTaskToDelayedList+0xb4>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	3304      	adds	r3, #4
 80098e6:	4619      	mov	r1, r3
 80098e8:	4610      	mov	r0, r2
 80098ea:	f7fe fb69 	bl	8007fc0 <vListInsert>
}
 80098ee:	e010      	b.n	8009912 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80098f0:	4b0f      	ldr	r3, [pc, #60]	; (8009930 <prvAddCurrentTaskToDelayedList+0xc4>)
 80098f2:	681a      	ldr	r2, [r3, #0]
 80098f4:	4b0a      	ldr	r3, [pc, #40]	; (8009920 <prvAddCurrentTaskToDelayedList+0xb4>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	3304      	adds	r3, #4
 80098fa:	4619      	mov	r1, r3
 80098fc:	4610      	mov	r0, r2
 80098fe:	f7fe fb5f 	bl	8007fc0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009902:	4b0c      	ldr	r3, [pc, #48]	; (8009934 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	68ba      	ldr	r2, [r7, #8]
 8009908:	429a      	cmp	r2, r3
 800990a:	d202      	bcs.n	8009912 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800990c:	4a09      	ldr	r2, [pc, #36]	; (8009934 <prvAddCurrentTaskToDelayedList+0xc8>)
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	6013      	str	r3, [r2, #0]
}
 8009912:	bf00      	nop
 8009914:	3710      	adds	r7, #16
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
 800991a:	bf00      	nop
 800991c:	20001094 	.word	0x20001094
 8009920:	20000f90 	.word	0x20000f90
 8009924:	20001098 	.word	0x20001098
 8009928:	2000107c 	.word	0x2000107c
 800992c:	2000104c 	.word	0x2000104c
 8009930:	20001048 	.word	0x20001048
 8009934:	200010b0 	.word	0x200010b0

08009938 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b08a      	sub	sp, #40	; 0x28
 800993c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800993e:	2300      	movs	r3, #0
 8009940:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009942:	f000 fb1f 	bl	8009f84 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009946:	4b1c      	ldr	r3, [pc, #112]	; (80099b8 <xTimerCreateTimerTask+0x80>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d021      	beq.n	8009992 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800994e:	2300      	movs	r3, #0
 8009950:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009952:	2300      	movs	r3, #0
 8009954:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009956:	1d3a      	adds	r2, r7, #4
 8009958:	f107 0108 	add.w	r1, r7, #8
 800995c:	f107 030c 	add.w	r3, r7, #12
 8009960:	4618      	mov	r0, r3
 8009962:	f7f7 fa3b 	bl	8000ddc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009966:	6879      	ldr	r1, [r7, #4]
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	68fa      	ldr	r2, [r7, #12]
 800996c:	9202      	str	r2, [sp, #8]
 800996e:	9301      	str	r3, [sp, #4]
 8009970:	2302      	movs	r3, #2
 8009972:	9300      	str	r3, [sp, #0]
 8009974:	2300      	movs	r3, #0
 8009976:	460a      	mov	r2, r1
 8009978:	4910      	ldr	r1, [pc, #64]	; (80099bc <xTimerCreateTimerTask+0x84>)
 800997a:	4811      	ldr	r0, [pc, #68]	; (80099c0 <xTimerCreateTimerTask+0x88>)
 800997c:	f7ff f866 	bl	8008a4c <xTaskCreateStatic>
 8009980:	4603      	mov	r3, r0
 8009982:	4a10      	ldr	r2, [pc, #64]	; (80099c4 <xTimerCreateTimerTask+0x8c>)
 8009984:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009986:	4b0f      	ldr	r3, [pc, #60]	; (80099c4 <xTimerCreateTimerTask+0x8c>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d001      	beq.n	8009992 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800998e:	2301      	movs	r3, #1
 8009990:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009992:	697b      	ldr	r3, [r7, #20]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d10a      	bne.n	80099ae <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800999c:	f383 8811 	msr	BASEPRI, r3
 80099a0:	f3bf 8f6f 	isb	sy
 80099a4:	f3bf 8f4f 	dsb	sy
 80099a8:	613b      	str	r3, [r7, #16]
}
 80099aa:	bf00      	nop
 80099ac:	e7fe      	b.n	80099ac <xTimerCreateTimerTask+0x74>
	return xReturn;
 80099ae:	697b      	ldr	r3, [r7, #20]
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	3718      	adds	r7, #24
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}
 80099b8:	200010ec 	.word	0x200010ec
 80099bc:	0800e750 	.word	0x0800e750
 80099c0:	08009b8d 	.word	0x08009b8d
 80099c4:	200010f0 	.word	0x200010f0

080099c8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b088      	sub	sp, #32
 80099cc:	af02      	add	r7, sp, #8
 80099ce:	60f8      	str	r0, [r7, #12]
 80099d0:	60b9      	str	r1, [r7, #8]
 80099d2:	607a      	str	r2, [r7, #4]
 80099d4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 80099d6:	202c      	movs	r0, #44	; 0x2c
 80099d8:	f000 fd66 	bl	800a4a8 <pvPortMalloc>
 80099dc:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d00d      	beq.n	8009a00 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	9301      	str	r3, [sp, #4]
 80099e8:	6a3b      	ldr	r3, [r7, #32]
 80099ea:	9300      	str	r3, [sp, #0]
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	687a      	ldr	r2, [r7, #4]
 80099f0:	68b9      	ldr	r1, [r7, #8]
 80099f2:	68f8      	ldr	r0, [r7, #12]
 80099f4:	f000 f809 	bl	8009a0a <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	2200      	movs	r2, #0
 80099fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8009a00:	697b      	ldr	r3, [r7, #20]
	}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3718      	adds	r7, #24
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}

08009a0a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8009a0a:	b580      	push	{r7, lr}
 8009a0c:	b086      	sub	sp, #24
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	60f8      	str	r0, [r7, #12]
 8009a12:	60b9      	str	r1, [r7, #8]
 8009a14:	607a      	str	r2, [r7, #4]
 8009a16:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d10a      	bne.n	8009a34 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8009a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a22:	f383 8811 	msr	BASEPRI, r3
 8009a26:	f3bf 8f6f 	isb	sy
 8009a2a:	f3bf 8f4f 	dsb	sy
 8009a2e:	617b      	str	r3, [r7, #20]
}
 8009a30:	bf00      	nop
 8009a32:	e7fe      	b.n	8009a32 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8009a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d015      	beq.n	8009a66 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8009a3a:	f000 faa3 	bl	8009f84 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8009a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a40:	68fa      	ldr	r2, [r7, #12]
 8009a42:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8009a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a46:	68ba      	ldr	r2, [r7, #8]
 8009a48:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8009a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a4c:	687a      	ldr	r2, [r7, #4]
 8009a4e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8009a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a52:	683a      	ldr	r2, [r7, #0]
 8009a54:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a58:	6a3a      	ldr	r2, [r7, #32]
 8009a5a:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8009a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a5e:	3304      	adds	r3, #4
 8009a60:	4618      	mov	r0, r3
 8009a62:	f7fe fa7c 	bl	8007f5e <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8009a66:	bf00      	nop
 8009a68:	3718      	adds	r7, #24
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}
	...

08009a70 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b08a      	sub	sp, #40	; 0x28
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	60f8      	str	r0, [r7, #12]
 8009a78:	60b9      	str	r1, [r7, #8]
 8009a7a:	607a      	str	r2, [r7, #4]
 8009a7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d10a      	bne.n	8009a9e <xTimerGenericCommand+0x2e>
	__asm volatile
 8009a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a8c:	f383 8811 	msr	BASEPRI, r3
 8009a90:	f3bf 8f6f 	isb	sy
 8009a94:	f3bf 8f4f 	dsb	sy
 8009a98:	623b      	str	r3, [r7, #32]
}
 8009a9a:	bf00      	nop
 8009a9c:	e7fe      	b.n	8009a9c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009a9e:	4b1a      	ldr	r3, [pc, #104]	; (8009b08 <xTimerGenericCommand+0x98>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d02a      	beq.n	8009afc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	2b05      	cmp	r3, #5
 8009ab6:	dc18      	bgt.n	8009aea <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009ab8:	f7ff fe34 	bl	8009724 <xTaskGetSchedulerState>
 8009abc:	4603      	mov	r3, r0
 8009abe:	2b02      	cmp	r3, #2
 8009ac0:	d109      	bne.n	8009ad6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009ac2:	4b11      	ldr	r3, [pc, #68]	; (8009b08 <xTimerGenericCommand+0x98>)
 8009ac4:	6818      	ldr	r0, [r3, #0]
 8009ac6:	f107 0110 	add.w	r1, r7, #16
 8009aca:	2300      	movs	r3, #0
 8009acc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ace:	f7fe fbd9 	bl	8008284 <xQueueGenericSend>
 8009ad2:	6278      	str	r0, [r7, #36]	; 0x24
 8009ad4:	e012      	b.n	8009afc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009ad6:	4b0c      	ldr	r3, [pc, #48]	; (8009b08 <xTimerGenericCommand+0x98>)
 8009ad8:	6818      	ldr	r0, [r3, #0]
 8009ada:	f107 0110 	add.w	r1, r7, #16
 8009ade:	2300      	movs	r3, #0
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	f7fe fbcf 	bl	8008284 <xQueueGenericSend>
 8009ae6:	6278      	str	r0, [r7, #36]	; 0x24
 8009ae8:	e008      	b.n	8009afc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009aea:	4b07      	ldr	r3, [pc, #28]	; (8009b08 <xTimerGenericCommand+0x98>)
 8009aec:	6818      	ldr	r0, [r3, #0]
 8009aee:	f107 0110 	add.w	r1, r7, #16
 8009af2:	2300      	movs	r3, #0
 8009af4:	683a      	ldr	r2, [r7, #0]
 8009af6:	f7fe fcc3 	bl	8008480 <xQueueGenericSendFromISR>
 8009afa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3728      	adds	r7, #40	; 0x28
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}
 8009b06:	bf00      	nop
 8009b08:	200010ec 	.word	0x200010ec

08009b0c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b088      	sub	sp, #32
 8009b10:	af02      	add	r7, sp, #8
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009b16:	4b1c      	ldr	r3, [pc, #112]	; (8009b88 <prvProcessExpiredTimer+0x7c>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	68db      	ldr	r3, [r3, #12]
 8009b1c:	68db      	ldr	r3, [r3, #12]
 8009b1e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	3304      	adds	r3, #4
 8009b24:	4618      	mov	r0, r3
 8009b26:	f7fe fa84 	bl	8008032 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009b2a:	697b      	ldr	r3, [r7, #20]
 8009b2c:	69db      	ldr	r3, [r3, #28]
 8009b2e:	2b01      	cmp	r3, #1
 8009b30:	d122      	bne.n	8009b78 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009b32:	697b      	ldr	r3, [r7, #20]
 8009b34:	699a      	ldr	r2, [r3, #24]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	18d1      	adds	r1, r2, r3
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	683a      	ldr	r2, [r7, #0]
 8009b3e:	6978      	ldr	r0, [r7, #20]
 8009b40:	f000 f8c8 	bl	8009cd4 <prvInsertTimerInActiveList>
 8009b44:	4603      	mov	r3, r0
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d016      	beq.n	8009b78 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	9300      	str	r3, [sp, #0]
 8009b4e:	2300      	movs	r3, #0
 8009b50:	687a      	ldr	r2, [r7, #4]
 8009b52:	2100      	movs	r1, #0
 8009b54:	6978      	ldr	r0, [r7, #20]
 8009b56:	f7ff ff8b 	bl	8009a70 <xTimerGenericCommand>
 8009b5a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d10a      	bne.n	8009b78 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8009b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b66:	f383 8811 	msr	BASEPRI, r3
 8009b6a:	f3bf 8f6f 	isb	sy
 8009b6e:	f3bf 8f4f 	dsb	sy
 8009b72:	60fb      	str	r3, [r7, #12]
}
 8009b74:	bf00      	nop
 8009b76:	e7fe      	b.n	8009b76 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b7c:	6978      	ldr	r0, [r7, #20]
 8009b7e:	4798      	blx	r3
}
 8009b80:	bf00      	nop
 8009b82:	3718      	adds	r7, #24
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}
 8009b88:	200010e4 	.word	0x200010e4

08009b8c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b084      	sub	sp, #16
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009b94:	f107 0308 	add.w	r3, r7, #8
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f000 f857 	bl	8009c4c <prvGetNextExpireTime>
 8009b9e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	4619      	mov	r1, r3
 8009ba4:	68f8      	ldr	r0, [r7, #12]
 8009ba6:	f000 f803 	bl	8009bb0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009baa:	f000 f8d5 	bl	8009d58 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009bae:	e7f1      	b.n	8009b94 <prvTimerTask+0x8>

08009bb0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b084      	sub	sp, #16
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
 8009bb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009bba:	f7ff f96b 	bl	8008e94 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009bbe:	f107 0308 	add.w	r3, r7, #8
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f000 f866 	bl	8009c94 <prvSampleTimeNow>
 8009bc8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d130      	bne.n	8009c32 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d10a      	bne.n	8009bec <prvProcessTimerOrBlockTask+0x3c>
 8009bd6:	687a      	ldr	r2, [r7, #4]
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	429a      	cmp	r2, r3
 8009bdc:	d806      	bhi.n	8009bec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009bde:	f7ff f967 	bl	8008eb0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009be2:	68f9      	ldr	r1, [r7, #12]
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f7ff ff91 	bl	8009b0c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009bea:	e024      	b.n	8009c36 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d008      	beq.n	8009c04 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009bf2:	4b13      	ldr	r3, [pc, #76]	; (8009c40 <prvProcessTimerOrBlockTask+0x90>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	bf0c      	ite	eq
 8009bfc:	2301      	moveq	r3, #1
 8009bfe:	2300      	movne	r3, #0
 8009c00:	b2db      	uxtb	r3, r3
 8009c02:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009c04:	4b0f      	ldr	r3, [pc, #60]	; (8009c44 <prvProcessTimerOrBlockTask+0x94>)
 8009c06:	6818      	ldr	r0, [r3, #0]
 8009c08:	687a      	ldr	r2, [r7, #4]
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	1ad3      	subs	r3, r2, r3
 8009c0e:	683a      	ldr	r2, [r7, #0]
 8009c10:	4619      	mov	r1, r3
 8009c12:	f7fe fee7 	bl	80089e4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009c16:	f7ff f94b 	bl	8008eb0 <xTaskResumeAll>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d10a      	bne.n	8009c36 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009c20:	4b09      	ldr	r3, [pc, #36]	; (8009c48 <prvProcessTimerOrBlockTask+0x98>)
 8009c22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c26:	601a      	str	r2, [r3, #0]
 8009c28:	f3bf 8f4f 	dsb	sy
 8009c2c:	f3bf 8f6f 	isb	sy
}
 8009c30:	e001      	b.n	8009c36 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009c32:	f7ff f93d 	bl	8008eb0 <xTaskResumeAll>
}
 8009c36:	bf00      	nop
 8009c38:	3710      	adds	r7, #16
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}
 8009c3e:	bf00      	nop
 8009c40:	200010e8 	.word	0x200010e8
 8009c44:	200010ec 	.word	0x200010ec
 8009c48:	e000ed04 	.word	0xe000ed04

08009c4c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b085      	sub	sp, #20
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009c54:	4b0e      	ldr	r3, [pc, #56]	; (8009c90 <prvGetNextExpireTime+0x44>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	bf0c      	ite	eq
 8009c5e:	2301      	moveq	r3, #1
 8009c60:	2300      	movne	r3, #0
 8009c62:	b2db      	uxtb	r3, r3
 8009c64:	461a      	mov	r2, r3
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d105      	bne.n	8009c7e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009c72:	4b07      	ldr	r3, [pc, #28]	; (8009c90 <prvGetNextExpireTime+0x44>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	68db      	ldr	r3, [r3, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	60fb      	str	r3, [r7, #12]
 8009c7c:	e001      	b.n	8009c82 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009c82:	68fb      	ldr	r3, [r7, #12]
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3714      	adds	r7, #20
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8e:	4770      	bx	lr
 8009c90:	200010e4 	.word	0x200010e4

08009c94 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b084      	sub	sp, #16
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009c9c:	f7ff f9a4 	bl	8008fe8 <xTaskGetTickCount>
 8009ca0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009ca2:	4b0b      	ldr	r3, [pc, #44]	; (8009cd0 <prvSampleTimeNow+0x3c>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	68fa      	ldr	r2, [r7, #12]
 8009ca8:	429a      	cmp	r2, r3
 8009caa:	d205      	bcs.n	8009cb8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009cac:	f000 f908 	bl	8009ec0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	601a      	str	r2, [r3, #0]
 8009cb6:	e002      	b.n	8009cbe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009cbe:	4a04      	ldr	r2, [pc, #16]	; (8009cd0 <prvSampleTimeNow+0x3c>)
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3710      	adds	r7, #16
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
 8009cce:	bf00      	nop
 8009cd0:	200010f4 	.word	0x200010f4

08009cd4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b086      	sub	sp, #24
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	60f8      	str	r0, [r7, #12]
 8009cdc:	60b9      	str	r1, [r7, #8]
 8009cde:	607a      	str	r2, [r7, #4]
 8009ce0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	68ba      	ldr	r2, [r7, #8]
 8009cea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	68fa      	ldr	r2, [r7, #12]
 8009cf0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009cf2:	68ba      	ldr	r2, [r7, #8]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	429a      	cmp	r2, r3
 8009cf8:	d812      	bhi.n	8009d20 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009cfa:	687a      	ldr	r2, [r7, #4]
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	1ad2      	subs	r2, r2, r3
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	699b      	ldr	r3, [r3, #24]
 8009d04:	429a      	cmp	r2, r3
 8009d06:	d302      	bcc.n	8009d0e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009d08:	2301      	movs	r3, #1
 8009d0a:	617b      	str	r3, [r7, #20]
 8009d0c:	e01b      	b.n	8009d46 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009d0e:	4b10      	ldr	r3, [pc, #64]	; (8009d50 <prvInsertTimerInActiveList+0x7c>)
 8009d10:	681a      	ldr	r2, [r3, #0]
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	3304      	adds	r3, #4
 8009d16:	4619      	mov	r1, r3
 8009d18:	4610      	mov	r0, r2
 8009d1a:	f7fe f951 	bl	8007fc0 <vListInsert>
 8009d1e:	e012      	b.n	8009d46 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009d20:	687a      	ldr	r2, [r7, #4]
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	429a      	cmp	r2, r3
 8009d26:	d206      	bcs.n	8009d36 <prvInsertTimerInActiveList+0x62>
 8009d28:	68ba      	ldr	r2, [r7, #8]
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d302      	bcc.n	8009d36 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009d30:	2301      	movs	r3, #1
 8009d32:	617b      	str	r3, [r7, #20]
 8009d34:	e007      	b.n	8009d46 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009d36:	4b07      	ldr	r3, [pc, #28]	; (8009d54 <prvInsertTimerInActiveList+0x80>)
 8009d38:	681a      	ldr	r2, [r3, #0]
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	3304      	adds	r3, #4
 8009d3e:	4619      	mov	r1, r3
 8009d40:	4610      	mov	r0, r2
 8009d42:	f7fe f93d 	bl	8007fc0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009d46:	697b      	ldr	r3, [r7, #20]
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	3718      	adds	r7, #24
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}
 8009d50:	200010e8 	.word	0x200010e8
 8009d54:	200010e4 	.word	0x200010e4

08009d58 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b08e      	sub	sp, #56	; 0x38
 8009d5c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009d5e:	e09d      	b.n	8009e9c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	da18      	bge.n	8009d98 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009d66:	1d3b      	adds	r3, r7, #4
 8009d68:	3304      	adds	r3, #4
 8009d6a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d10a      	bne.n	8009d88 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d76:	f383 8811 	msr	BASEPRI, r3
 8009d7a:	f3bf 8f6f 	isb	sy
 8009d7e:	f3bf 8f4f 	dsb	sy
 8009d82:	61fb      	str	r3, [r7, #28]
}
 8009d84:	bf00      	nop
 8009d86:	e7fe      	b.n	8009d86 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d8e:	6850      	ldr	r0, [r2, #4]
 8009d90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d92:	6892      	ldr	r2, [r2, #8]
 8009d94:	4611      	mov	r1, r2
 8009d96:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	db7e      	blt.n	8009e9c <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009da4:	695b      	ldr	r3, [r3, #20]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d004      	beq.n	8009db4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dac:	3304      	adds	r3, #4
 8009dae:	4618      	mov	r0, r3
 8009db0:	f7fe f93f 	bl	8008032 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009db4:	463b      	mov	r3, r7
 8009db6:	4618      	mov	r0, r3
 8009db8:	f7ff ff6c 	bl	8009c94 <prvSampleTimeNow>
 8009dbc:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2b09      	cmp	r3, #9
 8009dc2:	d86a      	bhi.n	8009e9a <prvProcessReceivedCommands+0x142>
 8009dc4:	a201      	add	r2, pc, #4	; (adr r2, 8009dcc <prvProcessReceivedCommands+0x74>)
 8009dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dca:	bf00      	nop
 8009dcc:	08009df5 	.word	0x08009df5
 8009dd0:	08009df5 	.word	0x08009df5
 8009dd4:	08009df5 	.word	0x08009df5
 8009dd8:	08009e9d 	.word	0x08009e9d
 8009ddc:	08009e51 	.word	0x08009e51
 8009de0:	08009e89 	.word	0x08009e89
 8009de4:	08009df5 	.word	0x08009df5
 8009de8:	08009df5 	.word	0x08009df5
 8009dec:	08009e9d 	.word	0x08009e9d
 8009df0:	08009e51 	.word	0x08009e51
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009df4:	68ba      	ldr	r2, [r7, #8]
 8009df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009df8:	699b      	ldr	r3, [r3, #24]
 8009dfa:	18d1      	adds	r1, r2, r3
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e02:	f7ff ff67 	bl	8009cd4 <prvInsertTimerInActiveList>
 8009e06:	4603      	mov	r3, r0
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d047      	beq.n	8009e9c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e12:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e16:	69db      	ldr	r3, [r3, #28]
 8009e18:	2b01      	cmp	r3, #1
 8009e1a:	d13f      	bne.n	8009e9c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009e1c:	68ba      	ldr	r2, [r7, #8]
 8009e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e20:	699b      	ldr	r3, [r3, #24]
 8009e22:	441a      	add	r2, r3
 8009e24:	2300      	movs	r3, #0
 8009e26:	9300      	str	r3, [sp, #0]
 8009e28:	2300      	movs	r3, #0
 8009e2a:	2100      	movs	r1, #0
 8009e2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e2e:	f7ff fe1f 	bl	8009a70 <xTimerGenericCommand>
 8009e32:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009e34:	6a3b      	ldr	r3, [r7, #32]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d130      	bne.n	8009e9c <prvProcessReceivedCommands+0x144>
	__asm volatile
 8009e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e3e:	f383 8811 	msr	BASEPRI, r3
 8009e42:	f3bf 8f6f 	isb	sy
 8009e46:	f3bf 8f4f 	dsb	sy
 8009e4a:	61bb      	str	r3, [r7, #24]
}
 8009e4c:	bf00      	nop
 8009e4e:	e7fe      	b.n	8009e4e <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009e50:	68ba      	ldr	r2, [r7, #8]
 8009e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e54:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e58:	699b      	ldr	r3, [r3, #24]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d10a      	bne.n	8009e74 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8009e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e62:	f383 8811 	msr	BASEPRI, r3
 8009e66:	f3bf 8f6f 	isb	sy
 8009e6a:	f3bf 8f4f 	dsb	sy
 8009e6e:	617b      	str	r3, [r7, #20]
}
 8009e70:	bf00      	nop
 8009e72:	e7fe      	b.n	8009e72 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e76:	699a      	ldr	r2, [r3, #24]
 8009e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e7a:	18d1      	adds	r1, r2, r3
 8009e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e82:	f7ff ff27 	bl	8009cd4 <prvInsertTimerInActiveList>
					break;
 8009e86:	e009      	b.n	8009e9c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d104      	bne.n	8009e9c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8009e92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e94:	f000 fbcc 	bl	800a630 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009e98:	e000      	b.n	8009e9c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8009e9a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009e9c:	4b07      	ldr	r3, [pc, #28]	; (8009ebc <prvProcessReceivedCommands+0x164>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	1d39      	adds	r1, r7, #4
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f7fe fb83 	bl	80085b0 <xQueueReceive>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	f47f af57 	bne.w	8009d60 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009eb2:	bf00      	nop
 8009eb4:	bf00      	nop
 8009eb6:	3730      	adds	r7, #48	; 0x30
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}
 8009ebc:	200010ec 	.word	0x200010ec

08009ec0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b088      	sub	sp, #32
 8009ec4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009ec6:	e045      	b.n	8009f54 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009ec8:	4b2c      	ldr	r3, [pc, #176]	; (8009f7c <prvSwitchTimerLists+0xbc>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	68db      	ldr	r3, [r3, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009ed2:	4b2a      	ldr	r3, [pc, #168]	; (8009f7c <prvSwitchTimerLists+0xbc>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	68db      	ldr	r3, [r3, #12]
 8009ed8:	68db      	ldr	r3, [r3, #12]
 8009eda:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	3304      	adds	r3, #4
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f7fe f8a6 	bl	8008032 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eea:	68f8      	ldr	r0, [r7, #12]
 8009eec:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	69db      	ldr	r3, [r3, #28]
 8009ef2:	2b01      	cmp	r3, #1
 8009ef4:	d12e      	bne.n	8009f54 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	699b      	ldr	r3, [r3, #24]
 8009efa:	693a      	ldr	r2, [r7, #16]
 8009efc:	4413      	add	r3, r2
 8009efe:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009f00:	68ba      	ldr	r2, [r7, #8]
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	429a      	cmp	r2, r3
 8009f06:	d90e      	bls.n	8009f26 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	68ba      	ldr	r2, [r7, #8]
 8009f0c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	68fa      	ldr	r2, [r7, #12]
 8009f12:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009f14:	4b19      	ldr	r3, [pc, #100]	; (8009f7c <prvSwitchTimerLists+0xbc>)
 8009f16:	681a      	ldr	r2, [r3, #0]
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	3304      	adds	r3, #4
 8009f1c:	4619      	mov	r1, r3
 8009f1e:	4610      	mov	r0, r2
 8009f20:	f7fe f84e 	bl	8007fc0 <vListInsert>
 8009f24:	e016      	b.n	8009f54 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009f26:	2300      	movs	r3, #0
 8009f28:	9300      	str	r3, [sp, #0]
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	693a      	ldr	r2, [r7, #16]
 8009f2e:	2100      	movs	r1, #0
 8009f30:	68f8      	ldr	r0, [r7, #12]
 8009f32:	f7ff fd9d 	bl	8009a70 <xTimerGenericCommand>
 8009f36:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d10a      	bne.n	8009f54 <prvSwitchTimerLists+0x94>
	__asm volatile
 8009f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f42:	f383 8811 	msr	BASEPRI, r3
 8009f46:	f3bf 8f6f 	isb	sy
 8009f4a:	f3bf 8f4f 	dsb	sy
 8009f4e:	603b      	str	r3, [r7, #0]
}
 8009f50:	bf00      	nop
 8009f52:	e7fe      	b.n	8009f52 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009f54:	4b09      	ldr	r3, [pc, #36]	; (8009f7c <prvSwitchTimerLists+0xbc>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d1b4      	bne.n	8009ec8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009f5e:	4b07      	ldr	r3, [pc, #28]	; (8009f7c <prvSwitchTimerLists+0xbc>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009f64:	4b06      	ldr	r3, [pc, #24]	; (8009f80 <prvSwitchTimerLists+0xc0>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	4a04      	ldr	r2, [pc, #16]	; (8009f7c <prvSwitchTimerLists+0xbc>)
 8009f6a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009f6c:	4a04      	ldr	r2, [pc, #16]	; (8009f80 <prvSwitchTimerLists+0xc0>)
 8009f6e:	697b      	ldr	r3, [r7, #20]
 8009f70:	6013      	str	r3, [r2, #0]
}
 8009f72:	bf00      	nop
 8009f74:	3718      	adds	r7, #24
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}
 8009f7a:	bf00      	nop
 8009f7c:	200010e4 	.word	0x200010e4
 8009f80:	200010e8 	.word	0x200010e8

08009f84 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b082      	sub	sp, #8
 8009f88:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009f8a:	f000 f96b 	bl	800a264 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009f8e:	4b15      	ldr	r3, [pc, #84]	; (8009fe4 <prvCheckForValidListAndQueue+0x60>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d120      	bne.n	8009fd8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009f96:	4814      	ldr	r0, [pc, #80]	; (8009fe8 <prvCheckForValidListAndQueue+0x64>)
 8009f98:	f7fd ffc1 	bl	8007f1e <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009f9c:	4813      	ldr	r0, [pc, #76]	; (8009fec <prvCheckForValidListAndQueue+0x68>)
 8009f9e:	f7fd ffbe 	bl	8007f1e <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009fa2:	4b13      	ldr	r3, [pc, #76]	; (8009ff0 <prvCheckForValidListAndQueue+0x6c>)
 8009fa4:	4a10      	ldr	r2, [pc, #64]	; (8009fe8 <prvCheckForValidListAndQueue+0x64>)
 8009fa6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009fa8:	4b12      	ldr	r3, [pc, #72]	; (8009ff4 <prvCheckForValidListAndQueue+0x70>)
 8009faa:	4a10      	ldr	r2, [pc, #64]	; (8009fec <prvCheckForValidListAndQueue+0x68>)
 8009fac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009fae:	2300      	movs	r3, #0
 8009fb0:	9300      	str	r3, [sp, #0]
 8009fb2:	4b11      	ldr	r3, [pc, #68]	; (8009ff8 <prvCheckForValidListAndQueue+0x74>)
 8009fb4:	4a11      	ldr	r2, [pc, #68]	; (8009ffc <prvCheckForValidListAndQueue+0x78>)
 8009fb6:	2110      	movs	r1, #16
 8009fb8:	200a      	movs	r0, #10
 8009fba:	f7fe f8cd 	bl	8008158 <xQueueGenericCreateStatic>
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	4a08      	ldr	r2, [pc, #32]	; (8009fe4 <prvCheckForValidListAndQueue+0x60>)
 8009fc2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009fc4:	4b07      	ldr	r3, [pc, #28]	; (8009fe4 <prvCheckForValidListAndQueue+0x60>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d005      	beq.n	8009fd8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009fcc:	4b05      	ldr	r3, [pc, #20]	; (8009fe4 <prvCheckForValidListAndQueue+0x60>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	490b      	ldr	r1, [pc, #44]	; (800a000 <prvCheckForValidListAndQueue+0x7c>)
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f7fe fcdc 	bl	8008990 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009fd8:	f000 f974 	bl	800a2c4 <vPortExitCritical>
}
 8009fdc:	bf00      	nop
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}
 8009fe2:	bf00      	nop
 8009fe4:	200010ec 	.word	0x200010ec
 8009fe8:	200010bc 	.word	0x200010bc
 8009fec:	200010d0 	.word	0x200010d0
 8009ff0:	200010e4 	.word	0x200010e4
 8009ff4:	200010e8 	.word	0x200010e8
 8009ff8:	20001198 	.word	0x20001198
 8009ffc:	200010f8 	.word	0x200010f8
 800a000:	0800e758 	.word	0x0800e758

0800a004 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a004:	b480      	push	{r7}
 800a006:	b085      	sub	sp, #20
 800a008:	af00      	add	r7, sp, #0
 800a00a:	60f8      	str	r0, [r7, #12]
 800a00c:	60b9      	str	r1, [r7, #8]
 800a00e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	3b04      	subs	r3, #4
 800a014:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a01c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	3b04      	subs	r3, #4
 800a022:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	f023 0201 	bic.w	r2, r3, #1
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	3b04      	subs	r3, #4
 800a032:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a034:	4a0c      	ldr	r2, [pc, #48]	; (800a068 <pxPortInitialiseStack+0x64>)
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	3b14      	subs	r3, #20
 800a03e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a040:	687a      	ldr	r2, [r7, #4]
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	3b04      	subs	r3, #4
 800a04a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	f06f 0202 	mvn.w	r2, #2
 800a052:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	3b20      	subs	r3, #32
 800a058:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a05a:	68fb      	ldr	r3, [r7, #12]
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	3714      	adds	r7, #20
 800a060:	46bd      	mov	sp, r7
 800a062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a066:	4770      	bx	lr
 800a068:	0800a06d 	.word	0x0800a06d

0800a06c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a06c:	b480      	push	{r7}
 800a06e:	b085      	sub	sp, #20
 800a070:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a072:	2300      	movs	r3, #0
 800a074:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a076:	4b12      	ldr	r3, [pc, #72]	; (800a0c0 <prvTaskExitError+0x54>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a07e:	d00a      	beq.n	800a096 <prvTaskExitError+0x2a>
	__asm volatile
 800a080:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a084:	f383 8811 	msr	BASEPRI, r3
 800a088:	f3bf 8f6f 	isb	sy
 800a08c:	f3bf 8f4f 	dsb	sy
 800a090:	60fb      	str	r3, [r7, #12]
}
 800a092:	bf00      	nop
 800a094:	e7fe      	b.n	800a094 <prvTaskExitError+0x28>
	__asm volatile
 800a096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a09a:	f383 8811 	msr	BASEPRI, r3
 800a09e:	f3bf 8f6f 	isb	sy
 800a0a2:	f3bf 8f4f 	dsb	sy
 800a0a6:	60bb      	str	r3, [r7, #8]
}
 800a0a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a0aa:	bf00      	nop
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d0fc      	beq.n	800a0ac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a0b2:	bf00      	nop
 800a0b4:	bf00      	nop
 800a0b6:	3714      	adds	r7, #20
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0be:	4770      	bx	lr
 800a0c0:	2000000c 	.word	0x2000000c
	...

0800a0d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a0d0:	4b07      	ldr	r3, [pc, #28]	; (800a0f0 <pxCurrentTCBConst2>)
 800a0d2:	6819      	ldr	r1, [r3, #0]
 800a0d4:	6808      	ldr	r0, [r1, #0]
 800a0d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0da:	f380 8809 	msr	PSP, r0
 800a0de:	f3bf 8f6f 	isb	sy
 800a0e2:	f04f 0000 	mov.w	r0, #0
 800a0e6:	f380 8811 	msr	BASEPRI, r0
 800a0ea:	4770      	bx	lr
 800a0ec:	f3af 8000 	nop.w

0800a0f0 <pxCurrentTCBConst2>:
 800a0f0:	20000f90 	.word	0x20000f90
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a0f4:	bf00      	nop
 800a0f6:	bf00      	nop

0800a0f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a0f8:	4808      	ldr	r0, [pc, #32]	; (800a11c <prvPortStartFirstTask+0x24>)
 800a0fa:	6800      	ldr	r0, [r0, #0]
 800a0fc:	6800      	ldr	r0, [r0, #0]
 800a0fe:	f380 8808 	msr	MSP, r0
 800a102:	f04f 0000 	mov.w	r0, #0
 800a106:	f380 8814 	msr	CONTROL, r0
 800a10a:	b662      	cpsie	i
 800a10c:	b661      	cpsie	f
 800a10e:	f3bf 8f4f 	dsb	sy
 800a112:	f3bf 8f6f 	isb	sy
 800a116:	df00      	svc	0
 800a118:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a11a:	bf00      	nop
 800a11c:	e000ed08 	.word	0xe000ed08

0800a120 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b086      	sub	sp, #24
 800a124:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a126:	4b46      	ldr	r3, [pc, #280]	; (800a240 <xPortStartScheduler+0x120>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	4a46      	ldr	r2, [pc, #280]	; (800a244 <xPortStartScheduler+0x124>)
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d10a      	bne.n	800a146 <xPortStartScheduler+0x26>
	__asm volatile
 800a130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a134:	f383 8811 	msr	BASEPRI, r3
 800a138:	f3bf 8f6f 	isb	sy
 800a13c:	f3bf 8f4f 	dsb	sy
 800a140:	613b      	str	r3, [r7, #16]
}
 800a142:	bf00      	nop
 800a144:	e7fe      	b.n	800a144 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a146:	4b3e      	ldr	r3, [pc, #248]	; (800a240 <xPortStartScheduler+0x120>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	4a3f      	ldr	r2, [pc, #252]	; (800a248 <xPortStartScheduler+0x128>)
 800a14c:	4293      	cmp	r3, r2
 800a14e:	d10a      	bne.n	800a166 <xPortStartScheduler+0x46>
	__asm volatile
 800a150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a154:	f383 8811 	msr	BASEPRI, r3
 800a158:	f3bf 8f6f 	isb	sy
 800a15c:	f3bf 8f4f 	dsb	sy
 800a160:	60fb      	str	r3, [r7, #12]
}
 800a162:	bf00      	nop
 800a164:	e7fe      	b.n	800a164 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a166:	4b39      	ldr	r3, [pc, #228]	; (800a24c <xPortStartScheduler+0x12c>)
 800a168:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	781b      	ldrb	r3, [r3, #0]
 800a16e:	b2db      	uxtb	r3, r3
 800a170:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	22ff      	movs	r2, #255	; 0xff
 800a176:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	781b      	ldrb	r3, [r3, #0]
 800a17c:	b2db      	uxtb	r3, r3
 800a17e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a180:	78fb      	ldrb	r3, [r7, #3]
 800a182:	b2db      	uxtb	r3, r3
 800a184:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a188:	b2da      	uxtb	r2, r3
 800a18a:	4b31      	ldr	r3, [pc, #196]	; (800a250 <xPortStartScheduler+0x130>)
 800a18c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a18e:	4b31      	ldr	r3, [pc, #196]	; (800a254 <xPortStartScheduler+0x134>)
 800a190:	2207      	movs	r2, #7
 800a192:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a194:	e009      	b.n	800a1aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a196:	4b2f      	ldr	r3, [pc, #188]	; (800a254 <xPortStartScheduler+0x134>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	3b01      	subs	r3, #1
 800a19c:	4a2d      	ldr	r2, [pc, #180]	; (800a254 <xPortStartScheduler+0x134>)
 800a19e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a1a0:	78fb      	ldrb	r3, [r7, #3]
 800a1a2:	b2db      	uxtb	r3, r3
 800a1a4:	005b      	lsls	r3, r3, #1
 800a1a6:	b2db      	uxtb	r3, r3
 800a1a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a1aa:	78fb      	ldrb	r3, [r7, #3]
 800a1ac:	b2db      	uxtb	r3, r3
 800a1ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1b2:	2b80      	cmp	r3, #128	; 0x80
 800a1b4:	d0ef      	beq.n	800a196 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a1b6:	4b27      	ldr	r3, [pc, #156]	; (800a254 <xPortStartScheduler+0x134>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f1c3 0307 	rsb	r3, r3, #7
 800a1be:	2b04      	cmp	r3, #4
 800a1c0:	d00a      	beq.n	800a1d8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a1c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c6:	f383 8811 	msr	BASEPRI, r3
 800a1ca:	f3bf 8f6f 	isb	sy
 800a1ce:	f3bf 8f4f 	dsb	sy
 800a1d2:	60bb      	str	r3, [r7, #8]
}
 800a1d4:	bf00      	nop
 800a1d6:	e7fe      	b.n	800a1d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a1d8:	4b1e      	ldr	r3, [pc, #120]	; (800a254 <xPortStartScheduler+0x134>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	021b      	lsls	r3, r3, #8
 800a1de:	4a1d      	ldr	r2, [pc, #116]	; (800a254 <xPortStartScheduler+0x134>)
 800a1e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a1e2:	4b1c      	ldr	r3, [pc, #112]	; (800a254 <xPortStartScheduler+0x134>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a1ea:	4a1a      	ldr	r2, [pc, #104]	; (800a254 <xPortStartScheduler+0x134>)
 800a1ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	b2da      	uxtb	r2, r3
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a1f6:	4b18      	ldr	r3, [pc, #96]	; (800a258 <xPortStartScheduler+0x138>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	4a17      	ldr	r2, [pc, #92]	; (800a258 <xPortStartScheduler+0x138>)
 800a1fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a200:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a202:	4b15      	ldr	r3, [pc, #84]	; (800a258 <xPortStartScheduler+0x138>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	4a14      	ldr	r2, [pc, #80]	; (800a258 <xPortStartScheduler+0x138>)
 800a208:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a20c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a20e:	f000 f8dd 	bl	800a3cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a212:	4b12      	ldr	r3, [pc, #72]	; (800a25c <xPortStartScheduler+0x13c>)
 800a214:	2200      	movs	r2, #0
 800a216:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a218:	f000 f8fc 	bl	800a414 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a21c:	4b10      	ldr	r3, [pc, #64]	; (800a260 <xPortStartScheduler+0x140>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	4a0f      	ldr	r2, [pc, #60]	; (800a260 <xPortStartScheduler+0x140>)
 800a222:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a226:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a228:	f7ff ff66 	bl	800a0f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a22c:	f7fe ffaa 	bl	8009184 <vTaskSwitchContext>
	prvTaskExitError();
 800a230:	f7ff ff1c 	bl	800a06c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a234:	2300      	movs	r3, #0
}
 800a236:	4618      	mov	r0, r3
 800a238:	3718      	adds	r7, #24
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}
 800a23e:	bf00      	nop
 800a240:	e000ed00 	.word	0xe000ed00
 800a244:	410fc271 	.word	0x410fc271
 800a248:	410fc270 	.word	0x410fc270
 800a24c:	e000e400 	.word	0xe000e400
 800a250:	200011e0 	.word	0x200011e0
 800a254:	200011e4 	.word	0x200011e4
 800a258:	e000ed20 	.word	0xe000ed20
 800a25c:	2000000c 	.word	0x2000000c
 800a260:	e000ef34 	.word	0xe000ef34

0800a264 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a264:	b480      	push	{r7}
 800a266:	b083      	sub	sp, #12
 800a268:	af00      	add	r7, sp, #0
	__asm volatile
 800a26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a26e:	f383 8811 	msr	BASEPRI, r3
 800a272:	f3bf 8f6f 	isb	sy
 800a276:	f3bf 8f4f 	dsb	sy
 800a27a:	607b      	str	r3, [r7, #4]
}
 800a27c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a27e:	4b0f      	ldr	r3, [pc, #60]	; (800a2bc <vPortEnterCritical+0x58>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	3301      	adds	r3, #1
 800a284:	4a0d      	ldr	r2, [pc, #52]	; (800a2bc <vPortEnterCritical+0x58>)
 800a286:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a288:	4b0c      	ldr	r3, [pc, #48]	; (800a2bc <vPortEnterCritical+0x58>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	2b01      	cmp	r3, #1
 800a28e:	d10f      	bne.n	800a2b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a290:	4b0b      	ldr	r3, [pc, #44]	; (800a2c0 <vPortEnterCritical+0x5c>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	b2db      	uxtb	r3, r3
 800a296:	2b00      	cmp	r3, #0
 800a298:	d00a      	beq.n	800a2b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a29e:	f383 8811 	msr	BASEPRI, r3
 800a2a2:	f3bf 8f6f 	isb	sy
 800a2a6:	f3bf 8f4f 	dsb	sy
 800a2aa:	603b      	str	r3, [r7, #0]
}
 800a2ac:	bf00      	nop
 800a2ae:	e7fe      	b.n	800a2ae <vPortEnterCritical+0x4a>
	}
}
 800a2b0:	bf00      	nop
 800a2b2:	370c      	adds	r7, #12
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr
 800a2bc:	2000000c 	.word	0x2000000c
 800a2c0:	e000ed04 	.word	0xe000ed04

0800a2c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b083      	sub	sp, #12
 800a2c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a2ca:	4b12      	ldr	r3, [pc, #72]	; (800a314 <vPortExitCritical+0x50>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d10a      	bne.n	800a2e8 <vPortExitCritical+0x24>
	__asm volatile
 800a2d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d6:	f383 8811 	msr	BASEPRI, r3
 800a2da:	f3bf 8f6f 	isb	sy
 800a2de:	f3bf 8f4f 	dsb	sy
 800a2e2:	607b      	str	r3, [r7, #4]
}
 800a2e4:	bf00      	nop
 800a2e6:	e7fe      	b.n	800a2e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a2e8:	4b0a      	ldr	r3, [pc, #40]	; (800a314 <vPortExitCritical+0x50>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	3b01      	subs	r3, #1
 800a2ee:	4a09      	ldr	r2, [pc, #36]	; (800a314 <vPortExitCritical+0x50>)
 800a2f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a2f2:	4b08      	ldr	r3, [pc, #32]	; (800a314 <vPortExitCritical+0x50>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d105      	bne.n	800a306 <vPortExitCritical+0x42>
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	f383 8811 	msr	BASEPRI, r3
}
 800a304:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a306:	bf00      	nop
 800a308:	370c      	adds	r7, #12
 800a30a:	46bd      	mov	sp, r7
 800a30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a310:	4770      	bx	lr
 800a312:	bf00      	nop
 800a314:	2000000c 	.word	0x2000000c
	...

0800a320 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a320:	f3ef 8009 	mrs	r0, PSP
 800a324:	f3bf 8f6f 	isb	sy
 800a328:	4b15      	ldr	r3, [pc, #84]	; (800a380 <pxCurrentTCBConst>)
 800a32a:	681a      	ldr	r2, [r3, #0]
 800a32c:	f01e 0f10 	tst.w	lr, #16
 800a330:	bf08      	it	eq
 800a332:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a336:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a33a:	6010      	str	r0, [r2, #0]
 800a33c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a340:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a344:	f380 8811 	msr	BASEPRI, r0
 800a348:	f3bf 8f4f 	dsb	sy
 800a34c:	f3bf 8f6f 	isb	sy
 800a350:	f7fe ff18 	bl	8009184 <vTaskSwitchContext>
 800a354:	f04f 0000 	mov.w	r0, #0
 800a358:	f380 8811 	msr	BASEPRI, r0
 800a35c:	bc09      	pop	{r0, r3}
 800a35e:	6819      	ldr	r1, [r3, #0]
 800a360:	6808      	ldr	r0, [r1, #0]
 800a362:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a366:	f01e 0f10 	tst.w	lr, #16
 800a36a:	bf08      	it	eq
 800a36c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a370:	f380 8809 	msr	PSP, r0
 800a374:	f3bf 8f6f 	isb	sy
 800a378:	4770      	bx	lr
 800a37a:	bf00      	nop
 800a37c:	f3af 8000 	nop.w

0800a380 <pxCurrentTCBConst>:
 800a380:	20000f90 	.word	0x20000f90
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a384:	bf00      	nop
 800a386:	bf00      	nop

0800a388 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b082      	sub	sp, #8
 800a38c:	af00      	add	r7, sp, #0
	__asm volatile
 800a38e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a392:	f383 8811 	msr	BASEPRI, r3
 800a396:	f3bf 8f6f 	isb	sy
 800a39a:	f3bf 8f4f 	dsb	sy
 800a39e:	607b      	str	r3, [r7, #4]
}
 800a3a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a3a2:	f7fe fe31 	bl	8009008 <xTaskIncrementTick>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d003      	beq.n	800a3b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a3ac:	4b06      	ldr	r3, [pc, #24]	; (800a3c8 <SysTick_Handler+0x40>)
 800a3ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3b2:	601a      	str	r2, [r3, #0]
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	f383 8811 	msr	BASEPRI, r3
}
 800a3be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a3c0:	bf00      	nop
 800a3c2:	3708      	adds	r7, #8
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}
 800a3c8:	e000ed04 	.word	0xe000ed04

0800a3cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a3cc:	b480      	push	{r7}
 800a3ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a3d0:	4b0b      	ldr	r3, [pc, #44]	; (800a400 <vPortSetupTimerInterrupt+0x34>)
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a3d6:	4b0b      	ldr	r3, [pc, #44]	; (800a404 <vPortSetupTimerInterrupt+0x38>)
 800a3d8:	2200      	movs	r2, #0
 800a3da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a3dc:	4b0a      	ldr	r3, [pc, #40]	; (800a408 <vPortSetupTimerInterrupt+0x3c>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4a0a      	ldr	r2, [pc, #40]	; (800a40c <vPortSetupTimerInterrupt+0x40>)
 800a3e2:	fba2 2303 	umull	r2, r3, r2, r3
 800a3e6:	099b      	lsrs	r3, r3, #6
 800a3e8:	4a09      	ldr	r2, [pc, #36]	; (800a410 <vPortSetupTimerInterrupt+0x44>)
 800a3ea:	3b01      	subs	r3, #1
 800a3ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a3ee:	4b04      	ldr	r3, [pc, #16]	; (800a400 <vPortSetupTimerInterrupt+0x34>)
 800a3f0:	2207      	movs	r2, #7
 800a3f2:	601a      	str	r2, [r3, #0]
}
 800a3f4:	bf00      	nop
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fc:	4770      	bx	lr
 800a3fe:	bf00      	nop
 800a400:	e000e010 	.word	0xe000e010
 800a404:	e000e018 	.word	0xe000e018
 800a408:	20000000 	.word	0x20000000
 800a40c:	10624dd3 	.word	0x10624dd3
 800a410:	e000e014 	.word	0xe000e014

0800a414 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a414:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a424 <vPortEnableVFP+0x10>
 800a418:	6801      	ldr	r1, [r0, #0]
 800a41a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a41e:	6001      	str	r1, [r0, #0]
 800a420:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a422:	bf00      	nop
 800a424:	e000ed88 	.word	0xe000ed88

0800a428 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a428:	b480      	push	{r7}
 800a42a:	b085      	sub	sp, #20
 800a42c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a42e:	f3ef 8305 	mrs	r3, IPSR
 800a432:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	2b0f      	cmp	r3, #15
 800a438:	d914      	bls.n	800a464 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a43a:	4a17      	ldr	r2, [pc, #92]	; (800a498 <vPortValidateInterruptPriority+0x70>)
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	4413      	add	r3, r2
 800a440:	781b      	ldrb	r3, [r3, #0]
 800a442:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a444:	4b15      	ldr	r3, [pc, #84]	; (800a49c <vPortValidateInterruptPriority+0x74>)
 800a446:	781b      	ldrb	r3, [r3, #0]
 800a448:	7afa      	ldrb	r2, [r7, #11]
 800a44a:	429a      	cmp	r2, r3
 800a44c:	d20a      	bcs.n	800a464 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a452:	f383 8811 	msr	BASEPRI, r3
 800a456:	f3bf 8f6f 	isb	sy
 800a45a:	f3bf 8f4f 	dsb	sy
 800a45e:	607b      	str	r3, [r7, #4]
}
 800a460:	bf00      	nop
 800a462:	e7fe      	b.n	800a462 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a464:	4b0e      	ldr	r3, [pc, #56]	; (800a4a0 <vPortValidateInterruptPriority+0x78>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a46c:	4b0d      	ldr	r3, [pc, #52]	; (800a4a4 <vPortValidateInterruptPriority+0x7c>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	429a      	cmp	r2, r3
 800a472:	d90a      	bls.n	800a48a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a474:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a478:	f383 8811 	msr	BASEPRI, r3
 800a47c:	f3bf 8f6f 	isb	sy
 800a480:	f3bf 8f4f 	dsb	sy
 800a484:	603b      	str	r3, [r7, #0]
}
 800a486:	bf00      	nop
 800a488:	e7fe      	b.n	800a488 <vPortValidateInterruptPriority+0x60>
	}
 800a48a:	bf00      	nop
 800a48c:	3714      	adds	r7, #20
 800a48e:	46bd      	mov	sp, r7
 800a490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a494:	4770      	bx	lr
 800a496:	bf00      	nop
 800a498:	e000e3f0 	.word	0xe000e3f0
 800a49c:	200011e0 	.word	0x200011e0
 800a4a0:	e000ed0c 	.word	0xe000ed0c
 800a4a4:	200011e4 	.word	0x200011e4

0800a4a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b08a      	sub	sp, #40	; 0x28
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a4b4:	f7fe fcee 	bl	8008e94 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a4b8:	4b58      	ldr	r3, [pc, #352]	; (800a61c <pvPortMalloc+0x174>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d101      	bne.n	800a4c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a4c0:	f000 f910 	bl	800a6e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a4c4:	4b56      	ldr	r3, [pc, #344]	; (800a620 <pvPortMalloc+0x178>)
 800a4c6:	681a      	ldr	r2, [r3, #0]
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	4013      	ands	r3, r2
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	f040 808e 	bne.w	800a5ee <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d01d      	beq.n	800a514 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a4d8:	2208      	movs	r2, #8
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	4413      	add	r3, r2
 800a4de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f003 0307 	and.w	r3, r3, #7
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d014      	beq.n	800a514 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f023 0307 	bic.w	r3, r3, #7
 800a4f0:	3308      	adds	r3, #8
 800a4f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f003 0307 	and.w	r3, r3, #7
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d00a      	beq.n	800a514 <pvPortMalloc+0x6c>
	__asm volatile
 800a4fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a502:	f383 8811 	msr	BASEPRI, r3
 800a506:	f3bf 8f6f 	isb	sy
 800a50a:	f3bf 8f4f 	dsb	sy
 800a50e:	617b      	str	r3, [r7, #20]
}
 800a510:	bf00      	nop
 800a512:	e7fe      	b.n	800a512 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d069      	beq.n	800a5ee <pvPortMalloc+0x146>
 800a51a:	4b42      	ldr	r3, [pc, #264]	; (800a624 <pvPortMalloc+0x17c>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	687a      	ldr	r2, [r7, #4]
 800a520:	429a      	cmp	r2, r3
 800a522:	d864      	bhi.n	800a5ee <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a524:	4b40      	ldr	r3, [pc, #256]	; (800a628 <pvPortMalloc+0x180>)
 800a526:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a528:	4b3f      	ldr	r3, [pc, #252]	; (800a628 <pvPortMalloc+0x180>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a52e:	e004      	b.n	800a53a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a532:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a53c:	685b      	ldr	r3, [r3, #4]
 800a53e:	687a      	ldr	r2, [r7, #4]
 800a540:	429a      	cmp	r2, r3
 800a542:	d903      	bls.n	800a54c <pvPortMalloc+0xa4>
 800a544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d1f1      	bne.n	800a530 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a54c:	4b33      	ldr	r3, [pc, #204]	; (800a61c <pvPortMalloc+0x174>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a552:	429a      	cmp	r2, r3
 800a554:	d04b      	beq.n	800a5ee <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a556:	6a3b      	ldr	r3, [r7, #32]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	2208      	movs	r2, #8
 800a55c:	4413      	add	r3, r2
 800a55e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a562:	681a      	ldr	r2, [r3, #0]
 800a564:	6a3b      	ldr	r3, [r7, #32]
 800a566:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a56a:	685a      	ldr	r2, [r3, #4]
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	1ad2      	subs	r2, r2, r3
 800a570:	2308      	movs	r3, #8
 800a572:	005b      	lsls	r3, r3, #1
 800a574:	429a      	cmp	r2, r3
 800a576:	d91f      	bls.n	800a5b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	4413      	add	r3, r2
 800a57e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a580:	69bb      	ldr	r3, [r7, #24]
 800a582:	f003 0307 	and.w	r3, r3, #7
 800a586:	2b00      	cmp	r3, #0
 800a588:	d00a      	beq.n	800a5a0 <pvPortMalloc+0xf8>
	__asm volatile
 800a58a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a58e:	f383 8811 	msr	BASEPRI, r3
 800a592:	f3bf 8f6f 	isb	sy
 800a596:	f3bf 8f4f 	dsb	sy
 800a59a:	613b      	str	r3, [r7, #16]
}
 800a59c:	bf00      	nop
 800a59e:	e7fe      	b.n	800a59e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a2:	685a      	ldr	r2, [r3, #4]
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	1ad2      	subs	r2, r2, r3
 800a5a8:	69bb      	ldr	r3, [r7, #24]
 800a5aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ae:	687a      	ldr	r2, [r7, #4]
 800a5b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a5b2:	69b8      	ldr	r0, [r7, #24]
 800a5b4:	f000 f8f8 	bl	800a7a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a5b8:	4b1a      	ldr	r3, [pc, #104]	; (800a624 <pvPortMalloc+0x17c>)
 800a5ba:	681a      	ldr	r2, [r3, #0]
 800a5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5be:	685b      	ldr	r3, [r3, #4]
 800a5c0:	1ad3      	subs	r3, r2, r3
 800a5c2:	4a18      	ldr	r2, [pc, #96]	; (800a624 <pvPortMalloc+0x17c>)
 800a5c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a5c6:	4b17      	ldr	r3, [pc, #92]	; (800a624 <pvPortMalloc+0x17c>)
 800a5c8:	681a      	ldr	r2, [r3, #0]
 800a5ca:	4b18      	ldr	r3, [pc, #96]	; (800a62c <pvPortMalloc+0x184>)
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	d203      	bcs.n	800a5da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a5d2:	4b14      	ldr	r3, [pc, #80]	; (800a624 <pvPortMalloc+0x17c>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	4a15      	ldr	r2, [pc, #84]	; (800a62c <pvPortMalloc+0x184>)
 800a5d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5dc:	685a      	ldr	r2, [r3, #4]
 800a5de:	4b10      	ldr	r3, [pc, #64]	; (800a620 <pvPortMalloc+0x178>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	431a      	orrs	r2, r3
 800a5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a5ee:	f7fe fc5f 	bl	8008eb0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a5f2:	69fb      	ldr	r3, [r7, #28]
 800a5f4:	f003 0307 	and.w	r3, r3, #7
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d00a      	beq.n	800a612 <pvPortMalloc+0x16a>
	__asm volatile
 800a5fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a600:	f383 8811 	msr	BASEPRI, r3
 800a604:	f3bf 8f6f 	isb	sy
 800a608:	f3bf 8f4f 	dsb	sy
 800a60c:	60fb      	str	r3, [r7, #12]
}
 800a60e:	bf00      	nop
 800a610:	e7fe      	b.n	800a610 <pvPortMalloc+0x168>
	return pvReturn;
 800a612:	69fb      	ldr	r3, [r7, #28]
}
 800a614:	4618      	mov	r0, r3
 800a616:	3728      	adds	r7, #40	; 0x28
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}
 800a61c:	20002bf0 	.word	0x20002bf0
 800a620:	20002bfc 	.word	0x20002bfc
 800a624:	20002bf4 	.word	0x20002bf4
 800a628:	20002be8 	.word	0x20002be8
 800a62c:	20002bf8 	.word	0x20002bf8

0800a630 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b086      	sub	sp, #24
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d048      	beq.n	800a6d4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a642:	2308      	movs	r3, #8
 800a644:	425b      	negs	r3, r3
 800a646:	697a      	ldr	r2, [r7, #20]
 800a648:	4413      	add	r3, r2
 800a64a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a64c:	697b      	ldr	r3, [r7, #20]
 800a64e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	685a      	ldr	r2, [r3, #4]
 800a654:	4b21      	ldr	r3, [pc, #132]	; (800a6dc <vPortFree+0xac>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	4013      	ands	r3, r2
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d10a      	bne.n	800a674 <vPortFree+0x44>
	__asm volatile
 800a65e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a662:	f383 8811 	msr	BASEPRI, r3
 800a666:	f3bf 8f6f 	isb	sy
 800a66a:	f3bf 8f4f 	dsb	sy
 800a66e:	60fb      	str	r3, [r7, #12]
}
 800a670:	bf00      	nop
 800a672:	e7fe      	b.n	800a672 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d00a      	beq.n	800a692 <vPortFree+0x62>
	__asm volatile
 800a67c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a680:	f383 8811 	msr	BASEPRI, r3
 800a684:	f3bf 8f6f 	isb	sy
 800a688:	f3bf 8f4f 	dsb	sy
 800a68c:	60bb      	str	r3, [r7, #8]
}
 800a68e:	bf00      	nop
 800a690:	e7fe      	b.n	800a690 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a692:	693b      	ldr	r3, [r7, #16]
 800a694:	685a      	ldr	r2, [r3, #4]
 800a696:	4b11      	ldr	r3, [pc, #68]	; (800a6dc <vPortFree+0xac>)
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	4013      	ands	r3, r2
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d019      	beq.n	800a6d4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a6a0:	693b      	ldr	r3, [r7, #16]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d115      	bne.n	800a6d4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	685a      	ldr	r2, [r3, #4]
 800a6ac:	4b0b      	ldr	r3, [pc, #44]	; (800a6dc <vPortFree+0xac>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	43db      	mvns	r3, r3
 800a6b2:	401a      	ands	r2, r3
 800a6b4:	693b      	ldr	r3, [r7, #16]
 800a6b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a6b8:	f7fe fbec 	bl	8008e94 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a6bc:	693b      	ldr	r3, [r7, #16]
 800a6be:	685a      	ldr	r2, [r3, #4]
 800a6c0:	4b07      	ldr	r3, [pc, #28]	; (800a6e0 <vPortFree+0xb0>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	4413      	add	r3, r2
 800a6c6:	4a06      	ldr	r2, [pc, #24]	; (800a6e0 <vPortFree+0xb0>)
 800a6c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a6ca:	6938      	ldr	r0, [r7, #16]
 800a6cc:	f000 f86c 	bl	800a7a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a6d0:	f7fe fbee 	bl	8008eb0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a6d4:	bf00      	nop
 800a6d6:	3718      	adds	r7, #24
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bd80      	pop	{r7, pc}
 800a6dc:	20002bfc 	.word	0x20002bfc
 800a6e0:	20002bf4 	.word	0x20002bf4

0800a6e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b085      	sub	sp, #20
 800a6e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a6ea:	f44f 53d0 	mov.w	r3, #6656	; 0x1a00
 800a6ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a6f0:	4b27      	ldr	r3, [pc, #156]	; (800a790 <prvHeapInit+0xac>)
 800a6f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	f003 0307 	and.w	r3, r3, #7
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d00c      	beq.n	800a718 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	3307      	adds	r3, #7
 800a702:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	f023 0307 	bic.w	r3, r3, #7
 800a70a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a70c:	68ba      	ldr	r2, [r7, #8]
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	1ad3      	subs	r3, r2, r3
 800a712:	4a1f      	ldr	r2, [pc, #124]	; (800a790 <prvHeapInit+0xac>)
 800a714:	4413      	add	r3, r2
 800a716:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a71c:	4a1d      	ldr	r2, [pc, #116]	; (800a794 <prvHeapInit+0xb0>)
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a722:	4b1c      	ldr	r3, [pc, #112]	; (800a794 <prvHeapInit+0xb0>)
 800a724:	2200      	movs	r2, #0
 800a726:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	68ba      	ldr	r2, [r7, #8]
 800a72c:	4413      	add	r3, r2
 800a72e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a730:	2208      	movs	r2, #8
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	1a9b      	subs	r3, r3, r2
 800a736:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	f023 0307 	bic.w	r3, r3, #7
 800a73e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	4a15      	ldr	r2, [pc, #84]	; (800a798 <prvHeapInit+0xb4>)
 800a744:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a746:	4b14      	ldr	r3, [pc, #80]	; (800a798 <prvHeapInit+0xb4>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	2200      	movs	r2, #0
 800a74c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a74e:	4b12      	ldr	r3, [pc, #72]	; (800a798 <prvHeapInit+0xb4>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	2200      	movs	r2, #0
 800a754:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	68fa      	ldr	r2, [r7, #12]
 800a75e:	1ad2      	subs	r2, r2, r3
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a764:	4b0c      	ldr	r3, [pc, #48]	; (800a798 <prvHeapInit+0xb4>)
 800a766:	681a      	ldr	r2, [r3, #0]
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	685b      	ldr	r3, [r3, #4]
 800a770:	4a0a      	ldr	r2, [pc, #40]	; (800a79c <prvHeapInit+0xb8>)
 800a772:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	685b      	ldr	r3, [r3, #4]
 800a778:	4a09      	ldr	r2, [pc, #36]	; (800a7a0 <prvHeapInit+0xbc>)
 800a77a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a77c:	4b09      	ldr	r3, [pc, #36]	; (800a7a4 <prvHeapInit+0xc0>)
 800a77e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a782:	601a      	str	r2, [r3, #0]
}
 800a784:	bf00      	nop
 800a786:	3714      	adds	r7, #20
 800a788:	46bd      	mov	sp, r7
 800a78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78e:	4770      	bx	lr
 800a790:	200011e8 	.word	0x200011e8
 800a794:	20002be8 	.word	0x20002be8
 800a798:	20002bf0 	.word	0x20002bf0
 800a79c:	20002bf8 	.word	0x20002bf8
 800a7a0:	20002bf4 	.word	0x20002bf4
 800a7a4:	20002bfc 	.word	0x20002bfc

0800a7a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b085      	sub	sp, #20
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a7b0:	4b28      	ldr	r3, [pc, #160]	; (800a854 <prvInsertBlockIntoFreeList+0xac>)
 800a7b2:	60fb      	str	r3, [r7, #12]
 800a7b4:	e002      	b.n	800a7bc <prvInsertBlockIntoFreeList+0x14>
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	60fb      	str	r3, [r7, #12]
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	687a      	ldr	r2, [r7, #4]
 800a7c2:	429a      	cmp	r2, r3
 800a7c4:	d8f7      	bhi.n	800a7b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	685b      	ldr	r3, [r3, #4]
 800a7ce:	68ba      	ldr	r2, [r7, #8]
 800a7d0:	4413      	add	r3, r2
 800a7d2:	687a      	ldr	r2, [r7, #4]
 800a7d4:	429a      	cmp	r2, r3
 800a7d6:	d108      	bne.n	800a7ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	685a      	ldr	r2, [r3, #4]
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	685b      	ldr	r3, [r3, #4]
 800a7e0:	441a      	add	r2, r3
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	685b      	ldr	r3, [r3, #4]
 800a7f2:	68ba      	ldr	r2, [r7, #8]
 800a7f4:	441a      	add	r2, r3
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	429a      	cmp	r2, r3
 800a7fc:	d118      	bne.n	800a830 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	681a      	ldr	r2, [r3, #0]
 800a802:	4b15      	ldr	r3, [pc, #84]	; (800a858 <prvInsertBlockIntoFreeList+0xb0>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	429a      	cmp	r2, r3
 800a808:	d00d      	beq.n	800a826 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	685a      	ldr	r2, [r3, #4]
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	685b      	ldr	r3, [r3, #4]
 800a814:	441a      	add	r2, r3
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	681a      	ldr	r2, [r3, #0]
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	601a      	str	r2, [r3, #0]
 800a824:	e008      	b.n	800a838 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a826:	4b0c      	ldr	r3, [pc, #48]	; (800a858 <prvInsertBlockIntoFreeList+0xb0>)
 800a828:	681a      	ldr	r2, [r3, #0]
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	601a      	str	r2, [r3, #0]
 800a82e:	e003      	b.n	800a838 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	681a      	ldr	r2, [r3, #0]
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a838:	68fa      	ldr	r2, [r7, #12]
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	429a      	cmp	r2, r3
 800a83e:	d002      	beq.n	800a846 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	687a      	ldr	r2, [r7, #4]
 800a844:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a846:	bf00      	nop
 800a848:	3714      	adds	r7, #20
 800a84a:	46bd      	mov	sp, r7
 800a84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a850:	4770      	bx	lr
 800a852:	bf00      	nop
 800a854:	20002be8 	.word	0x20002be8
 800a858:	20002bf0 	.word	0x20002bf0

0800a85c <__cvt>:
 800a85c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a860:	ec55 4b10 	vmov	r4, r5, d0
 800a864:	2d00      	cmp	r5, #0
 800a866:	460e      	mov	r6, r1
 800a868:	4619      	mov	r1, r3
 800a86a:	462b      	mov	r3, r5
 800a86c:	bfbb      	ittet	lt
 800a86e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a872:	461d      	movlt	r5, r3
 800a874:	2300      	movge	r3, #0
 800a876:	232d      	movlt	r3, #45	; 0x2d
 800a878:	700b      	strb	r3, [r1, #0]
 800a87a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a87c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a880:	4691      	mov	r9, r2
 800a882:	f023 0820 	bic.w	r8, r3, #32
 800a886:	bfbc      	itt	lt
 800a888:	4622      	movlt	r2, r4
 800a88a:	4614      	movlt	r4, r2
 800a88c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a890:	d005      	beq.n	800a89e <__cvt+0x42>
 800a892:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a896:	d100      	bne.n	800a89a <__cvt+0x3e>
 800a898:	3601      	adds	r6, #1
 800a89a:	2102      	movs	r1, #2
 800a89c:	e000      	b.n	800a8a0 <__cvt+0x44>
 800a89e:	2103      	movs	r1, #3
 800a8a0:	ab03      	add	r3, sp, #12
 800a8a2:	9301      	str	r3, [sp, #4]
 800a8a4:	ab02      	add	r3, sp, #8
 800a8a6:	9300      	str	r3, [sp, #0]
 800a8a8:	ec45 4b10 	vmov	d0, r4, r5
 800a8ac:	4653      	mov	r3, sl
 800a8ae:	4632      	mov	r2, r6
 800a8b0:	f000 fe62 	bl	800b578 <_dtoa_r>
 800a8b4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a8b8:	4607      	mov	r7, r0
 800a8ba:	d102      	bne.n	800a8c2 <__cvt+0x66>
 800a8bc:	f019 0f01 	tst.w	r9, #1
 800a8c0:	d022      	beq.n	800a908 <__cvt+0xac>
 800a8c2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a8c6:	eb07 0906 	add.w	r9, r7, r6
 800a8ca:	d110      	bne.n	800a8ee <__cvt+0x92>
 800a8cc:	783b      	ldrb	r3, [r7, #0]
 800a8ce:	2b30      	cmp	r3, #48	; 0x30
 800a8d0:	d10a      	bne.n	800a8e8 <__cvt+0x8c>
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	4620      	mov	r0, r4
 800a8d8:	4629      	mov	r1, r5
 800a8da:	f7f6 f905 	bl	8000ae8 <__aeabi_dcmpeq>
 800a8de:	b918      	cbnz	r0, 800a8e8 <__cvt+0x8c>
 800a8e0:	f1c6 0601 	rsb	r6, r6, #1
 800a8e4:	f8ca 6000 	str.w	r6, [sl]
 800a8e8:	f8da 3000 	ldr.w	r3, [sl]
 800a8ec:	4499      	add	r9, r3
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	4620      	mov	r0, r4
 800a8f4:	4629      	mov	r1, r5
 800a8f6:	f7f6 f8f7 	bl	8000ae8 <__aeabi_dcmpeq>
 800a8fa:	b108      	cbz	r0, 800a900 <__cvt+0xa4>
 800a8fc:	f8cd 900c 	str.w	r9, [sp, #12]
 800a900:	2230      	movs	r2, #48	; 0x30
 800a902:	9b03      	ldr	r3, [sp, #12]
 800a904:	454b      	cmp	r3, r9
 800a906:	d307      	bcc.n	800a918 <__cvt+0xbc>
 800a908:	9b03      	ldr	r3, [sp, #12]
 800a90a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a90c:	1bdb      	subs	r3, r3, r7
 800a90e:	4638      	mov	r0, r7
 800a910:	6013      	str	r3, [r2, #0]
 800a912:	b004      	add	sp, #16
 800a914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a918:	1c59      	adds	r1, r3, #1
 800a91a:	9103      	str	r1, [sp, #12]
 800a91c:	701a      	strb	r2, [r3, #0]
 800a91e:	e7f0      	b.n	800a902 <__cvt+0xa6>

0800a920 <__exponent>:
 800a920:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a922:	4603      	mov	r3, r0
 800a924:	2900      	cmp	r1, #0
 800a926:	bfb8      	it	lt
 800a928:	4249      	neglt	r1, r1
 800a92a:	f803 2b02 	strb.w	r2, [r3], #2
 800a92e:	bfb4      	ite	lt
 800a930:	222d      	movlt	r2, #45	; 0x2d
 800a932:	222b      	movge	r2, #43	; 0x2b
 800a934:	2909      	cmp	r1, #9
 800a936:	7042      	strb	r2, [r0, #1]
 800a938:	dd2a      	ble.n	800a990 <__exponent+0x70>
 800a93a:	f10d 0207 	add.w	r2, sp, #7
 800a93e:	4617      	mov	r7, r2
 800a940:	260a      	movs	r6, #10
 800a942:	4694      	mov	ip, r2
 800a944:	fb91 f5f6 	sdiv	r5, r1, r6
 800a948:	fb06 1415 	mls	r4, r6, r5, r1
 800a94c:	3430      	adds	r4, #48	; 0x30
 800a94e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a952:	460c      	mov	r4, r1
 800a954:	2c63      	cmp	r4, #99	; 0x63
 800a956:	f102 32ff 	add.w	r2, r2, #4294967295
 800a95a:	4629      	mov	r1, r5
 800a95c:	dcf1      	bgt.n	800a942 <__exponent+0x22>
 800a95e:	3130      	adds	r1, #48	; 0x30
 800a960:	f1ac 0402 	sub.w	r4, ip, #2
 800a964:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a968:	1c41      	adds	r1, r0, #1
 800a96a:	4622      	mov	r2, r4
 800a96c:	42ba      	cmp	r2, r7
 800a96e:	d30a      	bcc.n	800a986 <__exponent+0x66>
 800a970:	f10d 0209 	add.w	r2, sp, #9
 800a974:	eba2 020c 	sub.w	r2, r2, ip
 800a978:	42bc      	cmp	r4, r7
 800a97a:	bf88      	it	hi
 800a97c:	2200      	movhi	r2, #0
 800a97e:	4413      	add	r3, r2
 800a980:	1a18      	subs	r0, r3, r0
 800a982:	b003      	add	sp, #12
 800a984:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a986:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a98a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a98e:	e7ed      	b.n	800a96c <__exponent+0x4c>
 800a990:	2330      	movs	r3, #48	; 0x30
 800a992:	3130      	adds	r1, #48	; 0x30
 800a994:	7083      	strb	r3, [r0, #2]
 800a996:	70c1      	strb	r1, [r0, #3]
 800a998:	1d03      	adds	r3, r0, #4
 800a99a:	e7f1      	b.n	800a980 <__exponent+0x60>

0800a99c <_printf_float>:
 800a99c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9a0:	ed2d 8b02 	vpush	{d8}
 800a9a4:	b08d      	sub	sp, #52	; 0x34
 800a9a6:	460c      	mov	r4, r1
 800a9a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a9ac:	4616      	mov	r6, r2
 800a9ae:	461f      	mov	r7, r3
 800a9b0:	4605      	mov	r5, r0
 800a9b2:	f000 fcd5 	bl	800b360 <_localeconv_r>
 800a9b6:	f8d0 a000 	ldr.w	sl, [r0]
 800a9ba:	4650      	mov	r0, sl
 800a9bc:	f7f5 fc68 	bl	8000290 <strlen>
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	930a      	str	r3, [sp, #40]	; 0x28
 800a9c4:	6823      	ldr	r3, [r4, #0]
 800a9c6:	9305      	str	r3, [sp, #20]
 800a9c8:	f8d8 3000 	ldr.w	r3, [r8]
 800a9cc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a9d0:	3307      	adds	r3, #7
 800a9d2:	f023 0307 	bic.w	r3, r3, #7
 800a9d6:	f103 0208 	add.w	r2, r3, #8
 800a9da:	f8c8 2000 	str.w	r2, [r8]
 800a9de:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a9e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a9e6:	9307      	str	r3, [sp, #28]
 800a9e8:	f8cd 8018 	str.w	r8, [sp, #24]
 800a9ec:	ee08 0a10 	vmov	s16, r0
 800a9f0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800a9f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a9f8:	4b9e      	ldr	r3, [pc, #632]	; (800ac74 <_printf_float+0x2d8>)
 800a9fa:	f04f 32ff 	mov.w	r2, #4294967295
 800a9fe:	f7f6 f8a5 	bl	8000b4c <__aeabi_dcmpun>
 800aa02:	bb88      	cbnz	r0, 800aa68 <_printf_float+0xcc>
 800aa04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa08:	4b9a      	ldr	r3, [pc, #616]	; (800ac74 <_printf_float+0x2d8>)
 800aa0a:	f04f 32ff 	mov.w	r2, #4294967295
 800aa0e:	f7f6 f87f 	bl	8000b10 <__aeabi_dcmple>
 800aa12:	bb48      	cbnz	r0, 800aa68 <_printf_float+0xcc>
 800aa14:	2200      	movs	r2, #0
 800aa16:	2300      	movs	r3, #0
 800aa18:	4640      	mov	r0, r8
 800aa1a:	4649      	mov	r1, r9
 800aa1c:	f7f6 f86e 	bl	8000afc <__aeabi_dcmplt>
 800aa20:	b110      	cbz	r0, 800aa28 <_printf_float+0x8c>
 800aa22:	232d      	movs	r3, #45	; 0x2d
 800aa24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa28:	4a93      	ldr	r2, [pc, #588]	; (800ac78 <_printf_float+0x2dc>)
 800aa2a:	4b94      	ldr	r3, [pc, #592]	; (800ac7c <_printf_float+0x2e0>)
 800aa2c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800aa30:	bf94      	ite	ls
 800aa32:	4690      	movls	r8, r2
 800aa34:	4698      	movhi	r8, r3
 800aa36:	2303      	movs	r3, #3
 800aa38:	6123      	str	r3, [r4, #16]
 800aa3a:	9b05      	ldr	r3, [sp, #20]
 800aa3c:	f023 0304 	bic.w	r3, r3, #4
 800aa40:	6023      	str	r3, [r4, #0]
 800aa42:	f04f 0900 	mov.w	r9, #0
 800aa46:	9700      	str	r7, [sp, #0]
 800aa48:	4633      	mov	r3, r6
 800aa4a:	aa0b      	add	r2, sp, #44	; 0x2c
 800aa4c:	4621      	mov	r1, r4
 800aa4e:	4628      	mov	r0, r5
 800aa50:	f000 f9da 	bl	800ae08 <_printf_common>
 800aa54:	3001      	adds	r0, #1
 800aa56:	f040 8090 	bne.w	800ab7a <_printf_float+0x1de>
 800aa5a:	f04f 30ff 	mov.w	r0, #4294967295
 800aa5e:	b00d      	add	sp, #52	; 0x34
 800aa60:	ecbd 8b02 	vpop	{d8}
 800aa64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa68:	4642      	mov	r2, r8
 800aa6a:	464b      	mov	r3, r9
 800aa6c:	4640      	mov	r0, r8
 800aa6e:	4649      	mov	r1, r9
 800aa70:	f7f6 f86c 	bl	8000b4c <__aeabi_dcmpun>
 800aa74:	b140      	cbz	r0, 800aa88 <_printf_float+0xec>
 800aa76:	464b      	mov	r3, r9
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	bfbc      	itt	lt
 800aa7c:	232d      	movlt	r3, #45	; 0x2d
 800aa7e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800aa82:	4a7f      	ldr	r2, [pc, #508]	; (800ac80 <_printf_float+0x2e4>)
 800aa84:	4b7f      	ldr	r3, [pc, #508]	; (800ac84 <_printf_float+0x2e8>)
 800aa86:	e7d1      	b.n	800aa2c <_printf_float+0x90>
 800aa88:	6863      	ldr	r3, [r4, #4]
 800aa8a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800aa8e:	9206      	str	r2, [sp, #24]
 800aa90:	1c5a      	adds	r2, r3, #1
 800aa92:	d13f      	bne.n	800ab14 <_printf_float+0x178>
 800aa94:	2306      	movs	r3, #6
 800aa96:	6063      	str	r3, [r4, #4]
 800aa98:	9b05      	ldr	r3, [sp, #20]
 800aa9a:	6861      	ldr	r1, [r4, #4]
 800aa9c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	9303      	str	r3, [sp, #12]
 800aaa4:	ab0a      	add	r3, sp, #40	; 0x28
 800aaa6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800aaaa:	ab09      	add	r3, sp, #36	; 0x24
 800aaac:	ec49 8b10 	vmov	d0, r8, r9
 800aab0:	9300      	str	r3, [sp, #0]
 800aab2:	6022      	str	r2, [r4, #0]
 800aab4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800aab8:	4628      	mov	r0, r5
 800aaba:	f7ff fecf 	bl	800a85c <__cvt>
 800aabe:	9b06      	ldr	r3, [sp, #24]
 800aac0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aac2:	2b47      	cmp	r3, #71	; 0x47
 800aac4:	4680      	mov	r8, r0
 800aac6:	d108      	bne.n	800aada <_printf_float+0x13e>
 800aac8:	1cc8      	adds	r0, r1, #3
 800aaca:	db02      	blt.n	800aad2 <_printf_float+0x136>
 800aacc:	6863      	ldr	r3, [r4, #4]
 800aace:	4299      	cmp	r1, r3
 800aad0:	dd41      	ble.n	800ab56 <_printf_float+0x1ba>
 800aad2:	f1ab 0302 	sub.w	r3, fp, #2
 800aad6:	fa5f fb83 	uxtb.w	fp, r3
 800aada:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800aade:	d820      	bhi.n	800ab22 <_printf_float+0x186>
 800aae0:	3901      	subs	r1, #1
 800aae2:	465a      	mov	r2, fp
 800aae4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800aae8:	9109      	str	r1, [sp, #36]	; 0x24
 800aaea:	f7ff ff19 	bl	800a920 <__exponent>
 800aaee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aaf0:	1813      	adds	r3, r2, r0
 800aaf2:	2a01      	cmp	r2, #1
 800aaf4:	4681      	mov	r9, r0
 800aaf6:	6123      	str	r3, [r4, #16]
 800aaf8:	dc02      	bgt.n	800ab00 <_printf_float+0x164>
 800aafa:	6822      	ldr	r2, [r4, #0]
 800aafc:	07d2      	lsls	r2, r2, #31
 800aafe:	d501      	bpl.n	800ab04 <_printf_float+0x168>
 800ab00:	3301      	adds	r3, #1
 800ab02:	6123      	str	r3, [r4, #16]
 800ab04:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d09c      	beq.n	800aa46 <_printf_float+0xaa>
 800ab0c:	232d      	movs	r3, #45	; 0x2d
 800ab0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab12:	e798      	b.n	800aa46 <_printf_float+0xaa>
 800ab14:	9a06      	ldr	r2, [sp, #24]
 800ab16:	2a47      	cmp	r2, #71	; 0x47
 800ab18:	d1be      	bne.n	800aa98 <_printf_float+0xfc>
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d1bc      	bne.n	800aa98 <_printf_float+0xfc>
 800ab1e:	2301      	movs	r3, #1
 800ab20:	e7b9      	b.n	800aa96 <_printf_float+0xfa>
 800ab22:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ab26:	d118      	bne.n	800ab5a <_printf_float+0x1be>
 800ab28:	2900      	cmp	r1, #0
 800ab2a:	6863      	ldr	r3, [r4, #4]
 800ab2c:	dd0b      	ble.n	800ab46 <_printf_float+0x1aa>
 800ab2e:	6121      	str	r1, [r4, #16]
 800ab30:	b913      	cbnz	r3, 800ab38 <_printf_float+0x19c>
 800ab32:	6822      	ldr	r2, [r4, #0]
 800ab34:	07d0      	lsls	r0, r2, #31
 800ab36:	d502      	bpl.n	800ab3e <_printf_float+0x1a2>
 800ab38:	3301      	adds	r3, #1
 800ab3a:	440b      	add	r3, r1
 800ab3c:	6123      	str	r3, [r4, #16]
 800ab3e:	65a1      	str	r1, [r4, #88]	; 0x58
 800ab40:	f04f 0900 	mov.w	r9, #0
 800ab44:	e7de      	b.n	800ab04 <_printf_float+0x168>
 800ab46:	b913      	cbnz	r3, 800ab4e <_printf_float+0x1b2>
 800ab48:	6822      	ldr	r2, [r4, #0]
 800ab4a:	07d2      	lsls	r2, r2, #31
 800ab4c:	d501      	bpl.n	800ab52 <_printf_float+0x1b6>
 800ab4e:	3302      	adds	r3, #2
 800ab50:	e7f4      	b.n	800ab3c <_printf_float+0x1a0>
 800ab52:	2301      	movs	r3, #1
 800ab54:	e7f2      	b.n	800ab3c <_printf_float+0x1a0>
 800ab56:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ab5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab5c:	4299      	cmp	r1, r3
 800ab5e:	db05      	blt.n	800ab6c <_printf_float+0x1d0>
 800ab60:	6823      	ldr	r3, [r4, #0]
 800ab62:	6121      	str	r1, [r4, #16]
 800ab64:	07d8      	lsls	r0, r3, #31
 800ab66:	d5ea      	bpl.n	800ab3e <_printf_float+0x1a2>
 800ab68:	1c4b      	adds	r3, r1, #1
 800ab6a:	e7e7      	b.n	800ab3c <_printf_float+0x1a0>
 800ab6c:	2900      	cmp	r1, #0
 800ab6e:	bfd4      	ite	le
 800ab70:	f1c1 0202 	rsble	r2, r1, #2
 800ab74:	2201      	movgt	r2, #1
 800ab76:	4413      	add	r3, r2
 800ab78:	e7e0      	b.n	800ab3c <_printf_float+0x1a0>
 800ab7a:	6823      	ldr	r3, [r4, #0]
 800ab7c:	055a      	lsls	r2, r3, #21
 800ab7e:	d407      	bmi.n	800ab90 <_printf_float+0x1f4>
 800ab80:	6923      	ldr	r3, [r4, #16]
 800ab82:	4642      	mov	r2, r8
 800ab84:	4631      	mov	r1, r6
 800ab86:	4628      	mov	r0, r5
 800ab88:	47b8      	blx	r7
 800ab8a:	3001      	adds	r0, #1
 800ab8c:	d12c      	bne.n	800abe8 <_printf_float+0x24c>
 800ab8e:	e764      	b.n	800aa5a <_printf_float+0xbe>
 800ab90:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ab94:	f240 80e0 	bls.w	800ad58 <_printf_float+0x3bc>
 800ab98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	2300      	movs	r3, #0
 800aba0:	f7f5 ffa2 	bl	8000ae8 <__aeabi_dcmpeq>
 800aba4:	2800      	cmp	r0, #0
 800aba6:	d034      	beq.n	800ac12 <_printf_float+0x276>
 800aba8:	4a37      	ldr	r2, [pc, #220]	; (800ac88 <_printf_float+0x2ec>)
 800abaa:	2301      	movs	r3, #1
 800abac:	4631      	mov	r1, r6
 800abae:	4628      	mov	r0, r5
 800abb0:	47b8      	blx	r7
 800abb2:	3001      	adds	r0, #1
 800abb4:	f43f af51 	beq.w	800aa5a <_printf_float+0xbe>
 800abb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800abbc:	429a      	cmp	r2, r3
 800abbe:	db02      	blt.n	800abc6 <_printf_float+0x22a>
 800abc0:	6823      	ldr	r3, [r4, #0]
 800abc2:	07d8      	lsls	r0, r3, #31
 800abc4:	d510      	bpl.n	800abe8 <_printf_float+0x24c>
 800abc6:	ee18 3a10 	vmov	r3, s16
 800abca:	4652      	mov	r2, sl
 800abcc:	4631      	mov	r1, r6
 800abce:	4628      	mov	r0, r5
 800abd0:	47b8      	blx	r7
 800abd2:	3001      	adds	r0, #1
 800abd4:	f43f af41 	beq.w	800aa5a <_printf_float+0xbe>
 800abd8:	f04f 0800 	mov.w	r8, #0
 800abdc:	f104 091a 	add.w	r9, r4, #26
 800abe0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abe2:	3b01      	subs	r3, #1
 800abe4:	4543      	cmp	r3, r8
 800abe6:	dc09      	bgt.n	800abfc <_printf_float+0x260>
 800abe8:	6823      	ldr	r3, [r4, #0]
 800abea:	079b      	lsls	r3, r3, #30
 800abec:	f100 8107 	bmi.w	800adfe <_printf_float+0x462>
 800abf0:	68e0      	ldr	r0, [r4, #12]
 800abf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abf4:	4298      	cmp	r0, r3
 800abf6:	bfb8      	it	lt
 800abf8:	4618      	movlt	r0, r3
 800abfa:	e730      	b.n	800aa5e <_printf_float+0xc2>
 800abfc:	2301      	movs	r3, #1
 800abfe:	464a      	mov	r2, r9
 800ac00:	4631      	mov	r1, r6
 800ac02:	4628      	mov	r0, r5
 800ac04:	47b8      	blx	r7
 800ac06:	3001      	adds	r0, #1
 800ac08:	f43f af27 	beq.w	800aa5a <_printf_float+0xbe>
 800ac0c:	f108 0801 	add.w	r8, r8, #1
 800ac10:	e7e6      	b.n	800abe0 <_printf_float+0x244>
 800ac12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	dc39      	bgt.n	800ac8c <_printf_float+0x2f0>
 800ac18:	4a1b      	ldr	r2, [pc, #108]	; (800ac88 <_printf_float+0x2ec>)
 800ac1a:	2301      	movs	r3, #1
 800ac1c:	4631      	mov	r1, r6
 800ac1e:	4628      	mov	r0, r5
 800ac20:	47b8      	blx	r7
 800ac22:	3001      	adds	r0, #1
 800ac24:	f43f af19 	beq.w	800aa5a <_printf_float+0xbe>
 800ac28:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ac2c:	4313      	orrs	r3, r2
 800ac2e:	d102      	bne.n	800ac36 <_printf_float+0x29a>
 800ac30:	6823      	ldr	r3, [r4, #0]
 800ac32:	07d9      	lsls	r1, r3, #31
 800ac34:	d5d8      	bpl.n	800abe8 <_printf_float+0x24c>
 800ac36:	ee18 3a10 	vmov	r3, s16
 800ac3a:	4652      	mov	r2, sl
 800ac3c:	4631      	mov	r1, r6
 800ac3e:	4628      	mov	r0, r5
 800ac40:	47b8      	blx	r7
 800ac42:	3001      	adds	r0, #1
 800ac44:	f43f af09 	beq.w	800aa5a <_printf_float+0xbe>
 800ac48:	f04f 0900 	mov.w	r9, #0
 800ac4c:	f104 0a1a 	add.w	sl, r4, #26
 800ac50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac52:	425b      	negs	r3, r3
 800ac54:	454b      	cmp	r3, r9
 800ac56:	dc01      	bgt.n	800ac5c <_printf_float+0x2c0>
 800ac58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac5a:	e792      	b.n	800ab82 <_printf_float+0x1e6>
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	4652      	mov	r2, sl
 800ac60:	4631      	mov	r1, r6
 800ac62:	4628      	mov	r0, r5
 800ac64:	47b8      	blx	r7
 800ac66:	3001      	adds	r0, #1
 800ac68:	f43f aef7 	beq.w	800aa5a <_printf_float+0xbe>
 800ac6c:	f109 0901 	add.w	r9, r9, #1
 800ac70:	e7ee      	b.n	800ac50 <_printf_float+0x2b4>
 800ac72:	bf00      	nop
 800ac74:	7fefffff 	.word	0x7fefffff
 800ac78:	0800e798 	.word	0x0800e798
 800ac7c:	0800e79c 	.word	0x0800e79c
 800ac80:	0800e7a0 	.word	0x0800e7a0
 800ac84:	0800e7a4 	.word	0x0800e7a4
 800ac88:	0800e7a8 	.word	0x0800e7a8
 800ac8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ac8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ac90:	429a      	cmp	r2, r3
 800ac92:	bfa8      	it	ge
 800ac94:	461a      	movge	r2, r3
 800ac96:	2a00      	cmp	r2, #0
 800ac98:	4691      	mov	r9, r2
 800ac9a:	dc37      	bgt.n	800ad0c <_printf_float+0x370>
 800ac9c:	f04f 0b00 	mov.w	fp, #0
 800aca0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aca4:	f104 021a 	add.w	r2, r4, #26
 800aca8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800acaa:	9305      	str	r3, [sp, #20]
 800acac:	eba3 0309 	sub.w	r3, r3, r9
 800acb0:	455b      	cmp	r3, fp
 800acb2:	dc33      	bgt.n	800ad1c <_printf_float+0x380>
 800acb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800acb8:	429a      	cmp	r2, r3
 800acba:	db3b      	blt.n	800ad34 <_printf_float+0x398>
 800acbc:	6823      	ldr	r3, [r4, #0]
 800acbe:	07da      	lsls	r2, r3, #31
 800acc0:	d438      	bmi.n	800ad34 <_printf_float+0x398>
 800acc2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800acc6:	eba2 0903 	sub.w	r9, r2, r3
 800acca:	9b05      	ldr	r3, [sp, #20]
 800accc:	1ad2      	subs	r2, r2, r3
 800acce:	4591      	cmp	r9, r2
 800acd0:	bfa8      	it	ge
 800acd2:	4691      	movge	r9, r2
 800acd4:	f1b9 0f00 	cmp.w	r9, #0
 800acd8:	dc35      	bgt.n	800ad46 <_printf_float+0x3aa>
 800acda:	f04f 0800 	mov.w	r8, #0
 800acde:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ace2:	f104 0a1a 	add.w	sl, r4, #26
 800ace6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800acea:	1a9b      	subs	r3, r3, r2
 800acec:	eba3 0309 	sub.w	r3, r3, r9
 800acf0:	4543      	cmp	r3, r8
 800acf2:	f77f af79 	ble.w	800abe8 <_printf_float+0x24c>
 800acf6:	2301      	movs	r3, #1
 800acf8:	4652      	mov	r2, sl
 800acfa:	4631      	mov	r1, r6
 800acfc:	4628      	mov	r0, r5
 800acfe:	47b8      	blx	r7
 800ad00:	3001      	adds	r0, #1
 800ad02:	f43f aeaa 	beq.w	800aa5a <_printf_float+0xbe>
 800ad06:	f108 0801 	add.w	r8, r8, #1
 800ad0a:	e7ec      	b.n	800ace6 <_printf_float+0x34a>
 800ad0c:	4613      	mov	r3, r2
 800ad0e:	4631      	mov	r1, r6
 800ad10:	4642      	mov	r2, r8
 800ad12:	4628      	mov	r0, r5
 800ad14:	47b8      	blx	r7
 800ad16:	3001      	adds	r0, #1
 800ad18:	d1c0      	bne.n	800ac9c <_printf_float+0x300>
 800ad1a:	e69e      	b.n	800aa5a <_printf_float+0xbe>
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	4631      	mov	r1, r6
 800ad20:	4628      	mov	r0, r5
 800ad22:	9205      	str	r2, [sp, #20]
 800ad24:	47b8      	blx	r7
 800ad26:	3001      	adds	r0, #1
 800ad28:	f43f ae97 	beq.w	800aa5a <_printf_float+0xbe>
 800ad2c:	9a05      	ldr	r2, [sp, #20]
 800ad2e:	f10b 0b01 	add.w	fp, fp, #1
 800ad32:	e7b9      	b.n	800aca8 <_printf_float+0x30c>
 800ad34:	ee18 3a10 	vmov	r3, s16
 800ad38:	4652      	mov	r2, sl
 800ad3a:	4631      	mov	r1, r6
 800ad3c:	4628      	mov	r0, r5
 800ad3e:	47b8      	blx	r7
 800ad40:	3001      	adds	r0, #1
 800ad42:	d1be      	bne.n	800acc2 <_printf_float+0x326>
 800ad44:	e689      	b.n	800aa5a <_printf_float+0xbe>
 800ad46:	9a05      	ldr	r2, [sp, #20]
 800ad48:	464b      	mov	r3, r9
 800ad4a:	4442      	add	r2, r8
 800ad4c:	4631      	mov	r1, r6
 800ad4e:	4628      	mov	r0, r5
 800ad50:	47b8      	blx	r7
 800ad52:	3001      	adds	r0, #1
 800ad54:	d1c1      	bne.n	800acda <_printf_float+0x33e>
 800ad56:	e680      	b.n	800aa5a <_printf_float+0xbe>
 800ad58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad5a:	2a01      	cmp	r2, #1
 800ad5c:	dc01      	bgt.n	800ad62 <_printf_float+0x3c6>
 800ad5e:	07db      	lsls	r3, r3, #31
 800ad60:	d53a      	bpl.n	800add8 <_printf_float+0x43c>
 800ad62:	2301      	movs	r3, #1
 800ad64:	4642      	mov	r2, r8
 800ad66:	4631      	mov	r1, r6
 800ad68:	4628      	mov	r0, r5
 800ad6a:	47b8      	blx	r7
 800ad6c:	3001      	adds	r0, #1
 800ad6e:	f43f ae74 	beq.w	800aa5a <_printf_float+0xbe>
 800ad72:	ee18 3a10 	vmov	r3, s16
 800ad76:	4652      	mov	r2, sl
 800ad78:	4631      	mov	r1, r6
 800ad7a:	4628      	mov	r0, r5
 800ad7c:	47b8      	blx	r7
 800ad7e:	3001      	adds	r0, #1
 800ad80:	f43f ae6b 	beq.w	800aa5a <_printf_float+0xbe>
 800ad84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ad88:	2200      	movs	r2, #0
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800ad90:	f7f5 feaa 	bl	8000ae8 <__aeabi_dcmpeq>
 800ad94:	b9d8      	cbnz	r0, 800adce <_printf_float+0x432>
 800ad96:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ad9a:	f108 0201 	add.w	r2, r8, #1
 800ad9e:	4631      	mov	r1, r6
 800ada0:	4628      	mov	r0, r5
 800ada2:	47b8      	blx	r7
 800ada4:	3001      	adds	r0, #1
 800ada6:	d10e      	bne.n	800adc6 <_printf_float+0x42a>
 800ada8:	e657      	b.n	800aa5a <_printf_float+0xbe>
 800adaa:	2301      	movs	r3, #1
 800adac:	4652      	mov	r2, sl
 800adae:	4631      	mov	r1, r6
 800adb0:	4628      	mov	r0, r5
 800adb2:	47b8      	blx	r7
 800adb4:	3001      	adds	r0, #1
 800adb6:	f43f ae50 	beq.w	800aa5a <_printf_float+0xbe>
 800adba:	f108 0801 	add.w	r8, r8, #1
 800adbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adc0:	3b01      	subs	r3, #1
 800adc2:	4543      	cmp	r3, r8
 800adc4:	dcf1      	bgt.n	800adaa <_printf_float+0x40e>
 800adc6:	464b      	mov	r3, r9
 800adc8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800adcc:	e6da      	b.n	800ab84 <_printf_float+0x1e8>
 800adce:	f04f 0800 	mov.w	r8, #0
 800add2:	f104 0a1a 	add.w	sl, r4, #26
 800add6:	e7f2      	b.n	800adbe <_printf_float+0x422>
 800add8:	2301      	movs	r3, #1
 800adda:	4642      	mov	r2, r8
 800addc:	e7df      	b.n	800ad9e <_printf_float+0x402>
 800adde:	2301      	movs	r3, #1
 800ade0:	464a      	mov	r2, r9
 800ade2:	4631      	mov	r1, r6
 800ade4:	4628      	mov	r0, r5
 800ade6:	47b8      	blx	r7
 800ade8:	3001      	adds	r0, #1
 800adea:	f43f ae36 	beq.w	800aa5a <_printf_float+0xbe>
 800adee:	f108 0801 	add.w	r8, r8, #1
 800adf2:	68e3      	ldr	r3, [r4, #12]
 800adf4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800adf6:	1a5b      	subs	r3, r3, r1
 800adf8:	4543      	cmp	r3, r8
 800adfa:	dcf0      	bgt.n	800adde <_printf_float+0x442>
 800adfc:	e6f8      	b.n	800abf0 <_printf_float+0x254>
 800adfe:	f04f 0800 	mov.w	r8, #0
 800ae02:	f104 0919 	add.w	r9, r4, #25
 800ae06:	e7f4      	b.n	800adf2 <_printf_float+0x456>

0800ae08 <_printf_common>:
 800ae08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae0c:	4616      	mov	r6, r2
 800ae0e:	4699      	mov	r9, r3
 800ae10:	688a      	ldr	r2, [r1, #8]
 800ae12:	690b      	ldr	r3, [r1, #16]
 800ae14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ae18:	4293      	cmp	r3, r2
 800ae1a:	bfb8      	it	lt
 800ae1c:	4613      	movlt	r3, r2
 800ae1e:	6033      	str	r3, [r6, #0]
 800ae20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ae24:	4607      	mov	r7, r0
 800ae26:	460c      	mov	r4, r1
 800ae28:	b10a      	cbz	r2, 800ae2e <_printf_common+0x26>
 800ae2a:	3301      	adds	r3, #1
 800ae2c:	6033      	str	r3, [r6, #0]
 800ae2e:	6823      	ldr	r3, [r4, #0]
 800ae30:	0699      	lsls	r1, r3, #26
 800ae32:	bf42      	ittt	mi
 800ae34:	6833      	ldrmi	r3, [r6, #0]
 800ae36:	3302      	addmi	r3, #2
 800ae38:	6033      	strmi	r3, [r6, #0]
 800ae3a:	6825      	ldr	r5, [r4, #0]
 800ae3c:	f015 0506 	ands.w	r5, r5, #6
 800ae40:	d106      	bne.n	800ae50 <_printf_common+0x48>
 800ae42:	f104 0a19 	add.w	sl, r4, #25
 800ae46:	68e3      	ldr	r3, [r4, #12]
 800ae48:	6832      	ldr	r2, [r6, #0]
 800ae4a:	1a9b      	subs	r3, r3, r2
 800ae4c:	42ab      	cmp	r3, r5
 800ae4e:	dc26      	bgt.n	800ae9e <_printf_common+0x96>
 800ae50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ae54:	1e13      	subs	r3, r2, #0
 800ae56:	6822      	ldr	r2, [r4, #0]
 800ae58:	bf18      	it	ne
 800ae5a:	2301      	movne	r3, #1
 800ae5c:	0692      	lsls	r2, r2, #26
 800ae5e:	d42b      	bmi.n	800aeb8 <_printf_common+0xb0>
 800ae60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ae64:	4649      	mov	r1, r9
 800ae66:	4638      	mov	r0, r7
 800ae68:	47c0      	blx	r8
 800ae6a:	3001      	adds	r0, #1
 800ae6c:	d01e      	beq.n	800aeac <_printf_common+0xa4>
 800ae6e:	6823      	ldr	r3, [r4, #0]
 800ae70:	6922      	ldr	r2, [r4, #16]
 800ae72:	f003 0306 	and.w	r3, r3, #6
 800ae76:	2b04      	cmp	r3, #4
 800ae78:	bf02      	ittt	eq
 800ae7a:	68e5      	ldreq	r5, [r4, #12]
 800ae7c:	6833      	ldreq	r3, [r6, #0]
 800ae7e:	1aed      	subeq	r5, r5, r3
 800ae80:	68a3      	ldr	r3, [r4, #8]
 800ae82:	bf0c      	ite	eq
 800ae84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ae88:	2500      	movne	r5, #0
 800ae8a:	4293      	cmp	r3, r2
 800ae8c:	bfc4      	itt	gt
 800ae8e:	1a9b      	subgt	r3, r3, r2
 800ae90:	18ed      	addgt	r5, r5, r3
 800ae92:	2600      	movs	r6, #0
 800ae94:	341a      	adds	r4, #26
 800ae96:	42b5      	cmp	r5, r6
 800ae98:	d11a      	bne.n	800aed0 <_printf_common+0xc8>
 800ae9a:	2000      	movs	r0, #0
 800ae9c:	e008      	b.n	800aeb0 <_printf_common+0xa8>
 800ae9e:	2301      	movs	r3, #1
 800aea0:	4652      	mov	r2, sl
 800aea2:	4649      	mov	r1, r9
 800aea4:	4638      	mov	r0, r7
 800aea6:	47c0      	blx	r8
 800aea8:	3001      	adds	r0, #1
 800aeaa:	d103      	bne.n	800aeb4 <_printf_common+0xac>
 800aeac:	f04f 30ff 	mov.w	r0, #4294967295
 800aeb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aeb4:	3501      	adds	r5, #1
 800aeb6:	e7c6      	b.n	800ae46 <_printf_common+0x3e>
 800aeb8:	18e1      	adds	r1, r4, r3
 800aeba:	1c5a      	adds	r2, r3, #1
 800aebc:	2030      	movs	r0, #48	; 0x30
 800aebe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aec2:	4422      	add	r2, r4
 800aec4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aec8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aecc:	3302      	adds	r3, #2
 800aece:	e7c7      	b.n	800ae60 <_printf_common+0x58>
 800aed0:	2301      	movs	r3, #1
 800aed2:	4622      	mov	r2, r4
 800aed4:	4649      	mov	r1, r9
 800aed6:	4638      	mov	r0, r7
 800aed8:	47c0      	blx	r8
 800aeda:	3001      	adds	r0, #1
 800aedc:	d0e6      	beq.n	800aeac <_printf_common+0xa4>
 800aede:	3601      	adds	r6, #1
 800aee0:	e7d9      	b.n	800ae96 <_printf_common+0x8e>
	...

0800aee4 <_printf_i>:
 800aee4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aee8:	7e0f      	ldrb	r7, [r1, #24]
 800aeea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aeec:	2f78      	cmp	r7, #120	; 0x78
 800aeee:	4691      	mov	r9, r2
 800aef0:	4680      	mov	r8, r0
 800aef2:	460c      	mov	r4, r1
 800aef4:	469a      	mov	sl, r3
 800aef6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aefa:	d807      	bhi.n	800af0c <_printf_i+0x28>
 800aefc:	2f62      	cmp	r7, #98	; 0x62
 800aefe:	d80a      	bhi.n	800af16 <_printf_i+0x32>
 800af00:	2f00      	cmp	r7, #0
 800af02:	f000 80d4 	beq.w	800b0ae <_printf_i+0x1ca>
 800af06:	2f58      	cmp	r7, #88	; 0x58
 800af08:	f000 80c0 	beq.w	800b08c <_printf_i+0x1a8>
 800af0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800af14:	e03a      	b.n	800af8c <_printf_i+0xa8>
 800af16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800af1a:	2b15      	cmp	r3, #21
 800af1c:	d8f6      	bhi.n	800af0c <_printf_i+0x28>
 800af1e:	a101      	add	r1, pc, #4	; (adr r1, 800af24 <_printf_i+0x40>)
 800af20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800af24:	0800af7d 	.word	0x0800af7d
 800af28:	0800af91 	.word	0x0800af91
 800af2c:	0800af0d 	.word	0x0800af0d
 800af30:	0800af0d 	.word	0x0800af0d
 800af34:	0800af0d 	.word	0x0800af0d
 800af38:	0800af0d 	.word	0x0800af0d
 800af3c:	0800af91 	.word	0x0800af91
 800af40:	0800af0d 	.word	0x0800af0d
 800af44:	0800af0d 	.word	0x0800af0d
 800af48:	0800af0d 	.word	0x0800af0d
 800af4c:	0800af0d 	.word	0x0800af0d
 800af50:	0800b095 	.word	0x0800b095
 800af54:	0800afbd 	.word	0x0800afbd
 800af58:	0800b04f 	.word	0x0800b04f
 800af5c:	0800af0d 	.word	0x0800af0d
 800af60:	0800af0d 	.word	0x0800af0d
 800af64:	0800b0b7 	.word	0x0800b0b7
 800af68:	0800af0d 	.word	0x0800af0d
 800af6c:	0800afbd 	.word	0x0800afbd
 800af70:	0800af0d 	.word	0x0800af0d
 800af74:	0800af0d 	.word	0x0800af0d
 800af78:	0800b057 	.word	0x0800b057
 800af7c:	682b      	ldr	r3, [r5, #0]
 800af7e:	1d1a      	adds	r2, r3, #4
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	602a      	str	r2, [r5, #0]
 800af84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800af8c:	2301      	movs	r3, #1
 800af8e:	e09f      	b.n	800b0d0 <_printf_i+0x1ec>
 800af90:	6820      	ldr	r0, [r4, #0]
 800af92:	682b      	ldr	r3, [r5, #0]
 800af94:	0607      	lsls	r7, r0, #24
 800af96:	f103 0104 	add.w	r1, r3, #4
 800af9a:	6029      	str	r1, [r5, #0]
 800af9c:	d501      	bpl.n	800afa2 <_printf_i+0xbe>
 800af9e:	681e      	ldr	r6, [r3, #0]
 800afa0:	e003      	b.n	800afaa <_printf_i+0xc6>
 800afa2:	0646      	lsls	r6, r0, #25
 800afa4:	d5fb      	bpl.n	800af9e <_printf_i+0xba>
 800afa6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800afaa:	2e00      	cmp	r6, #0
 800afac:	da03      	bge.n	800afb6 <_printf_i+0xd2>
 800afae:	232d      	movs	r3, #45	; 0x2d
 800afb0:	4276      	negs	r6, r6
 800afb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800afb6:	485a      	ldr	r0, [pc, #360]	; (800b120 <_printf_i+0x23c>)
 800afb8:	230a      	movs	r3, #10
 800afba:	e012      	b.n	800afe2 <_printf_i+0xfe>
 800afbc:	682b      	ldr	r3, [r5, #0]
 800afbe:	6820      	ldr	r0, [r4, #0]
 800afc0:	1d19      	adds	r1, r3, #4
 800afc2:	6029      	str	r1, [r5, #0]
 800afc4:	0605      	lsls	r5, r0, #24
 800afc6:	d501      	bpl.n	800afcc <_printf_i+0xe8>
 800afc8:	681e      	ldr	r6, [r3, #0]
 800afca:	e002      	b.n	800afd2 <_printf_i+0xee>
 800afcc:	0641      	lsls	r1, r0, #25
 800afce:	d5fb      	bpl.n	800afc8 <_printf_i+0xe4>
 800afd0:	881e      	ldrh	r6, [r3, #0]
 800afd2:	4853      	ldr	r0, [pc, #332]	; (800b120 <_printf_i+0x23c>)
 800afd4:	2f6f      	cmp	r7, #111	; 0x6f
 800afd6:	bf0c      	ite	eq
 800afd8:	2308      	moveq	r3, #8
 800afda:	230a      	movne	r3, #10
 800afdc:	2100      	movs	r1, #0
 800afde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800afe2:	6865      	ldr	r5, [r4, #4]
 800afe4:	60a5      	str	r5, [r4, #8]
 800afe6:	2d00      	cmp	r5, #0
 800afe8:	bfa2      	ittt	ge
 800afea:	6821      	ldrge	r1, [r4, #0]
 800afec:	f021 0104 	bicge.w	r1, r1, #4
 800aff0:	6021      	strge	r1, [r4, #0]
 800aff2:	b90e      	cbnz	r6, 800aff8 <_printf_i+0x114>
 800aff4:	2d00      	cmp	r5, #0
 800aff6:	d04b      	beq.n	800b090 <_printf_i+0x1ac>
 800aff8:	4615      	mov	r5, r2
 800affa:	fbb6 f1f3 	udiv	r1, r6, r3
 800affe:	fb03 6711 	mls	r7, r3, r1, r6
 800b002:	5dc7      	ldrb	r7, [r0, r7]
 800b004:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b008:	4637      	mov	r7, r6
 800b00a:	42bb      	cmp	r3, r7
 800b00c:	460e      	mov	r6, r1
 800b00e:	d9f4      	bls.n	800affa <_printf_i+0x116>
 800b010:	2b08      	cmp	r3, #8
 800b012:	d10b      	bne.n	800b02c <_printf_i+0x148>
 800b014:	6823      	ldr	r3, [r4, #0]
 800b016:	07de      	lsls	r6, r3, #31
 800b018:	d508      	bpl.n	800b02c <_printf_i+0x148>
 800b01a:	6923      	ldr	r3, [r4, #16]
 800b01c:	6861      	ldr	r1, [r4, #4]
 800b01e:	4299      	cmp	r1, r3
 800b020:	bfde      	ittt	le
 800b022:	2330      	movle	r3, #48	; 0x30
 800b024:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b028:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b02c:	1b52      	subs	r2, r2, r5
 800b02e:	6122      	str	r2, [r4, #16]
 800b030:	f8cd a000 	str.w	sl, [sp]
 800b034:	464b      	mov	r3, r9
 800b036:	aa03      	add	r2, sp, #12
 800b038:	4621      	mov	r1, r4
 800b03a:	4640      	mov	r0, r8
 800b03c:	f7ff fee4 	bl	800ae08 <_printf_common>
 800b040:	3001      	adds	r0, #1
 800b042:	d14a      	bne.n	800b0da <_printf_i+0x1f6>
 800b044:	f04f 30ff 	mov.w	r0, #4294967295
 800b048:	b004      	add	sp, #16
 800b04a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b04e:	6823      	ldr	r3, [r4, #0]
 800b050:	f043 0320 	orr.w	r3, r3, #32
 800b054:	6023      	str	r3, [r4, #0]
 800b056:	4833      	ldr	r0, [pc, #204]	; (800b124 <_printf_i+0x240>)
 800b058:	2778      	movs	r7, #120	; 0x78
 800b05a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b05e:	6823      	ldr	r3, [r4, #0]
 800b060:	6829      	ldr	r1, [r5, #0]
 800b062:	061f      	lsls	r7, r3, #24
 800b064:	f851 6b04 	ldr.w	r6, [r1], #4
 800b068:	d402      	bmi.n	800b070 <_printf_i+0x18c>
 800b06a:	065f      	lsls	r7, r3, #25
 800b06c:	bf48      	it	mi
 800b06e:	b2b6      	uxthmi	r6, r6
 800b070:	07df      	lsls	r7, r3, #31
 800b072:	bf48      	it	mi
 800b074:	f043 0320 	orrmi.w	r3, r3, #32
 800b078:	6029      	str	r1, [r5, #0]
 800b07a:	bf48      	it	mi
 800b07c:	6023      	strmi	r3, [r4, #0]
 800b07e:	b91e      	cbnz	r6, 800b088 <_printf_i+0x1a4>
 800b080:	6823      	ldr	r3, [r4, #0]
 800b082:	f023 0320 	bic.w	r3, r3, #32
 800b086:	6023      	str	r3, [r4, #0]
 800b088:	2310      	movs	r3, #16
 800b08a:	e7a7      	b.n	800afdc <_printf_i+0xf8>
 800b08c:	4824      	ldr	r0, [pc, #144]	; (800b120 <_printf_i+0x23c>)
 800b08e:	e7e4      	b.n	800b05a <_printf_i+0x176>
 800b090:	4615      	mov	r5, r2
 800b092:	e7bd      	b.n	800b010 <_printf_i+0x12c>
 800b094:	682b      	ldr	r3, [r5, #0]
 800b096:	6826      	ldr	r6, [r4, #0]
 800b098:	6961      	ldr	r1, [r4, #20]
 800b09a:	1d18      	adds	r0, r3, #4
 800b09c:	6028      	str	r0, [r5, #0]
 800b09e:	0635      	lsls	r5, r6, #24
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	d501      	bpl.n	800b0a8 <_printf_i+0x1c4>
 800b0a4:	6019      	str	r1, [r3, #0]
 800b0a6:	e002      	b.n	800b0ae <_printf_i+0x1ca>
 800b0a8:	0670      	lsls	r0, r6, #25
 800b0aa:	d5fb      	bpl.n	800b0a4 <_printf_i+0x1c0>
 800b0ac:	8019      	strh	r1, [r3, #0]
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	6123      	str	r3, [r4, #16]
 800b0b2:	4615      	mov	r5, r2
 800b0b4:	e7bc      	b.n	800b030 <_printf_i+0x14c>
 800b0b6:	682b      	ldr	r3, [r5, #0]
 800b0b8:	1d1a      	adds	r2, r3, #4
 800b0ba:	602a      	str	r2, [r5, #0]
 800b0bc:	681d      	ldr	r5, [r3, #0]
 800b0be:	6862      	ldr	r2, [r4, #4]
 800b0c0:	2100      	movs	r1, #0
 800b0c2:	4628      	mov	r0, r5
 800b0c4:	f7f5 f894 	bl	80001f0 <memchr>
 800b0c8:	b108      	cbz	r0, 800b0ce <_printf_i+0x1ea>
 800b0ca:	1b40      	subs	r0, r0, r5
 800b0cc:	6060      	str	r0, [r4, #4]
 800b0ce:	6863      	ldr	r3, [r4, #4]
 800b0d0:	6123      	str	r3, [r4, #16]
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0d8:	e7aa      	b.n	800b030 <_printf_i+0x14c>
 800b0da:	6923      	ldr	r3, [r4, #16]
 800b0dc:	462a      	mov	r2, r5
 800b0de:	4649      	mov	r1, r9
 800b0e0:	4640      	mov	r0, r8
 800b0e2:	47d0      	blx	sl
 800b0e4:	3001      	adds	r0, #1
 800b0e6:	d0ad      	beq.n	800b044 <_printf_i+0x160>
 800b0e8:	6823      	ldr	r3, [r4, #0]
 800b0ea:	079b      	lsls	r3, r3, #30
 800b0ec:	d413      	bmi.n	800b116 <_printf_i+0x232>
 800b0ee:	68e0      	ldr	r0, [r4, #12]
 800b0f0:	9b03      	ldr	r3, [sp, #12]
 800b0f2:	4298      	cmp	r0, r3
 800b0f4:	bfb8      	it	lt
 800b0f6:	4618      	movlt	r0, r3
 800b0f8:	e7a6      	b.n	800b048 <_printf_i+0x164>
 800b0fa:	2301      	movs	r3, #1
 800b0fc:	4632      	mov	r2, r6
 800b0fe:	4649      	mov	r1, r9
 800b100:	4640      	mov	r0, r8
 800b102:	47d0      	blx	sl
 800b104:	3001      	adds	r0, #1
 800b106:	d09d      	beq.n	800b044 <_printf_i+0x160>
 800b108:	3501      	adds	r5, #1
 800b10a:	68e3      	ldr	r3, [r4, #12]
 800b10c:	9903      	ldr	r1, [sp, #12]
 800b10e:	1a5b      	subs	r3, r3, r1
 800b110:	42ab      	cmp	r3, r5
 800b112:	dcf2      	bgt.n	800b0fa <_printf_i+0x216>
 800b114:	e7eb      	b.n	800b0ee <_printf_i+0x20a>
 800b116:	2500      	movs	r5, #0
 800b118:	f104 0619 	add.w	r6, r4, #25
 800b11c:	e7f5      	b.n	800b10a <_printf_i+0x226>
 800b11e:	bf00      	nop
 800b120:	0800e7aa 	.word	0x0800e7aa
 800b124:	0800e7bb 	.word	0x0800e7bb

0800b128 <std>:
 800b128:	2300      	movs	r3, #0
 800b12a:	b510      	push	{r4, lr}
 800b12c:	4604      	mov	r4, r0
 800b12e:	e9c0 3300 	strd	r3, r3, [r0]
 800b132:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b136:	6083      	str	r3, [r0, #8]
 800b138:	8181      	strh	r1, [r0, #12]
 800b13a:	6643      	str	r3, [r0, #100]	; 0x64
 800b13c:	81c2      	strh	r2, [r0, #14]
 800b13e:	6183      	str	r3, [r0, #24]
 800b140:	4619      	mov	r1, r3
 800b142:	2208      	movs	r2, #8
 800b144:	305c      	adds	r0, #92	; 0x5c
 800b146:	f000 f902 	bl	800b34e <memset>
 800b14a:	4b05      	ldr	r3, [pc, #20]	; (800b160 <std+0x38>)
 800b14c:	6263      	str	r3, [r4, #36]	; 0x24
 800b14e:	4b05      	ldr	r3, [pc, #20]	; (800b164 <std+0x3c>)
 800b150:	62a3      	str	r3, [r4, #40]	; 0x28
 800b152:	4b05      	ldr	r3, [pc, #20]	; (800b168 <std+0x40>)
 800b154:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b156:	4b05      	ldr	r3, [pc, #20]	; (800b16c <std+0x44>)
 800b158:	6224      	str	r4, [r4, #32]
 800b15a:	6323      	str	r3, [r4, #48]	; 0x30
 800b15c:	bd10      	pop	{r4, pc}
 800b15e:	bf00      	nop
 800b160:	0800b2c9 	.word	0x0800b2c9
 800b164:	0800b2eb 	.word	0x0800b2eb
 800b168:	0800b323 	.word	0x0800b323
 800b16c:	0800b347 	.word	0x0800b347

0800b170 <stdio_exit_handler>:
 800b170:	4a02      	ldr	r2, [pc, #8]	; (800b17c <stdio_exit_handler+0xc>)
 800b172:	4903      	ldr	r1, [pc, #12]	; (800b180 <stdio_exit_handler+0x10>)
 800b174:	4803      	ldr	r0, [pc, #12]	; (800b184 <stdio_exit_handler+0x14>)
 800b176:	f000 b869 	b.w	800b24c <_fwalk_sglue>
 800b17a:	bf00      	nop
 800b17c:	20000010 	.word	0x20000010
 800b180:	0800ce11 	.word	0x0800ce11
 800b184:	2000001c 	.word	0x2000001c

0800b188 <cleanup_stdio>:
 800b188:	6841      	ldr	r1, [r0, #4]
 800b18a:	4b0c      	ldr	r3, [pc, #48]	; (800b1bc <cleanup_stdio+0x34>)
 800b18c:	4299      	cmp	r1, r3
 800b18e:	b510      	push	{r4, lr}
 800b190:	4604      	mov	r4, r0
 800b192:	d001      	beq.n	800b198 <cleanup_stdio+0x10>
 800b194:	f001 fe3c 	bl	800ce10 <_fflush_r>
 800b198:	68a1      	ldr	r1, [r4, #8]
 800b19a:	4b09      	ldr	r3, [pc, #36]	; (800b1c0 <cleanup_stdio+0x38>)
 800b19c:	4299      	cmp	r1, r3
 800b19e:	d002      	beq.n	800b1a6 <cleanup_stdio+0x1e>
 800b1a0:	4620      	mov	r0, r4
 800b1a2:	f001 fe35 	bl	800ce10 <_fflush_r>
 800b1a6:	68e1      	ldr	r1, [r4, #12]
 800b1a8:	4b06      	ldr	r3, [pc, #24]	; (800b1c4 <cleanup_stdio+0x3c>)
 800b1aa:	4299      	cmp	r1, r3
 800b1ac:	d004      	beq.n	800b1b8 <cleanup_stdio+0x30>
 800b1ae:	4620      	mov	r0, r4
 800b1b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1b4:	f001 be2c 	b.w	800ce10 <_fflush_r>
 800b1b8:	bd10      	pop	{r4, pc}
 800b1ba:	bf00      	nop
 800b1bc:	20002c00 	.word	0x20002c00
 800b1c0:	20002c68 	.word	0x20002c68
 800b1c4:	20002cd0 	.word	0x20002cd0

0800b1c8 <global_stdio_init.part.0>:
 800b1c8:	b510      	push	{r4, lr}
 800b1ca:	4b0b      	ldr	r3, [pc, #44]	; (800b1f8 <global_stdio_init.part.0+0x30>)
 800b1cc:	4c0b      	ldr	r4, [pc, #44]	; (800b1fc <global_stdio_init.part.0+0x34>)
 800b1ce:	4a0c      	ldr	r2, [pc, #48]	; (800b200 <global_stdio_init.part.0+0x38>)
 800b1d0:	601a      	str	r2, [r3, #0]
 800b1d2:	4620      	mov	r0, r4
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	2104      	movs	r1, #4
 800b1d8:	f7ff ffa6 	bl	800b128 <std>
 800b1dc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b1e0:	2201      	movs	r2, #1
 800b1e2:	2109      	movs	r1, #9
 800b1e4:	f7ff ffa0 	bl	800b128 <std>
 800b1e8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b1ec:	2202      	movs	r2, #2
 800b1ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1f2:	2112      	movs	r1, #18
 800b1f4:	f7ff bf98 	b.w	800b128 <std>
 800b1f8:	20002d38 	.word	0x20002d38
 800b1fc:	20002c00 	.word	0x20002c00
 800b200:	0800b171 	.word	0x0800b171

0800b204 <__sfp_lock_acquire>:
 800b204:	4801      	ldr	r0, [pc, #4]	; (800b20c <__sfp_lock_acquire+0x8>)
 800b206:	f000 b91f 	b.w	800b448 <__retarget_lock_acquire_recursive>
 800b20a:	bf00      	nop
 800b20c:	20002d41 	.word	0x20002d41

0800b210 <__sfp_lock_release>:
 800b210:	4801      	ldr	r0, [pc, #4]	; (800b218 <__sfp_lock_release+0x8>)
 800b212:	f000 b91a 	b.w	800b44a <__retarget_lock_release_recursive>
 800b216:	bf00      	nop
 800b218:	20002d41 	.word	0x20002d41

0800b21c <__sinit>:
 800b21c:	b510      	push	{r4, lr}
 800b21e:	4604      	mov	r4, r0
 800b220:	f7ff fff0 	bl	800b204 <__sfp_lock_acquire>
 800b224:	6a23      	ldr	r3, [r4, #32]
 800b226:	b11b      	cbz	r3, 800b230 <__sinit+0x14>
 800b228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b22c:	f7ff bff0 	b.w	800b210 <__sfp_lock_release>
 800b230:	4b04      	ldr	r3, [pc, #16]	; (800b244 <__sinit+0x28>)
 800b232:	6223      	str	r3, [r4, #32]
 800b234:	4b04      	ldr	r3, [pc, #16]	; (800b248 <__sinit+0x2c>)
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d1f5      	bne.n	800b228 <__sinit+0xc>
 800b23c:	f7ff ffc4 	bl	800b1c8 <global_stdio_init.part.0>
 800b240:	e7f2      	b.n	800b228 <__sinit+0xc>
 800b242:	bf00      	nop
 800b244:	0800b189 	.word	0x0800b189
 800b248:	20002d38 	.word	0x20002d38

0800b24c <_fwalk_sglue>:
 800b24c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b250:	4607      	mov	r7, r0
 800b252:	4688      	mov	r8, r1
 800b254:	4614      	mov	r4, r2
 800b256:	2600      	movs	r6, #0
 800b258:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b25c:	f1b9 0901 	subs.w	r9, r9, #1
 800b260:	d505      	bpl.n	800b26e <_fwalk_sglue+0x22>
 800b262:	6824      	ldr	r4, [r4, #0]
 800b264:	2c00      	cmp	r4, #0
 800b266:	d1f7      	bne.n	800b258 <_fwalk_sglue+0xc>
 800b268:	4630      	mov	r0, r6
 800b26a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b26e:	89ab      	ldrh	r3, [r5, #12]
 800b270:	2b01      	cmp	r3, #1
 800b272:	d907      	bls.n	800b284 <_fwalk_sglue+0x38>
 800b274:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b278:	3301      	adds	r3, #1
 800b27a:	d003      	beq.n	800b284 <_fwalk_sglue+0x38>
 800b27c:	4629      	mov	r1, r5
 800b27e:	4638      	mov	r0, r7
 800b280:	47c0      	blx	r8
 800b282:	4306      	orrs	r6, r0
 800b284:	3568      	adds	r5, #104	; 0x68
 800b286:	e7e9      	b.n	800b25c <_fwalk_sglue+0x10>

0800b288 <siprintf>:
 800b288:	b40e      	push	{r1, r2, r3}
 800b28a:	b500      	push	{lr}
 800b28c:	b09c      	sub	sp, #112	; 0x70
 800b28e:	ab1d      	add	r3, sp, #116	; 0x74
 800b290:	9002      	str	r0, [sp, #8]
 800b292:	9006      	str	r0, [sp, #24]
 800b294:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b298:	4809      	ldr	r0, [pc, #36]	; (800b2c0 <siprintf+0x38>)
 800b29a:	9107      	str	r1, [sp, #28]
 800b29c:	9104      	str	r1, [sp, #16]
 800b29e:	4909      	ldr	r1, [pc, #36]	; (800b2c4 <siprintf+0x3c>)
 800b2a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2a4:	9105      	str	r1, [sp, #20]
 800b2a6:	6800      	ldr	r0, [r0, #0]
 800b2a8:	9301      	str	r3, [sp, #4]
 800b2aa:	a902      	add	r1, sp, #8
 800b2ac:	f001 fc2c 	bl	800cb08 <_svfiprintf_r>
 800b2b0:	9b02      	ldr	r3, [sp, #8]
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	701a      	strb	r2, [r3, #0]
 800b2b6:	b01c      	add	sp, #112	; 0x70
 800b2b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b2bc:	b003      	add	sp, #12
 800b2be:	4770      	bx	lr
 800b2c0:	20000068 	.word	0x20000068
 800b2c4:	ffff0208 	.word	0xffff0208

0800b2c8 <__sread>:
 800b2c8:	b510      	push	{r4, lr}
 800b2ca:	460c      	mov	r4, r1
 800b2cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2d0:	f000 f86c 	bl	800b3ac <_read_r>
 800b2d4:	2800      	cmp	r0, #0
 800b2d6:	bfab      	itete	ge
 800b2d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b2da:	89a3      	ldrhlt	r3, [r4, #12]
 800b2dc:	181b      	addge	r3, r3, r0
 800b2de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b2e2:	bfac      	ite	ge
 800b2e4:	6563      	strge	r3, [r4, #84]	; 0x54
 800b2e6:	81a3      	strhlt	r3, [r4, #12]
 800b2e8:	bd10      	pop	{r4, pc}

0800b2ea <__swrite>:
 800b2ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2ee:	461f      	mov	r7, r3
 800b2f0:	898b      	ldrh	r3, [r1, #12]
 800b2f2:	05db      	lsls	r3, r3, #23
 800b2f4:	4605      	mov	r5, r0
 800b2f6:	460c      	mov	r4, r1
 800b2f8:	4616      	mov	r6, r2
 800b2fa:	d505      	bpl.n	800b308 <__swrite+0x1e>
 800b2fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b300:	2302      	movs	r3, #2
 800b302:	2200      	movs	r2, #0
 800b304:	f000 f840 	bl	800b388 <_lseek_r>
 800b308:	89a3      	ldrh	r3, [r4, #12]
 800b30a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b30e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b312:	81a3      	strh	r3, [r4, #12]
 800b314:	4632      	mov	r2, r6
 800b316:	463b      	mov	r3, r7
 800b318:	4628      	mov	r0, r5
 800b31a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b31e:	f000 b857 	b.w	800b3d0 <_write_r>

0800b322 <__sseek>:
 800b322:	b510      	push	{r4, lr}
 800b324:	460c      	mov	r4, r1
 800b326:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b32a:	f000 f82d 	bl	800b388 <_lseek_r>
 800b32e:	1c43      	adds	r3, r0, #1
 800b330:	89a3      	ldrh	r3, [r4, #12]
 800b332:	bf15      	itete	ne
 800b334:	6560      	strne	r0, [r4, #84]	; 0x54
 800b336:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b33a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b33e:	81a3      	strheq	r3, [r4, #12]
 800b340:	bf18      	it	ne
 800b342:	81a3      	strhne	r3, [r4, #12]
 800b344:	bd10      	pop	{r4, pc}

0800b346 <__sclose>:
 800b346:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b34a:	f000 b80d 	b.w	800b368 <_close_r>

0800b34e <memset>:
 800b34e:	4402      	add	r2, r0
 800b350:	4603      	mov	r3, r0
 800b352:	4293      	cmp	r3, r2
 800b354:	d100      	bne.n	800b358 <memset+0xa>
 800b356:	4770      	bx	lr
 800b358:	f803 1b01 	strb.w	r1, [r3], #1
 800b35c:	e7f9      	b.n	800b352 <memset+0x4>
	...

0800b360 <_localeconv_r>:
 800b360:	4800      	ldr	r0, [pc, #0]	; (800b364 <_localeconv_r+0x4>)
 800b362:	4770      	bx	lr
 800b364:	2000015c 	.word	0x2000015c

0800b368 <_close_r>:
 800b368:	b538      	push	{r3, r4, r5, lr}
 800b36a:	4d06      	ldr	r5, [pc, #24]	; (800b384 <_close_r+0x1c>)
 800b36c:	2300      	movs	r3, #0
 800b36e:	4604      	mov	r4, r0
 800b370:	4608      	mov	r0, r1
 800b372:	602b      	str	r3, [r5, #0]
 800b374:	f7f8 fd11 	bl	8003d9a <_close>
 800b378:	1c43      	adds	r3, r0, #1
 800b37a:	d102      	bne.n	800b382 <_close_r+0x1a>
 800b37c:	682b      	ldr	r3, [r5, #0]
 800b37e:	b103      	cbz	r3, 800b382 <_close_r+0x1a>
 800b380:	6023      	str	r3, [r4, #0]
 800b382:	bd38      	pop	{r3, r4, r5, pc}
 800b384:	20002d3c 	.word	0x20002d3c

0800b388 <_lseek_r>:
 800b388:	b538      	push	{r3, r4, r5, lr}
 800b38a:	4d07      	ldr	r5, [pc, #28]	; (800b3a8 <_lseek_r+0x20>)
 800b38c:	4604      	mov	r4, r0
 800b38e:	4608      	mov	r0, r1
 800b390:	4611      	mov	r1, r2
 800b392:	2200      	movs	r2, #0
 800b394:	602a      	str	r2, [r5, #0]
 800b396:	461a      	mov	r2, r3
 800b398:	f7f8 fd26 	bl	8003de8 <_lseek>
 800b39c:	1c43      	adds	r3, r0, #1
 800b39e:	d102      	bne.n	800b3a6 <_lseek_r+0x1e>
 800b3a0:	682b      	ldr	r3, [r5, #0]
 800b3a2:	b103      	cbz	r3, 800b3a6 <_lseek_r+0x1e>
 800b3a4:	6023      	str	r3, [r4, #0]
 800b3a6:	bd38      	pop	{r3, r4, r5, pc}
 800b3a8:	20002d3c 	.word	0x20002d3c

0800b3ac <_read_r>:
 800b3ac:	b538      	push	{r3, r4, r5, lr}
 800b3ae:	4d07      	ldr	r5, [pc, #28]	; (800b3cc <_read_r+0x20>)
 800b3b0:	4604      	mov	r4, r0
 800b3b2:	4608      	mov	r0, r1
 800b3b4:	4611      	mov	r1, r2
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	602a      	str	r2, [r5, #0]
 800b3ba:	461a      	mov	r2, r3
 800b3bc:	f7f8 fcb4 	bl	8003d28 <_read>
 800b3c0:	1c43      	adds	r3, r0, #1
 800b3c2:	d102      	bne.n	800b3ca <_read_r+0x1e>
 800b3c4:	682b      	ldr	r3, [r5, #0]
 800b3c6:	b103      	cbz	r3, 800b3ca <_read_r+0x1e>
 800b3c8:	6023      	str	r3, [r4, #0]
 800b3ca:	bd38      	pop	{r3, r4, r5, pc}
 800b3cc:	20002d3c 	.word	0x20002d3c

0800b3d0 <_write_r>:
 800b3d0:	b538      	push	{r3, r4, r5, lr}
 800b3d2:	4d07      	ldr	r5, [pc, #28]	; (800b3f0 <_write_r+0x20>)
 800b3d4:	4604      	mov	r4, r0
 800b3d6:	4608      	mov	r0, r1
 800b3d8:	4611      	mov	r1, r2
 800b3da:	2200      	movs	r2, #0
 800b3dc:	602a      	str	r2, [r5, #0]
 800b3de:	461a      	mov	r2, r3
 800b3e0:	f7f8 fcbf 	bl	8003d62 <_write>
 800b3e4:	1c43      	adds	r3, r0, #1
 800b3e6:	d102      	bne.n	800b3ee <_write_r+0x1e>
 800b3e8:	682b      	ldr	r3, [r5, #0]
 800b3ea:	b103      	cbz	r3, 800b3ee <_write_r+0x1e>
 800b3ec:	6023      	str	r3, [r4, #0]
 800b3ee:	bd38      	pop	{r3, r4, r5, pc}
 800b3f0:	20002d3c 	.word	0x20002d3c

0800b3f4 <__errno>:
 800b3f4:	4b01      	ldr	r3, [pc, #4]	; (800b3fc <__errno+0x8>)
 800b3f6:	6818      	ldr	r0, [r3, #0]
 800b3f8:	4770      	bx	lr
 800b3fa:	bf00      	nop
 800b3fc:	20000068 	.word	0x20000068

0800b400 <__libc_init_array>:
 800b400:	b570      	push	{r4, r5, r6, lr}
 800b402:	4d0d      	ldr	r5, [pc, #52]	; (800b438 <__libc_init_array+0x38>)
 800b404:	4c0d      	ldr	r4, [pc, #52]	; (800b43c <__libc_init_array+0x3c>)
 800b406:	1b64      	subs	r4, r4, r5
 800b408:	10a4      	asrs	r4, r4, #2
 800b40a:	2600      	movs	r6, #0
 800b40c:	42a6      	cmp	r6, r4
 800b40e:	d109      	bne.n	800b424 <__libc_init_array+0x24>
 800b410:	4d0b      	ldr	r5, [pc, #44]	; (800b440 <__libc_init_array+0x40>)
 800b412:	4c0c      	ldr	r4, [pc, #48]	; (800b444 <__libc_init_array+0x44>)
 800b414:	f002 ffcc 	bl	800e3b0 <_init>
 800b418:	1b64      	subs	r4, r4, r5
 800b41a:	10a4      	asrs	r4, r4, #2
 800b41c:	2600      	movs	r6, #0
 800b41e:	42a6      	cmp	r6, r4
 800b420:	d105      	bne.n	800b42e <__libc_init_array+0x2e>
 800b422:	bd70      	pop	{r4, r5, r6, pc}
 800b424:	f855 3b04 	ldr.w	r3, [r5], #4
 800b428:	4798      	blx	r3
 800b42a:	3601      	adds	r6, #1
 800b42c:	e7ee      	b.n	800b40c <__libc_init_array+0xc>
 800b42e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b432:	4798      	blx	r3
 800b434:	3601      	adds	r6, #1
 800b436:	e7f2      	b.n	800b41e <__libc_init_array+0x1e>
 800b438:	0800eb40 	.word	0x0800eb40
 800b43c:	0800eb40 	.word	0x0800eb40
 800b440:	0800eb40 	.word	0x0800eb40
 800b444:	0800eb44 	.word	0x0800eb44

0800b448 <__retarget_lock_acquire_recursive>:
 800b448:	4770      	bx	lr

0800b44a <__retarget_lock_release_recursive>:
 800b44a:	4770      	bx	lr

0800b44c <memcpy>:
 800b44c:	440a      	add	r2, r1
 800b44e:	4291      	cmp	r1, r2
 800b450:	f100 33ff 	add.w	r3, r0, #4294967295
 800b454:	d100      	bne.n	800b458 <memcpy+0xc>
 800b456:	4770      	bx	lr
 800b458:	b510      	push	{r4, lr}
 800b45a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b45e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b462:	4291      	cmp	r1, r2
 800b464:	d1f9      	bne.n	800b45a <memcpy+0xe>
 800b466:	bd10      	pop	{r4, pc}

0800b468 <quorem>:
 800b468:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b46c:	6903      	ldr	r3, [r0, #16]
 800b46e:	690c      	ldr	r4, [r1, #16]
 800b470:	42a3      	cmp	r3, r4
 800b472:	4607      	mov	r7, r0
 800b474:	db7e      	blt.n	800b574 <quorem+0x10c>
 800b476:	3c01      	subs	r4, #1
 800b478:	f101 0814 	add.w	r8, r1, #20
 800b47c:	f100 0514 	add.w	r5, r0, #20
 800b480:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b484:	9301      	str	r3, [sp, #4]
 800b486:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b48a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b48e:	3301      	adds	r3, #1
 800b490:	429a      	cmp	r2, r3
 800b492:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b496:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b49a:	fbb2 f6f3 	udiv	r6, r2, r3
 800b49e:	d331      	bcc.n	800b504 <quorem+0x9c>
 800b4a0:	f04f 0e00 	mov.w	lr, #0
 800b4a4:	4640      	mov	r0, r8
 800b4a6:	46ac      	mov	ip, r5
 800b4a8:	46f2      	mov	sl, lr
 800b4aa:	f850 2b04 	ldr.w	r2, [r0], #4
 800b4ae:	b293      	uxth	r3, r2
 800b4b0:	fb06 e303 	mla	r3, r6, r3, lr
 800b4b4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b4b8:	0c1a      	lsrs	r2, r3, #16
 800b4ba:	b29b      	uxth	r3, r3
 800b4bc:	ebaa 0303 	sub.w	r3, sl, r3
 800b4c0:	f8dc a000 	ldr.w	sl, [ip]
 800b4c4:	fa13 f38a 	uxtah	r3, r3, sl
 800b4c8:	fb06 220e 	mla	r2, r6, lr, r2
 800b4cc:	9300      	str	r3, [sp, #0]
 800b4ce:	9b00      	ldr	r3, [sp, #0]
 800b4d0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b4d4:	b292      	uxth	r2, r2
 800b4d6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b4da:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b4de:	f8bd 3000 	ldrh.w	r3, [sp]
 800b4e2:	4581      	cmp	r9, r0
 800b4e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b4e8:	f84c 3b04 	str.w	r3, [ip], #4
 800b4ec:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b4f0:	d2db      	bcs.n	800b4aa <quorem+0x42>
 800b4f2:	f855 300b 	ldr.w	r3, [r5, fp]
 800b4f6:	b92b      	cbnz	r3, 800b504 <quorem+0x9c>
 800b4f8:	9b01      	ldr	r3, [sp, #4]
 800b4fa:	3b04      	subs	r3, #4
 800b4fc:	429d      	cmp	r5, r3
 800b4fe:	461a      	mov	r2, r3
 800b500:	d32c      	bcc.n	800b55c <quorem+0xf4>
 800b502:	613c      	str	r4, [r7, #16]
 800b504:	4638      	mov	r0, r7
 800b506:	f001 f9a5 	bl	800c854 <__mcmp>
 800b50a:	2800      	cmp	r0, #0
 800b50c:	db22      	blt.n	800b554 <quorem+0xec>
 800b50e:	3601      	adds	r6, #1
 800b510:	4629      	mov	r1, r5
 800b512:	2000      	movs	r0, #0
 800b514:	f858 2b04 	ldr.w	r2, [r8], #4
 800b518:	f8d1 c000 	ldr.w	ip, [r1]
 800b51c:	b293      	uxth	r3, r2
 800b51e:	1ac3      	subs	r3, r0, r3
 800b520:	0c12      	lsrs	r2, r2, #16
 800b522:	fa13 f38c 	uxtah	r3, r3, ip
 800b526:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b52a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b52e:	b29b      	uxth	r3, r3
 800b530:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b534:	45c1      	cmp	r9, r8
 800b536:	f841 3b04 	str.w	r3, [r1], #4
 800b53a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b53e:	d2e9      	bcs.n	800b514 <quorem+0xac>
 800b540:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b544:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b548:	b922      	cbnz	r2, 800b554 <quorem+0xec>
 800b54a:	3b04      	subs	r3, #4
 800b54c:	429d      	cmp	r5, r3
 800b54e:	461a      	mov	r2, r3
 800b550:	d30a      	bcc.n	800b568 <quorem+0x100>
 800b552:	613c      	str	r4, [r7, #16]
 800b554:	4630      	mov	r0, r6
 800b556:	b003      	add	sp, #12
 800b558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b55c:	6812      	ldr	r2, [r2, #0]
 800b55e:	3b04      	subs	r3, #4
 800b560:	2a00      	cmp	r2, #0
 800b562:	d1ce      	bne.n	800b502 <quorem+0x9a>
 800b564:	3c01      	subs	r4, #1
 800b566:	e7c9      	b.n	800b4fc <quorem+0x94>
 800b568:	6812      	ldr	r2, [r2, #0]
 800b56a:	3b04      	subs	r3, #4
 800b56c:	2a00      	cmp	r2, #0
 800b56e:	d1f0      	bne.n	800b552 <quorem+0xea>
 800b570:	3c01      	subs	r4, #1
 800b572:	e7eb      	b.n	800b54c <quorem+0xe4>
 800b574:	2000      	movs	r0, #0
 800b576:	e7ee      	b.n	800b556 <quorem+0xee>

0800b578 <_dtoa_r>:
 800b578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b57c:	ed2d 8b04 	vpush	{d8-d9}
 800b580:	69c5      	ldr	r5, [r0, #28]
 800b582:	b093      	sub	sp, #76	; 0x4c
 800b584:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b588:	ec57 6b10 	vmov	r6, r7, d0
 800b58c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b590:	9107      	str	r1, [sp, #28]
 800b592:	4604      	mov	r4, r0
 800b594:	920a      	str	r2, [sp, #40]	; 0x28
 800b596:	930d      	str	r3, [sp, #52]	; 0x34
 800b598:	b975      	cbnz	r5, 800b5b8 <_dtoa_r+0x40>
 800b59a:	2010      	movs	r0, #16
 800b59c:	f000 fe2a 	bl	800c1f4 <malloc>
 800b5a0:	4602      	mov	r2, r0
 800b5a2:	61e0      	str	r0, [r4, #28]
 800b5a4:	b920      	cbnz	r0, 800b5b0 <_dtoa_r+0x38>
 800b5a6:	4bae      	ldr	r3, [pc, #696]	; (800b860 <_dtoa_r+0x2e8>)
 800b5a8:	21ef      	movs	r1, #239	; 0xef
 800b5aa:	48ae      	ldr	r0, [pc, #696]	; (800b864 <_dtoa_r+0x2ec>)
 800b5ac:	f001 fc82 	bl	800ceb4 <__assert_func>
 800b5b0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b5b4:	6005      	str	r5, [r0, #0]
 800b5b6:	60c5      	str	r5, [r0, #12]
 800b5b8:	69e3      	ldr	r3, [r4, #28]
 800b5ba:	6819      	ldr	r1, [r3, #0]
 800b5bc:	b151      	cbz	r1, 800b5d4 <_dtoa_r+0x5c>
 800b5be:	685a      	ldr	r2, [r3, #4]
 800b5c0:	604a      	str	r2, [r1, #4]
 800b5c2:	2301      	movs	r3, #1
 800b5c4:	4093      	lsls	r3, r2
 800b5c6:	608b      	str	r3, [r1, #8]
 800b5c8:	4620      	mov	r0, r4
 800b5ca:	f000 ff07 	bl	800c3dc <_Bfree>
 800b5ce:	69e3      	ldr	r3, [r4, #28]
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	601a      	str	r2, [r3, #0]
 800b5d4:	1e3b      	subs	r3, r7, #0
 800b5d6:	bfbb      	ittet	lt
 800b5d8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b5dc:	9303      	strlt	r3, [sp, #12]
 800b5de:	2300      	movge	r3, #0
 800b5e0:	2201      	movlt	r2, #1
 800b5e2:	bfac      	ite	ge
 800b5e4:	f8c8 3000 	strge.w	r3, [r8]
 800b5e8:	f8c8 2000 	strlt.w	r2, [r8]
 800b5ec:	4b9e      	ldr	r3, [pc, #632]	; (800b868 <_dtoa_r+0x2f0>)
 800b5ee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b5f2:	ea33 0308 	bics.w	r3, r3, r8
 800b5f6:	d11b      	bne.n	800b630 <_dtoa_r+0xb8>
 800b5f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b5fa:	f242 730f 	movw	r3, #9999	; 0x270f
 800b5fe:	6013      	str	r3, [r2, #0]
 800b600:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b604:	4333      	orrs	r3, r6
 800b606:	f000 8593 	beq.w	800c130 <_dtoa_r+0xbb8>
 800b60a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b60c:	b963      	cbnz	r3, 800b628 <_dtoa_r+0xb0>
 800b60e:	4b97      	ldr	r3, [pc, #604]	; (800b86c <_dtoa_r+0x2f4>)
 800b610:	e027      	b.n	800b662 <_dtoa_r+0xea>
 800b612:	4b97      	ldr	r3, [pc, #604]	; (800b870 <_dtoa_r+0x2f8>)
 800b614:	9300      	str	r3, [sp, #0]
 800b616:	3308      	adds	r3, #8
 800b618:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b61a:	6013      	str	r3, [r2, #0]
 800b61c:	9800      	ldr	r0, [sp, #0]
 800b61e:	b013      	add	sp, #76	; 0x4c
 800b620:	ecbd 8b04 	vpop	{d8-d9}
 800b624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b628:	4b90      	ldr	r3, [pc, #576]	; (800b86c <_dtoa_r+0x2f4>)
 800b62a:	9300      	str	r3, [sp, #0]
 800b62c:	3303      	adds	r3, #3
 800b62e:	e7f3      	b.n	800b618 <_dtoa_r+0xa0>
 800b630:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b634:	2200      	movs	r2, #0
 800b636:	ec51 0b17 	vmov	r0, r1, d7
 800b63a:	eeb0 8a47 	vmov.f32	s16, s14
 800b63e:	eef0 8a67 	vmov.f32	s17, s15
 800b642:	2300      	movs	r3, #0
 800b644:	f7f5 fa50 	bl	8000ae8 <__aeabi_dcmpeq>
 800b648:	4681      	mov	r9, r0
 800b64a:	b160      	cbz	r0, 800b666 <_dtoa_r+0xee>
 800b64c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b64e:	2301      	movs	r3, #1
 800b650:	6013      	str	r3, [r2, #0]
 800b652:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b654:	2b00      	cmp	r3, #0
 800b656:	f000 8568 	beq.w	800c12a <_dtoa_r+0xbb2>
 800b65a:	4b86      	ldr	r3, [pc, #536]	; (800b874 <_dtoa_r+0x2fc>)
 800b65c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b65e:	6013      	str	r3, [r2, #0]
 800b660:	3b01      	subs	r3, #1
 800b662:	9300      	str	r3, [sp, #0]
 800b664:	e7da      	b.n	800b61c <_dtoa_r+0xa4>
 800b666:	aa10      	add	r2, sp, #64	; 0x40
 800b668:	a911      	add	r1, sp, #68	; 0x44
 800b66a:	4620      	mov	r0, r4
 800b66c:	eeb0 0a48 	vmov.f32	s0, s16
 800b670:	eef0 0a68 	vmov.f32	s1, s17
 800b674:	f001 f994 	bl	800c9a0 <__d2b>
 800b678:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b67c:	4682      	mov	sl, r0
 800b67e:	2d00      	cmp	r5, #0
 800b680:	d07f      	beq.n	800b782 <_dtoa_r+0x20a>
 800b682:	ee18 3a90 	vmov	r3, s17
 800b686:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b68a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b68e:	ec51 0b18 	vmov	r0, r1, d8
 800b692:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b696:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b69a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800b69e:	4619      	mov	r1, r3
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	4b75      	ldr	r3, [pc, #468]	; (800b878 <_dtoa_r+0x300>)
 800b6a4:	f7f4 fe00 	bl	80002a8 <__aeabi_dsub>
 800b6a8:	a367      	add	r3, pc, #412	; (adr r3, 800b848 <_dtoa_r+0x2d0>)
 800b6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ae:	f7f4 ffb3 	bl	8000618 <__aeabi_dmul>
 800b6b2:	a367      	add	r3, pc, #412	; (adr r3, 800b850 <_dtoa_r+0x2d8>)
 800b6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b8:	f7f4 fdf8 	bl	80002ac <__adddf3>
 800b6bc:	4606      	mov	r6, r0
 800b6be:	4628      	mov	r0, r5
 800b6c0:	460f      	mov	r7, r1
 800b6c2:	f7f4 ff3f 	bl	8000544 <__aeabi_i2d>
 800b6c6:	a364      	add	r3, pc, #400	; (adr r3, 800b858 <_dtoa_r+0x2e0>)
 800b6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6cc:	f7f4 ffa4 	bl	8000618 <__aeabi_dmul>
 800b6d0:	4602      	mov	r2, r0
 800b6d2:	460b      	mov	r3, r1
 800b6d4:	4630      	mov	r0, r6
 800b6d6:	4639      	mov	r1, r7
 800b6d8:	f7f4 fde8 	bl	80002ac <__adddf3>
 800b6dc:	4606      	mov	r6, r0
 800b6de:	460f      	mov	r7, r1
 800b6e0:	f7f5 fa4a 	bl	8000b78 <__aeabi_d2iz>
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	4683      	mov	fp, r0
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	4630      	mov	r0, r6
 800b6ec:	4639      	mov	r1, r7
 800b6ee:	f7f5 fa05 	bl	8000afc <__aeabi_dcmplt>
 800b6f2:	b148      	cbz	r0, 800b708 <_dtoa_r+0x190>
 800b6f4:	4658      	mov	r0, fp
 800b6f6:	f7f4 ff25 	bl	8000544 <__aeabi_i2d>
 800b6fa:	4632      	mov	r2, r6
 800b6fc:	463b      	mov	r3, r7
 800b6fe:	f7f5 f9f3 	bl	8000ae8 <__aeabi_dcmpeq>
 800b702:	b908      	cbnz	r0, 800b708 <_dtoa_r+0x190>
 800b704:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b708:	f1bb 0f16 	cmp.w	fp, #22
 800b70c:	d857      	bhi.n	800b7be <_dtoa_r+0x246>
 800b70e:	4b5b      	ldr	r3, [pc, #364]	; (800b87c <_dtoa_r+0x304>)
 800b710:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b714:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b718:	ec51 0b18 	vmov	r0, r1, d8
 800b71c:	f7f5 f9ee 	bl	8000afc <__aeabi_dcmplt>
 800b720:	2800      	cmp	r0, #0
 800b722:	d04e      	beq.n	800b7c2 <_dtoa_r+0x24a>
 800b724:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b728:	2300      	movs	r3, #0
 800b72a:	930c      	str	r3, [sp, #48]	; 0x30
 800b72c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b72e:	1b5b      	subs	r3, r3, r5
 800b730:	1e5a      	subs	r2, r3, #1
 800b732:	bf45      	ittet	mi
 800b734:	f1c3 0301 	rsbmi	r3, r3, #1
 800b738:	9305      	strmi	r3, [sp, #20]
 800b73a:	2300      	movpl	r3, #0
 800b73c:	2300      	movmi	r3, #0
 800b73e:	9206      	str	r2, [sp, #24]
 800b740:	bf54      	ite	pl
 800b742:	9305      	strpl	r3, [sp, #20]
 800b744:	9306      	strmi	r3, [sp, #24]
 800b746:	f1bb 0f00 	cmp.w	fp, #0
 800b74a:	db3c      	blt.n	800b7c6 <_dtoa_r+0x24e>
 800b74c:	9b06      	ldr	r3, [sp, #24]
 800b74e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800b752:	445b      	add	r3, fp
 800b754:	9306      	str	r3, [sp, #24]
 800b756:	2300      	movs	r3, #0
 800b758:	9308      	str	r3, [sp, #32]
 800b75a:	9b07      	ldr	r3, [sp, #28]
 800b75c:	2b09      	cmp	r3, #9
 800b75e:	d868      	bhi.n	800b832 <_dtoa_r+0x2ba>
 800b760:	2b05      	cmp	r3, #5
 800b762:	bfc4      	itt	gt
 800b764:	3b04      	subgt	r3, #4
 800b766:	9307      	strgt	r3, [sp, #28]
 800b768:	9b07      	ldr	r3, [sp, #28]
 800b76a:	f1a3 0302 	sub.w	r3, r3, #2
 800b76e:	bfcc      	ite	gt
 800b770:	2500      	movgt	r5, #0
 800b772:	2501      	movle	r5, #1
 800b774:	2b03      	cmp	r3, #3
 800b776:	f200 8085 	bhi.w	800b884 <_dtoa_r+0x30c>
 800b77a:	e8df f003 	tbb	[pc, r3]
 800b77e:	3b2e      	.short	0x3b2e
 800b780:	5839      	.short	0x5839
 800b782:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b786:	441d      	add	r5, r3
 800b788:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b78c:	2b20      	cmp	r3, #32
 800b78e:	bfc1      	itttt	gt
 800b790:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b794:	fa08 f803 	lslgt.w	r8, r8, r3
 800b798:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800b79c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800b7a0:	bfd6      	itet	le
 800b7a2:	f1c3 0320 	rsble	r3, r3, #32
 800b7a6:	ea48 0003 	orrgt.w	r0, r8, r3
 800b7aa:	fa06 f003 	lslle.w	r0, r6, r3
 800b7ae:	f7f4 feb9 	bl	8000524 <__aeabi_ui2d>
 800b7b2:	2201      	movs	r2, #1
 800b7b4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800b7b8:	3d01      	subs	r5, #1
 800b7ba:	920e      	str	r2, [sp, #56]	; 0x38
 800b7bc:	e76f      	b.n	800b69e <_dtoa_r+0x126>
 800b7be:	2301      	movs	r3, #1
 800b7c0:	e7b3      	b.n	800b72a <_dtoa_r+0x1b2>
 800b7c2:	900c      	str	r0, [sp, #48]	; 0x30
 800b7c4:	e7b2      	b.n	800b72c <_dtoa_r+0x1b4>
 800b7c6:	9b05      	ldr	r3, [sp, #20]
 800b7c8:	eba3 030b 	sub.w	r3, r3, fp
 800b7cc:	9305      	str	r3, [sp, #20]
 800b7ce:	f1cb 0300 	rsb	r3, fp, #0
 800b7d2:	9308      	str	r3, [sp, #32]
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	930b      	str	r3, [sp, #44]	; 0x2c
 800b7d8:	e7bf      	b.n	800b75a <_dtoa_r+0x1e2>
 800b7da:	2300      	movs	r3, #0
 800b7dc:	9309      	str	r3, [sp, #36]	; 0x24
 800b7de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	dc52      	bgt.n	800b88a <_dtoa_r+0x312>
 800b7e4:	2301      	movs	r3, #1
 800b7e6:	9301      	str	r3, [sp, #4]
 800b7e8:	9304      	str	r3, [sp, #16]
 800b7ea:	461a      	mov	r2, r3
 800b7ec:	920a      	str	r2, [sp, #40]	; 0x28
 800b7ee:	e00b      	b.n	800b808 <_dtoa_r+0x290>
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	e7f3      	b.n	800b7dc <_dtoa_r+0x264>
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	9309      	str	r3, [sp, #36]	; 0x24
 800b7f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7fa:	445b      	add	r3, fp
 800b7fc:	9301      	str	r3, [sp, #4]
 800b7fe:	3301      	adds	r3, #1
 800b800:	2b01      	cmp	r3, #1
 800b802:	9304      	str	r3, [sp, #16]
 800b804:	bfb8      	it	lt
 800b806:	2301      	movlt	r3, #1
 800b808:	69e0      	ldr	r0, [r4, #28]
 800b80a:	2100      	movs	r1, #0
 800b80c:	2204      	movs	r2, #4
 800b80e:	f102 0614 	add.w	r6, r2, #20
 800b812:	429e      	cmp	r6, r3
 800b814:	d93d      	bls.n	800b892 <_dtoa_r+0x31a>
 800b816:	6041      	str	r1, [r0, #4]
 800b818:	4620      	mov	r0, r4
 800b81a:	f000 fd9f 	bl	800c35c <_Balloc>
 800b81e:	9000      	str	r0, [sp, #0]
 800b820:	2800      	cmp	r0, #0
 800b822:	d139      	bne.n	800b898 <_dtoa_r+0x320>
 800b824:	4b16      	ldr	r3, [pc, #88]	; (800b880 <_dtoa_r+0x308>)
 800b826:	4602      	mov	r2, r0
 800b828:	f240 11af 	movw	r1, #431	; 0x1af
 800b82c:	e6bd      	b.n	800b5aa <_dtoa_r+0x32>
 800b82e:	2301      	movs	r3, #1
 800b830:	e7e1      	b.n	800b7f6 <_dtoa_r+0x27e>
 800b832:	2501      	movs	r5, #1
 800b834:	2300      	movs	r3, #0
 800b836:	9307      	str	r3, [sp, #28]
 800b838:	9509      	str	r5, [sp, #36]	; 0x24
 800b83a:	f04f 33ff 	mov.w	r3, #4294967295
 800b83e:	9301      	str	r3, [sp, #4]
 800b840:	9304      	str	r3, [sp, #16]
 800b842:	2200      	movs	r2, #0
 800b844:	2312      	movs	r3, #18
 800b846:	e7d1      	b.n	800b7ec <_dtoa_r+0x274>
 800b848:	636f4361 	.word	0x636f4361
 800b84c:	3fd287a7 	.word	0x3fd287a7
 800b850:	8b60c8b3 	.word	0x8b60c8b3
 800b854:	3fc68a28 	.word	0x3fc68a28
 800b858:	509f79fb 	.word	0x509f79fb
 800b85c:	3fd34413 	.word	0x3fd34413
 800b860:	0800e7d9 	.word	0x0800e7d9
 800b864:	0800e7f0 	.word	0x0800e7f0
 800b868:	7ff00000 	.word	0x7ff00000
 800b86c:	0800e7d5 	.word	0x0800e7d5
 800b870:	0800e7cc 	.word	0x0800e7cc
 800b874:	0800e7a9 	.word	0x0800e7a9
 800b878:	3ff80000 	.word	0x3ff80000
 800b87c:	0800e8e0 	.word	0x0800e8e0
 800b880:	0800e848 	.word	0x0800e848
 800b884:	2301      	movs	r3, #1
 800b886:	9309      	str	r3, [sp, #36]	; 0x24
 800b888:	e7d7      	b.n	800b83a <_dtoa_r+0x2c2>
 800b88a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b88c:	9301      	str	r3, [sp, #4]
 800b88e:	9304      	str	r3, [sp, #16]
 800b890:	e7ba      	b.n	800b808 <_dtoa_r+0x290>
 800b892:	3101      	adds	r1, #1
 800b894:	0052      	lsls	r2, r2, #1
 800b896:	e7ba      	b.n	800b80e <_dtoa_r+0x296>
 800b898:	69e3      	ldr	r3, [r4, #28]
 800b89a:	9a00      	ldr	r2, [sp, #0]
 800b89c:	601a      	str	r2, [r3, #0]
 800b89e:	9b04      	ldr	r3, [sp, #16]
 800b8a0:	2b0e      	cmp	r3, #14
 800b8a2:	f200 80a8 	bhi.w	800b9f6 <_dtoa_r+0x47e>
 800b8a6:	2d00      	cmp	r5, #0
 800b8a8:	f000 80a5 	beq.w	800b9f6 <_dtoa_r+0x47e>
 800b8ac:	f1bb 0f00 	cmp.w	fp, #0
 800b8b0:	dd38      	ble.n	800b924 <_dtoa_r+0x3ac>
 800b8b2:	4bc0      	ldr	r3, [pc, #768]	; (800bbb4 <_dtoa_r+0x63c>)
 800b8b4:	f00b 020f 	and.w	r2, fp, #15
 800b8b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b8bc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b8c0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b8c4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800b8c8:	d019      	beq.n	800b8fe <_dtoa_r+0x386>
 800b8ca:	4bbb      	ldr	r3, [pc, #748]	; (800bbb8 <_dtoa_r+0x640>)
 800b8cc:	ec51 0b18 	vmov	r0, r1, d8
 800b8d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b8d4:	f7f4 ffca 	bl	800086c <__aeabi_ddiv>
 800b8d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b8dc:	f008 080f 	and.w	r8, r8, #15
 800b8e0:	2503      	movs	r5, #3
 800b8e2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800bbb8 <_dtoa_r+0x640>
 800b8e6:	f1b8 0f00 	cmp.w	r8, #0
 800b8ea:	d10a      	bne.n	800b902 <_dtoa_r+0x38a>
 800b8ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8f0:	4632      	mov	r2, r6
 800b8f2:	463b      	mov	r3, r7
 800b8f4:	f7f4 ffba 	bl	800086c <__aeabi_ddiv>
 800b8f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b8fc:	e02b      	b.n	800b956 <_dtoa_r+0x3de>
 800b8fe:	2502      	movs	r5, #2
 800b900:	e7ef      	b.n	800b8e2 <_dtoa_r+0x36a>
 800b902:	f018 0f01 	tst.w	r8, #1
 800b906:	d008      	beq.n	800b91a <_dtoa_r+0x3a2>
 800b908:	4630      	mov	r0, r6
 800b90a:	4639      	mov	r1, r7
 800b90c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b910:	f7f4 fe82 	bl	8000618 <__aeabi_dmul>
 800b914:	3501      	adds	r5, #1
 800b916:	4606      	mov	r6, r0
 800b918:	460f      	mov	r7, r1
 800b91a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b91e:	f109 0908 	add.w	r9, r9, #8
 800b922:	e7e0      	b.n	800b8e6 <_dtoa_r+0x36e>
 800b924:	f000 809f 	beq.w	800ba66 <_dtoa_r+0x4ee>
 800b928:	f1cb 0600 	rsb	r6, fp, #0
 800b92c:	4ba1      	ldr	r3, [pc, #644]	; (800bbb4 <_dtoa_r+0x63c>)
 800b92e:	4fa2      	ldr	r7, [pc, #648]	; (800bbb8 <_dtoa_r+0x640>)
 800b930:	f006 020f 	and.w	r2, r6, #15
 800b934:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b93c:	ec51 0b18 	vmov	r0, r1, d8
 800b940:	f7f4 fe6a 	bl	8000618 <__aeabi_dmul>
 800b944:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b948:	1136      	asrs	r6, r6, #4
 800b94a:	2300      	movs	r3, #0
 800b94c:	2502      	movs	r5, #2
 800b94e:	2e00      	cmp	r6, #0
 800b950:	d17e      	bne.n	800ba50 <_dtoa_r+0x4d8>
 800b952:	2b00      	cmp	r3, #0
 800b954:	d1d0      	bne.n	800b8f8 <_dtoa_r+0x380>
 800b956:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b958:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	f000 8084 	beq.w	800ba6a <_dtoa_r+0x4f2>
 800b962:	4b96      	ldr	r3, [pc, #600]	; (800bbbc <_dtoa_r+0x644>)
 800b964:	2200      	movs	r2, #0
 800b966:	4640      	mov	r0, r8
 800b968:	4649      	mov	r1, r9
 800b96a:	f7f5 f8c7 	bl	8000afc <__aeabi_dcmplt>
 800b96e:	2800      	cmp	r0, #0
 800b970:	d07b      	beq.n	800ba6a <_dtoa_r+0x4f2>
 800b972:	9b04      	ldr	r3, [sp, #16]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d078      	beq.n	800ba6a <_dtoa_r+0x4f2>
 800b978:	9b01      	ldr	r3, [sp, #4]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	dd39      	ble.n	800b9f2 <_dtoa_r+0x47a>
 800b97e:	4b90      	ldr	r3, [pc, #576]	; (800bbc0 <_dtoa_r+0x648>)
 800b980:	2200      	movs	r2, #0
 800b982:	4640      	mov	r0, r8
 800b984:	4649      	mov	r1, r9
 800b986:	f7f4 fe47 	bl	8000618 <__aeabi_dmul>
 800b98a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b98e:	9e01      	ldr	r6, [sp, #4]
 800b990:	f10b 37ff 	add.w	r7, fp, #4294967295
 800b994:	3501      	adds	r5, #1
 800b996:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b99a:	4628      	mov	r0, r5
 800b99c:	f7f4 fdd2 	bl	8000544 <__aeabi_i2d>
 800b9a0:	4642      	mov	r2, r8
 800b9a2:	464b      	mov	r3, r9
 800b9a4:	f7f4 fe38 	bl	8000618 <__aeabi_dmul>
 800b9a8:	4b86      	ldr	r3, [pc, #536]	; (800bbc4 <_dtoa_r+0x64c>)
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	f7f4 fc7e 	bl	80002ac <__adddf3>
 800b9b0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b9b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b9b8:	9303      	str	r3, [sp, #12]
 800b9ba:	2e00      	cmp	r6, #0
 800b9bc:	d158      	bne.n	800ba70 <_dtoa_r+0x4f8>
 800b9be:	4b82      	ldr	r3, [pc, #520]	; (800bbc8 <_dtoa_r+0x650>)
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	4640      	mov	r0, r8
 800b9c4:	4649      	mov	r1, r9
 800b9c6:	f7f4 fc6f 	bl	80002a8 <__aeabi_dsub>
 800b9ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b9ce:	4680      	mov	r8, r0
 800b9d0:	4689      	mov	r9, r1
 800b9d2:	f7f5 f8b1 	bl	8000b38 <__aeabi_dcmpgt>
 800b9d6:	2800      	cmp	r0, #0
 800b9d8:	f040 8296 	bne.w	800bf08 <_dtoa_r+0x990>
 800b9dc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b9e0:	4640      	mov	r0, r8
 800b9e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b9e6:	4649      	mov	r1, r9
 800b9e8:	f7f5 f888 	bl	8000afc <__aeabi_dcmplt>
 800b9ec:	2800      	cmp	r0, #0
 800b9ee:	f040 8289 	bne.w	800bf04 <_dtoa_r+0x98c>
 800b9f2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b9f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	f2c0 814e 	blt.w	800bc9a <_dtoa_r+0x722>
 800b9fe:	f1bb 0f0e 	cmp.w	fp, #14
 800ba02:	f300 814a 	bgt.w	800bc9a <_dtoa_r+0x722>
 800ba06:	4b6b      	ldr	r3, [pc, #428]	; (800bbb4 <_dtoa_r+0x63c>)
 800ba08:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ba0c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ba10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	f280 80dc 	bge.w	800bbd0 <_dtoa_r+0x658>
 800ba18:	9b04      	ldr	r3, [sp, #16]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	f300 80d8 	bgt.w	800bbd0 <_dtoa_r+0x658>
 800ba20:	f040 826f 	bne.w	800bf02 <_dtoa_r+0x98a>
 800ba24:	4b68      	ldr	r3, [pc, #416]	; (800bbc8 <_dtoa_r+0x650>)
 800ba26:	2200      	movs	r2, #0
 800ba28:	4640      	mov	r0, r8
 800ba2a:	4649      	mov	r1, r9
 800ba2c:	f7f4 fdf4 	bl	8000618 <__aeabi_dmul>
 800ba30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ba34:	f7f5 f876 	bl	8000b24 <__aeabi_dcmpge>
 800ba38:	9e04      	ldr	r6, [sp, #16]
 800ba3a:	4637      	mov	r7, r6
 800ba3c:	2800      	cmp	r0, #0
 800ba3e:	f040 8245 	bne.w	800becc <_dtoa_r+0x954>
 800ba42:	9d00      	ldr	r5, [sp, #0]
 800ba44:	2331      	movs	r3, #49	; 0x31
 800ba46:	f805 3b01 	strb.w	r3, [r5], #1
 800ba4a:	f10b 0b01 	add.w	fp, fp, #1
 800ba4e:	e241      	b.n	800bed4 <_dtoa_r+0x95c>
 800ba50:	07f2      	lsls	r2, r6, #31
 800ba52:	d505      	bpl.n	800ba60 <_dtoa_r+0x4e8>
 800ba54:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba58:	f7f4 fdde 	bl	8000618 <__aeabi_dmul>
 800ba5c:	3501      	adds	r5, #1
 800ba5e:	2301      	movs	r3, #1
 800ba60:	1076      	asrs	r6, r6, #1
 800ba62:	3708      	adds	r7, #8
 800ba64:	e773      	b.n	800b94e <_dtoa_r+0x3d6>
 800ba66:	2502      	movs	r5, #2
 800ba68:	e775      	b.n	800b956 <_dtoa_r+0x3de>
 800ba6a:	9e04      	ldr	r6, [sp, #16]
 800ba6c:	465f      	mov	r7, fp
 800ba6e:	e792      	b.n	800b996 <_dtoa_r+0x41e>
 800ba70:	9900      	ldr	r1, [sp, #0]
 800ba72:	4b50      	ldr	r3, [pc, #320]	; (800bbb4 <_dtoa_r+0x63c>)
 800ba74:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ba78:	4431      	add	r1, r6
 800ba7a:	9102      	str	r1, [sp, #8]
 800ba7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ba7e:	eeb0 9a47 	vmov.f32	s18, s14
 800ba82:	eef0 9a67 	vmov.f32	s19, s15
 800ba86:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ba8a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ba8e:	2900      	cmp	r1, #0
 800ba90:	d044      	beq.n	800bb1c <_dtoa_r+0x5a4>
 800ba92:	494e      	ldr	r1, [pc, #312]	; (800bbcc <_dtoa_r+0x654>)
 800ba94:	2000      	movs	r0, #0
 800ba96:	f7f4 fee9 	bl	800086c <__aeabi_ddiv>
 800ba9a:	ec53 2b19 	vmov	r2, r3, d9
 800ba9e:	f7f4 fc03 	bl	80002a8 <__aeabi_dsub>
 800baa2:	9d00      	ldr	r5, [sp, #0]
 800baa4:	ec41 0b19 	vmov	d9, r0, r1
 800baa8:	4649      	mov	r1, r9
 800baaa:	4640      	mov	r0, r8
 800baac:	f7f5 f864 	bl	8000b78 <__aeabi_d2iz>
 800bab0:	4606      	mov	r6, r0
 800bab2:	f7f4 fd47 	bl	8000544 <__aeabi_i2d>
 800bab6:	4602      	mov	r2, r0
 800bab8:	460b      	mov	r3, r1
 800baba:	4640      	mov	r0, r8
 800babc:	4649      	mov	r1, r9
 800babe:	f7f4 fbf3 	bl	80002a8 <__aeabi_dsub>
 800bac2:	3630      	adds	r6, #48	; 0x30
 800bac4:	f805 6b01 	strb.w	r6, [r5], #1
 800bac8:	ec53 2b19 	vmov	r2, r3, d9
 800bacc:	4680      	mov	r8, r0
 800bace:	4689      	mov	r9, r1
 800bad0:	f7f5 f814 	bl	8000afc <__aeabi_dcmplt>
 800bad4:	2800      	cmp	r0, #0
 800bad6:	d164      	bne.n	800bba2 <_dtoa_r+0x62a>
 800bad8:	4642      	mov	r2, r8
 800bada:	464b      	mov	r3, r9
 800badc:	4937      	ldr	r1, [pc, #220]	; (800bbbc <_dtoa_r+0x644>)
 800bade:	2000      	movs	r0, #0
 800bae0:	f7f4 fbe2 	bl	80002a8 <__aeabi_dsub>
 800bae4:	ec53 2b19 	vmov	r2, r3, d9
 800bae8:	f7f5 f808 	bl	8000afc <__aeabi_dcmplt>
 800baec:	2800      	cmp	r0, #0
 800baee:	f040 80b6 	bne.w	800bc5e <_dtoa_r+0x6e6>
 800baf2:	9b02      	ldr	r3, [sp, #8]
 800baf4:	429d      	cmp	r5, r3
 800baf6:	f43f af7c 	beq.w	800b9f2 <_dtoa_r+0x47a>
 800bafa:	4b31      	ldr	r3, [pc, #196]	; (800bbc0 <_dtoa_r+0x648>)
 800bafc:	ec51 0b19 	vmov	r0, r1, d9
 800bb00:	2200      	movs	r2, #0
 800bb02:	f7f4 fd89 	bl	8000618 <__aeabi_dmul>
 800bb06:	4b2e      	ldr	r3, [pc, #184]	; (800bbc0 <_dtoa_r+0x648>)
 800bb08:	ec41 0b19 	vmov	d9, r0, r1
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	4640      	mov	r0, r8
 800bb10:	4649      	mov	r1, r9
 800bb12:	f7f4 fd81 	bl	8000618 <__aeabi_dmul>
 800bb16:	4680      	mov	r8, r0
 800bb18:	4689      	mov	r9, r1
 800bb1a:	e7c5      	b.n	800baa8 <_dtoa_r+0x530>
 800bb1c:	ec51 0b17 	vmov	r0, r1, d7
 800bb20:	f7f4 fd7a 	bl	8000618 <__aeabi_dmul>
 800bb24:	9b02      	ldr	r3, [sp, #8]
 800bb26:	9d00      	ldr	r5, [sp, #0]
 800bb28:	930f      	str	r3, [sp, #60]	; 0x3c
 800bb2a:	ec41 0b19 	vmov	d9, r0, r1
 800bb2e:	4649      	mov	r1, r9
 800bb30:	4640      	mov	r0, r8
 800bb32:	f7f5 f821 	bl	8000b78 <__aeabi_d2iz>
 800bb36:	4606      	mov	r6, r0
 800bb38:	f7f4 fd04 	bl	8000544 <__aeabi_i2d>
 800bb3c:	3630      	adds	r6, #48	; 0x30
 800bb3e:	4602      	mov	r2, r0
 800bb40:	460b      	mov	r3, r1
 800bb42:	4640      	mov	r0, r8
 800bb44:	4649      	mov	r1, r9
 800bb46:	f7f4 fbaf 	bl	80002a8 <__aeabi_dsub>
 800bb4a:	f805 6b01 	strb.w	r6, [r5], #1
 800bb4e:	9b02      	ldr	r3, [sp, #8]
 800bb50:	429d      	cmp	r5, r3
 800bb52:	4680      	mov	r8, r0
 800bb54:	4689      	mov	r9, r1
 800bb56:	f04f 0200 	mov.w	r2, #0
 800bb5a:	d124      	bne.n	800bba6 <_dtoa_r+0x62e>
 800bb5c:	4b1b      	ldr	r3, [pc, #108]	; (800bbcc <_dtoa_r+0x654>)
 800bb5e:	ec51 0b19 	vmov	r0, r1, d9
 800bb62:	f7f4 fba3 	bl	80002ac <__adddf3>
 800bb66:	4602      	mov	r2, r0
 800bb68:	460b      	mov	r3, r1
 800bb6a:	4640      	mov	r0, r8
 800bb6c:	4649      	mov	r1, r9
 800bb6e:	f7f4 ffe3 	bl	8000b38 <__aeabi_dcmpgt>
 800bb72:	2800      	cmp	r0, #0
 800bb74:	d173      	bne.n	800bc5e <_dtoa_r+0x6e6>
 800bb76:	ec53 2b19 	vmov	r2, r3, d9
 800bb7a:	4914      	ldr	r1, [pc, #80]	; (800bbcc <_dtoa_r+0x654>)
 800bb7c:	2000      	movs	r0, #0
 800bb7e:	f7f4 fb93 	bl	80002a8 <__aeabi_dsub>
 800bb82:	4602      	mov	r2, r0
 800bb84:	460b      	mov	r3, r1
 800bb86:	4640      	mov	r0, r8
 800bb88:	4649      	mov	r1, r9
 800bb8a:	f7f4 ffb7 	bl	8000afc <__aeabi_dcmplt>
 800bb8e:	2800      	cmp	r0, #0
 800bb90:	f43f af2f 	beq.w	800b9f2 <_dtoa_r+0x47a>
 800bb94:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bb96:	1e6b      	subs	r3, r5, #1
 800bb98:	930f      	str	r3, [sp, #60]	; 0x3c
 800bb9a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bb9e:	2b30      	cmp	r3, #48	; 0x30
 800bba0:	d0f8      	beq.n	800bb94 <_dtoa_r+0x61c>
 800bba2:	46bb      	mov	fp, r7
 800bba4:	e04a      	b.n	800bc3c <_dtoa_r+0x6c4>
 800bba6:	4b06      	ldr	r3, [pc, #24]	; (800bbc0 <_dtoa_r+0x648>)
 800bba8:	f7f4 fd36 	bl	8000618 <__aeabi_dmul>
 800bbac:	4680      	mov	r8, r0
 800bbae:	4689      	mov	r9, r1
 800bbb0:	e7bd      	b.n	800bb2e <_dtoa_r+0x5b6>
 800bbb2:	bf00      	nop
 800bbb4:	0800e8e0 	.word	0x0800e8e0
 800bbb8:	0800e8b8 	.word	0x0800e8b8
 800bbbc:	3ff00000 	.word	0x3ff00000
 800bbc0:	40240000 	.word	0x40240000
 800bbc4:	401c0000 	.word	0x401c0000
 800bbc8:	40140000 	.word	0x40140000
 800bbcc:	3fe00000 	.word	0x3fe00000
 800bbd0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bbd4:	9d00      	ldr	r5, [sp, #0]
 800bbd6:	4642      	mov	r2, r8
 800bbd8:	464b      	mov	r3, r9
 800bbda:	4630      	mov	r0, r6
 800bbdc:	4639      	mov	r1, r7
 800bbde:	f7f4 fe45 	bl	800086c <__aeabi_ddiv>
 800bbe2:	f7f4 ffc9 	bl	8000b78 <__aeabi_d2iz>
 800bbe6:	9001      	str	r0, [sp, #4]
 800bbe8:	f7f4 fcac 	bl	8000544 <__aeabi_i2d>
 800bbec:	4642      	mov	r2, r8
 800bbee:	464b      	mov	r3, r9
 800bbf0:	f7f4 fd12 	bl	8000618 <__aeabi_dmul>
 800bbf4:	4602      	mov	r2, r0
 800bbf6:	460b      	mov	r3, r1
 800bbf8:	4630      	mov	r0, r6
 800bbfa:	4639      	mov	r1, r7
 800bbfc:	f7f4 fb54 	bl	80002a8 <__aeabi_dsub>
 800bc00:	9e01      	ldr	r6, [sp, #4]
 800bc02:	9f04      	ldr	r7, [sp, #16]
 800bc04:	3630      	adds	r6, #48	; 0x30
 800bc06:	f805 6b01 	strb.w	r6, [r5], #1
 800bc0a:	9e00      	ldr	r6, [sp, #0]
 800bc0c:	1bae      	subs	r6, r5, r6
 800bc0e:	42b7      	cmp	r7, r6
 800bc10:	4602      	mov	r2, r0
 800bc12:	460b      	mov	r3, r1
 800bc14:	d134      	bne.n	800bc80 <_dtoa_r+0x708>
 800bc16:	f7f4 fb49 	bl	80002ac <__adddf3>
 800bc1a:	4642      	mov	r2, r8
 800bc1c:	464b      	mov	r3, r9
 800bc1e:	4606      	mov	r6, r0
 800bc20:	460f      	mov	r7, r1
 800bc22:	f7f4 ff89 	bl	8000b38 <__aeabi_dcmpgt>
 800bc26:	b9c8      	cbnz	r0, 800bc5c <_dtoa_r+0x6e4>
 800bc28:	4642      	mov	r2, r8
 800bc2a:	464b      	mov	r3, r9
 800bc2c:	4630      	mov	r0, r6
 800bc2e:	4639      	mov	r1, r7
 800bc30:	f7f4 ff5a 	bl	8000ae8 <__aeabi_dcmpeq>
 800bc34:	b110      	cbz	r0, 800bc3c <_dtoa_r+0x6c4>
 800bc36:	9b01      	ldr	r3, [sp, #4]
 800bc38:	07db      	lsls	r3, r3, #31
 800bc3a:	d40f      	bmi.n	800bc5c <_dtoa_r+0x6e4>
 800bc3c:	4651      	mov	r1, sl
 800bc3e:	4620      	mov	r0, r4
 800bc40:	f000 fbcc 	bl	800c3dc <_Bfree>
 800bc44:	2300      	movs	r3, #0
 800bc46:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bc48:	702b      	strb	r3, [r5, #0]
 800bc4a:	f10b 0301 	add.w	r3, fp, #1
 800bc4e:	6013      	str	r3, [r2, #0]
 800bc50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	f43f ace2 	beq.w	800b61c <_dtoa_r+0xa4>
 800bc58:	601d      	str	r5, [r3, #0]
 800bc5a:	e4df      	b.n	800b61c <_dtoa_r+0xa4>
 800bc5c:	465f      	mov	r7, fp
 800bc5e:	462b      	mov	r3, r5
 800bc60:	461d      	mov	r5, r3
 800bc62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bc66:	2a39      	cmp	r2, #57	; 0x39
 800bc68:	d106      	bne.n	800bc78 <_dtoa_r+0x700>
 800bc6a:	9a00      	ldr	r2, [sp, #0]
 800bc6c:	429a      	cmp	r2, r3
 800bc6e:	d1f7      	bne.n	800bc60 <_dtoa_r+0x6e8>
 800bc70:	9900      	ldr	r1, [sp, #0]
 800bc72:	2230      	movs	r2, #48	; 0x30
 800bc74:	3701      	adds	r7, #1
 800bc76:	700a      	strb	r2, [r1, #0]
 800bc78:	781a      	ldrb	r2, [r3, #0]
 800bc7a:	3201      	adds	r2, #1
 800bc7c:	701a      	strb	r2, [r3, #0]
 800bc7e:	e790      	b.n	800bba2 <_dtoa_r+0x62a>
 800bc80:	4ba3      	ldr	r3, [pc, #652]	; (800bf10 <_dtoa_r+0x998>)
 800bc82:	2200      	movs	r2, #0
 800bc84:	f7f4 fcc8 	bl	8000618 <__aeabi_dmul>
 800bc88:	2200      	movs	r2, #0
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	4606      	mov	r6, r0
 800bc8e:	460f      	mov	r7, r1
 800bc90:	f7f4 ff2a 	bl	8000ae8 <__aeabi_dcmpeq>
 800bc94:	2800      	cmp	r0, #0
 800bc96:	d09e      	beq.n	800bbd6 <_dtoa_r+0x65e>
 800bc98:	e7d0      	b.n	800bc3c <_dtoa_r+0x6c4>
 800bc9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc9c:	2a00      	cmp	r2, #0
 800bc9e:	f000 80ca 	beq.w	800be36 <_dtoa_r+0x8be>
 800bca2:	9a07      	ldr	r2, [sp, #28]
 800bca4:	2a01      	cmp	r2, #1
 800bca6:	f300 80ad 	bgt.w	800be04 <_dtoa_r+0x88c>
 800bcaa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bcac:	2a00      	cmp	r2, #0
 800bcae:	f000 80a5 	beq.w	800bdfc <_dtoa_r+0x884>
 800bcb2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bcb6:	9e08      	ldr	r6, [sp, #32]
 800bcb8:	9d05      	ldr	r5, [sp, #20]
 800bcba:	9a05      	ldr	r2, [sp, #20]
 800bcbc:	441a      	add	r2, r3
 800bcbe:	9205      	str	r2, [sp, #20]
 800bcc0:	9a06      	ldr	r2, [sp, #24]
 800bcc2:	2101      	movs	r1, #1
 800bcc4:	441a      	add	r2, r3
 800bcc6:	4620      	mov	r0, r4
 800bcc8:	9206      	str	r2, [sp, #24]
 800bcca:	f000 fc3d 	bl	800c548 <__i2b>
 800bcce:	4607      	mov	r7, r0
 800bcd0:	b165      	cbz	r5, 800bcec <_dtoa_r+0x774>
 800bcd2:	9b06      	ldr	r3, [sp, #24]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	dd09      	ble.n	800bcec <_dtoa_r+0x774>
 800bcd8:	42ab      	cmp	r3, r5
 800bcda:	9a05      	ldr	r2, [sp, #20]
 800bcdc:	bfa8      	it	ge
 800bcde:	462b      	movge	r3, r5
 800bce0:	1ad2      	subs	r2, r2, r3
 800bce2:	9205      	str	r2, [sp, #20]
 800bce4:	9a06      	ldr	r2, [sp, #24]
 800bce6:	1aed      	subs	r5, r5, r3
 800bce8:	1ad3      	subs	r3, r2, r3
 800bcea:	9306      	str	r3, [sp, #24]
 800bcec:	9b08      	ldr	r3, [sp, #32]
 800bcee:	b1f3      	cbz	r3, 800bd2e <_dtoa_r+0x7b6>
 800bcf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	f000 80a3 	beq.w	800be3e <_dtoa_r+0x8c6>
 800bcf8:	2e00      	cmp	r6, #0
 800bcfa:	dd10      	ble.n	800bd1e <_dtoa_r+0x7a6>
 800bcfc:	4639      	mov	r1, r7
 800bcfe:	4632      	mov	r2, r6
 800bd00:	4620      	mov	r0, r4
 800bd02:	f000 fce1 	bl	800c6c8 <__pow5mult>
 800bd06:	4652      	mov	r2, sl
 800bd08:	4601      	mov	r1, r0
 800bd0a:	4607      	mov	r7, r0
 800bd0c:	4620      	mov	r0, r4
 800bd0e:	f000 fc31 	bl	800c574 <__multiply>
 800bd12:	4651      	mov	r1, sl
 800bd14:	4680      	mov	r8, r0
 800bd16:	4620      	mov	r0, r4
 800bd18:	f000 fb60 	bl	800c3dc <_Bfree>
 800bd1c:	46c2      	mov	sl, r8
 800bd1e:	9b08      	ldr	r3, [sp, #32]
 800bd20:	1b9a      	subs	r2, r3, r6
 800bd22:	d004      	beq.n	800bd2e <_dtoa_r+0x7b6>
 800bd24:	4651      	mov	r1, sl
 800bd26:	4620      	mov	r0, r4
 800bd28:	f000 fcce 	bl	800c6c8 <__pow5mult>
 800bd2c:	4682      	mov	sl, r0
 800bd2e:	2101      	movs	r1, #1
 800bd30:	4620      	mov	r0, r4
 800bd32:	f000 fc09 	bl	800c548 <__i2b>
 800bd36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	4606      	mov	r6, r0
 800bd3c:	f340 8081 	ble.w	800be42 <_dtoa_r+0x8ca>
 800bd40:	461a      	mov	r2, r3
 800bd42:	4601      	mov	r1, r0
 800bd44:	4620      	mov	r0, r4
 800bd46:	f000 fcbf 	bl	800c6c8 <__pow5mult>
 800bd4a:	9b07      	ldr	r3, [sp, #28]
 800bd4c:	2b01      	cmp	r3, #1
 800bd4e:	4606      	mov	r6, r0
 800bd50:	dd7a      	ble.n	800be48 <_dtoa_r+0x8d0>
 800bd52:	f04f 0800 	mov.w	r8, #0
 800bd56:	6933      	ldr	r3, [r6, #16]
 800bd58:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bd5c:	6918      	ldr	r0, [r3, #16]
 800bd5e:	f000 fba5 	bl	800c4ac <__hi0bits>
 800bd62:	f1c0 0020 	rsb	r0, r0, #32
 800bd66:	9b06      	ldr	r3, [sp, #24]
 800bd68:	4418      	add	r0, r3
 800bd6a:	f010 001f 	ands.w	r0, r0, #31
 800bd6e:	f000 8094 	beq.w	800be9a <_dtoa_r+0x922>
 800bd72:	f1c0 0320 	rsb	r3, r0, #32
 800bd76:	2b04      	cmp	r3, #4
 800bd78:	f340 8085 	ble.w	800be86 <_dtoa_r+0x90e>
 800bd7c:	9b05      	ldr	r3, [sp, #20]
 800bd7e:	f1c0 001c 	rsb	r0, r0, #28
 800bd82:	4403      	add	r3, r0
 800bd84:	9305      	str	r3, [sp, #20]
 800bd86:	9b06      	ldr	r3, [sp, #24]
 800bd88:	4403      	add	r3, r0
 800bd8a:	4405      	add	r5, r0
 800bd8c:	9306      	str	r3, [sp, #24]
 800bd8e:	9b05      	ldr	r3, [sp, #20]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	dd05      	ble.n	800bda0 <_dtoa_r+0x828>
 800bd94:	4651      	mov	r1, sl
 800bd96:	461a      	mov	r2, r3
 800bd98:	4620      	mov	r0, r4
 800bd9a:	f000 fcef 	bl	800c77c <__lshift>
 800bd9e:	4682      	mov	sl, r0
 800bda0:	9b06      	ldr	r3, [sp, #24]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	dd05      	ble.n	800bdb2 <_dtoa_r+0x83a>
 800bda6:	4631      	mov	r1, r6
 800bda8:	461a      	mov	r2, r3
 800bdaa:	4620      	mov	r0, r4
 800bdac:	f000 fce6 	bl	800c77c <__lshift>
 800bdb0:	4606      	mov	r6, r0
 800bdb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d072      	beq.n	800be9e <_dtoa_r+0x926>
 800bdb8:	4631      	mov	r1, r6
 800bdba:	4650      	mov	r0, sl
 800bdbc:	f000 fd4a 	bl	800c854 <__mcmp>
 800bdc0:	2800      	cmp	r0, #0
 800bdc2:	da6c      	bge.n	800be9e <_dtoa_r+0x926>
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	4651      	mov	r1, sl
 800bdc8:	220a      	movs	r2, #10
 800bdca:	4620      	mov	r0, r4
 800bdcc:	f000 fb28 	bl	800c420 <__multadd>
 800bdd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdd2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bdd6:	4682      	mov	sl, r0
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	f000 81b0 	beq.w	800c13e <_dtoa_r+0xbc6>
 800bdde:	2300      	movs	r3, #0
 800bde0:	4639      	mov	r1, r7
 800bde2:	220a      	movs	r2, #10
 800bde4:	4620      	mov	r0, r4
 800bde6:	f000 fb1b 	bl	800c420 <__multadd>
 800bdea:	9b01      	ldr	r3, [sp, #4]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	4607      	mov	r7, r0
 800bdf0:	f300 8096 	bgt.w	800bf20 <_dtoa_r+0x9a8>
 800bdf4:	9b07      	ldr	r3, [sp, #28]
 800bdf6:	2b02      	cmp	r3, #2
 800bdf8:	dc59      	bgt.n	800beae <_dtoa_r+0x936>
 800bdfa:	e091      	b.n	800bf20 <_dtoa_r+0x9a8>
 800bdfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bdfe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800be02:	e758      	b.n	800bcb6 <_dtoa_r+0x73e>
 800be04:	9b04      	ldr	r3, [sp, #16]
 800be06:	1e5e      	subs	r6, r3, #1
 800be08:	9b08      	ldr	r3, [sp, #32]
 800be0a:	42b3      	cmp	r3, r6
 800be0c:	bfbf      	itttt	lt
 800be0e:	9b08      	ldrlt	r3, [sp, #32]
 800be10:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800be12:	9608      	strlt	r6, [sp, #32]
 800be14:	1af3      	sublt	r3, r6, r3
 800be16:	bfb4      	ite	lt
 800be18:	18d2      	addlt	r2, r2, r3
 800be1a:	1b9e      	subge	r6, r3, r6
 800be1c:	9b04      	ldr	r3, [sp, #16]
 800be1e:	bfbc      	itt	lt
 800be20:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800be22:	2600      	movlt	r6, #0
 800be24:	2b00      	cmp	r3, #0
 800be26:	bfb7      	itett	lt
 800be28:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800be2c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800be30:	1a9d      	sublt	r5, r3, r2
 800be32:	2300      	movlt	r3, #0
 800be34:	e741      	b.n	800bcba <_dtoa_r+0x742>
 800be36:	9e08      	ldr	r6, [sp, #32]
 800be38:	9d05      	ldr	r5, [sp, #20]
 800be3a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800be3c:	e748      	b.n	800bcd0 <_dtoa_r+0x758>
 800be3e:	9a08      	ldr	r2, [sp, #32]
 800be40:	e770      	b.n	800bd24 <_dtoa_r+0x7ac>
 800be42:	9b07      	ldr	r3, [sp, #28]
 800be44:	2b01      	cmp	r3, #1
 800be46:	dc19      	bgt.n	800be7c <_dtoa_r+0x904>
 800be48:	9b02      	ldr	r3, [sp, #8]
 800be4a:	b9bb      	cbnz	r3, 800be7c <_dtoa_r+0x904>
 800be4c:	9b03      	ldr	r3, [sp, #12]
 800be4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800be52:	b99b      	cbnz	r3, 800be7c <_dtoa_r+0x904>
 800be54:	9b03      	ldr	r3, [sp, #12]
 800be56:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800be5a:	0d1b      	lsrs	r3, r3, #20
 800be5c:	051b      	lsls	r3, r3, #20
 800be5e:	b183      	cbz	r3, 800be82 <_dtoa_r+0x90a>
 800be60:	9b05      	ldr	r3, [sp, #20]
 800be62:	3301      	adds	r3, #1
 800be64:	9305      	str	r3, [sp, #20]
 800be66:	9b06      	ldr	r3, [sp, #24]
 800be68:	3301      	adds	r3, #1
 800be6a:	9306      	str	r3, [sp, #24]
 800be6c:	f04f 0801 	mov.w	r8, #1
 800be70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be72:	2b00      	cmp	r3, #0
 800be74:	f47f af6f 	bne.w	800bd56 <_dtoa_r+0x7de>
 800be78:	2001      	movs	r0, #1
 800be7a:	e774      	b.n	800bd66 <_dtoa_r+0x7ee>
 800be7c:	f04f 0800 	mov.w	r8, #0
 800be80:	e7f6      	b.n	800be70 <_dtoa_r+0x8f8>
 800be82:	4698      	mov	r8, r3
 800be84:	e7f4      	b.n	800be70 <_dtoa_r+0x8f8>
 800be86:	d082      	beq.n	800bd8e <_dtoa_r+0x816>
 800be88:	9a05      	ldr	r2, [sp, #20]
 800be8a:	331c      	adds	r3, #28
 800be8c:	441a      	add	r2, r3
 800be8e:	9205      	str	r2, [sp, #20]
 800be90:	9a06      	ldr	r2, [sp, #24]
 800be92:	441a      	add	r2, r3
 800be94:	441d      	add	r5, r3
 800be96:	9206      	str	r2, [sp, #24]
 800be98:	e779      	b.n	800bd8e <_dtoa_r+0x816>
 800be9a:	4603      	mov	r3, r0
 800be9c:	e7f4      	b.n	800be88 <_dtoa_r+0x910>
 800be9e:	9b04      	ldr	r3, [sp, #16]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	dc37      	bgt.n	800bf14 <_dtoa_r+0x99c>
 800bea4:	9b07      	ldr	r3, [sp, #28]
 800bea6:	2b02      	cmp	r3, #2
 800bea8:	dd34      	ble.n	800bf14 <_dtoa_r+0x99c>
 800beaa:	9b04      	ldr	r3, [sp, #16]
 800beac:	9301      	str	r3, [sp, #4]
 800beae:	9b01      	ldr	r3, [sp, #4]
 800beb0:	b963      	cbnz	r3, 800becc <_dtoa_r+0x954>
 800beb2:	4631      	mov	r1, r6
 800beb4:	2205      	movs	r2, #5
 800beb6:	4620      	mov	r0, r4
 800beb8:	f000 fab2 	bl	800c420 <__multadd>
 800bebc:	4601      	mov	r1, r0
 800bebe:	4606      	mov	r6, r0
 800bec0:	4650      	mov	r0, sl
 800bec2:	f000 fcc7 	bl	800c854 <__mcmp>
 800bec6:	2800      	cmp	r0, #0
 800bec8:	f73f adbb 	bgt.w	800ba42 <_dtoa_r+0x4ca>
 800becc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bece:	9d00      	ldr	r5, [sp, #0]
 800bed0:	ea6f 0b03 	mvn.w	fp, r3
 800bed4:	f04f 0800 	mov.w	r8, #0
 800bed8:	4631      	mov	r1, r6
 800beda:	4620      	mov	r0, r4
 800bedc:	f000 fa7e 	bl	800c3dc <_Bfree>
 800bee0:	2f00      	cmp	r7, #0
 800bee2:	f43f aeab 	beq.w	800bc3c <_dtoa_r+0x6c4>
 800bee6:	f1b8 0f00 	cmp.w	r8, #0
 800beea:	d005      	beq.n	800bef8 <_dtoa_r+0x980>
 800beec:	45b8      	cmp	r8, r7
 800beee:	d003      	beq.n	800bef8 <_dtoa_r+0x980>
 800bef0:	4641      	mov	r1, r8
 800bef2:	4620      	mov	r0, r4
 800bef4:	f000 fa72 	bl	800c3dc <_Bfree>
 800bef8:	4639      	mov	r1, r7
 800befa:	4620      	mov	r0, r4
 800befc:	f000 fa6e 	bl	800c3dc <_Bfree>
 800bf00:	e69c      	b.n	800bc3c <_dtoa_r+0x6c4>
 800bf02:	2600      	movs	r6, #0
 800bf04:	4637      	mov	r7, r6
 800bf06:	e7e1      	b.n	800becc <_dtoa_r+0x954>
 800bf08:	46bb      	mov	fp, r7
 800bf0a:	4637      	mov	r7, r6
 800bf0c:	e599      	b.n	800ba42 <_dtoa_r+0x4ca>
 800bf0e:	bf00      	nop
 800bf10:	40240000 	.word	0x40240000
 800bf14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	f000 80c8 	beq.w	800c0ac <_dtoa_r+0xb34>
 800bf1c:	9b04      	ldr	r3, [sp, #16]
 800bf1e:	9301      	str	r3, [sp, #4]
 800bf20:	2d00      	cmp	r5, #0
 800bf22:	dd05      	ble.n	800bf30 <_dtoa_r+0x9b8>
 800bf24:	4639      	mov	r1, r7
 800bf26:	462a      	mov	r2, r5
 800bf28:	4620      	mov	r0, r4
 800bf2a:	f000 fc27 	bl	800c77c <__lshift>
 800bf2e:	4607      	mov	r7, r0
 800bf30:	f1b8 0f00 	cmp.w	r8, #0
 800bf34:	d05b      	beq.n	800bfee <_dtoa_r+0xa76>
 800bf36:	6879      	ldr	r1, [r7, #4]
 800bf38:	4620      	mov	r0, r4
 800bf3a:	f000 fa0f 	bl	800c35c <_Balloc>
 800bf3e:	4605      	mov	r5, r0
 800bf40:	b928      	cbnz	r0, 800bf4e <_dtoa_r+0x9d6>
 800bf42:	4b83      	ldr	r3, [pc, #524]	; (800c150 <_dtoa_r+0xbd8>)
 800bf44:	4602      	mov	r2, r0
 800bf46:	f240 21ef 	movw	r1, #751	; 0x2ef
 800bf4a:	f7ff bb2e 	b.w	800b5aa <_dtoa_r+0x32>
 800bf4e:	693a      	ldr	r2, [r7, #16]
 800bf50:	3202      	adds	r2, #2
 800bf52:	0092      	lsls	r2, r2, #2
 800bf54:	f107 010c 	add.w	r1, r7, #12
 800bf58:	300c      	adds	r0, #12
 800bf5a:	f7ff fa77 	bl	800b44c <memcpy>
 800bf5e:	2201      	movs	r2, #1
 800bf60:	4629      	mov	r1, r5
 800bf62:	4620      	mov	r0, r4
 800bf64:	f000 fc0a 	bl	800c77c <__lshift>
 800bf68:	9b00      	ldr	r3, [sp, #0]
 800bf6a:	3301      	adds	r3, #1
 800bf6c:	9304      	str	r3, [sp, #16]
 800bf6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf72:	4413      	add	r3, r2
 800bf74:	9308      	str	r3, [sp, #32]
 800bf76:	9b02      	ldr	r3, [sp, #8]
 800bf78:	f003 0301 	and.w	r3, r3, #1
 800bf7c:	46b8      	mov	r8, r7
 800bf7e:	9306      	str	r3, [sp, #24]
 800bf80:	4607      	mov	r7, r0
 800bf82:	9b04      	ldr	r3, [sp, #16]
 800bf84:	4631      	mov	r1, r6
 800bf86:	3b01      	subs	r3, #1
 800bf88:	4650      	mov	r0, sl
 800bf8a:	9301      	str	r3, [sp, #4]
 800bf8c:	f7ff fa6c 	bl	800b468 <quorem>
 800bf90:	4641      	mov	r1, r8
 800bf92:	9002      	str	r0, [sp, #8]
 800bf94:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800bf98:	4650      	mov	r0, sl
 800bf9a:	f000 fc5b 	bl	800c854 <__mcmp>
 800bf9e:	463a      	mov	r2, r7
 800bfa0:	9005      	str	r0, [sp, #20]
 800bfa2:	4631      	mov	r1, r6
 800bfa4:	4620      	mov	r0, r4
 800bfa6:	f000 fc71 	bl	800c88c <__mdiff>
 800bfaa:	68c2      	ldr	r2, [r0, #12]
 800bfac:	4605      	mov	r5, r0
 800bfae:	bb02      	cbnz	r2, 800bff2 <_dtoa_r+0xa7a>
 800bfb0:	4601      	mov	r1, r0
 800bfb2:	4650      	mov	r0, sl
 800bfb4:	f000 fc4e 	bl	800c854 <__mcmp>
 800bfb8:	4602      	mov	r2, r0
 800bfba:	4629      	mov	r1, r5
 800bfbc:	4620      	mov	r0, r4
 800bfbe:	9209      	str	r2, [sp, #36]	; 0x24
 800bfc0:	f000 fa0c 	bl	800c3dc <_Bfree>
 800bfc4:	9b07      	ldr	r3, [sp, #28]
 800bfc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bfc8:	9d04      	ldr	r5, [sp, #16]
 800bfca:	ea43 0102 	orr.w	r1, r3, r2
 800bfce:	9b06      	ldr	r3, [sp, #24]
 800bfd0:	4319      	orrs	r1, r3
 800bfd2:	d110      	bne.n	800bff6 <_dtoa_r+0xa7e>
 800bfd4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bfd8:	d029      	beq.n	800c02e <_dtoa_r+0xab6>
 800bfda:	9b05      	ldr	r3, [sp, #20]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	dd02      	ble.n	800bfe6 <_dtoa_r+0xa6e>
 800bfe0:	9b02      	ldr	r3, [sp, #8]
 800bfe2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800bfe6:	9b01      	ldr	r3, [sp, #4]
 800bfe8:	f883 9000 	strb.w	r9, [r3]
 800bfec:	e774      	b.n	800bed8 <_dtoa_r+0x960>
 800bfee:	4638      	mov	r0, r7
 800bff0:	e7ba      	b.n	800bf68 <_dtoa_r+0x9f0>
 800bff2:	2201      	movs	r2, #1
 800bff4:	e7e1      	b.n	800bfba <_dtoa_r+0xa42>
 800bff6:	9b05      	ldr	r3, [sp, #20]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	db04      	blt.n	800c006 <_dtoa_r+0xa8e>
 800bffc:	9907      	ldr	r1, [sp, #28]
 800bffe:	430b      	orrs	r3, r1
 800c000:	9906      	ldr	r1, [sp, #24]
 800c002:	430b      	orrs	r3, r1
 800c004:	d120      	bne.n	800c048 <_dtoa_r+0xad0>
 800c006:	2a00      	cmp	r2, #0
 800c008:	dded      	ble.n	800bfe6 <_dtoa_r+0xa6e>
 800c00a:	4651      	mov	r1, sl
 800c00c:	2201      	movs	r2, #1
 800c00e:	4620      	mov	r0, r4
 800c010:	f000 fbb4 	bl	800c77c <__lshift>
 800c014:	4631      	mov	r1, r6
 800c016:	4682      	mov	sl, r0
 800c018:	f000 fc1c 	bl	800c854 <__mcmp>
 800c01c:	2800      	cmp	r0, #0
 800c01e:	dc03      	bgt.n	800c028 <_dtoa_r+0xab0>
 800c020:	d1e1      	bne.n	800bfe6 <_dtoa_r+0xa6e>
 800c022:	f019 0f01 	tst.w	r9, #1
 800c026:	d0de      	beq.n	800bfe6 <_dtoa_r+0xa6e>
 800c028:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c02c:	d1d8      	bne.n	800bfe0 <_dtoa_r+0xa68>
 800c02e:	9a01      	ldr	r2, [sp, #4]
 800c030:	2339      	movs	r3, #57	; 0x39
 800c032:	7013      	strb	r3, [r2, #0]
 800c034:	462b      	mov	r3, r5
 800c036:	461d      	mov	r5, r3
 800c038:	3b01      	subs	r3, #1
 800c03a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c03e:	2a39      	cmp	r2, #57	; 0x39
 800c040:	d06c      	beq.n	800c11c <_dtoa_r+0xba4>
 800c042:	3201      	adds	r2, #1
 800c044:	701a      	strb	r2, [r3, #0]
 800c046:	e747      	b.n	800bed8 <_dtoa_r+0x960>
 800c048:	2a00      	cmp	r2, #0
 800c04a:	dd07      	ble.n	800c05c <_dtoa_r+0xae4>
 800c04c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c050:	d0ed      	beq.n	800c02e <_dtoa_r+0xab6>
 800c052:	9a01      	ldr	r2, [sp, #4]
 800c054:	f109 0301 	add.w	r3, r9, #1
 800c058:	7013      	strb	r3, [r2, #0]
 800c05a:	e73d      	b.n	800bed8 <_dtoa_r+0x960>
 800c05c:	9b04      	ldr	r3, [sp, #16]
 800c05e:	9a08      	ldr	r2, [sp, #32]
 800c060:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c064:	4293      	cmp	r3, r2
 800c066:	d043      	beq.n	800c0f0 <_dtoa_r+0xb78>
 800c068:	4651      	mov	r1, sl
 800c06a:	2300      	movs	r3, #0
 800c06c:	220a      	movs	r2, #10
 800c06e:	4620      	mov	r0, r4
 800c070:	f000 f9d6 	bl	800c420 <__multadd>
 800c074:	45b8      	cmp	r8, r7
 800c076:	4682      	mov	sl, r0
 800c078:	f04f 0300 	mov.w	r3, #0
 800c07c:	f04f 020a 	mov.w	r2, #10
 800c080:	4641      	mov	r1, r8
 800c082:	4620      	mov	r0, r4
 800c084:	d107      	bne.n	800c096 <_dtoa_r+0xb1e>
 800c086:	f000 f9cb 	bl	800c420 <__multadd>
 800c08a:	4680      	mov	r8, r0
 800c08c:	4607      	mov	r7, r0
 800c08e:	9b04      	ldr	r3, [sp, #16]
 800c090:	3301      	adds	r3, #1
 800c092:	9304      	str	r3, [sp, #16]
 800c094:	e775      	b.n	800bf82 <_dtoa_r+0xa0a>
 800c096:	f000 f9c3 	bl	800c420 <__multadd>
 800c09a:	4639      	mov	r1, r7
 800c09c:	4680      	mov	r8, r0
 800c09e:	2300      	movs	r3, #0
 800c0a0:	220a      	movs	r2, #10
 800c0a2:	4620      	mov	r0, r4
 800c0a4:	f000 f9bc 	bl	800c420 <__multadd>
 800c0a8:	4607      	mov	r7, r0
 800c0aa:	e7f0      	b.n	800c08e <_dtoa_r+0xb16>
 800c0ac:	9b04      	ldr	r3, [sp, #16]
 800c0ae:	9301      	str	r3, [sp, #4]
 800c0b0:	9d00      	ldr	r5, [sp, #0]
 800c0b2:	4631      	mov	r1, r6
 800c0b4:	4650      	mov	r0, sl
 800c0b6:	f7ff f9d7 	bl	800b468 <quorem>
 800c0ba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c0be:	9b00      	ldr	r3, [sp, #0]
 800c0c0:	f805 9b01 	strb.w	r9, [r5], #1
 800c0c4:	1aea      	subs	r2, r5, r3
 800c0c6:	9b01      	ldr	r3, [sp, #4]
 800c0c8:	4293      	cmp	r3, r2
 800c0ca:	dd07      	ble.n	800c0dc <_dtoa_r+0xb64>
 800c0cc:	4651      	mov	r1, sl
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	220a      	movs	r2, #10
 800c0d2:	4620      	mov	r0, r4
 800c0d4:	f000 f9a4 	bl	800c420 <__multadd>
 800c0d8:	4682      	mov	sl, r0
 800c0da:	e7ea      	b.n	800c0b2 <_dtoa_r+0xb3a>
 800c0dc:	9b01      	ldr	r3, [sp, #4]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	bfc8      	it	gt
 800c0e2:	461d      	movgt	r5, r3
 800c0e4:	9b00      	ldr	r3, [sp, #0]
 800c0e6:	bfd8      	it	le
 800c0e8:	2501      	movle	r5, #1
 800c0ea:	441d      	add	r5, r3
 800c0ec:	f04f 0800 	mov.w	r8, #0
 800c0f0:	4651      	mov	r1, sl
 800c0f2:	2201      	movs	r2, #1
 800c0f4:	4620      	mov	r0, r4
 800c0f6:	f000 fb41 	bl	800c77c <__lshift>
 800c0fa:	4631      	mov	r1, r6
 800c0fc:	4682      	mov	sl, r0
 800c0fe:	f000 fba9 	bl	800c854 <__mcmp>
 800c102:	2800      	cmp	r0, #0
 800c104:	dc96      	bgt.n	800c034 <_dtoa_r+0xabc>
 800c106:	d102      	bne.n	800c10e <_dtoa_r+0xb96>
 800c108:	f019 0f01 	tst.w	r9, #1
 800c10c:	d192      	bne.n	800c034 <_dtoa_r+0xabc>
 800c10e:	462b      	mov	r3, r5
 800c110:	461d      	mov	r5, r3
 800c112:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c116:	2a30      	cmp	r2, #48	; 0x30
 800c118:	d0fa      	beq.n	800c110 <_dtoa_r+0xb98>
 800c11a:	e6dd      	b.n	800bed8 <_dtoa_r+0x960>
 800c11c:	9a00      	ldr	r2, [sp, #0]
 800c11e:	429a      	cmp	r2, r3
 800c120:	d189      	bne.n	800c036 <_dtoa_r+0xabe>
 800c122:	f10b 0b01 	add.w	fp, fp, #1
 800c126:	2331      	movs	r3, #49	; 0x31
 800c128:	e796      	b.n	800c058 <_dtoa_r+0xae0>
 800c12a:	4b0a      	ldr	r3, [pc, #40]	; (800c154 <_dtoa_r+0xbdc>)
 800c12c:	f7ff ba99 	b.w	800b662 <_dtoa_r+0xea>
 800c130:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c132:	2b00      	cmp	r3, #0
 800c134:	f47f aa6d 	bne.w	800b612 <_dtoa_r+0x9a>
 800c138:	4b07      	ldr	r3, [pc, #28]	; (800c158 <_dtoa_r+0xbe0>)
 800c13a:	f7ff ba92 	b.w	800b662 <_dtoa_r+0xea>
 800c13e:	9b01      	ldr	r3, [sp, #4]
 800c140:	2b00      	cmp	r3, #0
 800c142:	dcb5      	bgt.n	800c0b0 <_dtoa_r+0xb38>
 800c144:	9b07      	ldr	r3, [sp, #28]
 800c146:	2b02      	cmp	r3, #2
 800c148:	f73f aeb1 	bgt.w	800beae <_dtoa_r+0x936>
 800c14c:	e7b0      	b.n	800c0b0 <_dtoa_r+0xb38>
 800c14e:	bf00      	nop
 800c150:	0800e848 	.word	0x0800e848
 800c154:	0800e7a8 	.word	0x0800e7a8
 800c158:	0800e7cc 	.word	0x0800e7cc

0800c15c <_free_r>:
 800c15c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c15e:	2900      	cmp	r1, #0
 800c160:	d044      	beq.n	800c1ec <_free_r+0x90>
 800c162:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c166:	9001      	str	r0, [sp, #4]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	f1a1 0404 	sub.w	r4, r1, #4
 800c16e:	bfb8      	it	lt
 800c170:	18e4      	addlt	r4, r4, r3
 800c172:	f000 f8e7 	bl	800c344 <__malloc_lock>
 800c176:	4a1e      	ldr	r2, [pc, #120]	; (800c1f0 <_free_r+0x94>)
 800c178:	9801      	ldr	r0, [sp, #4]
 800c17a:	6813      	ldr	r3, [r2, #0]
 800c17c:	b933      	cbnz	r3, 800c18c <_free_r+0x30>
 800c17e:	6063      	str	r3, [r4, #4]
 800c180:	6014      	str	r4, [r2, #0]
 800c182:	b003      	add	sp, #12
 800c184:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c188:	f000 b8e2 	b.w	800c350 <__malloc_unlock>
 800c18c:	42a3      	cmp	r3, r4
 800c18e:	d908      	bls.n	800c1a2 <_free_r+0x46>
 800c190:	6825      	ldr	r5, [r4, #0]
 800c192:	1961      	adds	r1, r4, r5
 800c194:	428b      	cmp	r3, r1
 800c196:	bf01      	itttt	eq
 800c198:	6819      	ldreq	r1, [r3, #0]
 800c19a:	685b      	ldreq	r3, [r3, #4]
 800c19c:	1949      	addeq	r1, r1, r5
 800c19e:	6021      	streq	r1, [r4, #0]
 800c1a0:	e7ed      	b.n	800c17e <_free_r+0x22>
 800c1a2:	461a      	mov	r2, r3
 800c1a4:	685b      	ldr	r3, [r3, #4]
 800c1a6:	b10b      	cbz	r3, 800c1ac <_free_r+0x50>
 800c1a8:	42a3      	cmp	r3, r4
 800c1aa:	d9fa      	bls.n	800c1a2 <_free_r+0x46>
 800c1ac:	6811      	ldr	r1, [r2, #0]
 800c1ae:	1855      	adds	r5, r2, r1
 800c1b0:	42a5      	cmp	r5, r4
 800c1b2:	d10b      	bne.n	800c1cc <_free_r+0x70>
 800c1b4:	6824      	ldr	r4, [r4, #0]
 800c1b6:	4421      	add	r1, r4
 800c1b8:	1854      	adds	r4, r2, r1
 800c1ba:	42a3      	cmp	r3, r4
 800c1bc:	6011      	str	r1, [r2, #0]
 800c1be:	d1e0      	bne.n	800c182 <_free_r+0x26>
 800c1c0:	681c      	ldr	r4, [r3, #0]
 800c1c2:	685b      	ldr	r3, [r3, #4]
 800c1c4:	6053      	str	r3, [r2, #4]
 800c1c6:	440c      	add	r4, r1
 800c1c8:	6014      	str	r4, [r2, #0]
 800c1ca:	e7da      	b.n	800c182 <_free_r+0x26>
 800c1cc:	d902      	bls.n	800c1d4 <_free_r+0x78>
 800c1ce:	230c      	movs	r3, #12
 800c1d0:	6003      	str	r3, [r0, #0]
 800c1d2:	e7d6      	b.n	800c182 <_free_r+0x26>
 800c1d4:	6825      	ldr	r5, [r4, #0]
 800c1d6:	1961      	adds	r1, r4, r5
 800c1d8:	428b      	cmp	r3, r1
 800c1da:	bf04      	itt	eq
 800c1dc:	6819      	ldreq	r1, [r3, #0]
 800c1de:	685b      	ldreq	r3, [r3, #4]
 800c1e0:	6063      	str	r3, [r4, #4]
 800c1e2:	bf04      	itt	eq
 800c1e4:	1949      	addeq	r1, r1, r5
 800c1e6:	6021      	streq	r1, [r4, #0]
 800c1e8:	6054      	str	r4, [r2, #4]
 800c1ea:	e7ca      	b.n	800c182 <_free_r+0x26>
 800c1ec:	b003      	add	sp, #12
 800c1ee:	bd30      	pop	{r4, r5, pc}
 800c1f0:	20002d44 	.word	0x20002d44

0800c1f4 <malloc>:
 800c1f4:	4b02      	ldr	r3, [pc, #8]	; (800c200 <malloc+0xc>)
 800c1f6:	4601      	mov	r1, r0
 800c1f8:	6818      	ldr	r0, [r3, #0]
 800c1fa:	f000 b823 	b.w	800c244 <_malloc_r>
 800c1fe:	bf00      	nop
 800c200:	20000068 	.word	0x20000068

0800c204 <sbrk_aligned>:
 800c204:	b570      	push	{r4, r5, r6, lr}
 800c206:	4e0e      	ldr	r6, [pc, #56]	; (800c240 <sbrk_aligned+0x3c>)
 800c208:	460c      	mov	r4, r1
 800c20a:	6831      	ldr	r1, [r6, #0]
 800c20c:	4605      	mov	r5, r0
 800c20e:	b911      	cbnz	r1, 800c216 <sbrk_aligned+0x12>
 800c210:	f000 fe40 	bl	800ce94 <_sbrk_r>
 800c214:	6030      	str	r0, [r6, #0]
 800c216:	4621      	mov	r1, r4
 800c218:	4628      	mov	r0, r5
 800c21a:	f000 fe3b 	bl	800ce94 <_sbrk_r>
 800c21e:	1c43      	adds	r3, r0, #1
 800c220:	d00a      	beq.n	800c238 <sbrk_aligned+0x34>
 800c222:	1cc4      	adds	r4, r0, #3
 800c224:	f024 0403 	bic.w	r4, r4, #3
 800c228:	42a0      	cmp	r0, r4
 800c22a:	d007      	beq.n	800c23c <sbrk_aligned+0x38>
 800c22c:	1a21      	subs	r1, r4, r0
 800c22e:	4628      	mov	r0, r5
 800c230:	f000 fe30 	bl	800ce94 <_sbrk_r>
 800c234:	3001      	adds	r0, #1
 800c236:	d101      	bne.n	800c23c <sbrk_aligned+0x38>
 800c238:	f04f 34ff 	mov.w	r4, #4294967295
 800c23c:	4620      	mov	r0, r4
 800c23e:	bd70      	pop	{r4, r5, r6, pc}
 800c240:	20002d48 	.word	0x20002d48

0800c244 <_malloc_r>:
 800c244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c248:	1ccd      	adds	r5, r1, #3
 800c24a:	f025 0503 	bic.w	r5, r5, #3
 800c24e:	3508      	adds	r5, #8
 800c250:	2d0c      	cmp	r5, #12
 800c252:	bf38      	it	cc
 800c254:	250c      	movcc	r5, #12
 800c256:	2d00      	cmp	r5, #0
 800c258:	4607      	mov	r7, r0
 800c25a:	db01      	blt.n	800c260 <_malloc_r+0x1c>
 800c25c:	42a9      	cmp	r1, r5
 800c25e:	d905      	bls.n	800c26c <_malloc_r+0x28>
 800c260:	230c      	movs	r3, #12
 800c262:	603b      	str	r3, [r7, #0]
 800c264:	2600      	movs	r6, #0
 800c266:	4630      	mov	r0, r6
 800c268:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c26c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c340 <_malloc_r+0xfc>
 800c270:	f000 f868 	bl	800c344 <__malloc_lock>
 800c274:	f8d8 3000 	ldr.w	r3, [r8]
 800c278:	461c      	mov	r4, r3
 800c27a:	bb5c      	cbnz	r4, 800c2d4 <_malloc_r+0x90>
 800c27c:	4629      	mov	r1, r5
 800c27e:	4638      	mov	r0, r7
 800c280:	f7ff ffc0 	bl	800c204 <sbrk_aligned>
 800c284:	1c43      	adds	r3, r0, #1
 800c286:	4604      	mov	r4, r0
 800c288:	d155      	bne.n	800c336 <_malloc_r+0xf2>
 800c28a:	f8d8 4000 	ldr.w	r4, [r8]
 800c28e:	4626      	mov	r6, r4
 800c290:	2e00      	cmp	r6, #0
 800c292:	d145      	bne.n	800c320 <_malloc_r+0xdc>
 800c294:	2c00      	cmp	r4, #0
 800c296:	d048      	beq.n	800c32a <_malloc_r+0xe6>
 800c298:	6823      	ldr	r3, [r4, #0]
 800c29a:	4631      	mov	r1, r6
 800c29c:	4638      	mov	r0, r7
 800c29e:	eb04 0903 	add.w	r9, r4, r3
 800c2a2:	f000 fdf7 	bl	800ce94 <_sbrk_r>
 800c2a6:	4581      	cmp	r9, r0
 800c2a8:	d13f      	bne.n	800c32a <_malloc_r+0xe6>
 800c2aa:	6821      	ldr	r1, [r4, #0]
 800c2ac:	1a6d      	subs	r5, r5, r1
 800c2ae:	4629      	mov	r1, r5
 800c2b0:	4638      	mov	r0, r7
 800c2b2:	f7ff ffa7 	bl	800c204 <sbrk_aligned>
 800c2b6:	3001      	adds	r0, #1
 800c2b8:	d037      	beq.n	800c32a <_malloc_r+0xe6>
 800c2ba:	6823      	ldr	r3, [r4, #0]
 800c2bc:	442b      	add	r3, r5
 800c2be:	6023      	str	r3, [r4, #0]
 800c2c0:	f8d8 3000 	ldr.w	r3, [r8]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d038      	beq.n	800c33a <_malloc_r+0xf6>
 800c2c8:	685a      	ldr	r2, [r3, #4]
 800c2ca:	42a2      	cmp	r2, r4
 800c2cc:	d12b      	bne.n	800c326 <_malloc_r+0xe2>
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	605a      	str	r2, [r3, #4]
 800c2d2:	e00f      	b.n	800c2f4 <_malloc_r+0xb0>
 800c2d4:	6822      	ldr	r2, [r4, #0]
 800c2d6:	1b52      	subs	r2, r2, r5
 800c2d8:	d41f      	bmi.n	800c31a <_malloc_r+0xd6>
 800c2da:	2a0b      	cmp	r2, #11
 800c2dc:	d917      	bls.n	800c30e <_malloc_r+0xca>
 800c2de:	1961      	adds	r1, r4, r5
 800c2e0:	42a3      	cmp	r3, r4
 800c2e2:	6025      	str	r5, [r4, #0]
 800c2e4:	bf18      	it	ne
 800c2e6:	6059      	strne	r1, [r3, #4]
 800c2e8:	6863      	ldr	r3, [r4, #4]
 800c2ea:	bf08      	it	eq
 800c2ec:	f8c8 1000 	streq.w	r1, [r8]
 800c2f0:	5162      	str	r2, [r4, r5]
 800c2f2:	604b      	str	r3, [r1, #4]
 800c2f4:	4638      	mov	r0, r7
 800c2f6:	f104 060b 	add.w	r6, r4, #11
 800c2fa:	f000 f829 	bl	800c350 <__malloc_unlock>
 800c2fe:	f026 0607 	bic.w	r6, r6, #7
 800c302:	1d23      	adds	r3, r4, #4
 800c304:	1af2      	subs	r2, r6, r3
 800c306:	d0ae      	beq.n	800c266 <_malloc_r+0x22>
 800c308:	1b9b      	subs	r3, r3, r6
 800c30a:	50a3      	str	r3, [r4, r2]
 800c30c:	e7ab      	b.n	800c266 <_malloc_r+0x22>
 800c30e:	42a3      	cmp	r3, r4
 800c310:	6862      	ldr	r2, [r4, #4]
 800c312:	d1dd      	bne.n	800c2d0 <_malloc_r+0x8c>
 800c314:	f8c8 2000 	str.w	r2, [r8]
 800c318:	e7ec      	b.n	800c2f4 <_malloc_r+0xb0>
 800c31a:	4623      	mov	r3, r4
 800c31c:	6864      	ldr	r4, [r4, #4]
 800c31e:	e7ac      	b.n	800c27a <_malloc_r+0x36>
 800c320:	4634      	mov	r4, r6
 800c322:	6876      	ldr	r6, [r6, #4]
 800c324:	e7b4      	b.n	800c290 <_malloc_r+0x4c>
 800c326:	4613      	mov	r3, r2
 800c328:	e7cc      	b.n	800c2c4 <_malloc_r+0x80>
 800c32a:	230c      	movs	r3, #12
 800c32c:	603b      	str	r3, [r7, #0]
 800c32e:	4638      	mov	r0, r7
 800c330:	f000 f80e 	bl	800c350 <__malloc_unlock>
 800c334:	e797      	b.n	800c266 <_malloc_r+0x22>
 800c336:	6025      	str	r5, [r4, #0]
 800c338:	e7dc      	b.n	800c2f4 <_malloc_r+0xb0>
 800c33a:	605b      	str	r3, [r3, #4]
 800c33c:	deff      	udf	#255	; 0xff
 800c33e:	bf00      	nop
 800c340:	20002d44 	.word	0x20002d44

0800c344 <__malloc_lock>:
 800c344:	4801      	ldr	r0, [pc, #4]	; (800c34c <__malloc_lock+0x8>)
 800c346:	f7ff b87f 	b.w	800b448 <__retarget_lock_acquire_recursive>
 800c34a:	bf00      	nop
 800c34c:	20002d40 	.word	0x20002d40

0800c350 <__malloc_unlock>:
 800c350:	4801      	ldr	r0, [pc, #4]	; (800c358 <__malloc_unlock+0x8>)
 800c352:	f7ff b87a 	b.w	800b44a <__retarget_lock_release_recursive>
 800c356:	bf00      	nop
 800c358:	20002d40 	.word	0x20002d40

0800c35c <_Balloc>:
 800c35c:	b570      	push	{r4, r5, r6, lr}
 800c35e:	69c6      	ldr	r6, [r0, #28]
 800c360:	4604      	mov	r4, r0
 800c362:	460d      	mov	r5, r1
 800c364:	b976      	cbnz	r6, 800c384 <_Balloc+0x28>
 800c366:	2010      	movs	r0, #16
 800c368:	f7ff ff44 	bl	800c1f4 <malloc>
 800c36c:	4602      	mov	r2, r0
 800c36e:	61e0      	str	r0, [r4, #28]
 800c370:	b920      	cbnz	r0, 800c37c <_Balloc+0x20>
 800c372:	4b18      	ldr	r3, [pc, #96]	; (800c3d4 <_Balloc+0x78>)
 800c374:	4818      	ldr	r0, [pc, #96]	; (800c3d8 <_Balloc+0x7c>)
 800c376:	216b      	movs	r1, #107	; 0x6b
 800c378:	f000 fd9c 	bl	800ceb4 <__assert_func>
 800c37c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c380:	6006      	str	r6, [r0, #0]
 800c382:	60c6      	str	r6, [r0, #12]
 800c384:	69e6      	ldr	r6, [r4, #28]
 800c386:	68f3      	ldr	r3, [r6, #12]
 800c388:	b183      	cbz	r3, 800c3ac <_Balloc+0x50>
 800c38a:	69e3      	ldr	r3, [r4, #28]
 800c38c:	68db      	ldr	r3, [r3, #12]
 800c38e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c392:	b9b8      	cbnz	r0, 800c3c4 <_Balloc+0x68>
 800c394:	2101      	movs	r1, #1
 800c396:	fa01 f605 	lsl.w	r6, r1, r5
 800c39a:	1d72      	adds	r2, r6, #5
 800c39c:	0092      	lsls	r2, r2, #2
 800c39e:	4620      	mov	r0, r4
 800c3a0:	f000 fda6 	bl	800cef0 <_calloc_r>
 800c3a4:	b160      	cbz	r0, 800c3c0 <_Balloc+0x64>
 800c3a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c3aa:	e00e      	b.n	800c3ca <_Balloc+0x6e>
 800c3ac:	2221      	movs	r2, #33	; 0x21
 800c3ae:	2104      	movs	r1, #4
 800c3b0:	4620      	mov	r0, r4
 800c3b2:	f000 fd9d 	bl	800cef0 <_calloc_r>
 800c3b6:	69e3      	ldr	r3, [r4, #28]
 800c3b8:	60f0      	str	r0, [r6, #12]
 800c3ba:	68db      	ldr	r3, [r3, #12]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d1e4      	bne.n	800c38a <_Balloc+0x2e>
 800c3c0:	2000      	movs	r0, #0
 800c3c2:	bd70      	pop	{r4, r5, r6, pc}
 800c3c4:	6802      	ldr	r2, [r0, #0]
 800c3c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c3d0:	e7f7      	b.n	800c3c2 <_Balloc+0x66>
 800c3d2:	bf00      	nop
 800c3d4:	0800e7d9 	.word	0x0800e7d9
 800c3d8:	0800e859 	.word	0x0800e859

0800c3dc <_Bfree>:
 800c3dc:	b570      	push	{r4, r5, r6, lr}
 800c3de:	69c6      	ldr	r6, [r0, #28]
 800c3e0:	4605      	mov	r5, r0
 800c3e2:	460c      	mov	r4, r1
 800c3e4:	b976      	cbnz	r6, 800c404 <_Bfree+0x28>
 800c3e6:	2010      	movs	r0, #16
 800c3e8:	f7ff ff04 	bl	800c1f4 <malloc>
 800c3ec:	4602      	mov	r2, r0
 800c3ee:	61e8      	str	r0, [r5, #28]
 800c3f0:	b920      	cbnz	r0, 800c3fc <_Bfree+0x20>
 800c3f2:	4b09      	ldr	r3, [pc, #36]	; (800c418 <_Bfree+0x3c>)
 800c3f4:	4809      	ldr	r0, [pc, #36]	; (800c41c <_Bfree+0x40>)
 800c3f6:	218f      	movs	r1, #143	; 0x8f
 800c3f8:	f000 fd5c 	bl	800ceb4 <__assert_func>
 800c3fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c400:	6006      	str	r6, [r0, #0]
 800c402:	60c6      	str	r6, [r0, #12]
 800c404:	b13c      	cbz	r4, 800c416 <_Bfree+0x3a>
 800c406:	69eb      	ldr	r3, [r5, #28]
 800c408:	6862      	ldr	r2, [r4, #4]
 800c40a:	68db      	ldr	r3, [r3, #12]
 800c40c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c410:	6021      	str	r1, [r4, #0]
 800c412:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c416:	bd70      	pop	{r4, r5, r6, pc}
 800c418:	0800e7d9 	.word	0x0800e7d9
 800c41c:	0800e859 	.word	0x0800e859

0800c420 <__multadd>:
 800c420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c424:	690d      	ldr	r5, [r1, #16]
 800c426:	4607      	mov	r7, r0
 800c428:	460c      	mov	r4, r1
 800c42a:	461e      	mov	r6, r3
 800c42c:	f101 0c14 	add.w	ip, r1, #20
 800c430:	2000      	movs	r0, #0
 800c432:	f8dc 3000 	ldr.w	r3, [ip]
 800c436:	b299      	uxth	r1, r3
 800c438:	fb02 6101 	mla	r1, r2, r1, r6
 800c43c:	0c1e      	lsrs	r6, r3, #16
 800c43e:	0c0b      	lsrs	r3, r1, #16
 800c440:	fb02 3306 	mla	r3, r2, r6, r3
 800c444:	b289      	uxth	r1, r1
 800c446:	3001      	adds	r0, #1
 800c448:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c44c:	4285      	cmp	r5, r0
 800c44e:	f84c 1b04 	str.w	r1, [ip], #4
 800c452:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c456:	dcec      	bgt.n	800c432 <__multadd+0x12>
 800c458:	b30e      	cbz	r6, 800c49e <__multadd+0x7e>
 800c45a:	68a3      	ldr	r3, [r4, #8]
 800c45c:	42ab      	cmp	r3, r5
 800c45e:	dc19      	bgt.n	800c494 <__multadd+0x74>
 800c460:	6861      	ldr	r1, [r4, #4]
 800c462:	4638      	mov	r0, r7
 800c464:	3101      	adds	r1, #1
 800c466:	f7ff ff79 	bl	800c35c <_Balloc>
 800c46a:	4680      	mov	r8, r0
 800c46c:	b928      	cbnz	r0, 800c47a <__multadd+0x5a>
 800c46e:	4602      	mov	r2, r0
 800c470:	4b0c      	ldr	r3, [pc, #48]	; (800c4a4 <__multadd+0x84>)
 800c472:	480d      	ldr	r0, [pc, #52]	; (800c4a8 <__multadd+0x88>)
 800c474:	21ba      	movs	r1, #186	; 0xba
 800c476:	f000 fd1d 	bl	800ceb4 <__assert_func>
 800c47a:	6922      	ldr	r2, [r4, #16]
 800c47c:	3202      	adds	r2, #2
 800c47e:	f104 010c 	add.w	r1, r4, #12
 800c482:	0092      	lsls	r2, r2, #2
 800c484:	300c      	adds	r0, #12
 800c486:	f7fe ffe1 	bl	800b44c <memcpy>
 800c48a:	4621      	mov	r1, r4
 800c48c:	4638      	mov	r0, r7
 800c48e:	f7ff ffa5 	bl	800c3dc <_Bfree>
 800c492:	4644      	mov	r4, r8
 800c494:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c498:	3501      	adds	r5, #1
 800c49a:	615e      	str	r6, [r3, #20]
 800c49c:	6125      	str	r5, [r4, #16]
 800c49e:	4620      	mov	r0, r4
 800c4a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4a4:	0800e848 	.word	0x0800e848
 800c4a8:	0800e859 	.word	0x0800e859

0800c4ac <__hi0bits>:
 800c4ac:	0c03      	lsrs	r3, r0, #16
 800c4ae:	041b      	lsls	r3, r3, #16
 800c4b0:	b9d3      	cbnz	r3, 800c4e8 <__hi0bits+0x3c>
 800c4b2:	0400      	lsls	r0, r0, #16
 800c4b4:	2310      	movs	r3, #16
 800c4b6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c4ba:	bf04      	itt	eq
 800c4bc:	0200      	lsleq	r0, r0, #8
 800c4be:	3308      	addeq	r3, #8
 800c4c0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c4c4:	bf04      	itt	eq
 800c4c6:	0100      	lsleq	r0, r0, #4
 800c4c8:	3304      	addeq	r3, #4
 800c4ca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c4ce:	bf04      	itt	eq
 800c4d0:	0080      	lsleq	r0, r0, #2
 800c4d2:	3302      	addeq	r3, #2
 800c4d4:	2800      	cmp	r0, #0
 800c4d6:	db05      	blt.n	800c4e4 <__hi0bits+0x38>
 800c4d8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c4dc:	f103 0301 	add.w	r3, r3, #1
 800c4e0:	bf08      	it	eq
 800c4e2:	2320      	moveq	r3, #32
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	4770      	bx	lr
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	e7e4      	b.n	800c4b6 <__hi0bits+0xa>

0800c4ec <__lo0bits>:
 800c4ec:	6803      	ldr	r3, [r0, #0]
 800c4ee:	f013 0207 	ands.w	r2, r3, #7
 800c4f2:	d00c      	beq.n	800c50e <__lo0bits+0x22>
 800c4f4:	07d9      	lsls	r1, r3, #31
 800c4f6:	d422      	bmi.n	800c53e <__lo0bits+0x52>
 800c4f8:	079a      	lsls	r2, r3, #30
 800c4fa:	bf49      	itett	mi
 800c4fc:	085b      	lsrmi	r3, r3, #1
 800c4fe:	089b      	lsrpl	r3, r3, #2
 800c500:	6003      	strmi	r3, [r0, #0]
 800c502:	2201      	movmi	r2, #1
 800c504:	bf5c      	itt	pl
 800c506:	6003      	strpl	r3, [r0, #0]
 800c508:	2202      	movpl	r2, #2
 800c50a:	4610      	mov	r0, r2
 800c50c:	4770      	bx	lr
 800c50e:	b299      	uxth	r1, r3
 800c510:	b909      	cbnz	r1, 800c516 <__lo0bits+0x2a>
 800c512:	0c1b      	lsrs	r3, r3, #16
 800c514:	2210      	movs	r2, #16
 800c516:	b2d9      	uxtb	r1, r3
 800c518:	b909      	cbnz	r1, 800c51e <__lo0bits+0x32>
 800c51a:	3208      	adds	r2, #8
 800c51c:	0a1b      	lsrs	r3, r3, #8
 800c51e:	0719      	lsls	r1, r3, #28
 800c520:	bf04      	itt	eq
 800c522:	091b      	lsreq	r3, r3, #4
 800c524:	3204      	addeq	r2, #4
 800c526:	0799      	lsls	r1, r3, #30
 800c528:	bf04      	itt	eq
 800c52a:	089b      	lsreq	r3, r3, #2
 800c52c:	3202      	addeq	r2, #2
 800c52e:	07d9      	lsls	r1, r3, #31
 800c530:	d403      	bmi.n	800c53a <__lo0bits+0x4e>
 800c532:	085b      	lsrs	r3, r3, #1
 800c534:	f102 0201 	add.w	r2, r2, #1
 800c538:	d003      	beq.n	800c542 <__lo0bits+0x56>
 800c53a:	6003      	str	r3, [r0, #0]
 800c53c:	e7e5      	b.n	800c50a <__lo0bits+0x1e>
 800c53e:	2200      	movs	r2, #0
 800c540:	e7e3      	b.n	800c50a <__lo0bits+0x1e>
 800c542:	2220      	movs	r2, #32
 800c544:	e7e1      	b.n	800c50a <__lo0bits+0x1e>
	...

0800c548 <__i2b>:
 800c548:	b510      	push	{r4, lr}
 800c54a:	460c      	mov	r4, r1
 800c54c:	2101      	movs	r1, #1
 800c54e:	f7ff ff05 	bl	800c35c <_Balloc>
 800c552:	4602      	mov	r2, r0
 800c554:	b928      	cbnz	r0, 800c562 <__i2b+0x1a>
 800c556:	4b05      	ldr	r3, [pc, #20]	; (800c56c <__i2b+0x24>)
 800c558:	4805      	ldr	r0, [pc, #20]	; (800c570 <__i2b+0x28>)
 800c55a:	f240 1145 	movw	r1, #325	; 0x145
 800c55e:	f000 fca9 	bl	800ceb4 <__assert_func>
 800c562:	2301      	movs	r3, #1
 800c564:	6144      	str	r4, [r0, #20]
 800c566:	6103      	str	r3, [r0, #16]
 800c568:	bd10      	pop	{r4, pc}
 800c56a:	bf00      	nop
 800c56c:	0800e848 	.word	0x0800e848
 800c570:	0800e859 	.word	0x0800e859

0800c574 <__multiply>:
 800c574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c578:	4691      	mov	r9, r2
 800c57a:	690a      	ldr	r2, [r1, #16]
 800c57c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c580:	429a      	cmp	r2, r3
 800c582:	bfb8      	it	lt
 800c584:	460b      	movlt	r3, r1
 800c586:	460c      	mov	r4, r1
 800c588:	bfbc      	itt	lt
 800c58a:	464c      	movlt	r4, r9
 800c58c:	4699      	movlt	r9, r3
 800c58e:	6927      	ldr	r7, [r4, #16]
 800c590:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c594:	68a3      	ldr	r3, [r4, #8]
 800c596:	6861      	ldr	r1, [r4, #4]
 800c598:	eb07 060a 	add.w	r6, r7, sl
 800c59c:	42b3      	cmp	r3, r6
 800c59e:	b085      	sub	sp, #20
 800c5a0:	bfb8      	it	lt
 800c5a2:	3101      	addlt	r1, #1
 800c5a4:	f7ff feda 	bl	800c35c <_Balloc>
 800c5a8:	b930      	cbnz	r0, 800c5b8 <__multiply+0x44>
 800c5aa:	4602      	mov	r2, r0
 800c5ac:	4b44      	ldr	r3, [pc, #272]	; (800c6c0 <__multiply+0x14c>)
 800c5ae:	4845      	ldr	r0, [pc, #276]	; (800c6c4 <__multiply+0x150>)
 800c5b0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c5b4:	f000 fc7e 	bl	800ceb4 <__assert_func>
 800c5b8:	f100 0514 	add.w	r5, r0, #20
 800c5bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c5c0:	462b      	mov	r3, r5
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	4543      	cmp	r3, r8
 800c5c6:	d321      	bcc.n	800c60c <__multiply+0x98>
 800c5c8:	f104 0314 	add.w	r3, r4, #20
 800c5cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c5d0:	f109 0314 	add.w	r3, r9, #20
 800c5d4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c5d8:	9202      	str	r2, [sp, #8]
 800c5da:	1b3a      	subs	r2, r7, r4
 800c5dc:	3a15      	subs	r2, #21
 800c5de:	f022 0203 	bic.w	r2, r2, #3
 800c5e2:	3204      	adds	r2, #4
 800c5e4:	f104 0115 	add.w	r1, r4, #21
 800c5e8:	428f      	cmp	r7, r1
 800c5ea:	bf38      	it	cc
 800c5ec:	2204      	movcc	r2, #4
 800c5ee:	9201      	str	r2, [sp, #4]
 800c5f0:	9a02      	ldr	r2, [sp, #8]
 800c5f2:	9303      	str	r3, [sp, #12]
 800c5f4:	429a      	cmp	r2, r3
 800c5f6:	d80c      	bhi.n	800c612 <__multiply+0x9e>
 800c5f8:	2e00      	cmp	r6, #0
 800c5fa:	dd03      	ble.n	800c604 <__multiply+0x90>
 800c5fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c600:	2b00      	cmp	r3, #0
 800c602:	d05b      	beq.n	800c6bc <__multiply+0x148>
 800c604:	6106      	str	r6, [r0, #16]
 800c606:	b005      	add	sp, #20
 800c608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c60c:	f843 2b04 	str.w	r2, [r3], #4
 800c610:	e7d8      	b.n	800c5c4 <__multiply+0x50>
 800c612:	f8b3 a000 	ldrh.w	sl, [r3]
 800c616:	f1ba 0f00 	cmp.w	sl, #0
 800c61a:	d024      	beq.n	800c666 <__multiply+0xf2>
 800c61c:	f104 0e14 	add.w	lr, r4, #20
 800c620:	46a9      	mov	r9, r5
 800c622:	f04f 0c00 	mov.w	ip, #0
 800c626:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c62a:	f8d9 1000 	ldr.w	r1, [r9]
 800c62e:	fa1f fb82 	uxth.w	fp, r2
 800c632:	b289      	uxth	r1, r1
 800c634:	fb0a 110b 	mla	r1, sl, fp, r1
 800c638:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c63c:	f8d9 2000 	ldr.w	r2, [r9]
 800c640:	4461      	add	r1, ip
 800c642:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c646:	fb0a c20b 	mla	r2, sl, fp, ip
 800c64a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c64e:	b289      	uxth	r1, r1
 800c650:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c654:	4577      	cmp	r7, lr
 800c656:	f849 1b04 	str.w	r1, [r9], #4
 800c65a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c65e:	d8e2      	bhi.n	800c626 <__multiply+0xb2>
 800c660:	9a01      	ldr	r2, [sp, #4]
 800c662:	f845 c002 	str.w	ip, [r5, r2]
 800c666:	9a03      	ldr	r2, [sp, #12]
 800c668:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c66c:	3304      	adds	r3, #4
 800c66e:	f1b9 0f00 	cmp.w	r9, #0
 800c672:	d021      	beq.n	800c6b8 <__multiply+0x144>
 800c674:	6829      	ldr	r1, [r5, #0]
 800c676:	f104 0c14 	add.w	ip, r4, #20
 800c67a:	46ae      	mov	lr, r5
 800c67c:	f04f 0a00 	mov.w	sl, #0
 800c680:	f8bc b000 	ldrh.w	fp, [ip]
 800c684:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c688:	fb09 220b 	mla	r2, r9, fp, r2
 800c68c:	4452      	add	r2, sl
 800c68e:	b289      	uxth	r1, r1
 800c690:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c694:	f84e 1b04 	str.w	r1, [lr], #4
 800c698:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c69c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c6a0:	f8be 1000 	ldrh.w	r1, [lr]
 800c6a4:	fb09 110a 	mla	r1, r9, sl, r1
 800c6a8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c6ac:	4567      	cmp	r7, ip
 800c6ae:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c6b2:	d8e5      	bhi.n	800c680 <__multiply+0x10c>
 800c6b4:	9a01      	ldr	r2, [sp, #4]
 800c6b6:	50a9      	str	r1, [r5, r2]
 800c6b8:	3504      	adds	r5, #4
 800c6ba:	e799      	b.n	800c5f0 <__multiply+0x7c>
 800c6bc:	3e01      	subs	r6, #1
 800c6be:	e79b      	b.n	800c5f8 <__multiply+0x84>
 800c6c0:	0800e848 	.word	0x0800e848
 800c6c4:	0800e859 	.word	0x0800e859

0800c6c8 <__pow5mult>:
 800c6c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6cc:	4615      	mov	r5, r2
 800c6ce:	f012 0203 	ands.w	r2, r2, #3
 800c6d2:	4606      	mov	r6, r0
 800c6d4:	460f      	mov	r7, r1
 800c6d6:	d007      	beq.n	800c6e8 <__pow5mult+0x20>
 800c6d8:	4c25      	ldr	r4, [pc, #148]	; (800c770 <__pow5mult+0xa8>)
 800c6da:	3a01      	subs	r2, #1
 800c6dc:	2300      	movs	r3, #0
 800c6de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c6e2:	f7ff fe9d 	bl	800c420 <__multadd>
 800c6e6:	4607      	mov	r7, r0
 800c6e8:	10ad      	asrs	r5, r5, #2
 800c6ea:	d03d      	beq.n	800c768 <__pow5mult+0xa0>
 800c6ec:	69f4      	ldr	r4, [r6, #28]
 800c6ee:	b97c      	cbnz	r4, 800c710 <__pow5mult+0x48>
 800c6f0:	2010      	movs	r0, #16
 800c6f2:	f7ff fd7f 	bl	800c1f4 <malloc>
 800c6f6:	4602      	mov	r2, r0
 800c6f8:	61f0      	str	r0, [r6, #28]
 800c6fa:	b928      	cbnz	r0, 800c708 <__pow5mult+0x40>
 800c6fc:	4b1d      	ldr	r3, [pc, #116]	; (800c774 <__pow5mult+0xac>)
 800c6fe:	481e      	ldr	r0, [pc, #120]	; (800c778 <__pow5mult+0xb0>)
 800c700:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c704:	f000 fbd6 	bl	800ceb4 <__assert_func>
 800c708:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c70c:	6004      	str	r4, [r0, #0]
 800c70e:	60c4      	str	r4, [r0, #12]
 800c710:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c714:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c718:	b94c      	cbnz	r4, 800c72e <__pow5mult+0x66>
 800c71a:	f240 2171 	movw	r1, #625	; 0x271
 800c71e:	4630      	mov	r0, r6
 800c720:	f7ff ff12 	bl	800c548 <__i2b>
 800c724:	2300      	movs	r3, #0
 800c726:	f8c8 0008 	str.w	r0, [r8, #8]
 800c72a:	4604      	mov	r4, r0
 800c72c:	6003      	str	r3, [r0, #0]
 800c72e:	f04f 0900 	mov.w	r9, #0
 800c732:	07eb      	lsls	r3, r5, #31
 800c734:	d50a      	bpl.n	800c74c <__pow5mult+0x84>
 800c736:	4639      	mov	r1, r7
 800c738:	4622      	mov	r2, r4
 800c73a:	4630      	mov	r0, r6
 800c73c:	f7ff ff1a 	bl	800c574 <__multiply>
 800c740:	4639      	mov	r1, r7
 800c742:	4680      	mov	r8, r0
 800c744:	4630      	mov	r0, r6
 800c746:	f7ff fe49 	bl	800c3dc <_Bfree>
 800c74a:	4647      	mov	r7, r8
 800c74c:	106d      	asrs	r5, r5, #1
 800c74e:	d00b      	beq.n	800c768 <__pow5mult+0xa0>
 800c750:	6820      	ldr	r0, [r4, #0]
 800c752:	b938      	cbnz	r0, 800c764 <__pow5mult+0x9c>
 800c754:	4622      	mov	r2, r4
 800c756:	4621      	mov	r1, r4
 800c758:	4630      	mov	r0, r6
 800c75a:	f7ff ff0b 	bl	800c574 <__multiply>
 800c75e:	6020      	str	r0, [r4, #0]
 800c760:	f8c0 9000 	str.w	r9, [r0]
 800c764:	4604      	mov	r4, r0
 800c766:	e7e4      	b.n	800c732 <__pow5mult+0x6a>
 800c768:	4638      	mov	r0, r7
 800c76a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c76e:	bf00      	nop
 800c770:	0800e9a8 	.word	0x0800e9a8
 800c774:	0800e7d9 	.word	0x0800e7d9
 800c778:	0800e859 	.word	0x0800e859

0800c77c <__lshift>:
 800c77c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c780:	460c      	mov	r4, r1
 800c782:	6849      	ldr	r1, [r1, #4]
 800c784:	6923      	ldr	r3, [r4, #16]
 800c786:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c78a:	68a3      	ldr	r3, [r4, #8]
 800c78c:	4607      	mov	r7, r0
 800c78e:	4691      	mov	r9, r2
 800c790:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c794:	f108 0601 	add.w	r6, r8, #1
 800c798:	42b3      	cmp	r3, r6
 800c79a:	db0b      	blt.n	800c7b4 <__lshift+0x38>
 800c79c:	4638      	mov	r0, r7
 800c79e:	f7ff fddd 	bl	800c35c <_Balloc>
 800c7a2:	4605      	mov	r5, r0
 800c7a4:	b948      	cbnz	r0, 800c7ba <__lshift+0x3e>
 800c7a6:	4602      	mov	r2, r0
 800c7a8:	4b28      	ldr	r3, [pc, #160]	; (800c84c <__lshift+0xd0>)
 800c7aa:	4829      	ldr	r0, [pc, #164]	; (800c850 <__lshift+0xd4>)
 800c7ac:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c7b0:	f000 fb80 	bl	800ceb4 <__assert_func>
 800c7b4:	3101      	adds	r1, #1
 800c7b6:	005b      	lsls	r3, r3, #1
 800c7b8:	e7ee      	b.n	800c798 <__lshift+0x1c>
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	f100 0114 	add.w	r1, r0, #20
 800c7c0:	f100 0210 	add.w	r2, r0, #16
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	4553      	cmp	r3, sl
 800c7c8:	db33      	blt.n	800c832 <__lshift+0xb6>
 800c7ca:	6920      	ldr	r0, [r4, #16]
 800c7cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c7d0:	f104 0314 	add.w	r3, r4, #20
 800c7d4:	f019 091f 	ands.w	r9, r9, #31
 800c7d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c7dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c7e0:	d02b      	beq.n	800c83a <__lshift+0xbe>
 800c7e2:	f1c9 0e20 	rsb	lr, r9, #32
 800c7e6:	468a      	mov	sl, r1
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	6818      	ldr	r0, [r3, #0]
 800c7ec:	fa00 f009 	lsl.w	r0, r0, r9
 800c7f0:	4310      	orrs	r0, r2
 800c7f2:	f84a 0b04 	str.w	r0, [sl], #4
 800c7f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7fa:	459c      	cmp	ip, r3
 800c7fc:	fa22 f20e 	lsr.w	r2, r2, lr
 800c800:	d8f3      	bhi.n	800c7ea <__lshift+0x6e>
 800c802:	ebac 0304 	sub.w	r3, ip, r4
 800c806:	3b15      	subs	r3, #21
 800c808:	f023 0303 	bic.w	r3, r3, #3
 800c80c:	3304      	adds	r3, #4
 800c80e:	f104 0015 	add.w	r0, r4, #21
 800c812:	4584      	cmp	ip, r0
 800c814:	bf38      	it	cc
 800c816:	2304      	movcc	r3, #4
 800c818:	50ca      	str	r2, [r1, r3]
 800c81a:	b10a      	cbz	r2, 800c820 <__lshift+0xa4>
 800c81c:	f108 0602 	add.w	r6, r8, #2
 800c820:	3e01      	subs	r6, #1
 800c822:	4638      	mov	r0, r7
 800c824:	612e      	str	r6, [r5, #16]
 800c826:	4621      	mov	r1, r4
 800c828:	f7ff fdd8 	bl	800c3dc <_Bfree>
 800c82c:	4628      	mov	r0, r5
 800c82e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c832:	f842 0f04 	str.w	r0, [r2, #4]!
 800c836:	3301      	adds	r3, #1
 800c838:	e7c5      	b.n	800c7c6 <__lshift+0x4a>
 800c83a:	3904      	subs	r1, #4
 800c83c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c840:	f841 2f04 	str.w	r2, [r1, #4]!
 800c844:	459c      	cmp	ip, r3
 800c846:	d8f9      	bhi.n	800c83c <__lshift+0xc0>
 800c848:	e7ea      	b.n	800c820 <__lshift+0xa4>
 800c84a:	bf00      	nop
 800c84c:	0800e848 	.word	0x0800e848
 800c850:	0800e859 	.word	0x0800e859

0800c854 <__mcmp>:
 800c854:	b530      	push	{r4, r5, lr}
 800c856:	6902      	ldr	r2, [r0, #16]
 800c858:	690c      	ldr	r4, [r1, #16]
 800c85a:	1b12      	subs	r2, r2, r4
 800c85c:	d10e      	bne.n	800c87c <__mcmp+0x28>
 800c85e:	f100 0314 	add.w	r3, r0, #20
 800c862:	3114      	adds	r1, #20
 800c864:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c868:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c86c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c870:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c874:	42a5      	cmp	r5, r4
 800c876:	d003      	beq.n	800c880 <__mcmp+0x2c>
 800c878:	d305      	bcc.n	800c886 <__mcmp+0x32>
 800c87a:	2201      	movs	r2, #1
 800c87c:	4610      	mov	r0, r2
 800c87e:	bd30      	pop	{r4, r5, pc}
 800c880:	4283      	cmp	r3, r0
 800c882:	d3f3      	bcc.n	800c86c <__mcmp+0x18>
 800c884:	e7fa      	b.n	800c87c <__mcmp+0x28>
 800c886:	f04f 32ff 	mov.w	r2, #4294967295
 800c88a:	e7f7      	b.n	800c87c <__mcmp+0x28>

0800c88c <__mdiff>:
 800c88c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c890:	460c      	mov	r4, r1
 800c892:	4606      	mov	r6, r0
 800c894:	4611      	mov	r1, r2
 800c896:	4620      	mov	r0, r4
 800c898:	4690      	mov	r8, r2
 800c89a:	f7ff ffdb 	bl	800c854 <__mcmp>
 800c89e:	1e05      	subs	r5, r0, #0
 800c8a0:	d110      	bne.n	800c8c4 <__mdiff+0x38>
 800c8a2:	4629      	mov	r1, r5
 800c8a4:	4630      	mov	r0, r6
 800c8a6:	f7ff fd59 	bl	800c35c <_Balloc>
 800c8aa:	b930      	cbnz	r0, 800c8ba <__mdiff+0x2e>
 800c8ac:	4b3a      	ldr	r3, [pc, #232]	; (800c998 <__mdiff+0x10c>)
 800c8ae:	4602      	mov	r2, r0
 800c8b0:	f240 2137 	movw	r1, #567	; 0x237
 800c8b4:	4839      	ldr	r0, [pc, #228]	; (800c99c <__mdiff+0x110>)
 800c8b6:	f000 fafd 	bl	800ceb4 <__assert_func>
 800c8ba:	2301      	movs	r3, #1
 800c8bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c8c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8c4:	bfa4      	itt	ge
 800c8c6:	4643      	movge	r3, r8
 800c8c8:	46a0      	movge	r8, r4
 800c8ca:	4630      	mov	r0, r6
 800c8cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c8d0:	bfa6      	itte	ge
 800c8d2:	461c      	movge	r4, r3
 800c8d4:	2500      	movge	r5, #0
 800c8d6:	2501      	movlt	r5, #1
 800c8d8:	f7ff fd40 	bl	800c35c <_Balloc>
 800c8dc:	b920      	cbnz	r0, 800c8e8 <__mdiff+0x5c>
 800c8de:	4b2e      	ldr	r3, [pc, #184]	; (800c998 <__mdiff+0x10c>)
 800c8e0:	4602      	mov	r2, r0
 800c8e2:	f240 2145 	movw	r1, #581	; 0x245
 800c8e6:	e7e5      	b.n	800c8b4 <__mdiff+0x28>
 800c8e8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c8ec:	6926      	ldr	r6, [r4, #16]
 800c8ee:	60c5      	str	r5, [r0, #12]
 800c8f0:	f104 0914 	add.w	r9, r4, #20
 800c8f4:	f108 0514 	add.w	r5, r8, #20
 800c8f8:	f100 0e14 	add.w	lr, r0, #20
 800c8fc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c900:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c904:	f108 0210 	add.w	r2, r8, #16
 800c908:	46f2      	mov	sl, lr
 800c90a:	2100      	movs	r1, #0
 800c90c:	f859 3b04 	ldr.w	r3, [r9], #4
 800c910:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c914:	fa11 f88b 	uxtah	r8, r1, fp
 800c918:	b299      	uxth	r1, r3
 800c91a:	0c1b      	lsrs	r3, r3, #16
 800c91c:	eba8 0801 	sub.w	r8, r8, r1
 800c920:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c924:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c928:	fa1f f888 	uxth.w	r8, r8
 800c92c:	1419      	asrs	r1, r3, #16
 800c92e:	454e      	cmp	r6, r9
 800c930:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c934:	f84a 3b04 	str.w	r3, [sl], #4
 800c938:	d8e8      	bhi.n	800c90c <__mdiff+0x80>
 800c93a:	1b33      	subs	r3, r6, r4
 800c93c:	3b15      	subs	r3, #21
 800c93e:	f023 0303 	bic.w	r3, r3, #3
 800c942:	3304      	adds	r3, #4
 800c944:	3415      	adds	r4, #21
 800c946:	42a6      	cmp	r6, r4
 800c948:	bf38      	it	cc
 800c94a:	2304      	movcc	r3, #4
 800c94c:	441d      	add	r5, r3
 800c94e:	4473      	add	r3, lr
 800c950:	469e      	mov	lr, r3
 800c952:	462e      	mov	r6, r5
 800c954:	4566      	cmp	r6, ip
 800c956:	d30e      	bcc.n	800c976 <__mdiff+0xea>
 800c958:	f10c 0203 	add.w	r2, ip, #3
 800c95c:	1b52      	subs	r2, r2, r5
 800c95e:	f022 0203 	bic.w	r2, r2, #3
 800c962:	3d03      	subs	r5, #3
 800c964:	45ac      	cmp	ip, r5
 800c966:	bf38      	it	cc
 800c968:	2200      	movcc	r2, #0
 800c96a:	4413      	add	r3, r2
 800c96c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c970:	b17a      	cbz	r2, 800c992 <__mdiff+0x106>
 800c972:	6107      	str	r7, [r0, #16]
 800c974:	e7a4      	b.n	800c8c0 <__mdiff+0x34>
 800c976:	f856 8b04 	ldr.w	r8, [r6], #4
 800c97a:	fa11 f288 	uxtah	r2, r1, r8
 800c97e:	1414      	asrs	r4, r2, #16
 800c980:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c984:	b292      	uxth	r2, r2
 800c986:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c98a:	f84e 2b04 	str.w	r2, [lr], #4
 800c98e:	1421      	asrs	r1, r4, #16
 800c990:	e7e0      	b.n	800c954 <__mdiff+0xc8>
 800c992:	3f01      	subs	r7, #1
 800c994:	e7ea      	b.n	800c96c <__mdiff+0xe0>
 800c996:	bf00      	nop
 800c998:	0800e848 	.word	0x0800e848
 800c99c:	0800e859 	.word	0x0800e859

0800c9a0 <__d2b>:
 800c9a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c9a4:	460f      	mov	r7, r1
 800c9a6:	2101      	movs	r1, #1
 800c9a8:	ec59 8b10 	vmov	r8, r9, d0
 800c9ac:	4616      	mov	r6, r2
 800c9ae:	f7ff fcd5 	bl	800c35c <_Balloc>
 800c9b2:	4604      	mov	r4, r0
 800c9b4:	b930      	cbnz	r0, 800c9c4 <__d2b+0x24>
 800c9b6:	4602      	mov	r2, r0
 800c9b8:	4b24      	ldr	r3, [pc, #144]	; (800ca4c <__d2b+0xac>)
 800c9ba:	4825      	ldr	r0, [pc, #148]	; (800ca50 <__d2b+0xb0>)
 800c9bc:	f240 310f 	movw	r1, #783	; 0x30f
 800c9c0:	f000 fa78 	bl	800ceb4 <__assert_func>
 800c9c4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c9c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c9cc:	bb2d      	cbnz	r5, 800ca1a <__d2b+0x7a>
 800c9ce:	9301      	str	r3, [sp, #4]
 800c9d0:	f1b8 0300 	subs.w	r3, r8, #0
 800c9d4:	d026      	beq.n	800ca24 <__d2b+0x84>
 800c9d6:	4668      	mov	r0, sp
 800c9d8:	9300      	str	r3, [sp, #0]
 800c9da:	f7ff fd87 	bl	800c4ec <__lo0bits>
 800c9de:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c9e2:	b1e8      	cbz	r0, 800ca20 <__d2b+0x80>
 800c9e4:	f1c0 0320 	rsb	r3, r0, #32
 800c9e8:	fa02 f303 	lsl.w	r3, r2, r3
 800c9ec:	430b      	orrs	r3, r1
 800c9ee:	40c2      	lsrs	r2, r0
 800c9f0:	6163      	str	r3, [r4, #20]
 800c9f2:	9201      	str	r2, [sp, #4]
 800c9f4:	9b01      	ldr	r3, [sp, #4]
 800c9f6:	61a3      	str	r3, [r4, #24]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	bf14      	ite	ne
 800c9fc:	2202      	movne	r2, #2
 800c9fe:	2201      	moveq	r2, #1
 800ca00:	6122      	str	r2, [r4, #16]
 800ca02:	b1bd      	cbz	r5, 800ca34 <__d2b+0x94>
 800ca04:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ca08:	4405      	add	r5, r0
 800ca0a:	603d      	str	r5, [r7, #0]
 800ca0c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ca10:	6030      	str	r0, [r6, #0]
 800ca12:	4620      	mov	r0, r4
 800ca14:	b003      	add	sp, #12
 800ca16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ca1e:	e7d6      	b.n	800c9ce <__d2b+0x2e>
 800ca20:	6161      	str	r1, [r4, #20]
 800ca22:	e7e7      	b.n	800c9f4 <__d2b+0x54>
 800ca24:	a801      	add	r0, sp, #4
 800ca26:	f7ff fd61 	bl	800c4ec <__lo0bits>
 800ca2a:	9b01      	ldr	r3, [sp, #4]
 800ca2c:	6163      	str	r3, [r4, #20]
 800ca2e:	3020      	adds	r0, #32
 800ca30:	2201      	movs	r2, #1
 800ca32:	e7e5      	b.n	800ca00 <__d2b+0x60>
 800ca34:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ca38:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ca3c:	6038      	str	r0, [r7, #0]
 800ca3e:	6918      	ldr	r0, [r3, #16]
 800ca40:	f7ff fd34 	bl	800c4ac <__hi0bits>
 800ca44:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ca48:	e7e2      	b.n	800ca10 <__d2b+0x70>
 800ca4a:	bf00      	nop
 800ca4c:	0800e848 	.word	0x0800e848
 800ca50:	0800e859 	.word	0x0800e859

0800ca54 <__ssputs_r>:
 800ca54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca58:	688e      	ldr	r6, [r1, #8]
 800ca5a:	461f      	mov	r7, r3
 800ca5c:	42be      	cmp	r6, r7
 800ca5e:	680b      	ldr	r3, [r1, #0]
 800ca60:	4682      	mov	sl, r0
 800ca62:	460c      	mov	r4, r1
 800ca64:	4690      	mov	r8, r2
 800ca66:	d82c      	bhi.n	800cac2 <__ssputs_r+0x6e>
 800ca68:	898a      	ldrh	r2, [r1, #12]
 800ca6a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ca6e:	d026      	beq.n	800cabe <__ssputs_r+0x6a>
 800ca70:	6965      	ldr	r5, [r4, #20]
 800ca72:	6909      	ldr	r1, [r1, #16]
 800ca74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ca78:	eba3 0901 	sub.w	r9, r3, r1
 800ca7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ca80:	1c7b      	adds	r3, r7, #1
 800ca82:	444b      	add	r3, r9
 800ca84:	106d      	asrs	r5, r5, #1
 800ca86:	429d      	cmp	r5, r3
 800ca88:	bf38      	it	cc
 800ca8a:	461d      	movcc	r5, r3
 800ca8c:	0553      	lsls	r3, r2, #21
 800ca8e:	d527      	bpl.n	800cae0 <__ssputs_r+0x8c>
 800ca90:	4629      	mov	r1, r5
 800ca92:	f7ff fbd7 	bl	800c244 <_malloc_r>
 800ca96:	4606      	mov	r6, r0
 800ca98:	b360      	cbz	r0, 800caf4 <__ssputs_r+0xa0>
 800ca9a:	6921      	ldr	r1, [r4, #16]
 800ca9c:	464a      	mov	r2, r9
 800ca9e:	f7fe fcd5 	bl	800b44c <memcpy>
 800caa2:	89a3      	ldrh	r3, [r4, #12]
 800caa4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800caa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800caac:	81a3      	strh	r3, [r4, #12]
 800caae:	6126      	str	r6, [r4, #16]
 800cab0:	6165      	str	r5, [r4, #20]
 800cab2:	444e      	add	r6, r9
 800cab4:	eba5 0509 	sub.w	r5, r5, r9
 800cab8:	6026      	str	r6, [r4, #0]
 800caba:	60a5      	str	r5, [r4, #8]
 800cabc:	463e      	mov	r6, r7
 800cabe:	42be      	cmp	r6, r7
 800cac0:	d900      	bls.n	800cac4 <__ssputs_r+0x70>
 800cac2:	463e      	mov	r6, r7
 800cac4:	6820      	ldr	r0, [r4, #0]
 800cac6:	4632      	mov	r2, r6
 800cac8:	4641      	mov	r1, r8
 800caca:	f000 f9c9 	bl	800ce60 <memmove>
 800cace:	68a3      	ldr	r3, [r4, #8]
 800cad0:	1b9b      	subs	r3, r3, r6
 800cad2:	60a3      	str	r3, [r4, #8]
 800cad4:	6823      	ldr	r3, [r4, #0]
 800cad6:	4433      	add	r3, r6
 800cad8:	6023      	str	r3, [r4, #0]
 800cada:	2000      	movs	r0, #0
 800cadc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cae0:	462a      	mov	r2, r5
 800cae2:	f000 fa2d 	bl	800cf40 <_realloc_r>
 800cae6:	4606      	mov	r6, r0
 800cae8:	2800      	cmp	r0, #0
 800caea:	d1e0      	bne.n	800caae <__ssputs_r+0x5a>
 800caec:	6921      	ldr	r1, [r4, #16]
 800caee:	4650      	mov	r0, sl
 800caf0:	f7ff fb34 	bl	800c15c <_free_r>
 800caf4:	230c      	movs	r3, #12
 800caf6:	f8ca 3000 	str.w	r3, [sl]
 800cafa:	89a3      	ldrh	r3, [r4, #12]
 800cafc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb00:	81a3      	strh	r3, [r4, #12]
 800cb02:	f04f 30ff 	mov.w	r0, #4294967295
 800cb06:	e7e9      	b.n	800cadc <__ssputs_r+0x88>

0800cb08 <_svfiprintf_r>:
 800cb08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb0c:	4698      	mov	r8, r3
 800cb0e:	898b      	ldrh	r3, [r1, #12]
 800cb10:	061b      	lsls	r3, r3, #24
 800cb12:	b09d      	sub	sp, #116	; 0x74
 800cb14:	4607      	mov	r7, r0
 800cb16:	460d      	mov	r5, r1
 800cb18:	4614      	mov	r4, r2
 800cb1a:	d50e      	bpl.n	800cb3a <_svfiprintf_r+0x32>
 800cb1c:	690b      	ldr	r3, [r1, #16]
 800cb1e:	b963      	cbnz	r3, 800cb3a <_svfiprintf_r+0x32>
 800cb20:	2140      	movs	r1, #64	; 0x40
 800cb22:	f7ff fb8f 	bl	800c244 <_malloc_r>
 800cb26:	6028      	str	r0, [r5, #0]
 800cb28:	6128      	str	r0, [r5, #16]
 800cb2a:	b920      	cbnz	r0, 800cb36 <_svfiprintf_r+0x2e>
 800cb2c:	230c      	movs	r3, #12
 800cb2e:	603b      	str	r3, [r7, #0]
 800cb30:	f04f 30ff 	mov.w	r0, #4294967295
 800cb34:	e0d0      	b.n	800ccd8 <_svfiprintf_r+0x1d0>
 800cb36:	2340      	movs	r3, #64	; 0x40
 800cb38:	616b      	str	r3, [r5, #20]
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	9309      	str	r3, [sp, #36]	; 0x24
 800cb3e:	2320      	movs	r3, #32
 800cb40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cb44:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb48:	2330      	movs	r3, #48	; 0x30
 800cb4a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ccf0 <_svfiprintf_r+0x1e8>
 800cb4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cb52:	f04f 0901 	mov.w	r9, #1
 800cb56:	4623      	mov	r3, r4
 800cb58:	469a      	mov	sl, r3
 800cb5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb5e:	b10a      	cbz	r2, 800cb64 <_svfiprintf_r+0x5c>
 800cb60:	2a25      	cmp	r2, #37	; 0x25
 800cb62:	d1f9      	bne.n	800cb58 <_svfiprintf_r+0x50>
 800cb64:	ebba 0b04 	subs.w	fp, sl, r4
 800cb68:	d00b      	beq.n	800cb82 <_svfiprintf_r+0x7a>
 800cb6a:	465b      	mov	r3, fp
 800cb6c:	4622      	mov	r2, r4
 800cb6e:	4629      	mov	r1, r5
 800cb70:	4638      	mov	r0, r7
 800cb72:	f7ff ff6f 	bl	800ca54 <__ssputs_r>
 800cb76:	3001      	adds	r0, #1
 800cb78:	f000 80a9 	beq.w	800ccce <_svfiprintf_r+0x1c6>
 800cb7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb7e:	445a      	add	r2, fp
 800cb80:	9209      	str	r2, [sp, #36]	; 0x24
 800cb82:	f89a 3000 	ldrb.w	r3, [sl]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	f000 80a1 	beq.w	800ccce <_svfiprintf_r+0x1c6>
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	f04f 32ff 	mov.w	r2, #4294967295
 800cb92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb96:	f10a 0a01 	add.w	sl, sl, #1
 800cb9a:	9304      	str	r3, [sp, #16]
 800cb9c:	9307      	str	r3, [sp, #28]
 800cb9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cba2:	931a      	str	r3, [sp, #104]	; 0x68
 800cba4:	4654      	mov	r4, sl
 800cba6:	2205      	movs	r2, #5
 800cba8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbac:	4850      	ldr	r0, [pc, #320]	; (800ccf0 <_svfiprintf_r+0x1e8>)
 800cbae:	f7f3 fb1f 	bl	80001f0 <memchr>
 800cbb2:	9a04      	ldr	r2, [sp, #16]
 800cbb4:	b9d8      	cbnz	r0, 800cbee <_svfiprintf_r+0xe6>
 800cbb6:	06d0      	lsls	r0, r2, #27
 800cbb8:	bf44      	itt	mi
 800cbba:	2320      	movmi	r3, #32
 800cbbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cbc0:	0711      	lsls	r1, r2, #28
 800cbc2:	bf44      	itt	mi
 800cbc4:	232b      	movmi	r3, #43	; 0x2b
 800cbc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cbca:	f89a 3000 	ldrb.w	r3, [sl]
 800cbce:	2b2a      	cmp	r3, #42	; 0x2a
 800cbd0:	d015      	beq.n	800cbfe <_svfiprintf_r+0xf6>
 800cbd2:	9a07      	ldr	r2, [sp, #28]
 800cbd4:	4654      	mov	r4, sl
 800cbd6:	2000      	movs	r0, #0
 800cbd8:	f04f 0c0a 	mov.w	ip, #10
 800cbdc:	4621      	mov	r1, r4
 800cbde:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cbe2:	3b30      	subs	r3, #48	; 0x30
 800cbe4:	2b09      	cmp	r3, #9
 800cbe6:	d94d      	bls.n	800cc84 <_svfiprintf_r+0x17c>
 800cbe8:	b1b0      	cbz	r0, 800cc18 <_svfiprintf_r+0x110>
 800cbea:	9207      	str	r2, [sp, #28]
 800cbec:	e014      	b.n	800cc18 <_svfiprintf_r+0x110>
 800cbee:	eba0 0308 	sub.w	r3, r0, r8
 800cbf2:	fa09 f303 	lsl.w	r3, r9, r3
 800cbf6:	4313      	orrs	r3, r2
 800cbf8:	9304      	str	r3, [sp, #16]
 800cbfa:	46a2      	mov	sl, r4
 800cbfc:	e7d2      	b.n	800cba4 <_svfiprintf_r+0x9c>
 800cbfe:	9b03      	ldr	r3, [sp, #12]
 800cc00:	1d19      	adds	r1, r3, #4
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	9103      	str	r1, [sp, #12]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	bfbb      	ittet	lt
 800cc0a:	425b      	neglt	r3, r3
 800cc0c:	f042 0202 	orrlt.w	r2, r2, #2
 800cc10:	9307      	strge	r3, [sp, #28]
 800cc12:	9307      	strlt	r3, [sp, #28]
 800cc14:	bfb8      	it	lt
 800cc16:	9204      	strlt	r2, [sp, #16]
 800cc18:	7823      	ldrb	r3, [r4, #0]
 800cc1a:	2b2e      	cmp	r3, #46	; 0x2e
 800cc1c:	d10c      	bne.n	800cc38 <_svfiprintf_r+0x130>
 800cc1e:	7863      	ldrb	r3, [r4, #1]
 800cc20:	2b2a      	cmp	r3, #42	; 0x2a
 800cc22:	d134      	bne.n	800cc8e <_svfiprintf_r+0x186>
 800cc24:	9b03      	ldr	r3, [sp, #12]
 800cc26:	1d1a      	adds	r2, r3, #4
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	9203      	str	r2, [sp, #12]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	bfb8      	it	lt
 800cc30:	f04f 33ff 	movlt.w	r3, #4294967295
 800cc34:	3402      	adds	r4, #2
 800cc36:	9305      	str	r3, [sp, #20]
 800cc38:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800cd00 <_svfiprintf_r+0x1f8>
 800cc3c:	7821      	ldrb	r1, [r4, #0]
 800cc3e:	2203      	movs	r2, #3
 800cc40:	4650      	mov	r0, sl
 800cc42:	f7f3 fad5 	bl	80001f0 <memchr>
 800cc46:	b138      	cbz	r0, 800cc58 <_svfiprintf_r+0x150>
 800cc48:	9b04      	ldr	r3, [sp, #16]
 800cc4a:	eba0 000a 	sub.w	r0, r0, sl
 800cc4e:	2240      	movs	r2, #64	; 0x40
 800cc50:	4082      	lsls	r2, r0
 800cc52:	4313      	orrs	r3, r2
 800cc54:	3401      	adds	r4, #1
 800cc56:	9304      	str	r3, [sp, #16]
 800cc58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc5c:	4825      	ldr	r0, [pc, #148]	; (800ccf4 <_svfiprintf_r+0x1ec>)
 800cc5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cc62:	2206      	movs	r2, #6
 800cc64:	f7f3 fac4 	bl	80001f0 <memchr>
 800cc68:	2800      	cmp	r0, #0
 800cc6a:	d038      	beq.n	800ccde <_svfiprintf_r+0x1d6>
 800cc6c:	4b22      	ldr	r3, [pc, #136]	; (800ccf8 <_svfiprintf_r+0x1f0>)
 800cc6e:	bb1b      	cbnz	r3, 800ccb8 <_svfiprintf_r+0x1b0>
 800cc70:	9b03      	ldr	r3, [sp, #12]
 800cc72:	3307      	adds	r3, #7
 800cc74:	f023 0307 	bic.w	r3, r3, #7
 800cc78:	3308      	adds	r3, #8
 800cc7a:	9303      	str	r3, [sp, #12]
 800cc7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc7e:	4433      	add	r3, r6
 800cc80:	9309      	str	r3, [sp, #36]	; 0x24
 800cc82:	e768      	b.n	800cb56 <_svfiprintf_r+0x4e>
 800cc84:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc88:	460c      	mov	r4, r1
 800cc8a:	2001      	movs	r0, #1
 800cc8c:	e7a6      	b.n	800cbdc <_svfiprintf_r+0xd4>
 800cc8e:	2300      	movs	r3, #0
 800cc90:	3401      	adds	r4, #1
 800cc92:	9305      	str	r3, [sp, #20]
 800cc94:	4619      	mov	r1, r3
 800cc96:	f04f 0c0a 	mov.w	ip, #10
 800cc9a:	4620      	mov	r0, r4
 800cc9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cca0:	3a30      	subs	r2, #48	; 0x30
 800cca2:	2a09      	cmp	r2, #9
 800cca4:	d903      	bls.n	800ccae <_svfiprintf_r+0x1a6>
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d0c6      	beq.n	800cc38 <_svfiprintf_r+0x130>
 800ccaa:	9105      	str	r1, [sp, #20]
 800ccac:	e7c4      	b.n	800cc38 <_svfiprintf_r+0x130>
 800ccae:	fb0c 2101 	mla	r1, ip, r1, r2
 800ccb2:	4604      	mov	r4, r0
 800ccb4:	2301      	movs	r3, #1
 800ccb6:	e7f0      	b.n	800cc9a <_svfiprintf_r+0x192>
 800ccb8:	ab03      	add	r3, sp, #12
 800ccba:	9300      	str	r3, [sp, #0]
 800ccbc:	462a      	mov	r2, r5
 800ccbe:	4b0f      	ldr	r3, [pc, #60]	; (800ccfc <_svfiprintf_r+0x1f4>)
 800ccc0:	a904      	add	r1, sp, #16
 800ccc2:	4638      	mov	r0, r7
 800ccc4:	f7fd fe6a 	bl	800a99c <_printf_float>
 800ccc8:	1c42      	adds	r2, r0, #1
 800ccca:	4606      	mov	r6, r0
 800cccc:	d1d6      	bne.n	800cc7c <_svfiprintf_r+0x174>
 800ccce:	89ab      	ldrh	r3, [r5, #12]
 800ccd0:	065b      	lsls	r3, r3, #25
 800ccd2:	f53f af2d 	bmi.w	800cb30 <_svfiprintf_r+0x28>
 800ccd6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ccd8:	b01d      	add	sp, #116	; 0x74
 800ccda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccde:	ab03      	add	r3, sp, #12
 800cce0:	9300      	str	r3, [sp, #0]
 800cce2:	462a      	mov	r2, r5
 800cce4:	4b05      	ldr	r3, [pc, #20]	; (800ccfc <_svfiprintf_r+0x1f4>)
 800cce6:	a904      	add	r1, sp, #16
 800cce8:	4638      	mov	r0, r7
 800ccea:	f7fe f8fb 	bl	800aee4 <_printf_i>
 800ccee:	e7eb      	b.n	800ccc8 <_svfiprintf_r+0x1c0>
 800ccf0:	0800e9b4 	.word	0x0800e9b4
 800ccf4:	0800e9be 	.word	0x0800e9be
 800ccf8:	0800a99d 	.word	0x0800a99d
 800ccfc:	0800ca55 	.word	0x0800ca55
 800cd00:	0800e9ba 	.word	0x0800e9ba

0800cd04 <__sflush_r>:
 800cd04:	898a      	ldrh	r2, [r1, #12]
 800cd06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd0a:	4605      	mov	r5, r0
 800cd0c:	0710      	lsls	r0, r2, #28
 800cd0e:	460c      	mov	r4, r1
 800cd10:	d458      	bmi.n	800cdc4 <__sflush_r+0xc0>
 800cd12:	684b      	ldr	r3, [r1, #4]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	dc05      	bgt.n	800cd24 <__sflush_r+0x20>
 800cd18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	dc02      	bgt.n	800cd24 <__sflush_r+0x20>
 800cd1e:	2000      	movs	r0, #0
 800cd20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cd26:	2e00      	cmp	r6, #0
 800cd28:	d0f9      	beq.n	800cd1e <__sflush_r+0x1a>
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cd30:	682f      	ldr	r7, [r5, #0]
 800cd32:	6a21      	ldr	r1, [r4, #32]
 800cd34:	602b      	str	r3, [r5, #0]
 800cd36:	d032      	beq.n	800cd9e <__sflush_r+0x9a>
 800cd38:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cd3a:	89a3      	ldrh	r3, [r4, #12]
 800cd3c:	075a      	lsls	r2, r3, #29
 800cd3e:	d505      	bpl.n	800cd4c <__sflush_r+0x48>
 800cd40:	6863      	ldr	r3, [r4, #4]
 800cd42:	1ac0      	subs	r0, r0, r3
 800cd44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cd46:	b10b      	cbz	r3, 800cd4c <__sflush_r+0x48>
 800cd48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cd4a:	1ac0      	subs	r0, r0, r3
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	4602      	mov	r2, r0
 800cd50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cd52:	6a21      	ldr	r1, [r4, #32]
 800cd54:	4628      	mov	r0, r5
 800cd56:	47b0      	blx	r6
 800cd58:	1c43      	adds	r3, r0, #1
 800cd5a:	89a3      	ldrh	r3, [r4, #12]
 800cd5c:	d106      	bne.n	800cd6c <__sflush_r+0x68>
 800cd5e:	6829      	ldr	r1, [r5, #0]
 800cd60:	291d      	cmp	r1, #29
 800cd62:	d82b      	bhi.n	800cdbc <__sflush_r+0xb8>
 800cd64:	4a29      	ldr	r2, [pc, #164]	; (800ce0c <__sflush_r+0x108>)
 800cd66:	410a      	asrs	r2, r1
 800cd68:	07d6      	lsls	r6, r2, #31
 800cd6a:	d427      	bmi.n	800cdbc <__sflush_r+0xb8>
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	6062      	str	r2, [r4, #4]
 800cd70:	04d9      	lsls	r1, r3, #19
 800cd72:	6922      	ldr	r2, [r4, #16]
 800cd74:	6022      	str	r2, [r4, #0]
 800cd76:	d504      	bpl.n	800cd82 <__sflush_r+0x7e>
 800cd78:	1c42      	adds	r2, r0, #1
 800cd7a:	d101      	bne.n	800cd80 <__sflush_r+0x7c>
 800cd7c:	682b      	ldr	r3, [r5, #0]
 800cd7e:	b903      	cbnz	r3, 800cd82 <__sflush_r+0x7e>
 800cd80:	6560      	str	r0, [r4, #84]	; 0x54
 800cd82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd84:	602f      	str	r7, [r5, #0]
 800cd86:	2900      	cmp	r1, #0
 800cd88:	d0c9      	beq.n	800cd1e <__sflush_r+0x1a>
 800cd8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd8e:	4299      	cmp	r1, r3
 800cd90:	d002      	beq.n	800cd98 <__sflush_r+0x94>
 800cd92:	4628      	mov	r0, r5
 800cd94:	f7ff f9e2 	bl	800c15c <_free_r>
 800cd98:	2000      	movs	r0, #0
 800cd9a:	6360      	str	r0, [r4, #52]	; 0x34
 800cd9c:	e7c0      	b.n	800cd20 <__sflush_r+0x1c>
 800cd9e:	2301      	movs	r3, #1
 800cda0:	4628      	mov	r0, r5
 800cda2:	47b0      	blx	r6
 800cda4:	1c41      	adds	r1, r0, #1
 800cda6:	d1c8      	bne.n	800cd3a <__sflush_r+0x36>
 800cda8:	682b      	ldr	r3, [r5, #0]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d0c5      	beq.n	800cd3a <__sflush_r+0x36>
 800cdae:	2b1d      	cmp	r3, #29
 800cdb0:	d001      	beq.n	800cdb6 <__sflush_r+0xb2>
 800cdb2:	2b16      	cmp	r3, #22
 800cdb4:	d101      	bne.n	800cdba <__sflush_r+0xb6>
 800cdb6:	602f      	str	r7, [r5, #0]
 800cdb8:	e7b1      	b.n	800cd1e <__sflush_r+0x1a>
 800cdba:	89a3      	ldrh	r3, [r4, #12]
 800cdbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cdc0:	81a3      	strh	r3, [r4, #12]
 800cdc2:	e7ad      	b.n	800cd20 <__sflush_r+0x1c>
 800cdc4:	690f      	ldr	r7, [r1, #16]
 800cdc6:	2f00      	cmp	r7, #0
 800cdc8:	d0a9      	beq.n	800cd1e <__sflush_r+0x1a>
 800cdca:	0793      	lsls	r3, r2, #30
 800cdcc:	680e      	ldr	r6, [r1, #0]
 800cdce:	bf08      	it	eq
 800cdd0:	694b      	ldreq	r3, [r1, #20]
 800cdd2:	600f      	str	r7, [r1, #0]
 800cdd4:	bf18      	it	ne
 800cdd6:	2300      	movne	r3, #0
 800cdd8:	eba6 0807 	sub.w	r8, r6, r7
 800cddc:	608b      	str	r3, [r1, #8]
 800cdde:	f1b8 0f00 	cmp.w	r8, #0
 800cde2:	dd9c      	ble.n	800cd1e <__sflush_r+0x1a>
 800cde4:	6a21      	ldr	r1, [r4, #32]
 800cde6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cde8:	4643      	mov	r3, r8
 800cdea:	463a      	mov	r2, r7
 800cdec:	4628      	mov	r0, r5
 800cdee:	47b0      	blx	r6
 800cdf0:	2800      	cmp	r0, #0
 800cdf2:	dc06      	bgt.n	800ce02 <__sflush_r+0xfe>
 800cdf4:	89a3      	ldrh	r3, [r4, #12]
 800cdf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cdfa:	81a3      	strh	r3, [r4, #12]
 800cdfc:	f04f 30ff 	mov.w	r0, #4294967295
 800ce00:	e78e      	b.n	800cd20 <__sflush_r+0x1c>
 800ce02:	4407      	add	r7, r0
 800ce04:	eba8 0800 	sub.w	r8, r8, r0
 800ce08:	e7e9      	b.n	800cdde <__sflush_r+0xda>
 800ce0a:	bf00      	nop
 800ce0c:	dfbffffe 	.word	0xdfbffffe

0800ce10 <_fflush_r>:
 800ce10:	b538      	push	{r3, r4, r5, lr}
 800ce12:	690b      	ldr	r3, [r1, #16]
 800ce14:	4605      	mov	r5, r0
 800ce16:	460c      	mov	r4, r1
 800ce18:	b913      	cbnz	r3, 800ce20 <_fflush_r+0x10>
 800ce1a:	2500      	movs	r5, #0
 800ce1c:	4628      	mov	r0, r5
 800ce1e:	bd38      	pop	{r3, r4, r5, pc}
 800ce20:	b118      	cbz	r0, 800ce2a <_fflush_r+0x1a>
 800ce22:	6a03      	ldr	r3, [r0, #32]
 800ce24:	b90b      	cbnz	r3, 800ce2a <_fflush_r+0x1a>
 800ce26:	f7fe f9f9 	bl	800b21c <__sinit>
 800ce2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d0f3      	beq.n	800ce1a <_fflush_r+0xa>
 800ce32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ce34:	07d0      	lsls	r0, r2, #31
 800ce36:	d404      	bmi.n	800ce42 <_fflush_r+0x32>
 800ce38:	0599      	lsls	r1, r3, #22
 800ce3a:	d402      	bmi.n	800ce42 <_fflush_r+0x32>
 800ce3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce3e:	f7fe fb03 	bl	800b448 <__retarget_lock_acquire_recursive>
 800ce42:	4628      	mov	r0, r5
 800ce44:	4621      	mov	r1, r4
 800ce46:	f7ff ff5d 	bl	800cd04 <__sflush_r>
 800ce4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ce4c:	07da      	lsls	r2, r3, #31
 800ce4e:	4605      	mov	r5, r0
 800ce50:	d4e4      	bmi.n	800ce1c <_fflush_r+0xc>
 800ce52:	89a3      	ldrh	r3, [r4, #12]
 800ce54:	059b      	lsls	r3, r3, #22
 800ce56:	d4e1      	bmi.n	800ce1c <_fflush_r+0xc>
 800ce58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce5a:	f7fe faf6 	bl	800b44a <__retarget_lock_release_recursive>
 800ce5e:	e7dd      	b.n	800ce1c <_fflush_r+0xc>

0800ce60 <memmove>:
 800ce60:	4288      	cmp	r0, r1
 800ce62:	b510      	push	{r4, lr}
 800ce64:	eb01 0402 	add.w	r4, r1, r2
 800ce68:	d902      	bls.n	800ce70 <memmove+0x10>
 800ce6a:	4284      	cmp	r4, r0
 800ce6c:	4623      	mov	r3, r4
 800ce6e:	d807      	bhi.n	800ce80 <memmove+0x20>
 800ce70:	1e43      	subs	r3, r0, #1
 800ce72:	42a1      	cmp	r1, r4
 800ce74:	d008      	beq.n	800ce88 <memmove+0x28>
 800ce76:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ce7e:	e7f8      	b.n	800ce72 <memmove+0x12>
 800ce80:	4402      	add	r2, r0
 800ce82:	4601      	mov	r1, r0
 800ce84:	428a      	cmp	r2, r1
 800ce86:	d100      	bne.n	800ce8a <memmove+0x2a>
 800ce88:	bd10      	pop	{r4, pc}
 800ce8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ce8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ce92:	e7f7      	b.n	800ce84 <memmove+0x24>

0800ce94 <_sbrk_r>:
 800ce94:	b538      	push	{r3, r4, r5, lr}
 800ce96:	4d06      	ldr	r5, [pc, #24]	; (800ceb0 <_sbrk_r+0x1c>)
 800ce98:	2300      	movs	r3, #0
 800ce9a:	4604      	mov	r4, r0
 800ce9c:	4608      	mov	r0, r1
 800ce9e:	602b      	str	r3, [r5, #0]
 800cea0:	f7f6 ffb0 	bl	8003e04 <_sbrk>
 800cea4:	1c43      	adds	r3, r0, #1
 800cea6:	d102      	bne.n	800ceae <_sbrk_r+0x1a>
 800cea8:	682b      	ldr	r3, [r5, #0]
 800ceaa:	b103      	cbz	r3, 800ceae <_sbrk_r+0x1a>
 800ceac:	6023      	str	r3, [r4, #0]
 800ceae:	bd38      	pop	{r3, r4, r5, pc}
 800ceb0:	20002d3c 	.word	0x20002d3c

0800ceb4 <__assert_func>:
 800ceb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ceb6:	4614      	mov	r4, r2
 800ceb8:	461a      	mov	r2, r3
 800ceba:	4b09      	ldr	r3, [pc, #36]	; (800cee0 <__assert_func+0x2c>)
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	4605      	mov	r5, r0
 800cec0:	68d8      	ldr	r0, [r3, #12]
 800cec2:	b14c      	cbz	r4, 800ced8 <__assert_func+0x24>
 800cec4:	4b07      	ldr	r3, [pc, #28]	; (800cee4 <__assert_func+0x30>)
 800cec6:	9100      	str	r1, [sp, #0]
 800cec8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cecc:	4906      	ldr	r1, [pc, #24]	; (800cee8 <__assert_func+0x34>)
 800cece:	462b      	mov	r3, r5
 800ced0:	f000 f872 	bl	800cfb8 <fiprintf>
 800ced4:	f000 f882 	bl	800cfdc <abort>
 800ced8:	4b04      	ldr	r3, [pc, #16]	; (800ceec <__assert_func+0x38>)
 800ceda:	461c      	mov	r4, r3
 800cedc:	e7f3      	b.n	800cec6 <__assert_func+0x12>
 800cede:	bf00      	nop
 800cee0:	20000068 	.word	0x20000068
 800cee4:	0800e9cf 	.word	0x0800e9cf
 800cee8:	0800e9dc 	.word	0x0800e9dc
 800ceec:	0800ea0a 	.word	0x0800ea0a

0800cef0 <_calloc_r>:
 800cef0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cef2:	fba1 2402 	umull	r2, r4, r1, r2
 800cef6:	b94c      	cbnz	r4, 800cf0c <_calloc_r+0x1c>
 800cef8:	4611      	mov	r1, r2
 800cefa:	9201      	str	r2, [sp, #4]
 800cefc:	f7ff f9a2 	bl	800c244 <_malloc_r>
 800cf00:	9a01      	ldr	r2, [sp, #4]
 800cf02:	4605      	mov	r5, r0
 800cf04:	b930      	cbnz	r0, 800cf14 <_calloc_r+0x24>
 800cf06:	4628      	mov	r0, r5
 800cf08:	b003      	add	sp, #12
 800cf0a:	bd30      	pop	{r4, r5, pc}
 800cf0c:	220c      	movs	r2, #12
 800cf0e:	6002      	str	r2, [r0, #0]
 800cf10:	2500      	movs	r5, #0
 800cf12:	e7f8      	b.n	800cf06 <_calloc_r+0x16>
 800cf14:	4621      	mov	r1, r4
 800cf16:	f7fe fa1a 	bl	800b34e <memset>
 800cf1a:	e7f4      	b.n	800cf06 <_calloc_r+0x16>

0800cf1c <__ascii_mbtowc>:
 800cf1c:	b082      	sub	sp, #8
 800cf1e:	b901      	cbnz	r1, 800cf22 <__ascii_mbtowc+0x6>
 800cf20:	a901      	add	r1, sp, #4
 800cf22:	b142      	cbz	r2, 800cf36 <__ascii_mbtowc+0x1a>
 800cf24:	b14b      	cbz	r3, 800cf3a <__ascii_mbtowc+0x1e>
 800cf26:	7813      	ldrb	r3, [r2, #0]
 800cf28:	600b      	str	r3, [r1, #0]
 800cf2a:	7812      	ldrb	r2, [r2, #0]
 800cf2c:	1e10      	subs	r0, r2, #0
 800cf2e:	bf18      	it	ne
 800cf30:	2001      	movne	r0, #1
 800cf32:	b002      	add	sp, #8
 800cf34:	4770      	bx	lr
 800cf36:	4610      	mov	r0, r2
 800cf38:	e7fb      	b.n	800cf32 <__ascii_mbtowc+0x16>
 800cf3a:	f06f 0001 	mvn.w	r0, #1
 800cf3e:	e7f8      	b.n	800cf32 <__ascii_mbtowc+0x16>

0800cf40 <_realloc_r>:
 800cf40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf44:	4680      	mov	r8, r0
 800cf46:	4614      	mov	r4, r2
 800cf48:	460e      	mov	r6, r1
 800cf4a:	b921      	cbnz	r1, 800cf56 <_realloc_r+0x16>
 800cf4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf50:	4611      	mov	r1, r2
 800cf52:	f7ff b977 	b.w	800c244 <_malloc_r>
 800cf56:	b92a      	cbnz	r2, 800cf64 <_realloc_r+0x24>
 800cf58:	f7ff f900 	bl	800c15c <_free_r>
 800cf5c:	4625      	mov	r5, r4
 800cf5e:	4628      	mov	r0, r5
 800cf60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf64:	f000 f841 	bl	800cfea <_malloc_usable_size_r>
 800cf68:	4284      	cmp	r4, r0
 800cf6a:	4607      	mov	r7, r0
 800cf6c:	d802      	bhi.n	800cf74 <_realloc_r+0x34>
 800cf6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cf72:	d812      	bhi.n	800cf9a <_realloc_r+0x5a>
 800cf74:	4621      	mov	r1, r4
 800cf76:	4640      	mov	r0, r8
 800cf78:	f7ff f964 	bl	800c244 <_malloc_r>
 800cf7c:	4605      	mov	r5, r0
 800cf7e:	2800      	cmp	r0, #0
 800cf80:	d0ed      	beq.n	800cf5e <_realloc_r+0x1e>
 800cf82:	42bc      	cmp	r4, r7
 800cf84:	4622      	mov	r2, r4
 800cf86:	4631      	mov	r1, r6
 800cf88:	bf28      	it	cs
 800cf8a:	463a      	movcs	r2, r7
 800cf8c:	f7fe fa5e 	bl	800b44c <memcpy>
 800cf90:	4631      	mov	r1, r6
 800cf92:	4640      	mov	r0, r8
 800cf94:	f7ff f8e2 	bl	800c15c <_free_r>
 800cf98:	e7e1      	b.n	800cf5e <_realloc_r+0x1e>
 800cf9a:	4635      	mov	r5, r6
 800cf9c:	e7df      	b.n	800cf5e <_realloc_r+0x1e>

0800cf9e <__ascii_wctomb>:
 800cf9e:	b149      	cbz	r1, 800cfb4 <__ascii_wctomb+0x16>
 800cfa0:	2aff      	cmp	r2, #255	; 0xff
 800cfa2:	bf85      	ittet	hi
 800cfa4:	238a      	movhi	r3, #138	; 0x8a
 800cfa6:	6003      	strhi	r3, [r0, #0]
 800cfa8:	700a      	strbls	r2, [r1, #0]
 800cfaa:	f04f 30ff 	movhi.w	r0, #4294967295
 800cfae:	bf98      	it	ls
 800cfb0:	2001      	movls	r0, #1
 800cfb2:	4770      	bx	lr
 800cfb4:	4608      	mov	r0, r1
 800cfb6:	4770      	bx	lr

0800cfb8 <fiprintf>:
 800cfb8:	b40e      	push	{r1, r2, r3}
 800cfba:	b503      	push	{r0, r1, lr}
 800cfbc:	4601      	mov	r1, r0
 800cfbe:	ab03      	add	r3, sp, #12
 800cfc0:	4805      	ldr	r0, [pc, #20]	; (800cfd8 <fiprintf+0x20>)
 800cfc2:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfc6:	6800      	ldr	r0, [r0, #0]
 800cfc8:	9301      	str	r3, [sp, #4]
 800cfca:	f000 f83f 	bl	800d04c <_vfiprintf_r>
 800cfce:	b002      	add	sp, #8
 800cfd0:	f85d eb04 	ldr.w	lr, [sp], #4
 800cfd4:	b003      	add	sp, #12
 800cfd6:	4770      	bx	lr
 800cfd8:	20000068 	.word	0x20000068

0800cfdc <abort>:
 800cfdc:	b508      	push	{r3, lr}
 800cfde:	2006      	movs	r0, #6
 800cfe0:	f000 fa0c 	bl	800d3fc <raise>
 800cfe4:	2001      	movs	r0, #1
 800cfe6:	f7f6 fe95 	bl	8003d14 <_exit>

0800cfea <_malloc_usable_size_r>:
 800cfea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cfee:	1f18      	subs	r0, r3, #4
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	bfbc      	itt	lt
 800cff4:	580b      	ldrlt	r3, [r1, r0]
 800cff6:	18c0      	addlt	r0, r0, r3
 800cff8:	4770      	bx	lr

0800cffa <__sfputc_r>:
 800cffa:	6893      	ldr	r3, [r2, #8]
 800cffc:	3b01      	subs	r3, #1
 800cffe:	2b00      	cmp	r3, #0
 800d000:	b410      	push	{r4}
 800d002:	6093      	str	r3, [r2, #8]
 800d004:	da08      	bge.n	800d018 <__sfputc_r+0x1e>
 800d006:	6994      	ldr	r4, [r2, #24]
 800d008:	42a3      	cmp	r3, r4
 800d00a:	db01      	blt.n	800d010 <__sfputc_r+0x16>
 800d00c:	290a      	cmp	r1, #10
 800d00e:	d103      	bne.n	800d018 <__sfputc_r+0x1e>
 800d010:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d014:	f000 b934 	b.w	800d280 <__swbuf_r>
 800d018:	6813      	ldr	r3, [r2, #0]
 800d01a:	1c58      	adds	r0, r3, #1
 800d01c:	6010      	str	r0, [r2, #0]
 800d01e:	7019      	strb	r1, [r3, #0]
 800d020:	4608      	mov	r0, r1
 800d022:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d026:	4770      	bx	lr

0800d028 <__sfputs_r>:
 800d028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d02a:	4606      	mov	r6, r0
 800d02c:	460f      	mov	r7, r1
 800d02e:	4614      	mov	r4, r2
 800d030:	18d5      	adds	r5, r2, r3
 800d032:	42ac      	cmp	r4, r5
 800d034:	d101      	bne.n	800d03a <__sfputs_r+0x12>
 800d036:	2000      	movs	r0, #0
 800d038:	e007      	b.n	800d04a <__sfputs_r+0x22>
 800d03a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d03e:	463a      	mov	r2, r7
 800d040:	4630      	mov	r0, r6
 800d042:	f7ff ffda 	bl	800cffa <__sfputc_r>
 800d046:	1c43      	adds	r3, r0, #1
 800d048:	d1f3      	bne.n	800d032 <__sfputs_r+0xa>
 800d04a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d04c <_vfiprintf_r>:
 800d04c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d050:	460d      	mov	r5, r1
 800d052:	b09d      	sub	sp, #116	; 0x74
 800d054:	4614      	mov	r4, r2
 800d056:	4698      	mov	r8, r3
 800d058:	4606      	mov	r6, r0
 800d05a:	b118      	cbz	r0, 800d064 <_vfiprintf_r+0x18>
 800d05c:	6a03      	ldr	r3, [r0, #32]
 800d05e:	b90b      	cbnz	r3, 800d064 <_vfiprintf_r+0x18>
 800d060:	f7fe f8dc 	bl	800b21c <__sinit>
 800d064:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d066:	07d9      	lsls	r1, r3, #31
 800d068:	d405      	bmi.n	800d076 <_vfiprintf_r+0x2a>
 800d06a:	89ab      	ldrh	r3, [r5, #12]
 800d06c:	059a      	lsls	r2, r3, #22
 800d06e:	d402      	bmi.n	800d076 <_vfiprintf_r+0x2a>
 800d070:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d072:	f7fe f9e9 	bl	800b448 <__retarget_lock_acquire_recursive>
 800d076:	89ab      	ldrh	r3, [r5, #12]
 800d078:	071b      	lsls	r3, r3, #28
 800d07a:	d501      	bpl.n	800d080 <_vfiprintf_r+0x34>
 800d07c:	692b      	ldr	r3, [r5, #16]
 800d07e:	b99b      	cbnz	r3, 800d0a8 <_vfiprintf_r+0x5c>
 800d080:	4629      	mov	r1, r5
 800d082:	4630      	mov	r0, r6
 800d084:	f000 f93a 	bl	800d2fc <__swsetup_r>
 800d088:	b170      	cbz	r0, 800d0a8 <_vfiprintf_r+0x5c>
 800d08a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d08c:	07dc      	lsls	r4, r3, #31
 800d08e:	d504      	bpl.n	800d09a <_vfiprintf_r+0x4e>
 800d090:	f04f 30ff 	mov.w	r0, #4294967295
 800d094:	b01d      	add	sp, #116	; 0x74
 800d096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d09a:	89ab      	ldrh	r3, [r5, #12]
 800d09c:	0598      	lsls	r0, r3, #22
 800d09e:	d4f7      	bmi.n	800d090 <_vfiprintf_r+0x44>
 800d0a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d0a2:	f7fe f9d2 	bl	800b44a <__retarget_lock_release_recursive>
 800d0a6:	e7f3      	b.n	800d090 <_vfiprintf_r+0x44>
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	9309      	str	r3, [sp, #36]	; 0x24
 800d0ac:	2320      	movs	r3, #32
 800d0ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d0b2:	f8cd 800c 	str.w	r8, [sp, #12]
 800d0b6:	2330      	movs	r3, #48	; 0x30
 800d0b8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d26c <_vfiprintf_r+0x220>
 800d0bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d0c0:	f04f 0901 	mov.w	r9, #1
 800d0c4:	4623      	mov	r3, r4
 800d0c6:	469a      	mov	sl, r3
 800d0c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d0cc:	b10a      	cbz	r2, 800d0d2 <_vfiprintf_r+0x86>
 800d0ce:	2a25      	cmp	r2, #37	; 0x25
 800d0d0:	d1f9      	bne.n	800d0c6 <_vfiprintf_r+0x7a>
 800d0d2:	ebba 0b04 	subs.w	fp, sl, r4
 800d0d6:	d00b      	beq.n	800d0f0 <_vfiprintf_r+0xa4>
 800d0d8:	465b      	mov	r3, fp
 800d0da:	4622      	mov	r2, r4
 800d0dc:	4629      	mov	r1, r5
 800d0de:	4630      	mov	r0, r6
 800d0e0:	f7ff ffa2 	bl	800d028 <__sfputs_r>
 800d0e4:	3001      	adds	r0, #1
 800d0e6:	f000 80a9 	beq.w	800d23c <_vfiprintf_r+0x1f0>
 800d0ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d0ec:	445a      	add	r2, fp
 800d0ee:	9209      	str	r2, [sp, #36]	; 0x24
 800d0f0:	f89a 3000 	ldrb.w	r3, [sl]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	f000 80a1 	beq.w	800d23c <_vfiprintf_r+0x1f0>
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	f04f 32ff 	mov.w	r2, #4294967295
 800d100:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d104:	f10a 0a01 	add.w	sl, sl, #1
 800d108:	9304      	str	r3, [sp, #16]
 800d10a:	9307      	str	r3, [sp, #28]
 800d10c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d110:	931a      	str	r3, [sp, #104]	; 0x68
 800d112:	4654      	mov	r4, sl
 800d114:	2205      	movs	r2, #5
 800d116:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d11a:	4854      	ldr	r0, [pc, #336]	; (800d26c <_vfiprintf_r+0x220>)
 800d11c:	f7f3 f868 	bl	80001f0 <memchr>
 800d120:	9a04      	ldr	r2, [sp, #16]
 800d122:	b9d8      	cbnz	r0, 800d15c <_vfiprintf_r+0x110>
 800d124:	06d1      	lsls	r1, r2, #27
 800d126:	bf44      	itt	mi
 800d128:	2320      	movmi	r3, #32
 800d12a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d12e:	0713      	lsls	r3, r2, #28
 800d130:	bf44      	itt	mi
 800d132:	232b      	movmi	r3, #43	; 0x2b
 800d134:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d138:	f89a 3000 	ldrb.w	r3, [sl]
 800d13c:	2b2a      	cmp	r3, #42	; 0x2a
 800d13e:	d015      	beq.n	800d16c <_vfiprintf_r+0x120>
 800d140:	9a07      	ldr	r2, [sp, #28]
 800d142:	4654      	mov	r4, sl
 800d144:	2000      	movs	r0, #0
 800d146:	f04f 0c0a 	mov.w	ip, #10
 800d14a:	4621      	mov	r1, r4
 800d14c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d150:	3b30      	subs	r3, #48	; 0x30
 800d152:	2b09      	cmp	r3, #9
 800d154:	d94d      	bls.n	800d1f2 <_vfiprintf_r+0x1a6>
 800d156:	b1b0      	cbz	r0, 800d186 <_vfiprintf_r+0x13a>
 800d158:	9207      	str	r2, [sp, #28]
 800d15a:	e014      	b.n	800d186 <_vfiprintf_r+0x13a>
 800d15c:	eba0 0308 	sub.w	r3, r0, r8
 800d160:	fa09 f303 	lsl.w	r3, r9, r3
 800d164:	4313      	orrs	r3, r2
 800d166:	9304      	str	r3, [sp, #16]
 800d168:	46a2      	mov	sl, r4
 800d16a:	e7d2      	b.n	800d112 <_vfiprintf_r+0xc6>
 800d16c:	9b03      	ldr	r3, [sp, #12]
 800d16e:	1d19      	adds	r1, r3, #4
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	9103      	str	r1, [sp, #12]
 800d174:	2b00      	cmp	r3, #0
 800d176:	bfbb      	ittet	lt
 800d178:	425b      	neglt	r3, r3
 800d17a:	f042 0202 	orrlt.w	r2, r2, #2
 800d17e:	9307      	strge	r3, [sp, #28]
 800d180:	9307      	strlt	r3, [sp, #28]
 800d182:	bfb8      	it	lt
 800d184:	9204      	strlt	r2, [sp, #16]
 800d186:	7823      	ldrb	r3, [r4, #0]
 800d188:	2b2e      	cmp	r3, #46	; 0x2e
 800d18a:	d10c      	bne.n	800d1a6 <_vfiprintf_r+0x15a>
 800d18c:	7863      	ldrb	r3, [r4, #1]
 800d18e:	2b2a      	cmp	r3, #42	; 0x2a
 800d190:	d134      	bne.n	800d1fc <_vfiprintf_r+0x1b0>
 800d192:	9b03      	ldr	r3, [sp, #12]
 800d194:	1d1a      	adds	r2, r3, #4
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	9203      	str	r2, [sp, #12]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	bfb8      	it	lt
 800d19e:	f04f 33ff 	movlt.w	r3, #4294967295
 800d1a2:	3402      	adds	r4, #2
 800d1a4:	9305      	str	r3, [sp, #20]
 800d1a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d27c <_vfiprintf_r+0x230>
 800d1aa:	7821      	ldrb	r1, [r4, #0]
 800d1ac:	2203      	movs	r2, #3
 800d1ae:	4650      	mov	r0, sl
 800d1b0:	f7f3 f81e 	bl	80001f0 <memchr>
 800d1b4:	b138      	cbz	r0, 800d1c6 <_vfiprintf_r+0x17a>
 800d1b6:	9b04      	ldr	r3, [sp, #16]
 800d1b8:	eba0 000a 	sub.w	r0, r0, sl
 800d1bc:	2240      	movs	r2, #64	; 0x40
 800d1be:	4082      	lsls	r2, r0
 800d1c0:	4313      	orrs	r3, r2
 800d1c2:	3401      	adds	r4, #1
 800d1c4:	9304      	str	r3, [sp, #16]
 800d1c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1ca:	4829      	ldr	r0, [pc, #164]	; (800d270 <_vfiprintf_r+0x224>)
 800d1cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d1d0:	2206      	movs	r2, #6
 800d1d2:	f7f3 f80d 	bl	80001f0 <memchr>
 800d1d6:	2800      	cmp	r0, #0
 800d1d8:	d03f      	beq.n	800d25a <_vfiprintf_r+0x20e>
 800d1da:	4b26      	ldr	r3, [pc, #152]	; (800d274 <_vfiprintf_r+0x228>)
 800d1dc:	bb1b      	cbnz	r3, 800d226 <_vfiprintf_r+0x1da>
 800d1de:	9b03      	ldr	r3, [sp, #12]
 800d1e0:	3307      	adds	r3, #7
 800d1e2:	f023 0307 	bic.w	r3, r3, #7
 800d1e6:	3308      	adds	r3, #8
 800d1e8:	9303      	str	r3, [sp, #12]
 800d1ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1ec:	443b      	add	r3, r7
 800d1ee:	9309      	str	r3, [sp, #36]	; 0x24
 800d1f0:	e768      	b.n	800d0c4 <_vfiprintf_r+0x78>
 800d1f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800d1f6:	460c      	mov	r4, r1
 800d1f8:	2001      	movs	r0, #1
 800d1fa:	e7a6      	b.n	800d14a <_vfiprintf_r+0xfe>
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	3401      	adds	r4, #1
 800d200:	9305      	str	r3, [sp, #20]
 800d202:	4619      	mov	r1, r3
 800d204:	f04f 0c0a 	mov.w	ip, #10
 800d208:	4620      	mov	r0, r4
 800d20a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d20e:	3a30      	subs	r2, #48	; 0x30
 800d210:	2a09      	cmp	r2, #9
 800d212:	d903      	bls.n	800d21c <_vfiprintf_r+0x1d0>
 800d214:	2b00      	cmp	r3, #0
 800d216:	d0c6      	beq.n	800d1a6 <_vfiprintf_r+0x15a>
 800d218:	9105      	str	r1, [sp, #20]
 800d21a:	e7c4      	b.n	800d1a6 <_vfiprintf_r+0x15a>
 800d21c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d220:	4604      	mov	r4, r0
 800d222:	2301      	movs	r3, #1
 800d224:	e7f0      	b.n	800d208 <_vfiprintf_r+0x1bc>
 800d226:	ab03      	add	r3, sp, #12
 800d228:	9300      	str	r3, [sp, #0]
 800d22a:	462a      	mov	r2, r5
 800d22c:	4b12      	ldr	r3, [pc, #72]	; (800d278 <_vfiprintf_r+0x22c>)
 800d22e:	a904      	add	r1, sp, #16
 800d230:	4630      	mov	r0, r6
 800d232:	f7fd fbb3 	bl	800a99c <_printf_float>
 800d236:	4607      	mov	r7, r0
 800d238:	1c78      	adds	r0, r7, #1
 800d23a:	d1d6      	bne.n	800d1ea <_vfiprintf_r+0x19e>
 800d23c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d23e:	07d9      	lsls	r1, r3, #31
 800d240:	d405      	bmi.n	800d24e <_vfiprintf_r+0x202>
 800d242:	89ab      	ldrh	r3, [r5, #12]
 800d244:	059a      	lsls	r2, r3, #22
 800d246:	d402      	bmi.n	800d24e <_vfiprintf_r+0x202>
 800d248:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d24a:	f7fe f8fe 	bl	800b44a <__retarget_lock_release_recursive>
 800d24e:	89ab      	ldrh	r3, [r5, #12]
 800d250:	065b      	lsls	r3, r3, #25
 800d252:	f53f af1d 	bmi.w	800d090 <_vfiprintf_r+0x44>
 800d256:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d258:	e71c      	b.n	800d094 <_vfiprintf_r+0x48>
 800d25a:	ab03      	add	r3, sp, #12
 800d25c:	9300      	str	r3, [sp, #0]
 800d25e:	462a      	mov	r2, r5
 800d260:	4b05      	ldr	r3, [pc, #20]	; (800d278 <_vfiprintf_r+0x22c>)
 800d262:	a904      	add	r1, sp, #16
 800d264:	4630      	mov	r0, r6
 800d266:	f7fd fe3d 	bl	800aee4 <_printf_i>
 800d26a:	e7e4      	b.n	800d236 <_vfiprintf_r+0x1ea>
 800d26c:	0800e9b4 	.word	0x0800e9b4
 800d270:	0800e9be 	.word	0x0800e9be
 800d274:	0800a99d 	.word	0x0800a99d
 800d278:	0800d029 	.word	0x0800d029
 800d27c:	0800e9ba 	.word	0x0800e9ba

0800d280 <__swbuf_r>:
 800d280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d282:	460e      	mov	r6, r1
 800d284:	4614      	mov	r4, r2
 800d286:	4605      	mov	r5, r0
 800d288:	b118      	cbz	r0, 800d292 <__swbuf_r+0x12>
 800d28a:	6a03      	ldr	r3, [r0, #32]
 800d28c:	b90b      	cbnz	r3, 800d292 <__swbuf_r+0x12>
 800d28e:	f7fd ffc5 	bl	800b21c <__sinit>
 800d292:	69a3      	ldr	r3, [r4, #24]
 800d294:	60a3      	str	r3, [r4, #8]
 800d296:	89a3      	ldrh	r3, [r4, #12]
 800d298:	071a      	lsls	r2, r3, #28
 800d29a:	d525      	bpl.n	800d2e8 <__swbuf_r+0x68>
 800d29c:	6923      	ldr	r3, [r4, #16]
 800d29e:	b31b      	cbz	r3, 800d2e8 <__swbuf_r+0x68>
 800d2a0:	6823      	ldr	r3, [r4, #0]
 800d2a2:	6922      	ldr	r2, [r4, #16]
 800d2a4:	1a98      	subs	r0, r3, r2
 800d2a6:	6963      	ldr	r3, [r4, #20]
 800d2a8:	b2f6      	uxtb	r6, r6
 800d2aa:	4283      	cmp	r3, r0
 800d2ac:	4637      	mov	r7, r6
 800d2ae:	dc04      	bgt.n	800d2ba <__swbuf_r+0x3a>
 800d2b0:	4621      	mov	r1, r4
 800d2b2:	4628      	mov	r0, r5
 800d2b4:	f7ff fdac 	bl	800ce10 <_fflush_r>
 800d2b8:	b9e0      	cbnz	r0, 800d2f4 <__swbuf_r+0x74>
 800d2ba:	68a3      	ldr	r3, [r4, #8]
 800d2bc:	3b01      	subs	r3, #1
 800d2be:	60a3      	str	r3, [r4, #8]
 800d2c0:	6823      	ldr	r3, [r4, #0]
 800d2c2:	1c5a      	adds	r2, r3, #1
 800d2c4:	6022      	str	r2, [r4, #0]
 800d2c6:	701e      	strb	r6, [r3, #0]
 800d2c8:	6962      	ldr	r2, [r4, #20]
 800d2ca:	1c43      	adds	r3, r0, #1
 800d2cc:	429a      	cmp	r2, r3
 800d2ce:	d004      	beq.n	800d2da <__swbuf_r+0x5a>
 800d2d0:	89a3      	ldrh	r3, [r4, #12]
 800d2d2:	07db      	lsls	r3, r3, #31
 800d2d4:	d506      	bpl.n	800d2e4 <__swbuf_r+0x64>
 800d2d6:	2e0a      	cmp	r6, #10
 800d2d8:	d104      	bne.n	800d2e4 <__swbuf_r+0x64>
 800d2da:	4621      	mov	r1, r4
 800d2dc:	4628      	mov	r0, r5
 800d2de:	f7ff fd97 	bl	800ce10 <_fflush_r>
 800d2e2:	b938      	cbnz	r0, 800d2f4 <__swbuf_r+0x74>
 800d2e4:	4638      	mov	r0, r7
 800d2e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2e8:	4621      	mov	r1, r4
 800d2ea:	4628      	mov	r0, r5
 800d2ec:	f000 f806 	bl	800d2fc <__swsetup_r>
 800d2f0:	2800      	cmp	r0, #0
 800d2f2:	d0d5      	beq.n	800d2a0 <__swbuf_r+0x20>
 800d2f4:	f04f 37ff 	mov.w	r7, #4294967295
 800d2f8:	e7f4      	b.n	800d2e4 <__swbuf_r+0x64>
	...

0800d2fc <__swsetup_r>:
 800d2fc:	b538      	push	{r3, r4, r5, lr}
 800d2fe:	4b2a      	ldr	r3, [pc, #168]	; (800d3a8 <__swsetup_r+0xac>)
 800d300:	4605      	mov	r5, r0
 800d302:	6818      	ldr	r0, [r3, #0]
 800d304:	460c      	mov	r4, r1
 800d306:	b118      	cbz	r0, 800d310 <__swsetup_r+0x14>
 800d308:	6a03      	ldr	r3, [r0, #32]
 800d30a:	b90b      	cbnz	r3, 800d310 <__swsetup_r+0x14>
 800d30c:	f7fd ff86 	bl	800b21c <__sinit>
 800d310:	89a3      	ldrh	r3, [r4, #12]
 800d312:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d316:	0718      	lsls	r0, r3, #28
 800d318:	d422      	bmi.n	800d360 <__swsetup_r+0x64>
 800d31a:	06d9      	lsls	r1, r3, #27
 800d31c:	d407      	bmi.n	800d32e <__swsetup_r+0x32>
 800d31e:	2309      	movs	r3, #9
 800d320:	602b      	str	r3, [r5, #0]
 800d322:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d326:	81a3      	strh	r3, [r4, #12]
 800d328:	f04f 30ff 	mov.w	r0, #4294967295
 800d32c:	e034      	b.n	800d398 <__swsetup_r+0x9c>
 800d32e:	0758      	lsls	r0, r3, #29
 800d330:	d512      	bpl.n	800d358 <__swsetup_r+0x5c>
 800d332:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d334:	b141      	cbz	r1, 800d348 <__swsetup_r+0x4c>
 800d336:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d33a:	4299      	cmp	r1, r3
 800d33c:	d002      	beq.n	800d344 <__swsetup_r+0x48>
 800d33e:	4628      	mov	r0, r5
 800d340:	f7fe ff0c 	bl	800c15c <_free_r>
 800d344:	2300      	movs	r3, #0
 800d346:	6363      	str	r3, [r4, #52]	; 0x34
 800d348:	89a3      	ldrh	r3, [r4, #12]
 800d34a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d34e:	81a3      	strh	r3, [r4, #12]
 800d350:	2300      	movs	r3, #0
 800d352:	6063      	str	r3, [r4, #4]
 800d354:	6923      	ldr	r3, [r4, #16]
 800d356:	6023      	str	r3, [r4, #0]
 800d358:	89a3      	ldrh	r3, [r4, #12]
 800d35a:	f043 0308 	orr.w	r3, r3, #8
 800d35e:	81a3      	strh	r3, [r4, #12]
 800d360:	6923      	ldr	r3, [r4, #16]
 800d362:	b94b      	cbnz	r3, 800d378 <__swsetup_r+0x7c>
 800d364:	89a3      	ldrh	r3, [r4, #12]
 800d366:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d36a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d36e:	d003      	beq.n	800d378 <__swsetup_r+0x7c>
 800d370:	4621      	mov	r1, r4
 800d372:	4628      	mov	r0, r5
 800d374:	f000 f884 	bl	800d480 <__smakebuf_r>
 800d378:	89a0      	ldrh	r0, [r4, #12]
 800d37a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d37e:	f010 0301 	ands.w	r3, r0, #1
 800d382:	d00a      	beq.n	800d39a <__swsetup_r+0x9e>
 800d384:	2300      	movs	r3, #0
 800d386:	60a3      	str	r3, [r4, #8]
 800d388:	6963      	ldr	r3, [r4, #20]
 800d38a:	425b      	negs	r3, r3
 800d38c:	61a3      	str	r3, [r4, #24]
 800d38e:	6923      	ldr	r3, [r4, #16]
 800d390:	b943      	cbnz	r3, 800d3a4 <__swsetup_r+0xa8>
 800d392:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d396:	d1c4      	bne.n	800d322 <__swsetup_r+0x26>
 800d398:	bd38      	pop	{r3, r4, r5, pc}
 800d39a:	0781      	lsls	r1, r0, #30
 800d39c:	bf58      	it	pl
 800d39e:	6963      	ldrpl	r3, [r4, #20]
 800d3a0:	60a3      	str	r3, [r4, #8]
 800d3a2:	e7f4      	b.n	800d38e <__swsetup_r+0x92>
 800d3a4:	2000      	movs	r0, #0
 800d3a6:	e7f7      	b.n	800d398 <__swsetup_r+0x9c>
 800d3a8:	20000068 	.word	0x20000068

0800d3ac <_raise_r>:
 800d3ac:	291f      	cmp	r1, #31
 800d3ae:	b538      	push	{r3, r4, r5, lr}
 800d3b0:	4604      	mov	r4, r0
 800d3b2:	460d      	mov	r5, r1
 800d3b4:	d904      	bls.n	800d3c0 <_raise_r+0x14>
 800d3b6:	2316      	movs	r3, #22
 800d3b8:	6003      	str	r3, [r0, #0]
 800d3ba:	f04f 30ff 	mov.w	r0, #4294967295
 800d3be:	bd38      	pop	{r3, r4, r5, pc}
 800d3c0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d3c2:	b112      	cbz	r2, 800d3ca <_raise_r+0x1e>
 800d3c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d3c8:	b94b      	cbnz	r3, 800d3de <_raise_r+0x32>
 800d3ca:	4620      	mov	r0, r4
 800d3cc:	f000 f830 	bl	800d430 <_getpid_r>
 800d3d0:	462a      	mov	r2, r5
 800d3d2:	4601      	mov	r1, r0
 800d3d4:	4620      	mov	r0, r4
 800d3d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d3da:	f000 b817 	b.w	800d40c <_kill_r>
 800d3de:	2b01      	cmp	r3, #1
 800d3e0:	d00a      	beq.n	800d3f8 <_raise_r+0x4c>
 800d3e2:	1c59      	adds	r1, r3, #1
 800d3e4:	d103      	bne.n	800d3ee <_raise_r+0x42>
 800d3e6:	2316      	movs	r3, #22
 800d3e8:	6003      	str	r3, [r0, #0]
 800d3ea:	2001      	movs	r0, #1
 800d3ec:	e7e7      	b.n	800d3be <_raise_r+0x12>
 800d3ee:	2400      	movs	r4, #0
 800d3f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d3f4:	4628      	mov	r0, r5
 800d3f6:	4798      	blx	r3
 800d3f8:	2000      	movs	r0, #0
 800d3fa:	e7e0      	b.n	800d3be <_raise_r+0x12>

0800d3fc <raise>:
 800d3fc:	4b02      	ldr	r3, [pc, #8]	; (800d408 <raise+0xc>)
 800d3fe:	4601      	mov	r1, r0
 800d400:	6818      	ldr	r0, [r3, #0]
 800d402:	f7ff bfd3 	b.w	800d3ac <_raise_r>
 800d406:	bf00      	nop
 800d408:	20000068 	.word	0x20000068

0800d40c <_kill_r>:
 800d40c:	b538      	push	{r3, r4, r5, lr}
 800d40e:	4d07      	ldr	r5, [pc, #28]	; (800d42c <_kill_r+0x20>)
 800d410:	2300      	movs	r3, #0
 800d412:	4604      	mov	r4, r0
 800d414:	4608      	mov	r0, r1
 800d416:	4611      	mov	r1, r2
 800d418:	602b      	str	r3, [r5, #0]
 800d41a:	f7f6 fc6b 	bl	8003cf4 <_kill>
 800d41e:	1c43      	adds	r3, r0, #1
 800d420:	d102      	bne.n	800d428 <_kill_r+0x1c>
 800d422:	682b      	ldr	r3, [r5, #0]
 800d424:	b103      	cbz	r3, 800d428 <_kill_r+0x1c>
 800d426:	6023      	str	r3, [r4, #0]
 800d428:	bd38      	pop	{r3, r4, r5, pc}
 800d42a:	bf00      	nop
 800d42c:	20002d3c 	.word	0x20002d3c

0800d430 <_getpid_r>:
 800d430:	f7f6 bc58 	b.w	8003ce4 <_getpid>

0800d434 <__swhatbuf_r>:
 800d434:	b570      	push	{r4, r5, r6, lr}
 800d436:	460c      	mov	r4, r1
 800d438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d43c:	2900      	cmp	r1, #0
 800d43e:	b096      	sub	sp, #88	; 0x58
 800d440:	4615      	mov	r5, r2
 800d442:	461e      	mov	r6, r3
 800d444:	da0d      	bge.n	800d462 <__swhatbuf_r+0x2e>
 800d446:	89a3      	ldrh	r3, [r4, #12]
 800d448:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d44c:	f04f 0100 	mov.w	r1, #0
 800d450:	bf0c      	ite	eq
 800d452:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d456:	2340      	movne	r3, #64	; 0x40
 800d458:	2000      	movs	r0, #0
 800d45a:	6031      	str	r1, [r6, #0]
 800d45c:	602b      	str	r3, [r5, #0]
 800d45e:	b016      	add	sp, #88	; 0x58
 800d460:	bd70      	pop	{r4, r5, r6, pc}
 800d462:	466a      	mov	r2, sp
 800d464:	f000 f848 	bl	800d4f8 <_fstat_r>
 800d468:	2800      	cmp	r0, #0
 800d46a:	dbec      	blt.n	800d446 <__swhatbuf_r+0x12>
 800d46c:	9901      	ldr	r1, [sp, #4]
 800d46e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d472:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d476:	4259      	negs	r1, r3
 800d478:	4159      	adcs	r1, r3
 800d47a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d47e:	e7eb      	b.n	800d458 <__swhatbuf_r+0x24>

0800d480 <__smakebuf_r>:
 800d480:	898b      	ldrh	r3, [r1, #12]
 800d482:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d484:	079d      	lsls	r5, r3, #30
 800d486:	4606      	mov	r6, r0
 800d488:	460c      	mov	r4, r1
 800d48a:	d507      	bpl.n	800d49c <__smakebuf_r+0x1c>
 800d48c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d490:	6023      	str	r3, [r4, #0]
 800d492:	6123      	str	r3, [r4, #16]
 800d494:	2301      	movs	r3, #1
 800d496:	6163      	str	r3, [r4, #20]
 800d498:	b002      	add	sp, #8
 800d49a:	bd70      	pop	{r4, r5, r6, pc}
 800d49c:	ab01      	add	r3, sp, #4
 800d49e:	466a      	mov	r2, sp
 800d4a0:	f7ff ffc8 	bl	800d434 <__swhatbuf_r>
 800d4a4:	9900      	ldr	r1, [sp, #0]
 800d4a6:	4605      	mov	r5, r0
 800d4a8:	4630      	mov	r0, r6
 800d4aa:	f7fe fecb 	bl	800c244 <_malloc_r>
 800d4ae:	b948      	cbnz	r0, 800d4c4 <__smakebuf_r+0x44>
 800d4b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4b4:	059a      	lsls	r2, r3, #22
 800d4b6:	d4ef      	bmi.n	800d498 <__smakebuf_r+0x18>
 800d4b8:	f023 0303 	bic.w	r3, r3, #3
 800d4bc:	f043 0302 	orr.w	r3, r3, #2
 800d4c0:	81a3      	strh	r3, [r4, #12]
 800d4c2:	e7e3      	b.n	800d48c <__smakebuf_r+0xc>
 800d4c4:	89a3      	ldrh	r3, [r4, #12]
 800d4c6:	6020      	str	r0, [r4, #0]
 800d4c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d4cc:	81a3      	strh	r3, [r4, #12]
 800d4ce:	9b00      	ldr	r3, [sp, #0]
 800d4d0:	6163      	str	r3, [r4, #20]
 800d4d2:	9b01      	ldr	r3, [sp, #4]
 800d4d4:	6120      	str	r0, [r4, #16]
 800d4d6:	b15b      	cbz	r3, 800d4f0 <__smakebuf_r+0x70>
 800d4d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d4dc:	4630      	mov	r0, r6
 800d4de:	f000 f81d 	bl	800d51c <_isatty_r>
 800d4e2:	b128      	cbz	r0, 800d4f0 <__smakebuf_r+0x70>
 800d4e4:	89a3      	ldrh	r3, [r4, #12]
 800d4e6:	f023 0303 	bic.w	r3, r3, #3
 800d4ea:	f043 0301 	orr.w	r3, r3, #1
 800d4ee:	81a3      	strh	r3, [r4, #12]
 800d4f0:	89a3      	ldrh	r3, [r4, #12]
 800d4f2:	431d      	orrs	r5, r3
 800d4f4:	81a5      	strh	r5, [r4, #12]
 800d4f6:	e7cf      	b.n	800d498 <__smakebuf_r+0x18>

0800d4f8 <_fstat_r>:
 800d4f8:	b538      	push	{r3, r4, r5, lr}
 800d4fa:	4d07      	ldr	r5, [pc, #28]	; (800d518 <_fstat_r+0x20>)
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	4604      	mov	r4, r0
 800d500:	4608      	mov	r0, r1
 800d502:	4611      	mov	r1, r2
 800d504:	602b      	str	r3, [r5, #0]
 800d506:	f7f6 fc54 	bl	8003db2 <_fstat>
 800d50a:	1c43      	adds	r3, r0, #1
 800d50c:	d102      	bne.n	800d514 <_fstat_r+0x1c>
 800d50e:	682b      	ldr	r3, [r5, #0]
 800d510:	b103      	cbz	r3, 800d514 <_fstat_r+0x1c>
 800d512:	6023      	str	r3, [r4, #0]
 800d514:	bd38      	pop	{r3, r4, r5, pc}
 800d516:	bf00      	nop
 800d518:	20002d3c 	.word	0x20002d3c

0800d51c <_isatty_r>:
 800d51c:	b538      	push	{r3, r4, r5, lr}
 800d51e:	4d06      	ldr	r5, [pc, #24]	; (800d538 <_isatty_r+0x1c>)
 800d520:	2300      	movs	r3, #0
 800d522:	4604      	mov	r4, r0
 800d524:	4608      	mov	r0, r1
 800d526:	602b      	str	r3, [r5, #0]
 800d528:	f7f6 fc53 	bl	8003dd2 <_isatty>
 800d52c:	1c43      	adds	r3, r0, #1
 800d52e:	d102      	bne.n	800d536 <_isatty_r+0x1a>
 800d530:	682b      	ldr	r3, [r5, #0]
 800d532:	b103      	cbz	r3, 800d536 <_isatty_r+0x1a>
 800d534:	6023      	str	r3, [r4, #0]
 800d536:	bd38      	pop	{r3, r4, r5, pc}
 800d538:	20002d3c 	.word	0x20002d3c

0800d53c <pow>:
 800d53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d53e:	ed2d 8b02 	vpush	{d8}
 800d542:	eeb0 8a40 	vmov.f32	s16, s0
 800d546:	eef0 8a60 	vmov.f32	s17, s1
 800d54a:	ec55 4b11 	vmov	r4, r5, d1
 800d54e:	f000 f873 	bl	800d638 <__ieee754_pow>
 800d552:	4622      	mov	r2, r4
 800d554:	462b      	mov	r3, r5
 800d556:	4620      	mov	r0, r4
 800d558:	4629      	mov	r1, r5
 800d55a:	ec57 6b10 	vmov	r6, r7, d0
 800d55e:	f7f3 faf5 	bl	8000b4c <__aeabi_dcmpun>
 800d562:	2800      	cmp	r0, #0
 800d564:	d13b      	bne.n	800d5de <pow+0xa2>
 800d566:	ec51 0b18 	vmov	r0, r1, d8
 800d56a:	2200      	movs	r2, #0
 800d56c:	2300      	movs	r3, #0
 800d56e:	f7f3 fabb 	bl	8000ae8 <__aeabi_dcmpeq>
 800d572:	b1b8      	cbz	r0, 800d5a4 <pow+0x68>
 800d574:	2200      	movs	r2, #0
 800d576:	2300      	movs	r3, #0
 800d578:	4620      	mov	r0, r4
 800d57a:	4629      	mov	r1, r5
 800d57c:	f7f3 fab4 	bl	8000ae8 <__aeabi_dcmpeq>
 800d580:	2800      	cmp	r0, #0
 800d582:	d146      	bne.n	800d612 <pow+0xd6>
 800d584:	ec45 4b10 	vmov	d0, r4, r5
 800d588:	f000 f848 	bl	800d61c <finite>
 800d58c:	b338      	cbz	r0, 800d5de <pow+0xa2>
 800d58e:	2200      	movs	r2, #0
 800d590:	2300      	movs	r3, #0
 800d592:	4620      	mov	r0, r4
 800d594:	4629      	mov	r1, r5
 800d596:	f7f3 fab1 	bl	8000afc <__aeabi_dcmplt>
 800d59a:	b300      	cbz	r0, 800d5de <pow+0xa2>
 800d59c:	f7fd ff2a 	bl	800b3f4 <__errno>
 800d5a0:	2322      	movs	r3, #34	; 0x22
 800d5a2:	e01b      	b.n	800d5dc <pow+0xa0>
 800d5a4:	ec47 6b10 	vmov	d0, r6, r7
 800d5a8:	f000 f838 	bl	800d61c <finite>
 800d5ac:	b9e0      	cbnz	r0, 800d5e8 <pow+0xac>
 800d5ae:	eeb0 0a48 	vmov.f32	s0, s16
 800d5b2:	eef0 0a68 	vmov.f32	s1, s17
 800d5b6:	f000 f831 	bl	800d61c <finite>
 800d5ba:	b1a8      	cbz	r0, 800d5e8 <pow+0xac>
 800d5bc:	ec45 4b10 	vmov	d0, r4, r5
 800d5c0:	f000 f82c 	bl	800d61c <finite>
 800d5c4:	b180      	cbz	r0, 800d5e8 <pow+0xac>
 800d5c6:	4632      	mov	r2, r6
 800d5c8:	463b      	mov	r3, r7
 800d5ca:	4630      	mov	r0, r6
 800d5cc:	4639      	mov	r1, r7
 800d5ce:	f7f3 fabd 	bl	8000b4c <__aeabi_dcmpun>
 800d5d2:	2800      	cmp	r0, #0
 800d5d4:	d0e2      	beq.n	800d59c <pow+0x60>
 800d5d6:	f7fd ff0d 	bl	800b3f4 <__errno>
 800d5da:	2321      	movs	r3, #33	; 0x21
 800d5dc:	6003      	str	r3, [r0, #0]
 800d5de:	ecbd 8b02 	vpop	{d8}
 800d5e2:	ec47 6b10 	vmov	d0, r6, r7
 800d5e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5e8:	2200      	movs	r2, #0
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	4630      	mov	r0, r6
 800d5ee:	4639      	mov	r1, r7
 800d5f0:	f7f3 fa7a 	bl	8000ae8 <__aeabi_dcmpeq>
 800d5f4:	2800      	cmp	r0, #0
 800d5f6:	d0f2      	beq.n	800d5de <pow+0xa2>
 800d5f8:	eeb0 0a48 	vmov.f32	s0, s16
 800d5fc:	eef0 0a68 	vmov.f32	s1, s17
 800d600:	f000 f80c 	bl	800d61c <finite>
 800d604:	2800      	cmp	r0, #0
 800d606:	d0ea      	beq.n	800d5de <pow+0xa2>
 800d608:	ec45 4b10 	vmov	d0, r4, r5
 800d60c:	f000 f806 	bl	800d61c <finite>
 800d610:	e7c3      	b.n	800d59a <pow+0x5e>
 800d612:	4f01      	ldr	r7, [pc, #4]	; (800d618 <pow+0xdc>)
 800d614:	2600      	movs	r6, #0
 800d616:	e7e2      	b.n	800d5de <pow+0xa2>
 800d618:	3ff00000 	.word	0x3ff00000

0800d61c <finite>:
 800d61c:	b082      	sub	sp, #8
 800d61e:	ed8d 0b00 	vstr	d0, [sp]
 800d622:	9801      	ldr	r0, [sp, #4]
 800d624:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800d628:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800d62c:	0fc0      	lsrs	r0, r0, #31
 800d62e:	b002      	add	sp, #8
 800d630:	4770      	bx	lr
 800d632:	0000      	movs	r0, r0
 800d634:	0000      	movs	r0, r0
	...

0800d638 <__ieee754_pow>:
 800d638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d63c:	ed2d 8b06 	vpush	{d8-d10}
 800d640:	b089      	sub	sp, #36	; 0x24
 800d642:	ed8d 1b00 	vstr	d1, [sp]
 800d646:	e9dd 2900 	ldrd	r2, r9, [sp]
 800d64a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800d64e:	ea58 0102 	orrs.w	r1, r8, r2
 800d652:	ec57 6b10 	vmov	r6, r7, d0
 800d656:	d115      	bne.n	800d684 <__ieee754_pow+0x4c>
 800d658:	19b3      	adds	r3, r6, r6
 800d65a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800d65e:	4152      	adcs	r2, r2
 800d660:	4299      	cmp	r1, r3
 800d662:	4b89      	ldr	r3, [pc, #548]	; (800d888 <__ieee754_pow+0x250>)
 800d664:	4193      	sbcs	r3, r2
 800d666:	f080 84d1 	bcs.w	800e00c <__ieee754_pow+0x9d4>
 800d66a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d66e:	4630      	mov	r0, r6
 800d670:	4639      	mov	r1, r7
 800d672:	f7f2 fe1b 	bl	80002ac <__adddf3>
 800d676:	ec41 0b10 	vmov	d0, r0, r1
 800d67a:	b009      	add	sp, #36	; 0x24
 800d67c:	ecbd 8b06 	vpop	{d8-d10}
 800d680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d684:	4b81      	ldr	r3, [pc, #516]	; (800d88c <__ieee754_pow+0x254>)
 800d686:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800d68a:	429c      	cmp	r4, r3
 800d68c:	ee10 aa10 	vmov	sl, s0
 800d690:	463d      	mov	r5, r7
 800d692:	dc06      	bgt.n	800d6a2 <__ieee754_pow+0x6a>
 800d694:	d101      	bne.n	800d69a <__ieee754_pow+0x62>
 800d696:	2e00      	cmp	r6, #0
 800d698:	d1e7      	bne.n	800d66a <__ieee754_pow+0x32>
 800d69a:	4598      	cmp	r8, r3
 800d69c:	dc01      	bgt.n	800d6a2 <__ieee754_pow+0x6a>
 800d69e:	d10f      	bne.n	800d6c0 <__ieee754_pow+0x88>
 800d6a0:	b172      	cbz	r2, 800d6c0 <__ieee754_pow+0x88>
 800d6a2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800d6a6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800d6aa:	ea55 050a 	orrs.w	r5, r5, sl
 800d6ae:	d1dc      	bne.n	800d66a <__ieee754_pow+0x32>
 800d6b0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d6b4:	18db      	adds	r3, r3, r3
 800d6b6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800d6ba:	4152      	adcs	r2, r2
 800d6bc:	429d      	cmp	r5, r3
 800d6be:	e7d0      	b.n	800d662 <__ieee754_pow+0x2a>
 800d6c0:	2d00      	cmp	r5, #0
 800d6c2:	da3b      	bge.n	800d73c <__ieee754_pow+0x104>
 800d6c4:	4b72      	ldr	r3, [pc, #456]	; (800d890 <__ieee754_pow+0x258>)
 800d6c6:	4598      	cmp	r8, r3
 800d6c8:	dc51      	bgt.n	800d76e <__ieee754_pow+0x136>
 800d6ca:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800d6ce:	4598      	cmp	r8, r3
 800d6d0:	f340 84ab 	ble.w	800e02a <__ieee754_pow+0x9f2>
 800d6d4:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d6d8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d6dc:	2b14      	cmp	r3, #20
 800d6de:	dd0f      	ble.n	800d700 <__ieee754_pow+0xc8>
 800d6e0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800d6e4:	fa22 f103 	lsr.w	r1, r2, r3
 800d6e8:	fa01 f303 	lsl.w	r3, r1, r3
 800d6ec:	4293      	cmp	r3, r2
 800d6ee:	f040 849c 	bne.w	800e02a <__ieee754_pow+0x9f2>
 800d6f2:	f001 0101 	and.w	r1, r1, #1
 800d6f6:	f1c1 0302 	rsb	r3, r1, #2
 800d6fa:	9304      	str	r3, [sp, #16]
 800d6fc:	b182      	cbz	r2, 800d720 <__ieee754_pow+0xe8>
 800d6fe:	e05f      	b.n	800d7c0 <__ieee754_pow+0x188>
 800d700:	2a00      	cmp	r2, #0
 800d702:	d15b      	bne.n	800d7bc <__ieee754_pow+0x184>
 800d704:	f1c3 0314 	rsb	r3, r3, #20
 800d708:	fa48 f103 	asr.w	r1, r8, r3
 800d70c:	fa01 f303 	lsl.w	r3, r1, r3
 800d710:	4543      	cmp	r3, r8
 800d712:	f040 8487 	bne.w	800e024 <__ieee754_pow+0x9ec>
 800d716:	f001 0101 	and.w	r1, r1, #1
 800d71a:	f1c1 0302 	rsb	r3, r1, #2
 800d71e:	9304      	str	r3, [sp, #16]
 800d720:	4b5c      	ldr	r3, [pc, #368]	; (800d894 <__ieee754_pow+0x25c>)
 800d722:	4598      	cmp	r8, r3
 800d724:	d132      	bne.n	800d78c <__ieee754_pow+0x154>
 800d726:	f1b9 0f00 	cmp.w	r9, #0
 800d72a:	f280 8477 	bge.w	800e01c <__ieee754_pow+0x9e4>
 800d72e:	4959      	ldr	r1, [pc, #356]	; (800d894 <__ieee754_pow+0x25c>)
 800d730:	4632      	mov	r2, r6
 800d732:	463b      	mov	r3, r7
 800d734:	2000      	movs	r0, #0
 800d736:	f7f3 f899 	bl	800086c <__aeabi_ddiv>
 800d73a:	e79c      	b.n	800d676 <__ieee754_pow+0x3e>
 800d73c:	2300      	movs	r3, #0
 800d73e:	9304      	str	r3, [sp, #16]
 800d740:	2a00      	cmp	r2, #0
 800d742:	d13d      	bne.n	800d7c0 <__ieee754_pow+0x188>
 800d744:	4b51      	ldr	r3, [pc, #324]	; (800d88c <__ieee754_pow+0x254>)
 800d746:	4598      	cmp	r8, r3
 800d748:	d1ea      	bne.n	800d720 <__ieee754_pow+0xe8>
 800d74a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800d74e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d752:	ea53 030a 	orrs.w	r3, r3, sl
 800d756:	f000 8459 	beq.w	800e00c <__ieee754_pow+0x9d4>
 800d75a:	4b4f      	ldr	r3, [pc, #316]	; (800d898 <__ieee754_pow+0x260>)
 800d75c:	429c      	cmp	r4, r3
 800d75e:	dd08      	ble.n	800d772 <__ieee754_pow+0x13a>
 800d760:	f1b9 0f00 	cmp.w	r9, #0
 800d764:	f2c0 8456 	blt.w	800e014 <__ieee754_pow+0x9dc>
 800d768:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d76c:	e783      	b.n	800d676 <__ieee754_pow+0x3e>
 800d76e:	2302      	movs	r3, #2
 800d770:	e7e5      	b.n	800d73e <__ieee754_pow+0x106>
 800d772:	f1b9 0f00 	cmp.w	r9, #0
 800d776:	f04f 0000 	mov.w	r0, #0
 800d77a:	f04f 0100 	mov.w	r1, #0
 800d77e:	f6bf af7a 	bge.w	800d676 <__ieee754_pow+0x3e>
 800d782:	e9dd 0300 	ldrd	r0, r3, [sp]
 800d786:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d78a:	e774      	b.n	800d676 <__ieee754_pow+0x3e>
 800d78c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800d790:	d106      	bne.n	800d7a0 <__ieee754_pow+0x168>
 800d792:	4632      	mov	r2, r6
 800d794:	463b      	mov	r3, r7
 800d796:	4630      	mov	r0, r6
 800d798:	4639      	mov	r1, r7
 800d79a:	f7f2 ff3d 	bl	8000618 <__aeabi_dmul>
 800d79e:	e76a      	b.n	800d676 <__ieee754_pow+0x3e>
 800d7a0:	4b3e      	ldr	r3, [pc, #248]	; (800d89c <__ieee754_pow+0x264>)
 800d7a2:	4599      	cmp	r9, r3
 800d7a4:	d10c      	bne.n	800d7c0 <__ieee754_pow+0x188>
 800d7a6:	2d00      	cmp	r5, #0
 800d7a8:	db0a      	blt.n	800d7c0 <__ieee754_pow+0x188>
 800d7aa:	ec47 6b10 	vmov	d0, r6, r7
 800d7ae:	b009      	add	sp, #36	; 0x24
 800d7b0:	ecbd 8b06 	vpop	{d8-d10}
 800d7b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7b8:	f000 bd20 	b.w	800e1fc <__ieee754_sqrt>
 800d7bc:	2300      	movs	r3, #0
 800d7be:	9304      	str	r3, [sp, #16]
 800d7c0:	ec47 6b10 	vmov	d0, r6, r7
 800d7c4:	f000 fc62 	bl	800e08c <fabs>
 800d7c8:	ec51 0b10 	vmov	r0, r1, d0
 800d7cc:	f1ba 0f00 	cmp.w	sl, #0
 800d7d0:	d129      	bne.n	800d826 <__ieee754_pow+0x1ee>
 800d7d2:	b124      	cbz	r4, 800d7de <__ieee754_pow+0x1a6>
 800d7d4:	4b2f      	ldr	r3, [pc, #188]	; (800d894 <__ieee754_pow+0x25c>)
 800d7d6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800d7da:	429a      	cmp	r2, r3
 800d7dc:	d123      	bne.n	800d826 <__ieee754_pow+0x1ee>
 800d7de:	f1b9 0f00 	cmp.w	r9, #0
 800d7e2:	da05      	bge.n	800d7f0 <__ieee754_pow+0x1b8>
 800d7e4:	4602      	mov	r2, r0
 800d7e6:	460b      	mov	r3, r1
 800d7e8:	2000      	movs	r0, #0
 800d7ea:	492a      	ldr	r1, [pc, #168]	; (800d894 <__ieee754_pow+0x25c>)
 800d7ec:	f7f3 f83e 	bl	800086c <__aeabi_ddiv>
 800d7f0:	2d00      	cmp	r5, #0
 800d7f2:	f6bf af40 	bge.w	800d676 <__ieee754_pow+0x3e>
 800d7f6:	9b04      	ldr	r3, [sp, #16]
 800d7f8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d7fc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d800:	431c      	orrs	r4, r3
 800d802:	d108      	bne.n	800d816 <__ieee754_pow+0x1de>
 800d804:	4602      	mov	r2, r0
 800d806:	460b      	mov	r3, r1
 800d808:	4610      	mov	r0, r2
 800d80a:	4619      	mov	r1, r3
 800d80c:	f7f2 fd4c 	bl	80002a8 <__aeabi_dsub>
 800d810:	4602      	mov	r2, r0
 800d812:	460b      	mov	r3, r1
 800d814:	e78f      	b.n	800d736 <__ieee754_pow+0xfe>
 800d816:	9b04      	ldr	r3, [sp, #16]
 800d818:	2b01      	cmp	r3, #1
 800d81a:	f47f af2c 	bne.w	800d676 <__ieee754_pow+0x3e>
 800d81e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d822:	4619      	mov	r1, r3
 800d824:	e727      	b.n	800d676 <__ieee754_pow+0x3e>
 800d826:	0feb      	lsrs	r3, r5, #31
 800d828:	3b01      	subs	r3, #1
 800d82a:	9306      	str	r3, [sp, #24]
 800d82c:	9a06      	ldr	r2, [sp, #24]
 800d82e:	9b04      	ldr	r3, [sp, #16]
 800d830:	4313      	orrs	r3, r2
 800d832:	d102      	bne.n	800d83a <__ieee754_pow+0x202>
 800d834:	4632      	mov	r2, r6
 800d836:	463b      	mov	r3, r7
 800d838:	e7e6      	b.n	800d808 <__ieee754_pow+0x1d0>
 800d83a:	4b19      	ldr	r3, [pc, #100]	; (800d8a0 <__ieee754_pow+0x268>)
 800d83c:	4598      	cmp	r8, r3
 800d83e:	f340 80fb 	ble.w	800da38 <__ieee754_pow+0x400>
 800d842:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800d846:	4598      	cmp	r8, r3
 800d848:	4b13      	ldr	r3, [pc, #76]	; (800d898 <__ieee754_pow+0x260>)
 800d84a:	dd0c      	ble.n	800d866 <__ieee754_pow+0x22e>
 800d84c:	429c      	cmp	r4, r3
 800d84e:	dc0f      	bgt.n	800d870 <__ieee754_pow+0x238>
 800d850:	f1b9 0f00 	cmp.w	r9, #0
 800d854:	da0f      	bge.n	800d876 <__ieee754_pow+0x23e>
 800d856:	2000      	movs	r0, #0
 800d858:	b009      	add	sp, #36	; 0x24
 800d85a:	ecbd 8b06 	vpop	{d8-d10}
 800d85e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d862:	f000 bcc2 	b.w	800e1ea <__math_oflow>
 800d866:	429c      	cmp	r4, r3
 800d868:	dbf2      	blt.n	800d850 <__ieee754_pow+0x218>
 800d86a:	4b0a      	ldr	r3, [pc, #40]	; (800d894 <__ieee754_pow+0x25c>)
 800d86c:	429c      	cmp	r4, r3
 800d86e:	dd19      	ble.n	800d8a4 <__ieee754_pow+0x26c>
 800d870:	f1b9 0f00 	cmp.w	r9, #0
 800d874:	dcef      	bgt.n	800d856 <__ieee754_pow+0x21e>
 800d876:	2000      	movs	r0, #0
 800d878:	b009      	add	sp, #36	; 0x24
 800d87a:	ecbd 8b06 	vpop	{d8-d10}
 800d87e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d882:	f000 bca9 	b.w	800e1d8 <__math_uflow>
 800d886:	bf00      	nop
 800d888:	fff00000 	.word	0xfff00000
 800d88c:	7ff00000 	.word	0x7ff00000
 800d890:	433fffff 	.word	0x433fffff
 800d894:	3ff00000 	.word	0x3ff00000
 800d898:	3fefffff 	.word	0x3fefffff
 800d89c:	3fe00000 	.word	0x3fe00000
 800d8a0:	41e00000 	.word	0x41e00000
 800d8a4:	4b60      	ldr	r3, [pc, #384]	; (800da28 <__ieee754_pow+0x3f0>)
 800d8a6:	2200      	movs	r2, #0
 800d8a8:	f7f2 fcfe 	bl	80002a8 <__aeabi_dsub>
 800d8ac:	a354      	add	r3, pc, #336	; (adr r3, 800da00 <__ieee754_pow+0x3c8>)
 800d8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8b2:	4604      	mov	r4, r0
 800d8b4:	460d      	mov	r5, r1
 800d8b6:	f7f2 feaf 	bl	8000618 <__aeabi_dmul>
 800d8ba:	a353      	add	r3, pc, #332	; (adr r3, 800da08 <__ieee754_pow+0x3d0>)
 800d8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8c0:	4606      	mov	r6, r0
 800d8c2:	460f      	mov	r7, r1
 800d8c4:	4620      	mov	r0, r4
 800d8c6:	4629      	mov	r1, r5
 800d8c8:	f7f2 fea6 	bl	8000618 <__aeabi_dmul>
 800d8cc:	4b57      	ldr	r3, [pc, #348]	; (800da2c <__ieee754_pow+0x3f4>)
 800d8ce:	4682      	mov	sl, r0
 800d8d0:	468b      	mov	fp, r1
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	4620      	mov	r0, r4
 800d8d6:	4629      	mov	r1, r5
 800d8d8:	f7f2 fe9e 	bl	8000618 <__aeabi_dmul>
 800d8dc:	4602      	mov	r2, r0
 800d8de:	460b      	mov	r3, r1
 800d8e0:	a14b      	add	r1, pc, #300	; (adr r1, 800da10 <__ieee754_pow+0x3d8>)
 800d8e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d8e6:	f7f2 fcdf 	bl	80002a8 <__aeabi_dsub>
 800d8ea:	4622      	mov	r2, r4
 800d8ec:	462b      	mov	r3, r5
 800d8ee:	f7f2 fe93 	bl	8000618 <__aeabi_dmul>
 800d8f2:	4602      	mov	r2, r0
 800d8f4:	460b      	mov	r3, r1
 800d8f6:	2000      	movs	r0, #0
 800d8f8:	494d      	ldr	r1, [pc, #308]	; (800da30 <__ieee754_pow+0x3f8>)
 800d8fa:	f7f2 fcd5 	bl	80002a8 <__aeabi_dsub>
 800d8fe:	4622      	mov	r2, r4
 800d900:	4680      	mov	r8, r0
 800d902:	4689      	mov	r9, r1
 800d904:	462b      	mov	r3, r5
 800d906:	4620      	mov	r0, r4
 800d908:	4629      	mov	r1, r5
 800d90a:	f7f2 fe85 	bl	8000618 <__aeabi_dmul>
 800d90e:	4602      	mov	r2, r0
 800d910:	460b      	mov	r3, r1
 800d912:	4640      	mov	r0, r8
 800d914:	4649      	mov	r1, r9
 800d916:	f7f2 fe7f 	bl	8000618 <__aeabi_dmul>
 800d91a:	a33f      	add	r3, pc, #252	; (adr r3, 800da18 <__ieee754_pow+0x3e0>)
 800d91c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d920:	f7f2 fe7a 	bl	8000618 <__aeabi_dmul>
 800d924:	4602      	mov	r2, r0
 800d926:	460b      	mov	r3, r1
 800d928:	4650      	mov	r0, sl
 800d92a:	4659      	mov	r1, fp
 800d92c:	f7f2 fcbc 	bl	80002a8 <__aeabi_dsub>
 800d930:	4602      	mov	r2, r0
 800d932:	460b      	mov	r3, r1
 800d934:	4680      	mov	r8, r0
 800d936:	4689      	mov	r9, r1
 800d938:	4630      	mov	r0, r6
 800d93a:	4639      	mov	r1, r7
 800d93c:	f7f2 fcb6 	bl	80002ac <__adddf3>
 800d940:	2000      	movs	r0, #0
 800d942:	4632      	mov	r2, r6
 800d944:	463b      	mov	r3, r7
 800d946:	4604      	mov	r4, r0
 800d948:	460d      	mov	r5, r1
 800d94a:	f7f2 fcad 	bl	80002a8 <__aeabi_dsub>
 800d94e:	4602      	mov	r2, r0
 800d950:	460b      	mov	r3, r1
 800d952:	4640      	mov	r0, r8
 800d954:	4649      	mov	r1, r9
 800d956:	f7f2 fca7 	bl	80002a8 <__aeabi_dsub>
 800d95a:	9b04      	ldr	r3, [sp, #16]
 800d95c:	9a06      	ldr	r2, [sp, #24]
 800d95e:	3b01      	subs	r3, #1
 800d960:	4313      	orrs	r3, r2
 800d962:	4682      	mov	sl, r0
 800d964:	468b      	mov	fp, r1
 800d966:	f040 81e7 	bne.w	800dd38 <__ieee754_pow+0x700>
 800d96a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800da20 <__ieee754_pow+0x3e8>
 800d96e:	eeb0 8a47 	vmov.f32	s16, s14
 800d972:	eef0 8a67 	vmov.f32	s17, s15
 800d976:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d97a:	2600      	movs	r6, #0
 800d97c:	4632      	mov	r2, r6
 800d97e:	463b      	mov	r3, r7
 800d980:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d984:	f7f2 fc90 	bl	80002a8 <__aeabi_dsub>
 800d988:	4622      	mov	r2, r4
 800d98a:	462b      	mov	r3, r5
 800d98c:	f7f2 fe44 	bl	8000618 <__aeabi_dmul>
 800d990:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d994:	4680      	mov	r8, r0
 800d996:	4689      	mov	r9, r1
 800d998:	4650      	mov	r0, sl
 800d99a:	4659      	mov	r1, fp
 800d99c:	f7f2 fe3c 	bl	8000618 <__aeabi_dmul>
 800d9a0:	4602      	mov	r2, r0
 800d9a2:	460b      	mov	r3, r1
 800d9a4:	4640      	mov	r0, r8
 800d9a6:	4649      	mov	r1, r9
 800d9a8:	f7f2 fc80 	bl	80002ac <__adddf3>
 800d9ac:	4632      	mov	r2, r6
 800d9ae:	463b      	mov	r3, r7
 800d9b0:	4680      	mov	r8, r0
 800d9b2:	4689      	mov	r9, r1
 800d9b4:	4620      	mov	r0, r4
 800d9b6:	4629      	mov	r1, r5
 800d9b8:	f7f2 fe2e 	bl	8000618 <__aeabi_dmul>
 800d9bc:	460b      	mov	r3, r1
 800d9be:	4604      	mov	r4, r0
 800d9c0:	460d      	mov	r5, r1
 800d9c2:	4602      	mov	r2, r0
 800d9c4:	4649      	mov	r1, r9
 800d9c6:	4640      	mov	r0, r8
 800d9c8:	f7f2 fc70 	bl	80002ac <__adddf3>
 800d9cc:	4b19      	ldr	r3, [pc, #100]	; (800da34 <__ieee754_pow+0x3fc>)
 800d9ce:	4299      	cmp	r1, r3
 800d9d0:	ec45 4b19 	vmov	d9, r4, r5
 800d9d4:	4606      	mov	r6, r0
 800d9d6:	460f      	mov	r7, r1
 800d9d8:	468b      	mov	fp, r1
 800d9da:	f340 82f0 	ble.w	800dfbe <__ieee754_pow+0x986>
 800d9de:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800d9e2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800d9e6:	4303      	orrs	r3, r0
 800d9e8:	f000 81e4 	beq.w	800ddb4 <__ieee754_pow+0x77c>
 800d9ec:	ec51 0b18 	vmov	r0, r1, d8
 800d9f0:	2200      	movs	r2, #0
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	f7f3 f882 	bl	8000afc <__aeabi_dcmplt>
 800d9f8:	3800      	subs	r0, #0
 800d9fa:	bf18      	it	ne
 800d9fc:	2001      	movne	r0, #1
 800d9fe:	e72b      	b.n	800d858 <__ieee754_pow+0x220>
 800da00:	60000000 	.word	0x60000000
 800da04:	3ff71547 	.word	0x3ff71547
 800da08:	f85ddf44 	.word	0xf85ddf44
 800da0c:	3e54ae0b 	.word	0x3e54ae0b
 800da10:	55555555 	.word	0x55555555
 800da14:	3fd55555 	.word	0x3fd55555
 800da18:	652b82fe 	.word	0x652b82fe
 800da1c:	3ff71547 	.word	0x3ff71547
 800da20:	00000000 	.word	0x00000000
 800da24:	bff00000 	.word	0xbff00000
 800da28:	3ff00000 	.word	0x3ff00000
 800da2c:	3fd00000 	.word	0x3fd00000
 800da30:	3fe00000 	.word	0x3fe00000
 800da34:	408fffff 	.word	0x408fffff
 800da38:	4bd5      	ldr	r3, [pc, #852]	; (800dd90 <__ieee754_pow+0x758>)
 800da3a:	402b      	ands	r3, r5
 800da3c:	2200      	movs	r2, #0
 800da3e:	b92b      	cbnz	r3, 800da4c <__ieee754_pow+0x414>
 800da40:	4bd4      	ldr	r3, [pc, #848]	; (800dd94 <__ieee754_pow+0x75c>)
 800da42:	f7f2 fde9 	bl	8000618 <__aeabi_dmul>
 800da46:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800da4a:	460c      	mov	r4, r1
 800da4c:	1523      	asrs	r3, r4, #20
 800da4e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800da52:	4413      	add	r3, r2
 800da54:	9305      	str	r3, [sp, #20]
 800da56:	4bd0      	ldr	r3, [pc, #832]	; (800dd98 <__ieee754_pow+0x760>)
 800da58:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800da5c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800da60:	429c      	cmp	r4, r3
 800da62:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800da66:	dd08      	ble.n	800da7a <__ieee754_pow+0x442>
 800da68:	4bcc      	ldr	r3, [pc, #816]	; (800dd9c <__ieee754_pow+0x764>)
 800da6a:	429c      	cmp	r4, r3
 800da6c:	f340 8162 	ble.w	800dd34 <__ieee754_pow+0x6fc>
 800da70:	9b05      	ldr	r3, [sp, #20]
 800da72:	3301      	adds	r3, #1
 800da74:	9305      	str	r3, [sp, #20]
 800da76:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800da7a:	2400      	movs	r4, #0
 800da7c:	00e3      	lsls	r3, r4, #3
 800da7e:	9307      	str	r3, [sp, #28]
 800da80:	4bc7      	ldr	r3, [pc, #796]	; (800dda0 <__ieee754_pow+0x768>)
 800da82:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800da86:	ed93 7b00 	vldr	d7, [r3]
 800da8a:	4629      	mov	r1, r5
 800da8c:	ec53 2b17 	vmov	r2, r3, d7
 800da90:	eeb0 9a47 	vmov.f32	s18, s14
 800da94:	eef0 9a67 	vmov.f32	s19, s15
 800da98:	4682      	mov	sl, r0
 800da9a:	f7f2 fc05 	bl	80002a8 <__aeabi_dsub>
 800da9e:	4652      	mov	r2, sl
 800daa0:	4606      	mov	r6, r0
 800daa2:	460f      	mov	r7, r1
 800daa4:	462b      	mov	r3, r5
 800daa6:	ec51 0b19 	vmov	r0, r1, d9
 800daaa:	f7f2 fbff 	bl	80002ac <__adddf3>
 800daae:	4602      	mov	r2, r0
 800dab0:	460b      	mov	r3, r1
 800dab2:	2000      	movs	r0, #0
 800dab4:	49bb      	ldr	r1, [pc, #748]	; (800dda4 <__ieee754_pow+0x76c>)
 800dab6:	f7f2 fed9 	bl	800086c <__aeabi_ddiv>
 800daba:	ec41 0b1a 	vmov	d10, r0, r1
 800dabe:	4602      	mov	r2, r0
 800dac0:	460b      	mov	r3, r1
 800dac2:	4630      	mov	r0, r6
 800dac4:	4639      	mov	r1, r7
 800dac6:	f7f2 fda7 	bl	8000618 <__aeabi_dmul>
 800daca:	2300      	movs	r3, #0
 800dacc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dad0:	9302      	str	r3, [sp, #8]
 800dad2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800dad6:	46ab      	mov	fp, r5
 800dad8:	106d      	asrs	r5, r5, #1
 800dada:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800dade:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800dae2:	ec41 0b18 	vmov	d8, r0, r1
 800dae6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800daea:	2200      	movs	r2, #0
 800daec:	4640      	mov	r0, r8
 800daee:	4649      	mov	r1, r9
 800daf0:	4614      	mov	r4, r2
 800daf2:	461d      	mov	r5, r3
 800daf4:	f7f2 fd90 	bl	8000618 <__aeabi_dmul>
 800daf8:	4602      	mov	r2, r0
 800dafa:	460b      	mov	r3, r1
 800dafc:	4630      	mov	r0, r6
 800dafe:	4639      	mov	r1, r7
 800db00:	f7f2 fbd2 	bl	80002a8 <__aeabi_dsub>
 800db04:	ec53 2b19 	vmov	r2, r3, d9
 800db08:	4606      	mov	r6, r0
 800db0a:	460f      	mov	r7, r1
 800db0c:	4620      	mov	r0, r4
 800db0e:	4629      	mov	r1, r5
 800db10:	f7f2 fbca 	bl	80002a8 <__aeabi_dsub>
 800db14:	4602      	mov	r2, r0
 800db16:	460b      	mov	r3, r1
 800db18:	4650      	mov	r0, sl
 800db1a:	4659      	mov	r1, fp
 800db1c:	f7f2 fbc4 	bl	80002a8 <__aeabi_dsub>
 800db20:	4642      	mov	r2, r8
 800db22:	464b      	mov	r3, r9
 800db24:	f7f2 fd78 	bl	8000618 <__aeabi_dmul>
 800db28:	4602      	mov	r2, r0
 800db2a:	460b      	mov	r3, r1
 800db2c:	4630      	mov	r0, r6
 800db2e:	4639      	mov	r1, r7
 800db30:	f7f2 fbba 	bl	80002a8 <__aeabi_dsub>
 800db34:	ec53 2b1a 	vmov	r2, r3, d10
 800db38:	f7f2 fd6e 	bl	8000618 <__aeabi_dmul>
 800db3c:	ec53 2b18 	vmov	r2, r3, d8
 800db40:	ec41 0b19 	vmov	d9, r0, r1
 800db44:	ec51 0b18 	vmov	r0, r1, d8
 800db48:	f7f2 fd66 	bl	8000618 <__aeabi_dmul>
 800db4c:	a37c      	add	r3, pc, #496	; (adr r3, 800dd40 <__ieee754_pow+0x708>)
 800db4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db52:	4604      	mov	r4, r0
 800db54:	460d      	mov	r5, r1
 800db56:	f7f2 fd5f 	bl	8000618 <__aeabi_dmul>
 800db5a:	a37b      	add	r3, pc, #492	; (adr r3, 800dd48 <__ieee754_pow+0x710>)
 800db5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db60:	f7f2 fba4 	bl	80002ac <__adddf3>
 800db64:	4622      	mov	r2, r4
 800db66:	462b      	mov	r3, r5
 800db68:	f7f2 fd56 	bl	8000618 <__aeabi_dmul>
 800db6c:	a378      	add	r3, pc, #480	; (adr r3, 800dd50 <__ieee754_pow+0x718>)
 800db6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db72:	f7f2 fb9b 	bl	80002ac <__adddf3>
 800db76:	4622      	mov	r2, r4
 800db78:	462b      	mov	r3, r5
 800db7a:	f7f2 fd4d 	bl	8000618 <__aeabi_dmul>
 800db7e:	a376      	add	r3, pc, #472	; (adr r3, 800dd58 <__ieee754_pow+0x720>)
 800db80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db84:	f7f2 fb92 	bl	80002ac <__adddf3>
 800db88:	4622      	mov	r2, r4
 800db8a:	462b      	mov	r3, r5
 800db8c:	f7f2 fd44 	bl	8000618 <__aeabi_dmul>
 800db90:	a373      	add	r3, pc, #460	; (adr r3, 800dd60 <__ieee754_pow+0x728>)
 800db92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db96:	f7f2 fb89 	bl	80002ac <__adddf3>
 800db9a:	4622      	mov	r2, r4
 800db9c:	462b      	mov	r3, r5
 800db9e:	f7f2 fd3b 	bl	8000618 <__aeabi_dmul>
 800dba2:	a371      	add	r3, pc, #452	; (adr r3, 800dd68 <__ieee754_pow+0x730>)
 800dba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dba8:	f7f2 fb80 	bl	80002ac <__adddf3>
 800dbac:	4622      	mov	r2, r4
 800dbae:	4606      	mov	r6, r0
 800dbb0:	460f      	mov	r7, r1
 800dbb2:	462b      	mov	r3, r5
 800dbb4:	4620      	mov	r0, r4
 800dbb6:	4629      	mov	r1, r5
 800dbb8:	f7f2 fd2e 	bl	8000618 <__aeabi_dmul>
 800dbbc:	4602      	mov	r2, r0
 800dbbe:	460b      	mov	r3, r1
 800dbc0:	4630      	mov	r0, r6
 800dbc2:	4639      	mov	r1, r7
 800dbc4:	f7f2 fd28 	bl	8000618 <__aeabi_dmul>
 800dbc8:	4642      	mov	r2, r8
 800dbca:	4604      	mov	r4, r0
 800dbcc:	460d      	mov	r5, r1
 800dbce:	464b      	mov	r3, r9
 800dbd0:	ec51 0b18 	vmov	r0, r1, d8
 800dbd4:	f7f2 fb6a 	bl	80002ac <__adddf3>
 800dbd8:	ec53 2b19 	vmov	r2, r3, d9
 800dbdc:	f7f2 fd1c 	bl	8000618 <__aeabi_dmul>
 800dbe0:	4622      	mov	r2, r4
 800dbe2:	462b      	mov	r3, r5
 800dbe4:	f7f2 fb62 	bl	80002ac <__adddf3>
 800dbe8:	4642      	mov	r2, r8
 800dbea:	4682      	mov	sl, r0
 800dbec:	468b      	mov	fp, r1
 800dbee:	464b      	mov	r3, r9
 800dbf0:	4640      	mov	r0, r8
 800dbf2:	4649      	mov	r1, r9
 800dbf4:	f7f2 fd10 	bl	8000618 <__aeabi_dmul>
 800dbf8:	4b6b      	ldr	r3, [pc, #428]	; (800dda8 <__ieee754_pow+0x770>)
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	4606      	mov	r6, r0
 800dbfe:	460f      	mov	r7, r1
 800dc00:	f7f2 fb54 	bl	80002ac <__adddf3>
 800dc04:	4652      	mov	r2, sl
 800dc06:	465b      	mov	r3, fp
 800dc08:	f7f2 fb50 	bl	80002ac <__adddf3>
 800dc0c:	2000      	movs	r0, #0
 800dc0e:	4604      	mov	r4, r0
 800dc10:	460d      	mov	r5, r1
 800dc12:	4602      	mov	r2, r0
 800dc14:	460b      	mov	r3, r1
 800dc16:	4640      	mov	r0, r8
 800dc18:	4649      	mov	r1, r9
 800dc1a:	f7f2 fcfd 	bl	8000618 <__aeabi_dmul>
 800dc1e:	4b62      	ldr	r3, [pc, #392]	; (800dda8 <__ieee754_pow+0x770>)
 800dc20:	4680      	mov	r8, r0
 800dc22:	4689      	mov	r9, r1
 800dc24:	2200      	movs	r2, #0
 800dc26:	4620      	mov	r0, r4
 800dc28:	4629      	mov	r1, r5
 800dc2a:	f7f2 fb3d 	bl	80002a8 <__aeabi_dsub>
 800dc2e:	4632      	mov	r2, r6
 800dc30:	463b      	mov	r3, r7
 800dc32:	f7f2 fb39 	bl	80002a8 <__aeabi_dsub>
 800dc36:	4602      	mov	r2, r0
 800dc38:	460b      	mov	r3, r1
 800dc3a:	4650      	mov	r0, sl
 800dc3c:	4659      	mov	r1, fp
 800dc3e:	f7f2 fb33 	bl	80002a8 <__aeabi_dsub>
 800dc42:	ec53 2b18 	vmov	r2, r3, d8
 800dc46:	f7f2 fce7 	bl	8000618 <__aeabi_dmul>
 800dc4a:	4622      	mov	r2, r4
 800dc4c:	4606      	mov	r6, r0
 800dc4e:	460f      	mov	r7, r1
 800dc50:	462b      	mov	r3, r5
 800dc52:	ec51 0b19 	vmov	r0, r1, d9
 800dc56:	f7f2 fcdf 	bl	8000618 <__aeabi_dmul>
 800dc5a:	4602      	mov	r2, r0
 800dc5c:	460b      	mov	r3, r1
 800dc5e:	4630      	mov	r0, r6
 800dc60:	4639      	mov	r1, r7
 800dc62:	f7f2 fb23 	bl	80002ac <__adddf3>
 800dc66:	4606      	mov	r6, r0
 800dc68:	460f      	mov	r7, r1
 800dc6a:	4602      	mov	r2, r0
 800dc6c:	460b      	mov	r3, r1
 800dc6e:	4640      	mov	r0, r8
 800dc70:	4649      	mov	r1, r9
 800dc72:	f7f2 fb1b 	bl	80002ac <__adddf3>
 800dc76:	a33e      	add	r3, pc, #248	; (adr r3, 800dd70 <__ieee754_pow+0x738>)
 800dc78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc7c:	2000      	movs	r0, #0
 800dc7e:	4604      	mov	r4, r0
 800dc80:	460d      	mov	r5, r1
 800dc82:	f7f2 fcc9 	bl	8000618 <__aeabi_dmul>
 800dc86:	4642      	mov	r2, r8
 800dc88:	ec41 0b18 	vmov	d8, r0, r1
 800dc8c:	464b      	mov	r3, r9
 800dc8e:	4620      	mov	r0, r4
 800dc90:	4629      	mov	r1, r5
 800dc92:	f7f2 fb09 	bl	80002a8 <__aeabi_dsub>
 800dc96:	4602      	mov	r2, r0
 800dc98:	460b      	mov	r3, r1
 800dc9a:	4630      	mov	r0, r6
 800dc9c:	4639      	mov	r1, r7
 800dc9e:	f7f2 fb03 	bl	80002a8 <__aeabi_dsub>
 800dca2:	a335      	add	r3, pc, #212	; (adr r3, 800dd78 <__ieee754_pow+0x740>)
 800dca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dca8:	f7f2 fcb6 	bl	8000618 <__aeabi_dmul>
 800dcac:	a334      	add	r3, pc, #208	; (adr r3, 800dd80 <__ieee754_pow+0x748>)
 800dcae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcb2:	4606      	mov	r6, r0
 800dcb4:	460f      	mov	r7, r1
 800dcb6:	4620      	mov	r0, r4
 800dcb8:	4629      	mov	r1, r5
 800dcba:	f7f2 fcad 	bl	8000618 <__aeabi_dmul>
 800dcbe:	4602      	mov	r2, r0
 800dcc0:	460b      	mov	r3, r1
 800dcc2:	4630      	mov	r0, r6
 800dcc4:	4639      	mov	r1, r7
 800dcc6:	f7f2 faf1 	bl	80002ac <__adddf3>
 800dcca:	9a07      	ldr	r2, [sp, #28]
 800dccc:	4b37      	ldr	r3, [pc, #220]	; (800ddac <__ieee754_pow+0x774>)
 800dcce:	4413      	add	r3, r2
 800dcd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcd4:	f7f2 faea 	bl	80002ac <__adddf3>
 800dcd8:	4682      	mov	sl, r0
 800dcda:	9805      	ldr	r0, [sp, #20]
 800dcdc:	468b      	mov	fp, r1
 800dcde:	f7f2 fc31 	bl	8000544 <__aeabi_i2d>
 800dce2:	9a07      	ldr	r2, [sp, #28]
 800dce4:	4b32      	ldr	r3, [pc, #200]	; (800ddb0 <__ieee754_pow+0x778>)
 800dce6:	4413      	add	r3, r2
 800dce8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dcec:	4606      	mov	r6, r0
 800dcee:	460f      	mov	r7, r1
 800dcf0:	4652      	mov	r2, sl
 800dcf2:	465b      	mov	r3, fp
 800dcf4:	ec51 0b18 	vmov	r0, r1, d8
 800dcf8:	f7f2 fad8 	bl	80002ac <__adddf3>
 800dcfc:	4642      	mov	r2, r8
 800dcfe:	464b      	mov	r3, r9
 800dd00:	f7f2 fad4 	bl	80002ac <__adddf3>
 800dd04:	4632      	mov	r2, r6
 800dd06:	463b      	mov	r3, r7
 800dd08:	f7f2 fad0 	bl	80002ac <__adddf3>
 800dd0c:	2000      	movs	r0, #0
 800dd0e:	4632      	mov	r2, r6
 800dd10:	463b      	mov	r3, r7
 800dd12:	4604      	mov	r4, r0
 800dd14:	460d      	mov	r5, r1
 800dd16:	f7f2 fac7 	bl	80002a8 <__aeabi_dsub>
 800dd1a:	4642      	mov	r2, r8
 800dd1c:	464b      	mov	r3, r9
 800dd1e:	f7f2 fac3 	bl	80002a8 <__aeabi_dsub>
 800dd22:	ec53 2b18 	vmov	r2, r3, d8
 800dd26:	f7f2 fabf 	bl	80002a8 <__aeabi_dsub>
 800dd2a:	4602      	mov	r2, r0
 800dd2c:	460b      	mov	r3, r1
 800dd2e:	4650      	mov	r0, sl
 800dd30:	4659      	mov	r1, fp
 800dd32:	e610      	b.n	800d956 <__ieee754_pow+0x31e>
 800dd34:	2401      	movs	r4, #1
 800dd36:	e6a1      	b.n	800da7c <__ieee754_pow+0x444>
 800dd38:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800dd88 <__ieee754_pow+0x750>
 800dd3c:	e617      	b.n	800d96e <__ieee754_pow+0x336>
 800dd3e:	bf00      	nop
 800dd40:	4a454eef 	.word	0x4a454eef
 800dd44:	3fca7e28 	.word	0x3fca7e28
 800dd48:	93c9db65 	.word	0x93c9db65
 800dd4c:	3fcd864a 	.word	0x3fcd864a
 800dd50:	a91d4101 	.word	0xa91d4101
 800dd54:	3fd17460 	.word	0x3fd17460
 800dd58:	518f264d 	.word	0x518f264d
 800dd5c:	3fd55555 	.word	0x3fd55555
 800dd60:	db6fabff 	.word	0xdb6fabff
 800dd64:	3fdb6db6 	.word	0x3fdb6db6
 800dd68:	33333303 	.word	0x33333303
 800dd6c:	3fe33333 	.word	0x3fe33333
 800dd70:	e0000000 	.word	0xe0000000
 800dd74:	3feec709 	.word	0x3feec709
 800dd78:	dc3a03fd 	.word	0xdc3a03fd
 800dd7c:	3feec709 	.word	0x3feec709
 800dd80:	145b01f5 	.word	0x145b01f5
 800dd84:	be3e2fe0 	.word	0xbe3e2fe0
 800dd88:	00000000 	.word	0x00000000
 800dd8c:	3ff00000 	.word	0x3ff00000
 800dd90:	7ff00000 	.word	0x7ff00000
 800dd94:	43400000 	.word	0x43400000
 800dd98:	0003988e 	.word	0x0003988e
 800dd9c:	000bb679 	.word	0x000bb679
 800dda0:	0800eb10 	.word	0x0800eb10
 800dda4:	3ff00000 	.word	0x3ff00000
 800dda8:	40080000 	.word	0x40080000
 800ddac:	0800eb30 	.word	0x0800eb30
 800ddb0:	0800eb20 	.word	0x0800eb20
 800ddb4:	a3b3      	add	r3, pc, #716	; (adr r3, 800e084 <__ieee754_pow+0xa4c>)
 800ddb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddba:	4640      	mov	r0, r8
 800ddbc:	4649      	mov	r1, r9
 800ddbe:	f7f2 fa75 	bl	80002ac <__adddf3>
 800ddc2:	4622      	mov	r2, r4
 800ddc4:	ec41 0b1a 	vmov	d10, r0, r1
 800ddc8:	462b      	mov	r3, r5
 800ddca:	4630      	mov	r0, r6
 800ddcc:	4639      	mov	r1, r7
 800ddce:	f7f2 fa6b 	bl	80002a8 <__aeabi_dsub>
 800ddd2:	4602      	mov	r2, r0
 800ddd4:	460b      	mov	r3, r1
 800ddd6:	ec51 0b1a 	vmov	r0, r1, d10
 800ddda:	f7f2 fead 	bl	8000b38 <__aeabi_dcmpgt>
 800ddde:	2800      	cmp	r0, #0
 800dde0:	f47f ae04 	bne.w	800d9ec <__ieee754_pow+0x3b4>
 800dde4:	4aa2      	ldr	r2, [pc, #648]	; (800e070 <__ieee754_pow+0xa38>)
 800dde6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ddea:	4293      	cmp	r3, r2
 800ddec:	f340 8107 	ble.w	800dffe <__ieee754_pow+0x9c6>
 800ddf0:	151b      	asrs	r3, r3, #20
 800ddf2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ddf6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800ddfa:	fa4a fa03 	asr.w	sl, sl, r3
 800ddfe:	44da      	add	sl, fp
 800de00:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800de04:	489b      	ldr	r0, [pc, #620]	; (800e074 <__ieee754_pow+0xa3c>)
 800de06:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800de0a:	4108      	asrs	r0, r1
 800de0c:	ea00 030a 	and.w	r3, r0, sl
 800de10:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800de14:	f1c1 0114 	rsb	r1, r1, #20
 800de18:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800de1c:	fa4a fa01 	asr.w	sl, sl, r1
 800de20:	f1bb 0f00 	cmp.w	fp, #0
 800de24:	f04f 0200 	mov.w	r2, #0
 800de28:	4620      	mov	r0, r4
 800de2a:	4629      	mov	r1, r5
 800de2c:	bfb8      	it	lt
 800de2e:	f1ca 0a00 	rsblt	sl, sl, #0
 800de32:	f7f2 fa39 	bl	80002a8 <__aeabi_dsub>
 800de36:	ec41 0b19 	vmov	d9, r0, r1
 800de3a:	4642      	mov	r2, r8
 800de3c:	464b      	mov	r3, r9
 800de3e:	ec51 0b19 	vmov	r0, r1, d9
 800de42:	f7f2 fa33 	bl	80002ac <__adddf3>
 800de46:	a37a      	add	r3, pc, #488	; (adr r3, 800e030 <__ieee754_pow+0x9f8>)
 800de48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de4c:	2000      	movs	r0, #0
 800de4e:	4604      	mov	r4, r0
 800de50:	460d      	mov	r5, r1
 800de52:	f7f2 fbe1 	bl	8000618 <__aeabi_dmul>
 800de56:	ec53 2b19 	vmov	r2, r3, d9
 800de5a:	4606      	mov	r6, r0
 800de5c:	460f      	mov	r7, r1
 800de5e:	4620      	mov	r0, r4
 800de60:	4629      	mov	r1, r5
 800de62:	f7f2 fa21 	bl	80002a8 <__aeabi_dsub>
 800de66:	4602      	mov	r2, r0
 800de68:	460b      	mov	r3, r1
 800de6a:	4640      	mov	r0, r8
 800de6c:	4649      	mov	r1, r9
 800de6e:	f7f2 fa1b 	bl	80002a8 <__aeabi_dsub>
 800de72:	a371      	add	r3, pc, #452	; (adr r3, 800e038 <__ieee754_pow+0xa00>)
 800de74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de78:	f7f2 fbce 	bl	8000618 <__aeabi_dmul>
 800de7c:	a370      	add	r3, pc, #448	; (adr r3, 800e040 <__ieee754_pow+0xa08>)
 800de7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de82:	4680      	mov	r8, r0
 800de84:	4689      	mov	r9, r1
 800de86:	4620      	mov	r0, r4
 800de88:	4629      	mov	r1, r5
 800de8a:	f7f2 fbc5 	bl	8000618 <__aeabi_dmul>
 800de8e:	4602      	mov	r2, r0
 800de90:	460b      	mov	r3, r1
 800de92:	4640      	mov	r0, r8
 800de94:	4649      	mov	r1, r9
 800de96:	f7f2 fa09 	bl	80002ac <__adddf3>
 800de9a:	4604      	mov	r4, r0
 800de9c:	460d      	mov	r5, r1
 800de9e:	4602      	mov	r2, r0
 800dea0:	460b      	mov	r3, r1
 800dea2:	4630      	mov	r0, r6
 800dea4:	4639      	mov	r1, r7
 800dea6:	f7f2 fa01 	bl	80002ac <__adddf3>
 800deaa:	4632      	mov	r2, r6
 800deac:	463b      	mov	r3, r7
 800deae:	4680      	mov	r8, r0
 800deb0:	4689      	mov	r9, r1
 800deb2:	f7f2 f9f9 	bl	80002a8 <__aeabi_dsub>
 800deb6:	4602      	mov	r2, r0
 800deb8:	460b      	mov	r3, r1
 800deba:	4620      	mov	r0, r4
 800debc:	4629      	mov	r1, r5
 800debe:	f7f2 f9f3 	bl	80002a8 <__aeabi_dsub>
 800dec2:	4642      	mov	r2, r8
 800dec4:	4606      	mov	r6, r0
 800dec6:	460f      	mov	r7, r1
 800dec8:	464b      	mov	r3, r9
 800deca:	4640      	mov	r0, r8
 800decc:	4649      	mov	r1, r9
 800dece:	f7f2 fba3 	bl	8000618 <__aeabi_dmul>
 800ded2:	a35d      	add	r3, pc, #372	; (adr r3, 800e048 <__ieee754_pow+0xa10>)
 800ded4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ded8:	4604      	mov	r4, r0
 800deda:	460d      	mov	r5, r1
 800dedc:	f7f2 fb9c 	bl	8000618 <__aeabi_dmul>
 800dee0:	a35b      	add	r3, pc, #364	; (adr r3, 800e050 <__ieee754_pow+0xa18>)
 800dee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dee6:	f7f2 f9df 	bl	80002a8 <__aeabi_dsub>
 800deea:	4622      	mov	r2, r4
 800deec:	462b      	mov	r3, r5
 800deee:	f7f2 fb93 	bl	8000618 <__aeabi_dmul>
 800def2:	a359      	add	r3, pc, #356	; (adr r3, 800e058 <__ieee754_pow+0xa20>)
 800def4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800def8:	f7f2 f9d8 	bl	80002ac <__adddf3>
 800defc:	4622      	mov	r2, r4
 800defe:	462b      	mov	r3, r5
 800df00:	f7f2 fb8a 	bl	8000618 <__aeabi_dmul>
 800df04:	a356      	add	r3, pc, #344	; (adr r3, 800e060 <__ieee754_pow+0xa28>)
 800df06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df0a:	f7f2 f9cd 	bl	80002a8 <__aeabi_dsub>
 800df0e:	4622      	mov	r2, r4
 800df10:	462b      	mov	r3, r5
 800df12:	f7f2 fb81 	bl	8000618 <__aeabi_dmul>
 800df16:	a354      	add	r3, pc, #336	; (adr r3, 800e068 <__ieee754_pow+0xa30>)
 800df18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df1c:	f7f2 f9c6 	bl	80002ac <__adddf3>
 800df20:	4622      	mov	r2, r4
 800df22:	462b      	mov	r3, r5
 800df24:	f7f2 fb78 	bl	8000618 <__aeabi_dmul>
 800df28:	4602      	mov	r2, r0
 800df2a:	460b      	mov	r3, r1
 800df2c:	4640      	mov	r0, r8
 800df2e:	4649      	mov	r1, r9
 800df30:	f7f2 f9ba 	bl	80002a8 <__aeabi_dsub>
 800df34:	4604      	mov	r4, r0
 800df36:	460d      	mov	r5, r1
 800df38:	4602      	mov	r2, r0
 800df3a:	460b      	mov	r3, r1
 800df3c:	4640      	mov	r0, r8
 800df3e:	4649      	mov	r1, r9
 800df40:	f7f2 fb6a 	bl	8000618 <__aeabi_dmul>
 800df44:	2200      	movs	r2, #0
 800df46:	ec41 0b19 	vmov	d9, r0, r1
 800df4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800df4e:	4620      	mov	r0, r4
 800df50:	4629      	mov	r1, r5
 800df52:	f7f2 f9a9 	bl	80002a8 <__aeabi_dsub>
 800df56:	4602      	mov	r2, r0
 800df58:	460b      	mov	r3, r1
 800df5a:	ec51 0b19 	vmov	r0, r1, d9
 800df5e:	f7f2 fc85 	bl	800086c <__aeabi_ddiv>
 800df62:	4632      	mov	r2, r6
 800df64:	4604      	mov	r4, r0
 800df66:	460d      	mov	r5, r1
 800df68:	463b      	mov	r3, r7
 800df6a:	4640      	mov	r0, r8
 800df6c:	4649      	mov	r1, r9
 800df6e:	f7f2 fb53 	bl	8000618 <__aeabi_dmul>
 800df72:	4632      	mov	r2, r6
 800df74:	463b      	mov	r3, r7
 800df76:	f7f2 f999 	bl	80002ac <__adddf3>
 800df7a:	4602      	mov	r2, r0
 800df7c:	460b      	mov	r3, r1
 800df7e:	4620      	mov	r0, r4
 800df80:	4629      	mov	r1, r5
 800df82:	f7f2 f991 	bl	80002a8 <__aeabi_dsub>
 800df86:	4642      	mov	r2, r8
 800df88:	464b      	mov	r3, r9
 800df8a:	f7f2 f98d 	bl	80002a8 <__aeabi_dsub>
 800df8e:	460b      	mov	r3, r1
 800df90:	4602      	mov	r2, r0
 800df92:	4939      	ldr	r1, [pc, #228]	; (800e078 <__ieee754_pow+0xa40>)
 800df94:	2000      	movs	r0, #0
 800df96:	f7f2 f987 	bl	80002a8 <__aeabi_dsub>
 800df9a:	ec41 0b10 	vmov	d0, r0, r1
 800df9e:	ee10 3a90 	vmov	r3, s1
 800dfa2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800dfa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dfaa:	da2b      	bge.n	800e004 <__ieee754_pow+0x9cc>
 800dfac:	4650      	mov	r0, sl
 800dfae:	f000 f877 	bl	800e0a0 <scalbn>
 800dfb2:	ec51 0b10 	vmov	r0, r1, d0
 800dfb6:	ec53 2b18 	vmov	r2, r3, d8
 800dfba:	f7ff bbee 	b.w	800d79a <__ieee754_pow+0x162>
 800dfbe:	4b2f      	ldr	r3, [pc, #188]	; (800e07c <__ieee754_pow+0xa44>)
 800dfc0:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800dfc4:	429e      	cmp	r6, r3
 800dfc6:	f77f af0d 	ble.w	800dde4 <__ieee754_pow+0x7ac>
 800dfca:	4b2d      	ldr	r3, [pc, #180]	; (800e080 <__ieee754_pow+0xa48>)
 800dfcc:	440b      	add	r3, r1
 800dfce:	4303      	orrs	r3, r0
 800dfd0:	d009      	beq.n	800dfe6 <__ieee754_pow+0x9ae>
 800dfd2:	ec51 0b18 	vmov	r0, r1, d8
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	2300      	movs	r3, #0
 800dfda:	f7f2 fd8f 	bl	8000afc <__aeabi_dcmplt>
 800dfde:	3800      	subs	r0, #0
 800dfe0:	bf18      	it	ne
 800dfe2:	2001      	movne	r0, #1
 800dfe4:	e448      	b.n	800d878 <__ieee754_pow+0x240>
 800dfe6:	4622      	mov	r2, r4
 800dfe8:	462b      	mov	r3, r5
 800dfea:	f7f2 f95d 	bl	80002a8 <__aeabi_dsub>
 800dfee:	4642      	mov	r2, r8
 800dff0:	464b      	mov	r3, r9
 800dff2:	f7f2 fd97 	bl	8000b24 <__aeabi_dcmpge>
 800dff6:	2800      	cmp	r0, #0
 800dff8:	f43f aef4 	beq.w	800dde4 <__ieee754_pow+0x7ac>
 800dffc:	e7e9      	b.n	800dfd2 <__ieee754_pow+0x99a>
 800dffe:	f04f 0a00 	mov.w	sl, #0
 800e002:	e71a      	b.n	800de3a <__ieee754_pow+0x802>
 800e004:	ec51 0b10 	vmov	r0, r1, d0
 800e008:	4619      	mov	r1, r3
 800e00a:	e7d4      	b.n	800dfb6 <__ieee754_pow+0x97e>
 800e00c:	491a      	ldr	r1, [pc, #104]	; (800e078 <__ieee754_pow+0xa40>)
 800e00e:	2000      	movs	r0, #0
 800e010:	f7ff bb31 	b.w	800d676 <__ieee754_pow+0x3e>
 800e014:	2000      	movs	r0, #0
 800e016:	2100      	movs	r1, #0
 800e018:	f7ff bb2d 	b.w	800d676 <__ieee754_pow+0x3e>
 800e01c:	4630      	mov	r0, r6
 800e01e:	4639      	mov	r1, r7
 800e020:	f7ff bb29 	b.w	800d676 <__ieee754_pow+0x3e>
 800e024:	9204      	str	r2, [sp, #16]
 800e026:	f7ff bb7b 	b.w	800d720 <__ieee754_pow+0xe8>
 800e02a:	2300      	movs	r3, #0
 800e02c:	f7ff bb65 	b.w	800d6fa <__ieee754_pow+0xc2>
 800e030:	00000000 	.word	0x00000000
 800e034:	3fe62e43 	.word	0x3fe62e43
 800e038:	fefa39ef 	.word	0xfefa39ef
 800e03c:	3fe62e42 	.word	0x3fe62e42
 800e040:	0ca86c39 	.word	0x0ca86c39
 800e044:	be205c61 	.word	0xbe205c61
 800e048:	72bea4d0 	.word	0x72bea4d0
 800e04c:	3e663769 	.word	0x3e663769
 800e050:	c5d26bf1 	.word	0xc5d26bf1
 800e054:	3ebbbd41 	.word	0x3ebbbd41
 800e058:	af25de2c 	.word	0xaf25de2c
 800e05c:	3f11566a 	.word	0x3f11566a
 800e060:	16bebd93 	.word	0x16bebd93
 800e064:	3f66c16c 	.word	0x3f66c16c
 800e068:	5555553e 	.word	0x5555553e
 800e06c:	3fc55555 	.word	0x3fc55555
 800e070:	3fe00000 	.word	0x3fe00000
 800e074:	fff00000 	.word	0xfff00000
 800e078:	3ff00000 	.word	0x3ff00000
 800e07c:	4090cbff 	.word	0x4090cbff
 800e080:	3f6f3400 	.word	0x3f6f3400
 800e084:	652b82fe 	.word	0x652b82fe
 800e088:	3c971547 	.word	0x3c971547

0800e08c <fabs>:
 800e08c:	ec51 0b10 	vmov	r0, r1, d0
 800e090:	ee10 2a10 	vmov	r2, s0
 800e094:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e098:	ec43 2b10 	vmov	d0, r2, r3
 800e09c:	4770      	bx	lr
	...

0800e0a0 <scalbn>:
 800e0a0:	b570      	push	{r4, r5, r6, lr}
 800e0a2:	ec55 4b10 	vmov	r4, r5, d0
 800e0a6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800e0aa:	4606      	mov	r6, r0
 800e0ac:	462b      	mov	r3, r5
 800e0ae:	b999      	cbnz	r1, 800e0d8 <scalbn+0x38>
 800e0b0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e0b4:	4323      	orrs	r3, r4
 800e0b6:	d03f      	beq.n	800e138 <scalbn+0x98>
 800e0b8:	4b35      	ldr	r3, [pc, #212]	; (800e190 <scalbn+0xf0>)
 800e0ba:	4629      	mov	r1, r5
 800e0bc:	ee10 0a10 	vmov	r0, s0
 800e0c0:	2200      	movs	r2, #0
 800e0c2:	f7f2 faa9 	bl	8000618 <__aeabi_dmul>
 800e0c6:	4b33      	ldr	r3, [pc, #204]	; (800e194 <scalbn+0xf4>)
 800e0c8:	429e      	cmp	r6, r3
 800e0ca:	4604      	mov	r4, r0
 800e0cc:	460d      	mov	r5, r1
 800e0ce:	da10      	bge.n	800e0f2 <scalbn+0x52>
 800e0d0:	a327      	add	r3, pc, #156	; (adr r3, 800e170 <scalbn+0xd0>)
 800e0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0d6:	e01f      	b.n	800e118 <scalbn+0x78>
 800e0d8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800e0dc:	4291      	cmp	r1, r2
 800e0de:	d10c      	bne.n	800e0fa <scalbn+0x5a>
 800e0e0:	ee10 2a10 	vmov	r2, s0
 800e0e4:	4620      	mov	r0, r4
 800e0e6:	4629      	mov	r1, r5
 800e0e8:	f7f2 f8e0 	bl	80002ac <__adddf3>
 800e0ec:	4604      	mov	r4, r0
 800e0ee:	460d      	mov	r5, r1
 800e0f0:	e022      	b.n	800e138 <scalbn+0x98>
 800e0f2:	460b      	mov	r3, r1
 800e0f4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800e0f8:	3936      	subs	r1, #54	; 0x36
 800e0fa:	f24c 3250 	movw	r2, #50000	; 0xc350
 800e0fe:	4296      	cmp	r6, r2
 800e100:	dd0d      	ble.n	800e11e <scalbn+0x7e>
 800e102:	2d00      	cmp	r5, #0
 800e104:	a11c      	add	r1, pc, #112	; (adr r1, 800e178 <scalbn+0xd8>)
 800e106:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e10a:	da02      	bge.n	800e112 <scalbn+0x72>
 800e10c:	a11c      	add	r1, pc, #112	; (adr r1, 800e180 <scalbn+0xe0>)
 800e10e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e112:	a319      	add	r3, pc, #100	; (adr r3, 800e178 <scalbn+0xd8>)
 800e114:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e118:	f7f2 fa7e 	bl	8000618 <__aeabi_dmul>
 800e11c:	e7e6      	b.n	800e0ec <scalbn+0x4c>
 800e11e:	1872      	adds	r2, r6, r1
 800e120:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e124:	428a      	cmp	r2, r1
 800e126:	dcec      	bgt.n	800e102 <scalbn+0x62>
 800e128:	2a00      	cmp	r2, #0
 800e12a:	dd08      	ble.n	800e13e <scalbn+0x9e>
 800e12c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e130:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e134:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e138:	ec45 4b10 	vmov	d0, r4, r5
 800e13c:	bd70      	pop	{r4, r5, r6, pc}
 800e13e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e142:	da08      	bge.n	800e156 <scalbn+0xb6>
 800e144:	2d00      	cmp	r5, #0
 800e146:	a10a      	add	r1, pc, #40	; (adr r1, 800e170 <scalbn+0xd0>)
 800e148:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e14c:	dac0      	bge.n	800e0d0 <scalbn+0x30>
 800e14e:	a10e      	add	r1, pc, #56	; (adr r1, 800e188 <scalbn+0xe8>)
 800e150:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e154:	e7bc      	b.n	800e0d0 <scalbn+0x30>
 800e156:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e15a:	3236      	adds	r2, #54	; 0x36
 800e15c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e160:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e164:	4620      	mov	r0, r4
 800e166:	4b0c      	ldr	r3, [pc, #48]	; (800e198 <scalbn+0xf8>)
 800e168:	2200      	movs	r2, #0
 800e16a:	e7d5      	b.n	800e118 <scalbn+0x78>
 800e16c:	f3af 8000 	nop.w
 800e170:	c2f8f359 	.word	0xc2f8f359
 800e174:	01a56e1f 	.word	0x01a56e1f
 800e178:	8800759c 	.word	0x8800759c
 800e17c:	7e37e43c 	.word	0x7e37e43c
 800e180:	8800759c 	.word	0x8800759c
 800e184:	fe37e43c 	.word	0xfe37e43c
 800e188:	c2f8f359 	.word	0xc2f8f359
 800e18c:	81a56e1f 	.word	0x81a56e1f
 800e190:	43500000 	.word	0x43500000
 800e194:	ffff3cb0 	.word	0xffff3cb0
 800e198:	3c900000 	.word	0x3c900000

0800e19c <with_errno>:
 800e19c:	b570      	push	{r4, r5, r6, lr}
 800e19e:	4604      	mov	r4, r0
 800e1a0:	460d      	mov	r5, r1
 800e1a2:	4616      	mov	r6, r2
 800e1a4:	f7fd f926 	bl	800b3f4 <__errno>
 800e1a8:	4629      	mov	r1, r5
 800e1aa:	6006      	str	r6, [r0, #0]
 800e1ac:	4620      	mov	r0, r4
 800e1ae:	bd70      	pop	{r4, r5, r6, pc}

0800e1b0 <xflow>:
 800e1b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e1b2:	4614      	mov	r4, r2
 800e1b4:	461d      	mov	r5, r3
 800e1b6:	b108      	cbz	r0, 800e1bc <xflow+0xc>
 800e1b8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e1bc:	e9cd 2300 	strd	r2, r3, [sp]
 800e1c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e1c4:	4620      	mov	r0, r4
 800e1c6:	4629      	mov	r1, r5
 800e1c8:	f7f2 fa26 	bl	8000618 <__aeabi_dmul>
 800e1cc:	2222      	movs	r2, #34	; 0x22
 800e1ce:	b003      	add	sp, #12
 800e1d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e1d4:	f7ff bfe2 	b.w	800e19c <with_errno>

0800e1d8 <__math_uflow>:
 800e1d8:	b508      	push	{r3, lr}
 800e1da:	2200      	movs	r2, #0
 800e1dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e1e0:	f7ff ffe6 	bl	800e1b0 <xflow>
 800e1e4:	ec41 0b10 	vmov	d0, r0, r1
 800e1e8:	bd08      	pop	{r3, pc}

0800e1ea <__math_oflow>:
 800e1ea:	b508      	push	{r3, lr}
 800e1ec:	2200      	movs	r2, #0
 800e1ee:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800e1f2:	f7ff ffdd 	bl	800e1b0 <xflow>
 800e1f6:	ec41 0b10 	vmov	d0, r0, r1
 800e1fa:	bd08      	pop	{r3, pc}

0800e1fc <__ieee754_sqrt>:
 800e1fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e200:	ec55 4b10 	vmov	r4, r5, d0
 800e204:	4e67      	ldr	r6, [pc, #412]	; (800e3a4 <__ieee754_sqrt+0x1a8>)
 800e206:	43ae      	bics	r6, r5
 800e208:	ee10 0a10 	vmov	r0, s0
 800e20c:	ee10 2a10 	vmov	r2, s0
 800e210:	4629      	mov	r1, r5
 800e212:	462b      	mov	r3, r5
 800e214:	d10d      	bne.n	800e232 <__ieee754_sqrt+0x36>
 800e216:	f7f2 f9ff 	bl	8000618 <__aeabi_dmul>
 800e21a:	4602      	mov	r2, r0
 800e21c:	460b      	mov	r3, r1
 800e21e:	4620      	mov	r0, r4
 800e220:	4629      	mov	r1, r5
 800e222:	f7f2 f843 	bl	80002ac <__adddf3>
 800e226:	4604      	mov	r4, r0
 800e228:	460d      	mov	r5, r1
 800e22a:	ec45 4b10 	vmov	d0, r4, r5
 800e22e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e232:	2d00      	cmp	r5, #0
 800e234:	dc0b      	bgt.n	800e24e <__ieee754_sqrt+0x52>
 800e236:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e23a:	4326      	orrs	r6, r4
 800e23c:	d0f5      	beq.n	800e22a <__ieee754_sqrt+0x2e>
 800e23e:	b135      	cbz	r5, 800e24e <__ieee754_sqrt+0x52>
 800e240:	f7f2 f832 	bl	80002a8 <__aeabi_dsub>
 800e244:	4602      	mov	r2, r0
 800e246:	460b      	mov	r3, r1
 800e248:	f7f2 fb10 	bl	800086c <__aeabi_ddiv>
 800e24c:	e7eb      	b.n	800e226 <__ieee754_sqrt+0x2a>
 800e24e:	1509      	asrs	r1, r1, #20
 800e250:	f000 808d 	beq.w	800e36e <__ieee754_sqrt+0x172>
 800e254:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e258:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800e25c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e260:	07c9      	lsls	r1, r1, #31
 800e262:	bf5c      	itt	pl
 800e264:	005b      	lslpl	r3, r3, #1
 800e266:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800e26a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e26e:	bf58      	it	pl
 800e270:	0052      	lslpl	r2, r2, #1
 800e272:	2500      	movs	r5, #0
 800e274:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800e278:	1076      	asrs	r6, r6, #1
 800e27a:	0052      	lsls	r2, r2, #1
 800e27c:	f04f 0e16 	mov.w	lr, #22
 800e280:	46ac      	mov	ip, r5
 800e282:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e286:	eb0c 0001 	add.w	r0, ip, r1
 800e28a:	4298      	cmp	r0, r3
 800e28c:	bfde      	ittt	le
 800e28e:	1a1b      	suble	r3, r3, r0
 800e290:	eb00 0c01 	addle.w	ip, r0, r1
 800e294:	186d      	addle	r5, r5, r1
 800e296:	005b      	lsls	r3, r3, #1
 800e298:	f1be 0e01 	subs.w	lr, lr, #1
 800e29c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800e2a0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800e2a4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800e2a8:	d1ed      	bne.n	800e286 <__ieee754_sqrt+0x8a>
 800e2aa:	4674      	mov	r4, lr
 800e2ac:	2720      	movs	r7, #32
 800e2ae:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800e2b2:	4563      	cmp	r3, ip
 800e2b4:	eb01 000e 	add.w	r0, r1, lr
 800e2b8:	dc02      	bgt.n	800e2c0 <__ieee754_sqrt+0xc4>
 800e2ba:	d113      	bne.n	800e2e4 <__ieee754_sqrt+0xe8>
 800e2bc:	4290      	cmp	r0, r2
 800e2be:	d811      	bhi.n	800e2e4 <__ieee754_sqrt+0xe8>
 800e2c0:	2800      	cmp	r0, #0
 800e2c2:	eb00 0e01 	add.w	lr, r0, r1
 800e2c6:	da57      	bge.n	800e378 <__ieee754_sqrt+0x17c>
 800e2c8:	f1be 0f00 	cmp.w	lr, #0
 800e2cc:	db54      	blt.n	800e378 <__ieee754_sqrt+0x17c>
 800e2ce:	f10c 0801 	add.w	r8, ip, #1
 800e2d2:	eba3 030c 	sub.w	r3, r3, ip
 800e2d6:	4290      	cmp	r0, r2
 800e2d8:	bf88      	it	hi
 800e2da:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800e2de:	1a12      	subs	r2, r2, r0
 800e2e0:	440c      	add	r4, r1
 800e2e2:	46c4      	mov	ip, r8
 800e2e4:	005b      	lsls	r3, r3, #1
 800e2e6:	3f01      	subs	r7, #1
 800e2e8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800e2ec:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800e2f0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800e2f4:	d1dd      	bne.n	800e2b2 <__ieee754_sqrt+0xb6>
 800e2f6:	4313      	orrs	r3, r2
 800e2f8:	d01b      	beq.n	800e332 <__ieee754_sqrt+0x136>
 800e2fa:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800e3a8 <__ieee754_sqrt+0x1ac>
 800e2fe:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800e3ac <__ieee754_sqrt+0x1b0>
 800e302:	e9da 0100 	ldrd	r0, r1, [sl]
 800e306:	e9db 2300 	ldrd	r2, r3, [fp]
 800e30a:	f7f1 ffcd 	bl	80002a8 <__aeabi_dsub>
 800e30e:	e9da 8900 	ldrd	r8, r9, [sl]
 800e312:	4602      	mov	r2, r0
 800e314:	460b      	mov	r3, r1
 800e316:	4640      	mov	r0, r8
 800e318:	4649      	mov	r1, r9
 800e31a:	f7f2 fbf9 	bl	8000b10 <__aeabi_dcmple>
 800e31e:	b140      	cbz	r0, 800e332 <__ieee754_sqrt+0x136>
 800e320:	f1b4 3fff 	cmp.w	r4, #4294967295
 800e324:	e9da 0100 	ldrd	r0, r1, [sl]
 800e328:	e9db 2300 	ldrd	r2, r3, [fp]
 800e32c:	d126      	bne.n	800e37c <__ieee754_sqrt+0x180>
 800e32e:	3501      	adds	r5, #1
 800e330:	463c      	mov	r4, r7
 800e332:	106a      	asrs	r2, r5, #1
 800e334:	0863      	lsrs	r3, r4, #1
 800e336:	07e9      	lsls	r1, r5, #31
 800e338:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800e33c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800e340:	bf48      	it	mi
 800e342:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800e346:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800e34a:	461c      	mov	r4, r3
 800e34c:	e76d      	b.n	800e22a <__ieee754_sqrt+0x2e>
 800e34e:	0ad3      	lsrs	r3, r2, #11
 800e350:	3815      	subs	r0, #21
 800e352:	0552      	lsls	r2, r2, #21
 800e354:	2b00      	cmp	r3, #0
 800e356:	d0fa      	beq.n	800e34e <__ieee754_sqrt+0x152>
 800e358:	02dc      	lsls	r4, r3, #11
 800e35a:	d50a      	bpl.n	800e372 <__ieee754_sqrt+0x176>
 800e35c:	f1c1 0420 	rsb	r4, r1, #32
 800e360:	fa22 f404 	lsr.w	r4, r2, r4
 800e364:	1e4d      	subs	r5, r1, #1
 800e366:	408a      	lsls	r2, r1
 800e368:	4323      	orrs	r3, r4
 800e36a:	1b41      	subs	r1, r0, r5
 800e36c:	e772      	b.n	800e254 <__ieee754_sqrt+0x58>
 800e36e:	4608      	mov	r0, r1
 800e370:	e7f0      	b.n	800e354 <__ieee754_sqrt+0x158>
 800e372:	005b      	lsls	r3, r3, #1
 800e374:	3101      	adds	r1, #1
 800e376:	e7ef      	b.n	800e358 <__ieee754_sqrt+0x15c>
 800e378:	46e0      	mov	r8, ip
 800e37a:	e7aa      	b.n	800e2d2 <__ieee754_sqrt+0xd6>
 800e37c:	f7f1 ff96 	bl	80002ac <__adddf3>
 800e380:	e9da 8900 	ldrd	r8, r9, [sl]
 800e384:	4602      	mov	r2, r0
 800e386:	460b      	mov	r3, r1
 800e388:	4640      	mov	r0, r8
 800e38a:	4649      	mov	r1, r9
 800e38c:	f7f2 fbb6 	bl	8000afc <__aeabi_dcmplt>
 800e390:	b120      	cbz	r0, 800e39c <__ieee754_sqrt+0x1a0>
 800e392:	1ca0      	adds	r0, r4, #2
 800e394:	bf08      	it	eq
 800e396:	3501      	addeq	r5, #1
 800e398:	3402      	adds	r4, #2
 800e39a:	e7ca      	b.n	800e332 <__ieee754_sqrt+0x136>
 800e39c:	3401      	adds	r4, #1
 800e39e:	f024 0401 	bic.w	r4, r4, #1
 800e3a2:	e7c6      	b.n	800e332 <__ieee754_sqrt+0x136>
 800e3a4:	7ff00000 	.word	0x7ff00000
 800e3a8:	200001d8 	.word	0x200001d8
 800e3ac:	200001e0 	.word	0x200001e0

0800e3b0 <_init>:
 800e3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3b2:	bf00      	nop
 800e3b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e3b6:	bc08      	pop	{r3}
 800e3b8:	469e      	mov	lr, r3
 800e3ba:	4770      	bx	lr

0800e3bc <_fini>:
 800e3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3be:	bf00      	nop
 800e3c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e3c2:	bc08      	pop	{r3}
 800e3c4:	469e      	mov	lr, r3
 800e3c6:	4770      	bx	lr
