
F301Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ac  0800966c  0800966c  0001966c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a18  08009a18  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08009a18  08009a18  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009a18  08009a18  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a18  08009a18  00019a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a1c  08009a1c  00019a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08009a20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003208  20000060  08009a80  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003268  08009a80  00023268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bb79  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f6a  00000000  00000000  0003bc4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017f0  00000000  00000000  0003fbb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012a9  00000000  00000000  000413a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019406  00000000  00000000  00042651  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d5d5  00000000  00000000  0005ba57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009a508  00000000  00000000  0007902c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000068ec  00000000  00000000  00113534  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  00119e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009654 	.word	0x08009654

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08009654 	.word	0x08009654

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <sendATCommand>:
//	HAL_UART_Transmit(huart, atcom, sizeOfAT, delayms);
//	HAL_UART_Receive(huart, response, sizeOfResp, delayms);
//}

void sendATCommand(UART_HandleTypeDef *huart, const char* atcom, int sizeOfAT, int delayms)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b086      	sub	sp, #24
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	60f8      	str	r0, [r7, #12]
 80002a8:	60b9      	str	r1, [r7, #8]
 80002aa:	607a      	str	r2, [r7, #4]
 80002ac:	603b      	str	r3, [r7, #0]
	for(uint16_t i = 0; i < sizeOfAT; i++) {
 80002ae:	2300      	movs	r3, #0
 80002b0:	82fb      	strh	r3, [r7, #22]
 80002b2:	e00a      	b.n	80002ca <sendATCommand+0x2a>
		if(atcom[i] == '\0') {
 80002b4:	8afb      	ldrh	r3, [r7, #22]
 80002b6:	68ba      	ldr	r2, [r7, #8]
 80002b8:	4413      	add	r3, r2
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d101      	bne.n	80002c4 <sendATCommand+0x24>
			sizeOfAT = i;
 80002c0:	8afb      	ldrh	r3, [r7, #22]
 80002c2:	607b      	str	r3, [r7, #4]
	for(uint16_t i = 0; i < sizeOfAT; i++) {
 80002c4:	8afb      	ldrh	r3, [r7, #22]
 80002c6:	3301      	adds	r3, #1
 80002c8:	82fb      	strh	r3, [r7, #22]
 80002ca:	8afb      	ldrh	r3, [r7, #22]
 80002cc:	687a      	ldr	r2, [r7, #4]
 80002ce:	429a      	cmp	r2, r3
 80002d0:	dcf0      	bgt.n	80002b4 <sendATCommand+0x14>
		}
	}
	HAL_UART_Transmit(huart, atcom, sizeOfAT, delayms);
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	b29a      	uxth	r2, r3
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	68b9      	ldr	r1, [r7, #8]
 80002da:	68f8      	ldr	r0, [r7, #12]
 80002dc:	f005 fa5e 	bl	800579c <HAL_UART_Transmit>
}
 80002e0:	bf00      	nop
 80002e2:	3718      	adds	r7, #24
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}

080002e8 <receiveAnswer>:

void receiveAnswer(UART_HandleTypeDef *huart, char* response, int sizeOfResp, int delayms)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b086      	sub	sp, #24
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	60f8      	str	r0, [r7, #12]
 80002f0:	60b9      	str	r1, [r7, #8]
 80002f2:	607a      	str	r2, [r7, #4]
 80002f4:	603b      	str	r3, [r7, #0]
	for(uint16_t i = 0; i < sizeOfResp; i++) {
 80002f6:	2300      	movs	r3, #0
 80002f8:	82fb      	strh	r3, [r7, #22]
 80002fa:	e007      	b.n	800030c <receiveAnswer+0x24>
		response[i] = 0;
 80002fc:	8afb      	ldrh	r3, [r7, #22]
 80002fe:	68ba      	ldr	r2, [r7, #8]
 8000300:	4413      	add	r3, r2
 8000302:	2200      	movs	r2, #0
 8000304:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i < sizeOfResp; i++) {
 8000306:	8afb      	ldrh	r3, [r7, #22]
 8000308:	3301      	adds	r3, #1
 800030a:	82fb      	strh	r3, [r7, #22]
 800030c:	8afb      	ldrh	r3, [r7, #22]
 800030e:	687a      	ldr	r2, [r7, #4]
 8000310:	429a      	cmp	r2, r3
 8000312:	dcf3      	bgt.n	80002fc <receiveAnswer+0x14>
	}
	HAL_UART_Receive(huart, response, sizeOfResp, delayms);
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	b29a      	uxth	r2, r3
 8000318:	683b      	ldr	r3, [r7, #0]
 800031a:	68b9      	ldr	r1, [r7, #8]
 800031c:	68f8      	ldr	r0, [r7, #12]
 800031e:	f005 fac7 	bl	80058b0 <HAL_UART_Receive>
}
 8000322:	bf00      	nop
 8000324:	3718      	adds	r7, #24
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
	...

0800032c <atSend_USART3_DMA>:
	resp = HAL_UART_Transmit_DMA(huart, (uint8_t*)pData, sizeof(pData)-1);
	__asm__ volatile("NOP");
}

uint8_t atSend_USART3_DMA(const uint8_t *pData, uint16_t amount)
{
 800032c:	b480      	push	{r7}
 800032e:	b083      	sub	sp, #12
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
 8000334:	460b      	mov	r3, r1
 8000336:	807b      	strh	r3, [r7, #2]
	if((DMA1_Channel2->CCR & DMA_CCR_EN) == DMA_CCR_EN) {
 8000338:	4b25      	ldr	r3, [pc, #148]	; (80003d0 <atSend_USART3_DMA+0xa4>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	f003 0301 	and.w	r3, r3, #1
 8000340:	2b01      	cmp	r3, #1
 8000342:	d129      	bne.n	8000398 <atSend_USART3_DMA+0x6c>
		if((DMA1_Channel2->CNDTR) != 0) {
 8000344:	4b22      	ldr	r3, [pc, #136]	; (80003d0 <atSend_USART3_DMA+0xa4>)
 8000346:	685b      	ldr	r3, [r3, #4]
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <atSend_USART3_DMA+0x24>
			return 1;
 800034c:	2301      	movs	r3, #1
 800034e:	e039      	b.n	80003c4 <atSend_USART3_DMA+0x98>
		} else if((DMA1_Channel2->CCR & DMA_CCR_TCIE) != DMA_CCR_TCIE) {
 8000350:	4b1f      	ldr	r3, [pc, #124]	; (80003d0 <atSend_USART3_DMA+0xa4>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	f003 0302 	and.w	r3, r3, #2
 8000358:	2b02      	cmp	r3, #2
 800035a:	d01d      	beq.n	8000398 <atSend_USART3_DMA+0x6c>
			DMA1_Channel2->CCR &= ~DMA_CCR_EN;
 800035c:	4b1c      	ldr	r3, [pc, #112]	; (80003d0 <atSend_USART3_DMA+0xa4>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a1b      	ldr	r2, [pc, #108]	; (80003d0 <atSend_USART3_DMA+0xa4>)
 8000362:	f023 0301 	bic.w	r3, r3, #1
 8000366:	6013      	str	r3, [r2, #0]
			USART3->CR3 &= ~USART_CR3_DMAT;
 8000368:	4b1a      	ldr	r3, [pc, #104]	; (80003d4 <atSend_USART3_DMA+0xa8>)
 800036a:	689b      	ldr	r3, [r3, #8]
 800036c:	4a19      	ldr	r2, [pc, #100]	; (80003d4 <atSend_USART3_DMA+0xa8>)
 800036e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000372:	6093      	str	r3, [r2, #8]
			if((DMA1->ISR & DMA_ISR_TCIF2) == DMA_ISR_TCIF2) {
 8000374:	4b18      	ldr	r3, [pc, #96]	; (80003d8 <atSend_USART3_DMA+0xac>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	f003 0320 	and.w	r3, r3, #32
 800037c:	2b20      	cmp	r3, #32
 800037e:	d105      	bne.n	800038c <atSend_USART3_DMA+0x60>
				DMA1->IFCR |= DMA_IFCR_CTCIF2;
 8000380:	4b15      	ldr	r3, [pc, #84]	; (80003d8 <atSend_USART3_DMA+0xac>)
 8000382:	685b      	ldr	r3, [r3, #4]
 8000384:	4a14      	ldr	r2, [pc, #80]	; (80003d8 <atSend_USART3_DMA+0xac>)
 8000386:	f043 0320 	orr.w	r3, r3, #32
 800038a:	6053      	str	r3, [r2, #4]
			}
			DMA1_Channel2->CCR |= DMA_CCR_TCIE;
 800038c:	4b10      	ldr	r3, [pc, #64]	; (80003d0 <atSend_USART3_DMA+0xa4>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a0f      	ldr	r2, [pc, #60]	; (80003d0 <atSend_USART3_DMA+0xa4>)
 8000392:	f043 0302 	orr.w	r3, r3, #2
 8000396:	6013      	str	r3, [r2, #0]
		}
	}
	USART3->CR3 |= USART_CR3_DMAT;
 8000398:	4b0e      	ldr	r3, [pc, #56]	; (80003d4 <atSend_USART3_DMA+0xa8>)
 800039a:	689b      	ldr	r3, [r3, #8]
 800039c:	4a0d      	ldr	r2, [pc, #52]	; (80003d4 <atSend_USART3_DMA+0xa8>)
 800039e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003a2:	6093      	str	r3, [r2, #8]

	DMA1_Channel2->CNDTR = amount;
 80003a4:	4a0a      	ldr	r2, [pc, #40]	; (80003d0 <atSend_USART3_DMA+0xa4>)
 80003a6:	887b      	ldrh	r3, [r7, #2]
 80003a8:	6053      	str	r3, [r2, #4]
	DMA1_Channel2->CPAR = (uint32_t)&(USART3->TDR);
 80003aa:	4b09      	ldr	r3, [pc, #36]	; (80003d0 <atSend_USART3_DMA+0xa4>)
 80003ac:	4a0b      	ldr	r2, [pc, #44]	; (80003dc <atSend_USART3_DMA+0xb0>)
 80003ae:	609a      	str	r2, [r3, #8]
	DMA1_Channel2->CMAR = (uint32_t)pData;
 80003b0:	4a07      	ldr	r2, [pc, #28]	; (80003d0 <atSend_USART3_DMA+0xa4>)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	60d3      	str	r3, [r2, #12]

	DMA1_Channel2->CCR |= DMA_CCR_EN;
 80003b6:	4b06      	ldr	r3, [pc, #24]	; (80003d0 <atSend_USART3_DMA+0xa4>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	4a05      	ldr	r2, [pc, #20]	; (80003d0 <atSend_USART3_DMA+0xa4>)
 80003bc:	f043 0301 	orr.w	r3, r3, #1
 80003c0:	6013      	str	r3, [r2, #0]
	return 0;
 80003c2:	2300      	movs	r3, #0
}
 80003c4:	4618      	mov	r0, r3
 80003c6:	370c      	adds	r7, #12
 80003c8:	46bd      	mov	sp, r7
 80003ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ce:	4770      	bx	lr
 80003d0:	4002001c 	.word	0x4002001c
 80003d4:	40004800 	.word	0x40004800
 80003d8:	40020000 	.word	0x40020000
 80003dc:	40004828 	.word	0x40004828

080003e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80003e0:	b480      	push	{r7}
 80003e2:	b085      	sub	sp, #20
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	60f8      	str	r0, [r7, #12]
 80003e8:	60b9      	str	r1, [r7, #8]
 80003ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	4a07      	ldr	r2, [pc, #28]	; (800040c <vApplicationGetIdleTaskMemory+0x2c>)
 80003f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80003f2:	68bb      	ldr	r3, [r7, #8]
 80003f4:	4a06      	ldr	r2, [pc, #24]	; (8000410 <vApplicationGetIdleTaskMemory+0x30>)
 80003f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	2280      	movs	r2, #128	; 0x80
 80003fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80003fe:	bf00      	nop
 8000400:	3714      	adds	r7, #20
 8000402:	46bd      	mov	sp, r7
 8000404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	2000007c 	.word	0x2000007c
 8000410:	200000d4 	.word	0x200000d4

08000414 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000414:	b480      	push	{r7}
 8000416:	b085      	sub	sp, #20
 8000418:	af00      	add	r7, sp, #0
 800041a:	60f8      	str	r0, [r7, #12]
 800041c:	60b9      	str	r1, [r7, #8]
 800041e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	4a07      	ldr	r2, [pc, #28]	; (8000440 <vApplicationGetTimerTaskMemory+0x2c>)
 8000424:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000426:	68bb      	ldr	r3, [r7, #8]
 8000428:	4a06      	ldr	r2, [pc, #24]	; (8000444 <vApplicationGetTimerTaskMemory+0x30>)
 800042a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000432:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000434:	bf00      	nop
 8000436:	3714      	adds	r7, #20
 8000438:	46bd      	mov	sp, r7
 800043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043e:	4770      	bx	lr
 8000440:	200002d4 	.word	0x200002d4
 8000444:	2000032c 	.word	0x2000032c

08000448 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000448:	b480      	push	{r7}
 800044a:	b083      	sub	sp, #12
 800044c:	af00      	add	r7, sp, #0
 800044e:	4603      	mov	r3, r0
 8000450:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000456:	2b00      	cmp	r3, #0
 8000458:	db0b      	blt.n	8000472 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800045a:	79fb      	ldrb	r3, [r7, #7]
 800045c:	f003 021f 	and.w	r2, r3, #31
 8000460:	4907      	ldr	r1, [pc, #28]	; (8000480 <__NVIC_EnableIRQ+0x38>)
 8000462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000466:	095b      	lsrs	r3, r3, #5
 8000468:	2001      	movs	r0, #1
 800046a:	fa00 f202 	lsl.w	r2, r0, r2
 800046e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000472:	bf00      	nop
 8000474:	370c      	adds	r7, #12
 8000476:	46bd      	mov	sp, r7
 8000478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	e000e100 	.word	0xe000e100

08000484 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
 800048a:	4603      	mov	r3, r0
 800048c:	6039      	str	r1, [r7, #0]
 800048e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000494:	2b00      	cmp	r3, #0
 8000496:	db0a      	blt.n	80004ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	b2da      	uxtb	r2, r3
 800049c:	490c      	ldr	r1, [pc, #48]	; (80004d0 <__NVIC_SetPriority+0x4c>)
 800049e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004a2:	0112      	lsls	r2, r2, #4
 80004a4:	b2d2      	uxtb	r2, r2
 80004a6:	440b      	add	r3, r1
 80004a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80004ac:	e00a      	b.n	80004c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004ae:	683b      	ldr	r3, [r7, #0]
 80004b0:	b2da      	uxtb	r2, r3
 80004b2:	4908      	ldr	r1, [pc, #32]	; (80004d4 <__NVIC_SetPriority+0x50>)
 80004b4:	79fb      	ldrb	r3, [r7, #7]
 80004b6:	f003 030f 	and.w	r3, r3, #15
 80004ba:	3b04      	subs	r3, #4
 80004bc:	0112      	lsls	r2, r2, #4
 80004be:	b2d2      	uxtb	r2, r2
 80004c0:	440b      	add	r3, r1
 80004c2:	761a      	strb	r2, [r3, #24]
}
 80004c4:	bf00      	nop
 80004c6:	370c      	adds	r7, #12
 80004c8:	46bd      	mov	sp, r7
 80004ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ce:	4770      	bx	lr
 80004d0:	e000e100 	.word	0xe000e100
 80004d4:	e000ed00 	.word	0xe000ed00

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b5b0      	push	{r4, r5, r7, lr}
 80004da:	b0ba      	sub	sp, #232	; 0xe8
 80004dc:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	avrBatVoltage = 0;
 80004de:	4b99      	ldr	r3, [pc, #612]	; (8000744 <main+0x26c>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	801a      	strh	r2, [r3, #0]

	EncoderR.timeNew = 0;
 80004e4:	4b98      	ldr	r3, [pc, #608]	; (8000748 <main+0x270>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
	EncoderR.timeOld = 0;
 80004ea:	4b97      	ldr	r3, [pc, #604]	; (8000748 <main+0x270>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	605a      	str	r2, [r3, #4]
	EncoderR.positionNew = 0;
 80004f0:	4b95      	ldr	r3, [pc, #596]	; (8000748 <main+0x270>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	609a      	str	r2, [r3, #8]
	EncoderR.positionOld = 0;
 80004f6:	4b94      	ldr	r3, [pc, #592]	; (8000748 <main+0x270>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	60da      	str	r2, [r3, #12]
	EncoderR.posCntUpdate = 0;
 80004fc:	4b92      	ldr	r3, [pc, #584]	; (8000748 <main+0x270>)
 80004fe:	2200      	movs	r2, #0
 8000500:	741a      	strb	r2, [r3, #16]
	EncoderR.rpm = 0;
 8000502:	4b91      	ldr	r3, [pc, #580]	; (8000748 <main+0x270>)
 8000504:	2200      	movs	r2, #0
 8000506:	615a      	str	r2, [r3, #20]

	EncoderL.timeNew = 0;
 8000508:	4b90      	ldr	r3, [pc, #576]	; (800074c <main+0x274>)
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
	EncoderL.timeOld = 0;
 800050e:	4b8f      	ldr	r3, [pc, #572]	; (800074c <main+0x274>)
 8000510:	2200      	movs	r2, #0
 8000512:	605a      	str	r2, [r3, #4]
	EncoderL.positionNew = 0;
 8000514:	4b8d      	ldr	r3, [pc, #564]	; (800074c <main+0x274>)
 8000516:	2200      	movs	r2, #0
 8000518:	609a      	str	r2, [r3, #8]
	EncoderL.positionOld = 0;
 800051a:	4b8c      	ldr	r3, [pc, #560]	; (800074c <main+0x274>)
 800051c:	2200      	movs	r2, #0
 800051e:	60da      	str	r2, [r3, #12]
	EncoderL.posCntUpdate = 0;
 8000520:	4b8a      	ldr	r3, [pc, #552]	; (800074c <main+0x274>)
 8000522:	2200      	movs	r2, #0
 8000524:	741a      	strb	r2, [r3, #16]
	EncoderL.rpm = 0;
 8000526:	4b89      	ldr	r3, [pc, #548]	; (800074c <main+0x274>)
 8000528:	2200      	movs	r2, #0
 800052a:	615a      	str	r2, [r3, #20]

	SoftPwmR.curValue = 0;
 800052c:	4b88      	ldr	r3, [pc, #544]	; (8000750 <main+0x278>)
 800052e:	2200      	movs	r2, #0
 8000530:	805a      	strh	r2, [r3, #2]
	SoftPwmR.reqValue = 0;
 8000532:	4b87      	ldr	r3, [pc, #540]	; (8000750 <main+0x278>)
 8000534:	2200      	movs	r2, #0
 8000536:	801a      	strh	r2, [r3, #0]
	SoftPwmR.pwmValue = 0;
 8000538:	4b85      	ldr	r3, [pc, #532]	; (8000750 <main+0x278>)
 800053a:	2200      	movs	r2, #0
 800053c:	809a      	strh	r2, [r3, #4]
	//SoftPwmR.softCounterValue = 0;
	SoftPwmR.status = 0;
 800053e:	4b84      	ldr	r3, [pc, #528]	; (8000750 <main+0x278>)
 8000540:	2200      	movs	r2, #0
 8000542:	719a      	strb	r2, [r3, #6]

	SoftPwmL.curValue = 0;
 8000544:	4b83      	ldr	r3, [pc, #524]	; (8000754 <main+0x27c>)
 8000546:	2200      	movs	r2, #0
 8000548:	805a      	strh	r2, [r3, #2]
	SoftPwmL.reqValue = 0;
 800054a:	4b82      	ldr	r3, [pc, #520]	; (8000754 <main+0x27c>)
 800054c:	2200      	movs	r2, #0
 800054e:	801a      	strh	r2, [r3, #0]
	SoftPwmL.pwmValue = 0;
 8000550:	4b80      	ldr	r3, [pc, #512]	; (8000754 <main+0x27c>)
 8000552:	2200      	movs	r2, #0
 8000554:	809a      	strh	r2, [r3, #4]
	//SoftPwmL.softCounterValue = 0;
	SoftPwmL.status = 0;
 8000556:	4b7f      	ldr	r3, [pc, #508]	; (8000754 <main+0x27c>)
 8000558:	2200      	movs	r2, #0
 800055a:	719a      	strb	r2, [r3, #6]

	softCounterValue = 0;
 800055c:	4b7e      	ldr	r3, [pc, #504]	; (8000758 <main+0x280>)
 800055e:	2200      	movs	r2, #0
 8000560:	801a      	strh	r2, [r3, #0]

	memset(txBuffer, '\0', sizeof(txBuffer));
 8000562:	f240 12ff 	movw	r2, #511	; 0x1ff
 8000566:	2100      	movs	r1, #0
 8000568:	487c      	ldr	r0, [pc, #496]	; (800075c <main+0x284>)
 800056a:	f008 fbef 	bl	8008d4c <memset>
	memset(rxBuffer, '\0', sizeof(rxBuffer));
 800056e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8000572:	2100      	movs	r1, #0
 8000574:	487a      	ldr	r0, [pc, #488]	; (8000760 <main+0x288>)
 8000576:	f008 fbe9 	bl	8008d4c <memset>
	rxBufferHead = 0;
 800057a:	4b7a      	ldr	r3, [pc, #488]	; (8000764 <main+0x28c>)
 800057c:	2200      	movs	r2, #0
 800057e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000580:	f002 f8d8 	bl	8002734 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000584:	f000 f920 	bl	80007c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000588:	f000 faba 	bl	8000b00 <MX_GPIO_Init>
  MX_DMA_Init();
 800058c:	f000 fa92 	bl	8000ab4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000590:	f000 f978 	bl	8000884 <MX_ADC1_Init>
  MX_SPI2_Init();
 8000594:	f000 f9d2 	bl	800093c <MX_SPI2_Init>
  MX_USART3_UART_Init();
 8000598:	f000 fa5c 	bl	8000a54 <MX_USART3_UART_Init>
  MX_TIM17_Init();
 800059c:	f000 fa32 	bl	8000a04 <MX_TIM17_Init>
  MX_TIM16_Init();
 80005a0:	f000 fa0a 	bl	80009b8 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  ADC1_configuration();
 80005a4:	f000 fb58 	bl	8000c58 <ADC1_configuration>
  TIM1_configuration();
 80005a8:	f000 fc34 	bl	8000e14 <TIM1_configuration>
  TIM2_configuration();
 80005ac:	f000 fcaa 	bl	8000f04 <TIM2_configuration>
  TIM17_additional_configuration();
 80005b0:	f000 fd4a 	bl	8001048 <TIM17_additional_configuration>
  TIM16_additional_configuration();
 80005b4:	f000 fd32 	bl	800101c <TIM16_additional_configuration>
  USART3_additional_configuration();
 80005b8:	f000 fd5c 	bl	8001074 <USART3_additional_configuration>

  kToRpm = (32*1000*60)/256;
 80005bc:	4b6a      	ldr	r3, [pc, #424]	; (8000768 <main+0x290>)
 80005be:	4a6b      	ldr	r2, [pc, #428]	; (800076c <main+0x294>)
 80005c0:	601a      	str	r2, [r3, #0]

  pc13EventGroup = xEventGroupCreate();
 80005c2:	f005 fe09 	bl	80061d8 <xEventGroupCreate>
 80005c6:	4603      	mov	r3, r0
 80005c8:	4a69      	ldr	r2, [pc, #420]	; (8000770 <main+0x298>)
 80005ca:	6013      	str	r3, [r2, #0]
  pc14EventGroup = xEventGroupCreate();
 80005cc:	f005 fe04 	bl	80061d8 <xEventGroupCreate>
 80005d0:	4603      	mov	r3, r0
 80005d2:	4a68      	ldr	r2, [pc, #416]	; (8000774 <main+0x29c>)
 80005d4:	6013      	str	r3, [r2, #0]
  timerFdsEventGroup = xEventGroupCreate();
 80005d6:	f005 fdff 	bl	80061d8 <xEventGroupCreate>
 80005da:	4603      	mov	r3, r0
 80005dc:	4a66      	ldr	r2, [pc, #408]	; (8000778 <main+0x2a0>)
 80005de:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  timerForDataSending = xTimerCreate("TimerForDataSending", pdMS_TO_TICKS(500), pdTRUE, 1, timerForSendDataCallback);
 80005e0:	4b66      	ldr	r3, [pc, #408]	; (800077c <main+0x2a4>)
 80005e2:	9300      	str	r3, [sp, #0]
 80005e4:	2301      	movs	r3, #1
 80005e6:	2201      	movs	r2, #1
 80005e8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80005ec:	4864      	ldr	r0, [pc, #400]	; (8000780 <main+0x2a8>)
 80005ee:	f007 fc49 	bl	8007e84 <xTimerCreate>
 80005f2:	4603      	mov	r3, r0
 80005f4:	4a63      	ldr	r2, [pc, #396]	; (8000784 <main+0x2ac>)
 80005f6:	6013      	str	r3, [r2, #0]
  xTimerStart(timerForDataSending, portMAX_DELAY);
 80005f8:	4b62      	ldr	r3, [pc, #392]	; (8000784 <main+0x2ac>)
 80005fa:	681c      	ldr	r4, [r3, #0]
 80005fc:	f006 ff52 	bl	80074a4 <xTaskGetTickCount>
 8000600:	4602      	mov	r2, r0
 8000602:	f04f 33ff 	mov.w	r3, #4294967295
 8000606:	9300      	str	r3, [sp, #0]
 8000608:	2300      	movs	r3, #0
 800060a:	2101      	movs	r1, #1
 800060c:	4620      	mov	r0, r4
 800060e:	f007 fc8d 	bl	8007f2c <xTimerGenericCommand>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of PS_Measure */
  osThreadDef(PS_Measure, psMeasure, osPriorityNormal, 0, 128);
 8000612:	4b5d      	ldr	r3, [pc, #372]	; (8000788 <main+0x2b0>)
 8000614:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 8000618:	461d      	mov	r5, r3
 800061a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800061c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800061e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000622:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PS_MeasureHandle = osThreadCreate(osThread(PS_Measure), NULL);
 8000626:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800062a:	2100      	movs	r1, #0
 800062c:	4618      	mov	r0, r3
 800062e:	f005 fd73 	bl	8006118 <osThreadCreate>
 8000632:	4603      	mov	r3, r0
 8000634:	4a55      	ldr	r2, [pc, #340]	; (800078c <main+0x2b4>)
 8000636:	6013      	str	r3, [r2, #0]

  /* definition and creation of PC_13_LED */
  osThreadDef(PC_13_LED, pc13LedCntrl, osPriorityNormal, 0, 128);
 8000638:	4b55      	ldr	r3, [pc, #340]	; (8000790 <main+0x2b8>)
 800063a:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 800063e:	461d      	mov	r5, r3
 8000640:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000642:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000644:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000648:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PC_13_LEDHandle = osThreadCreate(osThread(PC_13_LED), NULL);
 800064c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f005 fd60 	bl	8006118 <osThreadCreate>
 8000658:	4603      	mov	r3, r0
 800065a:	4a4e      	ldr	r2, [pc, #312]	; (8000794 <main+0x2bc>)
 800065c:	6013      	str	r3, [r2, #0]

  /* definition and creation of PC_14_LED */
  osThreadDef(PC_14_LED, pc14LedCntrl, osPriorityNormal, 0, 128);
 800065e:	4b4e      	ldr	r3, [pc, #312]	; (8000798 <main+0x2c0>)
 8000660:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8000664:	461d      	mov	r5, r3
 8000666:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000668:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800066a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800066e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PC_14_LEDHandle = osThreadCreate(osThread(PC_14_LED), NULL);
 8000672:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000676:	2100      	movs	r1, #0
 8000678:	4618      	mov	r0, r3
 800067a:	f005 fd4d 	bl	8006118 <osThreadCreate>
 800067e:	4603      	mov	r3, r0
 8000680:	4a46      	ldr	r2, [pc, #280]	; (800079c <main+0x2c4>)
 8000682:	6013      	str	r3, [r2, #0]

  /* definition and creation of EspCommunication */
  osThreadDef(EspCommunication, espCommunication, osPriorityAboveNormal, 0, 300);
 8000684:	4b46      	ldr	r3, [pc, #280]	; (80007a0 <main+0x2c8>)
 8000686:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800068a:	461d      	mov	r5, r3
 800068c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800068e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000690:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000694:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EspCommunicationHandle = osThreadCreate(osThread(EspCommunication), NULL);
 8000698:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f005 fd3a 	bl	8006118 <osThreadCreate>
 80006a4:	4603      	mov	r3, r0
 80006a6:	4a3f      	ldr	r2, [pc, #252]	; (80007a4 <main+0x2cc>)
 80006a8:	6013      	str	r3, [r2, #0]

  /* definition and creation of EncoderR */
  osThreadDef(EncoderR, encoderR, osPriorityNormal, 0, 128);
 80006aa:	4b3f      	ldr	r3, [pc, #252]	; (80007a8 <main+0x2d0>)
 80006ac:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80006b0:	461d      	mov	r5, r3
 80006b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EncoderRHandle = osThreadCreate(osThread(EncoderR), NULL);
 80006be:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006c2:	2100      	movs	r1, #0
 80006c4:	4618      	mov	r0, r3
 80006c6:	f005 fd27 	bl	8006118 <osThreadCreate>
 80006ca:	4603      	mov	r3, r0
 80006cc:	4a37      	ldr	r2, [pc, #220]	; (80007ac <main+0x2d4>)
 80006ce:	6013      	str	r3, [r2, #0]

  /* definition and creation of EncoderL */
  osThreadDef(EncoderL, encoderL, osPriorityNormal, 0, 128);
 80006d0:	4b37      	ldr	r3, [pc, #220]	; (80007b0 <main+0x2d8>)
 80006d2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80006d6:	461d      	mov	r5, r3
 80006d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EncoderLHandle = osThreadCreate(osThread(EncoderL), NULL);
 80006e4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f005 fd14 	bl	8006118 <osThreadCreate>
 80006f0:	4603      	mov	r3, r0
 80006f2:	4a30      	ldr	r2, [pc, #192]	; (80007b4 <main+0x2dc>)
 80006f4:	6013      	str	r3, [r2, #0]

  /* definition and creation of SoftwarePwmR */
  osThreadDef(SoftwarePwmR, softwarePWMR, osPriorityNormal, 0, 256);
 80006f6:	4b30      	ldr	r3, [pc, #192]	; (80007b8 <main+0x2e0>)
 80006f8:	f107 041c 	add.w	r4, r7, #28
 80006fc:	461d      	mov	r5, r3
 80006fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000700:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000702:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000706:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SoftwarePwmRHandle = osThreadCreate(osThread(SoftwarePwmR), NULL);
 800070a:	f107 031c 	add.w	r3, r7, #28
 800070e:	2100      	movs	r1, #0
 8000710:	4618      	mov	r0, r3
 8000712:	f005 fd01 	bl	8006118 <osThreadCreate>
 8000716:	4603      	mov	r3, r0
 8000718:	4a28      	ldr	r2, [pc, #160]	; (80007bc <main+0x2e4>)
 800071a:	6013      	str	r3, [r2, #0]

  /* definition and creation of SoftwarePwmL */
  osThreadDef(SoftwarePwmL, softwarePWML, osPriorityNormal, 0, 256);
 800071c:	4b28      	ldr	r3, [pc, #160]	; (80007c0 <main+0x2e8>)
 800071e:	463c      	mov	r4, r7
 8000720:	461d      	mov	r5, r3
 8000722:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000724:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000726:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800072a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SoftwarePwmLHandle = osThreadCreate(osThread(SoftwarePwmL), NULL);
 800072e:	463b      	mov	r3, r7
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f005 fcf0 	bl	8006118 <osThreadCreate>
 8000738:	4603      	mov	r3, r0
 800073a:	4a22      	ldr	r2, [pc, #136]	; (80007c4 <main+0x2ec>)
 800073c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800073e:	f005 fce4 	bl	800610a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000742:	e7fe      	b.n	8000742 <main+0x26a>
 8000744:	200009bc 	.word	0x200009bc
 8000748:	200009c8 	.word	0x200009c8
 800074c:	200009e0 	.word	0x200009e0
 8000750:	200009f8 	.word	0x200009f8
 8000754:	20000a00 	.word	0x20000a00
 8000758:	20000a0c 	.word	0x20000a0c
 800075c:	20000a10 	.word	0x20000a10
 8000760:	20000c10 	.word	0x20000c10
 8000764:	20000e10 	.word	0x20000e10
 8000768:	20000a08 	.word	0x20000a08
 800076c:	45ea6000 	.word	0x45ea6000
 8000770:	200009c0 	.word	0x200009c0
 8000774:	200009c4 	.word	0x200009c4
 8000778:	20000e18 	.word	0x20000e18
 800077c:	080011a1 	.word	0x080011a1
 8000780:	0800966c 	.word	0x0800966c
 8000784:	20000e14 	.word	0x20000e14
 8000788:	0800968c 	.word	0x0800968c
 800078c:	20000988 	.word	0x20000988
 8000790:	080096b4 	.word	0x080096b4
 8000794:	2000098c 	.word	0x2000098c
 8000798:	080096dc 	.word	0x080096dc
 800079c:	20000990 	.word	0x20000990
 80007a0:	0800970c 	.word	0x0800970c
 80007a4:	20000994 	.word	0x20000994
 80007a8:	08009734 	.word	0x08009734
 80007ac:	20000998 	.word	0x20000998
 80007b0:	0800975c 	.word	0x0800975c
 80007b4:	2000099c 	.word	0x2000099c
 80007b8:	08009788 	.word	0x08009788
 80007bc:	200009a0 	.word	0x200009a0
 80007c0:	080097b4 	.word	0x080097b4
 80007c4:	200009a4 	.word	0x200009a4

080007c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b09c      	sub	sp, #112	; 0x70
 80007cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007d2:	2228      	movs	r2, #40	; 0x28
 80007d4:	2100      	movs	r1, #0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f008 fab8 	bl	8008d4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007dc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]
 80007ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	2230      	movs	r2, #48	; 0x30
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f008 faaa 	bl	8008d4c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007f8:	2302      	movs	r3, #2
 80007fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007fc:	2301      	movs	r3, #1
 80007fe:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000800:	2310      	movs	r3, #16
 8000802:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000804:	2302      	movs	r3, #2
 8000806:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000808:	2300      	movs	r3, #0
 800080a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800080c:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000810:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000812:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000816:	4618      	mov	r0, r3
 8000818:	f003 f81e 	bl	8003858 <HAL_RCC_OscConfig>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000822:	f001 fb45 	bl	8001eb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000826:	230f      	movs	r3, #15
 8000828:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800082a:	2302      	movs	r3, #2
 800082c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800082e:	2300      	movs	r3, #0
 8000830:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000832:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000836:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000838:	2300      	movs	r3, #0
 800083a:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800083c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000840:	2102      	movs	r1, #2
 8000842:	4618      	mov	r0, r3
 8000844:	f004 f846 	bl	80048d4 <HAL_RCC_ClockConfig>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800084e:	f001 fb2f 	bl	8001eb0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM16|RCC_PERIPHCLK_TIM17
 8000852:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <SystemClock_Config+0xb8>)
 8000854:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC1;
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 8000856:	2300      	movs	r3, #0
 8000858:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
 800085a:	2300      	movs	r3, #0
 800085c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV2;
 800085e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000862:	61fb      	str	r3, [r7, #28]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000864:	1d3b      	adds	r3, r7, #4
 8000866:	4618      	mov	r0, r3
 8000868:	f004 fa9c 	bl	8004da4 <HAL_RCCEx_PeriphCLKConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000872:	f001 fb1d 	bl	8001eb0 <Error_Handler>
  }
}
 8000876:	bf00      	nop
 8000878:	3770      	adds	r7, #112	; 0x70
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	00180080 	.word	0x00180080

08000884 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b086      	sub	sp, #24
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800088a:	463b      	mov	r3, r7
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]
 8000898:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800089a:	4b27      	ldr	r3, [pc, #156]	; (8000938 <MX_ADC1_Init+0xb4>)
 800089c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008a0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008a2:	4b25      	ldr	r3, [pc, #148]	; (8000938 <MX_ADC1_Init+0xb4>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008a8:	4b23      	ldr	r3, [pc, #140]	; (8000938 <MX_ADC1_Init+0xb4>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008ae:	4b22      	ldr	r3, [pc, #136]	; (8000938 <MX_ADC1_Init+0xb4>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80008b4:	4b20      	ldr	r3, [pc, #128]	; (8000938 <MX_ADC1_Init+0xb4>)
 80008b6:	2201      	movs	r2, #1
 80008b8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008ba:	4b1f      	ldr	r3, [pc, #124]	; (8000938 <MX_ADC1_Init+0xb4>)
 80008bc:	2200      	movs	r2, #0
 80008be:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008c2:	4b1d      	ldr	r3, [pc, #116]	; (8000938 <MX_ADC1_Init+0xb4>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008c8:	4b1b      	ldr	r3, [pc, #108]	; (8000938 <MX_ADC1_Init+0xb4>)
 80008ca:	2201      	movs	r2, #1
 80008cc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008ce:	4b1a      	ldr	r3, [pc, #104]	; (8000938 <MX_ADC1_Init+0xb4>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80008d4:	4b18      	ldr	r3, [pc, #96]	; (8000938 <MX_ADC1_Init+0xb4>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008da:	4b17      	ldr	r3, [pc, #92]	; (8000938 <MX_ADC1_Init+0xb4>)
 80008dc:	2200      	movs	r2, #0
 80008de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008e2:	4b15      	ldr	r3, [pc, #84]	; (8000938 <MX_ADC1_Init+0xb4>)
 80008e4:	2204      	movs	r2, #4
 80008e6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008e8:	4b13      	ldr	r3, [pc, #76]	; (8000938 <MX_ADC1_Init+0xb4>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80008ee:	4b12      	ldr	r3, [pc, #72]	; (8000938 <MX_ADC1_Init+0xb4>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008f4:	4810      	ldr	r0, [pc, #64]	; (8000938 <MX_ADC1_Init+0xb4>)
 80008f6:	f001 ff77 	bl	80027e8 <HAL_ADC_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 8000900:	f001 fad6 	bl	8001eb0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000904:	2303      	movs	r3, #3
 8000906:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000908:	2301      	movs	r3, #1
 800090a:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800090c:	2300      	movs	r3, #0
 800090e:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000910:	2300      	movs	r3, #0
 8000912:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000914:	2300      	movs	r3, #0
 8000916:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800091c:	463b      	mov	r3, r7
 800091e:	4619      	mov	r1, r3
 8000920:	4805      	ldr	r0, [pc, #20]	; (8000938 <MX_ADC1_Init+0xb4>)
 8000922:	f002 f8e7 	bl	8002af4 <HAL_ADC_ConfigChannel>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800092c:	f001 fac0 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000930:	bf00      	nop
 8000932:	3718      	adds	r7, #24
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	2000072c 	.word	0x2000072c

0800093c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000940:	4b1b      	ldr	r3, [pc, #108]	; (80009b0 <MX_SPI2_Init+0x74>)
 8000942:	4a1c      	ldr	r2, [pc, #112]	; (80009b4 <MX_SPI2_Init+0x78>)
 8000944:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000946:	4b1a      	ldr	r3, [pc, #104]	; (80009b0 <MX_SPI2_Init+0x74>)
 8000948:	f44f 7282 	mov.w	r2, #260	; 0x104
 800094c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 800094e:	4b18      	ldr	r3, [pc, #96]	; (80009b0 <MX_SPI2_Init+0x74>)
 8000950:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000954:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000956:	4b16      	ldr	r3, [pc, #88]	; (80009b0 <MX_SPI2_Init+0x74>)
 8000958:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800095c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800095e:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <MX_SPI2_Init+0x74>)
 8000960:	2202      	movs	r2, #2
 8000962:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <MX_SPI2_Init+0x74>)
 8000966:	2201      	movs	r2, #1
 8000968:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800096a:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <MX_SPI2_Init+0x74>)
 800096c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000970:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000972:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <MX_SPI2_Init+0x74>)
 8000974:	2220      	movs	r2, #32
 8000976:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000978:	4b0d      	ldr	r3, [pc, #52]	; (80009b0 <MX_SPI2_Init+0x74>)
 800097a:	2200      	movs	r2, #0
 800097c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800097e:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <MX_SPI2_Init+0x74>)
 8000980:	2200      	movs	r2, #0
 8000982:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000984:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <MX_SPI2_Init+0x74>)
 8000986:	2200      	movs	r2, #0
 8000988:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <MX_SPI2_Init+0x74>)
 800098c:	2207      	movs	r2, #7
 800098e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000990:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <MX_SPI2_Init+0x74>)
 8000992:	2200      	movs	r2, #0
 8000994:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <MX_SPI2_Init+0x74>)
 8000998:	2200      	movs	r2, #0
 800099a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800099c:	4804      	ldr	r0, [pc, #16]	; (80009b0 <MX_SPI2_Init+0x74>)
 800099e:	f004 fb85 	bl	80050ac <HAL_SPI_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 80009a8:	f001 fa82 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	2000077c 	.word	0x2000077c
 80009b4:	40003800 	.word	0x40003800

080009b8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80009bc:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <MX_TIM16_Init+0x44>)
 80009be:	4a10      	ldr	r2, [pc, #64]	; (8000a00 <MX_TIM16_Init+0x48>)
 80009c0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 63;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <MX_TIM16_Init+0x44>)
 80009c4:	223f      	movs	r2, #63	; 0x3f
 80009c6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <MX_TIM16_Init+0x44>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10;
 80009ce:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <MX_TIM16_Init+0x44>)
 80009d0:	220a      	movs	r2, #10
 80009d2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d4:	4b09      	ldr	r3, [pc, #36]	; (80009fc <MX_TIM16_Init+0x44>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80009da:	4b08      	ldr	r3, [pc, #32]	; (80009fc <MX_TIM16_Init+0x44>)
 80009dc:	2200      	movs	r2, #0
 80009de:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <MX_TIM16_Init+0x44>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80009e6:	4805      	ldr	r0, [pc, #20]	; (80009fc <MX_TIM16_Init+0x44>)
 80009e8:	f004 fc0b 	bl	8005202 <HAL_TIM_Base_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 80009f2:	f001 fa5d 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	200007e0 	.word	0x200007e0
 8000a00:	40014400 	.word	0x40014400

08000a04 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000a08:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <MX_TIM17_Init+0x48>)
 8000a0a:	4a11      	ldr	r2, [pc, #68]	; (8000a50 <MX_TIM17_Init+0x4c>)
 8000a0c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1999;
 8000a0e:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <MX_TIM17_Init+0x48>)
 8000a10:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000a14:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a16:	4b0d      	ldr	r3, [pc, #52]	; (8000a4c <MX_TIM17_Init+0x48>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000a1c:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <MX_TIM17_Init+0x48>)
 8000a1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a22:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a24:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <MX_TIM17_Init+0x48>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000a2a:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <MX_TIM17_Init+0x48>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <MX_TIM17_Init+0x48>)
 8000a32:	2280      	movs	r2, #128	; 0x80
 8000a34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000a36:	4805      	ldr	r0, [pc, #20]	; (8000a4c <MX_TIM17_Init+0x48>)
 8000a38:	f004 fbe3 	bl	8005202 <HAL_TIM_Base_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8000a42:	f001 fa35 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	2000082c 	.word	0x2000082c
 8000a50:	40014800 	.word	0x40014800

08000a54 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a58:	4b14      	ldr	r3, [pc, #80]	; (8000aac <MX_USART3_UART_Init+0x58>)
 8000a5a:	4a15      	ldr	r2, [pc, #84]	; (8000ab0 <MX_USART3_UART_Init+0x5c>)
 8000a5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a5e:	4b13      	ldr	r3, [pc, #76]	; (8000aac <MX_USART3_UART_Init+0x58>)
 8000a60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a66:	4b11      	ldr	r3, [pc, #68]	; (8000aac <MX_USART3_UART_Init+0x58>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <MX_USART3_UART_Init+0x58>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a72:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <MX_USART3_UART_Init+0x58>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a78:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <MX_USART3_UART_Init+0x58>)
 8000a7a:	220c      	movs	r2, #12
 8000a7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <MX_USART3_UART_Init+0x58>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a84:	4b09      	ldr	r3, [pc, #36]	; (8000aac <MX_USART3_UART_Init+0x58>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a8a:	4b08      	ldr	r3, [pc, #32]	; (8000aac <MX_USART3_UART_Init+0x58>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <MX_USART3_UART_Init+0x58>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a96:	4805      	ldr	r0, [pc, #20]	; (8000aac <MX_USART3_UART_Init+0x58>)
 8000a98:	f004 fe32 	bl	8005700 <HAL_UART_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000aa2:	f001 fa05 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000878 	.word	0x20000878
 8000ab0:	40004800 	.word	0x40004800

08000ab4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000aba:	4b10      	ldr	r3, [pc, #64]	; (8000afc <MX_DMA_Init+0x48>)
 8000abc:	695b      	ldr	r3, [r3, #20]
 8000abe:	4a0f      	ldr	r2, [pc, #60]	; (8000afc <MX_DMA_Init+0x48>)
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	6153      	str	r3, [r2, #20]
 8000ac6:	4b0d      	ldr	r3, [pc, #52]	; (8000afc <MX_DMA_Init+0x48>)
 8000ac8:	695b      	ldr	r3, [r3, #20]
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2105      	movs	r1, #5
 8000ad6:	200c      	movs	r0, #12
 8000ad8:	f002 fbdc 	bl	8003294 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000adc:	200c      	movs	r0, #12
 8000ade:	f002 fbf5 	bl	80032cc <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2105      	movs	r1, #5
 8000ae6:	200d      	movs	r0, #13
 8000ae8:	f002 fbd4 	bl	8003294 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000aec:	200d      	movs	r0, #13
 8000aee:	f002 fbed 	bl	80032cc <HAL_NVIC_EnableIRQ>

}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40021000 	.word	0x40021000

08000b00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b088      	sub	sp, #32
 8000b04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b06:	f107 030c 	add.w	r3, r7, #12
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]
 8000b10:	609a      	str	r2, [r3, #8]
 8000b12:	60da      	str	r2, [r3, #12]
 8000b14:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b16:	4b4d      	ldr	r3, [pc, #308]	; (8000c4c <MX_GPIO_Init+0x14c>)
 8000b18:	695b      	ldr	r3, [r3, #20]
 8000b1a:	4a4c      	ldr	r2, [pc, #304]	; (8000c4c <MX_GPIO_Init+0x14c>)
 8000b1c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b20:	6153      	str	r3, [r2, #20]
 8000b22:	4b4a      	ldr	r3, [pc, #296]	; (8000c4c <MX_GPIO_Init+0x14c>)
 8000b24:	695b      	ldr	r3, [r3, #20]
 8000b26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b2a:	60bb      	str	r3, [r7, #8]
 8000b2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2e:	4b47      	ldr	r3, [pc, #284]	; (8000c4c <MX_GPIO_Init+0x14c>)
 8000b30:	695b      	ldr	r3, [r3, #20]
 8000b32:	4a46      	ldr	r2, [pc, #280]	; (8000c4c <MX_GPIO_Init+0x14c>)
 8000b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b38:	6153      	str	r3, [r2, #20]
 8000b3a:	4b44      	ldr	r3, [pc, #272]	; (8000c4c <MX_GPIO_Init+0x14c>)
 8000b3c:	695b      	ldr	r3, [r3, #20]
 8000b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b46:	4b41      	ldr	r3, [pc, #260]	; (8000c4c <MX_GPIO_Init+0x14c>)
 8000b48:	695b      	ldr	r3, [r3, #20]
 8000b4a:	4a40      	ldr	r2, [pc, #256]	; (8000c4c <MX_GPIO_Init+0x14c>)
 8000b4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b50:	6153      	str	r3, [r2, #20]
 8000b52:	4b3e      	ldr	r3, [pc, #248]	; (8000c4c <MX_GPIO_Init+0x14c>)
 8000b54:	695b      	ldr	r3, [r3, #20]
 8000b56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b5a:	603b      	str	r3, [r7, #0]
 8000b5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000b64:	483a      	ldr	r0, [pc, #232]	; (8000c50 <MX_GPIO_Init+0x150>)
 8000b66:	f002 fe3b 	bl	80037e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN12_Pin|_1A_Pin|_2A_Pin|EN34_Pin
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	21f8      	movs	r1, #248	; 0xf8
 8000b6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b72:	f002 fe35 	bl	80037e0 <HAL_GPIO_WritePin>
                          |_3A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, _4A_Pin|RST_ESP_Pin|EN_ESP_Pin|SPI2_CS_L_Pin
 8000b76:	2200      	movs	r2, #0
 8000b78:	f245 0107 	movw	r1, #20487	; 0x5007
 8000b7c:	4835      	ldr	r0, [pc, #212]	; (8000c54 <MX_GPIO_Init+0x154>)
 8000b7e:	f002 fe2f 	bl	80037e0 <HAL_GPIO_WritePin>
                          |SPI2_CS_R_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000b82:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000b86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b90:	2300      	movs	r3, #0
 8000b92:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b94:	f107 030c 	add.w	r3, r7, #12
 8000b98:	4619      	mov	r1, r3
 8000b9a:	482d      	ldr	r0, [pc, #180]	; (8000c50 <MX_GPIO_Init+0x150>)
 8000b9c:	f002 fcae 	bl	80034fc <HAL_GPIO_Init>

  /*Configure GPIO pins : EN12_Pin _1A_Pin _2A_Pin EN34_Pin
                           _3A_Pin */
  GPIO_InitStruct.Pin = EN12_Pin|_1A_Pin|_2A_Pin|EN34_Pin
 8000ba0:	23f8      	movs	r3, #248	; 0xf8
 8000ba2:	60fb      	str	r3, [r7, #12]
                          |_3A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bac:	2303      	movs	r3, #3
 8000bae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb0:	f107 030c 	add.w	r3, r7, #12
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bba:	f002 fc9f 	bl	80034fc <HAL_GPIO_Init>

  /*Configure GPIO pin : _4A_Pin */
  GPIO_InitStruct.Pin = _4A_Pin;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bca:	2303      	movs	r3, #3
 8000bcc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(_4A_GPIO_Port, &GPIO_InitStruct);
 8000bce:	f107 030c 	add.w	r3, r7, #12
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	481f      	ldr	r0, [pc, #124]	; (8000c54 <MX_GPIO_Init+0x154>)
 8000bd6:	f002 fc91 	bl	80034fc <HAL_GPIO_Init>

  /*Configure GPIO pins : RST_ESP_Pin EN_ESP_Pin */
  GPIO_InitStruct.Pin = RST_ESP_Pin|EN_ESP_Pin;
 8000bda:	2306      	movs	r3, #6
 8000bdc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bde:	2301      	movs	r3, #1
 8000be0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bea:	f107 030c 	add.w	r3, r7, #12
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4818      	ldr	r0, [pc, #96]	; (8000c54 <MX_GPIO_Init+0x154>)
 8000bf2:	f002 fc83 	bl	80034fc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_CS_L_Pin SPI2_CS_R_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_L_Pin|SPI2_CS_R_Pin;
 8000bf6:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000bfa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000c04:	2301      	movs	r3, #1
 8000c06:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c08:	f107 030c 	add.w	r3, r7, #12
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4811      	ldr	r0, [pc, #68]	; (8000c54 <MX_GPIO_Init+0x154>)
 8000c10:	f002 fc74 	bl	80034fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c14:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c1a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c24:	f107 030c 	add.w	r3, r7, #12
 8000c28:	4619      	mov	r1, r3
 8000c2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c2e:	f002 fc65 	bl	80034fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2105      	movs	r1, #5
 8000c36:	2028      	movs	r0, #40	; 0x28
 8000c38:	f002 fb2c 	bl	8003294 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c3c:	2028      	movs	r0, #40	; 0x28
 8000c3e:	f002 fb45 	bl	80032cc <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c42:	bf00      	nop
 8000c44:	3720      	adds	r7, #32
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	48000800 	.word	0x48000800
 8000c54:	48000400 	.word	0x48000400

08000c58 <ADC1_configuration>:

/* USER CODE BEGIN 4 */
void ADC1_configuration(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
	//NVIC configuration
	NVIC->IP[11] |= 0x70; //Priority 7
 8000c5c:	4b68      	ldr	r3, [pc, #416]	; (8000e00 <ADC1_configuration+0x1a8>)
 8000c5e:	f893 330b 	ldrb.w	r3, [r3, #779]	; 0x30b
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	4a66      	ldr	r2, [pc, #408]	; (8000e00 <ADC1_configuration+0x1a8>)
 8000c66:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	f882 330b 	strb.w	r3, [r2, #779]	; 0x30b
	NVIC->ISER[0] |= (1<<11); //Enable DMA1 channel 1 interrupt
 8000c70:	4b63      	ldr	r3, [pc, #396]	; (8000e00 <ADC1_configuration+0x1a8>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a62      	ldr	r2, [pc, #392]	; (8000e00 <ADC1_configuration+0x1a8>)
 8000c76:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c7a:	6013      	str	r3, [r2, #0]
	NVIC->IP[18] |= 0x70; //Priority 7
 8000c7c:	4b60      	ldr	r3, [pc, #384]	; (8000e00 <ADC1_configuration+0x1a8>)
 8000c7e:	f893 3312 	ldrb.w	r3, [r3, #786]	; 0x312
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	4a5e      	ldr	r2, [pc, #376]	; (8000e00 <ADC1_configuration+0x1a8>)
 8000c86:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	f882 3312 	strb.w	r3, [r2, #786]	; 0x312
	NVIC->ISER[0] |= (1<<18); //Enable ADC1 global interrupt
 8000c90:	4b5b      	ldr	r3, [pc, #364]	; (8000e00 <ADC1_configuration+0x1a8>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a5a      	ldr	r2, [pc, #360]	; (8000e00 <ADC1_configuration+0x1a8>)
 8000c96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c9a:	6013      	str	r3, [r2, #0]
	//DMA configuration for ADC1
	RCC->AHBENR |= RCC_AHBENR_DMA1EN; // Enable the DMA1 clock
 8000c9c:	4b59      	ldr	r3, [pc, #356]	; (8000e04 <ADC1_configuration+0x1ac>)
 8000c9e:	695b      	ldr	r3, [r3, #20]
 8000ca0:	4a58      	ldr	r2, [pc, #352]	; (8000e04 <ADC1_configuration+0x1ac>)
 8000ca2:	f043 0301 	orr.w	r3, r3, #1
 8000ca6:	6153      	str	r3, [r2, #20]
	DMA1_Channel1->CCR &= ~DMA_CCR_EN;
 8000ca8:	4b57      	ldr	r3, [pc, #348]	; (8000e08 <ADC1_configuration+0x1b0>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a56      	ldr	r2, [pc, #344]	; (8000e08 <ADC1_configuration+0x1b0>)
 8000cae:	f023 0301 	bic.w	r3, r3, #1
 8000cb2:	6013      	str	r3, [r2, #0]

	DMA1_Channel1->CCR |= (1<<10); // Bits 11:10 MSIZE[1:0]: Memory size  01: 16-bits
 8000cb4:	4b54      	ldr	r3, [pc, #336]	; (8000e08 <ADC1_configuration+0x1b0>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a53      	ldr	r2, [pc, #332]	; (8000e08 <ADC1_configuration+0x1b0>)
 8000cba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cbe:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= (1<<8); // Bits 9:8 PSIZE[1:0]: Peripheral size  01: 16-bits
 8000cc0:	4b51      	ldr	r3, [pc, #324]	; (8000e08 <ADC1_configuration+0x1b0>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a50      	ldr	r2, [pc, #320]	; (8000e08 <ADC1_configuration+0x1b0>)
 8000cc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cca:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= DMA_CCR_MINC;
 8000ccc:	4b4e      	ldr	r3, [pc, #312]	; (8000e08 <ADC1_configuration+0x1b0>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a4d      	ldr	r2, [pc, #308]	; (8000e08 <ADC1_configuration+0x1b0>)
 8000cd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cd6:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= DMA_CCR_CIRC;
 8000cd8:	4b4b      	ldr	r3, [pc, #300]	; (8000e08 <ADC1_configuration+0x1b0>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a4a      	ldr	r2, [pc, #296]	; (8000e08 <ADC1_configuration+0x1b0>)
 8000cde:	f043 0320 	orr.w	r3, r3, #32
 8000ce2:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= DMA_CCR_TCIE;
 8000ce4:	4b48      	ldr	r3, [pc, #288]	; (8000e08 <ADC1_configuration+0x1b0>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a47      	ldr	r2, [pc, #284]	; (8000e08 <ADC1_configuration+0x1b0>)
 8000cea:	f043 0302 	orr.w	r3, r3, #2
 8000cee:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR &= ~DMA_CCR_HTIE;
 8000cf0:	4b45      	ldr	r3, [pc, #276]	; (8000e08 <ADC1_configuration+0x1b0>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a44      	ldr	r2, [pc, #272]	; (8000e08 <ADC1_configuration+0x1b0>)
 8000cf6:	f023 0304 	bic.w	r3, r3, #4
 8000cfa:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR &= ~DMA_CCR_TEIE;
 8000cfc:	4b42      	ldr	r3, [pc, #264]	; (8000e08 <ADC1_configuration+0x1b0>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a41      	ldr	r2, [pc, #260]	; (8000e08 <ADC1_configuration+0x1b0>)
 8000d02:	f023 0308 	bic.w	r3, r3, #8
 8000d06:	6013      	str	r3, [r2, #0]

	DMA1_Channel1->CNDTR = 10;
 8000d08:	4b3f      	ldr	r3, [pc, #252]	; (8000e08 <ADC1_configuration+0x1b0>)
 8000d0a:	220a      	movs	r2, #10
 8000d0c:	605a      	str	r2, [r3, #4]
	DMA1_Channel1->CPAR = (uint32_t)&(ADC1->DR);
 8000d0e:	4b3e      	ldr	r3, [pc, #248]	; (8000e08 <ADC1_configuration+0x1b0>)
 8000d10:	4a3e      	ldr	r2, [pc, #248]	; (8000e0c <ADC1_configuration+0x1b4>)
 8000d12:	609a      	str	r2, [r3, #8]
	DMA1_Channel1->CMAR = (uint32_t)&batteryVoltage[0];
 8000d14:	4b3c      	ldr	r3, [pc, #240]	; (8000e08 <ADC1_configuration+0x1b0>)
 8000d16:	4a3e      	ldr	r2, [pc, #248]	; (8000e10 <ADC1_configuration+0x1b8>)
 8000d18:	60da      	str	r2, [r3, #12]
//	ADC1->CR |= ADC_CR_ADEN;
//	while((ADC1->ISR & ADC_ISR_ADRDY) != ADC_ISR_ADRDY) __asm__ volatile("NOP");
//	ADC1->CR |= ADC_CR_ADSTART;
//	HAL_Delay(20);
//	DMA1_Channel1->CCR |= DMA_CCR_EN;
	__asm__ volatile("NOP");
 8000d1a:	bf00      	nop
	if(batteryVoltage[0] == 0) {
 8000d1c:	4b3c      	ldr	r3, [pc, #240]	; (8000e10 <ADC1_configuration+0x1b8>)
 8000d1e:	881b      	ldrh	r3, [r3, #0]
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d16a      	bne.n	8000dfc <ADC1_configuration+0x1a4>
		if((ADC1->CR & ADC_CR_ADEN) == ADC_CR_ADEN) {
 8000d26:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d2a:	689b      	ldr	r3, [r3, #8]
 8000d2c:	f003 0301 	and.w	r3, r3, #1
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d12d      	bne.n	8000d90 <ADC1_configuration+0x138>
			DMA1_Channel1->CCR &= ~DMA_CCR_EN;
 8000d34:	4b34      	ldr	r3, [pc, #208]	; (8000e08 <ADC1_configuration+0x1b0>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a33      	ldr	r2, [pc, #204]	; (8000e08 <ADC1_configuration+0x1b0>)
 8000d3a:	f023 0301 	bic.w	r3, r3, #1
 8000d3e:	6013      	str	r3, [r2, #0]
			ADC1->CR |= ADC_CR_ADSTP;
 8000d40:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d44:	689b      	ldr	r3, [r3, #8]
 8000d46:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d4a:	f043 0310 	orr.w	r3, r3, #16
 8000d4e:	6093      	str	r3, [r2, #8]
			while((ADC1->CR & ADC_CR_ADSTP) == ADC_CR_ADSTP) __asm__ volatile("NOP");
 8000d50:	e000      	b.n	8000d54 <ADC1_configuration+0xfc>
 8000d52:	bf00      	nop
 8000d54:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	f003 0310 	and.w	r3, r3, #16
 8000d5e:	2b10      	cmp	r3, #16
 8000d60:	d0f7      	beq.n	8000d52 <ADC1_configuration+0xfa>
			HAL_Delay(5);
 8000d62:	2005      	movs	r0, #5
 8000d64:	f001 fd1c 	bl	80027a0 <HAL_Delay>
			ADC1->CR |= ADC_CR_ADDIS;
 8000d68:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d72:	f043 0302 	orr.w	r3, r3, #2
 8000d76:	6093      	str	r3, [r2, #8]
			while((ADC1->CR & ADC_CR_ADDIS) == ADC_CR_ADDIS) __asm__ volatile("NOP");
 8000d78:	e000      	b.n	8000d7c <ADC1_configuration+0x124>
 8000d7a:	bf00      	nop
 8000d7c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d80:	689b      	ldr	r3, [r3, #8]
 8000d82:	f003 0302 	and.w	r3, r3, #2
 8000d86:	2b02      	cmp	r3, #2
 8000d88:	d0f7      	beq.n	8000d7a <ADC1_configuration+0x122>
			HAL_Delay(20);
 8000d8a:	2014      	movs	r0, #20
 8000d8c:	f001 fd08 	bl	80027a0 <HAL_Delay>
		}
		MX_ADC1_Init();
 8000d90:	f7ff fd78 	bl	8000884 <MX_ADC1_Init>
		ADC1->CFGR |= ADC_CFGR_DMACFG;
 8000d94:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d98:	68db      	ldr	r3, [r3, #12]
 8000d9a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d9e:	f043 0302 	orr.w	r3, r3, #2
 8000da2:	60d3      	str	r3, [r2, #12]
		ADC1->CFGR |= ADC_CFGR_DMAEN;
 8000da4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000da8:	68db      	ldr	r3, [r3, #12]
 8000daa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000dae:	f043 0301 	orr.w	r3, r3, #1
 8000db2:	60d3      	str	r3, [r2, #12]
		ADC1->CR |= ADC_CR_ADEN;
 8000db4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000dbe:	f043 0301 	orr.w	r3, r3, #1
 8000dc2:	6093      	str	r3, [r2, #8]
		while((ADC1->ISR & ADC_ISR_ADRDY) != ADC_ISR_ADRDY) __asm__ volatile("NOP");
 8000dc4:	e000      	b.n	8000dc8 <ADC1_configuration+0x170>
 8000dc6:	bf00      	nop
 8000dc8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d1f7      	bne.n	8000dc6 <ADC1_configuration+0x16e>
		ADC1->CR |= ADC_CR_ADSTART;
 8000dd6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000de0:	f043 0304 	orr.w	r3, r3, #4
 8000de4:	6093      	str	r3, [r2, #8]
		HAL_Delay(20);
 8000de6:	2014      	movs	r0, #20
 8000de8:	f001 fcda 	bl	80027a0 <HAL_Delay>
		DMA1_Channel1->CCR |= DMA_CCR_EN;
 8000dec:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <ADC1_configuration+0x1b0>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a05      	ldr	r2, [pc, #20]	; (8000e08 <ADC1_configuration+0x1b0>)
 8000df2:	f043 0301 	orr.w	r3, r3, #1
 8000df6:	6013      	str	r3, [r2, #0]
		__asm__ volatile("NOP");
 8000df8:	bf00      	nop
	}
	return;
 8000dfa:	bf00      	nop
 8000dfc:	bf00      	nop
}
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	e000e100 	.word	0xe000e100
 8000e04:	40021000 	.word	0x40021000
 8000e08:	40020008 	.word	0x40020008
 8000e0c:	50000040 	.word	0x50000040
 8000e10:	200009a8 	.word	0x200009a8

08000e14 <TIM1_configuration>:

void TIM1_configuration(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
    // Enable the TIM1 clock
    RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8000e18:	4b38      	ldr	r3, [pc, #224]	; (8000efc <TIM1_configuration+0xe8>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	4a37      	ldr	r2, [pc, #220]	; (8000efc <TIM1_configuration+0xe8>)
 8000e1e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e22:	6193      	str	r3, [r2, #24]

    // Configure GPIO pins for TIM1 PA9-CH2 and PA8-CH1
    GPIOA->MODER |= (1<<17);
 8000e24:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e32:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (1<<19);
 8000e34:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e42:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR |= (1<<17); //Pull-down
 8000e44:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e48:	68db      	ldr	r3, [r3, #12]
 8000e4a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e52:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR |= (1<<19); //Pull-down
 8000e54:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e58:	68db      	ldr	r3, [r3, #12]
 8000e5a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e62:	60d3      	str	r3, [r2, #12]
    GPIOA->AFR[1] |= (6); //AF6
 8000e64:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e6a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e6e:	f043 0306 	orr.w	r3, r3, #6
 8000e72:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOA->AFR[1] |= (6<<4); //AF6
 8000e74:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e7a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e7e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000e82:	6253      	str	r3, [r2, #36]	; 0x24

    // Configure TIM1
	TIM1->CR1 |= TIM_CR1_ARPE; //ARPE: Auto-reload preload enable
 8000e84:	4b1e      	ldr	r3, [pc, #120]	; (8000f00 <TIM1_configuration+0xec>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a1d      	ldr	r2, [pc, #116]	; (8000f00 <TIM1_configuration+0xec>)
 8000e8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e8e:	6013      	str	r3, [r2, #0]
	TIM1->SMCR |= (TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0); // Encoder mode 3
 8000e90:	4b1b      	ldr	r3, [pc, #108]	; (8000f00 <TIM1_configuration+0xec>)
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	4a1a      	ldr	r2, [pc, #104]	; (8000f00 <TIM1_configuration+0xec>)
 8000e96:	f043 0303 	orr.w	r3, r3, #3
 8000e9a:	6093      	str	r3, [r2, #8]
	TIM1->DIER |= TIM_DIER_UIE; //UIE: Update interrupt enable
 8000e9c:	4b18      	ldr	r3, [pc, #96]	; (8000f00 <TIM1_configuration+0xec>)
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	4a17      	ldr	r2, [pc, #92]	; (8000f00 <TIM1_configuration+0xec>)
 8000ea2:	f043 0301 	orr.w	r3, r3, #1
 8000ea6:	60d3      	str	r3, [r2, #12]

	TIM1->CCMR1 |= (1<<0);
 8000ea8:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <TIM1_configuration+0xec>)
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	4a14      	ldr	r2, [pc, #80]	; (8000f00 <TIM1_configuration+0xec>)
 8000eae:	f043 0301 	orr.w	r3, r3, #1
 8000eb2:	6193      	str	r3, [r2, #24]
	TIM1->CCMR1 |= (1<<8);
 8000eb4:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <TIM1_configuration+0xec>)
 8000eb6:	699b      	ldr	r3, [r3, #24]
 8000eb8:	4a11      	ldr	r2, [pc, #68]	; (8000f00 <TIM1_configuration+0xec>)
 8000eba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ebe:	6193      	str	r3, [r2, #24]
	TIM1->CCER |= (1<<0);
 8000ec0:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <TIM1_configuration+0xec>)
 8000ec2:	6a1b      	ldr	r3, [r3, #32]
 8000ec4:	4a0e      	ldr	r2, [pc, #56]	; (8000f00 <TIM1_configuration+0xec>)
 8000ec6:	f043 0301 	orr.w	r3, r3, #1
 8000eca:	6213      	str	r3, [r2, #32]
	TIM1->CCER |= (1<<4);
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <TIM1_configuration+0xec>)
 8000ece:	6a1b      	ldr	r3, [r3, #32]
 8000ed0:	4a0b      	ldr	r2, [pc, #44]	; (8000f00 <TIM1_configuration+0xec>)
 8000ed2:	f043 0310 	orr.w	r3, r3, #16
 8000ed6:	6213      	str	r3, [r2, #32]

	TIM1->PSC = 7; //7+1 = 8
 8000ed8:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <TIM1_configuration+0xec>)
 8000eda:	2207      	movs	r2, #7
 8000edc:	629a      	str	r2, [r3, #40]	; 0x28

//	TIM1->RCR = 0xFFFF; // Repetition counter value

    // Enable the TIM1 interrupt
    NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000ede:	2019      	movs	r0, #25
 8000ee0:	f7ff fab2 	bl	8000448 <__NVIC_EnableIRQ>

    // Set priority for the TIM1 interrupt
    NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5); // Adjust priority as needed
 8000ee4:	2105      	movs	r1, #5
 8000ee6:	2019      	movs	r0, #25
 8000ee8:	f7ff facc 	bl	8000484 <__NVIC_SetPriority>

    // Enable the TIM1 counter
    TIM1->CR1 |= TIM_CR1_CEN;
 8000eec:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <TIM1_configuration+0xec>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a03      	ldr	r2, [pc, #12]	; (8000f00 <TIM1_configuration+0xec>)
 8000ef2:	f043 0301 	orr.w	r3, r3, #1
 8000ef6:	6013      	str	r3, [r2, #0]
}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40021000 	.word	0x40021000
 8000f00:	40012c00 	.word	0x40012c00

08000f04 <TIM2_configuration>:

void TIM2_configuration(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
    // Enable the TIM2 clock
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000f08:	4b43      	ldr	r3, [pc, #268]	; (8001018 <TIM2_configuration+0x114>)
 8000f0a:	69db      	ldr	r3, [r3, #28]
 8000f0c:	4a42      	ldr	r2, [pc, #264]	; (8001018 <TIM2_configuration+0x114>)
 8000f0e:	f043 0301 	orr.w	r3, r3, #1
 8000f12:	61d3      	str	r3, [r2, #28]

    // Configure GPIO pins for TIM2 PA1-CH2 and PA0-CH1
    GPIOA->MODER |= (1<<1);
 8000f14:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f1e:	f043 0302 	orr.w	r3, r3, #2
 8000f22:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (1<<3);
 8000f24:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f2e:	f043 0308 	orr.w	r3, r3, #8
 8000f32:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR |= (1<<1); //Pull-down
 8000f34:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f38:	68db      	ldr	r3, [r3, #12]
 8000f3a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f3e:	f043 0302 	orr.w	r3, r3, #2
 8000f42:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR |= (1<<3); //Pull-down
 8000f44:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f48:	68db      	ldr	r3, [r3, #12]
 8000f4a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f4e:	f043 0308 	orr.w	r3, r3, #8
 8000f52:	60d3      	str	r3, [r2, #12]
    GPIOA->AFR[0] |= (1); //AF1
 8000f54:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f58:	6a1b      	ldr	r3, [r3, #32]
 8000f5a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f5e:	f043 0301 	orr.w	r3, r3, #1
 8000f62:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (1<<4); //AF1
 8000f64:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f68:	6a1b      	ldr	r3, [r3, #32]
 8000f6a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f6e:	f043 0310 	orr.w	r3, r3, #16
 8000f72:	6213      	str	r3, [r2, #32]

    // Configure TIM2
	TIM2->CR1 |= TIM_CR1_ARPE; //ARPE: Auto-reload preload enable
 8000f74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f82:	6013      	str	r3, [r2, #0]
	TIM2->SMCR |= (TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0); // Encoder mode 3
 8000f84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f8e:	f043 0303 	orr.w	r3, r3, #3
 8000f92:	6093      	str	r3, [r2, #8]
	TIM2->DIER |= TIM_DIER_UIE; //UIE: Update interrupt enable
 8000f94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f98:	68db      	ldr	r3, [r3, #12]
 8000f9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f9e:	f043 0301 	orr.w	r3, r3, #1
 8000fa2:	60d3      	str	r3, [r2, #12]

	TIM2->CCMR1 |= (1<<0);
 8000fa4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fa8:	699b      	ldr	r3, [r3, #24]
 8000faa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fae:	f043 0301 	orr.w	r3, r3, #1
 8000fb2:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= (1<<8);
 8000fb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fb8:	699b      	ldr	r3, [r3, #24]
 8000fba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fc2:	6193      	str	r3, [r2, #24]
	TIM2->CCER |= (1<<0);
 8000fc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fc8:	6a1b      	ldr	r3, [r3, #32]
 8000fca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fce:	f043 0301 	orr.w	r3, r3, #1
 8000fd2:	6213      	str	r3, [r2, #32]
	TIM2->CCER |= (1<<4);
 8000fd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fd8:	6a1b      	ldr	r3, [r3, #32]
 8000fda:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fde:	f043 0310 	orr.w	r3, r3, #16
 8000fe2:	6213      	str	r3, [r2, #32]

	TIM2->PSC = 7; //7+1 = 8
 8000fe4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fe8:	2207      	movs	r2, #7
 8000fea:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 0xFFFF; //65535
 8000fec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ff0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ff4:	62da      	str	r2, [r3, #44]	; 0x2c

    // Enable the TIM2 interrupt
    NVIC_EnableIRQ(TIM2_IRQn);
 8000ff6:	201c      	movs	r0, #28
 8000ff8:	f7ff fa26 	bl	8000448 <__NVIC_EnableIRQ>

    // Set priority for the TIM2 interrupt
    NVIC_SetPriority(TIM2_IRQn, 5); // Adjust priority as needed
 8000ffc:	2105      	movs	r1, #5
 8000ffe:	201c      	movs	r0, #28
 8001000:	f7ff fa40 	bl	8000484 <__NVIC_SetPriority>

    // Enable the TIM2 counter
    TIM2->CR1 |= TIM_CR1_CEN;
 8001004:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800100e:	f043 0301 	orr.w	r3, r3, #1
 8001012:	6013      	str	r3, [r2, #0]
}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40021000 	.word	0x40021000

0800101c <TIM16_additional_configuration>:

void TIM16_additional_configuration(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
	TIM16->DIER |= TIM_DIER_UIE; //UIE: Update interrupt enable
 8001020:	4b08      	ldr	r3, [pc, #32]	; (8001044 <TIM16_additional_configuration+0x28>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	4a07      	ldr	r2, [pc, #28]	; (8001044 <TIM16_additional_configuration+0x28>)
 8001026:	f043 0301 	orr.w	r3, r3, #1
 800102a:	60d3      	str	r3, [r2, #12]
	TIM16->CR1 |= TIM_CR1_CEN;
 800102c:	4b05      	ldr	r3, [pc, #20]	; (8001044 <TIM16_additional_configuration+0x28>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a04      	ldr	r2, [pc, #16]	; (8001044 <TIM16_additional_configuration+0x28>)
 8001032:	f043 0301 	orr.w	r3, r3, #1
 8001036:	6013      	str	r3, [r2, #0]
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	40014400 	.word	0x40014400

08001048 <TIM17_additional_configuration>:

void TIM17_additional_configuration(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
	TIM17->DIER |= TIM_DIER_UIE; //UIE: Update interrupt enable
 800104c:	4b08      	ldr	r3, [pc, #32]	; (8001070 <TIM17_additional_configuration+0x28>)
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	4a07      	ldr	r2, [pc, #28]	; (8001070 <TIM17_additional_configuration+0x28>)
 8001052:	f043 0301 	orr.w	r3, r3, #1
 8001056:	60d3      	str	r3, [r2, #12]
	TIM17->CR1 |= TIM_CR1_CEN;
 8001058:	4b05      	ldr	r3, [pc, #20]	; (8001070 <TIM17_additional_configuration+0x28>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a04      	ldr	r2, [pc, #16]	; (8001070 <TIM17_additional_configuration+0x28>)
 800105e:	f043 0301 	orr.w	r3, r3, #1
 8001062:	6013      	str	r3, [r2, #0]
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	40014800 	.word	0x40014800

08001074 <USART3_additional_configuration>:

void USART3_additional_configuration(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
	//DMA configuration for UART3
	RCC->AHBENR |= RCC_AHBENR_DMA1EN; // Enable the DMA1 clock
 8001078:	4b41      	ldr	r3, [pc, #260]	; (8001180 <USART3_additional_configuration+0x10c>)
 800107a:	695b      	ldr	r3, [r3, #20]
 800107c:	4a40      	ldr	r2, [pc, #256]	; (8001180 <USART3_additional_configuration+0x10c>)
 800107e:	f043 0301 	orr.w	r3, r3, #1
 8001082:	6153      	str	r3, [r2, #20]

	DMA1_Channel3->CCR &= ~DMA_CCR_EN;
 8001084:	4b3f      	ldr	r3, [pc, #252]	; (8001184 <USART3_additional_configuration+0x110>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a3e      	ldr	r2, [pc, #248]	; (8001184 <USART3_additional_configuration+0x110>)
 800108a:	f023 0301 	bic.w	r3, r3, #1
 800108e:	6013      	str	r3, [r2, #0]

	DMA1_Channel3->CCR |= DMA_CCR_MINC;
 8001090:	4b3c      	ldr	r3, [pc, #240]	; (8001184 <USART3_additional_configuration+0x110>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a3b      	ldr	r2, [pc, #236]	; (8001184 <USART3_additional_configuration+0x110>)
 8001096:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800109a:	6013      	str	r3, [r2, #0]
	DMA1_Channel3->CCR |= DMA_CCR_CIRC;
 800109c:	4b39      	ldr	r3, [pc, #228]	; (8001184 <USART3_additional_configuration+0x110>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a38      	ldr	r2, [pc, #224]	; (8001184 <USART3_additional_configuration+0x110>)
 80010a2:	f043 0320 	orr.w	r3, r3, #32
 80010a6:	6013      	str	r3, [r2, #0]
//		DMA1_Channel3->CCR |= DMA_CCR_TCIE;
	DMA1_Channel3->CCR &= ~DMA_CCR_TCIE;
 80010a8:	4b36      	ldr	r3, [pc, #216]	; (8001184 <USART3_additional_configuration+0x110>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a35      	ldr	r2, [pc, #212]	; (8001184 <USART3_additional_configuration+0x110>)
 80010ae:	f023 0302 	bic.w	r3, r3, #2
 80010b2:	6013      	str	r3, [r2, #0]
	DMA1_Channel3->CCR &= ~DMA_CCR_HTIE;
 80010b4:	4b33      	ldr	r3, [pc, #204]	; (8001184 <USART3_additional_configuration+0x110>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a32      	ldr	r2, [pc, #200]	; (8001184 <USART3_additional_configuration+0x110>)
 80010ba:	f023 0304 	bic.w	r3, r3, #4
 80010be:	6013      	str	r3, [r2, #0]
	DMA1_Channel3->CCR &= ~DMA_CCR_TEIE;
 80010c0:	4b30      	ldr	r3, [pc, #192]	; (8001184 <USART3_additional_configuration+0x110>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a2f      	ldr	r2, [pc, #188]	; (8001184 <USART3_additional_configuration+0x110>)
 80010c6:	f023 0308 	bic.w	r3, r3, #8
 80010ca:	6013      	str	r3, [r2, #0]

	DMA1_Channel3->CNDTR = ESPBUFFERSIZE;
 80010cc:	4b2d      	ldr	r3, [pc, #180]	; (8001184 <USART3_additional_configuration+0x110>)
 80010ce:	f240 12ff 	movw	r2, #511	; 0x1ff
 80010d2:	605a      	str	r2, [r3, #4]
	DMA1_Channel3->CPAR = (uint32_t)&(USART3->RDR);
 80010d4:	4b2b      	ldr	r3, [pc, #172]	; (8001184 <USART3_additional_configuration+0x110>)
 80010d6:	4a2c      	ldr	r2, [pc, #176]	; (8001188 <USART3_additional_configuration+0x114>)
 80010d8:	609a      	str	r2, [r3, #8]
	DMA1_Channel3->CMAR = (uint32_t)&rxBuffer[0];
 80010da:	4b2a      	ldr	r3, [pc, #168]	; (8001184 <USART3_additional_configuration+0x110>)
 80010dc:	4a2b      	ldr	r2, [pc, #172]	; (800118c <USART3_additional_configuration+0x118>)
 80010de:	60da      	str	r2, [r3, #12]

	USART3->CR3 &= ~USART_CR3_DMAR;
 80010e0:	4b2b      	ldr	r3, [pc, #172]	; (8001190 <USART3_additional_configuration+0x11c>)
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	4a2a      	ldr	r2, [pc, #168]	; (8001190 <USART3_additional_configuration+0x11c>)
 80010e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80010ea:	6093      	str	r3, [r2, #8]
	DMA1_Channel3->CCR &= ~DMA_CCR_EN;
 80010ec:	4b25      	ldr	r3, [pc, #148]	; (8001184 <USART3_additional_configuration+0x110>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a24      	ldr	r2, [pc, #144]	; (8001184 <USART3_additional_configuration+0x110>)
 80010f2:	f023 0301 	bic.w	r3, r3, #1
 80010f6:	6013      	str	r3, [r2, #0]

	DMA1_Channel2->CCR &= ~DMA_CCR_EN;
 80010f8:	4b26      	ldr	r3, [pc, #152]	; (8001194 <USART3_additional_configuration+0x120>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a25      	ldr	r2, [pc, #148]	; (8001194 <USART3_additional_configuration+0x120>)
 80010fe:	f023 0301 	bic.w	r3, r3, #1
 8001102:	6013      	str	r3, [r2, #0]

	DMA1_Channel2->CCR |= DMA_CCR_MINC;
 8001104:	4b23      	ldr	r3, [pc, #140]	; (8001194 <USART3_additional_configuration+0x120>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a22      	ldr	r2, [pc, #136]	; (8001194 <USART3_additional_configuration+0x120>)
 800110a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800110e:	6013      	str	r3, [r2, #0]
	DMA1_Channel2->CCR &= ~DMA_CCR_CIRC;
 8001110:	4b20      	ldr	r3, [pc, #128]	; (8001194 <USART3_additional_configuration+0x120>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a1f      	ldr	r2, [pc, #124]	; (8001194 <USART3_additional_configuration+0x120>)
 8001116:	f023 0320 	bic.w	r3, r3, #32
 800111a:	6013      	str	r3, [r2, #0]
	DMA1_Channel2->CCR |= DMA_CCR_DIR;
 800111c:	4b1d      	ldr	r3, [pc, #116]	; (8001194 <USART3_additional_configuration+0x120>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a1c      	ldr	r2, [pc, #112]	; (8001194 <USART3_additional_configuration+0x120>)
 8001122:	f043 0310 	orr.w	r3, r3, #16
 8001126:	6013      	str	r3, [r2, #0]
	DMA1_Channel2->CCR |= DMA_CCR_TCIE;
 8001128:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <USART3_additional_configuration+0x120>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a19      	ldr	r2, [pc, #100]	; (8001194 <USART3_additional_configuration+0x120>)
 800112e:	f043 0302 	orr.w	r3, r3, #2
 8001132:	6013      	str	r3, [r2, #0]
	DMA1_Channel2->CCR &= ~DMA_CCR_HTIE;
 8001134:	4b17      	ldr	r3, [pc, #92]	; (8001194 <USART3_additional_configuration+0x120>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a16      	ldr	r2, [pc, #88]	; (8001194 <USART3_additional_configuration+0x120>)
 800113a:	f023 0304 	bic.w	r3, r3, #4
 800113e:	6013      	str	r3, [r2, #0]
	DMA1_Channel2->CCR &= ~DMA_CCR_TEIE;
 8001140:	4b14      	ldr	r3, [pc, #80]	; (8001194 <USART3_additional_configuration+0x120>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a13      	ldr	r2, [pc, #76]	; (8001194 <USART3_additional_configuration+0x120>)
 8001146:	f023 0308 	bic.w	r3, r3, #8
 800114a:	6013      	str	r3, [r2, #0]

	DMA1_Channel2->CNDTR = 0;
 800114c:	4b11      	ldr	r3, [pc, #68]	; (8001194 <USART3_additional_configuration+0x120>)
 800114e:	2200      	movs	r2, #0
 8001150:	605a      	str	r2, [r3, #4]
	DMA1_Channel2->CPAR = (uint32_t)&(USART3->TDR);
 8001152:	4b10      	ldr	r3, [pc, #64]	; (8001194 <USART3_additional_configuration+0x120>)
 8001154:	4a10      	ldr	r2, [pc, #64]	; (8001198 <USART3_additional_configuration+0x124>)
 8001156:	609a      	str	r2, [r3, #8]
	DMA1_Channel2->CMAR = (uint32_t)&txBuffer[0];
 8001158:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <USART3_additional_configuration+0x120>)
 800115a:	4a10      	ldr	r2, [pc, #64]	; (800119c <USART3_additional_configuration+0x128>)
 800115c:	60da      	str	r2, [r3, #12]

	USART3->CR3 &= ~USART_CR3_DMAT;
 800115e:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <USART3_additional_configuration+0x11c>)
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	4a0b      	ldr	r2, [pc, #44]	; (8001190 <USART3_additional_configuration+0x11c>)
 8001164:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001168:	6093      	str	r3, [r2, #8]
	DMA1_Channel2->CCR &= ~DMA_CCR_EN;
 800116a:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <USART3_additional_configuration+0x120>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a09      	ldr	r2, [pc, #36]	; (8001194 <USART3_additional_configuration+0x120>)
 8001170:	f023 0301 	bic.w	r3, r3, #1
 8001174:	6013      	str	r3, [r2, #0]
}
 8001176:	bf00      	nop
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	40021000 	.word	0x40021000
 8001184:	40020030 	.word	0x40020030
 8001188:	40004824 	.word	0x40004824
 800118c:	20000c10 	.word	0x20000c10
 8001190:	40004800 	.word	0x40004800
 8001194:	4002001c 	.word	0x4002001c
 8001198:	40004828 	.word	0x40004828
 800119c:	20000a10 	.word	0x20000a10

080011a0 <timerForSendDataCallback>:

void timerForSendDataCallback(TimerHandle_t xTimer)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
	xEventGroupSetBits(timerFdsEventGroup, 0x1);
 80011a8:	4b04      	ldr	r3, [pc, #16]	; (80011bc <timerForSendDataCallback+0x1c>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2101      	movs	r1, #1
 80011ae:	4618      	mov	r0, r3
 80011b0:	f005 f888 	bl	80062c4 <xEventGroupSetBits>
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000e18 	.word	0x20000e18

080011c0 <psMeasure>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_psMeasure */
void psMeasure(void const * argument)
{
 80011c0:	b590      	push	{r4, r7, lr}
 80011c2:	b08b      	sub	sp, #44	; 0x2c
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	char measureResult[30];
	memset(measureResult, ' ', sizeof(measureResult));
 80011c8:	f107 0308 	add.w	r3, r7, #8
 80011cc:	221e      	movs	r2, #30
 80011ce:	2120      	movs	r1, #32
 80011d0:	4618      	mov	r0, r3
 80011d2:	f007 fdbb 	bl	8008d4c <memset>
  /* Infinite loop */
  for(;;)
  {
    osDelay(8);
 80011d6:	2008      	movs	r0, #8
 80011d8:	f004 ffea 	bl	80061b0 <osDelay>

    for(uint8_t i = 0; i < (sizeof(batteryVoltage)/sizeof(batteryVoltage[0])); i++) {
 80011dc:	2300      	movs	r3, #0
 80011de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80011e2:	e010      	b.n	8001206 <psMeasure+0x46>
    	avrBatVoltage += batteryVoltage[i];
 80011e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011e8:	4a4a      	ldr	r2, [pc, #296]	; (8001314 <psMeasure+0x154>)
 80011ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	4b49      	ldr	r3, [pc, #292]	; (8001318 <psMeasure+0x158>)
 80011f2:	881b      	ldrh	r3, [r3, #0]
 80011f4:	4413      	add	r3, r2
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	4b47      	ldr	r3, [pc, #284]	; (8001318 <psMeasure+0x158>)
 80011fa:	801a      	strh	r2, [r3, #0]
    for(uint8_t i = 0; i < (sizeof(batteryVoltage)/sizeof(batteryVoltage[0])); i++) {
 80011fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001200:	3301      	adds	r3, #1
 8001202:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001206:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800120a:	2b09      	cmp	r3, #9
 800120c:	d9ea      	bls.n	80011e4 <psMeasure+0x24>
    }
    avrBatVoltage = avrBatVoltage / (sizeof(batteryVoltage)/sizeof(batteryVoltage[0]));
 800120e:	4b42      	ldr	r3, [pc, #264]	; (8001318 <psMeasure+0x158>)
 8001210:	881b      	ldrh	r3, [r3, #0]
 8001212:	4a42      	ldr	r2, [pc, #264]	; (800131c <psMeasure+0x15c>)
 8001214:	fba2 2303 	umull	r2, r3, r2, r3
 8001218:	08db      	lsrs	r3, r3, #3
 800121a:	b29a      	uxth	r2, r3
 800121c:	4b3e      	ldr	r3, [pc, #248]	; (8001318 <psMeasure+0x158>)
 800121e:	801a      	strh	r2, [r3, #0]
    if(avrBatVoltage > BATMAXV) {
 8001220:	4b3d      	ldr	r3, [pc, #244]	; (8001318 <psMeasure+0x158>)
 8001222:	881b      	ldrh	r3, [r3, #0]
 8001224:	f640 0298 	movw	r2, #2200	; 0x898
 8001228:	4293      	cmp	r3, r2
 800122a:	d92a      	bls.n	8001282 <psMeasure+0xc2>
    	memset(measureResult, ' ', sizeof(measureResult));
 800122c:	f107 0308 	add.w	r3, r7, #8
 8001230:	221e      	movs	r2, #30
 8001232:	2120      	movs	r1, #32
 8001234:	4618      	mov	r0, r3
 8001236:	f007 fd89 	bl	8008d4c <memset>
    	strcpy(measureResult, "Voltage > MAX");
 800123a:	f107 0308 	add.w	r3, r7, #8
 800123e:	4a38      	ldr	r2, [pc, #224]	; (8001320 <psMeasure+0x160>)
 8001240:	461c      	mov	r4, r3
 8001242:	4613      	mov	r3, r2
 8001244:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001246:	c407      	stmia	r4!, {r0, r1, r2}
 8001248:	8023      	strh	r3, [r4, #0]
    	xEventGroupClearBits(pc13EventGroup, 0xFFFFFF);
 800124a:	4b36      	ldr	r3, [pc, #216]	; (8001324 <psMeasure+0x164>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8001252:	4618      	mov	r0, r3
 8001254:	f004 ffda 	bl	800620c <xEventGroupClearBits>
    	xEventGroupSetBits(pc13EventGroup, OVERVOLTAGEONLED);
 8001258:	4b32      	ldr	r3, [pc, #200]	; (8001324 <psMeasure+0x164>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2101      	movs	r1, #1
 800125e:	4618      	mov	r0, r3
 8001260:	f005 f830 	bl	80062c4 <xEventGroupSetBits>
    	xEventGroupClearBits(pc14EventGroup, 0xFFFFFF);
 8001264:	4b30      	ldr	r3, [pc, #192]	; (8001328 <psMeasure+0x168>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800126c:	4618      	mov	r0, r3
 800126e:	f004 ffcd 	bl	800620c <xEventGroupClearBits>
    	xEventGroupSetBits(pc14EventGroup, OVERVOLTAGEONLED);
 8001272:	4b2d      	ldr	r3, [pc, #180]	; (8001328 <psMeasure+0x168>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2101      	movs	r1, #1
 8001278:	4618      	mov	r0, r3
 800127a:	f005 f823 	bl	80062c4 <xEventGroupSetBits>
    	__asm__ volatile("NOP");
 800127e:	bf00      	nop
 8001280:	e7a9      	b.n	80011d6 <psMeasure+0x16>
    } else if(avrBatVoltage < BATMINV) {
 8001282:	4b25      	ldr	r3, [pc, #148]	; (8001318 <psMeasure+0x158>)
 8001284:	881b      	ldrh	r3, [r3, #0]
 8001286:	f640 023d 	movw	r2, #2109	; 0x83d
 800128a:	4293      	cmp	r3, r2
 800128c:	d82a      	bhi.n	80012e4 <psMeasure+0x124>
    	memset(measureResult, ' ', sizeof(measureResult));
 800128e:	f107 0308 	add.w	r3, r7, #8
 8001292:	221e      	movs	r2, #30
 8001294:	2120      	movs	r1, #32
 8001296:	4618      	mov	r0, r3
 8001298:	f007 fd58 	bl	8008d4c <memset>
    	strcpy(measureResult, "Voltage < MIN");
 800129c:	f107 0308 	add.w	r3, r7, #8
 80012a0:	4a22      	ldr	r2, [pc, #136]	; (800132c <psMeasure+0x16c>)
 80012a2:	461c      	mov	r4, r3
 80012a4:	4613      	mov	r3, r2
 80012a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012a8:	c407      	stmia	r4!, {r0, r1, r2}
 80012aa:	8023      	strh	r3, [r4, #0]
    	xEventGroupClearBits(pc13EventGroup, 0xFFFFFF);
 80012ac:	4b1d      	ldr	r3, [pc, #116]	; (8001324 <psMeasure+0x164>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80012b4:	4618      	mov	r0, r3
 80012b6:	f004 ffa9 	bl	800620c <xEventGroupClearBits>
    	xEventGroupSetBits(pc13EventGroup, UNDERVOLTAGEONLED);
 80012ba:	4b1a      	ldr	r3, [pc, #104]	; (8001324 <psMeasure+0x164>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2102      	movs	r1, #2
 80012c0:	4618      	mov	r0, r3
 80012c2:	f004 ffff 	bl	80062c4 <xEventGroupSetBits>
    	xEventGroupClearBits(pc14EventGroup, 0xFFFFFF);
 80012c6:	4b18      	ldr	r3, [pc, #96]	; (8001328 <psMeasure+0x168>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80012ce:	4618      	mov	r0, r3
 80012d0:	f004 ff9c 	bl	800620c <xEventGroupClearBits>
    	xEventGroupSetBits(pc14EventGroup, UNDERVOLTAGEONLED);
 80012d4:	4b14      	ldr	r3, [pc, #80]	; (8001328 <psMeasure+0x168>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2102      	movs	r1, #2
 80012da:	4618      	mov	r0, r3
 80012dc:	f004 fff2 	bl	80062c4 <xEventGroupSetBits>
    	__asm__ volatile("NOP");
 80012e0:	bf00      	nop
 80012e2:	e778      	b.n	80011d6 <psMeasure+0x16>
    } else {
    	memset(measureResult, ' ', sizeof(measureResult));
 80012e4:	f107 0308 	add.w	r3, r7, #8
 80012e8:	221e      	movs	r2, #30
 80012ea:	2120      	movs	r1, #32
 80012ec:	4618      	mov	r0, r3
 80012ee:	f007 fd2d 	bl	8008d4c <memset>
    	xEventGroupClearBits(pc13EventGroup, 0xFFFFFF);
 80012f2:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <psMeasure+0x164>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80012fa:	4618      	mov	r0, r3
 80012fc:	f004 ff86 	bl	800620c <xEventGroupClearBits>
    	xEventGroupClearBits(pc14EventGroup, 0xFFFFFF);
 8001300:	4b09      	ldr	r3, [pc, #36]	; (8001328 <psMeasure+0x168>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8001308:	4618      	mov	r0, r3
 800130a:	f004 ff7f 	bl	800620c <xEventGroupClearBits>
    	__asm__ volatile("NOP");
 800130e:	bf00      	nop
    osDelay(8);
 8001310:	e761      	b.n	80011d6 <psMeasure+0x16>
 8001312:	bf00      	nop
 8001314:	200009a8 	.word	0x200009a8
 8001318:	200009bc 	.word	0x200009bc
 800131c:	cccccccd 	.word	0xcccccccd
 8001320:	080097d0 	.word	0x080097d0
 8001324:	200009c0 	.word	0x200009c0
 8001328:	200009c4 	.word	0x200009c4
 800132c:	080097e0 	.word	0x080097e0

08001330 <pc13LedCntrl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pc13LedCntrl */
void pc13LedCntrl(void const * argument)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN pc13LedCntrl */
	EventBits_t eventBits;
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001338:	2001      	movs	r0, #1
 800133a:	f004 ff39 	bl	80061b0 <osDelay>
    eventBits = xEventGroupGetBits(pc13EventGroup);
 800133e:	4b18      	ldr	r3, [pc, #96]	; (80013a0 <pc13LedCntrl+0x70>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2100      	movs	r1, #0
 8001344:	4618      	mov	r0, r3
 8001346:	f004 ff61 	bl	800620c <xEventGroupClearBits>
 800134a:	60f8      	str	r0, [r7, #12]
    switch (eventBits) {
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d003      	beq.n	800135a <pc13LedCntrl+0x2a>
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	2b02      	cmp	r3, #2
 8001356:	d00b      	beq.n	8001370 <pc13LedCntrl+0x40>
 8001358:	e015      	b.n	8001386 <pc13LedCntrl+0x56>
		case OVERVOLTAGEONLED:
			osDelay(100);
 800135a:	2064      	movs	r0, #100	; 0x64
 800135c:	f004 ff28 	bl	80061b0 <osDelay>
			GPIOC->ODR ^= GPIO_ODR_13;
 8001360:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <pc13LedCntrl+0x74>)
 8001362:	695b      	ldr	r3, [r3, #20]
 8001364:	4a0f      	ldr	r2, [pc, #60]	; (80013a4 <pc13LedCntrl+0x74>)
 8001366:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800136a:	6153      	str	r3, [r2, #20]
			__asm__ volatile("NOP");
 800136c:	bf00      	nop
			break;
 800136e:	e015      	b.n	800139c <pc13LedCntrl+0x6c>
		case UNDERVOLTAGEONLED:
			osDelay(200);
 8001370:	20c8      	movs	r0, #200	; 0xc8
 8001372:	f004 ff1d 	bl	80061b0 <osDelay>
			GPIOC->ODR ^= GPIO_ODR_13;
 8001376:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <pc13LedCntrl+0x74>)
 8001378:	695b      	ldr	r3, [r3, #20]
 800137a:	4a0a      	ldr	r2, [pc, #40]	; (80013a4 <pc13LedCntrl+0x74>)
 800137c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001380:	6153      	str	r3, [r2, #20]
			__asm__ volatile("NOP");
 8001382:	bf00      	nop
			break;
 8001384:	e00a      	b.n	800139c <pc13LedCntrl+0x6c>
		default:
			GPIOC->ODR &= ~GPIO_ODR_13;
 8001386:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <pc13LedCntrl+0x74>)
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	4a06      	ldr	r2, [pc, #24]	; (80013a4 <pc13LedCntrl+0x74>)
 800138c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001390:	6153      	str	r3, [r2, #20]
			osDelay(12);
 8001392:	200c      	movs	r0, #12
 8001394:	f004 ff0c 	bl	80061b0 <osDelay>
			__asm__ volatile("NOP");
 8001398:	bf00      	nop
			break;
 800139a:	bf00      	nop
    osDelay(1);
 800139c:	e7cc      	b.n	8001338 <pc13LedCntrl+0x8>
 800139e:	bf00      	nop
 80013a0:	200009c0 	.word	0x200009c0
 80013a4:	48000800 	.word	0x48000800

080013a8 <pc14LedCntrl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pc14LedCntrl */
void pc14LedCntrl(void const * argument)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN pc14LedCntrl */
	EventBits_t eventBits;
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80013b0:	2001      	movs	r0, #1
 80013b2:	f004 fefd 	bl	80061b0 <osDelay>
    eventBits = xEventGroupGetBits(pc14EventGroup);
 80013b6:	4b18      	ldr	r3, [pc, #96]	; (8001418 <pc14LedCntrl+0x70>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2100      	movs	r1, #0
 80013bc:	4618      	mov	r0, r3
 80013be:	f004 ff25 	bl	800620c <xEventGroupClearBits>
 80013c2:	60f8      	str	r0, [r7, #12]
    switch (eventBits) {
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d003      	beq.n	80013d2 <pc14LedCntrl+0x2a>
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d00b      	beq.n	80013e8 <pc14LedCntrl+0x40>
 80013d0:	e015      	b.n	80013fe <pc14LedCntrl+0x56>
		case OVERVOLTAGEONLED:
			osDelay(100);
 80013d2:	2064      	movs	r0, #100	; 0x64
 80013d4:	f004 feec 	bl	80061b0 <osDelay>
			GPIOC->ODR ^= GPIO_ODR_14;
 80013d8:	4b10      	ldr	r3, [pc, #64]	; (800141c <pc14LedCntrl+0x74>)
 80013da:	695b      	ldr	r3, [r3, #20]
 80013dc:	4a0f      	ldr	r2, [pc, #60]	; (800141c <pc14LedCntrl+0x74>)
 80013de:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 80013e2:	6153      	str	r3, [r2, #20]
			__asm__ volatile("NOP");
 80013e4:	bf00      	nop
			break;
 80013e6:	e015      	b.n	8001414 <pc14LedCntrl+0x6c>
		case UNDERVOLTAGEONLED:
			osDelay(200);
 80013e8:	20c8      	movs	r0, #200	; 0xc8
 80013ea:	f004 fee1 	bl	80061b0 <osDelay>
			GPIOC->ODR ^= GPIO_ODR_14;
 80013ee:	4b0b      	ldr	r3, [pc, #44]	; (800141c <pc14LedCntrl+0x74>)
 80013f0:	695b      	ldr	r3, [r3, #20]
 80013f2:	4a0a      	ldr	r2, [pc, #40]	; (800141c <pc14LedCntrl+0x74>)
 80013f4:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 80013f8:	6153      	str	r3, [r2, #20]
			__asm__ volatile("NOP");
 80013fa:	bf00      	nop
			break;
 80013fc:	e00a      	b.n	8001414 <pc14LedCntrl+0x6c>
		default:
			GPIOC->ODR &= ~GPIO_ODR_14;
 80013fe:	4b07      	ldr	r3, [pc, #28]	; (800141c <pc14LedCntrl+0x74>)
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	4a06      	ldr	r2, [pc, #24]	; (800141c <pc14LedCntrl+0x74>)
 8001404:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001408:	6153      	str	r3, [r2, #20]
			osDelay(12);
 800140a:	200c      	movs	r0, #12
 800140c:	f004 fed0 	bl	80061b0 <osDelay>
			__asm__ volatile("NOP");
 8001410:	bf00      	nop
			break;
 8001412:	bf00      	nop
    osDelay(1);
 8001414:	e7cc      	b.n	80013b0 <pc14LedCntrl+0x8>
 8001416:	bf00      	nop
 8001418:	200009c4 	.word	0x200009c4
 800141c:	48000800 	.word	0x48000800

08001420 <espCommunication>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_espCommunication */
void espCommunication(void const * argument)
{
 8001420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001424:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8001428:	af04      	add	r7, sp, #16
 800142a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800142e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001432:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN espCommunication */
	vTaskDelay( pdMS_TO_TICKS( 100 ) );
 8001434:	2064      	movs	r0, #100	; 0x64
 8001436:	f005 fef1 	bl	800721c <vTaskDelay>
	taskENTER_CRITICAL();
 800143a:	f007 f96b 	bl	8008714 <vPortEnterCritical>
	  GPIOB->ODR |= (1<<1);
 800143e:	4bad      	ldr	r3, [pc, #692]	; (80016f4 <espCommunication+0x2d4>)
 8001440:	695b      	ldr	r3, [r3, #20]
 8001442:	4aac      	ldr	r2, [pc, #688]	; (80016f4 <espCommunication+0x2d4>)
 8001444:	f043 0302 	orr.w	r3, r3, #2
 8001448:	6153      	str	r3, [r2, #20]
	  GPIOB->ODR |= (1<<2);
 800144a:	4baa      	ldr	r3, [pc, #680]	; (80016f4 <espCommunication+0x2d4>)
 800144c:	695b      	ldr	r3, [r3, #20]
 800144e:	4aa9      	ldr	r2, [pc, #676]	; (80016f4 <espCommunication+0x2d4>)
 8001450:	f043 0304 	orr.w	r3, r3, #4
 8001454:	6153      	str	r3, [r2, #20]
	  txBuffer[0] = 'A';
 8001456:	4ba8      	ldr	r3, [pc, #672]	; (80016f8 <espCommunication+0x2d8>)
 8001458:	2241      	movs	r2, #65	; 0x41
 800145a:	701a      	strb	r2, [r3, #0]
	  txBuffer[1] = 'T';
 800145c:	4ba6      	ldr	r3, [pc, #664]	; (80016f8 <espCommunication+0x2d8>)
 800145e:	2254      	movs	r2, #84	; 0x54
 8001460:	705a      	strb	r2, [r3, #1]
	  txBuffer[2] = '\r';
 8001462:	4ba5      	ldr	r3, [pc, #660]	; (80016f8 <espCommunication+0x2d8>)
 8001464:	220d      	movs	r2, #13
 8001466:	709a      	strb	r2, [r3, #2]
	  txBuffer[3] = '\n';
 8001468:	4ba3      	ldr	r3, [pc, #652]	; (80016f8 <espCommunication+0x2d8>)
 800146a:	220a      	movs	r2, #10
 800146c:	70da      	strb	r2, [r3, #3]
	  char controlAnsw[] = "AT\r\r\n\r\nOK\r\n";
 800146e:	4aa3      	ldr	r2, [pc, #652]	; (80016fc <espCommunication+0x2dc>)
 8001470:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001474:	ca07      	ldmia	r2, {r0, r1, r2}
 8001476:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	  while(strcmp(rxBuffer, controlAnsw) != 0) {
 800147a:	e023      	b.n	80014c4 <espCommunication+0xa4>
		  for(uint16_t i = 0; i < sizeof(rxBuffer); i++) {
 800147c:	2300      	movs	r3, #0
 800147e:	f8a7 3276 	strh.w	r3, [r7, #630]	; 0x276
 8001482:	e009      	b.n	8001498 <espCommunication+0x78>
			  rxBuffer[i] = 0;
 8001484:	f8b7 3276 	ldrh.w	r3, [r7, #630]	; 0x276
 8001488:	4a9d      	ldr	r2, [pc, #628]	; (8001700 <espCommunication+0x2e0>)
 800148a:	2100      	movs	r1, #0
 800148c:	54d1      	strb	r1, [r2, r3]
		  for(uint16_t i = 0; i < sizeof(rxBuffer); i++) {
 800148e:	f8b7 3276 	ldrh.w	r3, [r7, #630]	; 0x276
 8001492:	3301      	adds	r3, #1
 8001494:	f8a7 3276 	strh.w	r3, [r7, #630]	; 0x276
 8001498:	f8b7 3276 	ldrh.w	r3, [r7, #630]	; 0x276
 800149c:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 80014a0:	d9f0      	bls.n	8001484 <espCommunication+0x64>
		  }
		  HAL_UART_Transmit(&huart3, (uint8_t*)txBuffer, 4, 250);
 80014a2:	23fa      	movs	r3, #250	; 0xfa
 80014a4:	2204      	movs	r2, #4
 80014a6:	4994      	ldr	r1, [pc, #592]	; (80016f8 <espCommunication+0x2d8>)
 80014a8:	4896      	ldr	r0, [pc, #600]	; (8001704 <espCommunication+0x2e4>)
 80014aa:	f004 f977 	bl	800579c <HAL_UART_Transmit>
		  HAL_UART_Receive(&huart3, (uint8_t*)rxBuffer, sizeof(rxBuffer), 250);
 80014ae:	23fa      	movs	r3, #250	; 0xfa
 80014b0:	f240 12ff 	movw	r2, #511	; 0x1ff
 80014b4:	4992      	ldr	r1, [pc, #584]	; (8001700 <espCommunication+0x2e0>)
 80014b6:	4893      	ldr	r0, [pc, #588]	; (8001704 <espCommunication+0x2e4>)
 80014b8:	f004 f9fa 	bl	80058b0 <HAL_UART_Receive>
		  vTaskDelay( pdMS_TO_TICKS( 100 ) );
 80014bc:	2064      	movs	r0, #100	; 0x64
 80014be:	f005 fead 	bl	800721c <vTaskDelay>
		  __asm__ volatile("NOP");
 80014c2:	bf00      	nop
	  while(strcmp(rxBuffer, controlAnsw) != 0) {
 80014c4:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80014c8:	4619      	mov	r1, r3
 80014ca:	488d      	ldr	r0, [pc, #564]	; (8001700 <espCommunication+0x2e0>)
 80014cc:	f7fe fe80 	bl	80001d0 <strcmp>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1d2      	bne.n	800147c <espCommunication+0x5c>
	  }

	  sendATCommand(&huart3, "AT+CWMODE_CUR=1\r\n", 17 , 250);
 80014d6:	23fa      	movs	r3, #250	; 0xfa
 80014d8:	2211      	movs	r2, #17
 80014da:	498b      	ldr	r1, [pc, #556]	; (8001708 <espCommunication+0x2e8>)
 80014dc:	4889      	ldr	r0, [pc, #548]	; (8001704 <espCommunication+0x2e4>)
 80014de:	f7fe fedf 	bl	80002a0 <sendATCommand>
	  receiveAnswer(&huart3, rxBuffer, sizeof(rxBuffer), 250);
 80014e2:	23fa      	movs	r3, #250	; 0xfa
 80014e4:	f240 12ff 	movw	r2, #511	; 0x1ff
 80014e8:	4985      	ldr	r1, [pc, #532]	; (8001700 <espCommunication+0x2e0>)
 80014ea:	4886      	ldr	r0, [pc, #536]	; (8001704 <espCommunication+0x2e4>)
 80014ec:	f7fe fefc 	bl	80002e8 <receiveAnswer>

	  memset(txBuffer, '\0', sizeof(txBuffer));
 80014f0:	f240 12ff 	movw	r2, #511	; 0x1ff
 80014f4:	2100      	movs	r1, #0
 80014f6:	4880      	ldr	r0, [pc, #512]	; (80016f8 <espCommunication+0x2d8>)
 80014f8:	f007 fc28 	bl	8008d4c <memset>
	  strcpy(txBuffer, "AT+CWJAP_CUR=\"RedmiGiGidra\",\"DimaDimaDimon\"\r\n");
 80014fc:	4a7e      	ldr	r2, [pc, #504]	; (80016f8 <espCommunication+0x2d8>)
 80014fe:	4b83      	ldr	r3, [pc, #524]	; (800170c <espCommunication+0x2ec>)
 8001500:	4614      	mov	r4, r2
 8001502:	461d      	mov	r5, r3
 8001504:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001506:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001508:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800150a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800150c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001510:	c407      	stmia	r4!, {r0, r1, r2}
 8001512:	8023      	strh	r3, [r4, #0]
	  sendATCommand(&huart3, txBuffer, sizeof(txBuffer), 1000);
 8001514:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001518:	f240 12ff 	movw	r2, #511	; 0x1ff
 800151c:	4976      	ldr	r1, [pc, #472]	; (80016f8 <espCommunication+0x2d8>)
 800151e:	4879      	ldr	r0, [pc, #484]	; (8001704 <espCommunication+0x2e4>)
 8001520:	f7fe febe 	bl	80002a0 <sendATCommand>
	  receiveAnswer(&huart3, rxBuffer, sizeof(rxBuffer), 10000);
 8001524:	f242 7310 	movw	r3, #10000	; 0x2710
 8001528:	f240 12ff 	movw	r2, #511	; 0x1ff
 800152c:	4974      	ldr	r1, [pc, #464]	; (8001700 <espCommunication+0x2e0>)
 800152e:	4875      	ldr	r0, [pc, #468]	; (8001704 <espCommunication+0x2e4>)
 8001530:	f7fe feda 	bl	80002e8 <receiveAnswer>

	  taskEXIT_CRITICAL();
 8001534:	f007 f91e 	bl	8008774 <vPortExitCritical>

	  memset(rxBuffer, '\0', sizeof(rxBuffer));
 8001538:	f240 12ff 	movw	r2, #511	; 0x1ff
 800153c:	2100      	movs	r1, #0
 800153e:	4870      	ldr	r0, [pc, #448]	; (8001700 <espCommunication+0x2e0>)
 8001540:	f007 fc04 	bl	8008d4c <memset>
	  USART3->CR3 |= USART_CR3_DMAR;
 8001544:	4b72      	ldr	r3, [pc, #456]	; (8001710 <espCommunication+0x2f0>)
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	4a71      	ldr	r2, [pc, #452]	; (8001710 <espCommunication+0x2f0>)
 800154a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800154e:	6093      	str	r3, [r2, #8]
	  DMA1_Channel3->CCR |= DMA_CCR_EN; //Starting continuous DMA on RX
 8001550:	4b70      	ldr	r3, [pc, #448]	; (8001714 <espCommunication+0x2f4>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a6f      	ldr	r2, [pc, #444]	; (8001714 <espCommunication+0x2f4>)
 8001556:	f043 0301 	orr.w	r3, r3, #1
 800155a:	6013      	str	r3, [r2, #0]

	  vTaskDelay( pdMS_TO_TICKS( 2000 ) );
 800155c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001560:	f005 fe5c 	bl	800721c <vTaskDelay>

	  memset(txBuffer, '\0', sizeof(txBuffer));
 8001564:	f240 12ff 	movw	r2, #511	; 0x1ff
 8001568:	2100      	movs	r1, #0
 800156a:	4863      	ldr	r0, [pc, #396]	; (80016f8 <espCommunication+0x2d8>)
 800156c:	f007 fbee 	bl	8008d4c <memset>
	  strcpy(txBuffer, "AT+CIPCLOSE\r\n");
 8001570:	4a61      	ldr	r2, [pc, #388]	; (80016f8 <espCommunication+0x2d8>)
 8001572:	4b69      	ldr	r3, [pc, #420]	; (8001718 <espCommunication+0x2f8>)
 8001574:	4614      	mov	r4, r2
 8001576:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001578:	c407      	stmia	r4!, {r0, r1, r2}
 800157a:	8023      	strh	r3, [r4, #0]
	  sendATCommand(&huart3, txBuffer, sizeof(txBuffer), 250);
 800157c:	23fa      	movs	r3, #250	; 0xfa
 800157e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8001582:	495d      	ldr	r1, [pc, #372]	; (80016f8 <espCommunication+0x2d8>)
 8001584:	485f      	ldr	r0, [pc, #380]	; (8001704 <espCommunication+0x2e4>)
 8001586:	f7fe fe8b 	bl	80002a0 <sendATCommand>
	  vTaskDelay( pdMS_TO_TICKS( 250 ) );
 800158a:	20fa      	movs	r0, #250	; 0xfa
 800158c:	f005 fe46 	bl	800721c <vTaskDelay>

	  memset(txBuffer, '\0', sizeof(txBuffer));
 8001590:	f240 12ff 	movw	r2, #511	; 0x1ff
 8001594:	2100      	movs	r1, #0
 8001596:	4858      	ldr	r0, [pc, #352]	; (80016f8 <espCommunication+0x2d8>)
 8001598:	f007 fbd8 	bl	8008d4c <memset>
	  strcpy(txBuffer, "AT+CIPSTART=\"TCP\",\"192.168.137.1\",8080\r\n");
 800159c:	4a56      	ldr	r2, [pc, #344]	; (80016f8 <espCommunication+0x2d8>)
 800159e:	4b5f      	ldr	r3, [pc, #380]	; (800171c <espCommunication+0x2fc>)
 80015a0:	4614      	mov	r4, r2
 80015a2:	461d      	mov	r5, r3
 80015a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015b0:	c403      	stmia	r4!, {r0, r1}
 80015b2:	7022      	strb	r2, [r4, #0]
	  sendATCommand(&huart3, txBuffer, sizeof(txBuffer), 250);
 80015b4:	23fa      	movs	r3, #250	; 0xfa
 80015b6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80015ba:	494f      	ldr	r1, [pc, #316]	; (80016f8 <espCommunication+0x2d8>)
 80015bc:	4851      	ldr	r0, [pc, #324]	; (8001704 <espCommunication+0x2e4>)
 80015be:	f7fe fe6f 	bl	80002a0 <sendATCommand>
	  vTaskDelay( pdMS_TO_TICKS( 600 ) );
 80015c2:	f44f 7016 	mov.w	r0, #600	; 0x258
 80015c6:	f005 fe29 	bl	800721c <vTaskDelay>

	  memset(txBuffer, '\0', sizeof(txBuffer));
 80015ca:	f240 12ff 	movw	r2, #511	; 0x1ff
 80015ce:	2100      	movs	r1, #0
 80015d0:	4849      	ldr	r0, [pc, #292]	; (80016f8 <espCommunication+0x2d8>)
 80015d2:	f007 fbbb 	bl	8008d4c <memset>
		// Create the entire GET request string
		sprintf(txBuffer, "GET /robot HTTP/1.1\r\n"
 80015d6:	4952      	ldr	r1, [pc, #328]	; (8001720 <espCommunication+0x300>)
 80015d8:	4847      	ldr	r0, [pc, #284]	; (80016f8 <espCommunication+0x2d8>)
 80015da:	f007 fb97 	bl	8008d0c <siprintf>
						  "Host: 192.168.137.1\r\n");
		int getRequestLength = strlen(txBuffer);
 80015de:	4846      	ldr	r0, [pc, #280]	; (80016f8 <espCommunication+0x2d8>)
 80015e0:	f7fe fe00 	bl	80001e4 <strlen>
 80015e4:	4603      	mov	r3, r0
 80015e6:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
  	  uint8_t char_number_get = 0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	f887 3275 	strb.w	r3, [r7, #629]	; 0x275
  	  int temp_get = getRequestLength;
 80015f0:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80015f4:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
  	  while(temp_get != 0){
 80015f8:	e00e      	b.n	8001618 <espCommunication+0x1f8>
  		  temp_get = temp_get / 10;
 80015fa:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 80015fe:	4a49      	ldr	r2, [pc, #292]	; (8001724 <espCommunication+0x304>)
 8001600:	fb82 1203 	smull	r1, r2, r2, r3
 8001604:	1092      	asrs	r2, r2, #2
 8001606:	17db      	asrs	r3, r3, #31
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
  		  char_number_get++;
 800160e:	f897 3275 	ldrb.w	r3, [r7, #629]	; 0x275
 8001612:	3301      	adds	r3, #1
 8001614:	f887 3275 	strb.w	r3, [r7, #629]	; 0x275
  	  while(temp_get != 0){
 8001618:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 800161c:	2b00      	cmp	r3, #0
 800161e:	d1ec      	bne.n	80015fa <espCommunication+0x1da>
  	  }
  	  char pDataBuf[13+char_number_get];
 8001620:	f897 3275 	ldrb.w	r3, [r7, #629]	; 0x275
 8001624:	f103 040d 	add.w	r4, r3, #13
 8001628:	1e63      	subs	r3, r4, #1
 800162a:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 800162e:	4622      	mov	r2, r4
 8001630:	2300      	movs	r3, #0
 8001632:	60ba      	str	r2, [r7, #8]
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	f04f 0200 	mov.w	r2, #0
 800163a:	f04f 0300 	mov.w	r3, #0
 800163e:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 8001642:	4631      	mov	r1, r6
 8001644:	00cb      	lsls	r3, r1, #3
 8001646:	4629      	mov	r1, r5
 8001648:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800164c:	4629      	mov	r1, r5
 800164e:	00ca      	lsls	r2, r1, #3
 8001650:	4622      	mov	r2, r4
 8001652:	2300      	movs	r3, #0
 8001654:	603a      	str	r2, [r7, #0]
 8001656:	607b      	str	r3, [r7, #4]
 8001658:	f04f 0200 	mov.w	r2, #0
 800165c:	f04f 0300 	mov.w	r3, #0
 8001660:	e9d7 5600 	ldrd	r5, r6, [r7]
 8001664:	4631      	mov	r1, r6
 8001666:	00cb      	lsls	r3, r1, #3
 8001668:	4629      	mov	r1, r5
 800166a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800166e:	4629      	mov	r1, r5
 8001670:	00ca      	lsls	r2, r1, #3
 8001672:	4623      	mov	r3, r4
 8001674:	3307      	adds	r3, #7
 8001676:	08db      	lsrs	r3, r3, #3
 8001678:	00db      	lsls	r3, r3, #3
 800167a:	ebad 0d03 	sub.w	sp, sp, r3
 800167e:	ab04      	add	r3, sp, #16
 8001680:	3300      	adds	r3, #0
 8001682:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
  	  sprintf(pDataBuf, "AT+CIPSEND=%d\r\n", getRequestLength);
 8001686:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 800168a:	4927      	ldr	r1, [pc, #156]	; (8001728 <espCommunication+0x308>)
 800168c:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 8001690:	f007 fb3c 	bl	8008d0c <siprintf>
	  sendATCommand(&huart3, pDataBuf, sizeof(pDataBuf), 250);
 8001694:	23fa      	movs	r3, #250	; 0xfa
 8001696:	4622      	mov	r2, r4
 8001698:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 800169c:	4819      	ldr	r0, [pc, #100]	; (8001704 <espCommunication+0x2e4>)
 800169e:	f7fe fdff 	bl	80002a0 <sendATCommand>
	  vTaskDelay( pdMS_TO_TICKS( 10 ) );
 80016a2:	200a      	movs	r0, #10
 80016a4:	f005 fdba 	bl	800721c <vTaskDelay>
	  sendATCommand(&huart3, txBuffer, getRequestLength, 250);
 80016a8:	23fa      	movs	r3, #250	; 0xfa
 80016aa:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 80016ae:	4912      	ldr	r1, [pc, #72]	; (80016f8 <espCommunication+0x2d8>)
 80016b0:	4814      	ldr	r0, [pc, #80]	; (8001704 <espCommunication+0x2e4>)
 80016b2:	f7fe fdf5 	bl	80002a0 <sendATCommand>
	  vTaskDelay( pdMS_TO_TICKS( 50 ) );
 80016b6:	2032      	movs	r0, #50	; 0x32
 80016b8:	f005 fdb0 	bl	800721c <vTaskDelay>

	  __asm__ volatile("NOP");
 80016bc:	bf00      	nop

  /* Infinite loop */
  for(;;)
  {
	  // Calculate the number of bytes received since the last processing
	  uint8_t receivedBytes = (ESPBUFFERSIZE - DMA1_Channel3->CNDTR -rxBufferHead) % ESPBUFFERSIZE;
 80016be:	4b15      	ldr	r3, [pc, #84]	; (8001714 <espCommunication+0x2f4>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	4a1a      	ldr	r2, [pc, #104]	; (800172c <espCommunication+0x30c>)
 80016c4:	8812      	ldrh	r2, [r2, #0]
 80016c6:	b292      	uxth	r2, r2
 80016c8:	4413      	add	r3, r2
 80016ca:	f5c3 73ff 	rsb	r3, r3, #510	; 0x1fe
 80016ce:	3301      	adds	r3, #1
 80016d0:	4a17      	ldr	r2, [pc, #92]	; (8001730 <espCommunication+0x310>)
 80016d2:	fba2 1203 	umull	r1, r2, r2, r3
 80016d6:	1a99      	subs	r1, r3, r2
 80016d8:	0849      	lsrs	r1, r1, #1
 80016da:	440a      	add	r2, r1
 80016dc:	0a11      	lsrs	r1, r2, #8
 80016de:	460a      	mov	r2, r1
 80016e0:	0252      	lsls	r2, r2, #9
 80016e2:	1a52      	subs	r2, r2, r1
 80016e4:	1a99      	subs	r1, r3, r2
 80016e6:	460b      	mov	r3, r1
 80016e8:	f887 325b 	strb.w	r3, [r7, #603]	; 0x25b

	  // Process the received data
      for (uint8_t i = 0; i < receivedBytes; i++) {
 80016ec:	2300      	movs	r3, #0
 80016ee:	f887 326f 	strb.w	r3, [r7, #623]	; 0x26f
 80016f2:	e025      	b.n	8001740 <espCommunication+0x320>
 80016f4:	48000400 	.word	0x48000400
 80016f8:	20000a10 	.word	0x20000a10
 80016fc:	08009988 	.word	0x08009988
 8001700:	20000c10 	.word	0x20000c10
 8001704:	20000878 	.word	0x20000878
 8001708:	080097f0 	.word	0x080097f0
 800170c:	08009804 	.word	0x08009804
 8001710:	40004800 	.word	0x40004800
 8001714:	40020030 	.word	0x40020030
 8001718:	08009834 	.word	0x08009834
 800171c:	08009844 	.word	0x08009844
 8001720:	08009870 	.word	0x08009870
 8001724:	66666667 	.word	0x66666667
 8001728:	0800989c 	.word	0x0800989c
 800172c:	20000e10 	.word	0x20000e10
 8001730:	00804021 	.word	0x00804021

    	  __asm__ volatile("NOP");
 8001734:	bf00      	nop
      for (uint8_t i = 0; i < receivedBytes; i++) {
 8001736:	f897 326f 	ldrb.w	r3, [r7, #623]	; 0x26f
 800173a:	3301      	adds	r3, #1
 800173c:	f887 326f 	strb.w	r3, [r7, #623]	; 0x26f
 8001740:	f897 226f 	ldrb.w	r2, [r7, #623]	; 0x26f
 8001744:	f897 325b 	ldrb.w	r3, [r7, #603]	; 0x25b
 8001748:	429a      	cmp	r2, r3
 800174a:	d3f3      	bcc.n	8001734 <espCommunication+0x314>
      }

      // Update the buffer head index
      rxBufferHead = ((rxBufferHead + receivedBytes) % ESPBUFFERSIZE);
 800174c:	4b62      	ldr	r3, [pc, #392]	; (80018d8 <espCommunication+0x4b8>)
 800174e:	881b      	ldrh	r3, [r3, #0]
 8001750:	b29b      	uxth	r3, r3
 8001752:	461a      	mov	r2, r3
 8001754:	f897 325b 	ldrb.w	r3, [r7, #603]	; 0x25b
 8001758:	441a      	add	r2, r3
 800175a:	4b60      	ldr	r3, [pc, #384]	; (80018dc <espCommunication+0x4bc>)
 800175c:	fb83 1302 	smull	r1, r3, r3, r2
 8001760:	4413      	add	r3, r2
 8001762:	1219      	asrs	r1, r3, #8
 8001764:	17d3      	asrs	r3, r2, #31
 8001766:	1ac9      	subs	r1, r1, r3
 8001768:	460b      	mov	r3, r1
 800176a:	025b      	lsls	r3, r3, #9
 800176c:	1a5b      	subs	r3, r3, r1
 800176e:	1ad1      	subs	r1, r2, r3
 8001770:	b28a      	uxth	r2, r1
 8001772:	4b59      	ldr	r3, [pc, #356]	; (80018d8 <espCommunication+0x4b8>)
 8001774:	801a      	strh	r2, [r3, #0]

      if(xEventGroupGetBitsFromISR(timerFdsEventGroup) == 0x1) {
 8001776:	4b5a      	ldr	r3, [pc, #360]	; (80018e0 <espCommunication+0x4c0>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f004 fd7e 	bl	800627c <xEventGroupGetBitsFromISR>
 8001780:	4603      	mov	r3, r0
 8001782:	2b01      	cmp	r3, #1
 8001784:	f040 80a4 	bne.w	80018d0 <espCommunication+0x4b0>
 8001788:	466b      	mov	r3, sp
 800178a:	461d      	mov	r5, r3
    	    // Create the JSON content with variable values
    	    char jsonContent[150];
    	    sprintf(jsonContent, "{\"avrBatVoltage\": \"%d\", \"EncoderR.rpm\": \"%d\", \"EncoderL.rpm\": \"%d\", \"SoftPwmR.pwmValue\": \"%d\", \"SoftPwmL.pwmValue\": \"%d\"}", avrBatVoltage, EncoderR.rpm, EncoderL.rpm, SoftPwmR.pwmValue, SoftPwmL.pwmValue);
 800178c:	4b55      	ldr	r3, [pc, #340]	; (80018e4 <espCommunication+0x4c4>)
 800178e:	881b      	ldrh	r3, [r3, #0]
 8001790:	461e      	mov	r6, r3
 8001792:	4b55      	ldr	r3, [pc, #340]	; (80018e8 <espCommunication+0x4c8>)
 8001794:	695a      	ldr	r2, [r3, #20]
 8001796:	4b55      	ldr	r3, [pc, #340]	; (80018ec <espCommunication+0x4cc>)
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	4955      	ldr	r1, [pc, #340]	; (80018f0 <espCommunication+0x4d0>)
 800179c:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 80017a0:	460c      	mov	r4, r1
 80017a2:	4954      	ldr	r1, [pc, #336]	; (80018f4 <espCommunication+0x4d4>)
 80017a4:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 80017a8:	f107 0018 	add.w	r0, r7, #24
 80017ac:	9102      	str	r1, [sp, #8]
 80017ae:	9401      	str	r4, [sp, #4]
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	4613      	mov	r3, r2
 80017b4:	4632      	mov	r2, r6
 80017b6:	4950      	ldr	r1, [pc, #320]	; (80018f8 <espCommunication+0x4d8>)
 80017b8:	f007 faa8 	bl	8008d0c <siprintf>
    	    sprintf(postRequest, "POST / HTTP/1.1\r\n"
    	                         "Host: 192.168.137.1\r\n"
    	                         "Content-Type: application/json\r\n"
    	                         "Content-Length: %d\r\n\r\n"
    	                         "%s",
    	                          (int)strlen(jsonContent), jsonContent);
 80017bc:	f107 0318 	add.w	r3, r7, #24
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7fe fd0f 	bl	80001e4 <strlen>
 80017c6:	4603      	mov	r3, r0
    	    sprintf(postRequest, "POST / HTTP/1.1\r\n"
 80017c8:	461a      	mov	r2, r3
 80017ca:	f107 0318 	add.w	r3, r7, #24
 80017ce:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 80017d2:	494a      	ldr	r1, [pc, #296]	; (80018fc <espCommunication+0x4dc>)
 80017d4:	f007 fa9a 	bl	8008d0c <siprintf>

    	    // Calculate the number of characters in the POST request
    	    int postRequestLength = strlen(postRequest);
 80017d8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80017dc:	4618      	mov	r0, r3
 80017de:	f7fe fd01 	bl	80001e4 <strlen>
 80017e2:	4603      	mov	r3, r0
 80017e4:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254

//    	  char pData[] = "GET / HTTP/1.1\r\nHost: 192.168.137.1:8080\r\n\r\n";
//    	  int d = sizeof(pData)-1;
    	  uint8_t char_number = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	f887 326e 	strb.w	r3, [r7, #622]	; 0x26e
//    	  int temp = d;
    	  int temp = postRequestLength;
 80017ee:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80017f2:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
    	  while(temp != 0){
 80017f6:	e00e      	b.n	8001816 <espCommunication+0x3f6>
    	  temp = temp / 10;
 80017f8:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 80017fc:	4a40      	ldr	r2, [pc, #256]	; (8001900 <espCommunication+0x4e0>)
 80017fe:	fb82 1203 	smull	r1, r2, r2, r3
 8001802:	1092      	asrs	r2, r2, #2
 8001804:	17db      	asrs	r3, r3, #31
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
    	  char_number++;
 800180c:	f897 326e 	ldrb.w	r3, [r7, #622]	; 0x26e
 8001810:	3301      	adds	r3, #1
 8001812:	f887 326e 	strb.w	r3, [r7, #622]	; 0x26e
    	  while(temp != 0){
 8001816:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1ec      	bne.n	80017f8 <espCommunication+0x3d8>
    	  }


    	  char pData2[13+char_number];
 800181e:	f897 326e 	ldrb.w	r3, [r7, #622]	; 0x26e
 8001822:	f103 040d 	add.w	r4, r3, #13
 8001826:	1e63      	subs	r3, r4, #1
 8001828:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 800182c:	4622      	mov	r2, r4
 800182e:	2300      	movs	r3, #0
 8001830:	4690      	mov	r8, r2
 8001832:	4699      	mov	r9, r3
 8001834:	f04f 0200 	mov.w	r2, #0
 8001838:	f04f 0300 	mov.w	r3, #0
 800183c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001840:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001844:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001848:	4622      	mov	r2, r4
 800184a:	2300      	movs	r3, #0
 800184c:	4692      	mov	sl, r2
 800184e:	469b      	mov	fp, r3
 8001850:	f04f 0200 	mov.w	r2, #0
 8001854:	f04f 0300 	mov.w	r3, #0
 8001858:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800185c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001860:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001864:	4623      	mov	r3, r4
 8001866:	3307      	adds	r3, #7
 8001868:	08db      	lsrs	r3, r3, #3
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	ebad 0d03 	sub.w	sp, sp, r3
 8001870:	ab04      	add	r3, sp, #16
 8001872:	3300      	adds	r3, #0
 8001874:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
//    	  sprintf(pData2, "AT+CIPSEND=%d\r\n", d);
    	  sprintf(pData2, "AT+CIPSEND=%d\r\n", postRequestLength);
 8001878:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 800187c:	4921      	ldr	r1, [pc, #132]	; (8001904 <espCommunication+0x4e4>)
 800187e:	f8d7 024c 	ldr.w	r0, [r7, #588]	; 0x24c
 8001882:	f007 fa43 	bl	8008d0c <siprintf>
    	  while(atSend_USART3_DMA(pData2, sizeof(pData2)) != 0) {
 8001886:	e002      	b.n	800188e <espCommunication+0x46e>
    	    vTaskDelay( pdMS_TO_TICKS( 10 ) );
 8001888:	200a      	movs	r0, #10
 800188a:	f005 fcc7 	bl	800721c <vTaskDelay>
    	  while(atSend_USART3_DMA(pData2, sizeof(pData2)) != 0) {
 800188e:	b2a3      	uxth	r3, r4
 8001890:	4619      	mov	r1, r3
 8001892:	f8d7 024c 	ldr.w	r0, [r7, #588]	; 0x24c
 8001896:	f7fe fd49 	bl	800032c <atSend_USART3_DMA>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d1f3      	bne.n	8001888 <espCommunication+0x468>
    	  }
//    	  while(atSend_USART3_DMA(pData, sizeof(pData)-1) != 0) {
//    	    vTaskDelay( pdMS_TO_TICKS( 10 ) );
//    	  }
    	  while(atSend_USART3_DMA(postRequest, postRequestLength) != 0) {
 80018a0:	e002      	b.n	80018a8 <espCommunication+0x488>
    	    vTaskDelay( pdMS_TO_TICKS( 10 ) );
 80018a2:	200a      	movs	r0, #10
 80018a4:	f005 fcba 	bl	800721c <vTaskDelay>
    	  while(atSend_USART3_DMA(postRequest, postRequestLength) != 0) {
 80018a8:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80018b2:	4611      	mov	r1, r2
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7fe fd39 	bl	800032c <atSend_USART3_DMA>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d1f0      	bne.n	80018a2 <espCommunication+0x482>
    	  }
    	  xEventGroupClearBits(timerFdsEventGroup, 0xFFFFFF);
 80018c0:	4b07      	ldr	r3, [pc, #28]	; (80018e0 <espCommunication+0x4c0>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80018c8:	4618      	mov	r0, r3
 80018ca:	f004 fc9f 	bl	800620c <xEventGroupClearBits>
 80018ce:	46ad      	mov	sp, r5
      }

	  vTaskDelay( pdMS_TO_TICKS( 50 ) );
 80018d0:	2032      	movs	r0, #50	; 0x32
 80018d2:	f005 fca3 	bl	800721c <vTaskDelay>
  {
 80018d6:	e6f2      	b.n	80016be <espCommunication+0x29e>
 80018d8:	20000e10 	.word	0x20000e10
 80018dc:	80402011 	.word	0x80402011
 80018e0:	20000e18 	.word	0x20000e18
 80018e4:	200009bc 	.word	0x200009bc
 80018e8:	200009c8 	.word	0x200009c8
 80018ec:	200009e0 	.word	0x200009e0
 80018f0:	200009f8 	.word	0x200009f8
 80018f4:	20000a00 	.word	0x20000a00
 80018f8:	080098ac 	.word	0x080098ac
 80018fc:	08009928 	.word	0x08009928
 8001900:	66666667 	.word	0x66666667
 8001904:	0800989c 	.word	0x0800989c

08001908 <encoderR>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_encoderR */
void encoderR(void const * argument)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN encoderR */
  /* Infinite loop */
  for(;;)
  {
	  vTaskDelay(pdMS_TO_TICKS(ENCDELAY));
 8001910:	2008      	movs	r0, #8
 8001912:	f005 fc83 	bl	800721c <vTaskDelay>

	  EncoderR.timeOld = EncoderR.timeNew;
 8001916:	4b48      	ldr	r3, [pc, #288]	; (8001a38 <encoderR+0x130>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a47      	ldr	r2, [pc, #284]	; (8001a38 <encoderR+0x130>)
 800191c:	6053      	str	r3, [r2, #4]
	  EncoderR.timeNew = TIM17->CNT;
 800191e:	4b47      	ldr	r3, [pc, #284]	; (8001a3c <encoderR+0x134>)
 8001920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001922:	461a      	mov	r2, r3
 8001924:	4b44      	ldr	r3, [pc, #272]	; (8001a38 <encoderR+0x130>)
 8001926:	601a      	str	r2, [r3, #0]
	  EncoderR.positionOld = EncoderR.positionNew;
 8001928:	4b43      	ldr	r3, [pc, #268]	; (8001a38 <encoderR+0x130>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	4a42      	ldr	r2, [pc, #264]	; (8001a38 <encoderR+0x130>)
 800192e:	60d3      	str	r3, [r2, #12]
	  EncoderR.positionNew = TIM1->CNT;
 8001930:	4b43      	ldr	r3, [pc, #268]	; (8001a40 <encoderR+0x138>)
 8001932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001934:	461a      	mov	r2, r3
 8001936:	4b40      	ldr	r3, [pc, #256]	; (8001a38 <encoderR+0x130>)
 8001938:	609a      	str	r2, [r3, #8]

	  if(EncoderR.timeNew - EncoderR.timeOld == 0) {
 800193a:	4b3f      	ldr	r3, [pc, #252]	; (8001a38 <encoderR+0x130>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	4b3e      	ldr	r3, [pc, #248]	; (8001a38 <encoderR+0x130>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	429a      	cmp	r2, r3
 8001944:	d076      	beq.n	8001a34 <encoderR+0x12c>
		  continue;
	  }

	  if (!EncoderR.posCntUpdate) {
 8001946:	4b3c      	ldr	r3, [pc, #240]	; (8001a38 <encoderR+0x130>)
 8001948:	7c1b      	ldrb	r3, [r3, #16]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d11f      	bne.n	800198e <encoderR+0x86>
		  EncoderR.rpm = ((float)(((float)(EncoderR.positionNew - EncoderR.positionOld)) / ((float)(EncoderR.timeNew - EncoderR.timeOld)))*kToRpm); //(32*1000*60)/256;
 800194e:	4b3a      	ldr	r3, [pc, #232]	; (8001a38 <encoderR+0x130>)
 8001950:	689a      	ldr	r2, [r3, #8]
 8001952:	4b39      	ldr	r3, [pc, #228]	; (8001a38 <encoderR+0x130>)
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	ee07 3a90 	vmov	s15, r3
 800195c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001960:	4b35      	ldr	r3, [pc, #212]	; (8001a38 <encoderR+0x130>)
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	4b34      	ldr	r3, [pc, #208]	; (8001a38 <encoderR+0x130>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	ee07 3a90 	vmov	s15, r3
 800196e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001976:	4b33      	ldr	r3, [pc, #204]	; (8001a44 <encoderR+0x13c>)
 8001978:	edd3 7a00 	vldr	s15, [r3]
 800197c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001980:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001984:	ee17 2a90 	vmov	r2, s15
 8001988:	4b2b      	ldr	r3, [pc, #172]	; (8001a38 <encoderR+0x130>)
 800198a:	615a      	str	r2, [r3, #20]
 800198c:	e050      	b.n	8001a30 <encoderR+0x128>
	  } else {
		  if((EncoderR.positionOld >= 0) && (EncoderR.positionOld <= 32768) ) {
 800198e:	4b2a      	ldr	r3, [pc, #168]	; (8001a38 <encoderR+0x130>)
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	2b00      	cmp	r3, #0
 8001994:	db27      	blt.n	80019e6 <encoderR+0xde>
 8001996:	4b28      	ldr	r3, [pc, #160]	; (8001a38 <encoderR+0x130>)
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800199e:	dc22      	bgt.n	80019e6 <encoderR+0xde>
			  EncoderR.rpm = ((float)(((float)(EncoderR.positionNew - 65535 - EncoderR.positionOld)) / ((float)(EncoderR.timeNew - EncoderR.timeOld)))*kToRpm);
 80019a0:	4b25      	ldr	r3, [pc, #148]	; (8001a38 <encoderR+0x130>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 80019a8:	3bff      	subs	r3, #255	; 0xff
 80019aa:	4a23      	ldr	r2, [pc, #140]	; (8001a38 <encoderR+0x130>)
 80019ac:	68d2      	ldr	r2, [r2, #12]
 80019ae:	1a9b      	subs	r3, r3, r2
 80019b0:	ee07 3a90 	vmov	s15, r3
 80019b4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80019b8:	4b1f      	ldr	r3, [pc, #124]	; (8001a38 <encoderR+0x130>)
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	4b1e      	ldr	r3, [pc, #120]	; (8001a38 <encoderR+0x130>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	ee07 3a90 	vmov	s15, r3
 80019c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80019ce:	4b1d      	ldr	r3, [pc, #116]	; (8001a44 <encoderR+0x13c>)
 80019d0:	edd3 7a00 	vldr	s15, [r3]
 80019d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019dc:	ee17 2a90 	vmov	r2, s15
 80019e0:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <encoderR+0x130>)
 80019e2:	615a      	str	r2, [r3, #20]
 80019e4:	e021      	b.n	8001a2a <encoderR+0x122>
		  } else {
			  EncoderR.rpm = ((float)(((float)(EncoderR.positionNew + (65535 - EncoderR.positionOld))) / ((float)(EncoderR.timeNew - EncoderR.timeOld)))*kToRpm);
 80019e6:	4b14      	ldr	r3, [pc, #80]	; (8001a38 <encoderR+0x130>)
 80019e8:	689a      	ldr	r2, [r3, #8]
 80019ea:	4b13      	ldr	r3, [pc, #76]	; (8001a38 <encoderR+0x130>)
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80019f2:	33ff      	adds	r3, #255	; 0xff
 80019f4:	4413      	add	r3, r2
 80019f6:	ee07 3a90 	vmov	s15, r3
 80019fa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80019fe:	4b0e      	ldr	r3, [pc, #56]	; (8001a38 <encoderR+0x130>)
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	4b0d      	ldr	r3, [pc, #52]	; (8001a38 <encoderR+0x130>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	ee07 3a90 	vmov	s15, r3
 8001a0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a14:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <encoderR+0x13c>)
 8001a16:	edd3 7a00 	vldr	s15, [r3]
 8001a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a22:	ee17 2a90 	vmov	r2, s15
 8001a26:	4b04      	ldr	r3, [pc, #16]	; (8001a38 <encoderR+0x130>)
 8001a28:	615a      	str	r2, [r3, #20]
		  }
		  EncoderR.posCntUpdate = 0;
 8001a2a:	4b03      	ldr	r3, [pc, #12]	; (8001a38 <encoderR+0x130>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	741a      	strb	r2, [r3, #16]
	  }
//	  taskYIELD();
	  __asm__ volatile("NOP");
 8001a30:	bf00      	nop
 8001a32:	e76d      	b.n	8001910 <encoderR+0x8>
		  continue;
 8001a34:	bf00      	nop
	  vTaskDelay(pdMS_TO_TICKS(ENCDELAY));
 8001a36:	e76b      	b.n	8001910 <encoderR+0x8>
 8001a38:	200009c8 	.word	0x200009c8
 8001a3c:	40014800 	.word	0x40014800
 8001a40:	40012c00 	.word	0x40012c00
 8001a44:	20000a08 	.word	0x20000a08

08001a48 <encoderL>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_encoderL */
void encoderL(void const * argument)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN encoderL */
  /* Infinite loop */
  for(;;)
  {
	  vTaskDelay(pdMS_TO_TICKS(ENCDELAY));
 8001a50:	2008      	movs	r0, #8
 8001a52:	f005 fbe3 	bl	800721c <vTaskDelay>

	  if(TIM2->CNT > TIM2->ARR) {
 8001a56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d907      	bls.n	8001a76 <encoderL+0x2e>
		  TIM2->EGR |= TIM_EGR_UG;
 8001a66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a6a:	695b      	ldr	r3, [r3, #20]
 8001a6c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	6153      	str	r3, [r2, #20]
	  }

	  EncoderL.timeOld = EncoderL.timeNew;
 8001a76:	4b49      	ldr	r3, [pc, #292]	; (8001b9c <encoderL+0x154>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a48      	ldr	r2, [pc, #288]	; (8001b9c <encoderL+0x154>)
 8001a7c:	6053      	str	r3, [r2, #4]
	  EncoderL.timeNew = TIM17->CNT;
 8001a7e:	4b48      	ldr	r3, [pc, #288]	; (8001ba0 <encoderL+0x158>)
 8001a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a82:	461a      	mov	r2, r3
 8001a84:	4b45      	ldr	r3, [pc, #276]	; (8001b9c <encoderL+0x154>)
 8001a86:	601a      	str	r2, [r3, #0]
	  EncoderL.positionOld = EncoderL.positionNew;
 8001a88:	4b44      	ldr	r3, [pc, #272]	; (8001b9c <encoderL+0x154>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	4a43      	ldr	r2, [pc, #268]	; (8001b9c <encoderL+0x154>)
 8001a8e:	60d3      	str	r3, [r2, #12]
	  EncoderL.positionNew = TIM2->CNT;
 8001a90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a96:	461a      	mov	r2, r3
 8001a98:	4b40      	ldr	r3, [pc, #256]	; (8001b9c <encoderL+0x154>)
 8001a9a:	609a      	str	r2, [r3, #8]

	  if(EncoderL.timeNew - EncoderL.timeOld == 0) {
 8001a9c:	4b3f      	ldr	r3, [pc, #252]	; (8001b9c <encoderL+0x154>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	4b3e      	ldr	r3, [pc, #248]	; (8001b9c <encoderL+0x154>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d076      	beq.n	8001b96 <encoderL+0x14e>
		  continue;
	  }

	  if (!EncoderL.posCntUpdate) {
 8001aa8:	4b3c      	ldr	r3, [pc, #240]	; (8001b9c <encoderL+0x154>)
 8001aaa:	7c1b      	ldrb	r3, [r3, #16]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d11f      	bne.n	8001af0 <encoderL+0xa8>
		  EncoderL.rpm = ((float)(((float)(EncoderL.positionNew - EncoderL.positionOld)) / ((float)(EncoderL.timeNew - EncoderL.timeOld)))*kToRpm); //(32*1000*60)/256;
 8001ab0:	4b3a      	ldr	r3, [pc, #232]	; (8001b9c <encoderL+0x154>)
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	4b39      	ldr	r3, [pc, #228]	; (8001b9c <encoderL+0x154>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	ee07 3a90 	vmov	s15, r3
 8001abe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ac2:	4b36      	ldr	r3, [pc, #216]	; (8001b9c <encoderL+0x154>)
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	4b35      	ldr	r3, [pc, #212]	; (8001b9c <encoderL+0x154>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	ee07 3a90 	vmov	s15, r3
 8001ad0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ad4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ad8:	4b32      	ldr	r3, [pc, #200]	; (8001ba4 <encoderL+0x15c>)
 8001ada:	edd3 7a00 	vldr	s15, [r3]
 8001ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ae2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ae6:	ee17 2a90 	vmov	r2, s15
 8001aea:	4b2c      	ldr	r3, [pc, #176]	; (8001b9c <encoderL+0x154>)
 8001aec:	615a      	str	r2, [r3, #20]
 8001aee:	e050      	b.n	8001b92 <encoderL+0x14a>
	  } else {
		  if((EncoderL.positionOld >= 0) && (EncoderL.positionOld <= 32768) ) {
 8001af0:	4b2a      	ldr	r3, [pc, #168]	; (8001b9c <encoderL+0x154>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	db27      	blt.n	8001b48 <encoderL+0x100>
 8001af8:	4b28      	ldr	r3, [pc, #160]	; (8001b9c <encoderL+0x154>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b00:	dc22      	bgt.n	8001b48 <encoderL+0x100>
			  EncoderL.rpm = ((float)(((float)(EncoderL.positionNew - 65535 - EncoderL.positionOld)) / ((float)(EncoderL.timeNew - EncoderL.timeOld)))*kToRpm);
 8001b02:	4b26      	ldr	r3, [pc, #152]	; (8001b9c <encoderL+0x154>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8001b0a:	3bff      	subs	r3, #255	; 0xff
 8001b0c:	4a23      	ldr	r2, [pc, #140]	; (8001b9c <encoderL+0x154>)
 8001b0e:	68d2      	ldr	r2, [r2, #12]
 8001b10:	1a9b      	subs	r3, r3, r2
 8001b12:	ee07 3a90 	vmov	s15, r3
 8001b16:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001b1a:	4b20      	ldr	r3, [pc, #128]	; (8001b9c <encoderL+0x154>)
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	4b1f      	ldr	r3, [pc, #124]	; (8001b9c <encoderL+0x154>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	ee07 3a90 	vmov	s15, r3
 8001b28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b30:	4b1c      	ldr	r3, [pc, #112]	; (8001ba4 <encoderL+0x15c>)
 8001b32:	edd3 7a00 	vldr	s15, [r3]
 8001b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b3e:	ee17 2a90 	vmov	r2, s15
 8001b42:	4b16      	ldr	r3, [pc, #88]	; (8001b9c <encoderL+0x154>)
 8001b44:	615a      	str	r2, [r3, #20]
 8001b46:	e021      	b.n	8001b8c <encoderL+0x144>
		  } else {
			  EncoderL.rpm = ((float)(((float)(EncoderL.positionNew + (65535 - EncoderL.positionOld))) / ((float)(EncoderL.timeNew - EncoderL.timeOld)))*kToRpm);
 8001b48:	4b14      	ldr	r3, [pc, #80]	; (8001b9c <encoderL+0x154>)
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	4b13      	ldr	r3, [pc, #76]	; (8001b9c <encoderL+0x154>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001b54:	33ff      	adds	r3, #255	; 0xff
 8001b56:	4413      	add	r3, r2
 8001b58:	ee07 3a90 	vmov	s15, r3
 8001b5c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001b60:	4b0e      	ldr	r3, [pc, #56]	; (8001b9c <encoderL+0x154>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	4b0d      	ldr	r3, [pc, #52]	; (8001b9c <encoderL+0x154>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	ee07 3a90 	vmov	s15, r3
 8001b6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b76:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <encoderL+0x15c>)
 8001b78:	edd3 7a00 	vldr	s15, [r3]
 8001b7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b84:	ee17 2a90 	vmov	r2, s15
 8001b88:	4b04      	ldr	r3, [pc, #16]	; (8001b9c <encoderL+0x154>)
 8001b8a:	615a      	str	r2, [r3, #20]
		  }
		  EncoderL.posCntUpdate = 0;
 8001b8c:	4b03      	ldr	r3, [pc, #12]	; (8001b9c <encoderL+0x154>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	741a      	strb	r2, [r3, #16]
	  }
//	  taskYIELD();
	  __asm__ volatile("NOP");
 8001b92:	bf00      	nop
 8001b94:	e75c      	b.n	8001a50 <encoderL+0x8>
		  continue;
 8001b96:	bf00      	nop
	  vTaskDelay(pdMS_TO_TICKS(ENCDELAY));
 8001b98:	e75a      	b.n	8001a50 <encoderL+0x8>
 8001b9a:	bf00      	nop
 8001b9c:	200009e0 	.word	0x200009e0
 8001ba0:	40014800 	.word	0x40014800
 8001ba4:	20000a08 	.word	0x20000a08

08001ba8 <softwarePWMR>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_softwarePWMR */
void softwarePWMR(void const * argument)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b088      	sub	sp, #32
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN softwarePWMR */
	int errorValue = 0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	617b      	str	r3, [r7, #20]
	float sumValue = 0;
 8001bb4:	f04f 0300 	mov.w	r3, #0
 8001bb8:	613b      	str	r3, [r7, #16]
	float pValue = 0;
 8001bba:	f04f 0300 	mov.w	r3, #0
 8001bbe:	60fb      	str	r3, [r7, #12]
	float iValue = 0;
 8001bc0:	f04f 0300 	mov.w	r3, #0
 8001bc4:	61fb      	str	r3, [r7, #28]
	float pwmFloatValue = 0;
 8001bc6:	f04f 0300 	mov.w	r3, #0
 8001bca:	61bb      	str	r3, [r7, #24]
	vTaskDelay( pdMS_TO_TICKS( 10 ) );
 8001bcc:	200a      	movs	r0, #10
 8001bce:	f005 fb25 	bl	800721c <vTaskDelay>
	GPIOA->ODR |= (1<<6); //EN34
 8001bd2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001bd6:	695b      	ldr	r3, [r3, #20]
 8001bd8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001bdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001be0:	6153      	str	r3, [r2, #20]

	SoftPwmR.reqValue = 8000;
 8001be2:	4b3d      	ldr	r3, [pc, #244]	; (8001cd8 <softwarePWMR+0x130>)
 8001be4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001be8:	801a      	strh	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
	  SoftPwmR.curValue = EncoderR.rpm;
 8001bea:	4b3c      	ldr	r3, [pc, #240]	; (8001cdc <softwarePWMR+0x134>)
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	b21a      	sxth	r2, r3
 8001bf0:	4b39      	ldr	r3, [pc, #228]	; (8001cd8 <softwarePWMR+0x130>)
 8001bf2:	805a      	strh	r2, [r3, #2]
	  errorValue = SoftPwmR.reqValue - SoftPwmR.curValue;
 8001bf4:	4b38      	ldr	r3, [pc, #224]	; (8001cd8 <softwarePWMR+0x130>)
 8001bf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	4b36      	ldr	r3, [pc, #216]	; (8001cd8 <softwarePWMR+0x130>)
 8001bfe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	617b      	str	r3, [r7, #20]
	  pValue = KP * errorValue;
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	ee07 3a90 	vmov	s15, r3
 8001c0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c10:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001ce0 <softwarePWMR+0x138>
 8001c14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c18:	edc7 7a03 	vstr	s15, [r7, #12]
	  iValue += KI * errorValue;
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	ee07 3a90 	vmov	s15, r3
 8001c22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c26:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001ce4 <softwarePWMR+0x13c>
 8001c2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c2e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001c32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c36:	edc7 7a07 	vstr	s15, [r7, #28]
	  if(iValue > ((float)MAXRPM)) iValue = MAXRPM;
 8001c3a:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c3e:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001ce8 <softwarePWMR+0x140>
 8001c42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c4a:	dd02      	ble.n	8001c52 <softwarePWMR+0xaa>
 8001c4c:	4b27      	ldr	r3, [pc, #156]	; (8001cec <softwarePWMR+0x144>)
 8001c4e:	61fb      	str	r3, [r7, #28]
 8001c50:	e00a      	b.n	8001c68 <softwarePWMR+0xc0>
	  else if(iValue < ((float)-MAXRPM)) iValue = -MAXRPM;
 8001c52:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c56:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001cf0 <softwarePWMR+0x148>
 8001c5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c62:	d501      	bpl.n	8001c68 <softwarePWMR+0xc0>
 8001c64:	4b23      	ldr	r3, [pc, #140]	; (8001cf4 <softwarePWMR+0x14c>)
 8001c66:	61fb      	str	r3, [r7, #28]
	  sumValue = (pValue + iValue);
 8001c68:	ed97 7a03 	vldr	s14, [r7, #12]
 8001c6c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c74:	edc7 7a04 	vstr	s15, [r7, #16]
	  pwmFloatValue += ((((float)sumValue)/((float)MAXRPM))*100);
 8001c78:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c7c:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8001ce8 <softwarePWMR+0x140>
 8001c80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c84:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001cf8 <softwarePWMR+0x150>
 8001c88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c8c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001c90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c94:	edc7 7a06 	vstr	s15, [r7, #24]
	  SoftPwmR.pwmValue = (int16_t)pwmFloatValue;
 8001c98:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ca0:	ee17 3a90 	vmov	r3, s15
 8001ca4:	b21a      	sxth	r2, r3
 8001ca6:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <softwarePWMR+0x130>)
 8001ca8:	809a      	strh	r2, [r3, #4]
	  if(SoftPwmR.pwmValue > 100) SoftPwmR.pwmValue = 100;
 8001caa:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <softwarePWMR+0x130>)
 8001cac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001cb0:	2b64      	cmp	r3, #100	; 0x64
 8001cb2:	dd03      	ble.n	8001cbc <softwarePWMR+0x114>
 8001cb4:	4b08      	ldr	r3, [pc, #32]	; (8001cd8 <softwarePWMR+0x130>)
 8001cb6:	2264      	movs	r2, #100	; 0x64
 8001cb8:	809a      	strh	r2, [r3, #4]
 8001cba:	e009      	b.n	8001cd0 <softwarePWMR+0x128>
	  else if(SoftPwmR.pwmValue < -100) SoftPwmR.pwmValue = -100;
 8001cbc:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <softwarePWMR+0x130>)
 8001cbe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001cc2:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8001cc6:	da03      	bge.n	8001cd0 <softwarePWMR+0x128>
 8001cc8:	4b03      	ldr	r3, [pc, #12]	; (8001cd8 <softwarePWMR+0x130>)
 8001cca:	f64f 729c 	movw	r2, #65436	; 0xff9c
 8001cce:	809a      	strh	r2, [r3, #4]
//		GPIOA->ODR |= (1<<6); //EN34
//		GPIOA->ODR &= ~(1<<7); //_3A
//		GPIOB->ODR |= (1<<0); //_4A
//	  taskYIELD();
	  vTaskDelay(pdMS_TO_TICKS(ENCDELAY));
 8001cd0:	2008      	movs	r0, #8
 8001cd2:	f005 faa3 	bl	800721c <vTaskDelay>
	  SoftPwmR.curValue = EncoderR.rpm;
 8001cd6:	e788      	b.n	8001bea <softwarePWMR+0x42>
 8001cd8:	200009f8 	.word	0x200009f8
 8001cdc:	200009c8 	.word	0x200009c8
 8001ce0:	3b03126f 	.word	0x3b03126f
 8001ce4:	00000000 	.word	0x00000000
 8001ce8:	46435000 	.word	0x46435000
 8001cec:	46435000 	.word	0x46435000
 8001cf0:	c6435000 	.word	0xc6435000
 8001cf4:	c6435000 	.word	0xc6435000
 8001cf8:	42c80000 	.word	0x42c80000

08001cfc <softwarePWML>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_softwarePWML */
void softwarePWML(void const * argument)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b088      	sub	sp, #32
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN softwarePWML */
	int errorValue = 0;
 8001d04:	2300      	movs	r3, #0
 8001d06:	617b      	str	r3, [r7, #20]
	float sumValue = 0;
 8001d08:	f04f 0300 	mov.w	r3, #0
 8001d0c:	613b      	str	r3, [r7, #16]
	float pValue = 0;
 8001d0e:	f04f 0300 	mov.w	r3, #0
 8001d12:	60fb      	str	r3, [r7, #12]
	float iValue = 0;
 8001d14:	f04f 0300 	mov.w	r3, #0
 8001d18:	61fb      	str	r3, [r7, #28]
	float pwmFloatValue = 0;
 8001d1a:	f04f 0300 	mov.w	r3, #0
 8001d1e:	61bb      	str	r3, [r7, #24]
	vTaskDelay( pdMS_TO_TICKS( 10 ) );
 8001d20:	200a      	movs	r0, #10
 8001d22:	f005 fa7b 	bl	800721c <vTaskDelay>
	GPIOA->ODR |= (1<<3); //EN12
 8001d26:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001d2a:	695b      	ldr	r3, [r3, #20]
 8001d2c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001d30:	f043 0308 	orr.w	r3, r3, #8
 8001d34:	6153      	str	r3, [r2, #20]

	SoftPwmL.reqValue = 6000;
 8001d36:	4b49      	ldr	r3, [pc, #292]	; (8001e5c <softwarePWML+0x160>)
 8001d38:	f241 7270 	movw	r2, #6000	; 0x1770
 8001d3c:	801a      	strh	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
	  SoftPwmL.curValue = EncoderL.rpm;
 8001d3e:	4b48      	ldr	r3, [pc, #288]	; (8001e60 <softwarePWML+0x164>)
 8001d40:	695b      	ldr	r3, [r3, #20]
 8001d42:	b21a      	sxth	r2, r3
 8001d44:	4b45      	ldr	r3, [pc, #276]	; (8001e5c <softwarePWML+0x160>)
 8001d46:	805a      	strh	r2, [r3, #2]
	  errorValue = SoftPwmL.reqValue - SoftPwmL.curValue;
 8001d48:	4b44      	ldr	r3, [pc, #272]	; (8001e5c <softwarePWML+0x160>)
 8001d4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	4b42      	ldr	r3, [pc, #264]	; (8001e5c <softwarePWML+0x160>)
 8001d52:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	617b      	str	r3, [r7, #20]
	  pValue = KP * errorValue;
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	ee07 3a90 	vmov	s15, r3
 8001d60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d64:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8001e64 <softwarePWML+0x168>
 8001d68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d6c:	edc7 7a03 	vstr	s15, [r7, #12]
	  iValue += KI * errorValue;
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	ee07 3a90 	vmov	s15, r3
 8001d76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d7a:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001e68 <softwarePWML+0x16c>
 8001d7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d82:	ed97 7a07 	vldr	s14, [r7, #28]
 8001d86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d8a:	edc7 7a07 	vstr	s15, [r7, #28]
	  if(iValue > ((float)MAXRPM)) iValue = MAXRPM;
 8001d8e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d92:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001e6c <softwarePWML+0x170>
 8001d96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d9e:	dd02      	ble.n	8001da6 <softwarePWML+0xaa>
 8001da0:	4b33      	ldr	r3, [pc, #204]	; (8001e70 <softwarePWML+0x174>)
 8001da2:	61fb      	str	r3, [r7, #28]
 8001da4:	e00a      	b.n	8001dbc <softwarePWML+0xc0>
	  else if(iValue < ((float)-MAXRPM)) iValue = -MAXRPM;
 8001da6:	edd7 7a07 	vldr	s15, [r7, #28]
 8001daa:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001e74 <softwarePWML+0x178>
 8001dae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db6:	d501      	bpl.n	8001dbc <softwarePWML+0xc0>
 8001db8:	4b2f      	ldr	r3, [pc, #188]	; (8001e78 <softwarePWML+0x17c>)
 8001dba:	61fb      	str	r3, [r7, #28]
	  sumValue = (pValue + iValue);
 8001dbc:	ed97 7a03 	vldr	s14, [r7, #12]
 8001dc0:	edd7 7a07 	vldr	s15, [r7, #28]
 8001dc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dc8:	edc7 7a04 	vstr	s15, [r7, #16]
	  pwmFloatValue += ((((float)sumValue)/((float)MAXRPM))*100);
 8001dcc:	ed97 7a04 	vldr	s14, [r7, #16]
 8001dd0:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001e6c <softwarePWML+0x170>
 8001dd4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dd8:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001e7c <softwarePWML+0x180>
 8001ddc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001de0:	ed97 7a06 	vldr	s14, [r7, #24]
 8001de4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001de8:	edc7 7a06 	vstr	s15, [r7, #24]
	  if(pwmFloatValue > 100) pwmFloatValue = 100;
 8001dec:	edd7 7a06 	vldr	s15, [r7, #24]
 8001df0:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001e7c <softwarePWML+0x180>
 8001df4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dfc:	dd02      	ble.n	8001e04 <softwarePWML+0x108>
 8001dfe:	4b20      	ldr	r3, [pc, #128]	; (8001e80 <softwarePWML+0x184>)
 8001e00:	61bb      	str	r3, [r7, #24]
 8001e02:	e00a      	b.n	8001e1a <softwarePWML+0x11e>
	  else if(pwmFloatValue < -100) pwmFloatValue = -100;
 8001e04:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e08:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001e84 <softwarePWML+0x188>
 8001e0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e14:	d501      	bpl.n	8001e1a <softwarePWML+0x11e>
 8001e16:	4b1c      	ldr	r3, [pc, #112]	; (8001e88 <softwarePWML+0x18c>)
 8001e18:	61bb      	str	r3, [r7, #24]
	  SoftPwmL.pwmValue = (int16_t)pwmFloatValue;
 8001e1a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e22:	ee17 3a90 	vmov	r3, s15
 8001e26:	b21a      	sxth	r2, r3
 8001e28:	4b0c      	ldr	r3, [pc, #48]	; (8001e5c <softwarePWML+0x160>)
 8001e2a:	809a      	strh	r2, [r3, #4]
	  if(SoftPwmL.pwmValue > 100) SoftPwmL.pwmValue = 100;
 8001e2c:	4b0b      	ldr	r3, [pc, #44]	; (8001e5c <softwarePWML+0x160>)
 8001e2e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e32:	2b64      	cmp	r3, #100	; 0x64
 8001e34:	dd03      	ble.n	8001e3e <softwarePWML+0x142>
 8001e36:	4b09      	ldr	r3, [pc, #36]	; (8001e5c <softwarePWML+0x160>)
 8001e38:	2264      	movs	r2, #100	; 0x64
 8001e3a:	809a      	strh	r2, [r3, #4]
 8001e3c:	e009      	b.n	8001e52 <softwarePWML+0x156>
	  else if(SoftPwmL.pwmValue < -100) SoftPwmL.pwmValue = -100;
 8001e3e:	4b07      	ldr	r3, [pc, #28]	; (8001e5c <softwarePWML+0x160>)
 8001e40:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e44:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8001e48:	da03      	bge.n	8001e52 <softwarePWML+0x156>
 8001e4a:	4b04      	ldr	r3, [pc, #16]	; (8001e5c <softwarePWML+0x160>)
 8001e4c:	f64f 729c 	movw	r2, #65436	; 0xff9c
 8001e50:	809a      	strh	r2, [r3, #4]

	  vTaskDelay(pdMS_TO_TICKS(ENCDELAY));
 8001e52:	2008      	movs	r0, #8
 8001e54:	f005 f9e2 	bl	800721c <vTaskDelay>
	  SoftPwmL.curValue = EncoderL.rpm;
 8001e58:	e771      	b.n	8001d3e <softwarePWML+0x42>
 8001e5a:	bf00      	nop
 8001e5c:	20000a00 	.word	0x20000a00
 8001e60:	200009e0 	.word	0x200009e0
 8001e64:	3b03126f 	.word	0x3b03126f
 8001e68:	00000000 	.word	0x00000000
 8001e6c:	46435000 	.word	0x46435000
 8001e70:	46435000 	.word	0x46435000
 8001e74:	c6435000 	.word	0xc6435000
 8001e78:	c6435000 	.word	0xc6435000
 8001e7c:	42c80000 	.word	0x42c80000
 8001e80:	42c80000 	.word	0x42c80000
 8001e84:	c2c80000 	.word	0xc2c80000
 8001e88:	c2c80000 	.word	0xc2c80000

08001e8c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a04      	ldr	r2, [pc, #16]	; (8001eac <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d101      	bne.n	8001ea2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e9e:	f000 fc5f 	bl	8002760 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	40001000 	.word	0x40001000

08001eb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001eb4:	b672      	cpsid	i
}
 8001eb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001eb8:	e7fe      	b.n	8001eb8 <Error_Handler+0x8>
	...

08001ebc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ec2:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <HAL_MspInit+0x4c>)
 8001ec4:	699b      	ldr	r3, [r3, #24]
 8001ec6:	4a10      	ldr	r2, [pc, #64]	; (8001f08 <HAL_MspInit+0x4c>)
 8001ec8:	f043 0301 	orr.w	r3, r3, #1
 8001ecc:	6193      	str	r3, [r2, #24]
 8001ece:	4b0e      	ldr	r3, [pc, #56]	; (8001f08 <HAL_MspInit+0x4c>)
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	607b      	str	r3, [r7, #4]
 8001ed8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eda:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <HAL_MspInit+0x4c>)
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	4a0a      	ldr	r2, [pc, #40]	; (8001f08 <HAL_MspInit+0x4c>)
 8001ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee4:	61d3      	str	r3, [r2, #28]
 8001ee6:	4b08      	ldr	r3, [pc, #32]	; (8001f08 <HAL_MspInit+0x4c>)
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eee:	603b      	str	r3, [r7, #0]
 8001ef0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	210f      	movs	r1, #15
 8001ef6:	f06f 0001 	mvn.w	r0, #1
 8001efa:	f001 f9cb 	bl	8003294 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40021000 	.word	0x40021000

08001f0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b08a      	sub	sp, #40	; 0x28
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f14:	f107 0314 	add.w	r3, r7, #20
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	605a      	str	r2, [r3, #4]
 8001f1e:	609a      	str	r2, [r3, #8]
 8001f20:	60da      	str	r2, [r3, #12]
 8001f22:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f2c:	d124      	bne.n	8001f78 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f2e:	4b14      	ldr	r3, [pc, #80]	; (8001f80 <HAL_ADC_MspInit+0x74>)
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	4a13      	ldr	r2, [pc, #76]	; (8001f80 <HAL_ADC_MspInit+0x74>)
 8001f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f38:	6153      	str	r3, [r2, #20]
 8001f3a:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <HAL_ADC_MspInit+0x74>)
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f42:	613b      	str	r3, [r7, #16]
 8001f44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f46:	4b0e      	ldr	r3, [pc, #56]	; (8001f80 <HAL_ADC_MspInit+0x74>)
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	4a0d      	ldr	r2, [pc, #52]	; (8001f80 <HAL_ADC_MspInit+0x74>)
 8001f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f50:	6153      	str	r3, [r2, #20]
 8001f52:	4b0b      	ldr	r3, [pc, #44]	; (8001f80 <HAL_ADC_MspInit+0x74>)
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f5e:	2304      	movs	r3, #4
 8001f60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f62:	2303      	movs	r3, #3
 8001f64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f66:	2300      	movs	r3, #0
 8001f68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f6a:	f107 0314 	add.w	r3, r7, #20
 8001f6e:	4619      	mov	r1, r3
 8001f70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f74:	f001 fac2 	bl	80034fc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f78:	bf00      	nop
 8001f7a:	3728      	adds	r7, #40	; 0x28
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40021000 	.word	0x40021000

08001f84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b08a      	sub	sp, #40	; 0x28
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8c:	f107 0314 	add.w	r3, r7, #20
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	609a      	str	r2, [r3, #8]
 8001f98:	60da      	str	r2, [r3, #12]
 8001f9a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a17      	ldr	r2, [pc, #92]	; (8002000 <HAL_SPI_MspInit+0x7c>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d128      	bne.n	8001ff8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001fa6:	4b17      	ldr	r3, [pc, #92]	; (8002004 <HAL_SPI_MspInit+0x80>)
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	4a16      	ldr	r2, [pc, #88]	; (8002004 <HAL_SPI_MspInit+0x80>)
 8001fac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fb0:	61d3      	str	r3, [r2, #28]
 8001fb2:	4b14      	ldr	r3, [pc, #80]	; (8002004 <HAL_SPI_MspInit+0x80>)
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fba:	613b      	str	r3, [r7, #16]
 8001fbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fbe:	4b11      	ldr	r3, [pc, #68]	; (8002004 <HAL_SPI_MspInit+0x80>)
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	4a10      	ldr	r2, [pc, #64]	; (8002004 <HAL_SPI_MspInit+0x80>)
 8001fc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fc8:	6153      	str	r3, [r2, #20]
 8001fca:	4b0e      	ldr	r3, [pc, #56]	; (8002004 <HAL_SPI_MspInit+0x80>)
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001fd6:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001fda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fdc:	2302      	movs	r3, #2
 8001fde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001fe8:	2305      	movs	r3, #5
 8001fea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fec:	f107 0314 	add.w	r3, r7, #20
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4805      	ldr	r0, [pc, #20]	; (8002008 <HAL_SPI_MspInit+0x84>)
 8001ff4:	f001 fa82 	bl	80034fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001ff8:	bf00      	nop
 8001ffa:	3728      	adds	r7, #40	; 0x28
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40003800 	.word	0x40003800
 8002004:	40021000 	.word	0x40021000
 8002008:	48000400 	.word	0x48000400

0800200c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a16      	ldr	r2, [pc, #88]	; (8002074 <HAL_TIM_Base_MspInit+0x68>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d10c      	bne.n	8002038 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800201e:	4b16      	ldr	r3, [pc, #88]	; (8002078 <HAL_TIM_Base_MspInit+0x6c>)
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	4a15      	ldr	r2, [pc, #84]	; (8002078 <HAL_TIM_Base_MspInit+0x6c>)
 8002024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002028:	6193      	str	r3, [r2, #24]
 800202a:	4b13      	ldr	r3, [pc, #76]	; (8002078 <HAL_TIM_Base_MspInit+0x6c>)
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002036:	e018      	b.n	800206a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM17)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a0f      	ldr	r2, [pc, #60]	; (800207c <HAL_TIM_Base_MspInit+0x70>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d113      	bne.n	800206a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002042:	4b0d      	ldr	r3, [pc, #52]	; (8002078 <HAL_TIM_Base_MspInit+0x6c>)
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	4a0c      	ldr	r2, [pc, #48]	; (8002078 <HAL_TIM_Base_MspInit+0x6c>)
 8002048:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800204c:	6193      	str	r3, [r2, #24]
 800204e:	4b0a      	ldr	r3, [pc, #40]	; (8002078 <HAL_TIM_Base_MspInit+0x6c>)
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002056:	60bb      	str	r3, [r7, #8]
 8002058:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 5, 0);
 800205a:	2200      	movs	r2, #0
 800205c:	2105      	movs	r1, #5
 800205e:	201a      	movs	r0, #26
 8002060:	f001 f918 	bl	8003294 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002064:	201a      	movs	r0, #26
 8002066:	f001 f931 	bl	80032cc <HAL_NVIC_EnableIRQ>
}
 800206a:	bf00      	nop
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40014400 	.word	0x40014400
 8002078:	40021000 	.word	0x40021000
 800207c:	40014800 	.word	0x40014800

08002080 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b08a      	sub	sp, #40	; 0x28
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002088:	f107 0314 	add.w	r3, r7, #20
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	605a      	str	r2, [r3, #4]
 8002092:	609a      	str	r2, [r3, #8]
 8002094:	60da      	str	r2, [r3, #12]
 8002096:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a3e      	ldr	r2, [pc, #248]	; (8002198 <HAL_UART_MspInit+0x118>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d176      	bne.n	8002190 <HAL_UART_MspInit+0x110>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80020a2:	4b3e      	ldr	r3, [pc, #248]	; (800219c <HAL_UART_MspInit+0x11c>)
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	4a3d      	ldr	r2, [pc, #244]	; (800219c <HAL_UART_MspInit+0x11c>)
 80020a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020ac:	61d3      	str	r3, [r2, #28]
 80020ae:	4b3b      	ldr	r3, [pc, #236]	; (800219c <HAL_UART_MspInit+0x11c>)
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020b6:	613b      	str	r3, [r7, #16]
 80020b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ba:	4b38      	ldr	r3, [pc, #224]	; (800219c <HAL_UART_MspInit+0x11c>)
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	4a37      	ldr	r2, [pc, #220]	; (800219c <HAL_UART_MspInit+0x11c>)
 80020c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020c4:	6153      	str	r3, [r2, #20]
 80020c6:	4b35      	ldr	r3, [pc, #212]	; (800219c <HAL_UART_MspInit+0x11c>)
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80020d2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80020d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d8:	2302      	movs	r3, #2
 80020da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020dc:	2300      	movs	r3, #0
 80020de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020e0:	2303      	movs	r3, #3
 80020e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020e4:	2307      	movs	r3, #7
 80020e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e8:	f107 0314 	add.w	r3, r7, #20
 80020ec:	4619      	mov	r1, r3
 80020ee:	482c      	ldr	r0, [pc, #176]	; (80021a0 <HAL_UART_MspInit+0x120>)
 80020f0:	f001 fa04 	bl	80034fc <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80020f4:	4b2b      	ldr	r3, [pc, #172]	; (80021a4 <HAL_UART_MspInit+0x124>)
 80020f6:	4a2c      	ldr	r2, [pc, #176]	; (80021a8 <HAL_UART_MspInit+0x128>)
 80020f8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020fa:	4b2a      	ldr	r3, [pc, #168]	; (80021a4 <HAL_UART_MspInit+0x124>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002100:	4b28      	ldr	r3, [pc, #160]	; (80021a4 <HAL_UART_MspInit+0x124>)
 8002102:	2200      	movs	r2, #0
 8002104:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002106:	4b27      	ldr	r3, [pc, #156]	; (80021a4 <HAL_UART_MspInit+0x124>)
 8002108:	2280      	movs	r2, #128	; 0x80
 800210a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800210c:	4b25      	ldr	r3, [pc, #148]	; (80021a4 <HAL_UART_MspInit+0x124>)
 800210e:	2200      	movs	r2, #0
 8002110:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002112:	4b24      	ldr	r3, [pc, #144]	; (80021a4 <HAL_UART_MspInit+0x124>)
 8002114:	2200      	movs	r2, #0
 8002116:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002118:	4b22      	ldr	r3, [pc, #136]	; (80021a4 <HAL_UART_MspInit+0x124>)
 800211a:	2220      	movs	r2, #32
 800211c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800211e:	4b21      	ldr	r3, [pc, #132]	; (80021a4 <HAL_UART_MspInit+0x124>)
 8002120:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002124:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002126:	481f      	ldr	r0, [pc, #124]	; (80021a4 <HAL_UART_MspInit+0x124>)
 8002128:	f001 f8de 	bl	80032e8 <HAL_DMA_Init>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 8002132:	f7ff febd 	bl	8001eb0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a1a      	ldr	r2, [pc, #104]	; (80021a4 <HAL_UART_MspInit+0x124>)
 800213a:	675a      	str	r2, [r3, #116]	; 0x74
 800213c:	4a19      	ldr	r2, [pc, #100]	; (80021a4 <HAL_UART_MspInit+0x124>)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8002142:	4b1a      	ldr	r3, [pc, #104]	; (80021ac <HAL_UART_MspInit+0x12c>)
 8002144:	4a1a      	ldr	r2, [pc, #104]	; (80021b0 <HAL_UART_MspInit+0x130>)
 8002146:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002148:	4b18      	ldr	r3, [pc, #96]	; (80021ac <HAL_UART_MspInit+0x12c>)
 800214a:	2210      	movs	r2, #16
 800214c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800214e:	4b17      	ldr	r3, [pc, #92]	; (80021ac <HAL_UART_MspInit+0x12c>)
 8002150:	2200      	movs	r2, #0
 8002152:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002154:	4b15      	ldr	r3, [pc, #84]	; (80021ac <HAL_UART_MspInit+0x12c>)
 8002156:	2280      	movs	r2, #128	; 0x80
 8002158:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800215a:	4b14      	ldr	r3, [pc, #80]	; (80021ac <HAL_UART_MspInit+0x12c>)
 800215c:	2200      	movs	r2, #0
 800215e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002160:	4b12      	ldr	r3, [pc, #72]	; (80021ac <HAL_UART_MspInit+0x12c>)
 8002162:	2200      	movs	r2, #0
 8002164:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002166:	4b11      	ldr	r3, [pc, #68]	; (80021ac <HAL_UART_MspInit+0x12c>)
 8002168:	2200      	movs	r2, #0
 800216a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800216c:	4b0f      	ldr	r3, [pc, #60]	; (80021ac <HAL_UART_MspInit+0x12c>)
 800216e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002172:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002174:	480d      	ldr	r0, [pc, #52]	; (80021ac <HAL_UART_MspInit+0x12c>)
 8002176:	f001 f8b7 	bl	80032e8 <HAL_DMA_Init>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <HAL_UART_MspInit+0x104>
    {
      Error_Handler();
 8002180:	f7ff fe96 	bl	8001eb0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a09      	ldr	r2, [pc, #36]	; (80021ac <HAL_UART_MspInit+0x12c>)
 8002188:	671a      	str	r2, [r3, #112]	; 0x70
 800218a:	4a08      	ldr	r2, [pc, #32]	; (80021ac <HAL_UART_MspInit+0x12c>)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002190:	bf00      	nop
 8002192:	3728      	adds	r7, #40	; 0x28
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40004800 	.word	0x40004800
 800219c:	40021000 	.word	0x40021000
 80021a0:	48000400 	.word	0x48000400
 80021a4:	20000900 	.word	0x20000900
 80021a8:	40020030 	.word	0x40020030
 80021ac:	20000944 	.word	0x20000944
 80021b0:	4002001c 	.word	0x4002001c

080021b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b08e      	sub	sp, #56	; 0x38
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80021bc:	2300      	movs	r3, #0
 80021be:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80021c0:	2300      	movs	r3, #0
 80021c2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80021c4:	4b33      	ldr	r3, [pc, #204]	; (8002294 <HAL_InitTick+0xe0>)
 80021c6:	69db      	ldr	r3, [r3, #28]
 80021c8:	4a32      	ldr	r2, [pc, #200]	; (8002294 <HAL_InitTick+0xe0>)
 80021ca:	f043 0310 	orr.w	r3, r3, #16
 80021ce:	61d3      	str	r3, [r2, #28]
 80021d0:	4b30      	ldr	r3, [pc, #192]	; (8002294 <HAL_InitTick+0xe0>)
 80021d2:	69db      	ldr	r3, [r3, #28]
 80021d4:	f003 0310 	and.w	r3, r3, #16
 80021d8:	60fb      	str	r3, [r7, #12]
 80021da:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80021dc:	f107 0210 	add.w	r2, r7, #16
 80021e0:	f107 0314 	add.w	r3, r7, #20
 80021e4:	4611      	mov	r1, r2
 80021e6:	4618      	mov	r0, r3
 80021e8:	f002 fdaa 	bl	8004d40 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80021ec:	6a3b      	ldr	r3, [r7, #32]
 80021ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80021f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d103      	bne.n	80021fe <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80021f6:	f002 fd5f 	bl	8004cb8 <HAL_RCC_GetPCLK1Freq>
 80021fa:	6378      	str	r0, [r7, #52]	; 0x34
 80021fc:	e004      	b.n	8002208 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80021fe:	f002 fd5b 	bl	8004cb8 <HAL_RCC_GetPCLK1Freq>
 8002202:	4603      	mov	r3, r0
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800220a:	4a23      	ldr	r2, [pc, #140]	; (8002298 <HAL_InitTick+0xe4>)
 800220c:	fba2 2303 	umull	r2, r3, r2, r3
 8002210:	0c9b      	lsrs	r3, r3, #18
 8002212:	3b01      	subs	r3, #1
 8002214:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002216:	4b21      	ldr	r3, [pc, #132]	; (800229c <HAL_InitTick+0xe8>)
 8002218:	4a21      	ldr	r2, [pc, #132]	; (80022a0 <HAL_InitTick+0xec>)
 800221a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800221c:	4b1f      	ldr	r3, [pc, #124]	; (800229c <HAL_InitTick+0xe8>)
 800221e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002222:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002224:	4a1d      	ldr	r2, [pc, #116]	; (800229c <HAL_InitTick+0xe8>)
 8002226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002228:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800222a:	4b1c      	ldr	r3, [pc, #112]	; (800229c <HAL_InitTick+0xe8>)
 800222c:	2200      	movs	r2, #0
 800222e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002230:	4b1a      	ldr	r3, [pc, #104]	; (800229c <HAL_InitTick+0xe8>)
 8002232:	2200      	movs	r2, #0
 8002234:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002236:	4b19      	ldr	r3, [pc, #100]	; (800229c <HAL_InitTick+0xe8>)
 8002238:	2200      	movs	r2, #0
 800223a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800223c:	4817      	ldr	r0, [pc, #92]	; (800229c <HAL_InitTick+0xe8>)
 800223e:	f002 ffe0 	bl	8005202 <HAL_TIM_Base_Init>
 8002242:	4603      	mov	r3, r0
 8002244:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002248:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800224c:	2b00      	cmp	r3, #0
 800224e:	d11b      	bne.n	8002288 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002250:	4812      	ldr	r0, [pc, #72]	; (800229c <HAL_InitTick+0xe8>)
 8002252:	f003 f82d 	bl	80052b0 <HAL_TIM_Base_Start_IT>
 8002256:	4603      	mov	r3, r0
 8002258:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800225c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002260:	2b00      	cmp	r3, #0
 8002262:	d111      	bne.n	8002288 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002264:	2036      	movs	r0, #54	; 0x36
 8002266:	f001 f831 	bl	80032cc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2b0f      	cmp	r3, #15
 800226e:	d808      	bhi.n	8002282 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002270:	2200      	movs	r2, #0
 8002272:	6879      	ldr	r1, [r7, #4]
 8002274:	2036      	movs	r0, #54	; 0x36
 8002276:	f001 f80d 	bl	8003294 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800227a:	4a0a      	ldr	r2, [pc, #40]	; (80022a4 <HAL_InitTick+0xf0>)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6013      	str	r3, [r2, #0]
 8002280:	e002      	b.n	8002288 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002288:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800228c:	4618      	mov	r0, r3
 800228e:	3738      	adds	r7, #56	; 0x38
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40021000 	.word	0x40021000
 8002298:	431bde83 	.word	0x431bde83
 800229c:	20000e1c 	.word	0x20000e1c
 80022a0:	40001000 	.word	0x40001000
 80022a4:	20000004 	.word	0x20000004

080022a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022ac:	e7fe      	b.n	80022ac <NMI_Handler+0x4>

080022ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022ae:	b480      	push	{r7}
 80022b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022b2:	e7fe      	b.n	80022b2 <HardFault_Handler+0x4>

080022b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022b8:	e7fe      	b.n	80022b8 <MemManage_Handler+0x4>

080022ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022ba:	b480      	push	{r7}
 80022bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022be:	e7fe      	b.n	80022be <BusFault_Handler+0x4>

080022c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022c4:	e7fe      	b.n	80022c4 <UsageFault_Handler+0x4>

080022c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022c6:	b480      	push	{r7}
 80022c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022ca:	bf00      	nop
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */
	DMA1_Channel2->CCR &= ~DMA_CCR_EN;
 80022d8:	4b08      	ldr	r3, [pc, #32]	; (80022fc <DMA1_Channel2_IRQHandler+0x28>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a07      	ldr	r2, [pc, #28]	; (80022fc <DMA1_Channel2_IRQHandler+0x28>)
 80022de:	f023 0301 	bic.w	r3, r3, #1
 80022e2:	6013      	str	r3, [r2, #0]
	USART3->CR3 &= ~USART_CR3_DMAT;
 80022e4:	4b06      	ldr	r3, [pc, #24]	; (8002300 <DMA1_Channel2_IRQHandler+0x2c>)
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	4a05      	ldr	r2, [pc, #20]	; (8002300 <DMA1_Channel2_IRQHandler+0x2c>)
 80022ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022ee:	6093      	str	r3, [r2, #8]
  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80022f0:	4804      	ldr	r0, [pc, #16]	; (8002304 <DMA1_Channel2_IRQHandler+0x30>)
 80022f2:	f001 f840 	bl	8003376 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	4002001c 	.word	0x4002001c
 8002300:	40004800 	.word	0x40004800
 8002304:	20000944 	.word	0x20000944

08002308 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800230c:	4802      	ldr	r0, [pc, #8]	; (8002318 <DMA1_Channel3_IRQHandler+0x10>)
 800230e:	f001 f832 	bl	8003376 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	20000900 	.word	0x20000900

0800231c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	if((TIM17->SR & TIM_SR_UIF) == TIM_SR_UIF) {
 8002320:	4b0b      	ldr	r3, [pc, #44]	; (8002350 <TIM1_TRG_COM_TIM17_IRQHandler+0x34>)
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	f003 0301 	and.w	r3, r3, #1
 8002328:	2b01      	cmp	r3, #1
 800232a:	d10c      	bne.n	8002346 <TIM1_TRG_COM_TIM17_IRQHandler+0x2a>
		EncoderR.timeNew = -(65535 - EncoderR.timeNew);
 800232c:	4b09      	ldr	r3, [pc, #36]	; (8002354 <TIM1_TRG_COM_TIM17_IRQHandler+0x38>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8002334:	3bff      	subs	r3, #255	; 0xff
 8002336:	4a07      	ldr	r2, [pc, #28]	; (8002354 <TIM1_TRG_COM_TIM17_IRQHandler+0x38>)
 8002338:	6013      	str	r3, [r2, #0]
		TIM17->SR &= ~(TIM_SR_UIF);
 800233a:	4b05      	ldr	r3, [pc, #20]	; (8002350 <TIM1_TRG_COM_TIM17_IRQHandler+0x34>)
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	4a04      	ldr	r2, [pc, #16]	; (8002350 <TIM1_TRG_COM_TIM17_IRQHandler+0x34>)
 8002340:	f023 0301 	bic.w	r3, r3, #1
 8002344:	6113      	str	r3, [r2, #16]
	}

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002346:	4804      	ldr	r0, [pc, #16]	; (8002358 <TIM1_TRG_COM_TIM17_IRQHandler+0x3c>)
 8002348:	f003 f806 	bl	8005358 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800234c:	bf00      	nop
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40014800 	.word	0x40014800
 8002354:	200009c8 	.word	0x200009c8
 8002358:	2000082c 	.word	0x2000082c

0800235c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002360:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002364:	f001 fa54 	bl	8003810 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002368:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800236c:	f001 fa50 	bl	8003810 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002370:	bf00      	nop
 8002372:	bd80      	pop	{r7, pc}

08002374 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002378:	4802      	ldr	r0, [pc, #8]	; (8002384 <TIM6_DAC_IRQHandler+0x10>)
 800237a:	f002 ffed 	bl	8005358 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800237e:	bf00      	nop
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20000e1c 	.word	0x20000e1c

08002388 <DMA1_Channel1_IRQHandler>:

/* USER CODE BEGIN 1 */
void DMA1_Channel1_IRQHandler(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
	__asm__ volatile("NOP");
 800238c:	bf00      	nop
	DMA1->IFCR |= DMA_IFCR_CGIF1;
 800238e:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <DMA1_Channel1_IRQHandler+0x20>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	4a05      	ldr	r2, [pc, #20]	; (80023a8 <DMA1_Channel1_IRQHandler+0x20>)
 8002394:	f043 0301 	orr.w	r3, r3, #1
 8002398:	6053      	str	r3, [r2, #4]
	__asm__ volatile("NOP");
 800239a:	bf00      	nop
}
 800239c:	bf00      	nop
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	40020000 	.word	0x40020000

080023ac <ADC1_IRQHandler>:

void ADC1_IRQHandler(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
	__asm__ volatile("NOP");
 80023b0:	bf00      	nop
	ADC1->ISR |= ADC_ISR_AWD1;
 80023b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80023bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023c0:	6013      	str	r3, [r2, #0]
	__asm__ volatile("NOP");
 80023c2:	bf00      	nop
}
 80023c4:	bf00      	nop
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
	...

080023d0 <TIM1_UP_TIM16_IRQHandler>:

void TIM1_UP_TIM16_IRQHandler(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
	if((TIM1->SR & TIM_SR_UIF) == TIM_SR_UIF) {
 80023d4:	4b8c      	ldr	r3, [pc, #560]	; (8002608 <TIM1_UP_TIM16_IRQHandler+0x238>)
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d108      	bne.n	80023f2 <TIM1_UP_TIM16_IRQHandler+0x22>
		EncoderR.posCntUpdate = 1;
 80023e0:	4b8a      	ldr	r3, [pc, #552]	; (800260c <TIM1_UP_TIM16_IRQHandler+0x23c>)
 80023e2:	2201      	movs	r2, #1
 80023e4:	741a      	strb	r2, [r3, #16]
		TIM1->SR &= ~(TIM_SR_UIF);
 80023e6:	4b88      	ldr	r3, [pc, #544]	; (8002608 <TIM1_UP_TIM16_IRQHandler+0x238>)
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	4a87      	ldr	r2, [pc, #540]	; (8002608 <TIM1_UP_TIM16_IRQHandler+0x238>)
 80023ec:	f023 0301 	bic.w	r3, r3, #1
 80023f0:	6113      	str	r3, [r2, #16]
	}
	if((TIM16->SR & TIM_SR_UIF) == TIM_SR_UIF) {
 80023f2:	4b87      	ldr	r3, [pc, #540]	; (8002610 <TIM1_UP_TIM16_IRQHandler+0x240>)
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	f040 80ff 	bne.w	80025fe <TIM1_UP_TIM16_IRQHandler+0x22e>
		softCounterValue++;
 8002400:	4b84      	ldr	r3, [pc, #528]	; (8002614 <TIM1_UP_TIM16_IRQHandler+0x244>)
 8002402:	881b      	ldrh	r3, [r3, #0]
 8002404:	3301      	adds	r3, #1
 8002406:	b29a      	uxth	r2, r3
 8002408:	4b82      	ldr	r3, [pc, #520]	; (8002614 <TIM1_UP_TIM16_IRQHandler+0x244>)
 800240a:	801a      	strh	r2, [r3, #0]

		if(softCounterValue >= 100) {
 800240c:	4b81      	ldr	r3, [pc, #516]	; (8002614 <TIM1_UP_TIM16_IRQHandler+0x244>)
 800240e:	881b      	ldrh	r3, [r3, #0]
 8002410:	2b63      	cmp	r3, #99	; 0x63
 8002412:	d902      	bls.n	800241a <TIM1_UP_TIM16_IRQHandler+0x4a>
			softCounterValue = 0;
 8002414:	4b7f      	ldr	r3, [pc, #508]	; (8002614 <TIM1_UP_TIM16_IRQHandler+0x244>)
 8002416:	2200      	movs	r2, #0
 8002418:	801a      	strh	r2, [r3, #0]
		}

		if(SoftPwmR.pwmValue >= 0) {
 800241a:	4b7f      	ldr	r3, [pc, #508]	; (8002618 <TIM1_UP_TIM16_IRQHandler+0x248>)
 800241c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002420:	2b00      	cmp	r3, #0
 8002422:	db33      	blt.n	800248c <TIM1_UP_TIM16_IRQHandler+0xbc>
			if(softCounterValue < SoftPwmR.pwmValue) {
 8002424:	4b7b      	ldr	r3, [pc, #492]	; (8002614 <TIM1_UP_TIM16_IRQHandler+0x244>)
 8002426:	881b      	ldrh	r3, [r3, #0]
 8002428:	461a      	mov	r2, r3
 800242a:	4b7b      	ldr	r3, [pc, #492]	; (8002618 <TIM1_UP_TIM16_IRQHandler+0x248>)
 800242c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002430:	429a      	cmp	r2, r3
 8002432:	da15      	bge.n	8002460 <TIM1_UP_TIM16_IRQHandler+0x90>
				if(SoftPwmR.status != 1) {
 8002434:	4b78      	ldr	r3, [pc, #480]	; (8002618 <TIM1_UP_TIM16_IRQHandler+0x248>)
 8002436:	799b      	ldrb	r3, [r3, #6]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d060      	beq.n	80024fe <TIM1_UP_TIM16_IRQHandler+0x12e>
					GPIOA->ODR &= ~(1<<7); //_3A
 800243c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002446:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800244a:	6153      	str	r3, [r2, #20]
					GPIOB->ODR |= (1<<0); //_4A
 800244c:	4b73      	ldr	r3, [pc, #460]	; (800261c <TIM1_UP_TIM16_IRQHandler+0x24c>)
 800244e:	695b      	ldr	r3, [r3, #20]
 8002450:	4a72      	ldr	r2, [pc, #456]	; (800261c <TIM1_UP_TIM16_IRQHandler+0x24c>)
 8002452:	f043 0301 	orr.w	r3, r3, #1
 8002456:	6153      	str	r3, [r2, #20]
					SoftPwmR.status = 1;
 8002458:	4b6f      	ldr	r3, [pc, #444]	; (8002618 <TIM1_UP_TIM16_IRQHandler+0x248>)
 800245a:	2201      	movs	r2, #1
 800245c:	719a      	strb	r2, [r3, #6]
 800245e:	e04e      	b.n	80024fe <TIM1_UP_TIM16_IRQHandler+0x12e>
				}
			} else {
				if(SoftPwmR.status != 0) {
 8002460:	4b6d      	ldr	r3, [pc, #436]	; (8002618 <TIM1_UP_TIM16_IRQHandler+0x248>)
 8002462:	799b      	ldrb	r3, [r3, #6]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d04a      	beq.n	80024fe <TIM1_UP_TIM16_IRQHandler+0x12e>
					GPIOA->ODR &= ~(1<<7); //_3A
 8002468:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800246c:	695b      	ldr	r3, [r3, #20]
 800246e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002472:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002476:	6153      	str	r3, [r2, #20]
					GPIOB->ODR &= ~(1<<0); //_4A
 8002478:	4b68      	ldr	r3, [pc, #416]	; (800261c <TIM1_UP_TIM16_IRQHandler+0x24c>)
 800247a:	695b      	ldr	r3, [r3, #20]
 800247c:	4a67      	ldr	r2, [pc, #412]	; (800261c <TIM1_UP_TIM16_IRQHandler+0x24c>)
 800247e:	f023 0301 	bic.w	r3, r3, #1
 8002482:	6153      	str	r3, [r2, #20]
					SoftPwmR.status = 0;
 8002484:	4b64      	ldr	r3, [pc, #400]	; (8002618 <TIM1_UP_TIM16_IRQHandler+0x248>)
 8002486:	2200      	movs	r2, #0
 8002488:	719a      	strb	r2, [r3, #6]
 800248a:	e038      	b.n	80024fe <TIM1_UP_TIM16_IRQHandler+0x12e>
				}
			}
		} else if(SoftPwmR.pwmValue < 0) {
 800248c:	4b62      	ldr	r3, [pc, #392]	; (8002618 <TIM1_UP_TIM16_IRQHandler+0x248>)
 800248e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	da33      	bge.n	80024fe <TIM1_UP_TIM16_IRQHandler+0x12e>
			if(softCounterValue < (-SoftPwmR.pwmValue)) {
 8002496:	4b5f      	ldr	r3, [pc, #380]	; (8002614 <TIM1_UP_TIM16_IRQHandler+0x244>)
 8002498:	881b      	ldrh	r3, [r3, #0]
 800249a:	461a      	mov	r2, r3
 800249c:	4b5e      	ldr	r3, [pc, #376]	; (8002618 <TIM1_UP_TIM16_IRQHandler+0x248>)
 800249e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80024a2:	425b      	negs	r3, r3
 80024a4:	429a      	cmp	r2, r3
 80024a6:	da15      	bge.n	80024d4 <TIM1_UP_TIM16_IRQHandler+0x104>
				if(SoftPwmR.status != 2) {
 80024a8:	4b5b      	ldr	r3, [pc, #364]	; (8002618 <TIM1_UP_TIM16_IRQHandler+0x248>)
 80024aa:	799b      	ldrb	r3, [r3, #6]
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d026      	beq.n	80024fe <TIM1_UP_TIM16_IRQHandler+0x12e>
					GPIOA->ODR |= (1<<7); //_3A
 80024b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80024b4:	695b      	ldr	r3, [r3, #20]
 80024b6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80024ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024be:	6153      	str	r3, [r2, #20]
					GPIOB->ODR &= ~(1<<0); //_4A
 80024c0:	4b56      	ldr	r3, [pc, #344]	; (800261c <TIM1_UP_TIM16_IRQHandler+0x24c>)
 80024c2:	695b      	ldr	r3, [r3, #20]
 80024c4:	4a55      	ldr	r2, [pc, #340]	; (800261c <TIM1_UP_TIM16_IRQHandler+0x24c>)
 80024c6:	f023 0301 	bic.w	r3, r3, #1
 80024ca:	6153      	str	r3, [r2, #20]
					SoftPwmR.status = 2;
 80024cc:	4b52      	ldr	r3, [pc, #328]	; (8002618 <TIM1_UP_TIM16_IRQHandler+0x248>)
 80024ce:	2202      	movs	r2, #2
 80024d0:	719a      	strb	r2, [r3, #6]
 80024d2:	e014      	b.n	80024fe <TIM1_UP_TIM16_IRQHandler+0x12e>
				}
			} else {
				if(SoftPwmR.status != 0) {
 80024d4:	4b50      	ldr	r3, [pc, #320]	; (8002618 <TIM1_UP_TIM16_IRQHandler+0x248>)
 80024d6:	799b      	ldrb	r3, [r3, #6]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d010      	beq.n	80024fe <TIM1_UP_TIM16_IRQHandler+0x12e>
					GPIOA->ODR &= ~(1<<7); //_3A
 80024dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80024e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024ea:	6153      	str	r3, [r2, #20]
					GPIOB->ODR &= ~(1<<0); //_4A
 80024ec:	4b4b      	ldr	r3, [pc, #300]	; (800261c <TIM1_UP_TIM16_IRQHandler+0x24c>)
 80024ee:	695b      	ldr	r3, [r3, #20]
 80024f0:	4a4a      	ldr	r2, [pc, #296]	; (800261c <TIM1_UP_TIM16_IRQHandler+0x24c>)
 80024f2:	f023 0301 	bic.w	r3, r3, #1
 80024f6:	6153      	str	r3, [r2, #20]
					SoftPwmR.status = 0;
 80024f8:	4b47      	ldr	r3, [pc, #284]	; (8002618 <TIM1_UP_TIM16_IRQHandler+0x248>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	719a      	strb	r2, [r3, #6]
				}
			}
		}

		if(SoftPwmL.pwmValue >= 0) {
 80024fe:	4b48      	ldr	r3, [pc, #288]	; (8002620 <TIM1_UP_TIM16_IRQHandler+0x250>)
 8002500:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	db37      	blt.n	8002578 <TIM1_UP_TIM16_IRQHandler+0x1a8>
			if(softCounterValue < SoftPwmL.pwmValue) {
 8002508:	4b42      	ldr	r3, [pc, #264]	; (8002614 <TIM1_UP_TIM16_IRQHandler+0x244>)
 800250a:	881b      	ldrh	r3, [r3, #0]
 800250c:	461a      	mov	r2, r3
 800250e:	4b44      	ldr	r3, [pc, #272]	; (8002620 <TIM1_UP_TIM16_IRQHandler+0x250>)
 8002510:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002514:	429a      	cmp	r2, r3
 8002516:	da17      	bge.n	8002548 <TIM1_UP_TIM16_IRQHandler+0x178>
				if(SoftPwmL.status != 1) {
 8002518:	4b41      	ldr	r3, [pc, #260]	; (8002620 <TIM1_UP_TIM16_IRQHandler+0x250>)
 800251a:	799b      	ldrb	r3, [r3, #6]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d068      	beq.n	80025f2 <TIM1_UP_TIM16_IRQHandler+0x222>
					GPIOA->ODR &= ~(1<<4); //_1A
 8002520:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800252a:	f023 0310 	bic.w	r3, r3, #16
 800252e:	6153      	str	r3, [r2, #20]
					GPIOA->ODR |= (1<<5); //_2A
 8002530:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800253a:	f043 0320 	orr.w	r3, r3, #32
 800253e:	6153      	str	r3, [r2, #20]
					SoftPwmL.status = 1;
 8002540:	4b37      	ldr	r3, [pc, #220]	; (8002620 <TIM1_UP_TIM16_IRQHandler+0x250>)
 8002542:	2201      	movs	r2, #1
 8002544:	719a      	strb	r2, [r3, #6]
 8002546:	e054      	b.n	80025f2 <TIM1_UP_TIM16_IRQHandler+0x222>
				}
			} else {
				if(SoftPwmL.status != 0) {
 8002548:	4b35      	ldr	r3, [pc, #212]	; (8002620 <TIM1_UP_TIM16_IRQHandler+0x250>)
 800254a:	799b      	ldrb	r3, [r3, #6]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d050      	beq.n	80025f2 <TIM1_UP_TIM16_IRQHandler+0x222>
					GPIOA->ODR &= ~(1<<4); //_1A
 8002550:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800255a:	f023 0310 	bic.w	r3, r3, #16
 800255e:	6153      	str	r3, [r2, #20]
					GPIOA->ODR &= ~(1<<5); //_2A
 8002560:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800256a:	f023 0320 	bic.w	r3, r3, #32
 800256e:	6153      	str	r3, [r2, #20]
					SoftPwmL.status = 0;
 8002570:	4b2b      	ldr	r3, [pc, #172]	; (8002620 <TIM1_UP_TIM16_IRQHandler+0x250>)
 8002572:	2200      	movs	r2, #0
 8002574:	719a      	strb	r2, [r3, #6]
 8002576:	e03c      	b.n	80025f2 <TIM1_UP_TIM16_IRQHandler+0x222>
				}
			}
		} else if(SoftPwmL.pwmValue < 0) {
 8002578:	4b29      	ldr	r3, [pc, #164]	; (8002620 <TIM1_UP_TIM16_IRQHandler+0x250>)
 800257a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	da37      	bge.n	80025f2 <TIM1_UP_TIM16_IRQHandler+0x222>
			if(softCounterValue < (-SoftPwmL.pwmValue)) {
 8002582:	4b24      	ldr	r3, [pc, #144]	; (8002614 <TIM1_UP_TIM16_IRQHandler+0x244>)
 8002584:	881b      	ldrh	r3, [r3, #0]
 8002586:	461a      	mov	r2, r3
 8002588:	4b25      	ldr	r3, [pc, #148]	; (8002620 <TIM1_UP_TIM16_IRQHandler+0x250>)
 800258a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800258e:	425b      	negs	r3, r3
 8002590:	429a      	cmp	r2, r3
 8002592:	da17      	bge.n	80025c4 <TIM1_UP_TIM16_IRQHandler+0x1f4>
				if(SoftPwmL.status != 2) {
 8002594:	4b22      	ldr	r3, [pc, #136]	; (8002620 <TIM1_UP_TIM16_IRQHandler+0x250>)
 8002596:	799b      	ldrb	r3, [r3, #6]
 8002598:	2b02      	cmp	r3, #2
 800259a:	d02a      	beq.n	80025f2 <TIM1_UP_TIM16_IRQHandler+0x222>
					GPIOA->ODR |= (1<<4); //_1A
 800259c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80025a6:	f043 0310 	orr.w	r3, r3, #16
 80025aa:	6153      	str	r3, [r2, #20]
					GPIOA->ODR &= ~(1<<5); //_2A
 80025ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80025b6:	f023 0320 	bic.w	r3, r3, #32
 80025ba:	6153      	str	r3, [r2, #20]
					SoftPwmL.status = 2;
 80025bc:	4b18      	ldr	r3, [pc, #96]	; (8002620 <TIM1_UP_TIM16_IRQHandler+0x250>)
 80025be:	2202      	movs	r2, #2
 80025c0:	719a      	strb	r2, [r3, #6]
 80025c2:	e016      	b.n	80025f2 <TIM1_UP_TIM16_IRQHandler+0x222>
				}
			} else {
				if(SoftPwmL.status != 0) {
 80025c4:	4b16      	ldr	r3, [pc, #88]	; (8002620 <TIM1_UP_TIM16_IRQHandler+0x250>)
 80025c6:	799b      	ldrb	r3, [r3, #6]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d012      	beq.n	80025f2 <TIM1_UP_TIM16_IRQHandler+0x222>
					GPIOA->ODR &= ~(1<<4); //_1A
 80025cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80025d6:	f023 0310 	bic.w	r3, r3, #16
 80025da:	6153      	str	r3, [r2, #20]
					GPIOA->ODR &= ~(1<<5); //_2A
 80025dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80025e6:	f023 0320 	bic.w	r3, r3, #32
 80025ea:	6153      	str	r3, [r2, #20]
					SoftPwmL.status = 0;
 80025ec:	4b0c      	ldr	r3, [pc, #48]	; (8002620 <TIM1_UP_TIM16_IRQHandler+0x250>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	719a      	strb	r2, [r3, #6]
				}
			}
		}

		TIM16->SR &= ~(TIM_SR_UIF);
 80025f2:	4b07      	ldr	r3, [pc, #28]	; (8002610 <TIM1_UP_TIM16_IRQHandler+0x240>)
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	4a06      	ldr	r2, [pc, #24]	; (8002610 <TIM1_UP_TIM16_IRQHandler+0x240>)
 80025f8:	f023 0301 	bic.w	r3, r3, #1
 80025fc:	6113      	str	r3, [r2, #16]
	}

}
 80025fe:	bf00      	nop
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr
 8002608:	40012c00 	.word	0x40012c00
 800260c:	200009c8 	.word	0x200009c8
 8002610:	40014400 	.word	0x40014400
 8002614:	20000a0c 	.word	0x20000a0c
 8002618:	200009f8 	.word	0x200009f8
 800261c:	48000400 	.word	0x48000400
 8002620:	20000a00 	.word	0x20000a00

08002624 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
	__asm__ volatile("NOP");
 8002628:	bf00      	nop
	EncoderL.posCntUpdate = 1;
 800262a:	4b08      	ldr	r3, [pc, #32]	; (800264c <TIM2_IRQHandler+0x28>)
 800262c:	2201      	movs	r2, #1
 800262e:	741a      	strb	r2, [r3, #16]
	TIM2->SR &= ~(TIM_SR_UIF);
 8002630:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800263a:	f023 0301 	bic.w	r3, r3, #1
 800263e:	6113      	str	r3, [r2, #16]
	__asm__ volatile("NOP");
 8002640:	bf00      	nop
}
 8002642:	bf00      	nop
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	200009e0 	.word	0x200009e0

08002650 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002658:	4a14      	ldr	r2, [pc, #80]	; (80026ac <_sbrk+0x5c>)
 800265a:	4b15      	ldr	r3, [pc, #84]	; (80026b0 <_sbrk+0x60>)
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002664:	4b13      	ldr	r3, [pc, #76]	; (80026b4 <_sbrk+0x64>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d102      	bne.n	8002672 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800266c:	4b11      	ldr	r3, [pc, #68]	; (80026b4 <_sbrk+0x64>)
 800266e:	4a12      	ldr	r2, [pc, #72]	; (80026b8 <_sbrk+0x68>)
 8002670:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002672:	4b10      	ldr	r3, [pc, #64]	; (80026b4 <_sbrk+0x64>)
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4413      	add	r3, r2
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	429a      	cmp	r2, r3
 800267e:	d207      	bcs.n	8002690 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002680:	f006 fb6c 	bl	8008d5c <__errno>
 8002684:	4603      	mov	r3, r0
 8002686:	220c      	movs	r2, #12
 8002688:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800268a:	f04f 33ff 	mov.w	r3, #4294967295
 800268e:	e009      	b.n	80026a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002690:	4b08      	ldr	r3, [pc, #32]	; (80026b4 <_sbrk+0x64>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002696:	4b07      	ldr	r3, [pc, #28]	; (80026b4 <_sbrk+0x64>)
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4413      	add	r3, r2
 800269e:	4a05      	ldr	r2, [pc, #20]	; (80026b4 <_sbrk+0x64>)
 80026a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026a2:	68fb      	ldr	r3, [r7, #12]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3718      	adds	r7, #24
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	20004000 	.word	0x20004000
 80026b0:	00000400 	.word	0x00000400
 80026b4:	20000e68 	.word	0x20000e68
 80026b8:	20003268 	.word	0x20003268

080026bc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026c0:	4b06      	ldr	r3, [pc, #24]	; (80026dc <SystemInit+0x20>)
 80026c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c6:	4a05      	ldr	r2, [pc, #20]	; (80026dc <SystemInit+0x20>)
 80026c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026d0:	bf00      	nop
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	e000ed00 	.word	0xe000ed00

080026e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80026e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002718 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80026e4:	f7ff ffea 	bl	80026bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026e8:	480c      	ldr	r0, [pc, #48]	; (800271c <LoopForever+0x6>)
  ldr r1, =_edata
 80026ea:	490d      	ldr	r1, [pc, #52]	; (8002720 <LoopForever+0xa>)
  ldr r2, =_sidata
 80026ec:	4a0d      	ldr	r2, [pc, #52]	; (8002724 <LoopForever+0xe>)
  movs r3, #0
 80026ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026f0:	e002      	b.n	80026f8 <LoopCopyDataInit>

080026f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026f6:	3304      	adds	r3, #4

080026f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026fc:	d3f9      	bcc.n	80026f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026fe:	4a0a      	ldr	r2, [pc, #40]	; (8002728 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002700:	4c0a      	ldr	r4, [pc, #40]	; (800272c <LoopForever+0x16>)
  movs r3, #0
 8002702:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002704:	e001      	b.n	800270a <LoopFillZerobss>

08002706 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002706:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002708:	3204      	adds	r2, #4

0800270a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800270a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800270c:	d3fb      	bcc.n	8002706 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800270e:	f006 fb2b 	bl	8008d68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002712:	f7fd fee1 	bl	80004d8 <main>

08002716 <LoopForever>:

LoopForever:
    b LoopForever
 8002716:	e7fe      	b.n	8002716 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002718:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800271c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002720:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002724:	08009a20 	.word	0x08009a20
  ldr r2, =_sbss
 8002728:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800272c:	20003268 	.word	0x20003268

08002730 <COMP2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002730:	e7fe      	b.n	8002730 <COMP2_IRQHandler>
	...

08002734 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002738:	4b08      	ldr	r3, [pc, #32]	; (800275c <HAL_Init+0x28>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a07      	ldr	r2, [pc, #28]	; (800275c <HAL_Init+0x28>)
 800273e:	f043 0310 	orr.w	r3, r3, #16
 8002742:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002744:	2003      	movs	r0, #3
 8002746:	f000 fd9a 	bl	800327e <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800274a:	2004      	movs	r0, #4
 800274c:	f7ff fd32 	bl	80021b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002750:	f7ff fbb4 	bl	8001ebc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	40022000 	.word	0x40022000

08002760 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002764:	4b06      	ldr	r3, [pc, #24]	; (8002780 <HAL_IncTick+0x20>)
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	461a      	mov	r2, r3
 800276a:	4b06      	ldr	r3, [pc, #24]	; (8002784 <HAL_IncTick+0x24>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4413      	add	r3, r2
 8002770:	4a04      	ldr	r2, [pc, #16]	; (8002784 <HAL_IncTick+0x24>)
 8002772:	6013      	str	r3, [r2, #0]
}
 8002774:	bf00      	nop
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	20000008 	.word	0x20000008
 8002784:	20000e6c 	.word	0x20000e6c

08002788 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  return uwTick;  
 800278c:	4b03      	ldr	r3, [pc, #12]	; (800279c <HAL_GetTick+0x14>)
 800278e:	681b      	ldr	r3, [r3, #0]
}
 8002790:	4618      	mov	r0, r3
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	20000e6c 	.word	0x20000e6c

080027a0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027a8:	f7ff ffee 	bl	8002788 <HAL_GetTick>
 80027ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b8:	d005      	beq.n	80027c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027ba:	4b0a      	ldr	r3, [pc, #40]	; (80027e4 <HAL_Delay+0x44>)
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	461a      	mov	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	4413      	add	r3, r2
 80027c4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80027c6:	bf00      	nop
 80027c8:	f7ff ffde 	bl	8002788 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d8f7      	bhi.n	80027c8 <HAL_Delay+0x28>
  {
  }
}
 80027d8:	bf00      	nop
 80027da:	bf00      	nop
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	20000008 	.word	0x20000008

080027e8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b09a      	sub	sp, #104	; 0x68
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027f0:	2300      	movs	r3, #0
 80027f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80027f6:	2300      	movs	r3, #0
 80027f8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80027fa:	2300      	movs	r3, #0
 80027fc:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d101      	bne.n	8002808 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e169      	b.n	8002adc <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	691b      	ldr	r3, [r3, #16]
 800280c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	f003 0310 	and.w	r3, r3, #16
 8002816:	2b00      	cmp	r3, #0
 8002818:	d176      	bne.n	8002908 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	2b00      	cmp	r3, #0
 8002820:	d152      	bne.n	80028c8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f7ff fb65 	bl	8001f0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d13b      	bne.n	80028c8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f000 fc01 	bl	8003058 <ADC_Disable>
 8002856:	4603      	mov	r3, r0
 8002858:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002860:	f003 0310 	and.w	r3, r3, #16
 8002864:	2b00      	cmp	r3, #0
 8002866:	d12f      	bne.n	80028c8 <HAL_ADC_Init+0xe0>
 8002868:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800286c:	2b00      	cmp	r3, #0
 800286e:	d12b      	bne.n	80028c8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002874:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002878:	f023 0302 	bic.w	r3, r3, #2
 800287c:	f043 0202 	orr.w	r2, r3, #2
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689a      	ldr	r2, [r3, #8]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002892:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689a      	ldr	r2, [r3, #8]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80028a2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80028a4:	4b8f      	ldr	r3, [pc, #572]	; (8002ae4 <HAL_ADC_Init+0x2fc>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a8f      	ldr	r2, [pc, #572]	; (8002ae8 <HAL_ADC_Init+0x300>)
 80028aa:	fba2 2303 	umull	r2, r3, r2, r3
 80028ae:	0c9a      	lsrs	r2, r3, #18
 80028b0:	4613      	mov	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	4413      	add	r3, r2
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80028ba:	e002      	b.n	80028c2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	3b01      	subs	r3, #1
 80028c0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d1f9      	bne.n	80028bc <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d007      	beq.n	80028e6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80028e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028e4:	d110      	bne.n	8002908 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	f023 0312 	bic.w	r3, r3, #18
 80028ee:	f043 0210 	orr.w	r2, r3, #16
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fa:	f043 0201 	orr.w	r2, r3, #1
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290c:	f003 0310 	and.w	r3, r3, #16
 8002910:	2b00      	cmp	r3, #0
 8002912:	f040 80d6 	bne.w	8002ac2 <HAL_ADC_Init+0x2da>
 8002916:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800291a:	2b00      	cmp	r3, #0
 800291c:	f040 80d1 	bne.w	8002ac2 <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800292a:	2b00      	cmp	r3, #0
 800292c:	f040 80c9 	bne.w	8002ac2 <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002934:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002938:	f043 0202 	orr.w	r2, r3, #2
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002940:	4b6a      	ldr	r3, [pc, #424]	; (8002aec <HAL_ADC_Init+0x304>)
 8002942:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002944:	2300      	movs	r3, #0
 8002946:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f003 0303 	and.w	r3, r3, #3
 8002952:	2b01      	cmp	r3, #1
 8002954:	d108      	bne.n	8002968 <HAL_ADC_Init+0x180>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	2b01      	cmp	r3, #1
 8002962:	d101      	bne.n	8002968 <HAL_ADC_Init+0x180>
 8002964:	2301      	movs	r3, #1
 8002966:	e000      	b.n	800296a <HAL_ADC_Init+0x182>
 8002968:	2300      	movs	r3, #0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d11c      	bne.n	80029a8 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800296e:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002970:	2b00      	cmp	r3, #0
 8002972:	d010      	beq.n	8002996 <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f003 0303 	and.w	r3, r3, #3
 800297c:	2b01      	cmp	r3, #1
 800297e:	d107      	bne.n	8002990 <HAL_ADC_Init+0x1a8>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	2b01      	cmp	r3, #1
 800298a:	d101      	bne.n	8002990 <HAL_ADC_Init+0x1a8>
 800298c:	2301      	movs	r3, #1
 800298e:	e000      	b.n	8002992 <HAL_ADC_Init+0x1aa>
 8002990:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002992:	2b00      	cmp	r3, #0
 8002994:	d108      	bne.n	80029a8 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002996:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	431a      	orrs	r2, r3
 80029a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029a6:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	7e5b      	ldrb	r3, [r3, #25]
 80029ac:	035b      	lsls	r3, r3, #13
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029b2:	2a01      	cmp	r2, #1
 80029b4:	d002      	beq.n	80029bc <HAL_ADC_Init+0x1d4>
 80029b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80029ba:	e000      	b.n	80029be <HAL_ADC_Init+0x1d6>
 80029bc:	2200      	movs	r2, #0
 80029be:	431a      	orrs	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	431a      	orrs	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80029ce:	4313      	orrs	r3, r2
 80029d0:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d11b      	bne.n	8002a14 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	7e5b      	ldrb	r3, [r3, #25]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d109      	bne.n	80029f8 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e8:	3b01      	subs	r3, #1
 80029ea:	045a      	lsls	r2, r3, #17
 80029ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029ee:	4313      	orrs	r3, r2
 80029f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029f4:	663b      	str	r3, [r7, #96]	; 0x60
 80029f6:	e00d      	b.n	8002a14 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fc:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002a00:	f043 0220 	orr.w	r2, r3, #32
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0c:	f043 0201 	orr.w	r2, r3, #1
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d007      	beq.n	8002a2c <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a24:	4313      	orrs	r3, r2
 8002a26:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f003 030c 	and.w	r3, r3, #12
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d114      	bne.n	8002a64 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	6812      	ldr	r2, [r2, #0]
 8002a44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a48:	f023 0302 	bic.w	r3, r3, #2
 8002a4c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	7e1b      	ldrb	r3, [r3, #24]
 8002a52:	039a      	lsls	r2, r3, #14
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a60:	4313      	orrs	r3, r2
 8002a62:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68da      	ldr	r2, [r3, #12]
 8002a6a:	4b21      	ldr	r3, [pc, #132]	; (8002af0 <HAL_ADC_Init+0x308>)
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	6812      	ldr	r2, [r2, #0]
 8002a72:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002a74:	430b      	orrs	r3, r1
 8002a76:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d10c      	bne.n	8002a9a <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a86:	f023 010f 	bic.w	r1, r3, #15
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	69db      	ldr	r3, [r3, #28]
 8002a8e:	1e5a      	subs	r2, r3, #1
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	430a      	orrs	r2, r1
 8002a96:	631a      	str	r2, [r3, #48]	; 0x30
 8002a98:	e007      	b.n	8002aaa <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f022 020f 	bic.w	r2, r2, #15
 8002aa8:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab4:	f023 0303 	bic.w	r3, r3, #3
 8002ab8:	f043 0201 	orr.w	r2, r3, #1
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	641a      	str	r2, [r3, #64]	; 0x40
 8002ac0:	e00a      	b.n	8002ad8 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	f023 0312 	bic.w	r3, r3, #18
 8002aca:	f043 0210 	orr.w	r2, r3, #16
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002ad8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3768      	adds	r7, #104	; 0x68
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	20000000 	.word	0x20000000
 8002ae8:	431bde83 	.word	0x431bde83
 8002aec:	50000300 	.word	0x50000300
 8002af0:	fff0c007 	.word	0xfff0c007

08002af4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b09b      	sub	sp, #108	; 0x6c
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002afe:	2300      	movs	r3, #0
 8002b00:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002b04:	2300      	movs	r3, #0
 8002b06:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d101      	bne.n	8002b16 <HAL_ADC_ConfigChannel+0x22>
 8002b12:	2302      	movs	r3, #2
 8002b14:	e295      	b.n	8003042 <HAL_ADC_ConfigChannel+0x54e>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f003 0304 	and.w	r3, r3, #4
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f040 8279 	bne.w	8003020 <HAL_ADC_ConfigChannel+0x52c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	d81c      	bhi.n	8002b70 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685a      	ldr	r2, [r3, #4]
 8002b40:	4613      	mov	r3, r2
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	4413      	add	r3, r2
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	461a      	mov	r2, r3
 8002b4a:	231f      	movs	r3, #31
 8002b4c:	4093      	lsls	r3, r2
 8002b4e:	43db      	mvns	r3, r3
 8002b50:	4019      	ands	r1, r3
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	6818      	ldr	r0, [r3, #0]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685a      	ldr	r2, [r3, #4]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	4413      	add	r3, r2
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	fa00 f203 	lsl.w	r2, r0, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	631a      	str	r2, [r3, #48]	; 0x30
 8002b6e:	e063      	b.n	8002c38 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	2b09      	cmp	r3, #9
 8002b76:	d81e      	bhi.n	8002bb6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685a      	ldr	r2, [r3, #4]
 8002b82:	4613      	mov	r3, r2
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	4413      	add	r3, r2
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	3b1e      	subs	r3, #30
 8002b8c:	221f      	movs	r2, #31
 8002b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b92:	43db      	mvns	r3, r3
 8002b94:	4019      	ands	r1, r3
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	6818      	ldr	r0, [r3, #0]
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685a      	ldr	r2, [r3, #4]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	4413      	add	r3, r2
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	3b1e      	subs	r3, #30
 8002ba8:	fa00 f203 	lsl.w	r2, r0, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	635a      	str	r2, [r3, #52]	; 0x34
 8002bb4:	e040      	b.n	8002c38 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2b0e      	cmp	r3, #14
 8002bbc:	d81e      	bhi.n	8002bfc <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685a      	ldr	r2, [r3, #4]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	4413      	add	r3, r2
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	3b3c      	subs	r3, #60	; 0x3c
 8002bd2:	221f      	movs	r2, #31
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	4019      	ands	r1, r3
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	6818      	ldr	r0, [r3, #0]
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685a      	ldr	r2, [r3, #4]
 8002be4:	4613      	mov	r3, r2
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	4413      	add	r3, r2
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	3b3c      	subs	r3, #60	; 0x3c
 8002bee:	fa00 f203 	lsl.w	r2, r0, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	639a      	str	r2, [r3, #56]	; 0x38
 8002bfa:	e01d      	b.n	8002c38 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685a      	ldr	r2, [r3, #4]
 8002c06:	4613      	mov	r3, r2
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	4413      	add	r3, r2
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	3b5a      	subs	r3, #90	; 0x5a
 8002c10:	221f      	movs	r2, #31
 8002c12:	fa02 f303 	lsl.w	r3, r2, r3
 8002c16:	43db      	mvns	r3, r3
 8002c18:	4019      	ands	r1, r3
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	6818      	ldr	r0, [r3, #0]
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685a      	ldr	r2, [r3, #4]
 8002c22:	4613      	mov	r3, r2
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	4413      	add	r3, r2
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	3b5a      	subs	r3, #90	; 0x5a
 8002c2c:	fa00 f203 	lsl.w	r2, r0, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	430a      	orrs	r2, r1
 8002c36:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f003 030c 	and.w	r3, r3, #12
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f040 80e5 	bne.w	8002e12 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2b09      	cmp	r3, #9
 8002c4e:	d91c      	bls.n	8002c8a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6999      	ldr	r1, [r3, #24]
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	4413      	add	r3, r2
 8002c60:	3b1e      	subs	r3, #30
 8002c62:	2207      	movs	r2, #7
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	4019      	ands	r1, r3
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	6898      	ldr	r0, [r3, #8]
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	4613      	mov	r3, r2
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	4413      	add	r3, r2
 8002c7a:	3b1e      	subs	r3, #30
 8002c7c:	fa00 f203 	lsl.w	r2, r0, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	430a      	orrs	r2, r1
 8002c86:	619a      	str	r2, [r3, #24]
 8002c88:	e019      	b.n	8002cbe <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	6959      	ldr	r1, [r3, #20]
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	4613      	mov	r3, r2
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	4413      	add	r3, r2
 8002c9a:	2207      	movs	r2, #7
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	4019      	ands	r1, r3
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	6898      	ldr	r0, [r3, #8]
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	4613      	mov	r3, r2
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	4413      	add	r3, r2
 8002cb2:	fa00 f203 	lsl.w	r2, r0, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	695a      	ldr	r2, [r3, #20]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	08db      	lsrs	r3, r3, #3
 8002cca:	f003 0303 	and.w	r3, r3, #3
 8002cce:	005b      	lsls	r3, r3, #1
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	2b03      	cmp	r3, #3
 8002cde:	d84f      	bhi.n	8002d80 <HAL_ADC_ConfigChannel+0x28c>
 8002ce0:	a201      	add	r2, pc, #4	; (adr r2, 8002ce8 <HAL_ADC_ConfigChannel+0x1f4>)
 8002ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce6:	bf00      	nop
 8002ce8:	08002cf9 	.word	0x08002cf9
 8002cec:	08002d1b 	.word	0x08002d1b
 8002cf0:	08002d3d 	.word	0x08002d3d
 8002cf4:	08002d5f 	.word	0x08002d5f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002cfe:	4b97      	ldr	r3, [pc, #604]	; (8002f5c <HAL_ADC_ConfigChannel+0x468>)
 8002d00:	4013      	ands	r3, r2
 8002d02:	683a      	ldr	r2, [r7, #0]
 8002d04:	6812      	ldr	r2, [r2, #0]
 8002d06:	0691      	lsls	r1, r2, #26
 8002d08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002d16:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002d18:	e07b      	b.n	8002e12 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002d20:	4b8e      	ldr	r3, [pc, #568]	; (8002f5c <HAL_ADC_ConfigChannel+0x468>)
 8002d22:	4013      	ands	r3, r2
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	6812      	ldr	r2, [r2, #0]
 8002d28:	0691      	lsls	r1, r2, #26
 8002d2a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002d38:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002d3a:	e06a      	b.n	8002e12 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002d42:	4b86      	ldr	r3, [pc, #536]	; (8002f5c <HAL_ADC_ConfigChannel+0x468>)
 8002d44:	4013      	ands	r3, r2
 8002d46:	683a      	ldr	r2, [r7, #0]
 8002d48:	6812      	ldr	r2, [r2, #0]
 8002d4a:	0691      	lsls	r1, r2, #26
 8002d4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	431a      	orrs	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002d5a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002d5c:	e059      	b.n	8002e12 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002d64:	4b7d      	ldr	r3, [pc, #500]	; (8002f5c <HAL_ADC_ConfigChannel+0x468>)
 8002d66:	4013      	ands	r3, r2
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	6812      	ldr	r2, [r2, #0]
 8002d6c:	0691      	lsls	r1, r2, #26
 8002d6e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002d70:	430a      	orrs	r2, r1
 8002d72:	431a      	orrs	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002d7c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002d7e:	e048      	b.n	8002e12 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	069b      	lsls	r3, r3, #26
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d107      	bne.n	8002da4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002da2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002daa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	069b      	lsls	r3, r3, #26
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d107      	bne.n	8002dc8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002dc6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	069b      	lsls	r3, r3, #26
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d107      	bne.n	8002dec <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002dea:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002df2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	069b      	lsls	r3, r3, #26
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d107      	bne.n	8002e10 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002e0e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002e10:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 0303 	and.w	r3, r3, #3
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d108      	bne.n	8002e32 <HAL_ADC_ConfigChannel+0x33e>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d101      	bne.n	8002e32 <HAL_ADC_ConfigChannel+0x33e>
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e000      	b.n	8002e34 <HAL_ADC_ConfigChannel+0x340>
 8002e32:	2300      	movs	r3, #0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f040 80fe 	bne.w	8003036 <HAL_ADC_ConfigChannel+0x542>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d00f      	beq.n	8002e62 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	43da      	mvns	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	400a      	ands	r2, r1
 8002e5c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002e60:	e049      	b.n	8002ef6 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	409a      	lsls	r2, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	430a      	orrs	r2, r1
 8002e78:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2b09      	cmp	r3, #9
 8002e82:	d91c      	bls.n	8002ebe <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6999      	ldr	r1, [r3, #24]
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	4413      	add	r3, r2
 8002e94:	3b1b      	subs	r3, #27
 8002e96:	2207      	movs	r2, #7
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	43db      	mvns	r3, r3
 8002e9e:	4019      	ands	r1, r3
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	6898      	ldr	r0, [r3, #8]
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	4413      	add	r3, r2
 8002eae:	3b1b      	subs	r3, #27
 8002eb0:	fa00 f203 	lsl.w	r2, r0, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	619a      	str	r2, [r3, #24]
 8002ebc:	e01b      	b.n	8002ef6 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	6959      	ldr	r1, [r3, #20]
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	1c5a      	adds	r2, r3, #1
 8002eca:	4613      	mov	r3, r2
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	4413      	add	r3, r2
 8002ed0:	2207      	movs	r2, #7
 8002ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed6:	43db      	mvns	r3, r3
 8002ed8:	4019      	ands	r1, r3
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	6898      	ldr	r0, [r3, #8]
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	1c5a      	adds	r2, r3, #1
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	4413      	add	r3, r2
 8002eea:	fa00 f203 	lsl.w	r2, r0, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ef6:	4b1a      	ldr	r3, [pc, #104]	; (8002f60 <HAL_ADC_ConfigChannel+0x46c>)
 8002ef8:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2b10      	cmp	r3, #16
 8002f00:	d105      	bne.n	8002f0e <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002f02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d014      	beq.n	8002f38 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002f12:	2b11      	cmp	r3, #17
 8002f14:	d105      	bne.n	8002f22 <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002f16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00a      	beq.n	8002f38 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002f26:	2b12      	cmp	r3, #18
 8002f28:	f040 8085 	bne.w	8003036 <HAL_ADC_ConfigChannel+0x542>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002f2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d17e      	bne.n	8003036 <HAL_ADC_ConfigChannel+0x542>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002f38:	2300      	movs	r3, #0
 8002f3a:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 0303 	and.w	r3, r3, #3
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d10c      	bne.n	8002f64 <HAL_ADC_ConfigChannel+0x470>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0301 	and.w	r3, r3, #1
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d105      	bne.n	8002f64 <HAL_ADC_ConfigChannel+0x470>
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e004      	b.n	8002f66 <HAL_ADC_ConfigChannel+0x472>
 8002f5c:	83fff000 	.word	0x83fff000
 8002f60:	50000300 	.word	0x50000300
 8002f64:	2300      	movs	r3, #0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d150      	bne.n	800300c <HAL_ADC_ConfigChannel+0x518>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002f6a:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d010      	beq.n	8002f92 <HAL_ADC_ConfigChannel+0x49e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f003 0303 	and.w	r3, r3, #3
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d107      	bne.n	8002f8c <HAL_ADC_ConfigChannel+0x498>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0301 	and.w	r3, r3, #1
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d101      	bne.n	8002f8c <HAL_ADC_ConfigChannel+0x498>
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e000      	b.n	8002f8e <HAL_ADC_ConfigChannel+0x49a>
 8002f8c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d13c      	bne.n	800300c <HAL_ADC_ConfigChannel+0x518>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2b10      	cmp	r3, #16
 8002f98:	d11d      	bne.n	8002fd6 <HAL_ADC_ConfigChannel+0x4e2>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fa2:	d118      	bne.n	8002fd6 <HAL_ADC_ConfigChannel+0x4e2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002fa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002fac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fae:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002fb0:	4b27      	ldr	r3, [pc, #156]	; (8003050 <HAL_ADC_ConfigChannel+0x55c>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a27      	ldr	r2, [pc, #156]	; (8003054 <HAL_ADC_ConfigChannel+0x560>)
 8002fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fba:	0c9a      	lsrs	r2, r3, #18
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	4413      	add	r3, r2
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002fc6:	e002      	b.n	8002fce <HAL_ADC_ConfigChannel+0x4da>
          {
            wait_loop_index--;
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1f9      	bne.n	8002fc8 <HAL_ADC_ConfigChannel+0x4d4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002fd4:	e02e      	b.n	8003034 <HAL_ADC_ConfigChannel+0x540>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2b11      	cmp	r3, #17
 8002fdc:	d10b      	bne.n	8002ff6 <HAL_ADC_ConfigChannel+0x502>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fe6:	d106      	bne.n	8002ff6 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002fe8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002ff0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ff2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002ff4:	e01e      	b.n	8003034 <HAL_ADC_ConfigChannel+0x540>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2b12      	cmp	r3, #18
 8002ffc:	d11a      	bne.n	8003034 <HAL_ADC_ConfigChannel+0x540>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002ffe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003006:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003008:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800300a:	e013      	b.n	8003034 <HAL_ADC_ConfigChannel+0x540>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003010:	f043 0220 	orr.w	r2, r3, #32
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800301e:	e00a      	b.n	8003036 <HAL_ADC_ConfigChannel+0x542>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003024:	f043 0220 	orr.w	r2, r3, #32
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003032:	e000      	b.n	8003036 <HAL_ADC_ConfigChannel+0x542>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003034:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800303e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003042:	4618      	mov	r0, r3
 8003044:	376c      	adds	r7, #108	; 0x6c
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	20000000 	.word	0x20000000
 8003054:	431bde83 	.word	0x431bde83

08003058 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003060:	2300      	movs	r3, #0
 8003062:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 0303 	and.w	r3, r3, #3
 800306e:	2b01      	cmp	r3, #1
 8003070:	d108      	bne.n	8003084 <ADC_Disable+0x2c>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0301 	and.w	r3, r3, #1
 800307c:	2b01      	cmp	r3, #1
 800307e:	d101      	bne.n	8003084 <ADC_Disable+0x2c>
 8003080:	2301      	movs	r3, #1
 8003082:	e000      	b.n	8003086 <ADC_Disable+0x2e>
 8003084:	2300      	movs	r3, #0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d047      	beq.n	800311a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f003 030d 	and.w	r3, r3, #13
 8003094:	2b01      	cmp	r3, #1
 8003096:	d10f      	bne.n	80030b8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689a      	ldr	r2, [r3, #8]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f042 0202 	orr.w	r2, r2, #2
 80030a6:	609a      	str	r2, [r3, #8]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2203      	movs	r2, #3
 80030ae:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80030b0:	f7ff fb6a 	bl	8002788 <HAL_GetTick>
 80030b4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80030b6:	e029      	b.n	800310c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030bc:	f043 0210 	orr.w	r2, r3, #16
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c8:	f043 0201 	orr.w	r2, r3, #1
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e023      	b.n	800311c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80030d4:	f7ff fb58 	bl	8002788 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d914      	bls.n	800310c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d10d      	bne.n	800310c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f4:	f043 0210 	orr.w	r2, r3, #16
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003100:	f043 0201 	orr.w	r2, r3, #1
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e007      	b.n	800311c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b01      	cmp	r3, #1
 8003118:	d0dc      	beq.n	80030d4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <__NVIC_SetPriorityGrouping>:
{
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f003 0307 	and.w	r3, r3, #7
 8003132:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003134:	4b0c      	ldr	r3, [pc, #48]	; (8003168 <__NVIC_SetPriorityGrouping+0x44>)
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800313a:	68ba      	ldr	r2, [r7, #8]
 800313c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003140:	4013      	ands	r3, r2
 8003142:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800314c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003150:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003156:	4a04      	ldr	r2, [pc, #16]	; (8003168 <__NVIC_SetPriorityGrouping+0x44>)
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	60d3      	str	r3, [r2, #12]
}
 800315c:	bf00      	nop
 800315e:	3714      	adds	r7, #20
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr
 8003168:	e000ed00 	.word	0xe000ed00

0800316c <__NVIC_GetPriorityGrouping>:
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003170:	4b04      	ldr	r3, [pc, #16]	; (8003184 <__NVIC_GetPriorityGrouping+0x18>)
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	0a1b      	lsrs	r3, r3, #8
 8003176:	f003 0307 	and.w	r3, r3, #7
}
 800317a:	4618      	mov	r0, r3
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr
 8003184:	e000ed00 	.word	0xe000ed00

08003188 <__NVIC_EnableIRQ>:
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	4603      	mov	r3, r0
 8003190:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003196:	2b00      	cmp	r3, #0
 8003198:	db0b      	blt.n	80031b2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800319a:	79fb      	ldrb	r3, [r7, #7]
 800319c:	f003 021f 	and.w	r2, r3, #31
 80031a0:	4907      	ldr	r1, [pc, #28]	; (80031c0 <__NVIC_EnableIRQ+0x38>)
 80031a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a6:	095b      	lsrs	r3, r3, #5
 80031a8:	2001      	movs	r0, #1
 80031aa:	fa00 f202 	lsl.w	r2, r0, r2
 80031ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80031b2:	bf00      	nop
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	e000e100 	.word	0xe000e100

080031c4 <__NVIC_SetPriority>:
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	4603      	mov	r3, r0
 80031cc:	6039      	str	r1, [r7, #0]
 80031ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	db0a      	blt.n	80031ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	b2da      	uxtb	r2, r3
 80031dc:	490c      	ldr	r1, [pc, #48]	; (8003210 <__NVIC_SetPriority+0x4c>)
 80031de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e2:	0112      	lsls	r2, r2, #4
 80031e4:	b2d2      	uxtb	r2, r2
 80031e6:	440b      	add	r3, r1
 80031e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80031ec:	e00a      	b.n	8003204 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	b2da      	uxtb	r2, r3
 80031f2:	4908      	ldr	r1, [pc, #32]	; (8003214 <__NVIC_SetPriority+0x50>)
 80031f4:	79fb      	ldrb	r3, [r7, #7]
 80031f6:	f003 030f 	and.w	r3, r3, #15
 80031fa:	3b04      	subs	r3, #4
 80031fc:	0112      	lsls	r2, r2, #4
 80031fe:	b2d2      	uxtb	r2, r2
 8003200:	440b      	add	r3, r1
 8003202:	761a      	strb	r2, [r3, #24]
}
 8003204:	bf00      	nop
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr
 8003210:	e000e100 	.word	0xe000e100
 8003214:	e000ed00 	.word	0xe000ed00

08003218 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003218:	b480      	push	{r7}
 800321a:	b089      	sub	sp, #36	; 0x24
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f003 0307 	and.w	r3, r3, #7
 800322a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	f1c3 0307 	rsb	r3, r3, #7
 8003232:	2b04      	cmp	r3, #4
 8003234:	bf28      	it	cs
 8003236:	2304      	movcs	r3, #4
 8003238:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	3304      	adds	r3, #4
 800323e:	2b06      	cmp	r3, #6
 8003240:	d902      	bls.n	8003248 <NVIC_EncodePriority+0x30>
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	3b03      	subs	r3, #3
 8003246:	e000      	b.n	800324a <NVIC_EncodePriority+0x32>
 8003248:	2300      	movs	r3, #0
 800324a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800324c:	f04f 32ff 	mov.w	r2, #4294967295
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	fa02 f303 	lsl.w	r3, r2, r3
 8003256:	43da      	mvns	r2, r3
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	401a      	ands	r2, r3
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003260:	f04f 31ff 	mov.w	r1, #4294967295
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	fa01 f303 	lsl.w	r3, r1, r3
 800326a:	43d9      	mvns	r1, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003270:	4313      	orrs	r3, r2
         );
}
 8003272:	4618      	mov	r0, r3
 8003274:	3724      	adds	r7, #36	; 0x24
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr

0800327e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b082      	sub	sp, #8
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f7ff ff4c 	bl	8003124 <__NVIC_SetPriorityGrouping>
}
 800328c:	bf00      	nop
 800328e:	3708      	adds	r7, #8
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af00      	add	r7, sp, #0
 800329a:	4603      	mov	r3, r0
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
 80032a0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032a2:	2300      	movs	r3, #0
 80032a4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032a6:	f7ff ff61 	bl	800316c <__NVIC_GetPriorityGrouping>
 80032aa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	68b9      	ldr	r1, [r7, #8]
 80032b0:	6978      	ldr	r0, [r7, #20]
 80032b2:	f7ff ffb1 	bl	8003218 <NVIC_EncodePriority>
 80032b6:	4602      	mov	r2, r0
 80032b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032bc:	4611      	mov	r1, r2
 80032be:	4618      	mov	r0, r3
 80032c0:	f7ff ff80 	bl	80031c4 <__NVIC_SetPriority>
}
 80032c4:	bf00      	nop
 80032c6:	3718      	adds	r7, #24
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	4603      	mov	r3, r0
 80032d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032da:	4618      	mov	r0, r3
 80032dc:	f7ff ff54 	bl	8003188 <__NVIC_EnableIRQ>
}
 80032e0:	bf00      	nop
 80032e2:	3708      	adds	r7, #8
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80032f0:	2300      	movs	r3, #0
 80032f2:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d101      	bne.n	80032fe <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e037      	b.n	800336e <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2202      	movs	r2, #2
 8003302:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003314:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003318:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003322:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800332e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	695b      	ldr	r3, [r3, #20]
 8003334:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800333a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	69db      	ldr	r3, [r3, #28]
 8003340:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	4313      	orrs	r3, r2
 8003346:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f000 f8b3 	bl	80034bc <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}  
 800336e:	4618      	mov	r0, r3
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003376:	b580      	push	{r7, lr}
 8003378:	b084      	sub	sp, #16
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003392:	2204      	movs	r2, #4
 8003394:	409a      	lsls	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	4013      	ands	r3, r2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d024      	beq.n	80033e8 <HAL_DMA_IRQHandler+0x72>
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	f003 0304 	and.w	r3, r3, #4
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d01f      	beq.n	80033e8 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0320 	and.w	r3, r3, #32
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d107      	bne.n	80033c6 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f022 0204 	bic.w	r2, r2, #4
 80033c4:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ce:	2104      	movs	r1, #4
 80033d0:	fa01 f202 	lsl.w	r2, r1, r2
 80033d4:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d06a      	beq.n	80034b4 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80033e6:	e065      	b.n	80034b4 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ec:	2202      	movs	r2, #2
 80033ee:	409a      	lsls	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	4013      	ands	r3, r2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d02c      	beq.n	8003452 <HAL_DMA_IRQHandler+0xdc>
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d027      	beq.n	8003452 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0320 	and.w	r3, r3, #32
 800340c:	2b00      	cmp	r3, #0
 800340e:	d10b      	bne.n	8003428 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f022 020a 	bic.w	r2, r2, #10
 800341e:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003430:	2102      	movs	r1, #2
 8003432:	fa01 f202 	lsl.w	r2, r1, r2
 8003436:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003444:	2b00      	cmp	r3, #0
 8003446:	d035      	beq.n	80034b4 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003450:	e030      	b.n	80034b4 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	2208      	movs	r2, #8
 8003458:	409a      	lsls	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	4013      	ands	r3, r2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d028      	beq.n	80034b4 <HAL_DMA_IRQHandler+0x13e>
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	f003 0308 	and.w	r3, r3, #8
 8003468:	2b00      	cmp	r3, #0
 800346a:	d023      	beq.n	80034b4 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 020e 	bic.w	r2, r2, #14
 800347a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003484:	2101      	movs	r1, #1
 8003486:	fa01 f202 	lsl.w	r2, r1, r2
 800348a:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d004      	beq.n	80034b4 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	4798      	blx	r3
    }
  }
}  
 80034b2:	e7ff      	b.n	80034b4 <HAL_DMA_IRQHandler+0x13e>
 80034b4:	bf00      	nop
 80034b6:	3710      	adds	r7, #16
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	461a      	mov	r2, r3
 80034ca:	4b09      	ldr	r3, [pc, #36]	; (80034f0 <DMA_CalcBaseAndBitshift+0x34>)
 80034cc:	4413      	add	r3, r2
 80034ce:	4a09      	ldr	r2, [pc, #36]	; (80034f4 <DMA_CalcBaseAndBitshift+0x38>)
 80034d0:	fba2 2303 	umull	r2, r3, r2, r3
 80034d4:	091b      	lsrs	r3, r3, #4
 80034d6:	009a      	lsls	r2, r3, #2
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a06      	ldr	r2, [pc, #24]	; (80034f8 <DMA_CalcBaseAndBitshift+0x3c>)
 80034e0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80034e2:	bf00      	nop
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	bffdfff8 	.word	0xbffdfff8
 80034f4:	cccccccd 	.word	0xcccccccd
 80034f8:	40020000 	.word	0x40020000

080034fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b087      	sub	sp, #28
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003506:	2300      	movs	r3, #0
 8003508:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800350a:	e14e      	b.n	80037aa <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	2101      	movs	r1, #1
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	fa01 f303 	lsl.w	r3, r1, r3
 8003518:	4013      	ands	r3, r2
 800351a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2b00      	cmp	r3, #0
 8003520:	f000 8140 	beq.w	80037a4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f003 0303 	and.w	r3, r3, #3
 800352c:	2b01      	cmp	r3, #1
 800352e:	d005      	beq.n	800353c <HAL_GPIO_Init+0x40>
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f003 0303 	and.w	r3, r3, #3
 8003538:	2b02      	cmp	r3, #2
 800353a:	d130      	bne.n	800359e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	2203      	movs	r2, #3
 8003548:	fa02 f303 	lsl.w	r3, r2, r3
 800354c:	43db      	mvns	r3, r3
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	4013      	ands	r3, r2
 8003552:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	68da      	ldr	r2, [r3, #12]
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	fa02 f303 	lsl.w	r3, r2, r3
 8003560:	693a      	ldr	r2, [r7, #16]
 8003562:	4313      	orrs	r3, r2
 8003564:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	693a      	ldr	r2, [r7, #16]
 800356a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003572:	2201      	movs	r2, #1
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	fa02 f303 	lsl.w	r3, r2, r3
 800357a:	43db      	mvns	r3, r3
 800357c:	693a      	ldr	r2, [r7, #16]
 800357e:	4013      	ands	r3, r2
 8003580:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	091b      	lsrs	r3, r3, #4
 8003588:	f003 0201 	and.w	r2, r3, #1
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	fa02 f303 	lsl.w	r3, r2, r3
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	4313      	orrs	r3, r2
 8003596:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f003 0303 	and.w	r3, r3, #3
 80035a6:	2b03      	cmp	r3, #3
 80035a8:	d017      	beq.n	80035da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	2203      	movs	r2, #3
 80035b6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ba:	43db      	mvns	r3, r3
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	4013      	ands	r3, r2
 80035c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	689a      	ldr	r2, [r3, #8]
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	fa02 f303 	lsl.w	r3, r2, r3
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f003 0303 	and.w	r3, r3, #3
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d123      	bne.n	800362e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	08da      	lsrs	r2, r3, #3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	3208      	adds	r2, #8
 80035ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	f003 0307 	and.w	r3, r3, #7
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	220f      	movs	r2, #15
 80035fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003602:	43db      	mvns	r3, r3
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	4013      	ands	r3, r2
 8003608:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	691a      	ldr	r2, [r3, #16]
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	f003 0307 	and.w	r3, r3, #7
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	fa02 f303 	lsl.w	r3, r2, r3
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	4313      	orrs	r3, r2
 800361e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	08da      	lsrs	r2, r3, #3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	3208      	adds	r2, #8
 8003628:	6939      	ldr	r1, [r7, #16]
 800362a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	2203      	movs	r2, #3
 800363a:	fa02 f303 	lsl.w	r3, r2, r3
 800363e:	43db      	mvns	r3, r3
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	4013      	ands	r3, r2
 8003644:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f003 0203 	and.w	r2, r3, #3
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	fa02 f303 	lsl.w	r3, r2, r3
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	4313      	orrs	r3, r2
 800365a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800366a:	2b00      	cmp	r3, #0
 800366c:	f000 809a 	beq.w	80037a4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003670:	4b55      	ldr	r3, [pc, #340]	; (80037c8 <HAL_GPIO_Init+0x2cc>)
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	4a54      	ldr	r2, [pc, #336]	; (80037c8 <HAL_GPIO_Init+0x2cc>)
 8003676:	f043 0301 	orr.w	r3, r3, #1
 800367a:	6193      	str	r3, [r2, #24]
 800367c:	4b52      	ldr	r3, [pc, #328]	; (80037c8 <HAL_GPIO_Init+0x2cc>)
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	60bb      	str	r3, [r7, #8]
 8003686:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003688:	4a50      	ldr	r2, [pc, #320]	; (80037cc <HAL_GPIO_Init+0x2d0>)
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	089b      	lsrs	r3, r3, #2
 800368e:	3302      	adds	r3, #2
 8003690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003694:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	f003 0303 	and.w	r3, r3, #3
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	220f      	movs	r2, #15
 80036a0:	fa02 f303 	lsl.w	r3, r2, r3
 80036a4:	43db      	mvns	r3, r3
 80036a6:	693a      	ldr	r2, [r7, #16]
 80036a8:	4013      	ands	r3, r2
 80036aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80036b2:	d013      	beq.n	80036dc <HAL_GPIO_Init+0x1e0>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a46      	ldr	r2, [pc, #280]	; (80037d0 <HAL_GPIO_Init+0x2d4>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d00d      	beq.n	80036d8 <HAL_GPIO_Init+0x1dc>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a45      	ldr	r2, [pc, #276]	; (80037d4 <HAL_GPIO_Init+0x2d8>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d007      	beq.n	80036d4 <HAL_GPIO_Init+0x1d8>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a44      	ldr	r2, [pc, #272]	; (80037d8 <HAL_GPIO_Init+0x2dc>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d101      	bne.n	80036d0 <HAL_GPIO_Init+0x1d4>
 80036cc:	2303      	movs	r3, #3
 80036ce:	e006      	b.n	80036de <HAL_GPIO_Init+0x1e2>
 80036d0:	2305      	movs	r3, #5
 80036d2:	e004      	b.n	80036de <HAL_GPIO_Init+0x1e2>
 80036d4:	2302      	movs	r3, #2
 80036d6:	e002      	b.n	80036de <HAL_GPIO_Init+0x1e2>
 80036d8:	2301      	movs	r3, #1
 80036da:	e000      	b.n	80036de <HAL_GPIO_Init+0x1e2>
 80036dc:	2300      	movs	r3, #0
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	f002 0203 	and.w	r2, r2, #3
 80036e4:	0092      	lsls	r2, r2, #2
 80036e6:	4093      	lsls	r3, r2
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80036ee:	4937      	ldr	r1, [pc, #220]	; (80037cc <HAL_GPIO_Init+0x2d0>)
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	089b      	lsrs	r3, r3, #2
 80036f4:	3302      	adds	r3, #2
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036fc:	4b37      	ldr	r3, [pc, #220]	; (80037dc <HAL_GPIO_Init+0x2e0>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	43db      	mvns	r3, r3
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	4013      	ands	r3, r2
 800370a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d003      	beq.n	8003720 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003718:	693a      	ldr	r2, [r7, #16]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	4313      	orrs	r3, r2
 800371e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003720:	4a2e      	ldr	r2, [pc, #184]	; (80037dc <HAL_GPIO_Init+0x2e0>)
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003726:	4b2d      	ldr	r3, [pc, #180]	; (80037dc <HAL_GPIO_Init+0x2e0>)
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	43db      	mvns	r3, r3
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	4013      	ands	r3, r2
 8003734:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d003      	beq.n	800374a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	4313      	orrs	r3, r2
 8003748:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800374a:	4a24      	ldr	r2, [pc, #144]	; (80037dc <HAL_GPIO_Init+0x2e0>)
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003750:	4b22      	ldr	r3, [pc, #136]	; (80037dc <HAL_GPIO_Init+0x2e0>)
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	43db      	mvns	r3, r3
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	4013      	ands	r3, r2
 800375e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d003      	beq.n	8003774 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	4313      	orrs	r3, r2
 8003772:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003774:	4a19      	ldr	r2, [pc, #100]	; (80037dc <HAL_GPIO_Init+0x2e0>)
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800377a:	4b18      	ldr	r3, [pc, #96]	; (80037dc <HAL_GPIO_Init+0x2e0>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	43db      	mvns	r3, r3
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	4013      	ands	r3, r2
 8003788:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	4313      	orrs	r3, r2
 800379c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800379e:	4a0f      	ldr	r2, [pc, #60]	; (80037dc <HAL_GPIO_Init+0x2e0>)
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	3301      	adds	r3, #1
 80037a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	fa22 f303 	lsr.w	r3, r2, r3
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f47f aea9 	bne.w	800350c <HAL_GPIO_Init+0x10>
  }
}
 80037ba:	bf00      	nop
 80037bc:	bf00      	nop
 80037be:	371c      	adds	r7, #28
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr
 80037c8:	40021000 	.word	0x40021000
 80037cc:	40010000 	.word	0x40010000
 80037d0:	48000400 	.word	0x48000400
 80037d4:	48000800 	.word	0x48000800
 80037d8:	48000c00 	.word	0x48000c00
 80037dc:	40010400 	.word	0x40010400

080037e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	460b      	mov	r3, r1
 80037ea:	807b      	strh	r3, [r7, #2]
 80037ec:	4613      	mov	r3, r2
 80037ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037f0:	787b      	ldrb	r3, [r7, #1]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d003      	beq.n	80037fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80037f6:	887a      	ldrh	r2, [r7, #2]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80037fc:	e002      	b.n	8003804 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80037fe:	887a      	ldrh	r2, [r7, #2]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003804:	bf00      	nop
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	4603      	mov	r3, r0
 8003818:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800381a:	4b08      	ldr	r3, [pc, #32]	; (800383c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800381c:	695a      	ldr	r2, [r3, #20]
 800381e:	88fb      	ldrh	r3, [r7, #6]
 8003820:	4013      	ands	r3, r2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d006      	beq.n	8003834 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003826:	4a05      	ldr	r2, [pc, #20]	; (800383c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003828:	88fb      	ldrh	r3, [r7, #6]
 800382a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800382c:	88fb      	ldrh	r3, [r7, #6]
 800382e:	4618      	mov	r0, r3
 8003830:	f000 f806 	bl	8003840 <HAL_GPIO_EXTI_Callback>
  }
}
 8003834:	bf00      	nop
 8003836:	3708      	adds	r7, #8
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	40010400 	.word	0x40010400

08003840 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	4603      	mov	r3, r0
 8003848:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800384a:	bf00      	nop
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
	...

08003858 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800385e:	af00      	add	r7, sp, #0
 8003860:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003864:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003868:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800386a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800386e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d102      	bne.n	800387e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	f001 b823 	b.w	80048c4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800387e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003882:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b00      	cmp	r3, #0
 8003890:	f000 817d 	beq.w	8003b8e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003894:	4bbc      	ldr	r3, [pc, #752]	; (8003b88 <HAL_RCC_OscConfig+0x330>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f003 030c 	and.w	r3, r3, #12
 800389c:	2b04      	cmp	r3, #4
 800389e:	d00c      	beq.n	80038ba <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80038a0:	4bb9      	ldr	r3, [pc, #740]	; (8003b88 <HAL_RCC_OscConfig+0x330>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f003 030c 	and.w	r3, r3, #12
 80038a8:	2b08      	cmp	r3, #8
 80038aa:	d15c      	bne.n	8003966 <HAL_RCC_OscConfig+0x10e>
 80038ac:	4bb6      	ldr	r3, [pc, #728]	; (8003b88 <HAL_RCC_OscConfig+0x330>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038b8:	d155      	bne.n	8003966 <HAL_RCC_OscConfig+0x10e>
 80038ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038be:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80038c6:	fa93 f3a3 	rbit	r3, r3
 80038ca:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80038ce:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038d2:	fab3 f383 	clz	r3, r3
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	095b      	lsrs	r3, r3, #5
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	f043 0301 	orr.w	r3, r3, #1
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d102      	bne.n	80038ec <HAL_RCC_OscConfig+0x94>
 80038e6:	4ba8      	ldr	r3, [pc, #672]	; (8003b88 <HAL_RCC_OscConfig+0x330>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	e015      	b.n	8003918 <HAL_RCC_OscConfig+0xc0>
 80038ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038f0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80038f8:	fa93 f3a3 	rbit	r3, r3
 80038fc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003900:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003904:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003908:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800390c:	fa93 f3a3 	rbit	r3, r3
 8003910:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003914:	4b9c      	ldr	r3, [pc, #624]	; (8003b88 <HAL_RCC_OscConfig+0x330>)
 8003916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003918:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800391c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003920:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003924:	fa92 f2a2 	rbit	r2, r2
 8003928:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800392c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003930:	fab2 f282 	clz	r2, r2
 8003934:	b2d2      	uxtb	r2, r2
 8003936:	f042 0220 	orr.w	r2, r2, #32
 800393a:	b2d2      	uxtb	r2, r2
 800393c:	f002 021f 	and.w	r2, r2, #31
 8003940:	2101      	movs	r1, #1
 8003942:	fa01 f202 	lsl.w	r2, r1, r2
 8003946:	4013      	ands	r3, r2
 8003948:	2b00      	cmp	r3, #0
 800394a:	f000 811f 	beq.w	8003b8c <HAL_RCC_OscConfig+0x334>
 800394e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003952:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	f040 8116 	bne.w	8003b8c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	f000 bfaf 	b.w	80048c4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003966:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800396a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003976:	d106      	bne.n	8003986 <HAL_RCC_OscConfig+0x12e>
 8003978:	4b83      	ldr	r3, [pc, #524]	; (8003b88 <HAL_RCC_OscConfig+0x330>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a82      	ldr	r2, [pc, #520]	; (8003b88 <HAL_RCC_OscConfig+0x330>)
 800397e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003982:	6013      	str	r3, [r2, #0]
 8003984:	e036      	b.n	80039f4 <HAL_RCC_OscConfig+0x19c>
 8003986:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800398a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d10c      	bne.n	80039b0 <HAL_RCC_OscConfig+0x158>
 8003996:	4b7c      	ldr	r3, [pc, #496]	; (8003b88 <HAL_RCC_OscConfig+0x330>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a7b      	ldr	r2, [pc, #492]	; (8003b88 <HAL_RCC_OscConfig+0x330>)
 800399c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039a0:	6013      	str	r3, [r2, #0]
 80039a2:	4b79      	ldr	r3, [pc, #484]	; (8003b88 <HAL_RCC_OscConfig+0x330>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a78      	ldr	r2, [pc, #480]	; (8003b88 <HAL_RCC_OscConfig+0x330>)
 80039a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039ac:	6013      	str	r3, [r2, #0]
 80039ae:	e021      	b.n	80039f4 <HAL_RCC_OscConfig+0x19c>
 80039b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039c0:	d10c      	bne.n	80039dc <HAL_RCC_OscConfig+0x184>
 80039c2:	4b71      	ldr	r3, [pc, #452]	; (8003b88 <HAL_RCC_OscConfig+0x330>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a70      	ldr	r2, [pc, #448]	; (8003b88 <HAL_RCC_OscConfig+0x330>)
 80039c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039cc:	6013      	str	r3, [r2, #0]
 80039ce:	4b6e      	ldr	r3, [pc, #440]	; (8003b88 <HAL_RCC_OscConfig+0x330>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a6d      	ldr	r2, [pc, #436]	; (8003b88 <HAL_RCC_OscConfig+0x330>)
 80039d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d8:	6013      	str	r3, [r2, #0]
 80039da:	e00b      	b.n	80039f4 <HAL_RCC_OscConfig+0x19c>
 80039dc:	4b6a      	ldr	r3, [pc, #424]	; (8003b88 <HAL_RCC_OscConfig+0x330>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a69      	ldr	r2, [pc, #420]	; (8003b88 <HAL_RCC_OscConfig+0x330>)
 80039e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039e6:	6013      	str	r3, [r2, #0]
 80039e8:	4b67      	ldr	r3, [pc, #412]	; (8003b88 <HAL_RCC_OscConfig+0x330>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a66      	ldr	r2, [pc, #408]	; (8003b88 <HAL_RCC_OscConfig+0x330>)
 80039ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039f2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80039f4:	4b64      	ldr	r3, [pc, #400]	; (8003b88 <HAL_RCC_OscConfig+0x330>)
 80039f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f8:	f023 020f 	bic.w	r2, r3, #15
 80039fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a00:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	495f      	ldr	r1, [pc, #380]	; (8003b88 <HAL_RCC_OscConfig+0x330>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d059      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a1e:	f7fe feb3 	bl	8002788 <HAL_GetTick>
 8003a22:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a26:	e00a      	b.n	8003a3e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a28:	f7fe feae 	bl	8002788 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	2b64      	cmp	r3, #100	; 0x64
 8003a36:	d902      	bls.n	8003a3e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	f000 bf43 	b.w	80048c4 <HAL_RCC_OscConfig+0x106c>
 8003a3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a42:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a46:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003a4a:	fa93 f3a3 	rbit	r3, r3
 8003a4e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003a52:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a56:	fab3 f383 	clz	r3, r3
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	095b      	lsrs	r3, r3, #5
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	f043 0301 	orr.w	r3, r3, #1
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d102      	bne.n	8003a70 <HAL_RCC_OscConfig+0x218>
 8003a6a:	4b47      	ldr	r3, [pc, #284]	; (8003b88 <HAL_RCC_OscConfig+0x330>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	e015      	b.n	8003a9c <HAL_RCC_OscConfig+0x244>
 8003a70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a74:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a78:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003a7c:	fa93 f3a3 	rbit	r3, r3
 8003a80:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003a84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a88:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003a8c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003a90:	fa93 f3a3 	rbit	r3, r3
 8003a94:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003a98:	4b3b      	ldr	r3, [pc, #236]	; (8003b88 <HAL_RCC_OscConfig+0x330>)
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003aa0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003aa4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003aa8:	fa92 f2a2 	rbit	r2, r2
 8003aac:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003ab0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003ab4:	fab2 f282 	clz	r2, r2
 8003ab8:	b2d2      	uxtb	r2, r2
 8003aba:	f042 0220 	orr.w	r2, r2, #32
 8003abe:	b2d2      	uxtb	r2, r2
 8003ac0:	f002 021f 	and.w	r2, r2, #31
 8003ac4:	2101      	movs	r1, #1
 8003ac6:	fa01 f202 	lsl.w	r2, r1, r2
 8003aca:	4013      	ands	r3, r2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d0ab      	beq.n	8003a28 <HAL_RCC_OscConfig+0x1d0>
 8003ad0:	e05d      	b.n	8003b8e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad2:	f7fe fe59 	bl	8002788 <HAL_GetTick>
 8003ad6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ada:	e00a      	b.n	8003af2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003adc:	f7fe fe54 	bl	8002788 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	2b64      	cmp	r3, #100	; 0x64
 8003aea:	d902      	bls.n	8003af2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	f000 bee9 	b.w	80048c4 <HAL_RCC_OscConfig+0x106c>
 8003af2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003af6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003afa:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003afe:	fa93 f3a3 	rbit	r3, r3
 8003b02:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003b06:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b0a:	fab3 f383 	clz	r3, r3
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	095b      	lsrs	r3, r3, #5
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	f043 0301 	orr.w	r3, r3, #1
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d102      	bne.n	8003b24 <HAL_RCC_OscConfig+0x2cc>
 8003b1e:	4b1a      	ldr	r3, [pc, #104]	; (8003b88 <HAL_RCC_OscConfig+0x330>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	e015      	b.n	8003b50 <HAL_RCC_OscConfig+0x2f8>
 8003b24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b28:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003b30:	fa93 f3a3 	rbit	r3, r3
 8003b34:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003b38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b3c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003b40:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003b44:	fa93 f3a3 	rbit	r3, r3
 8003b48:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003b4c:	4b0e      	ldr	r3, [pc, #56]	; (8003b88 <HAL_RCC_OscConfig+0x330>)
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b50:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b54:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003b58:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003b5c:	fa92 f2a2 	rbit	r2, r2
 8003b60:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003b64:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003b68:	fab2 f282 	clz	r2, r2
 8003b6c:	b2d2      	uxtb	r2, r2
 8003b6e:	f042 0220 	orr.w	r2, r2, #32
 8003b72:	b2d2      	uxtb	r2, r2
 8003b74:	f002 021f 	and.w	r2, r2, #31
 8003b78:	2101      	movs	r1, #1
 8003b7a:	fa01 f202 	lsl.w	r2, r1, r2
 8003b7e:	4013      	ands	r3, r2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1ab      	bne.n	8003adc <HAL_RCC_OscConfig+0x284>
 8003b84:	e003      	b.n	8003b8e <HAL_RCC_OscConfig+0x336>
 8003b86:	bf00      	nop
 8003b88:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f000 817d 	beq.w	8003e9e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003ba4:	4ba6      	ldr	r3, [pc, #664]	; (8003e40 <HAL_RCC_OscConfig+0x5e8>)
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f003 030c 	and.w	r3, r3, #12
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00b      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003bb0:	4ba3      	ldr	r3, [pc, #652]	; (8003e40 <HAL_RCC_OscConfig+0x5e8>)
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f003 030c 	and.w	r3, r3, #12
 8003bb8:	2b08      	cmp	r3, #8
 8003bba:	d172      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x44a>
 8003bbc:	4ba0      	ldr	r3, [pc, #640]	; (8003e40 <HAL_RCC_OscConfig+0x5e8>)
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d16c      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x44a>
 8003bc8:	2302      	movs	r3, #2
 8003bca:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bce:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003bd2:	fa93 f3a3 	rbit	r3, r3
 8003bd6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003bda:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bde:	fab3 f383 	clz	r3, r3
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	095b      	lsrs	r3, r3, #5
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	f043 0301 	orr.w	r3, r3, #1
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d102      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x3a0>
 8003bf2:	4b93      	ldr	r3, [pc, #588]	; (8003e40 <HAL_RCC_OscConfig+0x5e8>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	e013      	b.n	8003c20 <HAL_RCC_OscConfig+0x3c8>
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bfe:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003c02:	fa93 f3a3 	rbit	r3, r3
 8003c06:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003c0a:	2302      	movs	r3, #2
 8003c0c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003c10:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003c14:	fa93 f3a3 	rbit	r3, r3
 8003c18:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003c1c:	4b88      	ldr	r3, [pc, #544]	; (8003e40 <HAL_RCC_OscConfig+0x5e8>)
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c20:	2202      	movs	r2, #2
 8003c22:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003c26:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003c2a:	fa92 f2a2 	rbit	r2, r2
 8003c2e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003c32:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003c36:	fab2 f282 	clz	r2, r2
 8003c3a:	b2d2      	uxtb	r2, r2
 8003c3c:	f042 0220 	orr.w	r2, r2, #32
 8003c40:	b2d2      	uxtb	r2, r2
 8003c42:	f002 021f 	and.w	r2, r2, #31
 8003c46:	2101      	movs	r1, #1
 8003c48:	fa01 f202 	lsl.w	r2, r1, r2
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00a      	beq.n	8003c68 <HAL_RCC_OscConfig+0x410>
 8003c52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d002      	beq.n	8003c68 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	f000 be2e 	b.w	80048c4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c68:	4b75      	ldr	r3, [pc, #468]	; (8003e40 <HAL_RCC_OscConfig+0x5e8>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c74:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	695b      	ldr	r3, [r3, #20]
 8003c7c:	21f8      	movs	r1, #248	; 0xf8
 8003c7e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c82:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003c86:	fa91 f1a1 	rbit	r1, r1
 8003c8a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003c8e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003c92:	fab1 f181 	clz	r1, r1
 8003c96:	b2c9      	uxtb	r1, r1
 8003c98:	408b      	lsls	r3, r1
 8003c9a:	4969      	ldr	r1, [pc, #420]	; (8003e40 <HAL_RCC_OscConfig+0x5e8>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ca0:	e0fd      	b.n	8003e9e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ca2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ca6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	f000 8088 	beq.w	8003dc4 <HAL_RCC_OscConfig+0x56c>
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cba:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003cbe:	fa93 f3a3 	rbit	r3, r3
 8003cc2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003cc6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cca:	fab3 f383 	clz	r3, r3
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003cd4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	461a      	mov	r2, r3
 8003cdc:	2301      	movs	r3, #1
 8003cde:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce0:	f7fe fd52 	bl	8002788 <HAL_GetTick>
 8003ce4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ce8:	e00a      	b.n	8003d00 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cea:	f7fe fd4d 	bl	8002788 <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d902      	bls.n	8003d00 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	f000 bde2 	b.w	80048c4 <HAL_RCC_OscConfig+0x106c>
 8003d00:	2302      	movs	r3, #2
 8003d02:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d06:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003d0a:	fa93 f3a3 	rbit	r3, r3
 8003d0e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003d12:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d16:	fab3 f383 	clz	r3, r3
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	095b      	lsrs	r3, r3, #5
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	f043 0301 	orr.w	r3, r3, #1
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d102      	bne.n	8003d30 <HAL_RCC_OscConfig+0x4d8>
 8003d2a:	4b45      	ldr	r3, [pc, #276]	; (8003e40 <HAL_RCC_OscConfig+0x5e8>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	e013      	b.n	8003d58 <HAL_RCC_OscConfig+0x500>
 8003d30:	2302      	movs	r3, #2
 8003d32:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d36:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003d3a:	fa93 f3a3 	rbit	r3, r3
 8003d3e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003d42:	2302      	movs	r3, #2
 8003d44:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003d48:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003d4c:	fa93 f3a3 	rbit	r3, r3
 8003d50:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003d54:	4b3a      	ldr	r3, [pc, #232]	; (8003e40 <HAL_RCC_OscConfig+0x5e8>)
 8003d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d58:	2202      	movs	r2, #2
 8003d5a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003d5e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003d62:	fa92 f2a2 	rbit	r2, r2
 8003d66:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003d6a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003d6e:	fab2 f282 	clz	r2, r2
 8003d72:	b2d2      	uxtb	r2, r2
 8003d74:	f042 0220 	orr.w	r2, r2, #32
 8003d78:	b2d2      	uxtb	r2, r2
 8003d7a:	f002 021f 	and.w	r2, r2, #31
 8003d7e:	2101      	movs	r1, #1
 8003d80:	fa01 f202 	lsl.w	r2, r1, r2
 8003d84:	4013      	ands	r3, r2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d0af      	beq.n	8003cea <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d8a:	4b2d      	ldr	r3, [pc, #180]	; (8003e40 <HAL_RCC_OscConfig+0x5e8>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	21f8      	movs	r1, #248	; 0xf8
 8003da0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003da4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003da8:	fa91 f1a1 	rbit	r1, r1
 8003dac:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003db0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003db4:	fab1 f181 	clz	r1, r1
 8003db8:	b2c9      	uxtb	r1, r1
 8003dba:	408b      	lsls	r3, r1
 8003dbc:	4920      	ldr	r1, [pc, #128]	; (8003e40 <HAL_RCC_OscConfig+0x5e8>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	600b      	str	r3, [r1, #0]
 8003dc2:	e06c      	b.n	8003e9e <HAL_RCC_OscConfig+0x646>
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dca:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003dce:	fa93 f3a3 	rbit	r3, r3
 8003dd2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003dd6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dda:	fab3 f383 	clz	r3, r3
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003de4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	461a      	mov	r2, r3
 8003dec:	2300      	movs	r3, #0
 8003dee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df0:	f7fe fcca 	bl	8002788 <HAL_GetTick>
 8003df4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003df8:	e00a      	b.n	8003e10 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dfa:	f7fe fcc5 	bl	8002788 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d902      	bls.n	8003e10 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	f000 bd5a 	b.w	80048c4 <HAL_RCC_OscConfig+0x106c>
 8003e10:	2302      	movs	r3, #2
 8003e12:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e16:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003e1a:	fa93 f3a3 	rbit	r3, r3
 8003e1e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003e22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e26:	fab3 f383 	clz	r3, r3
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	095b      	lsrs	r3, r3, #5
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	f043 0301 	orr.w	r3, r3, #1
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d104      	bne.n	8003e44 <HAL_RCC_OscConfig+0x5ec>
 8003e3a:	4b01      	ldr	r3, [pc, #4]	; (8003e40 <HAL_RCC_OscConfig+0x5e8>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	e015      	b.n	8003e6c <HAL_RCC_OscConfig+0x614>
 8003e40:	40021000 	.word	0x40021000
 8003e44:	2302      	movs	r3, #2
 8003e46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003e4e:	fa93 f3a3 	rbit	r3, r3
 8003e52:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003e56:	2302      	movs	r3, #2
 8003e58:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003e5c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003e60:	fa93 f3a3 	rbit	r3, r3
 8003e64:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003e68:	4bc8      	ldr	r3, [pc, #800]	; (800418c <HAL_RCC_OscConfig+0x934>)
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6c:	2202      	movs	r2, #2
 8003e6e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003e72:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003e76:	fa92 f2a2 	rbit	r2, r2
 8003e7a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003e7e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003e82:	fab2 f282 	clz	r2, r2
 8003e86:	b2d2      	uxtb	r2, r2
 8003e88:	f042 0220 	orr.w	r2, r2, #32
 8003e8c:	b2d2      	uxtb	r2, r2
 8003e8e:	f002 021f 	and.w	r2, r2, #31
 8003e92:	2101      	movs	r1, #1
 8003e94:	fa01 f202 	lsl.w	r2, r1, r2
 8003e98:	4013      	ands	r3, r2
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1ad      	bne.n	8003dfa <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ea2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0308 	and.w	r3, r3, #8
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	f000 8110 	beq.w	80040d4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003eb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eb8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d079      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x760>
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003ece:	fa93 f3a3 	rbit	r3, r3
 8003ed2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003ed6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003eda:	fab3 f383 	clz	r3, r3
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	4bab      	ldr	r3, [pc, #684]	; (8004190 <HAL_RCC_OscConfig+0x938>)
 8003ee4:	4413      	add	r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	461a      	mov	r2, r3
 8003eea:	2301      	movs	r3, #1
 8003eec:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eee:	f7fe fc4b 	bl	8002788 <HAL_GetTick>
 8003ef2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ef6:	e00a      	b.n	8003f0e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ef8:	f7fe fc46 	bl	8002788 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d902      	bls.n	8003f0e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	f000 bcdb 	b.w	80048c4 <HAL_RCC_OscConfig+0x106c>
 8003f0e:	2302      	movs	r3, #2
 8003f10:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f14:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003f18:	fa93 f3a3 	rbit	r3, r3
 8003f1c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003f20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f24:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003f28:	2202      	movs	r2, #2
 8003f2a:	601a      	str	r2, [r3, #0]
 8003f2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f30:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	fa93 f2a3 	rbit	r2, r3
 8003f3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003f42:	601a      	str	r2, [r3, #0]
 8003f44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f4c:	2202      	movs	r2, #2
 8003f4e:	601a      	str	r2, [r3, #0]
 8003f50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	fa93 f2a3 	rbit	r2, r3
 8003f5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f62:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003f66:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f68:	4b88      	ldr	r3, [pc, #544]	; (800418c <HAL_RCC_OscConfig+0x934>)
 8003f6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f70:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003f74:	2102      	movs	r1, #2
 8003f76:	6019      	str	r1, [r3, #0]
 8003f78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f7c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	fa93 f1a3 	rbit	r1, r3
 8003f86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f8a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003f8e:	6019      	str	r1, [r3, #0]
  return result;
 8003f90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f94:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	fab3 f383 	clz	r3, r3
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	f003 031f 	and.w	r3, r3, #31
 8003faa:	2101      	movs	r1, #1
 8003fac:	fa01 f303 	lsl.w	r3, r1, r3
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d0a0      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x6a0>
 8003fb6:	e08d      	b.n	80040d4 <HAL_RCC_OscConfig+0x87c>
 8003fb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fbc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fc8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	fa93 f2a3 	rbit	r2, r3
 8003fd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fd6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003fda:	601a      	str	r2, [r3, #0]
  return result;
 8003fdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fe0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003fe4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fe6:	fab3 f383 	clz	r3, r3
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	461a      	mov	r2, r3
 8003fee:	4b68      	ldr	r3, [pc, #416]	; (8004190 <HAL_RCC_OscConfig+0x938>)
 8003ff0:	4413      	add	r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ffa:	f7fe fbc5 	bl	8002788 <HAL_GetTick>
 8003ffe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004002:	e00a      	b.n	800401a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004004:	f7fe fbc0 	bl	8002788 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	2b02      	cmp	r3, #2
 8004012:	d902      	bls.n	800401a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	f000 bc55 	b.w	80048c4 <HAL_RCC_OscConfig+0x106c>
 800401a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800401e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004022:	2202      	movs	r2, #2
 8004024:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004026:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800402a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	fa93 f2a3 	rbit	r2, r3
 8004034:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004038:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004042:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004046:	2202      	movs	r2, #2
 8004048:	601a      	str	r2, [r3, #0]
 800404a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800404e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	fa93 f2a3 	rbit	r2, r3
 8004058:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800405c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004060:	601a      	str	r2, [r3, #0]
 8004062:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004066:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800406a:	2202      	movs	r2, #2
 800406c:	601a      	str	r2, [r3, #0]
 800406e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004072:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	fa93 f2a3 	rbit	r2, r3
 800407c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004080:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004084:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004086:	4b41      	ldr	r3, [pc, #260]	; (800418c <HAL_RCC_OscConfig+0x934>)
 8004088:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800408a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800408e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004092:	2102      	movs	r1, #2
 8004094:	6019      	str	r1, [r3, #0]
 8004096:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800409a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	fa93 f1a3 	rbit	r1, r3
 80040a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040a8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80040ac:	6019      	str	r1, [r3, #0]
  return result;
 80040ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040b2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	fab3 f383 	clz	r3, r3
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	f003 031f 	and.w	r3, r3, #31
 80040c8:	2101      	movs	r1, #1
 80040ca:	fa01 f303 	lsl.w	r3, r1, r3
 80040ce:	4013      	ands	r3, r2
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d197      	bne.n	8004004 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0304 	and.w	r3, r3, #4
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f000 81a1 	beq.w	800442c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040ea:	2300      	movs	r3, #0
 80040ec:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040f0:	4b26      	ldr	r3, [pc, #152]	; (800418c <HAL_RCC_OscConfig+0x934>)
 80040f2:	69db      	ldr	r3, [r3, #28]
 80040f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d116      	bne.n	800412a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040fc:	4b23      	ldr	r3, [pc, #140]	; (800418c <HAL_RCC_OscConfig+0x934>)
 80040fe:	69db      	ldr	r3, [r3, #28]
 8004100:	4a22      	ldr	r2, [pc, #136]	; (800418c <HAL_RCC_OscConfig+0x934>)
 8004102:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004106:	61d3      	str	r3, [r2, #28]
 8004108:	4b20      	ldr	r3, [pc, #128]	; (800418c <HAL_RCC_OscConfig+0x934>)
 800410a:	69db      	ldr	r3, [r3, #28]
 800410c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004110:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004114:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004118:	601a      	str	r2, [r3, #0]
 800411a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800411e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004122:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004124:	2301      	movs	r3, #1
 8004126:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800412a:	4b1a      	ldr	r3, [pc, #104]	; (8004194 <HAL_RCC_OscConfig+0x93c>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004132:	2b00      	cmp	r3, #0
 8004134:	d11a      	bne.n	800416c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004136:	4b17      	ldr	r3, [pc, #92]	; (8004194 <HAL_RCC_OscConfig+0x93c>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a16      	ldr	r2, [pc, #88]	; (8004194 <HAL_RCC_OscConfig+0x93c>)
 800413c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004140:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004142:	f7fe fb21 	bl	8002788 <HAL_GetTick>
 8004146:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800414a:	e009      	b.n	8004160 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800414c:	f7fe fb1c 	bl	8002788 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	2b64      	cmp	r3, #100	; 0x64
 800415a:	d901      	bls.n	8004160 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e3b1      	b.n	80048c4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004160:	4b0c      	ldr	r3, [pc, #48]	; (8004194 <HAL_RCC_OscConfig+0x93c>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004168:	2b00      	cmp	r3, #0
 800416a:	d0ef      	beq.n	800414c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800416c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004170:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	2b01      	cmp	r3, #1
 800417a:	d10d      	bne.n	8004198 <HAL_RCC_OscConfig+0x940>
 800417c:	4b03      	ldr	r3, [pc, #12]	; (800418c <HAL_RCC_OscConfig+0x934>)
 800417e:	6a1b      	ldr	r3, [r3, #32]
 8004180:	4a02      	ldr	r2, [pc, #8]	; (800418c <HAL_RCC_OscConfig+0x934>)
 8004182:	f043 0301 	orr.w	r3, r3, #1
 8004186:	6213      	str	r3, [r2, #32]
 8004188:	e03c      	b.n	8004204 <HAL_RCC_OscConfig+0x9ac>
 800418a:	bf00      	nop
 800418c:	40021000 	.word	0x40021000
 8004190:	10908120 	.word	0x10908120
 8004194:	40007000 	.word	0x40007000
 8004198:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800419c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d10c      	bne.n	80041c2 <HAL_RCC_OscConfig+0x96a>
 80041a8:	4bc1      	ldr	r3, [pc, #772]	; (80044b0 <HAL_RCC_OscConfig+0xc58>)
 80041aa:	6a1b      	ldr	r3, [r3, #32]
 80041ac:	4ac0      	ldr	r2, [pc, #768]	; (80044b0 <HAL_RCC_OscConfig+0xc58>)
 80041ae:	f023 0301 	bic.w	r3, r3, #1
 80041b2:	6213      	str	r3, [r2, #32]
 80041b4:	4bbe      	ldr	r3, [pc, #760]	; (80044b0 <HAL_RCC_OscConfig+0xc58>)
 80041b6:	6a1b      	ldr	r3, [r3, #32]
 80041b8:	4abd      	ldr	r2, [pc, #756]	; (80044b0 <HAL_RCC_OscConfig+0xc58>)
 80041ba:	f023 0304 	bic.w	r3, r3, #4
 80041be:	6213      	str	r3, [r2, #32]
 80041c0:	e020      	b.n	8004204 <HAL_RCC_OscConfig+0x9ac>
 80041c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	2b05      	cmp	r3, #5
 80041d0:	d10c      	bne.n	80041ec <HAL_RCC_OscConfig+0x994>
 80041d2:	4bb7      	ldr	r3, [pc, #732]	; (80044b0 <HAL_RCC_OscConfig+0xc58>)
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	4ab6      	ldr	r2, [pc, #728]	; (80044b0 <HAL_RCC_OscConfig+0xc58>)
 80041d8:	f043 0304 	orr.w	r3, r3, #4
 80041dc:	6213      	str	r3, [r2, #32]
 80041de:	4bb4      	ldr	r3, [pc, #720]	; (80044b0 <HAL_RCC_OscConfig+0xc58>)
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	4ab3      	ldr	r2, [pc, #716]	; (80044b0 <HAL_RCC_OscConfig+0xc58>)
 80041e4:	f043 0301 	orr.w	r3, r3, #1
 80041e8:	6213      	str	r3, [r2, #32]
 80041ea:	e00b      	b.n	8004204 <HAL_RCC_OscConfig+0x9ac>
 80041ec:	4bb0      	ldr	r3, [pc, #704]	; (80044b0 <HAL_RCC_OscConfig+0xc58>)
 80041ee:	6a1b      	ldr	r3, [r3, #32]
 80041f0:	4aaf      	ldr	r2, [pc, #700]	; (80044b0 <HAL_RCC_OscConfig+0xc58>)
 80041f2:	f023 0301 	bic.w	r3, r3, #1
 80041f6:	6213      	str	r3, [r2, #32]
 80041f8:	4bad      	ldr	r3, [pc, #692]	; (80044b0 <HAL_RCC_OscConfig+0xc58>)
 80041fa:	6a1b      	ldr	r3, [r3, #32]
 80041fc:	4aac      	ldr	r2, [pc, #688]	; (80044b0 <HAL_RCC_OscConfig+0xc58>)
 80041fe:	f023 0304 	bic.w	r3, r3, #4
 8004202:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004204:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004208:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	2b00      	cmp	r3, #0
 8004212:	f000 8081 	beq.w	8004318 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004216:	f7fe fab7 	bl	8002788 <HAL_GetTick>
 800421a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800421e:	e00b      	b.n	8004238 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004220:	f7fe fab2 	bl	8002788 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004230:	4293      	cmp	r3, r2
 8004232:	d901      	bls.n	8004238 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e345      	b.n	80048c4 <HAL_RCC_OscConfig+0x106c>
 8004238:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800423c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004240:	2202      	movs	r2, #2
 8004242:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004244:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004248:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	fa93 f2a3 	rbit	r2, r3
 8004252:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004256:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800425a:	601a      	str	r2, [r3, #0]
 800425c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004260:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004264:	2202      	movs	r2, #2
 8004266:	601a      	str	r2, [r3, #0]
 8004268:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800426c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	fa93 f2a3 	rbit	r2, r3
 8004276:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800427a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800427e:	601a      	str	r2, [r3, #0]
  return result;
 8004280:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004284:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004288:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800428a:	fab3 f383 	clz	r3, r3
 800428e:	b2db      	uxtb	r3, r3
 8004290:	095b      	lsrs	r3, r3, #5
 8004292:	b2db      	uxtb	r3, r3
 8004294:	f043 0302 	orr.w	r3, r3, #2
 8004298:	b2db      	uxtb	r3, r3
 800429a:	2b02      	cmp	r3, #2
 800429c:	d102      	bne.n	80042a4 <HAL_RCC_OscConfig+0xa4c>
 800429e:	4b84      	ldr	r3, [pc, #528]	; (80044b0 <HAL_RCC_OscConfig+0xc58>)
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	e013      	b.n	80042cc <HAL_RCC_OscConfig+0xa74>
 80042a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042a8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80042ac:	2202      	movs	r2, #2
 80042ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042b4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	fa93 f2a3 	rbit	r2, r3
 80042be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042c2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80042c6:	601a      	str	r2, [r3, #0]
 80042c8:	4b79      	ldr	r3, [pc, #484]	; (80044b0 <HAL_RCC_OscConfig+0xc58>)
 80042ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80042d0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80042d4:	2102      	movs	r1, #2
 80042d6:	6011      	str	r1, [r2, #0]
 80042d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80042dc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80042e0:	6812      	ldr	r2, [r2, #0]
 80042e2:	fa92 f1a2 	rbit	r1, r2
 80042e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80042ea:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80042ee:	6011      	str	r1, [r2, #0]
  return result;
 80042f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80042f4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80042f8:	6812      	ldr	r2, [r2, #0]
 80042fa:	fab2 f282 	clz	r2, r2
 80042fe:	b2d2      	uxtb	r2, r2
 8004300:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004304:	b2d2      	uxtb	r2, r2
 8004306:	f002 021f 	and.w	r2, r2, #31
 800430a:	2101      	movs	r1, #1
 800430c:	fa01 f202 	lsl.w	r2, r1, r2
 8004310:	4013      	ands	r3, r2
 8004312:	2b00      	cmp	r3, #0
 8004314:	d084      	beq.n	8004220 <HAL_RCC_OscConfig+0x9c8>
 8004316:	e07f      	b.n	8004418 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004318:	f7fe fa36 	bl	8002788 <HAL_GetTick>
 800431c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004320:	e00b      	b.n	800433a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004322:	f7fe fa31 	bl	8002788 <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004332:	4293      	cmp	r3, r2
 8004334:	d901      	bls.n	800433a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e2c4      	b.n	80048c4 <HAL_RCC_OscConfig+0x106c>
 800433a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800433e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004342:	2202      	movs	r2, #2
 8004344:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004346:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800434a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	fa93 f2a3 	rbit	r2, r3
 8004354:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004358:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800435c:	601a      	str	r2, [r3, #0]
 800435e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004362:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004366:	2202      	movs	r2, #2
 8004368:	601a      	str	r2, [r3, #0]
 800436a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800436e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	fa93 f2a3 	rbit	r2, r3
 8004378:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800437c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004380:	601a      	str	r2, [r3, #0]
  return result;
 8004382:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004386:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800438a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800438c:	fab3 f383 	clz	r3, r3
 8004390:	b2db      	uxtb	r3, r3
 8004392:	095b      	lsrs	r3, r3, #5
 8004394:	b2db      	uxtb	r3, r3
 8004396:	f043 0302 	orr.w	r3, r3, #2
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2b02      	cmp	r3, #2
 800439e:	d102      	bne.n	80043a6 <HAL_RCC_OscConfig+0xb4e>
 80043a0:	4b43      	ldr	r3, [pc, #268]	; (80044b0 <HAL_RCC_OscConfig+0xc58>)
 80043a2:	6a1b      	ldr	r3, [r3, #32]
 80043a4:	e013      	b.n	80043ce <HAL_RCC_OscConfig+0xb76>
 80043a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043aa:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80043ae:	2202      	movs	r2, #2
 80043b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043b6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	fa93 f2a3 	rbit	r2, r3
 80043c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043c4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80043c8:	601a      	str	r2, [r3, #0]
 80043ca:	4b39      	ldr	r3, [pc, #228]	; (80044b0 <HAL_RCC_OscConfig+0xc58>)
 80043cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80043d2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80043d6:	2102      	movs	r1, #2
 80043d8:	6011      	str	r1, [r2, #0]
 80043da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80043de:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80043e2:	6812      	ldr	r2, [r2, #0]
 80043e4:	fa92 f1a2 	rbit	r1, r2
 80043e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80043ec:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80043f0:	6011      	str	r1, [r2, #0]
  return result;
 80043f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80043f6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80043fa:	6812      	ldr	r2, [r2, #0]
 80043fc:	fab2 f282 	clz	r2, r2
 8004400:	b2d2      	uxtb	r2, r2
 8004402:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004406:	b2d2      	uxtb	r2, r2
 8004408:	f002 021f 	and.w	r2, r2, #31
 800440c:	2101      	movs	r1, #1
 800440e:	fa01 f202 	lsl.w	r2, r1, r2
 8004412:	4013      	ands	r3, r2
 8004414:	2b00      	cmp	r3, #0
 8004416:	d184      	bne.n	8004322 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004418:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800441c:	2b01      	cmp	r3, #1
 800441e:	d105      	bne.n	800442c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004420:	4b23      	ldr	r3, [pc, #140]	; (80044b0 <HAL_RCC_OscConfig+0xc58>)
 8004422:	69db      	ldr	r3, [r3, #28]
 8004424:	4a22      	ldr	r2, [pc, #136]	; (80044b0 <HAL_RCC_OscConfig+0xc58>)
 8004426:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800442a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800442c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004430:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	69db      	ldr	r3, [r3, #28]
 8004438:	2b00      	cmp	r3, #0
 800443a:	f000 8242 	beq.w	80048c2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800443e:	4b1c      	ldr	r3, [pc, #112]	; (80044b0 <HAL_RCC_OscConfig+0xc58>)
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f003 030c 	and.w	r3, r3, #12
 8004446:	2b08      	cmp	r3, #8
 8004448:	f000 8213 	beq.w	8004872 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800444c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004450:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	69db      	ldr	r3, [r3, #28]
 8004458:	2b02      	cmp	r3, #2
 800445a:	f040 8162 	bne.w	8004722 <HAL_RCC_OscConfig+0xeca>
 800445e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004462:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004466:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800446a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800446c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004470:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	fa93 f2a3 	rbit	r2, r3
 800447a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800447e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004482:	601a      	str	r2, [r3, #0]
  return result;
 8004484:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004488:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800448c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800448e:	fab3 f383 	clz	r3, r3
 8004492:	b2db      	uxtb	r3, r3
 8004494:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004498:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	461a      	mov	r2, r3
 80044a0:	2300      	movs	r3, #0
 80044a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a4:	f7fe f970 	bl	8002788 <HAL_GetTick>
 80044a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044ac:	e00c      	b.n	80044c8 <HAL_RCC_OscConfig+0xc70>
 80044ae:	bf00      	nop
 80044b0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044b4:	f7fe f968 	bl	8002788 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d901      	bls.n	80044c8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e1fd      	b.n	80048c4 <HAL_RCC_OscConfig+0x106c>
 80044c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044cc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80044d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80044d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044da:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	fa93 f2a3 	rbit	r2, r3
 80044e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044e8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80044ec:	601a      	str	r2, [r3, #0]
  return result;
 80044ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044f2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80044f6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044f8:	fab3 f383 	clz	r3, r3
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	095b      	lsrs	r3, r3, #5
 8004500:	b2db      	uxtb	r3, r3
 8004502:	f043 0301 	orr.w	r3, r3, #1
 8004506:	b2db      	uxtb	r3, r3
 8004508:	2b01      	cmp	r3, #1
 800450a:	d102      	bne.n	8004512 <HAL_RCC_OscConfig+0xcba>
 800450c:	4bb0      	ldr	r3, [pc, #704]	; (80047d0 <HAL_RCC_OscConfig+0xf78>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	e027      	b.n	8004562 <HAL_RCC_OscConfig+0xd0a>
 8004512:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004516:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800451a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800451e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004520:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004524:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	fa93 f2a3 	rbit	r2, r3
 800452e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004532:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004536:	601a      	str	r2, [r3, #0]
 8004538:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800453c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004540:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004544:	601a      	str	r2, [r3, #0]
 8004546:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800454a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	fa93 f2a3 	rbit	r2, r3
 8004554:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004558:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800455c:	601a      	str	r2, [r3, #0]
 800455e:	4b9c      	ldr	r3, [pc, #624]	; (80047d0 <HAL_RCC_OscConfig+0xf78>)
 8004560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004562:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004566:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800456a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800456e:	6011      	str	r1, [r2, #0]
 8004570:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004574:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004578:	6812      	ldr	r2, [r2, #0]
 800457a:	fa92 f1a2 	rbit	r1, r2
 800457e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004582:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004586:	6011      	str	r1, [r2, #0]
  return result;
 8004588:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800458c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004590:	6812      	ldr	r2, [r2, #0]
 8004592:	fab2 f282 	clz	r2, r2
 8004596:	b2d2      	uxtb	r2, r2
 8004598:	f042 0220 	orr.w	r2, r2, #32
 800459c:	b2d2      	uxtb	r2, r2
 800459e:	f002 021f 	and.w	r2, r2, #31
 80045a2:	2101      	movs	r1, #1
 80045a4:	fa01 f202 	lsl.w	r2, r1, r2
 80045a8:	4013      	ands	r3, r2
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d182      	bne.n	80044b4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045ae:	4b88      	ldr	r3, [pc, #544]	; (80047d0 <HAL_RCC_OscConfig+0xf78>)
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80045b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80045c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	6a1b      	ldr	r3, [r3, #32]
 80045ce:	430b      	orrs	r3, r1
 80045d0:	497f      	ldr	r1, [pc, #508]	; (80047d0 <HAL_RCC_OscConfig+0xf78>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	604b      	str	r3, [r1, #4]
 80045d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045da:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80045de:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80045e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045e8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	fa93 f2a3 	rbit	r2, r3
 80045f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045f6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80045fa:	601a      	str	r2, [r3, #0]
  return result;
 80045fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004600:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004604:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004606:	fab3 f383 	clz	r3, r3
 800460a:	b2db      	uxtb	r3, r3
 800460c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004610:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	461a      	mov	r2, r3
 8004618:	2301      	movs	r3, #1
 800461a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800461c:	f7fe f8b4 	bl	8002788 <HAL_GetTick>
 8004620:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004624:	e009      	b.n	800463a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004626:	f7fe f8af 	bl	8002788 <HAL_GetTick>
 800462a:	4602      	mov	r2, r0
 800462c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	2b02      	cmp	r3, #2
 8004634:	d901      	bls.n	800463a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e144      	b.n	80048c4 <HAL_RCC_OscConfig+0x106c>
 800463a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800463e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004642:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004646:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004648:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800464c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	fa93 f2a3 	rbit	r2, r3
 8004656:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800465a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800465e:	601a      	str	r2, [r3, #0]
  return result;
 8004660:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004664:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004668:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800466a:	fab3 f383 	clz	r3, r3
 800466e:	b2db      	uxtb	r3, r3
 8004670:	095b      	lsrs	r3, r3, #5
 8004672:	b2db      	uxtb	r3, r3
 8004674:	f043 0301 	orr.w	r3, r3, #1
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b01      	cmp	r3, #1
 800467c:	d102      	bne.n	8004684 <HAL_RCC_OscConfig+0xe2c>
 800467e:	4b54      	ldr	r3, [pc, #336]	; (80047d0 <HAL_RCC_OscConfig+0xf78>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	e027      	b.n	80046d4 <HAL_RCC_OscConfig+0xe7c>
 8004684:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004688:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800468c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004690:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004692:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004696:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	fa93 f2a3 	rbit	r2, r3
 80046a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046a4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80046a8:	601a      	str	r2, [r3, #0]
 80046aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046ae:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80046b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046b6:	601a      	str	r2, [r3, #0]
 80046b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046bc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	fa93 f2a3 	rbit	r2, r3
 80046c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046ca:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80046ce:	601a      	str	r2, [r3, #0]
 80046d0:	4b3f      	ldr	r3, [pc, #252]	; (80047d0 <HAL_RCC_OscConfig+0xf78>)
 80046d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80046d8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80046dc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80046e0:	6011      	str	r1, [r2, #0]
 80046e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80046e6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80046ea:	6812      	ldr	r2, [r2, #0]
 80046ec:	fa92 f1a2 	rbit	r1, r2
 80046f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80046f4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80046f8:	6011      	str	r1, [r2, #0]
  return result;
 80046fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80046fe:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004702:	6812      	ldr	r2, [r2, #0]
 8004704:	fab2 f282 	clz	r2, r2
 8004708:	b2d2      	uxtb	r2, r2
 800470a:	f042 0220 	orr.w	r2, r2, #32
 800470e:	b2d2      	uxtb	r2, r2
 8004710:	f002 021f 	and.w	r2, r2, #31
 8004714:	2101      	movs	r1, #1
 8004716:	fa01 f202 	lsl.w	r2, r1, r2
 800471a:	4013      	ands	r3, r2
 800471c:	2b00      	cmp	r3, #0
 800471e:	d082      	beq.n	8004626 <HAL_RCC_OscConfig+0xdce>
 8004720:	e0cf      	b.n	80048c2 <HAL_RCC_OscConfig+0x106a>
 8004722:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004726:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800472a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800472e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004730:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004734:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	fa93 f2a3 	rbit	r2, r3
 800473e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004742:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004746:	601a      	str	r2, [r3, #0]
  return result;
 8004748:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800474c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004750:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004752:	fab3 f383 	clz	r3, r3
 8004756:	b2db      	uxtb	r3, r3
 8004758:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800475c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	461a      	mov	r2, r3
 8004764:	2300      	movs	r3, #0
 8004766:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004768:	f7fe f80e 	bl	8002788 <HAL_GetTick>
 800476c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004770:	e009      	b.n	8004786 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004772:	f7fe f809 	bl	8002788 <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	2b02      	cmp	r3, #2
 8004780:	d901      	bls.n	8004786 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e09e      	b.n	80048c4 <HAL_RCC_OscConfig+0x106c>
 8004786:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800478a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800478e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004792:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004794:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004798:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	fa93 f2a3 	rbit	r2, r3
 80047a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047a6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80047aa:	601a      	str	r2, [r3, #0]
  return result;
 80047ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047b0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80047b4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047b6:	fab3 f383 	clz	r3, r3
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	095b      	lsrs	r3, r3, #5
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	f043 0301 	orr.w	r3, r3, #1
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d104      	bne.n	80047d4 <HAL_RCC_OscConfig+0xf7c>
 80047ca:	4b01      	ldr	r3, [pc, #4]	; (80047d0 <HAL_RCC_OscConfig+0xf78>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	e029      	b.n	8004824 <HAL_RCC_OscConfig+0xfcc>
 80047d0:	40021000 	.word	0x40021000
 80047d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047d8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80047dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80047e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047e6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	fa93 f2a3 	rbit	r2, r3
 80047f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047f4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80047f8:	601a      	str	r2, [r3, #0]
 80047fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047fe:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004802:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004806:	601a      	str	r2, [r3, #0]
 8004808:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800480c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	fa93 f2a3 	rbit	r2, r3
 8004816:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800481a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800481e:	601a      	str	r2, [r3, #0]
 8004820:	4b2b      	ldr	r3, [pc, #172]	; (80048d0 <HAL_RCC_OscConfig+0x1078>)
 8004822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004824:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004828:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800482c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004830:	6011      	str	r1, [r2, #0]
 8004832:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004836:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800483a:	6812      	ldr	r2, [r2, #0]
 800483c:	fa92 f1a2 	rbit	r1, r2
 8004840:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004844:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004848:	6011      	str	r1, [r2, #0]
  return result;
 800484a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800484e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004852:	6812      	ldr	r2, [r2, #0]
 8004854:	fab2 f282 	clz	r2, r2
 8004858:	b2d2      	uxtb	r2, r2
 800485a:	f042 0220 	orr.w	r2, r2, #32
 800485e:	b2d2      	uxtb	r2, r2
 8004860:	f002 021f 	and.w	r2, r2, #31
 8004864:	2101      	movs	r1, #1
 8004866:	fa01 f202 	lsl.w	r2, r1, r2
 800486a:	4013      	ands	r3, r2
 800486c:	2b00      	cmp	r3, #0
 800486e:	d180      	bne.n	8004772 <HAL_RCC_OscConfig+0xf1a>
 8004870:	e027      	b.n	80048c2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004872:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004876:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	69db      	ldr	r3, [r3, #28]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d101      	bne.n	8004886 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e01e      	b.n	80048c4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004886:	4b12      	ldr	r3, [pc, #72]	; (80048d0 <HAL_RCC_OscConfig+0x1078>)
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800488e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004892:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004896:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800489a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d10b      	bne.n	80048be <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80048a6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80048aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80048ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d001      	beq.n	80048c2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e000      	b.n	80048c4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80048c2:	2300      	movs	r3, #0
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	40021000 	.word	0x40021000

080048d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b09e      	sub	sp, #120	; 0x78
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80048de:	2300      	movs	r3, #0
 80048e0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d101      	bne.n	80048ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e162      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048ec:	4b90      	ldr	r3, [pc, #576]	; (8004b30 <HAL_RCC_ClockConfig+0x25c>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0307 	and.w	r3, r3, #7
 80048f4:	683a      	ldr	r2, [r7, #0]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d910      	bls.n	800491c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048fa:	4b8d      	ldr	r3, [pc, #564]	; (8004b30 <HAL_RCC_ClockConfig+0x25c>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f023 0207 	bic.w	r2, r3, #7
 8004902:	498b      	ldr	r1, [pc, #556]	; (8004b30 <HAL_RCC_ClockConfig+0x25c>)
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	4313      	orrs	r3, r2
 8004908:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800490a:	4b89      	ldr	r3, [pc, #548]	; (8004b30 <HAL_RCC_ClockConfig+0x25c>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0307 	and.w	r3, r3, #7
 8004912:	683a      	ldr	r2, [r7, #0]
 8004914:	429a      	cmp	r2, r3
 8004916:	d001      	beq.n	800491c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e14a      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0302 	and.w	r3, r3, #2
 8004924:	2b00      	cmp	r3, #0
 8004926:	d008      	beq.n	800493a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004928:	4b82      	ldr	r3, [pc, #520]	; (8004b34 <HAL_RCC_ClockConfig+0x260>)
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	497f      	ldr	r1, [pc, #508]	; (8004b34 <HAL_RCC_ClockConfig+0x260>)
 8004936:	4313      	orrs	r3, r2
 8004938:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0301 	and.w	r3, r3, #1
 8004942:	2b00      	cmp	r3, #0
 8004944:	f000 80dc 	beq.w	8004b00 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	2b01      	cmp	r3, #1
 800494e:	d13c      	bne.n	80049ca <HAL_RCC_ClockConfig+0xf6>
 8004950:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004954:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004956:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004958:	fa93 f3a3 	rbit	r3, r3
 800495c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800495e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004960:	fab3 f383 	clz	r3, r3
 8004964:	b2db      	uxtb	r3, r3
 8004966:	095b      	lsrs	r3, r3, #5
 8004968:	b2db      	uxtb	r3, r3
 800496a:	f043 0301 	orr.w	r3, r3, #1
 800496e:	b2db      	uxtb	r3, r3
 8004970:	2b01      	cmp	r3, #1
 8004972:	d102      	bne.n	800497a <HAL_RCC_ClockConfig+0xa6>
 8004974:	4b6f      	ldr	r3, [pc, #444]	; (8004b34 <HAL_RCC_ClockConfig+0x260>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	e00f      	b.n	800499a <HAL_RCC_ClockConfig+0xc6>
 800497a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800497e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004980:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004982:	fa93 f3a3 	rbit	r3, r3
 8004986:	667b      	str	r3, [r7, #100]	; 0x64
 8004988:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800498c:	663b      	str	r3, [r7, #96]	; 0x60
 800498e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004990:	fa93 f3a3 	rbit	r3, r3
 8004994:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004996:	4b67      	ldr	r3, [pc, #412]	; (8004b34 <HAL_RCC_ClockConfig+0x260>)
 8004998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800499e:	65ba      	str	r2, [r7, #88]	; 0x58
 80049a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80049a2:	fa92 f2a2 	rbit	r2, r2
 80049a6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80049a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80049aa:	fab2 f282 	clz	r2, r2
 80049ae:	b2d2      	uxtb	r2, r2
 80049b0:	f042 0220 	orr.w	r2, r2, #32
 80049b4:	b2d2      	uxtb	r2, r2
 80049b6:	f002 021f 	and.w	r2, r2, #31
 80049ba:	2101      	movs	r1, #1
 80049bc:	fa01 f202 	lsl.w	r2, r1, r2
 80049c0:	4013      	ands	r3, r2
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d17b      	bne.n	8004abe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e0f3      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d13c      	bne.n	8004a4c <HAL_RCC_ClockConfig+0x178>
 80049d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049d6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049da:	fa93 f3a3 	rbit	r3, r3
 80049de:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80049e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049e2:	fab3 f383 	clz	r3, r3
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	095b      	lsrs	r3, r3, #5
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	f043 0301 	orr.w	r3, r3, #1
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d102      	bne.n	80049fc <HAL_RCC_ClockConfig+0x128>
 80049f6:	4b4f      	ldr	r3, [pc, #316]	; (8004b34 <HAL_RCC_ClockConfig+0x260>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	e00f      	b.n	8004a1c <HAL_RCC_ClockConfig+0x148>
 80049fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a00:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a04:	fa93 f3a3 	rbit	r3, r3
 8004a08:	647b      	str	r3, [r7, #68]	; 0x44
 8004a0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a0e:	643b      	str	r3, [r7, #64]	; 0x40
 8004a10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a12:	fa93 f3a3 	rbit	r3, r3
 8004a16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a18:	4b46      	ldr	r3, [pc, #280]	; (8004b34 <HAL_RCC_ClockConfig+0x260>)
 8004a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a20:	63ba      	str	r2, [r7, #56]	; 0x38
 8004a22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a24:	fa92 f2a2 	rbit	r2, r2
 8004a28:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004a2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a2c:	fab2 f282 	clz	r2, r2
 8004a30:	b2d2      	uxtb	r2, r2
 8004a32:	f042 0220 	orr.w	r2, r2, #32
 8004a36:	b2d2      	uxtb	r2, r2
 8004a38:	f002 021f 	and.w	r2, r2, #31
 8004a3c:	2101      	movs	r1, #1
 8004a3e:	fa01 f202 	lsl.w	r2, r1, r2
 8004a42:	4013      	ands	r3, r2
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d13a      	bne.n	8004abe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e0b2      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x2de>
 8004a4c:	2302      	movs	r3, #2
 8004a4e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a52:	fa93 f3a3 	rbit	r3, r3
 8004a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a5a:	fab3 f383 	clz	r3, r3
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	095b      	lsrs	r3, r3, #5
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	f043 0301 	orr.w	r3, r3, #1
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d102      	bne.n	8004a74 <HAL_RCC_ClockConfig+0x1a0>
 8004a6e:	4b31      	ldr	r3, [pc, #196]	; (8004b34 <HAL_RCC_ClockConfig+0x260>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	e00d      	b.n	8004a90 <HAL_RCC_ClockConfig+0x1bc>
 8004a74:	2302      	movs	r3, #2
 8004a76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a7a:	fa93 f3a3 	rbit	r3, r3
 8004a7e:	627b      	str	r3, [r7, #36]	; 0x24
 8004a80:	2302      	movs	r3, #2
 8004a82:	623b      	str	r3, [r7, #32]
 8004a84:	6a3b      	ldr	r3, [r7, #32]
 8004a86:	fa93 f3a3 	rbit	r3, r3
 8004a8a:	61fb      	str	r3, [r7, #28]
 8004a8c:	4b29      	ldr	r3, [pc, #164]	; (8004b34 <HAL_RCC_ClockConfig+0x260>)
 8004a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a90:	2202      	movs	r2, #2
 8004a92:	61ba      	str	r2, [r7, #24]
 8004a94:	69ba      	ldr	r2, [r7, #24]
 8004a96:	fa92 f2a2 	rbit	r2, r2
 8004a9a:	617a      	str	r2, [r7, #20]
  return result;
 8004a9c:	697a      	ldr	r2, [r7, #20]
 8004a9e:	fab2 f282 	clz	r2, r2
 8004aa2:	b2d2      	uxtb	r2, r2
 8004aa4:	f042 0220 	orr.w	r2, r2, #32
 8004aa8:	b2d2      	uxtb	r2, r2
 8004aaa:	f002 021f 	and.w	r2, r2, #31
 8004aae:	2101      	movs	r1, #1
 8004ab0:	fa01 f202 	lsl.w	r2, r1, r2
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d101      	bne.n	8004abe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e079      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004abe:	4b1d      	ldr	r3, [pc, #116]	; (8004b34 <HAL_RCC_ClockConfig+0x260>)
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f023 0203 	bic.w	r2, r3, #3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	491a      	ldr	r1, [pc, #104]	; (8004b34 <HAL_RCC_ClockConfig+0x260>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ad0:	f7fd fe5a 	bl	8002788 <HAL_GetTick>
 8004ad4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ad6:	e00a      	b.n	8004aee <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ad8:	f7fd fe56 	bl	8002788 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d901      	bls.n	8004aee <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e061      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aee:	4b11      	ldr	r3, [pc, #68]	; (8004b34 <HAL_RCC_ClockConfig+0x260>)
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	f003 020c 	and.w	r2, r3, #12
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d1eb      	bne.n	8004ad8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b00:	4b0b      	ldr	r3, [pc, #44]	; (8004b30 <HAL_RCC_ClockConfig+0x25c>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0307 	and.w	r3, r3, #7
 8004b08:	683a      	ldr	r2, [r7, #0]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d214      	bcs.n	8004b38 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b0e:	4b08      	ldr	r3, [pc, #32]	; (8004b30 <HAL_RCC_ClockConfig+0x25c>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f023 0207 	bic.w	r2, r3, #7
 8004b16:	4906      	ldr	r1, [pc, #24]	; (8004b30 <HAL_RCC_ClockConfig+0x25c>)
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b1e:	4b04      	ldr	r3, [pc, #16]	; (8004b30 <HAL_RCC_ClockConfig+0x25c>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0307 	and.w	r3, r3, #7
 8004b26:	683a      	ldr	r2, [r7, #0]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d005      	beq.n	8004b38 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e040      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x2de>
 8004b30:	40022000 	.word	0x40022000
 8004b34:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0304 	and.w	r3, r3, #4
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d008      	beq.n	8004b56 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b44:	4b1d      	ldr	r3, [pc, #116]	; (8004bbc <HAL_RCC_ClockConfig+0x2e8>)
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	491a      	ldr	r1, [pc, #104]	; (8004bbc <HAL_RCC_ClockConfig+0x2e8>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0308 	and.w	r3, r3, #8
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d009      	beq.n	8004b76 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b62:	4b16      	ldr	r3, [pc, #88]	; (8004bbc <HAL_RCC_ClockConfig+0x2e8>)
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	00db      	lsls	r3, r3, #3
 8004b70:	4912      	ldr	r1, [pc, #72]	; (8004bbc <HAL_RCC_ClockConfig+0x2e8>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004b76:	f000 f829 	bl	8004bcc <HAL_RCC_GetSysClockFreq>
 8004b7a:	4601      	mov	r1, r0
 8004b7c:	4b0f      	ldr	r3, [pc, #60]	; (8004bbc <HAL_RCC_ClockConfig+0x2e8>)
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b84:	22f0      	movs	r2, #240	; 0xf0
 8004b86:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	fa92 f2a2 	rbit	r2, r2
 8004b8e:	60fa      	str	r2, [r7, #12]
  return result;
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	fab2 f282 	clz	r2, r2
 8004b96:	b2d2      	uxtb	r2, r2
 8004b98:	40d3      	lsrs	r3, r2
 8004b9a:	4a09      	ldr	r2, [pc, #36]	; (8004bc0 <HAL_RCC_ClockConfig+0x2ec>)
 8004b9c:	5cd3      	ldrb	r3, [r2, r3]
 8004b9e:	fa21 f303 	lsr.w	r3, r1, r3
 8004ba2:	4a08      	ldr	r2, [pc, #32]	; (8004bc4 <HAL_RCC_ClockConfig+0x2f0>)
 8004ba4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004ba6:	4b08      	ldr	r3, [pc, #32]	; (8004bc8 <HAL_RCC_ClockConfig+0x2f4>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7fd fb02 	bl	80021b4 <HAL_InitTick>
  
  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3778      	adds	r7, #120	; 0x78
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	40021000 	.word	0x40021000
 8004bc0:	080099ac 	.word	0x080099ac
 8004bc4:	20000000 	.word	0x20000000
 8004bc8:	20000004 	.word	0x20000004

08004bcc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b08b      	sub	sp, #44	; 0x2c
 8004bd0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	61fb      	str	r3, [r7, #28]
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	61bb      	str	r3, [r7, #24]
 8004bda:	2300      	movs	r3, #0
 8004bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8004bde:	2300      	movs	r3, #0
 8004be0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004be2:	2300      	movs	r3, #0
 8004be4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004be6:	4b29      	ldr	r3, [pc, #164]	; (8004c8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	f003 030c 	and.w	r3, r3, #12
 8004bf2:	2b04      	cmp	r3, #4
 8004bf4:	d002      	beq.n	8004bfc <HAL_RCC_GetSysClockFreq+0x30>
 8004bf6:	2b08      	cmp	r3, #8
 8004bf8:	d003      	beq.n	8004c02 <HAL_RCC_GetSysClockFreq+0x36>
 8004bfa:	e03c      	b.n	8004c76 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004bfc:	4b24      	ldr	r3, [pc, #144]	; (8004c90 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004bfe:	623b      	str	r3, [r7, #32]
      break;
 8004c00:	e03c      	b.n	8004c7c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004c08:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004c0c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c0e:	68ba      	ldr	r2, [r7, #8]
 8004c10:	fa92 f2a2 	rbit	r2, r2
 8004c14:	607a      	str	r2, [r7, #4]
  return result;
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	fab2 f282 	clz	r2, r2
 8004c1c:	b2d2      	uxtb	r2, r2
 8004c1e:	40d3      	lsrs	r3, r2
 8004c20:	4a1c      	ldr	r2, [pc, #112]	; (8004c94 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004c22:	5cd3      	ldrb	r3, [r2, r3]
 8004c24:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004c26:	4b19      	ldr	r3, [pc, #100]	; (8004c8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2a:	f003 030f 	and.w	r3, r3, #15
 8004c2e:	220f      	movs	r2, #15
 8004c30:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c32:	693a      	ldr	r2, [r7, #16]
 8004c34:	fa92 f2a2 	rbit	r2, r2
 8004c38:	60fa      	str	r2, [r7, #12]
  return result;
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	fab2 f282 	clz	r2, r2
 8004c40:	b2d2      	uxtb	r2, r2
 8004c42:	40d3      	lsrs	r3, r2
 8004c44:	4a14      	ldr	r2, [pc, #80]	; (8004c98 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004c46:	5cd3      	ldrb	r3, [r2, r3]
 8004c48:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d008      	beq.n	8004c66 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004c54:	4a0e      	ldr	r2, [pc, #56]	; (8004c90 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	fb02 f303 	mul.w	r3, r2, r3
 8004c62:	627b      	str	r3, [r7, #36]	; 0x24
 8004c64:	e004      	b.n	8004c70 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	4a0c      	ldr	r2, [pc, #48]	; (8004c9c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004c6a:	fb02 f303 	mul.w	r3, r2, r3
 8004c6e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c72:	623b      	str	r3, [r7, #32]
      break;
 8004c74:	e002      	b.n	8004c7c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004c76:	4b06      	ldr	r3, [pc, #24]	; (8004c90 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004c78:	623b      	str	r3, [r7, #32]
      break;
 8004c7a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c7c:	6a3b      	ldr	r3, [r7, #32]
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	372c      	adds	r7, #44	; 0x2c
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	40021000 	.word	0x40021000
 8004c90:	007a1200 	.word	0x007a1200
 8004c94:	080099c4 	.word	0x080099c4
 8004c98:	080099d4 	.word	0x080099d4
 8004c9c:	003d0900 	.word	0x003d0900

08004ca0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ca4:	4b03      	ldr	r3, [pc, #12]	; (8004cb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	20000000 	.word	0x20000000

08004cb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004cbe:	f7ff ffef 	bl	8004ca0 <HAL_RCC_GetHCLKFreq>
 8004cc2:	4601      	mov	r1, r0
 8004cc4:	4b0b      	ldr	r3, [pc, #44]	; (8004cf4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004ccc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004cd0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	fa92 f2a2 	rbit	r2, r2
 8004cd8:	603a      	str	r2, [r7, #0]
  return result;
 8004cda:	683a      	ldr	r2, [r7, #0]
 8004cdc:	fab2 f282 	clz	r2, r2
 8004ce0:	b2d2      	uxtb	r2, r2
 8004ce2:	40d3      	lsrs	r3, r2
 8004ce4:	4a04      	ldr	r2, [pc, #16]	; (8004cf8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004ce6:	5cd3      	ldrb	r3, [r2, r3]
 8004ce8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004cec:	4618      	mov	r0, r3
 8004cee:	3708      	adds	r7, #8
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	40021000 	.word	0x40021000
 8004cf8:	080099bc 	.word	0x080099bc

08004cfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004d02:	f7ff ffcd 	bl	8004ca0 <HAL_RCC_GetHCLKFreq>
 8004d06:	4601      	mov	r1, r0
 8004d08:	4b0b      	ldr	r3, [pc, #44]	; (8004d38 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004d10:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004d14:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	fa92 f2a2 	rbit	r2, r2
 8004d1c:	603a      	str	r2, [r7, #0]
  return result;
 8004d1e:	683a      	ldr	r2, [r7, #0]
 8004d20:	fab2 f282 	clz	r2, r2
 8004d24:	b2d2      	uxtb	r2, r2
 8004d26:	40d3      	lsrs	r3, r2
 8004d28:	4a04      	ldr	r2, [pc, #16]	; (8004d3c <HAL_RCC_GetPCLK2Freq+0x40>)
 8004d2a:	5cd3      	ldrb	r3, [r2, r3]
 8004d2c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004d30:	4618      	mov	r0, r3
 8004d32:	3708      	adds	r7, #8
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	40021000 	.word	0x40021000
 8004d3c:	080099bc 	.word	0x080099bc

08004d40 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	220f      	movs	r2, #15
 8004d4e:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004d50:	4b12      	ldr	r3, [pc, #72]	; (8004d9c <HAL_RCC_GetClockConfig+0x5c>)
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f003 0203 	and.w	r2, r3, #3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8004d5c:	4b0f      	ldr	r3, [pc, #60]	; (8004d9c <HAL_RCC_GetClockConfig+0x5c>)
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8004d68:	4b0c      	ldr	r3, [pc, #48]	; (8004d9c <HAL_RCC_GetClockConfig+0x5c>)
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004d74:	4b09      	ldr	r3, [pc, #36]	; (8004d9c <HAL_RCC_GetClockConfig+0x5c>)
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	08db      	lsrs	r3, r3, #3
 8004d7a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8004d82:	4b07      	ldr	r3, [pc, #28]	; (8004da0 <HAL_RCC_GetClockConfig+0x60>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0207 	and.w	r2, r3, #7
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	601a      	str	r2, [r3, #0]
}
 8004d8e:	bf00      	nop
 8004d90:	370c      	adds	r7, #12
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop
 8004d9c:	40021000 	.word	0x40021000
 8004da0:	40022000 	.word	0x40022000

08004da4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b092      	sub	sp, #72	; 0x48
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004dac:	2300      	movs	r3, #0
 8004dae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004db0:	2300      	movs	r3, #0
 8004db2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004db4:	2300      	movs	r3, #0
 8004db6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	f000 80d4 	beq.w	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dc8:	4b4e      	ldr	r3, [pc, #312]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dca:	69db      	ldr	r3, [r3, #28]
 8004dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d10e      	bne.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dd4:	4b4b      	ldr	r3, [pc, #300]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dd6:	69db      	ldr	r3, [r3, #28]
 8004dd8:	4a4a      	ldr	r2, [pc, #296]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dde:	61d3      	str	r3, [r2, #28]
 8004de0:	4b48      	ldr	r3, [pc, #288]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004de2:	69db      	ldr	r3, [r3, #28]
 8004de4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004de8:	60bb      	str	r3, [r7, #8]
 8004dea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dec:	2301      	movs	r3, #1
 8004dee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004df2:	4b45      	ldr	r3, [pc, #276]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d118      	bne.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dfe:	4b42      	ldr	r3, [pc, #264]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a41      	ldr	r2, [pc, #260]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e08:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e0a:	f7fd fcbd 	bl	8002788 <HAL_GetTick>
 8004e0e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e10:	e008      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e12:	f7fd fcb9 	bl	8002788 <HAL_GetTick>
 8004e16:	4602      	mov	r2, r0
 8004e18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	2b64      	cmp	r3, #100	; 0x64
 8004e1e:	d901      	bls.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e13c      	b.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e24:	4b38      	ldr	r3, [pc, #224]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d0f0      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e30:	4b34      	ldr	r3, [pc, #208]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e32:	6a1b      	ldr	r3, [r3, #32]
 8004e34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e38:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	f000 8084 	beq.w	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d07c      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e50:	4b2c      	ldr	r3, [pc, #176]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e52:	6a1b      	ldr	r3, [r3, #32]
 8004e54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004e5e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e62:	fa93 f3a3 	rbit	r3, r3
 8004e66:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e6a:	fab3 f383 	clz	r3, r3
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	461a      	mov	r2, r3
 8004e72:	4b26      	ldr	r3, [pc, #152]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004e74:	4413      	add	r3, r2
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	461a      	mov	r2, r3
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	6013      	str	r3, [r2, #0]
 8004e7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004e82:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e86:	fa93 f3a3 	rbit	r3, r3
 8004e8a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e8e:	fab3 f383 	clz	r3, r3
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	461a      	mov	r2, r3
 8004e96:	4b1d      	ldr	r3, [pc, #116]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004e98:	4413      	add	r3, r2
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004ea2:	4a18      	ldr	r2, [pc, #96]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ea4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ea6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eaa:	f003 0301 	and.w	r3, r3, #1
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d04b      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eb2:	f7fd fc69 	bl	8002788 <HAL_GetTick>
 8004eb6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eb8:	e00a      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eba:	f7fd fc65 	bl	8002788 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d901      	bls.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e0e6      	b.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed6:	fa93 f3a3 	rbit	r3, r3
 8004eda:	627b      	str	r3, [r7, #36]	; 0x24
 8004edc:	2302      	movs	r3, #2
 8004ede:	623b      	str	r3, [r7, #32]
 8004ee0:	6a3b      	ldr	r3, [r7, #32]
 8004ee2:	fa93 f3a3 	rbit	r3, r3
 8004ee6:	61fb      	str	r3, [r7, #28]
  return result;
 8004ee8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eea:	fab3 f383 	clz	r3, r3
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	095b      	lsrs	r3, r3, #5
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	f043 0302 	orr.w	r3, r3, #2
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d108      	bne.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004efe:	4b01      	ldr	r3, [pc, #4]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	e00d      	b.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004f04:	40021000 	.word	0x40021000
 8004f08:	40007000 	.word	0x40007000
 8004f0c:	10908100 	.word	0x10908100
 8004f10:	2302      	movs	r3, #2
 8004f12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	fa93 f3a3 	rbit	r3, r3
 8004f1a:	617b      	str	r3, [r7, #20]
 8004f1c:	4b62      	ldr	r3, [pc, #392]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f20:	2202      	movs	r2, #2
 8004f22:	613a      	str	r2, [r7, #16]
 8004f24:	693a      	ldr	r2, [r7, #16]
 8004f26:	fa92 f2a2 	rbit	r2, r2
 8004f2a:	60fa      	str	r2, [r7, #12]
  return result;
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	fab2 f282 	clz	r2, r2
 8004f32:	b2d2      	uxtb	r2, r2
 8004f34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f38:	b2d2      	uxtb	r2, r2
 8004f3a:	f002 021f 	and.w	r2, r2, #31
 8004f3e:	2101      	movs	r1, #1
 8004f40:	fa01 f202 	lsl.w	r2, r1, r2
 8004f44:	4013      	ands	r3, r2
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d0b7      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004f4a:	4b57      	ldr	r3, [pc, #348]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004f4c:	6a1b      	ldr	r3, [r3, #32]
 8004f4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	4954      	ldr	r1, [pc, #336]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004f5c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d105      	bne.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f64:	4b50      	ldr	r3, [pc, #320]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004f66:	69db      	ldr	r3, [r3, #28]
 8004f68:	4a4f      	ldr	r2, [pc, #316]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004f6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f6e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0301 	and.w	r3, r3, #1
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d008      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f7c:	4b4a      	ldr	r3, [pc, #296]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f80:	f023 0203 	bic.w	r2, r3, #3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	4947      	ldr	r1, [pc, #284]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0320 	and.w	r3, r3, #32
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d008      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f9a:	4b43      	ldr	r3, [pc, #268]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9e:	f023 0210 	bic.w	r2, r3, #16
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	4940      	ldr	r1, [pc, #256]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d008      	beq.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004fb8:	4b3b      	ldr	r3, [pc, #236]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fbc:	f023 0220 	bic.w	r2, r3, #32
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	691b      	ldr	r3, [r3, #16]
 8004fc4:	4938      	ldr	r1, [pc, #224]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d008      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004fd6:	4b34      	ldr	r3, [pc, #208]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fda:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	4931      	ldr	r1, [pc, #196]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d008      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004ff4:	4b2c      	ldr	r3, [pc, #176]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	69db      	ldr	r3, [r3, #28]
 8005000:	4929      	ldr	r1, [pc, #164]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005002:	4313      	orrs	r3, r2
 8005004:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800500e:	2b00      	cmp	r3, #0
 8005010:	d008      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8005012:	4b25      	ldr	r3, [pc, #148]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005016:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	4922      	ldr	r1, [pc, #136]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005020:	4313      	orrs	r3, r2
 8005022:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d008      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005030:	4b1d      	ldr	r3, [pc, #116]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005034:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a1b      	ldr	r3, [r3, #32]
 800503c:	491a      	ldr	r1, [pc, #104]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800503e:	4313      	orrs	r3, r2
 8005040:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d008      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800504e:	4b16      	ldr	r3, [pc, #88]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005052:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505a:	4913      	ldr	r1, [pc, #76]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800505c:	4313      	orrs	r3, r2
 800505e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d008      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800506c:	4b0e      	ldr	r3, [pc, #56]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800506e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005070:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005078:	490b      	ldr	r1, [pc, #44]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800507a:	4313      	orrs	r3, r2
 800507c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d008      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800508a:	4b07      	ldr	r3, [pc, #28]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800508c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800508e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005096:	4904      	ldr	r1, [pc, #16]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005098:	4313      	orrs	r3, r2
 800509a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3748      	adds	r7, #72	; 0x48
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	40021000 	.word	0x40021000

080050ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d101      	bne.n	80050be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e09d      	b.n	80051fa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d108      	bne.n	80050d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050ce:	d009      	beq.n	80050e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	61da      	str	r2, [r3, #28]
 80050d6:	e005      	b.n	80050e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d106      	bne.n	8005104 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f7fc ff40 	bl	8001f84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2202      	movs	r2, #2
 8005108:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800511a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005124:	d902      	bls.n	800512c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005126:	2300      	movs	r3, #0
 8005128:	60fb      	str	r3, [r7, #12]
 800512a:	e002      	b.n	8005132 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800512c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005130:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800513a:	d007      	beq.n	800514c <HAL_SPI_Init+0xa0>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005144:	d002      	beq.n	800514c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800515c:	431a      	orrs	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	431a      	orrs	r2, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	695b      	ldr	r3, [r3, #20]
 800516c:	f003 0301 	and.w	r3, r3, #1
 8005170:	431a      	orrs	r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	699b      	ldr	r3, [r3, #24]
 8005176:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800517a:	431a      	orrs	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	69db      	ldr	r3, [r3, #28]
 8005180:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005184:	431a      	orrs	r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a1b      	ldr	r3, [r3, #32]
 800518a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800518e:	ea42 0103 	orr.w	r1, r2, r3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005196:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	430a      	orrs	r2, r1
 80051a0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	0c1b      	lsrs	r3, r3, #16
 80051a8:	f003 0204 	and.w	r2, r3, #4
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b0:	f003 0310 	and.w	r3, r3, #16
 80051b4:	431a      	orrs	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ba:	f003 0308 	and.w	r3, r3, #8
 80051be:	431a      	orrs	r2, r3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80051c8:	ea42 0103 	orr.w	r1, r2, r3
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	430a      	orrs	r2, r1
 80051d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	69da      	ldr	r2, [r3, #28]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}

08005202 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005202:	b580      	push	{r7, lr}
 8005204:	b082      	sub	sp, #8
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d101      	bne.n	8005214 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e049      	b.n	80052a8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800521a:	b2db      	uxtb	r3, r3
 800521c:	2b00      	cmp	r3, #0
 800521e:	d106      	bne.n	800522e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f7fc feef 	bl	800200c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2202      	movs	r2, #2
 8005232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	3304      	adds	r3, #4
 800523e:	4619      	mov	r1, r3
 8005240:	4610      	mov	r0, r2
 8005242:	f000 f9d1 	bl	80055e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2201      	movs	r2, #1
 800524a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2201      	movs	r2, #1
 8005252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2201      	movs	r2, #1
 800525a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2201      	movs	r2, #1
 8005262:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2201      	movs	r2, #1
 800526a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2201      	movs	r2, #1
 8005272:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2201      	movs	r2, #1
 800527a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2201      	movs	r2, #1
 8005282:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2201      	movs	r2, #1
 800528a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2201      	movs	r2, #1
 8005292:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2201      	movs	r2, #1
 800529a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2201      	movs	r2, #1
 80052a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3708      	adds	r7, #8
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d001      	beq.n	80052c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e03b      	b.n	8005340 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2202      	movs	r2, #2
 80052cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68da      	ldr	r2, [r3, #12]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f042 0201 	orr.w	r2, r2, #1
 80052de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a19      	ldr	r2, [pc, #100]	; (800534c <HAL_TIM_Base_Start_IT+0x9c>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d009      	beq.n	80052fe <HAL_TIM_Base_Start_IT+0x4e>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052f2:	d004      	beq.n	80052fe <HAL_TIM_Base_Start_IT+0x4e>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a15      	ldr	r2, [pc, #84]	; (8005350 <HAL_TIM_Base_Start_IT+0xa0>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d115      	bne.n	800532a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	689a      	ldr	r2, [r3, #8]
 8005304:	4b13      	ldr	r3, [pc, #76]	; (8005354 <HAL_TIM_Base_Start_IT+0xa4>)
 8005306:	4013      	ands	r3, r2
 8005308:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2b06      	cmp	r3, #6
 800530e:	d015      	beq.n	800533c <HAL_TIM_Base_Start_IT+0x8c>
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005316:	d011      	beq.n	800533c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f042 0201 	orr.w	r2, r2, #1
 8005326:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005328:	e008      	b.n	800533c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f042 0201 	orr.w	r2, r2, #1
 8005338:	601a      	str	r2, [r3, #0]
 800533a:	e000      	b.n	800533e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800533c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800533e:	2300      	movs	r3, #0
}
 8005340:	4618      	mov	r0, r3
 8005342:	3714      	adds	r7, #20
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr
 800534c:	40012c00 	.word	0x40012c00
 8005350:	40014000 	.word	0x40014000
 8005354:	00010007 	.word	0x00010007

08005358 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b082      	sub	sp, #8
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	f003 0302 	and.w	r3, r3, #2
 800536a:	2b02      	cmp	r3, #2
 800536c:	d122      	bne.n	80053b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	f003 0302 	and.w	r3, r3, #2
 8005378:	2b02      	cmp	r3, #2
 800537a:	d11b      	bne.n	80053b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f06f 0202 	mvn.w	r2, #2
 8005384:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2201      	movs	r2, #1
 800538a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	f003 0303 	and.w	r3, r3, #3
 8005396:	2b00      	cmp	r3, #0
 8005398:	d003      	beq.n	80053a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 f905 	bl	80055aa <HAL_TIM_IC_CaptureCallback>
 80053a0:	e005      	b.n	80053ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 f8f7 	bl	8005596 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f000 f908 	bl	80055be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	f003 0304 	and.w	r3, r3, #4
 80053be:	2b04      	cmp	r3, #4
 80053c0:	d122      	bne.n	8005408 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	f003 0304 	and.w	r3, r3, #4
 80053cc:	2b04      	cmp	r3, #4
 80053ce:	d11b      	bne.n	8005408 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f06f 0204 	mvn.w	r2, #4
 80053d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2202      	movs	r2, #2
 80053de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	699b      	ldr	r3, [r3, #24]
 80053e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d003      	beq.n	80053f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 f8db 	bl	80055aa <HAL_TIM_IC_CaptureCallback>
 80053f4:	e005      	b.n	8005402 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 f8cd 	bl	8005596 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f000 f8de 	bl	80055be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	f003 0308 	and.w	r3, r3, #8
 8005412:	2b08      	cmp	r3, #8
 8005414:	d122      	bne.n	800545c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	f003 0308 	and.w	r3, r3, #8
 8005420:	2b08      	cmp	r3, #8
 8005422:	d11b      	bne.n	800545c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f06f 0208 	mvn.w	r2, #8
 800542c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2204      	movs	r2, #4
 8005432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	69db      	ldr	r3, [r3, #28]
 800543a:	f003 0303 	and.w	r3, r3, #3
 800543e:	2b00      	cmp	r3, #0
 8005440:	d003      	beq.n	800544a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 f8b1 	bl	80055aa <HAL_TIM_IC_CaptureCallback>
 8005448:	e005      	b.n	8005456 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 f8a3 	bl	8005596 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f000 f8b4 	bl	80055be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	f003 0310 	and.w	r3, r3, #16
 8005466:	2b10      	cmp	r3, #16
 8005468:	d122      	bne.n	80054b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	f003 0310 	and.w	r3, r3, #16
 8005474:	2b10      	cmp	r3, #16
 8005476:	d11b      	bne.n	80054b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f06f 0210 	mvn.w	r2, #16
 8005480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2208      	movs	r2, #8
 8005486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	69db      	ldr	r3, [r3, #28]
 800548e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005492:	2b00      	cmp	r3, #0
 8005494:	d003      	beq.n	800549e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 f887 	bl	80055aa <HAL_TIM_IC_CaptureCallback>
 800549c:	e005      	b.n	80054aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 f879 	bl	8005596 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 f88a 	bl	80055be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	f003 0301 	and.w	r3, r3, #1
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d10e      	bne.n	80054dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	f003 0301 	and.w	r3, r3, #1
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d107      	bne.n	80054dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f06f 0201 	mvn.w	r2, #1
 80054d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f7fc fcd8 	bl	8001e8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054e6:	2b80      	cmp	r3, #128	; 0x80
 80054e8:	d10e      	bne.n	8005508 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054f4:	2b80      	cmp	r3, #128	; 0x80
 80054f6:	d107      	bne.n	8005508 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 f8e8 	bl	80056d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005512:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005516:	d10e      	bne.n	8005536 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005522:	2b80      	cmp	r3, #128	; 0x80
 8005524:	d107      	bne.n	8005536 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800552e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f000 f8db 	bl	80056ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	691b      	ldr	r3, [r3, #16]
 800553c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005540:	2b40      	cmp	r3, #64	; 0x40
 8005542:	d10e      	bne.n	8005562 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800554e:	2b40      	cmp	r3, #64	; 0x40
 8005550:	d107      	bne.n	8005562 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800555a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f000 f838 	bl	80055d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	f003 0320 	and.w	r3, r3, #32
 800556c:	2b20      	cmp	r3, #32
 800556e:	d10e      	bne.n	800558e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	f003 0320 	and.w	r3, r3, #32
 800557a:	2b20      	cmp	r3, #32
 800557c:	d107      	bne.n	800558e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f06f 0220 	mvn.w	r2, #32
 8005586:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f000 f89b 	bl	80056c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800558e:	bf00      	nop
 8005590:	3708      	adds	r7, #8
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005596:	b480      	push	{r7}
 8005598:	b083      	sub	sp, #12
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800559e:	bf00      	nop
 80055a0:	370c      	adds	r7, #12
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr

080055aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055aa:	b480      	push	{r7}
 80055ac:	b083      	sub	sp, #12
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055b2:	bf00      	nop
 80055b4:	370c      	adds	r7, #12
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr

080055be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055be:	b480      	push	{r7}
 80055c0:	b083      	sub	sp, #12
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055c6:	bf00      	nop
 80055c8:	370c      	adds	r7, #12
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr

080055d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055d2:	b480      	push	{r7}
 80055d4:	b083      	sub	sp, #12
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055da:	bf00      	nop
 80055dc:	370c      	adds	r7, #12
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
	...

080055e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a2e      	ldr	r2, [pc, #184]	; (80056b4 <TIM_Base_SetConfig+0xcc>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d003      	beq.n	8005608 <TIM_Base_SetConfig+0x20>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005606:	d108      	bne.n	800561a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800560e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	4313      	orrs	r3, r2
 8005618:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a25      	ldr	r2, [pc, #148]	; (80056b4 <TIM_Base_SetConfig+0xcc>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d00f      	beq.n	8005642 <TIM_Base_SetConfig+0x5a>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005628:	d00b      	beq.n	8005642 <TIM_Base_SetConfig+0x5a>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a22      	ldr	r2, [pc, #136]	; (80056b8 <TIM_Base_SetConfig+0xd0>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d007      	beq.n	8005642 <TIM_Base_SetConfig+0x5a>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a21      	ldr	r2, [pc, #132]	; (80056bc <TIM_Base_SetConfig+0xd4>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d003      	beq.n	8005642 <TIM_Base_SetConfig+0x5a>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a20      	ldr	r2, [pc, #128]	; (80056c0 <TIM_Base_SetConfig+0xd8>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d108      	bne.n	8005654 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005648:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	4313      	orrs	r3, r2
 8005652:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	695b      	ldr	r3, [r3, #20]
 800565e:	4313      	orrs	r3, r2
 8005660:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	689a      	ldr	r2, [r3, #8]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a0e      	ldr	r2, [pc, #56]	; (80056b4 <TIM_Base_SetConfig+0xcc>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d00b      	beq.n	8005698 <TIM_Base_SetConfig+0xb0>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a0d      	ldr	r2, [pc, #52]	; (80056b8 <TIM_Base_SetConfig+0xd0>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d007      	beq.n	8005698 <TIM_Base_SetConfig+0xb0>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a0c      	ldr	r2, [pc, #48]	; (80056bc <TIM_Base_SetConfig+0xd4>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d003      	beq.n	8005698 <TIM_Base_SetConfig+0xb0>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a0b      	ldr	r2, [pc, #44]	; (80056c0 <TIM_Base_SetConfig+0xd8>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d103      	bne.n	80056a0 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	691a      	ldr	r2, [r3, #16]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	615a      	str	r2, [r3, #20]
}
 80056a6:	bf00      	nop
 80056a8:	3714      	adds	r7, #20
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
 80056b2:	bf00      	nop
 80056b4:	40012c00 	.word	0x40012c00
 80056b8:	40014000 	.word	0x40014000
 80056bc:	40014400 	.word	0x40014400
 80056c0:	40014800 	.word	0x40014800

080056c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056cc:	bf00      	nop
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056e0:	bf00      	nop
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80056f4:	bf00      	nop
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b082      	sub	sp, #8
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d101      	bne.n	8005712 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e040      	b.n	8005794 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005716:	2b00      	cmp	r3, #0
 8005718:	d106      	bne.n	8005728 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f7fc fcac 	bl	8002080 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2224      	movs	r2, #36	; 0x24
 800572c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f022 0201 	bic.w	r2, r2, #1
 800573c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 f980 	bl	8005a44 <UART_SetConfig>
 8005744:	4603      	mov	r3, r0
 8005746:	2b01      	cmp	r3, #1
 8005748:	d101      	bne.n	800574e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e022      	b.n	8005794 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005752:	2b00      	cmp	r3, #0
 8005754:	d002      	beq.n	800575c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 faaa 	bl	8005cb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	685a      	ldr	r2, [r3, #4]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800576a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	689a      	ldr	r2, [r3, #8]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800577a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f042 0201 	orr.w	r2, r2, #1
 800578a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 fb31 	bl	8005df4 <UART_CheckIdleState>
 8005792:	4603      	mov	r3, r0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3708      	adds	r7, #8
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b08a      	sub	sp, #40	; 0x28
 80057a0:	af02      	add	r7, sp, #8
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	603b      	str	r3, [r7, #0]
 80057a8:	4613      	mov	r3, r2
 80057aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057b0:	2b20      	cmp	r3, #32
 80057b2:	d178      	bne.n	80058a6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d002      	beq.n	80057c0 <HAL_UART_Transmit+0x24>
 80057ba:	88fb      	ldrh	r3, [r7, #6]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d101      	bne.n	80057c4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e071      	b.n	80058a8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2221      	movs	r2, #33	; 0x21
 80057d0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057d2:	f7fc ffd9 	bl	8002788 <HAL_GetTick>
 80057d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	88fa      	ldrh	r2, [r7, #6]
 80057dc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	88fa      	ldrh	r2, [r7, #6]
 80057e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057f0:	d108      	bne.n	8005804 <HAL_UART_Transmit+0x68>
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d104      	bne.n	8005804 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80057fa:	2300      	movs	r3, #0
 80057fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	61bb      	str	r3, [r7, #24]
 8005802:	e003      	b.n	800580c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005808:	2300      	movs	r3, #0
 800580a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800580c:	e030      	b.n	8005870 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	9300      	str	r3, [sp, #0]
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	2200      	movs	r2, #0
 8005816:	2180      	movs	r1, #128	; 0x80
 8005818:	68f8      	ldr	r0, [r7, #12]
 800581a:	f000 fb93 	bl	8005f44 <UART_WaitOnFlagUntilTimeout>
 800581e:	4603      	mov	r3, r0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d004      	beq.n	800582e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2220      	movs	r2, #32
 8005828:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e03c      	b.n	80058a8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d10b      	bne.n	800584c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	881a      	ldrh	r2, [r3, #0]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005840:	b292      	uxth	r2, r2
 8005842:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	3302      	adds	r3, #2
 8005848:	61bb      	str	r3, [r7, #24]
 800584a:	e008      	b.n	800585e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	781a      	ldrb	r2, [r3, #0]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	b292      	uxth	r2, r2
 8005856:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	3301      	adds	r3, #1
 800585c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005864:	b29b      	uxth	r3, r3
 8005866:	3b01      	subs	r3, #1
 8005868:	b29a      	uxth	r2, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005876:	b29b      	uxth	r3, r3
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1c8      	bne.n	800580e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	9300      	str	r3, [sp, #0]
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	2200      	movs	r2, #0
 8005884:	2140      	movs	r1, #64	; 0x40
 8005886:	68f8      	ldr	r0, [r7, #12]
 8005888:	f000 fb5c 	bl	8005f44 <UART_WaitOnFlagUntilTimeout>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d004      	beq.n	800589c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2220      	movs	r2, #32
 8005896:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	e005      	b.n	80058a8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2220      	movs	r2, #32
 80058a0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80058a2:	2300      	movs	r3, #0
 80058a4:	e000      	b.n	80058a8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80058a6:	2302      	movs	r3, #2
  }
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3720      	adds	r7, #32
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b08a      	sub	sp, #40	; 0x28
 80058b4:	af02      	add	r7, sp, #8
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	603b      	str	r3, [r7, #0]
 80058bc:	4613      	mov	r3, r2
 80058be:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058c6:	2b20      	cmp	r3, #32
 80058c8:	f040 80b6 	bne.w	8005a38 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d002      	beq.n	80058d8 <HAL_UART_Receive+0x28>
 80058d2:	88fb      	ldrh	r3, [r7, #6]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d101      	bne.n	80058dc <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	e0ae      	b.n	8005a3a <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2200      	movs	r2, #0
 80058e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2222      	movs	r2, #34	; 0x22
 80058e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2200      	movs	r2, #0
 80058f0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058f2:	f7fc ff49 	bl	8002788 <HAL_GetTick>
 80058f6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	88fa      	ldrh	r2, [r7, #6]
 80058fc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	88fa      	ldrh	r2, [r7, #6]
 8005904:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005910:	d10e      	bne.n	8005930 <HAL_UART_Receive+0x80>
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d105      	bne.n	8005926 <HAL_UART_Receive+0x76>
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005920:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005924:	e02d      	b.n	8005982 <HAL_UART_Receive+0xd2>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	22ff      	movs	r2, #255	; 0xff
 800592a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800592e:	e028      	b.n	8005982 <HAL_UART_Receive+0xd2>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d10d      	bne.n	8005954 <HAL_UART_Receive+0xa4>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	691b      	ldr	r3, [r3, #16]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d104      	bne.n	800594a <HAL_UART_Receive+0x9a>
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	22ff      	movs	r2, #255	; 0xff
 8005944:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005948:	e01b      	b.n	8005982 <HAL_UART_Receive+0xd2>
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	227f      	movs	r2, #127	; 0x7f
 800594e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005952:	e016      	b.n	8005982 <HAL_UART_Receive+0xd2>
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800595c:	d10d      	bne.n	800597a <HAL_UART_Receive+0xca>
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d104      	bne.n	8005970 <HAL_UART_Receive+0xc0>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	227f      	movs	r2, #127	; 0x7f
 800596a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800596e:	e008      	b.n	8005982 <HAL_UART_Receive+0xd2>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	223f      	movs	r2, #63	; 0x3f
 8005974:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005978:	e003      	b.n	8005982 <HAL_UART_Receive+0xd2>
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2200      	movs	r2, #0
 800597e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005988:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005992:	d108      	bne.n	80059a6 <HAL_UART_Receive+0xf6>
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d104      	bne.n	80059a6 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800599c:	2300      	movs	r3, #0
 800599e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	61bb      	str	r3, [r7, #24]
 80059a4:	e003      	b.n	80059ae <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059aa:	2300      	movs	r3, #0
 80059ac:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80059ae:	e037      	b.n	8005a20 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	9300      	str	r3, [sp, #0]
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	2200      	movs	r2, #0
 80059b8:	2120      	movs	r1, #32
 80059ba:	68f8      	ldr	r0, [r7, #12]
 80059bc:	f000 fac2 	bl	8005f44 <UART_WaitOnFlagUntilTimeout>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d005      	beq.n	80059d2 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2220      	movs	r2, #32
 80059ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80059ce:	2303      	movs	r3, #3
 80059d0:	e033      	b.n	8005a3a <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d10c      	bne.n	80059f2 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80059de:	b29a      	uxth	r2, r3
 80059e0:	8a7b      	ldrh	r3, [r7, #18]
 80059e2:	4013      	ands	r3, r2
 80059e4:	b29a      	uxth	r2, r3
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	3302      	adds	r3, #2
 80059ee:	61bb      	str	r3, [r7, #24]
 80059f0:	e00d      	b.n	8005a0e <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	b2da      	uxtb	r2, r3
 80059fc:	8a7b      	ldrh	r3, [r7, #18]
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	4013      	ands	r3, r2
 8005a02:	b2da      	uxtb	r2, r3
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	3b01      	subs	r3, #1
 8005a18:	b29a      	uxth	r2, r3
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d1c1      	bne.n	80059b0 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2220      	movs	r2, #32
 8005a30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8005a34:	2300      	movs	r3, #0
 8005a36:	e000      	b.n	8005a3a <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8005a38:	2302      	movs	r3, #2
  }
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3720      	adds	r7, #32
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
	...

08005a44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b088      	sub	sp, #32
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	689a      	ldr	r2, [r3, #8]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	691b      	ldr	r3, [r3, #16]
 8005a58:	431a      	orrs	r2, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	695b      	ldr	r3, [r3, #20]
 8005a5e:	431a      	orrs	r2, r3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	69db      	ldr	r3, [r3, #28]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	4b8a      	ldr	r3, [pc, #552]	; (8005c98 <UART_SetConfig+0x254>)
 8005a70:	4013      	ands	r3, r2
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	6812      	ldr	r2, [r2, #0]
 8005a76:	6979      	ldr	r1, [r7, #20]
 8005a78:	430b      	orrs	r3, r1
 8005a7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	68da      	ldr	r2, [r3, #12]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	430a      	orrs	r2, r1
 8005a90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	699b      	ldr	r3, [r3, #24]
 8005a96:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6a1b      	ldr	r3, [r3, #32]
 8005a9c:	697a      	ldr	r2, [r7, #20]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	697a      	ldr	r2, [r7, #20]
 8005ab2:	430a      	orrs	r2, r1
 8005ab4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a78      	ldr	r2, [pc, #480]	; (8005c9c <UART_SetConfig+0x258>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d120      	bne.n	8005b02 <UART_SetConfig+0xbe>
 8005ac0:	4b77      	ldr	r3, [pc, #476]	; (8005ca0 <UART_SetConfig+0x25c>)
 8005ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac4:	f003 0303 	and.w	r3, r3, #3
 8005ac8:	2b03      	cmp	r3, #3
 8005aca:	d817      	bhi.n	8005afc <UART_SetConfig+0xb8>
 8005acc:	a201      	add	r2, pc, #4	; (adr r2, 8005ad4 <UART_SetConfig+0x90>)
 8005ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad2:	bf00      	nop
 8005ad4:	08005ae5 	.word	0x08005ae5
 8005ad8:	08005af1 	.word	0x08005af1
 8005adc:	08005af7 	.word	0x08005af7
 8005ae0:	08005aeb 	.word	0x08005aeb
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	77fb      	strb	r3, [r7, #31]
 8005ae8:	e01d      	b.n	8005b26 <UART_SetConfig+0xe2>
 8005aea:	2302      	movs	r3, #2
 8005aec:	77fb      	strb	r3, [r7, #31]
 8005aee:	e01a      	b.n	8005b26 <UART_SetConfig+0xe2>
 8005af0:	2304      	movs	r3, #4
 8005af2:	77fb      	strb	r3, [r7, #31]
 8005af4:	e017      	b.n	8005b26 <UART_SetConfig+0xe2>
 8005af6:	2308      	movs	r3, #8
 8005af8:	77fb      	strb	r3, [r7, #31]
 8005afa:	e014      	b.n	8005b26 <UART_SetConfig+0xe2>
 8005afc:	2310      	movs	r3, #16
 8005afe:	77fb      	strb	r3, [r7, #31]
 8005b00:	e011      	b.n	8005b26 <UART_SetConfig+0xe2>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a67      	ldr	r2, [pc, #412]	; (8005ca4 <UART_SetConfig+0x260>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d102      	bne.n	8005b12 <UART_SetConfig+0xce>
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	77fb      	strb	r3, [r7, #31]
 8005b10:	e009      	b.n	8005b26 <UART_SetConfig+0xe2>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a64      	ldr	r2, [pc, #400]	; (8005ca8 <UART_SetConfig+0x264>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d102      	bne.n	8005b22 <UART_SetConfig+0xde>
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	77fb      	strb	r3, [r7, #31]
 8005b20:	e001      	b.n	8005b26 <UART_SetConfig+0xe2>
 8005b22:	2310      	movs	r3, #16
 8005b24:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	69db      	ldr	r3, [r3, #28]
 8005b2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b2e:	d15a      	bne.n	8005be6 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8005b30:	7ffb      	ldrb	r3, [r7, #31]
 8005b32:	2b08      	cmp	r3, #8
 8005b34:	d827      	bhi.n	8005b86 <UART_SetConfig+0x142>
 8005b36:	a201      	add	r2, pc, #4	; (adr r2, 8005b3c <UART_SetConfig+0xf8>)
 8005b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b3c:	08005b61 	.word	0x08005b61
 8005b40:	08005b69 	.word	0x08005b69
 8005b44:	08005b71 	.word	0x08005b71
 8005b48:	08005b87 	.word	0x08005b87
 8005b4c:	08005b77 	.word	0x08005b77
 8005b50:	08005b87 	.word	0x08005b87
 8005b54:	08005b87 	.word	0x08005b87
 8005b58:	08005b87 	.word	0x08005b87
 8005b5c:	08005b7f 	.word	0x08005b7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b60:	f7ff f8aa 	bl	8004cb8 <HAL_RCC_GetPCLK1Freq>
 8005b64:	61b8      	str	r0, [r7, #24]
        break;
 8005b66:	e013      	b.n	8005b90 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b68:	f7ff f8c8 	bl	8004cfc <HAL_RCC_GetPCLK2Freq>
 8005b6c:	61b8      	str	r0, [r7, #24]
        break;
 8005b6e:	e00f      	b.n	8005b90 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b70:	4b4e      	ldr	r3, [pc, #312]	; (8005cac <UART_SetConfig+0x268>)
 8005b72:	61bb      	str	r3, [r7, #24]
        break;
 8005b74:	e00c      	b.n	8005b90 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b76:	f7ff f829 	bl	8004bcc <HAL_RCC_GetSysClockFreq>
 8005b7a:	61b8      	str	r0, [r7, #24]
        break;
 8005b7c:	e008      	b.n	8005b90 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b82:	61bb      	str	r3, [r7, #24]
        break;
 8005b84:	e004      	b.n	8005b90 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005b86:	2300      	movs	r3, #0
 8005b88:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	77bb      	strb	r3, [r7, #30]
        break;
 8005b8e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d074      	beq.n	8005c80 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	005a      	lsls	r2, r3, #1
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	085b      	lsrs	r3, r3, #1
 8005ba0:	441a      	add	r2, r3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005baa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	2b0f      	cmp	r3, #15
 8005bb0:	d916      	bls.n	8005be0 <UART_SetConfig+0x19c>
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bb8:	d212      	bcs.n	8005be0 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	f023 030f 	bic.w	r3, r3, #15
 8005bc2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	085b      	lsrs	r3, r3, #1
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	f003 0307 	and.w	r3, r3, #7
 8005bce:	b29a      	uxth	r2, r3
 8005bd0:	89fb      	ldrh	r3, [r7, #14]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	89fa      	ldrh	r2, [r7, #14]
 8005bdc:	60da      	str	r2, [r3, #12]
 8005bde:	e04f      	b.n	8005c80 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	77bb      	strb	r3, [r7, #30]
 8005be4:	e04c      	b.n	8005c80 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005be6:	7ffb      	ldrb	r3, [r7, #31]
 8005be8:	2b08      	cmp	r3, #8
 8005bea:	d828      	bhi.n	8005c3e <UART_SetConfig+0x1fa>
 8005bec:	a201      	add	r2, pc, #4	; (adr r2, 8005bf4 <UART_SetConfig+0x1b0>)
 8005bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf2:	bf00      	nop
 8005bf4:	08005c19 	.word	0x08005c19
 8005bf8:	08005c21 	.word	0x08005c21
 8005bfc:	08005c29 	.word	0x08005c29
 8005c00:	08005c3f 	.word	0x08005c3f
 8005c04:	08005c2f 	.word	0x08005c2f
 8005c08:	08005c3f 	.word	0x08005c3f
 8005c0c:	08005c3f 	.word	0x08005c3f
 8005c10:	08005c3f 	.word	0x08005c3f
 8005c14:	08005c37 	.word	0x08005c37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c18:	f7ff f84e 	bl	8004cb8 <HAL_RCC_GetPCLK1Freq>
 8005c1c:	61b8      	str	r0, [r7, #24]
        break;
 8005c1e:	e013      	b.n	8005c48 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c20:	f7ff f86c 	bl	8004cfc <HAL_RCC_GetPCLK2Freq>
 8005c24:	61b8      	str	r0, [r7, #24]
        break;
 8005c26:	e00f      	b.n	8005c48 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c28:	4b20      	ldr	r3, [pc, #128]	; (8005cac <UART_SetConfig+0x268>)
 8005c2a:	61bb      	str	r3, [r7, #24]
        break;
 8005c2c:	e00c      	b.n	8005c48 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c2e:	f7fe ffcd 	bl	8004bcc <HAL_RCC_GetSysClockFreq>
 8005c32:	61b8      	str	r0, [r7, #24]
        break;
 8005c34:	e008      	b.n	8005c48 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c3a:	61bb      	str	r3, [r7, #24]
        break;
 8005c3c:	e004      	b.n	8005c48 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	77bb      	strb	r3, [r7, #30]
        break;
 8005c46:	bf00      	nop
    }

    if (pclk != 0U)
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d018      	beq.n	8005c80 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	085a      	lsrs	r2, r3, #1
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	441a      	add	r2, r3
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c60:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	2b0f      	cmp	r3, #15
 8005c66:	d909      	bls.n	8005c7c <UART_SetConfig+0x238>
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c6e:	d205      	bcs.n	8005c7c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	b29a      	uxth	r2, r3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	60da      	str	r2, [r3, #12]
 8005c7a:	e001      	b.n	8005c80 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005c8c:	7fbb      	ldrb	r3, [r7, #30]
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3720      	adds	r7, #32
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	efff69f3 	.word	0xefff69f3
 8005c9c:	40013800 	.word	0x40013800
 8005ca0:	40021000 	.word	0x40021000
 8005ca4:	40004400 	.word	0x40004400
 8005ca8:	40004800 	.word	0x40004800
 8005cac:	007a1200 	.word	0x007a1200

08005cb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cbc:	f003 0301 	and.w	r3, r3, #1
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d00a      	beq.n	8005cda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	430a      	orrs	r2, r1
 8005cd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cde:	f003 0302 	and.w	r3, r3, #2
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00a      	beq.n	8005cfc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	430a      	orrs	r2, r1
 8005cfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d00:	f003 0304 	and.w	r3, r3, #4
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00a      	beq.n	8005d1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	430a      	orrs	r2, r1
 8005d1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d22:	f003 0308 	and.w	r3, r3, #8
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d00a      	beq.n	8005d40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	430a      	orrs	r2, r1
 8005d3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d44:	f003 0310 	and.w	r3, r3, #16
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d00a      	beq.n	8005d62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	430a      	orrs	r2, r1
 8005d60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d66:	f003 0320 	and.w	r3, r3, #32
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00a      	beq.n	8005d84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	430a      	orrs	r2, r1
 8005d82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d01a      	beq.n	8005dc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	430a      	orrs	r2, r1
 8005da4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005daa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dae:	d10a      	bne.n	8005dc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	430a      	orrs	r2, r1
 8005dc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d00a      	beq.n	8005de8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	430a      	orrs	r2, r1
 8005de6:	605a      	str	r2, [r3, #4]
  }
}
 8005de8:	bf00      	nop
 8005dea:	370c      	adds	r7, #12
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b098      	sub	sp, #96	; 0x60
 8005df8:	af02      	add	r7, sp, #8
 8005dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e04:	f7fc fcc0 	bl	8002788 <HAL_GetTick>
 8005e08:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0308 	and.w	r3, r3, #8
 8005e14:	2b08      	cmp	r3, #8
 8005e16:	d12e      	bne.n	8005e76 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e1c:	9300      	str	r3, [sp, #0]
 8005e1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e20:	2200      	movs	r2, #0
 8005e22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 f88c 	bl	8005f44 <UART_WaitOnFlagUntilTimeout>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d021      	beq.n	8005e76 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e3a:	e853 3f00 	ldrex	r3, [r3]
 8005e3e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e46:	653b      	str	r3, [r7, #80]	; 0x50
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e50:	647b      	str	r3, [r7, #68]	; 0x44
 8005e52:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e54:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005e56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e58:	e841 2300 	strex	r3, r2, [r1]
 8005e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d1e6      	bne.n	8005e32 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2220      	movs	r2, #32
 8005e68:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	e062      	b.n	8005f3c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 0304 	and.w	r3, r3, #4
 8005e80:	2b04      	cmp	r3, #4
 8005e82:	d149      	bne.n	8005f18 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e88:	9300      	str	r3, [sp, #0]
 8005e8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 f856 	bl	8005f44 <UART_WaitOnFlagUntilTimeout>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d03c      	beq.n	8005f18 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea6:	e853 3f00 	ldrex	r3, [r3]
 8005eaa:	623b      	str	r3, [r7, #32]
   return(result);
 8005eac:	6a3b      	ldr	r3, [r7, #32]
 8005eae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005eb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	461a      	mov	r2, r3
 8005eba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ebc:	633b      	str	r3, [r7, #48]	; 0x30
 8005ebe:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ec2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ec4:	e841 2300 	strex	r3, r2, [r1]
 8005ec8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d1e6      	bne.n	8005e9e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	3308      	adds	r3, #8
 8005ed6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	e853 3f00 	ldrex	r3, [r3]
 8005ede:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f023 0301 	bic.w	r3, r3, #1
 8005ee6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	3308      	adds	r3, #8
 8005eee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ef0:	61fa      	str	r2, [r7, #28]
 8005ef2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef4:	69b9      	ldr	r1, [r7, #24]
 8005ef6:	69fa      	ldr	r2, [r7, #28]
 8005ef8:	e841 2300 	strex	r3, r2, [r1]
 8005efc:	617b      	str	r3, [r7, #20]
   return(result);
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d1e5      	bne.n	8005ed0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2220      	movs	r2, #32
 8005f08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f14:	2303      	movs	r3, #3
 8005f16:	e011      	b.n	8005f3c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2220      	movs	r2, #32
 8005f1c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2220      	movs	r2, #32
 8005f22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005f3a:	2300      	movs	r3, #0
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3758      	adds	r7, #88	; 0x58
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b084      	sub	sp, #16
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	60b9      	str	r1, [r7, #8]
 8005f4e:	603b      	str	r3, [r7, #0]
 8005f50:	4613      	mov	r3, r2
 8005f52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f54:	e049      	b.n	8005fea <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f5c:	d045      	beq.n	8005fea <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f5e:	f7fc fc13 	bl	8002788 <HAL_GetTick>
 8005f62:	4602      	mov	r2, r0
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	1ad3      	subs	r3, r2, r3
 8005f68:	69ba      	ldr	r2, [r7, #24]
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d302      	bcc.n	8005f74 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d101      	bne.n	8005f78 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005f74:	2303      	movs	r3, #3
 8005f76:	e048      	b.n	800600a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f003 0304 	and.w	r3, r3, #4
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d031      	beq.n	8005fea <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	69db      	ldr	r3, [r3, #28]
 8005f8c:	f003 0308 	and.w	r3, r3, #8
 8005f90:	2b08      	cmp	r3, #8
 8005f92:	d110      	bne.n	8005fb6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	2208      	movs	r2, #8
 8005f9a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005f9c:	68f8      	ldr	r0, [r7, #12]
 8005f9e:	f000 f838 	bl	8006012 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2208      	movs	r2, #8
 8005fa6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e029      	b.n	800600a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	69db      	ldr	r3, [r3, #28]
 8005fbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fc4:	d111      	bne.n	8005fea <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005fd0:	68f8      	ldr	r0, [r7, #12]
 8005fd2:	f000 f81e 	bl	8006012 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2220      	movs	r2, #32
 8005fda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e00f      	b.n	800600a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	69da      	ldr	r2, [r3, #28]
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	68ba      	ldr	r2, [r7, #8]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	bf0c      	ite	eq
 8005ffa:	2301      	moveq	r3, #1
 8005ffc:	2300      	movne	r3, #0
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	461a      	mov	r2, r3
 8006002:	79fb      	ldrb	r3, [r7, #7]
 8006004:	429a      	cmp	r2, r3
 8006006:	d0a6      	beq.n	8005f56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	3710      	adds	r7, #16
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}

08006012 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006012:	b480      	push	{r7}
 8006014:	b095      	sub	sp, #84	; 0x54
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006022:	e853 3f00 	ldrex	r3, [r3]
 8006026:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800602e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	461a      	mov	r2, r3
 8006036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006038:	643b      	str	r3, [r7, #64]	; 0x40
 800603a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800603c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800603e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006040:	e841 2300 	strex	r3, r2, [r1]
 8006044:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006048:	2b00      	cmp	r3, #0
 800604a:	d1e6      	bne.n	800601a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	3308      	adds	r3, #8
 8006052:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006054:	6a3b      	ldr	r3, [r7, #32]
 8006056:	e853 3f00 	ldrex	r3, [r3]
 800605a:	61fb      	str	r3, [r7, #28]
   return(result);
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	f023 0301 	bic.w	r3, r3, #1
 8006062:	64bb      	str	r3, [r7, #72]	; 0x48
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	3308      	adds	r3, #8
 800606a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800606c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800606e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006070:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006072:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006074:	e841 2300 	strex	r3, r2, [r1]
 8006078:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800607a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607c:	2b00      	cmp	r3, #0
 800607e:	d1e5      	bne.n	800604c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006084:	2b01      	cmp	r3, #1
 8006086:	d118      	bne.n	80060ba <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	e853 3f00 	ldrex	r3, [r3]
 8006094:	60bb      	str	r3, [r7, #8]
   return(result);
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	f023 0310 	bic.w	r3, r3, #16
 800609c:	647b      	str	r3, [r7, #68]	; 0x44
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	461a      	mov	r2, r3
 80060a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060a6:	61bb      	str	r3, [r7, #24]
 80060a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060aa:	6979      	ldr	r1, [r7, #20]
 80060ac:	69ba      	ldr	r2, [r7, #24]
 80060ae:	e841 2300 	strex	r3, r2, [r1]
 80060b2:	613b      	str	r3, [r7, #16]
   return(result);
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d1e6      	bne.n	8006088 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2220      	movs	r2, #32
 80060be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	669a      	str	r2, [r3, #104]	; 0x68
}
 80060ce:	bf00      	nop
 80060d0:	3754      	adds	r7, #84	; 0x54
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr

080060da <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80060da:	b480      	push	{r7}
 80060dc:	b085      	sub	sp, #20
 80060de:	af00      	add	r7, sp, #0
 80060e0:	4603      	mov	r3, r0
 80060e2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80060e4:	2300      	movs	r3, #0
 80060e6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80060e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80060ec:	2b84      	cmp	r3, #132	; 0x84
 80060ee:	d005      	beq.n	80060fc <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80060f0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	4413      	add	r3, r2
 80060f8:	3303      	adds	r3, #3
 80060fa:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80060fc:	68fb      	ldr	r3, [r7, #12]
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3714      	adds	r7, #20
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr

0800610a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800610a:	b580      	push	{r7, lr}
 800610c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800610e:	f001 f8b9 	bl	8007284 <vTaskStartScheduler>
  
  return osOK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	bd80      	pop	{r7, pc}

08006118 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800611a:	b089      	sub	sp, #36	; 0x24
 800611c:	af04      	add	r7, sp, #16
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	695b      	ldr	r3, [r3, #20]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d020      	beq.n	800616c <osThreadCreate+0x54>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	699b      	ldr	r3, [r3, #24]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d01c      	beq.n	800616c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	685c      	ldr	r4, [r3, #4]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	691e      	ldr	r6, [r3, #16]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006144:	4618      	mov	r0, r3
 8006146:	f7ff ffc8 	bl	80060da <makeFreeRtosPriority>
 800614a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	695b      	ldr	r3, [r3, #20]
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006154:	9202      	str	r2, [sp, #8]
 8006156:	9301      	str	r3, [sp, #4]
 8006158:	9100      	str	r1, [sp, #0]
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	4632      	mov	r2, r6
 800615e:	4629      	mov	r1, r5
 8006160:	4620      	mov	r0, r4
 8006162:	f000 fed1 	bl	8006f08 <xTaskCreateStatic>
 8006166:	4603      	mov	r3, r0
 8006168:	60fb      	str	r3, [r7, #12]
 800616a:	e01c      	b.n	80061a6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	685c      	ldr	r4, [r3, #4]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006178:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006180:	4618      	mov	r0, r3
 8006182:	f7ff ffaa 	bl	80060da <makeFreeRtosPriority>
 8006186:	4602      	mov	r2, r0
 8006188:	f107 030c 	add.w	r3, r7, #12
 800618c:	9301      	str	r3, [sp, #4]
 800618e:	9200      	str	r2, [sp, #0]
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	4632      	mov	r2, r6
 8006194:	4629      	mov	r1, r5
 8006196:	4620      	mov	r0, r4
 8006198:	f000 ff12 	bl	8006fc0 <xTaskCreate>
 800619c:	4603      	mov	r3, r0
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d001      	beq.n	80061a6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80061a2:	2300      	movs	r3, #0
 80061a4:	e000      	b.n	80061a8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80061a6:	68fb      	ldr	r3, [r7, #12]
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3714      	adds	r7, #20
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080061b0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d001      	beq.n	80061c6 <osDelay+0x16>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	e000      	b.n	80061c8 <osDelay+0x18>
 80061c6:	2301      	movs	r3, #1
 80061c8:	4618      	mov	r0, r3
 80061ca:	f001 f827 	bl	800721c <vTaskDelay>
  
  return osOK;
 80061ce:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3710      	adds	r7, #16
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b082      	sub	sp, #8
 80061dc:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 80061de:	201c      	movs	r0, #28
 80061e0:	f002 fbba 	bl	8008958 <pvPortMalloc>
 80061e4:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d00a      	beq.n	8006202 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	3304      	adds	r3, #4
 80061f6:	4618      	mov	r0, r3
 80061f8:	f000 f8ef 	bl	80063da <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8006202:	687b      	ldr	r3, [r7, #4]
	}
 8006204:	4618      	mov	r0, r3
 8006206:	3708      	adds	r7, #8
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <xEventGroupClearBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b086      	sub	sp, #24
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d10a      	bne.n	8006236 <xEventGroupClearBits+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006224:	f383 8811 	msr	BASEPRI, r3
 8006228:	f3bf 8f6f 	isb	sy
 800622c:	f3bf 8f4f 	dsb	sy
 8006230:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006232:	bf00      	nop
 8006234:	e7fe      	b.n	8006234 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800623c:	2b00      	cmp	r3, #0
 800623e:	d00a      	beq.n	8006256 <xEventGroupClearBits+0x4a>
	__asm volatile
 8006240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006244:	f383 8811 	msr	BASEPRI, r3
 8006248:	f3bf 8f6f 	isb	sy
 800624c:	f3bf 8f4f 	dsb	sy
 8006250:	60bb      	str	r3, [r7, #8]
}
 8006252:	bf00      	nop
 8006254:	e7fe      	b.n	8006254 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8006256:	f002 fa5d 	bl	8008714 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	43db      	mvns	r3, r3
 8006268:	401a      	ands	r2, r3
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 800626e:	f002 fa81 	bl	8008774 <vPortExitCritical>

	return uxReturn;
 8006272:	693b      	ldr	r3, [r7, #16]
}
 8006274:	4618      	mov	r0, r3
 8006276:	3718      	adds	r7, #24
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}

0800627c <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 800627c:	b480      	push	{r7}
 800627e:	b089      	sub	sp, #36	; 0x24
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006288:	f3ef 8211 	mrs	r2, BASEPRI
 800628c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006290:	f383 8811 	msr	BASEPRI, r3
 8006294:	f3bf 8f6f 	isb	sy
 8006298:	f3bf 8f4f 	dsb	sy
 800629c:	60fa      	str	r2, [r7, #12]
 800629e:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80062a0:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80062a2:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	617b      	str	r3, [r7, #20]
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80062b4:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 80062b6:	697b      	ldr	r3, [r7, #20]
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3724      	adds	r7, #36	; 0x24
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b08e      	sub	sp, #56	; 0x38
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80062ce:	2300      	movs	r3, #0
 80062d0:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80062d6:	2300      	movs	r3, #0
 80062d8:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d10a      	bne.n	80062f6 <xEventGroupSetBits+0x32>
	__asm volatile
 80062e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e4:	f383 8811 	msr	BASEPRI, r3
 80062e8:	f3bf 8f6f 	isb	sy
 80062ec:	f3bf 8f4f 	dsb	sy
 80062f0:	613b      	str	r3, [r7, #16]
}
 80062f2:	bf00      	nop
 80062f4:	e7fe      	b.n	80062f4 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d00a      	beq.n	8006316 <xEventGroupSetBits+0x52>
	__asm volatile
 8006300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006304:	f383 8811 	msr	BASEPRI, r3
 8006308:	f3bf 8f6f 	isb	sy
 800630c:	f3bf 8f4f 	dsb	sy
 8006310:	60fb      	str	r3, [r7, #12]
}
 8006312:	bf00      	nop
 8006314:	e7fe      	b.n	8006314 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8006316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006318:	3304      	adds	r3, #4
 800631a:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800631c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631e:	3308      	adds	r3, #8
 8006320:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8006322:	f001 f815 	bl	8007350 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8006326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800632c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	431a      	orrs	r2, r3
 8006334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006336:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8006338:	e03c      	b.n	80063b4 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800633a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8006340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8006346:	2300      	movs	r3, #0
 8006348:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006350:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006358:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006360:	2b00      	cmp	r3, #0
 8006362:	d108      	bne.n	8006376 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8006364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	4013      	ands	r3, r2
 800636c:	2b00      	cmp	r3, #0
 800636e:	d00b      	beq.n	8006388 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8006370:	2301      	movs	r3, #1
 8006372:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006374:	e008      	b.n	8006388 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8006376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	4013      	ands	r3, r2
 800637e:	69ba      	ldr	r2, [r7, #24]
 8006380:	429a      	cmp	r2, r3
 8006382:	d101      	bne.n	8006388 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8006384:	2301      	movs	r3, #1
 8006386:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8006388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800638a:	2b00      	cmp	r3, #0
 800638c:	d010      	beq.n	80063b0 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006394:	2b00      	cmp	r3, #0
 8006396:	d003      	beq.n	80063a0 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8006398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	4313      	orrs	r3, r2
 800639e:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80063a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80063a8:	4619      	mov	r1, r3
 80063aa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80063ac:	f001 fa56 	bl	800785c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80063b0:	69fb      	ldr	r3, [r7, #28]
 80063b2:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80063b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063b6:	6a3b      	ldr	r3, [r7, #32]
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d1be      	bne.n	800633a <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80063bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c2:	43db      	mvns	r3, r3
 80063c4:	401a      	ands	r2, r3
 80063c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c8:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80063ca:	f000 ffcf 	bl	800736c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80063ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d0:	681b      	ldr	r3, [r3, #0]
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3738      	adds	r7, #56	; 0x38
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}

080063da <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80063da:	b480      	push	{r7}
 80063dc:	b083      	sub	sp, #12
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f103 0208 	add.w	r2, r3, #8
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f04f 32ff 	mov.w	r2, #4294967295
 80063f2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f103 0208 	add.w	r2, r3, #8
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f103 0208 	add.w	r2, r3, #8
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800640e:	bf00      	nop
 8006410:	370c      	adds	r7, #12
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr

0800641a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800641a:	b480      	push	{r7}
 800641c:	b083      	sub	sp, #12
 800641e:	af00      	add	r7, sp, #0
 8006420:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006428:	bf00      	nop
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006434:	b480      	push	{r7}
 8006436:	b085      	sub	sp, #20
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	689a      	ldr	r2, [r3, #8]
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	683a      	ldr	r2, [r7, #0]
 8006458:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	683a      	ldr	r2, [r7, #0]
 800645e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	1c5a      	adds	r2, r3, #1
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	601a      	str	r2, [r3, #0]
}
 8006470:	bf00      	nop
 8006472:	3714      	adds	r7, #20
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr

0800647c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800647c:	b480      	push	{r7}
 800647e:	b085      	sub	sp, #20
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006492:	d103      	bne.n	800649c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	60fb      	str	r3, [r7, #12]
 800649a:	e00c      	b.n	80064b6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	3308      	adds	r3, #8
 80064a0:	60fb      	str	r3, [r7, #12]
 80064a2:	e002      	b.n	80064aa <vListInsert+0x2e>
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	60fb      	str	r3, [r7, #12]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	68ba      	ldr	r2, [r7, #8]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d2f6      	bcs.n	80064a4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	685a      	ldr	r2, [r3, #4]
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	683a      	ldr	r2, [r7, #0]
 80064c4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	683a      	ldr	r2, [r7, #0]
 80064d0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	1c5a      	adds	r2, r3, #1
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	601a      	str	r2, [r3, #0]
}
 80064e2:	bf00      	nop
 80064e4:	3714      	adds	r7, #20
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr

080064ee <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80064ee:	b480      	push	{r7}
 80064f0:	b085      	sub	sp, #20
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	6892      	ldr	r2, [r2, #8]
 8006504:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	6852      	ldr	r2, [r2, #4]
 800650e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	429a      	cmp	r2, r3
 8006518:	d103      	bne.n	8006522 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	689a      	ldr	r2, [r3, #8]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	1e5a      	subs	r2, r3, #1
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
}
 8006536:	4618      	mov	r0, r3
 8006538:	3714      	adds	r7, #20
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
	...

08006544 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d10a      	bne.n	800656e <xQueueGenericReset+0x2a>
	__asm volatile
 8006558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800655c:	f383 8811 	msr	BASEPRI, r3
 8006560:	f3bf 8f6f 	isb	sy
 8006564:	f3bf 8f4f 	dsb	sy
 8006568:	60bb      	str	r3, [r7, #8]
}
 800656a:	bf00      	nop
 800656c:	e7fe      	b.n	800656c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800656e:	f002 f8d1 	bl	8008714 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800657a:	68f9      	ldr	r1, [r7, #12]
 800657c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800657e:	fb01 f303 	mul.w	r3, r1, r3
 8006582:	441a      	add	r2, r3
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2200      	movs	r2, #0
 800658c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800659e:	3b01      	subs	r3, #1
 80065a0:	68f9      	ldr	r1, [r7, #12]
 80065a2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80065a4:	fb01 f303 	mul.w	r3, r1, r3
 80065a8:	441a      	add	r2, r3
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	22ff      	movs	r2, #255	; 0xff
 80065b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	22ff      	movs	r2, #255	; 0xff
 80065ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d114      	bne.n	80065ee <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d01a      	beq.n	8006602 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	3310      	adds	r3, #16
 80065d0:	4618      	mov	r0, r3
 80065d2:	f001 f8e1 	bl	8007798 <xTaskRemoveFromEventList>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d012      	beq.n	8006602 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80065dc:	4b0c      	ldr	r3, [pc, #48]	; (8006610 <xQueueGenericReset+0xcc>)
 80065de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065e2:	601a      	str	r2, [r3, #0]
 80065e4:	f3bf 8f4f 	dsb	sy
 80065e8:	f3bf 8f6f 	isb	sy
 80065ec:	e009      	b.n	8006602 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	3310      	adds	r3, #16
 80065f2:	4618      	mov	r0, r3
 80065f4:	f7ff fef1 	bl	80063da <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	3324      	adds	r3, #36	; 0x24
 80065fc:	4618      	mov	r0, r3
 80065fe:	f7ff feec 	bl	80063da <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006602:	f002 f8b7 	bl	8008774 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006606:	2301      	movs	r3, #1
}
 8006608:	4618      	mov	r0, r3
 800660a:	3710      	adds	r7, #16
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}
 8006610:	e000ed04 	.word	0xe000ed04

08006614 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006614:	b580      	push	{r7, lr}
 8006616:	b08e      	sub	sp, #56	; 0x38
 8006618:	af02      	add	r7, sp, #8
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	60b9      	str	r1, [r7, #8]
 800661e:	607a      	str	r2, [r7, #4]
 8006620:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d10a      	bne.n	800663e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662c:	f383 8811 	msr	BASEPRI, r3
 8006630:	f3bf 8f6f 	isb	sy
 8006634:	f3bf 8f4f 	dsb	sy
 8006638:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800663a:	bf00      	nop
 800663c:	e7fe      	b.n	800663c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d10a      	bne.n	800665a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006648:	f383 8811 	msr	BASEPRI, r3
 800664c:	f3bf 8f6f 	isb	sy
 8006650:	f3bf 8f4f 	dsb	sy
 8006654:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006656:	bf00      	nop
 8006658:	e7fe      	b.n	8006658 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d002      	beq.n	8006666 <xQueueGenericCreateStatic+0x52>
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d001      	beq.n	800666a <xQueueGenericCreateStatic+0x56>
 8006666:	2301      	movs	r3, #1
 8006668:	e000      	b.n	800666c <xQueueGenericCreateStatic+0x58>
 800666a:	2300      	movs	r3, #0
 800666c:	2b00      	cmp	r3, #0
 800666e:	d10a      	bne.n	8006686 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006674:	f383 8811 	msr	BASEPRI, r3
 8006678:	f3bf 8f6f 	isb	sy
 800667c:	f3bf 8f4f 	dsb	sy
 8006680:	623b      	str	r3, [r7, #32]
}
 8006682:	bf00      	nop
 8006684:	e7fe      	b.n	8006684 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d102      	bne.n	8006692 <xQueueGenericCreateStatic+0x7e>
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d101      	bne.n	8006696 <xQueueGenericCreateStatic+0x82>
 8006692:	2301      	movs	r3, #1
 8006694:	e000      	b.n	8006698 <xQueueGenericCreateStatic+0x84>
 8006696:	2300      	movs	r3, #0
 8006698:	2b00      	cmp	r3, #0
 800669a:	d10a      	bne.n	80066b2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800669c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a0:	f383 8811 	msr	BASEPRI, r3
 80066a4:	f3bf 8f6f 	isb	sy
 80066a8:	f3bf 8f4f 	dsb	sy
 80066ac:	61fb      	str	r3, [r7, #28]
}
 80066ae:	bf00      	nop
 80066b0:	e7fe      	b.n	80066b0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80066b2:	2348      	movs	r3, #72	; 0x48
 80066b4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	2b48      	cmp	r3, #72	; 0x48
 80066ba:	d00a      	beq.n	80066d2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80066bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c0:	f383 8811 	msr	BASEPRI, r3
 80066c4:	f3bf 8f6f 	isb	sy
 80066c8:	f3bf 8f4f 	dsb	sy
 80066cc:	61bb      	str	r3, [r7, #24]
}
 80066ce:	bf00      	nop
 80066d0:	e7fe      	b.n	80066d0 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80066d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d00d      	beq.n	80066f8 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80066dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066de:	2201      	movs	r2, #1
 80066e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80066e4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80066e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ea:	9300      	str	r3, [sp, #0]
 80066ec:	4613      	mov	r3, r2
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	68b9      	ldr	r1, [r7, #8]
 80066f2:	68f8      	ldr	r0, [r7, #12]
 80066f4:	f000 f805 	bl	8006702 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80066f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3730      	adds	r7, #48	; 0x30
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}

08006702 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006702:	b580      	push	{r7, lr}
 8006704:	b084      	sub	sp, #16
 8006706:	af00      	add	r7, sp, #0
 8006708:	60f8      	str	r0, [r7, #12]
 800670a:	60b9      	str	r1, [r7, #8]
 800670c:	607a      	str	r2, [r7, #4]
 800670e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d103      	bne.n	800671e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	69ba      	ldr	r2, [r7, #24]
 800671a:	601a      	str	r2, [r3, #0]
 800671c:	e002      	b.n	8006724 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800671e:	69bb      	ldr	r3, [r7, #24]
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	68fa      	ldr	r2, [r7, #12]
 8006728:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	68ba      	ldr	r2, [r7, #8]
 800672e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006730:	2101      	movs	r1, #1
 8006732:	69b8      	ldr	r0, [r7, #24]
 8006734:	f7ff ff06 	bl	8006544 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006738:	bf00      	nop
 800673a:	3710      	adds	r7, #16
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b08e      	sub	sp, #56	; 0x38
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	607a      	str	r2, [r7, #4]
 800674c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800674e:	2300      	movs	r3, #0
 8006750:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006758:	2b00      	cmp	r3, #0
 800675a:	d10a      	bne.n	8006772 <xQueueGenericSend+0x32>
	__asm volatile
 800675c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006760:	f383 8811 	msr	BASEPRI, r3
 8006764:	f3bf 8f6f 	isb	sy
 8006768:	f3bf 8f4f 	dsb	sy
 800676c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800676e:	bf00      	nop
 8006770:	e7fe      	b.n	8006770 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d103      	bne.n	8006780 <xQueueGenericSend+0x40>
 8006778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677c:	2b00      	cmp	r3, #0
 800677e:	d101      	bne.n	8006784 <xQueueGenericSend+0x44>
 8006780:	2301      	movs	r3, #1
 8006782:	e000      	b.n	8006786 <xQueueGenericSend+0x46>
 8006784:	2300      	movs	r3, #0
 8006786:	2b00      	cmp	r3, #0
 8006788:	d10a      	bne.n	80067a0 <xQueueGenericSend+0x60>
	__asm volatile
 800678a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800678e:	f383 8811 	msr	BASEPRI, r3
 8006792:	f3bf 8f6f 	isb	sy
 8006796:	f3bf 8f4f 	dsb	sy
 800679a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800679c:	bf00      	nop
 800679e:	e7fe      	b.n	800679e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	2b02      	cmp	r3, #2
 80067a4:	d103      	bne.n	80067ae <xQueueGenericSend+0x6e>
 80067a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d101      	bne.n	80067b2 <xQueueGenericSend+0x72>
 80067ae:	2301      	movs	r3, #1
 80067b0:	e000      	b.n	80067b4 <xQueueGenericSend+0x74>
 80067b2:	2300      	movs	r3, #0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d10a      	bne.n	80067ce <xQueueGenericSend+0x8e>
	__asm volatile
 80067b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067bc:	f383 8811 	msr	BASEPRI, r3
 80067c0:	f3bf 8f6f 	isb	sy
 80067c4:	f3bf 8f4f 	dsb	sy
 80067c8:	623b      	str	r3, [r7, #32]
}
 80067ca:	bf00      	nop
 80067cc:	e7fe      	b.n	80067cc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80067ce:	f001 fa07 	bl	8007be0 <xTaskGetSchedulerState>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d102      	bne.n	80067de <xQueueGenericSend+0x9e>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d101      	bne.n	80067e2 <xQueueGenericSend+0xa2>
 80067de:	2301      	movs	r3, #1
 80067e0:	e000      	b.n	80067e4 <xQueueGenericSend+0xa4>
 80067e2:	2300      	movs	r3, #0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d10a      	bne.n	80067fe <xQueueGenericSend+0xbe>
	__asm volatile
 80067e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ec:	f383 8811 	msr	BASEPRI, r3
 80067f0:	f3bf 8f6f 	isb	sy
 80067f4:	f3bf 8f4f 	dsb	sy
 80067f8:	61fb      	str	r3, [r7, #28]
}
 80067fa:	bf00      	nop
 80067fc:	e7fe      	b.n	80067fc <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80067fe:	f001 ff89 	bl	8008714 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006804:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800680a:	429a      	cmp	r2, r3
 800680c:	d302      	bcc.n	8006814 <xQueueGenericSend+0xd4>
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	2b02      	cmp	r3, #2
 8006812:	d129      	bne.n	8006868 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006814:	683a      	ldr	r2, [r7, #0]
 8006816:	68b9      	ldr	r1, [r7, #8]
 8006818:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800681a:	f000 fa07 	bl	8006c2c <prvCopyDataToQueue>
 800681e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006824:	2b00      	cmp	r3, #0
 8006826:	d010      	beq.n	800684a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800682a:	3324      	adds	r3, #36	; 0x24
 800682c:	4618      	mov	r0, r3
 800682e:	f000 ffb3 	bl	8007798 <xTaskRemoveFromEventList>
 8006832:	4603      	mov	r3, r0
 8006834:	2b00      	cmp	r3, #0
 8006836:	d013      	beq.n	8006860 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006838:	4b3f      	ldr	r3, [pc, #252]	; (8006938 <xQueueGenericSend+0x1f8>)
 800683a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800683e:	601a      	str	r2, [r3, #0]
 8006840:	f3bf 8f4f 	dsb	sy
 8006844:	f3bf 8f6f 	isb	sy
 8006848:	e00a      	b.n	8006860 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800684a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800684c:	2b00      	cmp	r3, #0
 800684e:	d007      	beq.n	8006860 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006850:	4b39      	ldr	r3, [pc, #228]	; (8006938 <xQueueGenericSend+0x1f8>)
 8006852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006856:	601a      	str	r2, [r3, #0]
 8006858:	f3bf 8f4f 	dsb	sy
 800685c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006860:	f001 ff88 	bl	8008774 <vPortExitCritical>
				return pdPASS;
 8006864:	2301      	movs	r3, #1
 8006866:	e063      	b.n	8006930 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d103      	bne.n	8006876 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800686e:	f001 ff81 	bl	8008774 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006872:	2300      	movs	r3, #0
 8006874:	e05c      	b.n	8006930 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006878:	2b00      	cmp	r3, #0
 800687a:	d106      	bne.n	800688a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800687c:	f107 0314 	add.w	r3, r7, #20
 8006880:	4618      	mov	r0, r3
 8006882:	f001 f84d 	bl	8007920 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006886:	2301      	movs	r3, #1
 8006888:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800688a:	f001 ff73 	bl	8008774 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800688e:	f000 fd5f 	bl	8007350 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006892:	f001 ff3f 	bl	8008714 <vPortEnterCritical>
 8006896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006898:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800689c:	b25b      	sxtb	r3, r3
 800689e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068a2:	d103      	bne.n	80068ac <xQueueGenericSend+0x16c>
 80068a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a6:	2200      	movs	r2, #0
 80068a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068b2:	b25b      	sxtb	r3, r3
 80068b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068b8:	d103      	bne.n	80068c2 <xQueueGenericSend+0x182>
 80068ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068bc:	2200      	movs	r2, #0
 80068be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068c2:	f001 ff57 	bl	8008774 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80068c6:	1d3a      	adds	r2, r7, #4
 80068c8:	f107 0314 	add.w	r3, r7, #20
 80068cc:	4611      	mov	r1, r2
 80068ce:	4618      	mov	r0, r3
 80068d0:	f001 f83c 	bl	800794c <xTaskCheckForTimeOut>
 80068d4:	4603      	mov	r3, r0
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d124      	bne.n	8006924 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80068da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068dc:	f000 fa9e 	bl	8006e1c <prvIsQueueFull>
 80068e0:	4603      	mov	r3, r0
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d018      	beq.n	8006918 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80068e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e8:	3310      	adds	r3, #16
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	4611      	mov	r1, r2
 80068ee:	4618      	mov	r0, r3
 80068f0:	f000 ff02 	bl	80076f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80068f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068f6:	f000 fa29 	bl	8006d4c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80068fa:	f000 fd37 	bl	800736c <xTaskResumeAll>
 80068fe:	4603      	mov	r3, r0
 8006900:	2b00      	cmp	r3, #0
 8006902:	f47f af7c 	bne.w	80067fe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006906:	4b0c      	ldr	r3, [pc, #48]	; (8006938 <xQueueGenericSend+0x1f8>)
 8006908:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800690c:	601a      	str	r2, [r3, #0]
 800690e:	f3bf 8f4f 	dsb	sy
 8006912:	f3bf 8f6f 	isb	sy
 8006916:	e772      	b.n	80067fe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006918:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800691a:	f000 fa17 	bl	8006d4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800691e:	f000 fd25 	bl	800736c <xTaskResumeAll>
 8006922:	e76c      	b.n	80067fe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006924:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006926:	f000 fa11 	bl	8006d4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800692a:	f000 fd1f 	bl	800736c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800692e:	2300      	movs	r3, #0
		}
	}
}
 8006930:	4618      	mov	r0, r3
 8006932:	3738      	adds	r7, #56	; 0x38
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}
 8006938:	e000ed04 	.word	0xe000ed04

0800693c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b08e      	sub	sp, #56	; 0x38
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	607a      	str	r2, [r7, #4]
 8006948:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800694e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006950:	2b00      	cmp	r3, #0
 8006952:	d10a      	bne.n	800696a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006958:	f383 8811 	msr	BASEPRI, r3
 800695c:	f3bf 8f6f 	isb	sy
 8006960:	f3bf 8f4f 	dsb	sy
 8006964:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006966:	bf00      	nop
 8006968:	e7fe      	b.n	8006968 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d103      	bne.n	8006978 <xQueueGenericSendFromISR+0x3c>
 8006970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006974:	2b00      	cmp	r3, #0
 8006976:	d101      	bne.n	800697c <xQueueGenericSendFromISR+0x40>
 8006978:	2301      	movs	r3, #1
 800697a:	e000      	b.n	800697e <xQueueGenericSendFromISR+0x42>
 800697c:	2300      	movs	r3, #0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d10a      	bne.n	8006998 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006986:	f383 8811 	msr	BASEPRI, r3
 800698a:	f3bf 8f6f 	isb	sy
 800698e:	f3bf 8f4f 	dsb	sy
 8006992:	623b      	str	r3, [r7, #32]
}
 8006994:	bf00      	nop
 8006996:	e7fe      	b.n	8006996 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	2b02      	cmp	r3, #2
 800699c:	d103      	bne.n	80069a6 <xQueueGenericSendFromISR+0x6a>
 800699e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d101      	bne.n	80069aa <xQueueGenericSendFromISR+0x6e>
 80069a6:	2301      	movs	r3, #1
 80069a8:	e000      	b.n	80069ac <xQueueGenericSendFromISR+0x70>
 80069aa:	2300      	movs	r3, #0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d10a      	bne.n	80069c6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80069b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b4:	f383 8811 	msr	BASEPRI, r3
 80069b8:	f3bf 8f6f 	isb	sy
 80069bc:	f3bf 8f4f 	dsb	sy
 80069c0:	61fb      	str	r3, [r7, #28]
}
 80069c2:	bf00      	nop
 80069c4:	e7fe      	b.n	80069c4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80069c6:	f001 ff87 	bl	80088d8 <vPortValidateInterruptPriority>
	__asm volatile
 80069ca:	f3ef 8211 	mrs	r2, BASEPRI
 80069ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d2:	f383 8811 	msr	BASEPRI, r3
 80069d6:	f3bf 8f6f 	isb	sy
 80069da:	f3bf 8f4f 	dsb	sy
 80069de:	61ba      	str	r2, [r7, #24]
 80069e0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80069e2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80069e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80069e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d302      	bcc.n	80069f8 <xQueueGenericSendFromISR+0xbc>
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	2b02      	cmp	r3, #2
 80069f6:	d12c      	bne.n	8006a52 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80069f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006a02:	683a      	ldr	r2, [r7, #0]
 8006a04:	68b9      	ldr	r1, [r7, #8]
 8006a06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a08:	f000 f910 	bl	8006c2c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006a0c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a14:	d112      	bne.n	8006a3c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d016      	beq.n	8006a4c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a20:	3324      	adds	r3, #36	; 0x24
 8006a22:	4618      	mov	r0, r3
 8006a24:	f000 feb8 	bl	8007798 <xTaskRemoveFromEventList>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d00e      	beq.n	8006a4c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d00b      	beq.n	8006a4c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	601a      	str	r2, [r3, #0]
 8006a3a:	e007      	b.n	8006a4c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006a3c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006a40:	3301      	adds	r3, #1
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	b25a      	sxtb	r2, r3
 8006a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006a50:	e001      	b.n	8006a56 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006a52:	2300      	movs	r3, #0
 8006a54:	637b      	str	r3, [r7, #52]	; 0x34
 8006a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a58:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	f383 8811 	msr	BASEPRI, r3
}
 8006a60:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3738      	adds	r7, #56	; 0x38
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b08c      	sub	sp, #48	; 0x30
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	60b9      	str	r1, [r7, #8]
 8006a76:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d10a      	bne.n	8006a9c <xQueueReceive+0x30>
	__asm volatile
 8006a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a8a:	f383 8811 	msr	BASEPRI, r3
 8006a8e:	f3bf 8f6f 	isb	sy
 8006a92:	f3bf 8f4f 	dsb	sy
 8006a96:	623b      	str	r3, [r7, #32]
}
 8006a98:	bf00      	nop
 8006a9a:	e7fe      	b.n	8006a9a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d103      	bne.n	8006aaa <xQueueReceive+0x3e>
 8006aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d101      	bne.n	8006aae <xQueueReceive+0x42>
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e000      	b.n	8006ab0 <xQueueReceive+0x44>
 8006aae:	2300      	movs	r3, #0
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d10a      	bne.n	8006aca <xQueueReceive+0x5e>
	__asm volatile
 8006ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab8:	f383 8811 	msr	BASEPRI, r3
 8006abc:	f3bf 8f6f 	isb	sy
 8006ac0:	f3bf 8f4f 	dsb	sy
 8006ac4:	61fb      	str	r3, [r7, #28]
}
 8006ac6:	bf00      	nop
 8006ac8:	e7fe      	b.n	8006ac8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006aca:	f001 f889 	bl	8007be0 <xTaskGetSchedulerState>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d102      	bne.n	8006ada <xQueueReceive+0x6e>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d101      	bne.n	8006ade <xQueueReceive+0x72>
 8006ada:	2301      	movs	r3, #1
 8006adc:	e000      	b.n	8006ae0 <xQueueReceive+0x74>
 8006ade:	2300      	movs	r3, #0
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d10a      	bne.n	8006afa <xQueueReceive+0x8e>
	__asm volatile
 8006ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae8:	f383 8811 	msr	BASEPRI, r3
 8006aec:	f3bf 8f6f 	isb	sy
 8006af0:	f3bf 8f4f 	dsb	sy
 8006af4:	61bb      	str	r3, [r7, #24]
}
 8006af6:	bf00      	nop
 8006af8:	e7fe      	b.n	8006af8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006afa:	f001 fe0b 	bl	8008714 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b02:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d01f      	beq.n	8006b4a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006b0a:	68b9      	ldr	r1, [r7, #8]
 8006b0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b0e:	f000 f8f7 	bl	8006d00 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b14:	1e5a      	subs	r2, r3, #1
 8006b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b18:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b1c:	691b      	ldr	r3, [r3, #16]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d00f      	beq.n	8006b42 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b24:	3310      	adds	r3, #16
 8006b26:	4618      	mov	r0, r3
 8006b28:	f000 fe36 	bl	8007798 <xTaskRemoveFromEventList>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d007      	beq.n	8006b42 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006b32:	4b3d      	ldr	r3, [pc, #244]	; (8006c28 <xQueueReceive+0x1bc>)
 8006b34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b38:	601a      	str	r2, [r3, #0]
 8006b3a:	f3bf 8f4f 	dsb	sy
 8006b3e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006b42:	f001 fe17 	bl	8008774 <vPortExitCritical>
				return pdPASS;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e069      	b.n	8006c1e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d103      	bne.n	8006b58 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006b50:	f001 fe10 	bl	8008774 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006b54:	2300      	movs	r3, #0
 8006b56:	e062      	b.n	8006c1e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d106      	bne.n	8006b6c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006b5e:	f107 0310 	add.w	r3, r7, #16
 8006b62:	4618      	mov	r0, r3
 8006b64:	f000 fedc 	bl	8007920 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006b6c:	f001 fe02 	bl	8008774 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006b70:	f000 fbee 	bl	8007350 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006b74:	f001 fdce 	bl	8008714 <vPortEnterCritical>
 8006b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b7e:	b25b      	sxtb	r3, r3
 8006b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b84:	d103      	bne.n	8006b8e <xQueueReceive+0x122>
 8006b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b94:	b25b      	sxtb	r3, r3
 8006b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b9a:	d103      	bne.n	8006ba4 <xQueueReceive+0x138>
 8006b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ba4:	f001 fde6 	bl	8008774 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ba8:	1d3a      	adds	r2, r7, #4
 8006baa:	f107 0310 	add.w	r3, r7, #16
 8006bae:	4611      	mov	r1, r2
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f000 fecb 	bl	800794c <xTaskCheckForTimeOut>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d123      	bne.n	8006c04 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006bbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bbe:	f000 f917 	bl	8006df0 <prvIsQueueEmpty>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d017      	beq.n	8006bf8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bca:	3324      	adds	r3, #36	; 0x24
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	4611      	mov	r1, r2
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f000 fd91 	bl	80076f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006bd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bd8:	f000 f8b8 	bl	8006d4c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006bdc:	f000 fbc6 	bl	800736c <xTaskResumeAll>
 8006be0:	4603      	mov	r3, r0
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d189      	bne.n	8006afa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006be6:	4b10      	ldr	r3, [pc, #64]	; (8006c28 <xQueueReceive+0x1bc>)
 8006be8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bec:	601a      	str	r2, [r3, #0]
 8006bee:	f3bf 8f4f 	dsb	sy
 8006bf2:	f3bf 8f6f 	isb	sy
 8006bf6:	e780      	b.n	8006afa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006bf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bfa:	f000 f8a7 	bl	8006d4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006bfe:	f000 fbb5 	bl	800736c <xTaskResumeAll>
 8006c02:	e77a      	b.n	8006afa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006c04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c06:	f000 f8a1 	bl	8006d4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c0a:	f000 fbaf 	bl	800736c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c10:	f000 f8ee 	bl	8006df0 <prvIsQueueEmpty>
 8006c14:	4603      	mov	r3, r0
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	f43f af6f 	beq.w	8006afa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006c1c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3730      	adds	r7, #48	; 0x30
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	e000ed04 	.word	0xe000ed04

08006c2c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b086      	sub	sp, #24
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	60f8      	str	r0, [r7, #12]
 8006c34:	60b9      	str	r1, [r7, #8]
 8006c36:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c40:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d10d      	bne.n	8006c66 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d14d      	bne.n	8006cee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	4618      	mov	r0, r3
 8006c58:	f000 ffe0 	bl	8007c1c <xTaskPriorityDisinherit>
 8006c5c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2200      	movs	r2, #0
 8006c62:	605a      	str	r2, [r3, #4]
 8006c64:	e043      	b.n	8006cee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d119      	bne.n	8006ca0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	6898      	ldr	r0, [r3, #8]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c74:	461a      	mov	r2, r3
 8006c76:	68b9      	ldr	r1, [r7, #8]
 8006c78:	f002 f89c 	bl	8008db4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	689a      	ldr	r2, [r3, #8]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c84:	441a      	add	r2, r3
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	689a      	ldr	r2, [r3, #8]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d32b      	bcc.n	8006cee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	609a      	str	r2, [r3, #8]
 8006c9e:	e026      	b.n	8006cee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	68d8      	ldr	r0, [r3, #12]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca8:	461a      	mov	r2, r3
 8006caa:	68b9      	ldr	r1, [r7, #8]
 8006cac:	f002 f882 	bl	8008db4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	68da      	ldr	r2, [r3, #12]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb8:	425b      	negs	r3, r3
 8006cba:	441a      	add	r2, r3
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	68da      	ldr	r2, [r3, #12]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d207      	bcs.n	8006cdc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	685a      	ldr	r2, [r3, #4]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd4:	425b      	negs	r3, r3
 8006cd6:	441a      	add	r2, r3
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2b02      	cmp	r3, #2
 8006ce0:	d105      	bne.n	8006cee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d002      	beq.n	8006cee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	3b01      	subs	r3, #1
 8006cec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	1c5a      	adds	r2, r3, #1
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006cf6:	697b      	ldr	r3, [r7, #20]
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3718      	adds	r7, #24
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b082      	sub	sp, #8
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d018      	beq.n	8006d44 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	68da      	ldr	r2, [r3, #12]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d1a:	441a      	add	r2, r3
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	68da      	ldr	r2, [r3, #12]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d303      	bcc.n	8006d34 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	68d9      	ldr	r1, [r3, #12]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	6838      	ldr	r0, [r7, #0]
 8006d40:	f002 f838 	bl	8008db4 <memcpy>
	}
}
 8006d44:	bf00      	nop
 8006d46:	3708      	adds	r7, #8
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b084      	sub	sp, #16
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006d54:	f001 fcde 	bl	8008714 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d5e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006d60:	e011      	b.n	8006d86 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d012      	beq.n	8006d90 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	3324      	adds	r3, #36	; 0x24
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f000 fd12 	bl	8007798 <xTaskRemoveFromEventList>
 8006d74:	4603      	mov	r3, r0
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d001      	beq.n	8006d7e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006d7a:	f000 fe49 	bl	8007a10 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006d7e:	7bfb      	ldrb	r3, [r7, #15]
 8006d80:	3b01      	subs	r3, #1
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	dce9      	bgt.n	8006d62 <prvUnlockQueue+0x16>
 8006d8e:	e000      	b.n	8006d92 <prvUnlockQueue+0x46>
					break;
 8006d90:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	22ff      	movs	r2, #255	; 0xff
 8006d96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006d9a:	f001 fceb 	bl	8008774 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006d9e:	f001 fcb9 	bl	8008714 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006da8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006daa:	e011      	b.n	8006dd0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	691b      	ldr	r3, [r3, #16]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d012      	beq.n	8006dda <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	3310      	adds	r3, #16
 8006db8:	4618      	mov	r0, r3
 8006dba:	f000 fced 	bl	8007798 <xTaskRemoveFromEventList>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d001      	beq.n	8006dc8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006dc4:	f000 fe24 	bl	8007a10 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006dc8:	7bbb      	ldrb	r3, [r7, #14]
 8006dca:	3b01      	subs	r3, #1
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006dd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	dce9      	bgt.n	8006dac <prvUnlockQueue+0x60>
 8006dd8:	e000      	b.n	8006ddc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006dda:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	22ff      	movs	r2, #255	; 0xff
 8006de0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006de4:	f001 fcc6 	bl	8008774 <vPortExitCritical>
}
 8006de8:	bf00      	nop
 8006dea:	3710      	adds	r7, #16
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b084      	sub	sp, #16
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006df8:	f001 fc8c 	bl	8008714 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d102      	bne.n	8006e0a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006e04:	2301      	movs	r3, #1
 8006e06:	60fb      	str	r3, [r7, #12]
 8006e08:	e001      	b.n	8006e0e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006e0e:	f001 fcb1 	bl	8008774 <vPortExitCritical>

	return xReturn;
 8006e12:	68fb      	ldr	r3, [r7, #12]
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3710      	adds	r7, #16
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006e24:	f001 fc76 	bl	8008714 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d102      	bne.n	8006e3a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006e34:	2301      	movs	r3, #1
 8006e36:	60fb      	str	r3, [r7, #12]
 8006e38:	e001      	b.n	8006e3e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006e3e:	f001 fc99 	bl	8008774 <vPortExitCritical>

	return xReturn;
 8006e42:	68fb      	ldr	r3, [r7, #12]
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3710      	adds	r7, #16
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b085      	sub	sp, #20
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006e56:	2300      	movs	r3, #0
 8006e58:	60fb      	str	r3, [r7, #12]
 8006e5a:	e014      	b.n	8006e86 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006e5c:	4a0f      	ldr	r2, [pc, #60]	; (8006e9c <vQueueAddToRegistry+0x50>)
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d10b      	bne.n	8006e80 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006e68:	490c      	ldr	r1, [pc, #48]	; (8006e9c <vQueueAddToRegistry+0x50>)
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	683a      	ldr	r2, [r7, #0]
 8006e6e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006e72:	4a0a      	ldr	r2, [pc, #40]	; (8006e9c <vQueueAddToRegistry+0x50>)
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	00db      	lsls	r3, r3, #3
 8006e78:	4413      	add	r3, r2
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006e7e:	e006      	b.n	8006e8e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	3301      	adds	r3, #1
 8006e84:	60fb      	str	r3, [r7, #12]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2b07      	cmp	r3, #7
 8006e8a:	d9e7      	bls.n	8006e5c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006e8c:	bf00      	nop
 8006e8e:	bf00      	nop
 8006e90:	3714      	adds	r7, #20
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr
 8006e9a:	bf00      	nop
 8006e9c:	20000e70 	.word	0x20000e70

08006ea0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b086      	sub	sp, #24
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	60f8      	str	r0, [r7, #12]
 8006ea8:	60b9      	str	r1, [r7, #8]
 8006eaa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006eb0:	f001 fc30 	bl	8008714 <vPortEnterCritical>
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006eba:	b25b      	sxtb	r3, r3
 8006ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ec0:	d103      	bne.n	8006eca <vQueueWaitForMessageRestricted+0x2a>
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ed0:	b25b      	sxtb	r3, r3
 8006ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ed6:	d103      	bne.n	8006ee0 <vQueueWaitForMessageRestricted+0x40>
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	2200      	movs	r2, #0
 8006edc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ee0:	f001 fc48 	bl	8008774 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d106      	bne.n	8006efa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	3324      	adds	r3, #36	; 0x24
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	68b9      	ldr	r1, [r7, #8]
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f000 fc23 	bl	8007740 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006efa:	6978      	ldr	r0, [r7, #20]
 8006efc:	f7ff ff26 	bl	8006d4c <prvUnlockQueue>
	}
 8006f00:	bf00      	nop
 8006f02:	3718      	adds	r7, #24
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b08e      	sub	sp, #56	; 0x38
 8006f0c:	af04      	add	r7, sp, #16
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	607a      	str	r2, [r7, #4]
 8006f14:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d10a      	bne.n	8006f32 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f20:	f383 8811 	msr	BASEPRI, r3
 8006f24:	f3bf 8f6f 	isb	sy
 8006f28:	f3bf 8f4f 	dsb	sy
 8006f2c:	623b      	str	r3, [r7, #32]
}
 8006f2e:	bf00      	nop
 8006f30:	e7fe      	b.n	8006f30 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d10a      	bne.n	8006f4e <xTaskCreateStatic+0x46>
	__asm volatile
 8006f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f3c:	f383 8811 	msr	BASEPRI, r3
 8006f40:	f3bf 8f6f 	isb	sy
 8006f44:	f3bf 8f4f 	dsb	sy
 8006f48:	61fb      	str	r3, [r7, #28]
}
 8006f4a:	bf00      	nop
 8006f4c:	e7fe      	b.n	8006f4c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006f4e:	2358      	movs	r3, #88	; 0x58
 8006f50:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	2b58      	cmp	r3, #88	; 0x58
 8006f56:	d00a      	beq.n	8006f6e <xTaskCreateStatic+0x66>
	__asm volatile
 8006f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f5c:	f383 8811 	msr	BASEPRI, r3
 8006f60:	f3bf 8f6f 	isb	sy
 8006f64:	f3bf 8f4f 	dsb	sy
 8006f68:	61bb      	str	r3, [r7, #24]
}
 8006f6a:	bf00      	nop
 8006f6c:	e7fe      	b.n	8006f6c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d01e      	beq.n	8006fb2 <xTaskCreateStatic+0xaa>
 8006f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d01b      	beq.n	8006fb2 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f7c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f82:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f86:	2202      	movs	r2, #2
 8006f88:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	9303      	str	r3, [sp, #12]
 8006f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f92:	9302      	str	r3, [sp, #8]
 8006f94:	f107 0314 	add.w	r3, r7, #20
 8006f98:	9301      	str	r3, [sp, #4]
 8006f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f9c:	9300      	str	r3, [sp, #0]
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	68b9      	ldr	r1, [r7, #8]
 8006fa4:	68f8      	ldr	r0, [r7, #12]
 8006fa6:	f000 f850 	bl	800704a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006faa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006fac:	f000 f8cc 	bl	8007148 <prvAddNewTaskToReadyList>
 8006fb0:	e001      	b.n	8006fb6 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006fb6:	697b      	ldr	r3, [r7, #20]
	}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3728      	adds	r7, #40	; 0x28
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b08c      	sub	sp, #48	; 0x30
 8006fc4:	af04      	add	r7, sp, #16
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	603b      	str	r3, [r7, #0]
 8006fcc:	4613      	mov	r3, r2
 8006fce:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fd0:	88fb      	ldrh	r3, [r7, #6]
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f001 fcbf 	bl	8008958 <pvPortMalloc>
 8006fda:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d00e      	beq.n	8007000 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006fe2:	2058      	movs	r0, #88	; 0x58
 8006fe4:	f001 fcb8 	bl	8008958 <pvPortMalloc>
 8006fe8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006fea:	69fb      	ldr	r3, [r7, #28]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d003      	beq.n	8006ff8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006ff0:	69fb      	ldr	r3, [r7, #28]
 8006ff2:	697a      	ldr	r2, [r7, #20]
 8006ff4:	631a      	str	r2, [r3, #48]	; 0x30
 8006ff6:	e005      	b.n	8007004 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006ff8:	6978      	ldr	r0, [r7, #20]
 8006ffa:	f001 fd71 	bl	8008ae0 <vPortFree>
 8006ffe:	e001      	b.n	8007004 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007000:	2300      	movs	r3, #0
 8007002:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007004:	69fb      	ldr	r3, [r7, #28]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d017      	beq.n	800703a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800700a:	69fb      	ldr	r3, [r7, #28]
 800700c:	2200      	movs	r2, #0
 800700e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007012:	88fa      	ldrh	r2, [r7, #6]
 8007014:	2300      	movs	r3, #0
 8007016:	9303      	str	r3, [sp, #12]
 8007018:	69fb      	ldr	r3, [r7, #28]
 800701a:	9302      	str	r3, [sp, #8]
 800701c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800701e:	9301      	str	r3, [sp, #4]
 8007020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007022:	9300      	str	r3, [sp, #0]
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	68b9      	ldr	r1, [r7, #8]
 8007028:	68f8      	ldr	r0, [r7, #12]
 800702a:	f000 f80e 	bl	800704a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800702e:	69f8      	ldr	r0, [r7, #28]
 8007030:	f000 f88a 	bl	8007148 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007034:	2301      	movs	r3, #1
 8007036:	61bb      	str	r3, [r7, #24]
 8007038:	e002      	b.n	8007040 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800703a:	f04f 33ff 	mov.w	r3, #4294967295
 800703e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007040:	69bb      	ldr	r3, [r7, #24]
	}
 8007042:	4618      	mov	r0, r3
 8007044:	3720      	adds	r7, #32
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}

0800704a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800704a:	b580      	push	{r7, lr}
 800704c:	b088      	sub	sp, #32
 800704e:	af00      	add	r7, sp, #0
 8007050:	60f8      	str	r0, [r7, #12]
 8007052:	60b9      	str	r1, [r7, #8]
 8007054:	607a      	str	r2, [r7, #4]
 8007056:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800705a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007062:	3b01      	subs	r3, #1
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	4413      	add	r3, r2
 8007068:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800706a:	69bb      	ldr	r3, [r7, #24]
 800706c:	f023 0307 	bic.w	r3, r3, #7
 8007070:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007072:	69bb      	ldr	r3, [r7, #24]
 8007074:	f003 0307 	and.w	r3, r3, #7
 8007078:	2b00      	cmp	r3, #0
 800707a:	d00a      	beq.n	8007092 <prvInitialiseNewTask+0x48>
	__asm volatile
 800707c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007080:	f383 8811 	msr	BASEPRI, r3
 8007084:	f3bf 8f6f 	isb	sy
 8007088:	f3bf 8f4f 	dsb	sy
 800708c:	617b      	str	r3, [r7, #20]
}
 800708e:	bf00      	nop
 8007090:	e7fe      	b.n	8007090 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007092:	2300      	movs	r3, #0
 8007094:	61fb      	str	r3, [r7, #28]
 8007096:	e012      	b.n	80070be <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007098:	68ba      	ldr	r2, [r7, #8]
 800709a:	69fb      	ldr	r3, [r7, #28]
 800709c:	4413      	add	r3, r2
 800709e:	7819      	ldrb	r1, [r3, #0]
 80070a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070a2:	69fb      	ldr	r3, [r7, #28]
 80070a4:	4413      	add	r3, r2
 80070a6:	3334      	adds	r3, #52	; 0x34
 80070a8:	460a      	mov	r2, r1
 80070aa:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80070ac:	68ba      	ldr	r2, [r7, #8]
 80070ae:	69fb      	ldr	r3, [r7, #28]
 80070b0:	4413      	add	r3, r2
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d006      	beq.n	80070c6 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80070b8:	69fb      	ldr	r3, [r7, #28]
 80070ba:	3301      	adds	r3, #1
 80070bc:	61fb      	str	r3, [r7, #28]
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	2b11      	cmp	r3, #17
 80070c2:	d9e9      	bls.n	8007098 <prvInitialiseNewTask+0x4e>
 80070c4:	e000      	b.n	80070c8 <prvInitialiseNewTask+0x7e>
		{
			break;
 80070c6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80070c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ca:	2200      	movs	r2, #0
 80070cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80070d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d2:	2b06      	cmp	r3, #6
 80070d4:	d901      	bls.n	80070da <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80070d6:	2306      	movs	r3, #6
 80070d8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80070da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070de:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80070e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070e4:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 80070e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e8:	2200      	movs	r2, #0
 80070ea:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80070ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ee:	3304      	adds	r3, #4
 80070f0:	4618      	mov	r0, r3
 80070f2:	f7ff f992 	bl	800641a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80070f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f8:	3318      	adds	r3, #24
 80070fa:	4618      	mov	r0, r3
 80070fc:	f7ff f98d 	bl	800641a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007102:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007104:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007108:	f1c3 0207 	rsb	r2, r3, #7
 800710c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800710e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007112:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007114:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007118:	2200      	movs	r2, #0
 800711a:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800711c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800711e:	2200      	movs	r2, #0
 8007120:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007124:	683a      	ldr	r2, [r7, #0]
 8007126:	68f9      	ldr	r1, [r7, #12]
 8007128:	69b8      	ldr	r0, [r7, #24]
 800712a:	f001 f9c9 	bl	80084c0 <pxPortInitialiseStack>
 800712e:	4602      	mov	r2, r0
 8007130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007132:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007136:	2b00      	cmp	r3, #0
 8007138:	d002      	beq.n	8007140 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800713a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800713c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800713e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007140:	bf00      	nop
 8007142:	3720      	adds	r7, #32
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007150:	f001 fae0 	bl	8008714 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007154:	4b2a      	ldr	r3, [pc, #168]	; (8007200 <prvAddNewTaskToReadyList+0xb8>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	3301      	adds	r3, #1
 800715a:	4a29      	ldr	r2, [pc, #164]	; (8007200 <prvAddNewTaskToReadyList+0xb8>)
 800715c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800715e:	4b29      	ldr	r3, [pc, #164]	; (8007204 <prvAddNewTaskToReadyList+0xbc>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d109      	bne.n	800717a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007166:	4a27      	ldr	r2, [pc, #156]	; (8007204 <prvAddNewTaskToReadyList+0xbc>)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800716c:	4b24      	ldr	r3, [pc, #144]	; (8007200 <prvAddNewTaskToReadyList+0xb8>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2b01      	cmp	r3, #1
 8007172:	d110      	bne.n	8007196 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007174:	f000 fc70 	bl	8007a58 <prvInitialiseTaskLists>
 8007178:	e00d      	b.n	8007196 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800717a:	4b23      	ldr	r3, [pc, #140]	; (8007208 <prvAddNewTaskToReadyList+0xc0>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d109      	bne.n	8007196 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007182:	4b20      	ldr	r3, [pc, #128]	; (8007204 <prvAddNewTaskToReadyList+0xbc>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800718c:	429a      	cmp	r2, r3
 800718e:	d802      	bhi.n	8007196 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007190:	4a1c      	ldr	r2, [pc, #112]	; (8007204 <prvAddNewTaskToReadyList+0xbc>)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007196:	4b1d      	ldr	r3, [pc, #116]	; (800720c <prvAddNewTaskToReadyList+0xc4>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	3301      	adds	r3, #1
 800719c:	4a1b      	ldr	r2, [pc, #108]	; (800720c <prvAddNewTaskToReadyList+0xc4>)
 800719e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a4:	2201      	movs	r2, #1
 80071a6:	409a      	lsls	r2, r3
 80071a8:	4b19      	ldr	r3, [pc, #100]	; (8007210 <prvAddNewTaskToReadyList+0xc8>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4313      	orrs	r3, r2
 80071ae:	4a18      	ldr	r2, [pc, #96]	; (8007210 <prvAddNewTaskToReadyList+0xc8>)
 80071b0:	6013      	str	r3, [r2, #0]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071b6:	4613      	mov	r3, r2
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	4413      	add	r3, r2
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	4a15      	ldr	r2, [pc, #84]	; (8007214 <prvAddNewTaskToReadyList+0xcc>)
 80071c0:	441a      	add	r2, r3
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	3304      	adds	r3, #4
 80071c6:	4619      	mov	r1, r3
 80071c8:	4610      	mov	r0, r2
 80071ca:	f7ff f933 	bl	8006434 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80071ce:	f001 fad1 	bl	8008774 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80071d2:	4b0d      	ldr	r3, [pc, #52]	; (8007208 <prvAddNewTaskToReadyList+0xc0>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d00e      	beq.n	80071f8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80071da:	4b0a      	ldr	r3, [pc, #40]	; (8007204 <prvAddNewTaskToReadyList+0xbc>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d207      	bcs.n	80071f8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80071e8:	4b0b      	ldr	r3, [pc, #44]	; (8007218 <prvAddNewTaskToReadyList+0xd0>)
 80071ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071ee:	601a      	str	r2, [r3, #0]
 80071f0:	f3bf 8f4f 	dsb	sy
 80071f4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80071f8:	bf00      	nop
 80071fa:	3708      	adds	r7, #8
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}
 8007200:	20000fb0 	.word	0x20000fb0
 8007204:	20000eb0 	.word	0x20000eb0
 8007208:	20000fbc 	.word	0x20000fbc
 800720c:	20000fcc 	.word	0x20000fcc
 8007210:	20000fb8 	.word	0x20000fb8
 8007214:	20000eb4 	.word	0x20000eb4
 8007218:	e000ed04 	.word	0xe000ed04

0800721c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800721c:	b580      	push	{r7, lr}
 800721e:	b084      	sub	sp, #16
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007224:	2300      	movs	r3, #0
 8007226:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d017      	beq.n	800725e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800722e:	4b13      	ldr	r3, [pc, #76]	; (800727c <vTaskDelay+0x60>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00a      	beq.n	800724c <vTaskDelay+0x30>
	__asm volatile
 8007236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800723a:	f383 8811 	msr	BASEPRI, r3
 800723e:	f3bf 8f6f 	isb	sy
 8007242:	f3bf 8f4f 	dsb	sy
 8007246:	60bb      	str	r3, [r7, #8]
}
 8007248:	bf00      	nop
 800724a:	e7fe      	b.n	800724a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800724c:	f000 f880 	bl	8007350 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007250:	2100      	movs	r1, #0
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 fd68 	bl	8007d28 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007258:	f000 f888 	bl	800736c <xTaskResumeAll>
 800725c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d107      	bne.n	8007274 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007264:	4b06      	ldr	r3, [pc, #24]	; (8007280 <vTaskDelay+0x64>)
 8007266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800726a:	601a      	str	r2, [r3, #0]
 800726c:	f3bf 8f4f 	dsb	sy
 8007270:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007274:	bf00      	nop
 8007276:	3710      	adds	r7, #16
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}
 800727c:	20000fd8 	.word	0x20000fd8
 8007280:	e000ed04 	.word	0xe000ed04

08007284 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b08a      	sub	sp, #40	; 0x28
 8007288:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800728a:	2300      	movs	r3, #0
 800728c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800728e:	2300      	movs	r3, #0
 8007290:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007292:	463a      	mov	r2, r7
 8007294:	1d39      	adds	r1, r7, #4
 8007296:	f107 0308 	add.w	r3, r7, #8
 800729a:	4618      	mov	r0, r3
 800729c:	f7f9 f8a0 	bl	80003e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80072a0:	6839      	ldr	r1, [r7, #0]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	68ba      	ldr	r2, [r7, #8]
 80072a6:	9202      	str	r2, [sp, #8]
 80072a8:	9301      	str	r3, [sp, #4]
 80072aa:	2300      	movs	r3, #0
 80072ac:	9300      	str	r3, [sp, #0]
 80072ae:	2300      	movs	r3, #0
 80072b0:	460a      	mov	r2, r1
 80072b2:	4921      	ldr	r1, [pc, #132]	; (8007338 <vTaskStartScheduler+0xb4>)
 80072b4:	4821      	ldr	r0, [pc, #132]	; (800733c <vTaskStartScheduler+0xb8>)
 80072b6:	f7ff fe27 	bl	8006f08 <xTaskCreateStatic>
 80072ba:	4603      	mov	r3, r0
 80072bc:	4a20      	ldr	r2, [pc, #128]	; (8007340 <vTaskStartScheduler+0xbc>)
 80072be:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80072c0:	4b1f      	ldr	r3, [pc, #124]	; (8007340 <vTaskStartScheduler+0xbc>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d002      	beq.n	80072ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80072c8:	2301      	movs	r3, #1
 80072ca:	617b      	str	r3, [r7, #20]
 80072cc:	e001      	b.n	80072d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80072ce:	2300      	movs	r3, #0
 80072d0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d102      	bne.n	80072de <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80072d8:	f000 fd8c 	bl	8007df4 <xTimerCreateTimerTask>
 80072dc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d116      	bne.n	8007312 <vTaskStartScheduler+0x8e>
	__asm volatile
 80072e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e8:	f383 8811 	msr	BASEPRI, r3
 80072ec:	f3bf 8f6f 	isb	sy
 80072f0:	f3bf 8f4f 	dsb	sy
 80072f4:	613b      	str	r3, [r7, #16]
}
 80072f6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80072f8:	4b12      	ldr	r3, [pc, #72]	; (8007344 <vTaskStartScheduler+0xc0>)
 80072fa:	f04f 32ff 	mov.w	r2, #4294967295
 80072fe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007300:	4b11      	ldr	r3, [pc, #68]	; (8007348 <vTaskStartScheduler+0xc4>)
 8007302:	2201      	movs	r2, #1
 8007304:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007306:	4b11      	ldr	r3, [pc, #68]	; (800734c <vTaskStartScheduler+0xc8>)
 8007308:	2200      	movs	r2, #0
 800730a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800730c:	f001 f960 	bl	80085d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007310:	e00e      	b.n	8007330 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007318:	d10a      	bne.n	8007330 <vTaskStartScheduler+0xac>
	__asm volatile
 800731a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800731e:	f383 8811 	msr	BASEPRI, r3
 8007322:	f3bf 8f6f 	isb	sy
 8007326:	f3bf 8f4f 	dsb	sy
 800732a:	60fb      	str	r3, [r7, #12]
}
 800732c:	bf00      	nop
 800732e:	e7fe      	b.n	800732e <vTaskStartScheduler+0xaa>
}
 8007330:	bf00      	nop
 8007332:	3718      	adds	r7, #24
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}
 8007338:	08009994 	.word	0x08009994
 800733c:	08007a29 	.word	0x08007a29
 8007340:	20000fd4 	.word	0x20000fd4
 8007344:	20000fd0 	.word	0x20000fd0
 8007348:	20000fbc 	.word	0x20000fbc
 800734c:	20000fb4 	.word	0x20000fb4

08007350 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007350:	b480      	push	{r7}
 8007352:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007354:	4b04      	ldr	r3, [pc, #16]	; (8007368 <vTaskSuspendAll+0x18>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	3301      	adds	r3, #1
 800735a:	4a03      	ldr	r2, [pc, #12]	; (8007368 <vTaskSuspendAll+0x18>)
 800735c:	6013      	str	r3, [r2, #0]
}
 800735e:	bf00      	nop
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr
 8007368:	20000fd8 	.word	0x20000fd8

0800736c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b084      	sub	sp, #16
 8007370:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007372:	2300      	movs	r3, #0
 8007374:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007376:	2300      	movs	r3, #0
 8007378:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800737a:	4b41      	ldr	r3, [pc, #260]	; (8007480 <xTaskResumeAll+0x114>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d10a      	bne.n	8007398 <xTaskResumeAll+0x2c>
	__asm volatile
 8007382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007386:	f383 8811 	msr	BASEPRI, r3
 800738a:	f3bf 8f6f 	isb	sy
 800738e:	f3bf 8f4f 	dsb	sy
 8007392:	603b      	str	r3, [r7, #0]
}
 8007394:	bf00      	nop
 8007396:	e7fe      	b.n	8007396 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007398:	f001 f9bc 	bl	8008714 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800739c:	4b38      	ldr	r3, [pc, #224]	; (8007480 <xTaskResumeAll+0x114>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	3b01      	subs	r3, #1
 80073a2:	4a37      	ldr	r2, [pc, #220]	; (8007480 <xTaskResumeAll+0x114>)
 80073a4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073a6:	4b36      	ldr	r3, [pc, #216]	; (8007480 <xTaskResumeAll+0x114>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d161      	bne.n	8007472 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80073ae:	4b35      	ldr	r3, [pc, #212]	; (8007484 <xTaskResumeAll+0x118>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d05d      	beq.n	8007472 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80073b6:	e02e      	b.n	8007416 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80073b8:	4b33      	ldr	r3, [pc, #204]	; (8007488 <xTaskResumeAll+0x11c>)
 80073ba:	68db      	ldr	r3, [r3, #12]
 80073bc:	68db      	ldr	r3, [r3, #12]
 80073be:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	3318      	adds	r3, #24
 80073c4:	4618      	mov	r0, r3
 80073c6:	f7ff f892 	bl	80064ee <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	3304      	adds	r3, #4
 80073ce:	4618      	mov	r0, r3
 80073d0:	f7ff f88d 	bl	80064ee <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d8:	2201      	movs	r2, #1
 80073da:	409a      	lsls	r2, r3
 80073dc:	4b2b      	ldr	r3, [pc, #172]	; (800748c <xTaskResumeAll+0x120>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4313      	orrs	r3, r2
 80073e2:	4a2a      	ldr	r2, [pc, #168]	; (800748c <xTaskResumeAll+0x120>)
 80073e4:	6013      	str	r3, [r2, #0]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073ea:	4613      	mov	r3, r2
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	4413      	add	r3, r2
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	4a27      	ldr	r2, [pc, #156]	; (8007490 <xTaskResumeAll+0x124>)
 80073f4:	441a      	add	r2, r3
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	3304      	adds	r3, #4
 80073fa:	4619      	mov	r1, r3
 80073fc:	4610      	mov	r0, r2
 80073fe:	f7ff f819 	bl	8006434 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007406:	4b23      	ldr	r3, [pc, #140]	; (8007494 <xTaskResumeAll+0x128>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800740c:	429a      	cmp	r2, r3
 800740e:	d302      	bcc.n	8007416 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007410:	4b21      	ldr	r3, [pc, #132]	; (8007498 <xTaskResumeAll+0x12c>)
 8007412:	2201      	movs	r2, #1
 8007414:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007416:	4b1c      	ldr	r3, [pc, #112]	; (8007488 <xTaskResumeAll+0x11c>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d1cc      	bne.n	80073b8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d001      	beq.n	8007428 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007424:	f000 fbb6 	bl	8007b94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007428:	4b1c      	ldr	r3, [pc, #112]	; (800749c <xTaskResumeAll+0x130>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d010      	beq.n	8007456 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007434:	f000 f846 	bl	80074c4 <xTaskIncrementTick>
 8007438:	4603      	mov	r3, r0
 800743a:	2b00      	cmp	r3, #0
 800743c:	d002      	beq.n	8007444 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800743e:	4b16      	ldr	r3, [pc, #88]	; (8007498 <xTaskResumeAll+0x12c>)
 8007440:	2201      	movs	r2, #1
 8007442:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	3b01      	subs	r3, #1
 8007448:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d1f1      	bne.n	8007434 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8007450:	4b12      	ldr	r3, [pc, #72]	; (800749c <xTaskResumeAll+0x130>)
 8007452:	2200      	movs	r2, #0
 8007454:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007456:	4b10      	ldr	r3, [pc, #64]	; (8007498 <xTaskResumeAll+0x12c>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d009      	beq.n	8007472 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800745e:	2301      	movs	r3, #1
 8007460:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007462:	4b0f      	ldr	r3, [pc, #60]	; (80074a0 <xTaskResumeAll+0x134>)
 8007464:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007468:	601a      	str	r2, [r3, #0]
 800746a:	f3bf 8f4f 	dsb	sy
 800746e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007472:	f001 f97f 	bl	8008774 <vPortExitCritical>

	return xAlreadyYielded;
 8007476:	68bb      	ldr	r3, [r7, #8]
}
 8007478:	4618      	mov	r0, r3
 800747a:	3710      	adds	r7, #16
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}
 8007480:	20000fd8 	.word	0x20000fd8
 8007484:	20000fb0 	.word	0x20000fb0
 8007488:	20000f70 	.word	0x20000f70
 800748c:	20000fb8 	.word	0x20000fb8
 8007490:	20000eb4 	.word	0x20000eb4
 8007494:	20000eb0 	.word	0x20000eb0
 8007498:	20000fc4 	.word	0x20000fc4
 800749c:	20000fc0 	.word	0x20000fc0
 80074a0:	e000ed04 	.word	0xe000ed04

080074a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80074aa:	4b05      	ldr	r3, [pc, #20]	; (80074c0 <xTaskGetTickCount+0x1c>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80074b0:	687b      	ldr	r3, [r7, #4]
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	370c      	adds	r7, #12
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr
 80074be:	bf00      	nop
 80074c0:	20000fb4 	.word	0x20000fb4

080074c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b086      	sub	sp, #24
 80074c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80074ca:	2300      	movs	r3, #0
 80074cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074ce:	4b51      	ldr	r3, [pc, #324]	; (8007614 <xTaskIncrementTick+0x150>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	f040 808d 	bne.w	80075f2 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80074d8:	4b4f      	ldr	r3, [pc, #316]	; (8007618 <xTaskIncrementTick+0x154>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	3301      	adds	r3, #1
 80074de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80074e0:	4a4d      	ldr	r2, [pc, #308]	; (8007618 <xTaskIncrementTick+0x154>)
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d120      	bne.n	800752e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80074ec:	4b4b      	ldr	r3, [pc, #300]	; (800761c <xTaskIncrementTick+0x158>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d00a      	beq.n	800750c <xTaskIncrementTick+0x48>
	__asm volatile
 80074f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074fa:	f383 8811 	msr	BASEPRI, r3
 80074fe:	f3bf 8f6f 	isb	sy
 8007502:	f3bf 8f4f 	dsb	sy
 8007506:	603b      	str	r3, [r7, #0]
}
 8007508:	bf00      	nop
 800750a:	e7fe      	b.n	800750a <xTaskIncrementTick+0x46>
 800750c:	4b43      	ldr	r3, [pc, #268]	; (800761c <xTaskIncrementTick+0x158>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	60fb      	str	r3, [r7, #12]
 8007512:	4b43      	ldr	r3, [pc, #268]	; (8007620 <xTaskIncrementTick+0x15c>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a41      	ldr	r2, [pc, #260]	; (800761c <xTaskIncrementTick+0x158>)
 8007518:	6013      	str	r3, [r2, #0]
 800751a:	4a41      	ldr	r2, [pc, #260]	; (8007620 <xTaskIncrementTick+0x15c>)
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	6013      	str	r3, [r2, #0]
 8007520:	4b40      	ldr	r3, [pc, #256]	; (8007624 <xTaskIncrementTick+0x160>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	3301      	adds	r3, #1
 8007526:	4a3f      	ldr	r2, [pc, #252]	; (8007624 <xTaskIncrementTick+0x160>)
 8007528:	6013      	str	r3, [r2, #0]
 800752a:	f000 fb33 	bl	8007b94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800752e:	4b3e      	ldr	r3, [pc, #248]	; (8007628 <xTaskIncrementTick+0x164>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	693a      	ldr	r2, [r7, #16]
 8007534:	429a      	cmp	r2, r3
 8007536:	d34d      	bcc.n	80075d4 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007538:	4b38      	ldr	r3, [pc, #224]	; (800761c <xTaskIncrementTick+0x158>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d101      	bne.n	8007546 <xTaskIncrementTick+0x82>
 8007542:	2301      	movs	r3, #1
 8007544:	e000      	b.n	8007548 <xTaskIncrementTick+0x84>
 8007546:	2300      	movs	r3, #0
 8007548:	2b00      	cmp	r3, #0
 800754a:	d004      	beq.n	8007556 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800754c:	4b36      	ldr	r3, [pc, #216]	; (8007628 <xTaskIncrementTick+0x164>)
 800754e:	f04f 32ff 	mov.w	r2, #4294967295
 8007552:	601a      	str	r2, [r3, #0]
					break;
 8007554:	e03e      	b.n	80075d4 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007556:	4b31      	ldr	r3, [pc, #196]	; (800761c <xTaskIncrementTick+0x158>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	68db      	ldr	r3, [r3, #12]
 800755c:	68db      	ldr	r3, [r3, #12]
 800755e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007566:	693a      	ldr	r2, [r7, #16]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	429a      	cmp	r2, r3
 800756c:	d203      	bcs.n	8007576 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800756e:	4a2e      	ldr	r2, [pc, #184]	; (8007628 <xTaskIncrementTick+0x164>)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6013      	str	r3, [r2, #0]
						break;
 8007574:	e02e      	b.n	80075d4 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	3304      	adds	r3, #4
 800757a:	4618      	mov	r0, r3
 800757c:	f7fe ffb7 	bl	80064ee <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007584:	2b00      	cmp	r3, #0
 8007586:	d004      	beq.n	8007592 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	3318      	adds	r3, #24
 800758c:	4618      	mov	r0, r3
 800758e:	f7fe ffae 	bl	80064ee <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007596:	2201      	movs	r2, #1
 8007598:	409a      	lsls	r2, r3
 800759a:	4b24      	ldr	r3, [pc, #144]	; (800762c <xTaskIncrementTick+0x168>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4313      	orrs	r3, r2
 80075a0:	4a22      	ldr	r2, [pc, #136]	; (800762c <xTaskIncrementTick+0x168>)
 80075a2:	6013      	str	r3, [r2, #0]
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075a8:	4613      	mov	r3, r2
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	4413      	add	r3, r2
 80075ae:	009b      	lsls	r3, r3, #2
 80075b0:	4a1f      	ldr	r2, [pc, #124]	; (8007630 <xTaskIncrementTick+0x16c>)
 80075b2:	441a      	add	r2, r3
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	3304      	adds	r3, #4
 80075b8:	4619      	mov	r1, r3
 80075ba:	4610      	mov	r0, r2
 80075bc:	f7fe ff3a 	bl	8006434 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075c4:	4b1b      	ldr	r3, [pc, #108]	; (8007634 <xTaskIncrementTick+0x170>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d3b4      	bcc.n	8007538 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80075ce:	2301      	movs	r3, #1
 80075d0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075d2:	e7b1      	b.n	8007538 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80075d4:	4b17      	ldr	r3, [pc, #92]	; (8007634 <xTaskIncrementTick+0x170>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075da:	4915      	ldr	r1, [pc, #84]	; (8007630 <xTaskIncrementTick+0x16c>)
 80075dc:	4613      	mov	r3, r2
 80075de:	009b      	lsls	r3, r3, #2
 80075e0:	4413      	add	r3, r2
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	440b      	add	r3, r1
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d907      	bls.n	80075fc <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80075ec:	2301      	movs	r3, #1
 80075ee:	617b      	str	r3, [r7, #20]
 80075f0:	e004      	b.n	80075fc <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80075f2:	4b11      	ldr	r3, [pc, #68]	; (8007638 <xTaskIncrementTick+0x174>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	3301      	adds	r3, #1
 80075f8:	4a0f      	ldr	r2, [pc, #60]	; (8007638 <xTaskIncrementTick+0x174>)
 80075fa:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80075fc:	4b0f      	ldr	r3, [pc, #60]	; (800763c <xTaskIncrementTick+0x178>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d001      	beq.n	8007608 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8007604:	2301      	movs	r3, #1
 8007606:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007608:	697b      	ldr	r3, [r7, #20]
}
 800760a:	4618      	mov	r0, r3
 800760c:	3718      	adds	r7, #24
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop
 8007614:	20000fd8 	.word	0x20000fd8
 8007618:	20000fb4 	.word	0x20000fb4
 800761c:	20000f68 	.word	0x20000f68
 8007620:	20000f6c 	.word	0x20000f6c
 8007624:	20000fc8 	.word	0x20000fc8
 8007628:	20000fd0 	.word	0x20000fd0
 800762c:	20000fb8 	.word	0x20000fb8
 8007630:	20000eb4 	.word	0x20000eb4
 8007634:	20000eb0 	.word	0x20000eb0
 8007638:	20000fc0 	.word	0x20000fc0
 800763c:	20000fc4 	.word	0x20000fc4

08007640 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007640:	b480      	push	{r7}
 8007642:	b087      	sub	sp, #28
 8007644:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007646:	4b27      	ldr	r3, [pc, #156]	; (80076e4 <vTaskSwitchContext+0xa4>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d003      	beq.n	8007656 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800764e:	4b26      	ldr	r3, [pc, #152]	; (80076e8 <vTaskSwitchContext+0xa8>)
 8007650:	2201      	movs	r2, #1
 8007652:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007654:	e03f      	b.n	80076d6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8007656:	4b24      	ldr	r3, [pc, #144]	; (80076e8 <vTaskSwitchContext+0xa8>)
 8007658:	2200      	movs	r2, #0
 800765a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800765c:	4b23      	ldr	r3, [pc, #140]	; (80076ec <vTaskSwitchContext+0xac>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	fab3 f383 	clz	r3, r3
 8007668:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800766a:	7afb      	ldrb	r3, [r7, #11]
 800766c:	f1c3 031f 	rsb	r3, r3, #31
 8007670:	617b      	str	r3, [r7, #20]
 8007672:	491f      	ldr	r1, [pc, #124]	; (80076f0 <vTaskSwitchContext+0xb0>)
 8007674:	697a      	ldr	r2, [r7, #20]
 8007676:	4613      	mov	r3, r2
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	4413      	add	r3, r2
 800767c:	009b      	lsls	r3, r3, #2
 800767e:	440b      	add	r3, r1
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d10a      	bne.n	800769c <vTaskSwitchContext+0x5c>
	__asm volatile
 8007686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800768a:	f383 8811 	msr	BASEPRI, r3
 800768e:	f3bf 8f6f 	isb	sy
 8007692:	f3bf 8f4f 	dsb	sy
 8007696:	607b      	str	r3, [r7, #4]
}
 8007698:	bf00      	nop
 800769a:	e7fe      	b.n	800769a <vTaskSwitchContext+0x5a>
 800769c:	697a      	ldr	r2, [r7, #20]
 800769e:	4613      	mov	r3, r2
 80076a0:	009b      	lsls	r3, r3, #2
 80076a2:	4413      	add	r3, r2
 80076a4:	009b      	lsls	r3, r3, #2
 80076a6:	4a12      	ldr	r2, [pc, #72]	; (80076f0 <vTaskSwitchContext+0xb0>)
 80076a8:	4413      	add	r3, r2
 80076aa:	613b      	str	r3, [r7, #16]
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	685a      	ldr	r2, [r3, #4]
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	605a      	str	r2, [r3, #4]
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	685a      	ldr	r2, [r3, #4]
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	3308      	adds	r3, #8
 80076be:	429a      	cmp	r2, r3
 80076c0:	d104      	bne.n	80076cc <vTaskSwitchContext+0x8c>
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	685a      	ldr	r2, [r3, #4]
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	605a      	str	r2, [r3, #4]
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	68db      	ldr	r3, [r3, #12]
 80076d2:	4a08      	ldr	r2, [pc, #32]	; (80076f4 <vTaskSwitchContext+0xb4>)
 80076d4:	6013      	str	r3, [r2, #0]
}
 80076d6:	bf00      	nop
 80076d8:	371c      	adds	r7, #28
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr
 80076e2:	bf00      	nop
 80076e4:	20000fd8 	.word	0x20000fd8
 80076e8:	20000fc4 	.word	0x20000fc4
 80076ec:	20000fb8 	.word	0x20000fb8
 80076f0:	20000eb4 	.word	0x20000eb4
 80076f4:	20000eb0 	.word	0x20000eb0

080076f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d10a      	bne.n	800771e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800770c:	f383 8811 	msr	BASEPRI, r3
 8007710:	f3bf 8f6f 	isb	sy
 8007714:	f3bf 8f4f 	dsb	sy
 8007718:	60fb      	str	r3, [r7, #12]
}
 800771a:	bf00      	nop
 800771c:	e7fe      	b.n	800771c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800771e:	4b07      	ldr	r3, [pc, #28]	; (800773c <vTaskPlaceOnEventList+0x44>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	3318      	adds	r3, #24
 8007724:	4619      	mov	r1, r3
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f7fe fea8 	bl	800647c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800772c:	2101      	movs	r1, #1
 800772e:	6838      	ldr	r0, [r7, #0]
 8007730:	f000 fafa 	bl	8007d28 <prvAddCurrentTaskToDelayedList>
}
 8007734:	bf00      	nop
 8007736:	3710      	adds	r7, #16
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}
 800773c:	20000eb0 	.word	0x20000eb0

08007740 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007740:	b580      	push	{r7, lr}
 8007742:	b086      	sub	sp, #24
 8007744:	af00      	add	r7, sp, #0
 8007746:	60f8      	str	r0, [r7, #12]
 8007748:	60b9      	str	r1, [r7, #8]
 800774a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d10a      	bne.n	8007768 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007756:	f383 8811 	msr	BASEPRI, r3
 800775a:	f3bf 8f6f 	isb	sy
 800775e:	f3bf 8f4f 	dsb	sy
 8007762:	617b      	str	r3, [r7, #20]
}
 8007764:	bf00      	nop
 8007766:	e7fe      	b.n	8007766 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007768:	4b0a      	ldr	r3, [pc, #40]	; (8007794 <vTaskPlaceOnEventListRestricted+0x54>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	3318      	adds	r3, #24
 800776e:	4619      	mov	r1, r3
 8007770:	68f8      	ldr	r0, [r7, #12]
 8007772:	f7fe fe5f 	bl	8006434 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d002      	beq.n	8007782 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800777c:	f04f 33ff 	mov.w	r3, #4294967295
 8007780:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007782:	6879      	ldr	r1, [r7, #4]
 8007784:	68b8      	ldr	r0, [r7, #8]
 8007786:	f000 facf 	bl	8007d28 <prvAddCurrentTaskToDelayedList>
	}
 800778a:	bf00      	nop
 800778c:	3718      	adds	r7, #24
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop
 8007794:	20000eb0 	.word	0x20000eb0

08007798 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b086      	sub	sp, #24
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	68db      	ldr	r3, [r3, #12]
 80077a4:	68db      	ldr	r3, [r3, #12]
 80077a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d10a      	bne.n	80077c4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80077ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b2:	f383 8811 	msr	BASEPRI, r3
 80077b6:	f3bf 8f6f 	isb	sy
 80077ba:	f3bf 8f4f 	dsb	sy
 80077be:	60fb      	str	r3, [r7, #12]
}
 80077c0:	bf00      	nop
 80077c2:	e7fe      	b.n	80077c2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	3318      	adds	r3, #24
 80077c8:	4618      	mov	r0, r3
 80077ca:	f7fe fe90 	bl	80064ee <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077ce:	4b1d      	ldr	r3, [pc, #116]	; (8007844 <xTaskRemoveFromEventList+0xac>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d11c      	bne.n	8007810 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	3304      	adds	r3, #4
 80077da:	4618      	mov	r0, r3
 80077dc:	f7fe fe87 	bl	80064ee <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e4:	2201      	movs	r2, #1
 80077e6:	409a      	lsls	r2, r3
 80077e8:	4b17      	ldr	r3, [pc, #92]	; (8007848 <xTaskRemoveFromEventList+0xb0>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4313      	orrs	r3, r2
 80077ee:	4a16      	ldr	r2, [pc, #88]	; (8007848 <xTaskRemoveFromEventList+0xb0>)
 80077f0:	6013      	str	r3, [r2, #0]
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077f6:	4613      	mov	r3, r2
 80077f8:	009b      	lsls	r3, r3, #2
 80077fa:	4413      	add	r3, r2
 80077fc:	009b      	lsls	r3, r3, #2
 80077fe:	4a13      	ldr	r2, [pc, #76]	; (800784c <xTaskRemoveFromEventList+0xb4>)
 8007800:	441a      	add	r2, r3
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	3304      	adds	r3, #4
 8007806:	4619      	mov	r1, r3
 8007808:	4610      	mov	r0, r2
 800780a:	f7fe fe13 	bl	8006434 <vListInsertEnd>
 800780e:	e005      	b.n	800781c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	3318      	adds	r3, #24
 8007814:	4619      	mov	r1, r3
 8007816:	480e      	ldr	r0, [pc, #56]	; (8007850 <xTaskRemoveFromEventList+0xb8>)
 8007818:	f7fe fe0c 	bl	8006434 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007820:	4b0c      	ldr	r3, [pc, #48]	; (8007854 <xTaskRemoveFromEventList+0xbc>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007826:	429a      	cmp	r2, r3
 8007828:	d905      	bls.n	8007836 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800782a:	2301      	movs	r3, #1
 800782c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800782e:	4b0a      	ldr	r3, [pc, #40]	; (8007858 <xTaskRemoveFromEventList+0xc0>)
 8007830:	2201      	movs	r2, #1
 8007832:	601a      	str	r2, [r3, #0]
 8007834:	e001      	b.n	800783a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007836:	2300      	movs	r3, #0
 8007838:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800783a:	697b      	ldr	r3, [r7, #20]
}
 800783c:	4618      	mov	r0, r3
 800783e:	3718      	adds	r7, #24
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}
 8007844:	20000fd8 	.word	0x20000fd8
 8007848:	20000fb8 	.word	0x20000fb8
 800784c:	20000eb4 	.word	0x20000eb4
 8007850:	20000f70 	.word	0x20000f70
 8007854:	20000eb0 	.word	0x20000eb0
 8007858:	20000fc4 	.word	0x20000fc4

0800785c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b086      	sub	sp, #24
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8007866:	4b29      	ldr	r3, [pc, #164]	; (800790c <vTaskRemoveFromUnorderedEventList+0xb0>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d10a      	bne.n	8007884 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800786e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007872:	f383 8811 	msr	BASEPRI, r3
 8007876:	f3bf 8f6f 	isb	sy
 800787a:	f3bf 8f4f 	dsb	sy
 800787e:	613b      	str	r3, [r7, #16]
}
 8007880:	bf00      	nop
 8007882:	e7fe      	b.n	8007882 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	68db      	ldr	r3, [r3, #12]
 8007892:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d10a      	bne.n	80078b0 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800789a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800789e:	f383 8811 	msr	BASEPRI, r3
 80078a2:	f3bf 8f6f 	isb	sy
 80078a6:	f3bf 8f4f 	dsb	sy
 80078aa:	60fb      	str	r3, [r7, #12]
}
 80078ac:	bf00      	nop
 80078ae:	e7fe      	b.n	80078ae <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f7fe fe1c 	bl	80064ee <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	3304      	adds	r3, #4
 80078ba:	4618      	mov	r0, r3
 80078bc:	f7fe fe17 	bl	80064ee <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c4:	2201      	movs	r2, #1
 80078c6:	409a      	lsls	r2, r3
 80078c8:	4b11      	ldr	r3, [pc, #68]	; (8007910 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4313      	orrs	r3, r2
 80078ce:	4a10      	ldr	r2, [pc, #64]	; (8007910 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80078d0:	6013      	str	r3, [r2, #0]
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078d6:	4613      	mov	r3, r2
 80078d8:	009b      	lsls	r3, r3, #2
 80078da:	4413      	add	r3, r2
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	4a0d      	ldr	r2, [pc, #52]	; (8007914 <vTaskRemoveFromUnorderedEventList+0xb8>)
 80078e0:	441a      	add	r2, r3
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	3304      	adds	r3, #4
 80078e6:	4619      	mov	r1, r3
 80078e8:	4610      	mov	r0, r2
 80078ea:	f7fe fda3 	bl	8006434 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078f2:	4b09      	ldr	r3, [pc, #36]	; (8007918 <vTaskRemoveFromUnorderedEventList+0xbc>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d902      	bls.n	8007902 <vTaskRemoveFromUnorderedEventList+0xa6>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80078fc:	4b07      	ldr	r3, [pc, #28]	; (800791c <vTaskRemoveFromUnorderedEventList+0xc0>)
 80078fe:	2201      	movs	r2, #1
 8007900:	601a      	str	r2, [r3, #0]
	}
}
 8007902:	bf00      	nop
 8007904:	3718      	adds	r7, #24
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop
 800790c:	20000fd8 	.word	0x20000fd8
 8007910:	20000fb8 	.word	0x20000fb8
 8007914:	20000eb4 	.word	0x20000eb4
 8007918:	20000eb0 	.word	0x20000eb0
 800791c:	20000fc4 	.word	0x20000fc4

08007920 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007920:	b480      	push	{r7}
 8007922:	b083      	sub	sp, #12
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007928:	4b06      	ldr	r3, [pc, #24]	; (8007944 <vTaskInternalSetTimeOutState+0x24>)
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007930:	4b05      	ldr	r3, [pc, #20]	; (8007948 <vTaskInternalSetTimeOutState+0x28>)
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	605a      	str	r2, [r3, #4]
}
 8007938:	bf00      	nop
 800793a:	370c      	adds	r7, #12
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr
 8007944:	20000fc8 	.word	0x20000fc8
 8007948:	20000fb4 	.word	0x20000fb4

0800794c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b088      	sub	sp, #32
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d10a      	bne.n	8007972 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800795c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007960:	f383 8811 	msr	BASEPRI, r3
 8007964:	f3bf 8f6f 	isb	sy
 8007968:	f3bf 8f4f 	dsb	sy
 800796c:	613b      	str	r3, [r7, #16]
}
 800796e:	bf00      	nop
 8007970:	e7fe      	b.n	8007970 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d10a      	bne.n	800798e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800797c:	f383 8811 	msr	BASEPRI, r3
 8007980:	f3bf 8f6f 	isb	sy
 8007984:	f3bf 8f4f 	dsb	sy
 8007988:	60fb      	str	r3, [r7, #12]
}
 800798a:	bf00      	nop
 800798c:	e7fe      	b.n	800798c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800798e:	f000 fec1 	bl	8008714 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007992:	4b1d      	ldr	r3, [pc, #116]	; (8007a08 <xTaskCheckForTimeOut+0xbc>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	69ba      	ldr	r2, [r7, #24]
 800799e:	1ad3      	subs	r3, r2, r3
 80079a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079aa:	d102      	bne.n	80079b2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80079ac:	2300      	movs	r3, #0
 80079ae:	61fb      	str	r3, [r7, #28]
 80079b0:	e023      	b.n	80079fa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681a      	ldr	r2, [r3, #0]
 80079b6:	4b15      	ldr	r3, [pc, #84]	; (8007a0c <xTaskCheckForTimeOut+0xc0>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d007      	beq.n	80079ce <xTaskCheckForTimeOut+0x82>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	69ba      	ldr	r2, [r7, #24]
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d302      	bcc.n	80079ce <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80079c8:	2301      	movs	r3, #1
 80079ca:	61fb      	str	r3, [r7, #28]
 80079cc:	e015      	b.n	80079fa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	697a      	ldr	r2, [r7, #20]
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d20b      	bcs.n	80079f0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	1ad2      	subs	r2, r2, r3
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f7ff ff9b 	bl	8007920 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80079ea:	2300      	movs	r3, #0
 80079ec:	61fb      	str	r3, [r7, #28]
 80079ee:	e004      	b.n	80079fa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	2200      	movs	r2, #0
 80079f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80079f6:	2301      	movs	r3, #1
 80079f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80079fa:	f000 febb 	bl	8008774 <vPortExitCritical>

	return xReturn;
 80079fe:	69fb      	ldr	r3, [r7, #28]
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3720      	adds	r7, #32
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}
 8007a08:	20000fb4 	.word	0x20000fb4
 8007a0c:	20000fc8 	.word	0x20000fc8

08007a10 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007a10:	b480      	push	{r7}
 8007a12:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007a14:	4b03      	ldr	r3, [pc, #12]	; (8007a24 <vTaskMissedYield+0x14>)
 8007a16:	2201      	movs	r2, #1
 8007a18:	601a      	str	r2, [r3, #0]
}
 8007a1a:	bf00      	nop
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr
 8007a24:	20000fc4 	.word	0x20000fc4

08007a28 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b082      	sub	sp, #8
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007a30:	f000 f852 	bl	8007ad8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007a34:	4b06      	ldr	r3, [pc, #24]	; (8007a50 <prvIdleTask+0x28>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d9f9      	bls.n	8007a30 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007a3c:	4b05      	ldr	r3, [pc, #20]	; (8007a54 <prvIdleTask+0x2c>)
 8007a3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a42:	601a      	str	r2, [r3, #0]
 8007a44:	f3bf 8f4f 	dsb	sy
 8007a48:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007a4c:	e7f0      	b.n	8007a30 <prvIdleTask+0x8>
 8007a4e:	bf00      	nop
 8007a50:	20000eb4 	.word	0x20000eb4
 8007a54:	e000ed04 	.word	0xe000ed04

08007a58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b082      	sub	sp, #8
 8007a5c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a5e:	2300      	movs	r3, #0
 8007a60:	607b      	str	r3, [r7, #4]
 8007a62:	e00c      	b.n	8007a7e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	4613      	mov	r3, r2
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	4413      	add	r3, r2
 8007a6c:	009b      	lsls	r3, r3, #2
 8007a6e:	4a12      	ldr	r2, [pc, #72]	; (8007ab8 <prvInitialiseTaskLists+0x60>)
 8007a70:	4413      	add	r3, r2
 8007a72:	4618      	mov	r0, r3
 8007a74:	f7fe fcb1 	bl	80063da <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	607b      	str	r3, [r7, #4]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2b06      	cmp	r3, #6
 8007a82:	d9ef      	bls.n	8007a64 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007a84:	480d      	ldr	r0, [pc, #52]	; (8007abc <prvInitialiseTaskLists+0x64>)
 8007a86:	f7fe fca8 	bl	80063da <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007a8a:	480d      	ldr	r0, [pc, #52]	; (8007ac0 <prvInitialiseTaskLists+0x68>)
 8007a8c:	f7fe fca5 	bl	80063da <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007a90:	480c      	ldr	r0, [pc, #48]	; (8007ac4 <prvInitialiseTaskLists+0x6c>)
 8007a92:	f7fe fca2 	bl	80063da <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007a96:	480c      	ldr	r0, [pc, #48]	; (8007ac8 <prvInitialiseTaskLists+0x70>)
 8007a98:	f7fe fc9f 	bl	80063da <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007a9c:	480b      	ldr	r0, [pc, #44]	; (8007acc <prvInitialiseTaskLists+0x74>)
 8007a9e:	f7fe fc9c 	bl	80063da <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007aa2:	4b0b      	ldr	r3, [pc, #44]	; (8007ad0 <prvInitialiseTaskLists+0x78>)
 8007aa4:	4a05      	ldr	r2, [pc, #20]	; (8007abc <prvInitialiseTaskLists+0x64>)
 8007aa6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007aa8:	4b0a      	ldr	r3, [pc, #40]	; (8007ad4 <prvInitialiseTaskLists+0x7c>)
 8007aaa:	4a05      	ldr	r2, [pc, #20]	; (8007ac0 <prvInitialiseTaskLists+0x68>)
 8007aac:	601a      	str	r2, [r3, #0]
}
 8007aae:	bf00      	nop
 8007ab0:	3708      	adds	r7, #8
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	bf00      	nop
 8007ab8:	20000eb4 	.word	0x20000eb4
 8007abc:	20000f40 	.word	0x20000f40
 8007ac0:	20000f54 	.word	0x20000f54
 8007ac4:	20000f70 	.word	0x20000f70
 8007ac8:	20000f84 	.word	0x20000f84
 8007acc:	20000f9c 	.word	0x20000f9c
 8007ad0:	20000f68 	.word	0x20000f68
 8007ad4:	20000f6c 	.word	0x20000f6c

08007ad8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b082      	sub	sp, #8
 8007adc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ade:	e019      	b.n	8007b14 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007ae0:	f000 fe18 	bl	8008714 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007ae4:	4b10      	ldr	r3, [pc, #64]	; (8007b28 <prvCheckTasksWaitingTermination+0x50>)
 8007ae6:	68db      	ldr	r3, [r3, #12]
 8007ae8:	68db      	ldr	r3, [r3, #12]
 8007aea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	3304      	adds	r3, #4
 8007af0:	4618      	mov	r0, r3
 8007af2:	f7fe fcfc 	bl	80064ee <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007af6:	4b0d      	ldr	r3, [pc, #52]	; (8007b2c <prvCheckTasksWaitingTermination+0x54>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	3b01      	subs	r3, #1
 8007afc:	4a0b      	ldr	r2, [pc, #44]	; (8007b2c <prvCheckTasksWaitingTermination+0x54>)
 8007afe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007b00:	4b0b      	ldr	r3, [pc, #44]	; (8007b30 <prvCheckTasksWaitingTermination+0x58>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	3b01      	subs	r3, #1
 8007b06:	4a0a      	ldr	r2, [pc, #40]	; (8007b30 <prvCheckTasksWaitingTermination+0x58>)
 8007b08:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007b0a:	f000 fe33 	bl	8008774 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 f810 	bl	8007b34 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b14:	4b06      	ldr	r3, [pc, #24]	; (8007b30 <prvCheckTasksWaitingTermination+0x58>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d1e1      	bne.n	8007ae0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007b1c:	bf00      	nop
 8007b1e:	bf00      	nop
 8007b20:	3708      	adds	r7, #8
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}
 8007b26:	bf00      	nop
 8007b28:	20000f84 	.word	0x20000f84
 8007b2c:	20000fb0 	.word	0x20000fb0
 8007b30:	20000f98 	.word	0x20000f98

08007b34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b084      	sub	sp, #16
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d108      	bne.n	8007b58 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f000 ffc8 	bl	8008ae0 <vPortFree>
				vPortFree( pxTCB );
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 ffc5 	bl	8008ae0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007b56:	e018      	b.n	8007b8a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	d103      	bne.n	8007b6a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 ffbc 	bl	8008ae0 <vPortFree>
	}
 8007b68:	e00f      	b.n	8007b8a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8007b70:	2b02      	cmp	r3, #2
 8007b72:	d00a      	beq.n	8007b8a <prvDeleteTCB+0x56>
	__asm volatile
 8007b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b78:	f383 8811 	msr	BASEPRI, r3
 8007b7c:	f3bf 8f6f 	isb	sy
 8007b80:	f3bf 8f4f 	dsb	sy
 8007b84:	60fb      	str	r3, [r7, #12]
}
 8007b86:	bf00      	nop
 8007b88:	e7fe      	b.n	8007b88 <prvDeleteTCB+0x54>
	}
 8007b8a:	bf00      	nop
 8007b8c:	3710      	adds	r7, #16
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
	...

08007b94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007b94:	b480      	push	{r7}
 8007b96:	b083      	sub	sp, #12
 8007b98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b9a:	4b0f      	ldr	r3, [pc, #60]	; (8007bd8 <prvResetNextTaskUnblockTime+0x44>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d101      	bne.n	8007ba8 <prvResetNextTaskUnblockTime+0x14>
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	e000      	b.n	8007baa <prvResetNextTaskUnblockTime+0x16>
 8007ba8:	2300      	movs	r3, #0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d004      	beq.n	8007bb8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007bae:	4b0b      	ldr	r3, [pc, #44]	; (8007bdc <prvResetNextTaskUnblockTime+0x48>)
 8007bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8007bb4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007bb6:	e008      	b.n	8007bca <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007bb8:	4b07      	ldr	r3, [pc, #28]	; (8007bd8 <prvResetNextTaskUnblockTime+0x44>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	68db      	ldr	r3, [r3, #12]
 8007bbe:	68db      	ldr	r3, [r3, #12]
 8007bc0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	4a05      	ldr	r2, [pc, #20]	; (8007bdc <prvResetNextTaskUnblockTime+0x48>)
 8007bc8:	6013      	str	r3, [r2, #0]
}
 8007bca:	bf00      	nop
 8007bcc:	370c      	adds	r7, #12
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr
 8007bd6:	bf00      	nop
 8007bd8:	20000f68 	.word	0x20000f68
 8007bdc:	20000fd0 	.word	0x20000fd0

08007be0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007be0:	b480      	push	{r7}
 8007be2:	b083      	sub	sp, #12
 8007be4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007be6:	4b0b      	ldr	r3, [pc, #44]	; (8007c14 <xTaskGetSchedulerState+0x34>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d102      	bne.n	8007bf4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	607b      	str	r3, [r7, #4]
 8007bf2:	e008      	b.n	8007c06 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bf4:	4b08      	ldr	r3, [pc, #32]	; (8007c18 <xTaskGetSchedulerState+0x38>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d102      	bne.n	8007c02 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007bfc:	2302      	movs	r3, #2
 8007bfe:	607b      	str	r3, [r7, #4]
 8007c00:	e001      	b.n	8007c06 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007c02:	2300      	movs	r3, #0
 8007c04:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007c06:	687b      	ldr	r3, [r7, #4]
	}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	370c      	adds	r7, #12
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr
 8007c14:	20000fbc 	.word	0x20000fbc
 8007c18:	20000fd8 	.word	0x20000fd8

08007c1c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b086      	sub	sp, #24
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d06e      	beq.n	8007d10 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007c32:	4b3a      	ldr	r3, [pc, #232]	; (8007d1c <xTaskPriorityDisinherit+0x100>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	693a      	ldr	r2, [r7, #16]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d00a      	beq.n	8007c52 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c40:	f383 8811 	msr	BASEPRI, r3
 8007c44:	f3bf 8f6f 	isb	sy
 8007c48:	f3bf 8f4f 	dsb	sy
 8007c4c:	60fb      	str	r3, [r7, #12]
}
 8007c4e:	bf00      	nop
 8007c50:	e7fe      	b.n	8007c50 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d10a      	bne.n	8007c70 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c5e:	f383 8811 	msr	BASEPRI, r3
 8007c62:	f3bf 8f6f 	isb	sy
 8007c66:	f3bf 8f4f 	dsb	sy
 8007c6a:	60bb      	str	r3, [r7, #8]
}
 8007c6c:	bf00      	nop
 8007c6e:	e7fe      	b.n	8007c6e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c74:	1e5a      	subs	r2, r3, #1
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d044      	beq.n	8007d10 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d140      	bne.n	8007d10 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	3304      	adds	r3, #4
 8007c92:	4618      	mov	r0, r3
 8007c94:	f7fe fc2b 	bl	80064ee <uxListRemove>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d115      	bne.n	8007cca <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ca2:	491f      	ldr	r1, [pc, #124]	; (8007d20 <xTaskPriorityDisinherit+0x104>)
 8007ca4:	4613      	mov	r3, r2
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	4413      	add	r3, r2
 8007caa:	009b      	lsls	r3, r3, #2
 8007cac:	440b      	add	r3, r1
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d10a      	bne.n	8007cca <xTaskPriorityDisinherit+0xae>
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb8:	2201      	movs	r2, #1
 8007cba:	fa02 f303 	lsl.w	r3, r2, r3
 8007cbe:	43da      	mvns	r2, r3
 8007cc0:	4b18      	ldr	r3, [pc, #96]	; (8007d24 <xTaskPriorityDisinherit+0x108>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4013      	ands	r3, r2
 8007cc6:	4a17      	ldr	r2, [pc, #92]	; (8007d24 <xTaskPriorityDisinherit+0x108>)
 8007cc8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd6:	f1c3 0207 	rsb	r2, r3, #7
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	409a      	lsls	r2, r3
 8007ce6:	4b0f      	ldr	r3, [pc, #60]	; (8007d24 <xTaskPriorityDisinherit+0x108>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4313      	orrs	r3, r2
 8007cec:	4a0d      	ldr	r2, [pc, #52]	; (8007d24 <xTaskPriorityDisinherit+0x108>)
 8007cee:	6013      	str	r3, [r2, #0]
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cf4:	4613      	mov	r3, r2
 8007cf6:	009b      	lsls	r3, r3, #2
 8007cf8:	4413      	add	r3, r2
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	4a08      	ldr	r2, [pc, #32]	; (8007d20 <xTaskPriorityDisinherit+0x104>)
 8007cfe:	441a      	add	r2, r3
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	3304      	adds	r3, #4
 8007d04:	4619      	mov	r1, r3
 8007d06:	4610      	mov	r0, r2
 8007d08:	f7fe fb94 	bl	8006434 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007d10:	697b      	ldr	r3, [r7, #20]
	}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3718      	adds	r7, #24
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
 8007d1a:	bf00      	nop
 8007d1c:	20000eb0 	.word	0x20000eb0
 8007d20:	20000eb4 	.word	0x20000eb4
 8007d24:	20000fb8 	.word	0x20000fb8

08007d28 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007d32:	4b29      	ldr	r3, [pc, #164]	; (8007dd8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d38:	4b28      	ldr	r3, [pc, #160]	; (8007ddc <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	3304      	adds	r3, #4
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f7fe fbd5 	bl	80064ee <uxListRemove>
 8007d44:	4603      	mov	r3, r0
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d10b      	bne.n	8007d62 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8007d4a:	4b24      	ldr	r3, [pc, #144]	; (8007ddc <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d50:	2201      	movs	r2, #1
 8007d52:	fa02 f303 	lsl.w	r3, r2, r3
 8007d56:	43da      	mvns	r2, r3
 8007d58:	4b21      	ldr	r3, [pc, #132]	; (8007de0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4013      	ands	r3, r2
 8007d5e:	4a20      	ldr	r2, [pc, #128]	; (8007de0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007d60:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d68:	d10a      	bne.n	8007d80 <prvAddCurrentTaskToDelayedList+0x58>
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d007      	beq.n	8007d80 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d70:	4b1a      	ldr	r3, [pc, #104]	; (8007ddc <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	3304      	adds	r3, #4
 8007d76:	4619      	mov	r1, r3
 8007d78:	481a      	ldr	r0, [pc, #104]	; (8007de4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007d7a:	f7fe fb5b 	bl	8006434 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007d7e:	e026      	b.n	8007dce <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007d80:	68fa      	ldr	r2, [r7, #12]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	4413      	add	r3, r2
 8007d86:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007d88:	4b14      	ldr	r3, [pc, #80]	; (8007ddc <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	68ba      	ldr	r2, [r7, #8]
 8007d8e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007d90:	68ba      	ldr	r2, [r7, #8]
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d209      	bcs.n	8007dac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d98:	4b13      	ldr	r3, [pc, #76]	; (8007de8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	4b0f      	ldr	r3, [pc, #60]	; (8007ddc <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	3304      	adds	r3, #4
 8007da2:	4619      	mov	r1, r3
 8007da4:	4610      	mov	r0, r2
 8007da6:	f7fe fb69 	bl	800647c <vListInsert>
}
 8007daa:	e010      	b.n	8007dce <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007dac:	4b0f      	ldr	r3, [pc, #60]	; (8007dec <prvAddCurrentTaskToDelayedList+0xc4>)
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	4b0a      	ldr	r3, [pc, #40]	; (8007ddc <prvAddCurrentTaskToDelayedList+0xb4>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	3304      	adds	r3, #4
 8007db6:	4619      	mov	r1, r3
 8007db8:	4610      	mov	r0, r2
 8007dba:	f7fe fb5f 	bl	800647c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007dbe:	4b0c      	ldr	r3, [pc, #48]	; (8007df0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	68ba      	ldr	r2, [r7, #8]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d202      	bcs.n	8007dce <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007dc8:	4a09      	ldr	r2, [pc, #36]	; (8007df0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	6013      	str	r3, [r2, #0]
}
 8007dce:	bf00      	nop
 8007dd0:	3710      	adds	r7, #16
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	20000fb4 	.word	0x20000fb4
 8007ddc:	20000eb0 	.word	0x20000eb0
 8007de0:	20000fb8 	.word	0x20000fb8
 8007de4:	20000f9c 	.word	0x20000f9c
 8007de8:	20000f6c 	.word	0x20000f6c
 8007dec:	20000f68 	.word	0x20000f68
 8007df0:	20000fd0 	.word	0x20000fd0

08007df4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b08a      	sub	sp, #40	; 0x28
 8007df8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007dfe:	f000 fb1f 	bl	8008440 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007e02:	4b1c      	ldr	r3, [pc, #112]	; (8007e74 <xTimerCreateTimerTask+0x80>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d021      	beq.n	8007e4e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007e12:	1d3a      	adds	r2, r7, #4
 8007e14:	f107 0108 	add.w	r1, r7, #8
 8007e18:	f107 030c 	add.w	r3, r7, #12
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f7f8 faf9 	bl	8000414 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007e22:	6879      	ldr	r1, [r7, #4]
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	68fa      	ldr	r2, [r7, #12]
 8007e28:	9202      	str	r2, [sp, #8]
 8007e2a:	9301      	str	r3, [sp, #4]
 8007e2c:	2302      	movs	r3, #2
 8007e2e:	9300      	str	r3, [sp, #0]
 8007e30:	2300      	movs	r3, #0
 8007e32:	460a      	mov	r2, r1
 8007e34:	4910      	ldr	r1, [pc, #64]	; (8007e78 <xTimerCreateTimerTask+0x84>)
 8007e36:	4811      	ldr	r0, [pc, #68]	; (8007e7c <xTimerCreateTimerTask+0x88>)
 8007e38:	f7ff f866 	bl	8006f08 <xTaskCreateStatic>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	4a10      	ldr	r2, [pc, #64]	; (8007e80 <xTimerCreateTimerTask+0x8c>)
 8007e40:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007e42:	4b0f      	ldr	r3, [pc, #60]	; (8007e80 <xTimerCreateTimerTask+0x8c>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d001      	beq.n	8007e4e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d10a      	bne.n	8007e6a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e58:	f383 8811 	msr	BASEPRI, r3
 8007e5c:	f3bf 8f6f 	isb	sy
 8007e60:	f3bf 8f4f 	dsb	sy
 8007e64:	613b      	str	r3, [r7, #16]
}
 8007e66:	bf00      	nop
 8007e68:	e7fe      	b.n	8007e68 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007e6a:	697b      	ldr	r3, [r7, #20]
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3718      	adds	r7, #24
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}
 8007e74:	2000100c 	.word	0x2000100c
 8007e78:	0800999c 	.word	0x0800999c
 8007e7c:	08008049 	.word	0x08008049
 8007e80:	20001010 	.word	0x20001010

08007e84 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b088      	sub	sp, #32
 8007e88:	af02      	add	r7, sp, #8
 8007e8a:	60f8      	str	r0, [r7, #12]
 8007e8c:	60b9      	str	r1, [r7, #8]
 8007e8e:	607a      	str	r2, [r7, #4]
 8007e90:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8007e92:	202c      	movs	r0, #44	; 0x2c
 8007e94:	f000 fd60 	bl	8008958 <pvPortMalloc>
 8007e98:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d00d      	beq.n	8007ebc <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	9301      	str	r3, [sp, #4]
 8007ea4:	6a3b      	ldr	r3, [r7, #32]
 8007ea6:	9300      	str	r3, [sp, #0]
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	687a      	ldr	r2, [r7, #4]
 8007eac:	68b9      	ldr	r1, [r7, #8]
 8007eae:	68f8      	ldr	r0, [r7, #12]
 8007eb0:	f000 f809 	bl	8007ec6 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8007ebc:	697b      	ldr	r3, [r7, #20]
	}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3718      	adds	r7, #24
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}

08007ec6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8007ec6:	b580      	push	{r7, lr}
 8007ec8:	b086      	sub	sp, #24
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	60f8      	str	r0, [r7, #12]
 8007ece:	60b9      	str	r1, [r7, #8]
 8007ed0:	607a      	str	r2, [r7, #4]
 8007ed2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d10a      	bne.n	8007ef0 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8007eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ede:	f383 8811 	msr	BASEPRI, r3
 8007ee2:	f3bf 8f6f 	isb	sy
 8007ee6:	f3bf 8f4f 	dsb	sy
 8007eea:	617b      	str	r3, [r7, #20]
}
 8007eec:	bf00      	nop
 8007eee:	e7fe      	b.n	8007eee <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8007ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d015      	beq.n	8007f22 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8007ef6:	f000 faa3 	bl	8008440 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8007efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efc:	68fa      	ldr	r2, [r7, #12]
 8007efe:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8007f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f02:	68ba      	ldr	r2, [r7, #8]
 8007f04:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8007f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f08:	687a      	ldr	r2, [r7, #4]
 8007f0a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8007f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0e:	683a      	ldr	r2, [r7, #0]
 8007f10:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f14:	6a3a      	ldr	r2, [r7, #32]
 8007f16:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1a:	3304      	adds	r3, #4
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f7fe fa7c 	bl	800641a <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8007f22:	bf00      	nop
 8007f24:	3718      	adds	r7, #24
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
	...

08007f2c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b08a      	sub	sp, #40	; 0x28
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	60f8      	str	r0, [r7, #12]
 8007f34:	60b9      	str	r1, [r7, #8]
 8007f36:	607a      	str	r2, [r7, #4]
 8007f38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d10a      	bne.n	8007f5a <xTimerGenericCommand+0x2e>
	__asm volatile
 8007f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f48:	f383 8811 	msr	BASEPRI, r3
 8007f4c:	f3bf 8f6f 	isb	sy
 8007f50:	f3bf 8f4f 	dsb	sy
 8007f54:	623b      	str	r3, [r7, #32]
}
 8007f56:	bf00      	nop
 8007f58:	e7fe      	b.n	8007f58 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007f5a:	4b1a      	ldr	r3, [pc, #104]	; (8007fc4 <xTimerGenericCommand+0x98>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d02a      	beq.n	8007fb8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	2b05      	cmp	r3, #5
 8007f72:	dc18      	bgt.n	8007fa6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007f74:	f7ff fe34 	bl	8007be0 <xTaskGetSchedulerState>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	2b02      	cmp	r3, #2
 8007f7c:	d109      	bne.n	8007f92 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007f7e:	4b11      	ldr	r3, [pc, #68]	; (8007fc4 <xTimerGenericCommand+0x98>)
 8007f80:	6818      	ldr	r0, [r3, #0]
 8007f82:	f107 0110 	add.w	r1, r7, #16
 8007f86:	2300      	movs	r3, #0
 8007f88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f8a:	f7fe fbd9 	bl	8006740 <xQueueGenericSend>
 8007f8e:	6278      	str	r0, [r7, #36]	; 0x24
 8007f90:	e012      	b.n	8007fb8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007f92:	4b0c      	ldr	r3, [pc, #48]	; (8007fc4 <xTimerGenericCommand+0x98>)
 8007f94:	6818      	ldr	r0, [r3, #0]
 8007f96:	f107 0110 	add.w	r1, r7, #16
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f7fe fbcf 	bl	8006740 <xQueueGenericSend>
 8007fa2:	6278      	str	r0, [r7, #36]	; 0x24
 8007fa4:	e008      	b.n	8007fb8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007fa6:	4b07      	ldr	r3, [pc, #28]	; (8007fc4 <xTimerGenericCommand+0x98>)
 8007fa8:	6818      	ldr	r0, [r3, #0]
 8007faa:	f107 0110 	add.w	r1, r7, #16
 8007fae:	2300      	movs	r3, #0
 8007fb0:	683a      	ldr	r2, [r7, #0]
 8007fb2:	f7fe fcc3 	bl	800693c <xQueueGenericSendFromISR>
 8007fb6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3728      	adds	r7, #40	; 0x28
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
 8007fc2:	bf00      	nop
 8007fc4:	2000100c 	.word	0x2000100c

08007fc8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b088      	sub	sp, #32
 8007fcc:	af02      	add	r7, sp, #8
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007fd2:	4b1c      	ldr	r3, [pc, #112]	; (8008044 <prvProcessExpiredTimer+0x7c>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	68db      	ldr	r3, [r3, #12]
 8007fd8:	68db      	ldr	r3, [r3, #12]
 8007fda:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	3304      	adds	r3, #4
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f7fe fa84 	bl	80064ee <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	69db      	ldr	r3, [r3, #28]
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	d122      	bne.n	8008034 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	699a      	ldr	r2, [r3, #24]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	18d1      	adds	r1, r2, r3
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	683a      	ldr	r2, [r7, #0]
 8007ffa:	6978      	ldr	r0, [r7, #20]
 8007ffc:	f000 f8c8 	bl	8008190 <prvInsertTimerInActiveList>
 8008000:	4603      	mov	r3, r0
 8008002:	2b00      	cmp	r3, #0
 8008004:	d016      	beq.n	8008034 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008006:	2300      	movs	r3, #0
 8008008:	9300      	str	r3, [sp, #0]
 800800a:	2300      	movs	r3, #0
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	2100      	movs	r1, #0
 8008010:	6978      	ldr	r0, [r7, #20]
 8008012:	f7ff ff8b 	bl	8007f2c <xTimerGenericCommand>
 8008016:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d10a      	bne.n	8008034 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800801e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008022:	f383 8811 	msr	BASEPRI, r3
 8008026:	f3bf 8f6f 	isb	sy
 800802a:	f3bf 8f4f 	dsb	sy
 800802e:	60fb      	str	r3, [r7, #12]
}
 8008030:	bf00      	nop
 8008032:	e7fe      	b.n	8008032 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008038:	6978      	ldr	r0, [r7, #20]
 800803a:	4798      	blx	r3
}
 800803c:	bf00      	nop
 800803e:	3718      	adds	r7, #24
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}
 8008044:	20001004 	.word	0x20001004

08008048 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b084      	sub	sp, #16
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008050:	f107 0308 	add.w	r3, r7, #8
 8008054:	4618      	mov	r0, r3
 8008056:	f000 f857 	bl	8008108 <prvGetNextExpireTime>
 800805a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	4619      	mov	r1, r3
 8008060:	68f8      	ldr	r0, [r7, #12]
 8008062:	f000 f803 	bl	800806c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008066:	f000 f8d5 	bl	8008214 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800806a:	e7f1      	b.n	8008050 <prvTimerTask+0x8>

0800806c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b084      	sub	sp, #16
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008076:	f7ff f96b 	bl	8007350 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800807a:	f107 0308 	add.w	r3, r7, #8
 800807e:	4618      	mov	r0, r3
 8008080:	f000 f866 	bl	8008150 <prvSampleTimeNow>
 8008084:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d130      	bne.n	80080ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d10a      	bne.n	80080a8 <prvProcessTimerOrBlockTask+0x3c>
 8008092:	687a      	ldr	r2, [r7, #4]
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	429a      	cmp	r2, r3
 8008098:	d806      	bhi.n	80080a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800809a:	f7ff f967 	bl	800736c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800809e:	68f9      	ldr	r1, [r7, #12]
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f7ff ff91 	bl	8007fc8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80080a6:	e024      	b.n	80080f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d008      	beq.n	80080c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80080ae:	4b13      	ldr	r3, [pc, #76]	; (80080fc <prvProcessTimerOrBlockTask+0x90>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	bf0c      	ite	eq
 80080b8:	2301      	moveq	r3, #1
 80080ba:	2300      	movne	r3, #0
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80080c0:	4b0f      	ldr	r3, [pc, #60]	; (8008100 <prvProcessTimerOrBlockTask+0x94>)
 80080c2:	6818      	ldr	r0, [r3, #0]
 80080c4:	687a      	ldr	r2, [r7, #4]
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	1ad3      	subs	r3, r2, r3
 80080ca:	683a      	ldr	r2, [r7, #0]
 80080cc:	4619      	mov	r1, r3
 80080ce:	f7fe fee7 	bl	8006ea0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80080d2:	f7ff f94b 	bl	800736c <xTaskResumeAll>
 80080d6:	4603      	mov	r3, r0
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d10a      	bne.n	80080f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80080dc:	4b09      	ldr	r3, [pc, #36]	; (8008104 <prvProcessTimerOrBlockTask+0x98>)
 80080de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080e2:	601a      	str	r2, [r3, #0]
 80080e4:	f3bf 8f4f 	dsb	sy
 80080e8:	f3bf 8f6f 	isb	sy
}
 80080ec:	e001      	b.n	80080f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80080ee:	f7ff f93d 	bl	800736c <xTaskResumeAll>
}
 80080f2:	bf00      	nop
 80080f4:	3710      	adds	r7, #16
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
 80080fa:	bf00      	nop
 80080fc:	20001008 	.word	0x20001008
 8008100:	2000100c 	.word	0x2000100c
 8008104:	e000ed04 	.word	0xe000ed04

08008108 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008108:	b480      	push	{r7}
 800810a:	b085      	sub	sp, #20
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008110:	4b0e      	ldr	r3, [pc, #56]	; (800814c <prvGetNextExpireTime+0x44>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	2b00      	cmp	r3, #0
 8008118:	bf0c      	ite	eq
 800811a:	2301      	moveq	r3, #1
 800811c:	2300      	movne	r3, #0
 800811e:	b2db      	uxtb	r3, r3
 8008120:	461a      	mov	r2, r3
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d105      	bne.n	800813a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800812e:	4b07      	ldr	r3, [pc, #28]	; (800814c <prvGetNextExpireTime+0x44>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	68db      	ldr	r3, [r3, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	60fb      	str	r3, [r7, #12]
 8008138:	e001      	b.n	800813e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800813a:	2300      	movs	r3, #0
 800813c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800813e:	68fb      	ldr	r3, [r7, #12]
}
 8008140:	4618      	mov	r0, r3
 8008142:	3714      	adds	r7, #20
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr
 800814c:	20001004 	.word	0x20001004

08008150 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b084      	sub	sp, #16
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008158:	f7ff f9a4 	bl	80074a4 <xTaskGetTickCount>
 800815c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800815e:	4b0b      	ldr	r3, [pc, #44]	; (800818c <prvSampleTimeNow+0x3c>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	68fa      	ldr	r2, [r7, #12]
 8008164:	429a      	cmp	r2, r3
 8008166:	d205      	bcs.n	8008174 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008168:	f000 f908 	bl	800837c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2201      	movs	r2, #1
 8008170:	601a      	str	r2, [r3, #0]
 8008172:	e002      	b.n	800817a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2200      	movs	r2, #0
 8008178:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800817a:	4a04      	ldr	r2, [pc, #16]	; (800818c <prvSampleTimeNow+0x3c>)
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008180:	68fb      	ldr	r3, [r7, #12]
}
 8008182:	4618      	mov	r0, r3
 8008184:	3710      	adds	r7, #16
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}
 800818a:	bf00      	nop
 800818c:	20001014 	.word	0x20001014

08008190 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b086      	sub	sp, #24
 8008194:	af00      	add	r7, sp, #0
 8008196:	60f8      	str	r0, [r7, #12]
 8008198:	60b9      	str	r1, [r7, #8]
 800819a:	607a      	str	r2, [r7, #4]
 800819c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800819e:	2300      	movs	r3, #0
 80081a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	68ba      	ldr	r2, [r7, #8]
 80081a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	68fa      	ldr	r2, [r7, #12]
 80081ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80081ae:	68ba      	ldr	r2, [r7, #8]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d812      	bhi.n	80081dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081b6:	687a      	ldr	r2, [r7, #4]
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	1ad2      	subs	r2, r2, r3
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	699b      	ldr	r3, [r3, #24]
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d302      	bcc.n	80081ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80081c4:	2301      	movs	r3, #1
 80081c6:	617b      	str	r3, [r7, #20]
 80081c8:	e01b      	b.n	8008202 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80081ca:	4b10      	ldr	r3, [pc, #64]	; (800820c <prvInsertTimerInActiveList+0x7c>)
 80081cc:	681a      	ldr	r2, [r3, #0]
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	3304      	adds	r3, #4
 80081d2:	4619      	mov	r1, r3
 80081d4:	4610      	mov	r0, r2
 80081d6:	f7fe f951 	bl	800647c <vListInsert>
 80081da:	e012      	b.n	8008202 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d206      	bcs.n	80081f2 <prvInsertTimerInActiveList+0x62>
 80081e4:	68ba      	ldr	r2, [r7, #8]
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d302      	bcc.n	80081f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80081ec:	2301      	movs	r3, #1
 80081ee:	617b      	str	r3, [r7, #20]
 80081f0:	e007      	b.n	8008202 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80081f2:	4b07      	ldr	r3, [pc, #28]	; (8008210 <prvInsertTimerInActiveList+0x80>)
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	3304      	adds	r3, #4
 80081fa:	4619      	mov	r1, r3
 80081fc:	4610      	mov	r0, r2
 80081fe:	f7fe f93d 	bl	800647c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008202:	697b      	ldr	r3, [r7, #20]
}
 8008204:	4618      	mov	r0, r3
 8008206:	3718      	adds	r7, #24
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}
 800820c:	20001008 	.word	0x20001008
 8008210:	20001004 	.word	0x20001004

08008214 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b08e      	sub	sp, #56	; 0x38
 8008218:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800821a:	e09d      	b.n	8008358 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2b00      	cmp	r3, #0
 8008220:	da18      	bge.n	8008254 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008222:	1d3b      	adds	r3, r7, #4
 8008224:	3304      	adds	r3, #4
 8008226:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800822a:	2b00      	cmp	r3, #0
 800822c:	d10a      	bne.n	8008244 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800822e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008232:	f383 8811 	msr	BASEPRI, r3
 8008236:	f3bf 8f6f 	isb	sy
 800823a:	f3bf 8f4f 	dsb	sy
 800823e:	61fb      	str	r3, [r7, #28]
}
 8008240:	bf00      	nop
 8008242:	e7fe      	b.n	8008242 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800824a:	6850      	ldr	r0, [r2, #4]
 800824c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800824e:	6892      	ldr	r2, [r2, #8]
 8008250:	4611      	mov	r1, r2
 8008252:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2b00      	cmp	r3, #0
 8008258:	db7e      	blt.n	8008358 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800825e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008260:	695b      	ldr	r3, [r3, #20]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d004      	beq.n	8008270 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008268:	3304      	adds	r3, #4
 800826a:	4618      	mov	r0, r3
 800826c:	f7fe f93f 	bl	80064ee <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008270:	463b      	mov	r3, r7
 8008272:	4618      	mov	r0, r3
 8008274:	f7ff ff6c 	bl	8008150 <prvSampleTimeNow>
 8008278:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2b09      	cmp	r3, #9
 800827e:	d86a      	bhi.n	8008356 <prvProcessReceivedCommands+0x142>
 8008280:	a201      	add	r2, pc, #4	; (adr r2, 8008288 <prvProcessReceivedCommands+0x74>)
 8008282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008286:	bf00      	nop
 8008288:	080082b1 	.word	0x080082b1
 800828c:	080082b1 	.word	0x080082b1
 8008290:	080082b1 	.word	0x080082b1
 8008294:	08008359 	.word	0x08008359
 8008298:	0800830d 	.word	0x0800830d
 800829c:	08008345 	.word	0x08008345
 80082a0:	080082b1 	.word	0x080082b1
 80082a4:	080082b1 	.word	0x080082b1
 80082a8:	08008359 	.word	0x08008359
 80082ac:	0800830d 	.word	0x0800830d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80082b0:	68ba      	ldr	r2, [r7, #8]
 80082b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b4:	699b      	ldr	r3, [r3, #24]
 80082b6:	18d1      	adds	r1, r2, r3
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082be:	f7ff ff67 	bl	8008190 <prvInsertTimerInActiveList>
 80082c2:	4603      	mov	r3, r0
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d047      	beq.n	8008358 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80082c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082ce:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80082d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d2:	69db      	ldr	r3, [r3, #28]
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	d13f      	bne.n	8008358 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80082d8:	68ba      	ldr	r2, [r7, #8]
 80082da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082dc:	699b      	ldr	r3, [r3, #24]
 80082de:	441a      	add	r2, r3
 80082e0:	2300      	movs	r3, #0
 80082e2:	9300      	str	r3, [sp, #0]
 80082e4:	2300      	movs	r3, #0
 80082e6:	2100      	movs	r1, #0
 80082e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082ea:	f7ff fe1f 	bl	8007f2c <xTimerGenericCommand>
 80082ee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80082f0:	6a3b      	ldr	r3, [r7, #32]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d130      	bne.n	8008358 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80082f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082fa:	f383 8811 	msr	BASEPRI, r3
 80082fe:	f3bf 8f6f 	isb	sy
 8008302:	f3bf 8f4f 	dsb	sy
 8008306:	61bb      	str	r3, [r7, #24]
}
 8008308:	bf00      	nop
 800830a:	e7fe      	b.n	800830a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800830c:	68ba      	ldr	r2, [r7, #8]
 800830e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008310:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008314:	699b      	ldr	r3, [r3, #24]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d10a      	bne.n	8008330 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800831a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800831e:	f383 8811 	msr	BASEPRI, r3
 8008322:	f3bf 8f6f 	isb	sy
 8008326:	f3bf 8f4f 	dsb	sy
 800832a:	617b      	str	r3, [r7, #20]
}
 800832c:	bf00      	nop
 800832e:	e7fe      	b.n	800832e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008332:	699a      	ldr	r2, [r3, #24]
 8008334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008336:	18d1      	adds	r1, r2, r3
 8008338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800833c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800833e:	f7ff ff27 	bl	8008190 <prvInsertTimerInActiveList>
					break;
 8008342:	e009      	b.n	8008358 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008346:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800834a:	2b00      	cmp	r3, #0
 800834c:	d104      	bne.n	8008358 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800834e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008350:	f000 fbc6 	bl	8008ae0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008354:	e000      	b.n	8008358 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8008356:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008358:	4b07      	ldr	r3, [pc, #28]	; (8008378 <prvProcessReceivedCommands+0x164>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	1d39      	adds	r1, r7, #4
 800835e:	2200      	movs	r2, #0
 8008360:	4618      	mov	r0, r3
 8008362:	f7fe fb83 	bl	8006a6c <xQueueReceive>
 8008366:	4603      	mov	r3, r0
 8008368:	2b00      	cmp	r3, #0
 800836a:	f47f af57 	bne.w	800821c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800836e:	bf00      	nop
 8008370:	bf00      	nop
 8008372:	3730      	adds	r7, #48	; 0x30
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}
 8008378:	2000100c 	.word	0x2000100c

0800837c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b088      	sub	sp, #32
 8008380:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008382:	e045      	b.n	8008410 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008384:	4b2c      	ldr	r3, [pc, #176]	; (8008438 <prvSwitchTimerLists+0xbc>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	68db      	ldr	r3, [r3, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800838e:	4b2a      	ldr	r3, [pc, #168]	; (8008438 <prvSwitchTimerLists+0xbc>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	68db      	ldr	r3, [r3, #12]
 8008394:	68db      	ldr	r3, [r3, #12]
 8008396:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	3304      	adds	r3, #4
 800839c:	4618      	mov	r0, r3
 800839e:	f7fe f8a6 	bl	80064ee <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a6:	68f8      	ldr	r0, [r7, #12]
 80083a8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	69db      	ldr	r3, [r3, #28]
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d12e      	bne.n	8008410 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	699b      	ldr	r3, [r3, #24]
 80083b6:	693a      	ldr	r2, [r7, #16]
 80083b8:	4413      	add	r3, r2
 80083ba:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80083bc:	68ba      	ldr	r2, [r7, #8]
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d90e      	bls.n	80083e2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	68ba      	ldr	r2, [r7, #8]
 80083c8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	68fa      	ldr	r2, [r7, #12]
 80083ce:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80083d0:	4b19      	ldr	r3, [pc, #100]	; (8008438 <prvSwitchTimerLists+0xbc>)
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	3304      	adds	r3, #4
 80083d8:	4619      	mov	r1, r3
 80083da:	4610      	mov	r0, r2
 80083dc:	f7fe f84e 	bl	800647c <vListInsert>
 80083e0:	e016      	b.n	8008410 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80083e2:	2300      	movs	r3, #0
 80083e4:	9300      	str	r3, [sp, #0]
 80083e6:	2300      	movs	r3, #0
 80083e8:	693a      	ldr	r2, [r7, #16]
 80083ea:	2100      	movs	r1, #0
 80083ec:	68f8      	ldr	r0, [r7, #12]
 80083ee:	f7ff fd9d 	bl	8007f2c <xTimerGenericCommand>
 80083f2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d10a      	bne.n	8008410 <prvSwitchTimerLists+0x94>
	__asm volatile
 80083fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083fe:	f383 8811 	msr	BASEPRI, r3
 8008402:	f3bf 8f6f 	isb	sy
 8008406:	f3bf 8f4f 	dsb	sy
 800840a:	603b      	str	r3, [r7, #0]
}
 800840c:	bf00      	nop
 800840e:	e7fe      	b.n	800840e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008410:	4b09      	ldr	r3, [pc, #36]	; (8008438 <prvSwitchTimerLists+0xbc>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d1b4      	bne.n	8008384 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800841a:	4b07      	ldr	r3, [pc, #28]	; (8008438 <prvSwitchTimerLists+0xbc>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008420:	4b06      	ldr	r3, [pc, #24]	; (800843c <prvSwitchTimerLists+0xc0>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a04      	ldr	r2, [pc, #16]	; (8008438 <prvSwitchTimerLists+0xbc>)
 8008426:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008428:	4a04      	ldr	r2, [pc, #16]	; (800843c <prvSwitchTimerLists+0xc0>)
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	6013      	str	r3, [r2, #0]
}
 800842e:	bf00      	nop
 8008430:	3718      	adds	r7, #24
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
 8008436:	bf00      	nop
 8008438:	20001004 	.word	0x20001004
 800843c:	20001008 	.word	0x20001008

08008440 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b082      	sub	sp, #8
 8008444:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008446:	f000 f965 	bl	8008714 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800844a:	4b15      	ldr	r3, [pc, #84]	; (80084a0 <prvCheckForValidListAndQueue+0x60>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d120      	bne.n	8008494 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008452:	4814      	ldr	r0, [pc, #80]	; (80084a4 <prvCheckForValidListAndQueue+0x64>)
 8008454:	f7fd ffc1 	bl	80063da <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008458:	4813      	ldr	r0, [pc, #76]	; (80084a8 <prvCheckForValidListAndQueue+0x68>)
 800845a:	f7fd ffbe 	bl	80063da <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800845e:	4b13      	ldr	r3, [pc, #76]	; (80084ac <prvCheckForValidListAndQueue+0x6c>)
 8008460:	4a10      	ldr	r2, [pc, #64]	; (80084a4 <prvCheckForValidListAndQueue+0x64>)
 8008462:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008464:	4b12      	ldr	r3, [pc, #72]	; (80084b0 <prvCheckForValidListAndQueue+0x70>)
 8008466:	4a10      	ldr	r2, [pc, #64]	; (80084a8 <prvCheckForValidListAndQueue+0x68>)
 8008468:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800846a:	2300      	movs	r3, #0
 800846c:	9300      	str	r3, [sp, #0]
 800846e:	4b11      	ldr	r3, [pc, #68]	; (80084b4 <prvCheckForValidListAndQueue+0x74>)
 8008470:	4a11      	ldr	r2, [pc, #68]	; (80084b8 <prvCheckForValidListAndQueue+0x78>)
 8008472:	2110      	movs	r1, #16
 8008474:	200a      	movs	r0, #10
 8008476:	f7fe f8cd 	bl	8006614 <xQueueGenericCreateStatic>
 800847a:	4603      	mov	r3, r0
 800847c:	4a08      	ldr	r2, [pc, #32]	; (80084a0 <prvCheckForValidListAndQueue+0x60>)
 800847e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008480:	4b07      	ldr	r3, [pc, #28]	; (80084a0 <prvCheckForValidListAndQueue+0x60>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d005      	beq.n	8008494 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008488:	4b05      	ldr	r3, [pc, #20]	; (80084a0 <prvCheckForValidListAndQueue+0x60>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	490b      	ldr	r1, [pc, #44]	; (80084bc <prvCheckForValidListAndQueue+0x7c>)
 800848e:	4618      	mov	r0, r3
 8008490:	f7fe fcdc 	bl	8006e4c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008494:	f000 f96e 	bl	8008774 <vPortExitCritical>
}
 8008498:	bf00      	nop
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
 800849e:	bf00      	nop
 80084a0:	2000100c 	.word	0x2000100c
 80084a4:	20000fdc 	.word	0x20000fdc
 80084a8:	20000ff0 	.word	0x20000ff0
 80084ac:	20001004 	.word	0x20001004
 80084b0:	20001008 	.word	0x20001008
 80084b4:	200010b8 	.word	0x200010b8
 80084b8:	20001018 	.word	0x20001018
 80084bc:	080099a4 	.word	0x080099a4

080084c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80084c0:	b480      	push	{r7}
 80084c2:	b085      	sub	sp, #20
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	60b9      	str	r1, [r7, #8]
 80084ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	3b04      	subs	r3, #4
 80084d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80084d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	3b04      	subs	r3, #4
 80084de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	f023 0201 	bic.w	r2, r3, #1
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	3b04      	subs	r3, #4
 80084ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80084f0:	4a0c      	ldr	r2, [pc, #48]	; (8008524 <pxPortInitialiseStack+0x64>)
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	3b14      	subs	r3, #20
 80084fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80084fc:	687a      	ldr	r2, [r7, #4]
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	3b04      	subs	r3, #4
 8008506:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f06f 0202 	mvn.w	r2, #2
 800850e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	3b20      	subs	r3, #32
 8008514:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008516:	68fb      	ldr	r3, [r7, #12]
}
 8008518:	4618      	mov	r0, r3
 800851a:	3714      	adds	r7, #20
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr
 8008524:	08008529 	.word	0x08008529

08008528 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008528:	b480      	push	{r7}
 800852a:	b085      	sub	sp, #20
 800852c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800852e:	2300      	movs	r3, #0
 8008530:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008532:	4b12      	ldr	r3, [pc, #72]	; (800857c <prvTaskExitError+0x54>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800853a:	d00a      	beq.n	8008552 <prvTaskExitError+0x2a>
	__asm volatile
 800853c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008540:	f383 8811 	msr	BASEPRI, r3
 8008544:	f3bf 8f6f 	isb	sy
 8008548:	f3bf 8f4f 	dsb	sy
 800854c:	60fb      	str	r3, [r7, #12]
}
 800854e:	bf00      	nop
 8008550:	e7fe      	b.n	8008550 <prvTaskExitError+0x28>
	__asm volatile
 8008552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008556:	f383 8811 	msr	BASEPRI, r3
 800855a:	f3bf 8f6f 	isb	sy
 800855e:	f3bf 8f4f 	dsb	sy
 8008562:	60bb      	str	r3, [r7, #8]
}
 8008564:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008566:	bf00      	nop
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d0fc      	beq.n	8008568 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800856e:	bf00      	nop
 8008570:	bf00      	nop
 8008572:	3714      	adds	r7, #20
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr
 800857c:	2000000c 	.word	0x2000000c

08008580 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008580:	4b07      	ldr	r3, [pc, #28]	; (80085a0 <pxCurrentTCBConst2>)
 8008582:	6819      	ldr	r1, [r3, #0]
 8008584:	6808      	ldr	r0, [r1, #0]
 8008586:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800858a:	f380 8809 	msr	PSP, r0
 800858e:	f3bf 8f6f 	isb	sy
 8008592:	f04f 0000 	mov.w	r0, #0
 8008596:	f380 8811 	msr	BASEPRI, r0
 800859a:	4770      	bx	lr
 800859c:	f3af 8000 	nop.w

080085a0 <pxCurrentTCBConst2>:
 80085a0:	20000eb0 	.word	0x20000eb0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80085a4:	bf00      	nop
 80085a6:	bf00      	nop

080085a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80085a8:	4808      	ldr	r0, [pc, #32]	; (80085cc <prvPortStartFirstTask+0x24>)
 80085aa:	6800      	ldr	r0, [r0, #0]
 80085ac:	6800      	ldr	r0, [r0, #0]
 80085ae:	f380 8808 	msr	MSP, r0
 80085b2:	f04f 0000 	mov.w	r0, #0
 80085b6:	f380 8814 	msr	CONTROL, r0
 80085ba:	b662      	cpsie	i
 80085bc:	b661      	cpsie	f
 80085be:	f3bf 8f4f 	dsb	sy
 80085c2:	f3bf 8f6f 	isb	sy
 80085c6:	df00      	svc	0
 80085c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80085ca:	bf00      	nop
 80085cc:	e000ed08 	.word	0xe000ed08

080085d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b086      	sub	sp, #24
 80085d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80085d6:	4b46      	ldr	r3, [pc, #280]	; (80086f0 <xPortStartScheduler+0x120>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a46      	ldr	r2, [pc, #280]	; (80086f4 <xPortStartScheduler+0x124>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d10a      	bne.n	80085f6 <xPortStartScheduler+0x26>
	__asm volatile
 80085e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e4:	f383 8811 	msr	BASEPRI, r3
 80085e8:	f3bf 8f6f 	isb	sy
 80085ec:	f3bf 8f4f 	dsb	sy
 80085f0:	613b      	str	r3, [r7, #16]
}
 80085f2:	bf00      	nop
 80085f4:	e7fe      	b.n	80085f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80085f6:	4b3e      	ldr	r3, [pc, #248]	; (80086f0 <xPortStartScheduler+0x120>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a3f      	ldr	r2, [pc, #252]	; (80086f8 <xPortStartScheduler+0x128>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d10a      	bne.n	8008616 <xPortStartScheduler+0x46>
	__asm volatile
 8008600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008604:	f383 8811 	msr	BASEPRI, r3
 8008608:	f3bf 8f6f 	isb	sy
 800860c:	f3bf 8f4f 	dsb	sy
 8008610:	60fb      	str	r3, [r7, #12]
}
 8008612:	bf00      	nop
 8008614:	e7fe      	b.n	8008614 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008616:	4b39      	ldr	r3, [pc, #228]	; (80086fc <xPortStartScheduler+0x12c>)
 8008618:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	b2db      	uxtb	r3, r3
 8008620:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	22ff      	movs	r2, #255	; 0xff
 8008626:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	b2db      	uxtb	r3, r3
 800862e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008630:	78fb      	ldrb	r3, [r7, #3]
 8008632:	b2db      	uxtb	r3, r3
 8008634:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008638:	b2da      	uxtb	r2, r3
 800863a:	4b31      	ldr	r3, [pc, #196]	; (8008700 <xPortStartScheduler+0x130>)
 800863c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800863e:	4b31      	ldr	r3, [pc, #196]	; (8008704 <xPortStartScheduler+0x134>)
 8008640:	2207      	movs	r2, #7
 8008642:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008644:	e009      	b.n	800865a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008646:	4b2f      	ldr	r3, [pc, #188]	; (8008704 <xPortStartScheduler+0x134>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	3b01      	subs	r3, #1
 800864c:	4a2d      	ldr	r2, [pc, #180]	; (8008704 <xPortStartScheduler+0x134>)
 800864e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008650:	78fb      	ldrb	r3, [r7, #3]
 8008652:	b2db      	uxtb	r3, r3
 8008654:	005b      	lsls	r3, r3, #1
 8008656:	b2db      	uxtb	r3, r3
 8008658:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800865a:	78fb      	ldrb	r3, [r7, #3]
 800865c:	b2db      	uxtb	r3, r3
 800865e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008662:	2b80      	cmp	r3, #128	; 0x80
 8008664:	d0ef      	beq.n	8008646 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008666:	4b27      	ldr	r3, [pc, #156]	; (8008704 <xPortStartScheduler+0x134>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f1c3 0307 	rsb	r3, r3, #7
 800866e:	2b04      	cmp	r3, #4
 8008670:	d00a      	beq.n	8008688 <xPortStartScheduler+0xb8>
	__asm volatile
 8008672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008676:	f383 8811 	msr	BASEPRI, r3
 800867a:	f3bf 8f6f 	isb	sy
 800867e:	f3bf 8f4f 	dsb	sy
 8008682:	60bb      	str	r3, [r7, #8]
}
 8008684:	bf00      	nop
 8008686:	e7fe      	b.n	8008686 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008688:	4b1e      	ldr	r3, [pc, #120]	; (8008704 <xPortStartScheduler+0x134>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	021b      	lsls	r3, r3, #8
 800868e:	4a1d      	ldr	r2, [pc, #116]	; (8008704 <xPortStartScheduler+0x134>)
 8008690:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008692:	4b1c      	ldr	r3, [pc, #112]	; (8008704 <xPortStartScheduler+0x134>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800869a:	4a1a      	ldr	r2, [pc, #104]	; (8008704 <xPortStartScheduler+0x134>)
 800869c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	b2da      	uxtb	r2, r3
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80086a6:	4b18      	ldr	r3, [pc, #96]	; (8008708 <xPortStartScheduler+0x138>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a17      	ldr	r2, [pc, #92]	; (8008708 <xPortStartScheduler+0x138>)
 80086ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80086b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80086b2:	4b15      	ldr	r3, [pc, #84]	; (8008708 <xPortStartScheduler+0x138>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4a14      	ldr	r2, [pc, #80]	; (8008708 <xPortStartScheduler+0x138>)
 80086b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80086bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80086be:	f000 f8dd 	bl	800887c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80086c2:	4b12      	ldr	r3, [pc, #72]	; (800870c <xPortStartScheduler+0x13c>)
 80086c4:	2200      	movs	r2, #0
 80086c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80086c8:	f000 f8fc 	bl	80088c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80086cc:	4b10      	ldr	r3, [pc, #64]	; (8008710 <xPortStartScheduler+0x140>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a0f      	ldr	r2, [pc, #60]	; (8008710 <xPortStartScheduler+0x140>)
 80086d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80086d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80086d8:	f7ff ff66 	bl	80085a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80086dc:	f7fe ffb0 	bl	8007640 <vTaskSwitchContext>
	prvTaskExitError();
 80086e0:	f7ff ff22 	bl	8008528 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80086e4:	2300      	movs	r3, #0
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3718      	adds	r7, #24
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop
 80086f0:	e000ed00 	.word	0xe000ed00
 80086f4:	410fc271 	.word	0x410fc271
 80086f8:	410fc270 	.word	0x410fc270
 80086fc:	e000e400 	.word	0xe000e400
 8008700:	20001100 	.word	0x20001100
 8008704:	20001104 	.word	0x20001104
 8008708:	e000ed20 	.word	0xe000ed20
 800870c:	2000000c 	.word	0x2000000c
 8008710:	e000ef34 	.word	0xe000ef34

08008714 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008714:	b480      	push	{r7}
 8008716:	b083      	sub	sp, #12
 8008718:	af00      	add	r7, sp, #0
	__asm volatile
 800871a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800871e:	f383 8811 	msr	BASEPRI, r3
 8008722:	f3bf 8f6f 	isb	sy
 8008726:	f3bf 8f4f 	dsb	sy
 800872a:	607b      	str	r3, [r7, #4]
}
 800872c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800872e:	4b0f      	ldr	r3, [pc, #60]	; (800876c <vPortEnterCritical+0x58>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	3301      	adds	r3, #1
 8008734:	4a0d      	ldr	r2, [pc, #52]	; (800876c <vPortEnterCritical+0x58>)
 8008736:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008738:	4b0c      	ldr	r3, [pc, #48]	; (800876c <vPortEnterCritical+0x58>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	2b01      	cmp	r3, #1
 800873e:	d10f      	bne.n	8008760 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008740:	4b0b      	ldr	r3, [pc, #44]	; (8008770 <vPortEnterCritical+0x5c>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	b2db      	uxtb	r3, r3
 8008746:	2b00      	cmp	r3, #0
 8008748:	d00a      	beq.n	8008760 <vPortEnterCritical+0x4c>
	__asm volatile
 800874a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800874e:	f383 8811 	msr	BASEPRI, r3
 8008752:	f3bf 8f6f 	isb	sy
 8008756:	f3bf 8f4f 	dsb	sy
 800875a:	603b      	str	r3, [r7, #0]
}
 800875c:	bf00      	nop
 800875e:	e7fe      	b.n	800875e <vPortEnterCritical+0x4a>
	}
}
 8008760:	bf00      	nop
 8008762:	370c      	adds	r7, #12
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr
 800876c:	2000000c 	.word	0x2000000c
 8008770:	e000ed04 	.word	0xe000ed04

08008774 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008774:	b480      	push	{r7}
 8008776:	b083      	sub	sp, #12
 8008778:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800877a:	4b12      	ldr	r3, [pc, #72]	; (80087c4 <vPortExitCritical+0x50>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d10a      	bne.n	8008798 <vPortExitCritical+0x24>
	__asm volatile
 8008782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008786:	f383 8811 	msr	BASEPRI, r3
 800878a:	f3bf 8f6f 	isb	sy
 800878e:	f3bf 8f4f 	dsb	sy
 8008792:	607b      	str	r3, [r7, #4]
}
 8008794:	bf00      	nop
 8008796:	e7fe      	b.n	8008796 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008798:	4b0a      	ldr	r3, [pc, #40]	; (80087c4 <vPortExitCritical+0x50>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	3b01      	subs	r3, #1
 800879e:	4a09      	ldr	r2, [pc, #36]	; (80087c4 <vPortExitCritical+0x50>)
 80087a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80087a2:	4b08      	ldr	r3, [pc, #32]	; (80087c4 <vPortExitCritical+0x50>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d105      	bne.n	80087b6 <vPortExitCritical+0x42>
 80087aa:	2300      	movs	r3, #0
 80087ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	f383 8811 	msr	BASEPRI, r3
}
 80087b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80087b6:	bf00      	nop
 80087b8:	370c      	adds	r7, #12
 80087ba:	46bd      	mov	sp, r7
 80087bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c0:	4770      	bx	lr
 80087c2:	bf00      	nop
 80087c4:	2000000c 	.word	0x2000000c
	...

080087d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80087d0:	f3ef 8009 	mrs	r0, PSP
 80087d4:	f3bf 8f6f 	isb	sy
 80087d8:	4b15      	ldr	r3, [pc, #84]	; (8008830 <pxCurrentTCBConst>)
 80087da:	681a      	ldr	r2, [r3, #0]
 80087dc:	f01e 0f10 	tst.w	lr, #16
 80087e0:	bf08      	it	eq
 80087e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80087e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ea:	6010      	str	r0, [r2, #0]
 80087ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80087f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80087f4:	f380 8811 	msr	BASEPRI, r0
 80087f8:	f3bf 8f4f 	dsb	sy
 80087fc:	f3bf 8f6f 	isb	sy
 8008800:	f7fe ff1e 	bl	8007640 <vTaskSwitchContext>
 8008804:	f04f 0000 	mov.w	r0, #0
 8008808:	f380 8811 	msr	BASEPRI, r0
 800880c:	bc09      	pop	{r0, r3}
 800880e:	6819      	ldr	r1, [r3, #0]
 8008810:	6808      	ldr	r0, [r1, #0]
 8008812:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008816:	f01e 0f10 	tst.w	lr, #16
 800881a:	bf08      	it	eq
 800881c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008820:	f380 8809 	msr	PSP, r0
 8008824:	f3bf 8f6f 	isb	sy
 8008828:	4770      	bx	lr
 800882a:	bf00      	nop
 800882c:	f3af 8000 	nop.w

08008830 <pxCurrentTCBConst>:
 8008830:	20000eb0 	.word	0x20000eb0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008834:	bf00      	nop
 8008836:	bf00      	nop

08008838 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b082      	sub	sp, #8
 800883c:	af00      	add	r7, sp, #0
	__asm volatile
 800883e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008842:	f383 8811 	msr	BASEPRI, r3
 8008846:	f3bf 8f6f 	isb	sy
 800884a:	f3bf 8f4f 	dsb	sy
 800884e:	607b      	str	r3, [r7, #4]
}
 8008850:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008852:	f7fe fe37 	bl	80074c4 <xTaskIncrementTick>
 8008856:	4603      	mov	r3, r0
 8008858:	2b00      	cmp	r3, #0
 800885a:	d003      	beq.n	8008864 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800885c:	4b06      	ldr	r3, [pc, #24]	; (8008878 <SysTick_Handler+0x40>)
 800885e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008862:	601a      	str	r2, [r3, #0]
 8008864:	2300      	movs	r3, #0
 8008866:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	f383 8811 	msr	BASEPRI, r3
}
 800886e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008870:	bf00      	nop
 8008872:	3708      	adds	r7, #8
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}
 8008878:	e000ed04 	.word	0xe000ed04

0800887c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800887c:	b480      	push	{r7}
 800887e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008880:	4b0b      	ldr	r3, [pc, #44]	; (80088b0 <vPortSetupTimerInterrupt+0x34>)
 8008882:	2200      	movs	r2, #0
 8008884:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008886:	4b0b      	ldr	r3, [pc, #44]	; (80088b4 <vPortSetupTimerInterrupt+0x38>)
 8008888:	2200      	movs	r2, #0
 800888a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800888c:	4b0a      	ldr	r3, [pc, #40]	; (80088b8 <vPortSetupTimerInterrupt+0x3c>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a0a      	ldr	r2, [pc, #40]	; (80088bc <vPortSetupTimerInterrupt+0x40>)
 8008892:	fba2 2303 	umull	r2, r3, r2, r3
 8008896:	099b      	lsrs	r3, r3, #6
 8008898:	4a09      	ldr	r2, [pc, #36]	; (80088c0 <vPortSetupTimerInterrupt+0x44>)
 800889a:	3b01      	subs	r3, #1
 800889c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800889e:	4b04      	ldr	r3, [pc, #16]	; (80088b0 <vPortSetupTimerInterrupt+0x34>)
 80088a0:	2207      	movs	r2, #7
 80088a2:	601a      	str	r2, [r3, #0]
}
 80088a4:	bf00      	nop
 80088a6:	46bd      	mov	sp, r7
 80088a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ac:	4770      	bx	lr
 80088ae:	bf00      	nop
 80088b0:	e000e010 	.word	0xe000e010
 80088b4:	e000e018 	.word	0xe000e018
 80088b8:	20000000 	.word	0x20000000
 80088bc:	10624dd3 	.word	0x10624dd3
 80088c0:	e000e014 	.word	0xe000e014

080088c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80088c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80088d4 <vPortEnableVFP+0x10>
 80088c8:	6801      	ldr	r1, [r0, #0]
 80088ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80088ce:	6001      	str	r1, [r0, #0]
 80088d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80088d2:	bf00      	nop
 80088d4:	e000ed88 	.word	0xe000ed88

080088d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80088d8:	b480      	push	{r7}
 80088da:	b085      	sub	sp, #20
 80088dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80088de:	f3ef 8305 	mrs	r3, IPSR
 80088e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2b0f      	cmp	r3, #15
 80088e8:	d914      	bls.n	8008914 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80088ea:	4a17      	ldr	r2, [pc, #92]	; (8008948 <vPortValidateInterruptPriority+0x70>)
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	4413      	add	r3, r2
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80088f4:	4b15      	ldr	r3, [pc, #84]	; (800894c <vPortValidateInterruptPriority+0x74>)
 80088f6:	781b      	ldrb	r3, [r3, #0]
 80088f8:	7afa      	ldrb	r2, [r7, #11]
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d20a      	bcs.n	8008914 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80088fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008902:	f383 8811 	msr	BASEPRI, r3
 8008906:	f3bf 8f6f 	isb	sy
 800890a:	f3bf 8f4f 	dsb	sy
 800890e:	607b      	str	r3, [r7, #4]
}
 8008910:	bf00      	nop
 8008912:	e7fe      	b.n	8008912 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008914:	4b0e      	ldr	r3, [pc, #56]	; (8008950 <vPortValidateInterruptPriority+0x78>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800891c:	4b0d      	ldr	r3, [pc, #52]	; (8008954 <vPortValidateInterruptPriority+0x7c>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	429a      	cmp	r2, r3
 8008922:	d90a      	bls.n	800893a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008928:	f383 8811 	msr	BASEPRI, r3
 800892c:	f3bf 8f6f 	isb	sy
 8008930:	f3bf 8f4f 	dsb	sy
 8008934:	603b      	str	r3, [r7, #0]
}
 8008936:	bf00      	nop
 8008938:	e7fe      	b.n	8008938 <vPortValidateInterruptPriority+0x60>
	}
 800893a:	bf00      	nop
 800893c:	3714      	adds	r7, #20
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr
 8008946:	bf00      	nop
 8008948:	e000e3f0 	.word	0xe000e3f0
 800894c:	20001100 	.word	0x20001100
 8008950:	e000ed0c 	.word	0xe000ed0c
 8008954:	20001104 	.word	0x20001104

08008958 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b08a      	sub	sp, #40	; 0x28
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008960:	2300      	movs	r3, #0
 8008962:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008964:	f7fe fcf4 	bl	8007350 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008968:	4b58      	ldr	r3, [pc, #352]	; (8008acc <pvPortMalloc+0x174>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d101      	bne.n	8008974 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008970:	f000 f910 	bl	8008b94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008974:	4b56      	ldr	r3, [pc, #344]	; (8008ad0 <pvPortMalloc+0x178>)
 8008976:	681a      	ldr	r2, [r3, #0]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	4013      	ands	r3, r2
 800897c:	2b00      	cmp	r3, #0
 800897e:	f040 808e 	bne.w	8008a9e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d01d      	beq.n	80089c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008988:	2208      	movs	r2, #8
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	4413      	add	r3, r2
 800898e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f003 0307 	and.w	r3, r3, #7
 8008996:	2b00      	cmp	r3, #0
 8008998:	d014      	beq.n	80089c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f023 0307 	bic.w	r3, r3, #7
 80089a0:	3308      	adds	r3, #8
 80089a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f003 0307 	and.w	r3, r3, #7
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d00a      	beq.n	80089c4 <pvPortMalloc+0x6c>
	__asm volatile
 80089ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b2:	f383 8811 	msr	BASEPRI, r3
 80089b6:	f3bf 8f6f 	isb	sy
 80089ba:	f3bf 8f4f 	dsb	sy
 80089be:	617b      	str	r3, [r7, #20]
}
 80089c0:	bf00      	nop
 80089c2:	e7fe      	b.n	80089c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d069      	beq.n	8008a9e <pvPortMalloc+0x146>
 80089ca:	4b42      	ldr	r3, [pc, #264]	; (8008ad4 <pvPortMalloc+0x17c>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	687a      	ldr	r2, [r7, #4]
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d864      	bhi.n	8008a9e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80089d4:	4b40      	ldr	r3, [pc, #256]	; (8008ad8 <pvPortMalloc+0x180>)
 80089d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80089d8:	4b3f      	ldr	r3, [pc, #252]	; (8008ad8 <pvPortMalloc+0x180>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80089de:	e004      	b.n	80089ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80089e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80089e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80089ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	687a      	ldr	r2, [r7, #4]
 80089f0:	429a      	cmp	r2, r3
 80089f2:	d903      	bls.n	80089fc <pvPortMalloc+0xa4>
 80089f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d1f1      	bne.n	80089e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80089fc:	4b33      	ldr	r3, [pc, #204]	; (8008acc <pvPortMalloc+0x174>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a02:	429a      	cmp	r2, r3
 8008a04:	d04b      	beq.n	8008a9e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008a06:	6a3b      	ldr	r3, [r7, #32]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	2208      	movs	r2, #8
 8008a0c:	4413      	add	r3, r2
 8008a0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a12:	681a      	ldr	r2, [r3, #0]
 8008a14:	6a3b      	ldr	r3, [r7, #32]
 8008a16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1a:	685a      	ldr	r2, [r3, #4]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	1ad2      	subs	r2, r2, r3
 8008a20:	2308      	movs	r3, #8
 8008a22:	005b      	lsls	r3, r3, #1
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d91f      	bls.n	8008a68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	4413      	add	r3, r2
 8008a2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a30:	69bb      	ldr	r3, [r7, #24]
 8008a32:	f003 0307 	and.w	r3, r3, #7
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d00a      	beq.n	8008a50 <pvPortMalloc+0xf8>
	__asm volatile
 8008a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a3e:	f383 8811 	msr	BASEPRI, r3
 8008a42:	f3bf 8f6f 	isb	sy
 8008a46:	f3bf 8f4f 	dsb	sy
 8008a4a:	613b      	str	r3, [r7, #16]
}
 8008a4c:	bf00      	nop
 8008a4e:	e7fe      	b.n	8008a4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a52:	685a      	ldr	r2, [r3, #4]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	1ad2      	subs	r2, r2, r3
 8008a58:	69bb      	ldr	r3, [r7, #24]
 8008a5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008a62:	69b8      	ldr	r0, [r7, #24]
 8008a64:	f000 f8f8 	bl	8008c58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008a68:	4b1a      	ldr	r3, [pc, #104]	; (8008ad4 <pvPortMalloc+0x17c>)
 8008a6a:	681a      	ldr	r2, [r3, #0]
 8008a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	1ad3      	subs	r3, r2, r3
 8008a72:	4a18      	ldr	r2, [pc, #96]	; (8008ad4 <pvPortMalloc+0x17c>)
 8008a74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008a76:	4b17      	ldr	r3, [pc, #92]	; (8008ad4 <pvPortMalloc+0x17c>)
 8008a78:	681a      	ldr	r2, [r3, #0]
 8008a7a:	4b18      	ldr	r3, [pc, #96]	; (8008adc <pvPortMalloc+0x184>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	429a      	cmp	r2, r3
 8008a80:	d203      	bcs.n	8008a8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008a82:	4b14      	ldr	r3, [pc, #80]	; (8008ad4 <pvPortMalloc+0x17c>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4a15      	ldr	r2, [pc, #84]	; (8008adc <pvPortMalloc+0x184>)
 8008a88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a8c:	685a      	ldr	r2, [r3, #4]
 8008a8e:	4b10      	ldr	r3, [pc, #64]	; (8008ad0 <pvPortMalloc+0x178>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	431a      	orrs	r2, r3
 8008a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008a9e:	f7fe fc65 	bl	800736c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008aa2:	69fb      	ldr	r3, [r7, #28]
 8008aa4:	f003 0307 	and.w	r3, r3, #7
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d00a      	beq.n	8008ac2 <pvPortMalloc+0x16a>
	__asm volatile
 8008aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab0:	f383 8811 	msr	BASEPRI, r3
 8008ab4:	f3bf 8f6f 	isb	sy
 8008ab8:	f3bf 8f4f 	dsb	sy
 8008abc:	60fb      	str	r3, [r7, #12]
}
 8008abe:	bf00      	nop
 8008ac0:	e7fe      	b.n	8008ac0 <pvPortMalloc+0x168>
	return pvReturn;
 8008ac2:	69fb      	ldr	r3, [r7, #28]
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3728      	adds	r7, #40	; 0x28
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}
 8008acc:	20003110 	.word	0x20003110
 8008ad0:	2000311c 	.word	0x2000311c
 8008ad4:	20003114 	.word	0x20003114
 8008ad8:	20003108 	.word	0x20003108
 8008adc:	20003118 	.word	0x20003118

08008ae0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b086      	sub	sp, #24
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d048      	beq.n	8008b84 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008af2:	2308      	movs	r3, #8
 8008af4:	425b      	negs	r3, r3
 8008af6:	697a      	ldr	r2, [r7, #20]
 8008af8:	4413      	add	r3, r2
 8008afa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	685a      	ldr	r2, [r3, #4]
 8008b04:	4b21      	ldr	r3, [pc, #132]	; (8008b8c <vPortFree+0xac>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4013      	ands	r3, r2
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d10a      	bne.n	8008b24 <vPortFree+0x44>
	__asm volatile
 8008b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b12:	f383 8811 	msr	BASEPRI, r3
 8008b16:	f3bf 8f6f 	isb	sy
 8008b1a:	f3bf 8f4f 	dsb	sy
 8008b1e:	60fb      	str	r3, [r7, #12]
}
 8008b20:	bf00      	nop
 8008b22:	e7fe      	b.n	8008b22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d00a      	beq.n	8008b42 <vPortFree+0x62>
	__asm volatile
 8008b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b30:	f383 8811 	msr	BASEPRI, r3
 8008b34:	f3bf 8f6f 	isb	sy
 8008b38:	f3bf 8f4f 	dsb	sy
 8008b3c:	60bb      	str	r3, [r7, #8]
}
 8008b3e:	bf00      	nop
 8008b40:	e7fe      	b.n	8008b40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	685a      	ldr	r2, [r3, #4]
 8008b46:	4b11      	ldr	r3, [pc, #68]	; (8008b8c <vPortFree+0xac>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4013      	ands	r3, r2
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d019      	beq.n	8008b84 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d115      	bne.n	8008b84 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	685a      	ldr	r2, [r3, #4]
 8008b5c:	4b0b      	ldr	r3, [pc, #44]	; (8008b8c <vPortFree+0xac>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	43db      	mvns	r3, r3
 8008b62:	401a      	ands	r2, r3
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008b68:	f7fe fbf2 	bl	8007350 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	685a      	ldr	r2, [r3, #4]
 8008b70:	4b07      	ldr	r3, [pc, #28]	; (8008b90 <vPortFree+0xb0>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4413      	add	r3, r2
 8008b76:	4a06      	ldr	r2, [pc, #24]	; (8008b90 <vPortFree+0xb0>)
 8008b78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008b7a:	6938      	ldr	r0, [r7, #16]
 8008b7c:	f000 f86c 	bl	8008c58 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008b80:	f7fe fbf4 	bl	800736c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008b84:	bf00      	nop
 8008b86:	3718      	adds	r7, #24
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}
 8008b8c:	2000311c 	.word	0x2000311c
 8008b90:	20003114 	.word	0x20003114

08008b94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008b94:	b480      	push	{r7}
 8008b96:	b085      	sub	sp, #20
 8008b98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008b9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008b9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008ba0:	4b27      	ldr	r3, [pc, #156]	; (8008c40 <prvHeapInit+0xac>)
 8008ba2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	f003 0307 	and.w	r3, r3, #7
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d00c      	beq.n	8008bc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	3307      	adds	r3, #7
 8008bb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f023 0307 	bic.w	r3, r3, #7
 8008bba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008bbc:	68ba      	ldr	r2, [r7, #8]
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	1ad3      	subs	r3, r2, r3
 8008bc2:	4a1f      	ldr	r2, [pc, #124]	; (8008c40 <prvHeapInit+0xac>)
 8008bc4:	4413      	add	r3, r2
 8008bc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008bcc:	4a1d      	ldr	r2, [pc, #116]	; (8008c44 <prvHeapInit+0xb0>)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008bd2:	4b1c      	ldr	r3, [pc, #112]	; (8008c44 <prvHeapInit+0xb0>)
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	68ba      	ldr	r2, [r7, #8]
 8008bdc:	4413      	add	r3, r2
 8008bde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008be0:	2208      	movs	r2, #8
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	1a9b      	subs	r3, r3, r2
 8008be6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f023 0307 	bic.w	r3, r3, #7
 8008bee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	4a15      	ldr	r2, [pc, #84]	; (8008c48 <prvHeapInit+0xb4>)
 8008bf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008bf6:	4b14      	ldr	r3, [pc, #80]	; (8008c48 <prvHeapInit+0xb4>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008bfe:	4b12      	ldr	r3, [pc, #72]	; (8008c48 <prvHeapInit+0xb4>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	2200      	movs	r2, #0
 8008c04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	68fa      	ldr	r2, [r7, #12]
 8008c0e:	1ad2      	subs	r2, r2, r3
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008c14:	4b0c      	ldr	r3, [pc, #48]	; (8008c48 <prvHeapInit+0xb4>)
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	4a0a      	ldr	r2, [pc, #40]	; (8008c4c <prvHeapInit+0xb8>)
 8008c22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	4a09      	ldr	r2, [pc, #36]	; (8008c50 <prvHeapInit+0xbc>)
 8008c2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008c2c:	4b09      	ldr	r3, [pc, #36]	; (8008c54 <prvHeapInit+0xc0>)
 8008c2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008c32:	601a      	str	r2, [r3, #0]
}
 8008c34:	bf00      	nop
 8008c36:	3714      	adds	r7, #20
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr
 8008c40:	20001108 	.word	0x20001108
 8008c44:	20003108 	.word	0x20003108
 8008c48:	20003110 	.word	0x20003110
 8008c4c:	20003118 	.word	0x20003118
 8008c50:	20003114 	.word	0x20003114
 8008c54:	2000311c 	.word	0x2000311c

08008c58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b085      	sub	sp, #20
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008c60:	4b28      	ldr	r3, [pc, #160]	; (8008d04 <prvInsertBlockIntoFreeList+0xac>)
 8008c62:	60fb      	str	r3, [r7, #12]
 8008c64:	e002      	b.n	8008c6c <prvInsertBlockIntoFreeList+0x14>
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	60fb      	str	r3, [r7, #12]
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d8f7      	bhi.n	8008c66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	68ba      	ldr	r2, [r7, #8]
 8008c80:	4413      	add	r3, r2
 8008c82:	687a      	ldr	r2, [r7, #4]
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d108      	bne.n	8008c9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	685a      	ldr	r2, [r3, #4]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	441a      	add	r2, r3
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	68ba      	ldr	r2, [r7, #8]
 8008ca4:	441a      	add	r2, r3
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d118      	bne.n	8008ce0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681a      	ldr	r2, [r3, #0]
 8008cb2:	4b15      	ldr	r3, [pc, #84]	; (8008d08 <prvInsertBlockIntoFreeList+0xb0>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d00d      	beq.n	8008cd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	685a      	ldr	r2, [r3, #4]
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	441a      	add	r2, r3
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	601a      	str	r2, [r3, #0]
 8008cd4:	e008      	b.n	8008ce8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008cd6:	4b0c      	ldr	r3, [pc, #48]	; (8008d08 <prvInsertBlockIntoFreeList+0xb0>)
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	601a      	str	r2, [r3, #0]
 8008cde:	e003      	b.n	8008ce8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681a      	ldr	r2, [r3, #0]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008ce8:	68fa      	ldr	r2, [r7, #12]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d002      	beq.n	8008cf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008cf6:	bf00      	nop
 8008cf8:	3714      	adds	r7, #20
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr
 8008d02:	bf00      	nop
 8008d04:	20003108 	.word	0x20003108
 8008d08:	20003110 	.word	0x20003110

08008d0c <siprintf>:
 8008d0c:	b40e      	push	{r1, r2, r3}
 8008d0e:	b500      	push	{lr}
 8008d10:	b09c      	sub	sp, #112	; 0x70
 8008d12:	ab1d      	add	r3, sp, #116	; 0x74
 8008d14:	9002      	str	r0, [sp, #8]
 8008d16:	9006      	str	r0, [sp, #24]
 8008d18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008d1c:	4809      	ldr	r0, [pc, #36]	; (8008d44 <siprintf+0x38>)
 8008d1e:	9107      	str	r1, [sp, #28]
 8008d20:	9104      	str	r1, [sp, #16]
 8008d22:	4909      	ldr	r1, [pc, #36]	; (8008d48 <siprintf+0x3c>)
 8008d24:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d28:	9105      	str	r1, [sp, #20]
 8008d2a:	6800      	ldr	r0, [r0, #0]
 8008d2c:	9301      	str	r3, [sp, #4]
 8008d2e:	a902      	add	r1, sp, #8
 8008d30:	f000 f9a0 	bl	8009074 <_svfiprintf_r>
 8008d34:	9b02      	ldr	r3, [sp, #8]
 8008d36:	2200      	movs	r2, #0
 8008d38:	701a      	strb	r2, [r3, #0]
 8008d3a:	b01c      	add	sp, #112	; 0x70
 8008d3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d40:	b003      	add	sp, #12
 8008d42:	4770      	bx	lr
 8008d44:	2000005c 	.word	0x2000005c
 8008d48:	ffff0208 	.word	0xffff0208

08008d4c <memset>:
 8008d4c:	4402      	add	r2, r0
 8008d4e:	4603      	mov	r3, r0
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d100      	bne.n	8008d56 <memset+0xa>
 8008d54:	4770      	bx	lr
 8008d56:	f803 1b01 	strb.w	r1, [r3], #1
 8008d5a:	e7f9      	b.n	8008d50 <memset+0x4>

08008d5c <__errno>:
 8008d5c:	4b01      	ldr	r3, [pc, #4]	; (8008d64 <__errno+0x8>)
 8008d5e:	6818      	ldr	r0, [r3, #0]
 8008d60:	4770      	bx	lr
 8008d62:	bf00      	nop
 8008d64:	2000005c 	.word	0x2000005c

08008d68 <__libc_init_array>:
 8008d68:	b570      	push	{r4, r5, r6, lr}
 8008d6a:	4d0d      	ldr	r5, [pc, #52]	; (8008da0 <__libc_init_array+0x38>)
 8008d6c:	4c0d      	ldr	r4, [pc, #52]	; (8008da4 <__libc_init_array+0x3c>)
 8008d6e:	1b64      	subs	r4, r4, r5
 8008d70:	10a4      	asrs	r4, r4, #2
 8008d72:	2600      	movs	r6, #0
 8008d74:	42a6      	cmp	r6, r4
 8008d76:	d109      	bne.n	8008d8c <__libc_init_array+0x24>
 8008d78:	4d0b      	ldr	r5, [pc, #44]	; (8008da8 <__libc_init_array+0x40>)
 8008d7a:	4c0c      	ldr	r4, [pc, #48]	; (8008dac <__libc_init_array+0x44>)
 8008d7c:	f000 fc6a 	bl	8009654 <_init>
 8008d80:	1b64      	subs	r4, r4, r5
 8008d82:	10a4      	asrs	r4, r4, #2
 8008d84:	2600      	movs	r6, #0
 8008d86:	42a6      	cmp	r6, r4
 8008d88:	d105      	bne.n	8008d96 <__libc_init_array+0x2e>
 8008d8a:	bd70      	pop	{r4, r5, r6, pc}
 8008d8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d90:	4798      	blx	r3
 8008d92:	3601      	adds	r6, #1
 8008d94:	e7ee      	b.n	8008d74 <__libc_init_array+0xc>
 8008d96:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d9a:	4798      	blx	r3
 8008d9c:	3601      	adds	r6, #1
 8008d9e:	e7f2      	b.n	8008d86 <__libc_init_array+0x1e>
 8008da0:	08009a18 	.word	0x08009a18
 8008da4:	08009a18 	.word	0x08009a18
 8008da8:	08009a18 	.word	0x08009a18
 8008dac:	08009a1c 	.word	0x08009a1c

08008db0 <__retarget_lock_acquire_recursive>:
 8008db0:	4770      	bx	lr

08008db2 <__retarget_lock_release_recursive>:
 8008db2:	4770      	bx	lr

08008db4 <memcpy>:
 8008db4:	440a      	add	r2, r1
 8008db6:	4291      	cmp	r1, r2
 8008db8:	f100 33ff 	add.w	r3, r0, #4294967295
 8008dbc:	d100      	bne.n	8008dc0 <memcpy+0xc>
 8008dbe:	4770      	bx	lr
 8008dc0:	b510      	push	{r4, lr}
 8008dc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008dc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008dca:	4291      	cmp	r1, r2
 8008dcc:	d1f9      	bne.n	8008dc2 <memcpy+0xe>
 8008dce:	bd10      	pop	{r4, pc}

08008dd0 <_free_r>:
 8008dd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008dd2:	2900      	cmp	r1, #0
 8008dd4:	d044      	beq.n	8008e60 <_free_r+0x90>
 8008dd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dda:	9001      	str	r0, [sp, #4]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	f1a1 0404 	sub.w	r4, r1, #4
 8008de2:	bfb8      	it	lt
 8008de4:	18e4      	addlt	r4, r4, r3
 8008de6:	f000 f8df 	bl	8008fa8 <__malloc_lock>
 8008dea:	4a1e      	ldr	r2, [pc, #120]	; (8008e64 <_free_r+0x94>)
 8008dec:	9801      	ldr	r0, [sp, #4]
 8008dee:	6813      	ldr	r3, [r2, #0]
 8008df0:	b933      	cbnz	r3, 8008e00 <_free_r+0x30>
 8008df2:	6063      	str	r3, [r4, #4]
 8008df4:	6014      	str	r4, [r2, #0]
 8008df6:	b003      	add	sp, #12
 8008df8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008dfc:	f000 b8da 	b.w	8008fb4 <__malloc_unlock>
 8008e00:	42a3      	cmp	r3, r4
 8008e02:	d908      	bls.n	8008e16 <_free_r+0x46>
 8008e04:	6825      	ldr	r5, [r4, #0]
 8008e06:	1961      	adds	r1, r4, r5
 8008e08:	428b      	cmp	r3, r1
 8008e0a:	bf01      	itttt	eq
 8008e0c:	6819      	ldreq	r1, [r3, #0]
 8008e0e:	685b      	ldreq	r3, [r3, #4]
 8008e10:	1949      	addeq	r1, r1, r5
 8008e12:	6021      	streq	r1, [r4, #0]
 8008e14:	e7ed      	b.n	8008df2 <_free_r+0x22>
 8008e16:	461a      	mov	r2, r3
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	b10b      	cbz	r3, 8008e20 <_free_r+0x50>
 8008e1c:	42a3      	cmp	r3, r4
 8008e1e:	d9fa      	bls.n	8008e16 <_free_r+0x46>
 8008e20:	6811      	ldr	r1, [r2, #0]
 8008e22:	1855      	adds	r5, r2, r1
 8008e24:	42a5      	cmp	r5, r4
 8008e26:	d10b      	bne.n	8008e40 <_free_r+0x70>
 8008e28:	6824      	ldr	r4, [r4, #0]
 8008e2a:	4421      	add	r1, r4
 8008e2c:	1854      	adds	r4, r2, r1
 8008e2e:	42a3      	cmp	r3, r4
 8008e30:	6011      	str	r1, [r2, #0]
 8008e32:	d1e0      	bne.n	8008df6 <_free_r+0x26>
 8008e34:	681c      	ldr	r4, [r3, #0]
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	6053      	str	r3, [r2, #4]
 8008e3a:	440c      	add	r4, r1
 8008e3c:	6014      	str	r4, [r2, #0]
 8008e3e:	e7da      	b.n	8008df6 <_free_r+0x26>
 8008e40:	d902      	bls.n	8008e48 <_free_r+0x78>
 8008e42:	230c      	movs	r3, #12
 8008e44:	6003      	str	r3, [r0, #0]
 8008e46:	e7d6      	b.n	8008df6 <_free_r+0x26>
 8008e48:	6825      	ldr	r5, [r4, #0]
 8008e4a:	1961      	adds	r1, r4, r5
 8008e4c:	428b      	cmp	r3, r1
 8008e4e:	bf04      	itt	eq
 8008e50:	6819      	ldreq	r1, [r3, #0]
 8008e52:	685b      	ldreq	r3, [r3, #4]
 8008e54:	6063      	str	r3, [r4, #4]
 8008e56:	bf04      	itt	eq
 8008e58:	1949      	addeq	r1, r1, r5
 8008e5a:	6021      	streq	r1, [r4, #0]
 8008e5c:	6054      	str	r4, [r2, #4]
 8008e5e:	e7ca      	b.n	8008df6 <_free_r+0x26>
 8008e60:	b003      	add	sp, #12
 8008e62:	bd30      	pop	{r4, r5, pc}
 8008e64:	20003260 	.word	0x20003260

08008e68 <sbrk_aligned>:
 8008e68:	b570      	push	{r4, r5, r6, lr}
 8008e6a:	4e0e      	ldr	r6, [pc, #56]	; (8008ea4 <sbrk_aligned+0x3c>)
 8008e6c:	460c      	mov	r4, r1
 8008e6e:	6831      	ldr	r1, [r6, #0]
 8008e70:	4605      	mov	r5, r0
 8008e72:	b911      	cbnz	r1, 8008e7a <sbrk_aligned+0x12>
 8008e74:	f000 fba6 	bl	80095c4 <_sbrk_r>
 8008e78:	6030      	str	r0, [r6, #0]
 8008e7a:	4621      	mov	r1, r4
 8008e7c:	4628      	mov	r0, r5
 8008e7e:	f000 fba1 	bl	80095c4 <_sbrk_r>
 8008e82:	1c43      	adds	r3, r0, #1
 8008e84:	d00a      	beq.n	8008e9c <sbrk_aligned+0x34>
 8008e86:	1cc4      	adds	r4, r0, #3
 8008e88:	f024 0403 	bic.w	r4, r4, #3
 8008e8c:	42a0      	cmp	r0, r4
 8008e8e:	d007      	beq.n	8008ea0 <sbrk_aligned+0x38>
 8008e90:	1a21      	subs	r1, r4, r0
 8008e92:	4628      	mov	r0, r5
 8008e94:	f000 fb96 	bl	80095c4 <_sbrk_r>
 8008e98:	3001      	adds	r0, #1
 8008e9a:	d101      	bne.n	8008ea0 <sbrk_aligned+0x38>
 8008e9c:	f04f 34ff 	mov.w	r4, #4294967295
 8008ea0:	4620      	mov	r0, r4
 8008ea2:	bd70      	pop	{r4, r5, r6, pc}
 8008ea4:	20003264 	.word	0x20003264

08008ea8 <_malloc_r>:
 8008ea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008eac:	1ccd      	adds	r5, r1, #3
 8008eae:	f025 0503 	bic.w	r5, r5, #3
 8008eb2:	3508      	adds	r5, #8
 8008eb4:	2d0c      	cmp	r5, #12
 8008eb6:	bf38      	it	cc
 8008eb8:	250c      	movcc	r5, #12
 8008eba:	2d00      	cmp	r5, #0
 8008ebc:	4607      	mov	r7, r0
 8008ebe:	db01      	blt.n	8008ec4 <_malloc_r+0x1c>
 8008ec0:	42a9      	cmp	r1, r5
 8008ec2:	d905      	bls.n	8008ed0 <_malloc_r+0x28>
 8008ec4:	230c      	movs	r3, #12
 8008ec6:	603b      	str	r3, [r7, #0]
 8008ec8:	2600      	movs	r6, #0
 8008eca:	4630      	mov	r0, r6
 8008ecc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ed0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008fa4 <_malloc_r+0xfc>
 8008ed4:	f000 f868 	bl	8008fa8 <__malloc_lock>
 8008ed8:	f8d8 3000 	ldr.w	r3, [r8]
 8008edc:	461c      	mov	r4, r3
 8008ede:	bb5c      	cbnz	r4, 8008f38 <_malloc_r+0x90>
 8008ee0:	4629      	mov	r1, r5
 8008ee2:	4638      	mov	r0, r7
 8008ee4:	f7ff ffc0 	bl	8008e68 <sbrk_aligned>
 8008ee8:	1c43      	adds	r3, r0, #1
 8008eea:	4604      	mov	r4, r0
 8008eec:	d155      	bne.n	8008f9a <_malloc_r+0xf2>
 8008eee:	f8d8 4000 	ldr.w	r4, [r8]
 8008ef2:	4626      	mov	r6, r4
 8008ef4:	2e00      	cmp	r6, #0
 8008ef6:	d145      	bne.n	8008f84 <_malloc_r+0xdc>
 8008ef8:	2c00      	cmp	r4, #0
 8008efa:	d048      	beq.n	8008f8e <_malloc_r+0xe6>
 8008efc:	6823      	ldr	r3, [r4, #0]
 8008efe:	4631      	mov	r1, r6
 8008f00:	4638      	mov	r0, r7
 8008f02:	eb04 0903 	add.w	r9, r4, r3
 8008f06:	f000 fb5d 	bl	80095c4 <_sbrk_r>
 8008f0a:	4581      	cmp	r9, r0
 8008f0c:	d13f      	bne.n	8008f8e <_malloc_r+0xe6>
 8008f0e:	6821      	ldr	r1, [r4, #0]
 8008f10:	1a6d      	subs	r5, r5, r1
 8008f12:	4629      	mov	r1, r5
 8008f14:	4638      	mov	r0, r7
 8008f16:	f7ff ffa7 	bl	8008e68 <sbrk_aligned>
 8008f1a:	3001      	adds	r0, #1
 8008f1c:	d037      	beq.n	8008f8e <_malloc_r+0xe6>
 8008f1e:	6823      	ldr	r3, [r4, #0]
 8008f20:	442b      	add	r3, r5
 8008f22:	6023      	str	r3, [r4, #0]
 8008f24:	f8d8 3000 	ldr.w	r3, [r8]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d038      	beq.n	8008f9e <_malloc_r+0xf6>
 8008f2c:	685a      	ldr	r2, [r3, #4]
 8008f2e:	42a2      	cmp	r2, r4
 8008f30:	d12b      	bne.n	8008f8a <_malloc_r+0xe2>
 8008f32:	2200      	movs	r2, #0
 8008f34:	605a      	str	r2, [r3, #4]
 8008f36:	e00f      	b.n	8008f58 <_malloc_r+0xb0>
 8008f38:	6822      	ldr	r2, [r4, #0]
 8008f3a:	1b52      	subs	r2, r2, r5
 8008f3c:	d41f      	bmi.n	8008f7e <_malloc_r+0xd6>
 8008f3e:	2a0b      	cmp	r2, #11
 8008f40:	d917      	bls.n	8008f72 <_malloc_r+0xca>
 8008f42:	1961      	adds	r1, r4, r5
 8008f44:	42a3      	cmp	r3, r4
 8008f46:	6025      	str	r5, [r4, #0]
 8008f48:	bf18      	it	ne
 8008f4a:	6059      	strne	r1, [r3, #4]
 8008f4c:	6863      	ldr	r3, [r4, #4]
 8008f4e:	bf08      	it	eq
 8008f50:	f8c8 1000 	streq.w	r1, [r8]
 8008f54:	5162      	str	r2, [r4, r5]
 8008f56:	604b      	str	r3, [r1, #4]
 8008f58:	4638      	mov	r0, r7
 8008f5a:	f104 060b 	add.w	r6, r4, #11
 8008f5e:	f000 f829 	bl	8008fb4 <__malloc_unlock>
 8008f62:	f026 0607 	bic.w	r6, r6, #7
 8008f66:	1d23      	adds	r3, r4, #4
 8008f68:	1af2      	subs	r2, r6, r3
 8008f6a:	d0ae      	beq.n	8008eca <_malloc_r+0x22>
 8008f6c:	1b9b      	subs	r3, r3, r6
 8008f6e:	50a3      	str	r3, [r4, r2]
 8008f70:	e7ab      	b.n	8008eca <_malloc_r+0x22>
 8008f72:	42a3      	cmp	r3, r4
 8008f74:	6862      	ldr	r2, [r4, #4]
 8008f76:	d1dd      	bne.n	8008f34 <_malloc_r+0x8c>
 8008f78:	f8c8 2000 	str.w	r2, [r8]
 8008f7c:	e7ec      	b.n	8008f58 <_malloc_r+0xb0>
 8008f7e:	4623      	mov	r3, r4
 8008f80:	6864      	ldr	r4, [r4, #4]
 8008f82:	e7ac      	b.n	8008ede <_malloc_r+0x36>
 8008f84:	4634      	mov	r4, r6
 8008f86:	6876      	ldr	r6, [r6, #4]
 8008f88:	e7b4      	b.n	8008ef4 <_malloc_r+0x4c>
 8008f8a:	4613      	mov	r3, r2
 8008f8c:	e7cc      	b.n	8008f28 <_malloc_r+0x80>
 8008f8e:	230c      	movs	r3, #12
 8008f90:	603b      	str	r3, [r7, #0]
 8008f92:	4638      	mov	r0, r7
 8008f94:	f000 f80e 	bl	8008fb4 <__malloc_unlock>
 8008f98:	e797      	b.n	8008eca <_malloc_r+0x22>
 8008f9a:	6025      	str	r5, [r4, #0]
 8008f9c:	e7dc      	b.n	8008f58 <_malloc_r+0xb0>
 8008f9e:	605b      	str	r3, [r3, #4]
 8008fa0:	deff      	udf	#255	; 0xff
 8008fa2:	bf00      	nop
 8008fa4:	20003260 	.word	0x20003260

08008fa8 <__malloc_lock>:
 8008fa8:	4801      	ldr	r0, [pc, #4]	; (8008fb0 <__malloc_lock+0x8>)
 8008faa:	f7ff bf01 	b.w	8008db0 <__retarget_lock_acquire_recursive>
 8008fae:	bf00      	nop
 8008fb0:	2000325c 	.word	0x2000325c

08008fb4 <__malloc_unlock>:
 8008fb4:	4801      	ldr	r0, [pc, #4]	; (8008fbc <__malloc_unlock+0x8>)
 8008fb6:	f7ff befc 	b.w	8008db2 <__retarget_lock_release_recursive>
 8008fba:	bf00      	nop
 8008fbc:	2000325c 	.word	0x2000325c

08008fc0 <__ssputs_r>:
 8008fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fc4:	688e      	ldr	r6, [r1, #8]
 8008fc6:	461f      	mov	r7, r3
 8008fc8:	42be      	cmp	r6, r7
 8008fca:	680b      	ldr	r3, [r1, #0]
 8008fcc:	4682      	mov	sl, r0
 8008fce:	460c      	mov	r4, r1
 8008fd0:	4690      	mov	r8, r2
 8008fd2:	d82c      	bhi.n	800902e <__ssputs_r+0x6e>
 8008fd4:	898a      	ldrh	r2, [r1, #12]
 8008fd6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008fda:	d026      	beq.n	800902a <__ssputs_r+0x6a>
 8008fdc:	6965      	ldr	r5, [r4, #20]
 8008fde:	6909      	ldr	r1, [r1, #16]
 8008fe0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008fe4:	eba3 0901 	sub.w	r9, r3, r1
 8008fe8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008fec:	1c7b      	adds	r3, r7, #1
 8008fee:	444b      	add	r3, r9
 8008ff0:	106d      	asrs	r5, r5, #1
 8008ff2:	429d      	cmp	r5, r3
 8008ff4:	bf38      	it	cc
 8008ff6:	461d      	movcc	r5, r3
 8008ff8:	0553      	lsls	r3, r2, #21
 8008ffa:	d527      	bpl.n	800904c <__ssputs_r+0x8c>
 8008ffc:	4629      	mov	r1, r5
 8008ffe:	f7ff ff53 	bl	8008ea8 <_malloc_r>
 8009002:	4606      	mov	r6, r0
 8009004:	b360      	cbz	r0, 8009060 <__ssputs_r+0xa0>
 8009006:	6921      	ldr	r1, [r4, #16]
 8009008:	464a      	mov	r2, r9
 800900a:	f7ff fed3 	bl	8008db4 <memcpy>
 800900e:	89a3      	ldrh	r3, [r4, #12]
 8009010:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009018:	81a3      	strh	r3, [r4, #12]
 800901a:	6126      	str	r6, [r4, #16]
 800901c:	6165      	str	r5, [r4, #20]
 800901e:	444e      	add	r6, r9
 8009020:	eba5 0509 	sub.w	r5, r5, r9
 8009024:	6026      	str	r6, [r4, #0]
 8009026:	60a5      	str	r5, [r4, #8]
 8009028:	463e      	mov	r6, r7
 800902a:	42be      	cmp	r6, r7
 800902c:	d900      	bls.n	8009030 <__ssputs_r+0x70>
 800902e:	463e      	mov	r6, r7
 8009030:	6820      	ldr	r0, [r4, #0]
 8009032:	4632      	mov	r2, r6
 8009034:	4641      	mov	r1, r8
 8009036:	f000 faab 	bl	8009590 <memmove>
 800903a:	68a3      	ldr	r3, [r4, #8]
 800903c:	1b9b      	subs	r3, r3, r6
 800903e:	60a3      	str	r3, [r4, #8]
 8009040:	6823      	ldr	r3, [r4, #0]
 8009042:	4433      	add	r3, r6
 8009044:	6023      	str	r3, [r4, #0]
 8009046:	2000      	movs	r0, #0
 8009048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800904c:	462a      	mov	r2, r5
 800904e:	f000 fac9 	bl	80095e4 <_realloc_r>
 8009052:	4606      	mov	r6, r0
 8009054:	2800      	cmp	r0, #0
 8009056:	d1e0      	bne.n	800901a <__ssputs_r+0x5a>
 8009058:	6921      	ldr	r1, [r4, #16]
 800905a:	4650      	mov	r0, sl
 800905c:	f7ff feb8 	bl	8008dd0 <_free_r>
 8009060:	230c      	movs	r3, #12
 8009062:	f8ca 3000 	str.w	r3, [sl]
 8009066:	89a3      	ldrh	r3, [r4, #12]
 8009068:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800906c:	81a3      	strh	r3, [r4, #12]
 800906e:	f04f 30ff 	mov.w	r0, #4294967295
 8009072:	e7e9      	b.n	8009048 <__ssputs_r+0x88>

08009074 <_svfiprintf_r>:
 8009074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009078:	4698      	mov	r8, r3
 800907a:	898b      	ldrh	r3, [r1, #12]
 800907c:	061b      	lsls	r3, r3, #24
 800907e:	b09d      	sub	sp, #116	; 0x74
 8009080:	4607      	mov	r7, r0
 8009082:	460d      	mov	r5, r1
 8009084:	4614      	mov	r4, r2
 8009086:	d50e      	bpl.n	80090a6 <_svfiprintf_r+0x32>
 8009088:	690b      	ldr	r3, [r1, #16]
 800908a:	b963      	cbnz	r3, 80090a6 <_svfiprintf_r+0x32>
 800908c:	2140      	movs	r1, #64	; 0x40
 800908e:	f7ff ff0b 	bl	8008ea8 <_malloc_r>
 8009092:	6028      	str	r0, [r5, #0]
 8009094:	6128      	str	r0, [r5, #16]
 8009096:	b920      	cbnz	r0, 80090a2 <_svfiprintf_r+0x2e>
 8009098:	230c      	movs	r3, #12
 800909a:	603b      	str	r3, [r7, #0]
 800909c:	f04f 30ff 	mov.w	r0, #4294967295
 80090a0:	e0d0      	b.n	8009244 <_svfiprintf_r+0x1d0>
 80090a2:	2340      	movs	r3, #64	; 0x40
 80090a4:	616b      	str	r3, [r5, #20]
 80090a6:	2300      	movs	r3, #0
 80090a8:	9309      	str	r3, [sp, #36]	; 0x24
 80090aa:	2320      	movs	r3, #32
 80090ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80090b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80090b4:	2330      	movs	r3, #48	; 0x30
 80090b6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800925c <_svfiprintf_r+0x1e8>
 80090ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80090be:	f04f 0901 	mov.w	r9, #1
 80090c2:	4623      	mov	r3, r4
 80090c4:	469a      	mov	sl, r3
 80090c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090ca:	b10a      	cbz	r2, 80090d0 <_svfiprintf_r+0x5c>
 80090cc:	2a25      	cmp	r2, #37	; 0x25
 80090ce:	d1f9      	bne.n	80090c4 <_svfiprintf_r+0x50>
 80090d0:	ebba 0b04 	subs.w	fp, sl, r4
 80090d4:	d00b      	beq.n	80090ee <_svfiprintf_r+0x7a>
 80090d6:	465b      	mov	r3, fp
 80090d8:	4622      	mov	r2, r4
 80090da:	4629      	mov	r1, r5
 80090dc:	4638      	mov	r0, r7
 80090de:	f7ff ff6f 	bl	8008fc0 <__ssputs_r>
 80090e2:	3001      	adds	r0, #1
 80090e4:	f000 80a9 	beq.w	800923a <_svfiprintf_r+0x1c6>
 80090e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090ea:	445a      	add	r2, fp
 80090ec:	9209      	str	r2, [sp, #36]	; 0x24
 80090ee:	f89a 3000 	ldrb.w	r3, [sl]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	f000 80a1 	beq.w	800923a <_svfiprintf_r+0x1c6>
 80090f8:	2300      	movs	r3, #0
 80090fa:	f04f 32ff 	mov.w	r2, #4294967295
 80090fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009102:	f10a 0a01 	add.w	sl, sl, #1
 8009106:	9304      	str	r3, [sp, #16]
 8009108:	9307      	str	r3, [sp, #28]
 800910a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800910e:	931a      	str	r3, [sp, #104]	; 0x68
 8009110:	4654      	mov	r4, sl
 8009112:	2205      	movs	r2, #5
 8009114:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009118:	4850      	ldr	r0, [pc, #320]	; (800925c <_svfiprintf_r+0x1e8>)
 800911a:	f7f7 f871 	bl	8000200 <memchr>
 800911e:	9a04      	ldr	r2, [sp, #16]
 8009120:	b9d8      	cbnz	r0, 800915a <_svfiprintf_r+0xe6>
 8009122:	06d0      	lsls	r0, r2, #27
 8009124:	bf44      	itt	mi
 8009126:	2320      	movmi	r3, #32
 8009128:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800912c:	0711      	lsls	r1, r2, #28
 800912e:	bf44      	itt	mi
 8009130:	232b      	movmi	r3, #43	; 0x2b
 8009132:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009136:	f89a 3000 	ldrb.w	r3, [sl]
 800913a:	2b2a      	cmp	r3, #42	; 0x2a
 800913c:	d015      	beq.n	800916a <_svfiprintf_r+0xf6>
 800913e:	9a07      	ldr	r2, [sp, #28]
 8009140:	4654      	mov	r4, sl
 8009142:	2000      	movs	r0, #0
 8009144:	f04f 0c0a 	mov.w	ip, #10
 8009148:	4621      	mov	r1, r4
 800914a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800914e:	3b30      	subs	r3, #48	; 0x30
 8009150:	2b09      	cmp	r3, #9
 8009152:	d94d      	bls.n	80091f0 <_svfiprintf_r+0x17c>
 8009154:	b1b0      	cbz	r0, 8009184 <_svfiprintf_r+0x110>
 8009156:	9207      	str	r2, [sp, #28]
 8009158:	e014      	b.n	8009184 <_svfiprintf_r+0x110>
 800915a:	eba0 0308 	sub.w	r3, r0, r8
 800915e:	fa09 f303 	lsl.w	r3, r9, r3
 8009162:	4313      	orrs	r3, r2
 8009164:	9304      	str	r3, [sp, #16]
 8009166:	46a2      	mov	sl, r4
 8009168:	e7d2      	b.n	8009110 <_svfiprintf_r+0x9c>
 800916a:	9b03      	ldr	r3, [sp, #12]
 800916c:	1d19      	adds	r1, r3, #4
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	9103      	str	r1, [sp, #12]
 8009172:	2b00      	cmp	r3, #0
 8009174:	bfbb      	ittet	lt
 8009176:	425b      	neglt	r3, r3
 8009178:	f042 0202 	orrlt.w	r2, r2, #2
 800917c:	9307      	strge	r3, [sp, #28]
 800917e:	9307      	strlt	r3, [sp, #28]
 8009180:	bfb8      	it	lt
 8009182:	9204      	strlt	r2, [sp, #16]
 8009184:	7823      	ldrb	r3, [r4, #0]
 8009186:	2b2e      	cmp	r3, #46	; 0x2e
 8009188:	d10c      	bne.n	80091a4 <_svfiprintf_r+0x130>
 800918a:	7863      	ldrb	r3, [r4, #1]
 800918c:	2b2a      	cmp	r3, #42	; 0x2a
 800918e:	d134      	bne.n	80091fa <_svfiprintf_r+0x186>
 8009190:	9b03      	ldr	r3, [sp, #12]
 8009192:	1d1a      	adds	r2, r3, #4
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	9203      	str	r2, [sp, #12]
 8009198:	2b00      	cmp	r3, #0
 800919a:	bfb8      	it	lt
 800919c:	f04f 33ff 	movlt.w	r3, #4294967295
 80091a0:	3402      	adds	r4, #2
 80091a2:	9305      	str	r3, [sp, #20]
 80091a4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800926c <_svfiprintf_r+0x1f8>
 80091a8:	7821      	ldrb	r1, [r4, #0]
 80091aa:	2203      	movs	r2, #3
 80091ac:	4650      	mov	r0, sl
 80091ae:	f7f7 f827 	bl	8000200 <memchr>
 80091b2:	b138      	cbz	r0, 80091c4 <_svfiprintf_r+0x150>
 80091b4:	9b04      	ldr	r3, [sp, #16]
 80091b6:	eba0 000a 	sub.w	r0, r0, sl
 80091ba:	2240      	movs	r2, #64	; 0x40
 80091bc:	4082      	lsls	r2, r0
 80091be:	4313      	orrs	r3, r2
 80091c0:	3401      	adds	r4, #1
 80091c2:	9304      	str	r3, [sp, #16]
 80091c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091c8:	4825      	ldr	r0, [pc, #148]	; (8009260 <_svfiprintf_r+0x1ec>)
 80091ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80091ce:	2206      	movs	r2, #6
 80091d0:	f7f7 f816 	bl	8000200 <memchr>
 80091d4:	2800      	cmp	r0, #0
 80091d6:	d038      	beq.n	800924a <_svfiprintf_r+0x1d6>
 80091d8:	4b22      	ldr	r3, [pc, #136]	; (8009264 <_svfiprintf_r+0x1f0>)
 80091da:	bb1b      	cbnz	r3, 8009224 <_svfiprintf_r+0x1b0>
 80091dc:	9b03      	ldr	r3, [sp, #12]
 80091de:	3307      	adds	r3, #7
 80091e0:	f023 0307 	bic.w	r3, r3, #7
 80091e4:	3308      	adds	r3, #8
 80091e6:	9303      	str	r3, [sp, #12]
 80091e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091ea:	4433      	add	r3, r6
 80091ec:	9309      	str	r3, [sp, #36]	; 0x24
 80091ee:	e768      	b.n	80090c2 <_svfiprintf_r+0x4e>
 80091f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80091f4:	460c      	mov	r4, r1
 80091f6:	2001      	movs	r0, #1
 80091f8:	e7a6      	b.n	8009148 <_svfiprintf_r+0xd4>
 80091fa:	2300      	movs	r3, #0
 80091fc:	3401      	adds	r4, #1
 80091fe:	9305      	str	r3, [sp, #20]
 8009200:	4619      	mov	r1, r3
 8009202:	f04f 0c0a 	mov.w	ip, #10
 8009206:	4620      	mov	r0, r4
 8009208:	f810 2b01 	ldrb.w	r2, [r0], #1
 800920c:	3a30      	subs	r2, #48	; 0x30
 800920e:	2a09      	cmp	r2, #9
 8009210:	d903      	bls.n	800921a <_svfiprintf_r+0x1a6>
 8009212:	2b00      	cmp	r3, #0
 8009214:	d0c6      	beq.n	80091a4 <_svfiprintf_r+0x130>
 8009216:	9105      	str	r1, [sp, #20]
 8009218:	e7c4      	b.n	80091a4 <_svfiprintf_r+0x130>
 800921a:	fb0c 2101 	mla	r1, ip, r1, r2
 800921e:	4604      	mov	r4, r0
 8009220:	2301      	movs	r3, #1
 8009222:	e7f0      	b.n	8009206 <_svfiprintf_r+0x192>
 8009224:	ab03      	add	r3, sp, #12
 8009226:	9300      	str	r3, [sp, #0]
 8009228:	462a      	mov	r2, r5
 800922a:	4b0f      	ldr	r3, [pc, #60]	; (8009268 <_svfiprintf_r+0x1f4>)
 800922c:	a904      	add	r1, sp, #16
 800922e:	4638      	mov	r0, r7
 8009230:	f3af 8000 	nop.w
 8009234:	1c42      	adds	r2, r0, #1
 8009236:	4606      	mov	r6, r0
 8009238:	d1d6      	bne.n	80091e8 <_svfiprintf_r+0x174>
 800923a:	89ab      	ldrh	r3, [r5, #12]
 800923c:	065b      	lsls	r3, r3, #25
 800923e:	f53f af2d 	bmi.w	800909c <_svfiprintf_r+0x28>
 8009242:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009244:	b01d      	add	sp, #116	; 0x74
 8009246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800924a:	ab03      	add	r3, sp, #12
 800924c:	9300      	str	r3, [sp, #0]
 800924e:	462a      	mov	r2, r5
 8009250:	4b05      	ldr	r3, [pc, #20]	; (8009268 <_svfiprintf_r+0x1f4>)
 8009252:	a904      	add	r1, sp, #16
 8009254:	4638      	mov	r0, r7
 8009256:	f000 f879 	bl	800934c <_printf_i>
 800925a:	e7eb      	b.n	8009234 <_svfiprintf_r+0x1c0>
 800925c:	080099e4 	.word	0x080099e4
 8009260:	080099ee 	.word	0x080099ee
 8009264:	00000000 	.word	0x00000000
 8009268:	08008fc1 	.word	0x08008fc1
 800926c:	080099ea 	.word	0x080099ea

08009270 <_printf_common>:
 8009270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009274:	4616      	mov	r6, r2
 8009276:	4699      	mov	r9, r3
 8009278:	688a      	ldr	r2, [r1, #8]
 800927a:	690b      	ldr	r3, [r1, #16]
 800927c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009280:	4293      	cmp	r3, r2
 8009282:	bfb8      	it	lt
 8009284:	4613      	movlt	r3, r2
 8009286:	6033      	str	r3, [r6, #0]
 8009288:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800928c:	4607      	mov	r7, r0
 800928e:	460c      	mov	r4, r1
 8009290:	b10a      	cbz	r2, 8009296 <_printf_common+0x26>
 8009292:	3301      	adds	r3, #1
 8009294:	6033      	str	r3, [r6, #0]
 8009296:	6823      	ldr	r3, [r4, #0]
 8009298:	0699      	lsls	r1, r3, #26
 800929a:	bf42      	ittt	mi
 800929c:	6833      	ldrmi	r3, [r6, #0]
 800929e:	3302      	addmi	r3, #2
 80092a0:	6033      	strmi	r3, [r6, #0]
 80092a2:	6825      	ldr	r5, [r4, #0]
 80092a4:	f015 0506 	ands.w	r5, r5, #6
 80092a8:	d106      	bne.n	80092b8 <_printf_common+0x48>
 80092aa:	f104 0a19 	add.w	sl, r4, #25
 80092ae:	68e3      	ldr	r3, [r4, #12]
 80092b0:	6832      	ldr	r2, [r6, #0]
 80092b2:	1a9b      	subs	r3, r3, r2
 80092b4:	42ab      	cmp	r3, r5
 80092b6:	dc26      	bgt.n	8009306 <_printf_common+0x96>
 80092b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80092bc:	1e13      	subs	r3, r2, #0
 80092be:	6822      	ldr	r2, [r4, #0]
 80092c0:	bf18      	it	ne
 80092c2:	2301      	movne	r3, #1
 80092c4:	0692      	lsls	r2, r2, #26
 80092c6:	d42b      	bmi.n	8009320 <_printf_common+0xb0>
 80092c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80092cc:	4649      	mov	r1, r9
 80092ce:	4638      	mov	r0, r7
 80092d0:	47c0      	blx	r8
 80092d2:	3001      	adds	r0, #1
 80092d4:	d01e      	beq.n	8009314 <_printf_common+0xa4>
 80092d6:	6823      	ldr	r3, [r4, #0]
 80092d8:	6922      	ldr	r2, [r4, #16]
 80092da:	f003 0306 	and.w	r3, r3, #6
 80092de:	2b04      	cmp	r3, #4
 80092e0:	bf02      	ittt	eq
 80092e2:	68e5      	ldreq	r5, [r4, #12]
 80092e4:	6833      	ldreq	r3, [r6, #0]
 80092e6:	1aed      	subeq	r5, r5, r3
 80092e8:	68a3      	ldr	r3, [r4, #8]
 80092ea:	bf0c      	ite	eq
 80092ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80092f0:	2500      	movne	r5, #0
 80092f2:	4293      	cmp	r3, r2
 80092f4:	bfc4      	itt	gt
 80092f6:	1a9b      	subgt	r3, r3, r2
 80092f8:	18ed      	addgt	r5, r5, r3
 80092fa:	2600      	movs	r6, #0
 80092fc:	341a      	adds	r4, #26
 80092fe:	42b5      	cmp	r5, r6
 8009300:	d11a      	bne.n	8009338 <_printf_common+0xc8>
 8009302:	2000      	movs	r0, #0
 8009304:	e008      	b.n	8009318 <_printf_common+0xa8>
 8009306:	2301      	movs	r3, #1
 8009308:	4652      	mov	r2, sl
 800930a:	4649      	mov	r1, r9
 800930c:	4638      	mov	r0, r7
 800930e:	47c0      	blx	r8
 8009310:	3001      	adds	r0, #1
 8009312:	d103      	bne.n	800931c <_printf_common+0xac>
 8009314:	f04f 30ff 	mov.w	r0, #4294967295
 8009318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800931c:	3501      	adds	r5, #1
 800931e:	e7c6      	b.n	80092ae <_printf_common+0x3e>
 8009320:	18e1      	adds	r1, r4, r3
 8009322:	1c5a      	adds	r2, r3, #1
 8009324:	2030      	movs	r0, #48	; 0x30
 8009326:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800932a:	4422      	add	r2, r4
 800932c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009330:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009334:	3302      	adds	r3, #2
 8009336:	e7c7      	b.n	80092c8 <_printf_common+0x58>
 8009338:	2301      	movs	r3, #1
 800933a:	4622      	mov	r2, r4
 800933c:	4649      	mov	r1, r9
 800933e:	4638      	mov	r0, r7
 8009340:	47c0      	blx	r8
 8009342:	3001      	adds	r0, #1
 8009344:	d0e6      	beq.n	8009314 <_printf_common+0xa4>
 8009346:	3601      	adds	r6, #1
 8009348:	e7d9      	b.n	80092fe <_printf_common+0x8e>
	...

0800934c <_printf_i>:
 800934c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009350:	7e0f      	ldrb	r7, [r1, #24]
 8009352:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009354:	2f78      	cmp	r7, #120	; 0x78
 8009356:	4691      	mov	r9, r2
 8009358:	4680      	mov	r8, r0
 800935a:	460c      	mov	r4, r1
 800935c:	469a      	mov	sl, r3
 800935e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009362:	d807      	bhi.n	8009374 <_printf_i+0x28>
 8009364:	2f62      	cmp	r7, #98	; 0x62
 8009366:	d80a      	bhi.n	800937e <_printf_i+0x32>
 8009368:	2f00      	cmp	r7, #0
 800936a:	f000 80d4 	beq.w	8009516 <_printf_i+0x1ca>
 800936e:	2f58      	cmp	r7, #88	; 0x58
 8009370:	f000 80c0 	beq.w	80094f4 <_printf_i+0x1a8>
 8009374:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009378:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800937c:	e03a      	b.n	80093f4 <_printf_i+0xa8>
 800937e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009382:	2b15      	cmp	r3, #21
 8009384:	d8f6      	bhi.n	8009374 <_printf_i+0x28>
 8009386:	a101      	add	r1, pc, #4	; (adr r1, 800938c <_printf_i+0x40>)
 8009388:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800938c:	080093e5 	.word	0x080093e5
 8009390:	080093f9 	.word	0x080093f9
 8009394:	08009375 	.word	0x08009375
 8009398:	08009375 	.word	0x08009375
 800939c:	08009375 	.word	0x08009375
 80093a0:	08009375 	.word	0x08009375
 80093a4:	080093f9 	.word	0x080093f9
 80093a8:	08009375 	.word	0x08009375
 80093ac:	08009375 	.word	0x08009375
 80093b0:	08009375 	.word	0x08009375
 80093b4:	08009375 	.word	0x08009375
 80093b8:	080094fd 	.word	0x080094fd
 80093bc:	08009425 	.word	0x08009425
 80093c0:	080094b7 	.word	0x080094b7
 80093c4:	08009375 	.word	0x08009375
 80093c8:	08009375 	.word	0x08009375
 80093cc:	0800951f 	.word	0x0800951f
 80093d0:	08009375 	.word	0x08009375
 80093d4:	08009425 	.word	0x08009425
 80093d8:	08009375 	.word	0x08009375
 80093dc:	08009375 	.word	0x08009375
 80093e0:	080094bf 	.word	0x080094bf
 80093e4:	682b      	ldr	r3, [r5, #0]
 80093e6:	1d1a      	adds	r2, r3, #4
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	602a      	str	r2, [r5, #0]
 80093ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80093f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80093f4:	2301      	movs	r3, #1
 80093f6:	e09f      	b.n	8009538 <_printf_i+0x1ec>
 80093f8:	6820      	ldr	r0, [r4, #0]
 80093fa:	682b      	ldr	r3, [r5, #0]
 80093fc:	0607      	lsls	r7, r0, #24
 80093fe:	f103 0104 	add.w	r1, r3, #4
 8009402:	6029      	str	r1, [r5, #0]
 8009404:	d501      	bpl.n	800940a <_printf_i+0xbe>
 8009406:	681e      	ldr	r6, [r3, #0]
 8009408:	e003      	b.n	8009412 <_printf_i+0xc6>
 800940a:	0646      	lsls	r6, r0, #25
 800940c:	d5fb      	bpl.n	8009406 <_printf_i+0xba>
 800940e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009412:	2e00      	cmp	r6, #0
 8009414:	da03      	bge.n	800941e <_printf_i+0xd2>
 8009416:	232d      	movs	r3, #45	; 0x2d
 8009418:	4276      	negs	r6, r6
 800941a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800941e:	485a      	ldr	r0, [pc, #360]	; (8009588 <_printf_i+0x23c>)
 8009420:	230a      	movs	r3, #10
 8009422:	e012      	b.n	800944a <_printf_i+0xfe>
 8009424:	682b      	ldr	r3, [r5, #0]
 8009426:	6820      	ldr	r0, [r4, #0]
 8009428:	1d19      	adds	r1, r3, #4
 800942a:	6029      	str	r1, [r5, #0]
 800942c:	0605      	lsls	r5, r0, #24
 800942e:	d501      	bpl.n	8009434 <_printf_i+0xe8>
 8009430:	681e      	ldr	r6, [r3, #0]
 8009432:	e002      	b.n	800943a <_printf_i+0xee>
 8009434:	0641      	lsls	r1, r0, #25
 8009436:	d5fb      	bpl.n	8009430 <_printf_i+0xe4>
 8009438:	881e      	ldrh	r6, [r3, #0]
 800943a:	4853      	ldr	r0, [pc, #332]	; (8009588 <_printf_i+0x23c>)
 800943c:	2f6f      	cmp	r7, #111	; 0x6f
 800943e:	bf0c      	ite	eq
 8009440:	2308      	moveq	r3, #8
 8009442:	230a      	movne	r3, #10
 8009444:	2100      	movs	r1, #0
 8009446:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800944a:	6865      	ldr	r5, [r4, #4]
 800944c:	60a5      	str	r5, [r4, #8]
 800944e:	2d00      	cmp	r5, #0
 8009450:	bfa2      	ittt	ge
 8009452:	6821      	ldrge	r1, [r4, #0]
 8009454:	f021 0104 	bicge.w	r1, r1, #4
 8009458:	6021      	strge	r1, [r4, #0]
 800945a:	b90e      	cbnz	r6, 8009460 <_printf_i+0x114>
 800945c:	2d00      	cmp	r5, #0
 800945e:	d04b      	beq.n	80094f8 <_printf_i+0x1ac>
 8009460:	4615      	mov	r5, r2
 8009462:	fbb6 f1f3 	udiv	r1, r6, r3
 8009466:	fb03 6711 	mls	r7, r3, r1, r6
 800946a:	5dc7      	ldrb	r7, [r0, r7]
 800946c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009470:	4637      	mov	r7, r6
 8009472:	42bb      	cmp	r3, r7
 8009474:	460e      	mov	r6, r1
 8009476:	d9f4      	bls.n	8009462 <_printf_i+0x116>
 8009478:	2b08      	cmp	r3, #8
 800947a:	d10b      	bne.n	8009494 <_printf_i+0x148>
 800947c:	6823      	ldr	r3, [r4, #0]
 800947e:	07de      	lsls	r6, r3, #31
 8009480:	d508      	bpl.n	8009494 <_printf_i+0x148>
 8009482:	6923      	ldr	r3, [r4, #16]
 8009484:	6861      	ldr	r1, [r4, #4]
 8009486:	4299      	cmp	r1, r3
 8009488:	bfde      	ittt	le
 800948a:	2330      	movle	r3, #48	; 0x30
 800948c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009490:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009494:	1b52      	subs	r2, r2, r5
 8009496:	6122      	str	r2, [r4, #16]
 8009498:	f8cd a000 	str.w	sl, [sp]
 800949c:	464b      	mov	r3, r9
 800949e:	aa03      	add	r2, sp, #12
 80094a0:	4621      	mov	r1, r4
 80094a2:	4640      	mov	r0, r8
 80094a4:	f7ff fee4 	bl	8009270 <_printf_common>
 80094a8:	3001      	adds	r0, #1
 80094aa:	d14a      	bne.n	8009542 <_printf_i+0x1f6>
 80094ac:	f04f 30ff 	mov.w	r0, #4294967295
 80094b0:	b004      	add	sp, #16
 80094b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094b6:	6823      	ldr	r3, [r4, #0]
 80094b8:	f043 0320 	orr.w	r3, r3, #32
 80094bc:	6023      	str	r3, [r4, #0]
 80094be:	4833      	ldr	r0, [pc, #204]	; (800958c <_printf_i+0x240>)
 80094c0:	2778      	movs	r7, #120	; 0x78
 80094c2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80094c6:	6823      	ldr	r3, [r4, #0]
 80094c8:	6829      	ldr	r1, [r5, #0]
 80094ca:	061f      	lsls	r7, r3, #24
 80094cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80094d0:	d402      	bmi.n	80094d8 <_printf_i+0x18c>
 80094d2:	065f      	lsls	r7, r3, #25
 80094d4:	bf48      	it	mi
 80094d6:	b2b6      	uxthmi	r6, r6
 80094d8:	07df      	lsls	r7, r3, #31
 80094da:	bf48      	it	mi
 80094dc:	f043 0320 	orrmi.w	r3, r3, #32
 80094e0:	6029      	str	r1, [r5, #0]
 80094e2:	bf48      	it	mi
 80094e4:	6023      	strmi	r3, [r4, #0]
 80094e6:	b91e      	cbnz	r6, 80094f0 <_printf_i+0x1a4>
 80094e8:	6823      	ldr	r3, [r4, #0]
 80094ea:	f023 0320 	bic.w	r3, r3, #32
 80094ee:	6023      	str	r3, [r4, #0]
 80094f0:	2310      	movs	r3, #16
 80094f2:	e7a7      	b.n	8009444 <_printf_i+0xf8>
 80094f4:	4824      	ldr	r0, [pc, #144]	; (8009588 <_printf_i+0x23c>)
 80094f6:	e7e4      	b.n	80094c2 <_printf_i+0x176>
 80094f8:	4615      	mov	r5, r2
 80094fa:	e7bd      	b.n	8009478 <_printf_i+0x12c>
 80094fc:	682b      	ldr	r3, [r5, #0]
 80094fe:	6826      	ldr	r6, [r4, #0]
 8009500:	6961      	ldr	r1, [r4, #20]
 8009502:	1d18      	adds	r0, r3, #4
 8009504:	6028      	str	r0, [r5, #0]
 8009506:	0635      	lsls	r5, r6, #24
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	d501      	bpl.n	8009510 <_printf_i+0x1c4>
 800950c:	6019      	str	r1, [r3, #0]
 800950e:	e002      	b.n	8009516 <_printf_i+0x1ca>
 8009510:	0670      	lsls	r0, r6, #25
 8009512:	d5fb      	bpl.n	800950c <_printf_i+0x1c0>
 8009514:	8019      	strh	r1, [r3, #0]
 8009516:	2300      	movs	r3, #0
 8009518:	6123      	str	r3, [r4, #16]
 800951a:	4615      	mov	r5, r2
 800951c:	e7bc      	b.n	8009498 <_printf_i+0x14c>
 800951e:	682b      	ldr	r3, [r5, #0]
 8009520:	1d1a      	adds	r2, r3, #4
 8009522:	602a      	str	r2, [r5, #0]
 8009524:	681d      	ldr	r5, [r3, #0]
 8009526:	6862      	ldr	r2, [r4, #4]
 8009528:	2100      	movs	r1, #0
 800952a:	4628      	mov	r0, r5
 800952c:	f7f6 fe68 	bl	8000200 <memchr>
 8009530:	b108      	cbz	r0, 8009536 <_printf_i+0x1ea>
 8009532:	1b40      	subs	r0, r0, r5
 8009534:	6060      	str	r0, [r4, #4]
 8009536:	6863      	ldr	r3, [r4, #4]
 8009538:	6123      	str	r3, [r4, #16]
 800953a:	2300      	movs	r3, #0
 800953c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009540:	e7aa      	b.n	8009498 <_printf_i+0x14c>
 8009542:	6923      	ldr	r3, [r4, #16]
 8009544:	462a      	mov	r2, r5
 8009546:	4649      	mov	r1, r9
 8009548:	4640      	mov	r0, r8
 800954a:	47d0      	blx	sl
 800954c:	3001      	adds	r0, #1
 800954e:	d0ad      	beq.n	80094ac <_printf_i+0x160>
 8009550:	6823      	ldr	r3, [r4, #0]
 8009552:	079b      	lsls	r3, r3, #30
 8009554:	d413      	bmi.n	800957e <_printf_i+0x232>
 8009556:	68e0      	ldr	r0, [r4, #12]
 8009558:	9b03      	ldr	r3, [sp, #12]
 800955a:	4298      	cmp	r0, r3
 800955c:	bfb8      	it	lt
 800955e:	4618      	movlt	r0, r3
 8009560:	e7a6      	b.n	80094b0 <_printf_i+0x164>
 8009562:	2301      	movs	r3, #1
 8009564:	4632      	mov	r2, r6
 8009566:	4649      	mov	r1, r9
 8009568:	4640      	mov	r0, r8
 800956a:	47d0      	blx	sl
 800956c:	3001      	adds	r0, #1
 800956e:	d09d      	beq.n	80094ac <_printf_i+0x160>
 8009570:	3501      	adds	r5, #1
 8009572:	68e3      	ldr	r3, [r4, #12]
 8009574:	9903      	ldr	r1, [sp, #12]
 8009576:	1a5b      	subs	r3, r3, r1
 8009578:	42ab      	cmp	r3, r5
 800957a:	dcf2      	bgt.n	8009562 <_printf_i+0x216>
 800957c:	e7eb      	b.n	8009556 <_printf_i+0x20a>
 800957e:	2500      	movs	r5, #0
 8009580:	f104 0619 	add.w	r6, r4, #25
 8009584:	e7f5      	b.n	8009572 <_printf_i+0x226>
 8009586:	bf00      	nop
 8009588:	080099f5 	.word	0x080099f5
 800958c:	08009a06 	.word	0x08009a06

08009590 <memmove>:
 8009590:	4288      	cmp	r0, r1
 8009592:	b510      	push	{r4, lr}
 8009594:	eb01 0402 	add.w	r4, r1, r2
 8009598:	d902      	bls.n	80095a0 <memmove+0x10>
 800959a:	4284      	cmp	r4, r0
 800959c:	4623      	mov	r3, r4
 800959e:	d807      	bhi.n	80095b0 <memmove+0x20>
 80095a0:	1e43      	subs	r3, r0, #1
 80095a2:	42a1      	cmp	r1, r4
 80095a4:	d008      	beq.n	80095b8 <memmove+0x28>
 80095a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80095aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80095ae:	e7f8      	b.n	80095a2 <memmove+0x12>
 80095b0:	4402      	add	r2, r0
 80095b2:	4601      	mov	r1, r0
 80095b4:	428a      	cmp	r2, r1
 80095b6:	d100      	bne.n	80095ba <memmove+0x2a>
 80095b8:	bd10      	pop	{r4, pc}
 80095ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80095be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80095c2:	e7f7      	b.n	80095b4 <memmove+0x24>

080095c4 <_sbrk_r>:
 80095c4:	b538      	push	{r3, r4, r5, lr}
 80095c6:	4d06      	ldr	r5, [pc, #24]	; (80095e0 <_sbrk_r+0x1c>)
 80095c8:	2300      	movs	r3, #0
 80095ca:	4604      	mov	r4, r0
 80095cc:	4608      	mov	r0, r1
 80095ce:	602b      	str	r3, [r5, #0]
 80095d0:	f7f9 f83e 	bl	8002650 <_sbrk>
 80095d4:	1c43      	adds	r3, r0, #1
 80095d6:	d102      	bne.n	80095de <_sbrk_r+0x1a>
 80095d8:	682b      	ldr	r3, [r5, #0]
 80095da:	b103      	cbz	r3, 80095de <_sbrk_r+0x1a>
 80095dc:	6023      	str	r3, [r4, #0]
 80095de:	bd38      	pop	{r3, r4, r5, pc}
 80095e0:	20003258 	.word	0x20003258

080095e4 <_realloc_r>:
 80095e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095e8:	4680      	mov	r8, r0
 80095ea:	4614      	mov	r4, r2
 80095ec:	460e      	mov	r6, r1
 80095ee:	b921      	cbnz	r1, 80095fa <_realloc_r+0x16>
 80095f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80095f4:	4611      	mov	r1, r2
 80095f6:	f7ff bc57 	b.w	8008ea8 <_malloc_r>
 80095fa:	b92a      	cbnz	r2, 8009608 <_realloc_r+0x24>
 80095fc:	f7ff fbe8 	bl	8008dd0 <_free_r>
 8009600:	4625      	mov	r5, r4
 8009602:	4628      	mov	r0, r5
 8009604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009608:	f000 f81b 	bl	8009642 <_malloc_usable_size_r>
 800960c:	4284      	cmp	r4, r0
 800960e:	4607      	mov	r7, r0
 8009610:	d802      	bhi.n	8009618 <_realloc_r+0x34>
 8009612:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009616:	d812      	bhi.n	800963e <_realloc_r+0x5a>
 8009618:	4621      	mov	r1, r4
 800961a:	4640      	mov	r0, r8
 800961c:	f7ff fc44 	bl	8008ea8 <_malloc_r>
 8009620:	4605      	mov	r5, r0
 8009622:	2800      	cmp	r0, #0
 8009624:	d0ed      	beq.n	8009602 <_realloc_r+0x1e>
 8009626:	42bc      	cmp	r4, r7
 8009628:	4622      	mov	r2, r4
 800962a:	4631      	mov	r1, r6
 800962c:	bf28      	it	cs
 800962e:	463a      	movcs	r2, r7
 8009630:	f7ff fbc0 	bl	8008db4 <memcpy>
 8009634:	4631      	mov	r1, r6
 8009636:	4640      	mov	r0, r8
 8009638:	f7ff fbca 	bl	8008dd0 <_free_r>
 800963c:	e7e1      	b.n	8009602 <_realloc_r+0x1e>
 800963e:	4635      	mov	r5, r6
 8009640:	e7df      	b.n	8009602 <_realloc_r+0x1e>

08009642 <_malloc_usable_size_r>:
 8009642:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009646:	1f18      	subs	r0, r3, #4
 8009648:	2b00      	cmp	r3, #0
 800964a:	bfbc      	itt	lt
 800964c:	580b      	ldrlt	r3, [r1, r0]
 800964e:	18c0      	addlt	r0, r0, r3
 8009650:	4770      	bx	lr
	...

08009654 <_init>:
 8009654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009656:	bf00      	nop
 8009658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800965a:	bc08      	pop	{r3}
 800965c:	469e      	mov	lr, r3
 800965e:	4770      	bx	lr

08009660 <_fini>:
 8009660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009662:	bf00      	nop
 8009664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009666:	bc08      	pop	{r3}
 8009668:	469e      	mov	lr, r3
 800966a:	4770      	bx	lr
