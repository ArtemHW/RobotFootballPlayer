
F301Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ef88  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b8  0800f118  0800f118  0001f118  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f8d0  0800f8d0  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800f8d0  0800f8d0  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f8d0  0800f8d0  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f8d0  0800f8d0  0001f8d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f8d4  0800f8d4  0001f8d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800f8d8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020c8  200001e8  0800fac0  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200022b0  0800fac0  000222b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cfa2  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000043a8  00000000  00000000  0003d1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018d0  00000000  00000000  000415a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001349  00000000  00000000  00042e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a53a  00000000  00000000  000441c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001eacc  00000000  00000000  0005e6fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009cab5  00000000  00000000  0007d1c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007b98  00000000  00000000  00119c7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  00121814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f100 	.word	0x0800f100

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800f100 	.word	0x0800f100

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <adxl345_bw_rate_setup>:
 * @param  CS_port - CS port address
 * @param  CS_pin - CS pin number
 * @param  rate - Desired output data rate
 */
void adxl345_bw_rate_setup(SPI_HandleTypeDef* hspi, GPIO_TypeDef * CS_port, uint32_t CS_pin, uint8_t rate)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	60f8      	str	r0, [r7, #12]
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	607a      	str	r2, [r7, #4]
 8000c74:	70fb      	strb	r3, [r7, #3]
	uint8_t instr = BW_RATE;
 8000c76:	232c      	movs	r3, #44	; 0x2c
 8000c78:	757b      	strb	r3, [r7, #21]
	uint16_t temp;
	temp = hspi->Instance->DR;
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	82fb      	strh	r3, [r7, #22]
	CS_port->ODR &= ~(1<<CS_pin);
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	695b      	ldr	r3, [r3, #20]
 8000c86:	2101      	movs	r1, #1
 8000c88:	687a      	ldr	r2, [r7, #4]
 8000c8a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c8e:	43d2      	mvns	r2, r2
 8000c90:	401a      	ands	r2, r3
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(hspi, &instr, 1, 100);
 8000c96:	f107 0115 	add.w	r1, r7, #21
 8000c9a:	2364      	movs	r3, #100	; 0x64
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	68f8      	ldr	r0, [r7, #12]
 8000ca0:	f005 fea7 	bl	80069f2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &rate, 1, 100);
 8000ca4:	1cf9      	adds	r1, r7, #3
 8000ca6:	2364      	movs	r3, #100	; 0x64
 8000ca8:	2201      	movs	r2, #1
 8000caa:	68f8      	ldr	r0, [r7, #12]
 8000cac:	f005 fea1 	bl	80069f2 <HAL_SPI_Transmit>
	CS_port->ODR |= (1<<CS_pin);
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	695b      	ldr	r3, [r3, #20]
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	fa01 f202 	lsl.w	r2, r1, r2
 8000cbc:	431a      	orrs	r2, r3
 8000cbe:	68bb      	ldr	r3, [r7, #8]
 8000cc0:	615a      	str	r2, [r3, #20]
}
 8000cc2:	bf00      	nop
 8000cc4:	3718      	adds	r7, #24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <adxl345_measure_mode>:
 *               the configuration information for SPI module.
 * @param  CS_port - CS port address
 * @param  CS_pin - CS pin number
 */
void adxl345_measure_mode(SPI_HandleTypeDef* hspi, GPIO_TypeDef * CS_port, uint32_t CS_pin)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b086      	sub	sp, #24
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	60f8      	str	r0, [r7, #12]
 8000cd2:	60b9      	str	r1, [r7, #8]
 8000cd4:	607a      	str	r2, [r7, #4]
	uint8_t register_data = 0;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	757b      	strb	r3, [r7, #21]
	uint8_t instr = POWER_CTL | (1<<7);
 8000cda:	23ad      	movs	r3, #173	; 0xad
 8000cdc:	753b      	strb	r3, [r7, #20]
	uint16_t temp;
	temp = hspi->Instance->DR; //Clearing buffer
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	82fb      	strh	r3, [r7, #22]
	CS_port->ODR &= ~(1<<CS_pin);
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	695b      	ldr	r3, [r3, #20]
 8000cea:	2101      	movs	r1, #1
 8000cec:	687a      	ldr	r2, [r7, #4]
 8000cee:	fa01 f202 	lsl.w	r2, r1, r2
 8000cf2:	43d2      	mvns	r2, r2
 8000cf4:	401a      	ands	r2, r3
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(hspi, &instr, 1, 100);
 8000cfa:	f107 0114 	add.w	r1, r7, #20
 8000cfe:	2364      	movs	r3, #100	; 0x64
 8000d00:	2201      	movs	r2, #1
 8000d02:	68f8      	ldr	r0, [r7, #12]
 8000d04:	f005 fe75 	bl	80069f2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, &register_data, 1, 100);
 8000d08:	f107 0115 	add.w	r1, r7, #21
 8000d0c:	2364      	movs	r3, #100	; 0x64
 8000d0e:	2201      	movs	r2, #1
 8000d10:	68f8      	ldr	r0, [r7, #12]
 8000d12:	f005 ffe3 	bl	8006cdc <HAL_SPI_Receive>
	CS_port->ODR |= (1<<CS_pin);
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	695b      	ldr	r3, [r3, #20]
 8000d1a:	2101      	movs	r1, #1
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d22:	431a      	orrs	r2, r3
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	615a      	str	r2, [r3, #20]
	register_data |= (1<<3);
 8000d28:	7d7b      	ldrb	r3, [r7, #21]
 8000d2a:	f043 0308 	orr.w	r3, r3, #8
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	757b      	strb	r3, [r7, #21]
	instr = POWER_CTL;
 8000d32:	232d      	movs	r3, #45	; 0x2d
 8000d34:	753b      	strb	r3, [r7, #20]
	CS_port->ODR &= ~(1<<CS_pin);
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	695b      	ldr	r3, [r3, #20]
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	687a      	ldr	r2, [r7, #4]
 8000d3e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d42:	43d2      	mvns	r2, r2
 8000d44:	401a      	ands	r2, r3
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(hspi, &instr, 1, 100);
 8000d4a:	f107 0114 	add.w	r1, r7, #20
 8000d4e:	2364      	movs	r3, #100	; 0x64
 8000d50:	2201      	movs	r2, #1
 8000d52:	68f8      	ldr	r0, [r7, #12]
 8000d54:	f005 fe4d 	bl	80069f2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &register_data, 1, 100);
 8000d58:	f107 0115 	add.w	r1, r7, #21
 8000d5c:	2364      	movs	r3, #100	; 0x64
 8000d5e:	2201      	movs	r2, #1
 8000d60:	68f8      	ldr	r0, [r7, #12]
 8000d62:	f005 fe46 	bl	80069f2 <HAL_SPI_Transmit>
	CS_port->ODR |= (1<<CS_pin);
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	695b      	ldr	r3, [r3, #20]
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	687a      	ldr	r2, [r7, #4]
 8000d6e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d72:	431a      	orrs	r2, r3
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	615a      	str	r2, [r3, #20]
	//test
	temp = hspi->Instance->DR; //Clearing buffer
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	68db      	ldr	r3, [r3, #12]
 8000d7e:	82fb      	strh	r3, [r7, #22]
	register_data = 0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	757b      	strb	r3, [r7, #21]
	instr = POWER_CTL | (1<<7);
 8000d84:	23ad      	movs	r3, #173	; 0xad
 8000d86:	753b      	strb	r3, [r7, #20]
	CS_port->ODR &= ~(1<<CS_pin);
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	695b      	ldr	r3, [r3, #20]
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	687a      	ldr	r2, [r7, #4]
 8000d90:	fa01 f202 	lsl.w	r2, r1, r2
 8000d94:	43d2      	mvns	r2, r2
 8000d96:	401a      	ands	r2, r3
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(hspi, &instr, 1, 100);
 8000d9c:	f107 0114 	add.w	r1, r7, #20
 8000da0:	2364      	movs	r3, #100	; 0x64
 8000da2:	2201      	movs	r2, #1
 8000da4:	68f8      	ldr	r0, [r7, #12]
 8000da6:	f005 fe24 	bl	80069f2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, &register_data, 1, 100);
 8000daa:	f107 0115 	add.w	r1, r7, #21
 8000dae:	2364      	movs	r3, #100	; 0x64
 8000db0:	2201      	movs	r2, #1
 8000db2:	68f8      	ldr	r0, [r7, #12]
 8000db4:	f005 ff92 	bl	8006cdc <HAL_SPI_Receive>
	CS_port->ODR |= (1<<CS_pin);
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	695b      	ldr	r3, [r3, #20]
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	fa01 f202 	lsl.w	r2, r1, r2
 8000dc4:	431a      	orrs	r2, r3
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	615a      	str	r2, [r3, #20]
}
 8000dca:	bf00      	nop
 8000dcc:	3718      	adds	r7, #24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <adxl345_data_format>:
 * @param  CS_port - CS port address
 * @param  CS_pin - CS pin number
 * @param  data_format - Information for the accelerometer DATA_FORMAT register
 */
void adxl345_data_format(SPI_HandleTypeDef* hspi, GPIO_TypeDef * CS_port, uint32_t CS_pin, uint8_t data_format)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b086      	sub	sp, #24
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	60f8      	str	r0, [r7, #12]
 8000dda:	60b9      	str	r1, [r7, #8]
 8000ddc:	607a      	str	r2, [r7, #4]
 8000dde:	70fb      	strb	r3, [r7, #3]
	uint8_t instr = DATA_FORMAT;
 8000de0:	2331      	movs	r3, #49	; 0x31
 8000de2:	75fb      	strb	r3, [r7, #23]
	CS_port->ODR &= ~(1<<CS_pin);
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	695b      	ldr	r3, [r3, #20]
 8000de8:	2101      	movs	r1, #1
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	fa01 f202 	lsl.w	r2, r1, r2
 8000df0:	43d2      	mvns	r2, r2
 8000df2:	401a      	ands	r2, r3
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(hspi, &instr, 1, 100);
 8000df8:	f107 0117 	add.w	r1, r7, #23
 8000dfc:	2364      	movs	r3, #100	; 0x64
 8000dfe:	2201      	movs	r2, #1
 8000e00:	68f8      	ldr	r0, [r7, #12]
 8000e02:	f005 fdf6 	bl	80069f2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &data_format, 1, 100);
 8000e06:	1cf9      	adds	r1, r7, #3
 8000e08:	2364      	movs	r3, #100	; 0x64
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	68f8      	ldr	r0, [r7, #12]
 8000e0e:	f005 fdf0 	bl	80069f2 <HAL_SPI_Transmit>
	CS_port->ODR |= (1<<CS_pin);
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	695b      	ldr	r3, [r3, #20]
 8000e16:	2101      	movs	r1, #1
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e1e:	431a      	orrs	r2, r3
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	615a      	str	r2, [r3, #20]
}
 8000e24:	bf00      	nop
 8000e26:	3718      	adds	r7, #24
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <adxl345_read_data>:
 * @param  CS_port - CS port address
 * @param  CS_pin - CS pin number
 * @param  buffer - Pointer to the buffer where you want to put the received data
 */
void adxl345_read_data(SPI_HandleTypeDef* hspi, GPIO_TypeDef * CS_port, uint32_t CS_pin, uint8_t* buffer)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
 8000e38:	603b      	str	r3, [r7, #0]
	uint8_t instr = DATAX0 | (1<<7) | (1<<6);
 8000e3a:	23f2      	movs	r3, #242	; 0xf2
 8000e3c:	757b      	strb	r3, [r7, #21]
	uint16_t temp;
	temp = hspi->Instance->DR; //Clearing buffer
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	82fb      	strh	r3, [r7, #22]
	CS_port->ODR &= ~(1<<CS_pin);
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	695b      	ldr	r3, [r3, #20]
 8000e4a:	2101      	movs	r1, #1
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e52:	43d2      	mvns	r2, r2
 8000e54:	401a      	ands	r2, r3
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	615a      	str	r2, [r3, #20]
	HAL_SPI_Transmit(hspi, &instr, 1, 100);
 8000e5a:	f107 0115 	add.w	r1, r7, #21
 8000e5e:	2364      	movs	r3, #100	; 0x64
 8000e60:	2201      	movs	r2, #1
 8000e62:	68f8      	ldr	r0, [r7, #12]
 8000e64:	f005 fdc5 	bl	80069f2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, buffer, 6, 100);
 8000e68:	2364      	movs	r3, #100	; 0x64
 8000e6a:	2206      	movs	r2, #6
 8000e6c:	6839      	ldr	r1, [r7, #0]
 8000e6e:	68f8      	ldr	r0, [r7, #12]
 8000e70:	f005 ff34 	bl	8006cdc <HAL_SPI_Receive>
	CS_port->ODR |= (1<<CS_pin);
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	695b      	ldr	r3, [r3, #20]
 8000e78:	2101      	movs	r1, #1
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e80:	431a      	orrs	r2, r3
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	615a      	str	r2, [r3, #20]
}
 8000e86:	bf00      	nop
 8000e88:	3718      	adds	r7, #24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <sendATCommand>:

#include <espATcommands.h>
extern uint32_t debugVar;

void sendATCommand(UART_HandleTypeDef *huart, const char* atcom, int sizeOfAT, int delayms)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b086      	sub	sp, #24
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	60f8      	str	r0, [r7, #12]
 8000e96:	60b9      	str	r1, [r7, #8]
 8000e98:	607a      	str	r2, [r7, #4]
 8000e9a:	603b      	str	r3, [r7, #0]
	for(uint16_t i = 0; i < sizeOfAT; i++) {
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	82fb      	strh	r3, [r7, #22]
 8000ea0:	e00a      	b.n	8000eb8 <sendATCommand+0x2a>
		if(atcom[i] == '\0') {
 8000ea2:	8afb      	ldrh	r3, [r7, #22]
 8000ea4:	68ba      	ldr	r2, [r7, #8]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d101      	bne.n	8000eb2 <sendATCommand+0x24>
			sizeOfAT = i;
 8000eae:	8afb      	ldrh	r3, [r7, #22]
 8000eb0:	607b      	str	r3, [r7, #4]
	for(uint16_t i = 0; i < sizeOfAT; i++) {
 8000eb2:	8afb      	ldrh	r3, [r7, #22]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	82fb      	strh	r3, [r7, #22]
 8000eb8:	8afb      	ldrh	r3, [r7, #22]
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	dcf0      	bgt.n	8000ea2 <sendATCommand+0x14>
		}
	}
	HAL_UART_Transmit(huart, atcom, sizeOfAT, delayms);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	68b9      	ldr	r1, [r7, #8]
 8000ec8:	68f8      	ldr	r0, [r7, #12]
 8000eca:	f007 f8b3 	bl	8008034 <HAL_UART_Transmit>
}
 8000ece:	bf00      	nop
 8000ed0:	3718      	adds	r7, #24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <receiveAnswer>:

void receiveAnswer(UART_HandleTypeDef *huart, char* response, int sizeOfResp, int delayms)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b086      	sub	sp, #24
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	60f8      	str	r0, [r7, #12]
 8000ede:	60b9      	str	r1, [r7, #8]
 8000ee0:	607a      	str	r2, [r7, #4]
 8000ee2:	603b      	str	r3, [r7, #0]
	for(uint16_t i = 0; i < sizeOfResp; i++) {
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	82fb      	strh	r3, [r7, #22]
 8000ee8:	e007      	b.n	8000efa <receiveAnswer+0x24>
		response[i] = 0;
 8000eea:	8afb      	ldrh	r3, [r7, #22]
 8000eec:	68ba      	ldr	r2, [r7, #8]
 8000eee:	4413      	add	r3, r2
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i < sizeOfResp; i++) {
 8000ef4:	8afb      	ldrh	r3, [r7, #22]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	82fb      	strh	r3, [r7, #22]
 8000efa:	8afb      	ldrh	r3, [r7, #22]
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	dcf3      	bgt.n	8000eea <receiveAnswer+0x14>
	}
	HAL_UART_Receive(huart, response, sizeOfResp, delayms);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	b29a      	uxth	r2, r3
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	68b9      	ldr	r1, [r7, #8]
 8000f0a:	68f8      	ldr	r0, [r7, #12]
 8000f0c:	f007 f91c 	bl	8008148 <HAL_UART_Receive>
}
 8000f10:	bf00      	nop
 8000f12:	3718      	adds	r7, #24
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <atSend_USART3_DMA>:
	resp = HAL_UART_Transmit_DMA(huart, (uint8_t*)pData, sizeof(pData)-1);
	__asm__ volatile("NOP");
}

uint8_t atSend_USART3_DMA(const uint8_t *pData, uint16_t amount)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	460b      	mov	r3, r1
 8000f22:	807b      	strh	r3, [r7, #2]
	if((DMA1_Channel2->CCR & DMA_CCR_EN) == DMA_CCR_EN) {
 8000f24:	4b25      	ldr	r3, [pc, #148]	; (8000fbc <atSend_USART3_DMA+0xa4>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f003 0301 	and.w	r3, r3, #1
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d129      	bne.n	8000f84 <atSend_USART3_DMA+0x6c>
		if((DMA1_Channel2->CNDTR) != 0) {
 8000f30:	4b22      	ldr	r3, [pc, #136]	; (8000fbc <atSend_USART3_DMA+0xa4>)
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <atSend_USART3_DMA+0x24>
			return 1;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e039      	b.n	8000fb0 <atSend_USART3_DMA+0x98>
		} else if((DMA1_Channel2->CCR & DMA_CCR_TCIE) != DMA_CCR_TCIE) {
 8000f3c:	4b1f      	ldr	r3, [pc, #124]	; (8000fbc <atSend_USART3_DMA+0xa4>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f003 0302 	and.w	r3, r3, #2
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d01d      	beq.n	8000f84 <atSend_USART3_DMA+0x6c>
			DMA1_Channel2->CCR &= ~DMA_CCR_EN;
 8000f48:	4b1c      	ldr	r3, [pc, #112]	; (8000fbc <atSend_USART3_DMA+0xa4>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a1b      	ldr	r2, [pc, #108]	; (8000fbc <atSend_USART3_DMA+0xa4>)
 8000f4e:	f023 0301 	bic.w	r3, r3, #1
 8000f52:	6013      	str	r3, [r2, #0]
			USART3->CR3 &= ~USART_CR3_DMAT;
 8000f54:	4b1a      	ldr	r3, [pc, #104]	; (8000fc0 <atSend_USART3_DMA+0xa8>)
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	4a19      	ldr	r2, [pc, #100]	; (8000fc0 <atSend_USART3_DMA+0xa8>)
 8000f5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000f5e:	6093      	str	r3, [r2, #8]
			if((DMA1->ISR & DMA_ISR_TCIF2) == DMA_ISR_TCIF2) {
 8000f60:	4b18      	ldr	r3, [pc, #96]	; (8000fc4 <atSend_USART3_DMA+0xac>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f003 0320 	and.w	r3, r3, #32
 8000f68:	2b20      	cmp	r3, #32
 8000f6a:	d105      	bne.n	8000f78 <atSend_USART3_DMA+0x60>
				DMA1->IFCR |= DMA_IFCR_CTCIF2;
 8000f6c:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <atSend_USART3_DMA+0xac>)
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	4a14      	ldr	r2, [pc, #80]	; (8000fc4 <atSend_USART3_DMA+0xac>)
 8000f72:	f043 0320 	orr.w	r3, r3, #32
 8000f76:	6053      	str	r3, [r2, #4]
			}
			DMA1_Channel2->CCR |= DMA_CCR_TCIE;
 8000f78:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <atSend_USART3_DMA+0xa4>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a0f      	ldr	r2, [pc, #60]	; (8000fbc <atSend_USART3_DMA+0xa4>)
 8000f7e:	f043 0302 	orr.w	r3, r3, #2
 8000f82:	6013      	str	r3, [r2, #0]
		}
	}
	USART3->CR3 |= USART_CR3_DMAT;
 8000f84:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <atSend_USART3_DMA+0xa8>)
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	4a0d      	ldr	r2, [pc, #52]	; (8000fc0 <atSend_USART3_DMA+0xa8>)
 8000f8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f8e:	6093      	str	r3, [r2, #8]

	DMA1_Channel2->CNDTR = amount;
 8000f90:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <atSend_USART3_DMA+0xa4>)
 8000f92:	887b      	ldrh	r3, [r7, #2]
 8000f94:	6053      	str	r3, [r2, #4]
	DMA1_Channel2->CPAR = (uint32_t)&(USART3->TDR);
 8000f96:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <atSend_USART3_DMA+0xa4>)
 8000f98:	4a0b      	ldr	r2, [pc, #44]	; (8000fc8 <atSend_USART3_DMA+0xb0>)
 8000f9a:	609a      	str	r2, [r3, #8]
	DMA1_Channel2->CMAR = (uint32_t)pData;
 8000f9c:	4a07      	ldr	r2, [pc, #28]	; (8000fbc <atSend_USART3_DMA+0xa4>)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	60d3      	str	r3, [r2, #12]

	DMA1_Channel2->CCR |= DMA_CCR_EN;
 8000fa2:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <atSend_USART3_DMA+0xa4>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a05      	ldr	r2, [pc, #20]	; (8000fbc <atSend_USART3_DMA+0xa4>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	6013      	str	r3, [r2, #0]
	return 0;
 8000fae:	2300      	movs	r3, #0
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	4002001c 	.word	0x4002001c
 8000fc0:	40004800 	.word	0x40004800
 8000fc4:	40020000 	.word	0x40020000
 8000fc8:	40004828 	.word	0x40004828
 8000fcc:	00000000 	.word	0x00000000

08000fd0 <parseFloat>:

float parseFloat(const char *buffer, uint16_t startIndex)
{
 8000fd0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000fd4:	b084      	sub	sp, #16
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
 8000fda:	460b      	mov	r3, r1
 8000fdc:	807b      	strh	r3, [r7, #2]
    float value = 0.0f;
 8000fde:	f04f 0300 	mov.w	r3, #0
 8000fe2:	60fb      	str	r3, [r7, #12]
    uint8_t decimalFlag = 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	72fb      	strb	r3, [r7, #11]
    uint8_t decimalPlaces = 0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	72bb      	strb	r3, [r7, #10]

    for (uint16_t i = startIndex; buffer[i % ESPRXBUFFERSIZE] != '_'; i++) {
 8000fec:	887b      	ldrh	r3, [r7, #2]
 8000fee:	813b      	strh	r3, [r7, #8]
 8000ff0:	e0c7      	b.n	8001182 <parseFloat+0x1b2>
        if (buffer[i % ESPRXBUFFERSIZE] == '.') {
 8000ff2:	893a      	ldrh	r2, [r7, #8]
 8000ff4:	4b7a      	ldr	r3, [pc, #488]	; (80011e0 <parseFloat+0x210>)
 8000ff6:	fba3 1302 	umull	r1, r3, r3, r2
 8000ffa:	1ad1      	subs	r1, r2, r3
 8000ffc:	0849      	lsrs	r1, r1, #1
 8000ffe:	440b      	add	r3, r1
 8001000:	0a19      	lsrs	r1, r3, #8
 8001002:	460b      	mov	r3, r1
 8001004:	025b      	lsls	r3, r3, #9
 8001006:	1a5b      	subs	r3, r3, r1
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	b29b      	uxth	r3, r3
 800100c:	461a      	mov	r2, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4413      	add	r3, r2
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b2e      	cmp	r3, #46	; 0x2e
 8001016:	d104      	bne.n	8001022 <parseFloat+0x52>
            decimalFlag |= (1<<0);
 8001018:	7afb      	ldrb	r3, [r7, #11]
 800101a:	f043 0301 	orr.w	r3, r3, #1
 800101e:	72fb      	strb	r3, [r7, #11]
 8001020:	e0a2      	b.n	8001168 <parseFloat+0x198>
        } else if (buffer[i % ESPRXBUFFERSIZE] == '-') {
 8001022:	893a      	ldrh	r2, [r7, #8]
 8001024:	4b6e      	ldr	r3, [pc, #440]	; (80011e0 <parseFloat+0x210>)
 8001026:	fba3 1302 	umull	r1, r3, r3, r2
 800102a:	1ad1      	subs	r1, r2, r3
 800102c:	0849      	lsrs	r1, r1, #1
 800102e:	440b      	add	r3, r1
 8001030:	0a19      	lsrs	r1, r3, #8
 8001032:	460b      	mov	r3, r1
 8001034:	025b      	lsls	r3, r3, #9
 8001036:	1a5b      	subs	r3, r3, r1
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	b29b      	uxth	r3, r3
 800103c:	461a      	mov	r2, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4413      	add	r3, r2
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b2d      	cmp	r3, #45	; 0x2d
 8001046:	d104      	bne.n	8001052 <parseFloat+0x82>
            decimalFlag |= (1<<1);
 8001048:	7afb      	ldrb	r3, [r7, #11]
 800104a:	f043 0302 	orr.w	r3, r3, #2
 800104e:	72fb      	strb	r3, [r7, #11]
 8001050:	e08a      	b.n	8001168 <parseFloat+0x198>
        } else if (buffer[i % ESPRXBUFFERSIZE] >= '0' && buffer[i % ESPRXBUFFERSIZE] <= '9') {
 8001052:	893a      	ldrh	r2, [r7, #8]
 8001054:	4b62      	ldr	r3, [pc, #392]	; (80011e0 <parseFloat+0x210>)
 8001056:	fba3 1302 	umull	r1, r3, r3, r2
 800105a:	1ad1      	subs	r1, r2, r3
 800105c:	0849      	lsrs	r1, r1, #1
 800105e:	440b      	add	r3, r1
 8001060:	0a19      	lsrs	r1, r3, #8
 8001062:	460b      	mov	r3, r1
 8001064:	025b      	lsls	r3, r3, #9
 8001066:	1a5b      	subs	r3, r3, r1
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	b29b      	uxth	r3, r3
 800106c:	461a      	mov	r2, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4413      	add	r3, r2
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b2f      	cmp	r3, #47	; 0x2f
 8001076:	d977      	bls.n	8001168 <parseFloat+0x198>
 8001078:	893a      	ldrh	r2, [r7, #8]
 800107a:	4b59      	ldr	r3, [pc, #356]	; (80011e0 <parseFloat+0x210>)
 800107c:	fba3 1302 	umull	r1, r3, r3, r2
 8001080:	1ad1      	subs	r1, r2, r3
 8001082:	0849      	lsrs	r1, r1, #1
 8001084:	440b      	add	r3, r1
 8001086:	0a19      	lsrs	r1, r3, #8
 8001088:	460b      	mov	r3, r1
 800108a:	025b      	lsls	r3, r3, #9
 800108c:	1a5b      	subs	r3, r3, r1
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	b29b      	uxth	r3, r3
 8001092:	461a      	mov	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4413      	add	r3, r2
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b39      	cmp	r3, #57	; 0x39
 800109c:	d864      	bhi.n	8001168 <parseFloat+0x198>
            if ((decimalFlag & (1<<0)) == (1<<0)) {
 800109e:	7afb      	ldrb	r3, [r7, #11]
 80010a0:	f003 0301 	and.w	r3, r3, #1
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d03f      	beq.n	8001128 <parseFloat+0x158>
                decimalPlaces++;
 80010a8:	7abb      	ldrb	r3, [r7, #10]
 80010aa:	3301      	adds	r3, #1
 80010ac:	72bb      	strb	r3, [r7, #10]
                value = value + (buffer[i % ESPRXBUFFERSIZE] - '0') / pow(10, decimalPlaces);
 80010ae:	68f8      	ldr	r0, [r7, #12]
 80010b0:	f7ff fa5a 	bl	8000568 <__aeabi_f2d>
 80010b4:	4604      	mov	r4, r0
 80010b6:	460d      	mov	r5, r1
 80010b8:	893a      	ldrh	r2, [r7, #8]
 80010ba:	4b49      	ldr	r3, [pc, #292]	; (80011e0 <parseFloat+0x210>)
 80010bc:	fba3 1302 	umull	r1, r3, r3, r2
 80010c0:	1ad1      	subs	r1, r2, r3
 80010c2:	0849      	lsrs	r1, r1, #1
 80010c4:	440b      	add	r3, r1
 80010c6:	0a19      	lsrs	r1, r3, #8
 80010c8:	460b      	mov	r3, r1
 80010ca:	025b      	lsls	r3, r3, #9
 80010cc:	1a5b      	subs	r3, r3, r1
 80010ce:	1ad3      	subs	r3, r2, r3
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	461a      	mov	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4413      	add	r3, r2
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	3b30      	subs	r3, #48	; 0x30
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff fa31 	bl	8000544 <__aeabi_i2d>
 80010e2:	4680      	mov	r8, r0
 80010e4:	4689      	mov	r9, r1
 80010e6:	7abb      	ldrb	r3, [r7, #10]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff fa1b 	bl	8000524 <__aeabi_ui2d>
 80010ee:	4602      	mov	r2, r0
 80010f0:	460b      	mov	r3, r1
 80010f2:	ec43 2b11 	vmov	d1, r2, r3
 80010f6:	ed9f 0b38 	vldr	d0, [pc, #224]	; 80011d8 <parseFloat+0x208>
 80010fa:	f00d f8c7 	bl	800e28c <pow>
 80010fe:	ec53 2b10 	vmov	r2, r3, d0
 8001102:	4640      	mov	r0, r8
 8001104:	4649      	mov	r1, r9
 8001106:	f7ff fbb1 	bl	800086c <__aeabi_ddiv>
 800110a:	4602      	mov	r2, r0
 800110c:	460b      	mov	r3, r1
 800110e:	4620      	mov	r0, r4
 8001110:	4629      	mov	r1, r5
 8001112:	f7ff f8cb 	bl	80002ac <__adddf3>
 8001116:	4602      	mov	r2, r0
 8001118:	460b      	mov	r3, r1
 800111a:	4610      	mov	r0, r2
 800111c:	4619      	mov	r1, r3
 800111e:	f7ff fd53 	bl	8000bc8 <__aeabi_d2f>
 8001122:	4603      	mov	r3, r0
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	e01f      	b.n	8001168 <parseFloat+0x198>
            } else {
                value = value * 10 + (buffer[i % ESPRXBUFFERSIZE] - '0');
 8001128:	edd7 7a03 	vldr	s15, [r7, #12]
 800112c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001130:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001134:	893a      	ldrh	r2, [r7, #8]
 8001136:	4b2a      	ldr	r3, [pc, #168]	; (80011e0 <parseFloat+0x210>)
 8001138:	fba3 1302 	umull	r1, r3, r3, r2
 800113c:	1ad1      	subs	r1, r2, r3
 800113e:	0849      	lsrs	r1, r1, #1
 8001140:	440b      	add	r3, r1
 8001142:	0a19      	lsrs	r1, r3, #8
 8001144:	460b      	mov	r3, r1
 8001146:	025b      	lsls	r3, r3, #9
 8001148:	1a5b      	subs	r3, r3, r1
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	b29b      	uxth	r3, r3
 800114e:	461a      	mov	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4413      	add	r3, r2
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	3b30      	subs	r3, #48	; 0x30
 8001158:	ee07 3a90 	vmov	s15, r3
 800115c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001160:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001164:	edc7 7a03 	vstr	s15, [r7, #12]
            }
        }
        if(value > 50) {
 8001168:	edd7 7a03 	vldr	s15, [r7, #12]
 800116c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80011e4 <parseFloat+0x214>
 8001170:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001178:	dd00      	ble.n	800117c <parseFloat+0x1ac>
        	__asm__ volatile("NOP");
 800117a:	bf00      	nop
    for (uint16_t i = startIndex; buffer[i % ESPRXBUFFERSIZE] != '_'; i++) {
 800117c:	893b      	ldrh	r3, [r7, #8]
 800117e:	3301      	adds	r3, #1
 8001180:	813b      	strh	r3, [r7, #8]
 8001182:	893a      	ldrh	r2, [r7, #8]
 8001184:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <parseFloat+0x210>)
 8001186:	fba3 1302 	umull	r1, r3, r3, r2
 800118a:	1ad1      	subs	r1, r2, r3
 800118c:	0849      	lsrs	r1, r1, #1
 800118e:	440b      	add	r3, r1
 8001190:	0a19      	lsrs	r1, r3, #8
 8001192:	460b      	mov	r3, r1
 8001194:	025b      	lsls	r3, r3, #9
 8001196:	1a5b      	subs	r3, r3, r1
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	b29b      	uxth	r3, r3
 800119c:	461a      	mov	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4413      	add	r3, r2
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b5f      	cmp	r3, #95	; 0x5f
 80011a6:	f47f af24 	bne.w	8000ff2 <parseFloat+0x22>
        }
    }

    if((decimalFlag & (1<<1)) == (1<<1)) {
 80011aa:	7afb      	ldrb	r3, [r7, #11]
 80011ac:	f003 0302 	and.w	r3, r3, #2
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d005      	beq.n	80011c0 <parseFloat+0x1f0>
    	value *= -1.0f;
 80011b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80011b8:	eef1 7a67 	vneg.f32	s15, s15
 80011bc:	edc7 7a03 	vstr	s15, [r7, #12]
    }

    return value;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	ee07 3a90 	vmov	s15, r3
}
 80011c6:	eeb0 0a67 	vmov.f32	s0, s15
 80011ca:	3710      	adds	r7, #16
 80011cc:	46bd      	mov	sp, r7
 80011ce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80011d2:	bf00      	nop
 80011d4:	f3af 8000 	nop.w
 80011d8:	00000000 	.word	0x00000000
 80011dc:	40240000 	.word	0x40240000
 80011e0:	00804021 	.word	0x00804021
 80011e4:	42480000 	.word	0x42480000

080011e8 <espRecon>:

void espRecon(UART_HandleTypeDef *huart)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b0a2      	sub	sp, #136	; 0x88
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	char pData[100];
	debugVar = 122;
 80011f0:	4b38      	ldr	r3, [pc, #224]	; (80012d4 <espRecon+0xec>)
 80011f2:	227a      	movs	r2, #122	; 0x7a
 80011f4:	601a      	str	r2, [r3, #0]

	sprintf(pData, "AT+CIPCLOSE\r\n");
 80011f6:	f107 0320 	add.w	r3, r7, #32
 80011fa:	4937      	ldr	r1, [pc, #220]	; (80012d8 <espRecon+0xf0>)
 80011fc:	4618      	mov	r0, r3
 80011fe:	f00a feeb 	bl	800bfd8 <siprintf>
	HAL_UART_Transmit(huart, pData, strlen(pData), 250);
 8001202:	f107 0320 	add.w	r3, r7, #32
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff f842 	bl	8000290 <strlen>
 800120c:	4603      	mov	r3, r0
 800120e:	b29a      	uxth	r2, r3
 8001210:	f107 0120 	add.w	r1, r7, #32
 8001214:	23fa      	movs	r3, #250	; 0xfa
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f006 ff0c 	bl	8008034 <HAL_UART_Transmit>
	vTaskDelay(50);
 800121c:	2032      	movs	r0, #50	; 0x32
 800121e:	f008 fc49 	bl	8009ab4 <vTaskDelay>

	debugVar = 123;
 8001222:	4b2c      	ldr	r3, [pc, #176]	; (80012d4 <espRecon+0xec>)
 8001224:	227b      	movs	r2, #123	; 0x7b
 8001226:	601a      	str	r2, [r3, #0]

	sprintf(pData, "AT+CIPSTART=\"TCP\",\"192.168.137.1\",8080\r\n");
 8001228:	f107 0320 	add.w	r3, r7, #32
 800122c:	492b      	ldr	r1, [pc, #172]	; (80012dc <espRecon+0xf4>)
 800122e:	4618      	mov	r0, r3
 8001230:	f00a fed2 	bl	800bfd8 <siprintf>
	HAL_UART_Transmit(huart, pData, strlen(pData), 250);
 8001234:	f107 0320 	add.w	r3, r7, #32
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff f829 	bl	8000290 <strlen>
 800123e:	4603      	mov	r3, r0
 8001240:	b29a      	uxth	r2, r3
 8001242:	f107 0120 	add.w	r1, r7, #32
 8001246:	23fa      	movs	r3, #250	; 0xfa
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f006 fef3 	bl	8008034 <HAL_UART_Transmit>
	vTaskDelay(40);
 800124e:	2028      	movs	r0, #40	; 0x28
 8001250:	f008 fc30 	bl	8009ab4 <vTaskDelay>

	debugVar = 124;
 8001254:	4b1f      	ldr	r3, [pc, #124]	; (80012d4 <espRecon+0xec>)
 8001256:	227c      	movs	r2, #124	; 0x7c
 8001258:	601a      	str	r2, [r3, #0]
	// Creating the entire GET request string
	sprintf(pData, "GET /robot HTTP/1.1\r\n"
 800125a:	f107 0320 	add.w	r3, r7, #32
 800125e:	4920      	ldr	r1, [pc, #128]	; (80012e0 <espRecon+0xf8>)
 8001260:	4618      	mov	r0, r3
 8001262:	f00a feb9 	bl	800bfd8 <siprintf>
					  "Host: 192.168.137.1\r\n");
	int getRequestLength = strlen(pData);
 8001266:	f107 0320 	add.w	r3, r7, #32
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff f810 	bl	8000290 <strlen>
 8001270:	4603      	mov	r3, r0
 8001272:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	char pDataBuf[20];
	sprintf(pDataBuf, "AT+CIPSEND=%d\r\n", getRequestLength);
 8001276:	f107 030c 	add.w	r3, r7, #12
 800127a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800127e:	4919      	ldr	r1, [pc, #100]	; (80012e4 <espRecon+0xfc>)
 8001280:	4618      	mov	r0, r3
 8001282:	f00a fea9 	bl	800bfd8 <siprintf>
	debugVar = 125;
 8001286:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <espRecon+0xec>)
 8001288:	227d      	movs	r2, #125	; 0x7d
 800128a:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(huart, pDataBuf, strlen(pDataBuf), 250);
 800128c:	f107 030c 	add.w	r3, r7, #12
 8001290:	4618      	mov	r0, r3
 8001292:	f7fe fffd 	bl	8000290 <strlen>
 8001296:	4603      	mov	r3, r0
 8001298:	b29a      	uxth	r2, r3
 800129a:	f107 010c 	add.w	r1, r7, #12
 800129e:	23fa      	movs	r3, #250	; 0xfa
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f006 fec7 	bl	8008034 <HAL_UART_Transmit>
	vTaskDelay(10);
 80012a6:	200a      	movs	r0, #10
 80012a8:	f008 fc04 	bl	8009ab4 <vTaskDelay>
	debugVar = 126;
 80012ac:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <espRecon+0xec>)
 80012ae:	227e      	movs	r2, #126	; 0x7e
 80012b0:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(huart, pData, getRequestLength, 250);
 80012b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80012b6:	b29a      	uxth	r2, r3
 80012b8:	f107 0120 	add.w	r1, r7, #32
 80012bc:	23fa      	movs	r3, #250	; 0xfa
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f006 feb8 	bl	8008034 <HAL_UART_Transmit>
	vTaskDelay(50);
 80012c4:	2032      	movs	r0, #50	; 0x32
 80012c6:	f008 fbf5 	bl	8009ab4 <vTaskDelay>
}
 80012ca:	bf00      	nop
 80012cc:	3788      	adds	r7, #136	; 0x88
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000f54 	.word	0x20000f54
 80012d8:	0800f118 	.word	0x0800f118
 80012dc:	0800f128 	.word	0x0800f128
 80012e0:	0800f154 	.word	0x0800f154
 80012e4:	0800f180 	.word	0x0800f180

080012e8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4a07      	ldr	r2, [pc, #28]	; (8001314 <vApplicationGetIdleTaskMemory+0x2c>)
 80012f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	4a06      	ldr	r2, [pc, #24]	; (8001318 <vApplicationGetIdleTaskMemory+0x30>)
 80012fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2260      	movs	r2, #96	; 0x60
 8001304:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001306:	bf00      	nop
 8001308:	3714      	adds	r7, #20
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	20000204 	.word	0x20000204
 8001318:	2000025c 	.word	0x2000025c

0800131c <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	4a07      	ldr	r2, [pc, #28]	; (8001348 <vApplicationGetTimerTaskMemory+0x2c>)
 800132c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	4a06      	ldr	r2, [pc, #24]	; (800134c <vApplicationGetTimerTaskMemory+0x30>)
 8001332:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	22c0      	movs	r2, #192	; 0xc0
 8001338:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800133a:	bf00      	nop
 800133c:	3714      	adds	r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	200003dc 	.word	0x200003dc
 800134c:	20000434 	.word	0x20000434

08001350 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800135a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135e:	2b00      	cmp	r3, #0
 8001360:	db0b      	blt.n	800137a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	f003 021f 	and.w	r2, r3, #31
 8001368:	4907      	ldr	r1, [pc, #28]	; (8001388 <__NVIC_EnableIRQ+0x38>)
 800136a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136e:	095b      	lsrs	r3, r3, #5
 8001370:	2001      	movs	r0, #1
 8001372:	fa00 f202 	lsl.w	r2, r0, r2
 8001376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	e000e100 	.word	0xe000e100

0800138c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	6039      	str	r1, [r7, #0]
 8001396:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139c:	2b00      	cmp	r3, #0
 800139e:	db0a      	blt.n	80013b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	490c      	ldr	r1, [pc, #48]	; (80013d8 <__NVIC_SetPriority+0x4c>)
 80013a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013aa:	0112      	lsls	r2, r2, #4
 80013ac:	b2d2      	uxtb	r2, r2
 80013ae:	440b      	add	r3, r1
 80013b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013b4:	e00a      	b.n	80013cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	4908      	ldr	r1, [pc, #32]	; (80013dc <__NVIC_SetPriority+0x50>)
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	f003 030f 	and.w	r3, r3, #15
 80013c2:	3b04      	subs	r3, #4
 80013c4:	0112      	lsls	r2, r2, #4
 80013c6:	b2d2      	uxtb	r2, r2
 80013c8:	440b      	add	r3, r1
 80013ca:	761a      	strb	r2, [r3, #24]
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	e000e100 	.word	0xe000e100
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013e0:	b5b0      	push	{r4, r5, r7, lr}
 80013e2:	b0a6      	sub	sp, #152	; 0x98
 80013e4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	avrBatVoltage = 0;
 80013e6:	4bb1      	ldr	r3, [pc, #708]	; (80016ac <main+0x2cc>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	801a      	strh	r2, [r3, #0]
	BatChargeState = 0;
 80013ec:	4bb0      	ldr	r3, [pc, #704]	; (80016b0 <main+0x2d0>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	701a      	strb	r2, [r3, #0]

//	EncoderR.timeNew = 0;
//	EncoderR.timeOld = 0;
//	EncoderR.timeUpdate = 0;
	EncoderR.positionNew = 0;
 80013f2:	4bb0      	ldr	r3, [pc, #704]	; (80016b4 <main+0x2d4>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
	EncoderR.positionOld = 0;
 80013f8:	4bae      	ldr	r3, [pc, #696]	; (80016b4 <main+0x2d4>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	605a      	str	r2, [r3, #4]
	EncoderR.posCntUpdate = 0;
 80013fe:	4bad      	ldr	r3, [pc, #692]	; (80016b4 <main+0x2d4>)
 8001400:	2200      	movs	r2, #0
 8001402:	721a      	strb	r2, [r3, #8]
	EncoderR.rpm = 0;
 8001404:	4bab      	ldr	r3, [pc, #684]	; (80016b4 <main+0x2d4>)
 8001406:	2200      	movs	r2, #0
 8001408:	60da      	str	r2, [r3, #12]

//	EncoderL.timeNew = 0;
//	EncoderL.timeOld = 0;
//	EncoderL.timeUpdate = 0;
	EncoderL.positionNew = 0;
 800140a:	4bab      	ldr	r3, [pc, #684]	; (80016b8 <main+0x2d8>)
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
	EncoderL.positionOld = 0;
 8001410:	4ba9      	ldr	r3, [pc, #676]	; (80016b8 <main+0x2d8>)
 8001412:	2200      	movs	r2, #0
 8001414:	605a      	str	r2, [r3, #4]
	EncoderL.posCntUpdate = 0;
 8001416:	4ba8      	ldr	r3, [pc, #672]	; (80016b8 <main+0x2d8>)
 8001418:	2200      	movs	r2, #0
 800141a:	721a      	strb	r2, [r3, #8]
	EncoderL.rpm = 0;
 800141c:	4ba6      	ldr	r3, [pc, #664]	; (80016b8 <main+0x2d8>)
 800141e:	2200      	movs	r2, #0
 8001420:	60da      	str	r2, [r3, #12]

	SoftPwmR.errorValue = 0;
 8001422:	4ba6      	ldr	r3, [pc, #664]	; (80016bc <main+0x2dc>)
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
	SoftPwmR.sumValue = 0;
 8001428:	4ba4      	ldr	r3, [pc, #656]	; (80016bc <main+0x2dc>)
 800142a:	f04f 0200 	mov.w	r2, #0
 800142e:	605a      	str	r2, [r3, #4]
	SoftPwmR.pValue = 0;
 8001430:	4ba2      	ldr	r3, [pc, #648]	; (80016bc <main+0x2dc>)
 8001432:	f04f 0200 	mov.w	r2, #0
 8001436:	609a      	str	r2, [r3, #8]
	SoftPwmR.iValue = 0;
 8001438:	4ba0      	ldr	r3, [pc, #640]	; (80016bc <main+0x2dc>)
 800143a:	f04f 0200 	mov.w	r2, #0
 800143e:	60da      	str	r2, [r3, #12]
	SoftPwmR.pwmFloatValue = 0;
 8001440:	4b9e      	ldr	r3, [pc, #632]	; (80016bc <main+0x2dc>)
 8001442:	f04f 0200 	mov.w	r2, #0
 8001446:	611a      	str	r2, [r3, #16]
	SoftPwmR.WheelSpeed = 0;
 8001448:	4b9c      	ldr	r3, [pc, #624]	; (80016bc <main+0x2dc>)
 800144a:	f04f 0200 	mov.w	r2, #0
 800144e:	615a      	str	r2, [r3, #20]
	SoftPwmR.reqValueTemp = 0;
 8001450:	4b9a      	ldr	r3, [pc, #616]	; (80016bc <main+0x2dc>)
 8001452:	f04f 0200 	mov.w	r2, #0
 8001456:	619a      	str	r2, [r3, #24]
	SoftPwmR.curValue = 0;
 8001458:	4b98      	ldr	r3, [pc, #608]	; (80016bc <main+0x2dc>)
 800145a:	2200      	movs	r2, #0
 800145c:	83da      	strh	r2, [r3, #30]
	SoftPwmR.reqValue = 0;
 800145e:	4b97      	ldr	r3, [pc, #604]	; (80016bc <main+0x2dc>)
 8001460:	2200      	movs	r2, #0
 8001462:	839a      	strh	r2, [r3, #28]
	SoftPwmR.pwmValue = 0;
 8001464:	4b95      	ldr	r3, [pc, #596]	; (80016bc <main+0x2dc>)
 8001466:	2200      	movs	r2, #0
 8001468:	841a      	strh	r2, [r3, #32]
	SoftPwmR.status = 0;
 800146a:	4b94      	ldr	r3, [pc, #592]	; (80016bc <main+0x2dc>)
 800146c:	2200      	movs	r2, #0
 800146e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

	SoftPwmL.errorValue = 0;
 8001472:	4b93      	ldr	r3, [pc, #588]	; (80016c0 <main+0x2e0>)
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
	SoftPwmL.sumValue = 0;
 8001478:	4b91      	ldr	r3, [pc, #580]	; (80016c0 <main+0x2e0>)
 800147a:	f04f 0200 	mov.w	r2, #0
 800147e:	605a      	str	r2, [r3, #4]
	SoftPwmL.pValue = 0;
 8001480:	4b8f      	ldr	r3, [pc, #572]	; (80016c0 <main+0x2e0>)
 8001482:	f04f 0200 	mov.w	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
	SoftPwmL.iValue = 0;
 8001488:	4b8d      	ldr	r3, [pc, #564]	; (80016c0 <main+0x2e0>)
 800148a:	f04f 0200 	mov.w	r2, #0
 800148e:	60da      	str	r2, [r3, #12]
	SoftPwmL.pwmFloatValue = 0;
 8001490:	4b8b      	ldr	r3, [pc, #556]	; (80016c0 <main+0x2e0>)
 8001492:	f04f 0200 	mov.w	r2, #0
 8001496:	611a      	str	r2, [r3, #16]
	SoftPwmL.WheelSpeed = 0;
 8001498:	4b89      	ldr	r3, [pc, #548]	; (80016c0 <main+0x2e0>)
 800149a:	f04f 0200 	mov.w	r2, #0
 800149e:	615a      	str	r2, [r3, #20]
	SoftPwmL.reqValueTemp = 0;
 80014a0:	4b87      	ldr	r3, [pc, #540]	; (80016c0 <main+0x2e0>)
 80014a2:	f04f 0200 	mov.w	r2, #0
 80014a6:	619a      	str	r2, [r3, #24]
	SoftPwmL.curValue = 0;
 80014a8:	4b85      	ldr	r3, [pc, #532]	; (80016c0 <main+0x2e0>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	83da      	strh	r2, [r3, #30]
	SoftPwmL.reqValue = 0;
 80014ae:	4b84      	ldr	r3, [pc, #528]	; (80016c0 <main+0x2e0>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	839a      	strh	r2, [r3, #28]
	SoftPwmL.pwmValue = 0;
 80014b4:	4b82      	ldr	r3, [pc, #520]	; (80016c0 <main+0x2e0>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	841a      	strh	r2, [r3, #32]
	SoftPwmL.status = 0;
 80014ba:	4b81      	ldr	r3, [pc, #516]	; (80016c0 <main+0x2e0>)
 80014bc:	2200      	movs	r2, #0
 80014be:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

	kToRpm = (1000*60)/1024;
 80014c2:	4b80      	ldr	r3, [pc, #512]	; (80016c4 <main+0x2e4>)
 80014c4:	4a80      	ldr	r2, [pc, #512]	; (80016c8 <main+0x2e8>)
 80014c6:	601a      	str	r2, [r3, #0]

	memset(txBuffer, '\0', sizeof(txBuffer));
 80014c8:	f240 12ff 	movw	r2, #511	; 0x1ff
 80014cc:	2100      	movs	r1, #0
 80014ce:	487f      	ldr	r0, [pc, #508]	; (80016cc <main+0x2ec>)
 80014d0:	f00a fde5 	bl	800c09e <memset>
	memset(rxBuffer, '\0', sizeof(rxBuffer));
 80014d4:	f240 12ff 	movw	r2, #511	; 0x1ff
 80014d8:	2100      	movs	r1, #0
 80014da:	487d      	ldr	r0, [pc, #500]	; (80016d0 <main+0x2f0>)
 80014dc:	f00a fddf 	bl	800c09e <memset>
	rxBufferHead = 0;
 80014e0:	4b7c      	ldr	r3, [pc, #496]	; (80016d4 <main+0x2f4>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	801a      	strh	r2, [r3, #0]
	memset(rxBufferCopy, '\0', sizeof(rxBufferCopy));
 80014e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014ea:	2100      	movs	r1, #0
 80014ec:	487a      	ldr	r0, [pc, #488]	; (80016d8 <main+0x2f8>)
 80014ee:	f00a fdd6 	bl	800c09e <memset>

//	joyX = 0;
//	joyY = 0;
	tSpeed = 0;
 80014f2:	4b7a      	ldr	r3, [pc, #488]	; (80016dc <main+0x2fc>)
 80014f4:	f04f 0200 	mov.w	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
	aSpeed = 0;
 80014fa:	4b79      	ldr	r3, [pc, #484]	; (80016e0 <main+0x300>)
 80014fc:	f04f 0200 	mov.w	r2, #0
 8001500:	601a      	str	r2, [r3, #0]

	memset(accelValueR, '0', sizeof(accelValueR));
 8001502:	2206      	movs	r2, #6
 8001504:	2130      	movs	r1, #48	; 0x30
 8001506:	4877      	ldr	r0, [pc, #476]	; (80016e4 <main+0x304>)
 8001508:	f00a fdc9 	bl	800c09e <memset>
	memset(accelValueL, '0', sizeof(accelValueL));
 800150c:	2206      	movs	r2, #6
 800150e:	2130      	movs	r1, #48	; 0x30
 8001510:	4875      	ldr	r0, [pc, #468]	; (80016e8 <main+0x308>)
 8001512:	f00a fdc4 	bl	800c09e <memset>

	debugVar = 0;
 8001516:	4b75      	ldr	r3, [pc, #468]	; (80016ec <main+0x30c>)
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
	debugVar2 = 0;
 800151c:	4b74      	ldr	r3, [pc, #464]	; (80016f0 <main+0x310>)
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]

	cycle_count = 0;
 8001522:	4b74      	ldr	r3, [pc, #464]	; (80016f4 <main+0x314>)
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001528:	f002 fcfc 	bl	8003f24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800152c:	f000 f906 	bl	800173c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001530:	f000 faca 	bl	8001ac8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001534:	f000 faa2 	bl	8001a7c <MX_DMA_Init>
  MX_ADC1_Init();
 8001538:	f000 f95e 	bl	80017f8 <MX_ADC1_Init>
  MX_SPI2_Init();
 800153c:	f000 f9b8 	bl	80018b0 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 8001540:	f000 fa6c 	bl	8001a1c <MX_USART3_UART_Init>
  MX_TIM15_Init();
 8001544:	f000 f9f2 	bl	800192c <MX_TIM15_Init>
  MX_TIM17_Init();
 8001548:	f000 fa42 	bl	80019d0 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  ADC1_configuration();
 800154c:	f000 fb68 	bl	8001c20 <ADC1_configuration>
  TIM1_configuration();
 8001550:	f000 fc38 	bl	8001dc4 <TIM1_configuration>
  TIM2_configuration();
 8001554:	f000 fcae 	bl	8001eb4 <TIM2_configuration>
  TIM17_additional_configuration();
 8001558:	f000 fd5e 	bl	8002018 <TIM17_additional_configuration>
  TIM15_additional_configuration();
 800155c:	f000 fd36 	bl	8001fcc <TIM15_additional_configuration>
  USART3_additional_configuration();
 8001560:	f000 fd74 	bl	800204c <USART3_additional_configuration>

  GPIOA->ODR |= (1<<6); //EN34
 8001564:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001568:	695b      	ldr	r3, [r3, #20]
 800156a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800156e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001572:	6153      	str	r3, [r2, #20]
  GPIOA->ODR |= (1<<3); //EN12
 8001574:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001578:	695b      	ldr	r3, [r3, #20]
 800157a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800157e:	f043 0308 	orr.w	r3, r3, #8
 8001582:	6153      	str	r3, [r2, #20]

  DWT->CTRL |= (1<<0);  //Enable cycle counter
 8001584:	4b5c      	ldr	r3, [pc, #368]	; (80016f8 <main+0x318>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a5b      	ldr	r2, [pc, #364]	; (80016f8 <main+0x318>)
 800158a:	f043 0301 	orr.w	r3, r3, #1
 800158e:	6013      	str	r3, [r2, #0]
  DWT->CTRL |= (1<<0);  //Enable cycle counter
 8001590:	4b59      	ldr	r3, [pc, #356]	; (80016f8 <main+0x318>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a58      	ldr	r2, [pc, #352]	; (80016f8 <main+0x318>)
 8001596:	f043 0301 	orr.w	r3, r3, #1
 800159a:	6013      	str	r3, [r2, #0]


  pc13EventGroup = xEventGroupCreate();
 800159c:	f007 fa68 	bl	8008a70 <xEventGroupCreate>
 80015a0:	4603      	mov	r3, r0
 80015a2:	4a56      	ldr	r2, [pc, #344]	; (80016fc <main+0x31c>)
 80015a4:	6013      	str	r3, [r2, #0]
  pc14EventGroup = xEventGroupCreate();
 80015a6:	f007 fa63 	bl	8008a70 <xEventGroupCreate>
 80015aa:	4603      	mov	r3, r0
 80015ac:	4a54      	ldr	r2, [pc, #336]	; (8001700 <main+0x320>)
 80015ae:	6013      	str	r3, [r2, #0]
  timerFdsEventGroup = xEventGroupCreate();
 80015b0:	f007 fa5e 	bl	8008a70 <xEventGroupCreate>
 80015b4:	4603      	mov	r3, r0
 80015b6:	4a53      	ldr	r2, [pc, #332]	; (8001704 <main+0x324>)
 80015b8:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  timerForDataSending = xTimerCreate("TimerForDataSending", pdMS_TO_TICKS(211), pdTRUE, 1, timerForSendDataCallback); //211
 80015ba:	4b53      	ldr	r3, [pc, #332]	; (8001708 <main+0x328>)
 80015bc:	9300      	str	r3, [sp, #0]
 80015be:	2301      	movs	r3, #1
 80015c0:	2201      	movs	r2, #1
 80015c2:	21d3      	movs	r1, #211	; 0xd3
 80015c4:	4851      	ldr	r0, [pc, #324]	; (800170c <main+0x32c>)
 80015c6:	f009 f8a9 	bl	800a71c <xTimerCreate>
 80015ca:	4603      	mov	r3, r0
 80015cc:	4a50      	ldr	r2, [pc, #320]	; (8001710 <main+0x330>)
 80015ce:	6013      	str	r3, [r2, #0]
  xTimerStart(timerForDataSending, portMAX_DELAY);
 80015d0:	4b4f      	ldr	r3, [pc, #316]	; (8001710 <main+0x330>)
 80015d2:	681c      	ldr	r4, [r3, #0]
 80015d4:	f008 fbb2 	bl	8009d3c <xTaskGetTickCount>
 80015d8:	4602      	mov	r2, r0
 80015da:	f04f 33ff 	mov.w	r3, #4294967295
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	2300      	movs	r3, #0
 80015e2:	2101      	movs	r1, #1
 80015e4:	4620      	mov	r0, r4
 80015e6:	f009 f8ed 	bl	800a7c4 <xTimerGenericCommand>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of PS_Measure */
  osThreadDef(PS_Measure, psMeasure, osPriorityNormal, 0, 96);
 80015ea:	4b4a      	ldr	r3, [pc, #296]	; (8001714 <main+0x334>)
 80015ec:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80015f0:	461d      	mov	r5, r3
 80015f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PS_MeasureHandle = osThreadCreate(osThread(PS_Measure), NULL);
 80015fe:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001602:	2100      	movs	r1, #0
 8001604:	4618      	mov	r0, r3
 8001606:	f007 f9d3 	bl	80089b0 <osThreadCreate>
 800160a:	4603      	mov	r3, r0
 800160c:	4a42      	ldr	r2, [pc, #264]	; (8001718 <main+0x338>)
 800160e:	6013      	str	r3, [r2, #0]

  /* definition and creation of PC_13_LED */
  osThreadDef(PC_13_LED, pc13LedCntrl, osPriorityNormal, 0, 96);
 8001610:	4b42      	ldr	r3, [pc, #264]	; (800171c <main+0x33c>)
 8001612:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001616:	461d      	mov	r5, r3
 8001618:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800161a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800161c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001620:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PC_13_LEDHandle = osThreadCreate(osThread(PC_13_LED), NULL);
 8001624:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001628:	2100      	movs	r1, #0
 800162a:	4618      	mov	r0, r3
 800162c:	f007 f9c0 	bl	80089b0 <osThreadCreate>
 8001630:	4603      	mov	r3, r0
 8001632:	4a3b      	ldr	r2, [pc, #236]	; (8001720 <main+0x340>)
 8001634:	6013      	str	r3, [r2, #0]

  /* definition and creation of PC_14_LED */
  osThreadDef(PC_14_LED, pc14LedCntrl, osPriorityNormal, 0, 96);
 8001636:	4b3b      	ldr	r3, [pc, #236]	; (8001724 <main+0x344>)
 8001638:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800163c:	461d      	mov	r5, r3
 800163e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001640:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001642:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001646:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PC_14_LEDHandle = osThreadCreate(osThread(PC_14_LED), NULL);
 800164a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800164e:	2100      	movs	r1, #0
 8001650:	4618      	mov	r0, r3
 8001652:	f007 f9ad 	bl	80089b0 <osThreadCreate>
 8001656:	4603      	mov	r3, r0
 8001658:	4a33      	ldr	r2, [pc, #204]	; (8001728 <main+0x348>)
 800165a:	6013      	str	r3, [r2, #0]

  /* definition and creation of EspCommunication */
  osThreadDef(EspCommunication, espCommunication, osPriorityAboveNormal, 0, 256);
 800165c:	4b33      	ldr	r3, [pc, #204]	; (800172c <main+0x34c>)
 800165e:	f107 0420 	add.w	r4, r7, #32
 8001662:	461d      	mov	r5, r3
 8001664:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001666:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001668:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800166c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EspCommunicationHandle = osThreadCreate(osThread(EspCommunication), NULL);
 8001670:	f107 0320 	add.w	r3, r7, #32
 8001674:	2100      	movs	r1, #0
 8001676:	4618      	mov	r0, r3
 8001678:	f007 f99a 	bl	80089b0 <osThreadCreate>
 800167c:	4603      	mov	r3, r0
 800167e:	4a2c      	ldr	r2, [pc, #176]	; (8001730 <main+0x350>)
 8001680:	6013      	str	r3, [r2, #0]

  /* definition and creation of Accelerometer */
  osThreadDef(Accelerometer, accelerometer, osPriorityNormal, 0, 96);
 8001682:	4b2c      	ldr	r3, [pc, #176]	; (8001734 <main+0x354>)
 8001684:	1d3c      	adds	r4, r7, #4
 8001686:	461d      	mov	r5, r3
 8001688:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800168a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800168c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001690:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  AccelerometerHandle = osThreadCreate(osThread(Accelerometer), NULL);
 8001694:	1d3b      	adds	r3, r7, #4
 8001696:	2100      	movs	r1, #0
 8001698:	4618      	mov	r0, r3
 800169a:	f007 f989 	bl	80089b0 <osThreadCreate>
 800169e:	4603      	mov	r3, r0
 80016a0:	4a25      	ldr	r2, [pc, #148]	; (8001738 <main+0x358>)
 80016a2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80016a4:	f007 f97d 	bl	80089a2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016a8:	e7fe      	b.n	80016a8 <main+0x2c8>
 80016aa:	bf00      	nop
 80016ac:	200009b8 	.word	0x200009b8
 80016b0:	200009ba 	.word	0x200009ba
 80016b4:	200009c4 	.word	0x200009c4
 80016b8:	200009d4 	.word	0x200009d4
 80016bc:	200009e4 	.word	0x200009e4
 80016c0:	20000a08 	.word	0x20000a08
 80016c4:	20000a2c 	.word	0x20000a2c
 80016c8:	42680000 	.word	0x42680000
 80016cc:	20000a30 	.word	0x20000a30
 80016d0:	20000c30 	.word	0x20000c30
 80016d4:	20000e30 	.word	0x20000e30
 80016d8:	20000e34 	.word	0x20000e34
 80016dc:	20000f3c 	.word	0x20000f3c
 80016e0:	20000f40 	.word	0x20000f40
 80016e4:	20000f44 	.word	0x20000f44
 80016e8:	20000f4c 	.word	0x20000f4c
 80016ec:	20000f54 	.word	0x20000f54
 80016f0:	20000f58 	.word	0x20000f58
 80016f4:	20000f5c 	.word	0x20000f5c
 80016f8:	e0001000 	.word	0xe0001000
 80016fc:	200009bc 	.word	0x200009bc
 8001700:	200009c0 	.word	0x200009c0
 8001704:	20000f38 	.word	0x20000f38
 8001708:	08002179 	.word	0x08002179
 800170c:	0800f190 	.word	0x0800f190
 8001710:	20000f34 	.word	0x20000f34
 8001714:	0800f1b0 	.word	0x0800f1b0
 8001718:	20000990 	.word	0x20000990
 800171c:	0800f1d8 	.word	0x0800f1d8
 8001720:	20000994 	.word	0x20000994
 8001724:	0800f200 	.word	0x0800f200
 8001728:	20000998 	.word	0x20000998
 800172c:	0800f230 	.word	0x0800f230
 8001730:	2000099c 	.word	0x2000099c
 8001734:	0800f25c 	.word	0x0800f25c
 8001738:	200009a0 	.word	0x200009a0

0800173c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b09c      	sub	sp, #112	; 0x70
 8001740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001742:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001746:	2228      	movs	r2, #40	; 0x28
 8001748:	2100      	movs	r1, #0
 800174a:	4618      	mov	r0, r3
 800174c:	f00a fca7 	bl	800c09e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001750:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001760:	1d3b      	adds	r3, r7, #4
 8001762:	2230      	movs	r2, #48	; 0x30
 8001764:	2100      	movs	r1, #0
 8001766:	4618      	mov	r0, r3
 8001768:	f00a fc99 	bl	800c09e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800176c:	2302      	movs	r3, #2
 800176e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001770:	2301      	movs	r3, #1
 8001772:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001774:	2310      	movs	r3, #16
 8001776:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001778:	2302      	movs	r3, #2
 800177a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800177c:	2300      	movs	r3, #0
 800177e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001780:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001784:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001786:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800178a:	4618      	mov	r0, r3
 800178c:	f003 fc5c 	bl	8005048 <HAL_RCC_OscConfig>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001796:	f001 faff 	bl	8002d98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800179a:	230f      	movs	r3, #15
 800179c:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800179e:	2302      	movs	r3, #2
 80017a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017a2:	2300      	movs	r3, #0
 80017a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017ac:	2300      	movs	r3, #0
 80017ae:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017b4:	2102      	movs	r1, #2
 80017b6:	4618      	mov	r0, r3
 80017b8:	f004 fc84 	bl	80060c4 <HAL_RCC_ClockConfig>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80017c2:	f001 fae9 	bl	8002d98 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM15|RCC_PERIPHCLK_TIM17
 80017c6:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <SystemClock_Config+0xb8>)
 80017c8:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC1;
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 80017ca:	2300      	movs	r3, #0
 80017cc:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
 80017ce:	2300      	movs	r3, #0
 80017d0:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV2;
 80017d2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80017d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017d8:	1d3b      	adds	r3, r7, #4
 80017da:	4618      	mov	r0, r3
 80017dc:	f004 feda 	bl	8006594 <HAL_RCCEx_PeriphCLKConfig>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <SystemClock_Config+0xae>
  {
    Error_Handler();
 80017e6:	f001 fad7 	bl	8002d98 <Error_Handler>
  }
}
 80017ea:	bf00      	nop
 80017ec:	3770      	adds	r7, #112	; 0x70
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	00140080 	.word	0x00140080

080017f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017fe:	463b      	mov	r3, r7
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]
 800180a:	611a      	str	r2, [r3, #16]
 800180c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800180e:	4b27      	ldr	r3, [pc, #156]	; (80018ac <MX_ADC1_Init+0xb4>)
 8001810:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001814:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001816:	4b25      	ldr	r3, [pc, #148]	; (80018ac <MX_ADC1_Init+0xb4>)
 8001818:	2200      	movs	r2, #0
 800181a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800181c:	4b23      	ldr	r3, [pc, #140]	; (80018ac <MX_ADC1_Init+0xb4>)
 800181e:	2200      	movs	r2, #0
 8001820:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001822:	4b22      	ldr	r3, [pc, #136]	; (80018ac <MX_ADC1_Init+0xb4>)
 8001824:	2200      	movs	r2, #0
 8001826:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001828:	4b20      	ldr	r3, [pc, #128]	; (80018ac <MX_ADC1_Init+0xb4>)
 800182a:	2201      	movs	r2, #1
 800182c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800182e:	4b1f      	ldr	r3, [pc, #124]	; (80018ac <MX_ADC1_Init+0xb4>)
 8001830:	2200      	movs	r2, #0
 8001832:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001836:	4b1d      	ldr	r3, [pc, #116]	; (80018ac <MX_ADC1_Init+0xb4>)
 8001838:	2200      	movs	r2, #0
 800183a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800183c:	4b1b      	ldr	r3, [pc, #108]	; (80018ac <MX_ADC1_Init+0xb4>)
 800183e:	2201      	movs	r2, #1
 8001840:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001842:	4b1a      	ldr	r3, [pc, #104]	; (80018ac <MX_ADC1_Init+0xb4>)
 8001844:	2200      	movs	r2, #0
 8001846:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001848:	4b18      	ldr	r3, [pc, #96]	; (80018ac <MX_ADC1_Init+0xb4>)
 800184a:	2201      	movs	r2, #1
 800184c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800184e:	4b17      	ldr	r3, [pc, #92]	; (80018ac <MX_ADC1_Init+0xb4>)
 8001850:	2200      	movs	r2, #0
 8001852:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001856:	4b15      	ldr	r3, [pc, #84]	; (80018ac <MX_ADC1_Init+0xb4>)
 8001858:	2204      	movs	r2, #4
 800185a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800185c:	4b13      	ldr	r3, [pc, #76]	; (80018ac <MX_ADC1_Init+0xb4>)
 800185e:	2200      	movs	r2, #0
 8001860:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001862:	4b12      	ldr	r3, [pc, #72]	; (80018ac <MX_ADC1_Init+0xb4>)
 8001864:	2200      	movs	r2, #0
 8001866:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001868:	4810      	ldr	r0, [pc, #64]	; (80018ac <MX_ADC1_Init+0xb4>)
 800186a:	f002 fbb5 	bl	8003fd8 <HAL_ADC_Init>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 8001874:	f001 fa90 	bl	8002d98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001878:	2303      	movs	r3, #3
 800187a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800187c:	2301      	movs	r3, #1
 800187e:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001880:	2300      	movs	r3, #0
 8001882:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001884:	2300      	movs	r3, #0
 8001886:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001888:	2300      	movs	r3, #0
 800188a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001890:	463b      	mov	r3, r7
 8001892:	4619      	mov	r1, r3
 8001894:	4805      	ldr	r0, [pc, #20]	; (80018ac <MX_ADC1_Init+0xb4>)
 8001896:	f002 fd25 	bl	80042e4 <HAL_ADC_ConfigChannel>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80018a0:	f001 fa7a 	bl	8002d98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80018a4:	bf00      	nop
 80018a6:	3718      	adds	r7, #24
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20000734 	.word	0x20000734

080018b0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80018b4:	4b1b      	ldr	r3, [pc, #108]	; (8001924 <MX_SPI2_Init+0x74>)
 80018b6:	4a1c      	ldr	r2, [pc, #112]	; (8001928 <MX_SPI2_Init+0x78>)
 80018b8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80018ba:	4b1a      	ldr	r3, [pc, #104]	; (8001924 <MX_SPI2_Init+0x74>)
 80018bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018c0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80018c2:	4b18      	ldr	r3, [pc, #96]	; (8001924 <MX_SPI2_Init+0x74>)
 80018c4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80018c8:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80018ca:	4b16      	ldr	r3, [pc, #88]	; (8001924 <MX_SPI2_Init+0x74>)
 80018cc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80018d0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80018d2:	4b14      	ldr	r3, [pc, #80]	; (8001924 <MX_SPI2_Init+0x74>)
 80018d4:	2202      	movs	r2, #2
 80018d6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80018d8:	4b12      	ldr	r3, [pc, #72]	; (8001924 <MX_SPI2_Init+0x74>)
 80018da:	2201      	movs	r2, #1
 80018dc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80018de:	4b11      	ldr	r3, [pc, #68]	; (8001924 <MX_SPI2_Init+0x74>)
 80018e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018e4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80018e6:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <MX_SPI2_Init+0x74>)
 80018e8:	2220      	movs	r2, #32
 80018ea:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018ec:	4b0d      	ldr	r3, [pc, #52]	; (8001924 <MX_SPI2_Init+0x74>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80018f2:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <MX_SPI2_Init+0x74>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018f8:	4b0a      	ldr	r3, [pc, #40]	; (8001924 <MX_SPI2_Init+0x74>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80018fe:	4b09      	ldr	r3, [pc, #36]	; (8001924 <MX_SPI2_Init+0x74>)
 8001900:	2207      	movs	r2, #7
 8001902:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001904:	4b07      	ldr	r3, [pc, #28]	; (8001924 <MX_SPI2_Init+0x74>)
 8001906:	2200      	movs	r2, #0
 8001908:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800190a:	4b06      	ldr	r3, [pc, #24]	; (8001924 <MX_SPI2_Init+0x74>)
 800190c:	2200      	movs	r2, #0
 800190e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001910:	4804      	ldr	r0, [pc, #16]	; (8001924 <MX_SPI2_Init+0x74>)
 8001912:	f004 ffc3 	bl	800689c <HAL_SPI_Init>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 800191c:	f001 fa3c 	bl	8002d98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001920:	bf00      	nop
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20000784 	.word	0x20000784
 8001928:	40003800 	.word	0x40003800

0800192c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b088      	sub	sp, #32
 8001930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001932:	f107 0310 	add.w	r3, r7, #16
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	605a      	str	r2, [r3, #4]
 800193c:	609a      	str	r2, [r3, #8]
 800193e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001940:	1d3b      	adds	r3, r7, #4
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	605a      	str	r2, [r3, #4]
 8001948:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800194a:	4b1f      	ldr	r3, [pc, #124]	; (80019c8 <MX_TIM15_Init+0x9c>)
 800194c:	4a1f      	ldr	r2, [pc, #124]	; (80019cc <MX_TIM15_Init+0xa0>)
 800194e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 15;
 8001950:	4b1d      	ldr	r3, [pc, #116]	; (80019c8 <MX_TIM15_Init+0x9c>)
 8001952:	220f      	movs	r2, #15
 8001954:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001956:	4b1c      	ldr	r3, [pc, #112]	; (80019c8 <MX_TIM15_Init+0x9c>)
 8001958:	2200      	movs	r2, #0
 800195a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 400;
 800195c:	4b1a      	ldr	r3, [pc, #104]	; (80019c8 <MX_TIM15_Init+0x9c>)
 800195e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001962:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001964:	4b18      	ldr	r3, [pc, #96]	; (80019c8 <MX_TIM15_Init+0x9c>)
 8001966:	2200      	movs	r2, #0
 8001968:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800196a:	4b17      	ldr	r3, [pc, #92]	; (80019c8 <MX_TIM15_Init+0x9c>)
 800196c:	2200      	movs	r2, #0
 800196e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001970:	4b15      	ldr	r3, [pc, #84]	; (80019c8 <MX_TIM15_Init+0x9c>)
 8001972:	2200      	movs	r2, #0
 8001974:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001976:	4814      	ldr	r0, [pc, #80]	; (80019c8 <MX_TIM15_Init+0x9c>)
 8001978:	f005 fec6 	bl	8007708 <HAL_TIM_Base_Init>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8001982:	f001 fa09 	bl	8002d98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001986:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800198a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800198c:	f107 0310 	add.w	r3, r7, #16
 8001990:	4619      	mov	r1, r3
 8001992:	480d      	ldr	r0, [pc, #52]	; (80019c8 <MX_TIM15_Init+0x9c>)
 8001994:	f006 f883 	bl	8007a9e <HAL_TIM_ConfigClockSource>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 800199e:	f001 f9fb 	bl	8002d98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019a2:	2300      	movs	r3, #0
 80019a4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019a6:	2300      	movs	r3, #0
 80019a8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80019aa:	1d3b      	adds	r3, r7, #4
 80019ac:	4619      	mov	r1, r3
 80019ae:	4806      	ldr	r0, [pc, #24]	; (80019c8 <MX_TIM15_Init+0x9c>)
 80019b0:	f006 fa6e 	bl	8007e90 <HAL_TIMEx_MasterConfigSynchronization>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 80019ba:	f001 f9ed 	bl	8002d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80019be:	bf00      	nop
 80019c0:	3720      	adds	r7, #32
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	200007e8 	.word	0x200007e8
 80019cc:	40014000 	.word	0x40014000

080019d0 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80019d4:	4b0f      	ldr	r3, [pc, #60]	; (8001a14 <MX_TIM17_Init+0x44>)
 80019d6:	4a10      	ldr	r2, [pc, #64]	; (8001a18 <MX_TIM17_Init+0x48>)
 80019d8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 639;
 80019da:	4b0e      	ldr	r3, [pc, #56]	; (8001a14 <MX_TIM17_Init+0x44>)
 80019dc:	f240 227f 	movw	r2, #639	; 0x27f
 80019e0:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019e2:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <MX_TIM17_Init+0x44>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 100;
 80019e8:	4b0a      	ldr	r3, [pc, #40]	; (8001a14 <MX_TIM17_Init+0x44>)
 80019ea:	2264      	movs	r2, #100	; 0x64
 80019ec:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ee:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <MX_TIM17_Init+0x44>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80019f4:	4b07      	ldr	r3, [pc, #28]	; (8001a14 <MX_TIM17_Init+0x44>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019fa:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <MX_TIM17_Init+0x44>)
 80019fc:	2280      	movs	r2, #128	; 0x80
 80019fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001a00:	4804      	ldr	r0, [pc, #16]	; (8001a14 <MX_TIM17_Init+0x44>)
 8001a02:	f005 fe81 	bl	8007708 <HAL_TIM_Base_Init>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8001a0c:	f001 f9c4 	bl	8002d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001a10:	bf00      	nop
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	20000834 	.word	0x20000834
 8001a18:	40014800 	.word	0x40014800

08001a1c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a20:	4b14      	ldr	r3, [pc, #80]	; (8001a74 <MX_USART3_UART_Init+0x58>)
 8001a22:	4a15      	ldr	r2, [pc, #84]	; (8001a78 <MX_USART3_UART_Init+0x5c>)
 8001a24:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 8001a26:	4b13      	ldr	r3, [pc, #76]	; (8001a74 <MX_USART3_UART_Init+0x58>)
 8001a28:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001a2c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a2e:	4b11      	ldr	r3, [pc, #68]	; (8001a74 <MX_USART3_UART_Init+0x58>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a34:	4b0f      	ldr	r3, [pc, #60]	; (8001a74 <MX_USART3_UART_Init+0x58>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a3a:	4b0e      	ldr	r3, [pc, #56]	; (8001a74 <MX_USART3_UART_Init+0x58>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a40:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <MX_USART3_UART_Init+0x58>)
 8001a42:	220c      	movs	r2, #12
 8001a44:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a46:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <MX_USART3_UART_Init+0x58>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a4c:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <MX_USART3_UART_Init+0x58>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a52:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <MX_USART3_UART_Init+0x58>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a58:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <MX_USART3_UART_Init+0x58>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a5e:	4805      	ldr	r0, [pc, #20]	; (8001a74 <MX_USART3_UART_Init+0x58>)
 8001a60:	f006 fa9a 	bl	8007f98 <HAL_UART_Init>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001a6a:	f001 f995 	bl	8002d98 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	20000880 	.word	0x20000880
 8001a78:	40004800 	.word	0x40004800

08001a7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a82:	4b10      	ldr	r3, [pc, #64]	; (8001ac4 <MX_DMA_Init+0x48>)
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	4a0f      	ldr	r2, [pc, #60]	; (8001ac4 <MX_DMA_Init+0x48>)
 8001a88:	f043 0301 	orr.w	r3, r3, #1
 8001a8c:	6153      	str	r3, [r2, #20]
 8001a8e:	4b0d      	ldr	r3, [pc, #52]	; (8001ac4 <MX_DMA_Init+0x48>)
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	607b      	str	r3, [r7, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2105      	movs	r1, #5
 8001a9e:	200c      	movs	r0, #12
 8001aa0:	f002 fff0 	bl	8004a84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001aa4:	200c      	movs	r0, #12
 8001aa6:	f003 f809 	bl	8004abc <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	2105      	movs	r1, #5
 8001aae:	200d      	movs	r0, #13
 8001ab0:	f002 ffe8 	bl	8004a84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001ab4:	200d      	movs	r0, #13
 8001ab6:	f003 f801 	bl	8004abc <HAL_NVIC_EnableIRQ>

}
 8001aba:	bf00      	nop
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40021000 	.word	0x40021000

08001ac8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b088      	sub	sp, #32
 8001acc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ace:	f107 030c 	add.w	r3, r7, #12
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	605a      	str	r2, [r3, #4]
 8001ad8:	609a      	str	r2, [r3, #8]
 8001ada:	60da      	str	r2, [r3, #12]
 8001adc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ade:	4b4d      	ldr	r3, [pc, #308]	; (8001c14 <MX_GPIO_Init+0x14c>)
 8001ae0:	695b      	ldr	r3, [r3, #20]
 8001ae2:	4a4c      	ldr	r2, [pc, #304]	; (8001c14 <MX_GPIO_Init+0x14c>)
 8001ae4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001ae8:	6153      	str	r3, [r2, #20]
 8001aea:	4b4a      	ldr	r3, [pc, #296]	; (8001c14 <MX_GPIO_Init+0x14c>)
 8001aec:	695b      	ldr	r3, [r3, #20]
 8001aee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001af2:	60bb      	str	r3, [r7, #8]
 8001af4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af6:	4b47      	ldr	r3, [pc, #284]	; (8001c14 <MX_GPIO_Init+0x14c>)
 8001af8:	695b      	ldr	r3, [r3, #20]
 8001afa:	4a46      	ldr	r2, [pc, #280]	; (8001c14 <MX_GPIO_Init+0x14c>)
 8001afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b00:	6153      	str	r3, [r2, #20]
 8001b02:	4b44      	ldr	r3, [pc, #272]	; (8001c14 <MX_GPIO_Init+0x14c>)
 8001b04:	695b      	ldr	r3, [r3, #20]
 8001b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0a:	607b      	str	r3, [r7, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b0e:	4b41      	ldr	r3, [pc, #260]	; (8001c14 <MX_GPIO_Init+0x14c>)
 8001b10:	695b      	ldr	r3, [r3, #20]
 8001b12:	4a40      	ldr	r2, [pc, #256]	; (8001c14 <MX_GPIO_Init+0x14c>)
 8001b14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b18:	6153      	str	r3, [r2, #20]
 8001b1a:	4b3e      	ldr	r3, [pc, #248]	; (8001c14 <MX_GPIO_Init+0x14c>)
 8001b1c:	695b      	ldr	r3, [r3, #20]
 8001b1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b22:	603b      	str	r3, [r7, #0]
 8001b24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001b26:	2200      	movs	r2, #0
 8001b28:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001b2c:	483a      	ldr	r0, [pc, #232]	; (8001c18 <MX_GPIO_Init+0x150>)
 8001b2e:	f003 fa4f 	bl	8004fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN12_Pin|_1A_Pin|_2A_Pin|EN34_Pin
 8001b32:	2200      	movs	r2, #0
 8001b34:	21f8      	movs	r1, #248	; 0xf8
 8001b36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b3a:	f003 fa49 	bl	8004fd0 <HAL_GPIO_WritePin>
                          |_3A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, _4A_Pin|RST_ESP_Pin|EN_ESP_Pin|SPI2_CS_L_Pin
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f245 0107 	movw	r1, #20487	; 0x5007
 8001b44:	4835      	ldr	r0, [pc, #212]	; (8001c1c <MX_GPIO_Init+0x154>)
 8001b46:	f003 fa43 	bl	8004fd0 <HAL_GPIO_WritePin>
                          |SPI2_CS_R_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001b4a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001b4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b50:	2301      	movs	r3, #1
 8001b52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b5c:	f107 030c 	add.w	r3, r7, #12
 8001b60:	4619      	mov	r1, r3
 8001b62:	482d      	ldr	r0, [pc, #180]	; (8001c18 <MX_GPIO_Init+0x150>)
 8001b64:	f003 f8c2 	bl	8004cec <HAL_GPIO_Init>

  /*Configure GPIO pins : EN12_Pin _1A_Pin _2A_Pin EN34_Pin
                           _3A_Pin */
  GPIO_InitStruct.Pin = EN12_Pin|_1A_Pin|_2A_Pin|EN34_Pin
 8001b68:	23f8      	movs	r3, #248	; 0xf8
 8001b6a:	60fb      	str	r3, [r7, #12]
                          |_3A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b74:	2303      	movs	r3, #3
 8001b76:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b78:	f107 030c 	add.w	r3, r7, #12
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b82:	f003 f8b3 	bl	8004cec <HAL_GPIO_Init>

  /*Configure GPIO pin : _4A_Pin */
  GPIO_InitStruct.Pin = _4A_Pin;
 8001b86:	2301      	movs	r3, #1
 8001b88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b92:	2303      	movs	r3, #3
 8001b94:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(_4A_GPIO_Port, &GPIO_InitStruct);
 8001b96:	f107 030c 	add.w	r3, r7, #12
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	481f      	ldr	r0, [pc, #124]	; (8001c1c <MX_GPIO_Init+0x154>)
 8001b9e:	f003 f8a5 	bl	8004cec <HAL_GPIO_Init>

  /*Configure GPIO pins : RST_ESP_Pin EN_ESP_Pin */
  GPIO_InitStruct.Pin = RST_ESP_Pin|EN_ESP_Pin;
 8001ba2:	2306      	movs	r3, #6
 8001ba4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb2:	f107 030c 	add.w	r3, r7, #12
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4818      	ldr	r0, [pc, #96]	; (8001c1c <MX_GPIO_Init+0x154>)
 8001bba:	f003 f897 	bl	8004cec <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_CS_L_Pin SPI2_CS_R_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_L_Pin|SPI2_CS_R_Pin;
 8001bbe:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001bc2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bd0:	f107 030c 	add.w	r3, r7, #12
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4811      	ldr	r0, [pc, #68]	; (8001c1c <MX_GPIO_Init+0x154>)
 8001bd8:	f003 f888 	bl	8004cec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001bdc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001be0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001be2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001be6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bec:	f107 030c 	add.w	r3, r7, #12
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bf6:	f003 f879 	bl	8004cec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	2105      	movs	r1, #5
 8001bfe:	2028      	movs	r0, #40	; 0x28
 8001c00:	f002 ff40 	bl	8004a84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c04:	2028      	movs	r0, #40	; 0x28
 8001c06:	f002 ff59 	bl	8004abc <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c0a:	bf00      	nop
 8001c0c:	3720      	adds	r7, #32
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40021000 	.word	0x40021000
 8001c18:	48000800 	.word	0x48000800
 8001c1c:	48000400 	.word	0x48000400

08001c20 <ADC1_configuration>:

/* USER CODE BEGIN 4 */
void ADC1_configuration(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
	//NVIC configuration
	NVIC->IP[11] |= 0x70; //Priority 7
 8001c24:	4b62      	ldr	r3, [pc, #392]	; (8001db0 <ADC1_configuration+0x190>)
 8001c26:	f893 330b 	ldrb.w	r3, [r3, #779]	; 0x30b
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	4a60      	ldr	r2, [pc, #384]	; (8001db0 <ADC1_configuration+0x190>)
 8001c2e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	f882 330b 	strb.w	r3, [r2, #779]	; 0x30b
//	NVIC->ISER[0] |= (1<<11); //Enable DMA1 channel 1 interrupt
	NVIC->IP[18] |= 0x70; //Priority 7
 8001c38:	4b5d      	ldr	r3, [pc, #372]	; (8001db0 <ADC1_configuration+0x190>)
 8001c3a:	f893 3312 	ldrb.w	r3, [r3, #786]	; 0x312
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	4a5b      	ldr	r2, [pc, #364]	; (8001db0 <ADC1_configuration+0x190>)
 8001c42:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	f882 3312 	strb.w	r3, [r2, #786]	; 0x312
//	NVIC->ISER[0] |= (1<<18); //Enable ADC1 global interrupt
	//DMA configuration for ADC1
	RCC->AHBENR |= RCC_AHBENR_DMA1EN; // Enable the DMA1 clock
 8001c4c:	4b59      	ldr	r3, [pc, #356]	; (8001db4 <ADC1_configuration+0x194>)
 8001c4e:	695b      	ldr	r3, [r3, #20]
 8001c50:	4a58      	ldr	r2, [pc, #352]	; (8001db4 <ADC1_configuration+0x194>)
 8001c52:	f043 0301 	orr.w	r3, r3, #1
 8001c56:	6153      	str	r3, [r2, #20]
	DMA1_Channel1->CCR &= ~DMA_CCR_EN;
 8001c58:	4b57      	ldr	r3, [pc, #348]	; (8001db8 <ADC1_configuration+0x198>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a56      	ldr	r2, [pc, #344]	; (8001db8 <ADC1_configuration+0x198>)
 8001c5e:	f023 0301 	bic.w	r3, r3, #1
 8001c62:	6013      	str	r3, [r2, #0]

	DMA1_Channel1->CCR |= (1<<10); // Bits 11:10 MSIZE[1:0]: Memory size  01: 16-bits
 8001c64:	4b54      	ldr	r3, [pc, #336]	; (8001db8 <ADC1_configuration+0x198>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a53      	ldr	r2, [pc, #332]	; (8001db8 <ADC1_configuration+0x198>)
 8001c6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c6e:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= (1<<8); // Bits 9:8 PSIZE[1:0]: Peripheral size  01: 16-bits
 8001c70:	4b51      	ldr	r3, [pc, #324]	; (8001db8 <ADC1_configuration+0x198>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a50      	ldr	r2, [pc, #320]	; (8001db8 <ADC1_configuration+0x198>)
 8001c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c7a:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= DMA_CCR_MINC;
 8001c7c:	4b4e      	ldr	r3, [pc, #312]	; (8001db8 <ADC1_configuration+0x198>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a4d      	ldr	r2, [pc, #308]	; (8001db8 <ADC1_configuration+0x198>)
 8001c82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c86:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= DMA_CCR_CIRC;
 8001c88:	4b4b      	ldr	r3, [pc, #300]	; (8001db8 <ADC1_configuration+0x198>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a4a      	ldr	r2, [pc, #296]	; (8001db8 <ADC1_configuration+0x198>)
 8001c8e:	f043 0320 	orr.w	r3, r3, #32
 8001c92:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= DMA_CCR_TCIE;
 8001c94:	4b48      	ldr	r3, [pc, #288]	; (8001db8 <ADC1_configuration+0x198>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a47      	ldr	r2, [pc, #284]	; (8001db8 <ADC1_configuration+0x198>)
 8001c9a:	f043 0302 	orr.w	r3, r3, #2
 8001c9e:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR &= ~DMA_CCR_HTIE;
 8001ca0:	4b45      	ldr	r3, [pc, #276]	; (8001db8 <ADC1_configuration+0x198>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a44      	ldr	r2, [pc, #272]	; (8001db8 <ADC1_configuration+0x198>)
 8001ca6:	f023 0304 	bic.w	r3, r3, #4
 8001caa:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR &= ~DMA_CCR_TEIE;
 8001cac:	4b42      	ldr	r3, [pc, #264]	; (8001db8 <ADC1_configuration+0x198>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a41      	ldr	r2, [pc, #260]	; (8001db8 <ADC1_configuration+0x198>)
 8001cb2:	f023 0308 	bic.w	r3, r3, #8
 8001cb6:	6013      	str	r3, [r2, #0]

	DMA1_Channel1->CNDTR = 10;
 8001cb8:	4b3f      	ldr	r3, [pc, #252]	; (8001db8 <ADC1_configuration+0x198>)
 8001cba:	220a      	movs	r2, #10
 8001cbc:	605a      	str	r2, [r3, #4]
	DMA1_Channel1->CPAR = (uint32_t)&(ADC1->DR);
 8001cbe:	4b3e      	ldr	r3, [pc, #248]	; (8001db8 <ADC1_configuration+0x198>)
 8001cc0:	4a3e      	ldr	r2, [pc, #248]	; (8001dbc <ADC1_configuration+0x19c>)
 8001cc2:	609a      	str	r2, [r3, #8]
	DMA1_Channel1->CMAR = (uint32_t)&batteryVoltage[0];
 8001cc4:	4b3c      	ldr	r3, [pc, #240]	; (8001db8 <ADC1_configuration+0x198>)
 8001cc6:	4a3e      	ldr	r2, [pc, #248]	; (8001dc0 <ADC1_configuration+0x1a0>)
 8001cc8:	60da      	str	r2, [r3, #12]
//	ADC1->CR |= ADC_CR_ADEN;
//	while((ADC1->ISR & ADC_ISR_ADRDY) != ADC_ISR_ADRDY) __asm__ volatile("NOP");
//	ADC1->CR |= ADC_CR_ADSTART;
//	HAL_Delay(20);
//	DMA1_Channel1->CCR |= DMA_CCR_EN;
	__asm__ volatile("NOP");
 8001cca:	bf00      	nop
	if(batteryVoltage[0] == 0) {
 8001ccc:	4b3c      	ldr	r3, [pc, #240]	; (8001dc0 <ADC1_configuration+0x1a0>)
 8001cce:	881b      	ldrh	r3, [r3, #0]
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d16a      	bne.n	8001dac <ADC1_configuration+0x18c>
		if((ADC1->CR & ADC_CR_ADEN) == ADC_CR_ADEN) {
 8001cd6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f003 0301 	and.w	r3, r3, #1
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d12d      	bne.n	8001d40 <ADC1_configuration+0x120>
			DMA1_Channel1->CCR &= ~DMA_CCR_EN;
 8001ce4:	4b34      	ldr	r3, [pc, #208]	; (8001db8 <ADC1_configuration+0x198>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a33      	ldr	r2, [pc, #204]	; (8001db8 <ADC1_configuration+0x198>)
 8001cea:	f023 0301 	bic.w	r3, r3, #1
 8001cee:	6013      	str	r3, [r2, #0]
			ADC1->CR |= ADC_CR_ADSTP;
 8001cf0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001cfa:	f043 0310 	orr.w	r3, r3, #16
 8001cfe:	6093      	str	r3, [r2, #8]
			while((ADC1->CR & ADC_CR_ADSTP) == ADC_CR_ADSTP) __asm__ volatile("NOP");
 8001d00:	e000      	b.n	8001d04 <ADC1_configuration+0xe4>
 8001d02:	bf00      	nop
 8001d04:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f003 0310 	and.w	r3, r3, #16
 8001d0e:	2b10      	cmp	r3, #16
 8001d10:	d0f7      	beq.n	8001d02 <ADC1_configuration+0xe2>
			HAL_Delay(5);
 8001d12:	2005      	movs	r0, #5
 8001d14:	f002 f93c 	bl	8003f90 <HAL_Delay>
			ADC1->CR |= ADC_CR_ADDIS;
 8001d18:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001d22:	f043 0302 	orr.w	r3, r3, #2
 8001d26:	6093      	str	r3, [r2, #8]
			while((ADC1->CR & ADC_CR_ADDIS) == ADC_CR_ADDIS) __asm__ volatile("NOP");
 8001d28:	e000      	b.n	8001d2c <ADC1_configuration+0x10c>
 8001d2a:	bf00      	nop
 8001d2c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d0f7      	beq.n	8001d2a <ADC1_configuration+0x10a>
			HAL_Delay(20);
 8001d3a:	2014      	movs	r0, #20
 8001d3c:	f002 f928 	bl	8003f90 <HAL_Delay>
		}
		MX_ADC1_Init();
 8001d40:	f7ff fd5a 	bl	80017f8 <MX_ADC1_Init>
		ADC1->CFGR |= ADC_CFGR_DMACFG;
 8001d44:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001d4e:	f043 0302 	orr.w	r3, r3, #2
 8001d52:	60d3      	str	r3, [r2, #12]
		ADC1->CFGR |= ADC_CFGR_DMAEN;
 8001d54:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001d5e:	f043 0301 	orr.w	r3, r3, #1
 8001d62:	60d3      	str	r3, [r2, #12]
		ADC1->CR |= ADC_CR_ADEN;
 8001d64:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001d6e:	f043 0301 	orr.w	r3, r3, #1
 8001d72:	6093      	str	r3, [r2, #8]
		while((ADC1->ISR & ADC_ISR_ADRDY) != ADC_ISR_ADRDY) __asm__ volatile("NOP");
 8001d74:	e000      	b.n	8001d78 <ADC1_configuration+0x158>
 8001d76:	bf00      	nop
 8001d78:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d1f7      	bne.n	8001d76 <ADC1_configuration+0x156>
		ADC1->CR |= ADC_CR_ADSTART;
 8001d86:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001d90:	f043 0304 	orr.w	r3, r3, #4
 8001d94:	6093      	str	r3, [r2, #8]
		HAL_Delay(20);
 8001d96:	2014      	movs	r0, #20
 8001d98:	f002 f8fa 	bl	8003f90 <HAL_Delay>
		DMA1_Channel1->CCR |= DMA_CCR_EN;
 8001d9c:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <ADC1_configuration+0x198>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a05      	ldr	r2, [pc, #20]	; (8001db8 <ADC1_configuration+0x198>)
 8001da2:	f043 0301 	orr.w	r3, r3, #1
 8001da6:	6013      	str	r3, [r2, #0]
		__asm__ volatile("NOP");
 8001da8:	bf00      	nop
	}
	return;
 8001daa:	bf00      	nop
 8001dac:	bf00      	nop
}
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	e000e100 	.word	0xe000e100
 8001db4:	40021000 	.word	0x40021000
 8001db8:	40020008 	.word	0x40020008
 8001dbc:	50000040 	.word	0x50000040
 8001dc0:	200009a4 	.word	0x200009a4

08001dc4 <TIM1_configuration>:

void TIM1_configuration(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
    // Enable the TIM1 clock
    RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8001dc8:	4b38      	ldr	r3, [pc, #224]	; (8001eac <TIM1_configuration+0xe8>)
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	4a37      	ldr	r2, [pc, #220]	; (8001eac <TIM1_configuration+0xe8>)
 8001dce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001dd2:	6193      	str	r3, [r2, #24]

    // Configure GPIO pins for TIM1 PA9-CH2 and PA8-CH1
    GPIOA->MODER |= (1<<17);
 8001dd4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001dde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001de2:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (1<<19);
 8001de4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001dee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001df2:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR |= (1<<17); //Pull-down
 8001df4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001dfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e02:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR |= (1<<19); //Pull-down
 8001e04:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001e0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001e12:	60d3      	str	r3, [r2, #12]
    GPIOA->AFR[1] |= (6); //AF6
 8001e14:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001e1e:	f043 0306 	orr.w	r3, r3, #6
 8001e22:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOA->AFR[1] |= (6<<4); //AF6
 8001e24:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001e2e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e32:	6253      	str	r3, [r2, #36]	; 0x24

    // Configure TIM1
	TIM1->CR1 |= TIM_CR1_ARPE; //ARPE: Auto-reload preload enable
 8001e34:	4b1e      	ldr	r3, [pc, #120]	; (8001eb0 <TIM1_configuration+0xec>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a1d      	ldr	r2, [pc, #116]	; (8001eb0 <TIM1_configuration+0xec>)
 8001e3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e3e:	6013      	str	r3, [r2, #0]
	TIM1->SMCR |= (TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0); // Encoder mode 3
 8001e40:	4b1b      	ldr	r3, [pc, #108]	; (8001eb0 <TIM1_configuration+0xec>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	4a1a      	ldr	r2, [pc, #104]	; (8001eb0 <TIM1_configuration+0xec>)
 8001e46:	f043 0303 	orr.w	r3, r3, #3
 8001e4a:	6093      	str	r3, [r2, #8]
	TIM1->DIER |= TIM_DIER_UIE; //UIE: Update interrupt enable
 8001e4c:	4b18      	ldr	r3, [pc, #96]	; (8001eb0 <TIM1_configuration+0xec>)
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	4a17      	ldr	r2, [pc, #92]	; (8001eb0 <TIM1_configuration+0xec>)
 8001e52:	f043 0301 	orr.w	r3, r3, #1
 8001e56:	60d3      	str	r3, [r2, #12]

	TIM1->CCMR1 |= (1<<0);
 8001e58:	4b15      	ldr	r3, [pc, #84]	; (8001eb0 <TIM1_configuration+0xec>)
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	4a14      	ldr	r2, [pc, #80]	; (8001eb0 <TIM1_configuration+0xec>)
 8001e5e:	f043 0301 	orr.w	r3, r3, #1
 8001e62:	6193      	str	r3, [r2, #24]
	TIM1->CCMR1 |= (1<<8);
 8001e64:	4b12      	ldr	r3, [pc, #72]	; (8001eb0 <TIM1_configuration+0xec>)
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	4a11      	ldr	r2, [pc, #68]	; (8001eb0 <TIM1_configuration+0xec>)
 8001e6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e6e:	6193      	str	r3, [r2, #24]
	TIM1->CCER |= (1<<0);
 8001e70:	4b0f      	ldr	r3, [pc, #60]	; (8001eb0 <TIM1_configuration+0xec>)
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	4a0e      	ldr	r2, [pc, #56]	; (8001eb0 <TIM1_configuration+0xec>)
 8001e76:	f043 0301 	orr.w	r3, r3, #1
 8001e7a:	6213      	str	r3, [r2, #32]
	TIM1->CCER |= (1<<4);
 8001e7c:	4b0c      	ldr	r3, [pc, #48]	; (8001eb0 <TIM1_configuration+0xec>)
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	4a0b      	ldr	r2, [pc, #44]	; (8001eb0 <TIM1_configuration+0xec>)
 8001e82:	f043 0310 	orr.w	r3, r3, #16
 8001e86:	6213      	str	r3, [r2, #32]

    // Enable the TIM1 interrupt
    NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001e88:	2019      	movs	r0, #25
 8001e8a:	f7ff fa61 	bl	8001350 <__NVIC_EnableIRQ>

    // Set priority for the TIM1 interrupt
    NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5); // Adjust priority as needed
 8001e8e:	2105      	movs	r1, #5
 8001e90:	2019      	movs	r0, #25
 8001e92:	f7ff fa7b 	bl	800138c <__NVIC_SetPriority>

//    TIM1->CNT = PRELOADENC;
    TIM1->PSC = 7; //7+1 = 8
 8001e96:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <TIM1_configuration+0xec>)
 8001e98:	2207      	movs	r2, #7
 8001e9a:	629a      	str	r2, [r3, #40]	; 0x28
    // Enable the TIM1 counter
    TIM1->CR1 |= TIM_CR1_CEN;
 8001e9c:	4b04      	ldr	r3, [pc, #16]	; (8001eb0 <TIM1_configuration+0xec>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a03      	ldr	r2, [pc, #12]	; (8001eb0 <TIM1_configuration+0xec>)
 8001ea2:	f043 0301 	orr.w	r3, r3, #1
 8001ea6:	6013      	str	r3, [r2, #0]
}
 8001ea8:	bf00      	nop
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	40012c00 	.word	0x40012c00

08001eb4 <TIM2_configuration>:

void TIM2_configuration(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
    // Enable the TIM2 clock
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001eb8:	4b43      	ldr	r3, [pc, #268]	; (8001fc8 <TIM2_configuration+0x114>)
 8001eba:	69db      	ldr	r3, [r3, #28]
 8001ebc:	4a42      	ldr	r2, [pc, #264]	; (8001fc8 <TIM2_configuration+0x114>)
 8001ebe:	f043 0301 	orr.w	r3, r3, #1
 8001ec2:	61d3      	str	r3, [r2, #28]

    // Configure GPIO pins for TIM2 PA1-CH2 and PA0-CH1
    GPIOA->MODER |= (1<<1);
 8001ec4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001ece:	f043 0302 	orr.w	r3, r3, #2
 8001ed2:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (1<<3);
 8001ed4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001ede:	f043 0308 	orr.w	r3, r3, #8
 8001ee2:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR |= (1<<1); //Pull-down
 8001ee4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001eee:	f043 0302 	orr.w	r3, r3, #2
 8001ef2:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR |= (1<<3); //Pull-down
 8001ef4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001efe:	f043 0308 	orr.w	r3, r3, #8
 8001f02:	60d3      	str	r3, [r2, #12]
    GPIOA->AFR[0] |= (1); //AF1
 8001f04:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001f08:	6a1b      	ldr	r3, [r3, #32]
 8001f0a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001f0e:	f043 0301 	orr.w	r3, r3, #1
 8001f12:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (1<<4); //AF1
 8001f14:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001f18:	6a1b      	ldr	r3, [r3, #32]
 8001f1a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001f1e:	f043 0310 	orr.w	r3, r3, #16
 8001f22:	6213      	str	r3, [r2, #32]

    // Configure TIM2
	TIM2->CR1 |= TIM_CR1_ARPE; //ARPE: Auto-reload preload enable
 8001f24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f32:	6013      	str	r3, [r2, #0]
	TIM2->SMCR |= (TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0); // Encoder mode 3
 8001f34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f3e:	f043 0303 	orr.w	r3, r3, #3
 8001f42:	6093      	str	r3, [r2, #8]
	TIM2->DIER |= TIM_DIER_UIE; //UIE: Update interrupt enable
 8001f44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f4e:	f043 0301 	orr.w	r3, r3, #1
 8001f52:	60d3      	str	r3, [r2, #12]

	TIM2->CCMR1 |= (1<<0);
 8001f54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f5e:	f043 0301 	orr.w	r3, r3, #1
 8001f62:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= (1<<8);
 8001f64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f72:	6193      	str	r3, [r2, #24]
	TIM2->CCER |= (1<<0);
 8001f74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f78:	6a1b      	ldr	r3, [r3, #32]
 8001f7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f7e:	f043 0301 	orr.w	r3, r3, #1
 8001f82:	6213      	str	r3, [r2, #32]
	TIM2->CCER |= (1<<4);
 8001f84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f88:	6a1b      	ldr	r3, [r3, #32]
 8001f8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f8e:	f043 0310 	orr.w	r3, r3, #16
 8001f92:	6213      	str	r3, [r2, #32]

	TIM2->PSC = 7; //7+1 = 8
 8001f94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f98:	2207      	movs	r2, #7
 8001f9a:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 0xFFFF; //65535
 8001f9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fa0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fa4:	62da      	str	r2, [r3, #44]	; 0x2c

    // Enable the TIM2 interrupt
    NVIC_EnableIRQ(TIM2_IRQn);
 8001fa6:	201c      	movs	r0, #28
 8001fa8:	f7ff f9d2 	bl	8001350 <__NVIC_EnableIRQ>

    // Set priority for the TIM2 interrupt
    NVIC_SetPriority(TIM2_IRQn, 5); // Adjust priority as needed
 8001fac:	2105      	movs	r1, #5
 8001fae:	201c      	movs	r0, #28
 8001fb0:	f7ff f9ec 	bl	800138c <__NVIC_SetPriority>

    // Enable the TIM2 counter
    TIM2->CR1 |= TIM_CR1_CEN;
 8001fb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fbe:	f043 0301 	orr.w	r3, r3, #1
 8001fc2:	6013      	str	r3, [r2, #0]
}
 8001fc4:	bf00      	nop
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40021000 	.word	0x40021000

08001fcc <TIM15_additional_configuration>:

void TIM15_additional_configuration(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
	TIM15->DIER |= TIM_DIER_CC1IE;
 8001fd0:	4b10      	ldr	r3, [pc, #64]	; (8002014 <TIM15_additional_configuration+0x48>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	4a0f      	ldr	r2, [pc, #60]	; (8002014 <TIM15_additional_configuration+0x48>)
 8001fd6:	f043 0302 	orr.w	r3, r3, #2
 8001fda:	60d3      	str	r3, [r2, #12]
	TIM15->DIER |= TIM_DIER_CC2IE;
 8001fdc:	4b0d      	ldr	r3, [pc, #52]	; (8002014 <TIM15_additional_configuration+0x48>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	4a0c      	ldr	r2, [pc, #48]	; (8002014 <TIM15_additional_configuration+0x48>)
 8001fe2:	f043 0304 	orr.w	r3, r3, #4
 8001fe6:	60d3      	str	r3, [r2, #12]
	TIM15->DIER |= TIM_DIER_UIE; //UIE: Update interrupt enable
 8001fe8:	4b0a      	ldr	r3, [pc, #40]	; (8002014 <TIM15_additional_configuration+0x48>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	4a09      	ldr	r2, [pc, #36]	; (8002014 <TIM15_additional_configuration+0x48>)
 8001fee:	f043 0301 	orr.w	r3, r3, #1
 8001ff2:	60d3      	str	r3, [r2, #12]

    // Enable the TIM15 interrupt
    NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001ff4:	2018      	movs	r0, #24
 8001ff6:	f7ff f9ab 	bl	8001350 <__NVIC_EnableIRQ>
    // Set priority for the TIM15 interrupt
    NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 5);
 8001ffa:	2105      	movs	r1, #5
 8001ffc:	2018      	movs	r0, #24
 8001ffe:	f7ff f9c5 	bl	800138c <__NVIC_SetPriority>

	TIM15->CR1 |= TIM_CR1_CEN;
 8002002:	4b04      	ldr	r3, [pc, #16]	; (8002014 <TIM15_additional_configuration+0x48>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a03      	ldr	r2, [pc, #12]	; (8002014 <TIM15_additional_configuration+0x48>)
 8002008:	f043 0301 	orr.w	r3, r3, #1
 800200c:	6013      	str	r3, [r2, #0]
}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40014000 	.word	0x40014000

08002018 <TIM17_additional_configuration>:

void TIM17_additional_configuration(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
	TIM17->DIER |= TIM_DIER_UIE; //UIE: Update interrupt enable
 800201c:	4b0a      	ldr	r3, [pc, #40]	; (8002048 <TIM17_additional_configuration+0x30>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	4a09      	ldr	r2, [pc, #36]	; (8002048 <TIM17_additional_configuration+0x30>)
 8002022:	f043 0301 	orr.w	r3, r3, #1
 8002026:	60d3      	str	r3, [r2, #12]

    // Enable the TIM17 interrupt
    NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002028:	201a      	movs	r0, #26
 800202a:	f7ff f991 	bl	8001350 <__NVIC_EnableIRQ>
    // Set priority for the TIM17 interrupt
    NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 5);
 800202e:	2105      	movs	r1, #5
 8002030:	201a      	movs	r0, #26
 8002032:	f7ff f9ab 	bl	800138c <__NVIC_SetPriority>

	TIM17->CR1 |= TIM_CR1_CEN;
 8002036:	4b04      	ldr	r3, [pc, #16]	; (8002048 <TIM17_additional_configuration+0x30>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a03      	ldr	r2, [pc, #12]	; (8002048 <TIM17_additional_configuration+0x30>)
 800203c:	f043 0301 	orr.w	r3, r3, #1
 8002040:	6013      	str	r3, [r2, #0]
}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40014800 	.word	0x40014800

0800204c <USART3_additional_configuration>:

void USART3_additional_configuration(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
	//DMA configuration for UART3
	RCC->AHBENR |= RCC_AHBENR_DMA1EN; // Enable the DMA1 clock
 8002050:	4b41      	ldr	r3, [pc, #260]	; (8002158 <USART3_additional_configuration+0x10c>)
 8002052:	695b      	ldr	r3, [r3, #20]
 8002054:	4a40      	ldr	r2, [pc, #256]	; (8002158 <USART3_additional_configuration+0x10c>)
 8002056:	f043 0301 	orr.w	r3, r3, #1
 800205a:	6153      	str	r3, [r2, #20]

	DMA1_Channel3->CCR &= ~DMA_CCR_EN;
 800205c:	4b3f      	ldr	r3, [pc, #252]	; (800215c <USART3_additional_configuration+0x110>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a3e      	ldr	r2, [pc, #248]	; (800215c <USART3_additional_configuration+0x110>)
 8002062:	f023 0301 	bic.w	r3, r3, #1
 8002066:	6013      	str	r3, [r2, #0]

	DMA1_Channel3->CCR |= DMA_CCR_MINC;
 8002068:	4b3c      	ldr	r3, [pc, #240]	; (800215c <USART3_additional_configuration+0x110>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a3b      	ldr	r2, [pc, #236]	; (800215c <USART3_additional_configuration+0x110>)
 800206e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002072:	6013      	str	r3, [r2, #0]
	DMA1_Channel3->CCR |= DMA_CCR_CIRC;
 8002074:	4b39      	ldr	r3, [pc, #228]	; (800215c <USART3_additional_configuration+0x110>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a38      	ldr	r2, [pc, #224]	; (800215c <USART3_additional_configuration+0x110>)
 800207a:	f043 0320 	orr.w	r3, r3, #32
 800207e:	6013      	str	r3, [r2, #0]
	DMA1_Channel3->CCR &= ~DMA_CCR_TCIE;
 8002080:	4b36      	ldr	r3, [pc, #216]	; (800215c <USART3_additional_configuration+0x110>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a35      	ldr	r2, [pc, #212]	; (800215c <USART3_additional_configuration+0x110>)
 8002086:	f023 0302 	bic.w	r3, r3, #2
 800208a:	6013      	str	r3, [r2, #0]
	DMA1_Channel3->CCR &= ~DMA_CCR_HTIE;
 800208c:	4b33      	ldr	r3, [pc, #204]	; (800215c <USART3_additional_configuration+0x110>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a32      	ldr	r2, [pc, #200]	; (800215c <USART3_additional_configuration+0x110>)
 8002092:	f023 0304 	bic.w	r3, r3, #4
 8002096:	6013      	str	r3, [r2, #0]
	DMA1_Channel3->CCR &= ~DMA_CCR_TEIE;
 8002098:	4b30      	ldr	r3, [pc, #192]	; (800215c <USART3_additional_configuration+0x110>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a2f      	ldr	r2, [pc, #188]	; (800215c <USART3_additional_configuration+0x110>)
 800209e:	f023 0308 	bic.w	r3, r3, #8
 80020a2:	6013      	str	r3, [r2, #0]

	DMA1_Channel3->CNDTR = ESPRXBUFFERSIZE;
 80020a4:	4b2d      	ldr	r3, [pc, #180]	; (800215c <USART3_additional_configuration+0x110>)
 80020a6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80020aa:	605a      	str	r2, [r3, #4]
	DMA1_Channel3->CPAR = (uint32_t)&(USART3->RDR);
 80020ac:	4b2b      	ldr	r3, [pc, #172]	; (800215c <USART3_additional_configuration+0x110>)
 80020ae:	4a2c      	ldr	r2, [pc, #176]	; (8002160 <USART3_additional_configuration+0x114>)
 80020b0:	609a      	str	r2, [r3, #8]
	DMA1_Channel3->CMAR = (uint32_t)&rxBuffer[0];
 80020b2:	4b2a      	ldr	r3, [pc, #168]	; (800215c <USART3_additional_configuration+0x110>)
 80020b4:	4a2b      	ldr	r2, [pc, #172]	; (8002164 <USART3_additional_configuration+0x118>)
 80020b6:	60da      	str	r2, [r3, #12]

	USART3->CR3 &= ~USART_CR3_DMAR;
 80020b8:	4b2b      	ldr	r3, [pc, #172]	; (8002168 <USART3_additional_configuration+0x11c>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	4a2a      	ldr	r2, [pc, #168]	; (8002168 <USART3_additional_configuration+0x11c>)
 80020be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80020c2:	6093      	str	r3, [r2, #8]
	DMA1_Channel3->CCR &= ~DMA_CCR_EN;
 80020c4:	4b25      	ldr	r3, [pc, #148]	; (800215c <USART3_additional_configuration+0x110>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a24      	ldr	r2, [pc, #144]	; (800215c <USART3_additional_configuration+0x110>)
 80020ca:	f023 0301 	bic.w	r3, r3, #1
 80020ce:	6013      	str	r3, [r2, #0]

	DMA1_Channel2->CCR &= ~DMA_CCR_EN;
 80020d0:	4b26      	ldr	r3, [pc, #152]	; (800216c <USART3_additional_configuration+0x120>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a25      	ldr	r2, [pc, #148]	; (800216c <USART3_additional_configuration+0x120>)
 80020d6:	f023 0301 	bic.w	r3, r3, #1
 80020da:	6013      	str	r3, [r2, #0]

	DMA1_Channel2->CCR |= DMA_CCR_MINC;
 80020dc:	4b23      	ldr	r3, [pc, #140]	; (800216c <USART3_additional_configuration+0x120>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a22      	ldr	r2, [pc, #136]	; (800216c <USART3_additional_configuration+0x120>)
 80020e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020e6:	6013      	str	r3, [r2, #0]
	DMA1_Channel2->CCR &= ~DMA_CCR_CIRC;
 80020e8:	4b20      	ldr	r3, [pc, #128]	; (800216c <USART3_additional_configuration+0x120>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a1f      	ldr	r2, [pc, #124]	; (800216c <USART3_additional_configuration+0x120>)
 80020ee:	f023 0320 	bic.w	r3, r3, #32
 80020f2:	6013      	str	r3, [r2, #0]
	DMA1_Channel2->CCR |= DMA_CCR_DIR;
 80020f4:	4b1d      	ldr	r3, [pc, #116]	; (800216c <USART3_additional_configuration+0x120>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a1c      	ldr	r2, [pc, #112]	; (800216c <USART3_additional_configuration+0x120>)
 80020fa:	f043 0310 	orr.w	r3, r3, #16
 80020fe:	6013      	str	r3, [r2, #0]
	DMA1_Channel2->CCR |= DMA_CCR_TCIE;
 8002100:	4b1a      	ldr	r3, [pc, #104]	; (800216c <USART3_additional_configuration+0x120>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a19      	ldr	r2, [pc, #100]	; (800216c <USART3_additional_configuration+0x120>)
 8002106:	f043 0302 	orr.w	r3, r3, #2
 800210a:	6013      	str	r3, [r2, #0]
	DMA1_Channel2->CCR &= ~DMA_CCR_HTIE;
 800210c:	4b17      	ldr	r3, [pc, #92]	; (800216c <USART3_additional_configuration+0x120>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a16      	ldr	r2, [pc, #88]	; (800216c <USART3_additional_configuration+0x120>)
 8002112:	f023 0304 	bic.w	r3, r3, #4
 8002116:	6013      	str	r3, [r2, #0]
	DMA1_Channel2->CCR &= ~DMA_CCR_TEIE;
 8002118:	4b14      	ldr	r3, [pc, #80]	; (800216c <USART3_additional_configuration+0x120>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a13      	ldr	r2, [pc, #76]	; (800216c <USART3_additional_configuration+0x120>)
 800211e:	f023 0308 	bic.w	r3, r3, #8
 8002122:	6013      	str	r3, [r2, #0]

	DMA1_Channel2->CNDTR = 0;
 8002124:	4b11      	ldr	r3, [pc, #68]	; (800216c <USART3_additional_configuration+0x120>)
 8002126:	2200      	movs	r2, #0
 8002128:	605a      	str	r2, [r3, #4]
	DMA1_Channel2->CPAR = (uint32_t)&(USART3->TDR);
 800212a:	4b10      	ldr	r3, [pc, #64]	; (800216c <USART3_additional_configuration+0x120>)
 800212c:	4a10      	ldr	r2, [pc, #64]	; (8002170 <USART3_additional_configuration+0x124>)
 800212e:	609a      	str	r2, [r3, #8]
	DMA1_Channel2->CMAR = (uint32_t)&txBuffer[0];
 8002130:	4b0e      	ldr	r3, [pc, #56]	; (800216c <USART3_additional_configuration+0x120>)
 8002132:	4a10      	ldr	r2, [pc, #64]	; (8002174 <USART3_additional_configuration+0x128>)
 8002134:	60da      	str	r2, [r3, #12]

	USART3->CR3 &= ~USART_CR3_DMAT;
 8002136:	4b0c      	ldr	r3, [pc, #48]	; (8002168 <USART3_additional_configuration+0x11c>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	4a0b      	ldr	r2, [pc, #44]	; (8002168 <USART3_additional_configuration+0x11c>)
 800213c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002140:	6093      	str	r3, [r2, #8]
	DMA1_Channel2->CCR &= ~DMA_CCR_EN;
 8002142:	4b0a      	ldr	r3, [pc, #40]	; (800216c <USART3_additional_configuration+0x120>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a09      	ldr	r2, [pc, #36]	; (800216c <USART3_additional_configuration+0x120>)
 8002148:	f023 0301 	bic.w	r3, r3, #1
 800214c:	6013      	str	r3, [r2, #0]
}
 800214e:	bf00      	nop
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	40021000 	.word	0x40021000
 800215c:	40020030 	.word	0x40020030
 8002160:	40004824 	.word	0x40004824
 8002164:	20000c30 	.word	0x20000c30
 8002168:	40004800 	.word	0x40004800
 800216c:	4002001c 	.word	0x4002001c
 8002170:	40004828 	.word	0x40004828
 8002174:	20000a30 	.word	0x20000a30

08002178 <timerForSendDataCallback>:

void timerForSendDataCallback(TimerHandle_t xTimer)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
	xEventGroupSetBits(timerFdsEventGroup, 0x1);
 8002180:	4b04      	ldr	r3, [pc, #16]	; (8002194 <timerForSendDataCallback+0x1c>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2101      	movs	r1, #1
 8002186:	4618      	mov	r0, r3
 8002188:	f006 fce8 	bl	8008b5c <xEventGroupSetBits>
}
 800218c:	bf00      	nop
 800218e:	3708      	adds	r7, #8
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	20000f38 	.word	0x20000f38

08002198 <psMeasure>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_psMeasure */
void psMeasure(void const * argument)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
    osDelay(8);
 80021a0:	2008      	movs	r0, #8
 80021a2:	f006 fc51 	bl	8008a48 <osDelay>

    for(uint8_t i = 0; i < (sizeof(batteryVoltage)/sizeof(batteryVoltage[0])); i++) {
 80021a6:	2300      	movs	r3, #0
 80021a8:	73fb      	strb	r3, [r7, #15]
 80021aa:	e00d      	b.n	80021c8 <psMeasure+0x30>
    	avrBatVoltage += batteryVoltage[i];
 80021ac:	7bfb      	ldrb	r3, [r7, #15]
 80021ae:	4a42      	ldr	r2, [pc, #264]	; (80022b8 <psMeasure+0x120>)
 80021b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	4b41      	ldr	r3, [pc, #260]	; (80022bc <psMeasure+0x124>)
 80021b8:	881b      	ldrh	r3, [r3, #0]
 80021ba:	4413      	add	r3, r2
 80021bc:	b29a      	uxth	r2, r3
 80021be:	4b3f      	ldr	r3, [pc, #252]	; (80022bc <psMeasure+0x124>)
 80021c0:	801a      	strh	r2, [r3, #0]
    for(uint8_t i = 0; i < (sizeof(batteryVoltage)/sizeof(batteryVoltage[0])); i++) {
 80021c2:	7bfb      	ldrb	r3, [r7, #15]
 80021c4:	3301      	adds	r3, #1
 80021c6:	73fb      	strb	r3, [r7, #15]
 80021c8:	7bfb      	ldrb	r3, [r7, #15]
 80021ca:	2b09      	cmp	r3, #9
 80021cc:	d9ee      	bls.n	80021ac <psMeasure+0x14>
    }
    avrBatVoltage = avrBatVoltage / (sizeof(batteryVoltage)/sizeof(batteryVoltage[0]));
 80021ce:	4b3b      	ldr	r3, [pc, #236]	; (80022bc <psMeasure+0x124>)
 80021d0:	881b      	ldrh	r3, [r3, #0]
 80021d2:	4a3b      	ldr	r2, [pc, #236]	; (80022c0 <psMeasure+0x128>)
 80021d4:	fba2 2303 	umull	r2, r3, r2, r3
 80021d8:	08db      	lsrs	r3, r3, #3
 80021da:	b29a      	uxth	r2, r3
 80021dc:	4b37      	ldr	r3, [pc, #220]	; (80022bc <psMeasure+0x124>)
 80021de:	801a      	strh	r2, [r3, #0]
    BatChargeState = ((float)(avrBatVoltage - BATMINV)/(BATMAXV - BATMINV))*100;
 80021e0:	4b36      	ldr	r3, [pc, #216]	; (80022bc <psMeasure+0x124>)
 80021e2:	881b      	ldrh	r3, [r3, #0]
 80021e4:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 80021e8:	ee07 3a90 	vmov	s15, r3
 80021ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021f0:	eddf 6a34 	vldr	s13, [pc, #208]	; 80022c4 <psMeasure+0x12c>
 80021f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021f8:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80022c8 <psMeasure+0x130>
 80021fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002200:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002204:	edc7 7a00 	vstr	s15, [r7]
 8002208:	783b      	ldrb	r3, [r7, #0]
 800220a:	b2da      	uxtb	r2, r3
 800220c:	4b2f      	ldr	r3, [pc, #188]	; (80022cc <psMeasure+0x134>)
 800220e:	701a      	strb	r2, [r3, #0]

    if(avrBatVoltage > BATMAXV) {
 8002210:	4b2a      	ldr	r3, [pc, #168]	; (80022bc <psMeasure+0x124>)
 8002212:	881b      	ldrh	r3, [r3, #0]
 8002214:	f640 1251 	movw	r2, #2385	; 0x951
 8002218:	4293      	cmp	r3, r2
 800221a:	d91b      	bls.n	8002254 <psMeasure+0xbc>
    	xEventGroupClearBits(pc13EventGroup, 0xFFFFFF);
 800221c:	4b2c      	ldr	r3, [pc, #176]	; (80022d0 <psMeasure+0x138>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8002224:	4618      	mov	r0, r3
 8002226:	f006 fc3d 	bl	8008aa4 <xEventGroupClearBits>
    	xEventGroupSetBits(pc13EventGroup, OVERVOLTAGEONLED);
 800222a:	4b29      	ldr	r3, [pc, #164]	; (80022d0 <psMeasure+0x138>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2101      	movs	r1, #1
 8002230:	4618      	mov	r0, r3
 8002232:	f006 fc93 	bl	8008b5c <xEventGroupSetBits>
    	xEventGroupClearBits(pc14EventGroup, 0xFFFFFF);
 8002236:	4b27      	ldr	r3, [pc, #156]	; (80022d4 <psMeasure+0x13c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800223e:	4618      	mov	r0, r3
 8002240:	f006 fc30 	bl	8008aa4 <xEventGroupClearBits>
    	xEventGroupSetBits(pc14EventGroup, OVERVOLTAGEONLED);
 8002244:	4b23      	ldr	r3, [pc, #140]	; (80022d4 <psMeasure+0x13c>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2101      	movs	r1, #1
 800224a:	4618      	mov	r0, r3
 800224c:	f006 fc86 	bl	8008b5c <xEventGroupSetBits>
    	__asm__ volatile("NOP");
 8002250:	bf00      	nop
 8002252:	e7a5      	b.n	80021a0 <psMeasure+0x8>
    } else if(avrBatVoltage < BATMINV) {
 8002254:	4b19      	ldr	r3, [pc, #100]	; (80022bc <psMeasure+0x124>)
 8002256:	881b      	ldrh	r3, [r3, #0]
 8002258:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800225c:	d21b      	bcs.n	8002296 <psMeasure+0xfe>
    	xEventGroupClearBits(pc13EventGroup, 0xFFFFFF);
 800225e:	4b1c      	ldr	r3, [pc, #112]	; (80022d0 <psMeasure+0x138>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8002266:	4618      	mov	r0, r3
 8002268:	f006 fc1c 	bl	8008aa4 <xEventGroupClearBits>
    	xEventGroupSetBits(pc13EventGroup, UNDERVOLTAGEONLED);
 800226c:	4b18      	ldr	r3, [pc, #96]	; (80022d0 <psMeasure+0x138>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2102      	movs	r1, #2
 8002272:	4618      	mov	r0, r3
 8002274:	f006 fc72 	bl	8008b5c <xEventGroupSetBits>
    	xEventGroupClearBits(pc14EventGroup, 0xFFFFFF);
 8002278:	4b16      	ldr	r3, [pc, #88]	; (80022d4 <psMeasure+0x13c>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8002280:	4618      	mov	r0, r3
 8002282:	f006 fc0f 	bl	8008aa4 <xEventGroupClearBits>
    	xEventGroupSetBits(pc14EventGroup, UNDERVOLTAGEONLED);
 8002286:	4b13      	ldr	r3, [pc, #76]	; (80022d4 <psMeasure+0x13c>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2102      	movs	r1, #2
 800228c:	4618      	mov	r0, r3
 800228e:	f006 fc65 	bl	8008b5c <xEventGroupSetBits>
    	__asm__ volatile("NOP");
 8002292:	bf00      	nop
 8002294:	e784      	b.n	80021a0 <psMeasure+0x8>
    } else {
    	xEventGroupClearBits(pc13EventGroup, 0xFFFFFF);
 8002296:	4b0e      	ldr	r3, [pc, #56]	; (80022d0 <psMeasure+0x138>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800229e:	4618      	mov	r0, r3
 80022a0:	f006 fc00 	bl	8008aa4 <xEventGroupClearBits>
    	xEventGroupClearBits(pc14EventGroup, 0xFFFFFF);
 80022a4:	4b0b      	ldr	r3, [pc, #44]	; (80022d4 <psMeasure+0x13c>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80022ac:	4618      	mov	r0, r3
 80022ae:	f006 fbf9 	bl	8008aa4 <xEventGroupClearBits>
    	__asm__ volatile("NOP");
 80022b2:	bf00      	nop
    osDelay(8);
 80022b4:	e774      	b.n	80021a0 <psMeasure+0x8>
 80022b6:	bf00      	nop
 80022b8:	200009a4 	.word	0x200009a4
 80022bc:	200009b8 	.word	0x200009b8
 80022c0:	cccccccd 	.word	0xcccccccd
 80022c4:	43c08000 	.word	0x43c08000
 80022c8:	42c80000 	.word	0x42c80000
 80022cc:	200009ba 	.word	0x200009ba
 80022d0:	200009bc 	.word	0x200009bc
 80022d4:	200009c0 	.word	0x200009c0

080022d8 <pc13LedCntrl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pc13LedCntrl */
void pc13LedCntrl(void const * argument)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN pc13LedCntrl */
	EventBits_t eventBits;
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80022e0:	2001      	movs	r0, #1
 80022e2:	f006 fbb1 	bl	8008a48 <osDelay>
    eventBits = xEventGroupGetBits(pc13EventGroup);
 80022e6:	4b18      	ldr	r3, [pc, #96]	; (8002348 <pc13LedCntrl+0x70>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2100      	movs	r1, #0
 80022ec:	4618      	mov	r0, r3
 80022ee:	f006 fbd9 	bl	8008aa4 <xEventGroupClearBits>
 80022f2:	60f8      	str	r0, [r7, #12]
    switch (eventBits) {
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d003      	beq.n	8002302 <pc13LedCntrl+0x2a>
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d00b      	beq.n	8002318 <pc13LedCntrl+0x40>
 8002300:	e016      	b.n	8002330 <pc13LedCntrl+0x58>
		case OVERVOLTAGEONLED:
			osDelay(200);
 8002302:	20c8      	movs	r0, #200	; 0xc8
 8002304:	f006 fba0 	bl	8008a48 <osDelay>
			GPIOC->ODR ^= GPIO_ODR_13;
 8002308:	4b10      	ldr	r3, [pc, #64]	; (800234c <pc13LedCntrl+0x74>)
 800230a:	695b      	ldr	r3, [r3, #20]
 800230c:	4a0f      	ldr	r2, [pc, #60]	; (800234c <pc13LedCntrl+0x74>)
 800230e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002312:	6153      	str	r3, [r2, #20]
			__asm__ volatile("NOP");
 8002314:	bf00      	nop
			break;
 8002316:	e016      	b.n	8002346 <pc13LedCntrl+0x6e>
		case UNDERVOLTAGEONLED:
			osDelay(300);
 8002318:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800231c:	f006 fb94 	bl	8008a48 <osDelay>
			GPIOC->ODR ^= GPIO_ODR_13;
 8002320:	4b0a      	ldr	r3, [pc, #40]	; (800234c <pc13LedCntrl+0x74>)
 8002322:	695b      	ldr	r3, [r3, #20]
 8002324:	4a09      	ldr	r2, [pc, #36]	; (800234c <pc13LedCntrl+0x74>)
 8002326:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800232a:	6153      	str	r3, [r2, #20]
			__asm__ volatile("NOP");
 800232c:	bf00      	nop
			break;
 800232e:	e00a      	b.n	8002346 <pc13LedCntrl+0x6e>
		default:
			GPIOC->ODR &= ~GPIO_ODR_13;
 8002330:	4b06      	ldr	r3, [pc, #24]	; (800234c <pc13LedCntrl+0x74>)
 8002332:	695b      	ldr	r3, [r3, #20]
 8002334:	4a05      	ldr	r2, [pc, #20]	; (800234c <pc13LedCntrl+0x74>)
 8002336:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800233a:	6153      	str	r3, [r2, #20]
			osDelay(200);
 800233c:	20c8      	movs	r0, #200	; 0xc8
 800233e:	f006 fb83 	bl	8008a48 <osDelay>
			__asm__ volatile("NOP");
 8002342:	bf00      	nop
			break;
 8002344:	bf00      	nop
    osDelay(1);
 8002346:	e7cb      	b.n	80022e0 <pc13LedCntrl+0x8>
 8002348:	200009bc 	.word	0x200009bc
 800234c:	48000800 	.word	0x48000800

08002350 <pc14LedCntrl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pc14LedCntrl */
void pc14LedCntrl(void const * argument)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN pc14LedCntrl */
	EventBits_t eventBits;
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002358:	2001      	movs	r0, #1
 800235a:	f006 fb75 	bl	8008a48 <osDelay>
    eventBits = xEventGroupGetBits(pc14EventGroup);
 800235e:	4b18      	ldr	r3, [pc, #96]	; (80023c0 <pc14LedCntrl+0x70>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2100      	movs	r1, #0
 8002364:	4618      	mov	r0, r3
 8002366:	f006 fb9d 	bl	8008aa4 <xEventGroupClearBits>
 800236a:	60f8      	str	r0, [r7, #12]
    switch (eventBits) {
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d003      	beq.n	800237a <pc14LedCntrl+0x2a>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2b02      	cmp	r3, #2
 8002376:	d00b      	beq.n	8002390 <pc14LedCntrl+0x40>
 8002378:	e016      	b.n	80023a8 <pc14LedCntrl+0x58>
		case OVERVOLTAGEONLED:
			osDelay(200);
 800237a:	20c8      	movs	r0, #200	; 0xc8
 800237c:	f006 fb64 	bl	8008a48 <osDelay>
			GPIOC->ODR ^= GPIO_ODR_14;
 8002380:	4b10      	ldr	r3, [pc, #64]	; (80023c4 <pc14LedCntrl+0x74>)
 8002382:	695b      	ldr	r3, [r3, #20]
 8002384:	4a0f      	ldr	r2, [pc, #60]	; (80023c4 <pc14LedCntrl+0x74>)
 8002386:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 800238a:	6153      	str	r3, [r2, #20]
			__asm__ volatile("NOP");
 800238c:	bf00      	nop
			break;
 800238e:	e016      	b.n	80023be <pc14LedCntrl+0x6e>
		case UNDERVOLTAGEONLED:
			osDelay(300);
 8002390:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002394:	f006 fb58 	bl	8008a48 <osDelay>
			GPIOC->ODR ^= GPIO_ODR_14;
 8002398:	4b0a      	ldr	r3, [pc, #40]	; (80023c4 <pc14LedCntrl+0x74>)
 800239a:	695b      	ldr	r3, [r3, #20]
 800239c:	4a09      	ldr	r2, [pc, #36]	; (80023c4 <pc14LedCntrl+0x74>)
 800239e:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 80023a2:	6153      	str	r3, [r2, #20]
			__asm__ volatile("NOP");
 80023a4:	bf00      	nop
			break;
 80023a6:	e00a      	b.n	80023be <pc14LedCntrl+0x6e>
		default:
			GPIOC->ODR &= ~GPIO_ODR_14;
 80023a8:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <pc14LedCntrl+0x74>)
 80023aa:	695b      	ldr	r3, [r3, #20]
 80023ac:	4a05      	ldr	r2, [pc, #20]	; (80023c4 <pc14LedCntrl+0x74>)
 80023ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023b2:	6153      	str	r3, [r2, #20]
			osDelay(200);
 80023b4:	20c8      	movs	r0, #200	; 0xc8
 80023b6:	f006 fb47 	bl	8008a48 <osDelay>
			__asm__ volatile("NOP");
 80023ba:	bf00      	nop
			break;
 80023bc:	bf00      	nop
    osDelay(1);
 80023be:	e7cb      	b.n	8002358 <pc14LedCntrl+0x8>
 80023c0:	200009c0 	.word	0x200009c0
 80023c4:	48000800 	.word	0x48000800

080023c8 <espCommunication>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_espCommunication */
void espCommunication(void const * argument)
{
 80023c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023cc:	b0aa      	sub	sp, #168	; 0xa8
 80023ce:	af12      	add	r7, sp, #72	; 0x48
 80023d0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* USER CODE BEGIN espCommunication */
	vTaskDelay( pdMS_TO_TICKS( 600 ) );
 80023d2:	f44f 7016 	mov.w	r0, #600	; 0x258
 80023d6:	f007 fb6d 	bl	8009ab4 <vTaskDelay>
	taskENTER_CRITICAL();
 80023da:	f008 fdeb 	bl	800afb4 <vPortEnterCritical>
	  GPIOB->ODR |= (1<<1); //RST_ESP
 80023de:	4baa      	ldr	r3, [pc, #680]	; (8002688 <espCommunication+0x2c0>)
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	4aa9      	ldr	r2, [pc, #676]	; (8002688 <espCommunication+0x2c0>)
 80023e4:	f043 0302 	orr.w	r3, r3, #2
 80023e8:	6153      	str	r3, [r2, #20]
	  GPIOB->ODR |= (1<<2); //EN_ESP
 80023ea:	4ba7      	ldr	r3, [pc, #668]	; (8002688 <espCommunication+0x2c0>)
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	4aa6      	ldr	r2, [pc, #664]	; (8002688 <espCommunication+0x2c0>)
 80023f0:	f043 0304 	orr.w	r3, r3, #4
 80023f4:	6153      	str	r3, [r2, #20]
	  sprintf(txBuffer, "AT\r\n");
 80023f6:	49a5      	ldr	r1, [pc, #660]	; (800268c <espCommunication+0x2c4>)
 80023f8:	48a5      	ldr	r0, [pc, #660]	; (8002690 <espCommunication+0x2c8>)
 80023fa:	f009 fded 	bl	800bfd8 <siprintf>
	  char controlAnsw[] = "AT\r\r\n\r\nOK\r\n";
 80023fe:	4aa5      	ldr	r2, [pc, #660]	; (8002694 <espCommunication+0x2cc>)
 8002400:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002404:	ca07      	ldmia	r2, {r0, r1, r2}
 8002406:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	  while(strcmp(rxBuffer, controlAnsw) != 0) {
 800240a:	e019      	b.n	8002440 <espCommunication+0x78>
		  HAL_UART_Transmit(&huart3, (uint8_t*)txBuffer, strlen(txBuffer), 250);
 800240c:	48a0      	ldr	r0, [pc, #640]	; (8002690 <espCommunication+0x2c8>)
 800240e:	f7fd ff3f 	bl	8000290 <strlen>
 8002412:	4603      	mov	r3, r0
 8002414:	b29a      	uxth	r2, r3
 8002416:	23fa      	movs	r3, #250	; 0xfa
 8002418:	499d      	ldr	r1, [pc, #628]	; (8002690 <espCommunication+0x2c8>)
 800241a:	489f      	ldr	r0, [pc, #636]	; (8002698 <espCommunication+0x2d0>)
 800241c:	f005 fe0a 	bl	8008034 <HAL_UART_Transmit>
		  HAL_UART_Receive(&huart3, (uint8_t*)rxBuffer, strlen(controlAnsw), 250);
 8002420:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002424:	4618      	mov	r0, r3
 8002426:	f7fd ff33 	bl	8000290 <strlen>
 800242a:	4603      	mov	r3, r0
 800242c:	b29a      	uxth	r2, r3
 800242e:	23fa      	movs	r3, #250	; 0xfa
 8002430:	499a      	ldr	r1, [pc, #616]	; (800269c <espCommunication+0x2d4>)
 8002432:	4899      	ldr	r0, [pc, #612]	; (8002698 <espCommunication+0x2d0>)
 8002434:	f005 fe88 	bl	8008148 <HAL_UART_Receive>
		  vTaskDelay( pdMS_TO_TICKS( 100 ) );
 8002438:	2064      	movs	r0, #100	; 0x64
 800243a:	f007 fb3b 	bl	8009ab4 <vTaskDelay>
		  __asm__ volatile("NOP");
 800243e:	bf00      	nop
	  while(strcmp(rxBuffer, controlAnsw) != 0) {
 8002440:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002444:	4619      	mov	r1, r3
 8002446:	4895      	ldr	r0, [pc, #596]	; (800269c <espCommunication+0x2d4>)
 8002448:	f7fd fec2 	bl	80001d0 <strcmp>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d1dc      	bne.n	800240c <espCommunication+0x44>
	  }

	  sprintf(txBuffer, "AT+CWMODE_CUR=1\r\n");
 8002452:	4993      	ldr	r1, [pc, #588]	; (80026a0 <espCommunication+0x2d8>)
 8002454:	488e      	ldr	r0, [pc, #568]	; (8002690 <espCommunication+0x2c8>)
 8002456:	f009 fdbf 	bl	800bfd8 <siprintf>
	  sendATCommand(&huart3, "AT+CWMODE_CUR=1\r\n", strlen(txBuffer) , 250);
 800245a:	488d      	ldr	r0, [pc, #564]	; (8002690 <espCommunication+0x2c8>)
 800245c:	f7fd ff18 	bl	8000290 <strlen>
 8002460:	4603      	mov	r3, r0
 8002462:	461a      	mov	r2, r3
 8002464:	23fa      	movs	r3, #250	; 0xfa
 8002466:	498e      	ldr	r1, [pc, #568]	; (80026a0 <espCommunication+0x2d8>)
 8002468:	488b      	ldr	r0, [pc, #556]	; (8002698 <espCommunication+0x2d0>)
 800246a:	f7fe fd10 	bl	8000e8e <sendATCommand>
	  receiveAnswer(&huart3, rxBuffer, sizeof(rxBuffer), 250);
 800246e:	23fa      	movs	r3, #250	; 0xfa
 8002470:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002474:	4989      	ldr	r1, [pc, #548]	; (800269c <espCommunication+0x2d4>)
 8002476:	4888      	ldr	r0, [pc, #544]	; (8002698 <espCommunication+0x2d0>)
 8002478:	f7fe fd2d 	bl	8000ed6 <receiveAnswer>

	  sprintf(txBuffer, "AT+CWJAP_CUR=\"RedmiGiGidra\",\"DimaDimaDimon\"\r\n");
 800247c:	4989      	ldr	r1, [pc, #548]	; (80026a4 <espCommunication+0x2dc>)
 800247e:	4884      	ldr	r0, [pc, #528]	; (8002690 <espCommunication+0x2c8>)
 8002480:	f009 fdaa 	bl	800bfd8 <siprintf>
	  sendATCommand(&huart3, txBuffer, strlen(txBuffer), 1000);
 8002484:	4882      	ldr	r0, [pc, #520]	; (8002690 <espCommunication+0x2c8>)
 8002486:	f7fd ff03 	bl	8000290 <strlen>
 800248a:	4603      	mov	r3, r0
 800248c:	461a      	mov	r2, r3
 800248e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002492:	497f      	ldr	r1, [pc, #508]	; (8002690 <espCommunication+0x2c8>)
 8002494:	4880      	ldr	r0, [pc, #512]	; (8002698 <espCommunication+0x2d0>)
 8002496:	f7fe fcfa 	bl	8000e8e <sendATCommand>
	  receiveAnswer(&huart3, rxBuffer, sizeof(rxBuffer), 10000);
 800249a:	f242 7310 	movw	r3, #10000	; 0x2710
 800249e:	f240 12ff 	movw	r2, #511	; 0x1ff
 80024a2:	497e      	ldr	r1, [pc, #504]	; (800269c <espCommunication+0x2d4>)
 80024a4:	487c      	ldr	r0, [pc, #496]	; (8002698 <espCommunication+0x2d0>)
 80024a6:	f7fe fd16 	bl	8000ed6 <receiveAnswer>

	  taskEXIT_CRITICAL();
 80024aa:	f008 fdb3 	bl	800b014 <vPortExitCritical>

	  memset(rxBuffer, '\0', sizeof(rxBuffer));
 80024ae:	f240 12ff 	movw	r2, #511	; 0x1ff
 80024b2:	2100      	movs	r1, #0
 80024b4:	4879      	ldr	r0, [pc, #484]	; (800269c <espCommunication+0x2d4>)
 80024b6:	f009 fdf2 	bl	800c09e <memset>
	  USART3->CR3 |= USART_CR3_DMAR;
 80024ba:	4b7b      	ldr	r3, [pc, #492]	; (80026a8 <espCommunication+0x2e0>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	4a7a      	ldr	r2, [pc, #488]	; (80026a8 <espCommunication+0x2e0>)
 80024c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024c4:	6093      	str	r3, [r2, #8]
	  DMA1_Channel3->CCR |= DMA_CCR_EN; //Starting continuous DMA on RX
 80024c6:	4b79      	ldr	r3, [pc, #484]	; (80026ac <espCommunication+0x2e4>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a78      	ldr	r2, [pc, #480]	; (80026ac <espCommunication+0x2e4>)
 80024cc:	f043 0301 	orr.w	r3, r3, #1
 80024d0:	6013      	str	r3, [r2, #0]

	  vTaskDelay( pdMS_TO_TICKS( 2000 ) );
 80024d2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80024d6:	f007 faed 	bl	8009ab4 <vTaskDelay>

	  sprintf(txBuffer, "ATE0\r\n");
 80024da:	4975      	ldr	r1, [pc, #468]	; (80026b0 <espCommunication+0x2e8>)
 80024dc:	486c      	ldr	r0, [pc, #432]	; (8002690 <espCommunication+0x2c8>)
 80024de:	f009 fd7b 	bl	800bfd8 <siprintf>
	  sendATCommand(&huart3, txBuffer, strlen(txBuffer), 250);
 80024e2:	486b      	ldr	r0, [pc, #428]	; (8002690 <espCommunication+0x2c8>)
 80024e4:	f7fd fed4 	bl	8000290 <strlen>
 80024e8:	4603      	mov	r3, r0
 80024ea:	461a      	mov	r2, r3
 80024ec:	23fa      	movs	r3, #250	; 0xfa
 80024ee:	4968      	ldr	r1, [pc, #416]	; (8002690 <espCommunication+0x2c8>)
 80024f0:	4869      	ldr	r0, [pc, #420]	; (8002698 <espCommunication+0x2d0>)
 80024f2:	f7fe fccc 	bl	8000e8e <sendATCommand>
	  vTaskDelay( pdMS_TO_TICKS( 100 ) );
 80024f6:	2064      	movs	r0, #100	; 0x64
 80024f8:	f007 fadc 	bl	8009ab4 <vTaskDelay>

	  sprintf(txBuffer, "AT+CIPCLOSE\r\n");
 80024fc:	496d      	ldr	r1, [pc, #436]	; (80026b4 <espCommunication+0x2ec>)
 80024fe:	4864      	ldr	r0, [pc, #400]	; (8002690 <espCommunication+0x2c8>)
 8002500:	f009 fd6a 	bl	800bfd8 <siprintf>
	  sendATCommand(&huart3, txBuffer, strlen(txBuffer), 250);
 8002504:	4862      	ldr	r0, [pc, #392]	; (8002690 <espCommunication+0x2c8>)
 8002506:	f7fd fec3 	bl	8000290 <strlen>
 800250a:	4603      	mov	r3, r0
 800250c:	461a      	mov	r2, r3
 800250e:	23fa      	movs	r3, #250	; 0xfa
 8002510:	495f      	ldr	r1, [pc, #380]	; (8002690 <espCommunication+0x2c8>)
 8002512:	4861      	ldr	r0, [pc, #388]	; (8002698 <espCommunication+0x2d0>)
 8002514:	f7fe fcbb 	bl	8000e8e <sendATCommand>
	  vTaskDelay( pdMS_TO_TICKS( 250 ) );
 8002518:	20fa      	movs	r0, #250	; 0xfa
 800251a:	f007 facb 	bl	8009ab4 <vTaskDelay>

	  sprintf(txBuffer, "AT+CIPSTART=\"TCP\",\"192.168.137.1\",8080\r\n");
 800251e:	4966      	ldr	r1, [pc, #408]	; (80026b8 <espCommunication+0x2f0>)
 8002520:	485b      	ldr	r0, [pc, #364]	; (8002690 <espCommunication+0x2c8>)
 8002522:	f009 fd59 	bl	800bfd8 <siprintf>
	  sendATCommand(&huart3, txBuffer, strlen(txBuffer), 250);
 8002526:	485a      	ldr	r0, [pc, #360]	; (8002690 <espCommunication+0x2c8>)
 8002528:	f7fd feb2 	bl	8000290 <strlen>
 800252c:	4603      	mov	r3, r0
 800252e:	461a      	mov	r2, r3
 8002530:	23fa      	movs	r3, #250	; 0xfa
 8002532:	4957      	ldr	r1, [pc, #348]	; (8002690 <espCommunication+0x2c8>)
 8002534:	4858      	ldr	r0, [pc, #352]	; (8002698 <espCommunication+0x2d0>)
 8002536:	f7fe fcaa 	bl	8000e8e <sendATCommand>
	  vTaskDelay( pdMS_TO_TICKS( 40 ) );
 800253a:	2028      	movs	r0, #40	; 0x28
 800253c:	f007 faba 	bl	8009ab4 <vTaskDelay>

	  memset(txBuffer, '\0', sizeof(txBuffer));
 8002540:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002544:	2100      	movs	r1, #0
 8002546:	4852      	ldr	r0, [pc, #328]	; (8002690 <espCommunication+0x2c8>)
 8002548:	f009 fda9 	bl	800c09e <memset>
      // Creating the entire GET request string
	  sprintf(txBuffer, "GET /robot HTTP/1.1\r\n"
 800254c:	495b      	ldr	r1, [pc, #364]	; (80026bc <espCommunication+0x2f4>)
 800254e:	4850      	ldr	r0, [pc, #320]	; (8002690 <espCommunication+0x2c8>)
 8002550:	f009 fd42 	bl	800bfd8 <siprintf>
						  "Host: 192.168.137.1\r\n");
	  int getRequestLength = strlen(txBuffer);
 8002554:	484e      	ldr	r0, [pc, #312]	; (8002690 <espCommunication+0x2c8>)
 8002556:	f7fd fe9b 	bl	8000290 <strlen>
 800255a:	4603      	mov	r3, r0
 800255c:	65bb      	str	r3, [r7, #88]	; 0x58
	  char pDataBuf[20];
	  sprintf(pDataBuf, "AT+CIPSEND=%d\r\n", getRequestLength);
 800255e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002562:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002564:	4956      	ldr	r1, [pc, #344]	; (80026c0 <espCommunication+0x2f8>)
 8002566:	4618      	mov	r0, r3
 8002568:	f009 fd36 	bl	800bfd8 <siprintf>
	  sendATCommand(&huart3, pDataBuf, sizeof(pDataBuf), 250);
 800256c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002570:	23fa      	movs	r3, #250	; 0xfa
 8002572:	2214      	movs	r2, #20
 8002574:	4848      	ldr	r0, [pc, #288]	; (8002698 <espCommunication+0x2d0>)
 8002576:	f7fe fc8a 	bl	8000e8e <sendATCommand>
	  vTaskDelay( pdMS_TO_TICKS( 10 ) );
 800257a:	200a      	movs	r0, #10
 800257c:	f007 fa9a 	bl	8009ab4 <vTaskDelay>
	  sendATCommand(&huart3, txBuffer, getRequestLength, 250);
 8002580:	23fa      	movs	r3, #250	; 0xfa
 8002582:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002584:	4942      	ldr	r1, [pc, #264]	; (8002690 <espCommunication+0x2c8>)
 8002586:	4844      	ldr	r0, [pc, #272]	; (8002698 <espCommunication+0x2d0>)
 8002588:	f7fe fc81 	bl	8000e8e <sendATCommand>

	  memset(txBuffer, '\0', sizeof(txBuffer));
 800258c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002590:	2100      	movs	r1, #0
 8002592:	483f      	ldr	r0, [pc, #252]	; (8002690 <espCommunication+0x2c8>)
 8002594:	f009 fd83 	bl	800c09e <memset>
	  vTaskDelay( pdMS_TO_TICKS( 50 ) );
 8002598:	2032      	movs	r0, #50	; 0x32
 800259a:	f007 fa8b 	bl	8009ab4 <vTaskDelay>

	  __asm__ volatile("NOP");
 800259e:	bf00      	nop

  /* Infinite loop */
  for(;;)
  {
	  debugVar = 1;
 80025a0:	4b48      	ldr	r3, [pc, #288]	; (80026c4 <espCommunication+0x2fc>)
 80025a2:	2201      	movs	r2, #1
 80025a4:	601a      	str	r2, [r3, #0]
	  // Calculate the number of bytes received since the last processing
//	  uint8_t receivedBytes = 0;
	  if((ESPRXBUFFERSIZE - DMA1_Channel3->CNDTR) < rxBufferHead) {
 80025a6:	4b41      	ldr	r3, [pc, #260]	; (80026ac <espCommunication+0x2e4>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f5c3 73ff 	rsb	r3, r3, #510	; 0x1fe
 80025ae:	3301      	adds	r3, #1
 80025b0:	4a45      	ldr	r2, [pc, #276]	; (80026c8 <espCommunication+0x300>)
 80025b2:	8812      	ldrh	r2, [r2, #0]
 80025b4:	b292      	uxth	r2, r2
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d218      	bcs.n	80025ec <espCommunication+0x224>
		  receivedBytes = (ESPRXBUFFERSIZE - rxBufferHead + ESPRXBUFFERSIZE - DMA1_Channel3->CNDTR) % ESPRXBUFFERSIZE;
 80025ba:	4b43      	ldr	r3, [pc, #268]	; (80026c8 <espCommunication+0x300>)
 80025bc:	881b      	ldrh	r3, [r3, #0]
 80025be:	b29b      	uxth	r3, r3
 80025c0:	461a      	mov	r2, r3
 80025c2:	4b3a      	ldr	r3, [pc, #232]	; (80026ac <espCommunication+0x2e4>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	4413      	add	r3, r2
 80025c8:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 80025cc:	3302      	adds	r3, #2
 80025ce:	4a3f      	ldr	r2, [pc, #252]	; (80026cc <espCommunication+0x304>)
 80025d0:	fba2 1203 	umull	r1, r2, r2, r3
 80025d4:	1a99      	subs	r1, r3, r2
 80025d6:	0849      	lsrs	r1, r1, #1
 80025d8:	440a      	add	r2, r1
 80025da:	0a11      	lsrs	r1, r2, #8
 80025dc:	460a      	mov	r2, r1
 80025de:	0252      	lsls	r2, r2, #9
 80025e0:	1a52      	subs	r2, r2, r1
 80025e2:	1a99      	subs	r1, r3, r2
 80025e4:	b2ca      	uxtb	r2, r1
 80025e6:	4b3a      	ldr	r3, [pc, #232]	; (80026d0 <espCommunication+0x308>)
 80025e8:	701a      	strb	r2, [r3, #0]
 80025ea:	e016      	b.n	800261a <espCommunication+0x252>
	  } else {
		  receivedBytes = (ESPRXBUFFERSIZE - DMA1_Channel3->CNDTR -rxBufferHead) % ESPRXBUFFERSIZE;
 80025ec:	4b2f      	ldr	r3, [pc, #188]	; (80026ac <espCommunication+0x2e4>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	4a35      	ldr	r2, [pc, #212]	; (80026c8 <espCommunication+0x300>)
 80025f2:	8812      	ldrh	r2, [r2, #0]
 80025f4:	b292      	uxth	r2, r2
 80025f6:	4413      	add	r3, r2
 80025f8:	f5c3 73ff 	rsb	r3, r3, #510	; 0x1fe
 80025fc:	3301      	adds	r3, #1
 80025fe:	4a33      	ldr	r2, [pc, #204]	; (80026cc <espCommunication+0x304>)
 8002600:	fba2 1203 	umull	r1, r2, r2, r3
 8002604:	1a99      	subs	r1, r3, r2
 8002606:	0849      	lsrs	r1, r1, #1
 8002608:	440a      	add	r2, r1
 800260a:	0a11      	lsrs	r1, r2, #8
 800260c:	460a      	mov	r2, r1
 800260e:	0252      	lsls	r2, r2, #9
 8002610:	1a52      	subs	r2, r2, r1
 8002612:	1a99      	subs	r1, r3, r2
 8002614:	b2ca      	uxtb	r2, r1
 8002616:	4b2e      	ldr	r3, [pc, #184]	; (80026d0 <espCommunication+0x308>)
 8002618:	701a      	strb	r2, [r3, #0]
	  }

	  uint16_t sizeRxBufCopy = sizeof(rxBufferCopy);
 800261a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800261e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	  memset(rxBufferCopy, '\0', sizeRxBufCopy);
 8002622:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002626:	461a      	mov	r2, r3
 8002628:	2100      	movs	r1, #0
 800262a:	482a      	ldr	r0, [pc, #168]	; (80026d4 <espCommunication+0x30c>)
 800262c:	f009 fd37 	bl	800c09e <memset>
	  for(uint16_t i = 0; i < receivedBytes; i++) {
 8002630:	2300      	movs	r3, #0
 8002632:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8002636:	e019      	b.n	800266c <espCommunication+0x2a4>
		  rxBufferCopy[i] = rxBuffer[(rxBufferHead + i)%sizeRxBufCopy];
 8002638:	4b23      	ldr	r3, [pc, #140]	; (80026c8 <espCommunication+0x300>)
 800263a:	881b      	ldrh	r3, [r3, #0]
 800263c:	b29b      	uxth	r3, r3
 800263e:	461a      	mov	r2, r3
 8002640:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002644:	4413      	add	r3, r2
 8002646:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 800264a:	fb93 f1f2 	sdiv	r1, r3, r2
 800264e:	fb01 f202 	mul.w	r2, r1, r2
 8002652:	1a9a      	subs	r2, r3, r2
 8002654:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002658:	4910      	ldr	r1, [pc, #64]	; (800269c <espCommunication+0x2d4>)
 800265a:	5c8a      	ldrb	r2, [r1, r2]
 800265c:	b2d1      	uxtb	r1, r2
 800265e:	4a1d      	ldr	r2, [pc, #116]	; (80026d4 <espCommunication+0x30c>)
 8002660:	54d1      	strb	r1, [r2, r3]
	  for(uint16_t i = 0; i < receivedBytes; i++) {
 8002662:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002666:	3301      	adds	r3, #1
 8002668:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800266c:	4b18      	ldr	r3, [pc, #96]	; (80026d0 <espCommunication+0x308>)
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	b29b      	uxth	r3, r3
 8002672:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8002676:	429a      	cmp	r2, r3
 8002678:	d3de      	bcc.n	8002638 <espCommunication+0x270>
	  }

	  debugVar = 5;
 800267a:	4b12      	ldr	r3, [pc, #72]	; (80026c4 <espCommunication+0x2fc>)
 800267c:	2205      	movs	r2, #5
 800267e:	601a      	str	r2, [r3, #0]

	  // Process the received data
	  for(uint16_t i = 0; i < receivedBytes; i++) {
 8002680:	2300      	movs	r3, #0
 8002682:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8002686:	e22b      	b.n	8002ae0 <espCommunication+0x718>
 8002688:	48000400 	.word	0x48000400
 800268c:	0800f278 	.word	0x0800f278
 8002690:	20000a30 	.word	0x20000a30
 8002694:	0800f4d0 	.word	0x0800f4d0
 8002698:	20000880 	.word	0x20000880
 800269c:	20000c30 	.word	0x20000c30
 80026a0:	0800f280 	.word	0x0800f280
 80026a4:	0800f294 	.word	0x0800f294
 80026a8:	40004800 	.word	0x40004800
 80026ac:	40020030 	.word	0x40020030
 80026b0:	0800f2c4 	.word	0x0800f2c4
 80026b4:	0800f2cc 	.word	0x0800f2cc
 80026b8:	0800f2dc 	.word	0x0800f2dc
 80026bc:	0800f308 	.word	0x0800f308
 80026c0:	0800f334 	.word	0x0800f334
 80026c4:	20000f54 	.word	0x20000f54
 80026c8:	20000e30 	.word	0x20000e30
 80026cc:	00804021 	.word	0x00804021
 80026d0:	20000e32 	.word	0x20000e32
 80026d4:	20000e34 	.word	0x20000e34
		  debugVar = 6;
 80026d8:	4b9a      	ldr	r3, [pc, #616]	; (8002944 <espCommunication+0x57c>)
 80026da:	2206      	movs	r2, #6
 80026dc:	601a      	str	r2, [r3, #0]
		  debugVar2 = i;
 80026de:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80026e2:	4a99      	ldr	r2, [pc, #612]	; (8002948 <espCommunication+0x580>)
 80026e4:	6013      	str	r3, [r2, #0]
		  if((rxBuffer[(rxBufferHead + i)%ESPRXBUFFERSIZE] == 'T') &&
 80026e6:	4b99      	ldr	r3, [pc, #612]	; (800294c <espCommunication+0x584>)
 80026e8:	881b      	ldrh	r3, [r3, #0]
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	461a      	mov	r2, r3
 80026ee:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80026f2:	441a      	add	r2, r3
 80026f4:	4b96      	ldr	r3, [pc, #600]	; (8002950 <espCommunication+0x588>)
 80026f6:	fb83 1302 	smull	r1, r3, r3, r2
 80026fa:	4413      	add	r3, r2
 80026fc:	1219      	asrs	r1, r3, #8
 80026fe:	17d3      	asrs	r3, r2, #31
 8002700:	1ac9      	subs	r1, r1, r3
 8002702:	460b      	mov	r3, r1
 8002704:	025b      	lsls	r3, r3, #9
 8002706:	1a5b      	subs	r3, r3, r1
 8002708:	1ad1      	subs	r1, r2, r3
 800270a:	4b92      	ldr	r3, [pc, #584]	; (8002954 <espCommunication+0x58c>)
 800270c:	5c5b      	ldrb	r3, [r3, r1]
 800270e:	b2db      	uxtb	r3, r3
 8002710:	2b54      	cmp	r3, #84	; 0x54
 8002712:	f040 8098 	bne.w	8002846 <espCommunication+0x47e>
		     (rxBuffer[(rxBufferHead + i + 1)%ESPRXBUFFERSIZE] == 'S') &&
 8002716:	4b8d      	ldr	r3, [pc, #564]	; (800294c <espCommunication+0x584>)
 8002718:	881b      	ldrh	r3, [r3, #0]
 800271a:	b29b      	uxth	r3, r3
 800271c:	461a      	mov	r2, r3
 800271e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002722:	4413      	add	r3, r2
 8002724:	1c5a      	adds	r2, r3, #1
 8002726:	4b8a      	ldr	r3, [pc, #552]	; (8002950 <espCommunication+0x588>)
 8002728:	fb83 1302 	smull	r1, r3, r3, r2
 800272c:	4413      	add	r3, r2
 800272e:	1219      	asrs	r1, r3, #8
 8002730:	17d3      	asrs	r3, r2, #31
 8002732:	1ac9      	subs	r1, r1, r3
 8002734:	460b      	mov	r3, r1
 8002736:	025b      	lsls	r3, r3, #9
 8002738:	1a5b      	subs	r3, r3, r1
 800273a:	1ad1      	subs	r1, r2, r3
 800273c:	4b85      	ldr	r3, [pc, #532]	; (8002954 <espCommunication+0x58c>)
 800273e:	5c5b      	ldrb	r3, [r3, r1]
 8002740:	b2db      	uxtb	r3, r3
		  if((rxBuffer[(rxBufferHead + i)%ESPRXBUFFERSIZE] == 'T') &&
 8002742:	2b53      	cmp	r3, #83	; 0x53
 8002744:	d17f      	bne.n	8002846 <espCommunication+0x47e>
			 (rxBuffer[(rxBufferHead + i + 2)%ESPRXBUFFERSIZE] == 'P')) {
 8002746:	4b81      	ldr	r3, [pc, #516]	; (800294c <espCommunication+0x584>)
 8002748:	881b      	ldrh	r3, [r3, #0]
 800274a:	b29b      	uxth	r3, r3
 800274c:	461a      	mov	r2, r3
 800274e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002752:	4413      	add	r3, r2
 8002754:	1c9a      	adds	r2, r3, #2
 8002756:	4b7e      	ldr	r3, [pc, #504]	; (8002950 <espCommunication+0x588>)
 8002758:	fb83 1302 	smull	r1, r3, r3, r2
 800275c:	4413      	add	r3, r2
 800275e:	1219      	asrs	r1, r3, #8
 8002760:	17d3      	asrs	r3, r2, #31
 8002762:	1ac9      	subs	r1, r1, r3
 8002764:	460b      	mov	r3, r1
 8002766:	025b      	lsls	r3, r3, #9
 8002768:	1a5b      	subs	r3, r3, r1
 800276a:	1ad1      	subs	r1, r2, r3
 800276c:	4b79      	ldr	r3, [pc, #484]	; (8002954 <espCommunication+0x58c>)
 800276e:	5c5b      	ldrb	r3, [r3, r1]
 8002770:	b2db      	uxtb	r3, r3
		     (rxBuffer[(rxBufferHead + i + 1)%ESPRXBUFFERSIZE] == 'S') &&
 8002772:	2b50      	cmp	r3, #80	; 0x50
 8002774:	d167      	bne.n	8002846 <espCommunication+0x47e>
			  if(rxBuffer[(rxBufferHead + i + 3)%ESPRXBUFFERSIZE] == '-') {
 8002776:	4b75      	ldr	r3, [pc, #468]	; (800294c <espCommunication+0x584>)
 8002778:	881b      	ldrh	r3, [r3, #0]
 800277a:	b29b      	uxth	r3, r3
 800277c:	461a      	mov	r2, r3
 800277e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002782:	4413      	add	r3, r2
 8002784:	1cda      	adds	r2, r3, #3
 8002786:	4b72      	ldr	r3, [pc, #456]	; (8002950 <espCommunication+0x588>)
 8002788:	fb83 1302 	smull	r1, r3, r3, r2
 800278c:	4413      	add	r3, r2
 800278e:	1219      	asrs	r1, r3, #8
 8002790:	17d3      	asrs	r3, r2, #31
 8002792:	1ac9      	subs	r1, r1, r3
 8002794:	460b      	mov	r3, r1
 8002796:	025b      	lsls	r3, r3, #9
 8002798:	1a5b      	subs	r3, r3, r1
 800279a:	1ad1      	subs	r1, r2, r3
 800279c:	4b6d      	ldr	r3, [pc, #436]	; (8002954 <espCommunication+0x58c>)
 800279e:	5c5b      	ldrb	r3, [r3, r1]
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b2d      	cmp	r3, #45	; 0x2d
 80027a4:	d119      	bne.n	80027da <espCommunication+0x412>
				  if(rxBuffer[(rxBufferHead + i + 8)%ESPRXBUFFERSIZE] != '_') continue;
 80027a6:	4b69      	ldr	r3, [pc, #420]	; (800294c <espCommunication+0x584>)
 80027a8:	881b      	ldrh	r3, [r3, #0]
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	461a      	mov	r2, r3
 80027ae:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80027b2:	4413      	add	r3, r2
 80027b4:	f103 0208 	add.w	r2, r3, #8
 80027b8:	4b65      	ldr	r3, [pc, #404]	; (8002950 <espCommunication+0x588>)
 80027ba:	fb83 1302 	smull	r1, r3, r3, r2
 80027be:	4413      	add	r3, r2
 80027c0:	1219      	asrs	r1, r3, #8
 80027c2:	17d3      	asrs	r3, r2, #31
 80027c4:	1ac9      	subs	r1, r1, r3
 80027c6:	460b      	mov	r3, r1
 80027c8:	025b      	lsls	r3, r3, #9
 80027ca:	1a5b      	subs	r3, r3, r1
 80027cc:	1ad1      	subs	r1, r2, r3
 80027ce:	4b61      	ldr	r3, [pc, #388]	; (8002954 <espCommunication+0x58c>)
 80027d0:	5c5b      	ldrb	r3, [r3, r1]
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	2b5f      	cmp	r3, #95	; 0x5f
 80027d6:	d019      	beq.n	800280c <espCommunication+0x444>
 80027d8:	e17d      	b.n	8002ad6 <espCommunication+0x70e>
			  } else {
				  if(rxBuffer[(rxBufferHead + i + 7)%ESPRXBUFFERSIZE] != '_') continue;
 80027da:	4b5c      	ldr	r3, [pc, #368]	; (800294c <espCommunication+0x584>)
 80027dc:	881b      	ldrh	r3, [r3, #0]
 80027de:	b29b      	uxth	r3, r3
 80027e0:	461a      	mov	r2, r3
 80027e2:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80027e6:	4413      	add	r3, r2
 80027e8:	1dda      	adds	r2, r3, #7
 80027ea:	4b59      	ldr	r3, [pc, #356]	; (8002950 <espCommunication+0x588>)
 80027ec:	fb83 1302 	smull	r1, r3, r3, r2
 80027f0:	4413      	add	r3, r2
 80027f2:	1219      	asrs	r1, r3, #8
 80027f4:	17d3      	asrs	r3, r2, #31
 80027f6:	1ac9      	subs	r1, r1, r3
 80027f8:	460b      	mov	r3, r1
 80027fa:	025b      	lsls	r3, r3, #9
 80027fc:	1a5b      	subs	r3, r3, r1
 80027fe:	1ad1      	subs	r1, r2, r3
 8002800:	4b54      	ldr	r3, [pc, #336]	; (8002954 <espCommunication+0x58c>)
 8002802:	5c5b      	ldrb	r3, [r3, r1]
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b5f      	cmp	r3, #95	; 0x5f
 8002808:	f040 8162 	bne.w	8002ad0 <espCommunication+0x708>
			  }
			  tSpeed = parseFloat(rxBuffer, ((rxBufferHead + i + 3)%ESPRXBUFFERSIZE));
 800280c:	4b4f      	ldr	r3, [pc, #316]	; (800294c <espCommunication+0x584>)
 800280e:	881b      	ldrh	r3, [r3, #0]
 8002810:	b29b      	uxth	r3, r3
 8002812:	461a      	mov	r2, r3
 8002814:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002818:	4413      	add	r3, r2
 800281a:	1cda      	adds	r2, r3, #3
 800281c:	4b4c      	ldr	r3, [pc, #304]	; (8002950 <espCommunication+0x588>)
 800281e:	fb83 1302 	smull	r1, r3, r3, r2
 8002822:	4413      	add	r3, r2
 8002824:	1219      	asrs	r1, r3, #8
 8002826:	17d3      	asrs	r3, r2, #31
 8002828:	1ac9      	subs	r1, r1, r3
 800282a:	460b      	mov	r3, r1
 800282c:	025b      	lsls	r3, r3, #9
 800282e:	1a5b      	subs	r3, r3, r1
 8002830:	1ad1      	subs	r1, r2, r3
 8002832:	b28b      	uxth	r3, r1
 8002834:	4619      	mov	r1, r3
 8002836:	4847      	ldr	r0, [pc, #284]	; (8002954 <espCommunication+0x58c>)
 8002838:	f7fe fbca 	bl	8000fd0 <parseFloat>
 800283c:	eef0 7a40 	vmov.f32	s15, s0
 8002840:	4b45      	ldr	r3, [pc, #276]	; (8002958 <espCommunication+0x590>)
 8002842:	edc3 7a00 	vstr	s15, [r3]
		  }
		  debugVar = 10;
 8002846:	4b3f      	ldr	r3, [pc, #252]	; (8002944 <espCommunication+0x57c>)
 8002848:	220a      	movs	r2, #10
 800284a:	601a      	str	r2, [r3, #0]
		  if((rxBuffer[(rxBufferHead + i)%ESPRXBUFFERSIZE] == 'A') &&
 800284c:	4b3f      	ldr	r3, [pc, #252]	; (800294c <espCommunication+0x584>)
 800284e:	881b      	ldrh	r3, [r3, #0]
 8002850:	b29b      	uxth	r3, r3
 8002852:	461a      	mov	r2, r3
 8002854:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002858:	441a      	add	r2, r3
 800285a:	4b3d      	ldr	r3, [pc, #244]	; (8002950 <espCommunication+0x588>)
 800285c:	fb83 1302 	smull	r1, r3, r3, r2
 8002860:	4413      	add	r3, r2
 8002862:	1219      	asrs	r1, r3, #8
 8002864:	17d3      	asrs	r3, r2, #31
 8002866:	1ac9      	subs	r1, r1, r3
 8002868:	460b      	mov	r3, r1
 800286a:	025b      	lsls	r3, r3, #9
 800286c:	1a5b      	subs	r3, r3, r1
 800286e:	1ad1      	subs	r1, r2, r3
 8002870:	4b38      	ldr	r3, [pc, #224]	; (8002954 <espCommunication+0x58c>)
 8002872:	5c5b      	ldrb	r3, [r3, r1]
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b41      	cmp	r3, #65	; 0x41
 8002878:	f040 80a6 	bne.w	80029c8 <espCommunication+0x600>
		     (rxBuffer[(rxBufferHead + i + 1)%ESPRXBUFFERSIZE] == 'S') &&
 800287c:	4b33      	ldr	r3, [pc, #204]	; (800294c <espCommunication+0x584>)
 800287e:	881b      	ldrh	r3, [r3, #0]
 8002880:	b29b      	uxth	r3, r3
 8002882:	461a      	mov	r2, r3
 8002884:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002888:	4413      	add	r3, r2
 800288a:	1c5a      	adds	r2, r3, #1
 800288c:	4b30      	ldr	r3, [pc, #192]	; (8002950 <espCommunication+0x588>)
 800288e:	fb83 1302 	smull	r1, r3, r3, r2
 8002892:	4413      	add	r3, r2
 8002894:	1219      	asrs	r1, r3, #8
 8002896:	17d3      	asrs	r3, r2, #31
 8002898:	1ac9      	subs	r1, r1, r3
 800289a:	460b      	mov	r3, r1
 800289c:	025b      	lsls	r3, r3, #9
 800289e:	1a5b      	subs	r3, r3, r1
 80028a0:	1ad1      	subs	r1, r2, r3
 80028a2:	4b2c      	ldr	r3, [pc, #176]	; (8002954 <espCommunication+0x58c>)
 80028a4:	5c5b      	ldrb	r3, [r3, r1]
 80028a6:	b2db      	uxtb	r3, r3
		  if((rxBuffer[(rxBufferHead + i)%ESPRXBUFFERSIZE] == 'A') &&
 80028a8:	2b53      	cmp	r3, #83	; 0x53
 80028aa:	f040 808d 	bne.w	80029c8 <espCommunication+0x600>
			 (rxBuffer[(rxBufferHead + i + 2)%ESPRXBUFFERSIZE] == 'P')) {
 80028ae:	4b27      	ldr	r3, [pc, #156]	; (800294c <espCommunication+0x584>)
 80028b0:	881b      	ldrh	r3, [r3, #0]
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	461a      	mov	r2, r3
 80028b6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80028ba:	4413      	add	r3, r2
 80028bc:	1c9a      	adds	r2, r3, #2
 80028be:	4b24      	ldr	r3, [pc, #144]	; (8002950 <espCommunication+0x588>)
 80028c0:	fb83 1302 	smull	r1, r3, r3, r2
 80028c4:	4413      	add	r3, r2
 80028c6:	1219      	asrs	r1, r3, #8
 80028c8:	17d3      	asrs	r3, r2, #31
 80028ca:	1ac9      	subs	r1, r1, r3
 80028cc:	460b      	mov	r3, r1
 80028ce:	025b      	lsls	r3, r3, #9
 80028d0:	1a5b      	subs	r3, r3, r1
 80028d2:	1ad1      	subs	r1, r2, r3
 80028d4:	4b1f      	ldr	r3, [pc, #124]	; (8002954 <espCommunication+0x58c>)
 80028d6:	5c5b      	ldrb	r3, [r3, r1]
 80028d8:	b2db      	uxtb	r3, r3
		     (rxBuffer[(rxBufferHead + i + 1)%ESPRXBUFFERSIZE] == 'S') &&
 80028da:	2b50      	cmp	r3, #80	; 0x50
 80028dc:	d174      	bne.n	80029c8 <espCommunication+0x600>
			  if(rxBuffer[(rxBufferHead + i + 3)%ESPRXBUFFERSIZE] == '-') {
 80028de:	4b1b      	ldr	r3, [pc, #108]	; (800294c <espCommunication+0x584>)
 80028e0:	881b      	ldrh	r3, [r3, #0]
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	461a      	mov	r2, r3
 80028e6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80028ea:	4413      	add	r3, r2
 80028ec:	1cda      	adds	r2, r3, #3
 80028ee:	4b18      	ldr	r3, [pc, #96]	; (8002950 <espCommunication+0x588>)
 80028f0:	fb83 1302 	smull	r1, r3, r3, r2
 80028f4:	4413      	add	r3, r2
 80028f6:	1219      	asrs	r1, r3, #8
 80028f8:	17d3      	asrs	r3, r2, #31
 80028fa:	1ac9      	subs	r1, r1, r3
 80028fc:	460b      	mov	r3, r1
 80028fe:	025b      	lsls	r3, r3, #9
 8002900:	1a5b      	subs	r3, r3, r1
 8002902:	1ad1      	subs	r1, r2, r3
 8002904:	4b13      	ldr	r3, [pc, #76]	; (8002954 <espCommunication+0x58c>)
 8002906:	5c5b      	ldrb	r3, [r3, r1]
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b2d      	cmp	r3, #45	; 0x2d
 800290c:	d126      	bne.n	800295c <espCommunication+0x594>
				  if(rxBuffer[(rxBufferHead + i + 8)%ESPRXBUFFERSIZE] != '_') continue;
 800290e:	4b0f      	ldr	r3, [pc, #60]	; (800294c <espCommunication+0x584>)
 8002910:	881b      	ldrh	r3, [r3, #0]
 8002912:	b29b      	uxth	r3, r3
 8002914:	461a      	mov	r2, r3
 8002916:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800291a:	4413      	add	r3, r2
 800291c:	f103 0208 	add.w	r2, r3, #8
 8002920:	4b0b      	ldr	r3, [pc, #44]	; (8002950 <espCommunication+0x588>)
 8002922:	fb83 1302 	smull	r1, r3, r3, r2
 8002926:	4413      	add	r3, r2
 8002928:	1219      	asrs	r1, r3, #8
 800292a:	17d3      	asrs	r3, r2, #31
 800292c:	1ac9      	subs	r1, r1, r3
 800292e:	460b      	mov	r3, r1
 8002930:	025b      	lsls	r3, r3, #9
 8002932:	1a5b      	subs	r3, r3, r1
 8002934:	1ad1      	subs	r1, r2, r3
 8002936:	4b07      	ldr	r3, [pc, #28]	; (8002954 <espCommunication+0x58c>)
 8002938:	5c5b      	ldrb	r3, [r3, r1]
 800293a:	b2db      	uxtb	r3, r3
 800293c:	2b5f      	cmp	r3, #95	; 0x5f
 800293e:	d026      	beq.n	800298e <espCommunication+0x5c6>
 8002940:	e0c9      	b.n	8002ad6 <espCommunication+0x70e>
 8002942:	bf00      	nop
 8002944:	20000f54 	.word	0x20000f54
 8002948:	20000f58 	.word	0x20000f58
 800294c:	20000e30 	.word	0x20000e30
 8002950:	80402011 	.word	0x80402011
 8002954:	20000c30 	.word	0x20000c30
 8002958:	20000f3c 	.word	0x20000f3c
			  } else {
				  if(rxBuffer[(rxBufferHead + i + 7)%ESPRXBUFFERSIZE] != '_') continue;
 800295c:	4bad      	ldr	r3, [pc, #692]	; (8002c14 <espCommunication+0x84c>)
 800295e:	881b      	ldrh	r3, [r3, #0]
 8002960:	b29b      	uxth	r3, r3
 8002962:	461a      	mov	r2, r3
 8002964:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002968:	4413      	add	r3, r2
 800296a:	1dda      	adds	r2, r3, #7
 800296c:	4baa      	ldr	r3, [pc, #680]	; (8002c18 <espCommunication+0x850>)
 800296e:	fb83 1302 	smull	r1, r3, r3, r2
 8002972:	4413      	add	r3, r2
 8002974:	1219      	asrs	r1, r3, #8
 8002976:	17d3      	asrs	r3, r2, #31
 8002978:	1ac9      	subs	r1, r1, r3
 800297a:	460b      	mov	r3, r1
 800297c:	025b      	lsls	r3, r3, #9
 800297e:	1a5b      	subs	r3, r3, r1
 8002980:	1ad1      	subs	r1, r2, r3
 8002982:	4ba6      	ldr	r3, [pc, #664]	; (8002c1c <espCommunication+0x854>)
 8002984:	5c5b      	ldrb	r3, [r3, r1]
 8002986:	b2db      	uxtb	r3, r3
 8002988:	2b5f      	cmp	r3, #95	; 0x5f
 800298a:	f040 80a3 	bne.w	8002ad4 <espCommunication+0x70c>
			  }
			  aSpeed = parseFloat(rxBuffer, ((rxBufferHead + i + 3)%ESPRXBUFFERSIZE));
 800298e:	4ba1      	ldr	r3, [pc, #644]	; (8002c14 <espCommunication+0x84c>)
 8002990:	881b      	ldrh	r3, [r3, #0]
 8002992:	b29b      	uxth	r3, r3
 8002994:	461a      	mov	r2, r3
 8002996:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800299a:	4413      	add	r3, r2
 800299c:	1cda      	adds	r2, r3, #3
 800299e:	4b9e      	ldr	r3, [pc, #632]	; (8002c18 <espCommunication+0x850>)
 80029a0:	fb83 1302 	smull	r1, r3, r3, r2
 80029a4:	4413      	add	r3, r2
 80029a6:	1219      	asrs	r1, r3, #8
 80029a8:	17d3      	asrs	r3, r2, #31
 80029aa:	1ac9      	subs	r1, r1, r3
 80029ac:	460b      	mov	r3, r1
 80029ae:	025b      	lsls	r3, r3, #9
 80029b0:	1a5b      	subs	r3, r3, r1
 80029b2:	1ad1      	subs	r1, r2, r3
 80029b4:	b28b      	uxth	r3, r1
 80029b6:	4619      	mov	r1, r3
 80029b8:	4898      	ldr	r0, [pc, #608]	; (8002c1c <espCommunication+0x854>)
 80029ba:	f7fe fb09 	bl	8000fd0 <parseFloat>
 80029be:	eef0 7a40 	vmov.f32	s15, s0
 80029c2:	4b97      	ldr	r3, [pc, #604]	; (8002c20 <espCommunication+0x858>)
 80029c4:	edc3 7a00 	vstr	s15, [r3]
		  }

		  debugVar = 12;
 80029c8:	4b96      	ldr	r3, [pc, #600]	; (8002c24 <espCommunication+0x85c>)
 80029ca:	220c      	movs	r2, #12
 80029cc:	601a      	str	r2, [r3, #0]
		  if((rxBuffer[(rxBufferHead + i)%ESPRXBUFFERSIZE] == 'E') &&
 80029ce:	4b91      	ldr	r3, [pc, #580]	; (8002c14 <espCommunication+0x84c>)
 80029d0:	881b      	ldrh	r3, [r3, #0]
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	461a      	mov	r2, r3
 80029d6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80029da:	441a      	add	r2, r3
 80029dc:	4b8e      	ldr	r3, [pc, #568]	; (8002c18 <espCommunication+0x850>)
 80029de:	fb83 1302 	smull	r1, r3, r3, r2
 80029e2:	4413      	add	r3, r2
 80029e4:	1219      	asrs	r1, r3, #8
 80029e6:	17d3      	asrs	r3, r2, #31
 80029e8:	1ac9      	subs	r1, r1, r3
 80029ea:	460b      	mov	r3, r1
 80029ec:	025b      	lsls	r3, r3, #9
 80029ee:	1a5b      	subs	r3, r3, r1
 80029f0:	1ad1      	subs	r1, r2, r3
 80029f2:	4b8a      	ldr	r3, [pc, #552]	; (8002c1c <espCommunication+0x854>)
 80029f4:	5c5b      	ldrb	r3, [r3, r1]
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	2b45      	cmp	r3, #69	; 0x45
 80029fa:	d165      	bne.n	8002ac8 <espCommunication+0x700>
		     (rxBuffer[(rxBufferHead + i + 1)%ESPRXBUFFERSIZE] == 'R') &&
 80029fc:	4b85      	ldr	r3, [pc, #532]	; (8002c14 <espCommunication+0x84c>)
 80029fe:	881b      	ldrh	r3, [r3, #0]
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	461a      	mov	r2, r3
 8002a04:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002a08:	4413      	add	r3, r2
 8002a0a:	1c5a      	adds	r2, r3, #1
 8002a0c:	4b82      	ldr	r3, [pc, #520]	; (8002c18 <espCommunication+0x850>)
 8002a0e:	fb83 1302 	smull	r1, r3, r3, r2
 8002a12:	4413      	add	r3, r2
 8002a14:	1219      	asrs	r1, r3, #8
 8002a16:	17d3      	asrs	r3, r2, #31
 8002a18:	1ac9      	subs	r1, r1, r3
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	025b      	lsls	r3, r3, #9
 8002a1e:	1a5b      	subs	r3, r3, r1
 8002a20:	1ad1      	subs	r1, r2, r3
 8002a22:	4b7e      	ldr	r3, [pc, #504]	; (8002c1c <espCommunication+0x854>)
 8002a24:	5c5b      	ldrb	r3, [r3, r1]
 8002a26:	b2db      	uxtb	r3, r3
		  if((rxBuffer[(rxBufferHead + i)%ESPRXBUFFERSIZE] == 'E') &&
 8002a28:	2b52      	cmp	r3, #82	; 0x52
 8002a2a:	d14d      	bne.n	8002ac8 <espCommunication+0x700>
			 (rxBuffer[(rxBufferHead + i + 2)%ESPRXBUFFERSIZE] == 'R') &&
 8002a2c:	4b79      	ldr	r3, [pc, #484]	; (8002c14 <espCommunication+0x84c>)
 8002a2e:	881b      	ldrh	r3, [r3, #0]
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	461a      	mov	r2, r3
 8002a34:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002a38:	4413      	add	r3, r2
 8002a3a:	1c9a      	adds	r2, r3, #2
 8002a3c:	4b76      	ldr	r3, [pc, #472]	; (8002c18 <espCommunication+0x850>)
 8002a3e:	fb83 1302 	smull	r1, r3, r3, r2
 8002a42:	4413      	add	r3, r2
 8002a44:	1219      	asrs	r1, r3, #8
 8002a46:	17d3      	asrs	r3, r2, #31
 8002a48:	1ac9      	subs	r1, r1, r3
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	025b      	lsls	r3, r3, #9
 8002a4e:	1a5b      	subs	r3, r3, r1
 8002a50:	1ad1      	subs	r1, r2, r3
 8002a52:	4b72      	ldr	r3, [pc, #456]	; (8002c1c <espCommunication+0x854>)
 8002a54:	5c5b      	ldrb	r3, [r3, r1]
 8002a56:	b2db      	uxtb	r3, r3
		     (rxBuffer[(rxBufferHead + i + 1)%ESPRXBUFFERSIZE] == 'R') &&
 8002a58:	2b52      	cmp	r3, #82	; 0x52
 8002a5a:	d135      	bne.n	8002ac8 <espCommunication+0x700>
			 (rxBuffer[(rxBufferHead + i + 3)%ESPRXBUFFERSIZE] == 'O') &&
 8002a5c:	4b6d      	ldr	r3, [pc, #436]	; (8002c14 <espCommunication+0x84c>)
 8002a5e:	881b      	ldrh	r3, [r3, #0]
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	461a      	mov	r2, r3
 8002a64:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002a68:	4413      	add	r3, r2
 8002a6a:	1cda      	adds	r2, r3, #3
 8002a6c:	4b6a      	ldr	r3, [pc, #424]	; (8002c18 <espCommunication+0x850>)
 8002a6e:	fb83 1302 	smull	r1, r3, r3, r2
 8002a72:	4413      	add	r3, r2
 8002a74:	1219      	asrs	r1, r3, #8
 8002a76:	17d3      	asrs	r3, r2, #31
 8002a78:	1ac9      	subs	r1, r1, r3
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	025b      	lsls	r3, r3, #9
 8002a7e:	1a5b      	subs	r3, r3, r1
 8002a80:	1ad1      	subs	r1, r2, r3
 8002a82:	4b66      	ldr	r3, [pc, #408]	; (8002c1c <espCommunication+0x854>)
 8002a84:	5c5b      	ldrb	r3, [r3, r1]
 8002a86:	b2db      	uxtb	r3, r3
			 (rxBuffer[(rxBufferHead + i + 2)%ESPRXBUFFERSIZE] == 'R') &&
 8002a88:	2b4f      	cmp	r3, #79	; 0x4f
 8002a8a:	d11d      	bne.n	8002ac8 <espCommunication+0x700>
			 (rxBuffer[(rxBufferHead + i + 4)%ESPRXBUFFERSIZE] == 'R')) {
 8002a8c:	4b61      	ldr	r3, [pc, #388]	; (8002c14 <espCommunication+0x84c>)
 8002a8e:	881b      	ldrh	r3, [r3, #0]
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	461a      	mov	r2, r3
 8002a94:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002a98:	4413      	add	r3, r2
 8002a9a:	1d1a      	adds	r2, r3, #4
 8002a9c:	4b5e      	ldr	r3, [pc, #376]	; (8002c18 <espCommunication+0x850>)
 8002a9e:	fb83 1302 	smull	r1, r3, r3, r2
 8002aa2:	4413      	add	r3, r2
 8002aa4:	1219      	asrs	r1, r3, #8
 8002aa6:	17d3      	asrs	r3, r2, #31
 8002aa8:	1ac9      	subs	r1, r1, r3
 8002aaa:	460b      	mov	r3, r1
 8002aac:	025b      	lsls	r3, r3, #9
 8002aae:	1a5b      	subs	r3, r3, r1
 8002ab0:	1ad1      	subs	r1, r2, r3
 8002ab2:	4b5a      	ldr	r3, [pc, #360]	; (8002c1c <espCommunication+0x854>)
 8002ab4:	5c5b      	ldrb	r3, [r3, r1]
 8002ab6:	b2db      	uxtb	r3, r3
			 (rxBuffer[(rxBufferHead + i + 3)%ESPRXBUFFERSIZE] == 'O') &&
 8002ab8:	2b52      	cmp	r3, #82	; 0x52
 8002aba:	d105      	bne.n	8002ac8 <espCommunication+0x700>
			  debugVar = 121;
 8002abc:	4b59      	ldr	r3, [pc, #356]	; (8002c24 <espCommunication+0x85c>)
 8002abe:	2279      	movs	r2, #121	; 0x79
 8002ac0:	601a      	str	r2, [r3, #0]
			  espRecon(&huart3);
 8002ac2:	4859      	ldr	r0, [pc, #356]	; (8002c28 <espCommunication+0x860>)
 8002ac4:	f7fe fb90 	bl	80011e8 <espRecon>
		  }
		  debugVar = 13;
 8002ac8:	4b56      	ldr	r3, [pc, #344]	; (8002c24 <espCommunication+0x85c>)
 8002aca:	220d      	movs	r2, #13
 8002acc:	601a      	str	r2, [r3, #0]
 8002ace:	e002      	b.n	8002ad6 <espCommunication+0x70e>
				  if(rxBuffer[(rxBufferHead + i + 7)%ESPRXBUFFERSIZE] != '_') continue;
 8002ad0:	bf00      	nop
 8002ad2:	e000      	b.n	8002ad6 <espCommunication+0x70e>
				  if(rxBuffer[(rxBufferHead + i + 7)%ESPRXBUFFERSIZE] != '_') continue;
 8002ad4:	bf00      	nop
	  for(uint16_t i = 0; i < receivedBytes; i++) {
 8002ad6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002ada:	3301      	adds	r3, #1
 8002adc:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8002ae0:	4b52      	ldr	r3, [pc, #328]	; (8002c2c <espCommunication+0x864>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8002aea:	429a      	cmp	r2, r3
 8002aec:	f4ff adf4 	bcc.w	80026d8 <espCommunication+0x310>
	  }


	  debugVar = 15;
 8002af0:	4b4c      	ldr	r3, [pc, #304]	; (8002c24 <espCommunication+0x85c>)
 8002af2:	220f      	movs	r2, #15
 8002af4:	601a      	str	r2, [r3, #0]
      // Update the buffer head index
      rxBufferHead = ((rxBufferHead + receivedBytes) % ESPRXBUFFERSIZE);
 8002af6:	4b47      	ldr	r3, [pc, #284]	; (8002c14 <espCommunication+0x84c>)
 8002af8:	881b      	ldrh	r3, [r3, #0]
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	461a      	mov	r2, r3
 8002afe:	4b4b      	ldr	r3, [pc, #300]	; (8002c2c <espCommunication+0x864>)
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	441a      	add	r2, r3
 8002b04:	4b44      	ldr	r3, [pc, #272]	; (8002c18 <espCommunication+0x850>)
 8002b06:	fb83 1302 	smull	r1, r3, r3, r2
 8002b0a:	4413      	add	r3, r2
 8002b0c:	1219      	asrs	r1, r3, #8
 8002b0e:	17d3      	asrs	r3, r2, #31
 8002b10:	1ac9      	subs	r1, r1, r3
 8002b12:	460b      	mov	r3, r1
 8002b14:	025b      	lsls	r3, r3, #9
 8002b16:	1a5b      	subs	r3, r3, r1
 8002b18:	1ad1      	subs	r1, r2, r3
 8002b1a:	b28a      	uxth	r2, r1
 8002b1c:	4b3d      	ldr	r3, [pc, #244]	; (8002c14 <espCommunication+0x84c>)
 8002b1e:	801a      	strh	r2, [r3, #0]

      if(xEventGroupGetBitsFromISR(timerFdsEventGroup) == 0x1) {
 8002b20:	4b43      	ldr	r3, [pc, #268]	; (8002c30 <espCommunication+0x868>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f005 fff5 	bl	8008b14 <xEventGroupGetBitsFromISR>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	f040 80c6 	bne.w	8002cbe <espCommunication+0x8f6>
    	  debugVar = 20;
 8002b32:	4b3c      	ldr	r3, [pc, #240]	; (8002c24 <espCommunication+0x85c>)
 8002b34:	2214      	movs	r2, #20
 8002b36:	601a      	str	r2, [r3, #0]
    	    // Create the JSON content with variable values
    	    sprintf(txBuffer, "POST /robot_data HTTP/1.1\r\n"
 8002b38:	4b3e      	ldr	r3, [pc, #248]	; (8002c34 <espCommunication+0x86c>)
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	4698      	mov	r8, r3
 8002b3e:	4b3e      	ldr	r3, [pc, #248]	; (8002c38 <espCommunication+0x870>)
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b44:	4b3d      	ldr	r3, [pc, #244]	; (8002c3c <espCommunication+0x874>)
 8002b46:	68da      	ldr	r2, [r3, #12]
 8002b48:	627a      	str	r2, [r7, #36]	; 0x24
    	                         "Host: 192.168.137.1\r\n"
    	                         "Content-Type: application/json\r\n"
//    	                         "Content-Length: %d\r\n\r\n"
    	                         "{\"avrBatVoltage\": \"%d\", \"EncoderR.rpm\": \"%d\", \"EncoderL.rpm\": \"%d\", \"SoftPwmR.pwmValue\": \"%d\", \"SoftPwmL.pwmValue\": \"%d\", \"tSpeed\": \"%f\", \"aSpeed\": \"%f\", \"rReqValue\": \"%d\", \"lReqValue\": \"%d\", \"accelRX\": \"%d\", \"accelRY\": \"%d\", \"accelRZ\": \"%d\", \"accelLX\": \"%d\", \"accelLY\": \"%d\", \"accelLZ\": \"%d\", \"cycle_count\": \"%d\"}",
								 BatChargeState, EncoderR.rpm, EncoderL.rpm, SoftPwmR.pwmValue, SoftPwmL.pwmValue, tSpeed, aSpeed, SoftPwmR.reqValue, SoftPwmL.reqValue, accelValueR[0], accelValueR[1], accelValueR[2], accelValueL[0], accelValueL[1], accelValueL[2], cycle_count);
 8002b4a:	4b3d      	ldr	r3, [pc, #244]	; (8002c40 <espCommunication+0x878>)
 8002b4c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
    	    sprintf(txBuffer, "POST /robot_data HTTP/1.1\r\n"
 8002b50:	623b      	str	r3, [r7, #32]
								 BatChargeState, EncoderR.rpm, EncoderL.rpm, SoftPwmR.pwmValue, SoftPwmL.pwmValue, tSpeed, aSpeed, SoftPwmR.reqValue, SoftPwmL.reqValue, accelValueR[0], accelValueR[1], accelValueR[2], accelValueL[0], accelValueL[1], accelValueL[2], cycle_count);
 8002b52:	4b3c      	ldr	r3, [pc, #240]	; (8002c44 <espCommunication+0x87c>)
 8002b54:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
    	    sprintf(txBuffer, "POST /robot_data HTTP/1.1\r\n"
 8002b58:	61fb      	str	r3, [r7, #28]
 8002b5a:	4b3b      	ldr	r3, [pc, #236]	; (8002c48 <espCommunication+0x880>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7fd fd02 	bl	8000568 <__aeabi_f2d>
 8002b64:	4604      	mov	r4, r0
 8002b66:	460d      	mov	r5, r1
 8002b68:	4b2d      	ldr	r3, [pc, #180]	; (8002c20 <espCommunication+0x858>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7fd fcfb 	bl	8000568 <__aeabi_f2d>
								 BatChargeState, EncoderR.rpm, EncoderL.rpm, SoftPwmR.pwmValue, SoftPwmL.pwmValue, tSpeed, aSpeed, SoftPwmR.reqValue, SoftPwmL.reqValue, accelValueR[0], accelValueR[1], accelValueR[2], accelValueL[0], accelValueL[1], accelValueL[2], cycle_count);
 8002b72:	4b33      	ldr	r3, [pc, #204]	; (8002c40 <espCommunication+0x878>)
 8002b74:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
    	    sprintf(txBuffer, "POST /robot_data HTTP/1.1\r\n"
 8002b78:	61bb      	str	r3, [r7, #24]
								 BatChargeState, EncoderR.rpm, EncoderL.rpm, SoftPwmR.pwmValue, SoftPwmL.pwmValue, tSpeed, aSpeed, SoftPwmR.reqValue, SoftPwmL.reqValue, accelValueR[0], accelValueR[1], accelValueR[2], accelValueL[0], accelValueL[1], accelValueL[2], cycle_count);
 8002b7a:	4b32      	ldr	r3, [pc, #200]	; (8002c44 <espCommunication+0x87c>)
 8002b7c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
    	    sprintf(txBuffer, "POST /robot_data HTTP/1.1\r\n"
 8002b80:	617b      	str	r3, [r7, #20]
								 BatChargeState, EncoderR.rpm, EncoderL.rpm, SoftPwmR.pwmValue, SoftPwmL.pwmValue, tSpeed, aSpeed, SoftPwmR.reqValue, SoftPwmL.reqValue, accelValueR[0], accelValueR[1], accelValueR[2], accelValueL[0], accelValueL[1], accelValueL[2], cycle_count);
 8002b82:	4b32      	ldr	r3, [pc, #200]	; (8002c4c <espCommunication+0x884>)
 8002b84:	f9b3 3000 	ldrsh.w	r3, [r3]
    	    sprintf(txBuffer, "POST /robot_data HTTP/1.1\r\n"
 8002b88:	613b      	str	r3, [r7, #16]
								 BatChargeState, EncoderR.rpm, EncoderL.rpm, SoftPwmR.pwmValue, SoftPwmL.pwmValue, tSpeed, aSpeed, SoftPwmR.reqValue, SoftPwmL.reqValue, accelValueR[0], accelValueR[1], accelValueR[2], accelValueL[0], accelValueL[1], accelValueL[2], cycle_count);
 8002b8a:	4b30      	ldr	r3, [pc, #192]	; (8002c4c <espCommunication+0x884>)
 8002b8c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    	    sprintf(txBuffer, "POST /robot_data HTTP/1.1\r\n"
 8002b90:	60fb      	str	r3, [r7, #12]
								 BatChargeState, EncoderR.rpm, EncoderL.rpm, SoftPwmR.pwmValue, SoftPwmL.pwmValue, tSpeed, aSpeed, SoftPwmR.reqValue, SoftPwmL.reqValue, accelValueR[0], accelValueR[1], accelValueR[2], accelValueL[0], accelValueL[1], accelValueL[2], cycle_count);
 8002b92:	4b2e      	ldr	r3, [pc, #184]	; (8002c4c <espCommunication+0x884>)
 8002b94:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    	    sprintf(txBuffer, "POST /robot_data HTTP/1.1\r\n"
 8002b98:	60bb      	str	r3, [r7, #8]
								 BatChargeState, EncoderR.rpm, EncoderL.rpm, SoftPwmR.pwmValue, SoftPwmL.pwmValue, tSpeed, aSpeed, SoftPwmR.reqValue, SoftPwmL.reqValue, accelValueR[0], accelValueR[1], accelValueR[2], accelValueL[0], accelValueL[1], accelValueL[2], cycle_count);
 8002b9a:	4b2d      	ldr	r3, [pc, #180]	; (8002c50 <espCommunication+0x888>)
 8002b9c:	f9b3 3000 	ldrsh.w	r3, [r3]
    	    sprintf(txBuffer, "POST /robot_data HTTP/1.1\r\n"
 8002ba0:	607b      	str	r3, [r7, #4]
								 BatChargeState, EncoderR.rpm, EncoderL.rpm, SoftPwmR.pwmValue, SoftPwmL.pwmValue, tSpeed, aSpeed, SoftPwmR.reqValue, SoftPwmL.reqValue, accelValueR[0], accelValueR[1], accelValueR[2], accelValueL[0], accelValueL[1], accelValueL[2], cycle_count);
 8002ba2:	4b2b      	ldr	r3, [pc, #172]	; (8002c50 <espCommunication+0x888>)
 8002ba4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    	    sprintf(txBuffer, "POST /robot_data HTTP/1.1\r\n"
 8002ba8:	461e      	mov	r6, r3
								 BatChargeState, EncoderR.rpm, EncoderL.rpm, SoftPwmR.pwmValue, SoftPwmL.pwmValue, tSpeed, aSpeed, SoftPwmR.reqValue, SoftPwmL.reqValue, accelValueR[0], accelValueR[1], accelValueR[2], accelValueL[0], accelValueL[1], accelValueL[2], cycle_count);
 8002baa:	4b29      	ldr	r3, [pc, #164]	; (8002c50 <espCommunication+0x888>)
 8002bac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    	    sprintf(txBuffer, "POST /robot_data HTTP/1.1\r\n"
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	4b28      	ldr	r3, [pc, #160]	; (8002c54 <espCommunication+0x88c>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	9310      	str	r3, [sp, #64]	; 0x40
 8002bb8:	920f      	str	r2, [sp, #60]	; 0x3c
 8002bba:	960e      	str	r6, [sp, #56]	; 0x38
 8002bbc:	687e      	ldr	r6, [r7, #4]
 8002bbe:	960d      	str	r6, [sp, #52]	; 0x34
 8002bc0:	68be      	ldr	r6, [r7, #8]
 8002bc2:	960c      	str	r6, [sp, #48]	; 0x30
 8002bc4:	68fe      	ldr	r6, [r7, #12]
 8002bc6:	960b      	str	r6, [sp, #44]	; 0x2c
 8002bc8:	693e      	ldr	r6, [r7, #16]
 8002bca:	960a      	str	r6, [sp, #40]	; 0x28
 8002bcc:	697e      	ldr	r6, [r7, #20]
 8002bce:	9609      	str	r6, [sp, #36]	; 0x24
 8002bd0:	69be      	ldr	r6, [r7, #24]
 8002bd2:	9608      	str	r6, [sp, #32]
 8002bd4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002bd8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8002bdc:	69f9      	ldr	r1, [r7, #28]
 8002bde:	9102      	str	r1, [sp, #8]
 8002be0:	6a39      	ldr	r1, [r7, #32]
 8002be2:	9101      	str	r1, [sp, #4]
 8002be4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002be6:	9200      	str	r2, [sp, #0]
 8002be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bea:	4642      	mov	r2, r8
 8002bec:	491a      	ldr	r1, [pc, #104]	; (8002c58 <espCommunication+0x890>)
 8002bee:	481b      	ldr	r0, [pc, #108]	; (8002c5c <espCommunication+0x894>)
 8002bf0:	f009 f9f2 	bl	800bfd8 <siprintf>

    	    // Calculate the number of characters in the POST request
    	    int postRequestLength = strlen(txBuffer);
 8002bf4:	4819      	ldr	r0, [pc, #100]	; (8002c5c <espCommunication+0x894>)
 8002bf6:	f7fd fb4b 	bl	8000290 <strlen>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	653b      	str	r3, [r7, #80]	; 0x50
    	    debugVar = 25;
 8002bfe:	4b09      	ldr	r3, [pc, #36]	; (8002c24 <espCommunication+0x85c>)
 8002c00:	2219      	movs	r2, #25
 8002c02:	601a      	str	r2, [r3, #0]
    	  sprintf(pDataBuf, "AT+CIPSEND=%d\r\n", postRequestLength);
 8002c04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c08:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002c0a:	4915      	ldr	r1, [pc, #84]	; (8002c60 <espCommunication+0x898>)
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f009 f9e3 	bl	800bfd8 <siprintf>
    	  while(atSend_USART3_DMA(pDataBuf, strlen(pDataBuf)) != 0) {
 8002c12:	e02a      	b.n	8002c6a <espCommunication+0x8a2>
 8002c14:	20000e30 	.word	0x20000e30
 8002c18:	80402011 	.word	0x80402011
 8002c1c:	20000c30 	.word	0x20000c30
 8002c20:	20000f40 	.word	0x20000f40
 8002c24:	20000f54 	.word	0x20000f54
 8002c28:	20000880 	.word	0x20000880
 8002c2c:	20000e32 	.word	0x20000e32
 8002c30:	20000f38 	.word	0x20000f38
 8002c34:	200009ba 	.word	0x200009ba
 8002c38:	200009c4 	.word	0x200009c4
 8002c3c:	200009d4 	.word	0x200009d4
 8002c40:	200009e4 	.word	0x200009e4
 8002c44:	20000a08 	.word	0x20000a08
 8002c48:	20000f3c 	.word	0x20000f3c
 8002c4c:	20000f44 	.word	0x20000f44
 8002c50:	20000f4c 	.word	0x20000f4c
 8002c54:	20000f5c 	.word	0x20000f5c
 8002c58:	0800f344 	.word	0x0800f344
 8002c5c:	20000a30 	.word	0x20000a30
 8002c60:	0800f334 	.word	0x0800f334
    	    vTaskDelay( pdMS_TO_TICKS( 10 ) );
 8002c64:	200a      	movs	r0, #10
 8002c66:	f006 ff25 	bl	8009ab4 <vTaskDelay>
    	  while(atSend_USART3_DMA(pDataBuf, strlen(pDataBuf)) != 0) {
 8002c6a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7fd fb0e 	bl	8000290 <strlen>
 8002c74:	4603      	mov	r3, r0
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c7c:	4611      	mov	r1, r2
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7fe f94a 	bl	8000f18 <atSend_USART3_DMA>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1ec      	bne.n	8002c64 <espCommunication+0x89c>
    	  }
    	  debugVar = 30;
 8002c8a:	4b0f      	ldr	r3, [pc, #60]	; (8002cc8 <espCommunication+0x900>)
 8002c8c:	221e      	movs	r2, #30
 8002c8e:	601a      	str	r2, [r3, #0]
    	  while(atSend_USART3_DMA(txBuffer, postRequestLength) != 0) {
 8002c90:	e002      	b.n	8002c98 <espCommunication+0x8d0>
    	    vTaskDelay( pdMS_TO_TICKS( 10 ) );
 8002c92:	200a      	movs	r0, #10
 8002c94:	f006 ff0e 	bl	8009ab4 <vTaskDelay>
    	  while(atSend_USART3_DMA(txBuffer, postRequestLength) != 0) {
 8002c98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	480b      	ldr	r0, [pc, #44]	; (8002ccc <espCommunication+0x904>)
 8002ca0:	f7fe f93a 	bl	8000f18 <atSend_USART3_DMA>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1f3      	bne.n	8002c92 <espCommunication+0x8ca>
    	  }
    	  debugVar = 35;
 8002caa:	4b07      	ldr	r3, [pc, #28]	; (8002cc8 <espCommunication+0x900>)
 8002cac:	2223      	movs	r2, #35	; 0x23
 8002cae:	601a      	str	r2, [r3, #0]
    	  xEventGroupClearBits(timerFdsEventGroup, 0xFFFFFF);
 8002cb0:	4b07      	ldr	r3, [pc, #28]	; (8002cd0 <espCommunication+0x908>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f005 fef3 	bl	8008aa4 <xEventGroupClearBits>
      }

	  vTaskDelay( pdMS_TO_TICKS( 25 ) );
 8002cbe:	2019      	movs	r0, #25
 8002cc0:	f006 fef8 	bl	8009ab4 <vTaskDelay>
  {
 8002cc4:	e46c      	b.n	80025a0 <espCommunication+0x1d8>
 8002cc6:	bf00      	nop
 8002cc8:	20000f54 	.word	0x20000f54
 8002ccc:	20000a30 	.word	0x20000a30
 8002cd0:	20000f38 	.word	0x20000f38

08002cd4 <accelerometer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_accelerometer */
void accelerometer(void const * argument)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN accelerometer */
	vTaskDelay(120);
 8002cdc:	2078      	movs	r0, #120	; 0x78
 8002cde:	f006 fee9 	bl	8009ab4 <vTaskDelay>
	adxl345_bw_rate_setup(&hspi2, GPIOB, 14, 0xA);
 8002ce2:	230a      	movs	r3, #10
 8002ce4:	220e      	movs	r2, #14
 8002ce6:	491f      	ldr	r1, [pc, #124]	; (8002d64 <accelerometer+0x90>)
 8002ce8:	481f      	ldr	r0, [pc, #124]	; (8002d68 <accelerometer+0x94>)
 8002cea:	f7fd ffbd 	bl	8000c68 <adxl345_bw_rate_setup>
	vTaskDelay(20);
 8002cee:	2014      	movs	r0, #20
 8002cf0:	f006 fee0 	bl	8009ab4 <vTaskDelay>
	adxl345_data_format(&hspi2, GPIOB, 14, 0x42);
 8002cf4:	2342      	movs	r3, #66	; 0x42
 8002cf6:	220e      	movs	r2, #14
 8002cf8:	491a      	ldr	r1, [pc, #104]	; (8002d64 <accelerometer+0x90>)
 8002cfa:	481b      	ldr	r0, [pc, #108]	; (8002d68 <accelerometer+0x94>)
 8002cfc:	f7fe f869 	bl	8000dd2 <adxl345_data_format>
	vTaskDelay(20);
 8002d00:	2014      	movs	r0, #20
 8002d02:	f006 fed7 	bl	8009ab4 <vTaskDelay>
	adxl345_measure_mode(&hspi2, GPIOB, 14);
 8002d06:	220e      	movs	r2, #14
 8002d08:	4916      	ldr	r1, [pc, #88]	; (8002d64 <accelerometer+0x90>)
 8002d0a:	4817      	ldr	r0, [pc, #92]	; (8002d68 <accelerometer+0x94>)
 8002d0c:	f7fd ffdd 	bl	8000cca <adxl345_measure_mode>
	vTaskDelay(20);
 8002d10:	2014      	movs	r0, #20
 8002d12:	f006 fecf 	bl	8009ab4 <vTaskDelay>
	adxl345_bw_rate_setup(&hspi2, GPIOB, 12, 0xA);
 8002d16:	230a      	movs	r3, #10
 8002d18:	220c      	movs	r2, #12
 8002d1a:	4912      	ldr	r1, [pc, #72]	; (8002d64 <accelerometer+0x90>)
 8002d1c:	4812      	ldr	r0, [pc, #72]	; (8002d68 <accelerometer+0x94>)
 8002d1e:	f7fd ffa3 	bl	8000c68 <adxl345_bw_rate_setup>
	vTaskDelay(20);
 8002d22:	2014      	movs	r0, #20
 8002d24:	f006 fec6 	bl	8009ab4 <vTaskDelay>
	adxl345_data_format(&hspi2, GPIOB, 12, 0x42);
 8002d28:	2342      	movs	r3, #66	; 0x42
 8002d2a:	220c      	movs	r2, #12
 8002d2c:	490d      	ldr	r1, [pc, #52]	; (8002d64 <accelerometer+0x90>)
 8002d2e:	480e      	ldr	r0, [pc, #56]	; (8002d68 <accelerometer+0x94>)
 8002d30:	f7fe f84f 	bl	8000dd2 <adxl345_data_format>
	vTaskDelay(20);
 8002d34:	2014      	movs	r0, #20
 8002d36:	f006 febd 	bl	8009ab4 <vTaskDelay>
	adxl345_measure_mode(&hspi2, GPIOB, 12);
 8002d3a:	220c      	movs	r2, #12
 8002d3c:	4909      	ldr	r1, [pc, #36]	; (8002d64 <accelerometer+0x90>)
 8002d3e:	480a      	ldr	r0, [pc, #40]	; (8002d68 <accelerometer+0x94>)
 8002d40:	f7fd ffc3 	bl	8000cca <adxl345_measure_mode>
  /* Infinite loop */
  for(;;)
  {
	  adxl345_read_data(&hspi2, GPIOB, 14, (uint8_t*)accelValueR);
 8002d44:	4b09      	ldr	r3, [pc, #36]	; (8002d6c <accelerometer+0x98>)
 8002d46:	220e      	movs	r2, #14
 8002d48:	4906      	ldr	r1, [pc, #24]	; (8002d64 <accelerometer+0x90>)
 8002d4a:	4807      	ldr	r0, [pc, #28]	; (8002d68 <accelerometer+0x94>)
 8002d4c:	f7fe f86e 	bl	8000e2c <adxl345_read_data>
	  adxl345_read_data(&hspi2, GPIOB, 12, (uint8_t*)accelValueL);
 8002d50:	4b07      	ldr	r3, [pc, #28]	; (8002d70 <accelerometer+0x9c>)
 8002d52:	220c      	movs	r2, #12
 8002d54:	4903      	ldr	r1, [pc, #12]	; (8002d64 <accelerometer+0x90>)
 8002d56:	4804      	ldr	r0, [pc, #16]	; (8002d68 <accelerometer+0x94>)
 8002d58:	f7fe f868 	bl	8000e2c <adxl345_read_data>
	  vTaskDelay(20);
 8002d5c:	2014      	movs	r0, #20
 8002d5e:	f006 fea9 	bl	8009ab4 <vTaskDelay>
	  adxl345_read_data(&hspi2, GPIOB, 14, (uint8_t*)accelValueR);
 8002d62:	e7ef      	b.n	8002d44 <accelerometer+0x70>
 8002d64:	48000400 	.word	0x48000400
 8002d68:	20000784 	.word	0x20000784
 8002d6c:	20000f44 	.word	0x20000f44
 8002d70:	20000f4c 	.word	0x20000f4c

08002d74 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a04      	ldr	r2, [pc, #16]	; (8002d94 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d101      	bne.n	8002d8a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002d86:	f001 f8e3 	bl	8003f50 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002d8a:	bf00      	nop
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	40001000 	.word	0x40001000

08002d98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d9c:	b672      	cpsid	i
}
 8002d9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002da0:	e7fe      	b.n	8002da0 <Error_Handler+0x8>
	...

08002da4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002daa:	4b11      	ldr	r3, [pc, #68]	; (8002df0 <HAL_MspInit+0x4c>)
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	4a10      	ldr	r2, [pc, #64]	; (8002df0 <HAL_MspInit+0x4c>)
 8002db0:	f043 0301 	orr.w	r3, r3, #1
 8002db4:	6193      	str	r3, [r2, #24]
 8002db6:	4b0e      	ldr	r3, [pc, #56]	; (8002df0 <HAL_MspInit+0x4c>)
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	607b      	str	r3, [r7, #4]
 8002dc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dc2:	4b0b      	ldr	r3, [pc, #44]	; (8002df0 <HAL_MspInit+0x4c>)
 8002dc4:	69db      	ldr	r3, [r3, #28]
 8002dc6:	4a0a      	ldr	r2, [pc, #40]	; (8002df0 <HAL_MspInit+0x4c>)
 8002dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dcc:	61d3      	str	r3, [r2, #28]
 8002dce:	4b08      	ldr	r3, [pc, #32]	; (8002df0 <HAL_MspInit+0x4c>)
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd6:	603b      	str	r3, [r7, #0]
 8002dd8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002dda:	2200      	movs	r2, #0
 8002ddc:	210f      	movs	r1, #15
 8002dde:	f06f 0001 	mvn.w	r0, #1
 8002de2:	f001 fe4f 	bl	8004a84 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002de6:	bf00      	nop
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	40021000 	.word	0x40021000

08002df4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b08a      	sub	sp, #40	; 0x28
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dfc:	f107 0314 	add.w	r3, r7, #20
 8002e00:	2200      	movs	r2, #0
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	605a      	str	r2, [r3, #4]
 8002e06:	609a      	str	r2, [r3, #8]
 8002e08:	60da      	str	r2, [r3, #12]
 8002e0a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e14:	d124      	bne.n	8002e60 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002e16:	4b14      	ldr	r3, [pc, #80]	; (8002e68 <HAL_ADC_MspInit+0x74>)
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	4a13      	ldr	r2, [pc, #76]	; (8002e68 <HAL_ADC_MspInit+0x74>)
 8002e1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e20:	6153      	str	r3, [r2, #20]
 8002e22:	4b11      	ldr	r3, [pc, #68]	; (8002e68 <HAL_ADC_MspInit+0x74>)
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e2a:	613b      	str	r3, [r7, #16]
 8002e2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e2e:	4b0e      	ldr	r3, [pc, #56]	; (8002e68 <HAL_ADC_MspInit+0x74>)
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	4a0d      	ldr	r2, [pc, #52]	; (8002e68 <HAL_ADC_MspInit+0x74>)
 8002e34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e38:	6153      	str	r3, [r2, #20]
 8002e3a:	4b0b      	ldr	r3, [pc, #44]	; (8002e68 <HAL_ADC_MspInit+0x74>)
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e42:	60fb      	str	r3, [r7, #12]
 8002e44:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002e46:	2304      	movs	r3, #4
 8002e48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e52:	f107 0314 	add.w	r3, r7, #20
 8002e56:	4619      	mov	r1, r3
 8002e58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e5c:	f001 ff46 	bl	8004cec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002e60:	bf00      	nop
 8002e62:	3728      	adds	r7, #40	; 0x28
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40021000 	.word	0x40021000

08002e6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b08a      	sub	sp, #40	; 0x28
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e74:	f107 0314 	add.w	r3, r7, #20
 8002e78:	2200      	movs	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	605a      	str	r2, [r3, #4]
 8002e7e:	609a      	str	r2, [r3, #8]
 8002e80:	60da      	str	r2, [r3, #12]
 8002e82:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a17      	ldr	r2, [pc, #92]	; (8002ee8 <HAL_SPI_MspInit+0x7c>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d128      	bne.n	8002ee0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002e8e:	4b17      	ldr	r3, [pc, #92]	; (8002eec <HAL_SPI_MspInit+0x80>)
 8002e90:	69db      	ldr	r3, [r3, #28]
 8002e92:	4a16      	ldr	r2, [pc, #88]	; (8002eec <HAL_SPI_MspInit+0x80>)
 8002e94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e98:	61d3      	str	r3, [r2, #28]
 8002e9a:	4b14      	ldr	r3, [pc, #80]	; (8002eec <HAL_SPI_MspInit+0x80>)
 8002e9c:	69db      	ldr	r3, [r3, #28]
 8002e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ea2:	613b      	str	r3, [r7, #16]
 8002ea4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ea6:	4b11      	ldr	r3, [pc, #68]	; (8002eec <HAL_SPI_MspInit+0x80>)
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	4a10      	ldr	r2, [pc, #64]	; (8002eec <HAL_SPI_MspInit+0x80>)
 8002eac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002eb0:	6153      	str	r3, [r2, #20]
 8002eb2:	4b0e      	ldr	r3, [pc, #56]	; (8002eec <HAL_SPI_MspInit+0x80>)
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eba:	60fb      	str	r3, [r7, #12]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002ebe:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002ec2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002ed0:	2305      	movs	r3, #5
 8002ed2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ed4:	f107 0314 	add.w	r3, r7, #20
 8002ed8:	4619      	mov	r1, r3
 8002eda:	4805      	ldr	r0, [pc, #20]	; (8002ef0 <HAL_SPI_MspInit+0x84>)
 8002edc:	f001 ff06 	bl	8004cec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002ee0:	bf00      	nop
 8002ee2:	3728      	adds	r7, #40	; 0x28
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	40003800 	.word	0x40003800
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	48000400 	.word	0x48000400

08002ef4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a13      	ldr	r2, [pc, #76]	; (8002f50 <HAL_TIM_Base_MspInit+0x5c>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d10c      	bne.n	8002f20 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002f06:	4b13      	ldr	r3, [pc, #76]	; (8002f54 <HAL_TIM_Base_MspInit+0x60>)
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	4a12      	ldr	r2, [pc, #72]	; (8002f54 <HAL_TIM_Base_MspInit+0x60>)
 8002f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f10:	6193      	str	r3, [r2, #24]
 8002f12:	4b10      	ldr	r3, [pc, #64]	; (8002f54 <HAL_TIM_Base_MspInit+0x60>)
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f1a:	60fb      	str	r3, [r7, #12]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002f1e:	e010      	b.n	8002f42 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM17)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a0c      	ldr	r2, [pc, #48]	; (8002f58 <HAL_TIM_Base_MspInit+0x64>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d10b      	bne.n	8002f42 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002f2a:	4b0a      	ldr	r3, [pc, #40]	; (8002f54 <HAL_TIM_Base_MspInit+0x60>)
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	4a09      	ldr	r2, [pc, #36]	; (8002f54 <HAL_TIM_Base_MspInit+0x60>)
 8002f30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f34:	6193      	str	r3, [r2, #24]
 8002f36:	4b07      	ldr	r3, [pc, #28]	; (8002f54 <HAL_TIM_Base_MspInit+0x60>)
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f3e:	60bb      	str	r3, [r7, #8]
 8002f40:	68bb      	ldr	r3, [r7, #8]
}
 8002f42:	bf00      	nop
 8002f44:	3714      	adds	r7, #20
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	40014000 	.word	0x40014000
 8002f54:	40021000 	.word	0x40021000
 8002f58:	40014800 	.word	0x40014800

08002f5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b08a      	sub	sp, #40	; 0x28
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f64:	f107 0314 	add.w	r3, r7, #20
 8002f68:	2200      	movs	r2, #0
 8002f6a:	601a      	str	r2, [r3, #0]
 8002f6c:	605a      	str	r2, [r3, #4]
 8002f6e:	609a      	str	r2, [r3, #8]
 8002f70:	60da      	str	r2, [r3, #12]
 8002f72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a3e      	ldr	r2, [pc, #248]	; (8003074 <HAL_UART_MspInit+0x118>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d176      	bne.n	800306c <HAL_UART_MspInit+0x110>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f7e:	4b3e      	ldr	r3, [pc, #248]	; (8003078 <HAL_UART_MspInit+0x11c>)
 8002f80:	69db      	ldr	r3, [r3, #28]
 8002f82:	4a3d      	ldr	r2, [pc, #244]	; (8003078 <HAL_UART_MspInit+0x11c>)
 8002f84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f88:	61d3      	str	r3, [r2, #28]
 8002f8a:	4b3b      	ldr	r3, [pc, #236]	; (8003078 <HAL_UART_MspInit+0x11c>)
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f92:	613b      	str	r3, [r7, #16]
 8002f94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f96:	4b38      	ldr	r3, [pc, #224]	; (8003078 <HAL_UART_MspInit+0x11c>)
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	4a37      	ldr	r2, [pc, #220]	; (8003078 <HAL_UART_MspInit+0x11c>)
 8002f9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fa0:	6153      	str	r3, [r2, #20]
 8002fa2:	4b35      	ldr	r3, [pc, #212]	; (8003078 <HAL_UART_MspInit+0x11c>)
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002faa:	60fb      	str	r3, [r7, #12]
 8002fac:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002fae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002fb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002fc0:	2307      	movs	r3, #7
 8002fc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fc4:	f107 0314 	add.w	r3, r7, #20
 8002fc8:	4619      	mov	r1, r3
 8002fca:	482c      	ldr	r0, [pc, #176]	; (800307c <HAL_UART_MspInit+0x120>)
 8002fcc:	f001 fe8e 	bl	8004cec <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8002fd0:	4b2b      	ldr	r3, [pc, #172]	; (8003080 <HAL_UART_MspInit+0x124>)
 8002fd2:	4a2c      	ldr	r2, [pc, #176]	; (8003084 <HAL_UART_MspInit+0x128>)
 8002fd4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fd6:	4b2a      	ldr	r3, [pc, #168]	; (8003080 <HAL_UART_MspInit+0x124>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fdc:	4b28      	ldr	r3, [pc, #160]	; (8003080 <HAL_UART_MspInit+0x124>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002fe2:	4b27      	ldr	r3, [pc, #156]	; (8003080 <HAL_UART_MspInit+0x124>)
 8002fe4:	2280      	movs	r2, #128	; 0x80
 8002fe6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fe8:	4b25      	ldr	r3, [pc, #148]	; (8003080 <HAL_UART_MspInit+0x124>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fee:	4b24      	ldr	r3, [pc, #144]	; (8003080 <HAL_UART_MspInit+0x124>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002ff4:	4b22      	ldr	r3, [pc, #136]	; (8003080 <HAL_UART_MspInit+0x124>)
 8002ff6:	2220      	movs	r2, #32
 8002ff8:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002ffa:	4b21      	ldr	r3, [pc, #132]	; (8003080 <HAL_UART_MspInit+0x124>)
 8002ffc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003000:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003002:	481f      	ldr	r0, [pc, #124]	; (8003080 <HAL_UART_MspInit+0x124>)
 8003004:	f001 fd68 	bl	8004ad8 <HAL_DMA_Init>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 800300e:	f7ff fec3 	bl	8002d98 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a1a      	ldr	r2, [pc, #104]	; (8003080 <HAL_UART_MspInit+0x124>)
 8003016:	675a      	str	r2, [r3, #116]	; 0x74
 8003018:	4a19      	ldr	r2, [pc, #100]	; (8003080 <HAL_UART_MspInit+0x124>)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 800301e:	4b1a      	ldr	r3, [pc, #104]	; (8003088 <HAL_UART_MspInit+0x12c>)
 8003020:	4a1a      	ldr	r2, [pc, #104]	; (800308c <HAL_UART_MspInit+0x130>)
 8003022:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003024:	4b18      	ldr	r3, [pc, #96]	; (8003088 <HAL_UART_MspInit+0x12c>)
 8003026:	2210      	movs	r2, #16
 8003028:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800302a:	4b17      	ldr	r3, [pc, #92]	; (8003088 <HAL_UART_MspInit+0x12c>)
 800302c:	2200      	movs	r2, #0
 800302e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003030:	4b15      	ldr	r3, [pc, #84]	; (8003088 <HAL_UART_MspInit+0x12c>)
 8003032:	2280      	movs	r2, #128	; 0x80
 8003034:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003036:	4b14      	ldr	r3, [pc, #80]	; (8003088 <HAL_UART_MspInit+0x12c>)
 8003038:	2200      	movs	r2, #0
 800303a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800303c:	4b12      	ldr	r3, [pc, #72]	; (8003088 <HAL_UART_MspInit+0x12c>)
 800303e:	2200      	movs	r2, #0
 8003040:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003042:	4b11      	ldr	r3, [pc, #68]	; (8003088 <HAL_UART_MspInit+0x12c>)
 8003044:	2200      	movs	r2, #0
 8003046:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003048:	4b0f      	ldr	r3, [pc, #60]	; (8003088 <HAL_UART_MspInit+0x12c>)
 800304a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800304e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003050:	480d      	ldr	r0, [pc, #52]	; (8003088 <HAL_UART_MspInit+0x12c>)
 8003052:	f001 fd41 	bl	8004ad8 <HAL_DMA_Init>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <HAL_UART_MspInit+0x104>
    {
      Error_Handler();
 800305c:	f7ff fe9c 	bl	8002d98 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a09      	ldr	r2, [pc, #36]	; (8003088 <HAL_UART_MspInit+0x12c>)
 8003064:	671a      	str	r2, [r3, #112]	; 0x70
 8003066:	4a08      	ldr	r2, [pc, #32]	; (8003088 <HAL_UART_MspInit+0x12c>)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800306c:	bf00      	nop
 800306e:	3728      	adds	r7, #40	; 0x28
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	40004800 	.word	0x40004800
 8003078:	40021000 	.word	0x40021000
 800307c:	48000400 	.word	0x48000400
 8003080:	20000908 	.word	0x20000908
 8003084:	40020030 	.word	0x40020030
 8003088:	2000094c 	.word	0x2000094c
 800308c:	4002001c 	.word	0x4002001c

08003090 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b08e      	sub	sp, #56	; 0x38
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003098:	2300      	movs	r3, #0
 800309a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800309c:	2300      	movs	r3, #0
 800309e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80030a0:	4b33      	ldr	r3, [pc, #204]	; (8003170 <HAL_InitTick+0xe0>)
 80030a2:	69db      	ldr	r3, [r3, #28]
 80030a4:	4a32      	ldr	r2, [pc, #200]	; (8003170 <HAL_InitTick+0xe0>)
 80030a6:	f043 0310 	orr.w	r3, r3, #16
 80030aa:	61d3      	str	r3, [r2, #28]
 80030ac:	4b30      	ldr	r3, [pc, #192]	; (8003170 <HAL_InitTick+0xe0>)
 80030ae:	69db      	ldr	r3, [r3, #28]
 80030b0:	f003 0310 	and.w	r3, r3, #16
 80030b4:	60fb      	str	r3, [r7, #12]
 80030b6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80030b8:	f107 0210 	add.w	r2, r7, #16
 80030bc:	f107 0314 	add.w	r3, r7, #20
 80030c0:	4611      	mov	r1, r2
 80030c2:	4618      	mov	r0, r3
 80030c4:	f003 fa34 	bl	8006530 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80030c8:	6a3b      	ldr	r3, [r7, #32]
 80030ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80030cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d103      	bne.n	80030da <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80030d2:	f003 f9e9 	bl	80064a8 <HAL_RCC_GetPCLK1Freq>
 80030d6:	6378      	str	r0, [r7, #52]	; 0x34
 80030d8:	e004      	b.n	80030e4 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80030da:	f003 f9e5 	bl	80064a8 <HAL_RCC_GetPCLK1Freq>
 80030de:	4603      	mov	r3, r0
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80030e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030e6:	4a23      	ldr	r2, [pc, #140]	; (8003174 <HAL_InitTick+0xe4>)
 80030e8:	fba2 2303 	umull	r2, r3, r2, r3
 80030ec:	0c9b      	lsrs	r3, r3, #18
 80030ee:	3b01      	subs	r3, #1
 80030f0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80030f2:	4b21      	ldr	r3, [pc, #132]	; (8003178 <HAL_InitTick+0xe8>)
 80030f4:	4a21      	ldr	r2, [pc, #132]	; (800317c <HAL_InitTick+0xec>)
 80030f6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80030f8:	4b1f      	ldr	r3, [pc, #124]	; (8003178 <HAL_InitTick+0xe8>)
 80030fa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80030fe:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003100:	4a1d      	ldr	r2, [pc, #116]	; (8003178 <HAL_InitTick+0xe8>)
 8003102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003104:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003106:	4b1c      	ldr	r3, [pc, #112]	; (8003178 <HAL_InitTick+0xe8>)
 8003108:	2200      	movs	r2, #0
 800310a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800310c:	4b1a      	ldr	r3, [pc, #104]	; (8003178 <HAL_InitTick+0xe8>)
 800310e:	2200      	movs	r2, #0
 8003110:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003112:	4b19      	ldr	r3, [pc, #100]	; (8003178 <HAL_InitTick+0xe8>)
 8003114:	2200      	movs	r2, #0
 8003116:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003118:	4817      	ldr	r0, [pc, #92]	; (8003178 <HAL_InitTick+0xe8>)
 800311a:	f004 faf5 	bl	8007708 <HAL_TIM_Base_Init>
 800311e:	4603      	mov	r3, r0
 8003120:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003124:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003128:	2b00      	cmp	r3, #0
 800312a:	d11b      	bne.n	8003164 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800312c:	4812      	ldr	r0, [pc, #72]	; (8003178 <HAL_InitTick+0xe8>)
 800312e:	f004 fb43 	bl	80077b8 <HAL_TIM_Base_Start_IT>
 8003132:	4603      	mov	r3, r0
 8003134:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003138:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800313c:	2b00      	cmp	r3, #0
 800313e:	d111      	bne.n	8003164 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003140:	2036      	movs	r0, #54	; 0x36
 8003142:	f001 fcbb 	bl	8004abc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2b0f      	cmp	r3, #15
 800314a:	d808      	bhi.n	800315e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800314c:	2200      	movs	r2, #0
 800314e:	6879      	ldr	r1, [r7, #4]
 8003150:	2036      	movs	r0, #54	; 0x36
 8003152:	f001 fc97 	bl	8004a84 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003156:	4a0a      	ldr	r2, [pc, #40]	; (8003180 <HAL_InitTick+0xf0>)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6013      	str	r3, [r2, #0]
 800315c:	e002      	b.n	8003164 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003164:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003168:	4618      	mov	r0, r3
 800316a:	3738      	adds	r7, #56	; 0x38
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	40021000 	.word	0x40021000
 8003174:	431bde83 	.word	0x431bde83
 8003178:	20000f60 	.word	0x20000f60
 800317c:	40001000 	.word	0x40001000
 8003180:	20000004 	.word	0x20000004

08003184 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003188:	e7fe      	b.n	8003188 <NMI_Handler+0x4>
	...

0800318c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	GPIOC->ODR &= ~GPIO_ODR_13;
 8003192:	4b0b      	ldr	r3, [pc, #44]	; (80031c0 <HardFault_Handler+0x34>)
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	4a0a      	ldr	r2, [pc, #40]	; (80031c0 <HardFault_Handler+0x34>)
 8003198:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800319c:	6153      	str	r3, [r2, #20]
	uint16_t cntLed = 0;
 800319e:	2300      	movs	r3, #0
 80031a0:	80fb      	strh	r3, [r7, #6]

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  if(cntLed == 60000) {
 80031a2:	88fb      	ldrh	r3, [r7, #6]
 80031a4:	f64e 2260 	movw	r2, #60000	; 0xea60
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d105      	bne.n	80031b8 <HardFault_Handler+0x2c>
		  GPIOC->ODR ^= GPIO_ODR_14;
 80031ac:	4b04      	ldr	r3, [pc, #16]	; (80031c0 <HardFault_Handler+0x34>)
 80031ae:	695b      	ldr	r3, [r3, #20]
 80031b0:	4a03      	ldr	r2, [pc, #12]	; (80031c0 <HardFault_Handler+0x34>)
 80031b2:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 80031b6:	6153      	str	r3, [r2, #20]
	  }
	  cntLed++;
 80031b8:	88fb      	ldrh	r3, [r7, #6]
 80031ba:	3301      	adds	r3, #1
 80031bc:	80fb      	strh	r3, [r7, #6]
	  if(cntLed == 60000) {
 80031be:	e7f0      	b.n	80031a2 <HardFault_Handler+0x16>
 80031c0:	48000800 	.word	0x48000800

080031c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031c8:	e7fe      	b.n	80031c8 <MemManage_Handler+0x4>

080031ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031ca:	b480      	push	{r7}
 80031cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031ce:	e7fe      	b.n	80031ce <BusFault_Handler+0x4>

080031d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031d4:	e7fe      	b.n	80031d4 <UsageFault_Handler+0x4>

080031d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031d6:	b480      	push	{r7}
 80031d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031da:	bf00      	nop
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */
	DMA1_Channel2->CCR &= ~DMA_CCR_EN;
 80031e8:	4b08      	ldr	r3, [pc, #32]	; (800320c <DMA1_Channel2_IRQHandler+0x28>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a07      	ldr	r2, [pc, #28]	; (800320c <DMA1_Channel2_IRQHandler+0x28>)
 80031ee:	f023 0301 	bic.w	r3, r3, #1
 80031f2:	6013      	str	r3, [r2, #0]
	USART3->CR3 &= ~USART_CR3_DMAT;
 80031f4:	4b06      	ldr	r3, [pc, #24]	; (8003210 <DMA1_Channel2_IRQHandler+0x2c>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	4a05      	ldr	r2, [pc, #20]	; (8003210 <DMA1_Channel2_IRQHandler+0x2c>)
 80031fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031fe:	6093      	str	r3, [r2, #8]
  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003200:	4804      	ldr	r0, [pc, #16]	; (8003214 <DMA1_Channel2_IRQHandler+0x30>)
 8003202:	f001 fcb0 	bl	8004b66 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003206:	bf00      	nop
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	4002001c 	.word	0x4002001c
 8003210:	40004800 	.word	0x40004800
 8003214:	2000094c 	.word	0x2000094c

08003218 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800321c:	4802      	ldr	r0, [pc, #8]	; (8003228 <DMA1_Channel3_IRQHandler+0x10>)
 800321e:	f001 fca2 	bl	8004b66 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003222:	bf00      	nop
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	20000908 	.word	0x20000908

0800322c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003230:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003234:	f001 fee4 	bl	8005000 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003238:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800323c:	f001 fee0 	bl	8005000 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003240:	bf00      	nop
 8003242:	bd80      	pop	{r7, pc}

08003244 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003248:	4802      	ldr	r0, [pc, #8]	; (8003254 <TIM6_DAC_IRQHandler+0x10>)
 800324a:	f004 fb09 	bl	8007860 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800324e:	bf00      	nop
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	20000f60 	.word	0x20000f60

08003258 <DMA1_Channel1_IRQHandler>:

/* USER CODE BEGIN 1 */
void DMA1_Channel1_IRQHandler(void)
{
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
	__asm__ volatile("NOP");
 800325c:	bf00      	nop
	DMA1->IFCR |= DMA_IFCR_CGIF1;
 800325e:	4b06      	ldr	r3, [pc, #24]	; (8003278 <DMA1_Channel1_IRQHandler+0x20>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	4a05      	ldr	r2, [pc, #20]	; (8003278 <DMA1_Channel1_IRQHandler+0x20>)
 8003264:	f043 0301 	orr.w	r3, r3, #1
 8003268:	6053      	str	r3, [r2, #4]
	__asm__ volatile("NOP");
 800326a:	bf00      	nop
}
 800326c:	bf00      	nop
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	40020000 	.word	0x40020000

0800327c <ADC1_IRQHandler>:

void ADC1_IRQHandler(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
	__asm__ volatile("NOP");
 8003280:	bf00      	nop
	ADC1->ISR |= ADC_ISR_AWD1;
 8003282:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800328c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003290:	6013      	str	r3, [r2, #0]
	__asm__ volatile("NOP");
 8003292:	bf00      	nop
}
 8003294:	bf00      	nop
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
	...

080032a0 <TIM1_UP_TIM16_IRQHandler>:

void TIM1_UP_TIM16_IRQHandler(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0
	if((TIM1->SR & TIM_SR_UIF) == TIM_SR_UIF) {
 80032a4:	4b09      	ldr	r3, [pc, #36]	; (80032cc <TIM1_UP_TIM16_IRQHandler+0x2c>)
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d108      	bne.n	80032c2 <TIM1_UP_TIM16_IRQHandler+0x22>
		EncoderR.posCntUpdate = POSUPDATED;
 80032b0:	4b07      	ldr	r3, [pc, #28]	; (80032d0 <TIM1_UP_TIM16_IRQHandler+0x30>)
 80032b2:	2201      	movs	r2, #1
 80032b4:	721a      	strb	r2, [r3, #8]
		TIM1->SR &= ~(TIM_SR_UIF);
 80032b6:	4b05      	ldr	r3, [pc, #20]	; (80032cc <TIM1_UP_TIM16_IRQHandler+0x2c>)
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	4a04      	ldr	r2, [pc, #16]	; (80032cc <TIM1_UP_TIM16_IRQHandler+0x2c>)
 80032bc:	f023 0301 	bic.w	r3, r3, #1
 80032c0:	6113      	str	r3, [r2, #16]
	}
}
 80032c2:	bf00      	nop
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr
 80032cc:	40012c00 	.word	0x40012c00
 80032d0:	200009c4 	.word	0x200009c4

080032d4 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 80032d4:	b480      	push	{r7}
 80032d6:	af00      	add	r7, sp, #0
	EncoderL.posCntUpdate = POSUPDATED;
 80032d8:	4b07      	ldr	r3, [pc, #28]	; (80032f8 <TIM2_IRQHandler+0x24>)
 80032da:	2201      	movs	r2, #1
 80032dc:	721a      	strb	r2, [r3, #8]
	TIM2->SR &= ~(TIM_SR_UIF);
 80032de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80032e8:	f023 0301 	bic.w	r3, r3, #1
 80032ec:	6113      	str	r3, [r2, #16]
}
 80032ee:	bf00      	nop
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	200009d4 	.word	0x200009d4

080032fc <TIM1_BRK_TIM15_IRQHandler>:

void TIM1_BRK_TIM15_IRQHandler(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
	if((TIM15->SR & TIM_SR_UIF) == TIM_SR_UIF) {
 8003300:	4b59      	ldr	r3, [pc, #356]	; (8003468 <TIM1_BRK_TIM15_IRQHandler+0x16c>)
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	2b01      	cmp	r3, #1
 800330a:	d12c      	bne.n	8003366 <TIM1_BRK_TIM15_IRQHandler+0x6a>
		__asm__ volatile("NOP");
 800330c:	bf00      	nop

		GPIOA->ODR &= ~(1<<7); //_3A
 800330e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003312:	695b      	ldr	r3, [r3, #20]
 8003314:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003318:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800331c:	6153      	str	r3, [r2, #20]
		GPIOB->ODR &= ~(1<<0); //_4A
 800331e:	4b53      	ldr	r3, [pc, #332]	; (800346c <TIM1_BRK_TIM15_IRQHandler+0x170>)
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	4a52      	ldr	r2, [pc, #328]	; (800346c <TIM1_BRK_TIM15_IRQHandler+0x170>)
 8003324:	f023 0301 	bic.w	r3, r3, #1
 8003328:	6153      	str	r3, [r2, #20]

		GPIOA->ODR &= ~(1<<4); //_1A
 800332a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800332e:	695b      	ldr	r3, [r3, #20]
 8003330:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003334:	f023 0310 	bic.w	r3, r3, #16
 8003338:	6153      	str	r3, [r2, #20]
		GPIOA->ODR &= ~(1<<5); //_2A
 800333a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800333e:	695b      	ldr	r3, [r3, #20]
 8003340:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003344:	f023 0320 	bic.w	r3, r3, #32
 8003348:	6153      	str	r3, [r2, #20]

		TIM15->SR &= ~(TIM_SR_UIF);
 800334a:	4b47      	ldr	r3, [pc, #284]	; (8003468 <TIM1_BRK_TIM15_IRQHandler+0x16c>)
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	4a46      	ldr	r2, [pc, #280]	; (8003468 <TIM1_BRK_TIM15_IRQHandler+0x16c>)
 8003350:	f023 0301 	bic.w	r3, r3, #1
 8003354:	6113      	str	r3, [r2, #16]
		if((TIM15->SR & TIM_SR_UIF) == 0) {
 8003356:	4b44      	ldr	r3, [pc, #272]	; (8003468 <TIM1_BRK_TIM15_IRQHandler+0x16c>)
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b00      	cmp	r3, #0
 8003360:	d100      	bne.n	8003364 <TIM1_BRK_TIM15_IRQHandler+0x68>
			__asm__ volatile("NOP");
 8003362:	bf00      	nop
		}
		__asm__ volatile("NOP");
 8003364:	bf00      	nop
	}

	if((TIM15->SR & TIM_SR_CC1IF) == TIM_SR_CC1IF) {
 8003366:	4b40      	ldr	r3, [pc, #256]	; (8003468 <TIM1_BRK_TIM15_IRQHandler+0x16c>)
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b02      	cmp	r3, #2
 8003370:	d135      	bne.n	80033de <TIM1_BRK_TIM15_IRQHandler+0xe2>
		__asm__ volatile("NOP");
 8003372:	bf00      	nop

		if(SoftPwmR.status == 1) {
 8003374:	4b3e      	ldr	r3, [pc, #248]	; (8003470 <TIM1_BRK_TIM15_IRQHandler+0x174>)
 8003376:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800337a:	2b01      	cmp	r3, #1
 800337c:	d10e      	bne.n	800339c <TIM1_BRK_TIM15_IRQHandler+0xa0>
			GPIOA->ODR |= (1<<7); //_3A
 800337e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800338c:	6153      	str	r3, [r2, #20]
			GPIOB->ODR &= ~(1<<0); //_4A
 800338e:	4b37      	ldr	r3, [pc, #220]	; (800346c <TIM1_BRK_TIM15_IRQHandler+0x170>)
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	4a36      	ldr	r2, [pc, #216]	; (800346c <TIM1_BRK_TIM15_IRQHandler+0x170>)
 8003394:	f023 0301 	bic.w	r3, r3, #1
 8003398:	6153      	str	r3, [r2, #20]
 800339a:	e012      	b.n	80033c2 <TIM1_BRK_TIM15_IRQHandler+0xc6>
		} else if(SoftPwmR.status == 2) {
 800339c:	4b34      	ldr	r3, [pc, #208]	; (8003470 <TIM1_BRK_TIM15_IRQHandler+0x174>)
 800339e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d10d      	bne.n	80033c2 <TIM1_BRK_TIM15_IRQHandler+0xc6>
			GPIOA->ODR &= ~(1<<7); //_3A
 80033a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80033b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033b4:	6153      	str	r3, [r2, #20]
			GPIOB->ODR |= (1<<0); //_4A
 80033b6:	4b2d      	ldr	r3, [pc, #180]	; (800346c <TIM1_BRK_TIM15_IRQHandler+0x170>)
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	4a2c      	ldr	r2, [pc, #176]	; (800346c <TIM1_BRK_TIM15_IRQHandler+0x170>)
 80033bc:	f043 0301 	orr.w	r3, r3, #1
 80033c0:	6153      	str	r3, [r2, #20]
		}

		TIM15->SR &= ~(TIM_SR_CC1IF);
 80033c2:	4b29      	ldr	r3, [pc, #164]	; (8003468 <TIM1_BRK_TIM15_IRQHandler+0x16c>)
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	4a28      	ldr	r2, [pc, #160]	; (8003468 <TIM1_BRK_TIM15_IRQHandler+0x16c>)
 80033c8:	f023 0302 	bic.w	r3, r3, #2
 80033cc:	6113      	str	r3, [r2, #16]
		if((TIM15->SR & TIM_SR_CC1IF) == 0) {
 80033ce:	4b26      	ldr	r3, [pc, #152]	; (8003468 <TIM1_BRK_TIM15_IRQHandler+0x16c>)
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d100      	bne.n	80033dc <TIM1_BRK_TIM15_IRQHandler+0xe0>
			__asm__ volatile("NOP");
 80033da:	bf00      	nop
		}
		__asm__ volatile("NOP");
 80033dc:	bf00      	nop
	}

	if((TIM15->SR & TIM_SR_CC2IF) == TIM_SR_CC2IF) {
 80033de:	4b22      	ldr	r3, [pc, #136]	; (8003468 <TIM1_BRK_TIM15_IRQHandler+0x16c>)
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	f003 0304 	and.w	r3, r3, #4
 80033e6:	2b04      	cmp	r3, #4
 80033e8:	d139      	bne.n	800345e <TIM1_BRK_TIM15_IRQHandler+0x162>
		__asm__ volatile("NOP");
 80033ea:	bf00      	nop

		if(SoftPwmL.status == 1) {
 80033ec:	4b21      	ldr	r3, [pc, #132]	; (8003474 <TIM1_BRK_TIM15_IRQHandler+0x178>)
 80033ee:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d110      	bne.n	8003418 <TIM1_BRK_TIM15_IRQHandler+0x11c>
			GPIOA->ODR &= ~(1<<4); //_1A
 80033f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003400:	f023 0310 	bic.w	r3, r3, #16
 8003404:	6153      	str	r3, [r2, #20]
			GPIOA->ODR |= (1<<5); //_2A
 8003406:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800340a:	695b      	ldr	r3, [r3, #20]
 800340c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003410:	f043 0320 	orr.w	r3, r3, #32
 8003414:	6153      	str	r3, [r2, #20]
 8003416:	e014      	b.n	8003442 <TIM1_BRK_TIM15_IRQHandler+0x146>
		} else if(SoftPwmL.status == 2) {
 8003418:	4b16      	ldr	r3, [pc, #88]	; (8003474 <TIM1_BRK_TIM15_IRQHandler+0x178>)
 800341a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800341e:	2b02      	cmp	r3, #2
 8003420:	d10f      	bne.n	8003442 <TIM1_BRK_TIM15_IRQHandler+0x146>
			GPIOA->ODR |= (1<<4); //_1A
 8003422:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003426:	695b      	ldr	r3, [r3, #20]
 8003428:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800342c:	f043 0310 	orr.w	r3, r3, #16
 8003430:	6153      	str	r3, [r2, #20]
			GPIOA->ODR &= ~(1<<5); //_2A
 8003432:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800343c:	f023 0320 	bic.w	r3, r3, #32
 8003440:	6153      	str	r3, [r2, #20]
		}


		TIM15->SR &= ~(TIM_SR_CC2IF);
 8003442:	4b09      	ldr	r3, [pc, #36]	; (8003468 <TIM1_BRK_TIM15_IRQHandler+0x16c>)
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	4a08      	ldr	r2, [pc, #32]	; (8003468 <TIM1_BRK_TIM15_IRQHandler+0x16c>)
 8003448:	f023 0304 	bic.w	r3, r3, #4
 800344c:	6113      	str	r3, [r2, #16]
		if((TIM15->SR & TIM_SR_CC2IF) == 0) {
 800344e:	4b06      	ldr	r3, [pc, #24]	; (8003468 <TIM1_BRK_TIM15_IRQHandler+0x16c>)
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	f003 0304 	and.w	r3, r3, #4
 8003456:	2b00      	cmp	r3, #0
 8003458:	d100      	bne.n	800345c <TIM1_BRK_TIM15_IRQHandler+0x160>
			__asm__ volatile("NOP");
 800345a:	bf00      	nop
		}
		__asm__ volatile("NOP");
 800345c:	bf00      	nop
	}
}
 800345e:	bf00      	nop
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr
 8003468:	40014000 	.word	0x40014000
 800346c:	48000400 	.word	0x48000400
 8003470:	200009e4 	.word	0x200009e4
 8003474:	20000a08 	.word	0x20000a08

08003478 <TIM1_TRG_COM_TIM17_IRQHandler>:

void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8003478:	b5b0      	push	{r4, r5, r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
	if((TIM17->SR & TIM_SR_UIF) == TIM_SR_UIF) {
 800347e:	4bae      	ldr	r3, [pc, #696]	; (8003738 <TIM1_TRG_COM_TIM17_IRQHandler+0x2c0>)
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b01      	cmp	r3, #1
 8003488:	f040 8425 	bne.w	8003cd6 <TIM1_TRG_COM_TIM17_IRQHandler+0x85e>
//		  uint32_t start_cycle = DWT->CYCCNT;
		  EncoderR.positionOld = EncoderR.positionNew;
 800348c:	4bab      	ldr	r3, [pc, #684]	; (800373c <TIM1_TRG_COM_TIM17_IRQHandler+0x2c4>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4aaa      	ldr	r2, [pc, #680]	; (800373c <TIM1_TRG_COM_TIM17_IRQHandler+0x2c4>)
 8003492:	6053      	str	r3, [r2, #4]
		  EncoderR.positionNew = TIM1->CNT;
 8003494:	4baa      	ldr	r3, [pc, #680]	; (8003740 <TIM1_TRG_COM_TIM17_IRQHandler+0x2c8>)
 8003496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003498:	461a      	mov	r2, r3
 800349a:	4ba8      	ldr	r3, [pc, #672]	; (800373c <TIM1_TRG_COM_TIM17_IRQHandler+0x2c4>)
 800349c:	601a      	str	r2, [r3, #0]

		  switch (EncoderR.posCntUpdate) {
 800349e:	4ba7      	ldr	r3, [pc, #668]	; (800373c <TIM1_TRG_COM_TIM17_IRQHandler+0x2c4>)
 80034a0:	7a1b      	ldrb	r3, [r3, #8]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d002      	beq.n	80034ac <TIM1_TRG_COM_TIM17_IRQHandler+0x34>
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d017      	beq.n	80034da <TIM1_TRG_COM_TIM17_IRQHandler+0x62>
				  EncoderR.rpm = -(((float)(EncoderR.positionNew + (65535 - EncoderR.positionOld)))*kToRpm);
				}
				EncoderR.posCntUpdate = 0;
				break;
			default:
				break;
 80034aa:	e056      	b.n	800355a <TIM1_TRG_COM_TIM17_IRQHandler+0xe2>
				EncoderR.rpm = -((float)(EncoderR.positionNew - EncoderR.positionOld)*kToRpm); //(1000*60)/1024;
 80034ac:	4ba3      	ldr	r3, [pc, #652]	; (800373c <TIM1_TRG_COM_TIM17_IRQHandler+0x2c4>)
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	4ba2      	ldr	r3, [pc, #648]	; (800373c <TIM1_TRG_COM_TIM17_IRQHandler+0x2c4>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	ee07 3a90 	vmov	s15, r3
 80034ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80034be:	4ba1      	ldr	r3, [pc, #644]	; (8003744 <TIM1_TRG_COM_TIM17_IRQHandler+0x2cc>)
 80034c0:	edd3 7a00 	vldr	s15, [r3]
 80034c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034c8:	eef1 7a67 	vneg.f32	s15, s15
 80034cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034d0:	ee17 2a90 	vmov	r2, s15
 80034d4:	4b99      	ldr	r3, [pc, #612]	; (800373c <TIM1_TRG_COM_TIM17_IRQHandler+0x2c4>)
 80034d6:	60da      	str	r2, [r3, #12]
				break;
 80034d8:	e03f      	b.n	800355a <TIM1_TRG_COM_TIM17_IRQHandler+0xe2>
				if((EncoderR.positionOld >= 0) && (EncoderR.positionOld <= 32768) ) {
 80034da:	4b98      	ldr	r3, [pc, #608]	; (800373c <TIM1_TRG_COM_TIM17_IRQHandler+0x2c4>)
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	db1e      	blt.n	8003520 <TIM1_TRG_COM_TIM17_IRQHandler+0xa8>
 80034e2:	4b96      	ldr	r3, [pc, #600]	; (800373c <TIM1_TRG_COM_TIM17_IRQHandler+0x2c4>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034ea:	dc19      	bgt.n	8003520 <TIM1_TRG_COM_TIM17_IRQHandler+0xa8>
				  EncoderR.rpm = -(((float)(EncoderR.positionNew - 65535 - EncoderR.positionOld))*kToRpm);
 80034ec:	4b93      	ldr	r3, [pc, #588]	; (800373c <TIM1_TRG_COM_TIM17_IRQHandler+0x2c4>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 80034f4:	3bff      	subs	r3, #255	; 0xff
 80034f6:	4a91      	ldr	r2, [pc, #580]	; (800373c <TIM1_TRG_COM_TIM17_IRQHandler+0x2c4>)
 80034f8:	6852      	ldr	r2, [r2, #4]
 80034fa:	1a9b      	subs	r3, r3, r2
 80034fc:	ee07 3a90 	vmov	s15, r3
 8003500:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003504:	4b8f      	ldr	r3, [pc, #572]	; (8003744 <TIM1_TRG_COM_TIM17_IRQHandler+0x2cc>)
 8003506:	edd3 7a00 	vldr	s15, [r3]
 800350a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800350e:	eef1 7a67 	vneg.f32	s15, s15
 8003512:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003516:	ee17 2a90 	vmov	r2, s15
 800351a:	4b88      	ldr	r3, [pc, #544]	; (800373c <TIM1_TRG_COM_TIM17_IRQHandler+0x2c4>)
 800351c:	60da      	str	r2, [r3, #12]
 800351e:	e018      	b.n	8003552 <TIM1_TRG_COM_TIM17_IRQHandler+0xda>
				  EncoderR.rpm = -(((float)(EncoderR.positionNew + (65535 - EncoderR.positionOld)))*kToRpm);
 8003520:	4b86      	ldr	r3, [pc, #536]	; (800373c <TIM1_TRG_COM_TIM17_IRQHandler+0x2c4>)
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	4b85      	ldr	r3, [pc, #532]	; (800373c <TIM1_TRG_COM_TIM17_IRQHandler+0x2c4>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800352c:	33ff      	adds	r3, #255	; 0xff
 800352e:	4413      	add	r3, r2
 8003530:	ee07 3a90 	vmov	s15, r3
 8003534:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003538:	4b82      	ldr	r3, [pc, #520]	; (8003744 <TIM1_TRG_COM_TIM17_IRQHandler+0x2cc>)
 800353a:	edd3 7a00 	vldr	s15, [r3]
 800353e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003542:	eef1 7a67 	vneg.f32	s15, s15
 8003546:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800354a:	ee17 2a90 	vmov	r2, s15
 800354e:	4b7b      	ldr	r3, [pc, #492]	; (800373c <TIM1_TRG_COM_TIM17_IRQHandler+0x2c4>)
 8003550:	60da      	str	r2, [r3, #12]
				EncoderR.posCntUpdate = 0;
 8003552:	4b7a      	ldr	r3, [pc, #488]	; (800373c <TIM1_TRG_COM_TIM17_IRQHandler+0x2c4>)
 8003554:	2200      	movs	r2, #0
 8003556:	721a      	strb	r2, [r3, #8]
				break;
 8003558:	bf00      	nop
//		cycle_count = end_cycle - start_cycle;
//		EncoderR.rpm = -((float)((int32_t)TIM1->CNT - PRELOADENC)*kToRpm); //(1000*60)/1024;
//		TIM1->CNT = PRELOADENC;


		if(TIM2->CNT > TIM2->ARR) {
 800355a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800355e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003566:	429a      	cmp	r2, r3
 8003568:	d907      	bls.n	800357a <TIM1_TRG_COM_TIM17_IRQHandler+0x102>
		  TIM2->EGR |= TIM_EGR_UG;
 800356a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800356e:	695b      	ldr	r3, [r3, #20]
 8003570:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003574:	f043 0301 	orr.w	r3, r3, #1
 8003578:	6153      	str	r3, [r2, #20]
		}
		EncoderL.positionOld = EncoderL.positionNew;
 800357a:	4b73      	ldr	r3, [pc, #460]	; (8003748 <TIM1_TRG_COM_TIM17_IRQHandler+0x2d0>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a72      	ldr	r2, [pc, #456]	; (8003748 <TIM1_TRG_COM_TIM17_IRQHandler+0x2d0>)
 8003580:	6053      	str	r3, [r2, #4]
		EncoderL.positionNew = TIM2->CNT;
 8003582:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003588:	461a      	mov	r2, r3
 800358a:	4b6f      	ldr	r3, [pc, #444]	; (8003748 <TIM1_TRG_COM_TIM17_IRQHandler+0x2d0>)
 800358c:	601a      	str	r2, [r3, #0]

		  switch (EncoderL.posCntUpdate) {
 800358e:	4b6e      	ldr	r3, [pc, #440]	; (8003748 <TIM1_TRG_COM_TIM17_IRQHandler+0x2d0>)
 8003590:	7a1b      	ldrb	r3, [r3, #8]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d002      	beq.n	800359c <TIM1_TRG_COM_TIM17_IRQHandler+0x124>
 8003596:	2b01      	cmp	r3, #1
 8003598:	d015      	beq.n	80035c6 <TIM1_TRG_COM_TIM17_IRQHandler+0x14e>
					EncoderL.rpm = ((float)(EncoderL.positionNew + (65535 - EncoderL.positionOld)))*kToRpm;
				}
				EncoderL.posCntUpdate = 0;
				break;
			default:
				break;
 800359a:	e050      	b.n	800363e <TIM1_TRG_COM_TIM17_IRQHandler+0x1c6>
				EncoderL.rpm = ((float)(EncoderL.positionNew - EncoderL.positionOld))*kToRpm; //(1000*60)/1024;
 800359c:	4b6a      	ldr	r3, [pc, #424]	; (8003748 <TIM1_TRG_COM_TIM17_IRQHandler+0x2d0>)
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	4b69      	ldr	r3, [pc, #420]	; (8003748 <TIM1_TRG_COM_TIM17_IRQHandler+0x2d0>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	ee07 3a90 	vmov	s15, r3
 80035aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035ae:	4b65      	ldr	r3, [pc, #404]	; (8003744 <TIM1_TRG_COM_TIM17_IRQHandler+0x2cc>)
 80035b0:	edd3 7a00 	vldr	s15, [r3]
 80035b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035bc:	ee17 2a90 	vmov	r2, s15
 80035c0:	4b61      	ldr	r3, [pc, #388]	; (8003748 <TIM1_TRG_COM_TIM17_IRQHandler+0x2d0>)
 80035c2:	60da      	str	r2, [r3, #12]
				break;
 80035c4:	e03b      	b.n	800363e <TIM1_TRG_COM_TIM17_IRQHandler+0x1c6>
				if((EncoderL.positionOld >= 0) && (EncoderL.positionOld <= 32768) ) {
 80035c6:	4b60      	ldr	r3, [pc, #384]	; (8003748 <TIM1_TRG_COM_TIM17_IRQHandler+0x2d0>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	db1c      	blt.n	8003608 <TIM1_TRG_COM_TIM17_IRQHandler+0x190>
 80035ce:	4b5e      	ldr	r3, [pc, #376]	; (8003748 <TIM1_TRG_COM_TIM17_IRQHandler+0x2d0>)
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035d6:	dc17      	bgt.n	8003608 <TIM1_TRG_COM_TIM17_IRQHandler+0x190>
					EncoderL.rpm = (float)(EncoderL.positionNew - 65535 - EncoderL.positionOld)*kToRpm;
 80035d8:	4b5b      	ldr	r3, [pc, #364]	; (8003748 <TIM1_TRG_COM_TIM17_IRQHandler+0x2d0>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 80035e0:	3bff      	subs	r3, #255	; 0xff
 80035e2:	4a59      	ldr	r2, [pc, #356]	; (8003748 <TIM1_TRG_COM_TIM17_IRQHandler+0x2d0>)
 80035e4:	6852      	ldr	r2, [r2, #4]
 80035e6:	1a9b      	subs	r3, r3, r2
 80035e8:	ee07 3a90 	vmov	s15, r3
 80035ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035f0:	4b54      	ldr	r3, [pc, #336]	; (8003744 <TIM1_TRG_COM_TIM17_IRQHandler+0x2cc>)
 80035f2:	edd3 7a00 	vldr	s15, [r3]
 80035f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035fe:	ee17 2a90 	vmov	r2, s15
 8003602:	4b51      	ldr	r3, [pc, #324]	; (8003748 <TIM1_TRG_COM_TIM17_IRQHandler+0x2d0>)
 8003604:	60da      	str	r2, [r3, #12]
 8003606:	e016      	b.n	8003636 <TIM1_TRG_COM_TIM17_IRQHandler+0x1be>
					EncoderL.rpm = ((float)(EncoderL.positionNew + (65535 - EncoderL.positionOld)))*kToRpm;
 8003608:	4b4f      	ldr	r3, [pc, #316]	; (8003748 <TIM1_TRG_COM_TIM17_IRQHandler+0x2d0>)
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	4b4e      	ldr	r3, [pc, #312]	; (8003748 <TIM1_TRG_COM_TIM17_IRQHandler+0x2d0>)
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003614:	33ff      	adds	r3, #255	; 0xff
 8003616:	4413      	add	r3, r2
 8003618:	ee07 3a90 	vmov	s15, r3
 800361c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003620:	4b48      	ldr	r3, [pc, #288]	; (8003744 <TIM1_TRG_COM_TIM17_IRQHandler+0x2cc>)
 8003622:	edd3 7a00 	vldr	s15, [r3]
 8003626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800362a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800362e:	ee17 2a90 	vmov	r2, s15
 8003632:	4b45      	ldr	r3, [pc, #276]	; (8003748 <TIM1_TRG_COM_TIM17_IRQHandler+0x2d0>)
 8003634:	60da      	str	r2, [r3, #12]
				EncoderL.posCntUpdate = 0;
 8003636:	4b44      	ldr	r3, [pc, #272]	; (8003748 <TIM1_TRG_COM_TIM17_IRQHandler+0x2d0>)
 8003638:	2200      	movs	r2, #0
 800363a:	721a      	strb	r2, [r3, #8]
				break;
 800363c:	bf00      	nop

//			uint32_t end_cycle = DWT->CYCCNT;
//			cycle_count = end_cycle - start_cycle;


		SoftPwmR.WheelSpeed = tSpeed - aSpeed*DISBETWHEELS/2;
 800363e:	4b43      	ldr	r3, [pc, #268]	; (800374c <TIM1_TRG_COM_TIM17_IRQHandler+0x2d4>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4618      	mov	r0, r3
 8003644:	f7fc ff90 	bl	8000568 <__aeabi_f2d>
 8003648:	4604      	mov	r4, r0
 800364a:	460d      	mov	r5, r1
 800364c:	4b40      	ldr	r3, [pc, #256]	; (8003750 <TIM1_TRG_COM_TIM17_IRQHandler+0x2d8>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4618      	mov	r0, r3
 8003652:	f7fc ff89 	bl	8000568 <__aeabi_f2d>
 8003656:	a334      	add	r3, pc, #208	; (adr r3, 8003728 <TIM1_TRG_COM_TIM17_IRQHandler+0x2b0>)
 8003658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800365c:	f7fc ffdc 	bl	8000618 <__aeabi_dmul>
 8003660:	4602      	mov	r2, r0
 8003662:	460b      	mov	r3, r1
 8003664:	4610      	mov	r0, r2
 8003666:	4619      	mov	r1, r3
 8003668:	f04f 0200 	mov.w	r2, #0
 800366c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003670:	f7fd f8fc 	bl	800086c <__aeabi_ddiv>
 8003674:	4602      	mov	r2, r0
 8003676:	460b      	mov	r3, r1
 8003678:	4620      	mov	r0, r4
 800367a:	4629      	mov	r1, r5
 800367c:	f7fc fe14 	bl	80002a8 <__aeabi_dsub>
 8003680:	4602      	mov	r2, r0
 8003682:	460b      	mov	r3, r1
 8003684:	4610      	mov	r0, r2
 8003686:	4619      	mov	r1, r3
 8003688:	f7fd fa9e 	bl	8000bc8 <__aeabi_d2f>
 800368c:	4603      	mov	r3, r0
 800368e:	4a31      	ldr	r2, [pc, #196]	; (8003754 <TIM1_TRG_COM_TIM17_IRQHandler+0x2dc>)
 8003690:	6153      	str	r3, [r2, #20]
		  uint32_t start_cycle = DWT->CYCCNT;
 8003692:	4b31      	ldr	r3, [pc, #196]	; (8003758 <TIM1_TRG_COM_TIM17_IRQHandler+0x2e0>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	607b      	str	r3, [r7, #4]
		SoftPwmR.reqValueTemp = (SoftPwmR.WheelSpeed*60)/(2*3.14*RWHEEL);
 8003698:	4b2e      	ldr	r3, [pc, #184]	; (8003754 <TIM1_TRG_COM_TIM17_IRQHandler+0x2dc>)
 800369a:	edd3 7a05 	vldr	s15, [r3, #20]
 800369e:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800375c <TIM1_TRG_COM_TIM17_IRQHandler+0x2e4>
 80036a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036a6:	ee17 0a90 	vmov	r0, s15
 80036aa:	f7fc ff5d 	bl	8000568 <__aeabi_f2d>
 80036ae:	a320      	add	r3, pc, #128	; (adr r3, 8003730 <TIM1_TRG_COM_TIM17_IRQHandler+0x2b8>)
 80036b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b4:	f7fd f8da 	bl	800086c <__aeabi_ddiv>
 80036b8:	4602      	mov	r2, r0
 80036ba:	460b      	mov	r3, r1
 80036bc:	4610      	mov	r0, r2
 80036be:	4619      	mov	r1, r3
 80036c0:	f7fd fa82 	bl	8000bc8 <__aeabi_d2f>
 80036c4:	4603      	mov	r3, r0
 80036c6:	4a23      	ldr	r2, [pc, #140]	; (8003754 <TIM1_TRG_COM_TIM17_IRQHandler+0x2dc>)
 80036c8:	6193      	str	r3, [r2, #24]
			uint32_t end_cycle = DWT->CYCCNT;
 80036ca:	4b23      	ldr	r3, [pc, #140]	; (8003758 <TIM1_TRG_COM_TIM17_IRQHandler+0x2e0>)
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	603b      	str	r3, [r7, #0]
			cycle_count = end_cycle - start_cycle;
 80036d0:	683a      	ldr	r2, [r7, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	4a22      	ldr	r2, [pc, #136]	; (8003760 <TIM1_TRG_COM_TIM17_IRQHandler+0x2e8>)
 80036d8:	6013      	str	r3, [r2, #0]
		if((SoftPwmR.reqValueTemp >= - 50) && (SoftPwmR.reqValueTemp <= 50)) {
 80036da:	4b1e      	ldr	r3, [pc, #120]	; (8003754 <TIM1_TRG_COM_TIM17_IRQHandler+0x2dc>)
 80036dc:	edd3 7a06 	vldr	s15, [r3, #24]
 80036e0:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8003764 <TIM1_TRG_COM_TIM17_IRQHandler+0x2ec>
 80036e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ec:	db0e      	blt.n	800370c <TIM1_TRG_COM_TIM17_IRQHandler+0x294>
 80036ee:	4b19      	ldr	r3, [pc, #100]	; (8003754 <TIM1_TRG_COM_TIM17_IRQHandler+0x2dc>)
 80036f0:	edd3 7a06 	vldr	s15, [r3, #24]
 80036f4:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003768 <TIM1_TRG_COM_TIM17_IRQHandler+0x2f0>
 80036f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003700:	d804      	bhi.n	800370c <TIM1_TRG_COM_TIM17_IRQHandler+0x294>
			SoftPwmR.reqValueTemp = 0;
 8003702:	4b14      	ldr	r3, [pc, #80]	; (8003754 <TIM1_TRG_COM_TIM17_IRQHandler+0x2dc>)
 8003704:	f04f 0200 	mov.w	r2, #0
 8003708:	619a      	str	r2, [r3, #24]
 800370a:	e040      	b.n	800378e <TIM1_TRG_COM_TIM17_IRQHandler+0x316>
		} else if((SoftPwmR.reqValueTemp > MAXRPM)) {
 800370c:	4b11      	ldr	r3, [pc, #68]	; (8003754 <TIM1_TRG_COM_TIM17_IRQHandler+0x2dc>)
 800370e:	edd3 7a06 	vldr	s15, [r3, #24]
 8003712:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800376c <TIM1_TRG_COM_TIM17_IRQHandler+0x2f4>
 8003716:	eef4 7ac7 	vcmpe.f32	s15, s14
 800371a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800371e:	dd29      	ble.n	8003774 <TIM1_TRG_COM_TIM17_IRQHandler+0x2fc>
			SoftPwmR.reqValueTemp = MAXRPM;
 8003720:	4b0c      	ldr	r3, [pc, #48]	; (8003754 <TIM1_TRG_COM_TIM17_IRQHandler+0x2dc>)
 8003722:	4a13      	ldr	r2, [pc, #76]	; (8003770 <TIM1_TRG_COM_TIM17_IRQHandler+0x2f8>)
 8003724:	619a      	str	r2, [r3, #24]
 8003726:	e032      	b.n	800378e <TIM1_TRG_COM_TIM17_IRQHandler+0x316>
 8003728:	1eb851ec 	.word	0x1eb851ec
 800372c:	3fb1eb85 	.word	0x3fb1eb85
 8003730:	09d49519 	.word	0x09d49519
 8003734:	3fbc2268 	.word	0x3fbc2268
 8003738:	40014800 	.word	0x40014800
 800373c:	200009c4 	.word	0x200009c4
 8003740:	40012c00 	.word	0x40012c00
 8003744:	20000a2c 	.word	0x20000a2c
 8003748:	200009d4 	.word	0x200009d4
 800374c:	20000f3c 	.word	0x20000f3c
 8003750:	20000f40 	.word	0x20000f40
 8003754:	200009e4 	.word	0x200009e4
 8003758:	e0001000 	.word	0xe0001000
 800375c:	42700000 	.word	0x42700000
 8003760:	20000f5c 	.word	0x20000f5c
 8003764:	c2480000 	.word	0xc2480000
 8003768:	42480000 	.word	0x42480000
 800376c:	43fa0000 	.word	0x43fa0000
 8003770:	43fa0000 	.word	0x43fa0000
		} else if((SoftPwmR.reqValueTemp < -MAXRPM)) {
 8003774:	4bb6      	ldr	r3, [pc, #728]	; (8003a50 <TIM1_TRG_COM_TIM17_IRQHandler+0x5d8>)
 8003776:	edd3 7a06 	vldr	s15, [r3, #24]
 800377a:	ed9f 7ab6 	vldr	s14, [pc, #728]	; 8003a54 <TIM1_TRG_COM_TIM17_IRQHandler+0x5dc>
 800377e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003786:	d502      	bpl.n	800378e <TIM1_TRG_COM_TIM17_IRQHandler+0x316>
			SoftPwmR.reqValueTemp = -MAXRPM;
 8003788:	4bb1      	ldr	r3, [pc, #708]	; (8003a50 <TIM1_TRG_COM_TIM17_IRQHandler+0x5d8>)
 800378a:	4ab3      	ldr	r2, [pc, #716]	; (8003a58 <TIM1_TRG_COM_TIM17_IRQHandler+0x5e0>)
 800378c:	619a      	str	r2, [r3, #24]
		}
		SoftPwmR.reqValue = (int16_t)SoftPwmR.reqValueTemp;
 800378e:	4bb0      	ldr	r3, [pc, #704]	; (8003a50 <TIM1_TRG_COM_TIM17_IRQHandler+0x5d8>)
 8003790:	edd3 7a06 	vldr	s15, [r3, #24]
 8003794:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003798:	ee17 3a90 	vmov	r3, s15
 800379c:	b21a      	sxth	r2, r3
 800379e:	4bac      	ldr	r3, [pc, #688]	; (8003a50 <TIM1_TRG_COM_TIM17_IRQHandler+0x5d8>)
 80037a0:	839a      	strh	r2, [r3, #28]

		SoftPwmR.curValue = EncoderR.rpm;
 80037a2:	4bae      	ldr	r3, [pc, #696]	; (8003a5c <TIM1_TRG_COM_TIM17_IRQHandler+0x5e4>)
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	b21a      	sxth	r2, r3
 80037a8:	4ba9      	ldr	r3, [pc, #676]	; (8003a50 <TIM1_TRG_COM_TIM17_IRQHandler+0x5d8>)
 80037aa:	83da      	strh	r2, [r3, #30]
		SoftPwmR.errorValue = SoftPwmR.reqValue - SoftPwmR.curValue;
 80037ac:	4ba8      	ldr	r3, [pc, #672]	; (8003a50 <TIM1_TRG_COM_TIM17_IRQHandler+0x5d8>)
 80037ae:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80037b2:	461a      	mov	r2, r3
 80037b4:	4ba6      	ldr	r3, [pc, #664]	; (8003a50 <TIM1_TRG_COM_TIM17_IRQHandler+0x5d8>)
 80037b6:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	4aa4      	ldr	r2, [pc, #656]	; (8003a50 <TIM1_TRG_COM_TIM17_IRQHandler+0x5d8>)
 80037be:	6013      	str	r3, [r2, #0]
		SoftPwmR.pValue = KP * SoftPwmR.errorValue;
 80037c0:	4ba3      	ldr	r3, [pc, #652]	; (8003a50 <TIM1_TRG_COM_TIM17_IRQHandler+0x5d8>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	ee07 3a90 	vmov	s15, r3
 80037c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037cc:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 8003a60 <TIM1_TRG_COM_TIM17_IRQHandler+0x5e8>
 80037d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037d4:	4b9e      	ldr	r3, [pc, #632]	; (8003a50 <TIM1_TRG_COM_TIM17_IRQHandler+0x5d8>)
 80037d6:	edc3 7a02 	vstr	s15, [r3, #8]
		SoftPwmR.iValue += KI * SoftPwmR.errorValue;
 80037da:	4b9d      	ldr	r3, [pc, #628]	; (8003a50 <TIM1_TRG_COM_TIM17_IRQHandler+0x5d8>)
 80037dc:	ed93 7a03 	vldr	s14, [r3, #12]
 80037e0:	4b9b      	ldr	r3, [pc, #620]	; (8003a50 <TIM1_TRG_COM_TIM17_IRQHandler+0x5d8>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	ee07 3a90 	vmov	s15, r3
 80037e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037ec:	eddf 6a9d 	vldr	s13, [pc, #628]	; 8003a64 <TIM1_TRG_COM_TIM17_IRQHandler+0x5ec>
 80037f0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80037f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037f8:	4b95      	ldr	r3, [pc, #596]	; (8003a50 <TIM1_TRG_COM_TIM17_IRQHandler+0x5d8>)
 80037fa:	edc3 7a03 	vstr	s15, [r3, #12]
		if(SoftPwmR.iValue > ((float)MAXRPM)) SoftPwmR.iValue = MAXRPM;
 80037fe:	4b94      	ldr	r3, [pc, #592]	; (8003a50 <TIM1_TRG_COM_TIM17_IRQHandler+0x5d8>)
 8003800:	edd3 7a03 	vldr	s15, [r3, #12]
 8003804:	ed9f 7a98 	vldr	s14, [pc, #608]	; 8003a68 <TIM1_TRG_COM_TIM17_IRQHandler+0x5f0>
 8003808:	eef4 7ac7 	vcmpe.f32	s15, s14
 800380c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003810:	dd03      	ble.n	800381a <TIM1_TRG_COM_TIM17_IRQHandler+0x3a2>
 8003812:	4b8f      	ldr	r3, [pc, #572]	; (8003a50 <TIM1_TRG_COM_TIM17_IRQHandler+0x5d8>)
 8003814:	4a95      	ldr	r2, [pc, #596]	; (8003a6c <TIM1_TRG_COM_TIM17_IRQHandler+0x5f4>)
 8003816:	60da      	str	r2, [r3, #12]
 8003818:	e00c      	b.n	8003834 <TIM1_TRG_COM_TIM17_IRQHandler+0x3bc>
		else if(SoftPwmR.iValue < ((float)-MAXRPM)) SoftPwmR.iValue = -MAXRPM;
 800381a:	4b8d      	ldr	r3, [pc, #564]	; (8003a50 <TIM1_TRG_COM_TIM17_IRQHandler+0x5d8>)
 800381c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003820:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8003a54 <TIM1_TRG_COM_TIM17_IRQHandler+0x5dc>
 8003824:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800382c:	d502      	bpl.n	8003834 <TIM1_TRG_COM_TIM17_IRQHandler+0x3bc>
 800382e:	4b88      	ldr	r3, [pc, #544]	; (8003a50 <TIM1_TRG_COM_TIM17_IRQHandler+0x5d8>)
 8003830:	4a89      	ldr	r2, [pc, #548]	; (8003a58 <TIM1_TRG_COM_TIM17_IRQHandler+0x5e0>)
 8003832:	60da      	str	r2, [r3, #12]
		if((SoftPwmR.iValue <= 50) && (SoftPwmR.iValue >= -50)) {
 8003834:	4b86      	ldr	r3, [pc, #536]	; (8003a50 <TIM1_TRG_COM_TIM17_IRQHandler+0x5d8>)
 8003836:	edd3 7a03 	vldr	s15, [r3, #12]
 800383a:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8003a70 <TIM1_TRG_COM_TIM17_IRQHandler+0x5f8>
 800383e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003846:	d80e      	bhi.n	8003866 <TIM1_TRG_COM_TIM17_IRQHandler+0x3ee>
 8003848:	4b81      	ldr	r3, [pc, #516]	; (8003a50 <TIM1_TRG_COM_TIM17_IRQHandler+0x5d8>)
 800384a:	edd3 7a03 	vldr	s15, [r3, #12]
 800384e:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8003a74 <TIM1_TRG_COM_TIM17_IRQHandler+0x5fc>
 8003852:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800385a:	db04      	blt.n	8003866 <TIM1_TRG_COM_TIM17_IRQHandler+0x3ee>
			SoftPwmR.sumValue = SoftPwmR.pValue;
 800385c:	4b7c      	ldr	r3, [pc, #496]	; (8003a50 <TIM1_TRG_COM_TIM17_IRQHandler+0x5d8>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	4a7b      	ldr	r2, [pc, #492]	; (8003a50 <TIM1_TRG_COM_TIM17_IRQHandler+0x5d8>)
 8003862:	6053      	str	r3, [r2, #4]
 8003864:	e00a      	b.n	800387c <TIM1_TRG_COM_TIM17_IRQHandler+0x404>
		} else {
			SoftPwmR.sumValue = (SoftPwmR.pValue + SoftPwmR.iValue);
 8003866:	4b7a      	ldr	r3, [pc, #488]	; (8003a50 <TIM1_TRG_COM_TIM17_IRQHandler+0x5d8>)
 8003868:	ed93 7a02 	vldr	s14, [r3, #8]
 800386c:	4b78      	ldr	r3, [pc, #480]	; (8003a50 <TIM1_TRG_COM_TIM17_IRQHandler+0x5d8>)
 800386e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003872:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003876:	4b76      	ldr	r3, [pc, #472]	; (8003a50 <TIM1_TRG_COM_TIM17_IRQHandler+0x5d8>)
 8003878:	edc3 7a01 	vstr	s15, [r3, #4]
		}
		SoftPwmR.pwmFloatValue += ((((float)SoftPwmR.sumValue)/((float)MAXRPM))*PWMVAL);
 800387c:	4b74      	ldr	r3, [pc, #464]	; (8003a50 <TIM1_TRG_COM_TIM17_IRQHandler+0x5d8>)
 800387e:	ed93 7a04 	vldr	s14, [r3, #16]
 8003882:	4b73      	ldr	r3, [pc, #460]	; (8003a50 <TIM1_TRG_COM_TIM17_IRQHandler+0x5d8>)
 8003884:	edd3 6a01 	vldr	s13, [r3, #4]
 8003888:	ed9f 6a77 	vldr	s12, [pc, #476]	; 8003a68 <TIM1_TRG_COM_TIM17_IRQHandler+0x5f0>
 800388c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003890:	eddf 6a79 	vldr	s13, [pc, #484]	; 8003a78 <TIM1_TRG_COM_TIM17_IRQHandler+0x600>
 8003894:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003898:	ee77 7a27 	vadd.f32	s15, s14, s15
 800389c:	4b6c      	ldr	r3, [pc, #432]	; (8003a50 <TIM1_TRG_COM_TIM17_IRQHandler+0x5d8>)
 800389e:	edc3 7a04 	vstr	s15, [r3, #16]
		if(SoftPwmR.pwmFloatValue > PWMVAL) SoftPwmR.pwmFloatValue = PWMVAL;
 80038a2:	4b6b      	ldr	r3, [pc, #428]	; (8003a50 <TIM1_TRG_COM_TIM17_IRQHandler+0x5d8>)
 80038a4:	edd3 7a04 	vldr	s15, [r3, #16]
 80038a8:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8003a78 <TIM1_TRG_COM_TIM17_IRQHandler+0x600>
 80038ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038b4:	dd03      	ble.n	80038be <TIM1_TRG_COM_TIM17_IRQHandler+0x446>
 80038b6:	4b66      	ldr	r3, [pc, #408]	; (8003a50 <TIM1_TRG_COM_TIM17_IRQHandler+0x5d8>)
 80038b8:	4a70      	ldr	r2, [pc, #448]	; (8003a7c <TIM1_TRG_COM_TIM17_IRQHandler+0x604>)
 80038ba:	611a      	str	r2, [r3, #16]
 80038bc:	e00c      	b.n	80038d8 <TIM1_TRG_COM_TIM17_IRQHandler+0x460>
		else if(SoftPwmR.pwmFloatValue < -PWMVAL) SoftPwmR.pwmFloatValue = -PWMVAL;
 80038be:	4b64      	ldr	r3, [pc, #400]	; (8003a50 <TIM1_TRG_COM_TIM17_IRQHandler+0x5d8>)
 80038c0:	edd3 7a04 	vldr	s15, [r3, #16]
 80038c4:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8003a80 <TIM1_TRG_COM_TIM17_IRQHandler+0x608>
 80038c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038d0:	d502      	bpl.n	80038d8 <TIM1_TRG_COM_TIM17_IRQHandler+0x460>
 80038d2:	4b5f      	ldr	r3, [pc, #380]	; (8003a50 <TIM1_TRG_COM_TIM17_IRQHandler+0x5d8>)
 80038d4:	4a6b      	ldr	r2, [pc, #428]	; (8003a84 <TIM1_TRG_COM_TIM17_IRQHandler+0x60c>)
 80038d6:	611a      	str	r2, [r3, #16]
		SoftPwmR.pwmValue = (int16_t)SoftPwmR.pwmFloatValue;
 80038d8:	4b5d      	ldr	r3, [pc, #372]	; (8003a50 <TIM1_TRG_COM_TIM17_IRQHandler+0x5d8>)
 80038da:	edd3 7a04 	vldr	s15, [r3, #16]
 80038de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038e2:	ee17 3a90 	vmov	r3, s15
 80038e6:	b21a      	sxth	r2, r3
 80038e8:	4b59      	ldr	r3, [pc, #356]	; (8003a50 <TIM1_TRG_COM_TIM17_IRQHandler+0x5d8>)
 80038ea:	841a      	strh	r2, [r3, #32]
		if(SoftPwmR.reqValue == 0) {
 80038ec:	4b58      	ldr	r3, [pc, #352]	; (8003a50 <TIM1_TRG_COM_TIM17_IRQHandler+0x5d8>)
 80038ee:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d11d      	bne.n	8003932 <TIM1_TRG_COM_TIM17_IRQHandler+0x4ba>
		  if(SoftPwmR.pwmValue > 0) {
 80038f6:	4b56      	ldr	r3, [pc, #344]	; (8003a50 <TIM1_TRG_COM_TIM17_IRQHandler+0x5d8>)
 80038f8:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	dd09      	ble.n	8003914 <TIM1_TRG_COM_TIM17_IRQHandler+0x49c>
			  SoftPwmR.pwmFloatValue -= 1;
 8003900:	4b53      	ldr	r3, [pc, #332]	; (8003a50 <TIM1_TRG_COM_TIM17_IRQHandler+0x5d8>)
 8003902:	edd3 7a04 	vldr	s15, [r3, #16]
 8003906:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800390a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800390e:	4b50      	ldr	r3, [pc, #320]	; (8003a50 <TIM1_TRG_COM_TIM17_IRQHandler+0x5d8>)
 8003910:	edc3 7a04 	vstr	s15, [r3, #16]
		  }
		  if(SoftPwmR.pwmValue < 0) {
 8003914:	4b4e      	ldr	r3, [pc, #312]	; (8003a50 <TIM1_TRG_COM_TIM17_IRQHandler+0x5d8>)
 8003916:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800391a:	2b00      	cmp	r3, #0
 800391c:	da09      	bge.n	8003932 <TIM1_TRG_COM_TIM17_IRQHandler+0x4ba>
			  SoftPwmR.pwmFloatValue += 1;
 800391e:	4b4c      	ldr	r3, [pc, #304]	; (8003a50 <TIM1_TRG_COM_TIM17_IRQHandler+0x5d8>)
 8003920:	edd3 7a04 	vldr	s15, [r3, #16]
 8003924:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003928:	ee77 7a87 	vadd.f32	s15, s15, s14
 800392c:	4b48      	ldr	r3, [pc, #288]	; (8003a50 <TIM1_TRG_COM_TIM17_IRQHandler+0x5d8>)
 800392e:	edc3 7a04 	vstr	s15, [r3, #16]
		  }
		}

		if(SoftPwmR.pwmValue < 0) {
 8003932:	4b47      	ldr	r3, [pc, #284]	; (8003a50 <TIM1_TRG_COM_TIM17_IRQHandler+0x5d8>)
 8003934:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8003938:	2b00      	cmp	r3, #0
 800393a:	da0d      	bge.n	8003958 <TIM1_TRG_COM_TIM17_IRQHandler+0x4e0>
		  TIM15->CCR1 = TIM15->ARR - SoftPwmR.pwmValue*(-1);
 800393c:	4b52      	ldr	r3, [pc, #328]	; (8003a88 <TIM1_TRG_COM_TIM17_IRQHandler+0x610>)
 800393e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003940:	4a43      	ldr	r2, [pc, #268]	; (8003a50 <TIM1_TRG_COM_TIM17_IRQHandler+0x5d8>)
 8003942:	f9b2 2020 	ldrsh.w	r2, [r2, #32]
 8003946:	4611      	mov	r1, r2
 8003948:	4a4f      	ldr	r2, [pc, #316]	; (8003a88 <TIM1_TRG_COM_TIM17_IRQHandler+0x610>)
 800394a:	440b      	add	r3, r1
 800394c:	6353      	str	r3, [r2, #52]	; 0x34
		  SoftPwmR.status = 2;
 800394e:	4b40      	ldr	r3, [pc, #256]	; (8003a50 <TIM1_TRG_COM_TIM17_IRQHandler+0x5d8>)
 8003950:	2202      	movs	r2, #2
 8003952:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8003956:	e016      	b.n	8003986 <TIM1_TRG_COM_TIM17_IRQHandler+0x50e>
		} else if(SoftPwmR.pwmValue > 0){
 8003958:	4b3d      	ldr	r3, [pc, #244]	; (8003a50 <TIM1_TRG_COM_TIM17_IRQHandler+0x5d8>)
 800395a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800395e:	2b00      	cmp	r3, #0
 8003960:	dd0d      	ble.n	800397e <TIM1_TRG_COM_TIM17_IRQHandler+0x506>
		  TIM15->CCR1 = TIM15->ARR - SoftPwmR.pwmValue;
 8003962:	4b49      	ldr	r3, [pc, #292]	; (8003a88 <TIM1_TRG_COM_TIM17_IRQHandler+0x610>)
 8003964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003966:	4a3a      	ldr	r2, [pc, #232]	; (8003a50 <TIM1_TRG_COM_TIM17_IRQHandler+0x5d8>)
 8003968:	f9b2 2020 	ldrsh.w	r2, [r2, #32]
 800396c:	4611      	mov	r1, r2
 800396e:	4a46      	ldr	r2, [pc, #280]	; (8003a88 <TIM1_TRG_COM_TIM17_IRQHandler+0x610>)
 8003970:	1a5b      	subs	r3, r3, r1
 8003972:	6353      	str	r3, [r2, #52]	; 0x34
		  SoftPwmR.status = 1;
 8003974:	4b36      	ldr	r3, [pc, #216]	; (8003a50 <TIM1_TRG_COM_TIM17_IRQHandler+0x5d8>)
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800397c:	e003      	b.n	8003986 <TIM1_TRG_COM_TIM17_IRQHandler+0x50e>
		} else {
		  SoftPwmR.status = 0;
 800397e:	4b34      	ldr	r3, [pc, #208]	; (8003a50 <TIM1_TRG_COM_TIM17_IRQHandler+0x5d8>)
 8003980:	2200      	movs	r2, #0
 8003982:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

//		uint32_t end_cycle = DWT->CYCCNT;
//		cycle_count = end_cycle - start_cycle;


		SoftPwmL.WheelSpeed = tSpeed + aSpeed*DISBETWHEELS/2;
 8003986:	4b41      	ldr	r3, [pc, #260]	; (8003a8c <TIM1_TRG_COM_TIM17_IRQHandler+0x614>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4618      	mov	r0, r3
 800398c:	f7fc fdec 	bl	8000568 <__aeabi_f2d>
 8003990:	4604      	mov	r4, r0
 8003992:	460d      	mov	r5, r1
 8003994:	4b3e      	ldr	r3, [pc, #248]	; (8003a90 <TIM1_TRG_COM_TIM17_IRQHandler+0x618>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4618      	mov	r0, r3
 800399a:	f7fc fde5 	bl	8000568 <__aeabi_f2d>
 800399e:	a328      	add	r3, pc, #160	; (adr r3, 8003a40 <TIM1_TRG_COM_TIM17_IRQHandler+0x5c8>)
 80039a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a4:	f7fc fe38 	bl	8000618 <__aeabi_dmul>
 80039a8:	4602      	mov	r2, r0
 80039aa:	460b      	mov	r3, r1
 80039ac:	4610      	mov	r0, r2
 80039ae:	4619      	mov	r1, r3
 80039b0:	f04f 0200 	mov.w	r2, #0
 80039b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80039b8:	f7fc ff58 	bl	800086c <__aeabi_ddiv>
 80039bc:	4602      	mov	r2, r0
 80039be:	460b      	mov	r3, r1
 80039c0:	4620      	mov	r0, r4
 80039c2:	4629      	mov	r1, r5
 80039c4:	f7fc fc72 	bl	80002ac <__adddf3>
 80039c8:	4602      	mov	r2, r0
 80039ca:	460b      	mov	r3, r1
 80039cc:	4610      	mov	r0, r2
 80039ce:	4619      	mov	r1, r3
 80039d0:	f7fd f8fa 	bl	8000bc8 <__aeabi_d2f>
 80039d4:	4603      	mov	r3, r0
 80039d6:	4a2f      	ldr	r2, [pc, #188]	; (8003a94 <TIM1_TRG_COM_TIM17_IRQHandler+0x61c>)
 80039d8:	6153      	str	r3, [r2, #20]
		SoftPwmL.reqValueTemp = (SoftPwmL.WheelSpeed*60)/(2*3.14*RWHEEL);
 80039da:	4b2e      	ldr	r3, [pc, #184]	; (8003a94 <TIM1_TRG_COM_TIM17_IRQHandler+0x61c>)
 80039dc:	edd3 7a05 	vldr	s15, [r3, #20]
 80039e0:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8003a98 <TIM1_TRG_COM_TIM17_IRQHandler+0x620>
 80039e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039e8:	ee17 0a90 	vmov	r0, s15
 80039ec:	f7fc fdbc 	bl	8000568 <__aeabi_f2d>
 80039f0:	a315      	add	r3, pc, #84	; (adr r3, 8003a48 <TIM1_TRG_COM_TIM17_IRQHandler+0x5d0>)
 80039f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f6:	f7fc ff39 	bl	800086c <__aeabi_ddiv>
 80039fa:	4602      	mov	r2, r0
 80039fc:	460b      	mov	r3, r1
 80039fe:	4610      	mov	r0, r2
 8003a00:	4619      	mov	r1, r3
 8003a02:	f7fd f8e1 	bl	8000bc8 <__aeabi_d2f>
 8003a06:	4603      	mov	r3, r0
 8003a08:	4a22      	ldr	r2, [pc, #136]	; (8003a94 <TIM1_TRG_COM_TIM17_IRQHandler+0x61c>)
 8003a0a:	6193      	str	r3, [r2, #24]
		if((SoftPwmL.reqValueTemp >= - 50) && (SoftPwmL.reqValueTemp <= 50)) {
 8003a0c:	4b21      	ldr	r3, [pc, #132]	; (8003a94 <TIM1_TRG_COM_TIM17_IRQHandler+0x61c>)
 8003a0e:	edd3 7a06 	vldr	s15, [r3, #24]
 8003a12:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003a74 <TIM1_TRG_COM_TIM17_IRQHandler+0x5fc>
 8003a16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a1e:	db3d      	blt.n	8003a9c <TIM1_TRG_COM_TIM17_IRQHandler+0x624>
 8003a20:	4b1c      	ldr	r3, [pc, #112]	; (8003a94 <TIM1_TRG_COM_TIM17_IRQHandler+0x61c>)
 8003a22:	edd3 7a06 	vldr	s15, [r3, #24]
 8003a26:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8003a70 <TIM1_TRG_COM_TIM17_IRQHandler+0x5f8>
 8003a2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a32:	d833      	bhi.n	8003a9c <TIM1_TRG_COM_TIM17_IRQHandler+0x624>
			SoftPwmL.reqValueTemp = 0;
 8003a34:	4b17      	ldr	r3, [pc, #92]	; (8003a94 <TIM1_TRG_COM_TIM17_IRQHandler+0x61c>)
 8003a36:	f04f 0200 	mov.w	r2, #0
 8003a3a:	619a      	str	r2, [r3, #24]
 8003a3c:	e049      	b.n	8003ad2 <TIM1_TRG_COM_TIM17_IRQHandler+0x65a>
 8003a3e:	bf00      	nop
 8003a40:	1eb851ec 	.word	0x1eb851ec
 8003a44:	3fb1eb85 	.word	0x3fb1eb85
 8003a48:	09d49519 	.word	0x09d49519
 8003a4c:	3fbc2268 	.word	0x3fbc2268
 8003a50:	200009e4 	.word	0x200009e4
 8003a54:	c3fa0000 	.word	0xc3fa0000
 8003a58:	c3fa0000 	.word	0xc3fa0000
 8003a5c:	200009c4 	.word	0x200009c4
 8003a60:	3a83126f 	.word	0x3a83126f
 8003a64:	33d6bf95 	.word	0x33d6bf95
 8003a68:	43fa0000 	.word	0x43fa0000
 8003a6c:	43fa0000 	.word	0x43fa0000
 8003a70:	42480000 	.word	0x42480000
 8003a74:	c2480000 	.word	0xc2480000
 8003a78:	43c80000 	.word	0x43c80000
 8003a7c:	43c80000 	.word	0x43c80000
 8003a80:	c3c80000 	.word	0xc3c80000
 8003a84:	c3c80000 	.word	0xc3c80000
 8003a88:	40014000 	.word	0x40014000
 8003a8c:	20000f3c 	.word	0x20000f3c
 8003a90:	20000f40 	.word	0x20000f40
 8003a94:	20000a08 	.word	0x20000a08
 8003a98:	42700000 	.word	0x42700000
		} else if((SoftPwmL.reqValueTemp > MAXRPM)) {
 8003a9c:	4b90      	ldr	r3, [pc, #576]	; (8003ce0 <TIM1_TRG_COM_TIM17_IRQHandler+0x868>)
 8003a9e:	edd3 7a06 	vldr	s15, [r3, #24]
 8003aa2:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8003ce4 <TIM1_TRG_COM_TIM17_IRQHandler+0x86c>
 8003aa6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aae:	dd03      	ble.n	8003ab8 <TIM1_TRG_COM_TIM17_IRQHandler+0x640>
			SoftPwmL.reqValueTemp = MAXRPM;
 8003ab0:	4b8b      	ldr	r3, [pc, #556]	; (8003ce0 <TIM1_TRG_COM_TIM17_IRQHandler+0x868>)
 8003ab2:	4a8d      	ldr	r2, [pc, #564]	; (8003ce8 <TIM1_TRG_COM_TIM17_IRQHandler+0x870>)
 8003ab4:	619a      	str	r2, [r3, #24]
 8003ab6:	e00c      	b.n	8003ad2 <TIM1_TRG_COM_TIM17_IRQHandler+0x65a>
		} else if((SoftPwmL.reqValueTemp < -MAXRPM)) {
 8003ab8:	4b89      	ldr	r3, [pc, #548]	; (8003ce0 <TIM1_TRG_COM_TIM17_IRQHandler+0x868>)
 8003aba:	edd3 7a06 	vldr	s15, [r3, #24]
 8003abe:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8003cec <TIM1_TRG_COM_TIM17_IRQHandler+0x874>
 8003ac2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aca:	d502      	bpl.n	8003ad2 <TIM1_TRG_COM_TIM17_IRQHandler+0x65a>
			SoftPwmL.reqValueTemp = -MAXRPM;
 8003acc:	4b84      	ldr	r3, [pc, #528]	; (8003ce0 <TIM1_TRG_COM_TIM17_IRQHandler+0x868>)
 8003ace:	4a88      	ldr	r2, [pc, #544]	; (8003cf0 <TIM1_TRG_COM_TIM17_IRQHandler+0x878>)
 8003ad0:	619a      	str	r2, [r3, #24]
		}
		SoftPwmL.reqValue = (int16_t)SoftPwmL.reqValueTemp;
 8003ad2:	4b83      	ldr	r3, [pc, #524]	; (8003ce0 <TIM1_TRG_COM_TIM17_IRQHandler+0x868>)
 8003ad4:	edd3 7a06 	vldr	s15, [r3, #24]
 8003ad8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003adc:	ee17 3a90 	vmov	r3, s15
 8003ae0:	b21a      	sxth	r2, r3
 8003ae2:	4b7f      	ldr	r3, [pc, #508]	; (8003ce0 <TIM1_TRG_COM_TIM17_IRQHandler+0x868>)
 8003ae4:	839a      	strh	r2, [r3, #28]

		SoftPwmL.curValue = EncoderL.rpm;
 8003ae6:	4b83      	ldr	r3, [pc, #524]	; (8003cf4 <TIM1_TRG_COM_TIM17_IRQHandler+0x87c>)
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	b21a      	sxth	r2, r3
 8003aec:	4b7c      	ldr	r3, [pc, #496]	; (8003ce0 <TIM1_TRG_COM_TIM17_IRQHandler+0x868>)
 8003aee:	83da      	strh	r2, [r3, #30]
		SoftPwmL.errorValue = SoftPwmL.reqValue - SoftPwmL.curValue;
 8003af0:	4b7b      	ldr	r3, [pc, #492]	; (8003ce0 <TIM1_TRG_COM_TIM17_IRQHandler+0x868>)
 8003af2:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8003af6:	461a      	mov	r2, r3
 8003af8:	4b79      	ldr	r3, [pc, #484]	; (8003ce0 <TIM1_TRG_COM_TIM17_IRQHandler+0x868>)
 8003afa:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	4a77      	ldr	r2, [pc, #476]	; (8003ce0 <TIM1_TRG_COM_TIM17_IRQHandler+0x868>)
 8003b02:	6013      	str	r3, [r2, #0]
		SoftPwmL.pValue = KP * SoftPwmL.errorValue;
 8003b04:	4b76      	ldr	r3, [pc, #472]	; (8003ce0 <TIM1_TRG_COM_TIM17_IRQHandler+0x868>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	ee07 3a90 	vmov	s15, r3
 8003b0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b10:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8003cf8 <TIM1_TRG_COM_TIM17_IRQHandler+0x880>
 8003b14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b18:	4b71      	ldr	r3, [pc, #452]	; (8003ce0 <TIM1_TRG_COM_TIM17_IRQHandler+0x868>)
 8003b1a:	edc3 7a02 	vstr	s15, [r3, #8]
		SoftPwmL.iValue += KI * SoftPwmL.errorValue;
 8003b1e:	4b70      	ldr	r3, [pc, #448]	; (8003ce0 <TIM1_TRG_COM_TIM17_IRQHandler+0x868>)
 8003b20:	ed93 7a03 	vldr	s14, [r3, #12]
 8003b24:	4b6e      	ldr	r3, [pc, #440]	; (8003ce0 <TIM1_TRG_COM_TIM17_IRQHandler+0x868>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	ee07 3a90 	vmov	s15, r3
 8003b2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b30:	eddf 6a72 	vldr	s13, [pc, #456]	; 8003cfc <TIM1_TRG_COM_TIM17_IRQHandler+0x884>
 8003b34:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003b38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b3c:	4b68      	ldr	r3, [pc, #416]	; (8003ce0 <TIM1_TRG_COM_TIM17_IRQHandler+0x868>)
 8003b3e:	edc3 7a03 	vstr	s15, [r3, #12]
		if(SoftPwmL.iValue > ((float)MAXRPM)) SoftPwmL.iValue = MAXRPM;
 8003b42:	4b67      	ldr	r3, [pc, #412]	; (8003ce0 <TIM1_TRG_COM_TIM17_IRQHandler+0x868>)
 8003b44:	edd3 7a03 	vldr	s15, [r3, #12]
 8003b48:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8003ce4 <TIM1_TRG_COM_TIM17_IRQHandler+0x86c>
 8003b4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b54:	dd03      	ble.n	8003b5e <TIM1_TRG_COM_TIM17_IRQHandler+0x6e6>
 8003b56:	4b62      	ldr	r3, [pc, #392]	; (8003ce0 <TIM1_TRG_COM_TIM17_IRQHandler+0x868>)
 8003b58:	4a63      	ldr	r2, [pc, #396]	; (8003ce8 <TIM1_TRG_COM_TIM17_IRQHandler+0x870>)
 8003b5a:	60da      	str	r2, [r3, #12]
 8003b5c:	e00c      	b.n	8003b78 <TIM1_TRG_COM_TIM17_IRQHandler+0x700>
		else if(SoftPwmL.iValue < ((float)-MAXRPM)) SoftPwmL.iValue = -MAXRPM;
 8003b5e:	4b60      	ldr	r3, [pc, #384]	; (8003ce0 <TIM1_TRG_COM_TIM17_IRQHandler+0x868>)
 8003b60:	edd3 7a03 	vldr	s15, [r3, #12]
 8003b64:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8003cec <TIM1_TRG_COM_TIM17_IRQHandler+0x874>
 8003b68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b70:	d502      	bpl.n	8003b78 <TIM1_TRG_COM_TIM17_IRQHandler+0x700>
 8003b72:	4b5b      	ldr	r3, [pc, #364]	; (8003ce0 <TIM1_TRG_COM_TIM17_IRQHandler+0x868>)
 8003b74:	4a5e      	ldr	r2, [pc, #376]	; (8003cf0 <TIM1_TRG_COM_TIM17_IRQHandler+0x878>)
 8003b76:	60da      	str	r2, [r3, #12]
		if((SoftPwmL.iValue <= 50) && (SoftPwmL.iValue >= -50)) {
 8003b78:	4b59      	ldr	r3, [pc, #356]	; (8003ce0 <TIM1_TRG_COM_TIM17_IRQHandler+0x868>)
 8003b7a:	edd3 7a03 	vldr	s15, [r3, #12]
 8003b7e:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8003d00 <TIM1_TRG_COM_TIM17_IRQHandler+0x888>
 8003b82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b8a:	d80e      	bhi.n	8003baa <TIM1_TRG_COM_TIM17_IRQHandler+0x732>
 8003b8c:	4b54      	ldr	r3, [pc, #336]	; (8003ce0 <TIM1_TRG_COM_TIM17_IRQHandler+0x868>)
 8003b8e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003b92:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8003d04 <TIM1_TRG_COM_TIM17_IRQHandler+0x88c>
 8003b96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b9e:	db04      	blt.n	8003baa <TIM1_TRG_COM_TIM17_IRQHandler+0x732>
			SoftPwmL.sumValue = SoftPwmL.pValue;
 8003ba0:	4b4f      	ldr	r3, [pc, #316]	; (8003ce0 <TIM1_TRG_COM_TIM17_IRQHandler+0x868>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	4a4e      	ldr	r2, [pc, #312]	; (8003ce0 <TIM1_TRG_COM_TIM17_IRQHandler+0x868>)
 8003ba6:	6053      	str	r3, [r2, #4]
 8003ba8:	e00a      	b.n	8003bc0 <TIM1_TRG_COM_TIM17_IRQHandler+0x748>
		} else {
			SoftPwmL.sumValue = (SoftPwmL.pValue + SoftPwmL.iValue);
 8003baa:	4b4d      	ldr	r3, [pc, #308]	; (8003ce0 <TIM1_TRG_COM_TIM17_IRQHandler+0x868>)
 8003bac:	ed93 7a02 	vldr	s14, [r3, #8]
 8003bb0:	4b4b      	ldr	r3, [pc, #300]	; (8003ce0 <TIM1_TRG_COM_TIM17_IRQHandler+0x868>)
 8003bb2:	edd3 7a03 	vldr	s15, [r3, #12]
 8003bb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bba:	4b49      	ldr	r3, [pc, #292]	; (8003ce0 <TIM1_TRG_COM_TIM17_IRQHandler+0x868>)
 8003bbc:	edc3 7a01 	vstr	s15, [r3, #4]
		}
		SoftPwmL.pwmFloatValue += ((((float)SoftPwmL.sumValue)/((float)MAXRPM))*PWMVAL);
 8003bc0:	4b47      	ldr	r3, [pc, #284]	; (8003ce0 <TIM1_TRG_COM_TIM17_IRQHandler+0x868>)
 8003bc2:	ed93 7a04 	vldr	s14, [r3, #16]
 8003bc6:	4b46      	ldr	r3, [pc, #280]	; (8003ce0 <TIM1_TRG_COM_TIM17_IRQHandler+0x868>)
 8003bc8:	edd3 6a01 	vldr	s13, [r3, #4]
 8003bcc:	ed9f 6a45 	vldr	s12, [pc, #276]	; 8003ce4 <TIM1_TRG_COM_TIM17_IRQHandler+0x86c>
 8003bd0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003bd4:	eddf 6a4c 	vldr	s13, [pc, #304]	; 8003d08 <TIM1_TRG_COM_TIM17_IRQHandler+0x890>
 8003bd8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003bdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003be0:	4b3f      	ldr	r3, [pc, #252]	; (8003ce0 <TIM1_TRG_COM_TIM17_IRQHandler+0x868>)
 8003be2:	edc3 7a04 	vstr	s15, [r3, #16]
		if(SoftPwmL.pwmFloatValue > PWMVAL) SoftPwmL.pwmFloatValue = PWMVAL;
 8003be6:	4b3e      	ldr	r3, [pc, #248]	; (8003ce0 <TIM1_TRG_COM_TIM17_IRQHandler+0x868>)
 8003be8:	edd3 7a04 	vldr	s15, [r3, #16]
 8003bec:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8003d08 <TIM1_TRG_COM_TIM17_IRQHandler+0x890>
 8003bf0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bf8:	dd03      	ble.n	8003c02 <TIM1_TRG_COM_TIM17_IRQHandler+0x78a>
 8003bfa:	4b39      	ldr	r3, [pc, #228]	; (8003ce0 <TIM1_TRG_COM_TIM17_IRQHandler+0x868>)
 8003bfc:	4a43      	ldr	r2, [pc, #268]	; (8003d0c <TIM1_TRG_COM_TIM17_IRQHandler+0x894>)
 8003bfe:	611a      	str	r2, [r3, #16]
 8003c00:	e00c      	b.n	8003c1c <TIM1_TRG_COM_TIM17_IRQHandler+0x7a4>
		else if(SoftPwmL.pwmFloatValue < -PWMVAL) SoftPwmL.pwmFloatValue = -PWMVAL;
 8003c02:	4b37      	ldr	r3, [pc, #220]	; (8003ce0 <TIM1_TRG_COM_TIM17_IRQHandler+0x868>)
 8003c04:	edd3 7a04 	vldr	s15, [r3, #16]
 8003c08:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8003d10 <TIM1_TRG_COM_TIM17_IRQHandler+0x898>
 8003c0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c14:	d502      	bpl.n	8003c1c <TIM1_TRG_COM_TIM17_IRQHandler+0x7a4>
 8003c16:	4b32      	ldr	r3, [pc, #200]	; (8003ce0 <TIM1_TRG_COM_TIM17_IRQHandler+0x868>)
 8003c18:	4a3e      	ldr	r2, [pc, #248]	; (8003d14 <TIM1_TRG_COM_TIM17_IRQHandler+0x89c>)
 8003c1a:	611a      	str	r2, [r3, #16]
		SoftPwmL.pwmValue = (int16_t)SoftPwmL.pwmFloatValue;
 8003c1c:	4b30      	ldr	r3, [pc, #192]	; (8003ce0 <TIM1_TRG_COM_TIM17_IRQHandler+0x868>)
 8003c1e:	edd3 7a04 	vldr	s15, [r3, #16]
 8003c22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c26:	ee17 3a90 	vmov	r3, s15
 8003c2a:	b21a      	sxth	r2, r3
 8003c2c:	4b2c      	ldr	r3, [pc, #176]	; (8003ce0 <TIM1_TRG_COM_TIM17_IRQHandler+0x868>)
 8003c2e:	841a      	strh	r2, [r3, #32]
		if(SoftPwmL.reqValue == 0) {
 8003c30:	4b2b      	ldr	r3, [pc, #172]	; (8003ce0 <TIM1_TRG_COM_TIM17_IRQHandler+0x868>)
 8003c32:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d11d      	bne.n	8003c76 <TIM1_TRG_COM_TIM17_IRQHandler+0x7fe>
		  if(SoftPwmL.pwmValue > 0) {
 8003c3a:	4b29      	ldr	r3, [pc, #164]	; (8003ce0 <TIM1_TRG_COM_TIM17_IRQHandler+0x868>)
 8003c3c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	dd09      	ble.n	8003c58 <TIM1_TRG_COM_TIM17_IRQHandler+0x7e0>
			  SoftPwmL.pwmFloatValue -= 1;
 8003c44:	4b26      	ldr	r3, [pc, #152]	; (8003ce0 <TIM1_TRG_COM_TIM17_IRQHandler+0x868>)
 8003c46:	edd3 7a04 	vldr	s15, [r3, #16]
 8003c4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003c52:	4b23      	ldr	r3, [pc, #140]	; (8003ce0 <TIM1_TRG_COM_TIM17_IRQHandler+0x868>)
 8003c54:	edc3 7a04 	vstr	s15, [r3, #16]
		  }
		  if(SoftPwmL.pwmValue < 0) {
 8003c58:	4b21      	ldr	r3, [pc, #132]	; (8003ce0 <TIM1_TRG_COM_TIM17_IRQHandler+0x868>)
 8003c5a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	da09      	bge.n	8003c76 <TIM1_TRG_COM_TIM17_IRQHandler+0x7fe>
			  SoftPwmL.pwmFloatValue += 1;
 8003c62:	4b1f      	ldr	r3, [pc, #124]	; (8003ce0 <TIM1_TRG_COM_TIM17_IRQHandler+0x868>)
 8003c64:	edd3 7a04 	vldr	s15, [r3, #16]
 8003c68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003c70:	4b1b      	ldr	r3, [pc, #108]	; (8003ce0 <TIM1_TRG_COM_TIM17_IRQHandler+0x868>)
 8003c72:	edc3 7a04 	vstr	s15, [r3, #16]
		  }
		}

		if(SoftPwmL.pwmValue < 0) {
 8003c76:	4b1a      	ldr	r3, [pc, #104]	; (8003ce0 <TIM1_TRG_COM_TIM17_IRQHandler+0x868>)
 8003c78:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	da0d      	bge.n	8003c9c <TIM1_TRG_COM_TIM17_IRQHandler+0x824>
		  TIM15->CCR2 = TIM15->ARR - SoftPwmL.pwmValue*(-1);
 8003c80:	4b25      	ldr	r3, [pc, #148]	; (8003d18 <TIM1_TRG_COM_TIM17_IRQHandler+0x8a0>)
 8003c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c84:	4a16      	ldr	r2, [pc, #88]	; (8003ce0 <TIM1_TRG_COM_TIM17_IRQHandler+0x868>)
 8003c86:	f9b2 2020 	ldrsh.w	r2, [r2, #32]
 8003c8a:	4611      	mov	r1, r2
 8003c8c:	4a22      	ldr	r2, [pc, #136]	; (8003d18 <TIM1_TRG_COM_TIM17_IRQHandler+0x8a0>)
 8003c8e:	440b      	add	r3, r1
 8003c90:	6393      	str	r3, [r2, #56]	; 0x38
		  SoftPwmL.status = 2;
 8003c92:	4b13      	ldr	r3, [pc, #76]	; (8003ce0 <TIM1_TRG_COM_TIM17_IRQHandler+0x868>)
 8003c94:	2202      	movs	r2, #2
 8003c96:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8003c9a:	e016      	b.n	8003cca <TIM1_TRG_COM_TIM17_IRQHandler+0x852>
		} else if(SoftPwmL.pwmValue > 0) {
 8003c9c:	4b10      	ldr	r3, [pc, #64]	; (8003ce0 <TIM1_TRG_COM_TIM17_IRQHandler+0x868>)
 8003c9e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	dd0d      	ble.n	8003cc2 <TIM1_TRG_COM_TIM17_IRQHandler+0x84a>
		  TIM15->CCR2 = TIM15->ARR - SoftPwmL.pwmValue;
 8003ca6:	4b1c      	ldr	r3, [pc, #112]	; (8003d18 <TIM1_TRG_COM_TIM17_IRQHandler+0x8a0>)
 8003ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003caa:	4a0d      	ldr	r2, [pc, #52]	; (8003ce0 <TIM1_TRG_COM_TIM17_IRQHandler+0x868>)
 8003cac:	f9b2 2020 	ldrsh.w	r2, [r2, #32]
 8003cb0:	4611      	mov	r1, r2
 8003cb2:	4a19      	ldr	r2, [pc, #100]	; (8003d18 <TIM1_TRG_COM_TIM17_IRQHandler+0x8a0>)
 8003cb4:	1a5b      	subs	r3, r3, r1
 8003cb6:	6393      	str	r3, [r2, #56]	; 0x38
		  SoftPwmL.status = 1;
 8003cb8:	4b09      	ldr	r3, [pc, #36]	; (8003ce0 <TIM1_TRG_COM_TIM17_IRQHandler+0x868>)
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8003cc0:	e003      	b.n	8003cca <TIM1_TRG_COM_TIM17_IRQHandler+0x852>
		} else {
		  SoftPwmL.status = 0;
 8003cc2:	4b07      	ldr	r3, [pc, #28]	; (8003ce0 <TIM1_TRG_COM_TIM17_IRQHandler+0x868>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		}


		TIM17->SR &= ~(TIM_SR_UIF);
 8003cca:	4b14      	ldr	r3, [pc, #80]	; (8003d1c <TIM1_TRG_COM_TIM17_IRQHandler+0x8a4>)
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	4a13      	ldr	r2, [pc, #76]	; (8003d1c <TIM1_TRG_COM_TIM17_IRQHandler+0x8a4>)
 8003cd0:	f023 0301 	bic.w	r3, r3, #1
 8003cd4:	6113      	str	r3, [r2, #16]
//		uint32_t end_cycle = DWT->CYCCNT;
//		cycle_count = end_cycle - start_cycle;

	}
}
 8003cd6:	bf00      	nop
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bdb0      	pop	{r4, r5, r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	20000a08 	.word	0x20000a08
 8003ce4:	43fa0000 	.word	0x43fa0000
 8003ce8:	43fa0000 	.word	0x43fa0000
 8003cec:	c3fa0000 	.word	0xc3fa0000
 8003cf0:	c3fa0000 	.word	0xc3fa0000
 8003cf4:	200009d4 	.word	0x200009d4
 8003cf8:	3a83126f 	.word	0x3a83126f
 8003cfc:	33d6bf95 	.word	0x33d6bf95
 8003d00:	42480000 	.word	0x42480000
 8003d04:	c2480000 	.word	0xc2480000
 8003d08:	43c80000 	.word	0x43c80000
 8003d0c:	43c80000 	.word	0x43c80000
 8003d10:	c3c80000 	.word	0xc3c80000
 8003d14:	c3c80000 	.word	0xc3c80000
 8003d18:	40014000 	.word	0x40014000
 8003d1c:	40014800 	.word	0x40014800

08003d20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  return 1;
 8003d24:	2301      	movs	r3, #1
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <_kill>:

int _kill(int pid, int sig)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003d3a:	f008 fa03 	bl	800c144 <__errno>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2216      	movs	r2, #22
 8003d42:	601a      	str	r2, [r3, #0]
  return -1;
 8003d44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3708      	adds	r7, #8
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <_exit>:

void _exit (int status)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003d58:	f04f 31ff 	mov.w	r1, #4294967295
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f7ff ffe7 	bl	8003d30 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003d62:	e7fe      	b.n	8003d62 <_exit+0x12>

08003d64 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d70:	2300      	movs	r3, #0
 8003d72:	617b      	str	r3, [r7, #20]
 8003d74:	e00a      	b.n	8003d8c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003d76:	f3af 8000 	nop.w
 8003d7a:	4601      	mov	r1, r0
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	1c5a      	adds	r2, r3, #1
 8003d80:	60ba      	str	r2, [r7, #8]
 8003d82:	b2ca      	uxtb	r2, r1
 8003d84:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	3301      	adds	r3, #1
 8003d8a:	617b      	str	r3, [r7, #20]
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	dbf0      	blt.n	8003d76 <_read+0x12>
  }

  return len;
 8003d94:	687b      	ldr	r3, [r7, #4]
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3718      	adds	r7, #24
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}

08003d9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003d9e:	b580      	push	{r7, lr}
 8003da0:	b086      	sub	sp, #24
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	60f8      	str	r0, [r7, #12]
 8003da6:	60b9      	str	r1, [r7, #8]
 8003da8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003daa:	2300      	movs	r3, #0
 8003dac:	617b      	str	r3, [r7, #20]
 8003dae:	e009      	b.n	8003dc4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	1c5a      	adds	r2, r3, #1
 8003db4:	60ba      	str	r2, [r7, #8]
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	617b      	str	r3, [r7, #20]
 8003dc4:	697a      	ldr	r2, [r7, #20]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	dbf1      	blt.n	8003db0 <_write+0x12>
  }
  return len;
 8003dcc:	687b      	ldr	r3, [r7, #4]
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3718      	adds	r7, #24
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <_close>:

int _close(int file)
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	b083      	sub	sp, #12
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003dde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003dee:	b480      	push	{r7}
 8003df0:	b083      	sub	sp, #12
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
 8003df6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003dfe:	605a      	str	r2, [r3, #4]
  return 0;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	370c      	adds	r7, #12
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr

08003e0e <_isatty>:

int _isatty(int file)
{
 8003e0e:	b480      	push	{r7}
 8003e10:	b083      	sub	sp, #12
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003e16:	2301      	movs	r3, #1
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b085      	sub	sp, #20
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3714      	adds	r7, #20
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
	...

08003e40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e48:	4a14      	ldr	r2, [pc, #80]	; (8003e9c <_sbrk+0x5c>)
 8003e4a:	4b15      	ldr	r3, [pc, #84]	; (8003ea0 <_sbrk+0x60>)
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e54:	4b13      	ldr	r3, [pc, #76]	; (8003ea4 <_sbrk+0x64>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d102      	bne.n	8003e62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e5c:	4b11      	ldr	r3, [pc, #68]	; (8003ea4 <_sbrk+0x64>)
 8003e5e:	4a12      	ldr	r2, [pc, #72]	; (8003ea8 <_sbrk+0x68>)
 8003e60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e62:	4b10      	ldr	r3, [pc, #64]	; (8003ea4 <_sbrk+0x64>)
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4413      	add	r3, r2
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d207      	bcs.n	8003e80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e70:	f008 f968 	bl	800c144 <__errno>
 8003e74:	4603      	mov	r3, r0
 8003e76:	220c      	movs	r2, #12
 8003e78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e7e:	e009      	b.n	8003e94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e80:	4b08      	ldr	r3, [pc, #32]	; (8003ea4 <_sbrk+0x64>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e86:	4b07      	ldr	r3, [pc, #28]	; (8003ea4 <_sbrk+0x64>)
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	4a05      	ldr	r2, [pc, #20]	; (8003ea4 <_sbrk+0x64>)
 8003e90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e92:	68fb      	ldr	r3, [r7, #12]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3718      	adds	r7, #24
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	20004000 	.word	0x20004000
 8003ea0:	00000400 	.word	0x00000400
 8003ea4:	20000fac 	.word	0x20000fac
 8003ea8:	200022b0 	.word	0x200022b0

08003eac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003eb0:	4b06      	ldr	r3, [pc, #24]	; (8003ecc <SystemInit+0x20>)
 8003eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb6:	4a05      	ldr	r2, [pc, #20]	; (8003ecc <SystemInit+0x20>)
 8003eb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ebc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ec0:	bf00      	nop
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	e000ed00 	.word	0xe000ed00

08003ed0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003ed0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f08 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003ed4:	f7ff ffea 	bl	8003eac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ed8:	480c      	ldr	r0, [pc, #48]	; (8003f0c <LoopForever+0x6>)
  ldr r1, =_edata
 8003eda:	490d      	ldr	r1, [pc, #52]	; (8003f10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003edc:	4a0d      	ldr	r2, [pc, #52]	; (8003f14 <LoopForever+0xe>)
  movs r3, #0
 8003ede:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ee0:	e002      	b.n	8003ee8 <LoopCopyDataInit>

08003ee2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ee2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ee4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ee6:	3304      	adds	r3, #4

08003ee8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ee8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003eea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003eec:	d3f9      	bcc.n	8003ee2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003eee:	4a0a      	ldr	r2, [pc, #40]	; (8003f18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003ef0:	4c0a      	ldr	r4, [pc, #40]	; (8003f1c <LoopForever+0x16>)
  movs r3, #0
 8003ef2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ef4:	e001      	b.n	8003efa <LoopFillZerobss>

08003ef6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ef6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ef8:	3204      	adds	r2, #4

08003efa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003efa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003efc:	d3fb      	bcc.n	8003ef6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003efe:	f008 f927 	bl	800c150 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003f02:	f7fd fa6d 	bl	80013e0 <main>

08003f06 <LoopForever>:

LoopForever:
    b LoopForever
 8003f06:	e7fe      	b.n	8003f06 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003f08:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8003f0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f10:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8003f14:	0800f8d8 	.word	0x0800f8d8
  ldr r2, =_sbss
 8003f18:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8003f1c:	200022b0 	.word	0x200022b0

08003f20 <COMP2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003f20:	e7fe      	b.n	8003f20 <COMP2_IRQHandler>
	...

08003f24 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f28:	4b08      	ldr	r3, [pc, #32]	; (8003f4c <HAL_Init+0x28>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a07      	ldr	r2, [pc, #28]	; (8003f4c <HAL_Init+0x28>)
 8003f2e:	f043 0310 	orr.w	r3, r3, #16
 8003f32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f34:	2003      	movs	r0, #3
 8003f36:	f000 fd9a 	bl	8004a6e <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f3a:	2004      	movs	r0, #4
 8003f3c:	f7ff f8a8 	bl	8003090 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f40:	f7fe ff30 	bl	8002da4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	40022000 	.word	0x40022000

08003f50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f50:	b480      	push	{r7}
 8003f52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f54:	4b06      	ldr	r3, [pc, #24]	; (8003f70 <HAL_IncTick+0x20>)
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	461a      	mov	r2, r3
 8003f5a:	4b06      	ldr	r3, [pc, #24]	; (8003f74 <HAL_IncTick+0x24>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4413      	add	r3, r2
 8003f60:	4a04      	ldr	r2, [pc, #16]	; (8003f74 <HAL_IncTick+0x24>)
 8003f62:	6013      	str	r3, [r2, #0]
}
 8003f64:	bf00      	nop
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	20000008 	.word	0x20000008
 8003f74:	20000fb0 	.word	0x20000fb0

08003f78 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	af00      	add	r7, sp, #0
  return uwTick;  
 8003f7c:	4b03      	ldr	r3, [pc, #12]	; (8003f8c <HAL_GetTick+0x14>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	20000fb0 	.word	0x20000fb0

08003f90 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f98:	f7ff ffee 	bl	8003f78 <HAL_GetTick>
 8003f9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fa8:	d005      	beq.n	8003fb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003faa:	4b0a      	ldr	r3, [pc, #40]	; (8003fd4 <HAL_Delay+0x44>)
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	461a      	mov	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003fb6:	bf00      	nop
 8003fb8:	f7ff ffde 	bl	8003f78 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d8f7      	bhi.n	8003fb8 <HAL_Delay+0x28>
  {
  }
}
 8003fc8:	bf00      	nop
 8003fca:	bf00      	nop
 8003fcc:	3710      	adds	r7, #16
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	20000008 	.word	0x20000008

08003fd8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b09a      	sub	sp, #104	; 0x68
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8003fea:	2300      	movs	r3, #0
 8003fec:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d101      	bne.n	8003ff8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e169      	b.n	80042cc <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004002:	f003 0310 	and.w	r3, r3, #16
 8004006:	2b00      	cmp	r3, #0
 8004008:	d176      	bne.n	80040f8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400e:	2b00      	cmp	r3, #0
 8004010:	d152      	bne.n	80040b8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f7fe fee1 	bl	8002df4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d13b      	bne.n	80040b8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 fc01 	bl	8004848 <ADC_Disable>
 8004046:	4603      	mov	r3, r0
 8004048:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004050:	f003 0310 	and.w	r3, r3, #16
 8004054:	2b00      	cmp	r3, #0
 8004056:	d12f      	bne.n	80040b8 <HAL_ADC_Init+0xe0>
 8004058:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800405c:	2b00      	cmp	r3, #0
 800405e:	d12b      	bne.n	80040b8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004064:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004068:	f023 0302 	bic.w	r3, r3, #2
 800406c:	f043 0202 	orr.w	r2, r3, #2
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	689a      	ldr	r2, [r3, #8]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004082:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	689a      	ldr	r2, [r3, #8]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004092:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004094:	4b8f      	ldr	r3, [pc, #572]	; (80042d4 <HAL_ADC_Init+0x2fc>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a8f      	ldr	r2, [pc, #572]	; (80042d8 <HAL_ADC_Init+0x300>)
 800409a:	fba2 2303 	umull	r2, r3, r2, r3
 800409e:	0c9a      	lsrs	r2, r3, #18
 80040a0:	4613      	mov	r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	4413      	add	r3, r2
 80040a6:	005b      	lsls	r3, r3, #1
 80040a8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80040aa:	e002      	b.n	80040b2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	3b01      	subs	r3, #1
 80040b0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1f9      	bne.n	80040ac <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d007      	beq.n	80040d6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80040d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040d4:	d110      	bne.n	80040f8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040da:	f023 0312 	bic.w	r3, r3, #18
 80040de:	f043 0210 	orr.w	r2, r3, #16
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ea:	f043 0201 	orr.w	r2, r3, #1
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fc:	f003 0310 	and.w	r3, r3, #16
 8004100:	2b00      	cmp	r3, #0
 8004102:	f040 80d6 	bne.w	80042b2 <HAL_ADC_Init+0x2da>
 8004106:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800410a:	2b00      	cmp	r3, #0
 800410c:	f040 80d1 	bne.w	80042b2 <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800411a:	2b00      	cmp	r3, #0
 800411c:	f040 80c9 	bne.w	80042b2 <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004124:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004128:	f043 0202 	orr.w	r2, r3, #2
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004130:	4b6a      	ldr	r3, [pc, #424]	; (80042dc <HAL_ADC_Init+0x304>)
 8004132:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004134:	2300      	movs	r3, #0
 8004136:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f003 0303 	and.w	r3, r3, #3
 8004142:	2b01      	cmp	r3, #1
 8004144:	d108      	bne.n	8004158 <HAL_ADC_Init+0x180>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0301 	and.w	r3, r3, #1
 8004150:	2b01      	cmp	r3, #1
 8004152:	d101      	bne.n	8004158 <HAL_ADC_Init+0x180>
 8004154:	2301      	movs	r3, #1
 8004156:	e000      	b.n	800415a <HAL_ADC_Init+0x182>
 8004158:	2300      	movs	r3, #0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d11c      	bne.n	8004198 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800415e:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8004160:	2b00      	cmp	r3, #0
 8004162:	d010      	beq.n	8004186 <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f003 0303 	and.w	r3, r3, #3
 800416c:	2b01      	cmp	r3, #1
 800416e:	d107      	bne.n	8004180 <HAL_ADC_Init+0x1a8>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0301 	and.w	r3, r3, #1
 8004178:	2b01      	cmp	r3, #1
 800417a:	d101      	bne.n	8004180 <HAL_ADC_Init+0x1a8>
 800417c:	2301      	movs	r3, #1
 800417e:	e000      	b.n	8004182 <HAL_ADC_Init+0x1aa>
 8004180:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004182:	2b00      	cmp	r3, #0
 8004184:	d108      	bne.n	8004198 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8004186:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	431a      	orrs	r2, r3
 8004194:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004196:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	7e5b      	ldrb	r3, [r3, #25]
 800419c:	035b      	lsls	r3, r3, #13
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80041a2:	2a01      	cmp	r2, #1
 80041a4:	d002      	beq.n	80041ac <HAL_ADC_Init+0x1d4>
 80041a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80041aa:	e000      	b.n	80041ae <HAL_ADC_Init+0x1d6>
 80041ac:	2200      	movs	r2, #0
 80041ae:	431a      	orrs	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	431a      	orrs	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041be:	4313      	orrs	r3, r2
 80041c0:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d11b      	bne.n	8004204 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	7e5b      	ldrb	r3, [r3, #25]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d109      	bne.n	80041e8 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d8:	3b01      	subs	r3, #1
 80041da:	045a      	lsls	r2, r3, #17
 80041dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041de:	4313      	orrs	r3, r2
 80041e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041e4:	663b      	str	r3, [r7, #96]	; 0x60
 80041e6:	e00d      	b.n	8004204 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ec:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80041f0:	f043 0220 	orr.w	r2, r3, #32
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041fc:	f043 0201 	orr.w	r2, r3, #1
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004208:	2b01      	cmp	r3, #1
 800420a:	d007      	beq.n	800421c <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004214:	4313      	orrs	r3, r2
 8004216:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004218:	4313      	orrs	r3, r2
 800421a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f003 030c 	and.w	r3, r3, #12
 8004226:	2b00      	cmp	r3, #0
 8004228:	d114      	bne.n	8004254 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	6812      	ldr	r2, [r2, #0]
 8004234:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004238:	f023 0302 	bic.w	r3, r3, #2
 800423c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	7e1b      	ldrb	r3, [r3, #24]
 8004242:	039a      	lsls	r2, r3, #14
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800424a:	005b      	lsls	r3, r3, #1
 800424c:	4313      	orrs	r3, r2
 800424e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004250:	4313      	orrs	r3, r2
 8004252:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68da      	ldr	r2, [r3, #12]
 800425a:	4b21      	ldr	r3, [pc, #132]	; (80042e0 <HAL_ADC_Init+0x308>)
 800425c:	4013      	ands	r3, r2
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	6812      	ldr	r2, [r2, #0]
 8004262:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004264:	430b      	orrs	r3, r1
 8004266:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d10c      	bne.n	800428a <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004276:	f023 010f 	bic.w	r1, r3, #15
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	1e5a      	subs	r2, r3, #1
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	430a      	orrs	r2, r1
 8004286:	631a      	str	r2, [r3, #48]	; 0x30
 8004288:	e007      	b.n	800429a <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f022 020f 	bic.w	r2, r2, #15
 8004298:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a4:	f023 0303 	bic.w	r3, r3, #3
 80042a8:	f043 0201 	orr.w	r2, r3, #1
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	641a      	str	r2, [r3, #64]	; 0x40
 80042b0:	e00a      	b.n	80042c8 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	f023 0312 	bic.w	r3, r3, #18
 80042ba:	f043 0210 	orr.w	r2, r3, #16
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80042c2:	2301      	movs	r3, #1
 80042c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80042c8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3768      	adds	r7, #104	; 0x68
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	20000000 	.word	0x20000000
 80042d8:	431bde83 	.word	0x431bde83
 80042dc:	50000300 	.word	0x50000300
 80042e0:	fff0c007 	.word	0xfff0c007

080042e4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b09b      	sub	sp, #108	; 0x6c
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042ee:	2300      	movs	r3, #0
 80042f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80042f4:	2300      	movs	r3, #0
 80042f6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d101      	bne.n	8004306 <HAL_ADC_ConfigChannel+0x22>
 8004302:	2302      	movs	r3, #2
 8004304:	e295      	b.n	8004832 <HAL_ADC_ConfigChannel+0x54e>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f003 0304 	and.w	r3, r3, #4
 8004318:	2b00      	cmp	r3, #0
 800431a:	f040 8279 	bne.w	8004810 <HAL_ADC_ConfigChannel+0x52c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	2b04      	cmp	r3, #4
 8004324:	d81c      	bhi.n	8004360 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	685a      	ldr	r2, [r3, #4]
 8004330:	4613      	mov	r3, r2
 8004332:	005b      	lsls	r3, r3, #1
 8004334:	4413      	add	r3, r2
 8004336:	005b      	lsls	r3, r3, #1
 8004338:	461a      	mov	r2, r3
 800433a:	231f      	movs	r3, #31
 800433c:	4093      	lsls	r3, r2
 800433e:	43db      	mvns	r3, r3
 8004340:	4019      	ands	r1, r3
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	6818      	ldr	r0, [r3, #0]
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	685a      	ldr	r2, [r3, #4]
 800434a:	4613      	mov	r3, r2
 800434c:	005b      	lsls	r3, r3, #1
 800434e:	4413      	add	r3, r2
 8004350:	005b      	lsls	r3, r3, #1
 8004352:	fa00 f203 	lsl.w	r2, r0, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	430a      	orrs	r2, r1
 800435c:	631a      	str	r2, [r3, #48]	; 0x30
 800435e:	e063      	b.n	8004428 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	2b09      	cmp	r3, #9
 8004366:	d81e      	bhi.n	80043a6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	4613      	mov	r3, r2
 8004374:	005b      	lsls	r3, r3, #1
 8004376:	4413      	add	r3, r2
 8004378:	005b      	lsls	r3, r3, #1
 800437a:	3b1e      	subs	r3, #30
 800437c:	221f      	movs	r2, #31
 800437e:	fa02 f303 	lsl.w	r3, r2, r3
 8004382:	43db      	mvns	r3, r3
 8004384:	4019      	ands	r1, r3
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	6818      	ldr	r0, [r3, #0]
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	685a      	ldr	r2, [r3, #4]
 800438e:	4613      	mov	r3, r2
 8004390:	005b      	lsls	r3, r3, #1
 8004392:	4413      	add	r3, r2
 8004394:	005b      	lsls	r3, r3, #1
 8004396:	3b1e      	subs	r3, #30
 8004398:	fa00 f203 	lsl.w	r2, r0, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	430a      	orrs	r2, r1
 80043a2:	635a      	str	r2, [r3, #52]	; 0x34
 80043a4:	e040      	b.n	8004428 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	2b0e      	cmp	r3, #14
 80043ac:	d81e      	bhi.n	80043ec <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	685a      	ldr	r2, [r3, #4]
 80043b8:	4613      	mov	r3, r2
 80043ba:	005b      	lsls	r3, r3, #1
 80043bc:	4413      	add	r3, r2
 80043be:	005b      	lsls	r3, r3, #1
 80043c0:	3b3c      	subs	r3, #60	; 0x3c
 80043c2:	221f      	movs	r2, #31
 80043c4:	fa02 f303 	lsl.w	r3, r2, r3
 80043c8:	43db      	mvns	r3, r3
 80043ca:	4019      	ands	r1, r3
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	6818      	ldr	r0, [r3, #0]
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	4613      	mov	r3, r2
 80043d6:	005b      	lsls	r3, r3, #1
 80043d8:	4413      	add	r3, r2
 80043da:	005b      	lsls	r3, r3, #1
 80043dc:	3b3c      	subs	r3, #60	; 0x3c
 80043de:	fa00 f203 	lsl.w	r2, r0, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	430a      	orrs	r2, r1
 80043e8:	639a      	str	r2, [r3, #56]	; 0x38
 80043ea:	e01d      	b.n	8004428 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	685a      	ldr	r2, [r3, #4]
 80043f6:	4613      	mov	r3, r2
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	4413      	add	r3, r2
 80043fc:	005b      	lsls	r3, r3, #1
 80043fe:	3b5a      	subs	r3, #90	; 0x5a
 8004400:	221f      	movs	r2, #31
 8004402:	fa02 f303 	lsl.w	r3, r2, r3
 8004406:	43db      	mvns	r3, r3
 8004408:	4019      	ands	r1, r3
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	6818      	ldr	r0, [r3, #0]
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	685a      	ldr	r2, [r3, #4]
 8004412:	4613      	mov	r3, r2
 8004414:	005b      	lsls	r3, r3, #1
 8004416:	4413      	add	r3, r2
 8004418:	005b      	lsls	r3, r3, #1
 800441a:	3b5a      	subs	r3, #90	; 0x5a
 800441c:	fa00 f203 	lsl.w	r2, r0, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	430a      	orrs	r2, r1
 8004426:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f003 030c 	and.w	r3, r3, #12
 8004432:	2b00      	cmp	r3, #0
 8004434:	f040 80e5 	bne.w	8004602 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2b09      	cmp	r3, #9
 800443e:	d91c      	bls.n	800447a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6999      	ldr	r1, [r3, #24]
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	4613      	mov	r3, r2
 800444c:	005b      	lsls	r3, r3, #1
 800444e:	4413      	add	r3, r2
 8004450:	3b1e      	subs	r3, #30
 8004452:	2207      	movs	r2, #7
 8004454:	fa02 f303 	lsl.w	r3, r2, r3
 8004458:	43db      	mvns	r3, r3
 800445a:	4019      	ands	r1, r3
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	6898      	ldr	r0, [r3, #8]
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	4613      	mov	r3, r2
 8004466:	005b      	lsls	r3, r3, #1
 8004468:	4413      	add	r3, r2
 800446a:	3b1e      	subs	r3, #30
 800446c:	fa00 f203 	lsl.w	r2, r0, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	430a      	orrs	r2, r1
 8004476:	619a      	str	r2, [r3, #24]
 8004478:	e019      	b.n	80044ae <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	6959      	ldr	r1, [r3, #20]
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	4613      	mov	r3, r2
 8004486:	005b      	lsls	r3, r3, #1
 8004488:	4413      	add	r3, r2
 800448a:	2207      	movs	r2, #7
 800448c:	fa02 f303 	lsl.w	r3, r2, r3
 8004490:	43db      	mvns	r3, r3
 8004492:	4019      	ands	r1, r3
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	6898      	ldr	r0, [r3, #8]
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	4613      	mov	r3, r2
 800449e:	005b      	lsls	r3, r3, #1
 80044a0:	4413      	add	r3, r2
 80044a2:	fa00 f203 	lsl.w	r2, r0, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	430a      	orrs	r2, r1
 80044ac:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	695a      	ldr	r2, [r3, #20]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	08db      	lsrs	r3, r3, #3
 80044ba:	f003 0303 	and.w	r3, r3, #3
 80044be:	005b      	lsls	r3, r3, #1
 80044c0:	fa02 f303 	lsl.w	r3, r2, r3
 80044c4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	3b01      	subs	r3, #1
 80044cc:	2b03      	cmp	r3, #3
 80044ce:	d84f      	bhi.n	8004570 <HAL_ADC_ConfigChannel+0x28c>
 80044d0:	a201      	add	r2, pc, #4	; (adr r2, 80044d8 <HAL_ADC_ConfigChannel+0x1f4>)
 80044d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d6:	bf00      	nop
 80044d8:	080044e9 	.word	0x080044e9
 80044dc:	0800450b 	.word	0x0800450b
 80044e0:	0800452d 	.word	0x0800452d
 80044e4:	0800454f 	.word	0x0800454f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80044ee:	4b97      	ldr	r3, [pc, #604]	; (800474c <HAL_ADC_ConfigChannel+0x468>)
 80044f0:	4013      	ands	r3, r2
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	6812      	ldr	r2, [r2, #0]
 80044f6:	0691      	lsls	r1, r2, #26
 80044f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80044fa:	430a      	orrs	r2, r1
 80044fc:	431a      	orrs	r2, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004506:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004508:	e07b      	b.n	8004602 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004510:	4b8e      	ldr	r3, [pc, #568]	; (800474c <HAL_ADC_ConfigChannel+0x468>)
 8004512:	4013      	ands	r3, r2
 8004514:	683a      	ldr	r2, [r7, #0]
 8004516:	6812      	ldr	r2, [r2, #0]
 8004518:	0691      	lsls	r1, r2, #26
 800451a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800451c:	430a      	orrs	r2, r1
 800451e:	431a      	orrs	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004528:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800452a:	e06a      	b.n	8004602 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004532:	4b86      	ldr	r3, [pc, #536]	; (800474c <HAL_ADC_ConfigChannel+0x468>)
 8004534:	4013      	ands	r3, r2
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	6812      	ldr	r2, [r2, #0]
 800453a:	0691      	lsls	r1, r2, #26
 800453c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800453e:	430a      	orrs	r2, r1
 8004540:	431a      	orrs	r2, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800454a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800454c:	e059      	b.n	8004602 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004554:	4b7d      	ldr	r3, [pc, #500]	; (800474c <HAL_ADC_ConfigChannel+0x468>)
 8004556:	4013      	ands	r3, r2
 8004558:	683a      	ldr	r2, [r7, #0]
 800455a:	6812      	ldr	r2, [r2, #0]
 800455c:	0691      	lsls	r1, r2, #26
 800455e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004560:	430a      	orrs	r2, r1
 8004562:	431a      	orrs	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800456c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800456e:	e048      	b.n	8004602 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004576:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	069b      	lsls	r3, r3, #26
 8004580:	429a      	cmp	r2, r3
 8004582:	d107      	bne.n	8004594 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004592:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800459a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	069b      	lsls	r3, r3, #26
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d107      	bne.n	80045b8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80045b6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	069b      	lsls	r3, r3, #26
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d107      	bne.n	80045dc <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80045da:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	069b      	lsls	r3, r3, #26
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d107      	bne.n	8004600 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80045fe:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8004600:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f003 0303 	and.w	r3, r3, #3
 800460c:	2b01      	cmp	r3, #1
 800460e:	d108      	bne.n	8004622 <HAL_ADC_ConfigChannel+0x33e>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	2b01      	cmp	r3, #1
 800461c:	d101      	bne.n	8004622 <HAL_ADC_ConfigChannel+0x33e>
 800461e:	2301      	movs	r3, #1
 8004620:	e000      	b.n	8004624 <HAL_ADC_ConfigChannel+0x340>
 8004622:	2300      	movs	r3, #0
 8004624:	2b00      	cmp	r3, #0
 8004626:	f040 80fe 	bne.w	8004826 <HAL_ADC_ConfigChannel+0x542>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	2b01      	cmp	r3, #1
 8004630:	d00f      	beq.n	8004652 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2201      	movs	r2, #1
 8004640:	fa02 f303 	lsl.w	r3, r2, r3
 8004644:	43da      	mvns	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	400a      	ands	r2, r1
 800464c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8004650:	e049      	b.n	80046e6 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2201      	movs	r2, #1
 8004660:	409a      	lsls	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	430a      	orrs	r2, r1
 8004668:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2b09      	cmp	r3, #9
 8004672:	d91c      	bls.n	80046ae <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	6999      	ldr	r1, [r3, #24]
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	4613      	mov	r3, r2
 8004680:	005b      	lsls	r3, r3, #1
 8004682:	4413      	add	r3, r2
 8004684:	3b1b      	subs	r3, #27
 8004686:	2207      	movs	r2, #7
 8004688:	fa02 f303 	lsl.w	r3, r2, r3
 800468c:	43db      	mvns	r3, r3
 800468e:	4019      	ands	r1, r3
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	6898      	ldr	r0, [r3, #8]
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	4613      	mov	r3, r2
 800469a:	005b      	lsls	r3, r3, #1
 800469c:	4413      	add	r3, r2
 800469e:	3b1b      	subs	r3, #27
 80046a0:	fa00 f203 	lsl.w	r2, r0, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	430a      	orrs	r2, r1
 80046aa:	619a      	str	r2, [r3, #24]
 80046ac:	e01b      	b.n	80046e6 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	6959      	ldr	r1, [r3, #20]
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	1c5a      	adds	r2, r3, #1
 80046ba:	4613      	mov	r3, r2
 80046bc:	005b      	lsls	r3, r3, #1
 80046be:	4413      	add	r3, r2
 80046c0:	2207      	movs	r2, #7
 80046c2:	fa02 f303 	lsl.w	r3, r2, r3
 80046c6:	43db      	mvns	r3, r3
 80046c8:	4019      	ands	r1, r3
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	6898      	ldr	r0, [r3, #8]
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	1c5a      	adds	r2, r3, #1
 80046d4:	4613      	mov	r3, r2
 80046d6:	005b      	lsls	r3, r3, #1
 80046d8:	4413      	add	r3, r2
 80046da:	fa00 f203 	lsl.w	r2, r0, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	430a      	orrs	r2, r1
 80046e4:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80046e6:	4b1a      	ldr	r3, [pc, #104]	; (8004750 <HAL_ADC_ConfigChannel+0x46c>)
 80046e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2b10      	cmp	r3, #16
 80046f0:	d105      	bne.n	80046fe <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80046f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d014      	beq.n	8004728 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004702:	2b11      	cmp	r3, #17
 8004704:	d105      	bne.n	8004712 <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004706:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00a      	beq.n	8004728 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004716:	2b12      	cmp	r3, #18
 8004718:	f040 8085 	bne.w	8004826 <HAL_ADC_ConfigChannel+0x542>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800471c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8004724:	2b00      	cmp	r3, #0
 8004726:	d17e      	bne.n	8004826 <HAL_ADC_ConfigChannel+0x542>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004728:	2300      	movs	r3, #0
 800472a:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f003 0303 	and.w	r3, r3, #3
 8004736:	2b01      	cmp	r3, #1
 8004738:	d10c      	bne.n	8004754 <HAL_ADC_ConfigChannel+0x470>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	2b01      	cmp	r3, #1
 8004746:	d105      	bne.n	8004754 <HAL_ADC_ConfigChannel+0x470>
 8004748:	2301      	movs	r3, #1
 800474a:	e004      	b.n	8004756 <HAL_ADC_ConfigChannel+0x472>
 800474c:	83fff000 	.word	0x83fff000
 8004750:	50000300 	.word	0x50000300
 8004754:	2300      	movs	r3, #0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d150      	bne.n	80047fc <HAL_ADC_ConfigChannel+0x518>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800475a:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800475c:	2b00      	cmp	r3, #0
 800475e:	d010      	beq.n	8004782 <HAL_ADC_ConfigChannel+0x49e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f003 0303 	and.w	r3, r3, #3
 8004768:	2b01      	cmp	r3, #1
 800476a:	d107      	bne.n	800477c <HAL_ADC_ConfigChannel+0x498>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0301 	and.w	r3, r3, #1
 8004774:	2b01      	cmp	r3, #1
 8004776:	d101      	bne.n	800477c <HAL_ADC_ConfigChannel+0x498>
 8004778:	2301      	movs	r3, #1
 800477a:	e000      	b.n	800477e <HAL_ADC_ConfigChannel+0x49a>
 800477c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800477e:	2b00      	cmp	r3, #0
 8004780:	d13c      	bne.n	80047fc <HAL_ADC_ConfigChannel+0x518>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2b10      	cmp	r3, #16
 8004788:	d11d      	bne.n	80047c6 <HAL_ADC_ConfigChannel+0x4e2>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004792:	d118      	bne.n	80047c6 <HAL_ADC_ConfigChannel+0x4e2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8004794:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800479c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800479e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80047a0:	4b27      	ldr	r3, [pc, #156]	; (8004840 <HAL_ADC_ConfigChannel+0x55c>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a27      	ldr	r2, [pc, #156]	; (8004844 <HAL_ADC_ConfigChannel+0x560>)
 80047a6:	fba2 2303 	umull	r2, r3, r2, r3
 80047aa:	0c9a      	lsrs	r2, r3, #18
 80047ac:	4613      	mov	r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	4413      	add	r3, r2
 80047b2:	005b      	lsls	r3, r3, #1
 80047b4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80047b6:	e002      	b.n	80047be <HAL_ADC_ConfigChannel+0x4da>
          {
            wait_loop_index--;
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	3b01      	subs	r3, #1
 80047bc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d1f9      	bne.n	80047b8 <HAL_ADC_ConfigChannel+0x4d4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80047c4:	e02e      	b.n	8004824 <HAL_ADC_ConfigChannel+0x540>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2b11      	cmp	r3, #17
 80047cc:	d10b      	bne.n	80047e6 <HAL_ADC_ConfigChannel+0x502>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047d6:	d106      	bne.n	80047e6 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80047d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80047e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047e2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80047e4:	e01e      	b.n	8004824 <HAL_ADC_ConfigChannel+0x540>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2b12      	cmp	r3, #18
 80047ec:	d11a      	bne.n	8004824 <HAL_ADC_ConfigChannel+0x540>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80047ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80047f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047f8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80047fa:	e013      	b.n	8004824 <HAL_ADC_ConfigChannel+0x540>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004800:	f043 0220 	orr.w	r2, r3, #32
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800480e:	e00a      	b.n	8004826 <HAL_ADC_ConfigChannel+0x542>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004814:	f043 0220 	orr.w	r2, r3, #32
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004822:	e000      	b.n	8004826 <HAL_ADC_ConfigChannel+0x542>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004824:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800482e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004832:	4618      	mov	r0, r3
 8004834:	376c      	adds	r7, #108	; 0x6c
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	20000000 	.word	0x20000000
 8004844:	431bde83 	.word	0x431bde83

08004848 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004850:	2300      	movs	r3, #0
 8004852:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f003 0303 	and.w	r3, r3, #3
 800485e:	2b01      	cmp	r3, #1
 8004860:	d108      	bne.n	8004874 <ADC_Disable+0x2c>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0301 	and.w	r3, r3, #1
 800486c:	2b01      	cmp	r3, #1
 800486e:	d101      	bne.n	8004874 <ADC_Disable+0x2c>
 8004870:	2301      	movs	r3, #1
 8004872:	e000      	b.n	8004876 <ADC_Disable+0x2e>
 8004874:	2300      	movs	r3, #0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d047      	beq.n	800490a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f003 030d 	and.w	r3, r3, #13
 8004884:	2b01      	cmp	r3, #1
 8004886:	d10f      	bne.n	80048a8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	689a      	ldr	r2, [r3, #8]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f042 0202 	orr.w	r2, r2, #2
 8004896:	609a      	str	r2, [r3, #8]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2203      	movs	r2, #3
 800489e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80048a0:	f7ff fb6a 	bl	8003f78 <HAL_GetTick>
 80048a4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80048a6:	e029      	b.n	80048fc <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ac:	f043 0210 	orr.w	r2, r3, #16
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048b8:	f043 0201 	orr.w	r2, r3, #1
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e023      	b.n	800490c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80048c4:	f7ff fb58 	bl	8003f78 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d914      	bls.n	80048fc <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f003 0301 	and.w	r3, r3, #1
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d10d      	bne.n	80048fc <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e4:	f043 0210 	orr.w	r2, r3, #16
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f0:	f043 0201 	orr.w	r2, r3, #1
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e007      	b.n	800490c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	2b01      	cmp	r3, #1
 8004908:	d0dc      	beq.n	80048c4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800490a:	2300      	movs	r3, #0
}
 800490c:	4618      	mov	r0, r3
 800490e:	3710      	adds	r7, #16
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <__NVIC_SetPriorityGrouping>:
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f003 0307 	and.w	r3, r3, #7
 8004922:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004924:	4b0c      	ldr	r3, [pc, #48]	; (8004958 <__NVIC_SetPriorityGrouping+0x44>)
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800492a:	68ba      	ldr	r2, [r7, #8]
 800492c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004930:	4013      	ands	r3, r2
 8004932:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800493c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004944:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004946:	4a04      	ldr	r2, [pc, #16]	; (8004958 <__NVIC_SetPriorityGrouping+0x44>)
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	60d3      	str	r3, [r2, #12]
}
 800494c:	bf00      	nop
 800494e:	3714      	adds	r7, #20
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr
 8004958:	e000ed00 	.word	0xe000ed00

0800495c <__NVIC_GetPriorityGrouping>:
{
 800495c:	b480      	push	{r7}
 800495e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004960:	4b04      	ldr	r3, [pc, #16]	; (8004974 <__NVIC_GetPriorityGrouping+0x18>)
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	0a1b      	lsrs	r3, r3, #8
 8004966:	f003 0307 	and.w	r3, r3, #7
}
 800496a:	4618      	mov	r0, r3
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr
 8004974:	e000ed00 	.word	0xe000ed00

08004978 <__NVIC_EnableIRQ>:
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	4603      	mov	r3, r0
 8004980:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004986:	2b00      	cmp	r3, #0
 8004988:	db0b      	blt.n	80049a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800498a:	79fb      	ldrb	r3, [r7, #7]
 800498c:	f003 021f 	and.w	r2, r3, #31
 8004990:	4907      	ldr	r1, [pc, #28]	; (80049b0 <__NVIC_EnableIRQ+0x38>)
 8004992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004996:	095b      	lsrs	r3, r3, #5
 8004998:	2001      	movs	r0, #1
 800499a:	fa00 f202 	lsl.w	r2, r0, r2
 800499e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80049a2:	bf00      	nop
 80049a4:	370c      	adds	r7, #12
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	e000e100 	.word	0xe000e100

080049b4 <__NVIC_SetPriority>:
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	4603      	mov	r3, r0
 80049bc:	6039      	str	r1, [r7, #0]
 80049be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	db0a      	blt.n	80049de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	b2da      	uxtb	r2, r3
 80049cc:	490c      	ldr	r1, [pc, #48]	; (8004a00 <__NVIC_SetPriority+0x4c>)
 80049ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049d2:	0112      	lsls	r2, r2, #4
 80049d4:	b2d2      	uxtb	r2, r2
 80049d6:	440b      	add	r3, r1
 80049d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80049dc:	e00a      	b.n	80049f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	b2da      	uxtb	r2, r3
 80049e2:	4908      	ldr	r1, [pc, #32]	; (8004a04 <__NVIC_SetPriority+0x50>)
 80049e4:	79fb      	ldrb	r3, [r7, #7]
 80049e6:	f003 030f 	and.w	r3, r3, #15
 80049ea:	3b04      	subs	r3, #4
 80049ec:	0112      	lsls	r2, r2, #4
 80049ee:	b2d2      	uxtb	r2, r2
 80049f0:	440b      	add	r3, r1
 80049f2:	761a      	strb	r2, [r3, #24]
}
 80049f4:	bf00      	nop
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr
 8004a00:	e000e100 	.word	0xe000e100
 8004a04:	e000ed00 	.word	0xe000ed00

08004a08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b089      	sub	sp, #36	; 0x24
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f003 0307 	and.w	r3, r3, #7
 8004a1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	f1c3 0307 	rsb	r3, r3, #7
 8004a22:	2b04      	cmp	r3, #4
 8004a24:	bf28      	it	cs
 8004a26:	2304      	movcs	r3, #4
 8004a28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	3304      	adds	r3, #4
 8004a2e:	2b06      	cmp	r3, #6
 8004a30:	d902      	bls.n	8004a38 <NVIC_EncodePriority+0x30>
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	3b03      	subs	r3, #3
 8004a36:	e000      	b.n	8004a3a <NVIC_EncodePriority+0x32>
 8004a38:	2300      	movs	r3, #0
 8004a3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	fa02 f303 	lsl.w	r3, r2, r3
 8004a46:	43da      	mvns	r2, r3
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	401a      	ands	r2, r3
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a50:	f04f 31ff 	mov.w	r1, #4294967295
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	fa01 f303 	lsl.w	r3, r1, r3
 8004a5a:	43d9      	mvns	r1, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a60:	4313      	orrs	r3, r2
         );
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3724      	adds	r7, #36	; 0x24
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr

08004a6e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b082      	sub	sp, #8
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f7ff ff4c 	bl	8004914 <__NVIC_SetPriorityGrouping>
}
 8004a7c:	bf00      	nop
 8004a7e:	3708      	adds	r7, #8
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b086      	sub	sp, #24
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]
 8004a90:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004a92:	2300      	movs	r3, #0
 8004a94:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004a96:	f7ff ff61 	bl	800495c <__NVIC_GetPriorityGrouping>
 8004a9a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	68b9      	ldr	r1, [r7, #8]
 8004aa0:	6978      	ldr	r0, [r7, #20]
 8004aa2:	f7ff ffb1 	bl	8004a08 <NVIC_EncodePriority>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004aac:	4611      	mov	r1, r2
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7ff ff80 	bl	80049b4 <__NVIC_SetPriority>
}
 8004ab4:	bf00      	nop
 8004ab6:	3718      	adds	r7, #24
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7ff ff54 	bl	8004978 <__NVIC_EnableIRQ>
}
 8004ad0:	bf00      	nop
 8004ad2:	3708      	adds	r7, #8
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d101      	bne.n	8004aee <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e037      	b.n	8004b5e <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2202      	movs	r2, #2
 8004af2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004b04:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004b08:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004b12:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	695b      	ldr	r3, [r3, #20]
 8004b24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	69db      	ldr	r3, [r3, #28]
 8004b30:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68fa      	ldr	r2, [r7, #12]
 8004b3e:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 f8b3 	bl	8004cac <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}  
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3710      	adds	r7, #16
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b084      	sub	sp, #16
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b82:	2204      	movs	r2, #4
 8004b84:	409a      	lsls	r2, r3
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	4013      	ands	r3, r2
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d024      	beq.n	8004bd8 <HAL_DMA_IRQHandler+0x72>
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	f003 0304 	and.w	r3, r3, #4
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d01f      	beq.n	8004bd8 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0320 	and.w	r3, r3, #32
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d107      	bne.n	8004bb6 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f022 0204 	bic.w	r2, r2, #4
 8004bb4:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bbe:	2104      	movs	r1, #4
 8004bc0:	fa01 f202 	lsl.w	r2, r1, r2
 8004bc4:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d06a      	beq.n	8004ca4 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8004bd6:	e065      	b.n	8004ca4 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bdc:	2202      	movs	r2, #2
 8004bde:	409a      	lsls	r2, r3
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	4013      	ands	r3, r2
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d02c      	beq.n	8004c42 <HAL_DMA_IRQHandler+0xdc>
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	f003 0302 	and.w	r3, r3, #2
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d027      	beq.n	8004c42 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0320 	and.w	r3, r3, #32
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d10b      	bne.n	8004c18 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f022 020a 	bic.w	r2, r2, #10
 8004c0e:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c20:	2102      	movs	r1, #2
 8004c22:	fa01 f202 	lsl.w	r2, r1, r2
 8004c26:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d035      	beq.n	8004ca4 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8004c40:	e030      	b.n	8004ca4 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c46:	2208      	movs	r2, #8
 8004c48:	409a      	lsls	r2, r3
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d028      	beq.n	8004ca4 <HAL_DMA_IRQHandler+0x13e>
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	f003 0308 	and.w	r3, r3, #8
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d023      	beq.n	8004ca4 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f022 020e 	bic.w	r2, r2, #14
 8004c6a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c74:	2101      	movs	r1, #1
 8004c76:	fa01 f202 	lsl.w	r2, r1, r2
 8004c7a:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2201      	movs	r2, #1
 8004c86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d004      	beq.n	8004ca4 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	4798      	blx	r3
    }
  }
}  
 8004ca2:	e7ff      	b.n	8004ca4 <HAL_DMA_IRQHandler+0x13e>
 8004ca4:	bf00      	nop
 8004ca6:	3710      	adds	r7, #16
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	461a      	mov	r2, r3
 8004cba:	4b09      	ldr	r3, [pc, #36]	; (8004ce0 <DMA_CalcBaseAndBitshift+0x34>)
 8004cbc:	4413      	add	r3, r2
 8004cbe:	4a09      	ldr	r2, [pc, #36]	; (8004ce4 <DMA_CalcBaseAndBitshift+0x38>)
 8004cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc4:	091b      	lsrs	r3, r3, #4
 8004cc6:	009a      	lsls	r2, r3, #2
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a06      	ldr	r2, [pc, #24]	; (8004ce8 <DMA_CalcBaseAndBitshift+0x3c>)
 8004cd0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8004cd2:	bf00      	nop
 8004cd4:	370c      	adds	r7, #12
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	bffdfff8 	.word	0xbffdfff8
 8004ce4:	cccccccd 	.word	0xcccccccd
 8004ce8:	40020000 	.word	0x40020000

08004cec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b087      	sub	sp, #28
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004cfa:	e14e      	b.n	8004f9a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	2101      	movs	r1, #1
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	fa01 f303 	lsl.w	r3, r1, r3
 8004d08:	4013      	ands	r3, r2
 8004d0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	f000 8140 	beq.w	8004f94 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f003 0303 	and.w	r3, r3, #3
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d005      	beq.n	8004d2c <HAL_GPIO_Init+0x40>
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	f003 0303 	and.w	r3, r3, #3
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d130      	bne.n	8004d8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	005b      	lsls	r3, r3, #1
 8004d36:	2203      	movs	r2, #3
 8004d38:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3c:	43db      	mvns	r3, r3
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	4013      	ands	r3, r2
 8004d42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	68da      	ldr	r2, [r3, #12]
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	005b      	lsls	r3, r3, #1
 8004d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	693a      	ldr	r2, [r7, #16]
 8004d5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d62:	2201      	movs	r2, #1
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6a:	43db      	mvns	r3, r3
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	4013      	ands	r3, r2
 8004d70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	091b      	lsrs	r3, r3, #4
 8004d78:	f003 0201 	and.w	r2, r3, #1
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	693a      	ldr	r2, [r7, #16]
 8004d8c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f003 0303 	and.w	r3, r3, #3
 8004d96:	2b03      	cmp	r3, #3
 8004d98:	d017      	beq.n	8004dca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	005b      	lsls	r3, r3, #1
 8004da4:	2203      	movs	r2, #3
 8004da6:	fa02 f303 	lsl.w	r3, r2, r3
 8004daa:	43db      	mvns	r3, r3
 8004dac:	693a      	ldr	r2, [r7, #16]
 8004dae:	4013      	ands	r3, r2
 8004db0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	689a      	ldr	r2, [r3, #8]
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	005b      	lsls	r3, r3, #1
 8004dba:	fa02 f303 	lsl.w	r3, r2, r3
 8004dbe:	693a      	ldr	r2, [r7, #16]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	693a      	ldr	r2, [r7, #16]
 8004dc8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f003 0303 	and.w	r3, r3, #3
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d123      	bne.n	8004e1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	08da      	lsrs	r2, r3, #3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	3208      	adds	r2, #8
 8004dde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004de2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	f003 0307 	and.w	r3, r3, #7
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	220f      	movs	r2, #15
 8004dee:	fa02 f303 	lsl.w	r3, r2, r3
 8004df2:	43db      	mvns	r3, r3
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	4013      	ands	r3, r2
 8004df8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	691a      	ldr	r2, [r3, #16]
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	f003 0307 	and.w	r3, r3, #7
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0a:	693a      	ldr	r2, [r7, #16]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	08da      	lsrs	r2, r3, #3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	3208      	adds	r2, #8
 8004e18:	6939      	ldr	r1, [r7, #16]
 8004e1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	005b      	lsls	r3, r3, #1
 8004e28:	2203      	movs	r2, #3
 8004e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2e:	43db      	mvns	r3, r3
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	4013      	ands	r3, r2
 8004e34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	f003 0203 	and.w	r2, r3, #3
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	005b      	lsls	r3, r3, #1
 8004e42:	fa02 f303 	lsl.w	r3, r2, r3
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	693a      	ldr	r2, [r7, #16]
 8004e50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	f000 809a 	beq.w	8004f94 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e60:	4b55      	ldr	r3, [pc, #340]	; (8004fb8 <HAL_GPIO_Init+0x2cc>)
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	4a54      	ldr	r2, [pc, #336]	; (8004fb8 <HAL_GPIO_Init+0x2cc>)
 8004e66:	f043 0301 	orr.w	r3, r3, #1
 8004e6a:	6193      	str	r3, [r2, #24]
 8004e6c:	4b52      	ldr	r3, [pc, #328]	; (8004fb8 <HAL_GPIO_Init+0x2cc>)
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	f003 0301 	and.w	r3, r3, #1
 8004e74:	60bb      	str	r3, [r7, #8]
 8004e76:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004e78:	4a50      	ldr	r2, [pc, #320]	; (8004fbc <HAL_GPIO_Init+0x2d0>)
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	089b      	lsrs	r3, r3, #2
 8004e7e:	3302      	adds	r3, #2
 8004e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	f003 0303 	and.w	r3, r3, #3
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	220f      	movs	r2, #15
 8004e90:	fa02 f303 	lsl.w	r3, r2, r3
 8004e94:	43db      	mvns	r3, r3
 8004e96:	693a      	ldr	r2, [r7, #16]
 8004e98:	4013      	ands	r3, r2
 8004e9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004ea2:	d013      	beq.n	8004ecc <HAL_GPIO_Init+0x1e0>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a46      	ldr	r2, [pc, #280]	; (8004fc0 <HAL_GPIO_Init+0x2d4>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d00d      	beq.n	8004ec8 <HAL_GPIO_Init+0x1dc>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a45      	ldr	r2, [pc, #276]	; (8004fc4 <HAL_GPIO_Init+0x2d8>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d007      	beq.n	8004ec4 <HAL_GPIO_Init+0x1d8>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a44      	ldr	r2, [pc, #272]	; (8004fc8 <HAL_GPIO_Init+0x2dc>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d101      	bne.n	8004ec0 <HAL_GPIO_Init+0x1d4>
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e006      	b.n	8004ece <HAL_GPIO_Init+0x1e2>
 8004ec0:	2305      	movs	r3, #5
 8004ec2:	e004      	b.n	8004ece <HAL_GPIO_Init+0x1e2>
 8004ec4:	2302      	movs	r3, #2
 8004ec6:	e002      	b.n	8004ece <HAL_GPIO_Init+0x1e2>
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e000      	b.n	8004ece <HAL_GPIO_Init+0x1e2>
 8004ecc:	2300      	movs	r3, #0
 8004ece:	697a      	ldr	r2, [r7, #20]
 8004ed0:	f002 0203 	and.w	r2, r2, #3
 8004ed4:	0092      	lsls	r2, r2, #2
 8004ed6:	4093      	lsls	r3, r2
 8004ed8:	693a      	ldr	r2, [r7, #16]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004ede:	4937      	ldr	r1, [pc, #220]	; (8004fbc <HAL_GPIO_Init+0x2d0>)
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	089b      	lsrs	r3, r3, #2
 8004ee4:	3302      	adds	r3, #2
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004eec:	4b37      	ldr	r3, [pc, #220]	; (8004fcc <HAL_GPIO_Init+0x2e0>)
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	43db      	mvns	r3, r3
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	4013      	ands	r3, r2
 8004efa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d003      	beq.n	8004f10 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8004f08:	693a      	ldr	r2, [r7, #16]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004f10:	4a2e      	ldr	r2, [pc, #184]	; (8004fcc <HAL_GPIO_Init+0x2e0>)
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f16:	4b2d      	ldr	r3, [pc, #180]	; (8004fcc <HAL_GPIO_Init+0x2e0>)
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	43db      	mvns	r3, r3
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	4013      	ands	r3, r2
 8004f24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d003      	beq.n	8004f3a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004f3a:	4a24      	ldr	r2, [pc, #144]	; (8004fcc <HAL_GPIO_Init+0x2e0>)
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004f40:	4b22      	ldr	r3, [pc, #136]	; (8004fcc <HAL_GPIO_Init+0x2e0>)
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	43db      	mvns	r3, r3
 8004f4a:	693a      	ldr	r2, [r7, #16]
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d003      	beq.n	8004f64 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8004f5c:	693a      	ldr	r2, [r7, #16]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004f64:	4a19      	ldr	r2, [pc, #100]	; (8004fcc <HAL_GPIO_Init+0x2e0>)
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f6a:	4b18      	ldr	r3, [pc, #96]	; (8004fcc <HAL_GPIO_Init+0x2e0>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	43db      	mvns	r3, r3
 8004f74:	693a      	ldr	r2, [r7, #16]
 8004f76:	4013      	ands	r3, r2
 8004f78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d003      	beq.n	8004f8e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8004f86:	693a      	ldr	r2, [r7, #16]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004f8e:	4a0f      	ldr	r2, [pc, #60]	; (8004fcc <HAL_GPIO_Init+0x2e0>)
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	3301      	adds	r3, #1
 8004f98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	f47f aea9 	bne.w	8004cfc <HAL_GPIO_Init+0x10>
  }
}
 8004faa:	bf00      	nop
 8004fac:	bf00      	nop
 8004fae:	371c      	adds	r7, #28
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr
 8004fb8:	40021000 	.word	0x40021000
 8004fbc:	40010000 	.word	0x40010000
 8004fc0:	48000400 	.word	0x48000400
 8004fc4:	48000800 	.word	0x48000800
 8004fc8:	48000c00 	.word	0x48000c00
 8004fcc:	40010400 	.word	0x40010400

08004fd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	460b      	mov	r3, r1
 8004fda:	807b      	strh	r3, [r7, #2]
 8004fdc:	4613      	mov	r3, r2
 8004fde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004fe0:	787b      	ldrb	r3, [r7, #1]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d003      	beq.n	8004fee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004fe6:	887a      	ldrh	r2, [r7, #2]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004fec:	e002      	b.n	8004ff4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004fee:	887a      	ldrh	r2, [r7, #2]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004ff4:	bf00      	nop
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0
 8005006:	4603      	mov	r3, r0
 8005008:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800500a:	4b08      	ldr	r3, [pc, #32]	; (800502c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800500c:	695a      	ldr	r2, [r3, #20]
 800500e:	88fb      	ldrh	r3, [r7, #6]
 8005010:	4013      	ands	r3, r2
 8005012:	2b00      	cmp	r3, #0
 8005014:	d006      	beq.n	8005024 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005016:	4a05      	ldr	r2, [pc, #20]	; (800502c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005018:	88fb      	ldrh	r3, [r7, #6]
 800501a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800501c:	88fb      	ldrh	r3, [r7, #6]
 800501e:	4618      	mov	r0, r3
 8005020:	f000 f806 	bl	8005030 <HAL_GPIO_EXTI_Callback>
  }
}
 8005024:	bf00      	nop
 8005026:	3708      	adds	r7, #8
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}
 800502c:	40010400 	.word	0x40010400

08005030 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	4603      	mov	r3, r0
 8005038:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800503a:	bf00      	nop
 800503c:	370c      	adds	r7, #12
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
	...

08005048 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800504e:	af00      	add	r7, sp, #0
 8005050:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005054:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005058:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800505a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800505e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d102      	bne.n	800506e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	f001 b823 	b.w	80060b4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800506e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005072:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0301 	and.w	r3, r3, #1
 800507e:	2b00      	cmp	r3, #0
 8005080:	f000 817d 	beq.w	800537e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005084:	4bbc      	ldr	r3, [pc, #752]	; (8005378 <HAL_RCC_OscConfig+0x330>)
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f003 030c 	and.w	r3, r3, #12
 800508c:	2b04      	cmp	r3, #4
 800508e:	d00c      	beq.n	80050aa <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005090:	4bb9      	ldr	r3, [pc, #740]	; (8005378 <HAL_RCC_OscConfig+0x330>)
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	f003 030c 	and.w	r3, r3, #12
 8005098:	2b08      	cmp	r3, #8
 800509a:	d15c      	bne.n	8005156 <HAL_RCC_OscConfig+0x10e>
 800509c:	4bb6      	ldr	r3, [pc, #728]	; (8005378 <HAL_RCC_OscConfig+0x330>)
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050a8:	d155      	bne.n	8005156 <HAL_RCC_OscConfig+0x10e>
 80050aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80050ae:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050b2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80050b6:	fa93 f3a3 	rbit	r3, r3
 80050ba:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80050be:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050c2:	fab3 f383 	clz	r3, r3
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	095b      	lsrs	r3, r3, #5
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	f043 0301 	orr.w	r3, r3, #1
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d102      	bne.n	80050dc <HAL_RCC_OscConfig+0x94>
 80050d6:	4ba8      	ldr	r3, [pc, #672]	; (8005378 <HAL_RCC_OscConfig+0x330>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	e015      	b.n	8005108 <HAL_RCC_OscConfig+0xc0>
 80050dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80050e0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050e4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80050e8:	fa93 f3a3 	rbit	r3, r3
 80050ec:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80050f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80050f4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80050f8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80050fc:	fa93 f3a3 	rbit	r3, r3
 8005100:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8005104:	4b9c      	ldr	r3, [pc, #624]	; (8005378 <HAL_RCC_OscConfig+0x330>)
 8005106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005108:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800510c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8005110:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8005114:	fa92 f2a2 	rbit	r2, r2
 8005118:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800511c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8005120:	fab2 f282 	clz	r2, r2
 8005124:	b2d2      	uxtb	r2, r2
 8005126:	f042 0220 	orr.w	r2, r2, #32
 800512a:	b2d2      	uxtb	r2, r2
 800512c:	f002 021f 	and.w	r2, r2, #31
 8005130:	2101      	movs	r1, #1
 8005132:	fa01 f202 	lsl.w	r2, r1, r2
 8005136:	4013      	ands	r3, r2
 8005138:	2b00      	cmp	r3, #0
 800513a:	f000 811f 	beq.w	800537c <HAL_RCC_OscConfig+0x334>
 800513e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005142:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	2b00      	cmp	r3, #0
 800514c:	f040 8116 	bne.w	800537c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	f000 bfaf 	b.w	80060b4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005156:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800515a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005166:	d106      	bne.n	8005176 <HAL_RCC_OscConfig+0x12e>
 8005168:	4b83      	ldr	r3, [pc, #524]	; (8005378 <HAL_RCC_OscConfig+0x330>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a82      	ldr	r2, [pc, #520]	; (8005378 <HAL_RCC_OscConfig+0x330>)
 800516e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005172:	6013      	str	r3, [r2, #0]
 8005174:	e036      	b.n	80051e4 <HAL_RCC_OscConfig+0x19c>
 8005176:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800517a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d10c      	bne.n	80051a0 <HAL_RCC_OscConfig+0x158>
 8005186:	4b7c      	ldr	r3, [pc, #496]	; (8005378 <HAL_RCC_OscConfig+0x330>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a7b      	ldr	r2, [pc, #492]	; (8005378 <HAL_RCC_OscConfig+0x330>)
 800518c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005190:	6013      	str	r3, [r2, #0]
 8005192:	4b79      	ldr	r3, [pc, #484]	; (8005378 <HAL_RCC_OscConfig+0x330>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a78      	ldr	r2, [pc, #480]	; (8005378 <HAL_RCC_OscConfig+0x330>)
 8005198:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800519c:	6013      	str	r3, [r2, #0]
 800519e:	e021      	b.n	80051e4 <HAL_RCC_OscConfig+0x19c>
 80051a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80051b0:	d10c      	bne.n	80051cc <HAL_RCC_OscConfig+0x184>
 80051b2:	4b71      	ldr	r3, [pc, #452]	; (8005378 <HAL_RCC_OscConfig+0x330>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a70      	ldr	r2, [pc, #448]	; (8005378 <HAL_RCC_OscConfig+0x330>)
 80051b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051bc:	6013      	str	r3, [r2, #0]
 80051be:	4b6e      	ldr	r3, [pc, #440]	; (8005378 <HAL_RCC_OscConfig+0x330>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a6d      	ldr	r2, [pc, #436]	; (8005378 <HAL_RCC_OscConfig+0x330>)
 80051c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051c8:	6013      	str	r3, [r2, #0]
 80051ca:	e00b      	b.n	80051e4 <HAL_RCC_OscConfig+0x19c>
 80051cc:	4b6a      	ldr	r3, [pc, #424]	; (8005378 <HAL_RCC_OscConfig+0x330>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a69      	ldr	r2, [pc, #420]	; (8005378 <HAL_RCC_OscConfig+0x330>)
 80051d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051d6:	6013      	str	r3, [r2, #0]
 80051d8:	4b67      	ldr	r3, [pc, #412]	; (8005378 <HAL_RCC_OscConfig+0x330>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a66      	ldr	r2, [pc, #408]	; (8005378 <HAL_RCC_OscConfig+0x330>)
 80051de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051e2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80051e4:	4b64      	ldr	r3, [pc, #400]	; (8005378 <HAL_RCC_OscConfig+0x330>)
 80051e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e8:	f023 020f 	bic.w	r2, r3, #15
 80051ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	495f      	ldr	r1, [pc, #380]	; (8005378 <HAL_RCC_OscConfig+0x330>)
 80051fa:	4313      	orrs	r3, r2
 80051fc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005202:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d059      	beq.n	80052c2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800520e:	f7fe feb3 	bl	8003f78 <HAL_GetTick>
 8005212:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005216:	e00a      	b.n	800522e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005218:	f7fe feae 	bl	8003f78 <HAL_GetTick>
 800521c:	4602      	mov	r2, r0
 800521e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	2b64      	cmp	r3, #100	; 0x64
 8005226:	d902      	bls.n	800522e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8005228:	2303      	movs	r3, #3
 800522a:	f000 bf43 	b.w	80060b4 <HAL_RCC_OscConfig+0x106c>
 800522e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005232:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005236:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800523a:	fa93 f3a3 	rbit	r3, r3
 800523e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8005242:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005246:	fab3 f383 	clz	r3, r3
 800524a:	b2db      	uxtb	r3, r3
 800524c:	095b      	lsrs	r3, r3, #5
 800524e:	b2db      	uxtb	r3, r3
 8005250:	f043 0301 	orr.w	r3, r3, #1
 8005254:	b2db      	uxtb	r3, r3
 8005256:	2b01      	cmp	r3, #1
 8005258:	d102      	bne.n	8005260 <HAL_RCC_OscConfig+0x218>
 800525a:	4b47      	ldr	r3, [pc, #284]	; (8005378 <HAL_RCC_OscConfig+0x330>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	e015      	b.n	800528c <HAL_RCC_OscConfig+0x244>
 8005260:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005264:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005268:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800526c:	fa93 f3a3 	rbit	r3, r3
 8005270:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8005274:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005278:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800527c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8005280:	fa93 f3a3 	rbit	r3, r3
 8005284:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8005288:	4b3b      	ldr	r3, [pc, #236]	; (8005378 <HAL_RCC_OscConfig+0x330>)
 800528a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005290:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8005294:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8005298:	fa92 f2a2 	rbit	r2, r2
 800529c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80052a0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80052a4:	fab2 f282 	clz	r2, r2
 80052a8:	b2d2      	uxtb	r2, r2
 80052aa:	f042 0220 	orr.w	r2, r2, #32
 80052ae:	b2d2      	uxtb	r2, r2
 80052b0:	f002 021f 	and.w	r2, r2, #31
 80052b4:	2101      	movs	r1, #1
 80052b6:	fa01 f202 	lsl.w	r2, r1, r2
 80052ba:	4013      	ands	r3, r2
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d0ab      	beq.n	8005218 <HAL_RCC_OscConfig+0x1d0>
 80052c0:	e05d      	b.n	800537e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052c2:	f7fe fe59 	bl	8003f78 <HAL_GetTick>
 80052c6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052ca:	e00a      	b.n	80052e2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052cc:	f7fe fe54 	bl	8003f78 <HAL_GetTick>
 80052d0:	4602      	mov	r2, r0
 80052d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	2b64      	cmp	r3, #100	; 0x64
 80052da:	d902      	bls.n	80052e2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80052dc:	2303      	movs	r3, #3
 80052de:	f000 bee9 	b.w	80060b4 <HAL_RCC_OscConfig+0x106c>
 80052e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80052e6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ea:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80052ee:	fa93 f3a3 	rbit	r3, r3
 80052f2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80052f6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052fa:	fab3 f383 	clz	r3, r3
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	095b      	lsrs	r3, r3, #5
 8005302:	b2db      	uxtb	r3, r3
 8005304:	f043 0301 	orr.w	r3, r3, #1
 8005308:	b2db      	uxtb	r3, r3
 800530a:	2b01      	cmp	r3, #1
 800530c:	d102      	bne.n	8005314 <HAL_RCC_OscConfig+0x2cc>
 800530e:	4b1a      	ldr	r3, [pc, #104]	; (8005378 <HAL_RCC_OscConfig+0x330>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	e015      	b.n	8005340 <HAL_RCC_OscConfig+0x2f8>
 8005314:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005318:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800531c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8005320:	fa93 f3a3 	rbit	r3, r3
 8005324:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8005328:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800532c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8005330:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8005334:	fa93 f3a3 	rbit	r3, r3
 8005338:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800533c:	4b0e      	ldr	r3, [pc, #56]	; (8005378 <HAL_RCC_OscConfig+0x330>)
 800533e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005340:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005344:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8005348:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800534c:	fa92 f2a2 	rbit	r2, r2
 8005350:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8005354:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8005358:	fab2 f282 	clz	r2, r2
 800535c:	b2d2      	uxtb	r2, r2
 800535e:	f042 0220 	orr.w	r2, r2, #32
 8005362:	b2d2      	uxtb	r2, r2
 8005364:	f002 021f 	and.w	r2, r2, #31
 8005368:	2101      	movs	r1, #1
 800536a:	fa01 f202 	lsl.w	r2, r1, r2
 800536e:	4013      	ands	r3, r2
 8005370:	2b00      	cmp	r3, #0
 8005372:	d1ab      	bne.n	80052cc <HAL_RCC_OscConfig+0x284>
 8005374:	e003      	b.n	800537e <HAL_RCC_OscConfig+0x336>
 8005376:	bf00      	nop
 8005378:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800537c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800537e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005382:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 0302 	and.w	r3, r3, #2
 800538e:	2b00      	cmp	r3, #0
 8005390:	f000 817d 	beq.w	800568e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005394:	4ba6      	ldr	r3, [pc, #664]	; (8005630 <HAL_RCC_OscConfig+0x5e8>)
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	f003 030c 	and.w	r3, r3, #12
 800539c:	2b00      	cmp	r3, #0
 800539e:	d00b      	beq.n	80053b8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80053a0:	4ba3      	ldr	r3, [pc, #652]	; (8005630 <HAL_RCC_OscConfig+0x5e8>)
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f003 030c 	and.w	r3, r3, #12
 80053a8:	2b08      	cmp	r3, #8
 80053aa:	d172      	bne.n	8005492 <HAL_RCC_OscConfig+0x44a>
 80053ac:	4ba0      	ldr	r3, [pc, #640]	; (8005630 <HAL_RCC_OscConfig+0x5e8>)
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d16c      	bne.n	8005492 <HAL_RCC_OscConfig+0x44a>
 80053b8:	2302      	movs	r3, #2
 80053ba:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053be:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80053c2:	fa93 f3a3 	rbit	r3, r3
 80053c6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80053ca:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053ce:	fab3 f383 	clz	r3, r3
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	095b      	lsrs	r3, r3, #5
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	f043 0301 	orr.w	r3, r3, #1
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d102      	bne.n	80053e8 <HAL_RCC_OscConfig+0x3a0>
 80053e2:	4b93      	ldr	r3, [pc, #588]	; (8005630 <HAL_RCC_OscConfig+0x5e8>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	e013      	b.n	8005410 <HAL_RCC_OscConfig+0x3c8>
 80053e8:	2302      	movs	r3, #2
 80053ea:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ee:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80053f2:	fa93 f3a3 	rbit	r3, r3
 80053f6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80053fa:	2302      	movs	r3, #2
 80053fc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8005400:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005404:	fa93 f3a3 	rbit	r3, r3
 8005408:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800540c:	4b88      	ldr	r3, [pc, #544]	; (8005630 <HAL_RCC_OscConfig+0x5e8>)
 800540e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005410:	2202      	movs	r2, #2
 8005412:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8005416:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800541a:	fa92 f2a2 	rbit	r2, r2
 800541e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8005422:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8005426:	fab2 f282 	clz	r2, r2
 800542a:	b2d2      	uxtb	r2, r2
 800542c:	f042 0220 	orr.w	r2, r2, #32
 8005430:	b2d2      	uxtb	r2, r2
 8005432:	f002 021f 	and.w	r2, r2, #31
 8005436:	2101      	movs	r1, #1
 8005438:	fa01 f202 	lsl.w	r2, r1, r2
 800543c:	4013      	ands	r3, r2
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00a      	beq.n	8005458 <HAL_RCC_OscConfig+0x410>
 8005442:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005446:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	2b01      	cmp	r3, #1
 8005450:	d002      	beq.n	8005458 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	f000 be2e 	b.w	80060b4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005458:	4b75      	ldr	r3, [pc, #468]	; (8005630 <HAL_RCC_OscConfig+0x5e8>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005460:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005464:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	695b      	ldr	r3, [r3, #20]
 800546c:	21f8      	movs	r1, #248	; 0xf8
 800546e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005472:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8005476:	fa91 f1a1 	rbit	r1, r1
 800547a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800547e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8005482:	fab1 f181 	clz	r1, r1
 8005486:	b2c9      	uxtb	r1, r1
 8005488:	408b      	lsls	r3, r1
 800548a:	4969      	ldr	r1, [pc, #420]	; (8005630 <HAL_RCC_OscConfig+0x5e8>)
 800548c:	4313      	orrs	r3, r2
 800548e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005490:	e0fd      	b.n	800568e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005492:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005496:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	f000 8088 	beq.w	80055b4 <HAL_RCC_OscConfig+0x56c>
 80054a4:	2301      	movs	r3, #1
 80054a6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054aa:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80054ae:	fa93 f3a3 	rbit	r3, r3
 80054b2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80054b6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054ba:	fab3 f383 	clz	r3, r3
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80054c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	461a      	mov	r2, r3
 80054cc:	2301      	movs	r3, #1
 80054ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054d0:	f7fe fd52 	bl	8003f78 <HAL_GetTick>
 80054d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054d8:	e00a      	b.n	80054f0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054da:	f7fe fd4d 	bl	8003f78 <HAL_GetTick>
 80054de:	4602      	mov	r2, r0
 80054e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d902      	bls.n	80054f0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80054ea:	2303      	movs	r3, #3
 80054ec:	f000 bde2 	b.w	80060b4 <HAL_RCC_OscConfig+0x106c>
 80054f0:	2302      	movs	r3, #2
 80054f2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054f6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80054fa:	fa93 f3a3 	rbit	r3, r3
 80054fe:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8005502:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005506:	fab3 f383 	clz	r3, r3
 800550a:	b2db      	uxtb	r3, r3
 800550c:	095b      	lsrs	r3, r3, #5
 800550e:	b2db      	uxtb	r3, r3
 8005510:	f043 0301 	orr.w	r3, r3, #1
 8005514:	b2db      	uxtb	r3, r3
 8005516:	2b01      	cmp	r3, #1
 8005518:	d102      	bne.n	8005520 <HAL_RCC_OscConfig+0x4d8>
 800551a:	4b45      	ldr	r3, [pc, #276]	; (8005630 <HAL_RCC_OscConfig+0x5e8>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	e013      	b.n	8005548 <HAL_RCC_OscConfig+0x500>
 8005520:	2302      	movs	r3, #2
 8005522:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005526:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800552a:	fa93 f3a3 	rbit	r3, r3
 800552e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8005532:	2302      	movs	r3, #2
 8005534:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005538:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800553c:	fa93 f3a3 	rbit	r3, r3
 8005540:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8005544:	4b3a      	ldr	r3, [pc, #232]	; (8005630 <HAL_RCC_OscConfig+0x5e8>)
 8005546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005548:	2202      	movs	r2, #2
 800554a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800554e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8005552:	fa92 f2a2 	rbit	r2, r2
 8005556:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800555a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800555e:	fab2 f282 	clz	r2, r2
 8005562:	b2d2      	uxtb	r2, r2
 8005564:	f042 0220 	orr.w	r2, r2, #32
 8005568:	b2d2      	uxtb	r2, r2
 800556a:	f002 021f 	and.w	r2, r2, #31
 800556e:	2101      	movs	r1, #1
 8005570:	fa01 f202 	lsl.w	r2, r1, r2
 8005574:	4013      	ands	r3, r2
 8005576:	2b00      	cmp	r3, #0
 8005578:	d0af      	beq.n	80054da <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800557a:	4b2d      	ldr	r3, [pc, #180]	; (8005630 <HAL_RCC_OscConfig+0x5e8>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005582:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005586:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	695b      	ldr	r3, [r3, #20]
 800558e:	21f8      	movs	r1, #248	; 0xf8
 8005590:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005594:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005598:	fa91 f1a1 	rbit	r1, r1
 800559c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80055a0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80055a4:	fab1 f181 	clz	r1, r1
 80055a8:	b2c9      	uxtb	r1, r1
 80055aa:	408b      	lsls	r3, r1
 80055ac:	4920      	ldr	r1, [pc, #128]	; (8005630 <HAL_RCC_OscConfig+0x5e8>)
 80055ae:	4313      	orrs	r3, r2
 80055b0:	600b      	str	r3, [r1, #0]
 80055b2:	e06c      	b.n	800568e <HAL_RCC_OscConfig+0x646>
 80055b4:	2301      	movs	r3, #1
 80055b6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ba:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80055be:	fa93 f3a3 	rbit	r3, r3
 80055c2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80055c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055ca:	fab3 f383 	clz	r3, r3
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80055d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	461a      	mov	r2, r3
 80055dc:	2300      	movs	r3, #0
 80055de:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055e0:	f7fe fcca 	bl	8003f78 <HAL_GetTick>
 80055e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055e8:	e00a      	b.n	8005600 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055ea:	f7fe fcc5 	bl	8003f78 <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d902      	bls.n	8005600 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	f000 bd5a 	b.w	80060b4 <HAL_RCC_OscConfig+0x106c>
 8005600:	2302      	movs	r3, #2
 8005602:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005606:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800560a:	fa93 f3a3 	rbit	r3, r3
 800560e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8005612:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005616:	fab3 f383 	clz	r3, r3
 800561a:	b2db      	uxtb	r3, r3
 800561c:	095b      	lsrs	r3, r3, #5
 800561e:	b2db      	uxtb	r3, r3
 8005620:	f043 0301 	orr.w	r3, r3, #1
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b01      	cmp	r3, #1
 8005628:	d104      	bne.n	8005634 <HAL_RCC_OscConfig+0x5ec>
 800562a:	4b01      	ldr	r3, [pc, #4]	; (8005630 <HAL_RCC_OscConfig+0x5e8>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	e015      	b.n	800565c <HAL_RCC_OscConfig+0x614>
 8005630:	40021000 	.word	0x40021000
 8005634:	2302      	movs	r3, #2
 8005636:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800563a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800563e:	fa93 f3a3 	rbit	r3, r3
 8005642:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005646:	2302      	movs	r3, #2
 8005648:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800564c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005650:	fa93 f3a3 	rbit	r3, r3
 8005654:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005658:	4bc8      	ldr	r3, [pc, #800]	; (800597c <HAL_RCC_OscConfig+0x934>)
 800565a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565c:	2202      	movs	r2, #2
 800565e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8005662:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005666:	fa92 f2a2 	rbit	r2, r2
 800566a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800566e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005672:	fab2 f282 	clz	r2, r2
 8005676:	b2d2      	uxtb	r2, r2
 8005678:	f042 0220 	orr.w	r2, r2, #32
 800567c:	b2d2      	uxtb	r2, r2
 800567e:	f002 021f 	and.w	r2, r2, #31
 8005682:	2101      	movs	r1, #1
 8005684:	fa01 f202 	lsl.w	r2, r1, r2
 8005688:	4013      	ands	r3, r2
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1ad      	bne.n	80055ea <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800568e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005692:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0308 	and.w	r3, r3, #8
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f000 8110 	beq.w	80058c4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80056a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d079      	beq.n	80057a8 <HAL_RCC_OscConfig+0x760>
 80056b4:	2301      	movs	r3, #1
 80056b6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056ba:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80056be:	fa93 f3a3 	rbit	r3, r3
 80056c2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80056c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056ca:	fab3 f383 	clz	r3, r3
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	461a      	mov	r2, r3
 80056d2:	4bab      	ldr	r3, [pc, #684]	; (8005980 <HAL_RCC_OscConfig+0x938>)
 80056d4:	4413      	add	r3, r2
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	461a      	mov	r2, r3
 80056da:	2301      	movs	r3, #1
 80056dc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056de:	f7fe fc4b 	bl	8003f78 <HAL_GetTick>
 80056e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056e6:	e00a      	b.n	80056fe <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056e8:	f7fe fc46 	bl	8003f78 <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d902      	bls.n	80056fe <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80056f8:	2303      	movs	r3, #3
 80056fa:	f000 bcdb 	b.w	80060b4 <HAL_RCC_OscConfig+0x106c>
 80056fe:	2302      	movs	r3, #2
 8005700:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005704:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005708:	fa93 f3a3 	rbit	r3, r3
 800570c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005710:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005714:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005718:	2202      	movs	r2, #2
 800571a:	601a      	str	r2, [r3, #0]
 800571c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005720:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	fa93 f2a3 	rbit	r2, r3
 800572a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800572e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005732:	601a      	str	r2, [r3, #0]
 8005734:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005738:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800573c:	2202      	movs	r2, #2
 800573e:	601a      	str	r2, [r3, #0]
 8005740:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005744:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	fa93 f2a3 	rbit	r2, r3
 800574e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005752:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005756:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005758:	4b88      	ldr	r3, [pc, #544]	; (800597c <HAL_RCC_OscConfig+0x934>)
 800575a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800575c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005760:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005764:	2102      	movs	r1, #2
 8005766:	6019      	str	r1, [r3, #0]
 8005768:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800576c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	fa93 f1a3 	rbit	r1, r3
 8005776:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800577a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800577e:	6019      	str	r1, [r3, #0]
  return result;
 8005780:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005784:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	fab3 f383 	clz	r3, r3
 800578e:	b2db      	uxtb	r3, r3
 8005790:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005794:	b2db      	uxtb	r3, r3
 8005796:	f003 031f 	and.w	r3, r3, #31
 800579a:	2101      	movs	r1, #1
 800579c:	fa01 f303 	lsl.w	r3, r1, r3
 80057a0:	4013      	ands	r3, r2
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d0a0      	beq.n	80056e8 <HAL_RCC_OscConfig+0x6a0>
 80057a6:	e08d      	b.n	80058c4 <HAL_RCC_OscConfig+0x87c>
 80057a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057ac:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80057b0:	2201      	movs	r2, #1
 80057b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057b8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	fa93 f2a3 	rbit	r2, r3
 80057c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057c6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80057ca:	601a      	str	r2, [r3, #0]
  return result;
 80057cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057d0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80057d4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057d6:	fab3 f383 	clz	r3, r3
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	461a      	mov	r2, r3
 80057de:	4b68      	ldr	r3, [pc, #416]	; (8005980 <HAL_RCC_OscConfig+0x938>)
 80057e0:	4413      	add	r3, r2
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	461a      	mov	r2, r3
 80057e6:	2300      	movs	r3, #0
 80057e8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057ea:	f7fe fbc5 	bl	8003f78 <HAL_GetTick>
 80057ee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057f2:	e00a      	b.n	800580a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057f4:	f7fe fbc0 	bl	8003f78 <HAL_GetTick>
 80057f8:	4602      	mov	r2, r0
 80057fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	2b02      	cmp	r3, #2
 8005802:	d902      	bls.n	800580a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	f000 bc55 	b.w	80060b4 <HAL_RCC_OscConfig+0x106c>
 800580a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800580e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005812:	2202      	movs	r2, #2
 8005814:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005816:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800581a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	fa93 f2a3 	rbit	r2, r3
 8005824:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005828:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800582c:	601a      	str	r2, [r3, #0]
 800582e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005832:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005836:	2202      	movs	r2, #2
 8005838:	601a      	str	r2, [r3, #0]
 800583a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800583e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	fa93 f2a3 	rbit	r2, r3
 8005848:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800584c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005850:	601a      	str	r2, [r3, #0]
 8005852:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005856:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800585a:	2202      	movs	r2, #2
 800585c:	601a      	str	r2, [r3, #0]
 800585e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005862:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	fa93 f2a3 	rbit	r2, r3
 800586c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005870:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005874:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005876:	4b41      	ldr	r3, [pc, #260]	; (800597c <HAL_RCC_OscConfig+0x934>)
 8005878:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800587a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800587e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005882:	2102      	movs	r1, #2
 8005884:	6019      	str	r1, [r3, #0]
 8005886:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800588a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	fa93 f1a3 	rbit	r1, r3
 8005894:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005898:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800589c:	6019      	str	r1, [r3, #0]
  return result;
 800589e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058a2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	fab3 f383 	clz	r3, r3
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	f003 031f 	and.w	r3, r3, #31
 80058b8:	2101      	movs	r1, #1
 80058ba:	fa01 f303 	lsl.w	r3, r1, r3
 80058be:	4013      	ands	r3, r2
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d197      	bne.n	80057f4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0304 	and.w	r3, r3, #4
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	f000 81a1 	beq.w	8005c1c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058da:	2300      	movs	r3, #0
 80058dc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058e0:	4b26      	ldr	r3, [pc, #152]	; (800597c <HAL_RCC_OscConfig+0x934>)
 80058e2:	69db      	ldr	r3, [r3, #28]
 80058e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d116      	bne.n	800591a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058ec:	4b23      	ldr	r3, [pc, #140]	; (800597c <HAL_RCC_OscConfig+0x934>)
 80058ee:	69db      	ldr	r3, [r3, #28]
 80058f0:	4a22      	ldr	r2, [pc, #136]	; (800597c <HAL_RCC_OscConfig+0x934>)
 80058f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058f6:	61d3      	str	r3, [r2, #28]
 80058f8:	4b20      	ldr	r3, [pc, #128]	; (800597c <HAL_RCC_OscConfig+0x934>)
 80058fa:	69db      	ldr	r3, [r3, #28]
 80058fc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005900:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005904:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8005908:	601a      	str	r2, [r3, #0]
 800590a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800590e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8005912:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005914:	2301      	movs	r3, #1
 8005916:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800591a:	4b1a      	ldr	r3, [pc, #104]	; (8005984 <HAL_RCC_OscConfig+0x93c>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005922:	2b00      	cmp	r3, #0
 8005924:	d11a      	bne.n	800595c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005926:	4b17      	ldr	r3, [pc, #92]	; (8005984 <HAL_RCC_OscConfig+0x93c>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a16      	ldr	r2, [pc, #88]	; (8005984 <HAL_RCC_OscConfig+0x93c>)
 800592c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005930:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005932:	f7fe fb21 	bl	8003f78 <HAL_GetTick>
 8005936:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800593a:	e009      	b.n	8005950 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800593c:	f7fe fb1c 	bl	8003f78 <HAL_GetTick>
 8005940:	4602      	mov	r2, r0
 8005942:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	2b64      	cmp	r3, #100	; 0x64
 800594a:	d901      	bls.n	8005950 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800594c:	2303      	movs	r3, #3
 800594e:	e3b1      	b.n	80060b4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005950:	4b0c      	ldr	r3, [pc, #48]	; (8005984 <HAL_RCC_OscConfig+0x93c>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005958:	2b00      	cmp	r3, #0
 800595a:	d0ef      	beq.n	800593c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800595c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005960:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	2b01      	cmp	r3, #1
 800596a:	d10d      	bne.n	8005988 <HAL_RCC_OscConfig+0x940>
 800596c:	4b03      	ldr	r3, [pc, #12]	; (800597c <HAL_RCC_OscConfig+0x934>)
 800596e:	6a1b      	ldr	r3, [r3, #32]
 8005970:	4a02      	ldr	r2, [pc, #8]	; (800597c <HAL_RCC_OscConfig+0x934>)
 8005972:	f043 0301 	orr.w	r3, r3, #1
 8005976:	6213      	str	r3, [r2, #32]
 8005978:	e03c      	b.n	80059f4 <HAL_RCC_OscConfig+0x9ac>
 800597a:	bf00      	nop
 800597c:	40021000 	.word	0x40021000
 8005980:	10908120 	.word	0x10908120
 8005984:	40007000 	.word	0x40007000
 8005988:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800598c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d10c      	bne.n	80059b2 <HAL_RCC_OscConfig+0x96a>
 8005998:	4bc1      	ldr	r3, [pc, #772]	; (8005ca0 <HAL_RCC_OscConfig+0xc58>)
 800599a:	6a1b      	ldr	r3, [r3, #32]
 800599c:	4ac0      	ldr	r2, [pc, #768]	; (8005ca0 <HAL_RCC_OscConfig+0xc58>)
 800599e:	f023 0301 	bic.w	r3, r3, #1
 80059a2:	6213      	str	r3, [r2, #32]
 80059a4:	4bbe      	ldr	r3, [pc, #760]	; (8005ca0 <HAL_RCC_OscConfig+0xc58>)
 80059a6:	6a1b      	ldr	r3, [r3, #32]
 80059a8:	4abd      	ldr	r2, [pc, #756]	; (8005ca0 <HAL_RCC_OscConfig+0xc58>)
 80059aa:	f023 0304 	bic.w	r3, r3, #4
 80059ae:	6213      	str	r3, [r2, #32]
 80059b0:	e020      	b.n	80059f4 <HAL_RCC_OscConfig+0x9ac>
 80059b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	2b05      	cmp	r3, #5
 80059c0:	d10c      	bne.n	80059dc <HAL_RCC_OscConfig+0x994>
 80059c2:	4bb7      	ldr	r3, [pc, #732]	; (8005ca0 <HAL_RCC_OscConfig+0xc58>)
 80059c4:	6a1b      	ldr	r3, [r3, #32]
 80059c6:	4ab6      	ldr	r2, [pc, #728]	; (8005ca0 <HAL_RCC_OscConfig+0xc58>)
 80059c8:	f043 0304 	orr.w	r3, r3, #4
 80059cc:	6213      	str	r3, [r2, #32]
 80059ce:	4bb4      	ldr	r3, [pc, #720]	; (8005ca0 <HAL_RCC_OscConfig+0xc58>)
 80059d0:	6a1b      	ldr	r3, [r3, #32]
 80059d2:	4ab3      	ldr	r2, [pc, #716]	; (8005ca0 <HAL_RCC_OscConfig+0xc58>)
 80059d4:	f043 0301 	orr.w	r3, r3, #1
 80059d8:	6213      	str	r3, [r2, #32]
 80059da:	e00b      	b.n	80059f4 <HAL_RCC_OscConfig+0x9ac>
 80059dc:	4bb0      	ldr	r3, [pc, #704]	; (8005ca0 <HAL_RCC_OscConfig+0xc58>)
 80059de:	6a1b      	ldr	r3, [r3, #32]
 80059e0:	4aaf      	ldr	r2, [pc, #700]	; (8005ca0 <HAL_RCC_OscConfig+0xc58>)
 80059e2:	f023 0301 	bic.w	r3, r3, #1
 80059e6:	6213      	str	r3, [r2, #32]
 80059e8:	4bad      	ldr	r3, [pc, #692]	; (8005ca0 <HAL_RCC_OscConfig+0xc58>)
 80059ea:	6a1b      	ldr	r3, [r3, #32]
 80059ec:	4aac      	ldr	r2, [pc, #688]	; (8005ca0 <HAL_RCC_OscConfig+0xc58>)
 80059ee:	f023 0304 	bic.w	r3, r3, #4
 80059f2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80059f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	f000 8081 	beq.w	8005b08 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a06:	f7fe fab7 	bl	8003f78 <HAL_GetTick>
 8005a0a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a0e:	e00b      	b.n	8005a28 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a10:	f7fe fab2 	bl	8003f78 <HAL_GetTick>
 8005a14:	4602      	mov	r2, r0
 8005a16:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d901      	bls.n	8005a28 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8005a24:	2303      	movs	r3, #3
 8005a26:	e345      	b.n	80060b4 <HAL_RCC_OscConfig+0x106c>
 8005a28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a2c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005a30:	2202      	movs	r2, #2
 8005a32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a38:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	fa93 f2a3 	rbit	r2, r3
 8005a42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a46:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005a4a:	601a      	str	r2, [r3, #0]
 8005a4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a50:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005a54:	2202      	movs	r2, #2
 8005a56:	601a      	str	r2, [r3, #0]
 8005a58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a5c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	fa93 f2a3 	rbit	r2, r3
 8005a66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a6a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005a6e:	601a      	str	r2, [r3, #0]
  return result;
 8005a70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a74:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005a78:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a7a:	fab3 f383 	clz	r3, r3
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	095b      	lsrs	r3, r3, #5
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	f043 0302 	orr.w	r3, r3, #2
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d102      	bne.n	8005a94 <HAL_RCC_OscConfig+0xa4c>
 8005a8e:	4b84      	ldr	r3, [pc, #528]	; (8005ca0 <HAL_RCC_OscConfig+0xc58>)
 8005a90:	6a1b      	ldr	r3, [r3, #32]
 8005a92:	e013      	b.n	8005abc <HAL_RCC_OscConfig+0xa74>
 8005a94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a98:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005a9c:	2202      	movs	r2, #2
 8005a9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005aa4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	fa93 f2a3 	rbit	r2, r3
 8005aae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ab2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8005ab6:	601a      	str	r2, [r3, #0]
 8005ab8:	4b79      	ldr	r3, [pc, #484]	; (8005ca0 <HAL_RCC_OscConfig+0xc58>)
 8005aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005ac0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005ac4:	2102      	movs	r1, #2
 8005ac6:	6011      	str	r1, [r2, #0]
 8005ac8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005acc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005ad0:	6812      	ldr	r2, [r2, #0]
 8005ad2:	fa92 f1a2 	rbit	r1, r2
 8005ad6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005ada:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005ade:	6011      	str	r1, [r2, #0]
  return result;
 8005ae0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005ae4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005ae8:	6812      	ldr	r2, [r2, #0]
 8005aea:	fab2 f282 	clz	r2, r2
 8005aee:	b2d2      	uxtb	r2, r2
 8005af0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005af4:	b2d2      	uxtb	r2, r2
 8005af6:	f002 021f 	and.w	r2, r2, #31
 8005afa:	2101      	movs	r1, #1
 8005afc:	fa01 f202 	lsl.w	r2, r1, r2
 8005b00:	4013      	ands	r3, r2
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d084      	beq.n	8005a10 <HAL_RCC_OscConfig+0x9c8>
 8005b06:	e07f      	b.n	8005c08 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b08:	f7fe fa36 	bl	8003f78 <HAL_GetTick>
 8005b0c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b10:	e00b      	b.n	8005b2a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b12:	f7fe fa31 	bl	8003f78 <HAL_GetTick>
 8005b16:	4602      	mov	r2, r0
 8005b18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d901      	bls.n	8005b2a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	e2c4      	b.n	80060b4 <HAL_RCC_OscConfig+0x106c>
 8005b2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b2e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8005b32:	2202      	movs	r2, #2
 8005b34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b3a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	fa93 f2a3 	rbit	r2, r3
 8005b44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b48:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8005b4c:	601a      	str	r2, [r3, #0]
 8005b4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b52:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005b56:	2202      	movs	r2, #2
 8005b58:	601a      	str	r2, [r3, #0]
 8005b5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b5e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	fa93 f2a3 	rbit	r2, r3
 8005b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b6c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005b70:	601a      	str	r2, [r3, #0]
  return result;
 8005b72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b76:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005b7a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b7c:	fab3 f383 	clz	r3, r3
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	095b      	lsrs	r3, r3, #5
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	f043 0302 	orr.w	r3, r3, #2
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d102      	bne.n	8005b96 <HAL_RCC_OscConfig+0xb4e>
 8005b90:	4b43      	ldr	r3, [pc, #268]	; (8005ca0 <HAL_RCC_OscConfig+0xc58>)
 8005b92:	6a1b      	ldr	r3, [r3, #32]
 8005b94:	e013      	b.n	8005bbe <HAL_RCC_OscConfig+0xb76>
 8005b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b9a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005b9e:	2202      	movs	r2, #2
 8005ba0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ba2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ba6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	fa93 f2a3 	rbit	r2, r3
 8005bb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bb4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005bb8:	601a      	str	r2, [r3, #0]
 8005bba:	4b39      	ldr	r3, [pc, #228]	; (8005ca0 <HAL_RCC_OscConfig+0xc58>)
 8005bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bbe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005bc2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8005bc6:	2102      	movs	r1, #2
 8005bc8:	6011      	str	r1, [r2, #0]
 8005bca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005bce:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8005bd2:	6812      	ldr	r2, [r2, #0]
 8005bd4:	fa92 f1a2 	rbit	r1, r2
 8005bd8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005bdc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005be0:	6011      	str	r1, [r2, #0]
  return result;
 8005be2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005be6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005bea:	6812      	ldr	r2, [r2, #0]
 8005bec:	fab2 f282 	clz	r2, r2
 8005bf0:	b2d2      	uxtb	r2, r2
 8005bf2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bf6:	b2d2      	uxtb	r2, r2
 8005bf8:	f002 021f 	and.w	r2, r2, #31
 8005bfc:	2101      	movs	r1, #1
 8005bfe:	fa01 f202 	lsl.w	r2, r1, r2
 8005c02:	4013      	ands	r3, r2
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d184      	bne.n	8005b12 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005c08:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d105      	bne.n	8005c1c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c10:	4b23      	ldr	r3, [pc, #140]	; (8005ca0 <HAL_RCC_OscConfig+0xc58>)
 8005c12:	69db      	ldr	r3, [r3, #28]
 8005c14:	4a22      	ldr	r2, [pc, #136]	; (8005ca0 <HAL_RCC_OscConfig+0xc58>)
 8005c16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c1a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c20:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	69db      	ldr	r3, [r3, #28]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	f000 8242 	beq.w	80060b2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c2e:	4b1c      	ldr	r3, [pc, #112]	; (8005ca0 <HAL_RCC_OscConfig+0xc58>)
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	f003 030c 	and.w	r3, r3, #12
 8005c36:	2b08      	cmp	r3, #8
 8005c38:	f000 8213 	beq.w	8006062 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c40:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	69db      	ldr	r3, [r3, #28]
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	f040 8162 	bne.w	8005f12 <HAL_RCC_OscConfig+0xeca>
 8005c4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c52:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005c56:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005c5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c60:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	fa93 f2a3 	rbit	r2, r3
 8005c6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c6e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005c72:	601a      	str	r2, [r3, #0]
  return result;
 8005c74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c78:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005c7c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c7e:	fab3 f383 	clz	r3, r3
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005c88:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	461a      	mov	r2, r3
 8005c90:	2300      	movs	r3, #0
 8005c92:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c94:	f7fe f970 	bl	8003f78 <HAL_GetTick>
 8005c98:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c9c:	e00c      	b.n	8005cb8 <HAL_RCC_OscConfig+0xc70>
 8005c9e:	bf00      	nop
 8005ca0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ca4:	f7fe f968 	bl	8003f78 <HAL_GetTick>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	d901      	bls.n	8005cb8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	e1fd      	b.n	80060b4 <HAL_RCC_OscConfig+0x106c>
 8005cb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cbc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005cc0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005cc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cca:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	fa93 f2a3 	rbit	r2, r3
 8005cd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cd8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005cdc:	601a      	str	r2, [r3, #0]
  return result;
 8005cde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ce2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005ce6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ce8:	fab3 f383 	clz	r3, r3
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	095b      	lsrs	r3, r3, #5
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	f043 0301 	orr.w	r3, r3, #1
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d102      	bne.n	8005d02 <HAL_RCC_OscConfig+0xcba>
 8005cfc:	4bb0      	ldr	r3, [pc, #704]	; (8005fc0 <HAL_RCC_OscConfig+0xf78>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	e027      	b.n	8005d52 <HAL_RCC_OscConfig+0xd0a>
 8005d02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d06:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005d0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005d0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d14:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	fa93 f2a3 	rbit	r2, r3
 8005d1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d22:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005d26:	601a      	str	r2, [r3, #0]
 8005d28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d2c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005d30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005d34:	601a      	str	r2, [r3, #0]
 8005d36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d3a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	fa93 f2a3 	rbit	r2, r3
 8005d44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d48:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005d4c:	601a      	str	r2, [r3, #0]
 8005d4e:	4b9c      	ldr	r3, [pc, #624]	; (8005fc0 <HAL_RCC_OscConfig+0xf78>)
 8005d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d52:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005d56:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005d5a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005d5e:	6011      	str	r1, [r2, #0]
 8005d60:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005d64:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005d68:	6812      	ldr	r2, [r2, #0]
 8005d6a:	fa92 f1a2 	rbit	r1, r2
 8005d6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005d72:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005d76:	6011      	str	r1, [r2, #0]
  return result;
 8005d78:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005d7c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005d80:	6812      	ldr	r2, [r2, #0]
 8005d82:	fab2 f282 	clz	r2, r2
 8005d86:	b2d2      	uxtb	r2, r2
 8005d88:	f042 0220 	orr.w	r2, r2, #32
 8005d8c:	b2d2      	uxtb	r2, r2
 8005d8e:	f002 021f 	and.w	r2, r2, #31
 8005d92:	2101      	movs	r1, #1
 8005d94:	fa01 f202 	lsl.w	r2, r1, r2
 8005d98:	4013      	ands	r3, r2
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d182      	bne.n	8005ca4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d9e:	4b88      	ldr	r3, [pc, #544]	; (8005fc0 <HAL_RCC_OscConfig+0xf78>)
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005da6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005daa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005db2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005db6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	6a1b      	ldr	r3, [r3, #32]
 8005dbe:	430b      	orrs	r3, r1
 8005dc0:	497f      	ldr	r1, [pc, #508]	; (8005fc0 <HAL_RCC_OscConfig+0xf78>)
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	604b      	str	r3, [r1, #4]
 8005dc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005dca:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005dce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005dd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005dd8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	fa93 f2a3 	rbit	r2, r3
 8005de2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005de6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005dea:	601a      	str	r2, [r3, #0]
  return result;
 8005dec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005df0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005df4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005df6:	fab3 f383 	clz	r3, r3
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005e00:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	461a      	mov	r2, r3
 8005e08:	2301      	movs	r3, #1
 8005e0a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e0c:	f7fe f8b4 	bl	8003f78 <HAL_GetTick>
 8005e10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005e14:	e009      	b.n	8005e2a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e16:	f7fe f8af 	bl	8003f78 <HAL_GetTick>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	2b02      	cmp	r3, #2
 8005e24:	d901      	bls.n	8005e2a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8005e26:	2303      	movs	r3, #3
 8005e28:	e144      	b.n	80060b4 <HAL_RCC_OscConfig+0x106c>
 8005e2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e2e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005e32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005e36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e3c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	fa93 f2a3 	rbit	r2, r3
 8005e46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e4a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005e4e:	601a      	str	r2, [r3, #0]
  return result;
 8005e50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e54:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005e58:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005e5a:	fab3 f383 	clz	r3, r3
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	095b      	lsrs	r3, r3, #5
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	f043 0301 	orr.w	r3, r3, #1
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d102      	bne.n	8005e74 <HAL_RCC_OscConfig+0xe2c>
 8005e6e:	4b54      	ldr	r3, [pc, #336]	; (8005fc0 <HAL_RCC_OscConfig+0xf78>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	e027      	b.n	8005ec4 <HAL_RCC_OscConfig+0xe7c>
 8005e74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e78:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005e7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005e80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e86:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	fa93 f2a3 	rbit	r2, r3
 8005e90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e94:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005e98:	601a      	str	r2, [r3, #0]
 8005e9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e9e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005ea2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005ea6:	601a      	str	r2, [r3, #0]
 8005ea8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005eac:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	fa93 f2a3 	rbit	r2, r3
 8005eb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005eba:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8005ebe:	601a      	str	r2, [r3, #0]
 8005ec0:	4b3f      	ldr	r3, [pc, #252]	; (8005fc0 <HAL_RCC_OscConfig+0xf78>)
 8005ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005ec8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005ecc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005ed0:	6011      	str	r1, [r2, #0]
 8005ed2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005ed6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005eda:	6812      	ldr	r2, [r2, #0]
 8005edc:	fa92 f1a2 	rbit	r1, r2
 8005ee0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005ee4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005ee8:	6011      	str	r1, [r2, #0]
  return result;
 8005eea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005eee:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005ef2:	6812      	ldr	r2, [r2, #0]
 8005ef4:	fab2 f282 	clz	r2, r2
 8005ef8:	b2d2      	uxtb	r2, r2
 8005efa:	f042 0220 	orr.w	r2, r2, #32
 8005efe:	b2d2      	uxtb	r2, r2
 8005f00:	f002 021f 	and.w	r2, r2, #31
 8005f04:	2101      	movs	r1, #1
 8005f06:	fa01 f202 	lsl.w	r2, r1, r2
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d082      	beq.n	8005e16 <HAL_RCC_OscConfig+0xdce>
 8005f10:	e0cf      	b.n	80060b2 <HAL_RCC_OscConfig+0x106a>
 8005f12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f16:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005f1a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005f1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f24:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	fa93 f2a3 	rbit	r2, r3
 8005f2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f32:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005f36:	601a      	str	r2, [r3, #0]
  return result;
 8005f38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f3c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005f40:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f42:	fab3 f383 	clz	r3, r3
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005f4c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	461a      	mov	r2, r3
 8005f54:	2300      	movs	r3, #0
 8005f56:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f58:	f7fe f80e 	bl	8003f78 <HAL_GetTick>
 8005f5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f60:	e009      	b.n	8005f76 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f62:	f7fe f809 	bl	8003f78 <HAL_GetTick>
 8005f66:	4602      	mov	r2, r0
 8005f68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005f6c:	1ad3      	subs	r3, r2, r3
 8005f6e:	2b02      	cmp	r3, #2
 8005f70:	d901      	bls.n	8005f76 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e09e      	b.n	80060b4 <HAL_RCC_OscConfig+0x106c>
 8005f76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f7a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005f7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005f82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f88:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	fa93 f2a3 	rbit	r2, r3
 8005f92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f96:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005f9a:	601a      	str	r2, [r3, #0]
  return result;
 8005f9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005fa0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005fa4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005fa6:	fab3 f383 	clz	r3, r3
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	095b      	lsrs	r3, r3, #5
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	f043 0301 	orr.w	r3, r3, #1
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d104      	bne.n	8005fc4 <HAL_RCC_OscConfig+0xf7c>
 8005fba:	4b01      	ldr	r3, [pc, #4]	; (8005fc0 <HAL_RCC_OscConfig+0xf78>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	e029      	b.n	8006014 <HAL_RCC_OscConfig+0xfcc>
 8005fc0:	40021000 	.word	0x40021000
 8005fc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005fc8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005fcc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005fd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005fd6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	fa93 f2a3 	rbit	r2, r3
 8005fe0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005fe4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005fe8:	601a      	str	r2, [r3, #0]
 8005fea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005fee:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005ff2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005ff6:	601a      	str	r2, [r3, #0]
 8005ff8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ffc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	fa93 f2a3 	rbit	r2, r3
 8006006:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800600a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800600e:	601a      	str	r2, [r3, #0]
 8006010:	4b2b      	ldr	r3, [pc, #172]	; (80060c0 <HAL_RCC_OscConfig+0x1078>)
 8006012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006014:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006018:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800601c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006020:	6011      	str	r1, [r2, #0]
 8006022:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006026:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800602a:	6812      	ldr	r2, [r2, #0]
 800602c:	fa92 f1a2 	rbit	r1, r2
 8006030:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006034:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8006038:	6011      	str	r1, [r2, #0]
  return result;
 800603a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800603e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8006042:	6812      	ldr	r2, [r2, #0]
 8006044:	fab2 f282 	clz	r2, r2
 8006048:	b2d2      	uxtb	r2, r2
 800604a:	f042 0220 	orr.w	r2, r2, #32
 800604e:	b2d2      	uxtb	r2, r2
 8006050:	f002 021f 	and.w	r2, r2, #31
 8006054:	2101      	movs	r1, #1
 8006056:	fa01 f202 	lsl.w	r2, r1, r2
 800605a:	4013      	ands	r3, r2
 800605c:	2b00      	cmp	r3, #0
 800605e:	d180      	bne.n	8005f62 <HAL_RCC_OscConfig+0xf1a>
 8006060:	e027      	b.n	80060b2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006062:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006066:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	69db      	ldr	r3, [r3, #28]
 800606e:	2b01      	cmp	r3, #1
 8006070:	d101      	bne.n	8006076 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e01e      	b.n	80060b4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006076:	4b12      	ldr	r3, [pc, #72]	; (80060c0 <HAL_RCC_OscConfig+0x1078>)
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800607e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006082:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006086:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800608a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	6a1b      	ldr	r3, [r3, #32]
 8006092:	429a      	cmp	r2, r3
 8006094:	d10b      	bne.n	80060ae <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8006096:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800609a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800609e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d001      	beq.n	80060b2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e000      	b.n	80060b4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	40021000 	.word	0x40021000

080060c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b09e      	sub	sp, #120	; 0x78
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80060ce:	2300      	movs	r3, #0
 80060d0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d101      	bne.n	80060dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	e162      	b.n	80063a2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80060dc:	4b90      	ldr	r3, [pc, #576]	; (8006320 <HAL_RCC_ClockConfig+0x25c>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 0307 	and.w	r3, r3, #7
 80060e4:	683a      	ldr	r2, [r7, #0]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d910      	bls.n	800610c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060ea:	4b8d      	ldr	r3, [pc, #564]	; (8006320 <HAL_RCC_ClockConfig+0x25c>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f023 0207 	bic.w	r2, r3, #7
 80060f2:	498b      	ldr	r1, [pc, #556]	; (8006320 <HAL_RCC_ClockConfig+0x25c>)
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060fa:	4b89      	ldr	r3, [pc, #548]	; (8006320 <HAL_RCC_ClockConfig+0x25c>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 0307 	and.w	r3, r3, #7
 8006102:	683a      	ldr	r2, [r7, #0]
 8006104:	429a      	cmp	r2, r3
 8006106:	d001      	beq.n	800610c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	e14a      	b.n	80063a2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 0302 	and.w	r3, r3, #2
 8006114:	2b00      	cmp	r3, #0
 8006116:	d008      	beq.n	800612a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006118:	4b82      	ldr	r3, [pc, #520]	; (8006324 <HAL_RCC_ClockConfig+0x260>)
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	497f      	ldr	r1, [pc, #508]	; (8006324 <HAL_RCC_ClockConfig+0x260>)
 8006126:	4313      	orrs	r3, r2
 8006128:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f003 0301 	and.w	r3, r3, #1
 8006132:	2b00      	cmp	r3, #0
 8006134:	f000 80dc 	beq.w	80062f0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	2b01      	cmp	r3, #1
 800613e:	d13c      	bne.n	80061ba <HAL_RCC_ClockConfig+0xf6>
 8006140:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006144:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006146:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006148:	fa93 f3a3 	rbit	r3, r3
 800614c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800614e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006150:	fab3 f383 	clz	r3, r3
 8006154:	b2db      	uxtb	r3, r3
 8006156:	095b      	lsrs	r3, r3, #5
 8006158:	b2db      	uxtb	r3, r3
 800615a:	f043 0301 	orr.w	r3, r3, #1
 800615e:	b2db      	uxtb	r3, r3
 8006160:	2b01      	cmp	r3, #1
 8006162:	d102      	bne.n	800616a <HAL_RCC_ClockConfig+0xa6>
 8006164:	4b6f      	ldr	r3, [pc, #444]	; (8006324 <HAL_RCC_ClockConfig+0x260>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	e00f      	b.n	800618a <HAL_RCC_ClockConfig+0xc6>
 800616a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800616e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006170:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006172:	fa93 f3a3 	rbit	r3, r3
 8006176:	667b      	str	r3, [r7, #100]	; 0x64
 8006178:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800617c:	663b      	str	r3, [r7, #96]	; 0x60
 800617e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006180:	fa93 f3a3 	rbit	r3, r3
 8006184:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006186:	4b67      	ldr	r3, [pc, #412]	; (8006324 <HAL_RCC_ClockConfig+0x260>)
 8006188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800618e:	65ba      	str	r2, [r7, #88]	; 0x58
 8006190:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006192:	fa92 f2a2 	rbit	r2, r2
 8006196:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8006198:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800619a:	fab2 f282 	clz	r2, r2
 800619e:	b2d2      	uxtb	r2, r2
 80061a0:	f042 0220 	orr.w	r2, r2, #32
 80061a4:	b2d2      	uxtb	r2, r2
 80061a6:	f002 021f 	and.w	r2, r2, #31
 80061aa:	2101      	movs	r1, #1
 80061ac:	fa01 f202 	lsl.w	r2, r1, r2
 80061b0:	4013      	ands	r3, r2
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d17b      	bne.n	80062ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e0f3      	b.n	80063a2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	2b02      	cmp	r3, #2
 80061c0:	d13c      	bne.n	800623c <HAL_RCC_ClockConfig+0x178>
 80061c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80061c6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061ca:	fa93 f3a3 	rbit	r3, r3
 80061ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80061d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061d2:	fab3 f383 	clz	r3, r3
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	095b      	lsrs	r3, r3, #5
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	f043 0301 	orr.w	r3, r3, #1
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d102      	bne.n	80061ec <HAL_RCC_ClockConfig+0x128>
 80061e6:	4b4f      	ldr	r3, [pc, #316]	; (8006324 <HAL_RCC_ClockConfig+0x260>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	e00f      	b.n	800620c <HAL_RCC_ClockConfig+0x148>
 80061ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80061f0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061f4:	fa93 f3a3 	rbit	r3, r3
 80061f8:	647b      	str	r3, [r7, #68]	; 0x44
 80061fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80061fe:	643b      	str	r3, [r7, #64]	; 0x40
 8006200:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006202:	fa93 f3a3 	rbit	r3, r3
 8006206:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006208:	4b46      	ldr	r3, [pc, #280]	; (8006324 <HAL_RCC_ClockConfig+0x260>)
 800620a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006210:	63ba      	str	r2, [r7, #56]	; 0x38
 8006212:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006214:	fa92 f2a2 	rbit	r2, r2
 8006218:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800621a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800621c:	fab2 f282 	clz	r2, r2
 8006220:	b2d2      	uxtb	r2, r2
 8006222:	f042 0220 	orr.w	r2, r2, #32
 8006226:	b2d2      	uxtb	r2, r2
 8006228:	f002 021f 	and.w	r2, r2, #31
 800622c:	2101      	movs	r1, #1
 800622e:	fa01 f202 	lsl.w	r2, r1, r2
 8006232:	4013      	ands	r3, r2
 8006234:	2b00      	cmp	r3, #0
 8006236:	d13a      	bne.n	80062ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e0b2      	b.n	80063a2 <HAL_RCC_ClockConfig+0x2de>
 800623c:	2302      	movs	r3, #2
 800623e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006242:	fa93 f3a3 	rbit	r3, r3
 8006246:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800624a:	fab3 f383 	clz	r3, r3
 800624e:	b2db      	uxtb	r3, r3
 8006250:	095b      	lsrs	r3, r3, #5
 8006252:	b2db      	uxtb	r3, r3
 8006254:	f043 0301 	orr.w	r3, r3, #1
 8006258:	b2db      	uxtb	r3, r3
 800625a:	2b01      	cmp	r3, #1
 800625c:	d102      	bne.n	8006264 <HAL_RCC_ClockConfig+0x1a0>
 800625e:	4b31      	ldr	r3, [pc, #196]	; (8006324 <HAL_RCC_ClockConfig+0x260>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	e00d      	b.n	8006280 <HAL_RCC_ClockConfig+0x1bc>
 8006264:	2302      	movs	r3, #2
 8006266:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800626a:	fa93 f3a3 	rbit	r3, r3
 800626e:	627b      	str	r3, [r7, #36]	; 0x24
 8006270:	2302      	movs	r3, #2
 8006272:	623b      	str	r3, [r7, #32]
 8006274:	6a3b      	ldr	r3, [r7, #32]
 8006276:	fa93 f3a3 	rbit	r3, r3
 800627a:	61fb      	str	r3, [r7, #28]
 800627c:	4b29      	ldr	r3, [pc, #164]	; (8006324 <HAL_RCC_ClockConfig+0x260>)
 800627e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006280:	2202      	movs	r2, #2
 8006282:	61ba      	str	r2, [r7, #24]
 8006284:	69ba      	ldr	r2, [r7, #24]
 8006286:	fa92 f2a2 	rbit	r2, r2
 800628a:	617a      	str	r2, [r7, #20]
  return result;
 800628c:	697a      	ldr	r2, [r7, #20]
 800628e:	fab2 f282 	clz	r2, r2
 8006292:	b2d2      	uxtb	r2, r2
 8006294:	f042 0220 	orr.w	r2, r2, #32
 8006298:	b2d2      	uxtb	r2, r2
 800629a:	f002 021f 	and.w	r2, r2, #31
 800629e:	2101      	movs	r1, #1
 80062a0:	fa01 f202 	lsl.w	r2, r1, r2
 80062a4:	4013      	ands	r3, r2
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d101      	bne.n	80062ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e079      	b.n	80063a2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80062ae:	4b1d      	ldr	r3, [pc, #116]	; (8006324 <HAL_RCC_ClockConfig+0x260>)
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	f023 0203 	bic.w	r2, r3, #3
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	491a      	ldr	r1, [pc, #104]	; (8006324 <HAL_RCC_ClockConfig+0x260>)
 80062bc:	4313      	orrs	r3, r2
 80062be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80062c0:	f7fd fe5a 	bl	8003f78 <HAL_GetTick>
 80062c4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062c6:	e00a      	b.n	80062de <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062c8:	f7fd fe56 	bl	8003f78 <HAL_GetTick>
 80062cc:	4602      	mov	r2, r0
 80062ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d901      	bls.n	80062de <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80062da:	2303      	movs	r3, #3
 80062dc:	e061      	b.n	80063a2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062de:	4b11      	ldr	r3, [pc, #68]	; (8006324 <HAL_RCC_ClockConfig+0x260>)
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	f003 020c 	and.w	r2, r3, #12
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d1eb      	bne.n	80062c8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80062f0:	4b0b      	ldr	r3, [pc, #44]	; (8006320 <HAL_RCC_ClockConfig+0x25c>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 0307 	and.w	r3, r3, #7
 80062f8:	683a      	ldr	r2, [r7, #0]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d214      	bcs.n	8006328 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062fe:	4b08      	ldr	r3, [pc, #32]	; (8006320 <HAL_RCC_ClockConfig+0x25c>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f023 0207 	bic.w	r2, r3, #7
 8006306:	4906      	ldr	r1, [pc, #24]	; (8006320 <HAL_RCC_ClockConfig+0x25c>)
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	4313      	orrs	r3, r2
 800630c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800630e:	4b04      	ldr	r3, [pc, #16]	; (8006320 <HAL_RCC_ClockConfig+0x25c>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f003 0307 	and.w	r3, r3, #7
 8006316:	683a      	ldr	r2, [r7, #0]
 8006318:	429a      	cmp	r2, r3
 800631a:	d005      	beq.n	8006328 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	e040      	b.n	80063a2 <HAL_RCC_ClockConfig+0x2de>
 8006320:	40022000 	.word	0x40022000
 8006324:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 0304 	and.w	r3, r3, #4
 8006330:	2b00      	cmp	r3, #0
 8006332:	d008      	beq.n	8006346 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006334:	4b1d      	ldr	r3, [pc, #116]	; (80063ac <HAL_RCC_ClockConfig+0x2e8>)
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	491a      	ldr	r1, [pc, #104]	; (80063ac <HAL_RCC_ClockConfig+0x2e8>)
 8006342:	4313      	orrs	r3, r2
 8006344:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 0308 	and.w	r3, r3, #8
 800634e:	2b00      	cmp	r3, #0
 8006350:	d009      	beq.n	8006366 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006352:	4b16      	ldr	r3, [pc, #88]	; (80063ac <HAL_RCC_ClockConfig+0x2e8>)
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	00db      	lsls	r3, r3, #3
 8006360:	4912      	ldr	r1, [pc, #72]	; (80063ac <HAL_RCC_ClockConfig+0x2e8>)
 8006362:	4313      	orrs	r3, r2
 8006364:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006366:	f000 f829 	bl	80063bc <HAL_RCC_GetSysClockFreq>
 800636a:	4601      	mov	r1, r0
 800636c:	4b0f      	ldr	r3, [pc, #60]	; (80063ac <HAL_RCC_ClockConfig+0x2e8>)
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006374:	22f0      	movs	r2, #240	; 0xf0
 8006376:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006378:	693a      	ldr	r2, [r7, #16]
 800637a:	fa92 f2a2 	rbit	r2, r2
 800637e:	60fa      	str	r2, [r7, #12]
  return result;
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	fab2 f282 	clz	r2, r2
 8006386:	b2d2      	uxtb	r2, r2
 8006388:	40d3      	lsrs	r3, r2
 800638a:	4a09      	ldr	r2, [pc, #36]	; (80063b0 <HAL_RCC_ClockConfig+0x2ec>)
 800638c:	5cd3      	ldrb	r3, [r2, r3]
 800638e:	fa21 f303 	lsr.w	r3, r1, r3
 8006392:	4a08      	ldr	r2, [pc, #32]	; (80063b4 <HAL_RCC_ClockConfig+0x2f0>)
 8006394:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8006396:	4b08      	ldr	r3, [pc, #32]	; (80063b8 <HAL_RCC_ClockConfig+0x2f4>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4618      	mov	r0, r3
 800639c:	f7fc fe78 	bl	8003090 <HAL_InitTick>
  
  return HAL_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3778      	adds	r7, #120	; 0x78
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	40021000 	.word	0x40021000
 80063b0:	0800f4f4 	.word	0x0800f4f4
 80063b4:	20000000 	.word	0x20000000
 80063b8:	20000004 	.word	0x20000004

080063bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063bc:	b480      	push	{r7}
 80063be:	b08b      	sub	sp, #44	; 0x2c
 80063c0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80063c2:	2300      	movs	r3, #0
 80063c4:	61fb      	str	r3, [r7, #28]
 80063c6:	2300      	movs	r3, #0
 80063c8:	61bb      	str	r3, [r7, #24]
 80063ca:	2300      	movs	r3, #0
 80063cc:	627b      	str	r3, [r7, #36]	; 0x24
 80063ce:	2300      	movs	r3, #0
 80063d0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80063d2:	2300      	movs	r3, #0
 80063d4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80063d6:	4b29      	ldr	r3, [pc, #164]	; (800647c <HAL_RCC_GetSysClockFreq+0xc0>)
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	f003 030c 	and.w	r3, r3, #12
 80063e2:	2b04      	cmp	r3, #4
 80063e4:	d002      	beq.n	80063ec <HAL_RCC_GetSysClockFreq+0x30>
 80063e6:	2b08      	cmp	r3, #8
 80063e8:	d003      	beq.n	80063f2 <HAL_RCC_GetSysClockFreq+0x36>
 80063ea:	e03c      	b.n	8006466 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80063ec:	4b24      	ldr	r3, [pc, #144]	; (8006480 <HAL_RCC_GetSysClockFreq+0xc4>)
 80063ee:	623b      	str	r3, [r7, #32]
      break;
 80063f0:	e03c      	b.n	800646c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80063f8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80063fc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063fe:	68ba      	ldr	r2, [r7, #8]
 8006400:	fa92 f2a2 	rbit	r2, r2
 8006404:	607a      	str	r2, [r7, #4]
  return result;
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	fab2 f282 	clz	r2, r2
 800640c:	b2d2      	uxtb	r2, r2
 800640e:	40d3      	lsrs	r3, r2
 8006410:	4a1c      	ldr	r2, [pc, #112]	; (8006484 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006412:	5cd3      	ldrb	r3, [r2, r3]
 8006414:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8006416:	4b19      	ldr	r3, [pc, #100]	; (800647c <HAL_RCC_GetSysClockFreq+0xc0>)
 8006418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800641a:	f003 030f 	and.w	r3, r3, #15
 800641e:	220f      	movs	r2, #15
 8006420:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006422:	693a      	ldr	r2, [r7, #16]
 8006424:	fa92 f2a2 	rbit	r2, r2
 8006428:	60fa      	str	r2, [r7, #12]
  return result;
 800642a:	68fa      	ldr	r2, [r7, #12]
 800642c:	fab2 f282 	clz	r2, r2
 8006430:	b2d2      	uxtb	r2, r2
 8006432:	40d3      	lsrs	r3, r2
 8006434:	4a14      	ldr	r2, [pc, #80]	; (8006488 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006436:	5cd3      	ldrb	r3, [r2, r3]
 8006438:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800643a:	69fb      	ldr	r3, [r7, #28]
 800643c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006440:	2b00      	cmp	r3, #0
 8006442:	d008      	beq.n	8006456 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006444:	4a0e      	ldr	r2, [pc, #56]	; (8006480 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	fbb2 f2f3 	udiv	r2, r2, r3
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	fb02 f303 	mul.w	r3, r2, r3
 8006452:	627b      	str	r3, [r7, #36]	; 0x24
 8006454:	e004      	b.n	8006460 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	4a0c      	ldr	r2, [pc, #48]	; (800648c <HAL_RCC_GetSysClockFreq+0xd0>)
 800645a:	fb02 f303 	mul.w	r3, r2, r3
 800645e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8006460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006462:	623b      	str	r3, [r7, #32]
      break;
 8006464:	e002      	b.n	800646c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006466:	4b06      	ldr	r3, [pc, #24]	; (8006480 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006468:	623b      	str	r3, [r7, #32]
      break;
 800646a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800646c:	6a3b      	ldr	r3, [r7, #32]
}
 800646e:	4618      	mov	r0, r3
 8006470:	372c      	adds	r7, #44	; 0x2c
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr
 800647a:	bf00      	nop
 800647c:	40021000 	.word	0x40021000
 8006480:	007a1200 	.word	0x007a1200
 8006484:	0800f50c 	.word	0x0800f50c
 8006488:	0800f51c 	.word	0x0800f51c
 800648c:	003d0900 	.word	0x003d0900

08006490 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006490:	b480      	push	{r7}
 8006492:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006494:	4b03      	ldr	r3, [pc, #12]	; (80064a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006496:	681b      	ldr	r3, [r3, #0]
}
 8006498:	4618      	mov	r0, r3
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop
 80064a4:	20000000 	.word	0x20000000

080064a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b082      	sub	sp, #8
 80064ac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80064ae:	f7ff ffef 	bl	8006490 <HAL_RCC_GetHCLKFreq>
 80064b2:	4601      	mov	r1, r0
 80064b4:	4b0b      	ldr	r3, [pc, #44]	; (80064e4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80064bc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80064c0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	fa92 f2a2 	rbit	r2, r2
 80064c8:	603a      	str	r2, [r7, #0]
  return result;
 80064ca:	683a      	ldr	r2, [r7, #0]
 80064cc:	fab2 f282 	clz	r2, r2
 80064d0:	b2d2      	uxtb	r2, r2
 80064d2:	40d3      	lsrs	r3, r2
 80064d4:	4a04      	ldr	r2, [pc, #16]	; (80064e8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80064d6:	5cd3      	ldrb	r3, [r2, r3]
 80064d8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80064dc:	4618      	mov	r0, r3
 80064de:	3708      	adds	r7, #8
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	40021000 	.word	0x40021000
 80064e8:	0800f504 	.word	0x0800f504

080064ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b082      	sub	sp, #8
 80064f0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80064f2:	f7ff ffcd 	bl	8006490 <HAL_RCC_GetHCLKFreq>
 80064f6:	4601      	mov	r1, r0
 80064f8:	4b0b      	ldr	r3, [pc, #44]	; (8006528 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8006500:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8006504:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	fa92 f2a2 	rbit	r2, r2
 800650c:	603a      	str	r2, [r7, #0]
  return result;
 800650e:	683a      	ldr	r2, [r7, #0]
 8006510:	fab2 f282 	clz	r2, r2
 8006514:	b2d2      	uxtb	r2, r2
 8006516:	40d3      	lsrs	r3, r2
 8006518:	4a04      	ldr	r2, [pc, #16]	; (800652c <HAL_RCC_GetPCLK2Freq+0x40>)
 800651a:	5cd3      	ldrb	r3, [r2, r3]
 800651c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8006520:	4618      	mov	r0, r3
 8006522:	3708      	adds	r7, #8
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}
 8006528:	40021000 	.word	0x40021000
 800652c:	0800f504 	.word	0x0800f504

08006530 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	220f      	movs	r2, #15
 800653e:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006540:	4b12      	ldr	r3, [pc, #72]	; (800658c <HAL_RCC_GetClockConfig+0x5c>)
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	f003 0203 	and.w	r2, r3, #3
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800654c:	4b0f      	ldr	r3, [pc, #60]	; (800658c <HAL_RCC_GetClockConfig+0x5c>)
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8006558:	4b0c      	ldr	r3, [pc, #48]	; (800658c <HAL_RCC_GetClockConfig+0x5c>)
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006564:	4b09      	ldr	r3, [pc, #36]	; (800658c <HAL_RCC_GetClockConfig+0x5c>)
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	08db      	lsrs	r3, r3, #3
 800656a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8006572:	4b07      	ldr	r3, [pc, #28]	; (8006590 <HAL_RCC_GetClockConfig+0x60>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 0207 	and.w	r2, r3, #7
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	601a      	str	r2, [r3, #0]
}
 800657e:	bf00      	nop
 8006580:	370c      	adds	r7, #12
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr
 800658a:	bf00      	nop
 800658c:	40021000 	.word	0x40021000
 8006590:	40022000 	.word	0x40022000

08006594 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b092      	sub	sp, #72	; 0x48
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800659c:	2300      	movs	r3, #0
 800659e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80065a0:	2300      	movs	r3, #0
 80065a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80065a4:	2300      	movs	r3, #0
 80065a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	f000 80d4 	beq.w	8006760 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065b8:	4b4e      	ldr	r3, [pc, #312]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065ba:	69db      	ldr	r3, [r3, #28]
 80065bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d10e      	bne.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065c4:	4b4b      	ldr	r3, [pc, #300]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065c6:	69db      	ldr	r3, [r3, #28]
 80065c8:	4a4a      	ldr	r2, [pc, #296]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065ce:	61d3      	str	r3, [r2, #28]
 80065d0:	4b48      	ldr	r3, [pc, #288]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065d2:	69db      	ldr	r3, [r3, #28]
 80065d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065d8:	60bb      	str	r3, [r7, #8]
 80065da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065dc:	2301      	movs	r3, #1
 80065de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065e2:	4b45      	ldr	r3, [pc, #276]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d118      	bne.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065ee:	4b42      	ldr	r3, [pc, #264]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a41      	ldr	r2, [pc, #260]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80065f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065f8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065fa:	f7fd fcbd 	bl	8003f78 <HAL_GetTick>
 80065fe:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006600:	e008      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006602:	f7fd fcb9 	bl	8003f78 <HAL_GetTick>
 8006606:	4602      	mov	r2, r0
 8006608:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800660a:	1ad3      	subs	r3, r2, r3
 800660c:	2b64      	cmp	r3, #100	; 0x64
 800660e:	d901      	bls.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006610:	2303      	movs	r3, #3
 8006612:	e13c      	b.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006614:	4b38      	ldr	r3, [pc, #224]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800661c:	2b00      	cmp	r3, #0
 800661e:	d0f0      	beq.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006620:	4b34      	ldr	r3, [pc, #208]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006622:	6a1b      	ldr	r3, [r3, #32]
 8006624:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006628:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800662a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800662c:	2b00      	cmp	r3, #0
 800662e:	f000 8084 	beq.w	800673a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800663a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800663c:	429a      	cmp	r2, r3
 800663e:	d07c      	beq.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006640:	4b2c      	ldr	r3, [pc, #176]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006642:	6a1b      	ldr	r3, [r3, #32]
 8006644:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006648:	63fb      	str	r3, [r7, #60]	; 0x3c
 800664a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800664e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006652:	fa93 f3a3 	rbit	r3, r3
 8006656:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800665a:	fab3 f383 	clz	r3, r3
 800665e:	b2db      	uxtb	r3, r3
 8006660:	461a      	mov	r2, r3
 8006662:	4b26      	ldr	r3, [pc, #152]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006664:	4413      	add	r3, r2
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	461a      	mov	r2, r3
 800666a:	2301      	movs	r3, #1
 800666c:	6013      	str	r3, [r2, #0]
 800666e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006672:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006676:	fa93 f3a3 	rbit	r3, r3
 800667a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800667c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800667e:	fab3 f383 	clz	r3, r3
 8006682:	b2db      	uxtb	r3, r3
 8006684:	461a      	mov	r2, r3
 8006686:	4b1d      	ldr	r3, [pc, #116]	; (80066fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006688:	4413      	add	r3, r2
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	461a      	mov	r2, r3
 800668e:	2300      	movs	r3, #0
 8006690:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006692:	4a18      	ldr	r2, [pc, #96]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006696:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800669a:	f003 0301 	and.w	r3, r3, #1
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d04b      	beq.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066a2:	f7fd fc69 	bl	8003f78 <HAL_GetTick>
 80066a6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066a8:	e00a      	b.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066aa:	f7fd fc65 	bl	8003f78 <HAL_GetTick>
 80066ae:	4602      	mov	r2, r0
 80066b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066b2:	1ad3      	subs	r3, r2, r3
 80066b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d901      	bls.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80066bc:	2303      	movs	r3, #3
 80066be:	e0e6      	b.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 80066c0:	2302      	movs	r3, #2
 80066c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c6:	fa93 f3a3 	rbit	r3, r3
 80066ca:	627b      	str	r3, [r7, #36]	; 0x24
 80066cc:	2302      	movs	r3, #2
 80066ce:	623b      	str	r3, [r7, #32]
 80066d0:	6a3b      	ldr	r3, [r7, #32]
 80066d2:	fa93 f3a3 	rbit	r3, r3
 80066d6:	61fb      	str	r3, [r7, #28]
  return result;
 80066d8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066da:	fab3 f383 	clz	r3, r3
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	095b      	lsrs	r3, r3, #5
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	f043 0302 	orr.w	r3, r3, #2
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	d108      	bne.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80066ee:	4b01      	ldr	r3, [pc, #4]	; (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066f0:	6a1b      	ldr	r3, [r3, #32]
 80066f2:	e00d      	b.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80066f4:	40021000 	.word	0x40021000
 80066f8:	40007000 	.word	0x40007000
 80066fc:	10908100 	.word	0x10908100
 8006700:	2302      	movs	r3, #2
 8006702:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	fa93 f3a3 	rbit	r3, r3
 800670a:	617b      	str	r3, [r7, #20]
 800670c:	4b62      	ldr	r3, [pc, #392]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800670e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006710:	2202      	movs	r2, #2
 8006712:	613a      	str	r2, [r7, #16]
 8006714:	693a      	ldr	r2, [r7, #16]
 8006716:	fa92 f2a2 	rbit	r2, r2
 800671a:	60fa      	str	r2, [r7, #12]
  return result;
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	fab2 f282 	clz	r2, r2
 8006722:	b2d2      	uxtb	r2, r2
 8006724:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006728:	b2d2      	uxtb	r2, r2
 800672a:	f002 021f 	and.w	r2, r2, #31
 800672e:	2101      	movs	r1, #1
 8006730:	fa01 f202 	lsl.w	r2, r1, r2
 8006734:	4013      	ands	r3, r2
 8006736:	2b00      	cmp	r3, #0
 8006738:	d0b7      	beq.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800673a:	4b57      	ldr	r3, [pc, #348]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800673c:	6a1b      	ldr	r3, [r3, #32]
 800673e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	4954      	ldr	r1, [pc, #336]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006748:	4313      	orrs	r3, r2
 800674a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800674c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006750:	2b01      	cmp	r3, #1
 8006752:	d105      	bne.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006754:	4b50      	ldr	r3, [pc, #320]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006756:	69db      	ldr	r3, [r3, #28]
 8006758:	4a4f      	ldr	r2, [pc, #316]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800675a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800675e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 0301 	and.w	r3, r3, #1
 8006768:	2b00      	cmp	r3, #0
 800676a:	d008      	beq.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800676c:	4b4a      	ldr	r3, [pc, #296]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800676e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006770:	f023 0203 	bic.w	r2, r3, #3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	4947      	ldr	r1, [pc, #284]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800677a:	4313      	orrs	r3, r2
 800677c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 0320 	and.w	r3, r3, #32
 8006786:	2b00      	cmp	r3, #0
 8006788:	d008      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800678a:	4b43      	ldr	r3, [pc, #268]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800678c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800678e:	f023 0210 	bic.w	r2, r3, #16
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	4940      	ldr	r1, [pc, #256]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006798:	4313      	orrs	r3, r2
 800679a:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d008      	beq.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80067a8:	4b3b      	ldr	r3, [pc, #236]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80067aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ac:	f023 0220 	bic.w	r2, r3, #32
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	691b      	ldr	r3, [r3, #16]
 80067b4:	4938      	ldr	r1, [pc, #224]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80067b6:	4313      	orrs	r3, r2
 80067b8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d008      	beq.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80067c6:	4b34      	ldr	r3, [pc, #208]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80067c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ca:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	695b      	ldr	r3, [r3, #20]
 80067d2:	4931      	ldr	r1, [pc, #196]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80067d4:	4313      	orrs	r3, r2
 80067d6:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d008      	beq.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80067e4:	4b2c      	ldr	r3, [pc, #176]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	69db      	ldr	r3, [r3, #28]
 80067f0:	4929      	ldr	r1, [pc, #164]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80067f2:	4313      	orrs	r3, r2
 80067f4:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d008      	beq.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8006802:	4b25      	ldr	r3, [pc, #148]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006806:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	699b      	ldr	r3, [r3, #24]
 800680e:	4922      	ldr	r1, [pc, #136]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006810:	4313      	orrs	r3, r2
 8006812:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800681c:	2b00      	cmp	r3, #0
 800681e:	d008      	beq.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006820:	4b1d      	ldr	r3, [pc, #116]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006824:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6a1b      	ldr	r3, [r3, #32]
 800682c:	491a      	ldr	r1, [pc, #104]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800682e:	4313      	orrs	r3, r2
 8006830:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800683a:	2b00      	cmp	r3, #0
 800683c:	d008      	beq.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800683e:	4b16      	ldr	r3, [pc, #88]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006842:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684a:	4913      	ldr	r1, [pc, #76]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800684c:	4313      	orrs	r3, r2
 800684e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006858:	2b00      	cmp	r3, #0
 800685a:	d008      	beq.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800685c:	4b0e      	ldr	r3, [pc, #56]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800685e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006860:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006868:	490b      	ldr	r1, [pc, #44]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800686a:	4313      	orrs	r3, r2
 800686c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006876:	2b00      	cmp	r3, #0
 8006878:	d008      	beq.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800687a:	4b07      	ldr	r3, [pc, #28]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800687c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800687e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006886:	4904      	ldr	r1, [pc, #16]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006888:	4313      	orrs	r3, r2
 800688a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800688c:	2300      	movs	r3, #0
}
 800688e:	4618      	mov	r0, r3
 8006890:	3748      	adds	r7, #72	; 0x48
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	40021000 	.word	0x40021000

0800689c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b084      	sub	sp, #16
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d101      	bne.n	80068ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	e09d      	b.n	80069ea <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d108      	bne.n	80068c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068be:	d009      	beq.n	80068d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	61da      	str	r2, [r3, #28]
 80068c6:	e005      	b.n	80068d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d106      	bne.n	80068f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f7fc fabc 	bl	8002e6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2202      	movs	r2, #2
 80068f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800690a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006914:	d902      	bls.n	800691c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006916:	2300      	movs	r3, #0
 8006918:	60fb      	str	r3, [r7, #12]
 800691a:	e002      	b.n	8006922 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800691c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006920:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800692a:	d007      	beq.n	800693c <HAL_SPI_Init+0xa0>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006934:	d002      	beq.n	800693c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800694c:	431a      	orrs	r2, r3
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	691b      	ldr	r3, [r3, #16]
 8006952:	f003 0302 	and.w	r3, r3, #2
 8006956:	431a      	orrs	r2, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	695b      	ldr	r3, [r3, #20]
 800695c:	f003 0301 	and.w	r3, r3, #1
 8006960:	431a      	orrs	r2, r3
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	699b      	ldr	r3, [r3, #24]
 8006966:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800696a:	431a      	orrs	r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	69db      	ldr	r3, [r3, #28]
 8006970:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006974:	431a      	orrs	r2, r3
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6a1b      	ldr	r3, [r3, #32]
 800697a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800697e:	ea42 0103 	orr.w	r1, r2, r3
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006986:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	430a      	orrs	r2, r1
 8006990:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	699b      	ldr	r3, [r3, #24]
 8006996:	0c1b      	lsrs	r3, r3, #16
 8006998:	f003 0204 	and.w	r2, r3, #4
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a0:	f003 0310 	and.w	r3, r3, #16
 80069a4:	431a      	orrs	r2, r3
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069aa:	f003 0308 	and.w	r3, r3, #8
 80069ae:	431a      	orrs	r2, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80069b8:	ea42 0103 	orr.w	r1, r2, r3
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	430a      	orrs	r2, r1
 80069c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	69da      	ldr	r2, [r3, #28]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2200      	movs	r2, #0
 80069de:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80069e8:	2300      	movs	r3, #0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3710      	adds	r7, #16
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}

080069f2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069f2:	b580      	push	{r7, lr}
 80069f4:	b088      	sub	sp, #32
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	60f8      	str	r0, [r7, #12]
 80069fa:	60b9      	str	r1, [r7, #8]
 80069fc:	603b      	str	r3, [r7, #0]
 80069fe:	4613      	mov	r3, r2
 8006a00:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006a02:	2300      	movs	r3, #0
 8006a04:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d101      	bne.n	8006a14 <HAL_SPI_Transmit+0x22>
 8006a10:	2302      	movs	r3, #2
 8006a12:	e15f      	b.n	8006cd4 <HAL_SPI_Transmit+0x2e2>
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a1c:	f7fd faac 	bl	8003f78 <HAL_GetTick>
 8006a20:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006a22:	88fb      	ldrh	r3, [r7, #6]
 8006a24:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d002      	beq.n	8006a38 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006a32:	2302      	movs	r3, #2
 8006a34:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006a36:	e148      	b.n	8006cca <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d002      	beq.n	8006a44 <HAL_SPI_Transmit+0x52>
 8006a3e:	88fb      	ldrh	r3, [r7, #6]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d102      	bne.n	8006a4a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006a44:	2301      	movs	r3, #1
 8006a46:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006a48:	e13f      	b.n	8006cca <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2203      	movs	r2, #3
 8006a4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2200      	movs	r2, #0
 8006a56:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	68ba      	ldr	r2, [r7, #8]
 8006a5c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	88fa      	ldrh	r2, [r7, #6]
 8006a62:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	88fa      	ldrh	r2, [r7, #6]
 8006a68:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2200      	movs	r2, #0
 8006a84:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a94:	d10f      	bne.n	8006ab6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006aa4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ab4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ac0:	2b40      	cmp	r3, #64	; 0x40
 8006ac2:	d007      	beq.n	8006ad4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ad2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	68db      	ldr	r3, [r3, #12]
 8006ad8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006adc:	d94f      	bls.n	8006b7e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d002      	beq.n	8006aec <HAL_SPI_Transmit+0xfa>
 8006ae6:	8afb      	ldrh	r3, [r7, #22]
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d142      	bne.n	8006b72 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af0:	881a      	ldrh	r2, [r3, #0]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006afc:	1c9a      	adds	r2, r3, #2
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	3b01      	subs	r3, #1
 8006b0a:	b29a      	uxth	r2, r3
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006b10:	e02f      	b.n	8006b72 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	f003 0302 	and.w	r3, r3, #2
 8006b1c:	2b02      	cmp	r3, #2
 8006b1e:	d112      	bne.n	8006b46 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b24:	881a      	ldrh	r2, [r3, #0]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b30:	1c9a      	adds	r2, r3, #2
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	3b01      	subs	r3, #1
 8006b3e:	b29a      	uxth	r2, r3
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006b44:	e015      	b.n	8006b72 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b46:	f7fd fa17 	bl	8003f78 <HAL_GetTick>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	1ad3      	subs	r3, r2, r3
 8006b50:	683a      	ldr	r2, [r7, #0]
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d803      	bhi.n	8006b5e <HAL_SPI_Transmit+0x16c>
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b5c:	d102      	bne.n	8006b64 <HAL_SPI_Transmit+0x172>
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d106      	bne.n	8006b72 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8006b64:	2303      	movs	r3, #3
 8006b66:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006b70:	e0ab      	b.n	8006cca <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d1ca      	bne.n	8006b12 <HAL_SPI_Transmit+0x120>
 8006b7c:	e080      	b.n	8006c80 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d002      	beq.n	8006b8c <HAL_SPI_Transmit+0x19a>
 8006b86:	8afb      	ldrh	r3, [r7, #22]
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d174      	bne.n	8006c76 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d912      	bls.n	8006bbc <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b9a:	881a      	ldrh	r2, [r3, #0]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba6:	1c9a      	adds	r2, r3, #2
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	3b02      	subs	r3, #2
 8006bb4:	b29a      	uxth	r2, r3
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006bba:	e05c      	b.n	8006c76 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	330c      	adds	r3, #12
 8006bc6:	7812      	ldrb	r2, [r2, #0]
 8006bc8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bce:	1c5a      	adds	r2, r3, #1
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	3b01      	subs	r3, #1
 8006bdc:	b29a      	uxth	r2, r3
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006be2:	e048      	b.n	8006c76 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	f003 0302 	and.w	r3, r3, #2
 8006bee:	2b02      	cmp	r3, #2
 8006bf0:	d12b      	bne.n	8006c4a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d912      	bls.n	8006c22 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c00:	881a      	ldrh	r2, [r3, #0]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c0c:	1c9a      	adds	r2, r3, #2
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	3b02      	subs	r3, #2
 8006c1a:	b29a      	uxth	r2, r3
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006c20:	e029      	b.n	8006c76 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	330c      	adds	r3, #12
 8006c2c:	7812      	ldrb	r2, [r2, #0]
 8006c2e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c34:	1c5a      	adds	r2, r3, #1
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	3b01      	subs	r3, #1
 8006c42:	b29a      	uxth	r2, r3
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006c48:	e015      	b.n	8006c76 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c4a:	f7fd f995 	bl	8003f78 <HAL_GetTick>
 8006c4e:	4602      	mov	r2, r0
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	1ad3      	subs	r3, r2, r3
 8006c54:	683a      	ldr	r2, [r7, #0]
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d803      	bhi.n	8006c62 <HAL_SPI_Transmit+0x270>
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c60:	d102      	bne.n	8006c68 <HAL_SPI_Transmit+0x276>
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d106      	bne.n	8006c76 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8006c68:	2303      	movs	r3, #3
 8006c6a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006c74:	e029      	b.n	8006cca <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d1b1      	bne.n	8006be4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c80:	69ba      	ldr	r2, [r7, #24]
 8006c82:	6839      	ldr	r1, [r7, #0]
 8006c84:	68f8      	ldr	r0, [r7, #12]
 8006c86:	f000 fcf9 	bl	800767c <SPI_EndRxTxTransaction>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d002      	beq.n	8006c96 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2220      	movs	r2, #32
 8006c94:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d10a      	bne.n	8006cb4 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	613b      	str	r3, [r7, #16]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	613b      	str	r3, [r7, #16]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	613b      	str	r3, [r7, #16]
 8006cb2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d002      	beq.n	8006cc2 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	77fb      	strb	r3, [r7, #31]
 8006cc0:	e003      	b.n	8006cca <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006cd2:	7ffb      	ldrb	r3, [r7, #31]
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3720      	adds	r7, #32
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b088      	sub	sp, #32
 8006ce0:	af02      	add	r7, sp, #8
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	603b      	str	r3, [r7, #0]
 8006ce8:	4613      	mov	r3, r2
 8006cea:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006cec:	2300      	movs	r3, #0
 8006cee:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d002      	beq.n	8006d02 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8006cfc:	2302      	movs	r3, #2
 8006cfe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006d00:	e11a      	b.n	8006f38 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d0a:	d112      	bne.n	8006d32 <HAL_SPI_Receive+0x56>
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d10e      	bne.n	8006d32 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2204      	movs	r2, #4
 8006d18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006d1c:	88fa      	ldrh	r2, [r7, #6]
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	9300      	str	r3, [sp, #0]
 8006d22:	4613      	mov	r3, r2
 8006d24:	68ba      	ldr	r2, [r7, #8]
 8006d26:	68b9      	ldr	r1, [r7, #8]
 8006d28:	68f8      	ldr	r0, [r7, #12]
 8006d2a:	f000 f90e 	bl	8006f4a <HAL_SPI_TransmitReceive>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	e107      	b.n	8006f42 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d101      	bne.n	8006d40 <HAL_SPI_Receive+0x64>
 8006d3c:	2302      	movs	r3, #2
 8006d3e:	e100      	b.n	8006f42 <HAL_SPI_Receive+0x266>
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2201      	movs	r2, #1
 8006d44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d48:	f7fd f916 	bl	8003f78 <HAL_GetTick>
 8006d4c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d002      	beq.n	8006d5a <HAL_SPI_Receive+0x7e>
 8006d54:	88fb      	ldrh	r3, [r7, #6]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d102      	bne.n	8006d60 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006d5e:	e0eb      	b.n	8006f38 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2204      	movs	r2, #4
 8006d64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	68ba      	ldr	r2, [r7, #8]
 8006d72:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	88fa      	ldrh	r2, [r7, #6]
 8006d78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	88fa      	ldrh	r2, [r7, #6]
 8006d80:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2200      	movs	r2, #0
 8006d88:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2200      	movs	r2, #0
 8006d94:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006daa:	d908      	bls.n	8006dbe <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	685a      	ldr	r2, [r3, #4]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006dba:	605a      	str	r2, [r3, #4]
 8006dbc:	e007      	b.n	8006dce <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	685a      	ldr	r2, [r3, #4]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006dcc:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dd6:	d10f      	bne.n	8006df8 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006de6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006df6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e02:	2b40      	cmp	r3, #64	; 0x40
 8006e04:	d007      	beq.n	8006e16 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e14:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	68db      	ldr	r3, [r3, #12]
 8006e1a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006e1e:	d86f      	bhi.n	8006f00 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006e20:	e034      	b.n	8006e8c <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	f003 0301 	and.w	r3, r3, #1
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d117      	bne.n	8006e60 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f103 020c 	add.w	r2, r3, #12
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3c:	7812      	ldrb	r2, [r2, #0]
 8006e3e:	b2d2      	uxtb	r2, r2
 8006e40:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e46:	1c5a      	adds	r2, r3, #1
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	3b01      	subs	r3, #1
 8006e56:	b29a      	uxth	r2, r3
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006e5e:	e015      	b.n	8006e8c <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e60:	f7fd f88a 	bl	8003f78 <HAL_GetTick>
 8006e64:	4602      	mov	r2, r0
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	1ad3      	subs	r3, r2, r3
 8006e6a:	683a      	ldr	r2, [r7, #0]
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d803      	bhi.n	8006e78 <HAL_SPI_Receive+0x19c>
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e76:	d102      	bne.n	8006e7e <HAL_SPI_Receive+0x1a2>
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d106      	bne.n	8006e8c <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2201      	movs	r2, #1
 8006e86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006e8a:	e055      	b.n	8006f38 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d1c4      	bne.n	8006e22 <HAL_SPI_Receive+0x146>
 8006e98:	e038      	b.n	8006f0c <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	f003 0301 	and.w	r3, r3, #1
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d115      	bne.n	8006ed4 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	68da      	ldr	r2, [r3, #12]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb2:	b292      	uxth	r2, r2
 8006eb4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eba:	1c9a      	adds	r2, r3, #2
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	3b01      	subs	r3, #1
 8006eca:	b29a      	uxth	r2, r3
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006ed2:	e015      	b.n	8006f00 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ed4:	f7fd f850 	bl	8003f78 <HAL_GetTick>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	1ad3      	subs	r3, r2, r3
 8006ede:	683a      	ldr	r2, [r7, #0]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d803      	bhi.n	8006eec <HAL_SPI_Receive+0x210>
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eea:	d102      	bne.n	8006ef2 <HAL_SPI_Receive+0x216>
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d106      	bne.n	8006f00 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8006ef2:	2303      	movs	r3, #3
 8006ef4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006efe:	e01b      	b.n	8006f38 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d1c6      	bne.n	8006e9a <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f0c:	693a      	ldr	r2, [r7, #16]
 8006f0e:	6839      	ldr	r1, [r7, #0]
 8006f10:	68f8      	ldr	r0, [r7, #12]
 8006f12:	f000 fb5b 	bl	80075cc <SPI_EndRxTransaction>
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d002      	beq.n	8006f22 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2220      	movs	r2, #32
 8006f20:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d002      	beq.n	8006f30 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	75fb      	strb	r3, [r7, #23]
 8006f2e:	e003      	b.n	8006f38 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2201      	movs	r2, #1
 8006f34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006f40:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3718      	adds	r7, #24
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}

08006f4a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006f4a:	b580      	push	{r7, lr}
 8006f4c:	b08a      	sub	sp, #40	; 0x28
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	60f8      	str	r0, [r7, #12]
 8006f52:	60b9      	str	r1, [r7, #8]
 8006f54:	607a      	str	r2, [r7, #4]
 8006f56:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d101      	bne.n	8006f70 <HAL_SPI_TransmitReceive+0x26>
 8006f6c:	2302      	movs	r3, #2
 8006f6e:	e20a      	b.n	8007386 <HAL_SPI_TransmitReceive+0x43c>
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2201      	movs	r2, #1
 8006f74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f78:	f7fc fffe 	bl	8003f78 <HAL_GetTick>
 8006f7c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006f84:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006f8c:	887b      	ldrh	r3, [r7, #2]
 8006f8e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006f90:	887b      	ldrh	r3, [r7, #2]
 8006f92:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006f94:	7efb      	ldrb	r3, [r7, #27]
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d00e      	beq.n	8006fb8 <HAL_SPI_TransmitReceive+0x6e>
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fa0:	d106      	bne.n	8006fb0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d102      	bne.n	8006fb0 <HAL_SPI_TransmitReceive+0x66>
 8006faa:	7efb      	ldrb	r3, [r7, #27]
 8006fac:	2b04      	cmp	r3, #4
 8006fae:	d003      	beq.n	8006fb8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006fb0:	2302      	movs	r3, #2
 8006fb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006fb6:	e1e0      	b.n	800737a <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d005      	beq.n	8006fca <HAL_SPI_TransmitReceive+0x80>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d002      	beq.n	8006fca <HAL_SPI_TransmitReceive+0x80>
 8006fc4:	887b      	ldrh	r3, [r7, #2]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d103      	bne.n	8006fd2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006fd0:	e1d3      	b.n	800737a <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	2b04      	cmp	r3, #4
 8006fdc:	d003      	beq.n	8006fe6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2205      	movs	r2, #5
 8006fe2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	887a      	ldrh	r2, [r7, #2]
 8006ff6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	887a      	ldrh	r2, [r7, #2]
 8006ffe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	68ba      	ldr	r2, [r7, #8]
 8007006:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	887a      	ldrh	r2, [r7, #2]
 800700c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	887a      	ldrh	r2, [r7, #2]
 8007012:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2200      	movs	r2, #0
 8007018:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2200      	movs	r2, #0
 800701e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007028:	d802      	bhi.n	8007030 <HAL_SPI_TransmitReceive+0xe6>
 800702a:	8a3b      	ldrh	r3, [r7, #16]
 800702c:	2b01      	cmp	r3, #1
 800702e:	d908      	bls.n	8007042 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	685a      	ldr	r2, [r3, #4]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800703e:	605a      	str	r2, [r3, #4]
 8007040:	e007      	b.n	8007052 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	685a      	ldr	r2, [r3, #4]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007050:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800705c:	2b40      	cmp	r3, #64	; 0x40
 800705e:	d007      	beq.n	8007070 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800706e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007078:	f240 8081 	bls.w	800717e <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d002      	beq.n	800708a <HAL_SPI_TransmitReceive+0x140>
 8007084:	8a7b      	ldrh	r3, [r7, #18]
 8007086:	2b01      	cmp	r3, #1
 8007088:	d16d      	bne.n	8007166 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800708e:	881a      	ldrh	r2, [r3, #0]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800709a:	1c9a      	adds	r2, r3, #2
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	3b01      	subs	r3, #1
 80070a8:	b29a      	uxth	r2, r3
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80070ae:	e05a      	b.n	8007166 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	f003 0302 	and.w	r3, r3, #2
 80070ba:	2b02      	cmp	r3, #2
 80070bc:	d11b      	bne.n	80070f6 <HAL_SPI_TransmitReceive+0x1ac>
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d016      	beq.n	80070f6 <HAL_SPI_TransmitReceive+0x1ac>
 80070c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d113      	bne.n	80070f6 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d2:	881a      	ldrh	r2, [r3, #0]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070de:	1c9a      	adds	r2, r3, #2
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	3b01      	subs	r3, #1
 80070ec:	b29a      	uxth	r2, r3
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80070f2:	2300      	movs	r3, #0
 80070f4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	f003 0301 	and.w	r3, r3, #1
 8007100:	2b01      	cmp	r3, #1
 8007102:	d11c      	bne.n	800713e <HAL_SPI_TransmitReceive+0x1f4>
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800710a:	b29b      	uxth	r3, r3
 800710c:	2b00      	cmp	r3, #0
 800710e:	d016      	beq.n	800713e <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	68da      	ldr	r2, [r3, #12]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711a:	b292      	uxth	r2, r2
 800711c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007122:	1c9a      	adds	r2, r3, #2
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800712e:	b29b      	uxth	r3, r3
 8007130:	3b01      	subs	r3, #1
 8007132:	b29a      	uxth	r2, r3
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800713a:	2301      	movs	r3, #1
 800713c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800713e:	f7fc ff1b 	bl	8003f78 <HAL_GetTick>
 8007142:	4602      	mov	r2, r0
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	1ad3      	subs	r3, r2, r3
 8007148:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800714a:	429a      	cmp	r2, r3
 800714c:	d80b      	bhi.n	8007166 <HAL_SPI_TransmitReceive+0x21c>
 800714e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007154:	d007      	beq.n	8007166 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8007156:	2303      	movs	r3, #3
 8007158:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8007164:	e109      	b.n	800737a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800716a:	b29b      	uxth	r3, r3
 800716c:	2b00      	cmp	r3, #0
 800716e:	d19f      	bne.n	80070b0 <HAL_SPI_TransmitReceive+0x166>
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007176:	b29b      	uxth	r3, r3
 8007178:	2b00      	cmp	r3, #0
 800717a:	d199      	bne.n	80070b0 <HAL_SPI_TransmitReceive+0x166>
 800717c:	e0e3      	b.n	8007346 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d003      	beq.n	800718e <HAL_SPI_TransmitReceive+0x244>
 8007186:	8a7b      	ldrh	r3, [r7, #18]
 8007188:	2b01      	cmp	r3, #1
 800718a:	f040 80cf 	bne.w	800732c <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007192:	b29b      	uxth	r3, r3
 8007194:	2b01      	cmp	r3, #1
 8007196:	d912      	bls.n	80071be <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800719c:	881a      	ldrh	r2, [r3, #0]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a8:	1c9a      	adds	r2, r3, #2
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	3b02      	subs	r3, #2
 80071b6:	b29a      	uxth	r2, r3
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80071bc:	e0b6      	b.n	800732c <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	330c      	adds	r3, #12
 80071c8:	7812      	ldrb	r2, [r2, #0]
 80071ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d0:	1c5a      	adds	r2, r3, #1
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071da:	b29b      	uxth	r3, r3
 80071dc:	3b01      	subs	r3, #1
 80071de:	b29a      	uxth	r2, r3
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071e4:	e0a2      	b.n	800732c <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	f003 0302 	and.w	r3, r3, #2
 80071f0:	2b02      	cmp	r3, #2
 80071f2:	d134      	bne.n	800725e <HAL_SPI_TransmitReceive+0x314>
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d02f      	beq.n	800725e <HAL_SPI_TransmitReceive+0x314>
 80071fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007200:	2b01      	cmp	r3, #1
 8007202:	d12c      	bne.n	800725e <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007208:	b29b      	uxth	r3, r3
 800720a:	2b01      	cmp	r3, #1
 800720c:	d912      	bls.n	8007234 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007212:	881a      	ldrh	r2, [r3, #0]
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800721e:	1c9a      	adds	r2, r3, #2
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007228:	b29b      	uxth	r3, r3
 800722a:	3b02      	subs	r3, #2
 800722c:	b29a      	uxth	r2, r3
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007232:	e012      	b.n	800725a <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	330c      	adds	r3, #12
 800723e:	7812      	ldrb	r2, [r2, #0]
 8007240:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007246:	1c5a      	adds	r2, r3, #1
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007250:	b29b      	uxth	r3, r3
 8007252:	3b01      	subs	r3, #1
 8007254:	b29a      	uxth	r2, r3
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800725a:	2300      	movs	r3, #0
 800725c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	f003 0301 	and.w	r3, r3, #1
 8007268:	2b01      	cmp	r3, #1
 800726a:	d148      	bne.n	80072fe <HAL_SPI_TransmitReceive+0x3b4>
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007272:	b29b      	uxth	r3, r3
 8007274:	2b00      	cmp	r3, #0
 8007276:	d042      	beq.n	80072fe <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800727e:	b29b      	uxth	r3, r3
 8007280:	2b01      	cmp	r3, #1
 8007282:	d923      	bls.n	80072cc <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	68da      	ldr	r2, [r3, #12]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800728e:	b292      	uxth	r2, r2
 8007290:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007296:	1c9a      	adds	r2, r3, #2
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	3b02      	subs	r3, #2
 80072a6:	b29a      	uxth	r2, r3
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d81f      	bhi.n	80072fa <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	685a      	ldr	r2, [r3, #4]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80072c8:	605a      	str	r2, [r3, #4]
 80072ca:	e016      	b.n	80072fa <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f103 020c 	add.w	r2, r3, #12
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d8:	7812      	ldrb	r2, [r2, #0]
 80072da:	b2d2      	uxtb	r2, r2
 80072dc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e2:	1c5a      	adds	r2, r3, #1
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	3b01      	subs	r3, #1
 80072f2:	b29a      	uxth	r2, r3
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80072fa:	2301      	movs	r3, #1
 80072fc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80072fe:	f7fc fe3b 	bl	8003f78 <HAL_GetTick>
 8007302:	4602      	mov	r2, r0
 8007304:	69fb      	ldr	r3, [r7, #28]
 8007306:	1ad3      	subs	r3, r2, r3
 8007308:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800730a:	429a      	cmp	r2, r3
 800730c:	d803      	bhi.n	8007316 <HAL_SPI_TransmitReceive+0x3cc>
 800730e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007314:	d102      	bne.n	800731c <HAL_SPI_TransmitReceive+0x3d2>
 8007316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007318:	2b00      	cmp	r3, #0
 800731a:	d107      	bne.n	800732c <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800731c:	2303      	movs	r3, #3
 800731e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2201      	movs	r2, #1
 8007326:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800732a:	e026      	b.n	800737a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007330:	b29b      	uxth	r3, r3
 8007332:	2b00      	cmp	r3, #0
 8007334:	f47f af57 	bne.w	80071e6 <HAL_SPI_TransmitReceive+0x29c>
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800733e:	b29b      	uxth	r3, r3
 8007340:	2b00      	cmp	r3, #0
 8007342:	f47f af50 	bne.w	80071e6 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007346:	69fa      	ldr	r2, [r7, #28]
 8007348:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800734a:	68f8      	ldr	r0, [r7, #12]
 800734c:	f000 f996 	bl	800767c <SPI_EndRxTxTransaction>
 8007350:	4603      	mov	r3, r0
 8007352:	2b00      	cmp	r3, #0
 8007354:	d005      	beq.n	8007362 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8007356:	2301      	movs	r3, #1
 8007358:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2220      	movs	r2, #32
 8007360:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007366:	2b00      	cmp	r3, #0
 8007368:	d003      	beq.n	8007372 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007370:	e003      	b.n	800737a <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2201      	movs	r2, #1
 8007376:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2200      	movs	r2, #0
 800737e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007382:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007386:	4618      	mov	r0, r3
 8007388:	3728      	adds	r7, #40	; 0x28
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
	...

08007390 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b088      	sub	sp, #32
 8007394:	af00      	add	r7, sp, #0
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	60b9      	str	r1, [r7, #8]
 800739a:	603b      	str	r3, [r7, #0]
 800739c:	4613      	mov	r3, r2
 800739e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80073a0:	f7fc fdea 	bl	8003f78 <HAL_GetTick>
 80073a4:	4602      	mov	r2, r0
 80073a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a8:	1a9b      	subs	r3, r3, r2
 80073aa:	683a      	ldr	r2, [r7, #0]
 80073ac:	4413      	add	r3, r2
 80073ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80073b0:	f7fc fde2 	bl	8003f78 <HAL_GetTick>
 80073b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80073b6:	4b39      	ldr	r3, [pc, #228]	; (800749c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	015b      	lsls	r3, r3, #5
 80073bc:	0d1b      	lsrs	r3, r3, #20
 80073be:	69fa      	ldr	r2, [r7, #28]
 80073c0:	fb02 f303 	mul.w	r3, r2, r3
 80073c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80073c6:	e054      	b.n	8007472 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ce:	d050      	beq.n	8007472 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80073d0:	f7fc fdd2 	bl	8003f78 <HAL_GetTick>
 80073d4:	4602      	mov	r2, r0
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	1ad3      	subs	r3, r2, r3
 80073da:	69fa      	ldr	r2, [r7, #28]
 80073dc:	429a      	cmp	r2, r3
 80073de:	d902      	bls.n	80073e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80073e0:	69fb      	ldr	r3, [r7, #28]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d13d      	bne.n	8007462 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	685a      	ldr	r2, [r3, #4]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80073f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073fe:	d111      	bne.n	8007424 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007408:	d004      	beq.n	8007414 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007412:	d107      	bne.n	8007424 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007422:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007428:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800742c:	d10f      	bne.n	800744e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800743c:	601a      	str	r2, [r3, #0]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800744c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2201      	movs	r2, #1
 8007452:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2200      	movs	r2, #0
 800745a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800745e:	2303      	movs	r3, #3
 8007460:	e017      	b.n	8007492 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d101      	bne.n	800746c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007468:	2300      	movs	r3, #0
 800746a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	3b01      	subs	r3, #1
 8007470:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	689a      	ldr	r2, [r3, #8]
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	4013      	ands	r3, r2
 800747c:	68ba      	ldr	r2, [r7, #8]
 800747e:	429a      	cmp	r2, r3
 8007480:	bf0c      	ite	eq
 8007482:	2301      	moveq	r3, #1
 8007484:	2300      	movne	r3, #0
 8007486:	b2db      	uxtb	r3, r3
 8007488:	461a      	mov	r2, r3
 800748a:	79fb      	ldrb	r3, [r7, #7]
 800748c:	429a      	cmp	r2, r3
 800748e:	d19b      	bne.n	80073c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007490:	2300      	movs	r3, #0
}
 8007492:	4618      	mov	r0, r3
 8007494:	3720      	adds	r7, #32
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
 800749a:	bf00      	nop
 800749c:	20000000 	.word	0x20000000

080074a0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b08a      	sub	sp, #40	; 0x28
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	60f8      	str	r0, [r7, #12]
 80074a8:	60b9      	str	r1, [r7, #8]
 80074aa:	607a      	str	r2, [r7, #4]
 80074ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80074ae:	2300      	movs	r3, #0
 80074b0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80074b2:	f7fc fd61 	bl	8003f78 <HAL_GetTick>
 80074b6:	4602      	mov	r2, r0
 80074b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ba:	1a9b      	subs	r3, r3, r2
 80074bc:	683a      	ldr	r2, [r7, #0]
 80074be:	4413      	add	r3, r2
 80074c0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80074c2:	f7fc fd59 	bl	8003f78 <HAL_GetTick>
 80074c6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	330c      	adds	r3, #12
 80074ce:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80074d0:	4b3d      	ldr	r3, [pc, #244]	; (80075c8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	4613      	mov	r3, r2
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	4413      	add	r3, r2
 80074da:	00da      	lsls	r2, r3, #3
 80074dc:	1ad3      	subs	r3, r2, r3
 80074de:	0d1b      	lsrs	r3, r3, #20
 80074e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074e2:	fb02 f303 	mul.w	r3, r2, r3
 80074e6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80074e8:	e060      	b.n	80075ac <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80074f0:	d107      	bne.n	8007502 <SPI_WaitFifoStateUntilTimeout+0x62>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d104      	bne.n	8007502 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80074f8:	69fb      	ldr	r3, [r7, #28]
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007500:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007508:	d050      	beq.n	80075ac <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800750a:	f7fc fd35 	bl	8003f78 <HAL_GetTick>
 800750e:	4602      	mov	r2, r0
 8007510:	6a3b      	ldr	r3, [r7, #32]
 8007512:	1ad3      	subs	r3, r2, r3
 8007514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007516:	429a      	cmp	r2, r3
 8007518:	d902      	bls.n	8007520 <SPI_WaitFifoStateUntilTimeout+0x80>
 800751a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800751c:	2b00      	cmp	r3, #0
 800751e:	d13d      	bne.n	800759c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	685a      	ldr	r2, [r3, #4]
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800752e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007538:	d111      	bne.n	800755e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007542:	d004      	beq.n	800754e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800754c:	d107      	bne.n	800755e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800755c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007562:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007566:	d10f      	bne.n	8007588 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007576:	601a      	str	r2, [r3, #0]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	681a      	ldr	r2, [r3, #0]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007586:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2201      	movs	r2, #1
 800758c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2200      	movs	r2, #0
 8007594:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007598:	2303      	movs	r3, #3
 800759a:	e010      	b.n	80075be <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800759c:	69bb      	ldr	r3, [r7, #24]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d101      	bne.n	80075a6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80075a2:	2300      	movs	r3, #0
 80075a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	3b01      	subs	r3, #1
 80075aa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	689a      	ldr	r2, [r3, #8]
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	4013      	ands	r3, r2
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d196      	bne.n	80074ea <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3728      	adds	r7, #40	; 0x28
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop
 80075c8:	20000000 	.word	0x20000000

080075cc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b086      	sub	sp, #24
 80075d0:	af02      	add	r7, sp, #8
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	60b9      	str	r1, [r7, #8]
 80075d6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075e0:	d111      	bne.n	8007606 <SPI_EndRxTransaction+0x3a>
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075ea:	d004      	beq.n	80075f6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075f4:	d107      	bne.n	8007606 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007604:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	9300      	str	r3, [sp, #0]
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	2200      	movs	r2, #0
 800760e:	2180      	movs	r1, #128	; 0x80
 8007610:	68f8      	ldr	r0, [r7, #12]
 8007612:	f7ff febd 	bl	8007390 <SPI_WaitFlagStateUntilTimeout>
 8007616:	4603      	mov	r3, r0
 8007618:	2b00      	cmp	r3, #0
 800761a:	d007      	beq.n	800762c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007620:	f043 0220 	orr.w	r2, r3, #32
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007628:	2303      	movs	r3, #3
 800762a:	e023      	b.n	8007674 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007634:	d11d      	bne.n	8007672 <SPI_EndRxTransaction+0xa6>
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800763e:	d004      	beq.n	800764a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007648:	d113      	bne.n	8007672 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	9300      	str	r3, [sp, #0]
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	2200      	movs	r2, #0
 8007652:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007656:	68f8      	ldr	r0, [r7, #12]
 8007658:	f7ff ff22 	bl	80074a0 <SPI_WaitFifoStateUntilTimeout>
 800765c:	4603      	mov	r3, r0
 800765e:	2b00      	cmp	r3, #0
 8007660:	d007      	beq.n	8007672 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007666:	f043 0220 	orr.w	r2, r3, #32
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800766e:	2303      	movs	r3, #3
 8007670:	e000      	b.n	8007674 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007672:	2300      	movs	r3, #0
}
 8007674:	4618      	mov	r0, r3
 8007676:	3710      	adds	r7, #16
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b086      	sub	sp, #24
 8007680:	af02      	add	r7, sp, #8
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	60b9      	str	r1, [r7, #8]
 8007686:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	9300      	str	r3, [sp, #0]
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	2200      	movs	r2, #0
 8007690:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007694:	68f8      	ldr	r0, [r7, #12]
 8007696:	f7ff ff03 	bl	80074a0 <SPI_WaitFifoStateUntilTimeout>
 800769a:	4603      	mov	r3, r0
 800769c:	2b00      	cmp	r3, #0
 800769e:	d007      	beq.n	80076b0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076a4:	f043 0220 	orr.w	r2, r3, #32
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80076ac:	2303      	movs	r3, #3
 80076ae:	e027      	b.n	8007700 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	9300      	str	r3, [sp, #0]
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	2200      	movs	r2, #0
 80076b8:	2180      	movs	r1, #128	; 0x80
 80076ba:	68f8      	ldr	r0, [r7, #12]
 80076bc:	f7ff fe68 	bl	8007390 <SPI_WaitFlagStateUntilTimeout>
 80076c0:	4603      	mov	r3, r0
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d007      	beq.n	80076d6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076ca:	f043 0220 	orr.w	r2, r3, #32
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80076d2:	2303      	movs	r3, #3
 80076d4:	e014      	b.n	8007700 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	9300      	str	r3, [sp, #0]
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	2200      	movs	r2, #0
 80076de:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80076e2:	68f8      	ldr	r0, [r7, #12]
 80076e4:	f7ff fedc 	bl	80074a0 <SPI_WaitFifoStateUntilTimeout>
 80076e8:	4603      	mov	r3, r0
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d007      	beq.n	80076fe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076f2:	f043 0220 	orr.w	r2, r3, #32
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80076fa:	2303      	movs	r3, #3
 80076fc:	e000      	b.n	8007700 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80076fe:	2300      	movs	r3, #0
}
 8007700:	4618      	mov	r0, r3
 8007702:	3710      	adds	r7, #16
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b082      	sub	sp, #8
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d101      	bne.n	800771a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	e049      	b.n	80077ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007720:	b2db      	uxtb	r3, r3
 8007722:	2b00      	cmp	r3, #0
 8007724:	d106      	bne.n	8007734 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f7fb fbe0 	bl	8002ef4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2202      	movs	r2, #2
 8007738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	3304      	adds	r3, #4
 8007744:	4619      	mov	r1, r3
 8007746:	4610      	mov	r0, r2
 8007748:	f000 fa9a 	bl	8007c80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2201      	movs	r2, #1
 8007750:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2201      	movs	r2, #1
 8007760:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2201      	movs	r2, #1
 8007768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2201      	movs	r2, #1
 8007770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2201      	movs	r2, #1
 8007778:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2201      	movs	r2, #1
 8007780:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2201      	movs	r2, #1
 8007788:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2201      	movs	r2, #1
 8007790:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2201      	movs	r2, #1
 8007798:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2201      	movs	r2, #1
 80077a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3708      	adds	r7, #8
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
	...

080077b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b085      	sub	sp, #20
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d001      	beq.n	80077d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80077cc:	2301      	movs	r3, #1
 80077ce:	e03b      	b.n	8007848 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2202      	movs	r2, #2
 80077d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	68da      	ldr	r2, [r3, #12]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f042 0201 	orr.w	r2, r2, #1
 80077e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a19      	ldr	r2, [pc, #100]	; (8007854 <HAL_TIM_Base_Start_IT+0x9c>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d009      	beq.n	8007806 <HAL_TIM_Base_Start_IT+0x4e>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077fa:	d004      	beq.n	8007806 <HAL_TIM_Base_Start_IT+0x4e>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a15      	ldr	r2, [pc, #84]	; (8007858 <HAL_TIM_Base_Start_IT+0xa0>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d115      	bne.n	8007832 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	689a      	ldr	r2, [r3, #8]
 800780c:	4b13      	ldr	r3, [pc, #76]	; (800785c <HAL_TIM_Base_Start_IT+0xa4>)
 800780e:	4013      	ands	r3, r2
 8007810:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2b06      	cmp	r3, #6
 8007816:	d015      	beq.n	8007844 <HAL_TIM_Base_Start_IT+0x8c>
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800781e:	d011      	beq.n	8007844 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	681a      	ldr	r2, [r3, #0]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f042 0201 	orr.w	r2, r2, #1
 800782e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007830:	e008      	b.n	8007844 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f042 0201 	orr.w	r2, r2, #1
 8007840:	601a      	str	r2, [r3, #0]
 8007842:	e000      	b.n	8007846 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007844:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007846:	2300      	movs	r3, #0
}
 8007848:	4618      	mov	r0, r3
 800784a:	3714      	adds	r7, #20
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr
 8007854:	40012c00 	.word	0x40012c00
 8007858:	40014000 	.word	0x40014000
 800785c:	00010007 	.word	0x00010007

08007860 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b082      	sub	sp, #8
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	f003 0302 	and.w	r3, r3, #2
 8007872:	2b02      	cmp	r3, #2
 8007874:	d122      	bne.n	80078bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	f003 0302 	and.w	r3, r3, #2
 8007880:	2b02      	cmp	r3, #2
 8007882:	d11b      	bne.n	80078bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f06f 0202 	mvn.w	r2, #2
 800788c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2201      	movs	r2, #1
 8007892:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	699b      	ldr	r3, [r3, #24]
 800789a:	f003 0303 	and.w	r3, r3, #3
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d003      	beq.n	80078aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 f9ce 	bl	8007c44 <HAL_TIM_IC_CaptureCallback>
 80078a8:	e005      	b.n	80078b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 f9c0 	bl	8007c30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 f9d1 	bl	8007c58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2200      	movs	r2, #0
 80078ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	691b      	ldr	r3, [r3, #16]
 80078c2:	f003 0304 	and.w	r3, r3, #4
 80078c6:	2b04      	cmp	r3, #4
 80078c8:	d122      	bne.n	8007910 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	68db      	ldr	r3, [r3, #12]
 80078d0:	f003 0304 	and.w	r3, r3, #4
 80078d4:	2b04      	cmp	r3, #4
 80078d6:	d11b      	bne.n	8007910 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f06f 0204 	mvn.w	r2, #4
 80078e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2202      	movs	r2, #2
 80078e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	699b      	ldr	r3, [r3, #24]
 80078ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d003      	beq.n	80078fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 f9a4 	bl	8007c44 <HAL_TIM_IC_CaptureCallback>
 80078fc:	e005      	b.n	800790a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 f996 	bl	8007c30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 f9a7 	bl	8007c58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	691b      	ldr	r3, [r3, #16]
 8007916:	f003 0308 	and.w	r3, r3, #8
 800791a:	2b08      	cmp	r3, #8
 800791c:	d122      	bne.n	8007964 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	f003 0308 	and.w	r3, r3, #8
 8007928:	2b08      	cmp	r3, #8
 800792a:	d11b      	bne.n	8007964 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f06f 0208 	mvn.w	r2, #8
 8007934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2204      	movs	r2, #4
 800793a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	69db      	ldr	r3, [r3, #28]
 8007942:	f003 0303 	and.w	r3, r3, #3
 8007946:	2b00      	cmp	r3, #0
 8007948:	d003      	beq.n	8007952 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 f97a 	bl	8007c44 <HAL_TIM_IC_CaptureCallback>
 8007950:	e005      	b.n	800795e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 f96c 	bl	8007c30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 f97d 	bl	8007c58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2200      	movs	r2, #0
 8007962:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	691b      	ldr	r3, [r3, #16]
 800796a:	f003 0310 	and.w	r3, r3, #16
 800796e:	2b10      	cmp	r3, #16
 8007970:	d122      	bne.n	80079b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	68db      	ldr	r3, [r3, #12]
 8007978:	f003 0310 	and.w	r3, r3, #16
 800797c:	2b10      	cmp	r3, #16
 800797e:	d11b      	bne.n	80079b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f06f 0210 	mvn.w	r2, #16
 8007988:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2208      	movs	r2, #8
 800798e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	69db      	ldr	r3, [r3, #28]
 8007996:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800799a:	2b00      	cmp	r3, #0
 800799c:	d003      	beq.n	80079a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 f950 	bl	8007c44 <HAL_TIM_IC_CaptureCallback>
 80079a4:	e005      	b.n	80079b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 f942 	bl	8007c30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 f953 	bl	8007c58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	691b      	ldr	r3, [r3, #16]
 80079be:	f003 0301 	and.w	r3, r3, #1
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d10e      	bne.n	80079e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	68db      	ldr	r3, [r3, #12]
 80079cc:	f003 0301 	and.w	r3, r3, #1
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d107      	bne.n	80079e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f06f 0201 	mvn.w	r2, #1
 80079dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f7fb f9c8 	bl	8002d74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	691b      	ldr	r3, [r3, #16]
 80079ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079ee:	2b80      	cmp	r3, #128	; 0x80
 80079f0:	d10e      	bne.n	8007a10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	68db      	ldr	r3, [r3, #12]
 80079f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079fc:	2b80      	cmp	r3, #128	; 0x80
 80079fe:	d107      	bne.n	8007a10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 fab0 	bl	8007f70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	691b      	ldr	r3, [r3, #16]
 8007a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a1e:	d10e      	bne.n	8007a3e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	68db      	ldr	r3, [r3, #12]
 8007a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a2a:	2b80      	cmp	r3, #128	; 0x80
 8007a2c:	d107      	bne.n	8007a3e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007a36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 faa3 	bl	8007f84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	691b      	ldr	r3, [r3, #16]
 8007a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a48:	2b40      	cmp	r3, #64	; 0x40
 8007a4a:	d10e      	bne.n	8007a6a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	68db      	ldr	r3, [r3, #12]
 8007a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a56:	2b40      	cmp	r3, #64	; 0x40
 8007a58:	d107      	bne.n	8007a6a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007a62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 f901 	bl	8007c6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	691b      	ldr	r3, [r3, #16]
 8007a70:	f003 0320 	and.w	r3, r3, #32
 8007a74:	2b20      	cmp	r3, #32
 8007a76:	d10e      	bne.n	8007a96 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	68db      	ldr	r3, [r3, #12]
 8007a7e:	f003 0320 	and.w	r3, r3, #32
 8007a82:	2b20      	cmp	r3, #32
 8007a84:	d107      	bne.n	8007a96 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f06f 0220 	mvn.w	r2, #32
 8007a8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 fa63 	bl	8007f5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a96:	bf00      	nop
 8007a98:	3708      	adds	r7, #8
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}

08007a9e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007a9e:	b580      	push	{r7, lr}
 8007aa0:	b084      	sub	sp, #16
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	6078      	str	r0, [r7, #4]
 8007aa6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	d101      	bne.n	8007aba <HAL_TIM_ConfigClockSource+0x1c>
 8007ab6:	2302      	movs	r3, #2
 8007ab8:	e0b6      	b.n	8007c28 <HAL_TIM_ConfigClockSource+0x18a>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2201      	movs	r2, #1
 8007abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2202      	movs	r2, #2
 8007ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ad8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007adc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ae4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	68ba      	ldr	r2, [r7, #8]
 8007aec:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007af6:	d03e      	beq.n	8007b76 <HAL_TIM_ConfigClockSource+0xd8>
 8007af8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007afc:	f200 8087 	bhi.w	8007c0e <HAL_TIM_ConfigClockSource+0x170>
 8007b00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b04:	f000 8086 	beq.w	8007c14 <HAL_TIM_ConfigClockSource+0x176>
 8007b08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b0c:	d87f      	bhi.n	8007c0e <HAL_TIM_ConfigClockSource+0x170>
 8007b0e:	2b70      	cmp	r3, #112	; 0x70
 8007b10:	d01a      	beq.n	8007b48 <HAL_TIM_ConfigClockSource+0xaa>
 8007b12:	2b70      	cmp	r3, #112	; 0x70
 8007b14:	d87b      	bhi.n	8007c0e <HAL_TIM_ConfigClockSource+0x170>
 8007b16:	2b60      	cmp	r3, #96	; 0x60
 8007b18:	d050      	beq.n	8007bbc <HAL_TIM_ConfigClockSource+0x11e>
 8007b1a:	2b60      	cmp	r3, #96	; 0x60
 8007b1c:	d877      	bhi.n	8007c0e <HAL_TIM_ConfigClockSource+0x170>
 8007b1e:	2b50      	cmp	r3, #80	; 0x50
 8007b20:	d03c      	beq.n	8007b9c <HAL_TIM_ConfigClockSource+0xfe>
 8007b22:	2b50      	cmp	r3, #80	; 0x50
 8007b24:	d873      	bhi.n	8007c0e <HAL_TIM_ConfigClockSource+0x170>
 8007b26:	2b40      	cmp	r3, #64	; 0x40
 8007b28:	d058      	beq.n	8007bdc <HAL_TIM_ConfigClockSource+0x13e>
 8007b2a:	2b40      	cmp	r3, #64	; 0x40
 8007b2c:	d86f      	bhi.n	8007c0e <HAL_TIM_ConfigClockSource+0x170>
 8007b2e:	2b30      	cmp	r3, #48	; 0x30
 8007b30:	d064      	beq.n	8007bfc <HAL_TIM_ConfigClockSource+0x15e>
 8007b32:	2b30      	cmp	r3, #48	; 0x30
 8007b34:	d86b      	bhi.n	8007c0e <HAL_TIM_ConfigClockSource+0x170>
 8007b36:	2b20      	cmp	r3, #32
 8007b38:	d060      	beq.n	8007bfc <HAL_TIM_ConfigClockSource+0x15e>
 8007b3a:	2b20      	cmp	r3, #32
 8007b3c:	d867      	bhi.n	8007c0e <HAL_TIM_ConfigClockSource+0x170>
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d05c      	beq.n	8007bfc <HAL_TIM_ConfigClockSource+0x15e>
 8007b42:	2b10      	cmp	r3, #16
 8007b44:	d05a      	beq.n	8007bfc <HAL_TIM_ConfigClockSource+0x15e>
 8007b46:	e062      	b.n	8007c0e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007b58:	f000 f97a 	bl	8007e50 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007b6a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	68ba      	ldr	r2, [r7, #8]
 8007b72:	609a      	str	r2, [r3, #8]
      break;
 8007b74:	e04f      	b.n	8007c16 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007b86:	f000 f963 	bl	8007e50 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	689a      	ldr	r2, [r3, #8]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b98:	609a      	str	r2, [r3, #8]
      break;
 8007b9a:	e03c      	b.n	8007c16 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ba8:	461a      	mov	r2, r3
 8007baa:	f000 f8d7 	bl	8007d5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	2150      	movs	r1, #80	; 0x50
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f000 f930 	bl	8007e1a <TIM_ITRx_SetConfig>
      break;
 8007bba:	e02c      	b.n	8007c16 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007bc8:	461a      	mov	r2, r3
 8007bca:	f000 f8f6 	bl	8007dba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	2160      	movs	r1, #96	; 0x60
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f000 f920 	bl	8007e1a <TIM_ITRx_SetConfig>
      break;
 8007bda:	e01c      	b.n	8007c16 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007be8:	461a      	mov	r2, r3
 8007bea:	f000 f8b7 	bl	8007d5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	2140      	movs	r1, #64	; 0x40
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f000 f910 	bl	8007e1a <TIM_ITRx_SetConfig>
      break;
 8007bfa:	e00c      	b.n	8007c16 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681a      	ldr	r2, [r3, #0]
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4619      	mov	r1, r3
 8007c06:	4610      	mov	r0, r2
 8007c08:	f000 f907 	bl	8007e1a <TIM_ITRx_SetConfig>
      break;
 8007c0c:	e003      	b.n	8007c16 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	73fb      	strb	r3, [r7, #15]
      break;
 8007c12:	e000      	b.n	8007c16 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007c14:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2201      	movs	r2, #1
 8007c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3710      	adds	r7, #16
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b083      	sub	sp, #12
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c38:	bf00      	nop
 8007c3a:	370c      	adds	r7, #12
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c4c:	bf00      	nop
 8007c4e:	370c      	adds	r7, #12
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr

08007c58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c60:	bf00      	nop
 8007c62:	370c      	adds	r7, #12
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr

08007c6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c74:	bf00      	nop
 8007c76:	370c      	adds	r7, #12
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr

08007c80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b085      	sub	sp, #20
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	4a2e      	ldr	r2, [pc, #184]	; (8007d4c <TIM_Base_SetConfig+0xcc>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d003      	beq.n	8007ca0 <TIM_Base_SetConfig+0x20>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c9e:	d108      	bne.n	8007cb2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ca6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	68fa      	ldr	r2, [r7, #12]
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	4a25      	ldr	r2, [pc, #148]	; (8007d4c <TIM_Base_SetConfig+0xcc>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d00f      	beq.n	8007cda <TIM_Base_SetConfig+0x5a>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cc0:	d00b      	beq.n	8007cda <TIM_Base_SetConfig+0x5a>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	4a22      	ldr	r2, [pc, #136]	; (8007d50 <TIM_Base_SetConfig+0xd0>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d007      	beq.n	8007cda <TIM_Base_SetConfig+0x5a>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	4a21      	ldr	r2, [pc, #132]	; (8007d54 <TIM_Base_SetConfig+0xd4>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d003      	beq.n	8007cda <TIM_Base_SetConfig+0x5a>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	4a20      	ldr	r2, [pc, #128]	; (8007d58 <TIM_Base_SetConfig+0xd8>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d108      	bne.n	8007cec <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ce0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	68db      	ldr	r3, [r3, #12]
 8007ce6:	68fa      	ldr	r2, [r7, #12]
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	695b      	ldr	r3, [r3, #20]
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	68fa      	ldr	r2, [r7, #12]
 8007cfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	689a      	ldr	r2, [r3, #8]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	681a      	ldr	r2, [r3, #0]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	4a0e      	ldr	r2, [pc, #56]	; (8007d4c <TIM_Base_SetConfig+0xcc>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d00b      	beq.n	8007d30 <TIM_Base_SetConfig+0xb0>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	4a0d      	ldr	r2, [pc, #52]	; (8007d50 <TIM_Base_SetConfig+0xd0>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d007      	beq.n	8007d30 <TIM_Base_SetConfig+0xb0>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	4a0c      	ldr	r2, [pc, #48]	; (8007d54 <TIM_Base_SetConfig+0xd4>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d003      	beq.n	8007d30 <TIM_Base_SetConfig+0xb0>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	4a0b      	ldr	r2, [pc, #44]	; (8007d58 <TIM_Base_SetConfig+0xd8>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d103      	bne.n	8007d38 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	691a      	ldr	r2, [r3, #16]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	615a      	str	r2, [r3, #20]
}
 8007d3e:	bf00      	nop
 8007d40:	3714      	adds	r7, #20
 8007d42:	46bd      	mov	sp, r7
 8007d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d48:	4770      	bx	lr
 8007d4a:	bf00      	nop
 8007d4c:	40012c00 	.word	0x40012c00
 8007d50:	40014000 	.word	0x40014000
 8007d54:	40014400 	.word	0x40014400
 8007d58:	40014800 	.word	0x40014800

08007d5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b087      	sub	sp, #28
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	60b9      	str	r1, [r7, #8]
 8007d66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	6a1b      	ldr	r3, [r3, #32]
 8007d6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	6a1b      	ldr	r3, [r3, #32]
 8007d72:	f023 0201 	bic.w	r2, r3, #1
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	699b      	ldr	r3, [r3, #24]
 8007d7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	011b      	lsls	r3, r3, #4
 8007d8c:	693a      	ldr	r2, [r7, #16]
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	f023 030a 	bic.w	r3, r3, #10
 8007d98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d9a:	697a      	ldr	r2, [r7, #20]
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	693a      	ldr	r2, [r7, #16]
 8007da6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	697a      	ldr	r2, [r7, #20]
 8007dac:	621a      	str	r2, [r3, #32]
}
 8007dae:	bf00      	nop
 8007db0:	371c      	adds	r7, #28
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr

08007dba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007dba:	b480      	push	{r7}
 8007dbc:	b087      	sub	sp, #28
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	60f8      	str	r0, [r7, #12]
 8007dc2:	60b9      	str	r1, [r7, #8]
 8007dc4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	6a1b      	ldr	r3, [r3, #32]
 8007dca:	f023 0210 	bic.w	r2, r3, #16
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	699b      	ldr	r3, [r3, #24]
 8007dd6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	6a1b      	ldr	r3, [r3, #32]
 8007ddc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007de4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	031b      	lsls	r3, r3, #12
 8007dea:	697a      	ldr	r2, [r7, #20]
 8007dec:	4313      	orrs	r3, r2
 8007dee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007df6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	011b      	lsls	r3, r3, #4
 8007dfc:	693a      	ldr	r2, [r7, #16]
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	697a      	ldr	r2, [r7, #20]
 8007e06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	693a      	ldr	r2, [r7, #16]
 8007e0c:	621a      	str	r2, [r3, #32]
}
 8007e0e:	bf00      	nop
 8007e10:	371c      	adds	r7, #28
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr

08007e1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007e1a:	b480      	push	{r7}
 8007e1c:	b085      	sub	sp, #20
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	6078      	str	r0, [r7, #4]
 8007e22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	689b      	ldr	r3, [r3, #8]
 8007e28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e32:	683a      	ldr	r2, [r7, #0]
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	4313      	orrs	r3, r2
 8007e38:	f043 0307 	orr.w	r3, r3, #7
 8007e3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	68fa      	ldr	r2, [r7, #12]
 8007e42:	609a      	str	r2, [r3, #8]
}
 8007e44:	bf00      	nop
 8007e46:	3714      	adds	r7, #20
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr

08007e50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b087      	sub	sp, #28
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	60f8      	str	r0, [r7, #12]
 8007e58:	60b9      	str	r1, [r7, #8]
 8007e5a:	607a      	str	r2, [r7, #4]
 8007e5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	021a      	lsls	r2, r3, #8
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	431a      	orrs	r2, r3
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	4313      	orrs	r3, r2
 8007e78:	697a      	ldr	r2, [r7, #20]
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	697a      	ldr	r2, [r7, #20]
 8007e82:	609a      	str	r2, [r3, #8]
}
 8007e84:	bf00      	nop
 8007e86:	371c      	adds	r7, #28
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr

08007e90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b085      	sub	sp, #20
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d101      	bne.n	8007ea8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ea4:	2302      	movs	r3, #2
 8007ea6:	e04f      	b.n	8007f48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2202      	movs	r2, #2
 8007eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a21      	ldr	r2, [pc, #132]	; (8007f54 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d108      	bne.n	8007ee4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007ed8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	68fa      	ldr	r2, [r7, #12]
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	68fa      	ldr	r2, [r7, #12]
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	68fa      	ldr	r2, [r7, #12]
 8007efc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a14      	ldr	r2, [pc, #80]	; (8007f54 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d009      	beq.n	8007f1c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f10:	d004      	beq.n	8007f1c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a10      	ldr	r2, [pc, #64]	; (8007f58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d10c      	bne.n	8007f36 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f22:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	689b      	ldr	r3, [r3, #8]
 8007f28:	68ba      	ldr	r2, [r7, #8]
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	68ba      	ldr	r2, [r7, #8]
 8007f34:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2201      	movs	r2, #1
 8007f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f46:	2300      	movs	r3, #0
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3714      	adds	r7, #20
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr
 8007f54:	40012c00 	.word	0x40012c00
 8007f58:	40014000 	.word	0x40014000

08007f5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b083      	sub	sp, #12
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f64:	bf00      	nop
 8007f66:	370c      	adds	r7, #12
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr

08007f70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b083      	sub	sp, #12
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f78:	bf00      	nop
 8007f7a:	370c      	adds	r7, #12
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b083      	sub	sp, #12
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007f8c:	bf00      	nop
 8007f8e:	370c      	adds	r7, #12
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr

08007f98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b082      	sub	sp, #8
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d101      	bne.n	8007faa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	e040      	b.n	800802c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d106      	bne.n	8007fc0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f7fa ffce 	bl	8002f5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2224      	movs	r2, #36	; 0x24
 8007fc4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	681a      	ldr	r2, [r3, #0]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f022 0201 	bic.w	r2, r2, #1
 8007fd4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 f980 	bl	80082dc <UART_SetConfig>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d101      	bne.n	8007fe6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e022      	b.n	800802c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d002      	beq.n	8007ff4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 faaa 	bl	8008548 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	685a      	ldr	r2, [r3, #4]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008002:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	689a      	ldr	r2, [r3, #8]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008012:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f042 0201 	orr.w	r2, r2, #1
 8008022:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 fb31 	bl	800868c <UART_CheckIdleState>
 800802a:	4603      	mov	r3, r0
}
 800802c:	4618      	mov	r0, r3
 800802e:	3708      	adds	r7, #8
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}

08008034 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b08a      	sub	sp, #40	; 0x28
 8008038:	af02      	add	r7, sp, #8
 800803a:	60f8      	str	r0, [r7, #12]
 800803c:	60b9      	str	r1, [r7, #8]
 800803e:	603b      	str	r3, [r7, #0]
 8008040:	4613      	mov	r3, r2
 8008042:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008048:	2b20      	cmp	r3, #32
 800804a:	d178      	bne.n	800813e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d002      	beq.n	8008058 <HAL_UART_Transmit+0x24>
 8008052:	88fb      	ldrh	r3, [r7, #6]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d101      	bne.n	800805c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008058:	2301      	movs	r3, #1
 800805a:	e071      	b.n	8008140 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	2200      	movs	r2, #0
 8008060:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2221      	movs	r2, #33	; 0x21
 8008068:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800806a:	f7fb ff85 	bl	8003f78 <HAL_GetTick>
 800806e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	88fa      	ldrh	r2, [r7, #6]
 8008074:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	88fa      	ldrh	r2, [r7, #6]
 800807c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008088:	d108      	bne.n	800809c <HAL_UART_Transmit+0x68>
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	691b      	ldr	r3, [r3, #16]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d104      	bne.n	800809c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008092:	2300      	movs	r3, #0
 8008094:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	61bb      	str	r3, [r7, #24]
 800809a:	e003      	b.n	80080a4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80080a0:	2300      	movs	r3, #0
 80080a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80080a4:	e030      	b.n	8008108 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	9300      	str	r3, [sp, #0]
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	2200      	movs	r2, #0
 80080ae:	2180      	movs	r1, #128	; 0x80
 80080b0:	68f8      	ldr	r0, [r7, #12]
 80080b2:	f000 fb93 	bl	80087dc <UART_WaitOnFlagUntilTimeout>
 80080b6:	4603      	mov	r3, r0
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d004      	beq.n	80080c6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2220      	movs	r2, #32
 80080c0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80080c2:	2303      	movs	r3, #3
 80080c4:	e03c      	b.n	8008140 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80080c6:	69fb      	ldr	r3, [r7, #28]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d10b      	bne.n	80080e4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80080cc:	69bb      	ldr	r3, [r7, #24]
 80080ce:	881a      	ldrh	r2, [r3, #0]
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080d8:	b292      	uxth	r2, r2
 80080da:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80080dc:	69bb      	ldr	r3, [r7, #24]
 80080de:	3302      	adds	r3, #2
 80080e0:	61bb      	str	r3, [r7, #24]
 80080e2:	e008      	b.n	80080f6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80080e4:	69fb      	ldr	r3, [r7, #28]
 80080e6:	781a      	ldrb	r2, [r3, #0]
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	b292      	uxth	r2, r2
 80080ee:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80080f0:	69fb      	ldr	r3, [r7, #28]
 80080f2:	3301      	adds	r3, #1
 80080f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	3b01      	subs	r3, #1
 8008100:	b29a      	uxth	r2, r3
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800810e:	b29b      	uxth	r3, r3
 8008110:	2b00      	cmp	r3, #0
 8008112:	d1c8      	bne.n	80080a6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	9300      	str	r3, [sp, #0]
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	2200      	movs	r2, #0
 800811c:	2140      	movs	r1, #64	; 0x40
 800811e:	68f8      	ldr	r0, [r7, #12]
 8008120:	f000 fb5c 	bl	80087dc <UART_WaitOnFlagUntilTimeout>
 8008124:	4603      	mov	r3, r0
 8008126:	2b00      	cmp	r3, #0
 8008128:	d004      	beq.n	8008134 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2220      	movs	r2, #32
 800812e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8008130:	2303      	movs	r3, #3
 8008132:	e005      	b.n	8008140 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2220      	movs	r2, #32
 8008138:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800813a:	2300      	movs	r3, #0
 800813c:	e000      	b.n	8008140 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800813e:	2302      	movs	r3, #2
  }
}
 8008140:	4618      	mov	r0, r3
 8008142:	3720      	adds	r7, #32
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b08a      	sub	sp, #40	; 0x28
 800814c:	af02      	add	r7, sp, #8
 800814e:	60f8      	str	r0, [r7, #12]
 8008150:	60b9      	str	r1, [r7, #8]
 8008152:	603b      	str	r3, [r7, #0]
 8008154:	4613      	mov	r3, r2
 8008156:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800815e:	2b20      	cmp	r3, #32
 8008160:	f040 80b6 	bne.w	80082d0 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d002      	beq.n	8008170 <HAL_UART_Receive+0x28>
 800816a:	88fb      	ldrh	r3, [r7, #6]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d101      	bne.n	8008174 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8008170:	2301      	movs	r3, #1
 8008172:	e0ae      	b.n	80082d2 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2200      	movs	r2, #0
 8008178:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2222      	movs	r2, #34	; 0x22
 8008180:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2200      	movs	r2, #0
 8008188:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800818a:	f7fb fef5 	bl	8003f78 <HAL_GetTick>
 800818e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	88fa      	ldrh	r2, [r7, #6]
 8008194:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	88fa      	ldrh	r2, [r7, #6]
 800819c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081a8:	d10e      	bne.n	80081c8 <HAL_UART_Receive+0x80>
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	691b      	ldr	r3, [r3, #16]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d105      	bne.n	80081be <HAL_UART_Receive+0x76>
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f240 12ff 	movw	r2, #511	; 0x1ff
 80081b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80081bc:	e02d      	b.n	800821a <HAL_UART_Receive+0xd2>
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	22ff      	movs	r2, #255	; 0xff
 80081c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80081c6:	e028      	b.n	800821a <HAL_UART_Receive+0xd2>
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d10d      	bne.n	80081ec <HAL_UART_Receive+0xa4>
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	691b      	ldr	r3, [r3, #16]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d104      	bne.n	80081e2 <HAL_UART_Receive+0x9a>
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	22ff      	movs	r2, #255	; 0xff
 80081dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80081e0:	e01b      	b.n	800821a <HAL_UART_Receive+0xd2>
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	227f      	movs	r2, #127	; 0x7f
 80081e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80081ea:	e016      	b.n	800821a <HAL_UART_Receive+0xd2>
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80081f4:	d10d      	bne.n	8008212 <HAL_UART_Receive+0xca>
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	691b      	ldr	r3, [r3, #16]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d104      	bne.n	8008208 <HAL_UART_Receive+0xc0>
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	227f      	movs	r2, #127	; 0x7f
 8008202:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008206:	e008      	b.n	800821a <HAL_UART_Receive+0xd2>
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	223f      	movs	r2, #63	; 0x3f
 800820c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008210:	e003      	b.n	800821a <HAL_UART_Receive+0xd2>
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2200      	movs	r2, #0
 8008216:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008220:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	689b      	ldr	r3, [r3, #8]
 8008226:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800822a:	d108      	bne.n	800823e <HAL_UART_Receive+0xf6>
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	691b      	ldr	r3, [r3, #16]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d104      	bne.n	800823e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8008234:	2300      	movs	r3, #0
 8008236:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	61bb      	str	r3, [r7, #24]
 800823c:	e003      	b.n	8008246 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008242:	2300      	movs	r3, #0
 8008244:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008246:	e037      	b.n	80082b8 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	9300      	str	r3, [sp, #0]
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	2200      	movs	r2, #0
 8008250:	2120      	movs	r1, #32
 8008252:	68f8      	ldr	r0, [r7, #12]
 8008254:	f000 fac2 	bl	80087dc <UART_WaitOnFlagUntilTimeout>
 8008258:	4603      	mov	r3, r0
 800825a:	2b00      	cmp	r3, #0
 800825c:	d005      	beq.n	800826a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2220      	movs	r2, #32
 8008262:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008266:	2303      	movs	r3, #3
 8008268:	e033      	b.n	80082d2 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 800826a:	69fb      	ldr	r3, [r7, #28]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d10c      	bne.n	800828a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008276:	b29a      	uxth	r2, r3
 8008278:	8a7b      	ldrh	r3, [r7, #18]
 800827a:	4013      	ands	r3, r2
 800827c:	b29a      	uxth	r2, r3
 800827e:	69bb      	ldr	r3, [r7, #24]
 8008280:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008282:	69bb      	ldr	r3, [r7, #24]
 8008284:	3302      	adds	r3, #2
 8008286:	61bb      	str	r3, [r7, #24]
 8008288:	e00d      	b.n	80082a6 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008290:	b29b      	uxth	r3, r3
 8008292:	b2da      	uxtb	r2, r3
 8008294:	8a7b      	ldrh	r3, [r7, #18]
 8008296:	b2db      	uxtb	r3, r3
 8008298:	4013      	ands	r3, r2
 800829a:	b2da      	uxtb	r2, r3
 800829c:	69fb      	ldr	r3, [r7, #28]
 800829e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80082a0:	69fb      	ldr	r3, [r7, #28]
 80082a2:	3301      	adds	r3, #1
 80082a4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80082ac:	b29b      	uxth	r3, r3
 80082ae:	3b01      	subs	r3, #1
 80082b0:	b29a      	uxth	r2, r3
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80082be:	b29b      	uxth	r3, r3
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d1c1      	bne.n	8008248 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2220      	movs	r2, #32
 80082c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80082cc:	2300      	movs	r3, #0
 80082ce:	e000      	b.n	80082d2 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80082d0:	2302      	movs	r3, #2
  }
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3720      	adds	r7, #32
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
	...

080082dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b088      	sub	sp, #32
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80082e4:	2300      	movs	r3, #0
 80082e6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	689a      	ldr	r2, [r3, #8]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	691b      	ldr	r3, [r3, #16]
 80082f0:	431a      	orrs	r2, r3
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	695b      	ldr	r3, [r3, #20]
 80082f6:	431a      	orrs	r2, r3
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	69db      	ldr	r3, [r3, #28]
 80082fc:	4313      	orrs	r3, r2
 80082fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	681a      	ldr	r2, [r3, #0]
 8008306:	4b8a      	ldr	r3, [pc, #552]	; (8008530 <UART_SetConfig+0x254>)
 8008308:	4013      	ands	r3, r2
 800830a:	687a      	ldr	r2, [r7, #4]
 800830c:	6812      	ldr	r2, [r2, #0]
 800830e:	6979      	ldr	r1, [r7, #20]
 8008310:	430b      	orrs	r3, r1
 8008312:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	68da      	ldr	r2, [r3, #12]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	430a      	orrs	r2, r1
 8008328:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	699b      	ldr	r3, [r3, #24]
 800832e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6a1b      	ldr	r3, [r3, #32]
 8008334:	697a      	ldr	r2, [r7, #20]
 8008336:	4313      	orrs	r3, r2
 8008338:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	697a      	ldr	r2, [r7, #20]
 800834a:	430a      	orrs	r2, r1
 800834c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a78      	ldr	r2, [pc, #480]	; (8008534 <UART_SetConfig+0x258>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d120      	bne.n	800839a <UART_SetConfig+0xbe>
 8008358:	4b77      	ldr	r3, [pc, #476]	; (8008538 <UART_SetConfig+0x25c>)
 800835a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800835c:	f003 0303 	and.w	r3, r3, #3
 8008360:	2b03      	cmp	r3, #3
 8008362:	d817      	bhi.n	8008394 <UART_SetConfig+0xb8>
 8008364:	a201      	add	r2, pc, #4	; (adr r2, 800836c <UART_SetConfig+0x90>)
 8008366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800836a:	bf00      	nop
 800836c:	0800837d 	.word	0x0800837d
 8008370:	08008389 	.word	0x08008389
 8008374:	0800838f 	.word	0x0800838f
 8008378:	08008383 	.word	0x08008383
 800837c:	2300      	movs	r3, #0
 800837e:	77fb      	strb	r3, [r7, #31]
 8008380:	e01d      	b.n	80083be <UART_SetConfig+0xe2>
 8008382:	2302      	movs	r3, #2
 8008384:	77fb      	strb	r3, [r7, #31]
 8008386:	e01a      	b.n	80083be <UART_SetConfig+0xe2>
 8008388:	2304      	movs	r3, #4
 800838a:	77fb      	strb	r3, [r7, #31]
 800838c:	e017      	b.n	80083be <UART_SetConfig+0xe2>
 800838e:	2308      	movs	r3, #8
 8008390:	77fb      	strb	r3, [r7, #31]
 8008392:	e014      	b.n	80083be <UART_SetConfig+0xe2>
 8008394:	2310      	movs	r3, #16
 8008396:	77fb      	strb	r3, [r7, #31]
 8008398:	e011      	b.n	80083be <UART_SetConfig+0xe2>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a67      	ldr	r2, [pc, #412]	; (800853c <UART_SetConfig+0x260>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d102      	bne.n	80083aa <UART_SetConfig+0xce>
 80083a4:	2300      	movs	r3, #0
 80083a6:	77fb      	strb	r3, [r7, #31]
 80083a8:	e009      	b.n	80083be <UART_SetConfig+0xe2>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a64      	ldr	r2, [pc, #400]	; (8008540 <UART_SetConfig+0x264>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d102      	bne.n	80083ba <UART_SetConfig+0xde>
 80083b4:	2300      	movs	r3, #0
 80083b6:	77fb      	strb	r3, [r7, #31]
 80083b8:	e001      	b.n	80083be <UART_SetConfig+0xe2>
 80083ba:	2310      	movs	r3, #16
 80083bc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	69db      	ldr	r3, [r3, #28]
 80083c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083c6:	d15a      	bne.n	800847e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80083c8:	7ffb      	ldrb	r3, [r7, #31]
 80083ca:	2b08      	cmp	r3, #8
 80083cc:	d827      	bhi.n	800841e <UART_SetConfig+0x142>
 80083ce:	a201      	add	r2, pc, #4	; (adr r2, 80083d4 <UART_SetConfig+0xf8>)
 80083d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083d4:	080083f9 	.word	0x080083f9
 80083d8:	08008401 	.word	0x08008401
 80083dc:	08008409 	.word	0x08008409
 80083e0:	0800841f 	.word	0x0800841f
 80083e4:	0800840f 	.word	0x0800840f
 80083e8:	0800841f 	.word	0x0800841f
 80083ec:	0800841f 	.word	0x0800841f
 80083f0:	0800841f 	.word	0x0800841f
 80083f4:	08008417 	.word	0x08008417
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083f8:	f7fe f856 	bl	80064a8 <HAL_RCC_GetPCLK1Freq>
 80083fc:	61b8      	str	r0, [r7, #24]
        break;
 80083fe:	e013      	b.n	8008428 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008400:	f7fe f874 	bl	80064ec <HAL_RCC_GetPCLK2Freq>
 8008404:	61b8      	str	r0, [r7, #24]
        break;
 8008406:	e00f      	b.n	8008428 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008408:	4b4e      	ldr	r3, [pc, #312]	; (8008544 <UART_SetConfig+0x268>)
 800840a:	61bb      	str	r3, [r7, #24]
        break;
 800840c:	e00c      	b.n	8008428 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800840e:	f7fd ffd5 	bl	80063bc <HAL_RCC_GetSysClockFreq>
 8008412:	61b8      	str	r0, [r7, #24]
        break;
 8008414:	e008      	b.n	8008428 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008416:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800841a:	61bb      	str	r3, [r7, #24]
        break;
 800841c:	e004      	b.n	8008428 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800841e:	2300      	movs	r3, #0
 8008420:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008422:	2301      	movs	r3, #1
 8008424:	77bb      	strb	r3, [r7, #30]
        break;
 8008426:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008428:	69bb      	ldr	r3, [r7, #24]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d074      	beq.n	8008518 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800842e:	69bb      	ldr	r3, [r7, #24]
 8008430:	005a      	lsls	r2, r3, #1
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	085b      	lsrs	r3, r3, #1
 8008438:	441a      	add	r2, r3
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008442:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	2b0f      	cmp	r3, #15
 8008448:	d916      	bls.n	8008478 <UART_SetConfig+0x19c>
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008450:	d212      	bcs.n	8008478 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	b29b      	uxth	r3, r3
 8008456:	f023 030f 	bic.w	r3, r3, #15
 800845a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	085b      	lsrs	r3, r3, #1
 8008460:	b29b      	uxth	r3, r3
 8008462:	f003 0307 	and.w	r3, r3, #7
 8008466:	b29a      	uxth	r2, r3
 8008468:	89fb      	ldrh	r3, [r7, #14]
 800846a:	4313      	orrs	r3, r2
 800846c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	89fa      	ldrh	r2, [r7, #14]
 8008474:	60da      	str	r2, [r3, #12]
 8008476:	e04f      	b.n	8008518 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8008478:	2301      	movs	r3, #1
 800847a:	77bb      	strb	r3, [r7, #30]
 800847c:	e04c      	b.n	8008518 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800847e:	7ffb      	ldrb	r3, [r7, #31]
 8008480:	2b08      	cmp	r3, #8
 8008482:	d828      	bhi.n	80084d6 <UART_SetConfig+0x1fa>
 8008484:	a201      	add	r2, pc, #4	; (adr r2, 800848c <UART_SetConfig+0x1b0>)
 8008486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800848a:	bf00      	nop
 800848c:	080084b1 	.word	0x080084b1
 8008490:	080084b9 	.word	0x080084b9
 8008494:	080084c1 	.word	0x080084c1
 8008498:	080084d7 	.word	0x080084d7
 800849c:	080084c7 	.word	0x080084c7
 80084a0:	080084d7 	.word	0x080084d7
 80084a4:	080084d7 	.word	0x080084d7
 80084a8:	080084d7 	.word	0x080084d7
 80084ac:	080084cf 	.word	0x080084cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084b0:	f7fd fffa 	bl	80064a8 <HAL_RCC_GetPCLK1Freq>
 80084b4:	61b8      	str	r0, [r7, #24]
        break;
 80084b6:	e013      	b.n	80084e0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80084b8:	f7fe f818 	bl	80064ec <HAL_RCC_GetPCLK2Freq>
 80084bc:	61b8      	str	r0, [r7, #24]
        break;
 80084be:	e00f      	b.n	80084e0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80084c0:	4b20      	ldr	r3, [pc, #128]	; (8008544 <UART_SetConfig+0x268>)
 80084c2:	61bb      	str	r3, [r7, #24]
        break;
 80084c4:	e00c      	b.n	80084e0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80084c6:	f7fd ff79 	bl	80063bc <HAL_RCC_GetSysClockFreq>
 80084ca:	61b8      	str	r0, [r7, #24]
        break;
 80084cc:	e008      	b.n	80084e0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084d2:	61bb      	str	r3, [r7, #24]
        break;
 80084d4:	e004      	b.n	80084e0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80084d6:	2300      	movs	r3, #0
 80084d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80084da:	2301      	movs	r3, #1
 80084dc:	77bb      	strb	r3, [r7, #30]
        break;
 80084de:	bf00      	nop
    }

    if (pclk != 0U)
 80084e0:	69bb      	ldr	r3, [r7, #24]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d018      	beq.n	8008518 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	085a      	lsrs	r2, r3, #1
 80084ec:	69bb      	ldr	r3, [r7, #24]
 80084ee:	441a      	add	r2, r3
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80084f8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	2b0f      	cmp	r3, #15
 80084fe:	d909      	bls.n	8008514 <UART_SetConfig+0x238>
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008506:	d205      	bcs.n	8008514 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	b29a      	uxth	r2, r3
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	60da      	str	r2, [r3, #12]
 8008512:	e001      	b.n	8008518 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8008514:	2301      	movs	r3, #1
 8008516:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2200      	movs	r2, #0
 800851c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2200      	movs	r2, #0
 8008522:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008524:	7fbb      	ldrb	r3, [r7, #30]
}
 8008526:	4618      	mov	r0, r3
 8008528:	3720      	adds	r7, #32
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	efff69f3 	.word	0xefff69f3
 8008534:	40013800 	.word	0x40013800
 8008538:	40021000 	.word	0x40021000
 800853c:	40004400 	.word	0x40004400
 8008540:	40004800 	.word	0x40004800
 8008544:	007a1200 	.word	0x007a1200

08008548 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008548:	b480      	push	{r7}
 800854a:	b083      	sub	sp, #12
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008554:	f003 0301 	and.w	r3, r3, #1
 8008558:	2b00      	cmp	r3, #0
 800855a:	d00a      	beq.n	8008572 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	430a      	orrs	r2, r1
 8008570:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008576:	f003 0302 	and.w	r3, r3, #2
 800857a:	2b00      	cmp	r3, #0
 800857c:	d00a      	beq.n	8008594 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	430a      	orrs	r2, r1
 8008592:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008598:	f003 0304 	and.w	r3, r3, #4
 800859c:	2b00      	cmp	r3, #0
 800859e:	d00a      	beq.n	80085b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	430a      	orrs	r2, r1
 80085b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ba:	f003 0308 	and.w	r3, r3, #8
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d00a      	beq.n	80085d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	430a      	orrs	r2, r1
 80085d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085dc:	f003 0310 	and.w	r3, r3, #16
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d00a      	beq.n	80085fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	689b      	ldr	r3, [r3, #8]
 80085ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	430a      	orrs	r2, r1
 80085f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085fe:	f003 0320 	and.w	r3, r3, #32
 8008602:	2b00      	cmp	r3, #0
 8008604:	d00a      	beq.n	800861c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	430a      	orrs	r2, r1
 800861a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008624:	2b00      	cmp	r3, #0
 8008626:	d01a      	beq.n	800865e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	430a      	orrs	r2, r1
 800863c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008642:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008646:	d10a      	bne.n	800865e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	430a      	orrs	r2, r1
 800865c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008666:	2b00      	cmp	r3, #0
 8008668:	d00a      	beq.n	8008680 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	430a      	orrs	r2, r1
 800867e:	605a      	str	r2, [r3, #4]
  }
}
 8008680:	bf00      	nop
 8008682:	370c      	adds	r7, #12
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr

0800868c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b098      	sub	sp, #96	; 0x60
 8008690:	af02      	add	r7, sp, #8
 8008692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2200      	movs	r2, #0
 8008698:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800869c:	f7fb fc6c 	bl	8003f78 <HAL_GetTick>
 80086a0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f003 0308 	and.w	r3, r3, #8
 80086ac:	2b08      	cmp	r3, #8
 80086ae:	d12e      	bne.n	800870e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80086b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80086b4:	9300      	str	r3, [sp, #0]
 80086b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086b8:	2200      	movs	r2, #0
 80086ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f000 f88c 	bl	80087dc <UART_WaitOnFlagUntilTimeout>
 80086c4:	4603      	mov	r3, r0
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d021      	beq.n	800870e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d2:	e853 3f00 	ldrex	r3, [r3]
 80086d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80086d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086de:	653b      	str	r3, [r7, #80]	; 0x50
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	461a      	mov	r2, r3
 80086e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086e8:	647b      	str	r3, [r7, #68]	; 0x44
 80086ea:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80086ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086f0:	e841 2300 	strex	r3, r2, [r1]
 80086f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80086f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d1e6      	bne.n	80086ca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2220      	movs	r2, #32
 8008700:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2200      	movs	r2, #0
 8008706:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800870a:	2303      	movs	r3, #3
 800870c:	e062      	b.n	80087d4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f003 0304 	and.w	r3, r3, #4
 8008718:	2b04      	cmp	r3, #4
 800871a:	d149      	bne.n	80087b0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800871c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008720:	9300      	str	r3, [sp, #0]
 8008722:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008724:	2200      	movs	r2, #0
 8008726:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 f856 	bl	80087dc <UART_WaitOnFlagUntilTimeout>
 8008730:	4603      	mov	r3, r0
 8008732:	2b00      	cmp	r3, #0
 8008734:	d03c      	beq.n	80087b0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800873c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873e:	e853 3f00 	ldrex	r3, [r3]
 8008742:	623b      	str	r3, [r7, #32]
   return(result);
 8008744:	6a3b      	ldr	r3, [r7, #32]
 8008746:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800874a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	461a      	mov	r2, r3
 8008752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008754:	633b      	str	r3, [r7, #48]	; 0x30
 8008756:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008758:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800875a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800875c:	e841 2300 	strex	r3, r2, [r1]
 8008760:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008764:	2b00      	cmp	r3, #0
 8008766:	d1e6      	bne.n	8008736 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	3308      	adds	r3, #8
 800876e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	e853 3f00 	ldrex	r3, [r3]
 8008776:	60fb      	str	r3, [r7, #12]
   return(result);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f023 0301 	bic.w	r3, r3, #1
 800877e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	3308      	adds	r3, #8
 8008786:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008788:	61fa      	str	r2, [r7, #28]
 800878a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800878c:	69b9      	ldr	r1, [r7, #24]
 800878e:	69fa      	ldr	r2, [r7, #28]
 8008790:	e841 2300 	strex	r3, r2, [r1]
 8008794:	617b      	str	r3, [r7, #20]
   return(result);
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d1e5      	bne.n	8008768 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2220      	movs	r2, #32
 80087a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2200      	movs	r2, #0
 80087a8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087ac:	2303      	movs	r3, #3
 80087ae:	e011      	b.n	80087d4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2220      	movs	r2, #32
 80087b4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2220      	movs	r2, #32
 80087ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2200      	movs	r2, #0
 80087c2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2200      	movs	r2, #0
 80087c8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2200      	movs	r2, #0
 80087ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80087d2:	2300      	movs	r3, #0
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3758      	adds	r7, #88	; 0x58
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}

080087dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b084      	sub	sp, #16
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	603b      	str	r3, [r7, #0]
 80087e8:	4613      	mov	r3, r2
 80087ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087ec:	e049      	b.n	8008882 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087ee:	69bb      	ldr	r3, [r7, #24]
 80087f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087f4:	d045      	beq.n	8008882 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087f6:	f7fb fbbf 	bl	8003f78 <HAL_GetTick>
 80087fa:	4602      	mov	r2, r0
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	1ad3      	subs	r3, r2, r3
 8008800:	69ba      	ldr	r2, [r7, #24]
 8008802:	429a      	cmp	r2, r3
 8008804:	d302      	bcc.n	800880c <UART_WaitOnFlagUntilTimeout+0x30>
 8008806:	69bb      	ldr	r3, [r7, #24]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d101      	bne.n	8008810 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800880c:	2303      	movs	r3, #3
 800880e:	e048      	b.n	80088a2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f003 0304 	and.w	r3, r3, #4
 800881a:	2b00      	cmp	r3, #0
 800881c:	d031      	beq.n	8008882 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	69db      	ldr	r3, [r3, #28]
 8008824:	f003 0308 	and.w	r3, r3, #8
 8008828:	2b08      	cmp	r3, #8
 800882a:	d110      	bne.n	800884e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	2208      	movs	r2, #8
 8008832:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008834:	68f8      	ldr	r0, [r7, #12]
 8008836:	f000 f838 	bl	80088aa <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	2208      	movs	r2, #8
 800883e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2200      	movs	r2, #0
 8008846:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800884a:	2301      	movs	r3, #1
 800884c:	e029      	b.n	80088a2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	69db      	ldr	r3, [r3, #28]
 8008854:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008858:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800885c:	d111      	bne.n	8008882 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008866:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008868:	68f8      	ldr	r0, [r7, #12]
 800886a:	f000 f81e 	bl	80088aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2220      	movs	r2, #32
 8008872:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2200      	movs	r2, #0
 800887a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800887e:	2303      	movs	r3, #3
 8008880:	e00f      	b.n	80088a2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	69da      	ldr	r2, [r3, #28]
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	4013      	ands	r3, r2
 800888c:	68ba      	ldr	r2, [r7, #8]
 800888e:	429a      	cmp	r2, r3
 8008890:	bf0c      	ite	eq
 8008892:	2301      	moveq	r3, #1
 8008894:	2300      	movne	r3, #0
 8008896:	b2db      	uxtb	r3, r3
 8008898:	461a      	mov	r2, r3
 800889a:	79fb      	ldrb	r3, [r7, #7]
 800889c:	429a      	cmp	r2, r3
 800889e:	d0a6      	beq.n	80087ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80088a0:	2300      	movs	r3, #0
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3710      	adds	r7, #16
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}

080088aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80088aa:	b480      	push	{r7}
 80088ac:	b095      	sub	sp, #84	; 0x54
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ba:	e853 3f00 	ldrex	r3, [r3]
 80088be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80088c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80088c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	461a      	mov	r2, r3
 80088ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088d0:	643b      	str	r3, [r7, #64]	; 0x40
 80088d2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80088d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80088d8:	e841 2300 	strex	r3, r2, [r1]
 80088dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80088de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d1e6      	bne.n	80088b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	3308      	adds	r3, #8
 80088ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ec:	6a3b      	ldr	r3, [r7, #32]
 80088ee:	e853 3f00 	ldrex	r3, [r3]
 80088f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80088f4:	69fb      	ldr	r3, [r7, #28]
 80088f6:	f023 0301 	bic.w	r3, r3, #1
 80088fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	3308      	adds	r3, #8
 8008902:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008904:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008906:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008908:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800890a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800890c:	e841 2300 	strex	r3, r2, [r1]
 8008910:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008914:	2b00      	cmp	r3, #0
 8008916:	d1e5      	bne.n	80088e4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800891c:	2b01      	cmp	r3, #1
 800891e:	d118      	bne.n	8008952 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	e853 3f00 	ldrex	r3, [r3]
 800892c:	60bb      	str	r3, [r7, #8]
   return(result);
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	f023 0310 	bic.w	r3, r3, #16
 8008934:	647b      	str	r3, [r7, #68]	; 0x44
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	461a      	mov	r2, r3
 800893c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800893e:	61bb      	str	r3, [r7, #24]
 8008940:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008942:	6979      	ldr	r1, [r7, #20]
 8008944:	69ba      	ldr	r2, [r7, #24]
 8008946:	e841 2300 	strex	r3, r2, [r1]
 800894a:	613b      	str	r3, [r7, #16]
   return(result);
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d1e6      	bne.n	8008920 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2220      	movs	r2, #32
 8008956:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2200      	movs	r2, #0
 800895e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2200      	movs	r2, #0
 8008964:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008966:	bf00      	nop
 8008968:	3754      	adds	r7, #84	; 0x54
 800896a:	46bd      	mov	sp, r7
 800896c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008970:	4770      	bx	lr

08008972 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008972:	b480      	push	{r7}
 8008974:	b085      	sub	sp, #20
 8008976:	af00      	add	r7, sp, #0
 8008978:	4603      	mov	r3, r0
 800897a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800897c:	2300      	movs	r3, #0
 800897e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008980:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008984:	2b84      	cmp	r3, #132	; 0x84
 8008986:	d005      	beq.n	8008994 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008988:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	4413      	add	r3, r2
 8008990:	3303      	adds	r3, #3
 8008992:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008994:	68fb      	ldr	r3, [r7, #12]
}
 8008996:	4618      	mov	r0, r3
 8008998:	3714      	adds	r7, #20
 800899a:	46bd      	mov	sp, r7
 800899c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a0:	4770      	bx	lr

080089a2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80089a2:	b580      	push	{r7, lr}
 80089a4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80089a6:	f001 f8b9 	bl	8009b1c <vTaskStartScheduler>
  
  return osOK;
 80089aa:	2300      	movs	r3, #0
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80089b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089b2:	b089      	sub	sp, #36	; 0x24
 80089b4:	af04      	add	r7, sp, #16
 80089b6:	6078      	str	r0, [r7, #4]
 80089b8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	695b      	ldr	r3, [r3, #20]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d020      	beq.n	8008a04 <osThreadCreate+0x54>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	699b      	ldr	r3, [r3, #24]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d01c      	beq.n	8008a04 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	685c      	ldr	r4, [r3, #4]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	691e      	ldr	r6, [r3, #16]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80089dc:	4618      	mov	r0, r3
 80089de:	f7ff ffc8 	bl	8008972 <makeFreeRtosPriority>
 80089e2:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	695b      	ldr	r3, [r3, #20]
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80089ec:	9202      	str	r2, [sp, #8]
 80089ee:	9301      	str	r3, [sp, #4]
 80089f0:	9100      	str	r1, [sp, #0]
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	4632      	mov	r2, r6
 80089f6:	4629      	mov	r1, r5
 80089f8:	4620      	mov	r0, r4
 80089fa:	f000 fed1 	bl	80097a0 <xTaskCreateStatic>
 80089fe:	4603      	mov	r3, r0
 8008a00:	60fb      	str	r3, [r7, #12]
 8008a02:	e01c      	b.n	8008a3e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	685c      	ldr	r4, [r3, #4]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008a10:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f7ff ffaa 	bl	8008972 <makeFreeRtosPriority>
 8008a1e:	4602      	mov	r2, r0
 8008a20:	f107 030c 	add.w	r3, r7, #12
 8008a24:	9301      	str	r3, [sp, #4]
 8008a26:	9200      	str	r2, [sp, #0]
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	4632      	mov	r2, r6
 8008a2c:	4629      	mov	r1, r5
 8008a2e:	4620      	mov	r0, r4
 8008a30:	f000 ff12 	bl	8009858 <xTaskCreate>
 8008a34:	4603      	mov	r3, r0
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d001      	beq.n	8008a3e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	e000      	b.n	8008a40 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3714      	adds	r7, #20
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008a48 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d001      	beq.n	8008a5e <osDelay+0x16>
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	e000      	b.n	8008a60 <osDelay+0x18>
 8008a5e:	2301      	movs	r3, #1
 8008a60:	4618      	mov	r0, r3
 8008a62:	f001 f827 	bl	8009ab4 <vTaskDelay>
  
  return osOK;
 8008a66:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3710      	adds	r7, #16
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}

08008a70 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b082      	sub	sp, #8
 8008a74:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8008a76:	201c      	movs	r0, #28
 8008a78:	f002 fbbe 	bl	800b1f8 <pvPortMalloc>
 8008a7c:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d00a      	beq.n	8008a9a <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2200      	movs	r2, #0
 8008a88:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	3304      	adds	r3, #4
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f000 f8ef 	bl	8008c72 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2200      	movs	r2, #0
 8008a98:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8008a9a:	687b      	ldr	r3, [r7, #4]
	}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3708      	adds	r7, #8
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <xEventGroupClearBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b086      	sub	sp, #24
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d10a      	bne.n	8008ace <xEventGroupClearBits+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008abc:	f383 8811 	msr	BASEPRI, r3
 8008ac0:	f3bf 8f6f 	isb	sy
 8008ac4:	f3bf 8f4f 	dsb	sy
 8008ac8:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008aca:	bf00      	nop
 8008acc:	e7fe      	b.n	8008acc <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d00a      	beq.n	8008aee <xEventGroupClearBits+0x4a>
	__asm volatile
 8008ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008adc:	f383 8811 	msr	BASEPRI, r3
 8008ae0:	f3bf 8f6f 	isb	sy
 8008ae4:	f3bf 8f4f 	dsb	sy
 8008ae8:	60bb      	str	r3, [r7, #8]
}
 8008aea:	bf00      	nop
 8008aec:	e7fe      	b.n	8008aec <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8008aee:	f002 fa61 	bl	800afb4 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	681a      	ldr	r2, [r3, #0]
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	43db      	mvns	r3, r3
 8008b00:	401a      	ands	r2, r3
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8008b06:	f002 fa85 	bl	800b014 <vPortExitCritical>

	return uxReturn;
 8008b0a:	693b      	ldr	r3, [r7, #16]
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3718      	adds	r7, #24
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8008b14:	b480      	push	{r7}
 8008b16:	b089      	sub	sp, #36	; 0x24
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008b20:	f3ef 8211 	mrs	r2, BASEPRI
 8008b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b28:	f383 8811 	msr	BASEPRI, r3
 8008b2c:	f3bf 8f6f 	isb	sy
 8008b30:	f3bf 8f4f 	dsb	sy
 8008b34:	60fa      	str	r2, [r7, #12]
 8008b36:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008b38:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008b3a:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8008b3c:	69fb      	ldr	r3, [r7, #28]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	617b      	str	r3, [r7, #20]
 8008b42:	69bb      	ldr	r3, [r7, #24]
 8008b44:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008b4c:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8008b4e:	697b      	ldr	r3, [r7, #20]
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3724      	adds	r7, #36	; 0x24
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr

08008b5c <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b08e      	sub	sp, #56	; 0x38
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8008b66:	2300      	movs	r3, #0
 8008b68:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d10a      	bne.n	8008b8e <xEventGroupSetBits+0x32>
	__asm volatile
 8008b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b7c:	f383 8811 	msr	BASEPRI, r3
 8008b80:	f3bf 8f6f 	isb	sy
 8008b84:	f3bf 8f4f 	dsb	sy
 8008b88:	613b      	str	r3, [r7, #16]
}
 8008b8a:	bf00      	nop
 8008b8c:	e7fe      	b.n	8008b8c <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d00a      	beq.n	8008bae <xEventGroupSetBits+0x52>
	__asm volatile
 8008b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b9c:	f383 8811 	msr	BASEPRI, r3
 8008ba0:	f3bf 8f6f 	isb	sy
 8008ba4:	f3bf 8f4f 	dsb	sy
 8008ba8:	60fb      	str	r3, [r7, #12]
}
 8008baa:	bf00      	nop
 8008bac:	e7fe      	b.n	8008bac <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8008bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb0:	3304      	adds	r3, #4
 8008bb2:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb6:	3308      	adds	r3, #8
 8008bb8:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8008bba:	f001 f815 	bl	8009be8 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8008bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc0:	68db      	ldr	r3, [r3, #12]
 8008bc2:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8008bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc6:	681a      	ldr	r2, [r3, #0]
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	431a      	orrs	r2, r3
 8008bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bce:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8008bd0:	e03c      	b.n	8008c4c <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8008bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8008bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8008bde:	2300      	movs	r3, #0
 8008be0:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8008be2:	69bb      	ldr	r3, [r7, #24]
 8008be4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008be8:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8008bea:	69bb      	ldr	r3, [r7, #24]
 8008bec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008bf0:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d108      	bne.n	8008c0e <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8008bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bfe:	681a      	ldr	r2, [r3, #0]
 8008c00:	69bb      	ldr	r3, [r7, #24]
 8008c02:	4013      	ands	r3, r2
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d00b      	beq.n	8008c20 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c0c:	e008      	b.n	8008c20 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8008c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c10:	681a      	ldr	r2, [r3, #0]
 8008c12:	69bb      	ldr	r3, [r7, #24]
 8008c14:	4013      	ands	r3, r2
 8008c16:	69ba      	ldr	r2, [r7, #24]
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d101      	bne.n	8008c20 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8008c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d010      	beq.n	8008c48 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d003      	beq.n	8008c38 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8008c30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c32:	69bb      	ldr	r3, [r7, #24]
 8008c34:	4313      	orrs	r3, r2
 8008c36:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8008c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008c40:	4619      	mov	r1, r3
 8008c42:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008c44:	f001 fa56 	bl	800a0f4 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8008c48:	69fb      	ldr	r3, [r7, #28]
 8008c4a:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8008c4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c4e:	6a3b      	ldr	r3, [r7, #32]
 8008c50:	429a      	cmp	r2, r3
 8008c52:	d1be      	bne.n	8008bd2 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8008c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c56:	681a      	ldr	r2, [r3, #0]
 8008c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c5a:	43db      	mvns	r3, r3
 8008c5c:	401a      	ands	r2, r3
 8008c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c60:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8008c62:	f000 ffcf 	bl	8009c04 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8008c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c68:	681b      	ldr	r3, [r3, #0]
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3738      	adds	r7, #56	; 0x38
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}

08008c72 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008c72:	b480      	push	{r7}
 8008c74:	b083      	sub	sp, #12
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f103 0208 	add.w	r2, r3, #8
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f04f 32ff 	mov.w	r2, #4294967295
 8008c8a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f103 0208 	add.w	r2, r3, #8
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f103 0208 	add.w	r2, r3, #8
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008ca6:	bf00      	nop
 8008ca8:	370c      	adds	r7, #12
 8008caa:	46bd      	mov	sp, r7
 8008cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb0:	4770      	bx	lr

08008cb2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008cb2:	b480      	push	{r7}
 8008cb4:	b083      	sub	sp, #12
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008cc0:	bf00      	nop
 8008cc2:	370c      	adds	r7, #12
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr

08008ccc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b085      	sub	sp, #20
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	68fa      	ldr	r2, [r7, #12]
 8008ce0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	689a      	ldr	r2, [r3, #8]
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	689b      	ldr	r3, [r3, #8]
 8008cee:	683a      	ldr	r2, [r7, #0]
 8008cf0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	683a      	ldr	r2, [r7, #0]
 8008cf6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	687a      	ldr	r2, [r7, #4]
 8008cfc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	1c5a      	adds	r2, r3, #1
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	601a      	str	r2, [r3, #0]
}
 8008d08:	bf00      	nop
 8008d0a:	3714      	adds	r7, #20
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr

08008d14 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008d14:	b480      	push	{r7}
 8008d16:	b085      	sub	sp, #20
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d2a:	d103      	bne.n	8008d34 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	691b      	ldr	r3, [r3, #16]
 8008d30:	60fb      	str	r3, [r7, #12]
 8008d32:	e00c      	b.n	8008d4e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	3308      	adds	r3, #8
 8008d38:	60fb      	str	r3, [r7, #12]
 8008d3a:	e002      	b.n	8008d42 <vListInsert+0x2e>
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	60fb      	str	r3, [r7, #12]
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	685b      	ldr	r3, [r3, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	68ba      	ldr	r2, [r7, #8]
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	d2f6      	bcs.n	8008d3c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	685a      	ldr	r2, [r3, #4]
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	683a      	ldr	r2, [r7, #0]
 8008d5c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	68fa      	ldr	r2, [r7, #12]
 8008d62:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	683a      	ldr	r2, [r7, #0]
 8008d68:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	1c5a      	adds	r2, r3, #1
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	601a      	str	r2, [r3, #0]
}
 8008d7a:	bf00      	nop
 8008d7c:	3714      	adds	r7, #20
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr

08008d86 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008d86:	b480      	push	{r7}
 8008d88:	b085      	sub	sp, #20
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	691b      	ldr	r3, [r3, #16]
 8008d92:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	6892      	ldr	r2, [r2, #8]
 8008d9c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	689b      	ldr	r3, [r3, #8]
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	6852      	ldr	r2, [r2, #4]
 8008da6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	687a      	ldr	r2, [r7, #4]
 8008dae:	429a      	cmp	r2, r3
 8008db0:	d103      	bne.n	8008dba <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	689a      	ldr	r2, [r3, #8]
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	1e5a      	subs	r2, r3, #1
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3714      	adds	r7, #20
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd8:	4770      	bx	lr
	...

08008ddc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b084      	sub	sp, #16
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d10a      	bne.n	8008e06 <xQueueGenericReset+0x2a>
	__asm volatile
 8008df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df4:	f383 8811 	msr	BASEPRI, r3
 8008df8:	f3bf 8f6f 	isb	sy
 8008dfc:	f3bf 8f4f 	dsb	sy
 8008e00:	60bb      	str	r3, [r7, #8]
}
 8008e02:	bf00      	nop
 8008e04:	e7fe      	b.n	8008e04 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008e06:	f002 f8d5 	bl	800afb4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e12:	68f9      	ldr	r1, [r7, #12]
 8008e14:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008e16:	fb01 f303 	mul.w	r3, r1, r3
 8008e1a:	441a      	add	r2, r3
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2200      	movs	r2, #0
 8008e24:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681a      	ldr	r2, [r3, #0]
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681a      	ldr	r2, [r3, #0]
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e36:	3b01      	subs	r3, #1
 8008e38:	68f9      	ldr	r1, [r7, #12]
 8008e3a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008e3c:	fb01 f303 	mul.w	r3, r1, r3
 8008e40:	441a      	add	r2, r3
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	22ff      	movs	r2, #255	; 0xff
 8008e4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	22ff      	movs	r2, #255	; 0xff
 8008e52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d114      	bne.n	8008e86 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	691b      	ldr	r3, [r3, #16]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d01a      	beq.n	8008e9a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	3310      	adds	r3, #16
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f001 f8e1 	bl	800a030 <xTaskRemoveFromEventList>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d012      	beq.n	8008e9a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008e74:	4b0c      	ldr	r3, [pc, #48]	; (8008ea8 <xQueueGenericReset+0xcc>)
 8008e76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e7a:	601a      	str	r2, [r3, #0]
 8008e7c:	f3bf 8f4f 	dsb	sy
 8008e80:	f3bf 8f6f 	isb	sy
 8008e84:	e009      	b.n	8008e9a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	3310      	adds	r3, #16
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f7ff fef1 	bl	8008c72 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	3324      	adds	r3, #36	; 0x24
 8008e94:	4618      	mov	r0, r3
 8008e96:	f7ff feec 	bl	8008c72 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008e9a:	f002 f8bb 	bl	800b014 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008e9e:	2301      	movs	r3, #1
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3710      	adds	r7, #16
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}
 8008ea8:	e000ed04 	.word	0xe000ed04

08008eac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b08e      	sub	sp, #56	; 0x38
 8008eb0:	af02      	add	r7, sp, #8
 8008eb2:	60f8      	str	r0, [r7, #12]
 8008eb4:	60b9      	str	r1, [r7, #8]
 8008eb6:	607a      	str	r2, [r7, #4]
 8008eb8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d10a      	bne.n	8008ed6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec4:	f383 8811 	msr	BASEPRI, r3
 8008ec8:	f3bf 8f6f 	isb	sy
 8008ecc:	f3bf 8f4f 	dsb	sy
 8008ed0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008ed2:	bf00      	nop
 8008ed4:	e7fe      	b.n	8008ed4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d10a      	bne.n	8008ef2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee0:	f383 8811 	msr	BASEPRI, r3
 8008ee4:	f3bf 8f6f 	isb	sy
 8008ee8:	f3bf 8f4f 	dsb	sy
 8008eec:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008eee:	bf00      	nop
 8008ef0:	e7fe      	b.n	8008ef0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d002      	beq.n	8008efe <xQueueGenericCreateStatic+0x52>
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d001      	beq.n	8008f02 <xQueueGenericCreateStatic+0x56>
 8008efe:	2301      	movs	r3, #1
 8008f00:	e000      	b.n	8008f04 <xQueueGenericCreateStatic+0x58>
 8008f02:	2300      	movs	r3, #0
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d10a      	bne.n	8008f1e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f0c:	f383 8811 	msr	BASEPRI, r3
 8008f10:	f3bf 8f6f 	isb	sy
 8008f14:	f3bf 8f4f 	dsb	sy
 8008f18:	623b      	str	r3, [r7, #32]
}
 8008f1a:	bf00      	nop
 8008f1c:	e7fe      	b.n	8008f1c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d102      	bne.n	8008f2a <xQueueGenericCreateStatic+0x7e>
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d101      	bne.n	8008f2e <xQueueGenericCreateStatic+0x82>
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	e000      	b.n	8008f30 <xQueueGenericCreateStatic+0x84>
 8008f2e:	2300      	movs	r3, #0
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d10a      	bne.n	8008f4a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f38:	f383 8811 	msr	BASEPRI, r3
 8008f3c:	f3bf 8f6f 	isb	sy
 8008f40:	f3bf 8f4f 	dsb	sy
 8008f44:	61fb      	str	r3, [r7, #28]
}
 8008f46:	bf00      	nop
 8008f48:	e7fe      	b.n	8008f48 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008f4a:	2348      	movs	r3, #72	; 0x48
 8008f4c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	2b48      	cmp	r3, #72	; 0x48
 8008f52:	d00a      	beq.n	8008f6a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f58:	f383 8811 	msr	BASEPRI, r3
 8008f5c:	f3bf 8f6f 	isb	sy
 8008f60:	f3bf 8f4f 	dsb	sy
 8008f64:	61bb      	str	r3, [r7, #24]
}
 8008f66:	bf00      	nop
 8008f68:	e7fe      	b.n	8008f68 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d00d      	beq.n	8008f90 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f76:	2201      	movs	r2, #1
 8008f78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008f7c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f82:	9300      	str	r3, [sp, #0]
 8008f84:	4613      	mov	r3, r2
 8008f86:	687a      	ldr	r2, [r7, #4]
 8008f88:	68b9      	ldr	r1, [r7, #8]
 8008f8a:	68f8      	ldr	r0, [r7, #12]
 8008f8c:	f000 f805 	bl	8008f9a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3730      	adds	r7, #48	; 0x30
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}

08008f9a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008f9a:	b580      	push	{r7, lr}
 8008f9c:	b084      	sub	sp, #16
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	60f8      	str	r0, [r7, #12]
 8008fa2:	60b9      	str	r1, [r7, #8]
 8008fa4:	607a      	str	r2, [r7, #4]
 8008fa6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d103      	bne.n	8008fb6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008fae:	69bb      	ldr	r3, [r7, #24]
 8008fb0:	69ba      	ldr	r2, [r7, #24]
 8008fb2:	601a      	str	r2, [r3, #0]
 8008fb4:	e002      	b.n	8008fbc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008fb6:	69bb      	ldr	r3, [r7, #24]
 8008fb8:	687a      	ldr	r2, [r7, #4]
 8008fba:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008fbc:	69bb      	ldr	r3, [r7, #24]
 8008fbe:	68fa      	ldr	r2, [r7, #12]
 8008fc0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008fc2:	69bb      	ldr	r3, [r7, #24]
 8008fc4:	68ba      	ldr	r2, [r7, #8]
 8008fc6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008fc8:	2101      	movs	r1, #1
 8008fca:	69b8      	ldr	r0, [r7, #24]
 8008fcc:	f7ff ff06 	bl	8008ddc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008fd0:	bf00      	nop
 8008fd2:	3710      	adds	r7, #16
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b08e      	sub	sp, #56	; 0x38
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	60f8      	str	r0, [r7, #12]
 8008fe0:	60b9      	str	r1, [r7, #8]
 8008fe2:	607a      	str	r2, [r7, #4]
 8008fe4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d10a      	bne.n	800900a <xQueueGenericSend+0x32>
	__asm volatile
 8008ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff8:	f383 8811 	msr	BASEPRI, r3
 8008ffc:	f3bf 8f6f 	isb	sy
 8009000:	f3bf 8f4f 	dsb	sy
 8009004:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009006:	bf00      	nop
 8009008:	e7fe      	b.n	8009008 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d103      	bne.n	8009018 <xQueueGenericSend+0x40>
 8009010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009014:	2b00      	cmp	r3, #0
 8009016:	d101      	bne.n	800901c <xQueueGenericSend+0x44>
 8009018:	2301      	movs	r3, #1
 800901a:	e000      	b.n	800901e <xQueueGenericSend+0x46>
 800901c:	2300      	movs	r3, #0
 800901e:	2b00      	cmp	r3, #0
 8009020:	d10a      	bne.n	8009038 <xQueueGenericSend+0x60>
	__asm volatile
 8009022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009026:	f383 8811 	msr	BASEPRI, r3
 800902a:	f3bf 8f6f 	isb	sy
 800902e:	f3bf 8f4f 	dsb	sy
 8009032:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009034:	bf00      	nop
 8009036:	e7fe      	b.n	8009036 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	2b02      	cmp	r3, #2
 800903c:	d103      	bne.n	8009046 <xQueueGenericSend+0x6e>
 800903e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009042:	2b01      	cmp	r3, #1
 8009044:	d101      	bne.n	800904a <xQueueGenericSend+0x72>
 8009046:	2301      	movs	r3, #1
 8009048:	e000      	b.n	800904c <xQueueGenericSend+0x74>
 800904a:	2300      	movs	r3, #0
 800904c:	2b00      	cmp	r3, #0
 800904e:	d10a      	bne.n	8009066 <xQueueGenericSend+0x8e>
	__asm volatile
 8009050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009054:	f383 8811 	msr	BASEPRI, r3
 8009058:	f3bf 8f6f 	isb	sy
 800905c:	f3bf 8f4f 	dsb	sy
 8009060:	623b      	str	r3, [r7, #32]
}
 8009062:	bf00      	nop
 8009064:	e7fe      	b.n	8009064 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009066:	f001 fa07 	bl	800a478 <xTaskGetSchedulerState>
 800906a:	4603      	mov	r3, r0
 800906c:	2b00      	cmp	r3, #0
 800906e:	d102      	bne.n	8009076 <xQueueGenericSend+0x9e>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d101      	bne.n	800907a <xQueueGenericSend+0xa2>
 8009076:	2301      	movs	r3, #1
 8009078:	e000      	b.n	800907c <xQueueGenericSend+0xa4>
 800907a:	2300      	movs	r3, #0
 800907c:	2b00      	cmp	r3, #0
 800907e:	d10a      	bne.n	8009096 <xQueueGenericSend+0xbe>
	__asm volatile
 8009080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009084:	f383 8811 	msr	BASEPRI, r3
 8009088:	f3bf 8f6f 	isb	sy
 800908c:	f3bf 8f4f 	dsb	sy
 8009090:	61fb      	str	r3, [r7, #28]
}
 8009092:	bf00      	nop
 8009094:	e7fe      	b.n	8009094 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009096:	f001 ff8d 	bl	800afb4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800909a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800909c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800909e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090a2:	429a      	cmp	r2, r3
 80090a4:	d302      	bcc.n	80090ac <xQueueGenericSend+0xd4>
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	2b02      	cmp	r3, #2
 80090aa:	d129      	bne.n	8009100 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80090ac:	683a      	ldr	r2, [r7, #0]
 80090ae:	68b9      	ldr	r1, [r7, #8]
 80090b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090b2:	f000 fa07 	bl	80094c4 <prvCopyDataToQueue>
 80090b6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80090b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d010      	beq.n	80090e2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80090c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c2:	3324      	adds	r3, #36	; 0x24
 80090c4:	4618      	mov	r0, r3
 80090c6:	f000 ffb3 	bl	800a030 <xTaskRemoveFromEventList>
 80090ca:	4603      	mov	r3, r0
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d013      	beq.n	80090f8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80090d0:	4b3f      	ldr	r3, [pc, #252]	; (80091d0 <xQueueGenericSend+0x1f8>)
 80090d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090d6:	601a      	str	r2, [r3, #0]
 80090d8:	f3bf 8f4f 	dsb	sy
 80090dc:	f3bf 8f6f 	isb	sy
 80090e0:	e00a      	b.n	80090f8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80090e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d007      	beq.n	80090f8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80090e8:	4b39      	ldr	r3, [pc, #228]	; (80091d0 <xQueueGenericSend+0x1f8>)
 80090ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090ee:	601a      	str	r2, [r3, #0]
 80090f0:	f3bf 8f4f 	dsb	sy
 80090f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80090f8:	f001 ff8c 	bl	800b014 <vPortExitCritical>
				return pdPASS;
 80090fc:	2301      	movs	r3, #1
 80090fe:	e063      	b.n	80091c8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d103      	bne.n	800910e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009106:	f001 ff85 	bl	800b014 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800910a:	2300      	movs	r3, #0
 800910c:	e05c      	b.n	80091c8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800910e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009110:	2b00      	cmp	r3, #0
 8009112:	d106      	bne.n	8009122 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009114:	f107 0314 	add.w	r3, r7, #20
 8009118:	4618      	mov	r0, r3
 800911a:	f001 f84d 	bl	800a1b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800911e:	2301      	movs	r3, #1
 8009120:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009122:	f001 ff77 	bl	800b014 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009126:	f000 fd5f 	bl	8009be8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800912a:	f001 ff43 	bl	800afb4 <vPortEnterCritical>
 800912e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009130:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009134:	b25b      	sxtb	r3, r3
 8009136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800913a:	d103      	bne.n	8009144 <xQueueGenericSend+0x16c>
 800913c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800913e:	2200      	movs	r2, #0
 8009140:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009146:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800914a:	b25b      	sxtb	r3, r3
 800914c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009150:	d103      	bne.n	800915a <xQueueGenericSend+0x182>
 8009152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009154:	2200      	movs	r2, #0
 8009156:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800915a:	f001 ff5b 	bl	800b014 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800915e:	1d3a      	adds	r2, r7, #4
 8009160:	f107 0314 	add.w	r3, r7, #20
 8009164:	4611      	mov	r1, r2
 8009166:	4618      	mov	r0, r3
 8009168:	f001 f83c 	bl	800a1e4 <xTaskCheckForTimeOut>
 800916c:	4603      	mov	r3, r0
 800916e:	2b00      	cmp	r3, #0
 8009170:	d124      	bne.n	80091bc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009172:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009174:	f000 fa9e 	bl	80096b4 <prvIsQueueFull>
 8009178:	4603      	mov	r3, r0
 800917a:	2b00      	cmp	r3, #0
 800917c:	d018      	beq.n	80091b0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800917e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009180:	3310      	adds	r3, #16
 8009182:	687a      	ldr	r2, [r7, #4]
 8009184:	4611      	mov	r1, r2
 8009186:	4618      	mov	r0, r3
 8009188:	f000 ff02 	bl	8009f90 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800918c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800918e:	f000 fa29 	bl	80095e4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009192:	f000 fd37 	bl	8009c04 <xTaskResumeAll>
 8009196:	4603      	mov	r3, r0
 8009198:	2b00      	cmp	r3, #0
 800919a:	f47f af7c 	bne.w	8009096 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800919e:	4b0c      	ldr	r3, [pc, #48]	; (80091d0 <xQueueGenericSend+0x1f8>)
 80091a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091a4:	601a      	str	r2, [r3, #0]
 80091a6:	f3bf 8f4f 	dsb	sy
 80091aa:	f3bf 8f6f 	isb	sy
 80091ae:	e772      	b.n	8009096 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80091b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091b2:	f000 fa17 	bl	80095e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80091b6:	f000 fd25 	bl	8009c04 <xTaskResumeAll>
 80091ba:	e76c      	b.n	8009096 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80091bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091be:	f000 fa11 	bl	80095e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80091c2:	f000 fd1f 	bl	8009c04 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80091c6:	2300      	movs	r3, #0
		}
	}
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3738      	adds	r7, #56	; 0x38
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}
 80091d0:	e000ed04 	.word	0xe000ed04

080091d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b08e      	sub	sp, #56	; 0x38
 80091d8:	af00      	add	r7, sp, #0
 80091da:	60f8      	str	r0, [r7, #12]
 80091dc:	60b9      	str	r1, [r7, #8]
 80091de:	607a      	str	r2, [r7, #4]
 80091e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80091e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d10a      	bne.n	8009202 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80091ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f0:	f383 8811 	msr	BASEPRI, r3
 80091f4:	f3bf 8f6f 	isb	sy
 80091f8:	f3bf 8f4f 	dsb	sy
 80091fc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80091fe:	bf00      	nop
 8009200:	e7fe      	b.n	8009200 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d103      	bne.n	8009210 <xQueueGenericSendFromISR+0x3c>
 8009208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800920a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800920c:	2b00      	cmp	r3, #0
 800920e:	d101      	bne.n	8009214 <xQueueGenericSendFromISR+0x40>
 8009210:	2301      	movs	r3, #1
 8009212:	e000      	b.n	8009216 <xQueueGenericSendFromISR+0x42>
 8009214:	2300      	movs	r3, #0
 8009216:	2b00      	cmp	r3, #0
 8009218:	d10a      	bne.n	8009230 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800921a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800921e:	f383 8811 	msr	BASEPRI, r3
 8009222:	f3bf 8f6f 	isb	sy
 8009226:	f3bf 8f4f 	dsb	sy
 800922a:	623b      	str	r3, [r7, #32]
}
 800922c:	bf00      	nop
 800922e:	e7fe      	b.n	800922e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	2b02      	cmp	r3, #2
 8009234:	d103      	bne.n	800923e <xQueueGenericSendFromISR+0x6a>
 8009236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800923a:	2b01      	cmp	r3, #1
 800923c:	d101      	bne.n	8009242 <xQueueGenericSendFromISR+0x6e>
 800923e:	2301      	movs	r3, #1
 8009240:	e000      	b.n	8009244 <xQueueGenericSendFromISR+0x70>
 8009242:	2300      	movs	r3, #0
 8009244:	2b00      	cmp	r3, #0
 8009246:	d10a      	bne.n	800925e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800924c:	f383 8811 	msr	BASEPRI, r3
 8009250:	f3bf 8f6f 	isb	sy
 8009254:	f3bf 8f4f 	dsb	sy
 8009258:	61fb      	str	r3, [r7, #28]
}
 800925a:	bf00      	nop
 800925c:	e7fe      	b.n	800925c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800925e:	f001 ff8b 	bl	800b178 <vPortValidateInterruptPriority>
	__asm volatile
 8009262:	f3ef 8211 	mrs	r2, BASEPRI
 8009266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800926a:	f383 8811 	msr	BASEPRI, r3
 800926e:	f3bf 8f6f 	isb	sy
 8009272:	f3bf 8f4f 	dsb	sy
 8009276:	61ba      	str	r2, [r7, #24]
 8009278:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800927a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800927c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800927e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009280:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009286:	429a      	cmp	r2, r3
 8009288:	d302      	bcc.n	8009290 <xQueueGenericSendFromISR+0xbc>
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	2b02      	cmp	r3, #2
 800928e:	d12c      	bne.n	80092ea <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009292:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009296:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800929a:	683a      	ldr	r2, [r7, #0]
 800929c:	68b9      	ldr	r1, [r7, #8]
 800929e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80092a0:	f000 f910 	bl	80094c4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80092a4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80092a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092ac:	d112      	bne.n	80092d4 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80092ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d016      	beq.n	80092e4 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80092b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b8:	3324      	adds	r3, #36	; 0x24
 80092ba:	4618      	mov	r0, r3
 80092bc:	f000 feb8 	bl	800a030 <xTaskRemoveFromEventList>
 80092c0:	4603      	mov	r3, r0
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d00e      	beq.n	80092e4 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d00b      	beq.n	80092e4 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2201      	movs	r2, #1
 80092d0:	601a      	str	r2, [r3, #0]
 80092d2:	e007      	b.n	80092e4 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80092d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80092d8:	3301      	adds	r3, #1
 80092da:	b2db      	uxtb	r3, r3
 80092dc:	b25a      	sxtb	r2, r3
 80092de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80092e4:	2301      	movs	r3, #1
 80092e6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80092e8:	e001      	b.n	80092ee <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80092ea:	2300      	movs	r3, #0
 80092ec:	637b      	str	r3, [r7, #52]	; 0x34
 80092ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092f0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	f383 8811 	msr	BASEPRI, r3
}
 80092f8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80092fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3738      	adds	r7, #56	; 0x38
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}

08009304 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b08c      	sub	sp, #48	; 0x30
 8009308:	af00      	add	r7, sp, #0
 800930a:	60f8      	str	r0, [r7, #12]
 800930c:	60b9      	str	r1, [r7, #8]
 800930e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009310:	2300      	movs	r3, #0
 8009312:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800931a:	2b00      	cmp	r3, #0
 800931c:	d10a      	bne.n	8009334 <xQueueReceive+0x30>
	__asm volatile
 800931e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009322:	f383 8811 	msr	BASEPRI, r3
 8009326:	f3bf 8f6f 	isb	sy
 800932a:	f3bf 8f4f 	dsb	sy
 800932e:	623b      	str	r3, [r7, #32]
}
 8009330:	bf00      	nop
 8009332:	e7fe      	b.n	8009332 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d103      	bne.n	8009342 <xQueueReceive+0x3e>
 800933a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800933c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800933e:	2b00      	cmp	r3, #0
 8009340:	d101      	bne.n	8009346 <xQueueReceive+0x42>
 8009342:	2301      	movs	r3, #1
 8009344:	e000      	b.n	8009348 <xQueueReceive+0x44>
 8009346:	2300      	movs	r3, #0
 8009348:	2b00      	cmp	r3, #0
 800934a:	d10a      	bne.n	8009362 <xQueueReceive+0x5e>
	__asm volatile
 800934c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009350:	f383 8811 	msr	BASEPRI, r3
 8009354:	f3bf 8f6f 	isb	sy
 8009358:	f3bf 8f4f 	dsb	sy
 800935c:	61fb      	str	r3, [r7, #28]
}
 800935e:	bf00      	nop
 8009360:	e7fe      	b.n	8009360 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009362:	f001 f889 	bl	800a478 <xTaskGetSchedulerState>
 8009366:	4603      	mov	r3, r0
 8009368:	2b00      	cmp	r3, #0
 800936a:	d102      	bne.n	8009372 <xQueueReceive+0x6e>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d101      	bne.n	8009376 <xQueueReceive+0x72>
 8009372:	2301      	movs	r3, #1
 8009374:	e000      	b.n	8009378 <xQueueReceive+0x74>
 8009376:	2300      	movs	r3, #0
 8009378:	2b00      	cmp	r3, #0
 800937a:	d10a      	bne.n	8009392 <xQueueReceive+0x8e>
	__asm volatile
 800937c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009380:	f383 8811 	msr	BASEPRI, r3
 8009384:	f3bf 8f6f 	isb	sy
 8009388:	f3bf 8f4f 	dsb	sy
 800938c:	61bb      	str	r3, [r7, #24]
}
 800938e:	bf00      	nop
 8009390:	e7fe      	b.n	8009390 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8009392:	f001 fe0f 	bl	800afb4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800939a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800939c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d01f      	beq.n	80093e2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80093a2:	68b9      	ldr	r1, [r7, #8]
 80093a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093a6:	f000 f8f7 	bl	8009598 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80093aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ac:	1e5a      	subs	r2, r3, #1
 80093ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80093b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b4:	691b      	ldr	r3, [r3, #16]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d00f      	beq.n	80093da <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80093ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093bc:	3310      	adds	r3, #16
 80093be:	4618      	mov	r0, r3
 80093c0:	f000 fe36 	bl	800a030 <xTaskRemoveFromEventList>
 80093c4:	4603      	mov	r3, r0
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d007      	beq.n	80093da <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80093ca:	4b3d      	ldr	r3, [pc, #244]	; (80094c0 <xQueueReceive+0x1bc>)
 80093cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093d0:	601a      	str	r2, [r3, #0]
 80093d2:	f3bf 8f4f 	dsb	sy
 80093d6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80093da:	f001 fe1b 	bl	800b014 <vPortExitCritical>
				return pdPASS;
 80093de:	2301      	movs	r3, #1
 80093e0:	e069      	b.n	80094b6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d103      	bne.n	80093f0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80093e8:	f001 fe14 	bl	800b014 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80093ec:	2300      	movs	r3, #0
 80093ee:	e062      	b.n	80094b6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80093f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d106      	bne.n	8009404 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80093f6:	f107 0310 	add.w	r3, r7, #16
 80093fa:	4618      	mov	r0, r3
 80093fc:	f000 fedc 	bl	800a1b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009400:	2301      	movs	r3, #1
 8009402:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009404:	f001 fe06 	bl	800b014 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009408:	f000 fbee 	bl	8009be8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800940c:	f001 fdd2 	bl	800afb4 <vPortEnterCritical>
 8009410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009412:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009416:	b25b      	sxtb	r3, r3
 8009418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800941c:	d103      	bne.n	8009426 <xQueueReceive+0x122>
 800941e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009420:	2200      	movs	r2, #0
 8009422:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009428:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800942c:	b25b      	sxtb	r3, r3
 800942e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009432:	d103      	bne.n	800943c <xQueueReceive+0x138>
 8009434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009436:	2200      	movs	r2, #0
 8009438:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800943c:	f001 fdea 	bl	800b014 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009440:	1d3a      	adds	r2, r7, #4
 8009442:	f107 0310 	add.w	r3, r7, #16
 8009446:	4611      	mov	r1, r2
 8009448:	4618      	mov	r0, r3
 800944a:	f000 fecb 	bl	800a1e4 <xTaskCheckForTimeOut>
 800944e:	4603      	mov	r3, r0
 8009450:	2b00      	cmp	r3, #0
 8009452:	d123      	bne.n	800949c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009454:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009456:	f000 f917 	bl	8009688 <prvIsQueueEmpty>
 800945a:	4603      	mov	r3, r0
 800945c:	2b00      	cmp	r3, #0
 800945e:	d017      	beq.n	8009490 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009462:	3324      	adds	r3, #36	; 0x24
 8009464:	687a      	ldr	r2, [r7, #4]
 8009466:	4611      	mov	r1, r2
 8009468:	4618      	mov	r0, r3
 800946a:	f000 fd91 	bl	8009f90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800946e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009470:	f000 f8b8 	bl	80095e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009474:	f000 fbc6 	bl	8009c04 <xTaskResumeAll>
 8009478:	4603      	mov	r3, r0
 800947a:	2b00      	cmp	r3, #0
 800947c:	d189      	bne.n	8009392 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800947e:	4b10      	ldr	r3, [pc, #64]	; (80094c0 <xQueueReceive+0x1bc>)
 8009480:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009484:	601a      	str	r2, [r3, #0]
 8009486:	f3bf 8f4f 	dsb	sy
 800948a:	f3bf 8f6f 	isb	sy
 800948e:	e780      	b.n	8009392 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009490:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009492:	f000 f8a7 	bl	80095e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009496:	f000 fbb5 	bl	8009c04 <xTaskResumeAll>
 800949a:	e77a      	b.n	8009392 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800949c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800949e:	f000 f8a1 	bl	80095e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80094a2:	f000 fbaf 	bl	8009c04 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80094a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094a8:	f000 f8ee 	bl	8009688 <prvIsQueueEmpty>
 80094ac:	4603      	mov	r3, r0
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	f43f af6f 	beq.w	8009392 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80094b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3730      	adds	r7, #48	; 0x30
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}
 80094be:	bf00      	nop
 80094c0:	e000ed04 	.word	0xe000ed04

080094c4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b086      	sub	sp, #24
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	60f8      	str	r0, [r7, #12]
 80094cc:	60b9      	str	r1, [r7, #8]
 80094ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80094d0:	2300      	movs	r3, #0
 80094d2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094d8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d10d      	bne.n	80094fe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d14d      	bne.n	8009586 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	685b      	ldr	r3, [r3, #4]
 80094ee:	4618      	mov	r0, r3
 80094f0:	f000 ffe0 	bl	800a4b4 <xTaskPriorityDisinherit>
 80094f4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2200      	movs	r2, #0
 80094fa:	605a      	str	r2, [r3, #4]
 80094fc:	e043      	b.n	8009586 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d119      	bne.n	8009538 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	6898      	ldr	r0, [r3, #8]
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800950c:	461a      	mov	r2, r3
 800950e:	68b9      	ldr	r1, [r7, #8]
 8009510:	f002 fe44 	bl	800c19c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	689a      	ldr	r2, [r3, #8]
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800951c:	441a      	add	r2, r3
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	689a      	ldr	r2, [r3, #8]
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	685b      	ldr	r3, [r3, #4]
 800952a:	429a      	cmp	r2, r3
 800952c:	d32b      	bcc.n	8009586 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681a      	ldr	r2, [r3, #0]
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	609a      	str	r2, [r3, #8]
 8009536:	e026      	b.n	8009586 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	68d8      	ldr	r0, [r3, #12]
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009540:	461a      	mov	r2, r3
 8009542:	68b9      	ldr	r1, [r7, #8]
 8009544:	f002 fe2a 	bl	800c19c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	68da      	ldr	r2, [r3, #12]
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009550:	425b      	negs	r3, r3
 8009552:	441a      	add	r2, r3
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	68da      	ldr	r2, [r3, #12]
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	429a      	cmp	r2, r3
 8009562:	d207      	bcs.n	8009574 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	685a      	ldr	r2, [r3, #4]
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800956c:	425b      	negs	r3, r3
 800956e:	441a      	add	r2, r3
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2b02      	cmp	r3, #2
 8009578:	d105      	bne.n	8009586 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d002      	beq.n	8009586 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	3b01      	subs	r3, #1
 8009584:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	1c5a      	adds	r2, r3, #1
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800958e:	697b      	ldr	r3, [r7, #20]
}
 8009590:	4618      	mov	r0, r3
 8009592:	3718      	adds	r7, #24
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}

08009598 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b082      	sub	sp, #8
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
 80095a0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d018      	beq.n	80095dc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	68da      	ldr	r2, [r3, #12]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095b2:	441a      	add	r2, r3
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	68da      	ldr	r2, [r3, #12]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	685b      	ldr	r3, [r3, #4]
 80095c0:	429a      	cmp	r2, r3
 80095c2:	d303      	bcc.n	80095cc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681a      	ldr	r2, [r3, #0]
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	68d9      	ldr	r1, [r3, #12]
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095d4:	461a      	mov	r2, r3
 80095d6:	6838      	ldr	r0, [r7, #0]
 80095d8:	f002 fde0 	bl	800c19c <memcpy>
	}
}
 80095dc:	bf00      	nop
 80095de:	3708      	adds	r7, #8
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}

080095e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b084      	sub	sp, #16
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80095ec:	f001 fce2 	bl	800afb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80095f6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80095f8:	e011      	b.n	800961e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d012      	beq.n	8009628 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	3324      	adds	r3, #36	; 0x24
 8009606:	4618      	mov	r0, r3
 8009608:	f000 fd12 	bl	800a030 <xTaskRemoveFromEventList>
 800960c:	4603      	mov	r3, r0
 800960e:	2b00      	cmp	r3, #0
 8009610:	d001      	beq.n	8009616 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009612:	f000 fe49 	bl	800a2a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009616:	7bfb      	ldrb	r3, [r7, #15]
 8009618:	3b01      	subs	r3, #1
 800961a:	b2db      	uxtb	r3, r3
 800961c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800961e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009622:	2b00      	cmp	r3, #0
 8009624:	dce9      	bgt.n	80095fa <prvUnlockQueue+0x16>
 8009626:	e000      	b.n	800962a <prvUnlockQueue+0x46>
					break;
 8009628:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	22ff      	movs	r2, #255	; 0xff
 800962e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009632:	f001 fcef 	bl	800b014 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009636:	f001 fcbd 	bl	800afb4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009640:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009642:	e011      	b.n	8009668 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	691b      	ldr	r3, [r3, #16]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d012      	beq.n	8009672 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	3310      	adds	r3, #16
 8009650:	4618      	mov	r0, r3
 8009652:	f000 fced 	bl	800a030 <xTaskRemoveFromEventList>
 8009656:	4603      	mov	r3, r0
 8009658:	2b00      	cmp	r3, #0
 800965a:	d001      	beq.n	8009660 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800965c:	f000 fe24 	bl	800a2a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009660:	7bbb      	ldrb	r3, [r7, #14]
 8009662:	3b01      	subs	r3, #1
 8009664:	b2db      	uxtb	r3, r3
 8009666:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009668:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800966c:	2b00      	cmp	r3, #0
 800966e:	dce9      	bgt.n	8009644 <prvUnlockQueue+0x60>
 8009670:	e000      	b.n	8009674 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009672:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	22ff      	movs	r2, #255	; 0xff
 8009678:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800967c:	f001 fcca 	bl	800b014 <vPortExitCritical>
}
 8009680:	bf00      	nop
 8009682:	3710      	adds	r7, #16
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b084      	sub	sp, #16
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009690:	f001 fc90 	bl	800afb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009698:	2b00      	cmp	r3, #0
 800969a:	d102      	bne.n	80096a2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800969c:	2301      	movs	r3, #1
 800969e:	60fb      	str	r3, [r7, #12]
 80096a0:	e001      	b.n	80096a6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80096a2:	2300      	movs	r3, #0
 80096a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80096a6:	f001 fcb5 	bl	800b014 <vPortExitCritical>

	return xReturn;
 80096aa:	68fb      	ldr	r3, [r7, #12]
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	3710      	adds	r7, #16
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}

080096b4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b084      	sub	sp, #16
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80096bc:	f001 fc7a 	bl	800afb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096c8:	429a      	cmp	r2, r3
 80096ca:	d102      	bne.n	80096d2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80096cc:	2301      	movs	r3, #1
 80096ce:	60fb      	str	r3, [r7, #12]
 80096d0:	e001      	b.n	80096d6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80096d2:	2300      	movs	r3, #0
 80096d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80096d6:	f001 fc9d 	bl	800b014 <vPortExitCritical>

	return xReturn;
 80096da:	68fb      	ldr	r3, [r7, #12]
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3710      	adds	r7, #16
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80096e4:	b480      	push	{r7}
 80096e6:	b085      	sub	sp, #20
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80096ee:	2300      	movs	r3, #0
 80096f0:	60fb      	str	r3, [r7, #12]
 80096f2:	e014      	b.n	800971e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80096f4:	4a0f      	ldr	r2, [pc, #60]	; (8009734 <vQueueAddToRegistry+0x50>)
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d10b      	bne.n	8009718 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009700:	490c      	ldr	r1, [pc, #48]	; (8009734 <vQueueAddToRegistry+0x50>)
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	683a      	ldr	r2, [r7, #0]
 8009706:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800970a:	4a0a      	ldr	r2, [pc, #40]	; (8009734 <vQueueAddToRegistry+0x50>)
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	00db      	lsls	r3, r3, #3
 8009710:	4413      	add	r3, r2
 8009712:	687a      	ldr	r2, [r7, #4]
 8009714:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009716:	e006      	b.n	8009726 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	3301      	adds	r3, #1
 800971c:	60fb      	str	r3, [r7, #12]
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	2b07      	cmp	r3, #7
 8009722:	d9e7      	bls.n	80096f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009724:	bf00      	nop
 8009726:	bf00      	nop
 8009728:	3714      	adds	r7, #20
 800972a:	46bd      	mov	sp, r7
 800972c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009730:	4770      	bx	lr
 8009732:	bf00      	nop
 8009734:	20000fb4 	.word	0x20000fb4

08009738 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009738:	b580      	push	{r7, lr}
 800973a:	b086      	sub	sp, #24
 800973c:	af00      	add	r7, sp, #0
 800973e:	60f8      	str	r0, [r7, #12]
 8009740:	60b9      	str	r1, [r7, #8]
 8009742:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009748:	f001 fc34 	bl	800afb4 <vPortEnterCritical>
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009752:	b25b      	sxtb	r3, r3
 8009754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009758:	d103      	bne.n	8009762 <vQueueWaitForMessageRestricted+0x2a>
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	2200      	movs	r2, #0
 800975e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009768:	b25b      	sxtb	r3, r3
 800976a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800976e:	d103      	bne.n	8009778 <vQueueWaitForMessageRestricted+0x40>
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	2200      	movs	r2, #0
 8009774:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009778:	f001 fc4c 	bl	800b014 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009780:	2b00      	cmp	r3, #0
 8009782:	d106      	bne.n	8009792 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	3324      	adds	r3, #36	; 0x24
 8009788:	687a      	ldr	r2, [r7, #4]
 800978a:	68b9      	ldr	r1, [r7, #8]
 800978c:	4618      	mov	r0, r3
 800978e:	f000 fc23 	bl	8009fd8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009792:	6978      	ldr	r0, [r7, #20]
 8009794:	f7ff ff26 	bl	80095e4 <prvUnlockQueue>
	}
 8009798:	bf00      	nop
 800979a:	3718      	adds	r7, #24
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}

080097a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b08e      	sub	sp, #56	; 0x38
 80097a4:	af04      	add	r7, sp, #16
 80097a6:	60f8      	str	r0, [r7, #12]
 80097a8:	60b9      	str	r1, [r7, #8]
 80097aa:	607a      	str	r2, [r7, #4]
 80097ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80097ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d10a      	bne.n	80097ca <xTaskCreateStatic+0x2a>
	__asm volatile
 80097b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b8:	f383 8811 	msr	BASEPRI, r3
 80097bc:	f3bf 8f6f 	isb	sy
 80097c0:	f3bf 8f4f 	dsb	sy
 80097c4:	623b      	str	r3, [r7, #32]
}
 80097c6:	bf00      	nop
 80097c8:	e7fe      	b.n	80097c8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80097ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d10a      	bne.n	80097e6 <xTaskCreateStatic+0x46>
	__asm volatile
 80097d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d4:	f383 8811 	msr	BASEPRI, r3
 80097d8:	f3bf 8f6f 	isb	sy
 80097dc:	f3bf 8f4f 	dsb	sy
 80097e0:	61fb      	str	r3, [r7, #28]
}
 80097e2:	bf00      	nop
 80097e4:	e7fe      	b.n	80097e4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80097e6:	2358      	movs	r3, #88	; 0x58
 80097e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80097ea:	693b      	ldr	r3, [r7, #16]
 80097ec:	2b58      	cmp	r3, #88	; 0x58
 80097ee:	d00a      	beq.n	8009806 <xTaskCreateStatic+0x66>
	__asm volatile
 80097f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f4:	f383 8811 	msr	BASEPRI, r3
 80097f8:	f3bf 8f6f 	isb	sy
 80097fc:	f3bf 8f4f 	dsb	sy
 8009800:	61bb      	str	r3, [r7, #24]
}
 8009802:	bf00      	nop
 8009804:	e7fe      	b.n	8009804 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009808:	2b00      	cmp	r3, #0
 800980a:	d01e      	beq.n	800984a <xTaskCreateStatic+0xaa>
 800980c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800980e:	2b00      	cmp	r3, #0
 8009810:	d01b      	beq.n	800984a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009814:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009818:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800981a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800981c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800981e:	2202      	movs	r2, #2
 8009820:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009824:	2300      	movs	r3, #0
 8009826:	9303      	str	r3, [sp, #12]
 8009828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800982a:	9302      	str	r3, [sp, #8]
 800982c:	f107 0314 	add.w	r3, r7, #20
 8009830:	9301      	str	r3, [sp, #4]
 8009832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009834:	9300      	str	r3, [sp, #0]
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	687a      	ldr	r2, [r7, #4]
 800983a:	68b9      	ldr	r1, [r7, #8]
 800983c:	68f8      	ldr	r0, [r7, #12]
 800983e:	f000 f850 	bl	80098e2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009842:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009844:	f000 f8cc 	bl	80099e0 <prvAddNewTaskToReadyList>
 8009848:	e001      	b.n	800984e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800984a:	2300      	movs	r3, #0
 800984c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800984e:	697b      	ldr	r3, [r7, #20]
	}
 8009850:	4618      	mov	r0, r3
 8009852:	3728      	adds	r7, #40	; 0x28
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}

08009858 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009858:	b580      	push	{r7, lr}
 800985a:	b08c      	sub	sp, #48	; 0x30
 800985c:	af04      	add	r7, sp, #16
 800985e:	60f8      	str	r0, [r7, #12]
 8009860:	60b9      	str	r1, [r7, #8]
 8009862:	603b      	str	r3, [r7, #0]
 8009864:	4613      	mov	r3, r2
 8009866:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009868:	88fb      	ldrh	r3, [r7, #6]
 800986a:	009b      	lsls	r3, r3, #2
 800986c:	4618      	mov	r0, r3
 800986e:	f001 fcc3 	bl	800b1f8 <pvPortMalloc>
 8009872:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d00e      	beq.n	8009898 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800987a:	2058      	movs	r0, #88	; 0x58
 800987c:	f001 fcbc 	bl	800b1f8 <pvPortMalloc>
 8009880:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009882:	69fb      	ldr	r3, [r7, #28]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d003      	beq.n	8009890 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009888:	69fb      	ldr	r3, [r7, #28]
 800988a:	697a      	ldr	r2, [r7, #20]
 800988c:	631a      	str	r2, [r3, #48]	; 0x30
 800988e:	e005      	b.n	800989c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009890:	6978      	ldr	r0, [r7, #20]
 8009892:	f001 fd75 	bl	800b380 <vPortFree>
 8009896:	e001      	b.n	800989c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009898:	2300      	movs	r3, #0
 800989a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800989c:	69fb      	ldr	r3, [r7, #28]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d017      	beq.n	80098d2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80098a2:	69fb      	ldr	r3, [r7, #28]
 80098a4:	2200      	movs	r2, #0
 80098a6:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80098aa:	88fa      	ldrh	r2, [r7, #6]
 80098ac:	2300      	movs	r3, #0
 80098ae:	9303      	str	r3, [sp, #12]
 80098b0:	69fb      	ldr	r3, [r7, #28]
 80098b2:	9302      	str	r3, [sp, #8]
 80098b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098b6:	9301      	str	r3, [sp, #4]
 80098b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ba:	9300      	str	r3, [sp, #0]
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	68b9      	ldr	r1, [r7, #8]
 80098c0:	68f8      	ldr	r0, [r7, #12]
 80098c2:	f000 f80e 	bl	80098e2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80098c6:	69f8      	ldr	r0, [r7, #28]
 80098c8:	f000 f88a 	bl	80099e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80098cc:	2301      	movs	r3, #1
 80098ce:	61bb      	str	r3, [r7, #24]
 80098d0:	e002      	b.n	80098d8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80098d2:	f04f 33ff 	mov.w	r3, #4294967295
 80098d6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80098d8:	69bb      	ldr	r3, [r7, #24]
	}
 80098da:	4618      	mov	r0, r3
 80098dc:	3720      	adds	r7, #32
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}

080098e2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80098e2:	b580      	push	{r7, lr}
 80098e4:	b088      	sub	sp, #32
 80098e6:	af00      	add	r7, sp, #0
 80098e8:	60f8      	str	r0, [r7, #12]
 80098ea:	60b9      	str	r1, [r7, #8]
 80098ec:	607a      	str	r2, [r7, #4]
 80098ee:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80098f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80098fa:	3b01      	subs	r3, #1
 80098fc:	009b      	lsls	r3, r3, #2
 80098fe:	4413      	add	r3, r2
 8009900:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8009902:	69bb      	ldr	r3, [r7, #24]
 8009904:	f023 0307 	bic.w	r3, r3, #7
 8009908:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800990a:	69bb      	ldr	r3, [r7, #24]
 800990c:	f003 0307 	and.w	r3, r3, #7
 8009910:	2b00      	cmp	r3, #0
 8009912:	d00a      	beq.n	800992a <prvInitialiseNewTask+0x48>
	__asm volatile
 8009914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009918:	f383 8811 	msr	BASEPRI, r3
 800991c:	f3bf 8f6f 	isb	sy
 8009920:	f3bf 8f4f 	dsb	sy
 8009924:	617b      	str	r3, [r7, #20]
}
 8009926:	bf00      	nop
 8009928:	e7fe      	b.n	8009928 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800992a:	2300      	movs	r3, #0
 800992c:	61fb      	str	r3, [r7, #28]
 800992e:	e012      	b.n	8009956 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009930:	68ba      	ldr	r2, [r7, #8]
 8009932:	69fb      	ldr	r3, [r7, #28]
 8009934:	4413      	add	r3, r2
 8009936:	7819      	ldrb	r1, [r3, #0]
 8009938:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800993a:	69fb      	ldr	r3, [r7, #28]
 800993c:	4413      	add	r3, r2
 800993e:	3334      	adds	r3, #52	; 0x34
 8009940:	460a      	mov	r2, r1
 8009942:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8009944:	68ba      	ldr	r2, [r7, #8]
 8009946:	69fb      	ldr	r3, [r7, #28]
 8009948:	4413      	add	r3, r2
 800994a:	781b      	ldrb	r3, [r3, #0]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d006      	beq.n	800995e <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009950:	69fb      	ldr	r3, [r7, #28]
 8009952:	3301      	adds	r3, #1
 8009954:	61fb      	str	r3, [r7, #28]
 8009956:	69fb      	ldr	r3, [r7, #28]
 8009958:	2b11      	cmp	r3, #17
 800995a:	d9e9      	bls.n	8009930 <prvInitialiseNewTask+0x4e>
 800995c:	e000      	b.n	8009960 <prvInitialiseNewTask+0x7e>
		{
			break;
 800995e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009962:	2200      	movs	r2, #0
 8009964:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800996a:	2b06      	cmp	r3, #6
 800996c:	d901      	bls.n	8009972 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800996e:	2306      	movs	r3, #6
 8009970:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009974:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009976:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800997a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800997c:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 800997e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009980:	2200      	movs	r2, #0
 8009982:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009986:	3304      	adds	r3, #4
 8009988:	4618      	mov	r0, r3
 800998a:	f7ff f992 	bl	8008cb2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800998e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009990:	3318      	adds	r3, #24
 8009992:	4618      	mov	r0, r3
 8009994:	f7ff f98d 	bl	8008cb2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800999a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800999c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800999e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099a0:	f1c3 0207 	rsb	r2, r3, #7
 80099a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80099a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099ac:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80099ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b0:	2200      	movs	r2, #0
 80099b2:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80099b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b6:	2200      	movs	r2, #0
 80099b8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80099bc:	683a      	ldr	r2, [r7, #0]
 80099be:	68f9      	ldr	r1, [r7, #12]
 80099c0:	69b8      	ldr	r0, [r7, #24]
 80099c2:	f001 f9c9 	bl	800ad58 <pxPortInitialiseStack>
 80099c6:	4602      	mov	r2, r0
 80099c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ca:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80099cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d002      	beq.n	80099d8 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80099d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099d6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80099d8:	bf00      	nop
 80099da:	3720      	adds	r7, #32
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}

080099e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b082      	sub	sp, #8
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80099e8:	f001 fae4 	bl	800afb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80099ec:	4b2a      	ldr	r3, [pc, #168]	; (8009a98 <prvAddNewTaskToReadyList+0xb8>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	3301      	adds	r3, #1
 80099f2:	4a29      	ldr	r2, [pc, #164]	; (8009a98 <prvAddNewTaskToReadyList+0xb8>)
 80099f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80099f6:	4b29      	ldr	r3, [pc, #164]	; (8009a9c <prvAddNewTaskToReadyList+0xbc>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d109      	bne.n	8009a12 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80099fe:	4a27      	ldr	r2, [pc, #156]	; (8009a9c <prvAddNewTaskToReadyList+0xbc>)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009a04:	4b24      	ldr	r3, [pc, #144]	; (8009a98 <prvAddNewTaskToReadyList+0xb8>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	2b01      	cmp	r3, #1
 8009a0a:	d110      	bne.n	8009a2e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009a0c:	f000 fc70 	bl	800a2f0 <prvInitialiseTaskLists>
 8009a10:	e00d      	b.n	8009a2e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009a12:	4b23      	ldr	r3, [pc, #140]	; (8009aa0 <prvAddNewTaskToReadyList+0xc0>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d109      	bne.n	8009a2e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009a1a:	4b20      	ldr	r3, [pc, #128]	; (8009a9c <prvAddNewTaskToReadyList+0xbc>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a24:	429a      	cmp	r2, r3
 8009a26:	d802      	bhi.n	8009a2e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009a28:	4a1c      	ldr	r2, [pc, #112]	; (8009a9c <prvAddNewTaskToReadyList+0xbc>)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009a2e:	4b1d      	ldr	r3, [pc, #116]	; (8009aa4 <prvAddNewTaskToReadyList+0xc4>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	3301      	adds	r3, #1
 8009a34:	4a1b      	ldr	r2, [pc, #108]	; (8009aa4 <prvAddNewTaskToReadyList+0xc4>)
 8009a36:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a3c:	2201      	movs	r2, #1
 8009a3e:	409a      	lsls	r2, r3
 8009a40:	4b19      	ldr	r3, [pc, #100]	; (8009aa8 <prvAddNewTaskToReadyList+0xc8>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	4313      	orrs	r3, r2
 8009a46:	4a18      	ldr	r2, [pc, #96]	; (8009aa8 <prvAddNewTaskToReadyList+0xc8>)
 8009a48:	6013      	str	r3, [r2, #0]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a4e:	4613      	mov	r3, r2
 8009a50:	009b      	lsls	r3, r3, #2
 8009a52:	4413      	add	r3, r2
 8009a54:	009b      	lsls	r3, r3, #2
 8009a56:	4a15      	ldr	r2, [pc, #84]	; (8009aac <prvAddNewTaskToReadyList+0xcc>)
 8009a58:	441a      	add	r2, r3
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	3304      	adds	r3, #4
 8009a5e:	4619      	mov	r1, r3
 8009a60:	4610      	mov	r0, r2
 8009a62:	f7ff f933 	bl	8008ccc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009a66:	f001 fad5 	bl	800b014 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009a6a:	4b0d      	ldr	r3, [pc, #52]	; (8009aa0 <prvAddNewTaskToReadyList+0xc0>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d00e      	beq.n	8009a90 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009a72:	4b0a      	ldr	r3, [pc, #40]	; (8009a9c <prvAddNewTaskToReadyList+0xbc>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a7c:	429a      	cmp	r2, r3
 8009a7e:	d207      	bcs.n	8009a90 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009a80:	4b0b      	ldr	r3, [pc, #44]	; (8009ab0 <prvAddNewTaskToReadyList+0xd0>)
 8009a82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a86:	601a      	str	r2, [r3, #0]
 8009a88:	f3bf 8f4f 	dsb	sy
 8009a8c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a90:	bf00      	nop
 8009a92:	3708      	adds	r7, #8
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}
 8009a98:	200010f4 	.word	0x200010f4
 8009a9c:	20000ff4 	.word	0x20000ff4
 8009aa0:	20001100 	.word	0x20001100
 8009aa4:	20001110 	.word	0x20001110
 8009aa8:	200010fc 	.word	0x200010fc
 8009aac:	20000ff8 	.word	0x20000ff8
 8009ab0:	e000ed04 	.word	0xe000ed04

08009ab4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b084      	sub	sp, #16
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009abc:	2300      	movs	r3, #0
 8009abe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d017      	beq.n	8009af6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009ac6:	4b13      	ldr	r3, [pc, #76]	; (8009b14 <vTaskDelay+0x60>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d00a      	beq.n	8009ae4 <vTaskDelay+0x30>
	__asm volatile
 8009ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad2:	f383 8811 	msr	BASEPRI, r3
 8009ad6:	f3bf 8f6f 	isb	sy
 8009ada:	f3bf 8f4f 	dsb	sy
 8009ade:	60bb      	str	r3, [r7, #8]
}
 8009ae0:	bf00      	nop
 8009ae2:	e7fe      	b.n	8009ae2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009ae4:	f000 f880 	bl	8009be8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009ae8:	2100      	movs	r1, #0
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f000 fd68 	bl	800a5c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009af0:	f000 f888 	bl	8009c04 <xTaskResumeAll>
 8009af4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d107      	bne.n	8009b0c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009afc:	4b06      	ldr	r3, [pc, #24]	; (8009b18 <vTaskDelay+0x64>)
 8009afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b02:	601a      	str	r2, [r3, #0]
 8009b04:	f3bf 8f4f 	dsb	sy
 8009b08:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009b0c:	bf00      	nop
 8009b0e:	3710      	adds	r7, #16
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}
 8009b14:	2000111c 	.word	0x2000111c
 8009b18:	e000ed04 	.word	0xe000ed04

08009b1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b08a      	sub	sp, #40	; 0x28
 8009b20:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009b22:	2300      	movs	r3, #0
 8009b24:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009b26:	2300      	movs	r3, #0
 8009b28:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009b2a:	463a      	mov	r2, r7
 8009b2c:	1d39      	adds	r1, r7, #4
 8009b2e:	f107 0308 	add.w	r3, r7, #8
 8009b32:	4618      	mov	r0, r3
 8009b34:	f7f7 fbd8 	bl	80012e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009b38:	6839      	ldr	r1, [r7, #0]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	68ba      	ldr	r2, [r7, #8]
 8009b3e:	9202      	str	r2, [sp, #8]
 8009b40:	9301      	str	r3, [sp, #4]
 8009b42:	2300      	movs	r3, #0
 8009b44:	9300      	str	r3, [sp, #0]
 8009b46:	2300      	movs	r3, #0
 8009b48:	460a      	mov	r2, r1
 8009b4a:	4921      	ldr	r1, [pc, #132]	; (8009bd0 <vTaskStartScheduler+0xb4>)
 8009b4c:	4821      	ldr	r0, [pc, #132]	; (8009bd4 <vTaskStartScheduler+0xb8>)
 8009b4e:	f7ff fe27 	bl	80097a0 <xTaskCreateStatic>
 8009b52:	4603      	mov	r3, r0
 8009b54:	4a20      	ldr	r2, [pc, #128]	; (8009bd8 <vTaskStartScheduler+0xbc>)
 8009b56:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009b58:	4b1f      	ldr	r3, [pc, #124]	; (8009bd8 <vTaskStartScheduler+0xbc>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d002      	beq.n	8009b66 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009b60:	2301      	movs	r3, #1
 8009b62:	617b      	str	r3, [r7, #20]
 8009b64:	e001      	b.n	8009b6a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009b66:	2300      	movs	r3, #0
 8009b68:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	2b01      	cmp	r3, #1
 8009b6e:	d102      	bne.n	8009b76 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009b70:	f000 fd8c 	bl	800a68c <xTimerCreateTimerTask>
 8009b74:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	d116      	bne.n	8009baa <vTaskStartScheduler+0x8e>
	__asm volatile
 8009b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b80:	f383 8811 	msr	BASEPRI, r3
 8009b84:	f3bf 8f6f 	isb	sy
 8009b88:	f3bf 8f4f 	dsb	sy
 8009b8c:	613b      	str	r3, [r7, #16]
}
 8009b8e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009b90:	4b12      	ldr	r3, [pc, #72]	; (8009bdc <vTaskStartScheduler+0xc0>)
 8009b92:	f04f 32ff 	mov.w	r2, #4294967295
 8009b96:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009b98:	4b11      	ldr	r3, [pc, #68]	; (8009be0 <vTaskStartScheduler+0xc4>)
 8009b9a:	2201      	movs	r2, #1
 8009b9c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8009b9e:	4b11      	ldr	r3, [pc, #68]	; (8009be4 <vTaskStartScheduler+0xc8>)
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009ba4:	f001 f964 	bl	800ae70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009ba8:	e00e      	b.n	8009bc8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bb0:	d10a      	bne.n	8009bc8 <vTaskStartScheduler+0xac>
	__asm volatile
 8009bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb6:	f383 8811 	msr	BASEPRI, r3
 8009bba:	f3bf 8f6f 	isb	sy
 8009bbe:	f3bf 8f4f 	dsb	sy
 8009bc2:	60fb      	str	r3, [r7, #12]
}
 8009bc4:	bf00      	nop
 8009bc6:	e7fe      	b.n	8009bc6 <vTaskStartScheduler+0xaa>
}
 8009bc8:	bf00      	nop
 8009bca:	3718      	adds	r7, #24
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}
 8009bd0:	0800f4dc 	.word	0x0800f4dc
 8009bd4:	0800a2c1 	.word	0x0800a2c1
 8009bd8:	20001118 	.word	0x20001118
 8009bdc:	20001114 	.word	0x20001114
 8009be0:	20001100 	.word	0x20001100
 8009be4:	200010f8 	.word	0x200010f8

08009be8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009be8:	b480      	push	{r7}
 8009bea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009bec:	4b04      	ldr	r3, [pc, #16]	; (8009c00 <vTaskSuspendAll+0x18>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	3301      	adds	r3, #1
 8009bf2:	4a03      	ldr	r2, [pc, #12]	; (8009c00 <vTaskSuspendAll+0x18>)
 8009bf4:	6013      	str	r3, [r2, #0]
}
 8009bf6:	bf00      	nop
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfe:	4770      	bx	lr
 8009c00:	2000111c 	.word	0x2000111c

08009c04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b084      	sub	sp, #16
 8009c08:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009c12:	4b41      	ldr	r3, [pc, #260]	; (8009d18 <xTaskResumeAll+0x114>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d10a      	bne.n	8009c30 <xTaskResumeAll+0x2c>
	__asm volatile
 8009c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c1e:	f383 8811 	msr	BASEPRI, r3
 8009c22:	f3bf 8f6f 	isb	sy
 8009c26:	f3bf 8f4f 	dsb	sy
 8009c2a:	603b      	str	r3, [r7, #0]
}
 8009c2c:	bf00      	nop
 8009c2e:	e7fe      	b.n	8009c2e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009c30:	f001 f9c0 	bl	800afb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009c34:	4b38      	ldr	r3, [pc, #224]	; (8009d18 <xTaskResumeAll+0x114>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	3b01      	subs	r3, #1
 8009c3a:	4a37      	ldr	r2, [pc, #220]	; (8009d18 <xTaskResumeAll+0x114>)
 8009c3c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c3e:	4b36      	ldr	r3, [pc, #216]	; (8009d18 <xTaskResumeAll+0x114>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d161      	bne.n	8009d0a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009c46:	4b35      	ldr	r3, [pc, #212]	; (8009d1c <xTaskResumeAll+0x118>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d05d      	beq.n	8009d0a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009c4e:	e02e      	b.n	8009cae <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009c50:	4b33      	ldr	r3, [pc, #204]	; (8009d20 <xTaskResumeAll+0x11c>)
 8009c52:	68db      	ldr	r3, [r3, #12]
 8009c54:	68db      	ldr	r3, [r3, #12]
 8009c56:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	3318      	adds	r3, #24
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f7ff f892 	bl	8008d86 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	3304      	adds	r3, #4
 8009c66:	4618      	mov	r0, r3
 8009c68:	f7ff f88d 	bl	8008d86 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c70:	2201      	movs	r2, #1
 8009c72:	409a      	lsls	r2, r3
 8009c74:	4b2b      	ldr	r3, [pc, #172]	; (8009d24 <xTaskResumeAll+0x120>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	4313      	orrs	r3, r2
 8009c7a:	4a2a      	ldr	r2, [pc, #168]	; (8009d24 <xTaskResumeAll+0x120>)
 8009c7c:	6013      	str	r3, [r2, #0]
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c82:	4613      	mov	r3, r2
 8009c84:	009b      	lsls	r3, r3, #2
 8009c86:	4413      	add	r3, r2
 8009c88:	009b      	lsls	r3, r3, #2
 8009c8a:	4a27      	ldr	r2, [pc, #156]	; (8009d28 <xTaskResumeAll+0x124>)
 8009c8c:	441a      	add	r2, r3
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	3304      	adds	r3, #4
 8009c92:	4619      	mov	r1, r3
 8009c94:	4610      	mov	r0, r2
 8009c96:	f7ff f819 	bl	8008ccc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c9e:	4b23      	ldr	r3, [pc, #140]	; (8009d2c <xTaskResumeAll+0x128>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ca4:	429a      	cmp	r2, r3
 8009ca6:	d302      	bcc.n	8009cae <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009ca8:	4b21      	ldr	r3, [pc, #132]	; (8009d30 <xTaskResumeAll+0x12c>)
 8009caa:	2201      	movs	r2, #1
 8009cac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009cae:	4b1c      	ldr	r3, [pc, #112]	; (8009d20 <xTaskResumeAll+0x11c>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d1cc      	bne.n	8009c50 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d001      	beq.n	8009cc0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009cbc:	f000 fbb6 	bl	800a42c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009cc0:	4b1c      	ldr	r3, [pc, #112]	; (8009d34 <xTaskResumeAll+0x130>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d010      	beq.n	8009cee <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009ccc:	f000 f846 	bl	8009d5c <xTaskIncrementTick>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d002      	beq.n	8009cdc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8009cd6:	4b16      	ldr	r3, [pc, #88]	; (8009d30 <xTaskResumeAll+0x12c>)
 8009cd8:	2201      	movs	r2, #1
 8009cda:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	3b01      	subs	r3, #1
 8009ce0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d1f1      	bne.n	8009ccc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8009ce8:	4b12      	ldr	r3, [pc, #72]	; (8009d34 <xTaskResumeAll+0x130>)
 8009cea:	2200      	movs	r2, #0
 8009cec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009cee:	4b10      	ldr	r3, [pc, #64]	; (8009d30 <xTaskResumeAll+0x12c>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d009      	beq.n	8009d0a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009cfa:	4b0f      	ldr	r3, [pc, #60]	; (8009d38 <xTaskResumeAll+0x134>)
 8009cfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d00:	601a      	str	r2, [r3, #0]
 8009d02:	f3bf 8f4f 	dsb	sy
 8009d06:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009d0a:	f001 f983 	bl	800b014 <vPortExitCritical>

	return xAlreadyYielded;
 8009d0e:	68bb      	ldr	r3, [r7, #8]
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3710      	adds	r7, #16
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}
 8009d18:	2000111c 	.word	0x2000111c
 8009d1c:	200010f4 	.word	0x200010f4
 8009d20:	200010b4 	.word	0x200010b4
 8009d24:	200010fc 	.word	0x200010fc
 8009d28:	20000ff8 	.word	0x20000ff8
 8009d2c:	20000ff4 	.word	0x20000ff4
 8009d30:	20001108 	.word	0x20001108
 8009d34:	20001104 	.word	0x20001104
 8009d38:	e000ed04 	.word	0xe000ed04

08009d3c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b083      	sub	sp, #12
 8009d40:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009d42:	4b05      	ldr	r3, [pc, #20]	; (8009d58 <xTaskGetTickCount+0x1c>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009d48:	687b      	ldr	r3, [r7, #4]
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	370c      	adds	r7, #12
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d54:	4770      	bx	lr
 8009d56:	bf00      	nop
 8009d58:	200010f8 	.word	0x200010f8

08009d5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b086      	sub	sp, #24
 8009d60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009d62:	2300      	movs	r3, #0
 8009d64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d66:	4b51      	ldr	r3, [pc, #324]	; (8009eac <xTaskIncrementTick+0x150>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	f040 808d 	bne.w	8009e8a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009d70:	4b4f      	ldr	r3, [pc, #316]	; (8009eb0 <xTaskIncrementTick+0x154>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	3301      	adds	r3, #1
 8009d76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009d78:	4a4d      	ldr	r2, [pc, #308]	; (8009eb0 <xTaskIncrementTick+0x154>)
 8009d7a:	693b      	ldr	r3, [r7, #16]
 8009d7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009d7e:	693b      	ldr	r3, [r7, #16]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d120      	bne.n	8009dc6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009d84:	4b4b      	ldr	r3, [pc, #300]	; (8009eb4 <xTaskIncrementTick+0x158>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d00a      	beq.n	8009da4 <xTaskIncrementTick+0x48>
	__asm volatile
 8009d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d92:	f383 8811 	msr	BASEPRI, r3
 8009d96:	f3bf 8f6f 	isb	sy
 8009d9a:	f3bf 8f4f 	dsb	sy
 8009d9e:	603b      	str	r3, [r7, #0]
}
 8009da0:	bf00      	nop
 8009da2:	e7fe      	b.n	8009da2 <xTaskIncrementTick+0x46>
 8009da4:	4b43      	ldr	r3, [pc, #268]	; (8009eb4 <xTaskIncrementTick+0x158>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	60fb      	str	r3, [r7, #12]
 8009daa:	4b43      	ldr	r3, [pc, #268]	; (8009eb8 <xTaskIncrementTick+0x15c>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	4a41      	ldr	r2, [pc, #260]	; (8009eb4 <xTaskIncrementTick+0x158>)
 8009db0:	6013      	str	r3, [r2, #0]
 8009db2:	4a41      	ldr	r2, [pc, #260]	; (8009eb8 <xTaskIncrementTick+0x15c>)
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	6013      	str	r3, [r2, #0]
 8009db8:	4b40      	ldr	r3, [pc, #256]	; (8009ebc <xTaskIncrementTick+0x160>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	3301      	adds	r3, #1
 8009dbe:	4a3f      	ldr	r2, [pc, #252]	; (8009ebc <xTaskIncrementTick+0x160>)
 8009dc0:	6013      	str	r3, [r2, #0]
 8009dc2:	f000 fb33 	bl	800a42c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009dc6:	4b3e      	ldr	r3, [pc, #248]	; (8009ec0 <xTaskIncrementTick+0x164>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	693a      	ldr	r2, [r7, #16]
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	d34d      	bcc.n	8009e6c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009dd0:	4b38      	ldr	r3, [pc, #224]	; (8009eb4 <xTaskIncrementTick+0x158>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d101      	bne.n	8009dde <xTaskIncrementTick+0x82>
 8009dda:	2301      	movs	r3, #1
 8009ddc:	e000      	b.n	8009de0 <xTaskIncrementTick+0x84>
 8009dde:	2300      	movs	r3, #0
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d004      	beq.n	8009dee <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009de4:	4b36      	ldr	r3, [pc, #216]	; (8009ec0 <xTaskIncrementTick+0x164>)
 8009de6:	f04f 32ff 	mov.w	r2, #4294967295
 8009dea:	601a      	str	r2, [r3, #0]
					break;
 8009dec:	e03e      	b.n	8009e6c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009dee:	4b31      	ldr	r3, [pc, #196]	; (8009eb4 <xTaskIncrementTick+0x158>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	68db      	ldr	r3, [r3, #12]
 8009df4:	68db      	ldr	r3, [r3, #12]
 8009df6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	685b      	ldr	r3, [r3, #4]
 8009dfc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009dfe:	693a      	ldr	r2, [r7, #16]
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	429a      	cmp	r2, r3
 8009e04:	d203      	bcs.n	8009e0e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009e06:	4a2e      	ldr	r2, [pc, #184]	; (8009ec0 <xTaskIncrementTick+0x164>)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6013      	str	r3, [r2, #0]
						break;
 8009e0c:	e02e      	b.n	8009e6c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	3304      	adds	r3, #4
 8009e12:	4618      	mov	r0, r3
 8009e14:	f7fe ffb7 	bl	8008d86 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d004      	beq.n	8009e2a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	3318      	adds	r3, #24
 8009e24:	4618      	mov	r0, r3
 8009e26:	f7fe ffae 	bl	8008d86 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e2e:	2201      	movs	r2, #1
 8009e30:	409a      	lsls	r2, r3
 8009e32:	4b24      	ldr	r3, [pc, #144]	; (8009ec4 <xTaskIncrementTick+0x168>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	4313      	orrs	r3, r2
 8009e38:	4a22      	ldr	r2, [pc, #136]	; (8009ec4 <xTaskIncrementTick+0x168>)
 8009e3a:	6013      	str	r3, [r2, #0]
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e40:	4613      	mov	r3, r2
 8009e42:	009b      	lsls	r3, r3, #2
 8009e44:	4413      	add	r3, r2
 8009e46:	009b      	lsls	r3, r3, #2
 8009e48:	4a1f      	ldr	r2, [pc, #124]	; (8009ec8 <xTaskIncrementTick+0x16c>)
 8009e4a:	441a      	add	r2, r3
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	3304      	adds	r3, #4
 8009e50:	4619      	mov	r1, r3
 8009e52:	4610      	mov	r0, r2
 8009e54:	f7fe ff3a 	bl	8008ccc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e5c:	4b1b      	ldr	r3, [pc, #108]	; (8009ecc <xTaskIncrementTick+0x170>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e62:	429a      	cmp	r2, r3
 8009e64:	d3b4      	bcc.n	8009dd0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009e66:	2301      	movs	r3, #1
 8009e68:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e6a:	e7b1      	b.n	8009dd0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009e6c:	4b17      	ldr	r3, [pc, #92]	; (8009ecc <xTaskIncrementTick+0x170>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e72:	4915      	ldr	r1, [pc, #84]	; (8009ec8 <xTaskIncrementTick+0x16c>)
 8009e74:	4613      	mov	r3, r2
 8009e76:	009b      	lsls	r3, r3, #2
 8009e78:	4413      	add	r3, r2
 8009e7a:	009b      	lsls	r3, r3, #2
 8009e7c:	440b      	add	r3, r1
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	2b01      	cmp	r3, #1
 8009e82:	d907      	bls.n	8009e94 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8009e84:	2301      	movs	r3, #1
 8009e86:	617b      	str	r3, [r7, #20]
 8009e88:	e004      	b.n	8009e94 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009e8a:	4b11      	ldr	r3, [pc, #68]	; (8009ed0 <xTaskIncrementTick+0x174>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	3301      	adds	r3, #1
 8009e90:	4a0f      	ldr	r2, [pc, #60]	; (8009ed0 <xTaskIncrementTick+0x174>)
 8009e92:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009e94:	4b0f      	ldr	r3, [pc, #60]	; (8009ed4 <xTaskIncrementTick+0x178>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d001      	beq.n	8009ea0 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009ea0:	697b      	ldr	r3, [r7, #20]
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3718      	adds	r7, #24
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}
 8009eaa:	bf00      	nop
 8009eac:	2000111c 	.word	0x2000111c
 8009eb0:	200010f8 	.word	0x200010f8
 8009eb4:	200010ac 	.word	0x200010ac
 8009eb8:	200010b0 	.word	0x200010b0
 8009ebc:	2000110c 	.word	0x2000110c
 8009ec0:	20001114 	.word	0x20001114
 8009ec4:	200010fc 	.word	0x200010fc
 8009ec8:	20000ff8 	.word	0x20000ff8
 8009ecc:	20000ff4 	.word	0x20000ff4
 8009ed0:	20001104 	.word	0x20001104
 8009ed4:	20001108 	.word	0x20001108

08009ed8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b087      	sub	sp, #28
 8009edc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009ede:	4b27      	ldr	r3, [pc, #156]	; (8009f7c <vTaskSwitchContext+0xa4>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d003      	beq.n	8009eee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009ee6:	4b26      	ldr	r3, [pc, #152]	; (8009f80 <vTaskSwitchContext+0xa8>)
 8009ee8:	2201      	movs	r2, #1
 8009eea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009eec:	e03f      	b.n	8009f6e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8009eee:	4b24      	ldr	r3, [pc, #144]	; (8009f80 <vTaskSwitchContext+0xa8>)
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009ef4:	4b23      	ldr	r3, [pc, #140]	; (8009f84 <vTaskSwitchContext+0xac>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	fab3 f383 	clz	r3, r3
 8009f00:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009f02:	7afb      	ldrb	r3, [r7, #11]
 8009f04:	f1c3 031f 	rsb	r3, r3, #31
 8009f08:	617b      	str	r3, [r7, #20]
 8009f0a:	491f      	ldr	r1, [pc, #124]	; (8009f88 <vTaskSwitchContext+0xb0>)
 8009f0c:	697a      	ldr	r2, [r7, #20]
 8009f0e:	4613      	mov	r3, r2
 8009f10:	009b      	lsls	r3, r3, #2
 8009f12:	4413      	add	r3, r2
 8009f14:	009b      	lsls	r3, r3, #2
 8009f16:	440b      	add	r3, r1
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d10a      	bne.n	8009f34 <vTaskSwitchContext+0x5c>
	__asm volatile
 8009f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f22:	f383 8811 	msr	BASEPRI, r3
 8009f26:	f3bf 8f6f 	isb	sy
 8009f2a:	f3bf 8f4f 	dsb	sy
 8009f2e:	607b      	str	r3, [r7, #4]
}
 8009f30:	bf00      	nop
 8009f32:	e7fe      	b.n	8009f32 <vTaskSwitchContext+0x5a>
 8009f34:	697a      	ldr	r2, [r7, #20]
 8009f36:	4613      	mov	r3, r2
 8009f38:	009b      	lsls	r3, r3, #2
 8009f3a:	4413      	add	r3, r2
 8009f3c:	009b      	lsls	r3, r3, #2
 8009f3e:	4a12      	ldr	r2, [pc, #72]	; (8009f88 <vTaskSwitchContext+0xb0>)
 8009f40:	4413      	add	r3, r2
 8009f42:	613b      	str	r3, [r7, #16]
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	685b      	ldr	r3, [r3, #4]
 8009f48:	685a      	ldr	r2, [r3, #4]
 8009f4a:	693b      	ldr	r3, [r7, #16]
 8009f4c:	605a      	str	r2, [r3, #4]
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	685a      	ldr	r2, [r3, #4]
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	3308      	adds	r3, #8
 8009f56:	429a      	cmp	r2, r3
 8009f58:	d104      	bne.n	8009f64 <vTaskSwitchContext+0x8c>
 8009f5a:	693b      	ldr	r3, [r7, #16]
 8009f5c:	685b      	ldr	r3, [r3, #4]
 8009f5e:	685a      	ldr	r2, [r3, #4]
 8009f60:	693b      	ldr	r3, [r7, #16]
 8009f62:	605a      	str	r2, [r3, #4]
 8009f64:	693b      	ldr	r3, [r7, #16]
 8009f66:	685b      	ldr	r3, [r3, #4]
 8009f68:	68db      	ldr	r3, [r3, #12]
 8009f6a:	4a08      	ldr	r2, [pc, #32]	; (8009f8c <vTaskSwitchContext+0xb4>)
 8009f6c:	6013      	str	r3, [r2, #0]
}
 8009f6e:	bf00      	nop
 8009f70:	371c      	adds	r7, #28
 8009f72:	46bd      	mov	sp, r7
 8009f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f78:	4770      	bx	lr
 8009f7a:	bf00      	nop
 8009f7c:	2000111c 	.word	0x2000111c
 8009f80:	20001108 	.word	0x20001108
 8009f84:	200010fc 	.word	0x200010fc
 8009f88:	20000ff8 	.word	0x20000ff8
 8009f8c:	20000ff4 	.word	0x20000ff4

08009f90 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b084      	sub	sp, #16
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
 8009f98:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d10a      	bne.n	8009fb6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa4:	f383 8811 	msr	BASEPRI, r3
 8009fa8:	f3bf 8f6f 	isb	sy
 8009fac:	f3bf 8f4f 	dsb	sy
 8009fb0:	60fb      	str	r3, [r7, #12]
}
 8009fb2:	bf00      	nop
 8009fb4:	e7fe      	b.n	8009fb4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009fb6:	4b07      	ldr	r3, [pc, #28]	; (8009fd4 <vTaskPlaceOnEventList+0x44>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	3318      	adds	r3, #24
 8009fbc:	4619      	mov	r1, r3
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f7fe fea8 	bl	8008d14 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009fc4:	2101      	movs	r1, #1
 8009fc6:	6838      	ldr	r0, [r7, #0]
 8009fc8:	f000 fafa 	bl	800a5c0 <prvAddCurrentTaskToDelayedList>
}
 8009fcc:	bf00      	nop
 8009fce:	3710      	adds	r7, #16
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}
 8009fd4:	20000ff4 	.word	0x20000ff4

08009fd8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b086      	sub	sp, #24
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	60f8      	str	r0, [r7, #12]
 8009fe0:	60b9      	str	r1, [r7, #8]
 8009fe2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d10a      	bne.n	800a000 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fee:	f383 8811 	msr	BASEPRI, r3
 8009ff2:	f3bf 8f6f 	isb	sy
 8009ff6:	f3bf 8f4f 	dsb	sy
 8009ffa:	617b      	str	r3, [r7, #20]
}
 8009ffc:	bf00      	nop
 8009ffe:	e7fe      	b.n	8009ffe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a000:	4b0a      	ldr	r3, [pc, #40]	; (800a02c <vTaskPlaceOnEventListRestricted+0x54>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	3318      	adds	r3, #24
 800a006:	4619      	mov	r1, r3
 800a008:	68f8      	ldr	r0, [r7, #12]
 800a00a:	f7fe fe5f 	bl	8008ccc <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d002      	beq.n	800a01a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a014:	f04f 33ff 	mov.w	r3, #4294967295
 800a018:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a01a:	6879      	ldr	r1, [r7, #4]
 800a01c:	68b8      	ldr	r0, [r7, #8]
 800a01e:	f000 facf 	bl	800a5c0 <prvAddCurrentTaskToDelayedList>
	}
 800a022:	bf00      	nop
 800a024:	3718      	adds	r7, #24
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}
 800a02a:	bf00      	nop
 800a02c:	20000ff4 	.word	0x20000ff4

0800a030 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b086      	sub	sp, #24
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	68db      	ldr	r3, [r3, #12]
 800a03c:	68db      	ldr	r3, [r3, #12]
 800a03e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d10a      	bne.n	800a05c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a04a:	f383 8811 	msr	BASEPRI, r3
 800a04e:	f3bf 8f6f 	isb	sy
 800a052:	f3bf 8f4f 	dsb	sy
 800a056:	60fb      	str	r3, [r7, #12]
}
 800a058:	bf00      	nop
 800a05a:	e7fe      	b.n	800a05a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	3318      	adds	r3, #24
 800a060:	4618      	mov	r0, r3
 800a062:	f7fe fe90 	bl	8008d86 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a066:	4b1d      	ldr	r3, [pc, #116]	; (800a0dc <xTaskRemoveFromEventList+0xac>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d11c      	bne.n	800a0a8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	3304      	adds	r3, #4
 800a072:	4618      	mov	r0, r3
 800a074:	f7fe fe87 	bl	8008d86 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a078:	693b      	ldr	r3, [r7, #16]
 800a07a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a07c:	2201      	movs	r2, #1
 800a07e:	409a      	lsls	r2, r3
 800a080:	4b17      	ldr	r3, [pc, #92]	; (800a0e0 <xTaskRemoveFromEventList+0xb0>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	4313      	orrs	r3, r2
 800a086:	4a16      	ldr	r2, [pc, #88]	; (800a0e0 <xTaskRemoveFromEventList+0xb0>)
 800a088:	6013      	str	r3, [r2, #0]
 800a08a:	693b      	ldr	r3, [r7, #16]
 800a08c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a08e:	4613      	mov	r3, r2
 800a090:	009b      	lsls	r3, r3, #2
 800a092:	4413      	add	r3, r2
 800a094:	009b      	lsls	r3, r3, #2
 800a096:	4a13      	ldr	r2, [pc, #76]	; (800a0e4 <xTaskRemoveFromEventList+0xb4>)
 800a098:	441a      	add	r2, r3
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	3304      	adds	r3, #4
 800a09e:	4619      	mov	r1, r3
 800a0a0:	4610      	mov	r0, r2
 800a0a2:	f7fe fe13 	bl	8008ccc <vListInsertEnd>
 800a0a6:	e005      	b.n	800a0b4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	3318      	adds	r3, #24
 800a0ac:	4619      	mov	r1, r3
 800a0ae:	480e      	ldr	r0, [pc, #56]	; (800a0e8 <xTaskRemoveFromEventList+0xb8>)
 800a0b0:	f7fe fe0c 	bl	8008ccc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a0b4:	693b      	ldr	r3, [r7, #16]
 800a0b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0b8:	4b0c      	ldr	r3, [pc, #48]	; (800a0ec <xTaskRemoveFromEventList+0xbc>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0be:	429a      	cmp	r2, r3
 800a0c0:	d905      	bls.n	800a0ce <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a0c6:	4b0a      	ldr	r3, [pc, #40]	; (800a0f0 <xTaskRemoveFromEventList+0xc0>)
 800a0c8:	2201      	movs	r2, #1
 800a0ca:	601a      	str	r2, [r3, #0]
 800a0cc:	e001      	b.n	800a0d2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800a0d2:	697b      	ldr	r3, [r7, #20]
}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	3718      	adds	r7, #24
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}
 800a0dc:	2000111c 	.word	0x2000111c
 800a0e0:	200010fc 	.word	0x200010fc
 800a0e4:	20000ff8 	.word	0x20000ff8
 800a0e8:	200010b4 	.word	0x200010b4
 800a0ec:	20000ff4 	.word	0x20000ff4
 800a0f0:	20001108 	.word	0x20001108

0800a0f4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b086      	sub	sp, #24
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
 800a0fc:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800a0fe:	4b29      	ldr	r3, [pc, #164]	; (800a1a4 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d10a      	bne.n	800a11c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800a106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a10a:	f383 8811 	msr	BASEPRI, r3
 800a10e:	f3bf 8f6f 	isb	sy
 800a112:	f3bf 8f4f 	dsb	sy
 800a116:	613b      	str	r3, [r7, #16]
}
 800a118:	bf00      	nop
 800a11a:	e7fe      	b.n	800a11a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	68db      	ldr	r3, [r3, #12]
 800a12a:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800a12c:	697b      	ldr	r3, [r7, #20]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d10a      	bne.n	800a148 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800a132:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a136:	f383 8811 	msr	BASEPRI, r3
 800a13a:	f3bf 8f6f 	isb	sy
 800a13e:	f3bf 8f4f 	dsb	sy
 800a142:	60fb      	str	r3, [r7, #12]
}
 800a144:	bf00      	nop
 800a146:	e7fe      	b.n	800a146 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f7fe fe1c 	bl	8008d86 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	3304      	adds	r3, #4
 800a152:	4618      	mov	r0, r3
 800a154:	f7fe fe17 	bl	8008d86 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a15c:	2201      	movs	r2, #1
 800a15e:	409a      	lsls	r2, r3
 800a160:	4b11      	ldr	r3, [pc, #68]	; (800a1a8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	4313      	orrs	r3, r2
 800a166:	4a10      	ldr	r2, [pc, #64]	; (800a1a8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800a168:	6013      	str	r3, [r2, #0]
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a16e:	4613      	mov	r3, r2
 800a170:	009b      	lsls	r3, r3, #2
 800a172:	4413      	add	r3, r2
 800a174:	009b      	lsls	r3, r3, #2
 800a176:	4a0d      	ldr	r2, [pc, #52]	; (800a1ac <vTaskRemoveFromUnorderedEventList+0xb8>)
 800a178:	441a      	add	r2, r3
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	3304      	adds	r3, #4
 800a17e:	4619      	mov	r1, r3
 800a180:	4610      	mov	r0, r2
 800a182:	f7fe fda3 	bl	8008ccc <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a18a:	4b09      	ldr	r3, [pc, #36]	; (800a1b0 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a190:	429a      	cmp	r2, r3
 800a192:	d902      	bls.n	800a19a <vTaskRemoveFromUnorderedEventList+0xa6>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800a194:	4b07      	ldr	r3, [pc, #28]	; (800a1b4 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800a196:	2201      	movs	r2, #1
 800a198:	601a      	str	r2, [r3, #0]
	}
}
 800a19a:	bf00      	nop
 800a19c:	3718      	adds	r7, #24
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}
 800a1a2:	bf00      	nop
 800a1a4:	2000111c 	.word	0x2000111c
 800a1a8:	200010fc 	.word	0x200010fc
 800a1ac:	20000ff8 	.word	0x20000ff8
 800a1b0:	20000ff4 	.word	0x20000ff4
 800a1b4:	20001108 	.word	0x20001108

0800a1b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b083      	sub	sp, #12
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a1c0:	4b06      	ldr	r3, [pc, #24]	; (800a1dc <vTaskInternalSetTimeOutState+0x24>)
 800a1c2:	681a      	ldr	r2, [r3, #0]
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a1c8:	4b05      	ldr	r3, [pc, #20]	; (800a1e0 <vTaskInternalSetTimeOutState+0x28>)
 800a1ca:	681a      	ldr	r2, [r3, #0]
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	605a      	str	r2, [r3, #4]
}
 800a1d0:	bf00      	nop
 800a1d2:	370c      	adds	r7, #12
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1da:	4770      	bx	lr
 800a1dc:	2000110c 	.word	0x2000110c
 800a1e0:	200010f8 	.word	0x200010f8

0800a1e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b088      	sub	sp, #32
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d10a      	bne.n	800a20a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a1f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f8:	f383 8811 	msr	BASEPRI, r3
 800a1fc:	f3bf 8f6f 	isb	sy
 800a200:	f3bf 8f4f 	dsb	sy
 800a204:	613b      	str	r3, [r7, #16]
}
 800a206:	bf00      	nop
 800a208:	e7fe      	b.n	800a208 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d10a      	bne.n	800a226 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a214:	f383 8811 	msr	BASEPRI, r3
 800a218:	f3bf 8f6f 	isb	sy
 800a21c:	f3bf 8f4f 	dsb	sy
 800a220:	60fb      	str	r3, [r7, #12]
}
 800a222:	bf00      	nop
 800a224:	e7fe      	b.n	800a224 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a226:	f000 fec5 	bl	800afb4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a22a:	4b1d      	ldr	r3, [pc, #116]	; (800a2a0 <xTaskCheckForTimeOut+0xbc>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	685b      	ldr	r3, [r3, #4]
 800a234:	69ba      	ldr	r2, [r7, #24]
 800a236:	1ad3      	subs	r3, r2, r3
 800a238:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a242:	d102      	bne.n	800a24a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a244:	2300      	movs	r3, #0
 800a246:	61fb      	str	r3, [r7, #28]
 800a248:	e023      	b.n	800a292 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681a      	ldr	r2, [r3, #0]
 800a24e:	4b15      	ldr	r3, [pc, #84]	; (800a2a4 <xTaskCheckForTimeOut+0xc0>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	429a      	cmp	r2, r3
 800a254:	d007      	beq.n	800a266 <xTaskCheckForTimeOut+0x82>
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	685b      	ldr	r3, [r3, #4]
 800a25a:	69ba      	ldr	r2, [r7, #24]
 800a25c:	429a      	cmp	r2, r3
 800a25e:	d302      	bcc.n	800a266 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a260:	2301      	movs	r3, #1
 800a262:	61fb      	str	r3, [r7, #28]
 800a264:	e015      	b.n	800a292 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	697a      	ldr	r2, [r7, #20]
 800a26c:	429a      	cmp	r2, r3
 800a26e:	d20b      	bcs.n	800a288 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	681a      	ldr	r2, [r3, #0]
 800a274:	697b      	ldr	r3, [r7, #20]
 800a276:	1ad2      	subs	r2, r2, r3
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f7ff ff9b 	bl	800a1b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a282:	2300      	movs	r3, #0
 800a284:	61fb      	str	r3, [r7, #28]
 800a286:	e004      	b.n	800a292 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	2200      	movs	r2, #0
 800a28c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a28e:	2301      	movs	r3, #1
 800a290:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a292:	f000 febf 	bl	800b014 <vPortExitCritical>

	return xReturn;
 800a296:	69fb      	ldr	r3, [r7, #28]
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3720      	adds	r7, #32
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}
 800a2a0:	200010f8 	.word	0x200010f8
 800a2a4:	2000110c 	.word	0x2000110c

0800a2a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a2ac:	4b03      	ldr	r3, [pc, #12]	; (800a2bc <vTaskMissedYield+0x14>)
 800a2ae:	2201      	movs	r2, #1
 800a2b0:	601a      	str	r2, [r3, #0]
}
 800a2b2:	bf00      	nop
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr
 800a2bc:	20001108 	.word	0x20001108

0800a2c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b082      	sub	sp, #8
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a2c8:	f000 f852 	bl	800a370 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a2cc:	4b06      	ldr	r3, [pc, #24]	; (800a2e8 <prvIdleTask+0x28>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	2b01      	cmp	r3, #1
 800a2d2:	d9f9      	bls.n	800a2c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a2d4:	4b05      	ldr	r3, [pc, #20]	; (800a2ec <prvIdleTask+0x2c>)
 800a2d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2da:	601a      	str	r2, [r3, #0]
 800a2dc:	f3bf 8f4f 	dsb	sy
 800a2e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a2e4:	e7f0      	b.n	800a2c8 <prvIdleTask+0x8>
 800a2e6:	bf00      	nop
 800a2e8:	20000ff8 	.word	0x20000ff8
 800a2ec:	e000ed04 	.word	0xe000ed04

0800a2f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b082      	sub	sp, #8
 800a2f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	607b      	str	r3, [r7, #4]
 800a2fa:	e00c      	b.n	800a316 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a2fc:	687a      	ldr	r2, [r7, #4]
 800a2fe:	4613      	mov	r3, r2
 800a300:	009b      	lsls	r3, r3, #2
 800a302:	4413      	add	r3, r2
 800a304:	009b      	lsls	r3, r3, #2
 800a306:	4a12      	ldr	r2, [pc, #72]	; (800a350 <prvInitialiseTaskLists+0x60>)
 800a308:	4413      	add	r3, r2
 800a30a:	4618      	mov	r0, r3
 800a30c:	f7fe fcb1 	bl	8008c72 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	3301      	adds	r3, #1
 800a314:	607b      	str	r3, [r7, #4]
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2b06      	cmp	r3, #6
 800a31a:	d9ef      	bls.n	800a2fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a31c:	480d      	ldr	r0, [pc, #52]	; (800a354 <prvInitialiseTaskLists+0x64>)
 800a31e:	f7fe fca8 	bl	8008c72 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a322:	480d      	ldr	r0, [pc, #52]	; (800a358 <prvInitialiseTaskLists+0x68>)
 800a324:	f7fe fca5 	bl	8008c72 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a328:	480c      	ldr	r0, [pc, #48]	; (800a35c <prvInitialiseTaskLists+0x6c>)
 800a32a:	f7fe fca2 	bl	8008c72 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a32e:	480c      	ldr	r0, [pc, #48]	; (800a360 <prvInitialiseTaskLists+0x70>)
 800a330:	f7fe fc9f 	bl	8008c72 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a334:	480b      	ldr	r0, [pc, #44]	; (800a364 <prvInitialiseTaskLists+0x74>)
 800a336:	f7fe fc9c 	bl	8008c72 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a33a:	4b0b      	ldr	r3, [pc, #44]	; (800a368 <prvInitialiseTaskLists+0x78>)
 800a33c:	4a05      	ldr	r2, [pc, #20]	; (800a354 <prvInitialiseTaskLists+0x64>)
 800a33e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a340:	4b0a      	ldr	r3, [pc, #40]	; (800a36c <prvInitialiseTaskLists+0x7c>)
 800a342:	4a05      	ldr	r2, [pc, #20]	; (800a358 <prvInitialiseTaskLists+0x68>)
 800a344:	601a      	str	r2, [r3, #0]
}
 800a346:	bf00      	nop
 800a348:	3708      	adds	r7, #8
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}
 800a34e:	bf00      	nop
 800a350:	20000ff8 	.word	0x20000ff8
 800a354:	20001084 	.word	0x20001084
 800a358:	20001098 	.word	0x20001098
 800a35c:	200010b4 	.word	0x200010b4
 800a360:	200010c8 	.word	0x200010c8
 800a364:	200010e0 	.word	0x200010e0
 800a368:	200010ac 	.word	0x200010ac
 800a36c:	200010b0 	.word	0x200010b0

0800a370 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b082      	sub	sp, #8
 800a374:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a376:	e019      	b.n	800a3ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a378:	f000 fe1c 	bl	800afb4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800a37c:	4b10      	ldr	r3, [pc, #64]	; (800a3c0 <prvCheckTasksWaitingTermination+0x50>)
 800a37e:	68db      	ldr	r3, [r3, #12]
 800a380:	68db      	ldr	r3, [r3, #12]
 800a382:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	3304      	adds	r3, #4
 800a388:	4618      	mov	r0, r3
 800a38a:	f7fe fcfc 	bl	8008d86 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a38e:	4b0d      	ldr	r3, [pc, #52]	; (800a3c4 <prvCheckTasksWaitingTermination+0x54>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	3b01      	subs	r3, #1
 800a394:	4a0b      	ldr	r2, [pc, #44]	; (800a3c4 <prvCheckTasksWaitingTermination+0x54>)
 800a396:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a398:	4b0b      	ldr	r3, [pc, #44]	; (800a3c8 <prvCheckTasksWaitingTermination+0x58>)
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	3b01      	subs	r3, #1
 800a39e:	4a0a      	ldr	r2, [pc, #40]	; (800a3c8 <prvCheckTasksWaitingTermination+0x58>)
 800a3a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a3a2:	f000 fe37 	bl	800b014 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	f000 f810 	bl	800a3cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a3ac:	4b06      	ldr	r3, [pc, #24]	; (800a3c8 <prvCheckTasksWaitingTermination+0x58>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d1e1      	bne.n	800a378 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a3b4:	bf00      	nop
 800a3b6:	bf00      	nop
 800a3b8:	3708      	adds	r7, #8
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}
 800a3be:	bf00      	nop
 800a3c0:	200010c8 	.word	0x200010c8
 800a3c4:	200010f4 	.word	0x200010f4
 800a3c8:	200010dc 	.word	0x200010dc

0800a3cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b084      	sub	sp, #16
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d108      	bne.n	800a3f0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f000 ffcc 	bl	800b380 <vPortFree>
				vPortFree( pxTCB );
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f000 ffc9 	bl	800b380 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a3ee:	e018      	b.n	800a422 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800a3f6:	2b01      	cmp	r3, #1
 800a3f8:	d103      	bne.n	800a402 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f000 ffc0 	bl	800b380 <vPortFree>
	}
 800a400:	e00f      	b.n	800a422 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800a408:	2b02      	cmp	r3, #2
 800a40a:	d00a      	beq.n	800a422 <prvDeleteTCB+0x56>
	__asm volatile
 800a40c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a410:	f383 8811 	msr	BASEPRI, r3
 800a414:	f3bf 8f6f 	isb	sy
 800a418:	f3bf 8f4f 	dsb	sy
 800a41c:	60fb      	str	r3, [r7, #12]
}
 800a41e:	bf00      	nop
 800a420:	e7fe      	b.n	800a420 <prvDeleteTCB+0x54>
	}
 800a422:	bf00      	nop
 800a424:	3710      	adds	r7, #16
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}
	...

0800a42c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a42c:	b480      	push	{r7}
 800a42e:	b083      	sub	sp, #12
 800a430:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a432:	4b0f      	ldr	r3, [pc, #60]	; (800a470 <prvResetNextTaskUnblockTime+0x44>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d101      	bne.n	800a440 <prvResetNextTaskUnblockTime+0x14>
 800a43c:	2301      	movs	r3, #1
 800a43e:	e000      	b.n	800a442 <prvResetNextTaskUnblockTime+0x16>
 800a440:	2300      	movs	r3, #0
 800a442:	2b00      	cmp	r3, #0
 800a444:	d004      	beq.n	800a450 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a446:	4b0b      	ldr	r3, [pc, #44]	; (800a474 <prvResetNextTaskUnblockTime+0x48>)
 800a448:	f04f 32ff 	mov.w	r2, #4294967295
 800a44c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a44e:	e008      	b.n	800a462 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a450:	4b07      	ldr	r3, [pc, #28]	; (800a470 <prvResetNextTaskUnblockTime+0x44>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	68db      	ldr	r3, [r3, #12]
 800a456:	68db      	ldr	r3, [r3, #12]
 800a458:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	685b      	ldr	r3, [r3, #4]
 800a45e:	4a05      	ldr	r2, [pc, #20]	; (800a474 <prvResetNextTaskUnblockTime+0x48>)
 800a460:	6013      	str	r3, [r2, #0]
}
 800a462:	bf00      	nop
 800a464:	370c      	adds	r7, #12
 800a466:	46bd      	mov	sp, r7
 800a468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46c:	4770      	bx	lr
 800a46e:	bf00      	nop
 800a470:	200010ac 	.word	0x200010ac
 800a474:	20001114 	.word	0x20001114

0800a478 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a478:	b480      	push	{r7}
 800a47a:	b083      	sub	sp, #12
 800a47c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a47e:	4b0b      	ldr	r3, [pc, #44]	; (800a4ac <xTaskGetSchedulerState+0x34>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d102      	bne.n	800a48c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a486:	2301      	movs	r3, #1
 800a488:	607b      	str	r3, [r7, #4]
 800a48a:	e008      	b.n	800a49e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a48c:	4b08      	ldr	r3, [pc, #32]	; (800a4b0 <xTaskGetSchedulerState+0x38>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d102      	bne.n	800a49a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a494:	2302      	movs	r3, #2
 800a496:	607b      	str	r3, [r7, #4]
 800a498:	e001      	b.n	800a49e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a49a:	2300      	movs	r3, #0
 800a49c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a49e:	687b      	ldr	r3, [r7, #4]
	}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	370c      	adds	r7, #12
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4aa:	4770      	bx	lr
 800a4ac:	20001100 	.word	0x20001100
 800a4b0:	2000111c 	.word	0x2000111c

0800a4b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b086      	sub	sp, #24
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d06e      	beq.n	800a5a8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a4ca:	4b3a      	ldr	r3, [pc, #232]	; (800a5b4 <xTaskPriorityDisinherit+0x100>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	693a      	ldr	r2, [r7, #16]
 800a4d0:	429a      	cmp	r2, r3
 800a4d2:	d00a      	beq.n	800a4ea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d8:	f383 8811 	msr	BASEPRI, r3
 800a4dc:	f3bf 8f6f 	isb	sy
 800a4e0:	f3bf 8f4f 	dsb	sy
 800a4e4:	60fb      	str	r3, [r7, #12]
}
 800a4e6:	bf00      	nop
 800a4e8:	e7fe      	b.n	800a4e8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d10a      	bne.n	800a508 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f6:	f383 8811 	msr	BASEPRI, r3
 800a4fa:	f3bf 8f6f 	isb	sy
 800a4fe:	f3bf 8f4f 	dsb	sy
 800a502:	60bb      	str	r3, [r7, #8]
}
 800a504:	bf00      	nop
 800a506:	e7fe      	b.n	800a506 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a50c:	1e5a      	subs	r2, r3, #1
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a51a:	429a      	cmp	r2, r3
 800a51c:	d044      	beq.n	800a5a8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a51e:	693b      	ldr	r3, [r7, #16]
 800a520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a522:	2b00      	cmp	r3, #0
 800a524:	d140      	bne.n	800a5a8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	3304      	adds	r3, #4
 800a52a:	4618      	mov	r0, r3
 800a52c:	f7fe fc2b 	bl	8008d86 <uxListRemove>
 800a530:	4603      	mov	r3, r0
 800a532:	2b00      	cmp	r3, #0
 800a534:	d115      	bne.n	800a562 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a53a:	491f      	ldr	r1, [pc, #124]	; (800a5b8 <xTaskPriorityDisinherit+0x104>)
 800a53c:	4613      	mov	r3, r2
 800a53e:	009b      	lsls	r3, r3, #2
 800a540:	4413      	add	r3, r2
 800a542:	009b      	lsls	r3, r3, #2
 800a544:	440b      	add	r3, r1
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d10a      	bne.n	800a562 <xTaskPriorityDisinherit+0xae>
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a550:	2201      	movs	r2, #1
 800a552:	fa02 f303 	lsl.w	r3, r2, r3
 800a556:	43da      	mvns	r2, r3
 800a558:	4b18      	ldr	r3, [pc, #96]	; (800a5bc <xTaskPriorityDisinherit+0x108>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4013      	ands	r3, r2
 800a55e:	4a17      	ldr	r2, [pc, #92]	; (800a5bc <xTaskPriorityDisinherit+0x108>)
 800a560:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a566:	693b      	ldr	r3, [r7, #16]
 800a568:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a56e:	f1c3 0207 	rsb	r2, r3, #7
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a57a:	2201      	movs	r2, #1
 800a57c:	409a      	lsls	r2, r3
 800a57e:	4b0f      	ldr	r3, [pc, #60]	; (800a5bc <xTaskPriorityDisinherit+0x108>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	4313      	orrs	r3, r2
 800a584:	4a0d      	ldr	r2, [pc, #52]	; (800a5bc <xTaskPriorityDisinherit+0x108>)
 800a586:	6013      	str	r3, [r2, #0]
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a58c:	4613      	mov	r3, r2
 800a58e:	009b      	lsls	r3, r3, #2
 800a590:	4413      	add	r3, r2
 800a592:	009b      	lsls	r3, r3, #2
 800a594:	4a08      	ldr	r2, [pc, #32]	; (800a5b8 <xTaskPriorityDisinherit+0x104>)
 800a596:	441a      	add	r2, r3
 800a598:	693b      	ldr	r3, [r7, #16]
 800a59a:	3304      	adds	r3, #4
 800a59c:	4619      	mov	r1, r3
 800a59e:	4610      	mov	r0, r2
 800a5a0:	f7fe fb94 	bl	8008ccc <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a5a8:	697b      	ldr	r3, [r7, #20]
	}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3718      	adds	r7, #24
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}
 800a5b2:	bf00      	nop
 800a5b4:	20000ff4 	.word	0x20000ff4
 800a5b8:	20000ff8 	.word	0x20000ff8
 800a5bc:	200010fc 	.word	0x200010fc

0800a5c0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b084      	sub	sp, #16
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
 800a5c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a5ca:	4b29      	ldr	r3, [pc, #164]	; (800a670 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a5d0:	4b28      	ldr	r3, [pc, #160]	; (800a674 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	3304      	adds	r3, #4
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f7fe fbd5 	bl	8008d86 <uxListRemove>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d10b      	bne.n	800a5fa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800a5e2:	4b24      	ldr	r3, [pc, #144]	; (800a674 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5e8:	2201      	movs	r2, #1
 800a5ea:	fa02 f303 	lsl.w	r3, r2, r3
 800a5ee:	43da      	mvns	r2, r3
 800a5f0:	4b21      	ldr	r3, [pc, #132]	; (800a678 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	4013      	ands	r3, r2
 800a5f6:	4a20      	ldr	r2, [pc, #128]	; (800a678 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a5f8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a600:	d10a      	bne.n	800a618 <prvAddCurrentTaskToDelayedList+0x58>
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d007      	beq.n	800a618 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a608:	4b1a      	ldr	r3, [pc, #104]	; (800a674 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	3304      	adds	r3, #4
 800a60e:	4619      	mov	r1, r3
 800a610:	481a      	ldr	r0, [pc, #104]	; (800a67c <prvAddCurrentTaskToDelayedList+0xbc>)
 800a612:	f7fe fb5b 	bl	8008ccc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a616:	e026      	b.n	800a666 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a618:	68fa      	ldr	r2, [r7, #12]
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	4413      	add	r3, r2
 800a61e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a620:	4b14      	ldr	r3, [pc, #80]	; (800a674 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	68ba      	ldr	r2, [r7, #8]
 800a626:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a628:	68ba      	ldr	r2, [r7, #8]
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	429a      	cmp	r2, r3
 800a62e:	d209      	bcs.n	800a644 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a630:	4b13      	ldr	r3, [pc, #76]	; (800a680 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a632:	681a      	ldr	r2, [r3, #0]
 800a634:	4b0f      	ldr	r3, [pc, #60]	; (800a674 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	3304      	adds	r3, #4
 800a63a:	4619      	mov	r1, r3
 800a63c:	4610      	mov	r0, r2
 800a63e:	f7fe fb69 	bl	8008d14 <vListInsert>
}
 800a642:	e010      	b.n	800a666 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a644:	4b0f      	ldr	r3, [pc, #60]	; (800a684 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a646:	681a      	ldr	r2, [r3, #0]
 800a648:	4b0a      	ldr	r3, [pc, #40]	; (800a674 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	3304      	adds	r3, #4
 800a64e:	4619      	mov	r1, r3
 800a650:	4610      	mov	r0, r2
 800a652:	f7fe fb5f 	bl	8008d14 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a656:	4b0c      	ldr	r3, [pc, #48]	; (800a688 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	68ba      	ldr	r2, [r7, #8]
 800a65c:	429a      	cmp	r2, r3
 800a65e:	d202      	bcs.n	800a666 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a660:	4a09      	ldr	r2, [pc, #36]	; (800a688 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	6013      	str	r3, [r2, #0]
}
 800a666:	bf00      	nop
 800a668:	3710      	adds	r7, #16
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}
 800a66e:	bf00      	nop
 800a670:	200010f8 	.word	0x200010f8
 800a674:	20000ff4 	.word	0x20000ff4
 800a678:	200010fc 	.word	0x200010fc
 800a67c:	200010e0 	.word	0x200010e0
 800a680:	200010b0 	.word	0x200010b0
 800a684:	200010ac 	.word	0x200010ac
 800a688:	20001114 	.word	0x20001114

0800a68c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b08a      	sub	sp, #40	; 0x28
 800a690:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a692:	2300      	movs	r3, #0
 800a694:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a696:	f000 fb1f 	bl	800acd8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a69a:	4b1c      	ldr	r3, [pc, #112]	; (800a70c <xTimerCreateTimerTask+0x80>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d021      	beq.n	800a6e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a6aa:	1d3a      	adds	r2, r7, #4
 800a6ac:	f107 0108 	add.w	r1, r7, #8
 800a6b0:	f107 030c 	add.w	r3, r7, #12
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	f7f6 fe31 	bl	800131c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a6ba:	6879      	ldr	r1, [r7, #4]
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	68fa      	ldr	r2, [r7, #12]
 800a6c0:	9202      	str	r2, [sp, #8]
 800a6c2:	9301      	str	r3, [sp, #4]
 800a6c4:	2302      	movs	r3, #2
 800a6c6:	9300      	str	r3, [sp, #0]
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	460a      	mov	r2, r1
 800a6cc:	4910      	ldr	r1, [pc, #64]	; (800a710 <xTimerCreateTimerTask+0x84>)
 800a6ce:	4811      	ldr	r0, [pc, #68]	; (800a714 <xTimerCreateTimerTask+0x88>)
 800a6d0:	f7ff f866 	bl	80097a0 <xTaskCreateStatic>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	4a10      	ldr	r2, [pc, #64]	; (800a718 <xTimerCreateTimerTask+0x8c>)
 800a6d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a6da:	4b0f      	ldr	r3, [pc, #60]	; (800a718 <xTimerCreateTimerTask+0x8c>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d001      	beq.n	800a6e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a6e6:	697b      	ldr	r3, [r7, #20]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d10a      	bne.n	800a702 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a6ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6f0:	f383 8811 	msr	BASEPRI, r3
 800a6f4:	f3bf 8f6f 	isb	sy
 800a6f8:	f3bf 8f4f 	dsb	sy
 800a6fc:	613b      	str	r3, [r7, #16]
}
 800a6fe:	bf00      	nop
 800a700:	e7fe      	b.n	800a700 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a702:	697b      	ldr	r3, [r7, #20]
}
 800a704:	4618      	mov	r0, r3
 800a706:	3718      	adds	r7, #24
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}
 800a70c:	20001150 	.word	0x20001150
 800a710:	0800f4e4 	.word	0x0800f4e4
 800a714:	0800a8e1 	.word	0x0800a8e1
 800a718:	20001154 	.word	0x20001154

0800a71c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b088      	sub	sp, #32
 800a720:	af02      	add	r7, sp, #8
 800a722:	60f8      	str	r0, [r7, #12]
 800a724:	60b9      	str	r1, [r7, #8]
 800a726:	607a      	str	r2, [r7, #4]
 800a728:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800a72a:	202c      	movs	r0, #44	; 0x2c
 800a72c:	f000 fd64 	bl	800b1f8 <pvPortMalloc>
 800a730:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d00d      	beq.n	800a754 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a738:	697b      	ldr	r3, [r7, #20]
 800a73a:	9301      	str	r3, [sp, #4]
 800a73c:	6a3b      	ldr	r3, [r7, #32]
 800a73e:	9300      	str	r3, [sp, #0]
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	687a      	ldr	r2, [r7, #4]
 800a744:	68b9      	ldr	r1, [r7, #8]
 800a746:	68f8      	ldr	r0, [r7, #12]
 800a748:	f000 f809 	bl	800a75e <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 800a74c:	697b      	ldr	r3, [r7, #20]
 800a74e:	2200      	movs	r2, #0
 800a750:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 800a754:	697b      	ldr	r3, [r7, #20]
	}
 800a756:	4618      	mov	r0, r3
 800a758:	3718      	adds	r7, #24
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}

0800a75e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800a75e:	b580      	push	{r7, lr}
 800a760:	b086      	sub	sp, #24
 800a762:	af00      	add	r7, sp, #0
 800a764:	60f8      	str	r0, [r7, #12]
 800a766:	60b9      	str	r1, [r7, #8]
 800a768:	607a      	str	r2, [r7, #4]
 800a76a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d10a      	bne.n	800a788 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800a772:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a776:	f383 8811 	msr	BASEPRI, r3
 800a77a:	f3bf 8f6f 	isb	sy
 800a77e:	f3bf 8f4f 	dsb	sy
 800a782:	617b      	str	r3, [r7, #20]
}
 800a784:	bf00      	nop
 800a786:	e7fe      	b.n	800a786 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800a788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d015      	beq.n	800a7ba <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800a78e:	f000 faa3 	bl	800acd8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800a792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a794:	68fa      	ldr	r2, [r7, #12]
 800a796:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800a798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a79a:	68ba      	ldr	r2, [r7, #8]
 800a79c:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800a79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a0:	687a      	ldr	r2, [r7, #4]
 800a7a2:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800a7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a6:	683a      	ldr	r2, [r7, #0]
 800a7a8:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800a7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ac:	6a3a      	ldr	r2, [r7, #32]
 800a7ae:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800a7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b2:	3304      	adds	r3, #4
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f7fe fa7c 	bl	8008cb2 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800a7ba:	bf00      	nop
 800a7bc:	3718      	adds	r7, #24
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}
	...

0800a7c4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b08a      	sub	sp, #40	; 0x28
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	60f8      	str	r0, [r7, #12]
 800a7cc:	60b9      	str	r1, [r7, #8]
 800a7ce:	607a      	str	r2, [r7, #4]
 800a7d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d10a      	bne.n	800a7f2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a7dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e0:	f383 8811 	msr	BASEPRI, r3
 800a7e4:	f3bf 8f6f 	isb	sy
 800a7e8:	f3bf 8f4f 	dsb	sy
 800a7ec:	623b      	str	r3, [r7, #32]
}
 800a7ee:	bf00      	nop
 800a7f0:	e7fe      	b.n	800a7f0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a7f2:	4b1a      	ldr	r3, [pc, #104]	; (800a85c <xTimerGenericCommand+0x98>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d02a      	beq.n	800a850 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a806:	68bb      	ldr	r3, [r7, #8]
 800a808:	2b05      	cmp	r3, #5
 800a80a:	dc18      	bgt.n	800a83e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a80c:	f7ff fe34 	bl	800a478 <xTaskGetSchedulerState>
 800a810:	4603      	mov	r3, r0
 800a812:	2b02      	cmp	r3, #2
 800a814:	d109      	bne.n	800a82a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a816:	4b11      	ldr	r3, [pc, #68]	; (800a85c <xTimerGenericCommand+0x98>)
 800a818:	6818      	ldr	r0, [r3, #0]
 800a81a:	f107 0110 	add.w	r1, r7, #16
 800a81e:	2300      	movs	r3, #0
 800a820:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a822:	f7fe fbd9 	bl	8008fd8 <xQueueGenericSend>
 800a826:	6278      	str	r0, [r7, #36]	; 0x24
 800a828:	e012      	b.n	800a850 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a82a:	4b0c      	ldr	r3, [pc, #48]	; (800a85c <xTimerGenericCommand+0x98>)
 800a82c:	6818      	ldr	r0, [r3, #0]
 800a82e:	f107 0110 	add.w	r1, r7, #16
 800a832:	2300      	movs	r3, #0
 800a834:	2200      	movs	r2, #0
 800a836:	f7fe fbcf 	bl	8008fd8 <xQueueGenericSend>
 800a83a:	6278      	str	r0, [r7, #36]	; 0x24
 800a83c:	e008      	b.n	800a850 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a83e:	4b07      	ldr	r3, [pc, #28]	; (800a85c <xTimerGenericCommand+0x98>)
 800a840:	6818      	ldr	r0, [r3, #0]
 800a842:	f107 0110 	add.w	r1, r7, #16
 800a846:	2300      	movs	r3, #0
 800a848:	683a      	ldr	r2, [r7, #0]
 800a84a:	f7fe fcc3 	bl	80091d4 <xQueueGenericSendFromISR>
 800a84e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a852:	4618      	mov	r0, r3
 800a854:	3728      	adds	r7, #40	; 0x28
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}
 800a85a:	bf00      	nop
 800a85c:	20001150 	.word	0x20001150

0800a860 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b088      	sub	sp, #32
 800a864:	af02      	add	r7, sp, #8
 800a866:	6078      	str	r0, [r7, #4]
 800a868:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a86a:	4b1c      	ldr	r3, [pc, #112]	; (800a8dc <prvProcessExpiredTimer+0x7c>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	68db      	ldr	r3, [r3, #12]
 800a870:	68db      	ldr	r3, [r3, #12]
 800a872:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a874:	697b      	ldr	r3, [r7, #20]
 800a876:	3304      	adds	r3, #4
 800a878:	4618      	mov	r0, r3
 800a87a:	f7fe fa84 	bl	8008d86 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a87e:	697b      	ldr	r3, [r7, #20]
 800a880:	69db      	ldr	r3, [r3, #28]
 800a882:	2b01      	cmp	r3, #1
 800a884:	d122      	bne.n	800a8cc <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a886:	697b      	ldr	r3, [r7, #20]
 800a888:	699a      	ldr	r2, [r3, #24]
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	18d1      	adds	r1, r2, r3
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	683a      	ldr	r2, [r7, #0]
 800a892:	6978      	ldr	r0, [r7, #20]
 800a894:	f000 f8c8 	bl	800aa28 <prvInsertTimerInActiveList>
 800a898:	4603      	mov	r3, r0
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d016      	beq.n	800a8cc <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a89e:	2300      	movs	r3, #0
 800a8a0:	9300      	str	r3, [sp, #0]
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	687a      	ldr	r2, [r7, #4]
 800a8a6:	2100      	movs	r1, #0
 800a8a8:	6978      	ldr	r0, [r7, #20]
 800a8aa:	f7ff ff8b 	bl	800a7c4 <xTimerGenericCommand>
 800a8ae:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d10a      	bne.n	800a8cc <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800a8b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ba:	f383 8811 	msr	BASEPRI, r3
 800a8be:	f3bf 8f6f 	isb	sy
 800a8c2:	f3bf 8f4f 	dsb	sy
 800a8c6:	60fb      	str	r3, [r7, #12]
}
 800a8c8:	bf00      	nop
 800a8ca:	e7fe      	b.n	800a8ca <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a8cc:	697b      	ldr	r3, [r7, #20]
 800a8ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d0:	6978      	ldr	r0, [r7, #20]
 800a8d2:	4798      	blx	r3
}
 800a8d4:	bf00      	nop
 800a8d6:	3718      	adds	r7, #24
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}
 800a8dc:	20001148 	.word	0x20001148

0800a8e0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b084      	sub	sp, #16
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a8e8:	f107 0308 	add.w	r3, r7, #8
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f000 f857 	bl	800a9a0 <prvGetNextExpireTime>
 800a8f2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	4619      	mov	r1, r3
 800a8f8:	68f8      	ldr	r0, [r7, #12]
 800a8fa:	f000 f803 	bl	800a904 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a8fe:	f000 f8d5 	bl	800aaac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a902:	e7f1      	b.n	800a8e8 <prvTimerTask+0x8>

0800a904 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b084      	sub	sp, #16
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
 800a90c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a90e:	f7ff f96b 	bl	8009be8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a912:	f107 0308 	add.w	r3, r7, #8
 800a916:	4618      	mov	r0, r3
 800a918:	f000 f866 	bl	800a9e8 <prvSampleTimeNow>
 800a91c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d130      	bne.n	800a986 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d10a      	bne.n	800a940 <prvProcessTimerOrBlockTask+0x3c>
 800a92a:	687a      	ldr	r2, [r7, #4]
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	429a      	cmp	r2, r3
 800a930:	d806      	bhi.n	800a940 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a932:	f7ff f967 	bl	8009c04 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a936:	68f9      	ldr	r1, [r7, #12]
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f7ff ff91 	bl	800a860 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a93e:	e024      	b.n	800a98a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d008      	beq.n	800a958 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a946:	4b13      	ldr	r3, [pc, #76]	; (800a994 <prvProcessTimerOrBlockTask+0x90>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	bf0c      	ite	eq
 800a950:	2301      	moveq	r3, #1
 800a952:	2300      	movne	r3, #0
 800a954:	b2db      	uxtb	r3, r3
 800a956:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a958:	4b0f      	ldr	r3, [pc, #60]	; (800a998 <prvProcessTimerOrBlockTask+0x94>)
 800a95a:	6818      	ldr	r0, [r3, #0]
 800a95c:	687a      	ldr	r2, [r7, #4]
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	1ad3      	subs	r3, r2, r3
 800a962:	683a      	ldr	r2, [r7, #0]
 800a964:	4619      	mov	r1, r3
 800a966:	f7fe fee7 	bl	8009738 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a96a:	f7ff f94b 	bl	8009c04 <xTaskResumeAll>
 800a96e:	4603      	mov	r3, r0
 800a970:	2b00      	cmp	r3, #0
 800a972:	d10a      	bne.n	800a98a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a974:	4b09      	ldr	r3, [pc, #36]	; (800a99c <prvProcessTimerOrBlockTask+0x98>)
 800a976:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a97a:	601a      	str	r2, [r3, #0]
 800a97c:	f3bf 8f4f 	dsb	sy
 800a980:	f3bf 8f6f 	isb	sy
}
 800a984:	e001      	b.n	800a98a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a986:	f7ff f93d 	bl	8009c04 <xTaskResumeAll>
}
 800a98a:	bf00      	nop
 800a98c:	3710      	adds	r7, #16
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}
 800a992:	bf00      	nop
 800a994:	2000114c 	.word	0x2000114c
 800a998:	20001150 	.word	0x20001150
 800a99c:	e000ed04 	.word	0xe000ed04

0800a9a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a9a0:	b480      	push	{r7}
 800a9a2:	b085      	sub	sp, #20
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a9a8:	4b0e      	ldr	r3, [pc, #56]	; (800a9e4 <prvGetNextExpireTime+0x44>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	bf0c      	ite	eq
 800a9b2:	2301      	moveq	r3, #1
 800a9b4:	2300      	movne	r3, #0
 800a9b6:	b2db      	uxtb	r3, r3
 800a9b8:	461a      	mov	r2, r3
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d105      	bne.n	800a9d2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a9c6:	4b07      	ldr	r3, [pc, #28]	; (800a9e4 <prvGetNextExpireTime+0x44>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	68db      	ldr	r3, [r3, #12]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	60fb      	str	r3, [r7, #12]
 800a9d0:	e001      	b.n	800a9d6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	3714      	adds	r7, #20
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e2:	4770      	bx	lr
 800a9e4:	20001148 	.word	0x20001148

0800a9e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b084      	sub	sp, #16
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a9f0:	f7ff f9a4 	bl	8009d3c <xTaskGetTickCount>
 800a9f4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a9f6:	4b0b      	ldr	r3, [pc, #44]	; (800aa24 <prvSampleTimeNow+0x3c>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	68fa      	ldr	r2, [r7, #12]
 800a9fc:	429a      	cmp	r2, r3
 800a9fe:	d205      	bcs.n	800aa0c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800aa00:	f000 f908 	bl	800ac14 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2201      	movs	r2, #1
 800aa08:	601a      	str	r2, [r3, #0]
 800aa0a:	e002      	b.n	800aa12 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2200      	movs	r2, #0
 800aa10:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800aa12:	4a04      	ldr	r2, [pc, #16]	; (800aa24 <prvSampleTimeNow+0x3c>)
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800aa18:	68fb      	ldr	r3, [r7, #12]
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	3710      	adds	r7, #16
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}
 800aa22:	bf00      	nop
 800aa24:	20001158 	.word	0x20001158

0800aa28 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b086      	sub	sp, #24
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	60f8      	str	r0, [r7, #12]
 800aa30:	60b9      	str	r1, [r7, #8]
 800aa32:	607a      	str	r2, [r7, #4]
 800aa34:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800aa36:	2300      	movs	r3, #0
 800aa38:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	68ba      	ldr	r2, [r7, #8]
 800aa3e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	68fa      	ldr	r2, [r7, #12]
 800aa44:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800aa46:	68ba      	ldr	r2, [r7, #8]
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	429a      	cmp	r2, r3
 800aa4c:	d812      	bhi.n	800aa74 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa4e:	687a      	ldr	r2, [r7, #4]
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	1ad2      	subs	r2, r2, r3
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	699b      	ldr	r3, [r3, #24]
 800aa58:	429a      	cmp	r2, r3
 800aa5a:	d302      	bcc.n	800aa62 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	617b      	str	r3, [r7, #20]
 800aa60:	e01b      	b.n	800aa9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800aa62:	4b10      	ldr	r3, [pc, #64]	; (800aaa4 <prvInsertTimerInActiveList+0x7c>)
 800aa64:	681a      	ldr	r2, [r3, #0]
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	3304      	adds	r3, #4
 800aa6a:	4619      	mov	r1, r3
 800aa6c:	4610      	mov	r0, r2
 800aa6e:	f7fe f951 	bl	8008d14 <vListInsert>
 800aa72:	e012      	b.n	800aa9a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800aa74:	687a      	ldr	r2, [r7, #4]
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	429a      	cmp	r2, r3
 800aa7a:	d206      	bcs.n	800aa8a <prvInsertTimerInActiveList+0x62>
 800aa7c:	68ba      	ldr	r2, [r7, #8]
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	429a      	cmp	r2, r3
 800aa82:	d302      	bcc.n	800aa8a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800aa84:	2301      	movs	r3, #1
 800aa86:	617b      	str	r3, [r7, #20]
 800aa88:	e007      	b.n	800aa9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aa8a:	4b07      	ldr	r3, [pc, #28]	; (800aaa8 <prvInsertTimerInActiveList+0x80>)
 800aa8c:	681a      	ldr	r2, [r3, #0]
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	3304      	adds	r3, #4
 800aa92:	4619      	mov	r1, r3
 800aa94:	4610      	mov	r0, r2
 800aa96:	f7fe f93d 	bl	8008d14 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800aa9a:	697b      	ldr	r3, [r7, #20]
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3718      	adds	r7, #24
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}
 800aaa4:	2000114c 	.word	0x2000114c
 800aaa8:	20001148 	.word	0x20001148

0800aaac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b08e      	sub	sp, #56	; 0x38
 800aab0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aab2:	e09d      	b.n	800abf0 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	da18      	bge.n	800aaec <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800aaba:	1d3b      	adds	r3, r7, #4
 800aabc:	3304      	adds	r3, #4
 800aabe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800aac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d10a      	bne.n	800aadc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800aac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaca:	f383 8811 	msr	BASEPRI, r3
 800aace:	f3bf 8f6f 	isb	sy
 800aad2:	f3bf 8f4f 	dsb	sy
 800aad6:	61fb      	str	r3, [r7, #28]
}
 800aad8:	bf00      	nop
 800aada:	e7fe      	b.n	800aada <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800aadc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aae2:	6850      	ldr	r0, [r2, #4]
 800aae4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aae6:	6892      	ldr	r2, [r2, #8]
 800aae8:	4611      	mov	r1, r2
 800aaea:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	db7e      	blt.n	800abf0 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800aaf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaf8:	695b      	ldr	r3, [r3, #20]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d004      	beq.n	800ab08 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aafe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab00:	3304      	adds	r3, #4
 800ab02:	4618      	mov	r0, r3
 800ab04:	f7fe f93f 	bl	8008d86 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ab08:	463b      	mov	r3, r7
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f7ff ff6c 	bl	800a9e8 <prvSampleTimeNow>
 800ab10:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2b09      	cmp	r3, #9
 800ab16:	d86a      	bhi.n	800abee <prvProcessReceivedCommands+0x142>
 800ab18:	a201      	add	r2, pc, #4	; (adr r2, 800ab20 <prvProcessReceivedCommands+0x74>)
 800ab1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab1e:	bf00      	nop
 800ab20:	0800ab49 	.word	0x0800ab49
 800ab24:	0800ab49 	.word	0x0800ab49
 800ab28:	0800ab49 	.word	0x0800ab49
 800ab2c:	0800abf1 	.word	0x0800abf1
 800ab30:	0800aba5 	.word	0x0800aba5
 800ab34:	0800abdd 	.word	0x0800abdd
 800ab38:	0800ab49 	.word	0x0800ab49
 800ab3c:	0800ab49 	.word	0x0800ab49
 800ab40:	0800abf1 	.word	0x0800abf1
 800ab44:	0800aba5 	.word	0x0800aba5
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ab48:	68ba      	ldr	r2, [r7, #8]
 800ab4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab4c:	699b      	ldr	r3, [r3, #24]
 800ab4e:	18d1      	adds	r1, r2, r3
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab56:	f7ff ff67 	bl	800aa28 <prvInsertTimerInActiveList>
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d047      	beq.n	800abf0 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ab60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab66:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800ab68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab6a:	69db      	ldr	r3, [r3, #28]
 800ab6c:	2b01      	cmp	r3, #1
 800ab6e:	d13f      	bne.n	800abf0 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ab70:	68ba      	ldr	r2, [r7, #8]
 800ab72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab74:	699b      	ldr	r3, [r3, #24]
 800ab76:	441a      	add	r2, r3
 800ab78:	2300      	movs	r3, #0
 800ab7a:	9300      	str	r3, [sp, #0]
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	2100      	movs	r1, #0
 800ab80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab82:	f7ff fe1f 	bl	800a7c4 <xTimerGenericCommand>
 800ab86:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ab88:	6a3b      	ldr	r3, [r7, #32]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d130      	bne.n	800abf0 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800ab8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab92:	f383 8811 	msr	BASEPRI, r3
 800ab96:	f3bf 8f6f 	isb	sy
 800ab9a:	f3bf 8f4f 	dsb	sy
 800ab9e:	61bb      	str	r3, [r7, #24]
}
 800aba0:	bf00      	nop
 800aba2:	e7fe      	b.n	800aba2 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800aba4:	68ba      	ldr	r2, [r7, #8]
 800aba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aba8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800abaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abac:	699b      	ldr	r3, [r3, #24]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d10a      	bne.n	800abc8 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800abb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abb6:	f383 8811 	msr	BASEPRI, r3
 800abba:	f3bf 8f6f 	isb	sy
 800abbe:	f3bf 8f4f 	dsb	sy
 800abc2:	617b      	str	r3, [r7, #20]
}
 800abc4:	bf00      	nop
 800abc6:	e7fe      	b.n	800abc6 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800abc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abca:	699a      	ldr	r2, [r3, #24]
 800abcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abce:	18d1      	adds	r1, r2, r3
 800abd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abd6:	f7ff ff27 	bl	800aa28 <prvInsertTimerInActiveList>
					break;
 800abda:	e009      	b.n	800abf0 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800abdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d104      	bne.n	800abf0 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800abe6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abe8:	f000 fbca 	bl	800b380 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800abec:	e000      	b.n	800abf0 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 800abee:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800abf0:	4b07      	ldr	r3, [pc, #28]	; (800ac10 <prvProcessReceivedCommands+0x164>)
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	1d39      	adds	r1, r7, #4
 800abf6:	2200      	movs	r2, #0
 800abf8:	4618      	mov	r0, r3
 800abfa:	f7fe fb83 	bl	8009304 <xQueueReceive>
 800abfe:	4603      	mov	r3, r0
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	f47f af57 	bne.w	800aab4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ac06:	bf00      	nop
 800ac08:	bf00      	nop
 800ac0a:	3730      	adds	r7, #48	; 0x30
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	bd80      	pop	{r7, pc}
 800ac10:	20001150 	.word	0x20001150

0800ac14 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b088      	sub	sp, #32
 800ac18:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ac1a:	e045      	b.n	800aca8 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ac1c:	4b2c      	ldr	r3, [pc, #176]	; (800acd0 <prvSwitchTimerLists+0xbc>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	68db      	ldr	r3, [r3, #12]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ac26:	4b2a      	ldr	r3, [pc, #168]	; (800acd0 <prvSwitchTimerLists+0xbc>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	68db      	ldr	r3, [r3, #12]
 800ac2c:	68db      	ldr	r3, [r3, #12]
 800ac2e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	3304      	adds	r3, #4
 800ac34:	4618      	mov	r0, r3
 800ac36:	f7fe f8a6 	bl	8008d86 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac3e:	68f8      	ldr	r0, [r7, #12]
 800ac40:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	69db      	ldr	r3, [r3, #28]
 800ac46:	2b01      	cmp	r3, #1
 800ac48:	d12e      	bne.n	800aca8 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	699b      	ldr	r3, [r3, #24]
 800ac4e:	693a      	ldr	r2, [r7, #16]
 800ac50:	4413      	add	r3, r2
 800ac52:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ac54:	68ba      	ldr	r2, [r7, #8]
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	429a      	cmp	r2, r3
 800ac5a:	d90e      	bls.n	800ac7a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	68ba      	ldr	r2, [r7, #8]
 800ac60:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	68fa      	ldr	r2, [r7, #12]
 800ac66:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ac68:	4b19      	ldr	r3, [pc, #100]	; (800acd0 <prvSwitchTimerLists+0xbc>)
 800ac6a:	681a      	ldr	r2, [r3, #0]
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	3304      	adds	r3, #4
 800ac70:	4619      	mov	r1, r3
 800ac72:	4610      	mov	r0, r2
 800ac74:	f7fe f84e 	bl	8008d14 <vListInsert>
 800ac78:	e016      	b.n	800aca8 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	9300      	str	r3, [sp, #0]
 800ac7e:	2300      	movs	r3, #0
 800ac80:	693a      	ldr	r2, [r7, #16]
 800ac82:	2100      	movs	r1, #0
 800ac84:	68f8      	ldr	r0, [r7, #12]
 800ac86:	f7ff fd9d 	bl	800a7c4 <xTimerGenericCommand>
 800ac8a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d10a      	bne.n	800aca8 <prvSwitchTimerLists+0x94>
	__asm volatile
 800ac92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac96:	f383 8811 	msr	BASEPRI, r3
 800ac9a:	f3bf 8f6f 	isb	sy
 800ac9e:	f3bf 8f4f 	dsb	sy
 800aca2:	603b      	str	r3, [r7, #0]
}
 800aca4:	bf00      	nop
 800aca6:	e7fe      	b.n	800aca6 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aca8:	4b09      	ldr	r3, [pc, #36]	; (800acd0 <prvSwitchTimerLists+0xbc>)
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d1b4      	bne.n	800ac1c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800acb2:	4b07      	ldr	r3, [pc, #28]	; (800acd0 <prvSwitchTimerLists+0xbc>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800acb8:	4b06      	ldr	r3, [pc, #24]	; (800acd4 <prvSwitchTimerLists+0xc0>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	4a04      	ldr	r2, [pc, #16]	; (800acd0 <prvSwitchTimerLists+0xbc>)
 800acbe:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800acc0:	4a04      	ldr	r2, [pc, #16]	; (800acd4 <prvSwitchTimerLists+0xc0>)
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	6013      	str	r3, [r2, #0]
}
 800acc6:	bf00      	nop
 800acc8:	3718      	adds	r7, #24
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}
 800acce:	bf00      	nop
 800acd0:	20001148 	.word	0x20001148
 800acd4:	2000114c 	.word	0x2000114c

0800acd8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b082      	sub	sp, #8
 800acdc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800acde:	f000 f969 	bl	800afb4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ace2:	4b15      	ldr	r3, [pc, #84]	; (800ad38 <prvCheckForValidListAndQueue+0x60>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d120      	bne.n	800ad2c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800acea:	4814      	ldr	r0, [pc, #80]	; (800ad3c <prvCheckForValidListAndQueue+0x64>)
 800acec:	f7fd ffc1 	bl	8008c72 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800acf0:	4813      	ldr	r0, [pc, #76]	; (800ad40 <prvCheckForValidListAndQueue+0x68>)
 800acf2:	f7fd ffbe 	bl	8008c72 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800acf6:	4b13      	ldr	r3, [pc, #76]	; (800ad44 <prvCheckForValidListAndQueue+0x6c>)
 800acf8:	4a10      	ldr	r2, [pc, #64]	; (800ad3c <prvCheckForValidListAndQueue+0x64>)
 800acfa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800acfc:	4b12      	ldr	r3, [pc, #72]	; (800ad48 <prvCheckForValidListAndQueue+0x70>)
 800acfe:	4a10      	ldr	r2, [pc, #64]	; (800ad40 <prvCheckForValidListAndQueue+0x68>)
 800ad00:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ad02:	2300      	movs	r3, #0
 800ad04:	9300      	str	r3, [sp, #0]
 800ad06:	4b11      	ldr	r3, [pc, #68]	; (800ad4c <prvCheckForValidListAndQueue+0x74>)
 800ad08:	4a11      	ldr	r2, [pc, #68]	; (800ad50 <prvCheckForValidListAndQueue+0x78>)
 800ad0a:	2110      	movs	r1, #16
 800ad0c:	200a      	movs	r0, #10
 800ad0e:	f7fe f8cd 	bl	8008eac <xQueueGenericCreateStatic>
 800ad12:	4603      	mov	r3, r0
 800ad14:	4a08      	ldr	r2, [pc, #32]	; (800ad38 <prvCheckForValidListAndQueue+0x60>)
 800ad16:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ad18:	4b07      	ldr	r3, [pc, #28]	; (800ad38 <prvCheckForValidListAndQueue+0x60>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d005      	beq.n	800ad2c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ad20:	4b05      	ldr	r3, [pc, #20]	; (800ad38 <prvCheckForValidListAndQueue+0x60>)
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	490b      	ldr	r1, [pc, #44]	; (800ad54 <prvCheckForValidListAndQueue+0x7c>)
 800ad26:	4618      	mov	r0, r3
 800ad28:	f7fe fcdc 	bl	80096e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ad2c:	f000 f972 	bl	800b014 <vPortExitCritical>
}
 800ad30:	bf00      	nop
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}
 800ad36:	bf00      	nop
 800ad38:	20001150 	.word	0x20001150
 800ad3c:	20001120 	.word	0x20001120
 800ad40:	20001134 	.word	0x20001134
 800ad44:	20001148 	.word	0x20001148
 800ad48:	2000114c 	.word	0x2000114c
 800ad4c:	200011fc 	.word	0x200011fc
 800ad50:	2000115c 	.word	0x2000115c
 800ad54:	0800f4ec 	.word	0x0800f4ec

0800ad58 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ad58:	b480      	push	{r7}
 800ad5a:	b085      	sub	sp, #20
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	60f8      	str	r0, [r7, #12]
 800ad60:	60b9      	str	r1, [r7, #8]
 800ad62:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	3b04      	subs	r3, #4
 800ad68:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ad70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	3b04      	subs	r3, #4
 800ad76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	f023 0201 	bic.w	r2, r3, #1
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	3b04      	subs	r3, #4
 800ad86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ad88:	4a0c      	ldr	r2, [pc, #48]	; (800adbc <pxPortInitialiseStack+0x64>)
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	3b14      	subs	r3, #20
 800ad92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ad94:	687a      	ldr	r2, [r7, #4]
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	3b04      	subs	r3, #4
 800ad9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	f06f 0202 	mvn.w	r2, #2
 800ada6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	3b20      	subs	r3, #32
 800adac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800adae:	68fb      	ldr	r3, [r7, #12]
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	3714      	adds	r7, #20
 800adb4:	46bd      	mov	sp, r7
 800adb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adba:	4770      	bx	lr
 800adbc:	0800adc1 	.word	0x0800adc1

0800adc0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800adc0:	b480      	push	{r7}
 800adc2:	b085      	sub	sp, #20
 800adc4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800adc6:	2300      	movs	r3, #0
 800adc8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800adca:	4b12      	ldr	r3, [pc, #72]	; (800ae14 <prvTaskExitError+0x54>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800add2:	d00a      	beq.n	800adea <prvTaskExitError+0x2a>
	__asm volatile
 800add4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add8:	f383 8811 	msr	BASEPRI, r3
 800addc:	f3bf 8f6f 	isb	sy
 800ade0:	f3bf 8f4f 	dsb	sy
 800ade4:	60fb      	str	r3, [r7, #12]
}
 800ade6:	bf00      	nop
 800ade8:	e7fe      	b.n	800ade8 <prvTaskExitError+0x28>
	__asm volatile
 800adea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adee:	f383 8811 	msr	BASEPRI, r3
 800adf2:	f3bf 8f6f 	isb	sy
 800adf6:	f3bf 8f4f 	dsb	sy
 800adfa:	60bb      	str	r3, [r7, #8]
}
 800adfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800adfe:	bf00      	nop
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d0fc      	beq.n	800ae00 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ae06:	bf00      	nop
 800ae08:	bf00      	nop
 800ae0a:	3714      	adds	r7, #20
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae12:	4770      	bx	lr
 800ae14:	2000000c 	.word	0x2000000c
	...

0800ae20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ae20:	4b07      	ldr	r3, [pc, #28]	; (800ae40 <pxCurrentTCBConst2>)
 800ae22:	6819      	ldr	r1, [r3, #0]
 800ae24:	6808      	ldr	r0, [r1, #0]
 800ae26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae2a:	f380 8809 	msr	PSP, r0
 800ae2e:	f3bf 8f6f 	isb	sy
 800ae32:	f04f 0000 	mov.w	r0, #0
 800ae36:	f380 8811 	msr	BASEPRI, r0
 800ae3a:	4770      	bx	lr
 800ae3c:	f3af 8000 	nop.w

0800ae40 <pxCurrentTCBConst2>:
 800ae40:	20000ff4 	.word	0x20000ff4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ae44:	bf00      	nop
 800ae46:	bf00      	nop

0800ae48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ae48:	4808      	ldr	r0, [pc, #32]	; (800ae6c <prvPortStartFirstTask+0x24>)
 800ae4a:	6800      	ldr	r0, [r0, #0]
 800ae4c:	6800      	ldr	r0, [r0, #0]
 800ae4e:	f380 8808 	msr	MSP, r0
 800ae52:	f04f 0000 	mov.w	r0, #0
 800ae56:	f380 8814 	msr	CONTROL, r0
 800ae5a:	b662      	cpsie	i
 800ae5c:	b661      	cpsie	f
 800ae5e:	f3bf 8f4f 	dsb	sy
 800ae62:	f3bf 8f6f 	isb	sy
 800ae66:	df00      	svc	0
 800ae68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ae6a:	bf00      	nop
 800ae6c:	e000ed08 	.word	0xe000ed08

0800ae70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b086      	sub	sp, #24
 800ae74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ae76:	4b46      	ldr	r3, [pc, #280]	; (800af90 <xPortStartScheduler+0x120>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	4a46      	ldr	r2, [pc, #280]	; (800af94 <xPortStartScheduler+0x124>)
 800ae7c:	4293      	cmp	r3, r2
 800ae7e:	d10a      	bne.n	800ae96 <xPortStartScheduler+0x26>
	__asm volatile
 800ae80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae84:	f383 8811 	msr	BASEPRI, r3
 800ae88:	f3bf 8f6f 	isb	sy
 800ae8c:	f3bf 8f4f 	dsb	sy
 800ae90:	613b      	str	r3, [r7, #16]
}
 800ae92:	bf00      	nop
 800ae94:	e7fe      	b.n	800ae94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ae96:	4b3e      	ldr	r3, [pc, #248]	; (800af90 <xPortStartScheduler+0x120>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	4a3f      	ldr	r2, [pc, #252]	; (800af98 <xPortStartScheduler+0x128>)
 800ae9c:	4293      	cmp	r3, r2
 800ae9e:	d10a      	bne.n	800aeb6 <xPortStartScheduler+0x46>
	__asm volatile
 800aea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea4:	f383 8811 	msr	BASEPRI, r3
 800aea8:	f3bf 8f6f 	isb	sy
 800aeac:	f3bf 8f4f 	dsb	sy
 800aeb0:	60fb      	str	r3, [r7, #12]
}
 800aeb2:	bf00      	nop
 800aeb4:	e7fe      	b.n	800aeb4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800aeb6:	4b39      	ldr	r3, [pc, #228]	; (800af9c <xPortStartScheduler+0x12c>)
 800aeb8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800aeba:	697b      	ldr	r3, [r7, #20]
 800aebc:	781b      	ldrb	r3, [r3, #0]
 800aebe:	b2db      	uxtb	r3, r3
 800aec0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	22ff      	movs	r2, #255	; 0xff
 800aec6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800aec8:	697b      	ldr	r3, [r7, #20]
 800aeca:	781b      	ldrb	r3, [r3, #0]
 800aecc:	b2db      	uxtb	r3, r3
 800aece:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800aed0:	78fb      	ldrb	r3, [r7, #3]
 800aed2:	b2db      	uxtb	r3, r3
 800aed4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800aed8:	b2da      	uxtb	r2, r3
 800aeda:	4b31      	ldr	r3, [pc, #196]	; (800afa0 <xPortStartScheduler+0x130>)
 800aedc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800aede:	4b31      	ldr	r3, [pc, #196]	; (800afa4 <xPortStartScheduler+0x134>)
 800aee0:	2207      	movs	r2, #7
 800aee2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aee4:	e009      	b.n	800aefa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800aee6:	4b2f      	ldr	r3, [pc, #188]	; (800afa4 <xPortStartScheduler+0x134>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	3b01      	subs	r3, #1
 800aeec:	4a2d      	ldr	r2, [pc, #180]	; (800afa4 <xPortStartScheduler+0x134>)
 800aeee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800aef0:	78fb      	ldrb	r3, [r7, #3]
 800aef2:	b2db      	uxtb	r3, r3
 800aef4:	005b      	lsls	r3, r3, #1
 800aef6:	b2db      	uxtb	r3, r3
 800aef8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aefa:	78fb      	ldrb	r3, [r7, #3]
 800aefc:	b2db      	uxtb	r3, r3
 800aefe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af02:	2b80      	cmp	r3, #128	; 0x80
 800af04:	d0ef      	beq.n	800aee6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800af06:	4b27      	ldr	r3, [pc, #156]	; (800afa4 <xPortStartScheduler+0x134>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	f1c3 0307 	rsb	r3, r3, #7
 800af0e:	2b04      	cmp	r3, #4
 800af10:	d00a      	beq.n	800af28 <xPortStartScheduler+0xb8>
	__asm volatile
 800af12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af16:	f383 8811 	msr	BASEPRI, r3
 800af1a:	f3bf 8f6f 	isb	sy
 800af1e:	f3bf 8f4f 	dsb	sy
 800af22:	60bb      	str	r3, [r7, #8]
}
 800af24:	bf00      	nop
 800af26:	e7fe      	b.n	800af26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800af28:	4b1e      	ldr	r3, [pc, #120]	; (800afa4 <xPortStartScheduler+0x134>)
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	021b      	lsls	r3, r3, #8
 800af2e:	4a1d      	ldr	r2, [pc, #116]	; (800afa4 <xPortStartScheduler+0x134>)
 800af30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800af32:	4b1c      	ldr	r3, [pc, #112]	; (800afa4 <xPortStartScheduler+0x134>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800af3a:	4a1a      	ldr	r2, [pc, #104]	; (800afa4 <xPortStartScheduler+0x134>)
 800af3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	b2da      	uxtb	r2, r3
 800af42:	697b      	ldr	r3, [r7, #20]
 800af44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800af46:	4b18      	ldr	r3, [pc, #96]	; (800afa8 <xPortStartScheduler+0x138>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	4a17      	ldr	r2, [pc, #92]	; (800afa8 <xPortStartScheduler+0x138>)
 800af4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800af50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800af52:	4b15      	ldr	r3, [pc, #84]	; (800afa8 <xPortStartScheduler+0x138>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	4a14      	ldr	r2, [pc, #80]	; (800afa8 <xPortStartScheduler+0x138>)
 800af58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800af5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800af5e:	f000 f8dd 	bl	800b11c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800af62:	4b12      	ldr	r3, [pc, #72]	; (800afac <xPortStartScheduler+0x13c>)
 800af64:	2200      	movs	r2, #0
 800af66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800af68:	f000 f8fc 	bl	800b164 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800af6c:	4b10      	ldr	r3, [pc, #64]	; (800afb0 <xPortStartScheduler+0x140>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	4a0f      	ldr	r2, [pc, #60]	; (800afb0 <xPortStartScheduler+0x140>)
 800af72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800af76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800af78:	f7ff ff66 	bl	800ae48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800af7c:	f7fe ffac 	bl	8009ed8 <vTaskSwitchContext>
	prvTaskExitError();
 800af80:	f7ff ff1e 	bl	800adc0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800af84:	2300      	movs	r3, #0
}
 800af86:	4618      	mov	r0, r3
 800af88:	3718      	adds	r7, #24
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}
 800af8e:	bf00      	nop
 800af90:	e000ed00 	.word	0xe000ed00
 800af94:	410fc271 	.word	0x410fc271
 800af98:	410fc270 	.word	0x410fc270
 800af9c:	e000e400 	.word	0xe000e400
 800afa0:	20001244 	.word	0x20001244
 800afa4:	20001248 	.word	0x20001248
 800afa8:	e000ed20 	.word	0xe000ed20
 800afac:	2000000c 	.word	0x2000000c
 800afb0:	e000ef34 	.word	0xe000ef34

0800afb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800afb4:	b480      	push	{r7}
 800afb6:	b083      	sub	sp, #12
 800afb8:	af00      	add	r7, sp, #0
	__asm volatile
 800afba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afbe:	f383 8811 	msr	BASEPRI, r3
 800afc2:	f3bf 8f6f 	isb	sy
 800afc6:	f3bf 8f4f 	dsb	sy
 800afca:	607b      	str	r3, [r7, #4]
}
 800afcc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800afce:	4b0f      	ldr	r3, [pc, #60]	; (800b00c <vPortEnterCritical+0x58>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	3301      	adds	r3, #1
 800afd4:	4a0d      	ldr	r2, [pc, #52]	; (800b00c <vPortEnterCritical+0x58>)
 800afd6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800afd8:	4b0c      	ldr	r3, [pc, #48]	; (800b00c <vPortEnterCritical+0x58>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	2b01      	cmp	r3, #1
 800afde:	d10f      	bne.n	800b000 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800afe0:	4b0b      	ldr	r3, [pc, #44]	; (800b010 <vPortEnterCritical+0x5c>)
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	b2db      	uxtb	r3, r3
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d00a      	beq.n	800b000 <vPortEnterCritical+0x4c>
	__asm volatile
 800afea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afee:	f383 8811 	msr	BASEPRI, r3
 800aff2:	f3bf 8f6f 	isb	sy
 800aff6:	f3bf 8f4f 	dsb	sy
 800affa:	603b      	str	r3, [r7, #0]
}
 800affc:	bf00      	nop
 800affe:	e7fe      	b.n	800affe <vPortEnterCritical+0x4a>
	}
}
 800b000:	bf00      	nop
 800b002:	370c      	adds	r7, #12
 800b004:	46bd      	mov	sp, r7
 800b006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00a:	4770      	bx	lr
 800b00c:	2000000c 	.word	0x2000000c
 800b010:	e000ed04 	.word	0xe000ed04

0800b014 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b014:	b480      	push	{r7}
 800b016:	b083      	sub	sp, #12
 800b018:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b01a:	4b12      	ldr	r3, [pc, #72]	; (800b064 <vPortExitCritical+0x50>)
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d10a      	bne.n	800b038 <vPortExitCritical+0x24>
	__asm volatile
 800b022:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b026:	f383 8811 	msr	BASEPRI, r3
 800b02a:	f3bf 8f6f 	isb	sy
 800b02e:	f3bf 8f4f 	dsb	sy
 800b032:	607b      	str	r3, [r7, #4]
}
 800b034:	bf00      	nop
 800b036:	e7fe      	b.n	800b036 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b038:	4b0a      	ldr	r3, [pc, #40]	; (800b064 <vPortExitCritical+0x50>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	3b01      	subs	r3, #1
 800b03e:	4a09      	ldr	r2, [pc, #36]	; (800b064 <vPortExitCritical+0x50>)
 800b040:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b042:	4b08      	ldr	r3, [pc, #32]	; (800b064 <vPortExitCritical+0x50>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d105      	bne.n	800b056 <vPortExitCritical+0x42>
 800b04a:	2300      	movs	r3, #0
 800b04c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	f383 8811 	msr	BASEPRI, r3
}
 800b054:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b056:	bf00      	nop
 800b058:	370c      	adds	r7, #12
 800b05a:	46bd      	mov	sp, r7
 800b05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b060:	4770      	bx	lr
 800b062:	bf00      	nop
 800b064:	2000000c 	.word	0x2000000c
	...

0800b070 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b070:	f3ef 8009 	mrs	r0, PSP
 800b074:	f3bf 8f6f 	isb	sy
 800b078:	4b15      	ldr	r3, [pc, #84]	; (800b0d0 <pxCurrentTCBConst>)
 800b07a:	681a      	ldr	r2, [r3, #0]
 800b07c:	f01e 0f10 	tst.w	lr, #16
 800b080:	bf08      	it	eq
 800b082:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b086:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b08a:	6010      	str	r0, [r2, #0]
 800b08c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b090:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b094:	f380 8811 	msr	BASEPRI, r0
 800b098:	f3bf 8f4f 	dsb	sy
 800b09c:	f3bf 8f6f 	isb	sy
 800b0a0:	f7fe ff1a 	bl	8009ed8 <vTaskSwitchContext>
 800b0a4:	f04f 0000 	mov.w	r0, #0
 800b0a8:	f380 8811 	msr	BASEPRI, r0
 800b0ac:	bc09      	pop	{r0, r3}
 800b0ae:	6819      	ldr	r1, [r3, #0]
 800b0b0:	6808      	ldr	r0, [r1, #0]
 800b0b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0b6:	f01e 0f10 	tst.w	lr, #16
 800b0ba:	bf08      	it	eq
 800b0bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b0c0:	f380 8809 	msr	PSP, r0
 800b0c4:	f3bf 8f6f 	isb	sy
 800b0c8:	4770      	bx	lr
 800b0ca:	bf00      	nop
 800b0cc:	f3af 8000 	nop.w

0800b0d0 <pxCurrentTCBConst>:
 800b0d0:	20000ff4 	.word	0x20000ff4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b0d4:	bf00      	nop
 800b0d6:	bf00      	nop

0800b0d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b082      	sub	sp, #8
 800b0dc:	af00      	add	r7, sp, #0
	__asm volatile
 800b0de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0e2:	f383 8811 	msr	BASEPRI, r3
 800b0e6:	f3bf 8f6f 	isb	sy
 800b0ea:	f3bf 8f4f 	dsb	sy
 800b0ee:	607b      	str	r3, [r7, #4]
}
 800b0f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b0f2:	f7fe fe33 	bl	8009d5c <xTaskIncrementTick>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d003      	beq.n	800b104 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b0fc:	4b06      	ldr	r3, [pc, #24]	; (800b118 <SysTick_Handler+0x40>)
 800b0fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b102:	601a      	str	r2, [r3, #0]
 800b104:	2300      	movs	r3, #0
 800b106:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	f383 8811 	msr	BASEPRI, r3
}
 800b10e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b110:	bf00      	nop
 800b112:	3708      	adds	r7, #8
 800b114:	46bd      	mov	sp, r7
 800b116:	bd80      	pop	{r7, pc}
 800b118:	e000ed04 	.word	0xe000ed04

0800b11c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b11c:	b480      	push	{r7}
 800b11e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b120:	4b0b      	ldr	r3, [pc, #44]	; (800b150 <vPortSetupTimerInterrupt+0x34>)
 800b122:	2200      	movs	r2, #0
 800b124:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b126:	4b0b      	ldr	r3, [pc, #44]	; (800b154 <vPortSetupTimerInterrupt+0x38>)
 800b128:	2200      	movs	r2, #0
 800b12a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b12c:	4b0a      	ldr	r3, [pc, #40]	; (800b158 <vPortSetupTimerInterrupt+0x3c>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	4a0a      	ldr	r2, [pc, #40]	; (800b15c <vPortSetupTimerInterrupt+0x40>)
 800b132:	fba2 2303 	umull	r2, r3, r2, r3
 800b136:	099b      	lsrs	r3, r3, #6
 800b138:	4a09      	ldr	r2, [pc, #36]	; (800b160 <vPortSetupTimerInterrupt+0x44>)
 800b13a:	3b01      	subs	r3, #1
 800b13c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b13e:	4b04      	ldr	r3, [pc, #16]	; (800b150 <vPortSetupTimerInterrupt+0x34>)
 800b140:	2207      	movs	r2, #7
 800b142:	601a      	str	r2, [r3, #0]
}
 800b144:	bf00      	nop
 800b146:	46bd      	mov	sp, r7
 800b148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14c:	4770      	bx	lr
 800b14e:	bf00      	nop
 800b150:	e000e010 	.word	0xe000e010
 800b154:	e000e018 	.word	0xe000e018
 800b158:	20000000 	.word	0x20000000
 800b15c:	10624dd3 	.word	0x10624dd3
 800b160:	e000e014 	.word	0xe000e014

0800b164 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b164:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b174 <vPortEnableVFP+0x10>
 800b168:	6801      	ldr	r1, [r0, #0]
 800b16a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b16e:	6001      	str	r1, [r0, #0]
 800b170:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b172:	bf00      	nop
 800b174:	e000ed88 	.word	0xe000ed88

0800b178 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b178:	b480      	push	{r7}
 800b17a:	b085      	sub	sp, #20
 800b17c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b17e:	f3ef 8305 	mrs	r3, IPSR
 800b182:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	2b0f      	cmp	r3, #15
 800b188:	d914      	bls.n	800b1b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b18a:	4a17      	ldr	r2, [pc, #92]	; (800b1e8 <vPortValidateInterruptPriority+0x70>)
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	4413      	add	r3, r2
 800b190:	781b      	ldrb	r3, [r3, #0]
 800b192:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b194:	4b15      	ldr	r3, [pc, #84]	; (800b1ec <vPortValidateInterruptPriority+0x74>)
 800b196:	781b      	ldrb	r3, [r3, #0]
 800b198:	7afa      	ldrb	r2, [r7, #11]
 800b19a:	429a      	cmp	r2, r3
 800b19c:	d20a      	bcs.n	800b1b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a2:	f383 8811 	msr	BASEPRI, r3
 800b1a6:	f3bf 8f6f 	isb	sy
 800b1aa:	f3bf 8f4f 	dsb	sy
 800b1ae:	607b      	str	r3, [r7, #4]
}
 800b1b0:	bf00      	nop
 800b1b2:	e7fe      	b.n	800b1b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b1b4:	4b0e      	ldr	r3, [pc, #56]	; (800b1f0 <vPortValidateInterruptPriority+0x78>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b1bc:	4b0d      	ldr	r3, [pc, #52]	; (800b1f4 <vPortValidateInterruptPriority+0x7c>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	429a      	cmp	r2, r3
 800b1c2:	d90a      	bls.n	800b1da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b1c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1c8:	f383 8811 	msr	BASEPRI, r3
 800b1cc:	f3bf 8f6f 	isb	sy
 800b1d0:	f3bf 8f4f 	dsb	sy
 800b1d4:	603b      	str	r3, [r7, #0]
}
 800b1d6:	bf00      	nop
 800b1d8:	e7fe      	b.n	800b1d8 <vPortValidateInterruptPriority+0x60>
	}
 800b1da:	bf00      	nop
 800b1dc:	3714      	adds	r7, #20
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e4:	4770      	bx	lr
 800b1e6:	bf00      	nop
 800b1e8:	e000e3f0 	.word	0xe000e3f0
 800b1ec:	20001244 	.word	0x20001244
 800b1f0:	e000ed0c 	.word	0xe000ed0c
 800b1f4:	20001248 	.word	0x20001248

0800b1f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b08a      	sub	sp, #40	; 0x28
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b200:	2300      	movs	r3, #0
 800b202:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b204:	f7fe fcf0 	bl	8009be8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b208:	4b58      	ldr	r3, [pc, #352]	; (800b36c <pvPortMalloc+0x174>)
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d101      	bne.n	800b214 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b210:	f000 f910 	bl	800b434 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b214:	4b56      	ldr	r3, [pc, #344]	; (800b370 <pvPortMalloc+0x178>)
 800b216:	681a      	ldr	r2, [r3, #0]
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	4013      	ands	r3, r2
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	f040 808e 	bne.w	800b33e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d01d      	beq.n	800b264 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b228:	2208      	movs	r2, #8
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	4413      	add	r3, r2
 800b22e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	f003 0307 	and.w	r3, r3, #7
 800b236:	2b00      	cmp	r3, #0
 800b238:	d014      	beq.n	800b264 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f023 0307 	bic.w	r3, r3, #7
 800b240:	3308      	adds	r3, #8
 800b242:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	f003 0307 	and.w	r3, r3, #7
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d00a      	beq.n	800b264 <pvPortMalloc+0x6c>
	__asm volatile
 800b24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b252:	f383 8811 	msr	BASEPRI, r3
 800b256:	f3bf 8f6f 	isb	sy
 800b25a:	f3bf 8f4f 	dsb	sy
 800b25e:	617b      	str	r3, [r7, #20]
}
 800b260:	bf00      	nop
 800b262:	e7fe      	b.n	800b262 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d069      	beq.n	800b33e <pvPortMalloc+0x146>
 800b26a:	4b42      	ldr	r3, [pc, #264]	; (800b374 <pvPortMalloc+0x17c>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	687a      	ldr	r2, [r7, #4]
 800b270:	429a      	cmp	r2, r3
 800b272:	d864      	bhi.n	800b33e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b274:	4b40      	ldr	r3, [pc, #256]	; (800b378 <pvPortMalloc+0x180>)
 800b276:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b278:	4b3f      	ldr	r3, [pc, #252]	; (800b378 <pvPortMalloc+0x180>)
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b27e:	e004      	b.n	800b28a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b282:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b28c:	685b      	ldr	r3, [r3, #4]
 800b28e:	687a      	ldr	r2, [r7, #4]
 800b290:	429a      	cmp	r2, r3
 800b292:	d903      	bls.n	800b29c <pvPortMalloc+0xa4>
 800b294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d1f1      	bne.n	800b280 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b29c:	4b33      	ldr	r3, [pc, #204]	; (800b36c <pvPortMalloc+0x174>)
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2a2:	429a      	cmp	r2, r3
 800b2a4:	d04b      	beq.n	800b33e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b2a6:	6a3b      	ldr	r3, [r7, #32]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	2208      	movs	r2, #8
 800b2ac:	4413      	add	r3, r2
 800b2ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2b2:	681a      	ldr	r2, [r3, #0]
 800b2b4:	6a3b      	ldr	r3, [r7, #32]
 800b2b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ba:	685a      	ldr	r2, [r3, #4]
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	1ad2      	subs	r2, r2, r3
 800b2c0:	2308      	movs	r3, #8
 800b2c2:	005b      	lsls	r3, r3, #1
 800b2c4:	429a      	cmp	r2, r3
 800b2c6:	d91f      	bls.n	800b308 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b2c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	4413      	add	r3, r2
 800b2ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b2d0:	69bb      	ldr	r3, [r7, #24]
 800b2d2:	f003 0307 	and.w	r3, r3, #7
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d00a      	beq.n	800b2f0 <pvPortMalloc+0xf8>
	__asm volatile
 800b2da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2de:	f383 8811 	msr	BASEPRI, r3
 800b2e2:	f3bf 8f6f 	isb	sy
 800b2e6:	f3bf 8f4f 	dsb	sy
 800b2ea:	613b      	str	r3, [r7, #16]
}
 800b2ec:	bf00      	nop
 800b2ee:	e7fe      	b.n	800b2ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2f2:	685a      	ldr	r2, [r3, #4]
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	1ad2      	subs	r2, r2, r3
 800b2f8:	69bb      	ldr	r3, [r7, #24]
 800b2fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2fe:	687a      	ldr	r2, [r7, #4]
 800b300:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b302:	69b8      	ldr	r0, [r7, #24]
 800b304:	f000 f8f8 	bl	800b4f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b308:	4b1a      	ldr	r3, [pc, #104]	; (800b374 <pvPortMalloc+0x17c>)
 800b30a:	681a      	ldr	r2, [r3, #0]
 800b30c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b30e:	685b      	ldr	r3, [r3, #4]
 800b310:	1ad3      	subs	r3, r2, r3
 800b312:	4a18      	ldr	r2, [pc, #96]	; (800b374 <pvPortMalloc+0x17c>)
 800b314:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b316:	4b17      	ldr	r3, [pc, #92]	; (800b374 <pvPortMalloc+0x17c>)
 800b318:	681a      	ldr	r2, [r3, #0]
 800b31a:	4b18      	ldr	r3, [pc, #96]	; (800b37c <pvPortMalloc+0x184>)
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	429a      	cmp	r2, r3
 800b320:	d203      	bcs.n	800b32a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b322:	4b14      	ldr	r3, [pc, #80]	; (800b374 <pvPortMalloc+0x17c>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	4a15      	ldr	r2, [pc, #84]	; (800b37c <pvPortMalloc+0x184>)
 800b328:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b32c:	685a      	ldr	r2, [r3, #4]
 800b32e:	4b10      	ldr	r3, [pc, #64]	; (800b370 <pvPortMalloc+0x178>)
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	431a      	orrs	r2, r3
 800b334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b336:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b33a:	2200      	movs	r2, #0
 800b33c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b33e:	f7fe fc61 	bl	8009c04 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b342:	69fb      	ldr	r3, [r7, #28]
 800b344:	f003 0307 	and.w	r3, r3, #7
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d00a      	beq.n	800b362 <pvPortMalloc+0x16a>
	__asm volatile
 800b34c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b350:	f383 8811 	msr	BASEPRI, r3
 800b354:	f3bf 8f6f 	isb	sy
 800b358:	f3bf 8f4f 	dsb	sy
 800b35c:	60fb      	str	r3, [r7, #12]
}
 800b35e:	bf00      	nop
 800b360:	e7fe      	b.n	800b360 <pvPortMalloc+0x168>
	return pvReturn;
 800b362:	69fb      	ldr	r3, [r7, #28]
}
 800b364:	4618      	mov	r0, r3
 800b366:	3728      	adds	r7, #40	; 0x28
 800b368:	46bd      	mov	sp, r7
 800b36a:	bd80      	pop	{r7, pc}
 800b36c:	20002154 	.word	0x20002154
 800b370:	20002160 	.word	0x20002160
 800b374:	20002158 	.word	0x20002158
 800b378:	2000214c 	.word	0x2000214c
 800b37c:	2000215c 	.word	0x2000215c

0800b380 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b086      	sub	sp, #24
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d048      	beq.n	800b424 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b392:	2308      	movs	r3, #8
 800b394:	425b      	negs	r3, r3
 800b396:	697a      	ldr	r2, [r7, #20]
 800b398:	4413      	add	r3, r2
 800b39a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b39c:	697b      	ldr	r3, [r7, #20]
 800b39e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	685a      	ldr	r2, [r3, #4]
 800b3a4:	4b21      	ldr	r3, [pc, #132]	; (800b42c <vPortFree+0xac>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	4013      	ands	r3, r2
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d10a      	bne.n	800b3c4 <vPortFree+0x44>
	__asm volatile
 800b3ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3b2:	f383 8811 	msr	BASEPRI, r3
 800b3b6:	f3bf 8f6f 	isb	sy
 800b3ba:	f3bf 8f4f 	dsb	sy
 800b3be:	60fb      	str	r3, [r7, #12]
}
 800b3c0:	bf00      	nop
 800b3c2:	e7fe      	b.n	800b3c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b3c4:	693b      	ldr	r3, [r7, #16]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d00a      	beq.n	800b3e2 <vPortFree+0x62>
	__asm volatile
 800b3cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3d0:	f383 8811 	msr	BASEPRI, r3
 800b3d4:	f3bf 8f6f 	isb	sy
 800b3d8:	f3bf 8f4f 	dsb	sy
 800b3dc:	60bb      	str	r3, [r7, #8]
}
 800b3de:	bf00      	nop
 800b3e0:	e7fe      	b.n	800b3e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b3e2:	693b      	ldr	r3, [r7, #16]
 800b3e4:	685a      	ldr	r2, [r3, #4]
 800b3e6:	4b11      	ldr	r3, [pc, #68]	; (800b42c <vPortFree+0xac>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	4013      	ands	r3, r2
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d019      	beq.n	800b424 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b3f0:	693b      	ldr	r3, [r7, #16]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d115      	bne.n	800b424 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b3f8:	693b      	ldr	r3, [r7, #16]
 800b3fa:	685a      	ldr	r2, [r3, #4]
 800b3fc:	4b0b      	ldr	r3, [pc, #44]	; (800b42c <vPortFree+0xac>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	43db      	mvns	r3, r3
 800b402:	401a      	ands	r2, r3
 800b404:	693b      	ldr	r3, [r7, #16]
 800b406:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b408:	f7fe fbee 	bl	8009be8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b40c:	693b      	ldr	r3, [r7, #16]
 800b40e:	685a      	ldr	r2, [r3, #4]
 800b410:	4b07      	ldr	r3, [pc, #28]	; (800b430 <vPortFree+0xb0>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	4413      	add	r3, r2
 800b416:	4a06      	ldr	r2, [pc, #24]	; (800b430 <vPortFree+0xb0>)
 800b418:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b41a:	6938      	ldr	r0, [r7, #16]
 800b41c:	f000 f86c 	bl	800b4f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b420:	f7fe fbf0 	bl	8009c04 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b424:	bf00      	nop
 800b426:	3718      	adds	r7, #24
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd80      	pop	{r7, pc}
 800b42c:	20002160 	.word	0x20002160
 800b430:	20002158 	.word	0x20002158

0800b434 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b434:	b480      	push	{r7}
 800b436:	b085      	sub	sp, #20
 800b438:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b43a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800b43e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b440:	4b27      	ldr	r3, [pc, #156]	; (800b4e0 <prvHeapInit+0xac>)
 800b442:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	f003 0307 	and.w	r3, r3, #7
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d00c      	beq.n	800b468 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	3307      	adds	r3, #7
 800b452:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	f023 0307 	bic.w	r3, r3, #7
 800b45a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b45c:	68ba      	ldr	r2, [r7, #8]
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	1ad3      	subs	r3, r2, r3
 800b462:	4a1f      	ldr	r2, [pc, #124]	; (800b4e0 <prvHeapInit+0xac>)
 800b464:	4413      	add	r3, r2
 800b466:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b46c:	4a1d      	ldr	r2, [pc, #116]	; (800b4e4 <prvHeapInit+0xb0>)
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b472:	4b1c      	ldr	r3, [pc, #112]	; (800b4e4 <prvHeapInit+0xb0>)
 800b474:	2200      	movs	r2, #0
 800b476:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	68ba      	ldr	r2, [r7, #8]
 800b47c:	4413      	add	r3, r2
 800b47e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b480:	2208      	movs	r2, #8
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	1a9b      	subs	r3, r3, r2
 800b486:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	f023 0307 	bic.w	r3, r3, #7
 800b48e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	4a15      	ldr	r2, [pc, #84]	; (800b4e8 <prvHeapInit+0xb4>)
 800b494:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b496:	4b14      	ldr	r3, [pc, #80]	; (800b4e8 <prvHeapInit+0xb4>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	2200      	movs	r2, #0
 800b49c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b49e:	4b12      	ldr	r3, [pc, #72]	; (800b4e8 <prvHeapInit+0xb4>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	68fa      	ldr	r2, [r7, #12]
 800b4ae:	1ad2      	subs	r2, r2, r3
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b4b4:	4b0c      	ldr	r3, [pc, #48]	; (800b4e8 <prvHeapInit+0xb4>)
 800b4b6:	681a      	ldr	r2, [r3, #0]
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	685b      	ldr	r3, [r3, #4]
 800b4c0:	4a0a      	ldr	r2, [pc, #40]	; (800b4ec <prvHeapInit+0xb8>)
 800b4c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	685b      	ldr	r3, [r3, #4]
 800b4c8:	4a09      	ldr	r2, [pc, #36]	; (800b4f0 <prvHeapInit+0xbc>)
 800b4ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b4cc:	4b09      	ldr	r3, [pc, #36]	; (800b4f4 <prvHeapInit+0xc0>)
 800b4ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b4d2:	601a      	str	r2, [r3, #0]
}
 800b4d4:	bf00      	nop
 800b4d6:	3714      	adds	r7, #20
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4de:	4770      	bx	lr
 800b4e0:	2000124c 	.word	0x2000124c
 800b4e4:	2000214c 	.word	0x2000214c
 800b4e8:	20002154 	.word	0x20002154
 800b4ec:	2000215c 	.word	0x2000215c
 800b4f0:	20002158 	.word	0x20002158
 800b4f4:	20002160 	.word	0x20002160

0800b4f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	b085      	sub	sp, #20
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b500:	4b28      	ldr	r3, [pc, #160]	; (800b5a4 <prvInsertBlockIntoFreeList+0xac>)
 800b502:	60fb      	str	r3, [r7, #12]
 800b504:	e002      	b.n	800b50c <prvInsertBlockIntoFreeList+0x14>
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	60fb      	str	r3, [r7, #12]
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	687a      	ldr	r2, [r7, #4]
 800b512:	429a      	cmp	r2, r3
 800b514:	d8f7      	bhi.n	800b506 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	685b      	ldr	r3, [r3, #4]
 800b51e:	68ba      	ldr	r2, [r7, #8]
 800b520:	4413      	add	r3, r2
 800b522:	687a      	ldr	r2, [r7, #4]
 800b524:	429a      	cmp	r2, r3
 800b526:	d108      	bne.n	800b53a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	685a      	ldr	r2, [r3, #4]
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	685b      	ldr	r3, [r3, #4]
 800b530:	441a      	add	r2, r3
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	685b      	ldr	r3, [r3, #4]
 800b542:	68ba      	ldr	r2, [r7, #8]
 800b544:	441a      	add	r2, r3
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	429a      	cmp	r2, r3
 800b54c:	d118      	bne.n	800b580 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	681a      	ldr	r2, [r3, #0]
 800b552:	4b15      	ldr	r3, [pc, #84]	; (800b5a8 <prvInsertBlockIntoFreeList+0xb0>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	429a      	cmp	r2, r3
 800b558:	d00d      	beq.n	800b576 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	685a      	ldr	r2, [r3, #4]
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	685b      	ldr	r3, [r3, #4]
 800b564:	441a      	add	r2, r3
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	681a      	ldr	r2, [r3, #0]
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	601a      	str	r2, [r3, #0]
 800b574:	e008      	b.n	800b588 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b576:	4b0c      	ldr	r3, [pc, #48]	; (800b5a8 <prvInsertBlockIntoFreeList+0xb0>)
 800b578:	681a      	ldr	r2, [r3, #0]
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	601a      	str	r2, [r3, #0]
 800b57e:	e003      	b.n	800b588 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	681a      	ldr	r2, [r3, #0]
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b588:	68fa      	ldr	r2, [r7, #12]
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	429a      	cmp	r2, r3
 800b58e:	d002      	beq.n	800b596 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	687a      	ldr	r2, [r7, #4]
 800b594:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b596:	bf00      	nop
 800b598:	3714      	adds	r7, #20
 800b59a:	46bd      	mov	sp, r7
 800b59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a0:	4770      	bx	lr
 800b5a2:	bf00      	nop
 800b5a4:	2000214c 	.word	0x2000214c
 800b5a8:	20002154 	.word	0x20002154

0800b5ac <__cvt>:
 800b5ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b5b0:	ec55 4b10 	vmov	r4, r5, d0
 800b5b4:	2d00      	cmp	r5, #0
 800b5b6:	460e      	mov	r6, r1
 800b5b8:	4619      	mov	r1, r3
 800b5ba:	462b      	mov	r3, r5
 800b5bc:	bfbb      	ittet	lt
 800b5be:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b5c2:	461d      	movlt	r5, r3
 800b5c4:	2300      	movge	r3, #0
 800b5c6:	232d      	movlt	r3, #45	; 0x2d
 800b5c8:	700b      	strb	r3, [r1, #0]
 800b5ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b5cc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b5d0:	4691      	mov	r9, r2
 800b5d2:	f023 0820 	bic.w	r8, r3, #32
 800b5d6:	bfbc      	itt	lt
 800b5d8:	4622      	movlt	r2, r4
 800b5da:	4614      	movlt	r4, r2
 800b5dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b5e0:	d005      	beq.n	800b5ee <__cvt+0x42>
 800b5e2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b5e6:	d100      	bne.n	800b5ea <__cvt+0x3e>
 800b5e8:	3601      	adds	r6, #1
 800b5ea:	2102      	movs	r1, #2
 800b5ec:	e000      	b.n	800b5f0 <__cvt+0x44>
 800b5ee:	2103      	movs	r1, #3
 800b5f0:	ab03      	add	r3, sp, #12
 800b5f2:	9301      	str	r3, [sp, #4]
 800b5f4:	ab02      	add	r3, sp, #8
 800b5f6:	9300      	str	r3, [sp, #0]
 800b5f8:	ec45 4b10 	vmov	d0, r4, r5
 800b5fc:	4653      	mov	r3, sl
 800b5fe:	4632      	mov	r2, r6
 800b600:	f000 fe62 	bl	800c2c8 <_dtoa_r>
 800b604:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b608:	4607      	mov	r7, r0
 800b60a:	d102      	bne.n	800b612 <__cvt+0x66>
 800b60c:	f019 0f01 	tst.w	r9, #1
 800b610:	d022      	beq.n	800b658 <__cvt+0xac>
 800b612:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b616:	eb07 0906 	add.w	r9, r7, r6
 800b61a:	d110      	bne.n	800b63e <__cvt+0x92>
 800b61c:	783b      	ldrb	r3, [r7, #0]
 800b61e:	2b30      	cmp	r3, #48	; 0x30
 800b620:	d10a      	bne.n	800b638 <__cvt+0x8c>
 800b622:	2200      	movs	r2, #0
 800b624:	2300      	movs	r3, #0
 800b626:	4620      	mov	r0, r4
 800b628:	4629      	mov	r1, r5
 800b62a:	f7f5 fa5d 	bl	8000ae8 <__aeabi_dcmpeq>
 800b62e:	b918      	cbnz	r0, 800b638 <__cvt+0x8c>
 800b630:	f1c6 0601 	rsb	r6, r6, #1
 800b634:	f8ca 6000 	str.w	r6, [sl]
 800b638:	f8da 3000 	ldr.w	r3, [sl]
 800b63c:	4499      	add	r9, r3
 800b63e:	2200      	movs	r2, #0
 800b640:	2300      	movs	r3, #0
 800b642:	4620      	mov	r0, r4
 800b644:	4629      	mov	r1, r5
 800b646:	f7f5 fa4f 	bl	8000ae8 <__aeabi_dcmpeq>
 800b64a:	b108      	cbz	r0, 800b650 <__cvt+0xa4>
 800b64c:	f8cd 900c 	str.w	r9, [sp, #12]
 800b650:	2230      	movs	r2, #48	; 0x30
 800b652:	9b03      	ldr	r3, [sp, #12]
 800b654:	454b      	cmp	r3, r9
 800b656:	d307      	bcc.n	800b668 <__cvt+0xbc>
 800b658:	9b03      	ldr	r3, [sp, #12]
 800b65a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b65c:	1bdb      	subs	r3, r3, r7
 800b65e:	4638      	mov	r0, r7
 800b660:	6013      	str	r3, [r2, #0]
 800b662:	b004      	add	sp, #16
 800b664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b668:	1c59      	adds	r1, r3, #1
 800b66a:	9103      	str	r1, [sp, #12]
 800b66c:	701a      	strb	r2, [r3, #0]
 800b66e:	e7f0      	b.n	800b652 <__cvt+0xa6>

0800b670 <__exponent>:
 800b670:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b672:	4603      	mov	r3, r0
 800b674:	2900      	cmp	r1, #0
 800b676:	bfb8      	it	lt
 800b678:	4249      	neglt	r1, r1
 800b67a:	f803 2b02 	strb.w	r2, [r3], #2
 800b67e:	bfb4      	ite	lt
 800b680:	222d      	movlt	r2, #45	; 0x2d
 800b682:	222b      	movge	r2, #43	; 0x2b
 800b684:	2909      	cmp	r1, #9
 800b686:	7042      	strb	r2, [r0, #1]
 800b688:	dd2a      	ble.n	800b6e0 <__exponent+0x70>
 800b68a:	f10d 0207 	add.w	r2, sp, #7
 800b68e:	4617      	mov	r7, r2
 800b690:	260a      	movs	r6, #10
 800b692:	4694      	mov	ip, r2
 800b694:	fb91 f5f6 	sdiv	r5, r1, r6
 800b698:	fb06 1415 	mls	r4, r6, r5, r1
 800b69c:	3430      	adds	r4, #48	; 0x30
 800b69e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800b6a2:	460c      	mov	r4, r1
 800b6a4:	2c63      	cmp	r4, #99	; 0x63
 800b6a6:	f102 32ff 	add.w	r2, r2, #4294967295
 800b6aa:	4629      	mov	r1, r5
 800b6ac:	dcf1      	bgt.n	800b692 <__exponent+0x22>
 800b6ae:	3130      	adds	r1, #48	; 0x30
 800b6b0:	f1ac 0402 	sub.w	r4, ip, #2
 800b6b4:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b6b8:	1c41      	adds	r1, r0, #1
 800b6ba:	4622      	mov	r2, r4
 800b6bc:	42ba      	cmp	r2, r7
 800b6be:	d30a      	bcc.n	800b6d6 <__exponent+0x66>
 800b6c0:	f10d 0209 	add.w	r2, sp, #9
 800b6c4:	eba2 020c 	sub.w	r2, r2, ip
 800b6c8:	42bc      	cmp	r4, r7
 800b6ca:	bf88      	it	hi
 800b6cc:	2200      	movhi	r2, #0
 800b6ce:	4413      	add	r3, r2
 800b6d0:	1a18      	subs	r0, r3, r0
 800b6d2:	b003      	add	sp, #12
 800b6d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6d6:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b6da:	f801 5f01 	strb.w	r5, [r1, #1]!
 800b6de:	e7ed      	b.n	800b6bc <__exponent+0x4c>
 800b6e0:	2330      	movs	r3, #48	; 0x30
 800b6e2:	3130      	adds	r1, #48	; 0x30
 800b6e4:	7083      	strb	r3, [r0, #2]
 800b6e6:	70c1      	strb	r1, [r0, #3]
 800b6e8:	1d03      	adds	r3, r0, #4
 800b6ea:	e7f1      	b.n	800b6d0 <__exponent+0x60>

0800b6ec <_printf_float>:
 800b6ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6f0:	ed2d 8b02 	vpush	{d8}
 800b6f4:	b08d      	sub	sp, #52	; 0x34
 800b6f6:	460c      	mov	r4, r1
 800b6f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b6fc:	4616      	mov	r6, r2
 800b6fe:	461f      	mov	r7, r3
 800b700:	4605      	mov	r5, r0
 800b702:	f000 fcd5 	bl	800c0b0 <_localeconv_r>
 800b706:	f8d0 a000 	ldr.w	sl, [r0]
 800b70a:	4650      	mov	r0, sl
 800b70c:	f7f4 fdc0 	bl	8000290 <strlen>
 800b710:	2300      	movs	r3, #0
 800b712:	930a      	str	r3, [sp, #40]	; 0x28
 800b714:	6823      	ldr	r3, [r4, #0]
 800b716:	9305      	str	r3, [sp, #20]
 800b718:	f8d8 3000 	ldr.w	r3, [r8]
 800b71c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b720:	3307      	adds	r3, #7
 800b722:	f023 0307 	bic.w	r3, r3, #7
 800b726:	f103 0208 	add.w	r2, r3, #8
 800b72a:	f8c8 2000 	str.w	r2, [r8]
 800b72e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b732:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b736:	9307      	str	r3, [sp, #28]
 800b738:	f8cd 8018 	str.w	r8, [sp, #24]
 800b73c:	ee08 0a10 	vmov	s16, r0
 800b740:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800b744:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b748:	4b9e      	ldr	r3, [pc, #632]	; (800b9c4 <_printf_float+0x2d8>)
 800b74a:	f04f 32ff 	mov.w	r2, #4294967295
 800b74e:	f7f5 f9fd 	bl	8000b4c <__aeabi_dcmpun>
 800b752:	bb88      	cbnz	r0, 800b7b8 <_printf_float+0xcc>
 800b754:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b758:	4b9a      	ldr	r3, [pc, #616]	; (800b9c4 <_printf_float+0x2d8>)
 800b75a:	f04f 32ff 	mov.w	r2, #4294967295
 800b75e:	f7f5 f9d7 	bl	8000b10 <__aeabi_dcmple>
 800b762:	bb48      	cbnz	r0, 800b7b8 <_printf_float+0xcc>
 800b764:	2200      	movs	r2, #0
 800b766:	2300      	movs	r3, #0
 800b768:	4640      	mov	r0, r8
 800b76a:	4649      	mov	r1, r9
 800b76c:	f7f5 f9c6 	bl	8000afc <__aeabi_dcmplt>
 800b770:	b110      	cbz	r0, 800b778 <_printf_float+0x8c>
 800b772:	232d      	movs	r3, #45	; 0x2d
 800b774:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b778:	4a93      	ldr	r2, [pc, #588]	; (800b9c8 <_printf_float+0x2dc>)
 800b77a:	4b94      	ldr	r3, [pc, #592]	; (800b9cc <_printf_float+0x2e0>)
 800b77c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b780:	bf94      	ite	ls
 800b782:	4690      	movls	r8, r2
 800b784:	4698      	movhi	r8, r3
 800b786:	2303      	movs	r3, #3
 800b788:	6123      	str	r3, [r4, #16]
 800b78a:	9b05      	ldr	r3, [sp, #20]
 800b78c:	f023 0304 	bic.w	r3, r3, #4
 800b790:	6023      	str	r3, [r4, #0]
 800b792:	f04f 0900 	mov.w	r9, #0
 800b796:	9700      	str	r7, [sp, #0]
 800b798:	4633      	mov	r3, r6
 800b79a:	aa0b      	add	r2, sp, #44	; 0x2c
 800b79c:	4621      	mov	r1, r4
 800b79e:	4628      	mov	r0, r5
 800b7a0:	f000 f9da 	bl	800bb58 <_printf_common>
 800b7a4:	3001      	adds	r0, #1
 800b7a6:	f040 8090 	bne.w	800b8ca <_printf_float+0x1de>
 800b7aa:	f04f 30ff 	mov.w	r0, #4294967295
 800b7ae:	b00d      	add	sp, #52	; 0x34
 800b7b0:	ecbd 8b02 	vpop	{d8}
 800b7b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7b8:	4642      	mov	r2, r8
 800b7ba:	464b      	mov	r3, r9
 800b7bc:	4640      	mov	r0, r8
 800b7be:	4649      	mov	r1, r9
 800b7c0:	f7f5 f9c4 	bl	8000b4c <__aeabi_dcmpun>
 800b7c4:	b140      	cbz	r0, 800b7d8 <_printf_float+0xec>
 800b7c6:	464b      	mov	r3, r9
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	bfbc      	itt	lt
 800b7cc:	232d      	movlt	r3, #45	; 0x2d
 800b7ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b7d2:	4a7f      	ldr	r2, [pc, #508]	; (800b9d0 <_printf_float+0x2e4>)
 800b7d4:	4b7f      	ldr	r3, [pc, #508]	; (800b9d4 <_printf_float+0x2e8>)
 800b7d6:	e7d1      	b.n	800b77c <_printf_float+0x90>
 800b7d8:	6863      	ldr	r3, [r4, #4]
 800b7da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b7de:	9206      	str	r2, [sp, #24]
 800b7e0:	1c5a      	adds	r2, r3, #1
 800b7e2:	d13f      	bne.n	800b864 <_printf_float+0x178>
 800b7e4:	2306      	movs	r3, #6
 800b7e6:	6063      	str	r3, [r4, #4]
 800b7e8:	9b05      	ldr	r3, [sp, #20]
 800b7ea:	6861      	ldr	r1, [r4, #4]
 800b7ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	9303      	str	r3, [sp, #12]
 800b7f4:	ab0a      	add	r3, sp, #40	; 0x28
 800b7f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b7fa:	ab09      	add	r3, sp, #36	; 0x24
 800b7fc:	ec49 8b10 	vmov	d0, r8, r9
 800b800:	9300      	str	r3, [sp, #0]
 800b802:	6022      	str	r2, [r4, #0]
 800b804:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b808:	4628      	mov	r0, r5
 800b80a:	f7ff fecf 	bl	800b5ac <__cvt>
 800b80e:	9b06      	ldr	r3, [sp, #24]
 800b810:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b812:	2b47      	cmp	r3, #71	; 0x47
 800b814:	4680      	mov	r8, r0
 800b816:	d108      	bne.n	800b82a <_printf_float+0x13e>
 800b818:	1cc8      	adds	r0, r1, #3
 800b81a:	db02      	blt.n	800b822 <_printf_float+0x136>
 800b81c:	6863      	ldr	r3, [r4, #4]
 800b81e:	4299      	cmp	r1, r3
 800b820:	dd41      	ble.n	800b8a6 <_printf_float+0x1ba>
 800b822:	f1ab 0302 	sub.w	r3, fp, #2
 800b826:	fa5f fb83 	uxtb.w	fp, r3
 800b82a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b82e:	d820      	bhi.n	800b872 <_printf_float+0x186>
 800b830:	3901      	subs	r1, #1
 800b832:	465a      	mov	r2, fp
 800b834:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b838:	9109      	str	r1, [sp, #36]	; 0x24
 800b83a:	f7ff ff19 	bl	800b670 <__exponent>
 800b83e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b840:	1813      	adds	r3, r2, r0
 800b842:	2a01      	cmp	r2, #1
 800b844:	4681      	mov	r9, r0
 800b846:	6123      	str	r3, [r4, #16]
 800b848:	dc02      	bgt.n	800b850 <_printf_float+0x164>
 800b84a:	6822      	ldr	r2, [r4, #0]
 800b84c:	07d2      	lsls	r2, r2, #31
 800b84e:	d501      	bpl.n	800b854 <_printf_float+0x168>
 800b850:	3301      	adds	r3, #1
 800b852:	6123      	str	r3, [r4, #16]
 800b854:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d09c      	beq.n	800b796 <_printf_float+0xaa>
 800b85c:	232d      	movs	r3, #45	; 0x2d
 800b85e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b862:	e798      	b.n	800b796 <_printf_float+0xaa>
 800b864:	9a06      	ldr	r2, [sp, #24]
 800b866:	2a47      	cmp	r2, #71	; 0x47
 800b868:	d1be      	bne.n	800b7e8 <_printf_float+0xfc>
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d1bc      	bne.n	800b7e8 <_printf_float+0xfc>
 800b86e:	2301      	movs	r3, #1
 800b870:	e7b9      	b.n	800b7e6 <_printf_float+0xfa>
 800b872:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b876:	d118      	bne.n	800b8aa <_printf_float+0x1be>
 800b878:	2900      	cmp	r1, #0
 800b87a:	6863      	ldr	r3, [r4, #4]
 800b87c:	dd0b      	ble.n	800b896 <_printf_float+0x1aa>
 800b87e:	6121      	str	r1, [r4, #16]
 800b880:	b913      	cbnz	r3, 800b888 <_printf_float+0x19c>
 800b882:	6822      	ldr	r2, [r4, #0]
 800b884:	07d0      	lsls	r0, r2, #31
 800b886:	d502      	bpl.n	800b88e <_printf_float+0x1a2>
 800b888:	3301      	adds	r3, #1
 800b88a:	440b      	add	r3, r1
 800b88c:	6123      	str	r3, [r4, #16]
 800b88e:	65a1      	str	r1, [r4, #88]	; 0x58
 800b890:	f04f 0900 	mov.w	r9, #0
 800b894:	e7de      	b.n	800b854 <_printf_float+0x168>
 800b896:	b913      	cbnz	r3, 800b89e <_printf_float+0x1b2>
 800b898:	6822      	ldr	r2, [r4, #0]
 800b89a:	07d2      	lsls	r2, r2, #31
 800b89c:	d501      	bpl.n	800b8a2 <_printf_float+0x1b6>
 800b89e:	3302      	adds	r3, #2
 800b8a0:	e7f4      	b.n	800b88c <_printf_float+0x1a0>
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	e7f2      	b.n	800b88c <_printf_float+0x1a0>
 800b8a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b8aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8ac:	4299      	cmp	r1, r3
 800b8ae:	db05      	blt.n	800b8bc <_printf_float+0x1d0>
 800b8b0:	6823      	ldr	r3, [r4, #0]
 800b8b2:	6121      	str	r1, [r4, #16]
 800b8b4:	07d8      	lsls	r0, r3, #31
 800b8b6:	d5ea      	bpl.n	800b88e <_printf_float+0x1a2>
 800b8b8:	1c4b      	adds	r3, r1, #1
 800b8ba:	e7e7      	b.n	800b88c <_printf_float+0x1a0>
 800b8bc:	2900      	cmp	r1, #0
 800b8be:	bfd4      	ite	le
 800b8c0:	f1c1 0202 	rsble	r2, r1, #2
 800b8c4:	2201      	movgt	r2, #1
 800b8c6:	4413      	add	r3, r2
 800b8c8:	e7e0      	b.n	800b88c <_printf_float+0x1a0>
 800b8ca:	6823      	ldr	r3, [r4, #0]
 800b8cc:	055a      	lsls	r2, r3, #21
 800b8ce:	d407      	bmi.n	800b8e0 <_printf_float+0x1f4>
 800b8d0:	6923      	ldr	r3, [r4, #16]
 800b8d2:	4642      	mov	r2, r8
 800b8d4:	4631      	mov	r1, r6
 800b8d6:	4628      	mov	r0, r5
 800b8d8:	47b8      	blx	r7
 800b8da:	3001      	adds	r0, #1
 800b8dc:	d12c      	bne.n	800b938 <_printf_float+0x24c>
 800b8de:	e764      	b.n	800b7aa <_printf_float+0xbe>
 800b8e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b8e4:	f240 80e0 	bls.w	800baa8 <_printf_float+0x3bc>
 800b8e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	f7f5 f8fa 	bl	8000ae8 <__aeabi_dcmpeq>
 800b8f4:	2800      	cmp	r0, #0
 800b8f6:	d034      	beq.n	800b962 <_printf_float+0x276>
 800b8f8:	4a37      	ldr	r2, [pc, #220]	; (800b9d8 <_printf_float+0x2ec>)
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	4631      	mov	r1, r6
 800b8fe:	4628      	mov	r0, r5
 800b900:	47b8      	blx	r7
 800b902:	3001      	adds	r0, #1
 800b904:	f43f af51 	beq.w	800b7aa <_printf_float+0xbe>
 800b908:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b90c:	429a      	cmp	r2, r3
 800b90e:	db02      	blt.n	800b916 <_printf_float+0x22a>
 800b910:	6823      	ldr	r3, [r4, #0]
 800b912:	07d8      	lsls	r0, r3, #31
 800b914:	d510      	bpl.n	800b938 <_printf_float+0x24c>
 800b916:	ee18 3a10 	vmov	r3, s16
 800b91a:	4652      	mov	r2, sl
 800b91c:	4631      	mov	r1, r6
 800b91e:	4628      	mov	r0, r5
 800b920:	47b8      	blx	r7
 800b922:	3001      	adds	r0, #1
 800b924:	f43f af41 	beq.w	800b7aa <_printf_float+0xbe>
 800b928:	f04f 0800 	mov.w	r8, #0
 800b92c:	f104 091a 	add.w	r9, r4, #26
 800b930:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b932:	3b01      	subs	r3, #1
 800b934:	4543      	cmp	r3, r8
 800b936:	dc09      	bgt.n	800b94c <_printf_float+0x260>
 800b938:	6823      	ldr	r3, [r4, #0]
 800b93a:	079b      	lsls	r3, r3, #30
 800b93c:	f100 8107 	bmi.w	800bb4e <_printf_float+0x462>
 800b940:	68e0      	ldr	r0, [r4, #12]
 800b942:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b944:	4298      	cmp	r0, r3
 800b946:	bfb8      	it	lt
 800b948:	4618      	movlt	r0, r3
 800b94a:	e730      	b.n	800b7ae <_printf_float+0xc2>
 800b94c:	2301      	movs	r3, #1
 800b94e:	464a      	mov	r2, r9
 800b950:	4631      	mov	r1, r6
 800b952:	4628      	mov	r0, r5
 800b954:	47b8      	blx	r7
 800b956:	3001      	adds	r0, #1
 800b958:	f43f af27 	beq.w	800b7aa <_printf_float+0xbe>
 800b95c:	f108 0801 	add.w	r8, r8, #1
 800b960:	e7e6      	b.n	800b930 <_printf_float+0x244>
 800b962:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b964:	2b00      	cmp	r3, #0
 800b966:	dc39      	bgt.n	800b9dc <_printf_float+0x2f0>
 800b968:	4a1b      	ldr	r2, [pc, #108]	; (800b9d8 <_printf_float+0x2ec>)
 800b96a:	2301      	movs	r3, #1
 800b96c:	4631      	mov	r1, r6
 800b96e:	4628      	mov	r0, r5
 800b970:	47b8      	blx	r7
 800b972:	3001      	adds	r0, #1
 800b974:	f43f af19 	beq.w	800b7aa <_printf_float+0xbe>
 800b978:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b97c:	4313      	orrs	r3, r2
 800b97e:	d102      	bne.n	800b986 <_printf_float+0x29a>
 800b980:	6823      	ldr	r3, [r4, #0]
 800b982:	07d9      	lsls	r1, r3, #31
 800b984:	d5d8      	bpl.n	800b938 <_printf_float+0x24c>
 800b986:	ee18 3a10 	vmov	r3, s16
 800b98a:	4652      	mov	r2, sl
 800b98c:	4631      	mov	r1, r6
 800b98e:	4628      	mov	r0, r5
 800b990:	47b8      	blx	r7
 800b992:	3001      	adds	r0, #1
 800b994:	f43f af09 	beq.w	800b7aa <_printf_float+0xbe>
 800b998:	f04f 0900 	mov.w	r9, #0
 800b99c:	f104 0a1a 	add.w	sl, r4, #26
 800b9a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9a2:	425b      	negs	r3, r3
 800b9a4:	454b      	cmp	r3, r9
 800b9a6:	dc01      	bgt.n	800b9ac <_printf_float+0x2c0>
 800b9a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9aa:	e792      	b.n	800b8d2 <_printf_float+0x1e6>
 800b9ac:	2301      	movs	r3, #1
 800b9ae:	4652      	mov	r2, sl
 800b9b0:	4631      	mov	r1, r6
 800b9b2:	4628      	mov	r0, r5
 800b9b4:	47b8      	blx	r7
 800b9b6:	3001      	adds	r0, #1
 800b9b8:	f43f aef7 	beq.w	800b7aa <_printf_float+0xbe>
 800b9bc:	f109 0901 	add.w	r9, r9, #1
 800b9c0:	e7ee      	b.n	800b9a0 <_printf_float+0x2b4>
 800b9c2:	bf00      	nop
 800b9c4:	7fefffff 	.word	0x7fefffff
 800b9c8:	0800f52c 	.word	0x0800f52c
 800b9cc:	0800f530 	.word	0x0800f530
 800b9d0:	0800f534 	.word	0x0800f534
 800b9d4:	0800f538 	.word	0x0800f538
 800b9d8:	0800f53c 	.word	0x0800f53c
 800b9dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b9de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b9e0:	429a      	cmp	r2, r3
 800b9e2:	bfa8      	it	ge
 800b9e4:	461a      	movge	r2, r3
 800b9e6:	2a00      	cmp	r2, #0
 800b9e8:	4691      	mov	r9, r2
 800b9ea:	dc37      	bgt.n	800ba5c <_printf_float+0x370>
 800b9ec:	f04f 0b00 	mov.w	fp, #0
 800b9f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b9f4:	f104 021a 	add.w	r2, r4, #26
 800b9f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b9fa:	9305      	str	r3, [sp, #20]
 800b9fc:	eba3 0309 	sub.w	r3, r3, r9
 800ba00:	455b      	cmp	r3, fp
 800ba02:	dc33      	bgt.n	800ba6c <_printf_float+0x380>
 800ba04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ba08:	429a      	cmp	r2, r3
 800ba0a:	db3b      	blt.n	800ba84 <_printf_float+0x398>
 800ba0c:	6823      	ldr	r3, [r4, #0]
 800ba0e:	07da      	lsls	r2, r3, #31
 800ba10:	d438      	bmi.n	800ba84 <_printf_float+0x398>
 800ba12:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ba16:	eba2 0903 	sub.w	r9, r2, r3
 800ba1a:	9b05      	ldr	r3, [sp, #20]
 800ba1c:	1ad2      	subs	r2, r2, r3
 800ba1e:	4591      	cmp	r9, r2
 800ba20:	bfa8      	it	ge
 800ba22:	4691      	movge	r9, r2
 800ba24:	f1b9 0f00 	cmp.w	r9, #0
 800ba28:	dc35      	bgt.n	800ba96 <_printf_float+0x3aa>
 800ba2a:	f04f 0800 	mov.w	r8, #0
 800ba2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ba32:	f104 0a1a 	add.w	sl, r4, #26
 800ba36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ba3a:	1a9b      	subs	r3, r3, r2
 800ba3c:	eba3 0309 	sub.w	r3, r3, r9
 800ba40:	4543      	cmp	r3, r8
 800ba42:	f77f af79 	ble.w	800b938 <_printf_float+0x24c>
 800ba46:	2301      	movs	r3, #1
 800ba48:	4652      	mov	r2, sl
 800ba4a:	4631      	mov	r1, r6
 800ba4c:	4628      	mov	r0, r5
 800ba4e:	47b8      	blx	r7
 800ba50:	3001      	adds	r0, #1
 800ba52:	f43f aeaa 	beq.w	800b7aa <_printf_float+0xbe>
 800ba56:	f108 0801 	add.w	r8, r8, #1
 800ba5a:	e7ec      	b.n	800ba36 <_printf_float+0x34a>
 800ba5c:	4613      	mov	r3, r2
 800ba5e:	4631      	mov	r1, r6
 800ba60:	4642      	mov	r2, r8
 800ba62:	4628      	mov	r0, r5
 800ba64:	47b8      	blx	r7
 800ba66:	3001      	adds	r0, #1
 800ba68:	d1c0      	bne.n	800b9ec <_printf_float+0x300>
 800ba6a:	e69e      	b.n	800b7aa <_printf_float+0xbe>
 800ba6c:	2301      	movs	r3, #1
 800ba6e:	4631      	mov	r1, r6
 800ba70:	4628      	mov	r0, r5
 800ba72:	9205      	str	r2, [sp, #20]
 800ba74:	47b8      	blx	r7
 800ba76:	3001      	adds	r0, #1
 800ba78:	f43f ae97 	beq.w	800b7aa <_printf_float+0xbe>
 800ba7c:	9a05      	ldr	r2, [sp, #20]
 800ba7e:	f10b 0b01 	add.w	fp, fp, #1
 800ba82:	e7b9      	b.n	800b9f8 <_printf_float+0x30c>
 800ba84:	ee18 3a10 	vmov	r3, s16
 800ba88:	4652      	mov	r2, sl
 800ba8a:	4631      	mov	r1, r6
 800ba8c:	4628      	mov	r0, r5
 800ba8e:	47b8      	blx	r7
 800ba90:	3001      	adds	r0, #1
 800ba92:	d1be      	bne.n	800ba12 <_printf_float+0x326>
 800ba94:	e689      	b.n	800b7aa <_printf_float+0xbe>
 800ba96:	9a05      	ldr	r2, [sp, #20]
 800ba98:	464b      	mov	r3, r9
 800ba9a:	4442      	add	r2, r8
 800ba9c:	4631      	mov	r1, r6
 800ba9e:	4628      	mov	r0, r5
 800baa0:	47b8      	blx	r7
 800baa2:	3001      	adds	r0, #1
 800baa4:	d1c1      	bne.n	800ba2a <_printf_float+0x33e>
 800baa6:	e680      	b.n	800b7aa <_printf_float+0xbe>
 800baa8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800baaa:	2a01      	cmp	r2, #1
 800baac:	dc01      	bgt.n	800bab2 <_printf_float+0x3c6>
 800baae:	07db      	lsls	r3, r3, #31
 800bab0:	d53a      	bpl.n	800bb28 <_printf_float+0x43c>
 800bab2:	2301      	movs	r3, #1
 800bab4:	4642      	mov	r2, r8
 800bab6:	4631      	mov	r1, r6
 800bab8:	4628      	mov	r0, r5
 800baba:	47b8      	blx	r7
 800babc:	3001      	adds	r0, #1
 800babe:	f43f ae74 	beq.w	800b7aa <_printf_float+0xbe>
 800bac2:	ee18 3a10 	vmov	r3, s16
 800bac6:	4652      	mov	r2, sl
 800bac8:	4631      	mov	r1, r6
 800baca:	4628      	mov	r0, r5
 800bacc:	47b8      	blx	r7
 800bace:	3001      	adds	r0, #1
 800bad0:	f43f ae6b 	beq.w	800b7aa <_printf_float+0xbe>
 800bad4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bad8:	2200      	movs	r2, #0
 800bada:	2300      	movs	r3, #0
 800badc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800bae0:	f7f5 f802 	bl	8000ae8 <__aeabi_dcmpeq>
 800bae4:	b9d8      	cbnz	r0, 800bb1e <_printf_float+0x432>
 800bae6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800baea:	f108 0201 	add.w	r2, r8, #1
 800baee:	4631      	mov	r1, r6
 800baf0:	4628      	mov	r0, r5
 800baf2:	47b8      	blx	r7
 800baf4:	3001      	adds	r0, #1
 800baf6:	d10e      	bne.n	800bb16 <_printf_float+0x42a>
 800baf8:	e657      	b.n	800b7aa <_printf_float+0xbe>
 800bafa:	2301      	movs	r3, #1
 800bafc:	4652      	mov	r2, sl
 800bafe:	4631      	mov	r1, r6
 800bb00:	4628      	mov	r0, r5
 800bb02:	47b8      	blx	r7
 800bb04:	3001      	adds	r0, #1
 800bb06:	f43f ae50 	beq.w	800b7aa <_printf_float+0xbe>
 800bb0a:	f108 0801 	add.w	r8, r8, #1
 800bb0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb10:	3b01      	subs	r3, #1
 800bb12:	4543      	cmp	r3, r8
 800bb14:	dcf1      	bgt.n	800bafa <_printf_float+0x40e>
 800bb16:	464b      	mov	r3, r9
 800bb18:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bb1c:	e6da      	b.n	800b8d4 <_printf_float+0x1e8>
 800bb1e:	f04f 0800 	mov.w	r8, #0
 800bb22:	f104 0a1a 	add.w	sl, r4, #26
 800bb26:	e7f2      	b.n	800bb0e <_printf_float+0x422>
 800bb28:	2301      	movs	r3, #1
 800bb2a:	4642      	mov	r2, r8
 800bb2c:	e7df      	b.n	800baee <_printf_float+0x402>
 800bb2e:	2301      	movs	r3, #1
 800bb30:	464a      	mov	r2, r9
 800bb32:	4631      	mov	r1, r6
 800bb34:	4628      	mov	r0, r5
 800bb36:	47b8      	blx	r7
 800bb38:	3001      	adds	r0, #1
 800bb3a:	f43f ae36 	beq.w	800b7aa <_printf_float+0xbe>
 800bb3e:	f108 0801 	add.w	r8, r8, #1
 800bb42:	68e3      	ldr	r3, [r4, #12]
 800bb44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bb46:	1a5b      	subs	r3, r3, r1
 800bb48:	4543      	cmp	r3, r8
 800bb4a:	dcf0      	bgt.n	800bb2e <_printf_float+0x442>
 800bb4c:	e6f8      	b.n	800b940 <_printf_float+0x254>
 800bb4e:	f04f 0800 	mov.w	r8, #0
 800bb52:	f104 0919 	add.w	r9, r4, #25
 800bb56:	e7f4      	b.n	800bb42 <_printf_float+0x456>

0800bb58 <_printf_common>:
 800bb58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb5c:	4616      	mov	r6, r2
 800bb5e:	4699      	mov	r9, r3
 800bb60:	688a      	ldr	r2, [r1, #8]
 800bb62:	690b      	ldr	r3, [r1, #16]
 800bb64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bb68:	4293      	cmp	r3, r2
 800bb6a:	bfb8      	it	lt
 800bb6c:	4613      	movlt	r3, r2
 800bb6e:	6033      	str	r3, [r6, #0]
 800bb70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bb74:	4607      	mov	r7, r0
 800bb76:	460c      	mov	r4, r1
 800bb78:	b10a      	cbz	r2, 800bb7e <_printf_common+0x26>
 800bb7a:	3301      	adds	r3, #1
 800bb7c:	6033      	str	r3, [r6, #0]
 800bb7e:	6823      	ldr	r3, [r4, #0]
 800bb80:	0699      	lsls	r1, r3, #26
 800bb82:	bf42      	ittt	mi
 800bb84:	6833      	ldrmi	r3, [r6, #0]
 800bb86:	3302      	addmi	r3, #2
 800bb88:	6033      	strmi	r3, [r6, #0]
 800bb8a:	6825      	ldr	r5, [r4, #0]
 800bb8c:	f015 0506 	ands.w	r5, r5, #6
 800bb90:	d106      	bne.n	800bba0 <_printf_common+0x48>
 800bb92:	f104 0a19 	add.w	sl, r4, #25
 800bb96:	68e3      	ldr	r3, [r4, #12]
 800bb98:	6832      	ldr	r2, [r6, #0]
 800bb9a:	1a9b      	subs	r3, r3, r2
 800bb9c:	42ab      	cmp	r3, r5
 800bb9e:	dc26      	bgt.n	800bbee <_printf_common+0x96>
 800bba0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bba4:	1e13      	subs	r3, r2, #0
 800bba6:	6822      	ldr	r2, [r4, #0]
 800bba8:	bf18      	it	ne
 800bbaa:	2301      	movne	r3, #1
 800bbac:	0692      	lsls	r2, r2, #26
 800bbae:	d42b      	bmi.n	800bc08 <_printf_common+0xb0>
 800bbb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bbb4:	4649      	mov	r1, r9
 800bbb6:	4638      	mov	r0, r7
 800bbb8:	47c0      	blx	r8
 800bbba:	3001      	adds	r0, #1
 800bbbc:	d01e      	beq.n	800bbfc <_printf_common+0xa4>
 800bbbe:	6823      	ldr	r3, [r4, #0]
 800bbc0:	6922      	ldr	r2, [r4, #16]
 800bbc2:	f003 0306 	and.w	r3, r3, #6
 800bbc6:	2b04      	cmp	r3, #4
 800bbc8:	bf02      	ittt	eq
 800bbca:	68e5      	ldreq	r5, [r4, #12]
 800bbcc:	6833      	ldreq	r3, [r6, #0]
 800bbce:	1aed      	subeq	r5, r5, r3
 800bbd0:	68a3      	ldr	r3, [r4, #8]
 800bbd2:	bf0c      	ite	eq
 800bbd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bbd8:	2500      	movne	r5, #0
 800bbda:	4293      	cmp	r3, r2
 800bbdc:	bfc4      	itt	gt
 800bbde:	1a9b      	subgt	r3, r3, r2
 800bbe0:	18ed      	addgt	r5, r5, r3
 800bbe2:	2600      	movs	r6, #0
 800bbe4:	341a      	adds	r4, #26
 800bbe6:	42b5      	cmp	r5, r6
 800bbe8:	d11a      	bne.n	800bc20 <_printf_common+0xc8>
 800bbea:	2000      	movs	r0, #0
 800bbec:	e008      	b.n	800bc00 <_printf_common+0xa8>
 800bbee:	2301      	movs	r3, #1
 800bbf0:	4652      	mov	r2, sl
 800bbf2:	4649      	mov	r1, r9
 800bbf4:	4638      	mov	r0, r7
 800bbf6:	47c0      	blx	r8
 800bbf8:	3001      	adds	r0, #1
 800bbfa:	d103      	bne.n	800bc04 <_printf_common+0xac>
 800bbfc:	f04f 30ff 	mov.w	r0, #4294967295
 800bc00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc04:	3501      	adds	r5, #1
 800bc06:	e7c6      	b.n	800bb96 <_printf_common+0x3e>
 800bc08:	18e1      	adds	r1, r4, r3
 800bc0a:	1c5a      	adds	r2, r3, #1
 800bc0c:	2030      	movs	r0, #48	; 0x30
 800bc0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bc12:	4422      	add	r2, r4
 800bc14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bc18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bc1c:	3302      	adds	r3, #2
 800bc1e:	e7c7      	b.n	800bbb0 <_printf_common+0x58>
 800bc20:	2301      	movs	r3, #1
 800bc22:	4622      	mov	r2, r4
 800bc24:	4649      	mov	r1, r9
 800bc26:	4638      	mov	r0, r7
 800bc28:	47c0      	blx	r8
 800bc2a:	3001      	adds	r0, #1
 800bc2c:	d0e6      	beq.n	800bbfc <_printf_common+0xa4>
 800bc2e:	3601      	adds	r6, #1
 800bc30:	e7d9      	b.n	800bbe6 <_printf_common+0x8e>
	...

0800bc34 <_printf_i>:
 800bc34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bc38:	7e0f      	ldrb	r7, [r1, #24]
 800bc3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bc3c:	2f78      	cmp	r7, #120	; 0x78
 800bc3e:	4691      	mov	r9, r2
 800bc40:	4680      	mov	r8, r0
 800bc42:	460c      	mov	r4, r1
 800bc44:	469a      	mov	sl, r3
 800bc46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bc4a:	d807      	bhi.n	800bc5c <_printf_i+0x28>
 800bc4c:	2f62      	cmp	r7, #98	; 0x62
 800bc4e:	d80a      	bhi.n	800bc66 <_printf_i+0x32>
 800bc50:	2f00      	cmp	r7, #0
 800bc52:	f000 80d4 	beq.w	800bdfe <_printf_i+0x1ca>
 800bc56:	2f58      	cmp	r7, #88	; 0x58
 800bc58:	f000 80c0 	beq.w	800bddc <_printf_i+0x1a8>
 800bc5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bc60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bc64:	e03a      	b.n	800bcdc <_printf_i+0xa8>
 800bc66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bc6a:	2b15      	cmp	r3, #21
 800bc6c:	d8f6      	bhi.n	800bc5c <_printf_i+0x28>
 800bc6e:	a101      	add	r1, pc, #4	; (adr r1, 800bc74 <_printf_i+0x40>)
 800bc70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bc74:	0800bccd 	.word	0x0800bccd
 800bc78:	0800bce1 	.word	0x0800bce1
 800bc7c:	0800bc5d 	.word	0x0800bc5d
 800bc80:	0800bc5d 	.word	0x0800bc5d
 800bc84:	0800bc5d 	.word	0x0800bc5d
 800bc88:	0800bc5d 	.word	0x0800bc5d
 800bc8c:	0800bce1 	.word	0x0800bce1
 800bc90:	0800bc5d 	.word	0x0800bc5d
 800bc94:	0800bc5d 	.word	0x0800bc5d
 800bc98:	0800bc5d 	.word	0x0800bc5d
 800bc9c:	0800bc5d 	.word	0x0800bc5d
 800bca0:	0800bde5 	.word	0x0800bde5
 800bca4:	0800bd0d 	.word	0x0800bd0d
 800bca8:	0800bd9f 	.word	0x0800bd9f
 800bcac:	0800bc5d 	.word	0x0800bc5d
 800bcb0:	0800bc5d 	.word	0x0800bc5d
 800bcb4:	0800be07 	.word	0x0800be07
 800bcb8:	0800bc5d 	.word	0x0800bc5d
 800bcbc:	0800bd0d 	.word	0x0800bd0d
 800bcc0:	0800bc5d 	.word	0x0800bc5d
 800bcc4:	0800bc5d 	.word	0x0800bc5d
 800bcc8:	0800bda7 	.word	0x0800bda7
 800bccc:	682b      	ldr	r3, [r5, #0]
 800bcce:	1d1a      	adds	r2, r3, #4
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	602a      	str	r2, [r5, #0]
 800bcd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bcd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bcdc:	2301      	movs	r3, #1
 800bcde:	e09f      	b.n	800be20 <_printf_i+0x1ec>
 800bce0:	6820      	ldr	r0, [r4, #0]
 800bce2:	682b      	ldr	r3, [r5, #0]
 800bce4:	0607      	lsls	r7, r0, #24
 800bce6:	f103 0104 	add.w	r1, r3, #4
 800bcea:	6029      	str	r1, [r5, #0]
 800bcec:	d501      	bpl.n	800bcf2 <_printf_i+0xbe>
 800bcee:	681e      	ldr	r6, [r3, #0]
 800bcf0:	e003      	b.n	800bcfa <_printf_i+0xc6>
 800bcf2:	0646      	lsls	r6, r0, #25
 800bcf4:	d5fb      	bpl.n	800bcee <_printf_i+0xba>
 800bcf6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800bcfa:	2e00      	cmp	r6, #0
 800bcfc:	da03      	bge.n	800bd06 <_printf_i+0xd2>
 800bcfe:	232d      	movs	r3, #45	; 0x2d
 800bd00:	4276      	negs	r6, r6
 800bd02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd06:	485a      	ldr	r0, [pc, #360]	; (800be70 <_printf_i+0x23c>)
 800bd08:	230a      	movs	r3, #10
 800bd0a:	e012      	b.n	800bd32 <_printf_i+0xfe>
 800bd0c:	682b      	ldr	r3, [r5, #0]
 800bd0e:	6820      	ldr	r0, [r4, #0]
 800bd10:	1d19      	adds	r1, r3, #4
 800bd12:	6029      	str	r1, [r5, #0]
 800bd14:	0605      	lsls	r5, r0, #24
 800bd16:	d501      	bpl.n	800bd1c <_printf_i+0xe8>
 800bd18:	681e      	ldr	r6, [r3, #0]
 800bd1a:	e002      	b.n	800bd22 <_printf_i+0xee>
 800bd1c:	0641      	lsls	r1, r0, #25
 800bd1e:	d5fb      	bpl.n	800bd18 <_printf_i+0xe4>
 800bd20:	881e      	ldrh	r6, [r3, #0]
 800bd22:	4853      	ldr	r0, [pc, #332]	; (800be70 <_printf_i+0x23c>)
 800bd24:	2f6f      	cmp	r7, #111	; 0x6f
 800bd26:	bf0c      	ite	eq
 800bd28:	2308      	moveq	r3, #8
 800bd2a:	230a      	movne	r3, #10
 800bd2c:	2100      	movs	r1, #0
 800bd2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bd32:	6865      	ldr	r5, [r4, #4]
 800bd34:	60a5      	str	r5, [r4, #8]
 800bd36:	2d00      	cmp	r5, #0
 800bd38:	bfa2      	ittt	ge
 800bd3a:	6821      	ldrge	r1, [r4, #0]
 800bd3c:	f021 0104 	bicge.w	r1, r1, #4
 800bd40:	6021      	strge	r1, [r4, #0]
 800bd42:	b90e      	cbnz	r6, 800bd48 <_printf_i+0x114>
 800bd44:	2d00      	cmp	r5, #0
 800bd46:	d04b      	beq.n	800bde0 <_printf_i+0x1ac>
 800bd48:	4615      	mov	r5, r2
 800bd4a:	fbb6 f1f3 	udiv	r1, r6, r3
 800bd4e:	fb03 6711 	mls	r7, r3, r1, r6
 800bd52:	5dc7      	ldrb	r7, [r0, r7]
 800bd54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bd58:	4637      	mov	r7, r6
 800bd5a:	42bb      	cmp	r3, r7
 800bd5c:	460e      	mov	r6, r1
 800bd5e:	d9f4      	bls.n	800bd4a <_printf_i+0x116>
 800bd60:	2b08      	cmp	r3, #8
 800bd62:	d10b      	bne.n	800bd7c <_printf_i+0x148>
 800bd64:	6823      	ldr	r3, [r4, #0]
 800bd66:	07de      	lsls	r6, r3, #31
 800bd68:	d508      	bpl.n	800bd7c <_printf_i+0x148>
 800bd6a:	6923      	ldr	r3, [r4, #16]
 800bd6c:	6861      	ldr	r1, [r4, #4]
 800bd6e:	4299      	cmp	r1, r3
 800bd70:	bfde      	ittt	le
 800bd72:	2330      	movle	r3, #48	; 0x30
 800bd74:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bd78:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bd7c:	1b52      	subs	r2, r2, r5
 800bd7e:	6122      	str	r2, [r4, #16]
 800bd80:	f8cd a000 	str.w	sl, [sp]
 800bd84:	464b      	mov	r3, r9
 800bd86:	aa03      	add	r2, sp, #12
 800bd88:	4621      	mov	r1, r4
 800bd8a:	4640      	mov	r0, r8
 800bd8c:	f7ff fee4 	bl	800bb58 <_printf_common>
 800bd90:	3001      	adds	r0, #1
 800bd92:	d14a      	bne.n	800be2a <_printf_i+0x1f6>
 800bd94:	f04f 30ff 	mov.w	r0, #4294967295
 800bd98:	b004      	add	sp, #16
 800bd9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd9e:	6823      	ldr	r3, [r4, #0]
 800bda0:	f043 0320 	orr.w	r3, r3, #32
 800bda4:	6023      	str	r3, [r4, #0]
 800bda6:	4833      	ldr	r0, [pc, #204]	; (800be74 <_printf_i+0x240>)
 800bda8:	2778      	movs	r7, #120	; 0x78
 800bdaa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bdae:	6823      	ldr	r3, [r4, #0]
 800bdb0:	6829      	ldr	r1, [r5, #0]
 800bdb2:	061f      	lsls	r7, r3, #24
 800bdb4:	f851 6b04 	ldr.w	r6, [r1], #4
 800bdb8:	d402      	bmi.n	800bdc0 <_printf_i+0x18c>
 800bdba:	065f      	lsls	r7, r3, #25
 800bdbc:	bf48      	it	mi
 800bdbe:	b2b6      	uxthmi	r6, r6
 800bdc0:	07df      	lsls	r7, r3, #31
 800bdc2:	bf48      	it	mi
 800bdc4:	f043 0320 	orrmi.w	r3, r3, #32
 800bdc8:	6029      	str	r1, [r5, #0]
 800bdca:	bf48      	it	mi
 800bdcc:	6023      	strmi	r3, [r4, #0]
 800bdce:	b91e      	cbnz	r6, 800bdd8 <_printf_i+0x1a4>
 800bdd0:	6823      	ldr	r3, [r4, #0]
 800bdd2:	f023 0320 	bic.w	r3, r3, #32
 800bdd6:	6023      	str	r3, [r4, #0]
 800bdd8:	2310      	movs	r3, #16
 800bdda:	e7a7      	b.n	800bd2c <_printf_i+0xf8>
 800bddc:	4824      	ldr	r0, [pc, #144]	; (800be70 <_printf_i+0x23c>)
 800bdde:	e7e4      	b.n	800bdaa <_printf_i+0x176>
 800bde0:	4615      	mov	r5, r2
 800bde2:	e7bd      	b.n	800bd60 <_printf_i+0x12c>
 800bde4:	682b      	ldr	r3, [r5, #0]
 800bde6:	6826      	ldr	r6, [r4, #0]
 800bde8:	6961      	ldr	r1, [r4, #20]
 800bdea:	1d18      	adds	r0, r3, #4
 800bdec:	6028      	str	r0, [r5, #0]
 800bdee:	0635      	lsls	r5, r6, #24
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	d501      	bpl.n	800bdf8 <_printf_i+0x1c4>
 800bdf4:	6019      	str	r1, [r3, #0]
 800bdf6:	e002      	b.n	800bdfe <_printf_i+0x1ca>
 800bdf8:	0670      	lsls	r0, r6, #25
 800bdfa:	d5fb      	bpl.n	800bdf4 <_printf_i+0x1c0>
 800bdfc:	8019      	strh	r1, [r3, #0]
 800bdfe:	2300      	movs	r3, #0
 800be00:	6123      	str	r3, [r4, #16]
 800be02:	4615      	mov	r5, r2
 800be04:	e7bc      	b.n	800bd80 <_printf_i+0x14c>
 800be06:	682b      	ldr	r3, [r5, #0]
 800be08:	1d1a      	adds	r2, r3, #4
 800be0a:	602a      	str	r2, [r5, #0]
 800be0c:	681d      	ldr	r5, [r3, #0]
 800be0e:	6862      	ldr	r2, [r4, #4]
 800be10:	2100      	movs	r1, #0
 800be12:	4628      	mov	r0, r5
 800be14:	f7f4 f9ec 	bl	80001f0 <memchr>
 800be18:	b108      	cbz	r0, 800be1e <_printf_i+0x1ea>
 800be1a:	1b40      	subs	r0, r0, r5
 800be1c:	6060      	str	r0, [r4, #4]
 800be1e:	6863      	ldr	r3, [r4, #4]
 800be20:	6123      	str	r3, [r4, #16]
 800be22:	2300      	movs	r3, #0
 800be24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be28:	e7aa      	b.n	800bd80 <_printf_i+0x14c>
 800be2a:	6923      	ldr	r3, [r4, #16]
 800be2c:	462a      	mov	r2, r5
 800be2e:	4649      	mov	r1, r9
 800be30:	4640      	mov	r0, r8
 800be32:	47d0      	blx	sl
 800be34:	3001      	adds	r0, #1
 800be36:	d0ad      	beq.n	800bd94 <_printf_i+0x160>
 800be38:	6823      	ldr	r3, [r4, #0]
 800be3a:	079b      	lsls	r3, r3, #30
 800be3c:	d413      	bmi.n	800be66 <_printf_i+0x232>
 800be3e:	68e0      	ldr	r0, [r4, #12]
 800be40:	9b03      	ldr	r3, [sp, #12]
 800be42:	4298      	cmp	r0, r3
 800be44:	bfb8      	it	lt
 800be46:	4618      	movlt	r0, r3
 800be48:	e7a6      	b.n	800bd98 <_printf_i+0x164>
 800be4a:	2301      	movs	r3, #1
 800be4c:	4632      	mov	r2, r6
 800be4e:	4649      	mov	r1, r9
 800be50:	4640      	mov	r0, r8
 800be52:	47d0      	blx	sl
 800be54:	3001      	adds	r0, #1
 800be56:	d09d      	beq.n	800bd94 <_printf_i+0x160>
 800be58:	3501      	adds	r5, #1
 800be5a:	68e3      	ldr	r3, [r4, #12]
 800be5c:	9903      	ldr	r1, [sp, #12]
 800be5e:	1a5b      	subs	r3, r3, r1
 800be60:	42ab      	cmp	r3, r5
 800be62:	dcf2      	bgt.n	800be4a <_printf_i+0x216>
 800be64:	e7eb      	b.n	800be3e <_printf_i+0x20a>
 800be66:	2500      	movs	r5, #0
 800be68:	f104 0619 	add.w	r6, r4, #25
 800be6c:	e7f5      	b.n	800be5a <_printf_i+0x226>
 800be6e:	bf00      	nop
 800be70:	0800f53e 	.word	0x0800f53e
 800be74:	0800f54f 	.word	0x0800f54f

0800be78 <std>:
 800be78:	2300      	movs	r3, #0
 800be7a:	b510      	push	{r4, lr}
 800be7c:	4604      	mov	r4, r0
 800be7e:	e9c0 3300 	strd	r3, r3, [r0]
 800be82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800be86:	6083      	str	r3, [r0, #8]
 800be88:	8181      	strh	r1, [r0, #12]
 800be8a:	6643      	str	r3, [r0, #100]	; 0x64
 800be8c:	81c2      	strh	r2, [r0, #14]
 800be8e:	6183      	str	r3, [r0, #24]
 800be90:	4619      	mov	r1, r3
 800be92:	2208      	movs	r2, #8
 800be94:	305c      	adds	r0, #92	; 0x5c
 800be96:	f000 f902 	bl	800c09e <memset>
 800be9a:	4b05      	ldr	r3, [pc, #20]	; (800beb0 <std+0x38>)
 800be9c:	6263      	str	r3, [r4, #36]	; 0x24
 800be9e:	4b05      	ldr	r3, [pc, #20]	; (800beb4 <std+0x3c>)
 800bea0:	62a3      	str	r3, [r4, #40]	; 0x28
 800bea2:	4b05      	ldr	r3, [pc, #20]	; (800beb8 <std+0x40>)
 800bea4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bea6:	4b05      	ldr	r3, [pc, #20]	; (800bebc <std+0x44>)
 800bea8:	6224      	str	r4, [r4, #32]
 800beaa:	6323      	str	r3, [r4, #48]	; 0x30
 800beac:	bd10      	pop	{r4, pc}
 800beae:	bf00      	nop
 800beb0:	0800c019 	.word	0x0800c019
 800beb4:	0800c03b 	.word	0x0800c03b
 800beb8:	0800c073 	.word	0x0800c073
 800bebc:	0800c097 	.word	0x0800c097

0800bec0 <stdio_exit_handler>:
 800bec0:	4a02      	ldr	r2, [pc, #8]	; (800becc <stdio_exit_handler+0xc>)
 800bec2:	4903      	ldr	r1, [pc, #12]	; (800bed0 <stdio_exit_handler+0x10>)
 800bec4:	4803      	ldr	r0, [pc, #12]	; (800bed4 <stdio_exit_handler+0x14>)
 800bec6:	f000 b869 	b.w	800bf9c <_fwalk_sglue>
 800beca:	bf00      	nop
 800becc:	20000010 	.word	0x20000010
 800bed0:	0800db61 	.word	0x0800db61
 800bed4:	2000001c 	.word	0x2000001c

0800bed8 <cleanup_stdio>:
 800bed8:	6841      	ldr	r1, [r0, #4]
 800beda:	4b0c      	ldr	r3, [pc, #48]	; (800bf0c <cleanup_stdio+0x34>)
 800bedc:	4299      	cmp	r1, r3
 800bede:	b510      	push	{r4, lr}
 800bee0:	4604      	mov	r4, r0
 800bee2:	d001      	beq.n	800bee8 <cleanup_stdio+0x10>
 800bee4:	f001 fe3c 	bl	800db60 <_fflush_r>
 800bee8:	68a1      	ldr	r1, [r4, #8]
 800beea:	4b09      	ldr	r3, [pc, #36]	; (800bf10 <cleanup_stdio+0x38>)
 800beec:	4299      	cmp	r1, r3
 800beee:	d002      	beq.n	800bef6 <cleanup_stdio+0x1e>
 800bef0:	4620      	mov	r0, r4
 800bef2:	f001 fe35 	bl	800db60 <_fflush_r>
 800bef6:	68e1      	ldr	r1, [r4, #12]
 800bef8:	4b06      	ldr	r3, [pc, #24]	; (800bf14 <cleanup_stdio+0x3c>)
 800befa:	4299      	cmp	r1, r3
 800befc:	d004      	beq.n	800bf08 <cleanup_stdio+0x30>
 800befe:	4620      	mov	r0, r4
 800bf00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf04:	f001 be2c 	b.w	800db60 <_fflush_r>
 800bf08:	bd10      	pop	{r4, pc}
 800bf0a:	bf00      	nop
 800bf0c:	20002164 	.word	0x20002164
 800bf10:	200021cc 	.word	0x200021cc
 800bf14:	20002234 	.word	0x20002234

0800bf18 <global_stdio_init.part.0>:
 800bf18:	b510      	push	{r4, lr}
 800bf1a:	4b0b      	ldr	r3, [pc, #44]	; (800bf48 <global_stdio_init.part.0+0x30>)
 800bf1c:	4c0b      	ldr	r4, [pc, #44]	; (800bf4c <global_stdio_init.part.0+0x34>)
 800bf1e:	4a0c      	ldr	r2, [pc, #48]	; (800bf50 <global_stdio_init.part.0+0x38>)
 800bf20:	601a      	str	r2, [r3, #0]
 800bf22:	4620      	mov	r0, r4
 800bf24:	2200      	movs	r2, #0
 800bf26:	2104      	movs	r1, #4
 800bf28:	f7ff ffa6 	bl	800be78 <std>
 800bf2c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800bf30:	2201      	movs	r2, #1
 800bf32:	2109      	movs	r1, #9
 800bf34:	f7ff ffa0 	bl	800be78 <std>
 800bf38:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800bf3c:	2202      	movs	r2, #2
 800bf3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf42:	2112      	movs	r1, #18
 800bf44:	f7ff bf98 	b.w	800be78 <std>
 800bf48:	2000229c 	.word	0x2000229c
 800bf4c:	20002164 	.word	0x20002164
 800bf50:	0800bec1 	.word	0x0800bec1

0800bf54 <__sfp_lock_acquire>:
 800bf54:	4801      	ldr	r0, [pc, #4]	; (800bf5c <__sfp_lock_acquire+0x8>)
 800bf56:	f000 b91f 	b.w	800c198 <__retarget_lock_acquire_recursive>
 800bf5a:	bf00      	nop
 800bf5c:	200022a5 	.word	0x200022a5

0800bf60 <__sfp_lock_release>:
 800bf60:	4801      	ldr	r0, [pc, #4]	; (800bf68 <__sfp_lock_release+0x8>)
 800bf62:	f000 b91a 	b.w	800c19a <__retarget_lock_release_recursive>
 800bf66:	bf00      	nop
 800bf68:	200022a5 	.word	0x200022a5

0800bf6c <__sinit>:
 800bf6c:	b510      	push	{r4, lr}
 800bf6e:	4604      	mov	r4, r0
 800bf70:	f7ff fff0 	bl	800bf54 <__sfp_lock_acquire>
 800bf74:	6a23      	ldr	r3, [r4, #32]
 800bf76:	b11b      	cbz	r3, 800bf80 <__sinit+0x14>
 800bf78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf7c:	f7ff bff0 	b.w	800bf60 <__sfp_lock_release>
 800bf80:	4b04      	ldr	r3, [pc, #16]	; (800bf94 <__sinit+0x28>)
 800bf82:	6223      	str	r3, [r4, #32]
 800bf84:	4b04      	ldr	r3, [pc, #16]	; (800bf98 <__sinit+0x2c>)
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d1f5      	bne.n	800bf78 <__sinit+0xc>
 800bf8c:	f7ff ffc4 	bl	800bf18 <global_stdio_init.part.0>
 800bf90:	e7f2      	b.n	800bf78 <__sinit+0xc>
 800bf92:	bf00      	nop
 800bf94:	0800bed9 	.word	0x0800bed9
 800bf98:	2000229c 	.word	0x2000229c

0800bf9c <_fwalk_sglue>:
 800bf9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfa0:	4607      	mov	r7, r0
 800bfa2:	4688      	mov	r8, r1
 800bfa4:	4614      	mov	r4, r2
 800bfa6:	2600      	movs	r6, #0
 800bfa8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bfac:	f1b9 0901 	subs.w	r9, r9, #1
 800bfb0:	d505      	bpl.n	800bfbe <_fwalk_sglue+0x22>
 800bfb2:	6824      	ldr	r4, [r4, #0]
 800bfb4:	2c00      	cmp	r4, #0
 800bfb6:	d1f7      	bne.n	800bfa8 <_fwalk_sglue+0xc>
 800bfb8:	4630      	mov	r0, r6
 800bfba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfbe:	89ab      	ldrh	r3, [r5, #12]
 800bfc0:	2b01      	cmp	r3, #1
 800bfc2:	d907      	bls.n	800bfd4 <_fwalk_sglue+0x38>
 800bfc4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bfc8:	3301      	adds	r3, #1
 800bfca:	d003      	beq.n	800bfd4 <_fwalk_sglue+0x38>
 800bfcc:	4629      	mov	r1, r5
 800bfce:	4638      	mov	r0, r7
 800bfd0:	47c0      	blx	r8
 800bfd2:	4306      	orrs	r6, r0
 800bfd4:	3568      	adds	r5, #104	; 0x68
 800bfd6:	e7e9      	b.n	800bfac <_fwalk_sglue+0x10>

0800bfd8 <siprintf>:
 800bfd8:	b40e      	push	{r1, r2, r3}
 800bfda:	b500      	push	{lr}
 800bfdc:	b09c      	sub	sp, #112	; 0x70
 800bfde:	ab1d      	add	r3, sp, #116	; 0x74
 800bfe0:	9002      	str	r0, [sp, #8]
 800bfe2:	9006      	str	r0, [sp, #24]
 800bfe4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bfe8:	4809      	ldr	r0, [pc, #36]	; (800c010 <siprintf+0x38>)
 800bfea:	9107      	str	r1, [sp, #28]
 800bfec:	9104      	str	r1, [sp, #16]
 800bfee:	4909      	ldr	r1, [pc, #36]	; (800c014 <siprintf+0x3c>)
 800bff0:	f853 2b04 	ldr.w	r2, [r3], #4
 800bff4:	9105      	str	r1, [sp, #20]
 800bff6:	6800      	ldr	r0, [r0, #0]
 800bff8:	9301      	str	r3, [sp, #4]
 800bffa:	a902      	add	r1, sp, #8
 800bffc:	f001 fc2c 	bl	800d858 <_svfiprintf_r>
 800c000:	9b02      	ldr	r3, [sp, #8]
 800c002:	2200      	movs	r2, #0
 800c004:	701a      	strb	r2, [r3, #0]
 800c006:	b01c      	add	sp, #112	; 0x70
 800c008:	f85d eb04 	ldr.w	lr, [sp], #4
 800c00c:	b003      	add	sp, #12
 800c00e:	4770      	bx	lr
 800c010:	20000068 	.word	0x20000068
 800c014:	ffff0208 	.word	0xffff0208

0800c018 <__sread>:
 800c018:	b510      	push	{r4, lr}
 800c01a:	460c      	mov	r4, r1
 800c01c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c020:	f000 f86c 	bl	800c0fc <_read_r>
 800c024:	2800      	cmp	r0, #0
 800c026:	bfab      	itete	ge
 800c028:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c02a:	89a3      	ldrhlt	r3, [r4, #12]
 800c02c:	181b      	addge	r3, r3, r0
 800c02e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c032:	bfac      	ite	ge
 800c034:	6563      	strge	r3, [r4, #84]	; 0x54
 800c036:	81a3      	strhlt	r3, [r4, #12]
 800c038:	bd10      	pop	{r4, pc}

0800c03a <__swrite>:
 800c03a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c03e:	461f      	mov	r7, r3
 800c040:	898b      	ldrh	r3, [r1, #12]
 800c042:	05db      	lsls	r3, r3, #23
 800c044:	4605      	mov	r5, r0
 800c046:	460c      	mov	r4, r1
 800c048:	4616      	mov	r6, r2
 800c04a:	d505      	bpl.n	800c058 <__swrite+0x1e>
 800c04c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c050:	2302      	movs	r3, #2
 800c052:	2200      	movs	r2, #0
 800c054:	f000 f840 	bl	800c0d8 <_lseek_r>
 800c058:	89a3      	ldrh	r3, [r4, #12]
 800c05a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c05e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c062:	81a3      	strh	r3, [r4, #12]
 800c064:	4632      	mov	r2, r6
 800c066:	463b      	mov	r3, r7
 800c068:	4628      	mov	r0, r5
 800c06a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c06e:	f000 b857 	b.w	800c120 <_write_r>

0800c072 <__sseek>:
 800c072:	b510      	push	{r4, lr}
 800c074:	460c      	mov	r4, r1
 800c076:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c07a:	f000 f82d 	bl	800c0d8 <_lseek_r>
 800c07e:	1c43      	adds	r3, r0, #1
 800c080:	89a3      	ldrh	r3, [r4, #12]
 800c082:	bf15      	itete	ne
 800c084:	6560      	strne	r0, [r4, #84]	; 0x54
 800c086:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c08a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c08e:	81a3      	strheq	r3, [r4, #12]
 800c090:	bf18      	it	ne
 800c092:	81a3      	strhne	r3, [r4, #12]
 800c094:	bd10      	pop	{r4, pc}

0800c096 <__sclose>:
 800c096:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c09a:	f000 b80d 	b.w	800c0b8 <_close_r>

0800c09e <memset>:
 800c09e:	4402      	add	r2, r0
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	4293      	cmp	r3, r2
 800c0a4:	d100      	bne.n	800c0a8 <memset+0xa>
 800c0a6:	4770      	bx	lr
 800c0a8:	f803 1b01 	strb.w	r1, [r3], #1
 800c0ac:	e7f9      	b.n	800c0a2 <memset+0x4>
	...

0800c0b0 <_localeconv_r>:
 800c0b0:	4800      	ldr	r0, [pc, #0]	; (800c0b4 <_localeconv_r+0x4>)
 800c0b2:	4770      	bx	lr
 800c0b4:	2000015c 	.word	0x2000015c

0800c0b8 <_close_r>:
 800c0b8:	b538      	push	{r3, r4, r5, lr}
 800c0ba:	4d06      	ldr	r5, [pc, #24]	; (800c0d4 <_close_r+0x1c>)
 800c0bc:	2300      	movs	r3, #0
 800c0be:	4604      	mov	r4, r0
 800c0c0:	4608      	mov	r0, r1
 800c0c2:	602b      	str	r3, [r5, #0]
 800c0c4:	f7f7 fe87 	bl	8003dd6 <_close>
 800c0c8:	1c43      	adds	r3, r0, #1
 800c0ca:	d102      	bne.n	800c0d2 <_close_r+0x1a>
 800c0cc:	682b      	ldr	r3, [r5, #0]
 800c0ce:	b103      	cbz	r3, 800c0d2 <_close_r+0x1a>
 800c0d0:	6023      	str	r3, [r4, #0]
 800c0d2:	bd38      	pop	{r3, r4, r5, pc}
 800c0d4:	200022a0 	.word	0x200022a0

0800c0d8 <_lseek_r>:
 800c0d8:	b538      	push	{r3, r4, r5, lr}
 800c0da:	4d07      	ldr	r5, [pc, #28]	; (800c0f8 <_lseek_r+0x20>)
 800c0dc:	4604      	mov	r4, r0
 800c0de:	4608      	mov	r0, r1
 800c0e0:	4611      	mov	r1, r2
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	602a      	str	r2, [r5, #0]
 800c0e6:	461a      	mov	r2, r3
 800c0e8:	f7f7 fe9c 	bl	8003e24 <_lseek>
 800c0ec:	1c43      	adds	r3, r0, #1
 800c0ee:	d102      	bne.n	800c0f6 <_lseek_r+0x1e>
 800c0f0:	682b      	ldr	r3, [r5, #0]
 800c0f2:	b103      	cbz	r3, 800c0f6 <_lseek_r+0x1e>
 800c0f4:	6023      	str	r3, [r4, #0]
 800c0f6:	bd38      	pop	{r3, r4, r5, pc}
 800c0f8:	200022a0 	.word	0x200022a0

0800c0fc <_read_r>:
 800c0fc:	b538      	push	{r3, r4, r5, lr}
 800c0fe:	4d07      	ldr	r5, [pc, #28]	; (800c11c <_read_r+0x20>)
 800c100:	4604      	mov	r4, r0
 800c102:	4608      	mov	r0, r1
 800c104:	4611      	mov	r1, r2
 800c106:	2200      	movs	r2, #0
 800c108:	602a      	str	r2, [r5, #0]
 800c10a:	461a      	mov	r2, r3
 800c10c:	f7f7 fe2a 	bl	8003d64 <_read>
 800c110:	1c43      	adds	r3, r0, #1
 800c112:	d102      	bne.n	800c11a <_read_r+0x1e>
 800c114:	682b      	ldr	r3, [r5, #0]
 800c116:	b103      	cbz	r3, 800c11a <_read_r+0x1e>
 800c118:	6023      	str	r3, [r4, #0]
 800c11a:	bd38      	pop	{r3, r4, r5, pc}
 800c11c:	200022a0 	.word	0x200022a0

0800c120 <_write_r>:
 800c120:	b538      	push	{r3, r4, r5, lr}
 800c122:	4d07      	ldr	r5, [pc, #28]	; (800c140 <_write_r+0x20>)
 800c124:	4604      	mov	r4, r0
 800c126:	4608      	mov	r0, r1
 800c128:	4611      	mov	r1, r2
 800c12a:	2200      	movs	r2, #0
 800c12c:	602a      	str	r2, [r5, #0]
 800c12e:	461a      	mov	r2, r3
 800c130:	f7f7 fe35 	bl	8003d9e <_write>
 800c134:	1c43      	adds	r3, r0, #1
 800c136:	d102      	bne.n	800c13e <_write_r+0x1e>
 800c138:	682b      	ldr	r3, [r5, #0]
 800c13a:	b103      	cbz	r3, 800c13e <_write_r+0x1e>
 800c13c:	6023      	str	r3, [r4, #0]
 800c13e:	bd38      	pop	{r3, r4, r5, pc}
 800c140:	200022a0 	.word	0x200022a0

0800c144 <__errno>:
 800c144:	4b01      	ldr	r3, [pc, #4]	; (800c14c <__errno+0x8>)
 800c146:	6818      	ldr	r0, [r3, #0]
 800c148:	4770      	bx	lr
 800c14a:	bf00      	nop
 800c14c:	20000068 	.word	0x20000068

0800c150 <__libc_init_array>:
 800c150:	b570      	push	{r4, r5, r6, lr}
 800c152:	4d0d      	ldr	r5, [pc, #52]	; (800c188 <__libc_init_array+0x38>)
 800c154:	4c0d      	ldr	r4, [pc, #52]	; (800c18c <__libc_init_array+0x3c>)
 800c156:	1b64      	subs	r4, r4, r5
 800c158:	10a4      	asrs	r4, r4, #2
 800c15a:	2600      	movs	r6, #0
 800c15c:	42a6      	cmp	r6, r4
 800c15e:	d109      	bne.n	800c174 <__libc_init_array+0x24>
 800c160:	4d0b      	ldr	r5, [pc, #44]	; (800c190 <__libc_init_array+0x40>)
 800c162:	4c0c      	ldr	r4, [pc, #48]	; (800c194 <__libc_init_array+0x44>)
 800c164:	f002 ffcc 	bl	800f100 <_init>
 800c168:	1b64      	subs	r4, r4, r5
 800c16a:	10a4      	asrs	r4, r4, #2
 800c16c:	2600      	movs	r6, #0
 800c16e:	42a6      	cmp	r6, r4
 800c170:	d105      	bne.n	800c17e <__libc_init_array+0x2e>
 800c172:	bd70      	pop	{r4, r5, r6, pc}
 800c174:	f855 3b04 	ldr.w	r3, [r5], #4
 800c178:	4798      	blx	r3
 800c17a:	3601      	adds	r6, #1
 800c17c:	e7ee      	b.n	800c15c <__libc_init_array+0xc>
 800c17e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c182:	4798      	blx	r3
 800c184:	3601      	adds	r6, #1
 800c186:	e7f2      	b.n	800c16e <__libc_init_array+0x1e>
 800c188:	0800f8d0 	.word	0x0800f8d0
 800c18c:	0800f8d0 	.word	0x0800f8d0
 800c190:	0800f8d0 	.word	0x0800f8d0
 800c194:	0800f8d4 	.word	0x0800f8d4

0800c198 <__retarget_lock_acquire_recursive>:
 800c198:	4770      	bx	lr

0800c19a <__retarget_lock_release_recursive>:
 800c19a:	4770      	bx	lr

0800c19c <memcpy>:
 800c19c:	440a      	add	r2, r1
 800c19e:	4291      	cmp	r1, r2
 800c1a0:	f100 33ff 	add.w	r3, r0, #4294967295
 800c1a4:	d100      	bne.n	800c1a8 <memcpy+0xc>
 800c1a6:	4770      	bx	lr
 800c1a8:	b510      	push	{r4, lr}
 800c1aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c1ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c1b2:	4291      	cmp	r1, r2
 800c1b4:	d1f9      	bne.n	800c1aa <memcpy+0xe>
 800c1b6:	bd10      	pop	{r4, pc}

0800c1b8 <quorem>:
 800c1b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1bc:	6903      	ldr	r3, [r0, #16]
 800c1be:	690c      	ldr	r4, [r1, #16]
 800c1c0:	42a3      	cmp	r3, r4
 800c1c2:	4607      	mov	r7, r0
 800c1c4:	db7e      	blt.n	800c2c4 <quorem+0x10c>
 800c1c6:	3c01      	subs	r4, #1
 800c1c8:	f101 0814 	add.w	r8, r1, #20
 800c1cc:	f100 0514 	add.w	r5, r0, #20
 800c1d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c1d4:	9301      	str	r3, [sp, #4]
 800c1d6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c1da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c1de:	3301      	adds	r3, #1
 800c1e0:	429a      	cmp	r2, r3
 800c1e2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c1e6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c1ea:	fbb2 f6f3 	udiv	r6, r2, r3
 800c1ee:	d331      	bcc.n	800c254 <quorem+0x9c>
 800c1f0:	f04f 0e00 	mov.w	lr, #0
 800c1f4:	4640      	mov	r0, r8
 800c1f6:	46ac      	mov	ip, r5
 800c1f8:	46f2      	mov	sl, lr
 800c1fa:	f850 2b04 	ldr.w	r2, [r0], #4
 800c1fe:	b293      	uxth	r3, r2
 800c200:	fb06 e303 	mla	r3, r6, r3, lr
 800c204:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c208:	0c1a      	lsrs	r2, r3, #16
 800c20a:	b29b      	uxth	r3, r3
 800c20c:	ebaa 0303 	sub.w	r3, sl, r3
 800c210:	f8dc a000 	ldr.w	sl, [ip]
 800c214:	fa13 f38a 	uxtah	r3, r3, sl
 800c218:	fb06 220e 	mla	r2, r6, lr, r2
 800c21c:	9300      	str	r3, [sp, #0]
 800c21e:	9b00      	ldr	r3, [sp, #0]
 800c220:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c224:	b292      	uxth	r2, r2
 800c226:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c22a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c22e:	f8bd 3000 	ldrh.w	r3, [sp]
 800c232:	4581      	cmp	r9, r0
 800c234:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c238:	f84c 3b04 	str.w	r3, [ip], #4
 800c23c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c240:	d2db      	bcs.n	800c1fa <quorem+0x42>
 800c242:	f855 300b 	ldr.w	r3, [r5, fp]
 800c246:	b92b      	cbnz	r3, 800c254 <quorem+0x9c>
 800c248:	9b01      	ldr	r3, [sp, #4]
 800c24a:	3b04      	subs	r3, #4
 800c24c:	429d      	cmp	r5, r3
 800c24e:	461a      	mov	r2, r3
 800c250:	d32c      	bcc.n	800c2ac <quorem+0xf4>
 800c252:	613c      	str	r4, [r7, #16]
 800c254:	4638      	mov	r0, r7
 800c256:	f001 f9a5 	bl	800d5a4 <__mcmp>
 800c25a:	2800      	cmp	r0, #0
 800c25c:	db22      	blt.n	800c2a4 <quorem+0xec>
 800c25e:	3601      	adds	r6, #1
 800c260:	4629      	mov	r1, r5
 800c262:	2000      	movs	r0, #0
 800c264:	f858 2b04 	ldr.w	r2, [r8], #4
 800c268:	f8d1 c000 	ldr.w	ip, [r1]
 800c26c:	b293      	uxth	r3, r2
 800c26e:	1ac3      	subs	r3, r0, r3
 800c270:	0c12      	lsrs	r2, r2, #16
 800c272:	fa13 f38c 	uxtah	r3, r3, ip
 800c276:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c27a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c27e:	b29b      	uxth	r3, r3
 800c280:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c284:	45c1      	cmp	r9, r8
 800c286:	f841 3b04 	str.w	r3, [r1], #4
 800c28a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c28e:	d2e9      	bcs.n	800c264 <quorem+0xac>
 800c290:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c294:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c298:	b922      	cbnz	r2, 800c2a4 <quorem+0xec>
 800c29a:	3b04      	subs	r3, #4
 800c29c:	429d      	cmp	r5, r3
 800c29e:	461a      	mov	r2, r3
 800c2a0:	d30a      	bcc.n	800c2b8 <quorem+0x100>
 800c2a2:	613c      	str	r4, [r7, #16]
 800c2a4:	4630      	mov	r0, r6
 800c2a6:	b003      	add	sp, #12
 800c2a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2ac:	6812      	ldr	r2, [r2, #0]
 800c2ae:	3b04      	subs	r3, #4
 800c2b0:	2a00      	cmp	r2, #0
 800c2b2:	d1ce      	bne.n	800c252 <quorem+0x9a>
 800c2b4:	3c01      	subs	r4, #1
 800c2b6:	e7c9      	b.n	800c24c <quorem+0x94>
 800c2b8:	6812      	ldr	r2, [r2, #0]
 800c2ba:	3b04      	subs	r3, #4
 800c2bc:	2a00      	cmp	r2, #0
 800c2be:	d1f0      	bne.n	800c2a2 <quorem+0xea>
 800c2c0:	3c01      	subs	r4, #1
 800c2c2:	e7eb      	b.n	800c29c <quorem+0xe4>
 800c2c4:	2000      	movs	r0, #0
 800c2c6:	e7ee      	b.n	800c2a6 <quorem+0xee>

0800c2c8 <_dtoa_r>:
 800c2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2cc:	ed2d 8b04 	vpush	{d8-d9}
 800c2d0:	69c5      	ldr	r5, [r0, #28]
 800c2d2:	b093      	sub	sp, #76	; 0x4c
 800c2d4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c2d8:	ec57 6b10 	vmov	r6, r7, d0
 800c2dc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c2e0:	9107      	str	r1, [sp, #28]
 800c2e2:	4604      	mov	r4, r0
 800c2e4:	920a      	str	r2, [sp, #40]	; 0x28
 800c2e6:	930d      	str	r3, [sp, #52]	; 0x34
 800c2e8:	b975      	cbnz	r5, 800c308 <_dtoa_r+0x40>
 800c2ea:	2010      	movs	r0, #16
 800c2ec:	f000 fe2a 	bl	800cf44 <malloc>
 800c2f0:	4602      	mov	r2, r0
 800c2f2:	61e0      	str	r0, [r4, #28]
 800c2f4:	b920      	cbnz	r0, 800c300 <_dtoa_r+0x38>
 800c2f6:	4bae      	ldr	r3, [pc, #696]	; (800c5b0 <_dtoa_r+0x2e8>)
 800c2f8:	21ef      	movs	r1, #239	; 0xef
 800c2fa:	48ae      	ldr	r0, [pc, #696]	; (800c5b4 <_dtoa_r+0x2ec>)
 800c2fc:	f001 fc82 	bl	800dc04 <__assert_func>
 800c300:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c304:	6005      	str	r5, [r0, #0]
 800c306:	60c5      	str	r5, [r0, #12]
 800c308:	69e3      	ldr	r3, [r4, #28]
 800c30a:	6819      	ldr	r1, [r3, #0]
 800c30c:	b151      	cbz	r1, 800c324 <_dtoa_r+0x5c>
 800c30e:	685a      	ldr	r2, [r3, #4]
 800c310:	604a      	str	r2, [r1, #4]
 800c312:	2301      	movs	r3, #1
 800c314:	4093      	lsls	r3, r2
 800c316:	608b      	str	r3, [r1, #8]
 800c318:	4620      	mov	r0, r4
 800c31a:	f000 ff07 	bl	800d12c <_Bfree>
 800c31e:	69e3      	ldr	r3, [r4, #28]
 800c320:	2200      	movs	r2, #0
 800c322:	601a      	str	r2, [r3, #0]
 800c324:	1e3b      	subs	r3, r7, #0
 800c326:	bfbb      	ittet	lt
 800c328:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c32c:	9303      	strlt	r3, [sp, #12]
 800c32e:	2300      	movge	r3, #0
 800c330:	2201      	movlt	r2, #1
 800c332:	bfac      	ite	ge
 800c334:	f8c8 3000 	strge.w	r3, [r8]
 800c338:	f8c8 2000 	strlt.w	r2, [r8]
 800c33c:	4b9e      	ldr	r3, [pc, #632]	; (800c5b8 <_dtoa_r+0x2f0>)
 800c33e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c342:	ea33 0308 	bics.w	r3, r3, r8
 800c346:	d11b      	bne.n	800c380 <_dtoa_r+0xb8>
 800c348:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c34a:	f242 730f 	movw	r3, #9999	; 0x270f
 800c34e:	6013      	str	r3, [r2, #0]
 800c350:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c354:	4333      	orrs	r3, r6
 800c356:	f000 8593 	beq.w	800ce80 <_dtoa_r+0xbb8>
 800c35a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c35c:	b963      	cbnz	r3, 800c378 <_dtoa_r+0xb0>
 800c35e:	4b97      	ldr	r3, [pc, #604]	; (800c5bc <_dtoa_r+0x2f4>)
 800c360:	e027      	b.n	800c3b2 <_dtoa_r+0xea>
 800c362:	4b97      	ldr	r3, [pc, #604]	; (800c5c0 <_dtoa_r+0x2f8>)
 800c364:	9300      	str	r3, [sp, #0]
 800c366:	3308      	adds	r3, #8
 800c368:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c36a:	6013      	str	r3, [r2, #0]
 800c36c:	9800      	ldr	r0, [sp, #0]
 800c36e:	b013      	add	sp, #76	; 0x4c
 800c370:	ecbd 8b04 	vpop	{d8-d9}
 800c374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c378:	4b90      	ldr	r3, [pc, #576]	; (800c5bc <_dtoa_r+0x2f4>)
 800c37a:	9300      	str	r3, [sp, #0]
 800c37c:	3303      	adds	r3, #3
 800c37e:	e7f3      	b.n	800c368 <_dtoa_r+0xa0>
 800c380:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c384:	2200      	movs	r2, #0
 800c386:	ec51 0b17 	vmov	r0, r1, d7
 800c38a:	eeb0 8a47 	vmov.f32	s16, s14
 800c38e:	eef0 8a67 	vmov.f32	s17, s15
 800c392:	2300      	movs	r3, #0
 800c394:	f7f4 fba8 	bl	8000ae8 <__aeabi_dcmpeq>
 800c398:	4681      	mov	r9, r0
 800c39a:	b160      	cbz	r0, 800c3b6 <_dtoa_r+0xee>
 800c39c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c39e:	2301      	movs	r3, #1
 800c3a0:	6013      	str	r3, [r2, #0]
 800c3a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	f000 8568 	beq.w	800ce7a <_dtoa_r+0xbb2>
 800c3aa:	4b86      	ldr	r3, [pc, #536]	; (800c5c4 <_dtoa_r+0x2fc>)
 800c3ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c3ae:	6013      	str	r3, [r2, #0]
 800c3b0:	3b01      	subs	r3, #1
 800c3b2:	9300      	str	r3, [sp, #0]
 800c3b4:	e7da      	b.n	800c36c <_dtoa_r+0xa4>
 800c3b6:	aa10      	add	r2, sp, #64	; 0x40
 800c3b8:	a911      	add	r1, sp, #68	; 0x44
 800c3ba:	4620      	mov	r0, r4
 800c3bc:	eeb0 0a48 	vmov.f32	s0, s16
 800c3c0:	eef0 0a68 	vmov.f32	s1, s17
 800c3c4:	f001 f994 	bl	800d6f0 <__d2b>
 800c3c8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c3cc:	4682      	mov	sl, r0
 800c3ce:	2d00      	cmp	r5, #0
 800c3d0:	d07f      	beq.n	800c4d2 <_dtoa_r+0x20a>
 800c3d2:	ee18 3a90 	vmov	r3, s17
 800c3d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c3da:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c3de:	ec51 0b18 	vmov	r0, r1, d8
 800c3e2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c3e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c3ea:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c3ee:	4619      	mov	r1, r3
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	4b75      	ldr	r3, [pc, #468]	; (800c5c8 <_dtoa_r+0x300>)
 800c3f4:	f7f3 ff58 	bl	80002a8 <__aeabi_dsub>
 800c3f8:	a367      	add	r3, pc, #412	; (adr r3, 800c598 <_dtoa_r+0x2d0>)
 800c3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3fe:	f7f4 f90b 	bl	8000618 <__aeabi_dmul>
 800c402:	a367      	add	r3, pc, #412	; (adr r3, 800c5a0 <_dtoa_r+0x2d8>)
 800c404:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c408:	f7f3 ff50 	bl	80002ac <__adddf3>
 800c40c:	4606      	mov	r6, r0
 800c40e:	4628      	mov	r0, r5
 800c410:	460f      	mov	r7, r1
 800c412:	f7f4 f897 	bl	8000544 <__aeabi_i2d>
 800c416:	a364      	add	r3, pc, #400	; (adr r3, 800c5a8 <_dtoa_r+0x2e0>)
 800c418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c41c:	f7f4 f8fc 	bl	8000618 <__aeabi_dmul>
 800c420:	4602      	mov	r2, r0
 800c422:	460b      	mov	r3, r1
 800c424:	4630      	mov	r0, r6
 800c426:	4639      	mov	r1, r7
 800c428:	f7f3 ff40 	bl	80002ac <__adddf3>
 800c42c:	4606      	mov	r6, r0
 800c42e:	460f      	mov	r7, r1
 800c430:	f7f4 fba2 	bl	8000b78 <__aeabi_d2iz>
 800c434:	2200      	movs	r2, #0
 800c436:	4683      	mov	fp, r0
 800c438:	2300      	movs	r3, #0
 800c43a:	4630      	mov	r0, r6
 800c43c:	4639      	mov	r1, r7
 800c43e:	f7f4 fb5d 	bl	8000afc <__aeabi_dcmplt>
 800c442:	b148      	cbz	r0, 800c458 <_dtoa_r+0x190>
 800c444:	4658      	mov	r0, fp
 800c446:	f7f4 f87d 	bl	8000544 <__aeabi_i2d>
 800c44a:	4632      	mov	r2, r6
 800c44c:	463b      	mov	r3, r7
 800c44e:	f7f4 fb4b 	bl	8000ae8 <__aeabi_dcmpeq>
 800c452:	b908      	cbnz	r0, 800c458 <_dtoa_r+0x190>
 800c454:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c458:	f1bb 0f16 	cmp.w	fp, #22
 800c45c:	d857      	bhi.n	800c50e <_dtoa_r+0x246>
 800c45e:	4b5b      	ldr	r3, [pc, #364]	; (800c5cc <_dtoa_r+0x304>)
 800c460:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c468:	ec51 0b18 	vmov	r0, r1, d8
 800c46c:	f7f4 fb46 	bl	8000afc <__aeabi_dcmplt>
 800c470:	2800      	cmp	r0, #0
 800c472:	d04e      	beq.n	800c512 <_dtoa_r+0x24a>
 800c474:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c478:	2300      	movs	r3, #0
 800c47a:	930c      	str	r3, [sp, #48]	; 0x30
 800c47c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c47e:	1b5b      	subs	r3, r3, r5
 800c480:	1e5a      	subs	r2, r3, #1
 800c482:	bf45      	ittet	mi
 800c484:	f1c3 0301 	rsbmi	r3, r3, #1
 800c488:	9305      	strmi	r3, [sp, #20]
 800c48a:	2300      	movpl	r3, #0
 800c48c:	2300      	movmi	r3, #0
 800c48e:	9206      	str	r2, [sp, #24]
 800c490:	bf54      	ite	pl
 800c492:	9305      	strpl	r3, [sp, #20]
 800c494:	9306      	strmi	r3, [sp, #24]
 800c496:	f1bb 0f00 	cmp.w	fp, #0
 800c49a:	db3c      	blt.n	800c516 <_dtoa_r+0x24e>
 800c49c:	9b06      	ldr	r3, [sp, #24]
 800c49e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800c4a2:	445b      	add	r3, fp
 800c4a4:	9306      	str	r3, [sp, #24]
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	9308      	str	r3, [sp, #32]
 800c4aa:	9b07      	ldr	r3, [sp, #28]
 800c4ac:	2b09      	cmp	r3, #9
 800c4ae:	d868      	bhi.n	800c582 <_dtoa_r+0x2ba>
 800c4b0:	2b05      	cmp	r3, #5
 800c4b2:	bfc4      	itt	gt
 800c4b4:	3b04      	subgt	r3, #4
 800c4b6:	9307      	strgt	r3, [sp, #28]
 800c4b8:	9b07      	ldr	r3, [sp, #28]
 800c4ba:	f1a3 0302 	sub.w	r3, r3, #2
 800c4be:	bfcc      	ite	gt
 800c4c0:	2500      	movgt	r5, #0
 800c4c2:	2501      	movle	r5, #1
 800c4c4:	2b03      	cmp	r3, #3
 800c4c6:	f200 8085 	bhi.w	800c5d4 <_dtoa_r+0x30c>
 800c4ca:	e8df f003 	tbb	[pc, r3]
 800c4ce:	3b2e      	.short	0x3b2e
 800c4d0:	5839      	.short	0x5839
 800c4d2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c4d6:	441d      	add	r5, r3
 800c4d8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c4dc:	2b20      	cmp	r3, #32
 800c4de:	bfc1      	itttt	gt
 800c4e0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c4e4:	fa08 f803 	lslgt.w	r8, r8, r3
 800c4e8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800c4ec:	fa26 f303 	lsrgt.w	r3, r6, r3
 800c4f0:	bfd6      	itet	le
 800c4f2:	f1c3 0320 	rsble	r3, r3, #32
 800c4f6:	ea48 0003 	orrgt.w	r0, r8, r3
 800c4fa:	fa06 f003 	lslle.w	r0, r6, r3
 800c4fe:	f7f4 f811 	bl	8000524 <__aeabi_ui2d>
 800c502:	2201      	movs	r2, #1
 800c504:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800c508:	3d01      	subs	r5, #1
 800c50a:	920e      	str	r2, [sp, #56]	; 0x38
 800c50c:	e76f      	b.n	800c3ee <_dtoa_r+0x126>
 800c50e:	2301      	movs	r3, #1
 800c510:	e7b3      	b.n	800c47a <_dtoa_r+0x1b2>
 800c512:	900c      	str	r0, [sp, #48]	; 0x30
 800c514:	e7b2      	b.n	800c47c <_dtoa_r+0x1b4>
 800c516:	9b05      	ldr	r3, [sp, #20]
 800c518:	eba3 030b 	sub.w	r3, r3, fp
 800c51c:	9305      	str	r3, [sp, #20]
 800c51e:	f1cb 0300 	rsb	r3, fp, #0
 800c522:	9308      	str	r3, [sp, #32]
 800c524:	2300      	movs	r3, #0
 800c526:	930b      	str	r3, [sp, #44]	; 0x2c
 800c528:	e7bf      	b.n	800c4aa <_dtoa_r+0x1e2>
 800c52a:	2300      	movs	r3, #0
 800c52c:	9309      	str	r3, [sp, #36]	; 0x24
 800c52e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c530:	2b00      	cmp	r3, #0
 800c532:	dc52      	bgt.n	800c5da <_dtoa_r+0x312>
 800c534:	2301      	movs	r3, #1
 800c536:	9301      	str	r3, [sp, #4]
 800c538:	9304      	str	r3, [sp, #16]
 800c53a:	461a      	mov	r2, r3
 800c53c:	920a      	str	r2, [sp, #40]	; 0x28
 800c53e:	e00b      	b.n	800c558 <_dtoa_r+0x290>
 800c540:	2301      	movs	r3, #1
 800c542:	e7f3      	b.n	800c52c <_dtoa_r+0x264>
 800c544:	2300      	movs	r3, #0
 800c546:	9309      	str	r3, [sp, #36]	; 0x24
 800c548:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c54a:	445b      	add	r3, fp
 800c54c:	9301      	str	r3, [sp, #4]
 800c54e:	3301      	adds	r3, #1
 800c550:	2b01      	cmp	r3, #1
 800c552:	9304      	str	r3, [sp, #16]
 800c554:	bfb8      	it	lt
 800c556:	2301      	movlt	r3, #1
 800c558:	69e0      	ldr	r0, [r4, #28]
 800c55a:	2100      	movs	r1, #0
 800c55c:	2204      	movs	r2, #4
 800c55e:	f102 0614 	add.w	r6, r2, #20
 800c562:	429e      	cmp	r6, r3
 800c564:	d93d      	bls.n	800c5e2 <_dtoa_r+0x31a>
 800c566:	6041      	str	r1, [r0, #4]
 800c568:	4620      	mov	r0, r4
 800c56a:	f000 fd9f 	bl	800d0ac <_Balloc>
 800c56e:	9000      	str	r0, [sp, #0]
 800c570:	2800      	cmp	r0, #0
 800c572:	d139      	bne.n	800c5e8 <_dtoa_r+0x320>
 800c574:	4b16      	ldr	r3, [pc, #88]	; (800c5d0 <_dtoa_r+0x308>)
 800c576:	4602      	mov	r2, r0
 800c578:	f240 11af 	movw	r1, #431	; 0x1af
 800c57c:	e6bd      	b.n	800c2fa <_dtoa_r+0x32>
 800c57e:	2301      	movs	r3, #1
 800c580:	e7e1      	b.n	800c546 <_dtoa_r+0x27e>
 800c582:	2501      	movs	r5, #1
 800c584:	2300      	movs	r3, #0
 800c586:	9307      	str	r3, [sp, #28]
 800c588:	9509      	str	r5, [sp, #36]	; 0x24
 800c58a:	f04f 33ff 	mov.w	r3, #4294967295
 800c58e:	9301      	str	r3, [sp, #4]
 800c590:	9304      	str	r3, [sp, #16]
 800c592:	2200      	movs	r2, #0
 800c594:	2312      	movs	r3, #18
 800c596:	e7d1      	b.n	800c53c <_dtoa_r+0x274>
 800c598:	636f4361 	.word	0x636f4361
 800c59c:	3fd287a7 	.word	0x3fd287a7
 800c5a0:	8b60c8b3 	.word	0x8b60c8b3
 800c5a4:	3fc68a28 	.word	0x3fc68a28
 800c5a8:	509f79fb 	.word	0x509f79fb
 800c5ac:	3fd34413 	.word	0x3fd34413
 800c5b0:	0800f56d 	.word	0x0800f56d
 800c5b4:	0800f584 	.word	0x0800f584
 800c5b8:	7ff00000 	.word	0x7ff00000
 800c5bc:	0800f569 	.word	0x0800f569
 800c5c0:	0800f560 	.word	0x0800f560
 800c5c4:	0800f53d 	.word	0x0800f53d
 800c5c8:	3ff80000 	.word	0x3ff80000
 800c5cc:	0800f670 	.word	0x0800f670
 800c5d0:	0800f5dc 	.word	0x0800f5dc
 800c5d4:	2301      	movs	r3, #1
 800c5d6:	9309      	str	r3, [sp, #36]	; 0x24
 800c5d8:	e7d7      	b.n	800c58a <_dtoa_r+0x2c2>
 800c5da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5dc:	9301      	str	r3, [sp, #4]
 800c5de:	9304      	str	r3, [sp, #16]
 800c5e0:	e7ba      	b.n	800c558 <_dtoa_r+0x290>
 800c5e2:	3101      	adds	r1, #1
 800c5e4:	0052      	lsls	r2, r2, #1
 800c5e6:	e7ba      	b.n	800c55e <_dtoa_r+0x296>
 800c5e8:	69e3      	ldr	r3, [r4, #28]
 800c5ea:	9a00      	ldr	r2, [sp, #0]
 800c5ec:	601a      	str	r2, [r3, #0]
 800c5ee:	9b04      	ldr	r3, [sp, #16]
 800c5f0:	2b0e      	cmp	r3, #14
 800c5f2:	f200 80a8 	bhi.w	800c746 <_dtoa_r+0x47e>
 800c5f6:	2d00      	cmp	r5, #0
 800c5f8:	f000 80a5 	beq.w	800c746 <_dtoa_r+0x47e>
 800c5fc:	f1bb 0f00 	cmp.w	fp, #0
 800c600:	dd38      	ble.n	800c674 <_dtoa_r+0x3ac>
 800c602:	4bc0      	ldr	r3, [pc, #768]	; (800c904 <_dtoa_r+0x63c>)
 800c604:	f00b 020f 	and.w	r2, fp, #15
 800c608:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c60c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c610:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c614:	ea4f 182b 	mov.w	r8, fp, asr #4
 800c618:	d019      	beq.n	800c64e <_dtoa_r+0x386>
 800c61a:	4bbb      	ldr	r3, [pc, #748]	; (800c908 <_dtoa_r+0x640>)
 800c61c:	ec51 0b18 	vmov	r0, r1, d8
 800c620:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c624:	f7f4 f922 	bl	800086c <__aeabi_ddiv>
 800c628:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c62c:	f008 080f 	and.w	r8, r8, #15
 800c630:	2503      	movs	r5, #3
 800c632:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800c908 <_dtoa_r+0x640>
 800c636:	f1b8 0f00 	cmp.w	r8, #0
 800c63a:	d10a      	bne.n	800c652 <_dtoa_r+0x38a>
 800c63c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c640:	4632      	mov	r2, r6
 800c642:	463b      	mov	r3, r7
 800c644:	f7f4 f912 	bl	800086c <__aeabi_ddiv>
 800c648:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c64c:	e02b      	b.n	800c6a6 <_dtoa_r+0x3de>
 800c64e:	2502      	movs	r5, #2
 800c650:	e7ef      	b.n	800c632 <_dtoa_r+0x36a>
 800c652:	f018 0f01 	tst.w	r8, #1
 800c656:	d008      	beq.n	800c66a <_dtoa_r+0x3a2>
 800c658:	4630      	mov	r0, r6
 800c65a:	4639      	mov	r1, r7
 800c65c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c660:	f7f3 ffda 	bl	8000618 <__aeabi_dmul>
 800c664:	3501      	adds	r5, #1
 800c666:	4606      	mov	r6, r0
 800c668:	460f      	mov	r7, r1
 800c66a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c66e:	f109 0908 	add.w	r9, r9, #8
 800c672:	e7e0      	b.n	800c636 <_dtoa_r+0x36e>
 800c674:	f000 809f 	beq.w	800c7b6 <_dtoa_r+0x4ee>
 800c678:	f1cb 0600 	rsb	r6, fp, #0
 800c67c:	4ba1      	ldr	r3, [pc, #644]	; (800c904 <_dtoa_r+0x63c>)
 800c67e:	4fa2      	ldr	r7, [pc, #648]	; (800c908 <_dtoa_r+0x640>)
 800c680:	f006 020f 	and.w	r2, r6, #15
 800c684:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c68c:	ec51 0b18 	vmov	r0, r1, d8
 800c690:	f7f3 ffc2 	bl	8000618 <__aeabi_dmul>
 800c694:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c698:	1136      	asrs	r6, r6, #4
 800c69a:	2300      	movs	r3, #0
 800c69c:	2502      	movs	r5, #2
 800c69e:	2e00      	cmp	r6, #0
 800c6a0:	d17e      	bne.n	800c7a0 <_dtoa_r+0x4d8>
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d1d0      	bne.n	800c648 <_dtoa_r+0x380>
 800c6a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c6a8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	f000 8084 	beq.w	800c7ba <_dtoa_r+0x4f2>
 800c6b2:	4b96      	ldr	r3, [pc, #600]	; (800c90c <_dtoa_r+0x644>)
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	4640      	mov	r0, r8
 800c6b8:	4649      	mov	r1, r9
 800c6ba:	f7f4 fa1f 	bl	8000afc <__aeabi_dcmplt>
 800c6be:	2800      	cmp	r0, #0
 800c6c0:	d07b      	beq.n	800c7ba <_dtoa_r+0x4f2>
 800c6c2:	9b04      	ldr	r3, [sp, #16]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d078      	beq.n	800c7ba <_dtoa_r+0x4f2>
 800c6c8:	9b01      	ldr	r3, [sp, #4]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	dd39      	ble.n	800c742 <_dtoa_r+0x47a>
 800c6ce:	4b90      	ldr	r3, [pc, #576]	; (800c910 <_dtoa_r+0x648>)
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	4640      	mov	r0, r8
 800c6d4:	4649      	mov	r1, r9
 800c6d6:	f7f3 ff9f 	bl	8000618 <__aeabi_dmul>
 800c6da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c6de:	9e01      	ldr	r6, [sp, #4]
 800c6e0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800c6e4:	3501      	adds	r5, #1
 800c6e6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c6ea:	4628      	mov	r0, r5
 800c6ec:	f7f3 ff2a 	bl	8000544 <__aeabi_i2d>
 800c6f0:	4642      	mov	r2, r8
 800c6f2:	464b      	mov	r3, r9
 800c6f4:	f7f3 ff90 	bl	8000618 <__aeabi_dmul>
 800c6f8:	4b86      	ldr	r3, [pc, #536]	; (800c914 <_dtoa_r+0x64c>)
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	f7f3 fdd6 	bl	80002ac <__adddf3>
 800c700:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c704:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c708:	9303      	str	r3, [sp, #12]
 800c70a:	2e00      	cmp	r6, #0
 800c70c:	d158      	bne.n	800c7c0 <_dtoa_r+0x4f8>
 800c70e:	4b82      	ldr	r3, [pc, #520]	; (800c918 <_dtoa_r+0x650>)
 800c710:	2200      	movs	r2, #0
 800c712:	4640      	mov	r0, r8
 800c714:	4649      	mov	r1, r9
 800c716:	f7f3 fdc7 	bl	80002a8 <__aeabi_dsub>
 800c71a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c71e:	4680      	mov	r8, r0
 800c720:	4689      	mov	r9, r1
 800c722:	f7f4 fa09 	bl	8000b38 <__aeabi_dcmpgt>
 800c726:	2800      	cmp	r0, #0
 800c728:	f040 8296 	bne.w	800cc58 <_dtoa_r+0x990>
 800c72c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c730:	4640      	mov	r0, r8
 800c732:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c736:	4649      	mov	r1, r9
 800c738:	f7f4 f9e0 	bl	8000afc <__aeabi_dcmplt>
 800c73c:	2800      	cmp	r0, #0
 800c73e:	f040 8289 	bne.w	800cc54 <_dtoa_r+0x98c>
 800c742:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c746:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c748:	2b00      	cmp	r3, #0
 800c74a:	f2c0 814e 	blt.w	800c9ea <_dtoa_r+0x722>
 800c74e:	f1bb 0f0e 	cmp.w	fp, #14
 800c752:	f300 814a 	bgt.w	800c9ea <_dtoa_r+0x722>
 800c756:	4b6b      	ldr	r3, [pc, #428]	; (800c904 <_dtoa_r+0x63c>)
 800c758:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c75c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c760:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c762:	2b00      	cmp	r3, #0
 800c764:	f280 80dc 	bge.w	800c920 <_dtoa_r+0x658>
 800c768:	9b04      	ldr	r3, [sp, #16]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	f300 80d8 	bgt.w	800c920 <_dtoa_r+0x658>
 800c770:	f040 826f 	bne.w	800cc52 <_dtoa_r+0x98a>
 800c774:	4b68      	ldr	r3, [pc, #416]	; (800c918 <_dtoa_r+0x650>)
 800c776:	2200      	movs	r2, #0
 800c778:	4640      	mov	r0, r8
 800c77a:	4649      	mov	r1, r9
 800c77c:	f7f3 ff4c 	bl	8000618 <__aeabi_dmul>
 800c780:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c784:	f7f4 f9ce 	bl	8000b24 <__aeabi_dcmpge>
 800c788:	9e04      	ldr	r6, [sp, #16]
 800c78a:	4637      	mov	r7, r6
 800c78c:	2800      	cmp	r0, #0
 800c78e:	f040 8245 	bne.w	800cc1c <_dtoa_r+0x954>
 800c792:	9d00      	ldr	r5, [sp, #0]
 800c794:	2331      	movs	r3, #49	; 0x31
 800c796:	f805 3b01 	strb.w	r3, [r5], #1
 800c79a:	f10b 0b01 	add.w	fp, fp, #1
 800c79e:	e241      	b.n	800cc24 <_dtoa_r+0x95c>
 800c7a0:	07f2      	lsls	r2, r6, #31
 800c7a2:	d505      	bpl.n	800c7b0 <_dtoa_r+0x4e8>
 800c7a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c7a8:	f7f3 ff36 	bl	8000618 <__aeabi_dmul>
 800c7ac:	3501      	adds	r5, #1
 800c7ae:	2301      	movs	r3, #1
 800c7b0:	1076      	asrs	r6, r6, #1
 800c7b2:	3708      	adds	r7, #8
 800c7b4:	e773      	b.n	800c69e <_dtoa_r+0x3d6>
 800c7b6:	2502      	movs	r5, #2
 800c7b8:	e775      	b.n	800c6a6 <_dtoa_r+0x3de>
 800c7ba:	9e04      	ldr	r6, [sp, #16]
 800c7bc:	465f      	mov	r7, fp
 800c7be:	e792      	b.n	800c6e6 <_dtoa_r+0x41e>
 800c7c0:	9900      	ldr	r1, [sp, #0]
 800c7c2:	4b50      	ldr	r3, [pc, #320]	; (800c904 <_dtoa_r+0x63c>)
 800c7c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c7c8:	4431      	add	r1, r6
 800c7ca:	9102      	str	r1, [sp, #8]
 800c7cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c7ce:	eeb0 9a47 	vmov.f32	s18, s14
 800c7d2:	eef0 9a67 	vmov.f32	s19, s15
 800c7d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c7da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c7de:	2900      	cmp	r1, #0
 800c7e0:	d044      	beq.n	800c86c <_dtoa_r+0x5a4>
 800c7e2:	494e      	ldr	r1, [pc, #312]	; (800c91c <_dtoa_r+0x654>)
 800c7e4:	2000      	movs	r0, #0
 800c7e6:	f7f4 f841 	bl	800086c <__aeabi_ddiv>
 800c7ea:	ec53 2b19 	vmov	r2, r3, d9
 800c7ee:	f7f3 fd5b 	bl	80002a8 <__aeabi_dsub>
 800c7f2:	9d00      	ldr	r5, [sp, #0]
 800c7f4:	ec41 0b19 	vmov	d9, r0, r1
 800c7f8:	4649      	mov	r1, r9
 800c7fa:	4640      	mov	r0, r8
 800c7fc:	f7f4 f9bc 	bl	8000b78 <__aeabi_d2iz>
 800c800:	4606      	mov	r6, r0
 800c802:	f7f3 fe9f 	bl	8000544 <__aeabi_i2d>
 800c806:	4602      	mov	r2, r0
 800c808:	460b      	mov	r3, r1
 800c80a:	4640      	mov	r0, r8
 800c80c:	4649      	mov	r1, r9
 800c80e:	f7f3 fd4b 	bl	80002a8 <__aeabi_dsub>
 800c812:	3630      	adds	r6, #48	; 0x30
 800c814:	f805 6b01 	strb.w	r6, [r5], #1
 800c818:	ec53 2b19 	vmov	r2, r3, d9
 800c81c:	4680      	mov	r8, r0
 800c81e:	4689      	mov	r9, r1
 800c820:	f7f4 f96c 	bl	8000afc <__aeabi_dcmplt>
 800c824:	2800      	cmp	r0, #0
 800c826:	d164      	bne.n	800c8f2 <_dtoa_r+0x62a>
 800c828:	4642      	mov	r2, r8
 800c82a:	464b      	mov	r3, r9
 800c82c:	4937      	ldr	r1, [pc, #220]	; (800c90c <_dtoa_r+0x644>)
 800c82e:	2000      	movs	r0, #0
 800c830:	f7f3 fd3a 	bl	80002a8 <__aeabi_dsub>
 800c834:	ec53 2b19 	vmov	r2, r3, d9
 800c838:	f7f4 f960 	bl	8000afc <__aeabi_dcmplt>
 800c83c:	2800      	cmp	r0, #0
 800c83e:	f040 80b6 	bne.w	800c9ae <_dtoa_r+0x6e6>
 800c842:	9b02      	ldr	r3, [sp, #8]
 800c844:	429d      	cmp	r5, r3
 800c846:	f43f af7c 	beq.w	800c742 <_dtoa_r+0x47a>
 800c84a:	4b31      	ldr	r3, [pc, #196]	; (800c910 <_dtoa_r+0x648>)
 800c84c:	ec51 0b19 	vmov	r0, r1, d9
 800c850:	2200      	movs	r2, #0
 800c852:	f7f3 fee1 	bl	8000618 <__aeabi_dmul>
 800c856:	4b2e      	ldr	r3, [pc, #184]	; (800c910 <_dtoa_r+0x648>)
 800c858:	ec41 0b19 	vmov	d9, r0, r1
 800c85c:	2200      	movs	r2, #0
 800c85e:	4640      	mov	r0, r8
 800c860:	4649      	mov	r1, r9
 800c862:	f7f3 fed9 	bl	8000618 <__aeabi_dmul>
 800c866:	4680      	mov	r8, r0
 800c868:	4689      	mov	r9, r1
 800c86a:	e7c5      	b.n	800c7f8 <_dtoa_r+0x530>
 800c86c:	ec51 0b17 	vmov	r0, r1, d7
 800c870:	f7f3 fed2 	bl	8000618 <__aeabi_dmul>
 800c874:	9b02      	ldr	r3, [sp, #8]
 800c876:	9d00      	ldr	r5, [sp, #0]
 800c878:	930f      	str	r3, [sp, #60]	; 0x3c
 800c87a:	ec41 0b19 	vmov	d9, r0, r1
 800c87e:	4649      	mov	r1, r9
 800c880:	4640      	mov	r0, r8
 800c882:	f7f4 f979 	bl	8000b78 <__aeabi_d2iz>
 800c886:	4606      	mov	r6, r0
 800c888:	f7f3 fe5c 	bl	8000544 <__aeabi_i2d>
 800c88c:	3630      	adds	r6, #48	; 0x30
 800c88e:	4602      	mov	r2, r0
 800c890:	460b      	mov	r3, r1
 800c892:	4640      	mov	r0, r8
 800c894:	4649      	mov	r1, r9
 800c896:	f7f3 fd07 	bl	80002a8 <__aeabi_dsub>
 800c89a:	f805 6b01 	strb.w	r6, [r5], #1
 800c89e:	9b02      	ldr	r3, [sp, #8]
 800c8a0:	429d      	cmp	r5, r3
 800c8a2:	4680      	mov	r8, r0
 800c8a4:	4689      	mov	r9, r1
 800c8a6:	f04f 0200 	mov.w	r2, #0
 800c8aa:	d124      	bne.n	800c8f6 <_dtoa_r+0x62e>
 800c8ac:	4b1b      	ldr	r3, [pc, #108]	; (800c91c <_dtoa_r+0x654>)
 800c8ae:	ec51 0b19 	vmov	r0, r1, d9
 800c8b2:	f7f3 fcfb 	bl	80002ac <__adddf3>
 800c8b6:	4602      	mov	r2, r0
 800c8b8:	460b      	mov	r3, r1
 800c8ba:	4640      	mov	r0, r8
 800c8bc:	4649      	mov	r1, r9
 800c8be:	f7f4 f93b 	bl	8000b38 <__aeabi_dcmpgt>
 800c8c2:	2800      	cmp	r0, #0
 800c8c4:	d173      	bne.n	800c9ae <_dtoa_r+0x6e6>
 800c8c6:	ec53 2b19 	vmov	r2, r3, d9
 800c8ca:	4914      	ldr	r1, [pc, #80]	; (800c91c <_dtoa_r+0x654>)
 800c8cc:	2000      	movs	r0, #0
 800c8ce:	f7f3 fceb 	bl	80002a8 <__aeabi_dsub>
 800c8d2:	4602      	mov	r2, r0
 800c8d4:	460b      	mov	r3, r1
 800c8d6:	4640      	mov	r0, r8
 800c8d8:	4649      	mov	r1, r9
 800c8da:	f7f4 f90f 	bl	8000afc <__aeabi_dcmplt>
 800c8de:	2800      	cmp	r0, #0
 800c8e0:	f43f af2f 	beq.w	800c742 <_dtoa_r+0x47a>
 800c8e4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c8e6:	1e6b      	subs	r3, r5, #1
 800c8e8:	930f      	str	r3, [sp, #60]	; 0x3c
 800c8ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c8ee:	2b30      	cmp	r3, #48	; 0x30
 800c8f0:	d0f8      	beq.n	800c8e4 <_dtoa_r+0x61c>
 800c8f2:	46bb      	mov	fp, r7
 800c8f4:	e04a      	b.n	800c98c <_dtoa_r+0x6c4>
 800c8f6:	4b06      	ldr	r3, [pc, #24]	; (800c910 <_dtoa_r+0x648>)
 800c8f8:	f7f3 fe8e 	bl	8000618 <__aeabi_dmul>
 800c8fc:	4680      	mov	r8, r0
 800c8fe:	4689      	mov	r9, r1
 800c900:	e7bd      	b.n	800c87e <_dtoa_r+0x5b6>
 800c902:	bf00      	nop
 800c904:	0800f670 	.word	0x0800f670
 800c908:	0800f648 	.word	0x0800f648
 800c90c:	3ff00000 	.word	0x3ff00000
 800c910:	40240000 	.word	0x40240000
 800c914:	401c0000 	.word	0x401c0000
 800c918:	40140000 	.word	0x40140000
 800c91c:	3fe00000 	.word	0x3fe00000
 800c920:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c924:	9d00      	ldr	r5, [sp, #0]
 800c926:	4642      	mov	r2, r8
 800c928:	464b      	mov	r3, r9
 800c92a:	4630      	mov	r0, r6
 800c92c:	4639      	mov	r1, r7
 800c92e:	f7f3 ff9d 	bl	800086c <__aeabi_ddiv>
 800c932:	f7f4 f921 	bl	8000b78 <__aeabi_d2iz>
 800c936:	9001      	str	r0, [sp, #4]
 800c938:	f7f3 fe04 	bl	8000544 <__aeabi_i2d>
 800c93c:	4642      	mov	r2, r8
 800c93e:	464b      	mov	r3, r9
 800c940:	f7f3 fe6a 	bl	8000618 <__aeabi_dmul>
 800c944:	4602      	mov	r2, r0
 800c946:	460b      	mov	r3, r1
 800c948:	4630      	mov	r0, r6
 800c94a:	4639      	mov	r1, r7
 800c94c:	f7f3 fcac 	bl	80002a8 <__aeabi_dsub>
 800c950:	9e01      	ldr	r6, [sp, #4]
 800c952:	9f04      	ldr	r7, [sp, #16]
 800c954:	3630      	adds	r6, #48	; 0x30
 800c956:	f805 6b01 	strb.w	r6, [r5], #1
 800c95a:	9e00      	ldr	r6, [sp, #0]
 800c95c:	1bae      	subs	r6, r5, r6
 800c95e:	42b7      	cmp	r7, r6
 800c960:	4602      	mov	r2, r0
 800c962:	460b      	mov	r3, r1
 800c964:	d134      	bne.n	800c9d0 <_dtoa_r+0x708>
 800c966:	f7f3 fca1 	bl	80002ac <__adddf3>
 800c96a:	4642      	mov	r2, r8
 800c96c:	464b      	mov	r3, r9
 800c96e:	4606      	mov	r6, r0
 800c970:	460f      	mov	r7, r1
 800c972:	f7f4 f8e1 	bl	8000b38 <__aeabi_dcmpgt>
 800c976:	b9c8      	cbnz	r0, 800c9ac <_dtoa_r+0x6e4>
 800c978:	4642      	mov	r2, r8
 800c97a:	464b      	mov	r3, r9
 800c97c:	4630      	mov	r0, r6
 800c97e:	4639      	mov	r1, r7
 800c980:	f7f4 f8b2 	bl	8000ae8 <__aeabi_dcmpeq>
 800c984:	b110      	cbz	r0, 800c98c <_dtoa_r+0x6c4>
 800c986:	9b01      	ldr	r3, [sp, #4]
 800c988:	07db      	lsls	r3, r3, #31
 800c98a:	d40f      	bmi.n	800c9ac <_dtoa_r+0x6e4>
 800c98c:	4651      	mov	r1, sl
 800c98e:	4620      	mov	r0, r4
 800c990:	f000 fbcc 	bl	800d12c <_Bfree>
 800c994:	2300      	movs	r3, #0
 800c996:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c998:	702b      	strb	r3, [r5, #0]
 800c99a:	f10b 0301 	add.w	r3, fp, #1
 800c99e:	6013      	str	r3, [r2, #0]
 800c9a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	f43f ace2 	beq.w	800c36c <_dtoa_r+0xa4>
 800c9a8:	601d      	str	r5, [r3, #0]
 800c9aa:	e4df      	b.n	800c36c <_dtoa_r+0xa4>
 800c9ac:	465f      	mov	r7, fp
 800c9ae:	462b      	mov	r3, r5
 800c9b0:	461d      	mov	r5, r3
 800c9b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c9b6:	2a39      	cmp	r2, #57	; 0x39
 800c9b8:	d106      	bne.n	800c9c8 <_dtoa_r+0x700>
 800c9ba:	9a00      	ldr	r2, [sp, #0]
 800c9bc:	429a      	cmp	r2, r3
 800c9be:	d1f7      	bne.n	800c9b0 <_dtoa_r+0x6e8>
 800c9c0:	9900      	ldr	r1, [sp, #0]
 800c9c2:	2230      	movs	r2, #48	; 0x30
 800c9c4:	3701      	adds	r7, #1
 800c9c6:	700a      	strb	r2, [r1, #0]
 800c9c8:	781a      	ldrb	r2, [r3, #0]
 800c9ca:	3201      	adds	r2, #1
 800c9cc:	701a      	strb	r2, [r3, #0]
 800c9ce:	e790      	b.n	800c8f2 <_dtoa_r+0x62a>
 800c9d0:	4ba3      	ldr	r3, [pc, #652]	; (800cc60 <_dtoa_r+0x998>)
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	f7f3 fe20 	bl	8000618 <__aeabi_dmul>
 800c9d8:	2200      	movs	r2, #0
 800c9da:	2300      	movs	r3, #0
 800c9dc:	4606      	mov	r6, r0
 800c9de:	460f      	mov	r7, r1
 800c9e0:	f7f4 f882 	bl	8000ae8 <__aeabi_dcmpeq>
 800c9e4:	2800      	cmp	r0, #0
 800c9e6:	d09e      	beq.n	800c926 <_dtoa_r+0x65e>
 800c9e8:	e7d0      	b.n	800c98c <_dtoa_r+0x6c4>
 800c9ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c9ec:	2a00      	cmp	r2, #0
 800c9ee:	f000 80ca 	beq.w	800cb86 <_dtoa_r+0x8be>
 800c9f2:	9a07      	ldr	r2, [sp, #28]
 800c9f4:	2a01      	cmp	r2, #1
 800c9f6:	f300 80ad 	bgt.w	800cb54 <_dtoa_r+0x88c>
 800c9fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c9fc:	2a00      	cmp	r2, #0
 800c9fe:	f000 80a5 	beq.w	800cb4c <_dtoa_r+0x884>
 800ca02:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ca06:	9e08      	ldr	r6, [sp, #32]
 800ca08:	9d05      	ldr	r5, [sp, #20]
 800ca0a:	9a05      	ldr	r2, [sp, #20]
 800ca0c:	441a      	add	r2, r3
 800ca0e:	9205      	str	r2, [sp, #20]
 800ca10:	9a06      	ldr	r2, [sp, #24]
 800ca12:	2101      	movs	r1, #1
 800ca14:	441a      	add	r2, r3
 800ca16:	4620      	mov	r0, r4
 800ca18:	9206      	str	r2, [sp, #24]
 800ca1a:	f000 fc3d 	bl	800d298 <__i2b>
 800ca1e:	4607      	mov	r7, r0
 800ca20:	b165      	cbz	r5, 800ca3c <_dtoa_r+0x774>
 800ca22:	9b06      	ldr	r3, [sp, #24]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	dd09      	ble.n	800ca3c <_dtoa_r+0x774>
 800ca28:	42ab      	cmp	r3, r5
 800ca2a:	9a05      	ldr	r2, [sp, #20]
 800ca2c:	bfa8      	it	ge
 800ca2e:	462b      	movge	r3, r5
 800ca30:	1ad2      	subs	r2, r2, r3
 800ca32:	9205      	str	r2, [sp, #20]
 800ca34:	9a06      	ldr	r2, [sp, #24]
 800ca36:	1aed      	subs	r5, r5, r3
 800ca38:	1ad3      	subs	r3, r2, r3
 800ca3a:	9306      	str	r3, [sp, #24]
 800ca3c:	9b08      	ldr	r3, [sp, #32]
 800ca3e:	b1f3      	cbz	r3, 800ca7e <_dtoa_r+0x7b6>
 800ca40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	f000 80a3 	beq.w	800cb8e <_dtoa_r+0x8c6>
 800ca48:	2e00      	cmp	r6, #0
 800ca4a:	dd10      	ble.n	800ca6e <_dtoa_r+0x7a6>
 800ca4c:	4639      	mov	r1, r7
 800ca4e:	4632      	mov	r2, r6
 800ca50:	4620      	mov	r0, r4
 800ca52:	f000 fce1 	bl	800d418 <__pow5mult>
 800ca56:	4652      	mov	r2, sl
 800ca58:	4601      	mov	r1, r0
 800ca5a:	4607      	mov	r7, r0
 800ca5c:	4620      	mov	r0, r4
 800ca5e:	f000 fc31 	bl	800d2c4 <__multiply>
 800ca62:	4651      	mov	r1, sl
 800ca64:	4680      	mov	r8, r0
 800ca66:	4620      	mov	r0, r4
 800ca68:	f000 fb60 	bl	800d12c <_Bfree>
 800ca6c:	46c2      	mov	sl, r8
 800ca6e:	9b08      	ldr	r3, [sp, #32]
 800ca70:	1b9a      	subs	r2, r3, r6
 800ca72:	d004      	beq.n	800ca7e <_dtoa_r+0x7b6>
 800ca74:	4651      	mov	r1, sl
 800ca76:	4620      	mov	r0, r4
 800ca78:	f000 fcce 	bl	800d418 <__pow5mult>
 800ca7c:	4682      	mov	sl, r0
 800ca7e:	2101      	movs	r1, #1
 800ca80:	4620      	mov	r0, r4
 800ca82:	f000 fc09 	bl	800d298 <__i2b>
 800ca86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	4606      	mov	r6, r0
 800ca8c:	f340 8081 	ble.w	800cb92 <_dtoa_r+0x8ca>
 800ca90:	461a      	mov	r2, r3
 800ca92:	4601      	mov	r1, r0
 800ca94:	4620      	mov	r0, r4
 800ca96:	f000 fcbf 	bl	800d418 <__pow5mult>
 800ca9a:	9b07      	ldr	r3, [sp, #28]
 800ca9c:	2b01      	cmp	r3, #1
 800ca9e:	4606      	mov	r6, r0
 800caa0:	dd7a      	ble.n	800cb98 <_dtoa_r+0x8d0>
 800caa2:	f04f 0800 	mov.w	r8, #0
 800caa6:	6933      	ldr	r3, [r6, #16]
 800caa8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800caac:	6918      	ldr	r0, [r3, #16]
 800caae:	f000 fba5 	bl	800d1fc <__hi0bits>
 800cab2:	f1c0 0020 	rsb	r0, r0, #32
 800cab6:	9b06      	ldr	r3, [sp, #24]
 800cab8:	4418      	add	r0, r3
 800caba:	f010 001f 	ands.w	r0, r0, #31
 800cabe:	f000 8094 	beq.w	800cbea <_dtoa_r+0x922>
 800cac2:	f1c0 0320 	rsb	r3, r0, #32
 800cac6:	2b04      	cmp	r3, #4
 800cac8:	f340 8085 	ble.w	800cbd6 <_dtoa_r+0x90e>
 800cacc:	9b05      	ldr	r3, [sp, #20]
 800cace:	f1c0 001c 	rsb	r0, r0, #28
 800cad2:	4403      	add	r3, r0
 800cad4:	9305      	str	r3, [sp, #20]
 800cad6:	9b06      	ldr	r3, [sp, #24]
 800cad8:	4403      	add	r3, r0
 800cada:	4405      	add	r5, r0
 800cadc:	9306      	str	r3, [sp, #24]
 800cade:	9b05      	ldr	r3, [sp, #20]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	dd05      	ble.n	800caf0 <_dtoa_r+0x828>
 800cae4:	4651      	mov	r1, sl
 800cae6:	461a      	mov	r2, r3
 800cae8:	4620      	mov	r0, r4
 800caea:	f000 fcef 	bl	800d4cc <__lshift>
 800caee:	4682      	mov	sl, r0
 800caf0:	9b06      	ldr	r3, [sp, #24]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	dd05      	ble.n	800cb02 <_dtoa_r+0x83a>
 800caf6:	4631      	mov	r1, r6
 800caf8:	461a      	mov	r2, r3
 800cafa:	4620      	mov	r0, r4
 800cafc:	f000 fce6 	bl	800d4cc <__lshift>
 800cb00:	4606      	mov	r6, r0
 800cb02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d072      	beq.n	800cbee <_dtoa_r+0x926>
 800cb08:	4631      	mov	r1, r6
 800cb0a:	4650      	mov	r0, sl
 800cb0c:	f000 fd4a 	bl	800d5a4 <__mcmp>
 800cb10:	2800      	cmp	r0, #0
 800cb12:	da6c      	bge.n	800cbee <_dtoa_r+0x926>
 800cb14:	2300      	movs	r3, #0
 800cb16:	4651      	mov	r1, sl
 800cb18:	220a      	movs	r2, #10
 800cb1a:	4620      	mov	r0, r4
 800cb1c:	f000 fb28 	bl	800d170 <__multadd>
 800cb20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb22:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cb26:	4682      	mov	sl, r0
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	f000 81b0 	beq.w	800ce8e <_dtoa_r+0xbc6>
 800cb2e:	2300      	movs	r3, #0
 800cb30:	4639      	mov	r1, r7
 800cb32:	220a      	movs	r2, #10
 800cb34:	4620      	mov	r0, r4
 800cb36:	f000 fb1b 	bl	800d170 <__multadd>
 800cb3a:	9b01      	ldr	r3, [sp, #4]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	4607      	mov	r7, r0
 800cb40:	f300 8096 	bgt.w	800cc70 <_dtoa_r+0x9a8>
 800cb44:	9b07      	ldr	r3, [sp, #28]
 800cb46:	2b02      	cmp	r3, #2
 800cb48:	dc59      	bgt.n	800cbfe <_dtoa_r+0x936>
 800cb4a:	e091      	b.n	800cc70 <_dtoa_r+0x9a8>
 800cb4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cb4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cb52:	e758      	b.n	800ca06 <_dtoa_r+0x73e>
 800cb54:	9b04      	ldr	r3, [sp, #16]
 800cb56:	1e5e      	subs	r6, r3, #1
 800cb58:	9b08      	ldr	r3, [sp, #32]
 800cb5a:	42b3      	cmp	r3, r6
 800cb5c:	bfbf      	itttt	lt
 800cb5e:	9b08      	ldrlt	r3, [sp, #32]
 800cb60:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800cb62:	9608      	strlt	r6, [sp, #32]
 800cb64:	1af3      	sublt	r3, r6, r3
 800cb66:	bfb4      	ite	lt
 800cb68:	18d2      	addlt	r2, r2, r3
 800cb6a:	1b9e      	subge	r6, r3, r6
 800cb6c:	9b04      	ldr	r3, [sp, #16]
 800cb6e:	bfbc      	itt	lt
 800cb70:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800cb72:	2600      	movlt	r6, #0
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	bfb7      	itett	lt
 800cb78:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800cb7c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800cb80:	1a9d      	sublt	r5, r3, r2
 800cb82:	2300      	movlt	r3, #0
 800cb84:	e741      	b.n	800ca0a <_dtoa_r+0x742>
 800cb86:	9e08      	ldr	r6, [sp, #32]
 800cb88:	9d05      	ldr	r5, [sp, #20]
 800cb8a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800cb8c:	e748      	b.n	800ca20 <_dtoa_r+0x758>
 800cb8e:	9a08      	ldr	r2, [sp, #32]
 800cb90:	e770      	b.n	800ca74 <_dtoa_r+0x7ac>
 800cb92:	9b07      	ldr	r3, [sp, #28]
 800cb94:	2b01      	cmp	r3, #1
 800cb96:	dc19      	bgt.n	800cbcc <_dtoa_r+0x904>
 800cb98:	9b02      	ldr	r3, [sp, #8]
 800cb9a:	b9bb      	cbnz	r3, 800cbcc <_dtoa_r+0x904>
 800cb9c:	9b03      	ldr	r3, [sp, #12]
 800cb9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cba2:	b99b      	cbnz	r3, 800cbcc <_dtoa_r+0x904>
 800cba4:	9b03      	ldr	r3, [sp, #12]
 800cba6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cbaa:	0d1b      	lsrs	r3, r3, #20
 800cbac:	051b      	lsls	r3, r3, #20
 800cbae:	b183      	cbz	r3, 800cbd2 <_dtoa_r+0x90a>
 800cbb0:	9b05      	ldr	r3, [sp, #20]
 800cbb2:	3301      	adds	r3, #1
 800cbb4:	9305      	str	r3, [sp, #20]
 800cbb6:	9b06      	ldr	r3, [sp, #24]
 800cbb8:	3301      	adds	r3, #1
 800cbba:	9306      	str	r3, [sp, #24]
 800cbbc:	f04f 0801 	mov.w	r8, #1
 800cbc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	f47f af6f 	bne.w	800caa6 <_dtoa_r+0x7de>
 800cbc8:	2001      	movs	r0, #1
 800cbca:	e774      	b.n	800cab6 <_dtoa_r+0x7ee>
 800cbcc:	f04f 0800 	mov.w	r8, #0
 800cbd0:	e7f6      	b.n	800cbc0 <_dtoa_r+0x8f8>
 800cbd2:	4698      	mov	r8, r3
 800cbd4:	e7f4      	b.n	800cbc0 <_dtoa_r+0x8f8>
 800cbd6:	d082      	beq.n	800cade <_dtoa_r+0x816>
 800cbd8:	9a05      	ldr	r2, [sp, #20]
 800cbda:	331c      	adds	r3, #28
 800cbdc:	441a      	add	r2, r3
 800cbde:	9205      	str	r2, [sp, #20]
 800cbe0:	9a06      	ldr	r2, [sp, #24]
 800cbe2:	441a      	add	r2, r3
 800cbe4:	441d      	add	r5, r3
 800cbe6:	9206      	str	r2, [sp, #24]
 800cbe8:	e779      	b.n	800cade <_dtoa_r+0x816>
 800cbea:	4603      	mov	r3, r0
 800cbec:	e7f4      	b.n	800cbd8 <_dtoa_r+0x910>
 800cbee:	9b04      	ldr	r3, [sp, #16]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	dc37      	bgt.n	800cc64 <_dtoa_r+0x99c>
 800cbf4:	9b07      	ldr	r3, [sp, #28]
 800cbf6:	2b02      	cmp	r3, #2
 800cbf8:	dd34      	ble.n	800cc64 <_dtoa_r+0x99c>
 800cbfa:	9b04      	ldr	r3, [sp, #16]
 800cbfc:	9301      	str	r3, [sp, #4]
 800cbfe:	9b01      	ldr	r3, [sp, #4]
 800cc00:	b963      	cbnz	r3, 800cc1c <_dtoa_r+0x954>
 800cc02:	4631      	mov	r1, r6
 800cc04:	2205      	movs	r2, #5
 800cc06:	4620      	mov	r0, r4
 800cc08:	f000 fab2 	bl	800d170 <__multadd>
 800cc0c:	4601      	mov	r1, r0
 800cc0e:	4606      	mov	r6, r0
 800cc10:	4650      	mov	r0, sl
 800cc12:	f000 fcc7 	bl	800d5a4 <__mcmp>
 800cc16:	2800      	cmp	r0, #0
 800cc18:	f73f adbb 	bgt.w	800c792 <_dtoa_r+0x4ca>
 800cc1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc1e:	9d00      	ldr	r5, [sp, #0]
 800cc20:	ea6f 0b03 	mvn.w	fp, r3
 800cc24:	f04f 0800 	mov.w	r8, #0
 800cc28:	4631      	mov	r1, r6
 800cc2a:	4620      	mov	r0, r4
 800cc2c:	f000 fa7e 	bl	800d12c <_Bfree>
 800cc30:	2f00      	cmp	r7, #0
 800cc32:	f43f aeab 	beq.w	800c98c <_dtoa_r+0x6c4>
 800cc36:	f1b8 0f00 	cmp.w	r8, #0
 800cc3a:	d005      	beq.n	800cc48 <_dtoa_r+0x980>
 800cc3c:	45b8      	cmp	r8, r7
 800cc3e:	d003      	beq.n	800cc48 <_dtoa_r+0x980>
 800cc40:	4641      	mov	r1, r8
 800cc42:	4620      	mov	r0, r4
 800cc44:	f000 fa72 	bl	800d12c <_Bfree>
 800cc48:	4639      	mov	r1, r7
 800cc4a:	4620      	mov	r0, r4
 800cc4c:	f000 fa6e 	bl	800d12c <_Bfree>
 800cc50:	e69c      	b.n	800c98c <_dtoa_r+0x6c4>
 800cc52:	2600      	movs	r6, #0
 800cc54:	4637      	mov	r7, r6
 800cc56:	e7e1      	b.n	800cc1c <_dtoa_r+0x954>
 800cc58:	46bb      	mov	fp, r7
 800cc5a:	4637      	mov	r7, r6
 800cc5c:	e599      	b.n	800c792 <_dtoa_r+0x4ca>
 800cc5e:	bf00      	nop
 800cc60:	40240000 	.word	0x40240000
 800cc64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	f000 80c8 	beq.w	800cdfc <_dtoa_r+0xb34>
 800cc6c:	9b04      	ldr	r3, [sp, #16]
 800cc6e:	9301      	str	r3, [sp, #4]
 800cc70:	2d00      	cmp	r5, #0
 800cc72:	dd05      	ble.n	800cc80 <_dtoa_r+0x9b8>
 800cc74:	4639      	mov	r1, r7
 800cc76:	462a      	mov	r2, r5
 800cc78:	4620      	mov	r0, r4
 800cc7a:	f000 fc27 	bl	800d4cc <__lshift>
 800cc7e:	4607      	mov	r7, r0
 800cc80:	f1b8 0f00 	cmp.w	r8, #0
 800cc84:	d05b      	beq.n	800cd3e <_dtoa_r+0xa76>
 800cc86:	6879      	ldr	r1, [r7, #4]
 800cc88:	4620      	mov	r0, r4
 800cc8a:	f000 fa0f 	bl	800d0ac <_Balloc>
 800cc8e:	4605      	mov	r5, r0
 800cc90:	b928      	cbnz	r0, 800cc9e <_dtoa_r+0x9d6>
 800cc92:	4b83      	ldr	r3, [pc, #524]	; (800cea0 <_dtoa_r+0xbd8>)
 800cc94:	4602      	mov	r2, r0
 800cc96:	f240 21ef 	movw	r1, #751	; 0x2ef
 800cc9a:	f7ff bb2e 	b.w	800c2fa <_dtoa_r+0x32>
 800cc9e:	693a      	ldr	r2, [r7, #16]
 800cca0:	3202      	adds	r2, #2
 800cca2:	0092      	lsls	r2, r2, #2
 800cca4:	f107 010c 	add.w	r1, r7, #12
 800cca8:	300c      	adds	r0, #12
 800ccaa:	f7ff fa77 	bl	800c19c <memcpy>
 800ccae:	2201      	movs	r2, #1
 800ccb0:	4629      	mov	r1, r5
 800ccb2:	4620      	mov	r0, r4
 800ccb4:	f000 fc0a 	bl	800d4cc <__lshift>
 800ccb8:	9b00      	ldr	r3, [sp, #0]
 800ccba:	3301      	adds	r3, #1
 800ccbc:	9304      	str	r3, [sp, #16]
 800ccbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ccc2:	4413      	add	r3, r2
 800ccc4:	9308      	str	r3, [sp, #32]
 800ccc6:	9b02      	ldr	r3, [sp, #8]
 800ccc8:	f003 0301 	and.w	r3, r3, #1
 800cccc:	46b8      	mov	r8, r7
 800ccce:	9306      	str	r3, [sp, #24]
 800ccd0:	4607      	mov	r7, r0
 800ccd2:	9b04      	ldr	r3, [sp, #16]
 800ccd4:	4631      	mov	r1, r6
 800ccd6:	3b01      	subs	r3, #1
 800ccd8:	4650      	mov	r0, sl
 800ccda:	9301      	str	r3, [sp, #4]
 800ccdc:	f7ff fa6c 	bl	800c1b8 <quorem>
 800cce0:	4641      	mov	r1, r8
 800cce2:	9002      	str	r0, [sp, #8]
 800cce4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800cce8:	4650      	mov	r0, sl
 800ccea:	f000 fc5b 	bl	800d5a4 <__mcmp>
 800ccee:	463a      	mov	r2, r7
 800ccf0:	9005      	str	r0, [sp, #20]
 800ccf2:	4631      	mov	r1, r6
 800ccf4:	4620      	mov	r0, r4
 800ccf6:	f000 fc71 	bl	800d5dc <__mdiff>
 800ccfa:	68c2      	ldr	r2, [r0, #12]
 800ccfc:	4605      	mov	r5, r0
 800ccfe:	bb02      	cbnz	r2, 800cd42 <_dtoa_r+0xa7a>
 800cd00:	4601      	mov	r1, r0
 800cd02:	4650      	mov	r0, sl
 800cd04:	f000 fc4e 	bl	800d5a4 <__mcmp>
 800cd08:	4602      	mov	r2, r0
 800cd0a:	4629      	mov	r1, r5
 800cd0c:	4620      	mov	r0, r4
 800cd0e:	9209      	str	r2, [sp, #36]	; 0x24
 800cd10:	f000 fa0c 	bl	800d12c <_Bfree>
 800cd14:	9b07      	ldr	r3, [sp, #28]
 800cd16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd18:	9d04      	ldr	r5, [sp, #16]
 800cd1a:	ea43 0102 	orr.w	r1, r3, r2
 800cd1e:	9b06      	ldr	r3, [sp, #24]
 800cd20:	4319      	orrs	r1, r3
 800cd22:	d110      	bne.n	800cd46 <_dtoa_r+0xa7e>
 800cd24:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cd28:	d029      	beq.n	800cd7e <_dtoa_r+0xab6>
 800cd2a:	9b05      	ldr	r3, [sp, #20]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	dd02      	ble.n	800cd36 <_dtoa_r+0xa6e>
 800cd30:	9b02      	ldr	r3, [sp, #8]
 800cd32:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800cd36:	9b01      	ldr	r3, [sp, #4]
 800cd38:	f883 9000 	strb.w	r9, [r3]
 800cd3c:	e774      	b.n	800cc28 <_dtoa_r+0x960>
 800cd3e:	4638      	mov	r0, r7
 800cd40:	e7ba      	b.n	800ccb8 <_dtoa_r+0x9f0>
 800cd42:	2201      	movs	r2, #1
 800cd44:	e7e1      	b.n	800cd0a <_dtoa_r+0xa42>
 800cd46:	9b05      	ldr	r3, [sp, #20]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	db04      	blt.n	800cd56 <_dtoa_r+0xa8e>
 800cd4c:	9907      	ldr	r1, [sp, #28]
 800cd4e:	430b      	orrs	r3, r1
 800cd50:	9906      	ldr	r1, [sp, #24]
 800cd52:	430b      	orrs	r3, r1
 800cd54:	d120      	bne.n	800cd98 <_dtoa_r+0xad0>
 800cd56:	2a00      	cmp	r2, #0
 800cd58:	dded      	ble.n	800cd36 <_dtoa_r+0xa6e>
 800cd5a:	4651      	mov	r1, sl
 800cd5c:	2201      	movs	r2, #1
 800cd5e:	4620      	mov	r0, r4
 800cd60:	f000 fbb4 	bl	800d4cc <__lshift>
 800cd64:	4631      	mov	r1, r6
 800cd66:	4682      	mov	sl, r0
 800cd68:	f000 fc1c 	bl	800d5a4 <__mcmp>
 800cd6c:	2800      	cmp	r0, #0
 800cd6e:	dc03      	bgt.n	800cd78 <_dtoa_r+0xab0>
 800cd70:	d1e1      	bne.n	800cd36 <_dtoa_r+0xa6e>
 800cd72:	f019 0f01 	tst.w	r9, #1
 800cd76:	d0de      	beq.n	800cd36 <_dtoa_r+0xa6e>
 800cd78:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cd7c:	d1d8      	bne.n	800cd30 <_dtoa_r+0xa68>
 800cd7e:	9a01      	ldr	r2, [sp, #4]
 800cd80:	2339      	movs	r3, #57	; 0x39
 800cd82:	7013      	strb	r3, [r2, #0]
 800cd84:	462b      	mov	r3, r5
 800cd86:	461d      	mov	r5, r3
 800cd88:	3b01      	subs	r3, #1
 800cd8a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cd8e:	2a39      	cmp	r2, #57	; 0x39
 800cd90:	d06c      	beq.n	800ce6c <_dtoa_r+0xba4>
 800cd92:	3201      	adds	r2, #1
 800cd94:	701a      	strb	r2, [r3, #0]
 800cd96:	e747      	b.n	800cc28 <_dtoa_r+0x960>
 800cd98:	2a00      	cmp	r2, #0
 800cd9a:	dd07      	ble.n	800cdac <_dtoa_r+0xae4>
 800cd9c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cda0:	d0ed      	beq.n	800cd7e <_dtoa_r+0xab6>
 800cda2:	9a01      	ldr	r2, [sp, #4]
 800cda4:	f109 0301 	add.w	r3, r9, #1
 800cda8:	7013      	strb	r3, [r2, #0]
 800cdaa:	e73d      	b.n	800cc28 <_dtoa_r+0x960>
 800cdac:	9b04      	ldr	r3, [sp, #16]
 800cdae:	9a08      	ldr	r2, [sp, #32]
 800cdb0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800cdb4:	4293      	cmp	r3, r2
 800cdb6:	d043      	beq.n	800ce40 <_dtoa_r+0xb78>
 800cdb8:	4651      	mov	r1, sl
 800cdba:	2300      	movs	r3, #0
 800cdbc:	220a      	movs	r2, #10
 800cdbe:	4620      	mov	r0, r4
 800cdc0:	f000 f9d6 	bl	800d170 <__multadd>
 800cdc4:	45b8      	cmp	r8, r7
 800cdc6:	4682      	mov	sl, r0
 800cdc8:	f04f 0300 	mov.w	r3, #0
 800cdcc:	f04f 020a 	mov.w	r2, #10
 800cdd0:	4641      	mov	r1, r8
 800cdd2:	4620      	mov	r0, r4
 800cdd4:	d107      	bne.n	800cde6 <_dtoa_r+0xb1e>
 800cdd6:	f000 f9cb 	bl	800d170 <__multadd>
 800cdda:	4680      	mov	r8, r0
 800cddc:	4607      	mov	r7, r0
 800cdde:	9b04      	ldr	r3, [sp, #16]
 800cde0:	3301      	adds	r3, #1
 800cde2:	9304      	str	r3, [sp, #16]
 800cde4:	e775      	b.n	800ccd2 <_dtoa_r+0xa0a>
 800cde6:	f000 f9c3 	bl	800d170 <__multadd>
 800cdea:	4639      	mov	r1, r7
 800cdec:	4680      	mov	r8, r0
 800cdee:	2300      	movs	r3, #0
 800cdf0:	220a      	movs	r2, #10
 800cdf2:	4620      	mov	r0, r4
 800cdf4:	f000 f9bc 	bl	800d170 <__multadd>
 800cdf8:	4607      	mov	r7, r0
 800cdfa:	e7f0      	b.n	800cdde <_dtoa_r+0xb16>
 800cdfc:	9b04      	ldr	r3, [sp, #16]
 800cdfe:	9301      	str	r3, [sp, #4]
 800ce00:	9d00      	ldr	r5, [sp, #0]
 800ce02:	4631      	mov	r1, r6
 800ce04:	4650      	mov	r0, sl
 800ce06:	f7ff f9d7 	bl	800c1b8 <quorem>
 800ce0a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ce0e:	9b00      	ldr	r3, [sp, #0]
 800ce10:	f805 9b01 	strb.w	r9, [r5], #1
 800ce14:	1aea      	subs	r2, r5, r3
 800ce16:	9b01      	ldr	r3, [sp, #4]
 800ce18:	4293      	cmp	r3, r2
 800ce1a:	dd07      	ble.n	800ce2c <_dtoa_r+0xb64>
 800ce1c:	4651      	mov	r1, sl
 800ce1e:	2300      	movs	r3, #0
 800ce20:	220a      	movs	r2, #10
 800ce22:	4620      	mov	r0, r4
 800ce24:	f000 f9a4 	bl	800d170 <__multadd>
 800ce28:	4682      	mov	sl, r0
 800ce2a:	e7ea      	b.n	800ce02 <_dtoa_r+0xb3a>
 800ce2c:	9b01      	ldr	r3, [sp, #4]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	bfc8      	it	gt
 800ce32:	461d      	movgt	r5, r3
 800ce34:	9b00      	ldr	r3, [sp, #0]
 800ce36:	bfd8      	it	le
 800ce38:	2501      	movle	r5, #1
 800ce3a:	441d      	add	r5, r3
 800ce3c:	f04f 0800 	mov.w	r8, #0
 800ce40:	4651      	mov	r1, sl
 800ce42:	2201      	movs	r2, #1
 800ce44:	4620      	mov	r0, r4
 800ce46:	f000 fb41 	bl	800d4cc <__lshift>
 800ce4a:	4631      	mov	r1, r6
 800ce4c:	4682      	mov	sl, r0
 800ce4e:	f000 fba9 	bl	800d5a4 <__mcmp>
 800ce52:	2800      	cmp	r0, #0
 800ce54:	dc96      	bgt.n	800cd84 <_dtoa_r+0xabc>
 800ce56:	d102      	bne.n	800ce5e <_dtoa_r+0xb96>
 800ce58:	f019 0f01 	tst.w	r9, #1
 800ce5c:	d192      	bne.n	800cd84 <_dtoa_r+0xabc>
 800ce5e:	462b      	mov	r3, r5
 800ce60:	461d      	mov	r5, r3
 800ce62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ce66:	2a30      	cmp	r2, #48	; 0x30
 800ce68:	d0fa      	beq.n	800ce60 <_dtoa_r+0xb98>
 800ce6a:	e6dd      	b.n	800cc28 <_dtoa_r+0x960>
 800ce6c:	9a00      	ldr	r2, [sp, #0]
 800ce6e:	429a      	cmp	r2, r3
 800ce70:	d189      	bne.n	800cd86 <_dtoa_r+0xabe>
 800ce72:	f10b 0b01 	add.w	fp, fp, #1
 800ce76:	2331      	movs	r3, #49	; 0x31
 800ce78:	e796      	b.n	800cda8 <_dtoa_r+0xae0>
 800ce7a:	4b0a      	ldr	r3, [pc, #40]	; (800cea4 <_dtoa_r+0xbdc>)
 800ce7c:	f7ff ba99 	b.w	800c3b2 <_dtoa_r+0xea>
 800ce80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	f47f aa6d 	bne.w	800c362 <_dtoa_r+0x9a>
 800ce88:	4b07      	ldr	r3, [pc, #28]	; (800cea8 <_dtoa_r+0xbe0>)
 800ce8a:	f7ff ba92 	b.w	800c3b2 <_dtoa_r+0xea>
 800ce8e:	9b01      	ldr	r3, [sp, #4]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	dcb5      	bgt.n	800ce00 <_dtoa_r+0xb38>
 800ce94:	9b07      	ldr	r3, [sp, #28]
 800ce96:	2b02      	cmp	r3, #2
 800ce98:	f73f aeb1 	bgt.w	800cbfe <_dtoa_r+0x936>
 800ce9c:	e7b0      	b.n	800ce00 <_dtoa_r+0xb38>
 800ce9e:	bf00      	nop
 800cea0:	0800f5dc 	.word	0x0800f5dc
 800cea4:	0800f53c 	.word	0x0800f53c
 800cea8:	0800f560 	.word	0x0800f560

0800ceac <_free_r>:
 800ceac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ceae:	2900      	cmp	r1, #0
 800ceb0:	d044      	beq.n	800cf3c <_free_r+0x90>
 800ceb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ceb6:	9001      	str	r0, [sp, #4]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	f1a1 0404 	sub.w	r4, r1, #4
 800cebe:	bfb8      	it	lt
 800cec0:	18e4      	addlt	r4, r4, r3
 800cec2:	f000 f8e7 	bl	800d094 <__malloc_lock>
 800cec6:	4a1e      	ldr	r2, [pc, #120]	; (800cf40 <_free_r+0x94>)
 800cec8:	9801      	ldr	r0, [sp, #4]
 800ceca:	6813      	ldr	r3, [r2, #0]
 800cecc:	b933      	cbnz	r3, 800cedc <_free_r+0x30>
 800cece:	6063      	str	r3, [r4, #4]
 800ced0:	6014      	str	r4, [r2, #0]
 800ced2:	b003      	add	sp, #12
 800ced4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ced8:	f000 b8e2 	b.w	800d0a0 <__malloc_unlock>
 800cedc:	42a3      	cmp	r3, r4
 800cede:	d908      	bls.n	800cef2 <_free_r+0x46>
 800cee0:	6825      	ldr	r5, [r4, #0]
 800cee2:	1961      	adds	r1, r4, r5
 800cee4:	428b      	cmp	r3, r1
 800cee6:	bf01      	itttt	eq
 800cee8:	6819      	ldreq	r1, [r3, #0]
 800ceea:	685b      	ldreq	r3, [r3, #4]
 800ceec:	1949      	addeq	r1, r1, r5
 800ceee:	6021      	streq	r1, [r4, #0]
 800cef0:	e7ed      	b.n	800cece <_free_r+0x22>
 800cef2:	461a      	mov	r2, r3
 800cef4:	685b      	ldr	r3, [r3, #4]
 800cef6:	b10b      	cbz	r3, 800cefc <_free_r+0x50>
 800cef8:	42a3      	cmp	r3, r4
 800cefa:	d9fa      	bls.n	800cef2 <_free_r+0x46>
 800cefc:	6811      	ldr	r1, [r2, #0]
 800cefe:	1855      	adds	r5, r2, r1
 800cf00:	42a5      	cmp	r5, r4
 800cf02:	d10b      	bne.n	800cf1c <_free_r+0x70>
 800cf04:	6824      	ldr	r4, [r4, #0]
 800cf06:	4421      	add	r1, r4
 800cf08:	1854      	adds	r4, r2, r1
 800cf0a:	42a3      	cmp	r3, r4
 800cf0c:	6011      	str	r1, [r2, #0]
 800cf0e:	d1e0      	bne.n	800ced2 <_free_r+0x26>
 800cf10:	681c      	ldr	r4, [r3, #0]
 800cf12:	685b      	ldr	r3, [r3, #4]
 800cf14:	6053      	str	r3, [r2, #4]
 800cf16:	440c      	add	r4, r1
 800cf18:	6014      	str	r4, [r2, #0]
 800cf1a:	e7da      	b.n	800ced2 <_free_r+0x26>
 800cf1c:	d902      	bls.n	800cf24 <_free_r+0x78>
 800cf1e:	230c      	movs	r3, #12
 800cf20:	6003      	str	r3, [r0, #0]
 800cf22:	e7d6      	b.n	800ced2 <_free_r+0x26>
 800cf24:	6825      	ldr	r5, [r4, #0]
 800cf26:	1961      	adds	r1, r4, r5
 800cf28:	428b      	cmp	r3, r1
 800cf2a:	bf04      	itt	eq
 800cf2c:	6819      	ldreq	r1, [r3, #0]
 800cf2e:	685b      	ldreq	r3, [r3, #4]
 800cf30:	6063      	str	r3, [r4, #4]
 800cf32:	bf04      	itt	eq
 800cf34:	1949      	addeq	r1, r1, r5
 800cf36:	6021      	streq	r1, [r4, #0]
 800cf38:	6054      	str	r4, [r2, #4]
 800cf3a:	e7ca      	b.n	800ced2 <_free_r+0x26>
 800cf3c:	b003      	add	sp, #12
 800cf3e:	bd30      	pop	{r4, r5, pc}
 800cf40:	200022a8 	.word	0x200022a8

0800cf44 <malloc>:
 800cf44:	4b02      	ldr	r3, [pc, #8]	; (800cf50 <malloc+0xc>)
 800cf46:	4601      	mov	r1, r0
 800cf48:	6818      	ldr	r0, [r3, #0]
 800cf4a:	f000 b823 	b.w	800cf94 <_malloc_r>
 800cf4e:	bf00      	nop
 800cf50:	20000068 	.word	0x20000068

0800cf54 <sbrk_aligned>:
 800cf54:	b570      	push	{r4, r5, r6, lr}
 800cf56:	4e0e      	ldr	r6, [pc, #56]	; (800cf90 <sbrk_aligned+0x3c>)
 800cf58:	460c      	mov	r4, r1
 800cf5a:	6831      	ldr	r1, [r6, #0]
 800cf5c:	4605      	mov	r5, r0
 800cf5e:	b911      	cbnz	r1, 800cf66 <sbrk_aligned+0x12>
 800cf60:	f000 fe40 	bl	800dbe4 <_sbrk_r>
 800cf64:	6030      	str	r0, [r6, #0]
 800cf66:	4621      	mov	r1, r4
 800cf68:	4628      	mov	r0, r5
 800cf6a:	f000 fe3b 	bl	800dbe4 <_sbrk_r>
 800cf6e:	1c43      	adds	r3, r0, #1
 800cf70:	d00a      	beq.n	800cf88 <sbrk_aligned+0x34>
 800cf72:	1cc4      	adds	r4, r0, #3
 800cf74:	f024 0403 	bic.w	r4, r4, #3
 800cf78:	42a0      	cmp	r0, r4
 800cf7a:	d007      	beq.n	800cf8c <sbrk_aligned+0x38>
 800cf7c:	1a21      	subs	r1, r4, r0
 800cf7e:	4628      	mov	r0, r5
 800cf80:	f000 fe30 	bl	800dbe4 <_sbrk_r>
 800cf84:	3001      	adds	r0, #1
 800cf86:	d101      	bne.n	800cf8c <sbrk_aligned+0x38>
 800cf88:	f04f 34ff 	mov.w	r4, #4294967295
 800cf8c:	4620      	mov	r0, r4
 800cf8e:	bd70      	pop	{r4, r5, r6, pc}
 800cf90:	200022ac 	.word	0x200022ac

0800cf94 <_malloc_r>:
 800cf94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf98:	1ccd      	adds	r5, r1, #3
 800cf9a:	f025 0503 	bic.w	r5, r5, #3
 800cf9e:	3508      	adds	r5, #8
 800cfa0:	2d0c      	cmp	r5, #12
 800cfa2:	bf38      	it	cc
 800cfa4:	250c      	movcc	r5, #12
 800cfa6:	2d00      	cmp	r5, #0
 800cfa8:	4607      	mov	r7, r0
 800cfaa:	db01      	blt.n	800cfb0 <_malloc_r+0x1c>
 800cfac:	42a9      	cmp	r1, r5
 800cfae:	d905      	bls.n	800cfbc <_malloc_r+0x28>
 800cfb0:	230c      	movs	r3, #12
 800cfb2:	603b      	str	r3, [r7, #0]
 800cfb4:	2600      	movs	r6, #0
 800cfb6:	4630      	mov	r0, r6
 800cfb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfbc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d090 <_malloc_r+0xfc>
 800cfc0:	f000 f868 	bl	800d094 <__malloc_lock>
 800cfc4:	f8d8 3000 	ldr.w	r3, [r8]
 800cfc8:	461c      	mov	r4, r3
 800cfca:	bb5c      	cbnz	r4, 800d024 <_malloc_r+0x90>
 800cfcc:	4629      	mov	r1, r5
 800cfce:	4638      	mov	r0, r7
 800cfd0:	f7ff ffc0 	bl	800cf54 <sbrk_aligned>
 800cfd4:	1c43      	adds	r3, r0, #1
 800cfd6:	4604      	mov	r4, r0
 800cfd8:	d155      	bne.n	800d086 <_malloc_r+0xf2>
 800cfda:	f8d8 4000 	ldr.w	r4, [r8]
 800cfde:	4626      	mov	r6, r4
 800cfe0:	2e00      	cmp	r6, #0
 800cfe2:	d145      	bne.n	800d070 <_malloc_r+0xdc>
 800cfe4:	2c00      	cmp	r4, #0
 800cfe6:	d048      	beq.n	800d07a <_malloc_r+0xe6>
 800cfe8:	6823      	ldr	r3, [r4, #0]
 800cfea:	4631      	mov	r1, r6
 800cfec:	4638      	mov	r0, r7
 800cfee:	eb04 0903 	add.w	r9, r4, r3
 800cff2:	f000 fdf7 	bl	800dbe4 <_sbrk_r>
 800cff6:	4581      	cmp	r9, r0
 800cff8:	d13f      	bne.n	800d07a <_malloc_r+0xe6>
 800cffa:	6821      	ldr	r1, [r4, #0]
 800cffc:	1a6d      	subs	r5, r5, r1
 800cffe:	4629      	mov	r1, r5
 800d000:	4638      	mov	r0, r7
 800d002:	f7ff ffa7 	bl	800cf54 <sbrk_aligned>
 800d006:	3001      	adds	r0, #1
 800d008:	d037      	beq.n	800d07a <_malloc_r+0xe6>
 800d00a:	6823      	ldr	r3, [r4, #0]
 800d00c:	442b      	add	r3, r5
 800d00e:	6023      	str	r3, [r4, #0]
 800d010:	f8d8 3000 	ldr.w	r3, [r8]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d038      	beq.n	800d08a <_malloc_r+0xf6>
 800d018:	685a      	ldr	r2, [r3, #4]
 800d01a:	42a2      	cmp	r2, r4
 800d01c:	d12b      	bne.n	800d076 <_malloc_r+0xe2>
 800d01e:	2200      	movs	r2, #0
 800d020:	605a      	str	r2, [r3, #4]
 800d022:	e00f      	b.n	800d044 <_malloc_r+0xb0>
 800d024:	6822      	ldr	r2, [r4, #0]
 800d026:	1b52      	subs	r2, r2, r5
 800d028:	d41f      	bmi.n	800d06a <_malloc_r+0xd6>
 800d02a:	2a0b      	cmp	r2, #11
 800d02c:	d917      	bls.n	800d05e <_malloc_r+0xca>
 800d02e:	1961      	adds	r1, r4, r5
 800d030:	42a3      	cmp	r3, r4
 800d032:	6025      	str	r5, [r4, #0]
 800d034:	bf18      	it	ne
 800d036:	6059      	strne	r1, [r3, #4]
 800d038:	6863      	ldr	r3, [r4, #4]
 800d03a:	bf08      	it	eq
 800d03c:	f8c8 1000 	streq.w	r1, [r8]
 800d040:	5162      	str	r2, [r4, r5]
 800d042:	604b      	str	r3, [r1, #4]
 800d044:	4638      	mov	r0, r7
 800d046:	f104 060b 	add.w	r6, r4, #11
 800d04a:	f000 f829 	bl	800d0a0 <__malloc_unlock>
 800d04e:	f026 0607 	bic.w	r6, r6, #7
 800d052:	1d23      	adds	r3, r4, #4
 800d054:	1af2      	subs	r2, r6, r3
 800d056:	d0ae      	beq.n	800cfb6 <_malloc_r+0x22>
 800d058:	1b9b      	subs	r3, r3, r6
 800d05a:	50a3      	str	r3, [r4, r2]
 800d05c:	e7ab      	b.n	800cfb6 <_malloc_r+0x22>
 800d05e:	42a3      	cmp	r3, r4
 800d060:	6862      	ldr	r2, [r4, #4]
 800d062:	d1dd      	bne.n	800d020 <_malloc_r+0x8c>
 800d064:	f8c8 2000 	str.w	r2, [r8]
 800d068:	e7ec      	b.n	800d044 <_malloc_r+0xb0>
 800d06a:	4623      	mov	r3, r4
 800d06c:	6864      	ldr	r4, [r4, #4]
 800d06e:	e7ac      	b.n	800cfca <_malloc_r+0x36>
 800d070:	4634      	mov	r4, r6
 800d072:	6876      	ldr	r6, [r6, #4]
 800d074:	e7b4      	b.n	800cfe0 <_malloc_r+0x4c>
 800d076:	4613      	mov	r3, r2
 800d078:	e7cc      	b.n	800d014 <_malloc_r+0x80>
 800d07a:	230c      	movs	r3, #12
 800d07c:	603b      	str	r3, [r7, #0]
 800d07e:	4638      	mov	r0, r7
 800d080:	f000 f80e 	bl	800d0a0 <__malloc_unlock>
 800d084:	e797      	b.n	800cfb6 <_malloc_r+0x22>
 800d086:	6025      	str	r5, [r4, #0]
 800d088:	e7dc      	b.n	800d044 <_malloc_r+0xb0>
 800d08a:	605b      	str	r3, [r3, #4]
 800d08c:	deff      	udf	#255	; 0xff
 800d08e:	bf00      	nop
 800d090:	200022a8 	.word	0x200022a8

0800d094 <__malloc_lock>:
 800d094:	4801      	ldr	r0, [pc, #4]	; (800d09c <__malloc_lock+0x8>)
 800d096:	f7ff b87f 	b.w	800c198 <__retarget_lock_acquire_recursive>
 800d09a:	bf00      	nop
 800d09c:	200022a4 	.word	0x200022a4

0800d0a0 <__malloc_unlock>:
 800d0a0:	4801      	ldr	r0, [pc, #4]	; (800d0a8 <__malloc_unlock+0x8>)
 800d0a2:	f7ff b87a 	b.w	800c19a <__retarget_lock_release_recursive>
 800d0a6:	bf00      	nop
 800d0a8:	200022a4 	.word	0x200022a4

0800d0ac <_Balloc>:
 800d0ac:	b570      	push	{r4, r5, r6, lr}
 800d0ae:	69c6      	ldr	r6, [r0, #28]
 800d0b0:	4604      	mov	r4, r0
 800d0b2:	460d      	mov	r5, r1
 800d0b4:	b976      	cbnz	r6, 800d0d4 <_Balloc+0x28>
 800d0b6:	2010      	movs	r0, #16
 800d0b8:	f7ff ff44 	bl	800cf44 <malloc>
 800d0bc:	4602      	mov	r2, r0
 800d0be:	61e0      	str	r0, [r4, #28]
 800d0c0:	b920      	cbnz	r0, 800d0cc <_Balloc+0x20>
 800d0c2:	4b18      	ldr	r3, [pc, #96]	; (800d124 <_Balloc+0x78>)
 800d0c4:	4818      	ldr	r0, [pc, #96]	; (800d128 <_Balloc+0x7c>)
 800d0c6:	216b      	movs	r1, #107	; 0x6b
 800d0c8:	f000 fd9c 	bl	800dc04 <__assert_func>
 800d0cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d0d0:	6006      	str	r6, [r0, #0]
 800d0d2:	60c6      	str	r6, [r0, #12]
 800d0d4:	69e6      	ldr	r6, [r4, #28]
 800d0d6:	68f3      	ldr	r3, [r6, #12]
 800d0d8:	b183      	cbz	r3, 800d0fc <_Balloc+0x50>
 800d0da:	69e3      	ldr	r3, [r4, #28]
 800d0dc:	68db      	ldr	r3, [r3, #12]
 800d0de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d0e2:	b9b8      	cbnz	r0, 800d114 <_Balloc+0x68>
 800d0e4:	2101      	movs	r1, #1
 800d0e6:	fa01 f605 	lsl.w	r6, r1, r5
 800d0ea:	1d72      	adds	r2, r6, #5
 800d0ec:	0092      	lsls	r2, r2, #2
 800d0ee:	4620      	mov	r0, r4
 800d0f0:	f000 fda6 	bl	800dc40 <_calloc_r>
 800d0f4:	b160      	cbz	r0, 800d110 <_Balloc+0x64>
 800d0f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d0fa:	e00e      	b.n	800d11a <_Balloc+0x6e>
 800d0fc:	2221      	movs	r2, #33	; 0x21
 800d0fe:	2104      	movs	r1, #4
 800d100:	4620      	mov	r0, r4
 800d102:	f000 fd9d 	bl	800dc40 <_calloc_r>
 800d106:	69e3      	ldr	r3, [r4, #28]
 800d108:	60f0      	str	r0, [r6, #12]
 800d10a:	68db      	ldr	r3, [r3, #12]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d1e4      	bne.n	800d0da <_Balloc+0x2e>
 800d110:	2000      	movs	r0, #0
 800d112:	bd70      	pop	{r4, r5, r6, pc}
 800d114:	6802      	ldr	r2, [r0, #0]
 800d116:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d11a:	2300      	movs	r3, #0
 800d11c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d120:	e7f7      	b.n	800d112 <_Balloc+0x66>
 800d122:	bf00      	nop
 800d124:	0800f56d 	.word	0x0800f56d
 800d128:	0800f5ed 	.word	0x0800f5ed

0800d12c <_Bfree>:
 800d12c:	b570      	push	{r4, r5, r6, lr}
 800d12e:	69c6      	ldr	r6, [r0, #28]
 800d130:	4605      	mov	r5, r0
 800d132:	460c      	mov	r4, r1
 800d134:	b976      	cbnz	r6, 800d154 <_Bfree+0x28>
 800d136:	2010      	movs	r0, #16
 800d138:	f7ff ff04 	bl	800cf44 <malloc>
 800d13c:	4602      	mov	r2, r0
 800d13e:	61e8      	str	r0, [r5, #28]
 800d140:	b920      	cbnz	r0, 800d14c <_Bfree+0x20>
 800d142:	4b09      	ldr	r3, [pc, #36]	; (800d168 <_Bfree+0x3c>)
 800d144:	4809      	ldr	r0, [pc, #36]	; (800d16c <_Bfree+0x40>)
 800d146:	218f      	movs	r1, #143	; 0x8f
 800d148:	f000 fd5c 	bl	800dc04 <__assert_func>
 800d14c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d150:	6006      	str	r6, [r0, #0]
 800d152:	60c6      	str	r6, [r0, #12]
 800d154:	b13c      	cbz	r4, 800d166 <_Bfree+0x3a>
 800d156:	69eb      	ldr	r3, [r5, #28]
 800d158:	6862      	ldr	r2, [r4, #4]
 800d15a:	68db      	ldr	r3, [r3, #12]
 800d15c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d160:	6021      	str	r1, [r4, #0]
 800d162:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d166:	bd70      	pop	{r4, r5, r6, pc}
 800d168:	0800f56d 	.word	0x0800f56d
 800d16c:	0800f5ed 	.word	0x0800f5ed

0800d170 <__multadd>:
 800d170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d174:	690d      	ldr	r5, [r1, #16]
 800d176:	4607      	mov	r7, r0
 800d178:	460c      	mov	r4, r1
 800d17a:	461e      	mov	r6, r3
 800d17c:	f101 0c14 	add.w	ip, r1, #20
 800d180:	2000      	movs	r0, #0
 800d182:	f8dc 3000 	ldr.w	r3, [ip]
 800d186:	b299      	uxth	r1, r3
 800d188:	fb02 6101 	mla	r1, r2, r1, r6
 800d18c:	0c1e      	lsrs	r6, r3, #16
 800d18e:	0c0b      	lsrs	r3, r1, #16
 800d190:	fb02 3306 	mla	r3, r2, r6, r3
 800d194:	b289      	uxth	r1, r1
 800d196:	3001      	adds	r0, #1
 800d198:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d19c:	4285      	cmp	r5, r0
 800d19e:	f84c 1b04 	str.w	r1, [ip], #4
 800d1a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d1a6:	dcec      	bgt.n	800d182 <__multadd+0x12>
 800d1a8:	b30e      	cbz	r6, 800d1ee <__multadd+0x7e>
 800d1aa:	68a3      	ldr	r3, [r4, #8]
 800d1ac:	42ab      	cmp	r3, r5
 800d1ae:	dc19      	bgt.n	800d1e4 <__multadd+0x74>
 800d1b0:	6861      	ldr	r1, [r4, #4]
 800d1b2:	4638      	mov	r0, r7
 800d1b4:	3101      	adds	r1, #1
 800d1b6:	f7ff ff79 	bl	800d0ac <_Balloc>
 800d1ba:	4680      	mov	r8, r0
 800d1bc:	b928      	cbnz	r0, 800d1ca <__multadd+0x5a>
 800d1be:	4602      	mov	r2, r0
 800d1c0:	4b0c      	ldr	r3, [pc, #48]	; (800d1f4 <__multadd+0x84>)
 800d1c2:	480d      	ldr	r0, [pc, #52]	; (800d1f8 <__multadd+0x88>)
 800d1c4:	21ba      	movs	r1, #186	; 0xba
 800d1c6:	f000 fd1d 	bl	800dc04 <__assert_func>
 800d1ca:	6922      	ldr	r2, [r4, #16]
 800d1cc:	3202      	adds	r2, #2
 800d1ce:	f104 010c 	add.w	r1, r4, #12
 800d1d2:	0092      	lsls	r2, r2, #2
 800d1d4:	300c      	adds	r0, #12
 800d1d6:	f7fe ffe1 	bl	800c19c <memcpy>
 800d1da:	4621      	mov	r1, r4
 800d1dc:	4638      	mov	r0, r7
 800d1de:	f7ff ffa5 	bl	800d12c <_Bfree>
 800d1e2:	4644      	mov	r4, r8
 800d1e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d1e8:	3501      	adds	r5, #1
 800d1ea:	615e      	str	r6, [r3, #20]
 800d1ec:	6125      	str	r5, [r4, #16]
 800d1ee:	4620      	mov	r0, r4
 800d1f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1f4:	0800f5dc 	.word	0x0800f5dc
 800d1f8:	0800f5ed 	.word	0x0800f5ed

0800d1fc <__hi0bits>:
 800d1fc:	0c03      	lsrs	r3, r0, #16
 800d1fe:	041b      	lsls	r3, r3, #16
 800d200:	b9d3      	cbnz	r3, 800d238 <__hi0bits+0x3c>
 800d202:	0400      	lsls	r0, r0, #16
 800d204:	2310      	movs	r3, #16
 800d206:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d20a:	bf04      	itt	eq
 800d20c:	0200      	lsleq	r0, r0, #8
 800d20e:	3308      	addeq	r3, #8
 800d210:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d214:	bf04      	itt	eq
 800d216:	0100      	lsleq	r0, r0, #4
 800d218:	3304      	addeq	r3, #4
 800d21a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d21e:	bf04      	itt	eq
 800d220:	0080      	lsleq	r0, r0, #2
 800d222:	3302      	addeq	r3, #2
 800d224:	2800      	cmp	r0, #0
 800d226:	db05      	blt.n	800d234 <__hi0bits+0x38>
 800d228:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d22c:	f103 0301 	add.w	r3, r3, #1
 800d230:	bf08      	it	eq
 800d232:	2320      	moveq	r3, #32
 800d234:	4618      	mov	r0, r3
 800d236:	4770      	bx	lr
 800d238:	2300      	movs	r3, #0
 800d23a:	e7e4      	b.n	800d206 <__hi0bits+0xa>

0800d23c <__lo0bits>:
 800d23c:	6803      	ldr	r3, [r0, #0]
 800d23e:	f013 0207 	ands.w	r2, r3, #7
 800d242:	d00c      	beq.n	800d25e <__lo0bits+0x22>
 800d244:	07d9      	lsls	r1, r3, #31
 800d246:	d422      	bmi.n	800d28e <__lo0bits+0x52>
 800d248:	079a      	lsls	r2, r3, #30
 800d24a:	bf49      	itett	mi
 800d24c:	085b      	lsrmi	r3, r3, #1
 800d24e:	089b      	lsrpl	r3, r3, #2
 800d250:	6003      	strmi	r3, [r0, #0]
 800d252:	2201      	movmi	r2, #1
 800d254:	bf5c      	itt	pl
 800d256:	6003      	strpl	r3, [r0, #0]
 800d258:	2202      	movpl	r2, #2
 800d25a:	4610      	mov	r0, r2
 800d25c:	4770      	bx	lr
 800d25e:	b299      	uxth	r1, r3
 800d260:	b909      	cbnz	r1, 800d266 <__lo0bits+0x2a>
 800d262:	0c1b      	lsrs	r3, r3, #16
 800d264:	2210      	movs	r2, #16
 800d266:	b2d9      	uxtb	r1, r3
 800d268:	b909      	cbnz	r1, 800d26e <__lo0bits+0x32>
 800d26a:	3208      	adds	r2, #8
 800d26c:	0a1b      	lsrs	r3, r3, #8
 800d26e:	0719      	lsls	r1, r3, #28
 800d270:	bf04      	itt	eq
 800d272:	091b      	lsreq	r3, r3, #4
 800d274:	3204      	addeq	r2, #4
 800d276:	0799      	lsls	r1, r3, #30
 800d278:	bf04      	itt	eq
 800d27a:	089b      	lsreq	r3, r3, #2
 800d27c:	3202      	addeq	r2, #2
 800d27e:	07d9      	lsls	r1, r3, #31
 800d280:	d403      	bmi.n	800d28a <__lo0bits+0x4e>
 800d282:	085b      	lsrs	r3, r3, #1
 800d284:	f102 0201 	add.w	r2, r2, #1
 800d288:	d003      	beq.n	800d292 <__lo0bits+0x56>
 800d28a:	6003      	str	r3, [r0, #0]
 800d28c:	e7e5      	b.n	800d25a <__lo0bits+0x1e>
 800d28e:	2200      	movs	r2, #0
 800d290:	e7e3      	b.n	800d25a <__lo0bits+0x1e>
 800d292:	2220      	movs	r2, #32
 800d294:	e7e1      	b.n	800d25a <__lo0bits+0x1e>
	...

0800d298 <__i2b>:
 800d298:	b510      	push	{r4, lr}
 800d29a:	460c      	mov	r4, r1
 800d29c:	2101      	movs	r1, #1
 800d29e:	f7ff ff05 	bl	800d0ac <_Balloc>
 800d2a2:	4602      	mov	r2, r0
 800d2a4:	b928      	cbnz	r0, 800d2b2 <__i2b+0x1a>
 800d2a6:	4b05      	ldr	r3, [pc, #20]	; (800d2bc <__i2b+0x24>)
 800d2a8:	4805      	ldr	r0, [pc, #20]	; (800d2c0 <__i2b+0x28>)
 800d2aa:	f240 1145 	movw	r1, #325	; 0x145
 800d2ae:	f000 fca9 	bl	800dc04 <__assert_func>
 800d2b2:	2301      	movs	r3, #1
 800d2b4:	6144      	str	r4, [r0, #20]
 800d2b6:	6103      	str	r3, [r0, #16]
 800d2b8:	bd10      	pop	{r4, pc}
 800d2ba:	bf00      	nop
 800d2bc:	0800f5dc 	.word	0x0800f5dc
 800d2c0:	0800f5ed 	.word	0x0800f5ed

0800d2c4 <__multiply>:
 800d2c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2c8:	4691      	mov	r9, r2
 800d2ca:	690a      	ldr	r2, [r1, #16]
 800d2cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d2d0:	429a      	cmp	r2, r3
 800d2d2:	bfb8      	it	lt
 800d2d4:	460b      	movlt	r3, r1
 800d2d6:	460c      	mov	r4, r1
 800d2d8:	bfbc      	itt	lt
 800d2da:	464c      	movlt	r4, r9
 800d2dc:	4699      	movlt	r9, r3
 800d2de:	6927      	ldr	r7, [r4, #16]
 800d2e0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d2e4:	68a3      	ldr	r3, [r4, #8]
 800d2e6:	6861      	ldr	r1, [r4, #4]
 800d2e8:	eb07 060a 	add.w	r6, r7, sl
 800d2ec:	42b3      	cmp	r3, r6
 800d2ee:	b085      	sub	sp, #20
 800d2f0:	bfb8      	it	lt
 800d2f2:	3101      	addlt	r1, #1
 800d2f4:	f7ff feda 	bl	800d0ac <_Balloc>
 800d2f8:	b930      	cbnz	r0, 800d308 <__multiply+0x44>
 800d2fa:	4602      	mov	r2, r0
 800d2fc:	4b44      	ldr	r3, [pc, #272]	; (800d410 <__multiply+0x14c>)
 800d2fe:	4845      	ldr	r0, [pc, #276]	; (800d414 <__multiply+0x150>)
 800d300:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800d304:	f000 fc7e 	bl	800dc04 <__assert_func>
 800d308:	f100 0514 	add.w	r5, r0, #20
 800d30c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d310:	462b      	mov	r3, r5
 800d312:	2200      	movs	r2, #0
 800d314:	4543      	cmp	r3, r8
 800d316:	d321      	bcc.n	800d35c <__multiply+0x98>
 800d318:	f104 0314 	add.w	r3, r4, #20
 800d31c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d320:	f109 0314 	add.w	r3, r9, #20
 800d324:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d328:	9202      	str	r2, [sp, #8]
 800d32a:	1b3a      	subs	r2, r7, r4
 800d32c:	3a15      	subs	r2, #21
 800d32e:	f022 0203 	bic.w	r2, r2, #3
 800d332:	3204      	adds	r2, #4
 800d334:	f104 0115 	add.w	r1, r4, #21
 800d338:	428f      	cmp	r7, r1
 800d33a:	bf38      	it	cc
 800d33c:	2204      	movcc	r2, #4
 800d33e:	9201      	str	r2, [sp, #4]
 800d340:	9a02      	ldr	r2, [sp, #8]
 800d342:	9303      	str	r3, [sp, #12]
 800d344:	429a      	cmp	r2, r3
 800d346:	d80c      	bhi.n	800d362 <__multiply+0x9e>
 800d348:	2e00      	cmp	r6, #0
 800d34a:	dd03      	ble.n	800d354 <__multiply+0x90>
 800d34c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d350:	2b00      	cmp	r3, #0
 800d352:	d05b      	beq.n	800d40c <__multiply+0x148>
 800d354:	6106      	str	r6, [r0, #16]
 800d356:	b005      	add	sp, #20
 800d358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d35c:	f843 2b04 	str.w	r2, [r3], #4
 800d360:	e7d8      	b.n	800d314 <__multiply+0x50>
 800d362:	f8b3 a000 	ldrh.w	sl, [r3]
 800d366:	f1ba 0f00 	cmp.w	sl, #0
 800d36a:	d024      	beq.n	800d3b6 <__multiply+0xf2>
 800d36c:	f104 0e14 	add.w	lr, r4, #20
 800d370:	46a9      	mov	r9, r5
 800d372:	f04f 0c00 	mov.w	ip, #0
 800d376:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d37a:	f8d9 1000 	ldr.w	r1, [r9]
 800d37e:	fa1f fb82 	uxth.w	fp, r2
 800d382:	b289      	uxth	r1, r1
 800d384:	fb0a 110b 	mla	r1, sl, fp, r1
 800d388:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d38c:	f8d9 2000 	ldr.w	r2, [r9]
 800d390:	4461      	add	r1, ip
 800d392:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d396:	fb0a c20b 	mla	r2, sl, fp, ip
 800d39a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d39e:	b289      	uxth	r1, r1
 800d3a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d3a4:	4577      	cmp	r7, lr
 800d3a6:	f849 1b04 	str.w	r1, [r9], #4
 800d3aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d3ae:	d8e2      	bhi.n	800d376 <__multiply+0xb2>
 800d3b0:	9a01      	ldr	r2, [sp, #4]
 800d3b2:	f845 c002 	str.w	ip, [r5, r2]
 800d3b6:	9a03      	ldr	r2, [sp, #12]
 800d3b8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d3bc:	3304      	adds	r3, #4
 800d3be:	f1b9 0f00 	cmp.w	r9, #0
 800d3c2:	d021      	beq.n	800d408 <__multiply+0x144>
 800d3c4:	6829      	ldr	r1, [r5, #0]
 800d3c6:	f104 0c14 	add.w	ip, r4, #20
 800d3ca:	46ae      	mov	lr, r5
 800d3cc:	f04f 0a00 	mov.w	sl, #0
 800d3d0:	f8bc b000 	ldrh.w	fp, [ip]
 800d3d4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d3d8:	fb09 220b 	mla	r2, r9, fp, r2
 800d3dc:	4452      	add	r2, sl
 800d3de:	b289      	uxth	r1, r1
 800d3e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d3e4:	f84e 1b04 	str.w	r1, [lr], #4
 800d3e8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d3ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d3f0:	f8be 1000 	ldrh.w	r1, [lr]
 800d3f4:	fb09 110a 	mla	r1, r9, sl, r1
 800d3f8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d3fc:	4567      	cmp	r7, ip
 800d3fe:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d402:	d8e5      	bhi.n	800d3d0 <__multiply+0x10c>
 800d404:	9a01      	ldr	r2, [sp, #4]
 800d406:	50a9      	str	r1, [r5, r2]
 800d408:	3504      	adds	r5, #4
 800d40a:	e799      	b.n	800d340 <__multiply+0x7c>
 800d40c:	3e01      	subs	r6, #1
 800d40e:	e79b      	b.n	800d348 <__multiply+0x84>
 800d410:	0800f5dc 	.word	0x0800f5dc
 800d414:	0800f5ed 	.word	0x0800f5ed

0800d418 <__pow5mult>:
 800d418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d41c:	4615      	mov	r5, r2
 800d41e:	f012 0203 	ands.w	r2, r2, #3
 800d422:	4606      	mov	r6, r0
 800d424:	460f      	mov	r7, r1
 800d426:	d007      	beq.n	800d438 <__pow5mult+0x20>
 800d428:	4c25      	ldr	r4, [pc, #148]	; (800d4c0 <__pow5mult+0xa8>)
 800d42a:	3a01      	subs	r2, #1
 800d42c:	2300      	movs	r3, #0
 800d42e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d432:	f7ff fe9d 	bl	800d170 <__multadd>
 800d436:	4607      	mov	r7, r0
 800d438:	10ad      	asrs	r5, r5, #2
 800d43a:	d03d      	beq.n	800d4b8 <__pow5mult+0xa0>
 800d43c:	69f4      	ldr	r4, [r6, #28]
 800d43e:	b97c      	cbnz	r4, 800d460 <__pow5mult+0x48>
 800d440:	2010      	movs	r0, #16
 800d442:	f7ff fd7f 	bl	800cf44 <malloc>
 800d446:	4602      	mov	r2, r0
 800d448:	61f0      	str	r0, [r6, #28]
 800d44a:	b928      	cbnz	r0, 800d458 <__pow5mult+0x40>
 800d44c:	4b1d      	ldr	r3, [pc, #116]	; (800d4c4 <__pow5mult+0xac>)
 800d44e:	481e      	ldr	r0, [pc, #120]	; (800d4c8 <__pow5mult+0xb0>)
 800d450:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d454:	f000 fbd6 	bl	800dc04 <__assert_func>
 800d458:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d45c:	6004      	str	r4, [r0, #0]
 800d45e:	60c4      	str	r4, [r0, #12]
 800d460:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d464:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d468:	b94c      	cbnz	r4, 800d47e <__pow5mult+0x66>
 800d46a:	f240 2171 	movw	r1, #625	; 0x271
 800d46e:	4630      	mov	r0, r6
 800d470:	f7ff ff12 	bl	800d298 <__i2b>
 800d474:	2300      	movs	r3, #0
 800d476:	f8c8 0008 	str.w	r0, [r8, #8]
 800d47a:	4604      	mov	r4, r0
 800d47c:	6003      	str	r3, [r0, #0]
 800d47e:	f04f 0900 	mov.w	r9, #0
 800d482:	07eb      	lsls	r3, r5, #31
 800d484:	d50a      	bpl.n	800d49c <__pow5mult+0x84>
 800d486:	4639      	mov	r1, r7
 800d488:	4622      	mov	r2, r4
 800d48a:	4630      	mov	r0, r6
 800d48c:	f7ff ff1a 	bl	800d2c4 <__multiply>
 800d490:	4639      	mov	r1, r7
 800d492:	4680      	mov	r8, r0
 800d494:	4630      	mov	r0, r6
 800d496:	f7ff fe49 	bl	800d12c <_Bfree>
 800d49a:	4647      	mov	r7, r8
 800d49c:	106d      	asrs	r5, r5, #1
 800d49e:	d00b      	beq.n	800d4b8 <__pow5mult+0xa0>
 800d4a0:	6820      	ldr	r0, [r4, #0]
 800d4a2:	b938      	cbnz	r0, 800d4b4 <__pow5mult+0x9c>
 800d4a4:	4622      	mov	r2, r4
 800d4a6:	4621      	mov	r1, r4
 800d4a8:	4630      	mov	r0, r6
 800d4aa:	f7ff ff0b 	bl	800d2c4 <__multiply>
 800d4ae:	6020      	str	r0, [r4, #0]
 800d4b0:	f8c0 9000 	str.w	r9, [r0]
 800d4b4:	4604      	mov	r4, r0
 800d4b6:	e7e4      	b.n	800d482 <__pow5mult+0x6a>
 800d4b8:	4638      	mov	r0, r7
 800d4ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4be:	bf00      	nop
 800d4c0:	0800f738 	.word	0x0800f738
 800d4c4:	0800f56d 	.word	0x0800f56d
 800d4c8:	0800f5ed 	.word	0x0800f5ed

0800d4cc <__lshift>:
 800d4cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4d0:	460c      	mov	r4, r1
 800d4d2:	6849      	ldr	r1, [r1, #4]
 800d4d4:	6923      	ldr	r3, [r4, #16]
 800d4d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d4da:	68a3      	ldr	r3, [r4, #8]
 800d4dc:	4607      	mov	r7, r0
 800d4de:	4691      	mov	r9, r2
 800d4e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d4e4:	f108 0601 	add.w	r6, r8, #1
 800d4e8:	42b3      	cmp	r3, r6
 800d4ea:	db0b      	blt.n	800d504 <__lshift+0x38>
 800d4ec:	4638      	mov	r0, r7
 800d4ee:	f7ff fddd 	bl	800d0ac <_Balloc>
 800d4f2:	4605      	mov	r5, r0
 800d4f4:	b948      	cbnz	r0, 800d50a <__lshift+0x3e>
 800d4f6:	4602      	mov	r2, r0
 800d4f8:	4b28      	ldr	r3, [pc, #160]	; (800d59c <__lshift+0xd0>)
 800d4fa:	4829      	ldr	r0, [pc, #164]	; (800d5a0 <__lshift+0xd4>)
 800d4fc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800d500:	f000 fb80 	bl	800dc04 <__assert_func>
 800d504:	3101      	adds	r1, #1
 800d506:	005b      	lsls	r3, r3, #1
 800d508:	e7ee      	b.n	800d4e8 <__lshift+0x1c>
 800d50a:	2300      	movs	r3, #0
 800d50c:	f100 0114 	add.w	r1, r0, #20
 800d510:	f100 0210 	add.w	r2, r0, #16
 800d514:	4618      	mov	r0, r3
 800d516:	4553      	cmp	r3, sl
 800d518:	db33      	blt.n	800d582 <__lshift+0xb6>
 800d51a:	6920      	ldr	r0, [r4, #16]
 800d51c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d520:	f104 0314 	add.w	r3, r4, #20
 800d524:	f019 091f 	ands.w	r9, r9, #31
 800d528:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d52c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d530:	d02b      	beq.n	800d58a <__lshift+0xbe>
 800d532:	f1c9 0e20 	rsb	lr, r9, #32
 800d536:	468a      	mov	sl, r1
 800d538:	2200      	movs	r2, #0
 800d53a:	6818      	ldr	r0, [r3, #0]
 800d53c:	fa00 f009 	lsl.w	r0, r0, r9
 800d540:	4310      	orrs	r0, r2
 800d542:	f84a 0b04 	str.w	r0, [sl], #4
 800d546:	f853 2b04 	ldr.w	r2, [r3], #4
 800d54a:	459c      	cmp	ip, r3
 800d54c:	fa22 f20e 	lsr.w	r2, r2, lr
 800d550:	d8f3      	bhi.n	800d53a <__lshift+0x6e>
 800d552:	ebac 0304 	sub.w	r3, ip, r4
 800d556:	3b15      	subs	r3, #21
 800d558:	f023 0303 	bic.w	r3, r3, #3
 800d55c:	3304      	adds	r3, #4
 800d55e:	f104 0015 	add.w	r0, r4, #21
 800d562:	4584      	cmp	ip, r0
 800d564:	bf38      	it	cc
 800d566:	2304      	movcc	r3, #4
 800d568:	50ca      	str	r2, [r1, r3]
 800d56a:	b10a      	cbz	r2, 800d570 <__lshift+0xa4>
 800d56c:	f108 0602 	add.w	r6, r8, #2
 800d570:	3e01      	subs	r6, #1
 800d572:	4638      	mov	r0, r7
 800d574:	612e      	str	r6, [r5, #16]
 800d576:	4621      	mov	r1, r4
 800d578:	f7ff fdd8 	bl	800d12c <_Bfree>
 800d57c:	4628      	mov	r0, r5
 800d57e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d582:	f842 0f04 	str.w	r0, [r2, #4]!
 800d586:	3301      	adds	r3, #1
 800d588:	e7c5      	b.n	800d516 <__lshift+0x4a>
 800d58a:	3904      	subs	r1, #4
 800d58c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d590:	f841 2f04 	str.w	r2, [r1, #4]!
 800d594:	459c      	cmp	ip, r3
 800d596:	d8f9      	bhi.n	800d58c <__lshift+0xc0>
 800d598:	e7ea      	b.n	800d570 <__lshift+0xa4>
 800d59a:	bf00      	nop
 800d59c:	0800f5dc 	.word	0x0800f5dc
 800d5a0:	0800f5ed 	.word	0x0800f5ed

0800d5a4 <__mcmp>:
 800d5a4:	b530      	push	{r4, r5, lr}
 800d5a6:	6902      	ldr	r2, [r0, #16]
 800d5a8:	690c      	ldr	r4, [r1, #16]
 800d5aa:	1b12      	subs	r2, r2, r4
 800d5ac:	d10e      	bne.n	800d5cc <__mcmp+0x28>
 800d5ae:	f100 0314 	add.w	r3, r0, #20
 800d5b2:	3114      	adds	r1, #20
 800d5b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d5b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d5bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d5c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d5c4:	42a5      	cmp	r5, r4
 800d5c6:	d003      	beq.n	800d5d0 <__mcmp+0x2c>
 800d5c8:	d305      	bcc.n	800d5d6 <__mcmp+0x32>
 800d5ca:	2201      	movs	r2, #1
 800d5cc:	4610      	mov	r0, r2
 800d5ce:	bd30      	pop	{r4, r5, pc}
 800d5d0:	4283      	cmp	r3, r0
 800d5d2:	d3f3      	bcc.n	800d5bc <__mcmp+0x18>
 800d5d4:	e7fa      	b.n	800d5cc <__mcmp+0x28>
 800d5d6:	f04f 32ff 	mov.w	r2, #4294967295
 800d5da:	e7f7      	b.n	800d5cc <__mcmp+0x28>

0800d5dc <__mdiff>:
 800d5dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5e0:	460c      	mov	r4, r1
 800d5e2:	4606      	mov	r6, r0
 800d5e4:	4611      	mov	r1, r2
 800d5e6:	4620      	mov	r0, r4
 800d5e8:	4690      	mov	r8, r2
 800d5ea:	f7ff ffdb 	bl	800d5a4 <__mcmp>
 800d5ee:	1e05      	subs	r5, r0, #0
 800d5f0:	d110      	bne.n	800d614 <__mdiff+0x38>
 800d5f2:	4629      	mov	r1, r5
 800d5f4:	4630      	mov	r0, r6
 800d5f6:	f7ff fd59 	bl	800d0ac <_Balloc>
 800d5fa:	b930      	cbnz	r0, 800d60a <__mdiff+0x2e>
 800d5fc:	4b3a      	ldr	r3, [pc, #232]	; (800d6e8 <__mdiff+0x10c>)
 800d5fe:	4602      	mov	r2, r0
 800d600:	f240 2137 	movw	r1, #567	; 0x237
 800d604:	4839      	ldr	r0, [pc, #228]	; (800d6ec <__mdiff+0x110>)
 800d606:	f000 fafd 	bl	800dc04 <__assert_func>
 800d60a:	2301      	movs	r3, #1
 800d60c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d610:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d614:	bfa4      	itt	ge
 800d616:	4643      	movge	r3, r8
 800d618:	46a0      	movge	r8, r4
 800d61a:	4630      	mov	r0, r6
 800d61c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d620:	bfa6      	itte	ge
 800d622:	461c      	movge	r4, r3
 800d624:	2500      	movge	r5, #0
 800d626:	2501      	movlt	r5, #1
 800d628:	f7ff fd40 	bl	800d0ac <_Balloc>
 800d62c:	b920      	cbnz	r0, 800d638 <__mdiff+0x5c>
 800d62e:	4b2e      	ldr	r3, [pc, #184]	; (800d6e8 <__mdiff+0x10c>)
 800d630:	4602      	mov	r2, r0
 800d632:	f240 2145 	movw	r1, #581	; 0x245
 800d636:	e7e5      	b.n	800d604 <__mdiff+0x28>
 800d638:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d63c:	6926      	ldr	r6, [r4, #16]
 800d63e:	60c5      	str	r5, [r0, #12]
 800d640:	f104 0914 	add.w	r9, r4, #20
 800d644:	f108 0514 	add.w	r5, r8, #20
 800d648:	f100 0e14 	add.w	lr, r0, #20
 800d64c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d650:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d654:	f108 0210 	add.w	r2, r8, #16
 800d658:	46f2      	mov	sl, lr
 800d65a:	2100      	movs	r1, #0
 800d65c:	f859 3b04 	ldr.w	r3, [r9], #4
 800d660:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d664:	fa11 f88b 	uxtah	r8, r1, fp
 800d668:	b299      	uxth	r1, r3
 800d66a:	0c1b      	lsrs	r3, r3, #16
 800d66c:	eba8 0801 	sub.w	r8, r8, r1
 800d670:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d674:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d678:	fa1f f888 	uxth.w	r8, r8
 800d67c:	1419      	asrs	r1, r3, #16
 800d67e:	454e      	cmp	r6, r9
 800d680:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d684:	f84a 3b04 	str.w	r3, [sl], #4
 800d688:	d8e8      	bhi.n	800d65c <__mdiff+0x80>
 800d68a:	1b33      	subs	r3, r6, r4
 800d68c:	3b15      	subs	r3, #21
 800d68e:	f023 0303 	bic.w	r3, r3, #3
 800d692:	3304      	adds	r3, #4
 800d694:	3415      	adds	r4, #21
 800d696:	42a6      	cmp	r6, r4
 800d698:	bf38      	it	cc
 800d69a:	2304      	movcc	r3, #4
 800d69c:	441d      	add	r5, r3
 800d69e:	4473      	add	r3, lr
 800d6a0:	469e      	mov	lr, r3
 800d6a2:	462e      	mov	r6, r5
 800d6a4:	4566      	cmp	r6, ip
 800d6a6:	d30e      	bcc.n	800d6c6 <__mdiff+0xea>
 800d6a8:	f10c 0203 	add.w	r2, ip, #3
 800d6ac:	1b52      	subs	r2, r2, r5
 800d6ae:	f022 0203 	bic.w	r2, r2, #3
 800d6b2:	3d03      	subs	r5, #3
 800d6b4:	45ac      	cmp	ip, r5
 800d6b6:	bf38      	it	cc
 800d6b8:	2200      	movcc	r2, #0
 800d6ba:	4413      	add	r3, r2
 800d6bc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d6c0:	b17a      	cbz	r2, 800d6e2 <__mdiff+0x106>
 800d6c2:	6107      	str	r7, [r0, #16]
 800d6c4:	e7a4      	b.n	800d610 <__mdiff+0x34>
 800d6c6:	f856 8b04 	ldr.w	r8, [r6], #4
 800d6ca:	fa11 f288 	uxtah	r2, r1, r8
 800d6ce:	1414      	asrs	r4, r2, #16
 800d6d0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d6d4:	b292      	uxth	r2, r2
 800d6d6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d6da:	f84e 2b04 	str.w	r2, [lr], #4
 800d6de:	1421      	asrs	r1, r4, #16
 800d6e0:	e7e0      	b.n	800d6a4 <__mdiff+0xc8>
 800d6e2:	3f01      	subs	r7, #1
 800d6e4:	e7ea      	b.n	800d6bc <__mdiff+0xe0>
 800d6e6:	bf00      	nop
 800d6e8:	0800f5dc 	.word	0x0800f5dc
 800d6ec:	0800f5ed 	.word	0x0800f5ed

0800d6f0 <__d2b>:
 800d6f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d6f4:	460f      	mov	r7, r1
 800d6f6:	2101      	movs	r1, #1
 800d6f8:	ec59 8b10 	vmov	r8, r9, d0
 800d6fc:	4616      	mov	r6, r2
 800d6fe:	f7ff fcd5 	bl	800d0ac <_Balloc>
 800d702:	4604      	mov	r4, r0
 800d704:	b930      	cbnz	r0, 800d714 <__d2b+0x24>
 800d706:	4602      	mov	r2, r0
 800d708:	4b24      	ldr	r3, [pc, #144]	; (800d79c <__d2b+0xac>)
 800d70a:	4825      	ldr	r0, [pc, #148]	; (800d7a0 <__d2b+0xb0>)
 800d70c:	f240 310f 	movw	r1, #783	; 0x30f
 800d710:	f000 fa78 	bl	800dc04 <__assert_func>
 800d714:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d718:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d71c:	bb2d      	cbnz	r5, 800d76a <__d2b+0x7a>
 800d71e:	9301      	str	r3, [sp, #4]
 800d720:	f1b8 0300 	subs.w	r3, r8, #0
 800d724:	d026      	beq.n	800d774 <__d2b+0x84>
 800d726:	4668      	mov	r0, sp
 800d728:	9300      	str	r3, [sp, #0]
 800d72a:	f7ff fd87 	bl	800d23c <__lo0bits>
 800d72e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d732:	b1e8      	cbz	r0, 800d770 <__d2b+0x80>
 800d734:	f1c0 0320 	rsb	r3, r0, #32
 800d738:	fa02 f303 	lsl.w	r3, r2, r3
 800d73c:	430b      	orrs	r3, r1
 800d73e:	40c2      	lsrs	r2, r0
 800d740:	6163      	str	r3, [r4, #20]
 800d742:	9201      	str	r2, [sp, #4]
 800d744:	9b01      	ldr	r3, [sp, #4]
 800d746:	61a3      	str	r3, [r4, #24]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	bf14      	ite	ne
 800d74c:	2202      	movne	r2, #2
 800d74e:	2201      	moveq	r2, #1
 800d750:	6122      	str	r2, [r4, #16]
 800d752:	b1bd      	cbz	r5, 800d784 <__d2b+0x94>
 800d754:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d758:	4405      	add	r5, r0
 800d75a:	603d      	str	r5, [r7, #0]
 800d75c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d760:	6030      	str	r0, [r6, #0]
 800d762:	4620      	mov	r0, r4
 800d764:	b003      	add	sp, #12
 800d766:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d76a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d76e:	e7d6      	b.n	800d71e <__d2b+0x2e>
 800d770:	6161      	str	r1, [r4, #20]
 800d772:	e7e7      	b.n	800d744 <__d2b+0x54>
 800d774:	a801      	add	r0, sp, #4
 800d776:	f7ff fd61 	bl	800d23c <__lo0bits>
 800d77a:	9b01      	ldr	r3, [sp, #4]
 800d77c:	6163      	str	r3, [r4, #20]
 800d77e:	3020      	adds	r0, #32
 800d780:	2201      	movs	r2, #1
 800d782:	e7e5      	b.n	800d750 <__d2b+0x60>
 800d784:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d788:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d78c:	6038      	str	r0, [r7, #0]
 800d78e:	6918      	ldr	r0, [r3, #16]
 800d790:	f7ff fd34 	bl	800d1fc <__hi0bits>
 800d794:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d798:	e7e2      	b.n	800d760 <__d2b+0x70>
 800d79a:	bf00      	nop
 800d79c:	0800f5dc 	.word	0x0800f5dc
 800d7a0:	0800f5ed 	.word	0x0800f5ed

0800d7a4 <__ssputs_r>:
 800d7a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7a8:	688e      	ldr	r6, [r1, #8]
 800d7aa:	461f      	mov	r7, r3
 800d7ac:	42be      	cmp	r6, r7
 800d7ae:	680b      	ldr	r3, [r1, #0]
 800d7b0:	4682      	mov	sl, r0
 800d7b2:	460c      	mov	r4, r1
 800d7b4:	4690      	mov	r8, r2
 800d7b6:	d82c      	bhi.n	800d812 <__ssputs_r+0x6e>
 800d7b8:	898a      	ldrh	r2, [r1, #12]
 800d7ba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d7be:	d026      	beq.n	800d80e <__ssputs_r+0x6a>
 800d7c0:	6965      	ldr	r5, [r4, #20]
 800d7c2:	6909      	ldr	r1, [r1, #16]
 800d7c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d7c8:	eba3 0901 	sub.w	r9, r3, r1
 800d7cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d7d0:	1c7b      	adds	r3, r7, #1
 800d7d2:	444b      	add	r3, r9
 800d7d4:	106d      	asrs	r5, r5, #1
 800d7d6:	429d      	cmp	r5, r3
 800d7d8:	bf38      	it	cc
 800d7da:	461d      	movcc	r5, r3
 800d7dc:	0553      	lsls	r3, r2, #21
 800d7de:	d527      	bpl.n	800d830 <__ssputs_r+0x8c>
 800d7e0:	4629      	mov	r1, r5
 800d7e2:	f7ff fbd7 	bl	800cf94 <_malloc_r>
 800d7e6:	4606      	mov	r6, r0
 800d7e8:	b360      	cbz	r0, 800d844 <__ssputs_r+0xa0>
 800d7ea:	6921      	ldr	r1, [r4, #16]
 800d7ec:	464a      	mov	r2, r9
 800d7ee:	f7fe fcd5 	bl	800c19c <memcpy>
 800d7f2:	89a3      	ldrh	r3, [r4, #12]
 800d7f4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d7f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d7fc:	81a3      	strh	r3, [r4, #12]
 800d7fe:	6126      	str	r6, [r4, #16]
 800d800:	6165      	str	r5, [r4, #20]
 800d802:	444e      	add	r6, r9
 800d804:	eba5 0509 	sub.w	r5, r5, r9
 800d808:	6026      	str	r6, [r4, #0]
 800d80a:	60a5      	str	r5, [r4, #8]
 800d80c:	463e      	mov	r6, r7
 800d80e:	42be      	cmp	r6, r7
 800d810:	d900      	bls.n	800d814 <__ssputs_r+0x70>
 800d812:	463e      	mov	r6, r7
 800d814:	6820      	ldr	r0, [r4, #0]
 800d816:	4632      	mov	r2, r6
 800d818:	4641      	mov	r1, r8
 800d81a:	f000 f9c9 	bl	800dbb0 <memmove>
 800d81e:	68a3      	ldr	r3, [r4, #8]
 800d820:	1b9b      	subs	r3, r3, r6
 800d822:	60a3      	str	r3, [r4, #8]
 800d824:	6823      	ldr	r3, [r4, #0]
 800d826:	4433      	add	r3, r6
 800d828:	6023      	str	r3, [r4, #0]
 800d82a:	2000      	movs	r0, #0
 800d82c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d830:	462a      	mov	r2, r5
 800d832:	f000 fa2d 	bl	800dc90 <_realloc_r>
 800d836:	4606      	mov	r6, r0
 800d838:	2800      	cmp	r0, #0
 800d83a:	d1e0      	bne.n	800d7fe <__ssputs_r+0x5a>
 800d83c:	6921      	ldr	r1, [r4, #16]
 800d83e:	4650      	mov	r0, sl
 800d840:	f7ff fb34 	bl	800ceac <_free_r>
 800d844:	230c      	movs	r3, #12
 800d846:	f8ca 3000 	str.w	r3, [sl]
 800d84a:	89a3      	ldrh	r3, [r4, #12]
 800d84c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d850:	81a3      	strh	r3, [r4, #12]
 800d852:	f04f 30ff 	mov.w	r0, #4294967295
 800d856:	e7e9      	b.n	800d82c <__ssputs_r+0x88>

0800d858 <_svfiprintf_r>:
 800d858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d85c:	4698      	mov	r8, r3
 800d85e:	898b      	ldrh	r3, [r1, #12]
 800d860:	061b      	lsls	r3, r3, #24
 800d862:	b09d      	sub	sp, #116	; 0x74
 800d864:	4607      	mov	r7, r0
 800d866:	460d      	mov	r5, r1
 800d868:	4614      	mov	r4, r2
 800d86a:	d50e      	bpl.n	800d88a <_svfiprintf_r+0x32>
 800d86c:	690b      	ldr	r3, [r1, #16]
 800d86e:	b963      	cbnz	r3, 800d88a <_svfiprintf_r+0x32>
 800d870:	2140      	movs	r1, #64	; 0x40
 800d872:	f7ff fb8f 	bl	800cf94 <_malloc_r>
 800d876:	6028      	str	r0, [r5, #0]
 800d878:	6128      	str	r0, [r5, #16]
 800d87a:	b920      	cbnz	r0, 800d886 <_svfiprintf_r+0x2e>
 800d87c:	230c      	movs	r3, #12
 800d87e:	603b      	str	r3, [r7, #0]
 800d880:	f04f 30ff 	mov.w	r0, #4294967295
 800d884:	e0d0      	b.n	800da28 <_svfiprintf_r+0x1d0>
 800d886:	2340      	movs	r3, #64	; 0x40
 800d888:	616b      	str	r3, [r5, #20]
 800d88a:	2300      	movs	r3, #0
 800d88c:	9309      	str	r3, [sp, #36]	; 0x24
 800d88e:	2320      	movs	r3, #32
 800d890:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d894:	f8cd 800c 	str.w	r8, [sp, #12]
 800d898:	2330      	movs	r3, #48	; 0x30
 800d89a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800da40 <_svfiprintf_r+0x1e8>
 800d89e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d8a2:	f04f 0901 	mov.w	r9, #1
 800d8a6:	4623      	mov	r3, r4
 800d8a8:	469a      	mov	sl, r3
 800d8aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d8ae:	b10a      	cbz	r2, 800d8b4 <_svfiprintf_r+0x5c>
 800d8b0:	2a25      	cmp	r2, #37	; 0x25
 800d8b2:	d1f9      	bne.n	800d8a8 <_svfiprintf_r+0x50>
 800d8b4:	ebba 0b04 	subs.w	fp, sl, r4
 800d8b8:	d00b      	beq.n	800d8d2 <_svfiprintf_r+0x7a>
 800d8ba:	465b      	mov	r3, fp
 800d8bc:	4622      	mov	r2, r4
 800d8be:	4629      	mov	r1, r5
 800d8c0:	4638      	mov	r0, r7
 800d8c2:	f7ff ff6f 	bl	800d7a4 <__ssputs_r>
 800d8c6:	3001      	adds	r0, #1
 800d8c8:	f000 80a9 	beq.w	800da1e <_svfiprintf_r+0x1c6>
 800d8cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d8ce:	445a      	add	r2, fp
 800d8d0:	9209      	str	r2, [sp, #36]	; 0x24
 800d8d2:	f89a 3000 	ldrb.w	r3, [sl]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	f000 80a1 	beq.w	800da1e <_svfiprintf_r+0x1c6>
 800d8dc:	2300      	movs	r3, #0
 800d8de:	f04f 32ff 	mov.w	r2, #4294967295
 800d8e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d8e6:	f10a 0a01 	add.w	sl, sl, #1
 800d8ea:	9304      	str	r3, [sp, #16]
 800d8ec:	9307      	str	r3, [sp, #28]
 800d8ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d8f2:	931a      	str	r3, [sp, #104]	; 0x68
 800d8f4:	4654      	mov	r4, sl
 800d8f6:	2205      	movs	r2, #5
 800d8f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8fc:	4850      	ldr	r0, [pc, #320]	; (800da40 <_svfiprintf_r+0x1e8>)
 800d8fe:	f7f2 fc77 	bl	80001f0 <memchr>
 800d902:	9a04      	ldr	r2, [sp, #16]
 800d904:	b9d8      	cbnz	r0, 800d93e <_svfiprintf_r+0xe6>
 800d906:	06d0      	lsls	r0, r2, #27
 800d908:	bf44      	itt	mi
 800d90a:	2320      	movmi	r3, #32
 800d90c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d910:	0711      	lsls	r1, r2, #28
 800d912:	bf44      	itt	mi
 800d914:	232b      	movmi	r3, #43	; 0x2b
 800d916:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d91a:	f89a 3000 	ldrb.w	r3, [sl]
 800d91e:	2b2a      	cmp	r3, #42	; 0x2a
 800d920:	d015      	beq.n	800d94e <_svfiprintf_r+0xf6>
 800d922:	9a07      	ldr	r2, [sp, #28]
 800d924:	4654      	mov	r4, sl
 800d926:	2000      	movs	r0, #0
 800d928:	f04f 0c0a 	mov.w	ip, #10
 800d92c:	4621      	mov	r1, r4
 800d92e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d932:	3b30      	subs	r3, #48	; 0x30
 800d934:	2b09      	cmp	r3, #9
 800d936:	d94d      	bls.n	800d9d4 <_svfiprintf_r+0x17c>
 800d938:	b1b0      	cbz	r0, 800d968 <_svfiprintf_r+0x110>
 800d93a:	9207      	str	r2, [sp, #28]
 800d93c:	e014      	b.n	800d968 <_svfiprintf_r+0x110>
 800d93e:	eba0 0308 	sub.w	r3, r0, r8
 800d942:	fa09 f303 	lsl.w	r3, r9, r3
 800d946:	4313      	orrs	r3, r2
 800d948:	9304      	str	r3, [sp, #16]
 800d94a:	46a2      	mov	sl, r4
 800d94c:	e7d2      	b.n	800d8f4 <_svfiprintf_r+0x9c>
 800d94e:	9b03      	ldr	r3, [sp, #12]
 800d950:	1d19      	adds	r1, r3, #4
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	9103      	str	r1, [sp, #12]
 800d956:	2b00      	cmp	r3, #0
 800d958:	bfbb      	ittet	lt
 800d95a:	425b      	neglt	r3, r3
 800d95c:	f042 0202 	orrlt.w	r2, r2, #2
 800d960:	9307      	strge	r3, [sp, #28]
 800d962:	9307      	strlt	r3, [sp, #28]
 800d964:	bfb8      	it	lt
 800d966:	9204      	strlt	r2, [sp, #16]
 800d968:	7823      	ldrb	r3, [r4, #0]
 800d96a:	2b2e      	cmp	r3, #46	; 0x2e
 800d96c:	d10c      	bne.n	800d988 <_svfiprintf_r+0x130>
 800d96e:	7863      	ldrb	r3, [r4, #1]
 800d970:	2b2a      	cmp	r3, #42	; 0x2a
 800d972:	d134      	bne.n	800d9de <_svfiprintf_r+0x186>
 800d974:	9b03      	ldr	r3, [sp, #12]
 800d976:	1d1a      	adds	r2, r3, #4
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	9203      	str	r2, [sp, #12]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	bfb8      	it	lt
 800d980:	f04f 33ff 	movlt.w	r3, #4294967295
 800d984:	3402      	adds	r4, #2
 800d986:	9305      	str	r3, [sp, #20]
 800d988:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800da50 <_svfiprintf_r+0x1f8>
 800d98c:	7821      	ldrb	r1, [r4, #0]
 800d98e:	2203      	movs	r2, #3
 800d990:	4650      	mov	r0, sl
 800d992:	f7f2 fc2d 	bl	80001f0 <memchr>
 800d996:	b138      	cbz	r0, 800d9a8 <_svfiprintf_r+0x150>
 800d998:	9b04      	ldr	r3, [sp, #16]
 800d99a:	eba0 000a 	sub.w	r0, r0, sl
 800d99e:	2240      	movs	r2, #64	; 0x40
 800d9a0:	4082      	lsls	r2, r0
 800d9a2:	4313      	orrs	r3, r2
 800d9a4:	3401      	adds	r4, #1
 800d9a6:	9304      	str	r3, [sp, #16]
 800d9a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9ac:	4825      	ldr	r0, [pc, #148]	; (800da44 <_svfiprintf_r+0x1ec>)
 800d9ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d9b2:	2206      	movs	r2, #6
 800d9b4:	f7f2 fc1c 	bl	80001f0 <memchr>
 800d9b8:	2800      	cmp	r0, #0
 800d9ba:	d038      	beq.n	800da2e <_svfiprintf_r+0x1d6>
 800d9bc:	4b22      	ldr	r3, [pc, #136]	; (800da48 <_svfiprintf_r+0x1f0>)
 800d9be:	bb1b      	cbnz	r3, 800da08 <_svfiprintf_r+0x1b0>
 800d9c0:	9b03      	ldr	r3, [sp, #12]
 800d9c2:	3307      	adds	r3, #7
 800d9c4:	f023 0307 	bic.w	r3, r3, #7
 800d9c8:	3308      	adds	r3, #8
 800d9ca:	9303      	str	r3, [sp, #12]
 800d9cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9ce:	4433      	add	r3, r6
 800d9d0:	9309      	str	r3, [sp, #36]	; 0x24
 800d9d2:	e768      	b.n	800d8a6 <_svfiprintf_r+0x4e>
 800d9d4:	fb0c 3202 	mla	r2, ip, r2, r3
 800d9d8:	460c      	mov	r4, r1
 800d9da:	2001      	movs	r0, #1
 800d9dc:	e7a6      	b.n	800d92c <_svfiprintf_r+0xd4>
 800d9de:	2300      	movs	r3, #0
 800d9e0:	3401      	adds	r4, #1
 800d9e2:	9305      	str	r3, [sp, #20]
 800d9e4:	4619      	mov	r1, r3
 800d9e6:	f04f 0c0a 	mov.w	ip, #10
 800d9ea:	4620      	mov	r0, r4
 800d9ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d9f0:	3a30      	subs	r2, #48	; 0x30
 800d9f2:	2a09      	cmp	r2, #9
 800d9f4:	d903      	bls.n	800d9fe <_svfiprintf_r+0x1a6>
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d0c6      	beq.n	800d988 <_svfiprintf_r+0x130>
 800d9fa:	9105      	str	r1, [sp, #20]
 800d9fc:	e7c4      	b.n	800d988 <_svfiprintf_r+0x130>
 800d9fe:	fb0c 2101 	mla	r1, ip, r1, r2
 800da02:	4604      	mov	r4, r0
 800da04:	2301      	movs	r3, #1
 800da06:	e7f0      	b.n	800d9ea <_svfiprintf_r+0x192>
 800da08:	ab03      	add	r3, sp, #12
 800da0a:	9300      	str	r3, [sp, #0]
 800da0c:	462a      	mov	r2, r5
 800da0e:	4b0f      	ldr	r3, [pc, #60]	; (800da4c <_svfiprintf_r+0x1f4>)
 800da10:	a904      	add	r1, sp, #16
 800da12:	4638      	mov	r0, r7
 800da14:	f7fd fe6a 	bl	800b6ec <_printf_float>
 800da18:	1c42      	adds	r2, r0, #1
 800da1a:	4606      	mov	r6, r0
 800da1c:	d1d6      	bne.n	800d9cc <_svfiprintf_r+0x174>
 800da1e:	89ab      	ldrh	r3, [r5, #12]
 800da20:	065b      	lsls	r3, r3, #25
 800da22:	f53f af2d 	bmi.w	800d880 <_svfiprintf_r+0x28>
 800da26:	9809      	ldr	r0, [sp, #36]	; 0x24
 800da28:	b01d      	add	sp, #116	; 0x74
 800da2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da2e:	ab03      	add	r3, sp, #12
 800da30:	9300      	str	r3, [sp, #0]
 800da32:	462a      	mov	r2, r5
 800da34:	4b05      	ldr	r3, [pc, #20]	; (800da4c <_svfiprintf_r+0x1f4>)
 800da36:	a904      	add	r1, sp, #16
 800da38:	4638      	mov	r0, r7
 800da3a:	f7fe f8fb 	bl	800bc34 <_printf_i>
 800da3e:	e7eb      	b.n	800da18 <_svfiprintf_r+0x1c0>
 800da40:	0800f744 	.word	0x0800f744
 800da44:	0800f74e 	.word	0x0800f74e
 800da48:	0800b6ed 	.word	0x0800b6ed
 800da4c:	0800d7a5 	.word	0x0800d7a5
 800da50:	0800f74a 	.word	0x0800f74a

0800da54 <__sflush_r>:
 800da54:	898a      	ldrh	r2, [r1, #12]
 800da56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da5a:	4605      	mov	r5, r0
 800da5c:	0710      	lsls	r0, r2, #28
 800da5e:	460c      	mov	r4, r1
 800da60:	d458      	bmi.n	800db14 <__sflush_r+0xc0>
 800da62:	684b      	ldr	r3, [r1, #4]
 800da64:	2b00      	cmp	r3, #0
 800da66:	dc05      	bgt.n	800da74 <__sflush_r+0x20>
 800da68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	dc02      	bgt.n	800da74 <__sflush_r+0x20>
 800da6e:	2000      	movs	r0, #0
 800da70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800da76:	2e00      	cmp	r6, #0
 800da78:	d0f9      	beq.n	800da6e <__sflush_r+0x1a>
 800da7a:	2300      	movs	r3, #0
 800da7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800da80:	682f      	ldr	r7, [r5, #0]
 800da82:	6a21      	ldr	r1, [r4, #32]
 800da84:	602b      	str	r3, [r5, #0]
 800da86:	d032      	beq.n	800daee <__sflush_r+0x9a>
 800da88:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800da8a:	89a3      	ldrh	r3, [r4, #12]
 800da8c:	075a      	lsls	r2, r3, #29
 800da8e:	d505      	bpl.n	800da9c <__sflush_r+0x48>
 800da90:	6863      	ldr	r3, [r4, #4]
 800da92:	1ac0      	subs	r0, r0, r3
 800da94:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800da96:	b10b      	cbz	r3, 800da9c <__sflush_r+0x48>
 800da98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800da9a:	1ac0      	subs	r0, r0, r3
 800da9c:	2300      	movs	r3, #0
 800da9e:	4602      	mov	r2, r0
 800daa0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800daa2:	6a21      	ldr	r1, [r4, #32]
 800daa4:	4628      	mov	r0, r5
 800daa6:	47b0      	blx	r6
 800daa8:	1c43      	adds	r3, r0, #1
 800daaa:	89a3      	ldrh	r3, [r4, #12]
 800daac:	d106      	bne.n	800dabc <__sflush_r+0x68>
 800daae:	6829      	ldr	r1, [r5, #0]
 800dab0:	291d      	cmp	r1, #29
 800dab2:	d82b      	bhi.n	800db0c <__sflush_r+0xb8>
 800dab4:	4a29      	ldr	r2, [pc, #164]	; (800db5c <__sflush_r+0x108>)
 800dab6:	410a      	asrs	r2, r1
 800dab8:	07d6      	lsls	r6, r2, #31
 800daba:	d427      	bmi.n	800db0c <__sflush_r+0xb8>
 800dabc:	2200      	movs	r2, #0
 800dabe:	6062      	str	r2, [r4, #4]
 800dac0:	04d9      	lsls	r1, r3, #19
 800dac2:	6922      	ldr	r2, [r4, #16]
 800dac4:	6022      	str	r2, [r4, #0]
 800dac6:	d504      	bpl.n	800dad2 <__sflush_r+0x7e>
 800dac8:	1c42      	adds	r2, r0, #1
 800daca:	d101      	bne.n	800dad0 <__sflush_r+0x7c>
 800dacc:	682b      	ldr	r3, [r5, #0]
 800dace:	b903      	cbnz	r3, 800dad2 <__sflush_r+0x7e>
 800dad0:	6560      	str	r0, [r4, #84]	; 0x54
 800dad2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dad4:	602f      	str	r7, [r5, #0]
 800dad6:	2900      	cmp	r1, #0
 800dad8:	d0c9      	beq.n	800da6e <__sflush_r+0x1a>
 800dada:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dade:	4299      	cmp	r1, r3
 800dae0:	d002      	beq.n	800dae8 <__sflush_r+0x94>
 800dae2:	4628      	mov	r0, r5
 800dae4:	f7ff f9e2 	bl	800ceac <_free_r>
 800dae8:	2000      	movs	r0, #0
 800daea:	6360      	str	r0, [r4, #52]	; 0x34
 800daec:	e7c0      	b.n	800da70 <__sflush_r+0x1c>
 800daee:	2301      	movs	r3, #1
 800daf0:	4628      	mov	r0, r5
 800daf2:	47b0      	blx	r6
 800daf4:	1c41      	adds	r1, r0, #1
 800daf6:	d1c8      	bne.n	800da8a <__sflush_r+0x36>
 800daf8:	682b      	ldr	r3, [r5, #0]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d0c5      	beq.n	800da8a <__sflush_r+0x36>
 800dafe:	2b1d      	cmp	r3, #29
 800db00:	d001      	beq.n	800db06 <__sflush_r+0xb2>
 800db02:	2b16      	cmp	r3, #22
 800db04:	d101      	bne.n	800db0a <__sflush_r+0xb6>
 800db06:	602f      	str	r7, [r5, #0]
 800db08:	e7b1      	b.n	800da6e <__sflush_r+0x1a>
 800db0a:	89a3      	ldrh	r3, [r4, #12]
 800db0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db10:	81a3      	strh	r3, [r4, #12]
 800db12:	e7ad      	b.n	800da70 <__sflush_r+0x1c>
 800db14:	690f      	ldr	r7, [r1, #16]
 800db16:	2f00      	cmp	r7, #0
 800db18:	d0a9      	beq.n	800da6e <__sflush_r+0x1a>
 800db1a:	0793      	lsls	r3, r2, #30
 800db1c:	680e      	ldr	r6, [r1, #0]
 800db1e:	bf08      	it	eq
 800db20:	694b      	ldreq	r3, [r1, #20]
 800db22:	600f      	str	r7, [r1, #0]
 800db24:	bf18      	it	ne
 800db26:	2300      	movne	r3, #0
 800db28:	eba6 0807 	sub.w	r8, r6, r7
 800db2c:	608b      	str	r3, [r1, #8]
 800db2e:	f1b8 0f00 	cmp.w	r8, #0
 800db32:	dd9c      	ble.n	800da6e <__sflush_r+0x1a>
 800db34:	6a21      	ldr	r1, [r4, #32]
 800db36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800db38:	4643      	mov	r3, r8
 800db3a:	463a      	mov	r2, r7
 800db3c:	4628      	mov	r0, r5
 800db3e:	47b0      	blx	r6
 800db40:	2800      	cmp	r0, #0
 800db42:	dc06      	bgt.n	800db52 <__sflush_r+0xfe>
 800db44:	89a3      	ldrh	r3, [r4, #12]
 800db46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db4a:	81a3      	strh	r3, [r4, #12]
 800db4c:	f04f 30ff 	mov.w	r0, #4294967295
 800db50:	e78e      	b.n	800da70 <__sflush_r+0x1c>
 800db52:	4407      	add	r7, r0
 800db54:	eba8 0800 	sub.w	r8, r8, r0
 800db58:	e7e9      	b.n	800db2e <__sflush_r+0xda>
 800db5a:	bf00      	nop
 800db5c:	dfbffffe 	.word	0xdfbffffe

0800db60 <_fflush_r>:
 800db60:	b538      	push	{r3, r4, r5, lr}
 800db62:	690b      	ldr	r3, [r1, #16]
 800db64:	4605      	mov	r5, r0
 800db66:	460c      	mov	r4, r1
 800db68:	b913      	cbnz	r3, 800db70 <_fflush_r+0x10>
 800db6a:	2500      	movs	r5, #0
 800db6c:	4628      	mov	r0, r5
 800db6e:	bd38      	pop	{r3, r4, r5, pc}
 800db70:	b118      	cbz	r0, 800db7a <_fflush_r+0x1a>
 800db72:	6a03      	ldr	r3, [r0, #32]
 800db74:	b90b      	cbnz	r3, 800db7a <_fflush_r+0x1a>
 800db76:	f7fe f9f9 	bl	800bf6c <__sinit>
 800db7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d0f3      	beq.n	800db6a <_fflush_r+0xa>
 800db82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800db84:	07d0      	lsls	r0, r2, #31
 800db86:	d404      	bmi.n	800db92 <_fflush_r+0x32>
 800db88:	0599      	lsls	r1, r3, #22
 800db8a:	d402      	bmi.n	800db92 <_fflush_r+0x32>
 800db8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800db8e:	f7fe fb03 	bl	800c198 <__retarget_lock_acquire_recursive>
 800db92:	4628      	mov	r0, r5
 800db94:	4621      	mov	r1, r4
 800db96:	f7ff ff5d 	bl	800da54 <__sflush_r>
 800db9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800db9c:	07da      	lsls	r2, r3, #31
 800db9e:	4605      	mov	r5, r0
 800dba0:	d4e4      	bmi.n	800db6c <_fflush_r+0xc>
 800dba2:	89a3      	ldrh	r3, [r4, #12]
 800dba4:	059b      	lsls	r3, r3, #22
 800dba6:	d4e1      	bmi.n	800db6c <_fflush_r+0xc>
 800dba8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dbaa:	f7fe faf6 	bl	800c19a <__retarget_lock_release_recursive>
 800dbae:	e7dd      	b.n	800db6c <_fflush_r+0xc>

0800dbb0 <memmove>:
 800dbb0:	4288      	cmp	r0, r1
 800dbb2:	b510      	push	{r4, lr}
 800dbb4:	eb01 0402 	add.w	r4, r1, r2
 800dbb8:	d902      	bls.n	800dbc0 <memmove+0x10>
 800dbba:	4284      	cmp	r4, r0
 800dbbc:	4623      	mov	r3, r4
 800dbbe:	d807      	bhi.n	800dbd0 <memmove+0x20>
 800dbc0:	1e43      	subs	r3, r0, #1
 800dbc2:	42a1      	cmp	r1, r4
 800dbc4:	d008      	beq.n	800dbd8 <memmove+0x28>
 800dbc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dbca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dbce:	e7f8      	b.n	800dbc2 <memmove+0x12>
 800dbd0:	4402      	add	r2, r0
 800dbd2:	4601      	mov	r1, r0
 800dbd4:	428a      	cmp	r2, r1
 800dbd6:	d100      	bne.n	800dbda <memmove+0x2a>
 800dbd8:	bd10      	pop	{r4, pc}
 800dbda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dbde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dbe2:	e7f7      	b.n	800dbd4 <memmove+0x24>

0800dbe4 <_sbrk_r>:
 800dbe4:	b538      	push	{r3, r4, r5, lr}
 800dbe6:	4d06      	ldr	r5, [pc, #24]	; (800dc00 <_sbrk_r+0x1c>)
 800dbe8:	2300      	movs	r3, #0
 800dbea:	4604      	mov	r4, r0
 800dbec:	4608      	mov	r0, r1
 800dbee:	602b      	str	r3, [r5, #0]
 800dbf0:	f7f6 f926 	bl	8003e40 <_sbrk>
 800dbf4:	1c43      	adds	r3, r0, #1
 800dbf6:	d102      	bne.n	800dbfe <_sbrk_r+0x1a>
 800dbf8:	682b      	ldr	r3, [r5, #0]
 800dbfa:	b103      	cbz	r3, 800dbfe <_sbrk_r+0x1a>
 800dbfc:	6023      	str	r3, [r4, #0]
 800dbfe:	bd38      	pop	{r3, r4, r5, pc}
 800dc00:	200022a0 	.word	0x200022a0

0800dc04 <__assert_func>:
 800dc04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dc06:	4614      	mov	r4, r2
 800dc08:	461a      	mov	r2, r3
 800dc0a:	4b09      	ldr	r3, [pc, #36]	; (800dc30 <__assert_func+0x2c>)
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	4605      	mov	r5, r0
 800dc10:	68d8      	ldr	r0, [r3, #12]
 800dc12:	b14c      	cbz	r4, 800dc28 <__assert_func+0x24>
 800dc14:	4b07      	ldr	r3, [pc, #28]	; (800dc34 <__assert_func+0x30>)
 800dc16:	9100      	str	r1, [sp, #0]
 800dc18:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dc1c:	4906      	ldr	r1, [pc, #24]	; (800dc38 <__assert_func+0x34>)
 800dc1e:	462b      	mov	r3, r5
 800dc20:	f000 f872 	bl	800dd08 <fiprintf>
 800dc24:	f000 f882 	bl	800dd2c <abort>
 800dc28:	4b04      	ldr	r3, [pc, #16]	; (800dc3c <__assert_func+0x38>)
 800dc2a:	461c      	mov	r4, r3
 800dc2c:	e7f3      	b.n	800dc16 <__assert_func+0x12>
 800dc2e:	bf00      	nop
 800dc30:	20000068 	.word	0x20000068
 800dc34:	0800f75f 	.word	0x0800f75f
 800dc38:	0800f76c 	.word	0x0800f76c
 800dc3c:	0800f79a 	.word	0x0800f79a

0800dc40 <_calloc_r>:
 800dc40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dc42:	fba1 2402 	umull	r2, r4, r1, r2
 800dc46:	b94c      	cbnz	r4, 800dc5c <_calloc_r+0x1c>
 800dc48:	4611      	mov	r1, r2
 800dc4a:	9201      	str	r2, [sp, #4]
 800dc4c:	f7ff f9a2 	bl	800cf94 <_malloc_r>
 800dc50:	9a01      	ldr	r2, [sp, #4]
 800dc52:	4605      	mov	r5, r0
 800dc54:	b930      	cbnz	r0, 800dc64 <_calloc_r+0x24>
 800dc56:	4628      	mov	r0, r5
 800dc58:	b003      	add	sp, #12
 800dc5a:	bd30      	pop	{r4, r5, pc}
 800dc5c:	220c      	movs	r2, #12
 800dc5e:	6002      	str	r2, [r0, #0]
 800dc60:	2500      	movs	r5, #0
 800dc62:	e7f8      	b.n	800dc56 <_calloc_r+0x16>
 800dc64:	4621      	mov	r1, r4
 800dc66:	f7fe fa1a 	bl	800c09e <memset>
 800dc6a:	e7f4      	b.n	800dc56 <_calloc_r+0x16>

0800dc6c <__ascii_mbtowc>:
 800dc6c:	b082      	sub	sp, #8
 800dc6e:	b901      	cbnz	r1, 800dc72 <__ascii_mbtowc+0x6>
 800dc70:	a901      	add	r1, sp, #4
 800dc72:	b142      	cbz	r2, 800dc86 <__ascii_mbtowc+0x1a>
 800dc74:	b14b      	cbz	r3, 800dc8a <__ascii_mbtowc+0x1e>
 800dc76:	7813      	ldrb	r3, [r2, #0]
 800dc78:	600b      	str	r3, [r1, #0]
 800dc7a:	7812      	ldrb	r2, [r2, #0]
 800dc7c:	1e10      	subs	r0, r2, #0
 800dc7e:	bf18      	it	ne
 800dc80:	2001      	movne	r0, #1
 800dc82:	b002      	add	sp, #8
 800dc84:	4770      	bx	lr
 800dc86:	4610      	mov	r0, r2
 800dc88:	e7fb      	b.n	800dc82 <__ascii_mbtowc+0x16>
 800dc8a:	f06f 0001 	mvn.w	r0, #1
 800dc8e:	e7f8      	b.n	800dc82 <__ascii_mbtowc+0x16>

0800dc90 <_realloc_r>:
 800dc90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc94:	4680      	mov	r8, r0
 800dc96:	4614      	mov	r4, r2
 800dc98:	460e      	mov	r6, r1
 800dc9a:	b921      	cbnz	r1, 800dca6 <_realloc_r+0x16>
 800dc9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dca0:	4611      	mov	r1, r2
 800dca2:	f7ff b977 	b.w	800cf94 <_malloc_r>
 800dca6:	b92a      	cbnz	r2, 800dcb4 <_realloc_r+0x24>
 800dca8:	f7ff f900 	bl	800ceac <_free_r>
 800dcac:	4625      	mov	r5, r4
 800dcae:	4628      	mov	r0, r5
 800dcb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcb4:	f000 f841 	bl	800dd3a <_malloc_usable_size_r>
 800dcb8:	4284      	cmp	r4, r0
 800dcba:	4607      	mov	r7, r0
 800dcbc:	d802      	bhi.n	800dcc4 <_realloc_r+0x34>
 800dcbe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dcc2:	d812      	bhi.n	800dcea <_realloc_r+0x5a>
 800dcc4:	4621      	mov	r1, r4
 800dcc6:	4640      	mov	r0, r8
 800dcc8:	f7ff f964 	bl	800cf94 <_malloc_r>
 800dccc:	4605      	mov	r5, r0
 800dcce:	2800      	cmp	r0, #0
 800dcd0:	d0ed      	beq.n	800dcae <_realloc_r+0x1e>
 800dcd2:	42bc      	cmp	r4, r7
 800dcd4:	4622      	mov	r2, r4
 800dcd6:	4631      	mov	r1, r6
 800dcd8:	bf28      	it	cs
 800dcda:	463a      	movcs	r2, r7
 800dcdc:	f7fe fa5e 	bl	800c19c <memcpy>
 800dce0:	4631      	mov	r1, r6
 800dce2:	4640      	mov	r0, r8
 800dce4:	f7ff f8e2 	bl	800ceac <_free_r>
 800dce8:	e7e1      	b.n	800dcae <_realloc_r+0x1e>
 800dcea:	4635      	mov	r5, r6
 800dcec:	e7df      	b.n	800dcae <_realloc_r+0x1e>

0800dcee <__ascii_wctomb>:
 800dcee:	b149      	cbz	r1, 800dd04 <__ascii_wctomb+0x16>
 800dcf0:	2aff      	cmp	r2, #255	; 0xff
 800dcf2:	bf85      	ittet	hi
 800dcf4:	238a      	movhi	r3, #138	; 0x8a
 800dcf6:	6003      	strhi	r3, [r0, #0]
 800dcf8:	700a      	strbls	r2, [r1, #0]
 800dcfa:	f04f 30ff 	movhi.w	r0, #4294967295
 800dcfe:	bf98      	it	ls
 800dd00:	2001      	movls	r0, #1
 800dd02:	4770      	bx	lr
 800dd04:	4608      	mov	r0, r1
 800dd06:	4770      	bx	lr

0800dd08 <fiprintf>:
 800dd08:	b40e      	push	{r1, r2, r3}
 800dd0a:	b503      	push	{r0, r1, lr}
 800dd0c:	4601      	mov	r1, r0
 800dd0e:	ab03      	add	r3, sp, #12
 800dd10:	4805      	ldr	r0, [pc, #20]	; (800dd28 <fiprintf+0x20>)
 800dd12:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd16:	6800      	ldr	r0, [r0, #0]
 800dd18:	9301      	str	r3, [sp, #4]
 800dd1a:	f000 f83f 	bl	800dd9c <_vfiprintf_r>
 800dd1e:	b002      	add	sp, #8
 800dd20:	f85d eb04 	ldr.w	lr, [sp], #4
 800dd24:	b003      	add	sp, #12
 800dd26:	4770      	bx	lr
 800dd28:	20000068 	.word	0x20000068

0800dd2c <abort>:
 800dd2c:	b508      	push	{r3, lr}
 800dd2e:	2006      	movs	r0, #6
 800dd30:	f000 fa0c 	bl	800e14c <raise>
 800dd34:	2001      	movs	r0, #1
 800dd36:	f7f6 f80b 	bl	8003d50 <_exit>

0800dd3a <_malloc_usable_size_r>:
 800dd3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd3e:	1f18      	subs	r0, r3, #4
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	bfbc      	itt	lt
 800dd44:	580b      	ldrlt	r3, [r1, r0]
 800dd46:	18c0      	addlt	r0, r0, r3
 800dd48:	4770      	bx	lr

0800dd4a <__sfputc_r>:
 800dd4a:	6893      	ldr	r3, [r2, #8]
 800dd4c:	3b01      	subs	r3, #1
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	b410      	push	{r4}
 800dd52:	6093      	str	r3, [r2, #8]
 800dd54:	da08      	bge.n	800dd68 <__sfputc_r+0x1e>
 800dd56:	6994      	ldr	r4, [r2, #24]
 800dd58:	42a3      	cmp	r3, r4
 800dd5a:	db01      	blt.n	800dd60 <__sfputc_r+0x16>
 800dd5c:	290a      	cmp	r1, #10
 800dd5e:	d103      	bne.n	800dd68 <__sfputc_r+0x1e>
 800dd60:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd64:	f000 b934 	b.w	800dfd0 <__swbuf_r>
 800dd68:	6813      	ldr	r3, [r2, #0]
 800dd6a:	1c58      	adds	r0, r3, #1
 800dd6c:	6010      	str	r0, [r2, #0]
 800dd6e:	7019      	strb	r1, [r3, #0]
 800dd70:	4608      	mov	r0, r1
 800dd72:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd76:	4770      	bx	lr

0800dd78 <__sfputs_r>:
 800dd78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd7a:	4606      	mov	r6, r0
 800dd7c:	460f      	mov	r7, r1
 800dd7e:	4614      	mov	r4, r2
 800dd80:	18d5      	adds	r5, r2, r3
 800dd82:	42ac      	cmp	r4, r5
 800dd84:	d101      	bne.n	800dd8a <__sfputs_r+0x12>
 800dd86:	2000      	movs	r0, #0
 800dd88:	e007      	b.n	800dd9a <__sfputs_r+0x22>
 800dd8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd8e:	463a      	mov	r2, r7
 800dd90:	4630      	mov	r0, r6
 800dd92:	f7ff ffda 	bl	800dd4a <__sfputc_r>
 800dd96:	1c43      	adds	r3, r0, #1
 800dd98:	d1f3      	bne.n	800dd82 <__sfputs_r+0xa>
 800dd9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dd9c <_vfiprintf_r>:
 800dd9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dda0:	460d      	mov	r5, r1
 800dda2:	b09d      	sub	sp, #116	; 0x74
 800dda4:	4614      	mov	r4, r2
 800dda6:	4698      	mov	r8, r3
 800dda8:	4606      	mov	r6, r0
 800ddaa:	b118      	cbz	r0, 800ddb4 <_vfiprintf_r+0x18>
 800ddac:	6a03      	ldr	r3, [r0, #32]
 800ddae:	b90b      	cbnz	r3, 800ddb4 <_vfiprintf_r+0x18>
 800ddb0:	f7fe f8dc 	bl	800bf6c <__sinit>
 800ddb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ddb6:	07d9      	lsls	r1, r3, #31
 800ddb8:	d405      	bmi.n	800ddc6 <_vfiprintf_r+0x2a>
 800ddba:	89ab      	ldrh	r3, [r5, #12]
 800ddbc:	059a      	lsls	r2, r3, #22
 800ddbe:	d402      	bmi.n	800ddc6 <_vfiprintf_r+0x2a>
 800ddc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ddc2:	f7fe f9e9 	bl	800c198 <__retarget_lock_acquire_recursive>
 800ddc6:	89ab      	ldrh	r3, [r5, #12]
 800ddc8:	071b      	lsls	r3, r3, #28
 800ddca:	d501      	bpl.n	800ddd0 <_vfiprintf_r+0x34>
 800ddcc:	692b      	ldr	r3, [r5, #16]
 800ddce:	b99b      	cbnz	r3, 800ddf8 <_vfiprintf_r+0x5c>
 800ddd0:	4629      	mov	r1, r5
 800ddd2:	4630      	mov	r0, r6
 800ddd4:	f000 f93a 	bl	800e04c <__swsetup_r>
 800ddd8:	b170      	cbz	r0, 800ddf8 <_vfiprintf_r+0x5c>
 800ddda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dddc:	07dc      	lsls	r4, r3, #31
 800ddde:	d504      	bpl.n	800ddea <_vfiprintf_r+0x4e>
 800dde0:	f04f 30ff 	mov.w	r0, #4294967295
 800dde4:	b01d      	add	sp, #116	; 0x74
 800dde6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddea:	89ab      	ldrh	r3, [r5, #12]
 800ddec:	0598      	lsls	r0, r3, #22
 800ddee:	d4f7      	bmi.n	800dde0 <_vfiprintf_r+0x44>
 800ddf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ddf2:	f7fe f9d2 	bl	800c19a <__retarget_lock_release_recursive>
 800ddf6:	e7f3      	b.n	800dde0 <_vfiprintf_r+0x44>
 800ddf8:	2300      	movs	r3, #0
 800ddfa:	9309      	str	r3, [sp, #36]	; 0x24
 800ddfc:	2320      	movs	r3, #32
 800ddfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800de02:	f8cd 800c 	str.w	r8, [sp, #12]
 800de06:	2330      	movs	r3, #48	; 0x30
 800de08:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800dfbc <_vfiprintf_r+0x220>
 800de0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800de10:	f04f 0901 	mov.w	r9, #1
 800de14:	4623      	mov	r3, r4
 800de16:	469a      	mov	sl, r3
 800de18:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de1c:	b10a      	cbz	r2, 800de22 <_vfiprintf_r+0x86>
 800de1e:	2a25      	cmp	r2, #37	; 0x25
 800de20:	d1f9      	bne.n	800de16 <_vfiprintf_r+0x7a>
 800de22:	ebba 0b04 	subs.w	fp, sl, r4
 800de26:	d00b      	beq.n	800de40 <_vfiprintf_r+0xa4>
 800de28:	465b      	mov	r3, fp
 800de2a:	4622      	mov	r2, r4
 800de2c:	4629      	mov	r1, r5
 800de2e:	4630      	mov	r0, r6
 800de30:	f7ff ffa2 	bl	800dd78 <__sfputs_r>
 800de34:	3001      	adds	r0, #1
 800de36:	f000 80a9 	beq.w	800df8c <_vfiprintf_r+0x1f0>
 800de3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de3c:	445a      	add	r2, fp
 800de3e:	9209      	str	r2, [sp, #36]	; 0x24
 800de40:	f89a 3000 	ldrb.w	r3, [sl]
 800de44:	2b00      	cmp	r3, #0
 800de46:	f000 80a1 	beq.w	800df8c <_vfiprintf_r+0x1f0>
 800de4a:	2300      	movs	r3, #0
 800de4c:	f04f 32ff 	mov.w	r2, #4294967295
 800de50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800de54:	f10a 0a01 	add.w	sl, sl, #1
 800de58:	9304      	str	r3, [sp, #16]
 800de5a:	9307      	str	r3, [sp, #28]
 800de5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800de60:	931a      	str	r3, [sp, #104]	; 0x68
 800de62:	4654      	mov	r4, sl
 800de64:	2205      	movs	r2, #5
 800de66:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de6a:	4854      	ldr	r0, [pc, #336]	; (800dfbc <_vfiprintf_r+0x220>)
 800de6c:	f7f2 f9c0 	bl	80001f0 <memchr>
 800de70:	9a04      	ldr	r2, [sp, #16]
 800de72:	b9d8      	cbnz	r0, 800deac <_vfiprintf_r+0x110>
 800de74:	06d1      	lsls	r1, r2, #27
 800de76:	bf44      	itt	mi
 800de78:	2320      	movmi	r3, #32
 800de7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de7e:	0713      	lsls	r3, r2, #28
 800de80:	bf44      	itt	mi
 800de82:	232b      	movmi	r3, #43	; 0x2b
 800de84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de88:	f89a 3000 	ldrb.w	r3, [sl]
 800de8c:	2b2a      	cmp	r3, #42	; 0x2a
 800de8e:	d015      	beq.n	800debc <_vfiprintf_r+0x120>
 800de90:	9a07      	ldr	r2, [sp, #28]
 800de92:	4654      	mov	r4, sl
 800de94:	2000      	movs	r0, #0
 800de96:	f04f 0c0a 	mov.w	ip, #10
 800de9a:	4621      	mov	r1, r4
 800de9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dea0:	3b30      	subs	r3, #48	; 0x30
 800dea2:	2b09      	cmp	r3, #9
 800dea4:	d94d      	bls.n	800df42 <_vfiprintf_r+0x1a6>
 800dea6:	b1b0      	cbz	r0, 800ded6 <_vfiprintf_r+0x13a>
 800dea8:	9207      	str	r2, [sp, #28]
 800deaa:	e014      	b.n	800ded6 <_vfiprintf_r+0x13a>
 800deac:	eba0 0308 	sub.w	r3, r0, r8
 800deb0:	fa09 f303 	lsl.w	r3, r9, r3
 800deb4:	4313      	orrs	r3, r2
 800deb6:	9304      	str	r3, [sp, #16]
 800deb8:	46a2      	mov	sl, r4
 800deba:	e7d2      	b.n	800de62 <_vfiprintf_r+0xc6>
 800debc:	9b03      	ldr	r3, [sp, #12]
 800debe:	1d19      	adds	r1, r3, #4
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	9103      	str	r1, [sp, #12]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	bfbb      	ittet	lt
 800dec8:	425b      	neglt	r3, r3
 800deca:	f042 0202 	orrlt.w	r2, r2, #2
 800dece:	9307      	strge	r3, [sp, #28]
 800ded0:	9307      	strlt	r3, [sp, #28]
 800ded2:	bfb8      	it	lt
 800ded4:	9204      	strlt	r2, [sp, #16]
 800ded6:	7823      	ldrb	r3, [r4, #0]
 800ded8:	2b2e      	cmp	r3, #46	; 0x2e
 800deda:	d10c      	bne.n	800def6 <_vfiprintf_r+0x15a>
 800dedc:	7863      	ldrb	r3, [r4, #1]
 800dede:	2b2a      	cmp	r3, #42	; 0x2a
 800dee0:	d134      	bne.n	800df4c <_vfiprintf_r+0x1b0>
 800dee2:	9b03      	ldr	r3, [sp, #12]
 800dee4:	1d1a      	adds	r2, r3, #4
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	9203      	str	r2, [sp, #12]
 800deea:	2b00      	cmp	r3, #0
 800deec:	bfb8      	it	lt
 800deee:	f04f 33ff 	movlt.w	r3, #4294967295
 800def2:	3402      	adds	r4, #2
 800def4:	9305      	str	r3, [sp, #20]
 800def6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800dfcc <_vfiprintf_r+0x230>
 800defa:	7821      	ldrb	r1, [r4, #0]
 800defc:	2203      	movs	r2, #3
 800defe:	4650      	mov	r0, sl
 800df00:	f7f2 f976 	bl	80001f0 <memchr>
 800df04:	b138      	cbz	r0, 800df16 <_vfiprintf_r+0x17a>
 800df06:	9b04      	ldr	r3, [sp, #16]
 800df08:	eba0 000a 	sub.w	r0, r0, sl
 800df0c:	2240      	movs	r2, #64	; 0x40
 800df0e:	4082      	lsls	r2, r0
 800df10:	4313      	orrs	r3, r2
 800df12:	3401      	adds	r4, #1
 800df14:	9304      	str	r3, [sp, #16]
 800df16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df1a:	4829      	ldr	r0, [pc, #164]	; (800dfc0 <_vfiprintf_r+0x224>)
 800df1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800df20:	2206      	movs	r2, #6
 800df22:	f7f2 f965 	bl	80001f0 <memchr>
 800df26:	2800      	cmp	r0, #0
 800df28:	d03f      	beq.n	800dfaa <_vfiprintf_r+0x20e>
 800df2a:	4b26      	ldr	r3, [pc, #152]	; (800dfc4 <_vfiprintf_r+0x228>)
 800df2c:	bb1b      	cbnz	r3, 800df76 <_vfiprintf_r+0x1da>
 800df2e:	9b03      	ldr	r3, [sp, #12]
 800df30:	3307      	adds	r3, #7
 800df32:	f023 0307 	bic.w	r3, r3, #7
 800df36:	3308      	adds	r3, #8
 800df38:	9303      	str	r3, [sp, #12]
 800df3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df3c:	443b      	add	r3, r7
 800df3e:	9309      	str	r3, [sp, #36]	; 0x24
 800df40:	e768      	b.n	800de14 <_vfiprintf_r+0x78>
 800df42:	fb0c 3202 	mla	r2, ip, r2, r3
 800df46:	460c      	mov	r4, r1
 800df48:	2001      	movs	r0, #1
 800df4a:	e7a6      	b.n	800de9a <_vfiprintf_r+0xfe>
 800df4c:	2300      	movs	r3, #0
 800df4e:	3401      	adds	r4, #1
 800df50:	9305      	str	r3, [sp, #20]
 800df52:	4619      	mov	r1, r3
 800df54:	f04f 0c0a 	mov.w	ip, #10
 800df58:	4620      	mov	r0, r4
 800df5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df5e:	3a30      	subs	r2, #48	; 0x30
 800df60:	2a09      	cmp	r2, #9
 800df62:	d903      	bls.n	800df6c <_vfiprintf_r+0x1d0>
 800df64:	2b00      	cmp	r3, #0
 800df66:	d0c6      	beq.n	800def6 <_vfiprintf_r+0x15a>
 800df68:	9105      	str	r1, [sp, #20]
 800df6a:	e7c4      	b.n	800def6 <_vfiprintf_r+0x15a>
 800df6c:	fb0c 2101 	mla	r1, ip, r1, r2
 800df70:	4604      	mov	r4, r0
 800df72:	2301      	movs	r3, #1
 800df74:	e7f0      	b.n	800df58 <_vfiprintf_r+0x1bc>
 800df76:	ab03      	add	r3, sp, #12
 800df78:	9300      	str	r3, [sp, #0]
 800df7a:	462a      	mov	r2, r5
 800df7c:	4b12      	ldr	r3, [pc, #72]	; (800dfc8 <_vfiprintf_r+0x22c>)
 800df7e:	a904      	add	r1, sp, #16
 800df80:	4630      	mov	r0, r6
 800df82:	f7fd fbb3 	bl	800b6ec <_printf_float>
 800df86:	4607      	mov	r7, r0
 800df88:	1c78      	adds	r0, r7, #1
 800df8a:	d1d6      	bne.n	800df3a <_vfiprintf_r+0x19e>
 800df8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800df8e:	07d9      	lsls	r1, r3, #31
 800df90:	d405      	bmi.n	800df9e <_vfiprintf_r+0x202>
 800df92:	89ab      	ldrh	r3, [r5, #12]
 800df94:	059a      	lsls	r2, r3, #22
 800df96:	d402      	bmi.n	800df9e <_vfiprintf_r+0x202>
 800df98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800df9a:	f7fe f8fe 	bl	800c19a <__retarget_lock_release_recursive>
 800df9e:	89ab      	ldrh	r3, [r5, #12]
 800dfa0:	065b      	lsls	r3, r3, #25
 800dfa2:	f53f af1d 	bmi.w	800dde0 <_vfiprintf_r+0x44>
 800dfa6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dfa8:	e71c      	b.n	800dde4 <_vfiprintf_r+0x48>
 800dfaa:	ab03      	add	r3, sp, #12
 800dfac:	9300      	str	r3, [sp, #0]
 800dfae:	462a      	mov	r2, r5
 800dfb0:	4b05      	ldr	r3, [pc, #20]	; (800dfc8 <_vfiprintf_r+0x22c>)
 800dfb2:	a904      	add	r1, sp, #16
 800dfb4:	4630      	mov	r0, r6
 800dfb6:	f7fd fe3d 	bl	800bc34 <_printf_i>
 800dfba:	e7e4      	b.n	800df86 <_vfiprintf_r+0x1ea>
 800dfbc:	0800f744 	.word	0x0800f744
 800dfc0:	0800f74e 	.word	0x0800f74e
 800dfc4:	0800b6ed 	.word	0x0800b6ed
 800dfc8:	0800dd79 	.word	0x0800dd79
 800dfcc:	0800f74a 	.word	0x0800f74a

0800dfd0 <__swbuf_r>:
 800dfd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfd2:	460e      	mov	r6, r1
 800dfd4:	4614      	mov	r4, r2
 800dfd6:	4605      	mov	r5, r0
 800dfd8:	b118      	cbz	r0, 800dfe2 <__swbuf_r+0x12>
 800dfda:	6a03      	ldr	r3, [r0, #32]
 800dfdc:	b90b      	cbnz	r3, 800dfe2 <__swbuf_r+0x12>
 800dfde:	f7fd ffc5 	bl	800bf6c <__sinit>
 800dfe2:	69a3      	ldr	r3, [r4, #24]
 800dfe4:	60a3      	str	r3, [r4, #8]
 800dfe6:	89a3      	ldrh	r3, [r4, #12]
 800dfe8:	071a      	lsls	r2, r3, #28
 800dfea:	d525      	bpl.n	800e038 <__swbuf_r+0x68>
 800dfec:	6923      	ldr	r3, [r4, #16]
 800dfee:	b31b      	cbz	r3, 800e038 <__swbuf_r+0x68>
 800dff0:	6823      	ldr	r3, [r4, #0]
 800dff2:	6922      	ldr	r2, [r4, #16]
 800dff4:	1a98      	subs	r0, r3, r2
 800dff6:	6963      	ldr	r3, [r4, #20]
 800dff8:	b2f6      	uxtb	r6, r6
 800dffa:	4283      	cmp	r3, r0
 800dffc:	4637      	mov	r7, r6
 800dffe:	dc04      	bgt.n	800e00a <__swbuf_r+0x3a>
 800e000:	4621      	mov	r1, r4
 800e002:	4628      	mov	r0, r5
 800e004:	f7ff fdac 	bl	800db60 <_fflush_r>
 800e008:	b9e0      	cbnz	r0, 800e044 <__swbuf_r+0x74>
 800e00a:	68a3      	ldr	r3, [r4, #8]
 800e00c:	3b01      	subs	r3, #1
 800e00e:	60a3      	str	r3, [r4, #8]
 800e010:	6823      	ldr	r3, [r4, #0]
 800e012:	1c5a      	adds	r2, r3, #1
 800e014:	6022      	str	r2, [r4, #0]
 800e016:	701e      	strb	r6, [r3, #0]
 800e018:	6962      	ldr	r2, [r4, #20]
 800e01a:	1c43      	adds	r3, r0, #1
 800e01c:	429a      	cmp	r2, r3
 800e01e:	d004      	beq.n	800e02a <__swbuf_r+0x5a>
 800e020:	89a3      	ldrh	r3, [r4, #12]
 800e022:	07db      	lsls	r3, r3, #31
 800e024:	d506      	bpl.n	800e034 <__swbuf_r+0x64>
 800e026:	2e0a      	cmp	r6, #10
 800e028:	d104      	bne.n	800e034 <__swbuf_r+0x64>
 800e02a:	4621      	mov	r1, r4
 800e02c:	4628      	mov	r0, r5
 800e02e:	f7ff fd97 	bl	800db60 <_fflush_r>
 800e032:	b938      	cbnz	r0, 800e044 <__swbuf_r+0x74>
 800e034:	4638      	mov	r0, r7
 800e036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e038:	4621      	mov	r1, r4
 800e03a:	4628      	mov	r0, r5
 800e03c:	f000 f806 	bl	800e04c <__swsetup_r>
 800e040:	2800      	cmp	r0, #0
 800e042:	d0d5      	beq.n	800dff0 <__swbuf_r+0x20>
 800e044:	f04f 37ff 	mov.w	r7, #4294967295
 800e048:	e7f4      	b.n	800e034 <__swbuf_r+0x64>
	...

0800e04c <__swsetup_r>:
 800e04c:	b538      	push	{r3, r4, r5, lr}
 800e04e:	4b2a      	ldr	r3, [pc, #168]	; (800e0f8 <__swsetup_r+0xac>)
 800e050:	4605      	mov	r5, r0
 800e052:	6818      	ldr	r0, [r3, #0]
 800e054:	460c      	mov	r4, r1
 800e056:	b118      	cbz	r0, 800e060 <__swsetup_r+0x14>
 800e058:	6a03      	ldr	r3, [r0, #32]
 800e05a:	b90b      	cbnz	r3, 800e060 <__swsetup_r+0x14>
 800e05c:	f7fd ff86 	bl	800bf6c <__sinit>
 800e060:	89a3      	ldrh	r3, [r4, #12]
 800e062:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e066:	0718      	lsls	r0, r3, #28
 800e068:	d422      	bmi.n	800e0b0 <__swsetup_r+0x64>
 800e06a:	06d9      	lsls	r1, r3, #27
 800e06c:	d407      	bmi.n	800e07e <__swsetup_r+0x32>
 800e06e:	2309      	movs	r3, #9
 800e070:	602b      	str	r3, [r5, #0]
 800e072:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e076:	81a3      	strh	r3, [r4, #12]
 800e078:	f04f 30ff 	mov.w	r0, #4294967295
 800e07c:	e034      	b.n	800e0e8 <__swsetup_r+0x9c>
 800e07e:	0758      	lsls	r0, r3, #29
 800e080:	d512      	bpl.n	800e0a8 <__swsetup_r+0x5c>
 800e082:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e084:	b141      	cbz	r1, 800e098 <__swsetup_r+0x4c>
 800e086:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e08a:	4299      	cmp	r1, r3
 800e08c:	d002      	beq.n	800e094 <__swsetup_r+0x48>
 800e08e:	4628      	mov	r0, r5
 800e090:	f7fe ff0c 	bl	800ceac <_free_r>
 800e094:	2300      	movs	r3, #0
 800e096:	6363      	str	r3, [r4, #52]	; 0x34
 800e098:	89a3      	ldrh	r3, [r4, #12]
 800e09a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e09e:	81a3      	strh	r3, [r4, #12]
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	6063      	str	r3, [r4, #4]
 800e0a4:	6923      	ldr	r3, [r4, #16]
 800e0a6:	6023      	str	r3, [r4, #0]
 800e0a8:	89a3      	ldrh	r3, [r4, #12]
 800e0aa:	f043 0308 	orr.w	r3, r3, #8
 800e0ae:	81a3      	strh	r3, [r4, #12]
 800e0b0:	6923      	ldr	r3, [r4, #16]
 800e0b2:	b94b      	cbnz	r3, 800e0c8 <__swsetup_r+0x7c>
 800e0b4:	89a3      	ldrh	r3, [r4, #12]
 800e0b6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e0ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e0be:	d003      	beq.n	800e0c8 <__swsetup_r+0x7c>
 800e0c0:	4621      	mov	r1, r4
 800e0c2:	4628      	mov	r0, r5
 800e0c4:	f000 f884 	bl	800e1d0 <__smakebuf_r>
 800e0c8:	89a0      	ldrh	r0, [r4, #12]
 800e0ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e0ce:	f010 0301 	ands.w	r3, r0, #1
 800e0d2:	d00a      	beq.n	800e0ea <__swsetup_r+0x9e>
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	60a3      	str	r3, [r4, #8]
 800e0d8:	6963      	ldr	r3, [r4, #20]
 800e0da:	425b      	negs	r3, r3
 800e0dc:	61a3      	str	r3, [r4, #24]
 800e0de:	6923      	ldr	r3, [r4, #16]
 800e0e0:	b943      	cbnz	r3, 800e0f4 <__swsetup_r+0xa8>
 800e0e2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e0e6:	d1c4      	bne.n	800e072 <__swsetup_r+0x26>
 800e0e8:	bd38      	pop	{r3, r4, r5, pc}
 800e0ea:	0781      	lsls	r1, r0, #30
 800e0ec:	bf58      	it	pl
 800e0ee:	6963      	ldrpl	r3, [r4, #20]
 800e0f0:	60a3      	str	r3, [r4, #8]
 800e0f2:	e7f4      	b.n	800e0de <__swsetup_r+0x92>
 800e0f4:	2000      	movs	r0, #0
 800e0f6:	e7f7      	b.n	800e0e8 <__swsetup_r+0x9c>
 800e0f8:	20000068 	.word	0x20000068

0800e0fc <_raise_r>:
 800e0fc:	291f      	cmp	r1, #31
 800e0fe:	b538      	push	{r3, r4, r5, lr}
 800e100:	4604      	mov	r4, r0
 800e102:	460d      	mov	r5, r1
 800e104:	d904      	bls.n	800e110 <_raise_r+0x14>
 800e106:	2316      	movs	r3, #22
 800e108:	6003      	str	r3, [r0, #0]
 800e10a:	f04f 30ff 	mov.w	r0, #4294967295
 800e10e:	bd38      	pop	{r3, r4, r5, pc}
 800e110:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e112:	b112      	cbz	r2, 800e11a <_raise_r+0x1e>
 800e114:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e118:	b94b      	cbnz	r3, 800e12e <_raise_r+0x32>
 800e11a:	4620      	mov	r0, r4
 800e11c:	f000 f830 	bl	800e180 <_getpid_r>
 800e120:	462a      	mov	r2, r5
 800e122:	4601      	mov	r1, r0
 800e124:	4620      	mov	r0, r4
 800e126:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e12a:	f000 b817 	b.w	800e15c <_kill_r>
 800e12e:	2b01      	cmp	r3, #1
 800e130:	d00a      	beq.n	800e148 <_raise_r+0x4c>
 800e132:	1c59      	adds	r1, r3, #1
 800e134:	d103      	bne.n	800e13e <_raise_r+0x42>
 800e136:	2316      	movs	r3, #22
 800e138:	6003      	str	r3, [r0, #0]
 800e13a:	2001      	movs	r0, #1
 800e13c:	e7e7      	b.n	800e10e <_raise_r+0x12>
 800e13e:	2400      	movs	r4, #0
 800e140:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e144:	4628      	mov	r0, r5
 800e146:	4798      	blx	r3
 800e148:	2000      	movs	r0, #0
 800e14a:	e7e0      	b.n	800e10e <_raise_r+0x12>

0800e14c <raise>:
 800e14c:	4b02      	ldr	r3, [pc, #8]	; (800e158 <raise+0xc>)
 800e14e:	4601      	mov	r1, r0
 800e150:	6818      	ldr	r0, [r3, #0]
 800e152:	f7ff bfd3 	b.w	800e0fc <_raise_r>
 800e156:	bf00      	nop
 800e158:	20000068 	.word	0x20000068

0800e15c <_kill_r>:
 800e15c:	b538      	push	{r3, r4, r5, lr}
 800e15e:	4d07      	ldr	r5, [pc, #28]	; (800e17c <_kill_r+0x20>)
 800e160:	2300      	movs	r3, #0
 800e162:	4604      	mov	r4, r0
 800e164:	4608      	mov	r0, r1
 800e166:	4611      	mov	r1, r2
 800e168:	602b      	str	r3, [r5, #0]
 800e16a:	f7f5 fde1 	bl	8003d30 <_kill>
 800e16e:	1c43      	adds	r3, r0, #1
 800e170:	d102      	bne.n	800e178 <_kill_r+0x1c>
 800e172:	682b      	ldr	r3, [r5, #0]
 800e174:	b103      	cbz	r3, 800e178 <_kill_r+0x1c>
 800e176:	6023      	str	r3, [r4, #0]
 800e178:	bd38      	pop	{r3, r4, r5, pc}
 800e17a:	bf00      	nop
 800e17c:	200022a0 	.word	0x200022a0

0800e180 <_getpid_r>:
 800e180:	f7f5 bdce 	b.w	8003d20 <_getpid>

0800e184 <__swhatbuf_r>:
 800e184:	b570      	push	{r4, r5, r6, lr}
 800e186:	460c      	mov	r4, r1
 800e188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e18c:	2900      	cmp	r1, #0
 800e18e:	b096      	sub	sp, #88	; 0x58
 800e190:	4615      	mov	r5, r2
 800e192:	461e      	mov	r6, r3
 800e194:	da0d      	bge.n	800e1b2 <__swhatbuf_r+0x2e>
 800e196:	89a3      	ldrh	r3, [r4, #12]
 800e198:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e19c:	f04f 0100 	mov.w	r1, #0
 800e1a0:	bf0c      	ite	eq
 800e1a2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e1a6:	2340      	movne	r3, #64	; 0x40
 800e1a8:	2000      	movs	r0, #0
 800e1aa:	6031      	str	r1, [r6, #0]
 800e1ac:	602b      	str	r3, [r5, #0]
 800e1ae:	b016      	add	sp, #88	; 0x58
 800e1b0:	bd70      	pop	{r4, r5, r6, pc}
 800e1b2:	466a      	mov	r2, sp
 800e1b4:	f000 f848 	bl	800e248 <_fstat_r>
 800e1b8:	2800      	cmp	r0, #0
 800e1ba:	dbec      	blt.n	800e196 <__swhatbuf_r+0x12>
 800e1bc:	9901      	ldr	r1, [sp, #4]
 800e1be:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e1c2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e1c6:	4259      	negs	r1, r3
 800e1c8:	4159      	adcs	r1, r3
 800e1ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e1ce:	e7eb      	b.n	800e1a8 <__swhatbuf_r+0x24>

0800e1d0 <__smakebuf_r>:
 800e1d0:	898b      	ldrh	r3, [r1, #12]
 800e1d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e1d4:	079d      	lsls	r5, r3, #30
 800e1d6:	4606      	mov	r6, r0
 800e1d8:	460c      	mov	r4, r1
 800e1da:	d507      	bpl.n	800e1ec <__smakebuf_r+0x1c>
 800e1dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e1e0:	6023      	str	r3, [r4, #0]
 800e1e2:	6123      	str	r3, [r4, #16]
 800e1e4:	2301      	movs	r3, #1
 800e1e6:	6163      	str	r3, [r4, #20]
 800e1e8:	b002      	add	sp, #8
 800e1ea:	bd70      	pop	{r4, r5, r6, pc}
 800e1ec:	ab01      	add	r3, sp, #4
 800e1ee:	466a      	mov	r2, sp
 800e1f0:	f7ff ffc8 	bl	800e184 <__swhatbuf_r>
 800e1f4:	9900      	ldr	r1, [sp, #0]
 800e1f6:	4605      	mov	r5, r0
 800e1f8:	4630      	mov	r0, r6
 800e1fa:	f7fe fecb 	bl	800cf94 <_malloc_r>
 800e1fe:	b948      	cbnz	r0, 800e214 <__smakebuf_r+0x44>
 800e200:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e204:	059a      	lsls	r2, r3, #22
 800e206:	d4ef      	bmi.n	800e1e8 <__smakebuf_r+0x18>
 800e208:	f023 0303 	bic.w	r3, r3, #3
 800e20c:	f043 0302 	orr.w	r3, r3, #2
 800e210:	81a3      	strh	r3, [r4, #12]
 800e212:	e7e3      	b.n	800e1dc <__smakebuf_r+0xc>
 800e214:	89a3      	ldrh	r3, [r4, #12]
 800e216:	6020      	str	r0, [r4, #0]
 800e218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e21c:	81a3      	strh	r3, [r4, #12]
 800e21e:	9b00      	ldr	r3, [sp, #0]
 800e220:	6163      	str	r3, [r4, #20]
 800e222:	9b01      	ldr	r3, [sp, #4]
 800e224:	6120      	str	r0, [r4, #16]
 800e226:	b15b      	cbz	r3, 800e240 <__smakebuf_r+0x70>
 800e228:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e22c:	4630      	mov	r0, r6
 800e22e:	f000 f81d 	bl	800e26c <_isatty_r>
 800e232:	b128      	cbz	r0, 800e240 <__smakebuf_r+0x70>
 800e234:	89a3      	ldrh	r3, [r4, #12]
 800e236:	f023 0303 	bic.w	r3, r3, #3
 800e23a:	f043 0301 	orr.w	r3, r3, #1
 800e23e:	81a3      	strh	r3, [r4, #12]
 800e240:	89a3      	ldrh	r3, [r4, #12]
 800e242:	431d      	orrs	r5, r3
 800e244:	81a5      	strh	r5, [r4, #12]
 800e246:	e7cf      	b.n	800e1e8 <__smakebuf_r+0x18>

0800e248 <_fstat_r>:
 800e248:	b538      	push	{r3, r4, r5, lr}
 800e24a:	4d07      	ldr	r5, [pc, #28]	; (800e268 <_fstat_r+0x20>)
 800e24c:	2300      	movs	r3, #0
 800e24e:	4604      	mov	r4, r0
 800e250:	4608      	mov	r0, r1
 800e252:	4611      	mov	r1, r2
 800e254:	602b      	str	r3, [r5, #0]
 800e256:	f7f5 fdca 	bl	8003dee <_fstat>
 800e25a:	1c43      	adds	r3, r0, #1
 800e25c:	d102      	bne.n	800e264 <_fstat_r+0x1c>
 800e25e:	682b      	ldr	r3, [r5, #0]
 800e260:	b103      	cbz	r3, 800e264 <_fstat_r+0x1c>
 800e262:	6023      	str	r3, [r4, #0]
 800e264:	bd38      	pop	{r3, r4, r5, pc}
 800e266:	bf00      	nop
 800e268:	200022a0 	.word	0x200022a0

0800e26c <_isatty_r>:
 800e26c:	b538      	push	{r3, r4, r5, lr}
 800e26e:	4d06      	ldr	r5, [pc, #24]	; (800e288 <_isatty_r+0x1c>)
 800e270:	2300      	movs	r3, #0
 800e272:	4604      	mov	r4, r0
 800e274:	4608      	mov	r0, r1
 800e276:	602b      	str	r3, [r5, #0]
 800e278:	f7f5 fdc9 	bl	8003e0e <_isatty>
 800e27c:	1c43      	adds	r3, r0, #1
 800e27e:	d102      	bne.n	800e286 <_isatty_r+0x1a>
 800e280:	682b      	ldr	r3, [r5, #0]
 800e282:	b103      	cbz	r3, 800e286 <_isatty_r+0x1a>
 800e284:	6023      	str	r3, [r4, #0]
 800e286:	bd38      	pop	{r3, r4, r5, pc}
 800e288:	200022a0 	.word	0x200022a0

0800e28c <pow>:
 800e28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e28e:	ed2d 8b02 	vpush	{d8}
 800e292:	eeb0 8a40 	vmov.f32	s16, s0
 800e296:	eef0 8a60 	vmov.f32	s17, s1
 800e29a:	ec55 4b11 	vmov	r4, r5, d1
 800e29e:	f000 f873 	bl	800e388 <__ieee754_pow>
 800e2a2:	4622      	mov	r2, r4
 800e2a4:	462b      	mov	r3, r5
 800e2a6:	4620      	mov	r0, r4
 800e2a8:	4629      	mov	r1, r5
 800e2aa:	ec57 6b10 	vmov	r6, r7, d0
 800e2ae:	f7f2 fc4d 	bl	8000b4c <__aeabi_dcmpun>
 800e2b2:	2800      	cmp	r0, #0
 800e2b4:	d13b      	bne.n	800e32e <pow+0xa2>
 800e2b6:	ec51 0b18 	vmov	r0, r1, d8
 800e2ba:	2200      	movs	r2, #0
 800e2bc:	2300      	movs	r3, #0
 800e2be:	f7f2 fc13 	bl	8000ae8 <__aeabi_dcmpeq>
 800e2c2:	b1b8      	cbz	r0, 800e2f4 <pow+0x68>
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	4620      	mov	r0, r4
 800e2ca:	4629      	mov	r1, r5
 800e2cc:	f7f2 fc0c 	bl	8000ae8 <__aeabi_dcmpeq>
 800e2d0:	2800      	cmp	r0, #0
 800e2d2:	d146      	bne.n	800e362 <pow+0xd6>
 800e2d4:	ec45 4b10 	vmov	d0, r4, r5
 800e2d8:	f000 f848 	bl	800e36c <finite>
 800e2dc:	b338      	cbz	r0, 800e32e <pow+0xa2>
 800e2de:	2200      	movs	r2, #0
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	4620      	mov	r0, r4
 800e2e4:	4629      	mov	r1, r5
 800e2e6:	f7f2 fc09 	bl	8000afc <__aeabi_dcmplt>
 800e2ea:	b300      	cbz	r0, 800e32e <pow+0xa2>
 800e2ec:	f7fd ff2a 	bl	800c144 <__errno>
 800e2f0:	2322      	movs	r3, #34	; 0x22
 800e2f2:	e01b      	b.n	800e32c <pow+0xa0>
 800e2f4:	ec47 6b10 	vmov	d0, r6, r7
 800e2f8:	f000 f838 	bl	800e36c <finite>
 800e2fc:	b9e0      	cbnz	r0, 800e338 <pow+0xac>
 800e2fe:	eeb0 0a48 	vmov.f32	s0, s16
 800e302:	eef0 0a68 	vmov.f32	s1, s17
 800e306:	f000 f831 	bl	800e36c <finite>
 800e30a:	b1a8      	cbz	r0, 800e338 <pow+0xac>
 800e30c:	ec45 4b10 	vmov	d0, r4, r5
 800e310:	f000 f82c 	bl	800e36c <finite>
 800e314:	b180      	cbz	r0, 800e338 <pow+0xac>
 800e316:	4632      	mov	r2, r6
 800e318:	463b      	mov	r3, r7
 800e31a:	4630      	mov	r0, r6
 800e31c:	4639      	mov	r1, r7
 800e31e:	f7f2 fc15 	bl	8000b4c <__aeabi_dcmpun>
 800e322:	2800      	cmp	r0, #0
 800e324:	d0e2      	beq.n	800e2ec <pow+0x60>
 800e326:	f7fd ff0d 	bl	800c144 <__errno>
 800e32a:	2321      	movs	r3, #33	; 0x21
 800e32c:	6003      	str	r3, [r0, #0]
 800e32e:	ecbd 8b02 	vpop	{d8}
 800e332:	ec47 6b10 	vmov	d0, r6, r7
 800e336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e338:	2200      	movs	r2, #0
 800e33a:	2300      	movs	r3, #0
 800e33c:	4630      	mov	r0, r6
 800e33e:	4639      	mov	r1, r7
 800e340:	f7f2 fbd2 	bl	8000ae8 <__aeabi_dcmpeq>
 800e344:	2800      	cmp	r0, #0
 800e346:	d0f2      	beq.n	800e32e <pow+0xa2>
 800e348:	eeb0 0a48 	vmov.f32	s0, s16
 800e34c:	eef0 0a68 	vmov.f32	s1, s17
 800e350:	f000 f80c 	bl	800e36c <finite>
 800e354:	2800      	cmp	r0, #0
 800e356:	d0ea      	beq.n	800e32e <pow+0xa2>
 800e358:	ec45 4b10 	vmov	d0, r4, r5
 800e35c:	f000 f806 	bl	800e36c <finite>
 800e360:	e7c3      	b.n	800e2ea <pow+0x5e>
 800e362:	4f01      	ldr	r7, [pc, #4]	; (800e368 <pow+0xdc>)
 800e364:	2600      	movs	r6, #0
 800e366:	e7e2      	b.n	800e32e <pow+0xa2>
 800e368:	3ff00000 	.word	0x3ff00000

0800e36c <finite>:
 800e36c:	b082      	sub	sp, #8
 800e36e:	ed8d 0b00 	vstr	d0, [sp]
 800e372:	9801      	ldr	r0, [sp, #4]
 800e374:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800e378:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e37c:	0fc0      	lsrs	r0, r0, #31
 800e37e:	b002      	add	sp, #8
 800e380:	4770      	bx	lr
 800e382:	0000      	movs	r0, r0
 800e384:	0000      	movs	r0, r0
	...

0800e388 <__ieee754_pow>:
 800e388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e38c:	ed2d 8b06 	vpush	{d8-d10}
 800e390:	b089      	sub	sp, #36	; 0x24
 800e392:	ed8d 1b00 	vstr	d1, [sp]
 800e396:	e9dd 2900 	ldrd	r2, r9, [sp]
 800e39a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800e39e:	ea58 0102 	orrs.w	r1, r8, r2
 800e3a2:	ec57 6b10 	vmov	r6, r7, d0
 800e3a6:	d115      	bne.n	800e3d4 <__ieee754_pow+0x4c>
 800e3a8:	19b3      	adds	r3, r6, r6
 800e3aa:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800e3ae:	4152      	adcs	r2, r2
 800e3b0:	4299      	cmp	r1, r3
 800e3b2:	4b89      	ldr	r3, [pc, #548]	; (800e5d8 <__ieee754_pow+0x250>)
 800e3b4:	4193      	sbcs	r3, r2
 800e3b6:	f080 84d1 	bcs.w	800ed5c <__ieee754_pow+0x9d4>
 800e3ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e3be:	4630      	mov	r0, r6
 800e3c0:	4639      	mov	r1, r7
 800e3c2:	f7f1 ff73 	bl	80002ac <__adddf3>
 800e3c6:	ec41 0b10 	vmov	d0, r0, r1
 800e3ca:	b009      	add	sp, #36	; 0x24
 800e3cc:	ecbd 8b06 	vpop	{d8-d10}
 800e3d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3d4:	4b81      	ldr	r3, [pc, #516]	; (800e5dc <__ieee754_pow+0x254>)
 800e3d6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800e3da:	429c      	cmp	r4, r3
 800e3dc:	ee10 aa10 	vmov	sl, s0
 800e3e0:	463d      	mov	r5, r7
 800e3e2:	dc06      	bgt.n	800e3f2 <__ieee754_pow+0x6a>
 800e3e4:	d101      	bne.n	800e3ea <__ieee754_pow+0x62>
 800e3e6:	2e00      	cmp	r6, #0
 800e3e8:	d1e7      	bne.n	800e3ba <__ieee754_pow+0x32>
 800e3ea:	4598      	cmp	r8, r3
 800e3ec:	dc01      	bgt.n	800e3f2 <__ieee754_pow+0x6a>
 800e3ee:	d10f      	bne.n	800e410 <__ieee754_pow+0x88>
 800e3f0:	b172      	cbz	r2, 800e410 <__ieee754_pow+0x88>
 800e3f2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800e3f6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800e3fa:	ea55 050a 	orrs.w	r5, r5, sl
 800e3fe:	d1dc      	bne.n	800e3ba <__ieee754_pow+0x32>
 800e400:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e404:	18db      	adds	r3, r3, r3
 800e406:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800e40a:	4152      	adcs	r2, r2
 800e40c:	429d      	cmp	r5, r3
 800e40e:	e7d0      	b.n	800e3b2 <__ieee754_pow+0x2a>
 800e410:	2d00      	cmp	r5, #0
 800e412:	da3b      	bge.n	800e48c <__ieee754_pow+0x104>
 800e414:	4b72      	ldr	r3, [pc, #456]	; (800e5e0 <__ieee754_pow+0x258>)
 800e416:	4598      	cmp	r8, r3
 800e418:	dc51      	bgt.n	800e4be <__ieee754_pow+0x136>
 800e41a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800e41e:	4598      	cmp	r8, r3
 800e420:	f340 84ab 	ble.w	800ed7a <__ieee754_pow+0x9f2>
 800e424:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e428:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e42c:	2b14      	cmp	r3, #20
 800e42e:	dd0f      	ble.n	800e450 <__ieee754_pow+0xc8>
 800e430:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e434:	fa22 f103 	lsr.w	r1, r2, r3
 800e438:	fa01 f303 	lsl.w	r3, r1, r3
 800e43c:	4293      	cmp	r3, r2
 800e43e:	f040 849c 	bne.w	800ed7a <__ieee754_pow+0x9f2>
 800e442:	f001 0101 	and.w	r1, r1, #1
 800e446:	f1c1 0302 	rsb	r3, r1, #2
 800e44a:	9304      	str	r3, [sp, #16]
 800e44c:	b182      	cbz	r2, 800e470 <__ieee754_pow+0xe8>
 800e44e:	e05f      	b.n	800e510 <__ieee754_pow+0x188>
 800e450:	2a00      	cmp	r2, #0
 800e452:	d15b      	bne.n	800e50c <__ieee754_pow+0x184>
 800e454:	f1c3 0314 	rsb	r3, r3, #20
 800e458:	fa48 f103 	asr.w	r1, r8, r3
 800e45c:	fa01 f303 	lsl.w	r3, r1, r3
 800e460:	4543      	cmp	r3, r8
 800e462:	f040 8487 	bne.w	800ed74 <__ieee754_pow+0x9ec>
 800e466:	f001 0101 	and.w	r1, r1, #1
 800e46a:	f1c1 0302 	rsb	r3, r1, #2
 800e46e:	9304      	str	r3, [sp, #16]
 800e470:	4b5c      	ldr	r3, [pc, #368]	; (800e5e4 <__ieee754_pow+0x25c>)
 800e472:	4598      	cmp	r8, r3
 800e474:	d132      	bne.n	800e4dc <__ieee754_pow+0x154>
 800e476:	f1b9 0f00 	cmp.w	r9, #0
 800e47a:	f280 8477 	bge.w	800ed6c <__ieee754_pow+0x9e4>
 800e47e:	4959      	ldr	r1, [pc, #356]	; (800e5e4 <__ieee754_pow+0x25c>)
 800e480:	4632      	mov	r2, r6
 800e482:	463b      	mov	r3, r7
 800e484:	2000      	movs	r0, #0
 800e486:	f7f2 f9f1 	bl	800086c <__aeabi_ddiv>
 800e48a:	e79c      	b.n	800e3c6 <__ieee754_pow+0x3e>
 800e48c:	2300      	movs	r3, #0
 800e48e:	9304      	str	r3, [sp, #16]
 800e490:	2a00      	cmp	r2, #0
 800e492:	d13d      	bne.n	800e510 <__ieee754_pow+0x188>
 800e494:	4b51      	ldr	r3, [pc, #324]	; (800e5dc <__ieee754_pow+0x254>)
 800e496:	4598      	cmp	r8, r3
 800e498:	d1ea      	bne.n	800e470 <__ieee754_pow+0xe8>
 800e49a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e49e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e4a2:	ea53 030a 	orrs.w	r3, r3, sl
 800e4a6:	f000 8459 	beq.w	800ed5c <__ieee754_pow+0x9d4>
 800e4aa:	4b4f      	ldr	r3, [pc, #316]	; (800e5e8 <__ieee754_pow+0x260>)
 800e4ac:	429c      	cmp	r4, r3
 800e4ae:	dd08      	ble.n	800e4c2 <__ieee754_pow+0x13a>
 800e4b0:	f1b9 0f00 	cmp.w	r9, #0
 800e4b4:	f2c0 8456 	blt.w	800ed64 <__ieee754_pow+0x9dc>
 800e4b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e4bc:	e783      	b.n	800e3c6 <__ieee754_pow+0x3e>
 800e4be:	2302      	movs	r3, #2
 800e4c0:	e7e5      	b.n	800e48e <__ieee754_pow+0x106>
 800e4c2:	f1b9 0f00 	cmp.w	r9, #0
 800e4c6:	f04f 0000 	mov.w	r0, #0
 800e4ca:	f04f 0100 	mov.w	r1, #0
 800e4ce:	f6bf af7a 	bge.w	800e3c6 <__ieee754_pow+0x3e>
 800e4d2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800e4d6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e4da:	e774      	b.n	800e3c6 <__ieee754_pow+0x3e>
 800e4dc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800e4e0:	d106      	bne.n	800e4f0 <__ieee754_pow+0x168>
 800e4e2:	4632      	mov	r2, r6
 800e4e4:	463b      	mov	r3, r7
 800e4e6:	4630      	mov	r0, r6
 800e4e8:	4639      	mov	r1, r7
 800e4ea:	f7f2 f895 	bl	8000618 <__aeabi_dmul>
 800e4ee:	e76a      	b.n	800e3c6 <__ieee754_pow+0x3e>
 800e4f0:	4b3e      	ldr	r3, [pc, #248]	; (800e5ec <__ieee754_pow+0x264>)
 800e4f2:	4599      	cmp	r9, r3
 800e4f4:	d10c      	bne.n	800e510 <__ieee754_pow+0x188>
 800e4f6:	2d00      	cmp	r5, #0
 800e4f8:	db0a      	blt.n	800e510 <__ieee754_pow+0x188>
 800e4fa:	ec47 6b10 	vmov	d0, r6, r7
 800e4fe:	b009      	add	sp, #36	; 0x24
 800e500:	ecbd 8b06 	vpop	{d8-d10}
 800e504:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e508:	f000 bd20 	b.w	800ef4c <__ieee754_sqrt>
 800e50c:	2300      	movs	r3, #0
 800e50e:	9304      	str	r3, [sp, #16]
 800e510:	ec47 6b10 	vmov	d0, r6, r7
 800e514:	f000 fc62 	bl	800eddc <fabs>
 800e518:	ec51 0b10 	vmov	r0, r1, d0
 800e51c:	f1ba 0f00 	cmp.w	sl, #0
 800e520:	d129      	bne.n	800e576 <__ieee754_pow+0x1ee>
 800e522:	b124      	cbz	r4, 800e52e <__ieee754_pow+0x1a6>
 800e524:	4b2f      	ldr	r3, [pc, #188]	; (800e5e4 <__ieee754_pow+0x25c>)
 800e526:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800e52a:	429a      	cmp	r2, r3
 800e52c:	d123      	bne.n	800e576 <__ieee754_pow+0x1ee>
 800e52e:	f1b9 0f00 	cmp.w	r9, #0
 800e532:	da05      	bge.n	800e540 <__ieee754_pow+0x1b8>
 800e534:	4602      	mov	r2, r0
 800e536:	460b      	mov	r3, r1
 800e538:	2000      	movs	r0, #0
 800e53a:	492a      	ldr	r1, [pc, #168]	; (800e5e4 <__ieee754_pow+0x25c>)
 800e53c:	f7f2 f996 	bl	800086c <__aeabi_ddiv>
 800e540:	2d00      	cmp	r5, #0
 800e542:	f6bf af40 	bge.w	800e3c6 <__ieee754_pow+0x3e>
 800e546:	9b04      	ldr	r3, [sp, #16]
 800e548:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e54c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e550:	431c      	orrs	r4, r3
 800e552:	d108      	bne.n	800e566 <__ieee754_pow+0x1de>
 800e554:	4602      	mov	r2, r0
 800e556:	460b      	mov	r3, r1
 800e558:	4610      	mov	r0, r2
 800e55a:	4619      	mov	r1, r3
 800e55c:	f7f1 fea4 	bl	80002a8 <__aeabi_dsub>
 800e560:	4602      	mov	r2, r0
 800e562:	460b      	mov	r3, r1
 800e564:	e78f      	b.n	800e486 <__ieee754_pow+0xfe>
 800e566:	9b04      	ldr	r3, [sp, #16]
 800e568:	2b01      	cmp	r3, #1
 800e56a:	f47f af2c 	bne.w	800e3c6 <__ieee754_pow+0x3e>
 800e56e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e572:	4619      	mov	r1, r3
 800e574:	e727      	b.n	800e3c6 <__ieee754_pow+0x3e>
 800e576:	0feb      	lsrs	r3, r5, #31
 800e578:	3b01      	subs	r3, #1
 800e57a:	9306      	str	r3, [sp, #24]
 800e57c:	9a06      	ldr	r2, [sp, #24]
 800e57e:	9b04      	ldr	r3, [sp, #16]
 800e580:	4313      	orrs	r3, r2
 800e582:	d102      	bne.n	800e58a <__ieee754_pow+0x202>
 800e584:	4632      	mov	r2, r6
 800e586:	463b      	mov	r3, r7
 800e588:	e7e6      	b.n	800e558 <__ieee754_pow+0x1d0>
 800e58a:	4b19      	ldr	r3, [pc, #100]	; (800e5f0 <__ieee754_pow+0x268>)
 800e58c:	4598      	cmp	r8, r3
 800e58e:	f340 80fb 	ble.w	800e788 <__ieee754_pow+0x400>
 800e592:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800e596:	4598      	cmp	r8, r3
 800e598:	4b13      	ldr	r3, [pc, #76]	; (800e5e8 <__ieee754_pow+0x260>)
 800e59a:	dd0c      	ble.n	800e5b6 <__ieee754_pow+0x22e>
 800e59c:	429c      	cmp	r4, r3
 800e59e:	dc0f      	bgt.n	800e5c0 <__ieee754_pow+0x238>
 800e5a0:	f1b9 0f00 	cmp.w	r9, #0
 800e5a4:	da0f      	bge.n	800e5c6 <__ieee754_pow+0x23e>
 800e5a6:	2000      	movs	r0, #0
 800e5a8:	b009      	add	sp, #36	; 0x24
 800e5aa:	ecbd 8b06 	vpop	{d8-d10}
 800e5ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5b2:	f000 bcc2 	b.w	800ef3a <__math_oflow>
 800e5b6:	429c      	cmp	r4, r3
 800e5b8:	dbf2      	blt.n	800e5a0 <__ieee754_pow+0x218>
 800e5ba:	4b0a      	ldr	r3, [pc, #40]	; (800e5e4 <__ieee754_pow+0x25c>)
 800e5bc:	429c      	cmp	r4, r3
 800e5be:	dd19      	ble.n	800e5f4 <__ieee754_pow+0x26c>
 800e5c0:	f1b9 0f00 	cmp.w	r9, #0
 800e5c4:	dcef      	bgt.n	800e5a6 <__ieee754_pow+0x21e>
 800e5c6:	2000      	movs	r0, #0
 800e5c8:	b009      	add	sp, #36	; 0x24
 800e5ca:	ecbd 8b06 	vpop	{d8-d10}
 800e5ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5d2:	f000 bca9 	b.w	800ef28 <__math_uflow>
 800e5d6:	bf00      	nop
 800e5d8:	fff00000 	.word	0xfff00000
 800e5dc:	7ff00000 	.word	0x7ff00000
 800e5e0:	433fffff 	.word	0x433fffff
 800e5e4:	3ff00000 	.word	0x3ff00000
 800e5e8:	3fefffff 	.word	0x3fefffff
 800e5ec:	3fe00000 	.word	0x3fe00000
 800e5f0:	41e00000 	.word	0x41e00000
 800e5f4:	4b60      	ldr	r3, [pc, #384]	; (800e778 <__ieee754_pow+0x3f0>)
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	f7f1 fe56 	bl	80002a8 <__aeabi_dsub>
 800e5fc:	a354      	add	r3, pc, #336	; (adr r3, 800e750 <__ieee754_pow+0x3c8>)
 800e5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e602:	4604      	mov	r4, r0
 800e604:	460d      	mov	r5, r1
 800e606:	f7f2 f807 	bl	8000618 <__aeabi_dmul>
 800e60a:	a353      	add	r3, pc, #332	; (adr r3, 800e758 <__ieee754_pow+0x3d0>)
 800e60c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e610:	4606      	mov	r6, r0
 800e612:	460f      	mov	r7, r1
 800e614:	4620      	mov	r0, r4
 800e616:	4629      	mov	r1, r5
 800e618:	f7f1 fffe 	bl	8000618 <__aeabi_dmul>
 800e61c:	4b57      	ldr	r3, [pc, #348]	; (800e77c <__ieee754_pow+0x3f4>)
 800e61e:	4682      	mov	sl, r0
 800e620:	468b      	mov	fp, r1
 800e622:	2200      	movs	r2, #0
 800e624:	4620      	mov	r0, r4
 800e626:	4629      	mov	r1, r5
 800e628:	f7f1 fff6 	bl	8000618 <__aeabi_dmul>
 800e62c:	4602      	mov	r2, r0
 800e62e:	460b      	mov	r3, r1
 800e630:	a14b      	add	r1, pc, #300	; (adr r1, 800e760 <__ieee754_pow+0x3d8>)
 800e632:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e636:	f7f1 fe37 	bl	80002a8 <__aeabi_dsub>
 800e63a:	4622      	mov	r2, r4
 800e63c:	462b      	mov	r3, r5
 800e63e:	f7f1 ffeb 	bl	8000618 <__aeabi_dmul>
 800e642:	4602      	mov	r2, r0
 800e644:	460b      	mov	r3, r1
 800e646:	2000      	movs	r0, #0
 800e648:	494d      	ldr	r1, [pc, #308]	; (800e780 <__ieee754_pow+0x3f8>)
 800e64a:	f7f1 fe2d 	bl	80002a8 <__aeabi_dsub>
 800e64e:	4622      	mov	r2, r4
 800e650:	4680      	mov	r8, r0
 800e652:	4689      	mov	r9, r1
 800e654:	462b      	mov	r3, r5
 800e656:	4620      	mov	r0, r4
 800e658:	4629      	mov	r1, r5
 800e65a:	f7f1 ffdd 	bl	8000618 <__aeabi_dmul>
 800e65e:	4602      	mov	r2, r0
 800e660:	460b      	mov	r3, r1
 800e662:	4640      	mov	r0, r8
 800e664:	4649      	mov	r1, r9
 800e666:	f7f1 ffd7 	bl	8000618 <__aeabi_dmul>
 800e66a:	a33f      	add	r3, pc, #252	; (adr r3, 800e768 <__ieee754_pow+0x3e0>)
 800e66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e670:	f7f1 ffd2 	bl	8000618 <__aeabi_dmul>
 800e674:	4602      	mov	r2, r0
 800e676:	460b      	mov	r3, r1
 800e678:	4650      	mov	r0, sl
 800e67a:	4659      	mov	r1, fp
 800e67c:	f7f1 fe14 	bl	80002a8 <__aeabi_dsub>
 800e680:	4602      	mov	r2, r0
 800e682:	460b      	mov	r3, r1
 800e684:	4680      	mov	r8, r0
 800e686:	4689      	mov	r9, r1
 800e688:	4630      	mov	r0, r6
 800e68a:	4639      	mov	r1, r7
 800e68c:	f7f1 fe0e 	bl	80002ac <__adddf3>
 800e690:	2000      	movs	r0, #0
 800e692:	4632      	mov	r2, r6
 800e694:	463b      	mov	r3, r7
 800e696:	4604      	mov	r4, r0
 800e698:	460d      	mov	r5, r1
 800e69a:	f7f1 fe05 	bl	80002a8 <__aeabi_dsub>
 800e69e:	4602      	mov	r2, r0
 800e6a0:	460b      	mov	r3, r1
 800e6a2:	4640      	mov	r0, r8
 800e6a4:	4649      	mov	r1, r9
 800e6a6:	f7f1 fdff 	bl	80002a8 <__aeabi_dsub>
 800e6aa:	9b04      	ldr	r3, [sp, #16]
 800e6ac:	9a06      	ldr	r2, [sp, #24]
 800e6ae:	3b01      	subs	r3, #1
 800e6b0:	4313      	orrs	r3, r2
 800e6b2:	4682      	mov	sl, r0
 800e6b4:	468b      	mov	fp, r1
 800e6b6:	f040 81e7 	bne.w	800ea88 <__ieee754_pow+0x700>
 800e6ba:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800e770 <__ieee754_pow+0x3e8>
 800e6be:	eeb0 8a47 	vmov.f32	s16, s14
 800e6c2:	eef0 8a67 	vmov.f32	s17, s15
 800e6c6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e6ca:	2600      	movs	r6, #0
 800e6cc:	4632      	mov	r2, r6
 800e6ce:	463b      	mov	r3, r7
 800e6d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e6d4:	f7f1 fde8 	bl	80002a8 <__aeabi_dsub>
 800e6d8:	4622      	mov	r2, r4
 800e6da:	462b      	mov	r3, r5
 800e6dc:	f7f1 ff9c 	bl	8000618 <__aeabi_dmul>
 800e6e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e6e4:	4680      	mov	r8, r0
 800e6e6:	4689      	mov	r9, r1
 800e6e8:	4650      	mov	r0, sl
 800e6ea:	4659      	mov	r1, fp
 800e6ec:	f7f1 ff94 	bl	8000618 <__aeabi_dmul>
 800e6f0:	4602      	mov	r2, r0
 800e6f2:	460b      	mov	r3, r1
 800e6f4:	4640      	mov	r0, r8
 800e6f6:	4649      	mov	r1, r9
 800e6f8:	f7f1 fdd8 	bl	80002ac <__adddf3>
 800e6fc:	4632      	mov	r2, r6
 800e6fe:	463b      	mov	r3, r7
 800e700:	4680      	mov	r8, r0
 800e702:	4689      	mov	r9, r1
 800e704:	4620      	mov	r0, r4
 800e706:	4629      	mov	r1, r5
 800e708:	f7f1 ff86 	bl	8000618 <__aeabi_dmul>
 800e70c:	460b      	mov	r3, r1
 800e70e:	4604      	mov	r4, r0
 800e710:	460d      	mov	r5, r1
 800e712:	4602      	mov	r2, r0
 800e714:	4649      	mov	r1, r9
 800e716:	4640      	mov	r0, r8
 800e718:	f7f1 fdc8 	bl	80002ac <__adddf3>
 800e71c:	4b19      	ldr	r3, [pc, #100]	; (800e784 <__ieee754_pow+0x3fc>)
 800e71e:	4299      	cmp	r1, r3
 800e720:	ec45 4b19 	vmov	d9, r4, r5
 800e724:	4606      	mov	r6, r0
 800e726:	460f      	mov	r7, r1
 800e728:	468b      	mov	fp, r1
 800e72a:	f340 82f0 	ble.w	800ed0e <__ieee754_pow+0x986>
 800e72e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800e732:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e736:	4303      	orrs	r3, r0
 800e738:	f000 81e4 	beq.w	800eb04 <__ieee754_pow+0x77c>
 800e73c:	ec51 0b18 	vmov	r0, r1, d8
 800e740:	2200      	movs	r2, #0
 800e742:	2300      	movs	r3, #0
 800e744:	f7f2 f9da 	bl	8000afc <__aeabi_dcmplt>
 800e748:	3800      	subs	r0, #0
 800e74a:	bf18      	it	ne
 800e74c:	2001      	movne	r0, #1
 800e74e:	e72b      	b.n	800e5a8 <__ieee754_pow+0x220>
 800e750:	60000000 	.word	0x60000000
 800e754:	3ff71547 	.word	0x3ff71547
 800e758:	f85ddf44 	.word	0xf85ddf44
 800e75c:	3e54ae0b 	.word	0x3e54ae0b
 800e760:	55555555 	.word	0x55555555
 800e764:	3fd55555 	.word	0x3fd55555
 800e768:	652b82fe 	.word	0x652b82fe
 800e76c:	3ff71547 	.word	0x3ff71547
 800e770:	00000000 	.word	0x00000000
 800e774:	bff00000 	.word	0xbff00000
 800e778:	3ff00000 	.word	0x3ff00000
 800e77c:	3fd00000 	.word	0x3fd00000
 800e780:	3fe00000 	.word	0x3fe00000
 800e784:	408fffff 	.word	0x408fffff
 800e788:	4bd5      	ldr	r3, [pc, #852]	; (800eae0 <__ieee754_pow+0x758>)
 800e78a:	402b      	ands	r3, r5
 800e78c:	2200      	movs	r2, #0
 800e78e:	b92b      	cbnz	r3, 800e79c <__ieee754_pow+0x414>
 800e790:	4bd4      	ldr	r3, [pc, #848]	; (800eae4 <__ieee754_pow+0x75c>)
 800e792:	f7f1 ff41 	bl	8000618 <__aeabi_dmul>
 800e796:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800e79a:	460c      	mov	r4, r1
 800e79c:	1523      	asrs	r3, r4, #20
 800e79e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e7a2:	4413      	add	r3, r2
 800e7a4:	9305      	str	r3, [sp, #20]
 800e7a6:	4bd0      	ldr	r3, [pc, #832]	; (800eae8 <__ieee754_pow+0x760>)
 800e7a8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e7ac:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800e7b0:	429c      	cmp	r4, r3
 800e7b2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e7b6:	dd08      	ble.n	800e7ca <__ieee754_pow+0x442>
 800e7b8:	4bcc      	ldr	r3, [pc, #816]	; (800eaec <__ieee754_pow+0x764>)
 800e7ba:	429c      	cmp	r4, r3
 800e7bc:	f340 8162 	ble.w	800ea84 <__ieee754_pow+0x6fc>
 800e7c0:	9b05      	ldr	r3, [sp, #20]
 800e7c2:	3301      	adds	r3, #1
 800e7c4:	9305      	str	r3, [sp, #20]
 800e7c6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800e7ca:	2400      	movs	r4, #0
 800e7cc:	00e3      	lsls	r3, r4, #3
 800e7ce:	9307      	str	r3, [sp, #28]
 800e7d0:	4bc7      	ldr	r3, [pc, #796]	; (800eaf0 <__ieee754_pow+0x768>)
 800e7d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e7d6:	ed93 7b00 	vldr	d7, [r3]
 800e7da:	4629      	mov	r1, r5
 800e7dc:	ec53 2b17 	vmov	r2, r3, d7
 800e7e0:	eeb0 9a47 	vmov.f32	s18, s14
 800e7e4:	eef0 9a67 	vmov.f32	s19, s15
 800e7e8:	4682      	mov	sl, r0
 800e7ea:	f7f1 fd5d 	bl	80002a8 <__aeabi_dsub>
 800e7ee:	4652      	mov	r2, sl
 800e7f0:	4606      	mov	r6, r0
 800e7f2:	460f      	mov	r7, r1
 800e7f4:	462b      	mov	r3, r5
 800e7f6:	ec51 0b19 	vmov	r0, r1, d9
 800e7fa:	f7f1 fd57 	bl	80002ac <__adddf3>
 800e7fe:	4602      	mov	r2, r0
 800e800:	460b      	mov	r3, r1
 800e802:	2000      	movs	r0, #0
 800e804:	49bb      	ldr	r1, [pc, #748]	; (800eaf4 <__ieee754_pow+0x76c>)
 800e806:	f7f2 f831 	bl	800086c <__aeabi_ddiv>
 800e80a:	ec41 0b1a 	vmov	d10, r0, r1
 800e80e:	4602      	mov	r2, r0
 800e810:	460b      	mov	r3, r1
 800e812:	4630      	mov	r0, r6
 800e814:	4639      	mov	r1, r7
 800e816:	f7f1 feff 	bl	8000618 <__aeabi_dmul>
 800e81a:	2300      	movs	r3, #0
 800e81c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e820:	9302      	str	r3, [sp, #8]
 800e822:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e826:	46ab      	mov	fp, r5
 800e828:	106d      	asrs	r5, r5, #1
 800e82a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800e82e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800e832:	ec41 0b18 	vmov	d8, r0, r1
 800e836:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800e83a:	2200      	movs	r2, #0
 800e83c:	4640      	mov	r0, r8
 800e83e:	4649      	mov	r1, r9
 800e840:	4614      	mov	r4, r2
 800e842:	461d      	mov	r5, r3
 800e844:	f7f1 fee8 	bl	8000618 <__aeabi_dmul>
 800e848:	4602      	mov	r2, r0
 800e84a:	460b      	mov	r3, r1
 800e84c:	4630      	mov	r0, r6
 800e84e:	4639      	mov	r1, r7
 800e850:	f7f1 fd2a 	bl	80002a8 <__aeabi_dsub>
 800e854:	ec53 2b19 	vmov	r2, r3, d9
 800e858:	4606      	mov	r6, r0
 800e85a:	460f      	mov	r7, r1
 800e85c:	4620      	mov	r0, r4
 800e85e:	4629      	mov	r1, r5
 800e860:	f7f1 fd22 	bl	80002a8 <__aeabi_dsub>
 800e864:	4602      	mov	r2, r0
 800e866:	460b      	mov	r3, r1
 800e868:	4650      	mov	r0, sl
 800e86a:	4659      	mov	r1, fp
 800e86c:	f7f1 fd1c 	bl	80002a8 <__aeabi_dsub>
 800e870:	4642      	mov	r2, r8
 800e872:	464b      	mov	r3, r9
 800e874:	f7f1 fed0 	bl	8000618 <__aeabi_dmul>
 800e878:	4602      	mov	r2, r0
 800e87a:	460b      	mov	r3, r1
 800e87c:	4630      	mov	r0, r6
 800e87e:	4639      	mov	r1, r7
 800e880:	f7f1 fd12 	bl	80002a8 <__aeabi_dsub>
 800e884:	ec53 2b1a 	vmov	r2, r3, d10
 800e888:	f7f1 fec6 	bl	8000618 <__aeabi_dmul>
 800e88c:	ec53 2b18 	vmov	r2, r3, d8
 800e890:	ec41 0b19 	vmov	d9, r0, r1
 800e894:	ec51 0b18 	vmov	r0, r1, d8
 800e898:	f7f1 febe 	bl	8000618 <__aeabi_dmul>
 800e89c:	a37c      	add	r3, pc, #496	; (adr r3, 800ea90 <__ieee754_pow+0x708>)
 800e89e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8a2:	4604      	mov	r4, r0
 800e8a4:	460d      	mov	r5, r1
 800e8a6:	f7f1 feb7 	bl	8000618 <__aeabi_dmul>
 800e8aa:	a37b      	add	r3, pc, #492	; (adr r3, 800ea98 <__ieee754_pow+0x710>)
 800e8ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8b0:	f7f1 fcfc 	bl	80002ac <__adddf3>
 800e8b4:	4622      	mov	r2, r4
 800e8b6:	462b      	mov	r3, r5
 800e8b8:	f7f1 feae 	bl	8000618 <__aeabi_dmul>
 800e8bc:	a378      	add	r3, pc, #480	; (adr r3, 800eaa0 <__ieee754_pow+0x718>)
 800e8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8c2:	f7f1 fcf3 	bl	80002ac <__adddf3>
 800e8c6:	4622      	mov	r2, r4
 800e8c8:	462b      	mov	r3, r5
 800e8ca:	f7f1 fea5 	bl	8000618 <__aeabi_dmul>
 800e8ce:	a376      	add	r3, pc, #472	; (adr r3, 800eaa8 <__ieee754_pow+0x720>)
 800e8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8d4:	f7f1 fcea 	bl	80002ac <__adddf3>
 800e8d8:	4622      	mov	r2, r4
 800e8da:	462b      	mov	r3, r5
 800e8dc:	f7f1 fe9c 	bl	8000618 <__aeabi_dmul>
 800e8e0:	a373      	add	r3, pc, #460	; (adr r3, 800eab0 <__ieee754_pow+0x728>)
 800e8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8e6:	f7f1 fce1 	bl	80002ac <__adddf3>
 800e8ea:	4622      	mov	r2, r4
 800e8ec:	462b      	mov	r3, r5
 800e8ee:	f7f1 fe93 	bl	8000618 <__aeabi_dmul>
 800e8f2:	a371      	add	r3, pc, #452	; (adr r3, 800eab8 <__ieee754_pow+0x730>)
 800e8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8f8:	f7f1 fcd8 	bl	80002ac <__adddf3>
 800e8fc:	4622      	mov	r2, r4
 800e8fe:	4606      	mov	r6, r0
 800e900:	460f      	mov	r7, r1
 800e902:	462b      	mov	r3, r5
 800e904:	4620      	mov	r0, r4
 800e906:	4629      	mov	r1, r5
 800e908:	f7f1 fe86 	bl	8000618 <__aeabi_dmul>
 800e90c:	4602      	mov	r2, r0
 800e90e:	460b      	mov	r3, r1
 800e910:	4630      	mov	r0, r6
 800e912:	4639      	mov	r1, r7
 800e914:	f7f1 fe80 	bl	8000618 <__aeabi_dmul>
 800e918:	4642      	mov	r2, r8
 800e91a:	4604      	mov	r4, r0
 800e91c:	460d      	mov	r5, r1
 800e91e:	464b      	mov	r3, r9
 800e920:	ec51 0b18 	vmov	r0, r1, d8
 800e924:	f7f1 fcc2 	bl	80002ac <__adddf3>
 800e928:	ec53 2b19 	vmov	r2, r3, d9
 800e92c:	f7f1 fe74 	bl	8000618 <__aeabi_dmul>
 800e930:	4622      	mov	r2, r4
 800e932:	462b      	mov	r3, r5
 800e934:	f7f1 fcba 	bl	80002ac <__adddf3>
 800e938:	4642      	mov	r2, r8
 800e93a:	4682      	mov	sl, r0
 800e93c:	468b      	mov	fp, r1
 800e93e:	464b      	mov	r3, r9
 800e940:	4640      	mov	r0, r8
 800e942:	4649      	mov	r1, r9
 800e944:	f7f1 fe68 	bl	8000618 <__aeabi_dmul>
 800e948:	4b6b      	ldr	r3, [pc, #428]	; (800eaf8 <__ieee754_pow+0x770>)
 800e94a:	2200      	movs	r2, #0
 800e94c:	4606      	mov	r6, r0
 800e94e:	460f      	mov	r7, r1
 800e950:	f7f1 fcac 	bl	80002ac <__adddf3>
 800e954:	4652      	mov	r2, sl
 800e956:	465b      	mov	r3, fp
 800e958:	f7f1 fca8 	bl	80002ac <__adddf3>
 800e95c:	2000      	movs	r0, #0
 800e95e:	4604      	mov	r4, r0
 800e960:	460d      	mov	r5, r1
 800e962:	4602      	mov	r2, r0
 800e964:	460b      	mov	r3, r1
 800e966:	4640      	mov	r0, r8
 800e968:	4649      	mov	r1, r9
 800e96a:	f7f1 fe55 	bl	8000618 <__aeabi_dmul>
 800e96e:	4b62      	ldr	r3, [pc, #392]	; (800eaf8 <__ieee754_pow+0x770>)
 800e970:	4680      	mov	r8, r0
 800e972:	4689      	mov	r9, r1
 800e974:	2200      	movs	r2, #0
 800e976:	4620      	mov	r0, r4
 800e978:	4629      	mov	r1, r5
 800e97a:	f7f1 fc95 	bl	80002a8 <__aeabi_dsub>
 800e97e:	4632      	mov	r2, r6
 800e980:	463b      	mov	r3, r7
 800e982:	f7f1 fc91 	bl	80002a8 <__aeabi_dsub>
 800e986:	4602      	mov	r2, r0
 800e988:	460b      	mov	r3, r1
 800e98a:	4650      	mov	r0, sl
 800e98c:	4659      	mov	r1, fp
 800e98e:	f7f1 fc8b 	bl	80002a8 <__aeabi_dsub>
 800e992:	ec53 2b18 	vmov	r2, r3, d8
 800e996:	f7f1 fe3f 	bl	8000618 <__aeabi_dmul>
 800e99a:	4622      	mov	r2, r4
 800e99c:	4606      	mov	r6, r0
 800e99e:	460f      	mov	r7, r1
 800e9a0:	462b      	mov	r3, r5
 800e9a2:	ec51 0b19 	vmov	r0, r1, d9
 800e9a6:	f7f1 fe37 	bl	8000618 <__aeabi_dmul>
 800e9aa:	4602      	mov	r2, r0
 800e9ac:	460b      	mov	r3, r1
 800e9ae:	4630      	mov	r0, r6
 800e9b0:	4639      	mov	r1, r7
 800e9b2:	f7f1 fc7b 	bl	80002ac <__adddf3>
 800e9b6:	4606      	mov	r6, r0
 800e9b8:	460f      	mov	r7, r1
 800e9ba:	4602      	mov	r2, r0
 800e9bc:	460b      	mov	r3, r1
 800e9be:	4640      	mov	r0, r8
 800e9c0:	4649      	mov	r1, r9
 800e9c2:	f7f1 fc73 	bl	80002ac <__adddf3>
 800e9c6:	a33e      	add	r3, pc, #248	; (adr r3, 800eac0 <__ieee754_pow+0x738>)
 800e9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9cc:	2000      	movs	r0, #0
 800e9ce:	4604      	mov	r4, r0
 800e9d0:	460d      	mov	r5, r1
 800e9d2:	f7f1 fe21 	bl	8000618 <__aeabi_dmul>
 800e9d6:	4642      	mov	r2, r8
 800e9d8:	ec41 0b18 	vmov	d8, r0, r1
 800e9dc:	464b      	mov	r3, r9
 800e9de:	4620      	mov	r0, r4
 800e9e0:	4629      	mov	r1, r5
 800e9e2:	f7f1 fc61 	bl	80002a8 <__aeabi_dsub>
 800e9e6:	4602      	mov	r2, r0
 800e9e8:	460b      	mov	r3, r1
 800e9ea:	4630      	mov	r0, r6
 800e9ec:	4639      	mov	r1, r7
 800e9ee:	f7f1 fc5b 	bl	80002a8 <__aeabi_dsub>
 800e9f2:	a335      	add	r3, pc, #212	; (adr r3, 800eac8 <__ieee754_pow+0x740>)
 800e9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9f8:	f7f1 fe0e 	bl	8000618 <__aeabi_dmul>
 800e9fc:	a334      	add	r3, pc, #208	; (adr r3, 800ead0 <__ieee754_pow+0x748>)
 800e9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea02:	4606      	mov	r6, r0
 800ea04:	460f      	mov	r7, r1
 800ea06:	4620      	mov	r0, r4
 800ea08:	4629      	mov	r1, r5
 800ea0a:	f7f1 fe05 	bl	8000618 <__aeabi_dmul>
 800ea0e:	4602      	mov	r2, r0
 800ea10:	460b      	mov	r3, r1
 800ea12:	4630      	mov	r0, r6
 800ea14:	4639      	mov	r1, r7
 800ea16:	f7f1 fc49 	bl	80002ac <__adddf3>
 800ea1a:	9a07      	ldr	r2, [sp, #28]
 800ea1c:	4b37      	ldr	r3, [pc, #220]	; (800eafc <__ieee754_pow+0x774>)
 800ea1e:	4413      	add	r3, r2
 800ea20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea24:	f7f1 fc42 	bl	80002ac <__adddf3>
 800ea28:	4682      	mov	sl, r0
 800ea2a:	9805      	ldr	r0, [sp, #20]
 800ea2c:	468b      	mov	fp, r1
 800ea2e:	f7f1 fd89 	bl	8000544 <__aeabi_i2d>
 800ea32:	9a07      	ldr	r2, [sp, #28]
 800ea34:	4b32      	ldr	r3, [pc, #200]	; (800eb00 <__ieee754_pow+0x778>)
 800ea36:	4413      	add	r3, r2
 800ea38:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ea3c:	4606      	mov	r6, r0
 800ea3e:	460f      	mov	r7, r1
 800ea40:	4652      	mov	r2, sl
 800ea42:	465b      	mov	r3, fp
 800ea44:	ec51 0b18 	vmov	r0, r1, d8
 800ea48:	f7f1 fc30 	bl	80002ac <__adddf3>
 800ea4c:	4642      	mov	r2, r8
 800ea4e:	464b      	mov	r3, r9
 800ea50:	f7f1 fc2c 	bl	80002ac <__adddf3>
 800ea54:	4632      	mov	r2, r6
 800ea56:	463b      	mov	r3, r7
 800ea58:	f7f1 fc28 	bl	80002ac <__adddf3>
 800ea5c:	2000      	movs	r0, #0
 800ea5e:	4632      	mov	r2, r6
 800ea60:	463b      	mov	r3, r7
 800ea62:	4604      	mov	r4, r0
 800ea64:	460d      	mov	r5, r1
 800ea66:	f7f1 fc1f 	bl	80002a8 <__aeabi_dsub>
 800ea6a:	4642      	mov	r2, r8
 800ea6c:	464b      	mov	r3, r9
 800ea6e:	f7f1 fc1b 	bl	80002a8 <__aeabi_dsub>
 800ea72:	ec53 2b18 	vmov	r2, r3, d8
 800ea76:	f7f1 fc17 	bl	80002a8 <__aeabi_dsub>
 800ea7a:	4602      	mov	r2, r0
 800ea7c:	460b      	mov	r3, r1
 800ea7e:	4650      	mov	r0, sl
 800ea80:	4659      	mov	r1, fp
 800ea82:	e610      	b.n	800e6a6 <__ieee754_pow+0x31e>
 800ea84:	2401      	movs	r4, #1
 800ea86:	e6a1      	b.n	800e7cc <__ieee754_pow+0x444>
 800ea88:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800ead8 <__ieee754_pow+0x750>
 800ea8c:	e617      	b.n	800e6be <__ieee754_pow+0x336>
 800ea8e:	bf00      	nop
 800ea90:	4a454eef 	.word	0x4a454eef
 800ea94:	3fca7e28 	.word	0x3fca7e28
 800ea98:	93c9db65 	.word	0x93c9db65
 800ea9c:	3fcd864a 	.word	0x3fcd864a
 800eaa0:	a91d4101 	.word	0xa91d4101
 800eaa4:	3fd17460 	.word	0x3fd17460
 800eaa8:	518f264d 	.word	0x518f264d
 800eaac:	3fd55555 	.word	0x3fd55555
 800eab0:	db6fabff 	.word	0xdb6fabff
 800eab4:	3fdb6db6 	.word	0x3fdb6db6
 800eab8:	33333303 	.word	0x33333303
 800eabc:	3fe33333 	.word	0x3fe33333
 800eac0:	e0000000 	.word	0xe0000000
 800eac4:	3feec709 	.word	0x3feec709
 800eac8:	dc3a03fd 	.word	0xdc3a03fd
 800eacc:	3feec709 	.word	0x3feec709
 800ead0:	145b01f5 	.word	0x145b01f5
 800ead4:	be3e2fe0 	.word	0xbe3e2fe0
 800ead8:	00000000 	.word	0x00000000
 800eadc:	3ff00000 	.word	0x3ff00000
 800eae0:	7ff00000 	.word	0x7ff00000
 800eae4:	43400000 	.word	0x43400000
 800eae8:	0003988e 	.word	0x0003988e
 800eaec:	000bb679 	.word	0x000bb679
 800eaf0:	0800f8a0 	.word	0x0800f8a0
 800eaf4:	3ff00000 	.word	0x3ff00000
 800eaf8:	40080000 	.word	0x40080000
 800eafc:	0800f8c0 	.word	0x0800f8c0
 800eb00:	0800f8b0 	.word	0x0800f8b0
 800eb04:	a3b3      	add	r3, pc, #716	; (adr r3, 800edd4 <__ieee754_pow+0xa4c>)
 800eb06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb0a:	4640      	mov	r0, r8
 800eb0c:	4649      	mov	r1, r9
 800eb0e:	f7f1 fbcd 	bl	80002ac <__adddf3>
 800eb12:	4622      	mov	r2, r4
 800eb14:	ec41 0b1a 	vmov	d10, r0, r1
 800eb18:	462b      	mov	r3, r5
 800eb1a:	4630      	mov	r0, r6
 800eb1c:	4639      	mov	r1, r7
 800eb1e:	f7f1 fbc3 	bl	80002a8 <__aeabi_dsub>
 800eb22:	4602      	mov	r2, r0
 800eb24:	460b      	mov	r3, r1
 800eb26:	ec51 0b1a 	vmov	r0, r1, d10
 800eb2a:	f7f2 f805 	bl	8000b38 <__aeabi_dcmpgt>
 800eb2e:	2800      	cmp	r0, #0
 800eb30:	f47f ae04 	bne.w	800e73c <__ieee754_pow+0x3b4>
 800eb34:	4aa2      	ldr	r2, [pc, #648]	; (800edc0 <__ieee754_pow+0xa38>)
 800eb36:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800eb3a:	4293      	cmp	r3, r2
 800eb3c:	f340 8107 	ble.w	800ed4e <__ieee754_pow+0x9c6>
 800eb40:	151b      	asrs	r3, r3, #20
 800eb42:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800eb46:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800eb4a:	fa4a fa03 	asr.w	sl, sl, r3
 800eb4e:	44da      	add	sl, fp
 800eb50:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800eb54:	489b      	ldr	r0, [pc, #620]	; (800edc4 <__ieee754_pow+0xa3c>)
 800eb56:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800eb5a:	4108      	asrs	r0, r1
 800eb5c:	ea00 030a 	and.w	r3, r0, sl
 800eb60:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800eb64:	f1c1 0114 	rsb	r1, r1, #20
 800eb68:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800eb6c:	fa4a fa01 	asr.w	sl, sl, r1
 800eb70:	f1bb 0f00 	cmp.w	fp, #0
 800eb74:	f04f 0200 	mov.w	r2, #0
 800eb78:	4620      	mov	r0, r4
 800eb7a:	4629      	mov	r1, r5
 800eb7c:	bfb8      	it	lt
 800eb7e:	f1ca 0a00 	rsblt	sl, sl, #0
 800eb82:	f7f1 fb91 	bl	80002a8 <__aeabi_dsub>
 800eb86:	ec41 0b19 	vmov	d9, r0, r1
 800eb8a:	4642      	mov	r2, r8
 800eb8c:	464b      	mov	r3, r9
 800eb8e:	ec51 0b19 	vmov	r0, r1, d9
 800eb92:	f7f1 fb8b 	bl	80002ac <__adddf3>
 800eb96:	a37a      	add	r3, pc, #488	; (adr r3, 800ed80 <__ieee754_pow+0x9f8>)
 800eb98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb9c:	2000      	movs	r0, #0
 800eb9e:	4604      	mov	r4, r0
 800eba0:	460d      	mov	r5, r1
 800eba2:	f7f1 fd39 	bl	8000618 <__aeabi_dmul>
 800eba6:	ec53 2b19 	vmov	r2, r3, d9
 800ebaa:	4606      	mov	r6, r0
 800ebac:	460f      	mov	r7, r1
 800ebae:	4620      	mov	r0, r4
 800ebb0:	4629      	mov	r1, r5
 800ebb2:	f7f1 fb79 	bl	80002a8 <__aeabi_dsub>
 800ebb6:	4602      	mov	r2, r0
 800ebb8:	460b      	mov	r3, r1
 800ebba:	4640      	mov	r0, r8
 800ebbc:	4649      	mov	r1, r9
 800ebbe:	f7f1 fb73 	bl	80002a8 <__aeabi_dsub>
 800ebc2:	a371      	add	r3, pc, #452	; (adr r3, 800ed88 <__ieee754_pow+0xa00>)
 800ebc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebc8:	f7f1 fd26 	bl	8000618 <__aeabi_dmul>
 800ebcc:	a370      	add	r3, pc, #448	; (adr r3, 800ed90 <__ieee754_pow+0xa08>)
 800ebce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebd2:	4680      	mov	r8, r0
 800ebd4:	4689      	mov	r9, r1
 800ebd6:	4620      	mov	r0, r4
 800ebd8:	4629      	mov	r1, r5
 800ebda:	f7f1 fd1d 	bl	8000618 <__aeabi_dmul>
 800ebde:	4602      	mov	r2, r0
 800ebe0:	460b      	mov	r3, r1
 800ebe2:	4640      	mov	r0, r8
 800ebe4:	4649      	mov	r1, r9
 800ebe6:	f7f1 fb61 	bl	80002ac <__adddf3>
 800ebea:	4604      	mov	r4, r0
 800ebec:	460d      	mov	r5, r1
 800ebee:	4602      	mov	r2, r0
 800ebf0:	460b      	mov	r3, r1
 800ebf2:	4630      	mov	r0, r6
 800ebf4:	4639      	mov	r1, r7
 800ebf6:	f7f1 fb59 	bl	80002ac <__adddf3>
 800ebfa:	4632      	mov	r2, r6
 800ebfc:	463b      	mov	r3, r7
 800ebfe:	4680      	mov	r8, r0
 800ec00:	4689      	mov	r9, r1
 800ec02:	f7f1 fb51 	bl	80002a8 <__aeabi_dsub>
 800ec06:	4602      	mov	r2, r0
 800ec08:	460b      	mov	r3, r1
 800ec0a:	4620      	mov	r0, r4
 800ec0c:	4629      	mov	r1, r5
 800ec0e:	f7f1 fb4b 	bl	80002a8 <__aeabi_dsub>
 800ec12:	4642      	mov	r2, r8
 800ec14:	4606      	mov	r6, r0
 800ec16:	460f      	mov	r7, r1
 800ec18:	464b      	mov	r3, r9
 800ec1a:	4640      	mov	r0, r8
 800ec1c:	4649      	mov	r1, r9
 800ec1e:	f7f1 fcfb 	bl	8000618 <__aeabi_dmul>
 800ec22:	a35d      	add	r3, pc, #372	; (adr r3, 800ed98 <__ieee754_pow+0xa10>)
 800ec24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec28:	4604      	mov	r4, r0
 800ec2a:	460d      	mov	r5, r1
 800ec2c:	f7f1 fcf4 	bl	8000618 <__aeabi_dmul>
 800ec30:	a35b      	add	r3, pc, #364	; (adr r3, 800eda0 <__ieee754_pow+0xa18>)
 800ec32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec36:	f7f1 fb37 	bl	80002a8 <__aeabi_dsub>
 800ec3a:	4622      	mov	r2, r4
 800ec3c:	462b      	mov	r3, r5
 800ec3e:	f7f1 fceb 	bl	8000618 <__aeabi_dmul>
 800ec42:	a359      	add	r3, pc, #356	; (adr r3, 800eda8 <__ieee754_pow+0xa20>)
 800ec44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec48:	f7f1 fb30 	bl	80002ac <__adddf3>
 800ec4c:	4622      	mov	r2, r4
 800ec4e:	462b      	mov	r3, r5
 800ec50:	f7f1 fce2 	bl	8000618 <__aeabi_dmul>
 800ec54:	a356      	add	r3, pc, #344	; (adr r3, 800edb0 <__ieee754_pow+0xa28>)
 800ec56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec5a:	f7f1 fb25 	bl	80002a8 <__aeabi_dsub>
 800ec5e:	4622      	mov	r2, r4
 800ec60:	462b      	mov	r3, r5
 800ec62:	f7f1 fcd9 	bl	8000618 <__aeabi_dmul>
 800ec66:	a354      	add	r3, pc, #336	; (adr r3, 800edb8 <__ieee754_pow+0xa30>)
 800ec68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec6c:	f7f1 fb1e 	bl	80002ac <__adddf3>
 800ec70:	4622      	mov	r2, r4
 800ec72:	462b      	mov	r3, r5
 800ec74:	f7f1 fcd0 	bl	8000618 <__aeabi_dmul>
 800ec78:	4602      	mov	r2, r0
 800ec7a:	460b      	mov	r3, r1
 800ec7c:	4640      	mov	r0, r8
 800ec7e:	4649      	mov	r1, r9
 800ec80:	f7f1 fb12 	bl	80002a8 <__aeabi_dsub>
 800ec84:	4604      	mov	r4, r0
 800ec86:	460d      	mov	r5, r1
 800ec88:	4602      	mov	r2, r0
 800ec8a:	460b      	mov	r3, r1
 800ec8c:	4640      	mov	r0, r8
 800ec8e:	4649      	mov	r1, r9
 800ec90:	f7f1 fcc2 	bl	8000618 <__aeabi_dmul>
 800ec94:	2200      	movs	r2, #0
 800ec96:	ec41 0b19 	vmov	d9, r0, r1
 800ec9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ec9e:	4620      	mov	r0, r4
 800eca0:	4629      	mov	r1, r5
 800eca2:	f7f1 fb01 	bl	80002a8 <__aeabi_dsub>
 800eca6:	4602      	mov	r2, r0
 800eca8:	460b      	mov	r3, r1
 800ecaa:	ec51 0b19 	vmov	r0, r1, d9
 800ecae:	f7f1 fddd 	bl	800086c <__aeabi_ddiv>
 800ecb2:	4632      	mov	r2, r6
 800ecb4:	4604      	mov	r4, r0
 800ecb6:	460d      	mov	r5, r1
 800ecb8:	463b      	mov	r3, r7
 800ecba:	4640      	mov	r0, r8
 800ecbc:	4649      	mov	r1, r9
 800ecbe:	f7f1 fcab 	bl	8000618 <__aeabi_dmul>
 800ecc2:	4632      	mov	r2, r6
 800ecc4:	463b      	mov	r3, r7
 800ecc6:	f7f1 faf1 	bl	80002ac <__adddf3>
 800ecca:	4602      	mov	r2, r0
 800eccc:	460b      	mov	r3, r1
 800ecce:	4620      	mov	r0, r4
 800ecd0:	4629      	mov	r1, r5
 800ecd2:	f7f1 fae9 	bl	80002a8 <__aeabi_dsub>
 800ecd6:	4642      	mov	r2, r8
 800ecd8:	464b      	mov	r3, r9
 800ecda:	f7f1 fae5 	bl	80002a8 <__aeabi_dsub>
 800ecde:	460b      	mov	r3, r1
 800ece0:	4602      	mov	r2, r0
 800ece2:	4939      	ldr	r1, [pc, #228]	; (800edc8 <__ieee754_pow+0xa40>)
 800ece4:	2000      	movs	r0, #0
 800ece6:	f7f1 fadf 	bl	80002a8 <__aeabi_dsub>
 800ecea:	ec41 0b10 	vmov	d0, r0, r1
 800ecee:	ee10 3a90 	vmov	r3, s1
 800ecf2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800ecf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ecfa:	da2b      	bge.n	800ed54 <__ieee754_pow+0x9cc>
 800ecfc:	4650      	mov	r0, sl
 800ecfe:	f000 f877 	bl	800edf0 <scalbn>
 800ed02:	ec51 0b10 	vmov	r0, r1, d0
 800ed06:	ec53 2b18 	vmov	r2, r3, d8
 800ed0a:	f7ff bbee 	b.w	800e4ea <__ieee754_pow+0x162>
 800ed0e:	4b2f      	ldr	r3, [pc, #188]	; (800edcc <__ieee754_pow+0xa44>)
 800ed10:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ed14:	429e      	cmp	r6, r3
 800ed16:	f77f af0d 	ble.w	800eb34 <__ieee754_pow+0x7ac>
 800ed1a:	4b2d      	ldr	r3, [pc, #180]	; (800edd0 <__ieee754_pow+0xa48>)
 800ed1c:	440b      	add	r3, r1
 800ed1e:	4303      	orrs	r3, r0
 800ed20:	d009      	beq.n	800ed36 <__ieee754_pow+0x9ae>
 800ed22:	ec51 0b18 	vmov	r0, r1, d8
 800ed26:	2200      	movs	r2, #0
 800ed28:	2300      	movs	r3, #0
 800ed2a:	f7f1 fee7 	bl	8000afc <__aeabi_dcmplt>
 800ed2e:	3800      	subs	r0, #0
 800ed30:	bf18      	it	ne
 800ed32:	2001      	movne	r0, #1
 800ed34:	e448      	b.n	800e5c8 <__ieee754_pow+0x240>
 800ed36:	4622      	mov	r2, r4
 800ed38:	462b      	mov	r3, r5
 800ed3a:	f7f1 fab5 	bl	80002a8 <__aeabi_dsub>
 800ed3e:	4642      	mov	r2, r8
 800ed40:	464b      	mov	r3, r9
 800ed42:	f7f1 feef 	bl	8000b24 <__aeabi_dcmpge>
 800ed46:	2800      	cmp	r0, #0
 800ed48:	f43f aef4 	beq.w	800eb34 <__ieee754_pow+0x7ac>
 800ed4c:	e7e9      	b.n	800ed22 <__ieee754_pow+0x99a>
 800ed4e:	f04f 0a00 	mov.w	sl, #0
 800ed52:	e71a      	b.n	800eb8a <__ieee754_pow+0x802>
 800ed54:	ec51 0b10 	vmov	r0, r1, d0
 800ed58:	4619      	mov	r1, r3
 800ed5a:	e7d4      	b.n	800ed06 <__ieee754_pow+0x97e>
 800ed5c:	491a      	ldr	r1, [pc, #104]	; (800edc8 <__ieee754_pow+0xa40>)
 800ed5e:	2000      	movs	r0, #0
 800ed60:	f7ff bb31 	b.w	800e3c6 <__ieee754_pow+0x3e>
 800ed64:	2000      	movs	r0, #0
 800ed66:	2100      	movs	r1, #0
 800ed68:	f7ff bb2d 	b.w	800e3c6 <__ieee754_pow+0x3e>
 800ed6c:	4630      	mov	r0, r6
 800ed6e:	4639      	mov	r1, r7
 800ed70:	f7ff bb29 	b.w	800e3c6 <__ieee754_pow+0x3e>
 800ed74:	9204      	str	r2, [sp, #16]
 800ed76:	f7ff bb7b 	b.w	800e470 <__ieee754_pow+0xe8>
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	f7ff bb65 	b.w	800e44a <__ieee754_pow+0xc2>
 800ed80:	00000000 	.word	0x00000000
 800ed84:	3fe62e43 	.word	0x3fe62e43
 800ed88:	fefa39ef 	.word	0xfefa39ef
 800ed8c:	3fe62e42 	.word	0x3fe62e42
 800ed90:	0ca86c39 	.word	0x0ca86c39
 800ed94:	be205c61 	.word	0xbe205c61
 800ed98:	72bea4d0 	.word	0x72bea4d0
 800ed9c:	3e663769 	.word	0x3e663769
 800eda0:	c5d26bf1 	.word	0xc5d26bf1
 800eda4:	3ebbbd41 	.word	0x3ebbbd41
 800eda8:	af25de2c 	.word	0xaf25de2c
 800edac:	3f11566a 	.word	0x3f11566a
 800edb0:	16bebd93 	.word	0x16bebd93
 800edb4:	3f66c16c 	.word	0x3f66c16c
 800edb8:	5555553e 	.word	0x5555553e
 800edbc:	3fc55555 	.word	0x3fc55555
 800edc0:	3fe00000 	.word	0x3fe00000
 800edc4:	fff00000 	.word	0xfff00000
 800edc8:	3ff00000 	.word	0x3ff00000
 800edcc:	4090cbff 	.word	0x4090cbff
 800edd0:	3f6f3400 	.word	0x3f6f3400
 800edd4:	652b82fe 	.word	0x652b82fe
 800edd8:	3c971547 	.word	0x3c971547

0800eddc <fabs>:
 800eddc:	ec51 0b10 	vmov	r0, r1, d0
 800ede0:	ee10 2a10 	vmov	r2, s0
 800ede4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ede8:	ec43 2b10 	vmov	d0, r2, r3
 800edec:	4770      	bx	lr
	...

0800edf0 <scalbn>:
 800edf0:	b570      	push	{r4, r5, r6, lr}
 800edf2:	ec55 4b10 	vmov	r4, r5, d0
 800edf6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800edfa:	4606      	mov	r6, r0
 800edfc:	462b      	mov	r3, r5
 800edfe:	b999      	cbnz	r1, 800ee28 <scalbn+0x38>
 800ee00:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ee04:	4323      	orrs	r3, r4
 800ee06:	d03f      	beq.n	800ee88 <scalbn+0x98>
 800ee08:	4b35      	ldr	r3, [pc, #212]	; (800eee0 <scalbn+0xf0>)
 800ee0a:	4629      	mov	r1, r5
 800ee0c:	ee10 0a10 	vmov	r0, s0
 800ee10:	2200      	movs	r2, #0
 800ee12:	f7f1 fc01 	bl	8000618 <__aeabi_dmul>
 800ee16:	4b33      	ldr	r3, [pc, #204]	; (800eee4 <scalbn+0xf4>)
 800ee18:	429e      	cmp	r6, r3
 800ee1a:	4604      	mov	r4, r0
 800ee1c:	460d      	mov	r5, r1
 800ee1e:	da10      	bge.n	800ee42 <scalbn+0x52>
 800ee20:	a327      	add	r3, pc, #156	; (adr r3, 800eec0 <scalbn+0xd0>)
 800ee22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee26:	e01f      	b.n	800ee68 <scalbn+0x78>
 800ee28:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800ee2c:	4291      	cmp	r1, r2
 800ee2e:	d10c      	bne.n	800ee4a <scalbn+0x5a>
 800ee30:	ee10 2a10 	vmov	r2, s0
 800ee34:	4620      	mov	r0, r4
 800ee36:	4629      	mov	r1, r5
 800ee38:	f7f1 fa38 	bl	80002ac <__adddf3>
 800ee3c:	4604      	mov	r4, r0
 800ee3e:	460d      	mov	r5, r1
 800ee40:	e022      	b.n	800ee88 <scalbn+0x98>
 800ee42:	460b      	mov	r3, r1
 800ee44:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800ee48:	3936      	subs	r1, #54	; 0x36
 800ee4a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800ee4e:	4296      	cmp	r6, r2
 800ee50:	dd0d      	ble.n	800ee6e <scalbn+0x7e>
 800ee52:	2d00      	cmp	r5, #0
 800ee54:	a11c      	add	r1, pc, #112	; (adr r1, 800eec8 <scalbn+0xd8>)
 800ee56:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ee5a:	da02      	bge.n	800ee62 <scalbn+0x72>
 800ee5c:	a11c      	add	r1, pc, #112	; (adr r1, 800eed0 <scalbn+0xe0>)
 800ee5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ee62:	a319      	add	r3, pc, #100	; (adr r3, 800eec8 <scalbn+0xd8>)
 800ee64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee68:	f7f1 fbd6 	bl	8000618 <__aeabi_dmul>
 800ee6c:	e7e6      	b.n	800ee3c <scalbn+0x4c>
 800ee6e:	1872      	adds	r2, r6, r1
 800ee70:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ee74:	428a      	cmp	r2, r1
 800ee76:	dcec      	bgt.n	800ee52 <scalbn+0x62>
 800ee78:	2a00      	cmp	r2, #0
 800ee7a:	dd08      	ble.n	800ee8e <scalbn+0x9e>
 800ee7c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ee80:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ee84:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ee88:	ec45 4b10 	vmov	d0, r4, r5
 800ee8c:	bd70      	pop	{r4, r5, r6, pc}
 800ee8e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ee92:	da08      	bge.n	800eea6 <scalbn+0xb6>
 800ee94:	2d00      	cmp	r5, #0
 800ee96:	a10a      	add	r1, pc, #40	; (adr r1, 800eec0 <scalbn+0xd0>)
 800ee98:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ee9c:	dac0      	bge.n	800ee20 <scalbn+0x30>
 800ee9e:	a10e      	add	r1, pc, #56	; (adr r1, 800eed8 <scalbn+0xe8>)
 800eea0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eea4:	e7bc      	b.n	800ee20 <scalbn+0x30>
 800eea6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800eeaa:	3236      	adds	r2, #54	; 0x36
 800eeac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800eeb0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800eeb4:	4620      	mov	r0, r4
 800eeb6:	4b0c      	ldr	r3, [pc, #48]	; (800eee8 <scalbn+0xf8>)
 800eeb8:	2200      	movs	r2, #0
 800eeba:	e7d5      	b.n	800ee68 <scalbn+0x78>
 800eebc:	f3af 8000 	nop.w
 800eec0:	c2f8f359 	.word	0xc2f8f359
 800eec4:	01a56e1f 	.word	0x01a56e1f
 800eec8:	8800759c 	.word	0x8800759c
 800eecc:	7e37e43c 	.word	0x7e37e43c
 800eed0:	8800759c 	.word	0x8800759c
 800eed4:	fe37e43c 	.word	0xfe37e43c
 800eed8:	c2f8f359 	.word	0xc2f8f359
 800eedc:	81a56e1f 	.word	0x81a56e1f
 800eee0:	43500000 	.word	0x43500000
 800eee4:	ffff3cb0 	.word	0xffff3cb0
 800eee8:	3c900000 	.word	0x3c900000

0800eeec <with_errno>:
 800eeec:	b570      	push	{r4, r5, r6, lr}
 800eeee:	4604      	mov	r4, r0
 800eef0:	460d      	mov	r5, r1
 800eef2:	4616      	mov	r6, r2
 800eef4:	f7fd f926 	bl	800c144 <__errno>
 800eef8:	4629      	mov	r1, r5
 800eefa:	6006      	str	r6, [r0, #0]
 800eefc:	4620      	mov	r0, r4
 800eefe:	bd70      	pop	{r4, r5, r6, pc}

0800ef00 <xflow>:
 800ef00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ef02:	4614      	mov	r4, r2
 800ef04:	461d      	mov	r5, r3
 800ef06:	b108      	cbz	r0, 800ef0c <xflow+0xc>
 800ef08:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ef0c:	e9cd 2300 	strd	r2, r3, [sp]
 800ef10:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ef14:	4620      	mov	r0, r4
 800ef16:	4629      	mov	r1, r5
 800ef18:	f7f1 fb7e 	bl	8000618 <__aeabi_dmul>
 800ef1c:	2222      	movs	r2, #34	; 0x22
 800ef1e:	b003      	add	sp, #12
 800ef20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ef24:	f7ff bfe2 	b.w	800eeec <with_errno>

0800ef28 <__math_uflow>:
 800ef28:	b508      	push	{r3, lr}
 800ef2a:	2200      	movs	r2, #0
 800ef2c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ef30:	f7ff ffe6 	bl	800ef00 <xflow>
 800ef34:	ec41 0b10 	vmov	d0, r0, r1
 800ef38:	bd08      	pop	{r3, pc}

0800ef3a <__math_oflow>:
 800ef3a:	b508      	push	{r3, lr}
 800ef3c:	2200      	movs	r2, #0
 800ef3e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800ef42:	f7ff ffdd 	bl	800ef00 <xflow>
 800ef46:	ec41 0b10 	vmov	d0, r0, r1
 800ef4a:	bd08      	pop	{r3, pc}

0800ef4c <__ieee754_sqrt>:
 800ef4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef50:	ec55 4b10 	vmov	r4, r5, d0
 800ef54:	4e67      	ldr	r6, [pc, #412]	; (800f0f4 <__ieee754_sqrt+0x1a8>)
 800ef56:	43ae      	bics	r6, r5
 800ef58:	ee10 0a10 	vmov	r0, s0
 800ef5c:	ee10 2a10 	vmov	r2, s0
 800ef60:	4629      	mov	r1, r5
 800ef62:	462b      	mov	r3, r5
 800ef64:	d10d      	bne.n	800ef82 <__ieee754_sqrt+0x36>
 800ef66:	f7f1 fb57 	bl	8000618 <__aeabi_dmul>
 800ef6a:	4602      	mov	r2, r0
 800ef6c:	460b      	mov	r3, r1
 800ef6e:	4620      	mov	r0, r4
 800ef70:	4629      	mov	r1, r5
 800ef72:	f7f1 f99b 	bl	80002ac <__adddf3>
 800ef76:	4604      	mov	r4, r0
 800ef78:	460d      	mov	r5, r1
 800ef7a:	ec45 4b10 	vmov	d0, r4, r5
 800ef7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef82:	2d00      	cmp	r5, #0
 800ef84:	dc0b      	bgt.n	800ef9e <__ieee754_sqrt+0x52>
 800ef86:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ef8a:	4326      	orrs	r6, r4
 800ef8c:	d0f5      	beq.n	800ef7a <__ieee754_sqrt+0x2e>
 800ef8e:	b135      	cbz	r5, 800ef9e <__ieee754_sqrt+0x52>
 800ef90:	f7f1 f98a 	bl	80002a8 <__aeabi_dsub>
 800ef94:	4602      	mov	r2, r0
 800ef96:	460b      	mov	r3, r1
 800ef98:	f7f1 fc68 	bl	800086c <__aeabi_ddiv>
 800ef9c:	e7eb      	b.n	800ef76 <__ieee754_sqrt+0x2a>
 800ef9e:	1509      	asrs	r1, r1, #20
 800efa0:	f000 808d 	beq.w	800f0be <__ieee754_sqrt+0x172>
 800efa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800efa8:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800efac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800efb0:	07c9      	lsls	r1, r1, #31
 800efb2:	bf5c      	itt	pl
 800efb4:	005b      	lslpl	r3, r3, #1
 800efb6:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800efba:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800efbe:	bf58      	it	pl
 800efc0:	0052      	lslpl	r2, r2, #1
 800efc2:	2500      	movs	r5, #0
 800efc4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800efc8:	1076      	asrs	r6, r6, #1
 800efca:	0052      	lsls	r2, r2, #1
 800efcc:	f04f 0e16 	mov.w	lr, #22
 800efd0:	46ac      	mov	ip, r5
 800efd2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800efd6:	eb0c 0001 	add.w	r0, ip, r1
 800efda:	4298      	cmp	r0, r3
 800efdc:	bfde      	ittt	le
 800efde:	1a1b      	suble	r3, r3, r0
 800efe0:	eb00 0c01 	addle.w	ip, r0, r1
 800efe4:	186d      	addle	r5, r5, r1
 800efe6:	005b      	lsls	r3, r3, #1
 800efe8:	f1be 0e01 	subs.w	lr, lr, #1
 800efec:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800eff0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800eff4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800eff8:	d1ed      	bne.n	800efd6 <__ieee754_sqrt+0x8a>
 800effa:	4674      	mov	r4, lr
 800effc:	2720      	movs	r7, #32
 800effe:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800f002:	4563      	cmp	r3, ip
 800f004:	eb01 000e 	add.w	r0, r1, lr
 800f008:	dc02      	bgt.n	800f010 <__ieee754_sqrt+0xc4>
 800f00a:	d113      	bne.n	800f034 <__ieee754_sqrt+0xe8>
 800f00c:	4290      	cmp	r0, r2
 800f00e:	d811      	bhi.n	800f034 <__ieee754_sqrt+0xe8>
 800f010:	2800      	cmp	r0, #0
 800f012:	eb00 0e01 	add.w	lr, r0, r1
 800f016:	da57      	bge.n	800f0c8 <__ieee754_sqrt+0x17c>
 800f018:	f1be 0f00 	cmp.w	lr, #0
 800f01c:	db54      	blt.n	800f0c8 <__ieee754_sqrt+0x17c>
 800f01e:	f10c 0801 	add.w	r8, ip, #1
 800f022:	eba3 030c 	sub.w	r3, r3, ip
 800f026:	4290      	cmp	r0, r2
 800f028:	bf88      	it	hi
 800f02a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800f02e:	1a12      	subs	r2, r2, r0
 800f030:	440c      	add	r4, r1
 800f032:	46c4      	mov	ip, r8
 800f034:	005b      	lsls	r3, r3, #1
 800f036:	3f01      	subs	r7, #1
 800f038:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800f03c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800f040:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800f044:	d1dd      	bne.n	800f002 <__ieee754_sqrt+0xb6>
 800f046:	4313      	orrs	r3, r2
 800f048:	d01b      	beq.n	800f082 <__ieee754_sqrt+0x136>
 800f04a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800f0f8 <__ieee754_sqrt+0x1ac>
 800f04e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800f0fc <__ieee754_sqrt+0x1b0>
 800f052:	e9da 0100 	ldrd	r0, r1, [sl]
 800f056:	e9db 2300 	ldrd	r2, r3, [fp]
 800f05a:	f7f1 f925 	bl	80002a8 <__aeabi_dsub>
 800f05e:	e9da 8900 	ldrd	r8, r9, [sl]
 800f062:	4602      	mov	r2, r0
 800f064:	460b      	mov	r3, r1
 800f066:	4640      	mov	r0, r8
 800f068:	4649      	mov	r1, r9
 800f06a:	f7f1 fd51 	bl	8000b10 <__aeabi_dcmple>
 800f06e:	b140      	cbz	r0, 800f082 <__ieee754_sqrt+0x136>
 800f070:	f1b4 3fff 	cmp.w	r4, #4294967295
 800f074:	e9da 0100 	ldrd	r0, r1, [sl]
 800f078:	e9db 2300 	ldrd	r2, r3, [fp]
 800f07c:	d126      	bne.n	800f0cc <__ieee754_sqrt+0x180>
 800f07e:	3501      	adds	r5, #1
 800f080:	463c      	mov	r4, r7
 800f082:	106a      	asrs	r2, r5, #1
 800f084:	0863      	lsrs	r3, r4, #1
 800f086:	07e9      	lsls	r1, r5, #31
 800f088:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800f08c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800f090:	bf48      	it	mi
 800f092:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800f096:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800f09a:	461c      	mov	r4, r3
 800f09c:	e76d      	b.n	800ef7a <__ieee754_sqrt+0x2e>
 800f09e:	0ad3      	lsrs	r3, r2, #11
 800f0a0:	3815      	subs	r0, #21
 800f0a2:	0552      	lsls	r2, r2, #21
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d0fa      	beq.n	800f09e <__ieee754_sqrt+0x152>
 800f0a8:	02dc      	lsls	r4, r3, #11
 800f0aa:	d50a      	bpl.n	800f0c2 <__ieee754_sqrt+0x176>
 800f0ac:	f1c1 0420 	rsb	r4, r1, #32
 800f0b0:	fa22 f404 	lsr.w	r4, r2, r4
 800f0b4:	1e4d      	subs	r5, r1, #1
 800f0b6:	408a      	lsls	r2, r1
 800f0b8:	4323      	orrs	r3, r4
 800f0ba:	1b41      	subs	r1, r0, r5
 800f0bc:	e772      	b.n	800efa4 <__ieee754_sqrt+0x58>
 800f0be:	4608      	mov	r0, r1
 800f0c0:	e7f0      	b.n	800f0a4 <__ieee754_sqrt+0x158>
 800f0c2:	005b      	lsls	r3, r3, #1
 800f0c4:	3101      	adds	r1, #1
 800f0c6:	e7ef      	b.n	800f0a8 <__ieee754_sqrt+0x15c>
 800f0c8:	46e0      	mov	r8, ip
 800f0ca:	e7aa      	b.n	800f022 <__ieee754_sqrt+0xd6>
 800f0cc:	f7f1 f8ee 	bl	80002ac <__adddf3>
 800f0d0:	e9da 8900 	ldrd	r8, r9, [sl]
 800f0d4:	4602      	mov	r2, r0
 800f0d6:	460b      	mov	r3, r1
 800f0d8:	4640      	mov	r0, r8
 800f0da:	4649      	mov	r1, r9
 800f0dc:	f7f1 fd0e 	bl	8000afc <__aeabi_dcmplt>
 800f0e0:	b120      	cbz	r0, 800f0ec <__ieee754_sqrt+0x1a0>
 800f0e2:	1ca0      	adds	r0, r4, #2
 800f0e4:	bf08      	it	eq
 800f0e6:	3501      	addeq	r5, #1
 800f0e8:	3402      	adds	r4, #2
 800f0ea:	e7ca      	b.n	800f082 <__ieee754_sqrt+0x136>
 800f0ec:	3401      	adds	r4, #1
 800f0ee:	f024 0401 	bic.w	r4, r4, #1
 800f0f2:	e7c6      	b.n	800f082 <__ieee754_sqrt+0x136>
 800f0f4:	7ff00000 	.word	0x7ff00000
 800f0f8:	200001d8 	.word	0x200001d8
 800f0fc:	200001e0 	.word	0x200001e0

0800f100 <_init>:
 800f100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f102:	bf00      	nop
 800f104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f106:	bc08      	pop	{r3}
 800f108:	469e      	mov	lr, r3
 800f10a:	4770      	bx	lr

0800f10c <_fini>:
 800f10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f10e:	bf00      	nop
 800f110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f112:	bc08      	pop	{r3}
 800f114:	469e      	mov	lr, r3
 800f116:	4770      	bx	lr
