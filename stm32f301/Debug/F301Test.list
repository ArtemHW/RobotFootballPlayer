
F301Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008008  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000021c  08008198  08008198  00018198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083b4  080083b4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080083b4  080083b4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080083b4  080083b4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083b4  080083b4  000183b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083b8  080083b8  000183b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080083bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002c24  20000010  080083cc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002c34  080083cc  00022c34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ad77  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c32  00000000  00000000  0003adfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001700  00000000  00000000  0003ea30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011f5  00000000  00000000  00040130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018ec8  00000000  00000000  00041325  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c038  00000000  00000000  0005a1ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00099dc9  00000000  00000000  00076225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006044  00000000  00000000  0010fff0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  00116034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008180 	.word	0x08008180

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08008180 	.word	0x08008180

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <sendATCommand>:

#include <espATcommands.h>


void sendATCommand(UART_HandleTypeDef *huart, const char* atcom, int sizeOfAT, char* response, int sizeOfResp, int delayms)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b086      	sub	sp, #24
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	60f8      	str	r0, [r7, #12]
 80001ec:	60b9      	str	r1, [r7, #8]
 80001ee:	607a      	str	r2, [r7, #4]
 80001f0:	603b      	str	r3, [r7, #0]
//	if(atcom[sizeOfAT-1] == '\0') {
//		sizeOfAT -= 1;
//	}
	for(uint8_t i = 0; i < sizeOfAT; i++) {
 80001f2:	2300      	movs	r3, #0
 80001f4:	75fb      	strb	r3, [r7, #23]
 80001f6:	e00b      	b.n	8000210 <sendATCommand+0x2c>
		if(atcom[i] == '\0') {
 80001f8:	7dfb      	ldrb	r3, [r7, #23]
 80001fa:	68ba      	ldr	r2, [r7, #8]
 80001fc:	4413      	add	r3, r2
 80001fe:	781b      	ldrb	r3, [r3, #0]
 8000200:	2b00      	cmp	r3, #0
 8000202:	d102      	bne.n	800020a <sendATCommand+0x26>
			sizeOfAT = i + 1;
 8000204:	7dfb      	ldrb	r3, [r7, #23]
 8000206:	3301      	adds	r3, #1
 8000208:	607b      	str	r3, [r7, #4]
	for(uint8_t i = 0; i < sizeOfAT; i++) {
 800020a:	7dfb      	ldrb	r3, [r7, #23]
 800020c:	3301      	adds	r3, #1
 800020e:	75fb      	strb	r3, [r7, #23]
 8000210:	7dfb      	ldrb	r3, [r7, #23]
 8000212:	687a      	ldr	r2, [r7, #4]
 8000214:	429a      	cmp	r2, r3
 8000216:	dcef      	bgt.n	80001f8 <sendATCommand+0x14>
		}
	}
	for(uint8_t i = 0; i < sizeOfResp; i++) {
 8000218:	2300      	movs	r3, #0
 800021a:	75bb      	strb	r3, [r7, #22]
 800021c:	e007      	b.n	800022e <sendATCommand+0x4a>
		response[i] = 0;
 800021e:	7dbb      	ldrb	r3, [r7, #22]
 8000220:	683a      	ldr	r2, [r7, #0]
 8000222:	4413      	add	r3, r2
 8000224:	2200      	movs	r2, #0
 8000226:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < sizeOfResp; i++) {
 8000228:	7dbb      	ldrb	r3, [r7, #22]
 800022a:	3301      	adds	r3, #1
 800022c:	75bb      	strb	r3, [r7, #22]
 800022e:	7dbb      	ldrb	r3, [r7, #22]
 8000230:	6a3a      	ldr	r2, [r7, #32]
 8000232:	429a      	cmp	r2, r3
 8000234:	dcf3      	bgt.n	800021e <sendATCommand+0x3a>
	}
	HAL_UART_Transmit(huart, atcom, sizeOfAT, delayms);
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	b29a      	uxth	r2, r3
 800023a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800023c:	68b9      	ldr	r1, [r7, #8]
 800023e:	68f8      	ldr	r0, [r7, #12]
 8000240:	f004 fd20 	bl	8004c84 <HAL_UART_Transmit>
	HAL_UART_Receive(huart, response, sizeOfResp, delayms);
 8000244:	6a3b      	ldr	r3, [r7, #32]
 8000246:	b29a      	uxth	r2, r3
 8000248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800024a:	6839      	ldr	r1, [r7, #0]
 800024c:	68f8      	ldr	r0, [r7, #12]
 800024e:	f004 fda3 	bl	8004d98 <HAL_UART_Receive>
}
 8000252:	bf00      	nop
 8000254:	3718      	adds	r7, #24
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
	...

0800025c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800025c:	b480      	push	{r7}
 800025e:	b085      	sub	sp, #20
 8000260:	af00      	add	r7, sp, #0
 8000262:	60f8      	str	r0, [r7, #12]
 8000264:	60b9      	str	r1, [r7, #8]
 8000266:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	4a07      	ldr	r2, [pc, #28]	; (8000288 <vApplicationGetIdleTaskMemory+0x2c>)
 800026c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800026e:	68bb      	ldr	r3, [r7, #8]
 8000270:	4a06      	ldr	r2, [pc, #24]	; (800028c <vApplicationGetIdleTaskMemory+0x30>)
 8000272:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	2280      	movs	r2, #128	; 0x80
 8000278:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800027a:	bf00      	nop
 800027c:	3714      	adds	r7, #20
 800027e:	46bd      	mov	sp, r7
 8000280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000284:	4770      	bx	lr
 8000286:	bf00      	nop
 8000288:	2000002c 	.word	0x2000002c
 800028c:	20000084 	.word	0x20000084

08000290 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000290:	b480      	push	{r7}
 8000292:	b085      	sub	sp, #20
 8000294:	af00      	add	r7, sp, #0
 8000296:	60f8      	str	r0, [r7, #12]
 8000298:	60b9      	str	r1, [r7, #8]
 800029a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	4a07      	ldr	r2, [pc, #28]	; (80002bc <vApplicationGetTimerTaskMemory+0x2c>)
 80002a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80002a2:	68bb      	ldr	r3, [r7, #8]
 80002a4:	4a06      	ldr	r2, [pc, #24]	; (80002c0 <vApplicationGetTimerTaskMemory+0x30>)
 80002a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002ae:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80002b0:	bf00      	nop
 80002b2:	3714      	adds	r7, #20
 80002b4:	46bd      	mov	sp, r7
 80002b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ba:	4770      	bx	lr
 80002bc:	20000284 	.word	0x20000284
 80002c0:	200002dc 	.word	0x200002dc

080002c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002c4:	b480      	push	{r7}
 80002c6:	b083      	sub	sp, #12
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	4603      	mov	r3, r0
 80002cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	db0b      	blt.n	80002ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002d6:	79fb      	ldrb	r3, [r7, #7]
 80002d8:	f003 021f 	and.w	r2, r3, #31
 80002dc:	4907      	ldr	r1, [pc, #28]	; (80002fc <__NVIC_EnableIRQ+0x38>)
 80002de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002e2:	095b      	lsrs	r3, r3, #5
 80002e4:	2001      	movs	r0, #1
 80002e6:	fa00 f202 	lsl.w	r2, r0, r2
 80002ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002ee:	bf00      	nop
 80002f0:	370c      	adds	r7, #12
 80002f2:	46bd      	mov	sp, r7
 80002f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	e000e100 	.word	0xe000e100

08000300 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000300:	b480      	push	{r7}
 8000302:	b083      	sub	sp, #12
 8000304:	af00      	add	r7, sp, #0
 8000306:	4603      	mov	r3, r0
 8000308:	6039      	str	r1, [r7, #0]
 800030a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800030c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000310:	2b00      	cmp	r3, #0
 8000312:	db0a      	blt.n	800032a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000314:	683b      	ldr	r3, [r7, #0]
 8000316:	b2da      	uxtb	r2, r3
 8000318:	490c      	ldr	r1, [pc, #48]	; (800034c <__NVIC_SetPriority+0x4c>)
 800031a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800031e:	0112      	lsls	r2, r2, #4
 8000320:	b2d2      	uxtb	r2, r2
 8000322:	440b      	add	r3, r1
 8000324:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000328:	e00a      	b.n	8000340 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800032a:	683b      	ldr	r3, [r7, #0]
 800032c:	b2da      	uxtb	r2, r3
 800032e:	4908      	ldr	r1, [pc, #32]	; (8000350 <__NVIC_SetPriority+0x50>)
 8000330:	79fb      	ldrb	r3, [r7, #7]
 8000332:	f003 030f 	and.w	r3, r3, #15
 8000336:	3b04      	subs	r3, #4
 8000338:	0112      	lsls	r2, r2, #4
 800033a:	b2d2      	uxtb	r2, r2
 800033c:	440b      	add	r3, r1
 800033e:	761a      	strb	r2, [r3, #24]
}
 8000340:	bf00      	nop
 8000342:	370c      	adds	r7, #12
 8000344:	46bd      	mov	sp, r7
 8000346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034a:	4770      	bx	lr
 800034c:	e000e100 	.word	0xe000e100
 8000350:	e000ed00 	.word	0xe000ed00

08000354 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000354:	b5b0      	push	{r4, r5, r7, lr}
 8000356:	b0b8      	sub	sp, #224	; 0xe0
 8000358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	EncoderR.timeNew = 0;
 800035a:	4b7f      	ldr	r3, [pc, #508]	; (8000558 <main+0x204>)
 800035c:	2200      	movs	r2, #0
 800035e:	601a      	str	r2, [r3, #0]
	EncoderR.timeOld = 0;
 8000360:	4b7d      	ldr	r3, [pc, #500]	; (8000558 <main+0x204>)
 8000362:	2200      	movs	r2, #0
 8000364:	605a      	str	r2, [r3, #4]
	EncoderR.positionNew = 0;
 8000366:	4b7c      	ldr	r3, [pc, #496]	; (8000558 <main+0x204>)
 8000368:	2200      	movs	r2, #0
 800036a:	609a      	str	r2, [r3, #8]
	EncoderR.positionOld = 0;
 800036c:	4b7a      	ldr	r3, [pc, #488]	; (8000558 <main+0x204>)
 800036e:	2200      	movs	r2, #0
 8000370:	60da      	str	r2, [r3, #12]
	EncoderR.posCntUpdate = 0;
 8000372:	4b79      	ldr	r3, [pc, #484]	; (8000558 <main+0x204>)
 8000374:	2200      	movs	r2, #0
 8000376:	741a      	strb	r2, [r3, #16]
	EncoderR.rpm = 0;
 8000378:	4b77      	ldr	r3, [pc, #476]	; (8000558 <main+0x204>)
 800037a:	2200      	movs	r2, #0
 800037c:	615a      	str	r2, [r3, #20]

	EncoderL.timeNew = 0;
 800037e:	4b77      	ldr	r3, [pc, #476]	; (800055c <main+0x208>)
 8000380:	2200      	movs	r2, #0
 8000382:	601a      	str	r2, [r3, #0]
	EncoderL.timeOld = 0;
 8000384:	4b75      	ldr	r3, [pc, #468]	; (800055c <main+0x208>)
 8000386:	2200      	movs	r2, #0
 8000388:	605a      	str	r2, [r3, #4]
	EncoderL.positionNew = 0;
 800038a:	4b74      	ldr	r3, [pc, #464]	; (800055c <main+0x208>)
 800038c:	2200      	movs	r2, #0
 800038e:	609a      	str	r2, [r3, #8]
	EncoderL.positionOld = 0;
 8000390:	4b72      	ldr	r3, [pc, #456]	; (800055c <main+0x208>)
 8000392:	2200      	movs	r2, #0
 8000394:	60da      	str	r2, [r3, #12]
	EncoderL.posCntUpdate = 0;
 8000396:	4b71      	ldr	r3, [pc, #452]	; (800055c <main+0x208>)
 8000398:	2200      	movs	r2, #0
 800039a:	741a      	strb	r2, [r3, #16]
	EncoderL.rpm = 0;
 800039c:	4b6f      	ldr	r3, [pc, #444]	; (800055c <main+0x208>)
 800039e:	2200      	movs	r2, #0
 80003a0:	615a      	str	r2, [r3, #20]

	SoftPwmR.curValue = 0;
 80003a2:	4b6f      	ldr	r3, [pc, #444]	; (8000560 <main+0x20c>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	805a      	strh	r2, [r3, #2]
	SoftPwmR.reqValue = 0;
 80003a8:	4b6d      	ldr	r3, [pc, #436]	; (8000560 <main+0x20c>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	801a      	strh	r2, [r3, #0]
	SoftPwmR.pwmValue = 0;
 80003ae:	4b6c      	ldr	r3, [pc, #432]	; (8000560 <main+0x20c>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	809a      	strh	r2, [r3, #4]
	//SoftPwmR.softCounterValue = 0;
	SoftPwmR.status = 0;
 80003b4:	4b6a      	ldr	r3, [pc, #424]	; (8000560 <main+0x20c>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	719a      	strb	r2, [r3, #6]

	SoftPwmL.curValue = 0;
 80003ba:	4b6a      	ldr	r3, [pc, #424]	; (8000564 <main+0x210>)
 80003bc:	2200      	movs	r2, #0
 80003be:	805a      	strh	r2, [r3, #2]
	SoftPwmL.reqValue = 0;
 80003c0:	4b68      	ldr	r3, [pc, #416]	; (8000564 <main+0x210>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	801a      	strh	r2, [r3, #0]
	SoftPwmL.pwmValue = 0;
 80003c6:	4b67      	ldr	r3, [pc, #412]	; (8000564 <main+0x210>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	809a      	strh	r2, [r3, #4]
	//SoftPwmL.softCounterValue = 0;
	SoftPwmL.status = 0;
 80003cc:	4b65      	ldr	r3, [pc, #404]	; (8000564 <main+0x210>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	719a      	strb	r2, [r3, #6]

	softCounterValue = 0;
 80003d2:	4b65      	ldr	r3, [pc, #404]	; (8000568 <main+0x214>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003d8:	f001 fd2a 	bl	8001e30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003dc:	f000 f8ee 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003e0:	f000 fa62 	bl	80008a8 <MX_GPIO_Init>
  MX_ADC1_Init();
 80003e4:	f000 f948 	bl	8000678 <MX_ADC1_Init>
  MX_SPI2_Init();
 80003e8:	f000 f9a2 	bl	8000730 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 80003ec:	f000 fa2c 	bl	8000848 <MX_USART3_UART_Init>
  MX_TIM17_Init();
 80003f0:	f000 fa02 	bl	80007f8 <MX_TIM17_Init>
  MX_TIM16_Init();
 80003f4:	f000 f9da 	bl	80007ac <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  ADC1_configuration();
 80003f8:	f000 fb02 	bl	8000a00 <ADC1_configuration>
  TIM1_configuration();
 80003fc:	f000 fbde 	bl	8000bbc <TIM1_configuration>
  TIM2_configuration();
 8000400:	f000 fc54 	bl	8000cac <TIM2_configuration>
  TIM17_configuration();
 8000404:	f000 fcf4 	bl	8000df0 <TIM17_configuration>
  TIM16_configuration();
 8000408:	f000 fcdc 	bl	8000dc4 <TIM16_configuration>

  kToRpm = (64*1000*60)/256;
 800040c:	4b57      	ldr	r3, [pc, #348]	; (800056c <main+0x218>)
 800040e:	4a58      	ldr	r2, [pc, #352]	; (8000570 <main+0x21c>)
 8000410:	601a      	str	r2, [r3, #0]

  pc13EventGroup = xEventGroupCreate();
 8000412:	f005 f955 	bl	80056c0 <xEventGroupCreate>
 8000416:	4603      	mov	r3, r0
 8000418:	4a56      	ldr	r2, [pc, #344]	; (8000574 <main+0x220>)
 800041a:	6013      	str	r3, [r2, #0]
  pc14EventGroup = xEventGroupCreate();
 800041c:	f005 f950 	bl	80056c0 <xEventGroupCreate>
 8000420:	4603      	mov	r3, r0
 8000422:	4a55      	ldr	r2, [pc, #340]	; (8000578 <main+0x224>)
 8000424:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of PS_Measure */
  osThreadDef(PS_Measure, psMeasure, osPriorityNormal, 0, 128);
 8000426:	4b55      	ldr	r3, [pc, #340]	; (800057c <main+0x228>)
 8000428:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 800042c:	461d      	mov	r5, r3
 800042e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000430:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000432:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000436:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PS_MeasureHandle = osThreadCreate(osThread(PS_Measure), NULL);
 800043a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800043e:	2100      	movs	r1, #0
 8000440:	4618      	mov	r0, r3
 8000442:	f005 f8dd 	bl	8005600 <osThreadCreate>
 8000446:	4603      	mov	r3, r0
 8000448:	4a4d      	ldr	r2, [pc, #308]	; (8000580 <main+0x22c>)
 800044a:	6013      	str	r3, [r2, #0]

  /* definition and creation of PC_13_LED */
  osThreadDef(PC_13_LED, pc13LedCntrl, osPriorityNormal, 0, 128);
 800044c:	4b4d      	ldr	r3, [pc, #308]	; (8000584 <main+0x230>)
 800044e:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8000452:	461d      	mov	r5, r3
 8000454:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000456:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000458:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800045c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PC_13_LEDHandle = osThreadCreate(osThread(PC_13_LED), NULL);
 8000460:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000464:	2100      	movs	r1, #0
 8000466:	4618      	mov	r0, r3
 8000468:	f005 f8ca 	bl	8005600 <osThreadCreate>
 800046c:	4603      	mov	r3, r0
 800046e:	4a46      	ldr	r2, [pc, #280]	; (8000588 <main+0x234>)
 8000470:	6013      	str	r3, [r2, #0]

  /* definition and creation of PC_14_LED */
  osThreadDef(PC_14_LED, pc14LedCntrl, osPriorityNormal, 0, 128);
 8000472:	4b46      	ldr	r3, [pc, #280]	; (800058c <main+0x238>)
 8000474:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8000478:	461d      	mov	r5, r3
 800047a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800047c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800047e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000482:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PC_14_LEDHandle = osThreadCreate(osThread(PC_14_LED), NULL);
 8000486:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800048a:	2100      	movs	r1, #0
 800048c:	4618      	mov	r0, r3
 800048e:	f005 f8b7 	bl	8005600 <osThreadCreate>
 8000492:	4603      	mov	r3, r0
 8000494:	4a3e      	ldr	r2, [pc, #248]	; (8000590 <main+0x23c>)
 8000496:	6013      	str	r3, [r2, #0]

  /* definition and creation of EspCommunication */
  osThreadDef(EspCommunication, espCommunication, osPriorityAboveNormal, 0, 256);
 8000498:	4b3e      	ldr	r3, [pc, #248]	; (8000594 <main+0x240>)
 800049a:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800049e:	461d      	mov	r5, r3
 80004a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80004a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EspCommunicationHandle = osThreadCreate(osThread(EspCommunication), NULL);
 80004ac:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80004b0:	2100      	movs	r1, #0
 80004b2:	4618      	mov	r0, r3
 80004b4:	f005 f8a4 	bl	8005600 <osThreadCreate>
 80004b8:	4603      	mov	r3, r0
 80004ba:	4a37      	ldr	r2, [pc, #220]	; (8000598 <main+0x244>)
 80004bc:	6013      	str	r3, [r2, #0]

  /* definition and creation of EncoderR */
  osThreadDef(EncoderR, encoderR, osPriorityNormal, 0, 128);
 80004be:	4b37      	ldr	r3, [pc, #220]	; (800059c <main+0x248>)
 80004c0:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80004c4:	461d      	mov	r5, r3
 80004c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80004ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EncoderRHandle = osThreadCreate(osThread(EncoderR), NULL);
 80004d2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80004d6:	2100      	movs	r1, #0
 80004d8:	4618      	mov	r0, r3
 80004da:	f005 f891 	bl	8005600 <osThreadCreate>
 80004de:	4603      	mov	r3, r0
 80004e0:	4a2f      	ldr	r2, [pc, #188]	; (80005a0 <main+0x24c>)
 80004e2:	6013      	str	r3, [r2, #0]

  /* definition and creation of EncoderL */
  osThreadDef(EncoderL, encoderL, osPriorityNormal, 0, 128);
 80004e4:	4b2f      	ldr	r3, [pc, #188]	; (80005a4 <main+0x250>)
 80004e6:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80004ea:	461d      	mov	r5, r3
 80004ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80004f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EncoderLHandle = osThreadCreate(osThread(EncoderL), NULL);
 80004f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80004fc:	2100      	movs	r1, #0
 80004fe:	4618      	mov	r0, r3
 8000500:	f005 f87e 	bl	8005600 <osThreadCreate>
 8000504:	4603      	mov	r3, r0
 8000506:	4a28      	ldr	r2, [pc, #160]	; (80005a8 <main+0x254>)
 8000508:	6013      	str	r3, [r2, #0]

  /* definition and creation of SoftwarePwmR */
  osThreadDef(SoftwarePwmR, softwarePWMR, osPriorityNormal, 0, 256);
 800050a:	4b28      	ldr	r3, [pc, #160]	; (80005ac <main+0x258>)
 800050c:	f107 041c 	add.w	r4, r7, #28
 8000510:	461d      	mov	r5, r3
 8000512:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000514:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000516:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800051a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SoftwarePwmRHandle = osThreadCreate(osThread(SoftwarePwmR), NULL);
 800051e:	f107 031c 	add.w	r3, r7, #28
 8000522:	2100      	movs	r1, #0
 8000524:	4618      	mov	r0, r3
 8000526:	f005 f86b 	bl	8005600 <osThreadCreate>
 800052a:	4603      	mov	r3, r0
 800052c:	4a20      	ldr	r2, [pc, #128]	; (80005b0 <main+0x25c>)
 800052e:	6013      	str	r3, [r2, #0]

  /* definition and creation of SoftwarePwmL */
  osThreadDef(SoftwarePwmL, softwarePWML, osPriorityNormal, 0, 256);
 8000530:	4b20      	ldr	r3, [pc, #128]	; (80005b4 <main+0x260>)
 8000532:	463c      	mov	r4, r7
 8000534:	461d      	mov	r5, r3
 8000536:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000538:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800053a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800053e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SoftwarePwmLHandle = osThreadCreate(osThread(SoftwarePwmL), NULL);
 8000542:	463b      	mov	r3, r7
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f005 f85a 	bl	8005600 <osThreadCreate>
 800054c:	4603      	mov	r3, r0
 800054e:	4a1a      	ldr	r2, [pc, #104]	; (80005b8 <main+0x264>)
 8000550:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000552:	f005 f84e 	bl	80055f2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000556:	e7fe      	b.n	8000556 <main+0x202>
 8000558:	200008ec 	.word	0x200008ec
 800055c:	20000904 	.word	0x20000904
 8000560:	2000091c 	.word	0x2000091c
 8000564:	20000924 	.word	0x20000924
 8000568:	20000930 	.word	0x20000930
 800056c:	2000092c 	.word	0x2000092c
 8000570:	466a6000 	.word	0x466a6000
 8000574:	200008e4 	.word	0x200008e4
 8000578:	200008e8 	.word	0x200008e8
 800057c:	080081a4 	.word	0x080081a4
 8000580:	200008b0 	.word	0x200008b0
 8000584:	080081cc 	.word	0x080081cc
 8000588:	200008b4 	.word	0x200008b4
 800058c:	080081f4 	.word	0x080081f4
 8000590:	200008b8 	.word	0x200008b8
 8000594:	08008224 	.word	0x08008224
 8000598:	200008bc 	.word	0x200008bc
 800059c:	0800824c 	.word	0x0800824c
 80005a0:	200008c0 	.word	0x200008c0
 80005a4:	08008274 	.word	0x08008274
 80005a8:	200008c4 	.word	0x200008c4
 80005ac:	080082a0 	.word	0x080082a0
 80005b0:	200008c8 	.word	0x200008c8
 80005b4:	080082cc 	.word	0x080082cc
 80005b8:	200008cc 	.word	0x200008cc

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b09c      	sub	sp, #112	; 0x70
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80005c6:	2228      	movs	r2, #40	; 0x28
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f007 fd9e 	bl	800810c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005e0:	1d3b      	adds	r3, r7, #4
 80005e2:	2230      	movs	r2, #48	; 0x30
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f007 fd90 	bl	800810c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ec:	2302      	movs	r3, #2
 80005ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f0:	2301      	movs	r3, #1
 80005f2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f4:	2310      	movs	r3, #16
 80005f6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f8:	2302      	movs	r3, #2
 80005fa:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005fc:	2300      	movs	r3, #0
 80005fe:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000600:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000604:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000606:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800060a:	4618      	mov	r0, r3
 800060c:	f002 fb98 	bl	8002d40 <HAL_RCC_OscConfig>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000616:	f001 f879 	bl	800170c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061a:	230f      	movs	r3, #15
 800061c:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061e:	2302      	movs	r3, #2
 8000620:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000626:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800062a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000630:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000634:	2102      	movs	r1, #2
 8000636:	4618      	mov	r0, r3
 8000638:	f003 fbc0 	bl	8003dbc <HAL_RCC_ClockConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000642:	f001 f863 	bl	800170c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM16|RCC_PERIPHCLK_TIM17
 8000646:	4b0b      	ldr	r3, [pc, #44]	; (8000674 <SystemClock_Config+0xb8>)
 8000648:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC1;
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 800064a:	2300      	movs	r3, #0
 800064c:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
 800064e:	2300      	movs	r3, #0
 8000650:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV2;
 8000652:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000656:	61fb      	str	r3, [r7, #28]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	4618      	mov	r0, r3
 800065c:	f003 fe16 	bl	800428c <HAL_RCCEx_PeriphCLKConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000666:	f001 f851 	bl	800170c <Error_Handler>
  }
}
 800066a:	bf00      	nop
 800066c:	3770      	adds	r7, #112	; 0x70
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	00180080 	.word	0x00180080

08000678 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b086      	sub	sp, #24
 800067c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800067e:	463b      	mov	r3, r7
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]
 800068c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800068e:	4b27      	ldr	r3, [pc, #156]	; (800072c <MX_ADC1_Init+0xb4>)
 8000690:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000694:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000696:	4b25      	ldr	r3, [pc, #148]	; (800072c <MX_ADC1_Init+0xb4>)
 8000698:	2200      	movs	r2, #0
 800069a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800069c:	4b23      	ldr	r3, [pc, #140]	; (800072c <MX_ADC1_Init+0xb4>)
 800069e:	2200      	movs	r2, #0
 80006a0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006a2:	4b22      	ldr	r3, [pc, #136]	; (800072c <MX_ADC1_Init+0xb4>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006a8:	4b20      	ldr	r3, [pc, #128]	; (800072c <MX_ADC1_Init+0xb4>)
 80006aa:	2201      	movs	r2, #1
 80006ac:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006ae:	4b1f      	ldr	r3, [pc, #124]	; (800072c <MX_ADC1_Init+0xb4>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006b6:	4b1d      	ldr	r3, [pc, #116]	; (800072c <MX_ADC1_Init+0xb4>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006bc:	4b1b      	ldr	r3, [pc, #108]	; (800072c <MX_ADC1_Init+0xb4>)
 80006be:	2201      	movs	r2, #1
 80006c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006c2:	4b1a      	ldr	r3, [pc, #104]	; (800072c <MX_ADC1_Init+0xb4>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006c8:	4b18      	ldr	r3, [pc, #96]	; (800072c <MX_ADC1_Init+0xb4>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006ce:	4b17      	ldr	r3, [pc, #92]	; (800072c <MX_ADC1_Init+0xb4>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006d6:	4b15      	ldr	r3, [pc, #84]	; (800072c <MX_ADC1_Init+0xb4>)
 80006d8:	2204      	movs	r2, #4
 80006da:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006dc:	4b13      	ldr	r3, [pc, #76]	; (800072c <MX_ADC1_Init+0xb4>)
 80006de:	2200      	movs	r2, #0
 80006e0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80006e2:	4b12      	ldr	r3, [pc, #72]	; (800072c <MX_ADC1_Init+0xb4>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006e8:	4810      	ldr	r0, [pc, #64]	; (800072c <MX_ADC1_Init+0xb4>)
 80006ea:	f001 fbfb 	bl	8001ee4 <HAL_ADC_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 80006f4:	f001 f80a 	bl	800170c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80006f8:	2303      	movs	r3, #3
 80006fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006fc:	2301      	movs	r3, #1
 80006fe:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000700:	2300      	movs	r3, #0
 8000702:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000704:	2300      	movs	r3, #0
 8000706:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000708:	2300      	movs	r3, #0
 800070a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800070c:	2300      	movs	r3, #0
 800070e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000710:	463b      	mov	r3, r7
 8000712:	4619      	mov	r1, r3
 8000714:	4805      	ldr	r0, [pc, #20]	; (800072c <MX_ADC1_Init+0xb4>)
 8000716:	f001 fd6b 	bl	80021f0 <HAL_ADC_ConfigChannel>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000720:	f000 fff4 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000724:	bf00      	nop
 8000726:	3718      	adds	r7, #24
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	200006dc 	.word	0x200006dc

08000730 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000734:	4b1b      	ldr	r3, [pc, #108]	; (80007a4 <MX_SPI2_Init+0x74>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <MX_SPI2_Init+0x78>)
 8000738:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800073a:	4b1a      	ldr	r3, [pc, #104]	; (80007a4 <MX_SPI2_Init+0x74>)
 800073c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000740:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000742:	4b18      	ldr	r3, [pc, #96]	; (80007a4 <MX_SPI2_Init+0x74>)
 8000744:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000748:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800074a:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <MX_SPI2_Init+0x74>)
 800074c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000750:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000752:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <MX_SPI2_Init+0x74>)
 8000754:	2202      	movs	r2, #2
 8000756:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000758:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <MX_SPI2_Init+0x74>)
 800075a:	2201      	movs	r2, #1
 800075c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <MX_SPI2_Init+0x74>)
 8000760:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000764:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <MX_SPI2_Init+0x74>)
 8000768:	2220      	movs	r2, #32
 800076a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800076c:	4b0d      	ldr	r3, [pc, #52]	; (80007a4 <MX_SPI2_Init+0x74>)
 800076e:	2200      	movs	r2, #0
 8000770:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <MX_SPI2_Init+0x74>)
 8000774:	2200      	movs	r2, #0
 8000776:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000778:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <MX_SPI2_Init+0x74>)
 800077a:	2200      	movs	r2, #0
 800077c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800077e:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <MX_SPI2_Init+0x74>)
 8000780:	2207      	movs	r2, #7
 8000782:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000784:	4b07      	ldr	r3, [pc, #28]	; (80007a4 <MX_SPI2_Init+0x74>)
 8000786:	2200      	movs	r2, #0
 8000788:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800078a:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <MX_SPI2_Init+0x74>)
 800078c:	2200      	movs	r2, #0
 800078e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000790:	4804      	ldr	r0, [pc, #16]	; (80007a4 <MX_SPI2_Init+0x74>)
 8000792:	f003 feff 	bl	8004594 <HAL_SPI_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 800079c:	f000 ffb6 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	2000072c 	.word	0x2000072c
 80007a8:	40003800 	.word	0x40003800

080007ac <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <MX_TIM16_Init+0x44>)
 80007b2:	4a10      	ldr	r2, [pc, #64]	; (80007f4 <MX_TIM16_Init+0x48>)
 80007b4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 63;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <MX_TIM16_Init+0x44>)
 80007b8:	223f      	movs	r2, #63	; 0x3f
 80007ba:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007bc:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <MX_TIM16_Init+0x44>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10;
 80007c2:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <MX_TIM16_Init+0x44>)
 80007c4:	220a      	movs	r2, #10
 80007c6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c8:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_TIM16_Init+0x44>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80007ce:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <MX_TIM16_Init+0x44>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <MX_TIM16_Init+0x44>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80007da:	4805      	ldr	r0, [pc, #20]	; (80007f0 <MX_TIM16_Init+0x44>)
 80007dc:	f003 ff85 	bl	80046ea <HAL_TIM_Base_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 80007e6:	f000 ff91 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000790 	.word	0x20000790
 80007f4:	40014400 	.word	0x40014400

080007f8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80007fc:	4b10      	ldr	r3, [pc, #64]	; (8000840 <MX_TIM17_Init+0x48>)
 80007fe:	4a11      	ldr	r2, [pc, #68]	; (8000844 <MX_TIM17_Init+0x4c>)
 8000800:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 999;
 8000802:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <MX_TIM17_Init+0x48>)
 8000804:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000808:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800080a:	4b0d      	ldr	r3, [pc, #52]	; (8000840 <MX_TIM17_Init+0x48>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000810:	4b0b      	ldr	r3, [pc, #44]	; (8000840 <MX_TIM17_Init+0x48>)
 8000812:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000816:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000818:	4b09      	ldr	r3, [pc, #36]	; (8000840 <MX_TIM17_Init+0x48>)
 800081a:	2200      	movs	r2, #0
 800081c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800081e:	4b08      	ldr	r3, [pc, #32]	; (8000840 <MX_TIM17_Init+0x48>)
 8000820:	2200      	movs	r2, #0
 8000822:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000824:	4b06      	ldr	r3, [pc, #24]	; (8000840 <MX_TIM17_Init+0x48>)
 8000826:	2280      	movs	r2, #128	; 0x80
 8000828:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800082a:	4805      	ldr	r0, [pc, #20]	; (8000840 <MX_TIM17_Init+0x48>)
 800082c:	f003 ff5d 	bl	80046ea <HAL_TIM_Base_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8000836:	f000 ff69 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	200007dc 	.word	0x200007dc
 8000844:	40014800 	.word	0x40014800

08000848 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800084c:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <MX_USART3_UART_Init+0x58>)
 800084e:	4a15      	ldr	r2, [pc, #84]	; (80008a4 <MX_USART3_UART_Init+0x5c>)
 8000850:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000852:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <MX_USART3_UART_Init+0x58>)
 8000854:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000858:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800085a:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <MX_USART3_UART_Init+0x58>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000860:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <MX_USART3_UART_Init+0x58>)
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <MX_USART3_UART_Init+0x58>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800086c:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <MX_USART3_UART_Init+0x58>)
 800086e:	220c      	movs	r2, #12
 8000870:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000872:	4b0b      	ldr	r3, [pc, #44]	; (80008a0 <MX_USART3_UART_Init+0x58>)
 8000874:	2200      	movs	r2, #0
 8000876:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000878:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <MX_USART3_UART_Init+0x58>)
 800087a:	2200      	movs	r2, #0
 800087c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800087e:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <MX_USART3_UART_Init+0x58>)
 8000880:	2200      	movs	r2, #0
 8000882:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000884:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <MX_USART3_UART_Init+0x58>)
 8000886:	2200      	movs	r2, #0
 8000888:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800088a:	4805      	ldr	r0, [pc, #20]	; (80008a0 <MX_USART3_UART_Init+0x58>)
 800088c:	f004 f9ac 	bl	8004be8 <HAL_UART_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000896:	f000 ff39 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000828 	.word	0x20000828
 80008a4:	40004800 	.word	0x40004800

080008a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b088      	sub	sp, #32
 80008ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ae:	f107 030c 	add.w	r3, r7, #12
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
 80008bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008be:	4b4d      	ldr	r3, [pc, #308]	; (80009f4 <MX_GPIO_Init+0x14c>)
 80008c0:	695b      	ldr	r3, [r3, #20]
 80008c2:	4a4c      	ldr	r2, [pc, #304]	; (80009f4 <MX_GPIO_Init+0x14c>)
 80008c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80008c8:	6153      	str	r3, [r2, #20]
 80008ca:	4b4a      	ldr	r3, [pc, #296]	; (80009f4 <MX_GPIO_Init+0x14c>)
 80008cc:	695b      	ldr	r3, [r3, #20]
 80008ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d6:	4b47      	ldr	r3, [pc, #284]	; (80009f4 <MX_GPIO_Init+0x14c>)
 80008d8:	695b      	ldr	r3, [r3, #20]
 80008da:	4a46      	ldr	r2, [pc, #280]	; (80009f4 <MX_GPIO_Init+0x14c>)
 80008dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008e0:	6153      	str	r3, [r2, #20]
 80008e2:	4b44      	ldr	r3, [pc, #272]	; (80009f4 <MX_GPIO_Init+0x14c>)
 80008e4:	695b      	ldr	r3, [r3, #20]
 80008e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ee:	4b41      	ldr	r3, [pc, #260]	; (80009f4 <MX_GPIO_Init+0x14c>)
 80008f0:	695b      	ldr	r3, [r3, #20]
 80008f2:	4a40      	ldr	r2, [pc, #256]	; (80009f4 <MX_GPIO_Init+0x14c>)
 80008f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008f8:	6153      	str	r3, [r2, #20]
 80008fa:	4b3e      	ldr	r3, [pc, #248]	; (80009f4 <MX_GPIO_Init+0x14c>)
 80008fc:	695b      	ldr	r3, [r3, #20]
 80008fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000902:	603b      	str	r3, [r7, #0]
 8000904:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800090c:	483a      	ldr	r0, [pc, #232]	; (80009f8 <MX_GPIO_Init+0x150>)
 800090e:	f002 f9db 	bl	8002cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN12_Pin|_1A_Pin|_2A_Pin|EN34_Pin
 8000912:	2200      	movs	r2, #0
 8000914:	21f8      	movs	r1, #248	; 0xf8
 8000916:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800091a:	f002 f9d5 	bl	8002cc8 <HAL_GPIO_WritePin>
                          |_3A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, _4A_Pin|RST_ESP_Pin|EN_ESP_Pin|SPI2_CS_L_Pin
 800091e:	2200      	movs	r2, #0
 8000920:	f245 0107 	movw	r1, #20487	; 0x5007
 8000924:	4835      	ldr	r0, [pc, #212]	; (80009fc <MX_GPIO_Init+0x154>)
 8000926:	f002 f9cf 	bl	8002cc8 <HAL_GPIO_WritePin>
                          |SPI2_CS_R_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800092a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800092e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000930:	2301      	movs	r3, #1
 8000932:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000938:	2300      	movs	r3, #0
 800093a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800093c:	f107 030c 	add.w	r3, r7, #12
 8000940:	4619      	mov	r1, r3
 8000942:	482d      	ldr	r0, [pc, #180]	; (80009f8 <MX_GPIO_Init+0x150>)
 8000944:	f002 f84e 	bl	80029e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN12_Pin _1A_Pin _2A_Pin EN34_Pin
                           _3A_Pin */
  GPIO_InitStruct.Pin = EN12_Pin|_1A_Pin|_2A_Pin|EN34_Pin
 8000948:	23f8      	movs	r3, #248	; 0xf8
 800094a:	60fb      	str	r3, [r7, #12]
                          |_3A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094c:	2301      	movs	r3, #1
 800094e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000954:	2303      	movs	r3, #3
 8000956:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000958:	f107 030c 	add.w	r3, r7, #12
 800095c:	4619      	mov	r1, r3
 800095e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000962:	f002 f83f 	bl	80029e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : _4A_Pin */
  GPIO_InitStruct.Pin = _4A_Pin;
 8000966:	2301      	movs	r3, #1
 8000968:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096a:	2301      	movs	r3, #1
 800096c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000972:	2303      	movs	r3, #3
 8000974:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(_4A_GPIO_Port, &GPIO_InitStruct);
 8000976:	f107 030c 	add.w	r3, r7, #12
 800097a:	4619      	mov	r1, r3
 800097c:	481f      	ldr	r0, [pc, #124]	; (80009fc <MX_GPIO_Init+0x154>)
 800097e:	f002 f831 	bl	80029e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RST_ESP_Pin EN_ESP_Pin */
  GPIO_InitStruct.Pin = RST_ESP_Pin|EN_ESP_Pin;
 8000982:	2306      	movs	r3, #6
 8000984:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000986:	2301      	movs	r3, #1
 8000988:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000992:	f107 030c 	add.w	r3, r7, #12
 8000996:	4619      	mov	r1, r3
 8000998:	4818      	ldr	r0, [pc, #96]	; (80009fc <MX_GPIO_Init+0x154>)
 800099a:	f002 f823 	bl	80029e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_CS_L_Pin SPI2_CS_R_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_L_Pin|SPI2_CS_R_Pin;
 800099e:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80009a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a4:	2301      	movs	r3, #1
 80009a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80009ac:	2301      	movs	r3, #1
 80009ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b0:	f107 030c 	add.w	r3, r7, #12
 80009b4:	4619      	mov	r1, r3
 80009b6:	4811      	ldr	r0, [pc, #68]	; (80009fc <MX_GPIO_Init+0x154>)
 80009b8:	f002 f814 	bl	80029e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80009bc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80009c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009c2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009cc:	f107 030c 	add.w	r3, r7, #12
 80009d0:	4619      	mov	r1, r3
 80009d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d6:	f002 f805 	bl	80029e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80009da:	2200      	movs	r2, #0
 80009dc:	2105      	movs	r1, #5
 80009de:	2028      	movs	r0, #40	; 0x28
 80009e0:	f001 ffd6 	bl	8002990 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009e4:	2028      	movs	r0, #40	; 0x28
 80009e6:	f001 ffef 	bl	80029c8 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009ea:	bf00      	nop
 80009ec:	3720      	adds	r7, #32
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40021000 	.word	0x40021000
 80009f8:	48000800 	.word	0x48000800
 80009fc:	48000400 	.word	0x48000400

08000a00 <ADC1_configuration>:

/* USER CODE BEGIN 4 */
void ADC1_configuration(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
	//NVIC configuration
	NVIC->IP[11] |= 0x70; //Priority 7
 8000a04:	4b68      	ldr	r3, [pc, #416]	; (8000ba8 <ADC1_configuration+0x1a8>)
 8000a06:	f893 330b 	ldrb.w	r3, [r3, #779]	; 0x30b
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	4a66      	ldr	r2, [pc, #408]	; (8000ba8 <ADC1_configuration+0x1a8>)
 8000a0e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	f882 330b 	strb.w	r3, [r2, #779]	; 0x30b
	NVIC->ISER[0] |= (1<<11); //Enable DMA1 channel 1 interrupt
 8000a18:	4b63      	ldr	r3, [pc, #396]	; (8000ba8 <ADC1_configuration+0x1a8>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a62      	ldr	r2, [pc, #392]	; (8000ba8 <ADC1_configuration+0x1a8>)
 8000a1e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a22:	6013      	str	r3, [r2, #0]
	NVIC->IP[18] |= 0x70; //Priority 7
 8000a24:	4b60      	ldr	r3, [pc, #384]	; (8000ba8 <ADC1_configuration+0x1a8>)
 8000a26:	f893 3312 	ldrb.w	r3, [r3, #786]	; 0x312
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	4a5e      	ldr	r2, [pc, #376]	; (8000ba8 <ADC1_configuration+0x1a8>)
 8000a2e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	f882 3312 	strb.w	r3, [r2, #786]	; 0x312
	NVIC->ISER[0] |= (1<<18); //Enable ADC1 global interrupt
 8000a38:	4b5b      	ldr	r3, [pc, #364]	; (8000ba8 <ADC1_configuration+0x1a8>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a5a      	ldr	r2, [pc, #360]	; (8000ba8 <ADC1_configuration+0x1a8>)
 8000a3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a42:	6013      	str	r3, [r2, #0]
	//DMA configuration for ADC1
	RCC->AHBENR |= RCC_AHBENR_DMA1EN; // Enable the DMA1 clock
 8000a44:	4b59      	ldr	r3, [pc, #356]	; (8000bac <ADC1_configuration+0x1ac>)
 8000a46:	695b      	ldr	r3, [r3, #20]
 8000a48:	4a58      	ldr	r2, [pc, #352]	; (8000bac <ADC1_configuration+0x1ac>)
 8000a4a:	f043 0301 	orr.w	r3, r3, #1
 8000a4e:	6153      	str	r3, [r2, #20]
	DMA1_Channel1->CCR &= ~DMA_CCR_EN;
 8000a50:	4b57      	ldr	r3, [pc, #348]	; (8000bb0 <ADC1_configuration+0x1b0>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a56      	ldr	r2, [pc, #344]	; (8000bb0 <ADC1_configuration+0x1b0>)
 8000a56:	f023 0301 	bic.w	r3, r3, #1
 8000a5a:	6013      	str	r3, [r2, #0]

	DMA1_Channel1->CCR |= (1<<10); // Bits 11:10 MSIZE[1:0]: Memory size  01: 16-bits
 8000a5c:	4b54      	ldr	r3, [pc, #336]	; (8000bb0 <ADC1_configuration+0x1b0>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a53      	ldr	r2, [pc, #332]	; (8000bb0 <ADC1_configuration+0x1b0>)
 8000a62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a66:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= (1<<8); // Bits 9:8 PSIZE[1:0]: Peripheral size  01: 16-bits
 8000a68:	4b51      	ldr	r3, [pc, #324]	; (8000bb0 <ADC1_configuration+0x1b0>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a50      	ldr	r2, [pc, #320]	; (8000bb0 <ADC1_configuration+0x1b0>)
 8000a6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a72:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= DMA_CCR_MINC;
 8000a74:	4b4e      	ldr	r3, [pc, #312]	; (8000bb0 <ADC1_configuration+0x1b0>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a4d      	ldr	r2, [pc, #308]	; (8000bb0 <ADC1_configuration+0x1b0>)
 8000a7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a7e:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= DMA_CCR_CIRC;
 8000a80:	4b4b      	ldr	r3, [pc, #300]	; (8000bb0 <ADC1_configuration+0x1b0>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a4a      	ldr	r2, [pc, #296]	; (8000bb0 <ADC1_configuration+0x1b0>)
 8000a86:	f043 0320 	orr.w	r3, r3, #32
 8000a8a:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= DMA_CCR_TCIE;
 8000a8c:	4b48      	ldr	r3, [pc, #288]	; (8000bb0 <ADC1_configuration+0x1b0>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a47      	ldr	r2, [pc, #284]	; (8000bb0 <ADC1_configuration+0x1b0>)
 8000a92:	f043 0302 	orr.w	r3, r3, #2
 8000a96:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR &= ~DMA_CCR_HTIE;
 8000a98:	4b45      	ldr	r3, [pc, #276]	; (8000bb0 <ADC1_configuration+0x1b0>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a44      	ldr	r2, [pc, #272]	; (8000bb0 <ADC1_configuration+0x1b0>)
 8000a9e:	f023 0304 	bic.w	r3, r3, #4
 8000aa2:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR &= ~DMA_CCR_TEIE;
 8000aa4:	4b42      	ldr	r3, [pc, #264]	; (8000bb0 <ADC1_configuration+0x1b0>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a41      	ldr	r2, [pc, #260]	; (8000bb0 <ADC1_configuration+0x1b0>)
 8000aaa:	f023 0308 	bic.w	r3, r3, #8
 8000aae:	6013      	str	r3, [r2, #0]

	DMA1_Channel1->CNDTR = 10;
 8000ab0:	4b3f      	ldr	r3, [pc, #252]	; (8000bb0 <ADC1_configuration+0x1b0>)
 8000ab2:	220a      	movs	r2, #10
 8000ab4:	605a      	str	r2, [r3, #4]
	DMA1_Channel1->CPAR = (uint32_t)&(ADC1->DR);
 8000ab6:	4b3e      	ldr	r3, [pc, #248]	; (8000bb0 <ADC1_configuration+0x1b0>)
 8000ab8:	4a3e      	ldr	r2, [pc, #248]	; (8000bb4 <ADC1_configuration+0x1b4>)
 8000aba:	609a      	str	r2, [r3, #8]
	DMA1_Channel1->CMAR = (uint32_t)&batteryVoltage[0];
 8000abc:	4b3c      	ldr	r3, [pc, #240]	; (8000bb0 <ADC1_configuration+0x1b0>)
 8000abe:	4a3e      	ldr	r2, [pc, #248]	; (8000bb8 <ADC1_configuration+0x1b8>)
 8000ac0:	60da      	str	r2, [r3, #12]
//	ADC1->CR |= ADC_CR_ADEN;
//	while((ADC1->ISR & ADC_ISR_ADRDY) != ADC_ISR_ADRDY) __asm__ volatile("NOP");
//	ADC1->CR |= ADC_CR_ADSTART;
//	HAL_Delay(20);
//	DMA1_Channel1->CCR |= DMA_CCR_EN;
	__asm__ volatile("NOP");
 8000ac2:	bf00      	nop
	if(batteryVoltage[0] == 0) {
 8000ac4:	4b3c      	ldr	r3, [pc, #240]	; (8000bb8 <ADC1_configuration+0x1b8>)
 8000ac6:	881b      	ldrh	r3, [r3, #0]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d16a      	bne.n	8000ba2 <ADC1_configuration+0x1a2>
		if((ADC1->CR & ADC_CR_ADEN) == ADC_CR_ADEN) {
 8000acc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000ad0:	689b      	ldr	r3, [r3, #8]
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d12d      	bne.n	8000b36 <ADC1_configuration+0x136>
			DMA1_Channel1->CCR &= ~DMA_CCR_EN;
 8000ada:	4b35      	ldr	r3, [pc, #212]	; (8000bb0 <ADC1_configuration+0x1b0>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a34      	ldr	r2, [pc, #208]	; (8000bb0 <ADC1_configuration+0x1b0>)
 8000ae0:	f023 0301 	bic.w	r3, r3, #1
 8000ae4:	6013      	str	r3, [r2, #0]
			ADC1->CR |= ADC_CR_ADSTP;
 8000ae6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000aea:	689b      	ldr	r3, [r3, #8]
 8000aec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000af0:	f043 0310 	orr.w	r3, r3, #16
 8000af4:	6093      	str	r3, [r2, #8]
			while((ADC1->CR & ADC_CR_ADSTP) == ADC_CR_ADSTP) __asm__ volatile("NOP");
 8000af6:	e000      	b.n	8000afa <ADC1_configuration+0xfa>
 8000af8:	bf00      	nop
 8000afa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000afe:	689b      	ldr	r3, [r3, #8]
 8000b00:	f003 0310 	and.w	r3, r3, #16
 8000b04:	2b10      	cmp	r3, #16
 8000b06:	d0f7      	beq.n	8000af8 <ADC1_configuration+0xf8>
			HAL_Delay(5);
 8000b08:	2005      	movs	r0, #5
 8000b0a:	f001 f9c7 	bl	8001e9c <HAL_Delay>
			ADC1->CR |= ADC_CR_ADDIS;
 8000b0e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b18:	f043 0302 	orr.w	r3, r3, #2
 8000b1c:	6093      	str	r3, [r2, #8]
			while((ADC1->CR & ADC_CR_ADDIS) == ADC_CR_ADDIS) __asm__ volatile("NOP");
 8000b1e:	e000      	b.n	8000b22 <ADC1_configuration+0x122>
 8000b20:	bf00      	nop
 8000b22:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000b26:	689b      	ldr	r3, [r3, #8]
 8000b28:	f003 0302 	and.w	r3, r3, #2
 8000b2c:	2b02      	cmp	r3, #2
 8000b2e:	d0f7      	beq.n	8000b20 <ADC1_configuration+0x120>
			HAL_Delay(20);
 8000b30:	2014      	movs	r0, #20
 8000b32:	f001 f9b3 	bl	8001e9c <HAL_Delay>
		}
		MX_ADC1_Init();
 8000b36:	f7ff fd9f 	bl	8000678 <MX_ADC1_Init>
		ADC1->CFGR |= ADC_CFGR_DMACFG;
 8000b3a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b44:	f043 0302 	orr.w	r3, r3, #2
 8000b48:	60d3      	str	r3, [r2, #12]
		ADC1->CFGR |= ADC_CFGR_DMAEN;
 8000b4a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	60d3      	str	r3, [r2, #12]
		ADC1->CR |= ADC_CR_ADEN;
 8000b5a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000b5e:	689b      	ldr	r3, [r3, #8]
 8000b60:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b64:	f043 0301 	orr.w	r3, r3, #1
 8000b68:	6093      	str	r3, [r2, #8]
		while((ADC1->ISR & ADC_ISR_ADRDY) != ADC_ISR_ADRDY) __asm__ volatile("NOP");
 8000b6a:	e000      	b.n	8000b6e <ADC1_configuration+0x16e>
 8000b6c:	bf00      	nop
 8000b6e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f003 0301 	and.w	r3, r3, #1
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d1f7      	bne.n	8000b6c <ADC1_configuration+0x16c>
		ADC1->CR |= ADC_CR_ADSTART;
 8000b7c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000b80:	689b      	ldr	r3, [r3, #8]
 8000b82:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b86:	f043 0304 	orr.w	r3, r3, #4
 8000b8a:	6093      	str	r3, [r2, #8]
		HAL_Delay(20);
 8000b8c:	2014      	movs	r0, #20
 8000b8e:	f001 f985 	bl	8001e9c <HAL_Delay>
		DMA1_Channel1->CCR |= DMA_CCR_EN;
 8000b92:	4b07      	ldr	r3, [pc, #28]	; (8000bb0 <ADC1_configuration+0x1b0>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a06      	ldr	r2, [pc, #24]	; (8000bb0 <ADC1_configuration+0x1b0>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	6013      	str	r3, [r2, #0]
		__asm__ volatile("NOP");
 8000b9e:	bf00      	nop
	}
	return;
 8000ba0:	bf00      	nop
 8000ba2:	bf00      	nop
}
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	e000e100 	.word	0xe000e100
 8000bac:	40021000 	.word	0x40021000
 8000bb0:	40020008 	.word	0x40020008
 8000bb4:	50000040 	.word	0x50000040
 8000bb8:	200008d0 	.word	0x200008d0

08000bbc <TIM1_configuration>:

void TIM1_configuration(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
    // Enable the TIM1 clock
    RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8000bc0:	4b38      	ldr	r3, [pc, #224]	; (8000ca4 <TIM1_configuration+0xe8>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	4a37      	ldr	r2, [pc, #220]	; (8000ca4 <TIM1_configuration+0xe8>)
 8000bc6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bca:	6193      	str	r3, [r2, #24]

    // Configure GPIO pins for TIM1 PA9-CH2 and PA8-CH1
    GPIOA->MODER |= (1<<17);
 8000bcc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000bd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bda:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (1<<19);
 8000bdc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000be6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000bea:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR |= (1<<17); //Pull-down
 8000bec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000bf0:	68db      	ldr	r3, [r3, #12]
 8000bf2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000bf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bfa:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR |= (1<<19); //Pull-down
 8000bfc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c00:	68db      	ldr	r3, [r3, #12]
 8000c02:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c0a:	60d3      	str	r3, [r2, #12]
    GPIOA->AFR[1] |= (6); //AF6
 8000c0c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c12:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c16:	f043 0306 	orr.w	r3, r3, #6
 8000c1a:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOA->AFR[1] |= (6<<4); //AF6
 8000c1c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c22:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000c26:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000c2a:	6253      	str	r3, [r2, #36]	; 0x24

    // Configure TIM1
	TIM1->CR1 |= TIM_CR1_ARPE; //ARPE: Auto-reload preload enable
 8000c2c:	4b1e      	ldr	r3, [pc, #120]	; (8000ca8 <TIM1_configuration+0xec>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a1d      	ldr	r2, [pc, #116]	; (8000ca8 <TIM1_configuration+0xec>)
 8000c32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c36:	6013      	str	r3, [r2, #0]
	TIM1->SMCR |= (TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0); // Encoder mode 3
 8000c38:	4b1b      	ldr	r3, [pc, #108]	; (8000ca8 <TIM1_configuration+0xec>)
 8000c3a:	689b      	ldr	r3, [r3, #8]
 8000c3c:	4a1a      	ldr	r2, [pc, #104]	; (8000ca8 <TIM1_configuration+0xec>)
 8000c3e:	f043 0303 	orr.w	r3, r3, #3
 8000c42:	6093      	str	r3, [r2, #8]
	TIM1->DIER |= TIM_DIER_UIE; //UIE: Update interrupt enable
 8000c44:	4b18      	ldr	r3, [pc, #96]	; (8000ca8 <TIM1_configuration+0xec>)
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	4a17      	ldr	r2, [pc, #92]	; (8000ca8 <TIM1_configuration+0xec>)
 8000c4a:	f043 0301 	orr.w	r3, r3, #1
 8000c4e:	60d3      	str	r3, [r2, #12]

	TIM1->CCMR1 |= (1<<0);
 8000c50:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <TIM1_configuration+0xec>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	4a14      	ldr	r2, [pc, #80]	; (8000ca8 <TIM1_configuration+0xec>)
 8000c56:	f043 0301 	orr.w	r3, r3, #1
 8000c5a:	6193      	str	r3, [r2, #24]
	TIM1->CCMR1 |= (1<<8);
 8000c5c:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <TIM1_configuration+0xec>)
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	4a11      	ldr	r2, [pc, #68]	; (8000ca8 <TIM1_configuration+0xec>)
 8000c62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c66:	6193      	str	r3, [r2, #24]
	TIM1->CCER |= (1<<0);
 8000c68:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <TIM1_configuration+0xec>)
 8000c6a:	6a1b      	ldr	r3, [r3, #32]
 8000c6c:	4a0e      	ldr	r2, [pc, #56]	; (8000ca8 <TIM1_configuration+0xec>)
 8000c6e:	f043 0301 	orr.w	r3, r3, #1
 8000c72:	6213      	str	r3, [r2, #32]
	TIM1->CCER |= (1<<4);
 8000c74:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <TIM1_configuration+0xec>)
 8000c76:	6a1b      	ldr	r3, [r3, #32]
 8000c78:	4a0b      	ldr	r2, [pc, #44]	; (8000ca8 <TIM1_configuration+0xec>)
 8000c7a:	f043 0310 	orr.w	r3, r3, #16
 8000c7e:	6213      	str	r3, [r2, #32]

	TIM1->PSC = 7; //7+1 = 8
 8000c80:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <TIM1_configuration+0xec>)
 8000c82:	2207      	movs	r2, #7
 8000c84:	629a      	str	r2, [r3, #40]	; 0x28

//	TIM1->RCR = 0xFFFF; // Repetition counter value

    // Enable the TIM1 interrupt
    NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000c86:	2019      	movs	r0, #25
 8000c88:	f7ff fb1c 	bl	80002c4 <__NVIC_EnableIRQ>

    // Set priority for the TIM1 interrupt
    NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5); // Adjust priority as needed
 8000c8c:	2105      	movs	r1, #5
 8000c8e:	2019      	movs	r0, #25
 8000c90:	f7ff fb36 	bl	8000300 <__NVIC_SetPriority>

    // Enable the TIM1 counter
    TIM1->CR1 |= TIM_CR1_CEN;
 8000c94:	4b04      	ldr	r3, [pc, #16]	; (8000ca8 <TIM1_configuration+0xec>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a03      	ldr	r2, [pc, #12]	; (8000ca8 <TIM1_configuration+0xec>)
 8000c9a:	f043 0301 	orr.w	r3, r3, #1
 8000c9e:	6013      	str	r3, [r2, #0]
}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	40012c00 	.word	0x40012c00

08000cac <TIM2_configuration>:

void TIM2_configuration(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
    // Enable the TIM2 clock
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000cb0:	4b43      	ldr	r3, [pc, #268]	; (8000dc0 <TIM2_configuration+0x114>)
 8000cb2:	69db      	ldr	r3, [r3, #28]
 8000cb4:	4a42      	ldr	r2, [pc, #264]	; (8000dc0 <TIM2_configuration+0x114>)
 8000cb6:	f043 0301 	orr.w	r3, r3, #1
 8000cba:	61d3      	str	r3, [r2, #28]

    // Configure GPIO pins for TIM2 PA1-CH2 and PA0-CH1
    GPIOA->MODER |= (1<<1);
 8000cbc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000cc6:	f043 0302 	orr.w	r3, r3, #2
 8000cca:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (1<<3);
 8000ccc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000cd6:	f043 0308 	orr.w	r3, r3, #8
 8000cda:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR |= (1<<1); //Pull-down
 8000cdc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ce0:	68db      	ldr	r3, [r3, #12]
 8000ce2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000ce6:	f043 0302 	orr.w	r3, r3, #2
 8000cea:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR |= (1<<3); //Pull-down
 8000cec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000cf0:	68db      	ldr	r3, [r3, #12]
 8000cf2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000cf6:	f043 0308 	orr.w	r3, r3, #8
 8000cfa:	60d3      	str	r3, [r2, #12]
    GPIOA->AFR[0] |= (1); //AF1
 8000cfc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d00:	6a1b      	ldr	r3, [r3, #32]
 8000d02:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d06:	f043 0301 	orr.w	r3, r3, #1
 8000d0a:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (1<<4); //AF1
 8000d0c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d10:	6a1b      	ldr	r3, [r3, #32]
 8000d12:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d16:	f043 0310 	orr.w	r3, r3, #16
 8000d1a:	6213      	str	r3, [r2, #32]

    // Configure TIM2
	TIM2->CR1 |= TIM_CR1_ARPE; //ARPE: Auto-reload preload enable
 8000d1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d2a:	6013      	str	r3, [r2, #0]
	TIM2->SMCR |= (TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0); // Encoder mode 3
 8000d2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d36:	f043 0303 	orr.w	r3, r3, #3
 8000d3a:	6093      	str	r3, [r2, #8]
	TIM2->DIER |= TIM_DIER_UIE; //UIE: Update interrupt enable
 8000d3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d40:	68db      	ldr	r3, [r3, #12]
 8000d42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d46:	f043 0301 	orr.w	r3, r3, #1
 8000d4a:	60d3      	str	r3, [r2, #12]

	TIM2->CCMR1 |= (1<<0);
 8000d4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d50:	699b      	ldr	r3, [r3, #24]
 8000d52:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d56:	f043 0301 	orr.w	r3, r3, #1
 8000d5a:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= (1<<8);
 8000d5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d60:	699b      	ldr	r3, [r3, #24]
 8000d62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d6a:	6193      	str	r3, [r2, #24]
	TIM2->CCER |= (1<<0);
 8000d6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d70:	6a1b      	ldr	r3, [r3, #32]
 8000d72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d76:	f043 0301 	orr.w	r3, r3, #1
 8000d7a:	6213      	str	r3, [r2, #32]
	TIM2->CCER |= (1<<4);
 8000d7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d80:	6a1b      	ldr	r3, [r3, #32]
 8000d82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d86:	f043 0310 	orr.w	r3, r3, #16
 8000d8a:	6213      	str	r3, [r2, #32]

	TIM2->PSC = 7; //7+1 = 8
 8000d8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d90:	2207      	movs	r2, #7
 8000d92:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 0xFFFF; //65535
 8000d94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d9c:	62da      	str	r2, [r3, #44]	; 0x2c

    // Enable the TIM2 interrupt
    NVIC_EnableIRQ(TIM2_IRQn);
 8000d9e:	201c      	movs	r0, #28
 8000da0:	f7ff fa90 	bl	80002c4 <__NVIC_EnableIRQ>

    // Set priority for the TIM2 interrupt
    NVIC_SetPriority(TIM2_IRQn, 5); // Adjust priority as needed
 8000da4:	2105      	movs	r1, #5
 8000da6:	201c      	movs	r0, #28
 8000da8:	f7ff faaa 	bl	8000300 <__NVIC_SetPriority>

    // Enable the TIM2 counter
    TIM2->CR1 |= TIM_CR1_CEN;
 8000dac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000db6:	f043 0301 	orr.w	r3, r3, #1
 8000dba:	6013      	str	r3, [r2, #0]
}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40021000 	.word	0x40021000

08000dc4 <TIM16_configuration>:

void TIM16_configuration(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
	TIM16->DIER |= TIM_DIER_UIE; //UIE: Update interrupt enable
 8000dc8:	4b08      	ldr	r3, [pc, #32]	; (8000dec <TIM16_configuration+0x28>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	4a07      	ldr	r2, [pc, #28]	; (8000dec <TIM16_configuration+0x28>)
 8000dce:	f043 0301 	orr.w	r3, r3, #1
 8000dd2:	60d3      	str	r3, [r2, #12]
	TIM16->CR1 |= TIM_CR1_CEN;
 8000dd4:	4b05      	ldr	r3, [pc, #20]	; (8000dec <TIM16_configuration+0x28>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a04      	ldr	r2, [pc, #16]	; (8000dec <TIM16_configuration+0x28>)
 8000dda:	f043 0301 	orr.w	r3, r3, #1
 8000dde:	6013      	str	r3, [r2, #0]
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	40014400 	.word	0x40014400

08000df0 <TIM17_configuration>:

void TIM17_configuration(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
	TIM17->DIER |= TIM_DIER_UIE; //UIE: Update interrupt enable
 8000df4:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <TIM17_configuration+0x28>)
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	4a07      	ldr	r2, [pc, #28]	; (8000e18 <TIM17_configuration+0x28>)
 8000dfa:	f043 0301 	orr.w	r3, r3, #1
 8000dfe:	60d3      	str	r3, [r2, #12]
	TIM17->CR1 |= TIM_CR1_CEN;
 8000e00:	4b05      	ldr	r3, [pc, #20]	; (8000e18 <TIM17_configuration+0x28>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a04      	ldr	r2, [pc, #16]	; (8000e18 <TIM17_configuration+0x28>)
 8000e06:	f043 0301 	orr.w	r3, r3, #1
 8000e0a:	6013      	str	r3, [r2, #0]
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	40014800 	.word	0x40014800

08000e1c <psMeasure>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_psMeasure */
void psMeasure(void const * argument)
{
 8000e1c:	b590      	push	{r4, r7, lr}
 8000e1e:	b08d      	sub	sp, #52	; 0x34
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	char measureResult[30];
	memset(measureResult, ' ', sizeof(measureResult));
 8000e24:	f107 030c 	add.w	r3, r7, #12
 8000e28:	221e      	movs	r2, #30
 8000e2a:	2120      	movs	r1, #32
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f007 f96d 	bl	800810c <memset>
  /* Infinite loop */
  for(;;)
  {
    osDelay(8);
 8000e32:	2008      	movs	r0, #8
 8000e34:	f004 fc30 	bl	8005698 <osDelay>
    uint16_t avrBatVoltage = 0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	85fb      	strh	r3, [r7, #46]	; 0x2e
    for(uint8_t i = 0; i < (sizeof(batteryVoltage)/sizeof(batteryVoltage[0])); i++) {
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8000e42:	e00c      	b.n	8000e5e <psMeasure+0x42>
    	avrBatVoltage += batteryVoltage[i];
 8000e44:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000e48:	4a45      	ldr	r2, [pc, #276]	; (8000f60 <psMeasure+0x144>)
 8000e4a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000e4e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000e50:	4413      	add	r3, r2
 8000e52:	85fb      	strh	r3, [r7, #46]	; 0x2e
    for(uint8_t i = 0; i < (sizeof(batteryVoltage)/sizeof(batteryVoltage[0])); i++) {
 8000e54:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000e58:	3301      	adds	r3, #1
 8000e5a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8000e5e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000e62:	2b09      	cmp	r3, #9
 8000e64:	d9ee      	bls.n	8000e44 <psMeasure+0x28>
    }
    avrBatVoltage = avrBatVoltage / (sizeof(batteryVoltage)/sizeof(batteryVoltage[0]));
 8000e66:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000e68:	4a3e      	ldr	r2, [pc, #248]	; (8000f64 <psMeasure+0x148>)
 8000e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e6e:	08db      	lsrs	r3, r3, #3
 8000e70:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if(avrBatVoltage > BATMAXV) {
 8000e72:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000e74:	f640 0298 	movw	r2, #2200	; 0x898
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d92a      	bls.n	8000ed2 <psMeasure+0xb6>
    	memset(measureResult, ' ', sizeof(measureResult));
 8000e7c:	f107 030c 	add.w	r3, r7, #12
 8000e80:	221e      	movs	r2, #30
 8000e82:	2120      	movs	r1, #32
 8000e84:	4618      	mov	r0, r3
 8000e86:	f007 f941 	bl	800810c <memset>
    	strcpy(measureResult, "Voltage > MAX");
 8000e8a:	f107 030c 	add.w	r3, r7, #12
 8000e8e:	4a36      	ldr	r2, [pc, #216]	; (8000f68 <psMeasure+0x14c>)
 8000e90:	461c      	mov	r4, r3
 8000e92:	4613      	mov	r3, r2
 8000e94:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e96:	c407      	stmia	r4!, {r0, r1, r2}
 8000e98:	8023      	strh	r3, [r4, #0]
    	xEventGroupClearBits(pc13EventGroup, 0xFFFFFF);
 8000e9a:	4b34      	ldr	r3, [pc, #208]	; (8000f6c <psMeasure+0x150>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f004 fc26 	bl	80056f4 <xEventGroupClearBits>
    	xEventGroupSetBits(pc13EventGroup, OVERVOLTAGEONLED);
 8000ea8:	4b30      	ldr	r3, [pc, #192]	; (8000f6c <psMeasure+0x150>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2101      	movs	r1, #1
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f004 fc58 	bl	8005764 <xEventGroupSetBits>
    	xEventGroupClearBits(pc14EventGroup, 0xFFFFFF);
 8000eb4:	4b2e      	ldr	r3, [pc, #184]	; (8000f70 <psMeasure+0x154>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f004 fc19 	bl	80056f4 <xEventGroupClearBits>
    	xEventGroupSetBits(pc14EventGroup, OVERVOLTAGEONLED);
 8000ec2:	4b2b      	ldr	r3, [pc, #172]	; (8000f70 <psMeasure+0x154>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f004 fc4b 	bl	8005764 <xEventGroupSetBits>
    	__asm__ volatile("NOP");
 8000ece:	bf00      	nop
 8000ed0:	e7af      	b.n	8000e32 <psMeasure+0x16>
    } else if(avrBatVoltage < BATMINV) {
 8000ed2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000ed4:	f640 023d 	movw	r2, #2109	; 0x83d
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d82a      	bhi.n	8000f32 <psMeasure+0x116>
    	memset(measureResult, ' ', sizeof(measureResult));
 8000edc:	f107 030c 	add.w	r3, r7, #12
 8000ee0:	221e      	movs	r2, #30
 8000ee2:	2120      	movs	r1, #32
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f007 f911 	bl	800810c <memset>
    	strcpy(measureResult, "Voltage < MIN");
 8000eea:	f107 030c 	add.w	r3, r7, #12
 8000eee:	4a21      	ldr	r2, [pc, #132]	; (8000f74 <psMeasure+0x158>)
 8000ef0:	461c      	mov	r4, r3
 8000ef2:	4613      	mov	r3, r2
 8000ef4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ef6:	c407      	stmia	r4!, {r0, r1, r2}
 8000ef8:	8023      	strh	r3, [r4, #0]
    	xEventGroupClearBits(pc13EventGroup, 0xFFFFFF);
 8000efa:	4b1c      	ldr	r3, [pc, #112]	; (8000f6c <psMeasure+0x150>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8000f02:	4618      	mov	r0, r3
 8000f04:	f004 fbf6 	bl	80056f4 <xEventGroupClearBits>
    	xEventGroupSetBits(pc13EventGroup, UNDERVOLTAGEONLED);
 8000f08:	4b18      	ldr	r3, [pc, #96]	; (8000f6c <psMeasure+0x150>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2102      	movs	r1, #2
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f004 fc28 	bl	8005764 <xEventGroupSetBits>
    	xEventGroupClearBits(pc14EventGroup, 0xFFFFFF);
 8000f14:	4b16      	ldr	r3, [pc, #88]	; (8000f70 <psMeasure+0x154>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f004 fbe9 	bl	80056f4 <xEventGroupClearBits>
    	xEventGroupSetBits(pc14EventGroup, UNDERVOLTAGEONLED);
 8000f22:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <psMeasure+0x154>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2102      	movs	r1, #2
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f004 fc1b 	bl	8005764 <xEventGroupSetBits>
    	__asm__ volatile("NOP");
 8000f2e:	bf00      	nop
 8000f30:	e77f      	b.n	8000e32 <psMeasure+0x16>
    } else {
    	memset(measureResult, ' ', sizeof(measureResult));
 8000f32:	f107 030c 	add.w	r3, r7, #12
 8000f36:	221e      	movs	r2, #30
 8000f38:	2120      	movs	r1, #32
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f007 f8e6 	bl	800810c <memset>
    	xEventGroupClearBits(pc13EventGroup, 0xFFFFFF);
 8000f40:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <psMeasure+0x150>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f004 fbd3 	bl	80056f4 <xEventGroupClearBits>
    	xEventGroupClearBits(pc14EventGroup, 0xFFFFFF);
 8000f4e:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <psMeasure+0x154>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8000f56:	4618      	mov	r0, r3
 8000f58:	f004 fbcc 	bl	80056f4 <xEventGroupClearBits>
    	__asm__ volatile("NOP");
 8000f5c:	bf00      	nop
  {
 8000f5e:	e768      	b.n	8000e32 <psMeasure+0x16>
 8000f60:	200008d0 	.word	0x200008d0
 8000f64:	cccccccd 	.word	0xcccccccd
 8000f68:	080082e8 	.word	0x080082e8
 8000f6c:	200008e4 	.word	0x200008e4
 8000f70:	200008e8 	.word	0x200008e8
 8000f74:	080082f8 	.word	0x080082f8

08000f78 <pc13LedCntrl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pc13LedCntrl */
void pc13LedCntrl(void const * argument)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN pc13LedCntrl */
	EventBits_t eventBits;
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f80:	2001      	movs	r0, #1
 8000f82:	f004 fb89 	bl	8005698 <osDelay>
    eventBits = xEventGroupGetBits(pc13EventGroup);
 8000f86:	4b18      	ldr	r3, [pc, #96]	; (8000fe8 <pc13LedCntrl+0x70>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f004 fbb1 	bl	80056f4 <xEventGroupClearBits>
 8000f92:	60f8      	str	r0, [r7, #12]
    switch (eventBits) {
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d003      	beq.n	8000fa2 <pc13LedCntrl+0x2a>
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	d00b      	beq.n	8000fb8 <pc13LedCntrl+0x40>
 8000fa0:	e015      	b.n	8000fce <pc13LedCntrl+0x56>
		case OVERVOLTAGEONLED:
			osDelay(100);
 8000fa2:	2064      	movs	r0, #100	; 0x64
 8000fa4:	f004 fb78 	bl	8005698 <osDelay>
			GPIOC->ODR ^= GPIO_ODR_13;
 8000fa8:	4b10      	ldr	r3, [pc, #64]	; (8000fec <pc13LedCntrl+0x74>)
 8000faa:	695b      	ldr	r3, [r3, #20]
 8000fac:	4a0f      	ldr	r2, [pc, #60]	; (8000fec <pc13LedCntrl+0x74>)
 8000fae:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000fb2:	6153      	str	r3, [r2, #20]
			__asm__ volatile("NOP");
 8000fb4:	bf00      	nop
			break;
 8000fb6:	e015      	b.n	8000fe4 <pc13LedCntrl+0x6c>
		case UNDERVOLTAGEONLED:
			osDelay(200);
 8000fb8:	20c8      	movs	r0, #200	; 0xc8
 8000fba:	f004 fb6d 	bl	8005698 <osDelay>
			GPIOC->ODR ^= GPIO_ODR_13;
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <pc13LedCntrl+0x74>)
 8000fc0:	695b      	ldr	r3, [r3, #20]
 8000fc2:	4a0a      	ldr	r2, [pc, #40]	; (8000fec <pc13LedCntrl+0x74>)
 8000fc4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000fc8:	6153      	str	r3, [r2, #20]
			__asm__ volatile("NOP");
 8000fca:	bf00      	nop
			break;
 8000fcc:	e00a      	b.n	8000fe4 <pc13LedCntrl+0x6c>
		default:
			GPIOC->ODR &= ~GPIO_ODR_13;
 8000fce:	4b07      	ldr	r3, [pc, #28]	; (8000fec <pc13LedCntrl+0x74>)
 8000fd0:	695b      	ldr	r3, [r3, #20]
 8000fd2:	4a06      	ldr	r2, [pc, #24]	; (8000fec <pc13LedCntrl+0x74>)
 8000fd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000fd8:	6153      	str	r3, [r2, #20]
			osDelay(12);
 8000fda:	200c      	movs	r0, #12
 8000fdc:	f004 fb5c 	bl	8005698 <osDelay>
			__asm__ volatile("NOP");
 8000fe0:	bf00      	nop
			break;
 8000fe2:	bf00      	nop
    osDelay(1);
 8000fe4:	e7cc      	b.n	8000f80 <pc13LedCntrl+0x8>
 8000fe6:	bf00      	nop
 8000fe8:	200008e4 	.word	0x200008e4
 8000fec:	48000800 	.word	0x48000800

08000ff0 <pc14LedCntrl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pc14LedCntrl */
void pc14LedCntrl(void const * argument)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN pc14LedCntrl */
	EventBits_t eventBits;
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	f004 fb4d 	bl	8005698 <osDelay>
    eventBits = xEventGroupGetBits(pc14EventGroup);
 8000ffe:	4b18      	ldr	r3, [pc, #96]	; (8001060 <pc14LedCntrl+0x70>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2100      	movs	r1, #0
 8001004:	4618      	mov	r0, r3
 8001006:	f004 fb75 	bl	80056f4 <xEventGroupClearBits>
 800100a:	60f8      	str	r0, [r7, #12]
    switch (eventBits) {
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d003      	beq.n	800101a <pc14LedCntrl+0x2a>
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	2b02      	cmp	r3, #2
 8001016:	d00b      	beq.n	8001030 <pc14LedCntrl+0x40>
 8001018:	e015      	b.n	8001046 <pc14LedCntrl+0x56>
		case OVERVOLTAGEONLED:
			osDelay(100);
 800101a:	2064      	movs	r0, #100	; 0x64
 800101c:	f004 fb3c 	bl	8005698 <osDelay>
			GPIOC->ODR ^= GPIO_ODR_14;
 8001020:	4b10      	ldr	r3, [pc, #64]	; (8001064 <pc14LedCntrl+0x74>)
 8001022:	695b      	ldr	r3, [r3, #20]
 8001024:	4a0f      	ldr	r2, [pc, #60]	; (8001064 <pc14LedCntrl+0x74>)
 8001026:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 800102a:	6153      	str	r3, [r2, #20]
			__asm__ volatile("NOP");
 800102c:	bf00      	nop
			break;
 800102e:	e015      	b.n	800105c <pc14LedCntrl+0x6c>
		case UNDERVOLTAGEONLED:
			osDelay(200);
 8001030:	20c8      	movs	r0, #200	; 0xc8
 8001032:	f004 fb31 	bl	8005698 <osDelay>
			GPIOC->ODR ^= GPIO_ODR_14;
 8001036:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <pc14LedCntrl+0x74>)
 8001038:	695b      	ldr	r3, [r3, #20]
 800103a:	4a0a      	ldr	r2, [pc, #40]	; (8001064 <pc14LedCntrl+0x74>)
 800103c:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 8001040:	6153      	str	r3, [r2, #20]
			__asm__ volatile("NOP");
 8001042:	bf00      	nop
			break;
 8001044:	e00a      	b.n	800105c <pc14LedCntrl+0x6c>
		default:
			GPIOC->ODR &= ~GPIO_ODR_14;
 8001046:	4b07      	ldr	r3, [pc, #28]	; (8001064 <pc14LedCntrl+0x74>)
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	4a06      	ldr	r2, [pc, #24]	; (8001064 <pc14LedCntrl+0x74>)
 800104c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001050:	6153      	str	r3, [r2, #20]
			osDelay(12);
 8001052:	200c      	movs	r0, #12
 8001054:	f004 fb20 	bl	8005698 <osDelay>
			__asm__ volatile("NOP");
 8001058:	bf00      	nop
			break;
 800105a:	bf00      	nop
    osDelay(1);
 800105c:	e7cc      	b.n	8000ff8 <pc14LedCntrl+0x8>
 800105e:	bf00      	nop
 8001060:	200008e8 	.word	0x200008e8
 8001064:	48000800 	.word	0x48000800

08001068 <espCommunication>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_espCommunication */
void espCommunication(void const * argument)
{
 8001068:	b5b0      	push	{r4, r5, r7, lr}
 800106a:	b0b0      	sub	sp, #192	; 0xc0
 800106c:	af02      	add	r7, sp, #8
 800106e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN espCommunication */
	vTaskDelay( pdMS_TO_TICKS( 100 ) );
 8001070:	2064      	movs	r0, #100	; 0x64
 8001072:	f005 fb23 	bl	80066bc <vTaskDelay>
	taskENTER_CRITICAL();
 8001076:	f006 fd4d 	bl	8007b14 <vPortEnterCritical>
	  GPIOB->ODR |= (1<<1);
 800107a:	4b4a      	ldr	r3, [pc, #296]	; (80011a4 <espCommunication+0x13c>)
 800107c:	695b      	ldr	r3, [r3, #20]
 800107e:	4a49      	ldr	r2, [pc, #292]	; (80011a4 <espCommunication+0x13c>)
 8001080:	f043 0302 	orr.w	r3, r3, #2
 8001084:	6153      	str	r3, [r2, #20]
	  GPIOB->ODR |= (1<<2);
 8001086:	4b47      	ldr	r3, [pc, #284]	; (80011a4 <espCommunication+0x13c>)
 8001088:	695b      	ldr	r3, [r3, #20]
 800108a:	4a46      	ldr	r2, [pc, #280]	; (80011a4 <espCommunication+0x13c>)
 800108c:	f043 0304 	orr.w	r3, r3, #4
 8001090:	6153      	str	r3, [r2, #20]
	  char txBuffer[80] = {'A', 'T', '\r', '\n'};
 8001092:	4a45      	ldr	r2, [pc, #276]	; (80011a8 <espCommunication+0x140>)
 8001094:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001098:	6810      	ldr	r0, [r2, #0]
 800109a:	6018      	str	r0, [r3, #0]
 800109c:	7912      	ldrb	r2, [r2, #4]
 800109e:	711a      	strb	r2, [r3, #4]
 80010a0:	f107 0369 	add.w	r3, r7, #105	; 0x69
 80010a4:	224b      	movs	r2, #75	; 0x4b
 80010a6:	2100      	movs	r1, #0
 80010a8:	4618      	mov	r0, r3
 80010aa:	f007 f82f 	bl	800810c <memset>
	  char rxBuffer[80];
	  char controlAnsw[] = "AT\r\r\n\r\nOK\r\n";
 80010ae:	4a3f      	ldr	r2, [pc, #252]	; (80011ac <espCommunication+0x144>)
 80010b0:	f107 0308 	add.w	r3, r7, #8
 80010b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80010b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	  while(strcmp(rxBuffer, controlAnsw) != 0) {
 80010ba:	e025      	b.n	8001108 <espCommunication+0xa0>
		  for(uint8_t i = 0; i < sizeof(rxBuffer); i++) {
 80010bc:	2300      	movs	r3, #0
 80010be:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 80010c2:	e00b      	b.n	80010dc <espCommunication+0x74>
			  rxBuffer[i] = 0;
 80010c4:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80010c8:	33b8      	adds	r3, #184	; 0xb8
 80010ca:	443b      	add	r3, r7
 80010cc:	2200      	movs	r2, #0
 80010ce:	f803 2ca4 	strb.w	r2, [r3, #-164]
		  for(uint8_t i = 0; i < sizeof(rxBuffer); i++) {
 80010d2:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80010d6:	3301      	adds	r3, #1
 80010d8:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 80010dc:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80010e0:	2b4f      	cmp	r3, #79	; 0x4f
 80010e2:	d9ef      	bls.n	80010c4 <espCommunication+0x5c>
		  }
		  HAL_UART_Transmit(&huart3, (uint8_t*)txBuffer, 4, 250);
 80010e4:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80010e8:	23fa      	movs	r3, #250	; 0xfa
 80010ea:	2204      	movs	r2, #4
 80010ec:	4830      	ldr	r0, [pc, #192]	; (80011b0 <espCommunication+0x148>)
 80010ee:	f003 fdc9 	bl	8004c84 <HAL_UART_Transmit>
		  HAL_UART_Receive(&huart3, (uint8_t*)rxBuffer, sizeof(rxBuffer), 250);
 80010f2:	f107 0114 	add.w	r1, r7, #20
 80010f6:	23fa      	movs	r3, #250	; 0xfa
 80010f8:	2250      	movs	r2, #80	; 0x50
 80010fa:	482d      	ldr	r0, [pc, #180]	; (80011b0 <espCommunication+0x148>)
 80010fc:	f003 fe4c 	bl	8004d98 <HAL_UART_Receive>
		  vTaskDelay( pdMS_TO_TICKS( 100 ) );
 8001100:	2064      	movs	r0, #100	; 0x64
 8001102:	f005 fadb 	bl	80066bc <vTaskDelay>
		  __asm__ volatile("NOP");
 8001106:	bf00      	nop
	  while(strcmp(rxBuffer, controlAnsw) != 0) {
 8001108:	f107 0208 	add.w	r2, r7, #8
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	4611      	mov	r1, r2
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff f85c 	bl	80001d0 <strcmp>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d1ce      	bne.n	80010bc <espCommunication+0x54>
	  }
	  sendATCommand(&huart3, "ATE0\r\n", 6 , rxBuffer, sizeof(rxBuffer), 250);
 800111e:	f107 0314 	add.w	r3, r7, #20
 8001122:	22fa      	movs	r2, #250	; 0xfa
 8001124:	9201      	str	r2, [sp, #4]
 8001126:	2250      	movs	r2, #80	; 0x50
 8001128:	9200      	str	r2, [sp, #0]
 800112a:	2206      	movs	r2, #6
 800112c:	4921      	ldr	r1, [pc, #132]	; (80011b4 <espCommunication+0x14c>)
 800112e:	4820      	ldr	r0, [pc, #128]	; (80011b0 <espCommunication+0x148>)
 8001130:	f7ff f858 	bl	80001e4 <sendATCommand>
	  sendATCommand(&huart3, "AT+CWMODE=1\r\n", 13 , rxBuffer, sizeof(rxBuffer), 250);
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	22fa      	movs	r2, #250	; 0xfa
 800113a:	9201      	str	r2, [sp, #4]
 800113c:	2250      	movs	r2, #80	; 0x50
 800113e:	9200      	str	r2, [sp, #0]
 8001140:	220d      	movs	r2, #13
 8001142:	491d      	ldr	r1, [pc, #116]	; (80011b8 <espCommunication+0x150>)
 8001144:	481a      	ldr	r0, [pc, #104]	; (80011b0 <espCommunication+0x148>)
 8001146:	f7ff f84d 	bl	80001e4 <sendATCommand>
	  memset(txBuffer, '\0', sizeof(txBuffer));
 800114a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800114e:	2250      	movs	r2, #80	; 0x50
 8001150:	2100      	movs	r1, #0
 8001152:	4618      	mov	r0, r3
 8001154:	f006 ffda 	bl	800810c <memset>
	  strcpy(txBuffer, "AT+CWJAP_CUR=\"RedmiGiGidra\",\"DimaDimaDimon\"\r\n");
 8001158:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800115c:	4a17      	ldr	r2, [pc, #92]	; (80011bc <espCommunication+0x154>)
 800115e:	461c      	mov	r4, r3
 8001160:	4615      	mov	r5, r2
 8001162:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001164:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001166:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001168:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800116a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800116e:	c407      	stmia	r4!, {r0, r1, r2}
 8001170:	8023      	strh	r3, [r4, #0]
	  sendATCommand(&huart3, txBuffer, sizeof(txBuffer) , rxBuffer, sizeof(rxBuffer), 10000);
 8001172:	f107 0314 	add.w	r3, r7, #20
 8001176:	f107 0164 	add.w	r1, r7, #100	; 0x64
 800117a:	f242 7210 	movw	r2, #10000	; 0x2710
 800117e:	9201      	str	r2, [sp, #4]
 8001180:	2250      	movs	r2, #80	; 0x50
 8001182:	9200      	str	r2, [sp, #0]
 8001184:	2250      	movs	r2, #80	; 0x50
 8001186:	480a      	ldr	r0, [pc, #40]	; (80011b0 <espCommunication+0x148>)
 8001188:	f7ff f82c 	bl	80001e4 <sendATCommand>
	  vTaskDelay( pdMS_TO_TICKS( 2000 ) );
 800118c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001190:	f005 fa94 	bl	80066bc <vTaskDelay>
	  taskEXIT_CRITICAL();
 8001194:	f006 fcee 	bl	8007b74 <vPortExitCritical>
	  __asm__ volatile("NOP");
 8001198:	bf00      	nop

  /* Infinite loop */
  for(;;)
  {
	  vTaskDelay( pdMS_TO_TICKS( 100 ) );
 800119a:	2064      	movs	r0, #100	; 0x64
 800119c:	f005 fa8e 	bl	80066bc <vTaskDelay>
 80011a0:	e7fb      	b.n	800119a <espCommunication+0x132>
 80011a2:	bf00      	nop
 80011a4:	48000400 	.word	0x48000400
 80011a8:	08008350 	.word	0x08008350
 80011ac:	08008358 	.word	0x08008358
 80011b0:	20000828 	.word	0x20000828
 80011b4:	08008308 	.word	0x08008308
 80011b8:	08008310 	.word	0x08008310
 80011bc:	08008320 	.word	0x08008320

080011c0 <encoderR>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_encoderR */
void encoderR(void const * argument)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN encoderR */
  /* Infinite loop */
  for(;;)
  {
	  vTaskDelay(pdMS_TO_TICKS(ENCDELAY));
 80011c8:	2008      	movs	r0, #8
 80011ca:	f005 fa77 	bl	80066bc <vTaskDelay>

	  EncoderR.timeOld = EncoderR.timeNew;
 80011ce:	4b48      	ldr	r3, [pc, #288]	; (80012f0 <encoderR+0x130>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a47      	ldr	r2, [pc, #284]	; (80012f0 <encoderR+0x130>)
 80011d4:	6053      	str	r3, [r2, #4]
	  EncoderR.timeNew = TIM17->CNT;
 80011d6:	4b47      	ldr	r3, [pc, #284]	; (80012f4 <encoderR+0x134>)
 80011d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011da:	461a      	mov	r2, r3
 80011dc:	4b44      	ldr	r3, [pc, #272]	; (80012f0 <encoderR+0x130>)
 80011de:	601a      	str	r2, [r3, #0]
	  EncoderR.positionOld = EncoderR.positionNew;
 80011e0:	4b43      	ldr	r3, [pc, #268]	; (80012f0 <encoderR+0x130>)
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	4a42      	ldr	r2, [pc, #264]	; (80012f0 <encoderR+0x130>)
 80011e6:	60d3      	str	r3, [r2, #12]
	  EncoderR.positionNew = TIM1->CNT;
 80011e8:	4b43      	ldr	r3, [pc, #268]	; (80012f8 <encoderR+0x138>)
 80011ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ec:	461a      	mov	r2, r3
 80011ee:	4b40      	ldr	r3, [pc, #256]	; (80012f0 <encoderR+0x130>)
 80011f0:	609a      	str	r2, [r3, #8]

	  if(EncoderR.timeNew - EncoderR.timeOld == 0) {
 80011f2:	4b3f      	ldr	r3, [pc, #252]	; (80012f0 <encoderR+0x130>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	4b3e      	ldr	r3, [pc, #248]	; (80012f0 <encoderR+0x130>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d076      	beq.n	80012ec <encoderR+0x12c>
		  continue;
	  }

	  if (!EncoderR.posCntUpdate) {
 80011fe:	4b3c      	ldr	r3, [pc, #240]	; (80012f0 <encoderR+0x130>)
 8001200:	7c1b      	ldrb	r3, [r3, #16]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d11f      	bne.n	8001246 <encoderR+0x86>
		  EncoderR.rpm = ((float)(((float)(EncoderR.positionNew - EncoderR.positionOld)) / ((float)(EncoderR.timeNew - EncoderR.timeOld)))*kToRpm); //(64*1000*60)/256;
 8001206:	4b3a      	ldr	r3, [pc, #232]	; (80012f0 <encoderR+0x130>)
 8001208:	689a      	ldr	r2, [r3, #8]
 800120a:	4b39      	ldr	r3, [pc, #228]	; (80012f0 <encoderR+0x130>)
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	ee07 3a90 	vmov	s15, r3
 8001214:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001218:	4b35      	ldr	r3, [pc, #212]	; (80012f0 <encoderR+0x130>)
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	4b34      	ldr	r3, [pc, #208]	; (80012f0 <encoderR+0x130>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	ee07 3a90 	vmov	s15, r3
 8001226:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800122a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800122e:	4b33      	ldr	r3, [pc, #204]	; (80012fc <encoderR+0x13c>)
 8001230:	edd3 7a00 	vldr	s15, [r3]
 8001234:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001238:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800123c:	ee17 2a90 	vmov	r2, s15
 8001240:	4b2b      	ldr	r3, [pc, #172]	; (80012f0 <encoderR+0x130>)
 8001242:	615a      	str	r2, [r3, #20]
 8001244:	e050      	b.n	80012e8 <encoderR+0x128>
	  } else {
		  if((EncoderR.positionOld >= 0) && (EncoderR.positionOld <= 32768) ) {
 8001246:	4b2a      	ldr	r3, [pc, #168]	; (80012f0 <encoderR+0x130>)
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	2b00      	cmp	r3, #0
 800124c:	db27      	blt.n	800129e <encoderR+0xde>
 800124e:	4b28      	ldr	r3, [pc, #160]	; (80012f0 <encoderR+0x130>)
 8001250:	68db      	ldr	r3, [r3, #12]
 8001252:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001256:	dc22      	bgt.n	800129e <encoderR+0xde>
			  EncoderR.rpm = ((float)(((float)(EncoderR.positionNew - 65535 - EncoderR.positionOld)) / ((float)(EncoderR.timeNew - EncoderR.timeOld)))*kToRpm);
 8001258:	4b25      	ldr	r3, [pc, #148]	; (80012f0 <encoderR+0x130>)
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8001260:	3bff      	subs	r3, #255	; 0xff
 8001262:	4a23      	ldr	r2, [pc, #140]	; (80012f0 <encoderR+0x130>)
 8001264:	68d2      	ldr	r2, [r2, #12]
 8001266:	1a9b      	subs	r3, r3, r2
 8001268:	ee07 3a90 	vmov	s15, r3
 800126c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001270:	4b1f      	ldr	r3, [pc, #124]	; (80012f0 <encoderR+0x130>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	4b1e      	ldr	r3, [pc, #120]	; (80012f0 <encoderR+0x130>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	ee07 3a90 	vmov	s15, r3
 800127e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001282:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001286:	4b1d      	ldr	r3, [pc, #116]	; (80012fc <encoderR+0x13c>)
 8001288:	edd3 7a00 	vldr	s15, [r3]
 800128c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001290:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001294:	ee17 2a90 	vmov	r2, s15
 8001298:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <encoderR+0x130>)
 800129a:	615a      	str	r2, [r3, #20]
 800129c:	e021      	b.n	80012e2 <encoderR+0x122>
		  } else {
			  EncoderR.rpm = ((float)(((float)(EncoderR.positionNew + (65535 - EncoderR.positionOld))) / ((float)(EncoderR.timeNew - EncoderR.timeOld)))*kToRpm);
 800129e:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <encoderR+0x130>)
 80012a0:	689a      	ldr	r2, [r3, #8]
 80012a2:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <encoderR+0x130>)
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80012aa:	33ff      	adds	r3, #255	; 0xff
 80012ac:	4413      	add	r3, r2
 80012ae:	ee07 3a90 	vmov	s15, r3
 80012b2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <encoderR+0x130>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	4b0d      	ldr	r3, [pc, #52]	; (80012f0 <encoderR+0x130>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	ee07 3a90 	vmov	s15, r3
 80012c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80012cc:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <encoderR+0x13c>)
 80012ce:	edd3 7a00 	vldr	s15, [r3]
 80012d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012da:	ee17 2a90 	vmov	r2, s15
 80012de:	4b04      	ldr	r3, [pc, #16]	; (80012f0 <encoderR+0x130>)
 80012e0:	615a      	str	r2, [r3, #20]
		  }
		  EncoderR.posCntUpdate = 0;
 80012e2:	4b03      	ldr	r3, [pc, #12]	; (80012f0 <encoderR+0x130>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	741a      	strb	r2, [r3, #16]
	  }
//	  taskYIELD();
	  __asm__ volatile("NOP");
 80012e8:	bf00      	nop
 80012ea:	e76d      	b.n	80011c8 <encoderR+0x8>
		  continue;
 80012ec:	bf00      	nop
	  vTaskDelay(pdMS_TO_TICKS(ENCDELAY));
 80012ee:	e76b      	b.n	80011c8 <encoderR+0x8>
 80012f0:	200008ec 	.word	0x200008ec
 80012f4:	40014800 	.word	0x40014800
 80012f8:	40012c00 	.word	0x40012c00
 80012fc:	2000092c 	.word	0x2000092c

08001300 <encoderL>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_encoderL */
void encoderL(void const * argument)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN encoderL */
  /* Infinite loop */
  for(;;)
  {
	  vTaskDelay(pdMS_TO_TICKS(ENCDELAY));
 8001308:	2008      	movs	r0, #8
 800130a:	f005 f9d7 	bl	80066bc <vTaskDelay>

	  EncoderL.timeOld = EncoderL.timeNew;
 800130e:	4b49      	ldr	r3, [pc, #292]	; (8001434 <encoderL+0x134>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a48      	ldr	r2, [pc, #288]	; (8001434 <encoderL+0x134>)
 8001314:	6053      	str	r3, [r2, #4]
	  EncoderL.timeNew = TIM17->CNT;
 8001316:	4b48      	ldr	r3, [pc, #288]	; (8001438 <encoderL+0x138>)
 8001318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131a:	461a      	mov	r2, r3
 800131c:	4b45      	ldr	r3, [pc, #276]	; (8001434 <encoderL+0x134>)
 800131e:	601a      	str	r2, [r3, #0]
	  EncoderL.positionOld = EncoderL.positionNew;
 8001320:	4b44      	ldr	r3, [pc, #272]	; (8001434 <encoderL+0x134>)
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	4a43      	ldr	r2, [pc, #268]	; (8001434 <encoderL+0x134>)
 8001326:	60d3      	str	r3, [r2, #12]
	  EncoderL.positionNew = TIM2->CNT;
 8001328:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800132c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132e:	461a      	mov	r2, r3
 8001330:	4b40      	ldr	r3, [pc, #256]	; (8001434 <encoderL+0x134>)
 8001332:	609a      	str	r2, [r3, #8]

	  if(EncoderL.timeNew - EncoderL.timeOld == 0) {
 8001334:	4b3f      	ldr	r3, [pc, #252]	; (8001434 <encoderL+0x134>)
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	4b3e      	ldr	r3, [pc, #248]	; (8001434 <encoderL+0x134>)
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	429a      	cmp	r2, r3
 800133e:	d076      	beq.n	800142e <encoderL+0x12e>
		  continue;
	  }

	  if (!EncoderL.posCntUpdate) {
 8001340:	4b3c      	ldr	r3, [pc, #240]	; (8001434 <encoderL+0x134>)
 8001342:	7c1b      	ldrb	r3, [r3, #16]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d11f      	bne.n	8001388 <encoderL+0x88>
		  EncoderL.rpm = ((float)(((float)(EncoderL.positionNew - EncoderL.positionOld)) / ((float)(EncoderL.timeNew - EncoderL.timeOld)))*kToRpm); //(64*1000*60)/256;
 8001348:	4b3a      	ldr	r3, [pc, #232]	; (8001434 <encoderL+0x134>)
 800134a:	689a      	ldr	r2, [r3, #8]
 800134c:	4b39      	ldr	r3, [pc, #228]	; (8001434 <encoderL+0x134>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	ee07 3a90 	vmov	s15, r3
 8001356:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800135a:	4b36      	ldr	r3, [pc, #216]	; (8001434 <encoderL+0x134>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	4b35      	ldr	r3, [pc, #212]	; (8001434 <encoderL+0x134>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	ee07 3a90 	vmov	s15, r3
 8001368:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800136c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001370:	4b32      	ldr	r3, [pc, #200]	; (800143c <encoderL+0x13c>)
 8001372:	edd3 7a00 	vldr	s15, [r3]
 8001376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800137a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800137e:	ee17 2a90 	vmov	r2, s15
 8001382:	4b2c      	ldr	r3, [pc, #176]	; (8001434 <encoderL+0x134>)
 8001384:	615a      	str	r2, [r3, #20]
 8001386:	e050      	b.n	800142a <encoderL+0x12a>
	  } else {
		  if((EncoderL.positionOld >= 0) && (EncoderL.positionOld <= 32768) ) {
 8001388:	4b2a      	ldr	r3, [pc, #168]	; (8001434 <encoderL+0x134>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	2b00      	cmp	r3, #0
 800138e:	db27      	blt.n	80013e0 <encoderL+0xe0>
 8001390:	4b28      	ldr	r3, [pc, #160]	; (8001434 <encoderL+0x134>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001398:	dc22      	bgt.n	80013e0 <encoderL+0xe0>
			  EncoderL.rpm = ((float)(((float)(EncoderL.positionNew - 65535 - EncoderL.positionOld)) / ((float)(EncoderL.timeNew - EncoderL.timeOld)))*kToRpm);
 800139a:	4b26      	ldr	r3, [pc, #152]	; (8001434 <encoderL+0x134>)
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 80013a2:	3bff      	subs	r3, #255	; 0xff
 80013a4:	4a23      	ldr	r2, [pc, #140]	; (8001434 <encoderL+0x134>)
 80013a6:	68d2      	ldr	r2, [r2, #12]
 80013a8:	1a9b      	subs	r3, r3, r2
 80013aa:	ee07 3a90 	vmov	s15, r3
 80013ae:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013b2:	4b20      	ldr	r3, [pc, #128]	; (8001434 <encoderL+0x134>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	4b1f      	ldr	r3, [pc, #124]	; (8001434 <encoderL+0x134>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	ee07 3a90 	vmov	s15, r3
 80013c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80013c8:	4b1c      	ldr	r3, [pc, #112]	; (800143c <encoderL+0x13c>)
 80013ca:	edd3 7a00 	vldr	s15, [r3]
 80013ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013d6:	ee17 2a90 	vmov	r2, s15
 80013da:	4b16      	ldr	r3, [pc, #88]	; (8001434 <encoderL+0x134>)
 80013dc:	615a      	str	r2, [r3, #20]
 80013de:	e021      	b.n	8001424 <encoderL+0x124>
		  } else {
			  EncoderL.rpm = ((float)(((float)(EncoderL.positionNew + (65535 - EncoderL.positionOld))) / ((float)(EncoderL.timeNew - EncoderL.timeOld)))*kToRpm);
 80013e0:	4b14      	ldr	r3, [pc, #80]	; (8001434 <encoderL+0x134>)
 80013e2:	689a      	ldr	r2, [r3, #8]
 80013e4:	4b13      	ldr	r3, [pc, #76]	; (8001434 <encoderL+0x134>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80013ec:	33ff      	adds	r3, #255	; 0xff
 80013ee:	4413      	add	r3, r2
 80013f0:	ee07 3a90 	vmov	s15, r3
 80013f4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013f8:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <encoderL+0x134>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	4b0d      	ldr	r3, [pc, #52]	; (8001434 <encoderL+0x134>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	ee07 3a90 	vmov	s15, r3
 8001406:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800140a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800140e:	4b0b      	ldr	r3, [pc, #44]	; (800143c <encoderL+0x13c>)
 8001410:	edd3 7a00 	vldr	s15, [r3]
 8001414:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001418:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800141c:	ee17 2a90 	vmov	r2, s15
 8001420:	4b04      	ldr	r3, [pc, #16]	; (8001434 <encoderL+0x134>)
 8001422:	615a      	str	r2, [r3, #20]
		  }
		  EncoderL.posCntUpdate = 0;
 8001424:	4b03      	ldr	r3, [pc, #12]	; (8001434 <encoderL+0x134>)
 8001426:	2200      	movs	r2, #0
 8001428:	741a      	strb	r2, [r3, #16]
	  }
//	  taskYIELD();
	  __asm__ volatile("NOP");
 800142a:	bf00      	nop
 800142c:	e76c      	b.n	8001308 <encoderL+0x8>
		  continue;
 800142e:	bf00      	nop
	  vTaskDelay(pdMS_TO_TICKS(ENCDELAY));
 8001430:	e76a      	b.n	8001308 <encoderL+0x8>
 8001432:	bf00      	nop
 8001434:	20000904 	.word	0x20000904
 8001438:	40014800 	.word	0x40014800
 800143c:	2000092c 	.word	0x2000092c

08001440 <softwarePWMR>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_softwarePWMR */
void softwarePWMR(void const * argument)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b088      	sub	sp, #32
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN softwarePWMR */
	int errorValue = 0;
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]
	float sumValue = 0;
 800144c:	f04f 0300 	mov.w	r3, #0
 8001450:	613b      	str	r3, [r7, #16]
	float pValue = 0;
 8001452:	f04f 0300 	mov.w	r3, #0
 8001456:	60fb      	str	r3, [r7, #12]
	float iValue = 0;
 8001458:	f04f 0300 	mov.w	r3, #0
 800145c:	61fb      	str	r3, [r7, #28]
	float pwmFloatValue = 0;
 800145e:	f04f 0300 	mov.w	r3, #0
 8001462:	61bb      	str	r3, [r7, #24]
	vTaskDelay( pdMS_TO_TICKS( 10 ) );
 8001464:	200a      	movs	r0, #10
 8001466:	f005 f929 	bl	80066bc <vTaskDelay>
	GPIOA->ODR |= (1<<6); //EN34
 800146a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800146e:	695b      	ldr	r3, [r3, #20]
 8001470:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001474:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001478:	6153      	str	r3, [r2, #20]

	SoftPwmR.reqValue = 8000;
 800147a:	4b3d      	ldr	r3, [pc, #244]	; (8001570 <softwarePWMR+0x130>)
 800147c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001480:	801a      	strh	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
	  SoftPwmR.curValue = EncoderR.rpm;
 8001482:	4b3c      	ldr	r3, [pc, #240]	; (8001574 <softwarePWMR+0x134>)
 8001484:	695b      	ldr	r3, [r3, #20]
 8001486:	b21a      	sxth	r2, r3
 8001488:	4b39      	ldr	r3, [pc, #228]	; (8001570 <softwarePWMR+0x130>)
 800148a:	805a      	strh	r2, [r3, #2]
	  errorValue = SoftPwmR.reqValue - SoftPwmR.curValue;
 800148c:	4b38      	ldr	r3, [pc, #224]	; (8001570 <softwarePWMR+0x130>)
 800148e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001492:	461a      	mov	r2, r3
 8001494:	4b36      	ldr	r3, [pc, #216]	; (8001570 <softwarePWMR+0x130>)
 8001496:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	617b      	str	r3, [r7, #20]
	  pValue = KP * errorValue;
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	ee07 3a90 	vmov	s15, r3
 80014a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014a8:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001578 <softwarePWMR+0x138>
 80014ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014b0:	edc7 7a03 	vstr	s15, [r7, #12]
	  iValue += KI * errorValue;
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	ee07 3a90 	vmov	s15, r3
 80014ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014be:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800157c <softwarePWMR+0x13c>
 80014c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014c6:	ed97 7a07 	vldr	s14, [r7, #28]
 80014ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014ce:	edc7 7a07 	vstr	s15, [r7, #28]
	  if(iValue > ((float)MAXRPM)) iValue = MAXRPM;
 80014d2:	edd7 7a07 	vldr	s15, [r7, #28]
 80014d6:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001580 <softwarePWMR+0x140>
 80014da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e2:	dd02      	ble.n	80014ea <softwarePWMR+0xaa>
 80014e4:	4b27      	ldr	r3, [pc, #156]	; (8001584 <softwarePWMR+0x144>)
 80014e6:	61fb      	str	r3, [r7, #28]
 80014e8:	e00a      	b.n	8001500 <softwarePWMR+0xc0>
	  else if(iValue < ((float)-MAXRPM)) iValue = -MAXRPM;
 80014ea:	edd7 7a07 	vldr	s15, [r7, #28]
 80014ee:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001588 <softwarePWMR+0x148>
 80014f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014fa:	d501      	bpl.n	8001500 <softwarePWMR+0xc0>
 80014fc:	4b23      	ldr	r3, [pc, #140]	; (800158c <softwarePWMR+0x14c>)
 80014fe:	61fb      	str	r3, [r7, #28]
	  sumValue = (pValue + iValue);
 8001500:	ed97 7a03 	vldr	s14, [r7, #12]
 8001504:	edd7 7a07 	vldr	s15, [r7, #28]
 8001508:	ee77 7a27 	vadd.f32	s15, s14, s15
 800150c:	edc7 7a04 	vstr	s15, [r7, #16]
	  pwmFloatValue += ((((float)sumValue)/((float)MAXRPM))*100);
 8001510:	ed97 7a04 	vldr	s14, [r7, #16]
 8001514:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8001580 <softwarePWMR+0x140>
 8001518:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800151c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001590 <softwarePWMR+0x150>
 8001520:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001524:	ed97 7a06 	vldr	s14, [r7, #24]
 8001528:	ee77 7a27 	vadd.f32	s15, s14, s15
 800152c:	edc7 7a06 	vstr	s15, [r7, #24]
	  SoftPwmR.pwmValue = (int16_t)pwmFloatValue;
 8001530:	edd7 7a06 	vldr	s15, [r7, #24]
 8001534:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001538:	ee17 3a90 	vmov	r3, s15
 800153c:	b21a      	sxth	r2, r3
 800153e:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <softwarePWMR+0x130>)
 8001540:	809a      	strh	r2, [r3, #4]
	  if(SoftPwmR.pwmValue > 100) SoftPwmR.pwmValue = 100;
 8001542:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <softwarePWMR+0x130>)
 8001544:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001548:	2b64      	cmp	r3, #100	; 0x64
 800154a:	dd03      	ble.n	8001554 <softwarePWMR+0x114>
 800154c:	4b08      	ldr	r3, [pc, #32]	; (8001570 <softwarePWMR+0x130>)
 800154e:	2264      	movs	r2, #100	; 0x64
 8001550:	809a      	strh	r2, [r3, #4]
 8001552:	e009      	b.n	8001568 <softwarePWMR+0x128>
	  else if(SoftPwmR.pwmValue < -100) SoftPwmR.pwmValue = -100;
 8001554:	4b06      	ldr	r3, [pc, #24]	; (8001570 <softwarePWMR+0x130>)
 8001556:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800155a:	f113 0f64 	cmn.w	r3, #100	; 0x64
 800155e:	da03      	bge.n	8001568 <softwarePWMR+0x128>
 8001560:	4b03      	ldr	r3, [pc, #12]	; (8001570 <softwarePWMR+0x130>)
 8001562:	f64f 729c 	movw	r2, #65436	; 0xff9c
 8001566:	809a      	strh	r2, [r3, #4]
//		GPIOA->ODR |= (1<<6); //EN34
//		GPIOA->ODR &= ~(1<<7); //_3A
//		GPIOB->ODR |= (1<<0); //_4A
//	  taskYIELD();
	  vTaskDelay(pdMS_TO_TICKS(ENCDELAY));
 8001568:	2008      	movs	r0, #8
 800156a:	f005 f8a7 	bl	80066bc <vTaskDelay>
	  SoftPwmR.curValue = EncoderR.rpm;
 800156e:	e788      	b.n	8001482 <softwarePWMR+0x42>
 8001570:	2000091c 	.word	0x2000091c
 8001574:	200008ec 	.word	0x200008ec
 8001578:	3b03126f 	.word	0x3b03126f
 800157c:	00000000 	.word	0x00000000
 8001580:	45fa0000 	.word	0x45fa0000
 8001584:	45fa0000 	.word	0x45fa0000
 8001588:	c5fa0000 	.word	0xc5fa0000
 800158c:	c5fa0000 	.word	0xc5fa0000
 8001590:	42c80000 	.word	0x42c80000

08001594 <softwarePWML>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_softwarePWML */
void softwarePWML(void const * argument)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b088      	sub	sp, #32
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN softwarePWML */
	int errorValue = 0;
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]
	float sumValue = 0;
 80015a0:	f04f 0300 	mov.w	r3, #0
 80015a4:	613b      	str	r3, [r7, #16]
	float pValue = 0;
 80015a6:	f04f 0300 	mov.w	r3, #0
 80015aa:	60fb      	str	r3, [r7, #12]
	float iValue = 0;
 80015ac:	f04f 0300 	mov.w	r3, #0
 80015b0:	61fb      	str	r3, [r7, #28]
	float pwmFloatValue = 0;
 80015b2:	f04f 0300 	mov.w	r3, #0
 80015b6:	61bb      	str	r3, [r7, #24]
	vTaskDelay( pdMS_TO_TICKS( 10 ) );
 80015b8:	200a      	movs	r0, #10
 80015ba:	f005 f87f 	bl	80066bc <vTaskDelay>
	GPIOA->ODR |= (1<<3); //EN12
 80015be:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80015c2:	695b      	ldr	r3, [r3, #20]
 80015c4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80015c8:	f043 0308 	orr.w	r3, r3, #8
 80015cc:	6153      	str	r3, [r2, #20]

	SoftPwmL.reqValue = 8000;
 80015ce:	4b3d      	ldr	r3, [pc, #244]	; (80016c4 <softwarePWML+0x130>)
 80015d0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80015d4:	801a      	strh	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
	  SoftPwmL.curValue = EncoderL.rpm;
 80015d6:	4b3c      	ldr	r3, [pc, #240]	; (80016c8 <softwarePWML+0x134>)
 80015d8:	695b      	ldr	r3, [r3, #20]
 80015da:	b21a      	sxth	r2, r3
 80015dc:	4b39      	ldr	r3, [pc, #228]	; (80016c4 <softwarePWML+0x130>)
 80015de:	805a      	strh	r2, [r3, #2]
	  errorValue = SoftPwmL.reqValue - SoftPwmL.curValue;
 80015e0:	4b38      	ldr	r3, [pc, #224]	; (80016c4 <softwarePWML+0x130>)
 80015e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015e6:	461a      	mov	r2, r3
 80015e8:	4b36      	ldr	r3, [pc, #216]	; (80016c4 <softwarePWML+0x130>)
 80015ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	617b      	str	r3, [r7, #20]
	  pValue = KP * errorValue;
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	ee07 3a90 	vmov	s15, r3
 80015f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015fc:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80016cc <softwarePWML+0x138>
 8001600:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001604:	edc7 7a03 	vstr	s15, [r7, #12]
	  iValue += KI * errorValue;
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	ee07 3a90 	vmov	s15, r3
 800160e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001612:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80016d0 <softwarePWML+0x13c>
 8001616:	ee67 7a87 	vmul.f32	s15, s15, s14
 800161a:	ed97 7a07 	vldr	s14, [r7, #28]
 800161e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001622:	edc7 7a07 	vstr	s15, [r7, #28]
	  if(iValue > ((float)MAXRPM)) iValue = MAXRPM;
 8001626:	edd7 7a07 	vldr	s15, [r7, #28]
 800162a:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80016d4 <softwarePWML+0x140>
 800162e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001636:	dd02      	ble.n	800163e <softwarePWML+0xaa>
 8001638:	4b27      	ldr	r3, [pc, #156]	; (80016d8 <softwarePWML+0x144>)
 800163a:	61fb      	str	r3, [r7, #28]
 800163c:	e00a      	b.n	8001654 <softwarePWML+0xc0>
	  else if(iValue < ((float)-MAXRPM)) iValue = -MAXRPM;
 800163e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001642:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80016dc <softwarePWML+0x148>
 8001646:	eef4 7ac7 	vcmpe.f32	s15, s14
 800164a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800164e:	d501      	bpl.n	8001654 <softwarePWML+0xc0>
 8001650:	4b23      	ldr	r3, [pc, #140]	; (80016e0 <softwarePWML+0x14c>)
 8001652:	61fb      	str	r3, [r7, #28]
	  sumValue = (pValue + iValue);
 8001654:	ed97 7a03 	vldr	s14, [r7, #12]
 8001658:	edd7 7a07 	vldr	s15, [r7, #28]
 800165c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001660:	edc7 7a04 	vstr	s15, [r7, #16]
	  pwmFloatValue += ((((float)sumValue)/((float)MAXRPM))*100);
 8001664:	ed97 7a04 	vldr	s14, [r7, #16]
 8001668:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80016d4 <softwarePWML+0x140>
 800166c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001670:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80016e4 <softwarePWML+0x150>
 8001674:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001678:	ed97 7a06 	vldr	s14, [r7, #24]
 800167c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001680:	edc7 7a06 	vstr	s15, [r7, #24]
	  SoftPwmL.pwmValue = (int16_t)pwmFloatValue;
 8001684:	edd7 7a06 	vldr	s15, [r7, #24]
 8001688:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800168c:	ee17 3a90 	vmov	r3, s15
 8001690:	b21a      	sxth	r2, r3
 8001692:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <softwarePWML+0x130>)
 8001694:	809a      	strh	r2, [r3, #4]
	  if(SoftPwmL.pwmValue > 100) SoftPwmL.pwmValue = 100;
 8001696:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <softwarePWML+0x130>)
 8001698:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800169c:	2b64      	cmp	r3, #100	; 0x64
 800169e:	dd03      	ble.n	80016a8 <softwarePWML+0x114>
 80016a0:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <softwarePWML+0x130>)
 80016a2:	2264      	movs	r2, #100	; 0x64
 80016a4:	809a      	strh	r2, [r3, #4]
 80016a6:	e009      	b.n	80016bc <softwarePWML+0x128>
	  else if(SoftPwmL.pwmValue < -100) SoftPwmL.pwmValue = -100;
 80016a8:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <softwarePWML+0x130>)
 80016aa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80016ae:	f113 0f64 	cmn.w	r3, #100	; 0x64
 80016b2:	da03      	bge.n	80016bc <softwarePWML+0x128>
 80016b4:	4b03      	ldr	r3, [pc, #12]	; (80016c4 <softwarePWML+0x130>)
 80016b6:	f64f 729c 	movw	r2, #65436	; 0xff9c
 80016ba:	809a      	strh	r2, [r3, #4]

	  vTaskDelay(pdMS_TO_TICKS(ENCDELAY));
 80016bc:	2008      	movs	r0, #8
 80016be:	f004 fffd 	bl	80066bc <vTaskDelay>
	  SoftPwmL.curValue = EncoderL.rpm;
 80016c2:	e788      	b.n	80015d6 <softwarePWML+0x42>
 80016c4:	20000924 	.word	0x20000924
 80016c8:	20000904 	.word	0x20000904
 80016cc:	3b03126f 	.word	0x3b03126f
 80016d0:	00000000 	.word	0x00000000
 80016d4:	45fa0000 	.word	0x45fa0000
 80016d8:	45fa0000 	.word	0x45fa0000
 80016dc:	c5fa0000 	.word	0xc5fa0000
 80016e0:	c5fa0000 	.word	0xc5fa0000
 80016e4:	42c80000 	.word	0x42c80000

080016e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a04      	ldr	r2, [pc, #16]	; (8001708 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d101      	bne.n	80016fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016fa:	f000 fbaf 	bl	8001e5c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40001000 	.word	0x40001000

0800170c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001710:	b672      	cpsid	i
}
 8001712:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001714:	e7fe      	b.n	8001714 <Error_Handler+0x8>
	...

08001718 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800171e:	4b11      	ldr	r3, [pc, #68]	; (8001764 <HAL_MspInit+0x4c>)
 8001720:	699b      	ldr	r3, [r3, #24]
 8001722:	4a10      	ldr	r2, [pc, #64]	; (8001764 <HAL_MspInit+0x4c>)
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	6193      	str	r3, [r2, #24]
 800172a:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <HAL_MspInit+0x4c>)
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	607b      	str	r3, [r7, #4]
 8001734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001736:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <HAL_MspInit+0x4c>)
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	4a0a      	ldr	r2, [pc, #40]	; (8001764 <HAL_MspInit+0x4c>)
 800173c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001740:	61d3      	str	r3, [r2, #28]
 8001742:	4b08      	ldr	r3, [pc, #32]	; (8001764 <HAL_MspInit+0x4c>)
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174a:	603b      	str	r3, [r7, #0]
 800174c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800174e:	2200      	movs	r2, #0
 8001750:	210f      	movs	r1, #15
 8001752:	f06f 0001 	mvn.w	r0, #1
 8001756:	f001 f91b 	bl	8002990 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40021000 	.word	0x40021000

08001768 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b08a      	sub	sp, #40	; 0x28
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001770:	f107 0314 	add.w	r3, r7, #20
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]
 800177e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001788:	d124      	bne.n	80017d4 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800178a:	4b14      	ldr	r3, [pc, #80]	; (80017dc <HAL_ADC_MspInit+0x74>)
 800178c:	695b      	ldr	r3, [r3, #20]
 800178e:	4a13      	ldr	r2, [pc, #76]	; (80017dc <HAL_ADC_MspInit+0x74>)
 8001790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001794:	6153      	str	r3, [r2, #20]
 8001796:	4b11      	ldr	r3, [pc, #68]	; (80017dc <HAL_ADC_MspInit+0x74>)
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179e:	613b      	str	r3, [r7, #16]
 80017a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a2:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <HAL_ADC_MspInit+0x74>)
 80017a4:	695b      	ldr	r3, [r3, #20]
 80017a6:	4a0d      	ldr	r2, [pc, #52]	; (80017dc <HAL_ADC_MspInit+0x74>)
 80017a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017ac:	6153      	str	r3, [r2, #20]
 80017ae:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <HAL_ADC_MspInit+0x74>)
 80017b0:	695b      	ldr	r3, [r3, #20]
 80017b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017ba:	2304      	movs	r3, #4
 80017bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017be:	2303      	movs	r3, #3
 80017c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c6:	f107 0314 	add.w	r3, r7, #20
 80017ca:	4619      	mov	r1, r3
 80017cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d0:	f001 f908 	bl	80029e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017d4:	bf00      	nop
 80017d6:	3728      	adds	r7, #40	; 0x28
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40021000 	.word	0x40021000

080017e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08a      	sub	sp, #40	; 0x28
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	f107 0314 	add.w	r3, r7, #20
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a17      	ldr	r2, [pc, #92]	; (800185c <HAL_SPI_MspInit+0x7c>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d128      	bne.n	8001854 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001802:	4b17      	ldr	r3, [pc, #92]	; (8001860 <HAL_SPI_MspInit+0x80>)
 8001804:	69db      	ldr	r3, [r3, #28]
 8001806:	4a16      	ldr	r2, [pc, #88]	; (8001860 <HAL_SPI_MspInit+0x80>)
 8001808:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800180c:	61d3      	str	r3, [r2, #28]
 800180e:	4b14      	ldr	r3, [pc, #80]	; (8001860 <HAL_SPI_MspInit+0x80>)
 8001810:	69db      	ldr	r3, [r3, #28]
 8001812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001816:	613b      	str	r3, [r7, #16]
 8001818:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800181a:	4b11      	ldr	r3, [pc, #68]	; (8001860 <HAL_SPI_MspInit+0x80>)
 800181c:	695b      	ldr	r3, [r3, #20]
 800181e:	4a10      	ldr	r2, [pc, #64]	; (8001860 <HAL_SPI_MspInit+0x80>)
 8001820:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001824:	6153      	str	r3, [r2, #20]
 8001826:	4b0e      	ldr	r3, [pc, #56]	; (8001860 <HAL_SPI_MspInit+0x80>)
 8001828:	695b      	ldr	r3, [r3, #20]
 800182a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001832:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001836:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001838:	2302      	movs	r3, #2
 800183a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001840:	2303      	movs	r3, #3
 8001842:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001844:	2305      	movs	r3, #5
 8001846:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	4619      	mov	r1, r3
 800184e:	4805      	ldr	r0, [pc, #20]	; (8001864 <HAL_SPI_MspInit+0x84>)
 8001850:	f001 f8c8 	bl	80029e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001854:	bf00      	nop
 8001856:	3728      	adds	r7, #40	; 0x28
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40003800 	.word	0x40003800
 8001860:	40021000 	.word	0x40021000
 8001864:	48000400 	.word	0x48000400

08001868 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a16      	ldr	r2, [pc, #88]	; (80018d0 <HAL_TIM_Base_MspInit+0x68>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d10c      	bne.n	8001894 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800187a:	4b16      	ldr	r3, [pc, #88]	; (80018d4 <HAL_TIM_Base_MspInit+0x6c>)
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	4a15      	ldr	r2, [pc, #84]	; (80018d4 <HAL_TIM_Base_MspInit+0x6c>)
 8001880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001884:	6193      	str	r3, [r2, #24]
 8001886:	4b13      	ldr	r3, [pc, #76]	; (80018d4 <HAL_TIM_Base_MspInit+0x6c>)
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001892:	e018      	b.n	80018c6 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM17)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a0f      	ldr	r2, [pc, #60]	; (80018d8 <HAL_TIM_Base_MspInit+0x70>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d113      	bne.n	80018c6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800189e:	4b0d      	ldr	r3, [pc, #52]	; (80018d4 <HAL_TIM_Base_MspInit+0x6c>)
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	4a0c      	ldr	r2, [pc, #48]	; (80018d4 <HAL_TIM_Base_MspInit+0x6c>)
 80018a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018a8:	6193      	str	r3, [r2, #24]
 80018aa:	4b0a      	ldr	r3, [pc, #40]	; (80018d4 <HAL_TIM_Base_MspInit+0x6c>)
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018b2:	60bb      	str	r3, [r7, #8]
 80018b4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 5, 0);
 80018b6:	2200      	movs	r2, #0
 80018b8:	2105      	movs	r1, #5
 80018ba:	201a      	movs	r0, #26
 80018bc:	f001 f868 	bl	8002990 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80018c0:	201a      	movs	r0, #26
 80018c2:	f001 f881 	bl	80029c8 <HAL_NVIC_EnableIRQ>
}
 80018c6:	bf00      	nop
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40014400 	.word	0x40014400
 80018d4:	40021000 	.word	0x40021000
 80018d8:	40014800 	.word	0x40014800

080018dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08a      	sub	sp, #40	; 0x28
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e4:	f107 0314 	add.w	r3, r7, #20
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]
 80018f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a17      	ldr	r2, [pc, #92]	; (8001958 <HAL_UART_MspInit+0x7c>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d128      	bne.n	8001950 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80018fe:	4b17      	ldr	r3, [pc, #92]	; (800195c <HAL_UART_MspInit+0x80>)
 8001900:	69db      	ldr	r3, [r3, #28]
 8001902:	4a16      	ldr	r2, [pc, #88]	; (800195c <HAL_UART_MspInit+0x80>)
 8001904:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001908:	61d3      	str	r3, [r2, #28]
 800190a:	4b14      	ldr	r3, [pc, #80]	; (800195c <HAL_UART_MspInit+0x80>)
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001912:	613b      	str	r3, [r7, #16]
 8001914:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001916:	4b11      	ldr	r3, [pc, #68]	; (800195c <HAL_UART_MspInit+0x80>)
 8001918:	695b      	ldr	r3, [r3, #20]
 800191a:	4a10      	ldr	r2, [pc, #64]	; (800195c <HAL_UART_MspInit+0x80>)
 800191c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001920:	6153      	str	r3, [r2, #20]
 8001922:	4b0e      	ldr	r3, [pc, #56]	; (800195c <HAL_UART_MspInit+0x80>)
 8001924:	695b      	ldr	r3, [r3, #20]
 8001926:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800192e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001932:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001934:	2302      	movs	r3, #2
 8001936:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	2300      	movs	r3, #0
 800193a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800193c:	2303      	movs	r3, #3
 800193e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001940:	2307      	movs	r3, #7
 8001942:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001944:	f107 0314 	add.w	r3, r7, #20
 8001948:	4619      	mov	r1, r3
 800194a:	4805      	ldr	r0, [pc, #20]	; (8001960 <HAL_UART_MspInit+0x84>)
 800194c:	f001 f84a 	bl	80029e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001950:	bf00      	nop
 8001952:	3728      	adds	r7, #40	; 0x28
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40004800 	.word	0x40004800
 800195c:	40021000 	.word	0x40021000
 8001960:	48000400 	.word	0x48000400

08001964 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b08e      	sub	sp, #56	; 0x38
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800196c:	2300      	movs	r3, #0
 800196e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001970:	2300      	movs	r3, #0
 8001972:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001974:	4b33      	ldr	r3, [pc, #204]	; (8001a44 <HAL_InitTick+0xe0>)
 8001976:	69db      	ldr	r3, [r3, #28]
 8001978:	4a32      	ldr	r2, [pc, #200]	; (8001a44 <HAL_InitTick+0xe0>)
 800197a:	f043 0310 	orr.w	r3, r3, #16
 800197e:	61d3      	str	r3, [r2, #28]
 8001980:	4b30      	ldr	r3, [pc, #192]	; (8001a44 <HAL_InitTick+0xe0>)
 8001982:	69db      	ldr	r3, [r3, #28]
 8001984:	f003 0310 	and.w	r3, r3, #16
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800198c:	f107 0210 	add.w	r2, r7, #16
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	4611      	mov	r1, r2
 8001996:	4618      	mov	r0, r3
 8001998:	f002 fc46 	bl	8004228 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800199c:	6a3b      	ldr	r3, [r7, #32]
 800199e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80019a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d103      	bne.n	80019ae <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80019a6:	f002 fbfb 	bl	80041a0 <HAL_RCC_GetPCLK1Freq>
 80019aa:	6378      	str	r0, [r7, #52]	; 0x34
 80019ac:	e004      	b.n	80019b8 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80019ae:	f002 fbf7 	bl	80041a0 <HAL_RCC_GetPCLK1Freq>
 80019b2:	4603      	mov	r3, r0
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80019b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019ba:	4a23      	ldr	r2, [pc, #140]	; (8001a48 <HAL_InitTick+0xe4>)
 80019bc:	fba2 2303 	umull	r2, r3, r2, r3
 80019c0:	0c9b      	lsrs	r3, r3, #18
 80019c2:	3b01      	subs	r3, #1
 80019c4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80019c6:	4b21      	ldr	r3, [pc, #132]	; (8001a4c <HAL_InitTick+0xe8>)
 80019c8:	4a21      	ldr	r2, [pc, #132]	; (8001a50 <HAL_InitTick+0xec>)
 80019ca:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80019cc:	4b1f      	ldr	r3, [pc, #124]	; (8001a4c <HAL_InitTick+0xe8>)
 80019ce:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019d2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80019d4:	4a1d      	ldr	r2, [pc, #116]	; (8001a4c <HAL_InitTick+0xe8>)
 80019d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019d8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80019da:	4b1c      	ldr	r3, [pc, #112]	; (8001a4c <HAL_InitTick+0xe8>)
 80019dc:	2200      	movs	r2, #0
 80019de:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019e0:	4b1a      	ldr	r3, [pc, #104]	; (8001a4c <HAL_InitTick+0xe8>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019e6:	4b19      	ldr	r3, [pc, #100]	; (8001a4c <HAL_InitTick+0xe8>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80019ec:	4817      	ldr	r0, [pc, #92]	; (8001a4c <HAL_InitTick+0xe8>)
 80019ee:	f002 fe7c 	bl	80046ea <HAL_TIM_Base_Init>
 80019f2:	4603      	mov	r3, r0
 80019f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80019f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d11b      	bne.n	8001a38 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001a00:	4812      	ldr	r0, [pc, #72]	; (8001a4c <HAL_InitTick+0xe8>)
 8001a02:	f002 fec9 	bl	8004798 <HAL_TIM_Base_Start_IT>
 8001a06:	4603      	mov	r3, r0
 8001a08:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001a0c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d111      	bne.n	8001a38 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a14:	2036      	movs	r0, #54	; 0x36
 8001a16:	f000 ffd7 	bl	80029c8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2b0f      	cmp	r3, #15
 8001a1e:	d808      	bhi.n	8001a32 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001a20:	2200      	movs	r2, #0
 8001a22:	6879      	ldr	r1, [r7, #4]
 8001a24:	2036      	movs	r0, #54	; 0x36
 8001a26:	f000 ffb3 	bl	8002990 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a2a:	4a0a      	ldr	r2, [pc, #40]	; (8001a54 <HAL_InitTick+0xf0>)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6013      	str	r3, [r2, #0]
 8001a30:	e002      	b.n	8001a38 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001a38:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3738      	adds	r7, #56	; 0x38
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40021000 	.word	0x40021000
 8001a48:	431bde83 	.word	0x431bde83
 8001a4c:	20000934 	.word	0x20000934
 8001a50:	40001000 	.word	0x40001000
 8001a54:	20000004 	.word	0x20000004

08001a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a5c:	e7fe      	b.n	8001a5c <NMI_Handler+0x4>

08001a5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a62:	e7fe      	b.n	8001a62 <HardFault_Handler+0x4>

08001a64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a68:	e7fe      	b.n	8001a68 <MemManage_Handler+0x4>

08001a6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a6e:	e7fe      	b.n	8001a6e <BusFault_Handler+0x4>

08001a70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a74:	e7fe      	b.n	8001a74 <UsageFault_Handler+0x4>

08001a76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	if((TIM17->SR & TIM_SR_UIF) == TIM_SR_UIF) {
 8001a88:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <TIM1_TRG_COM_TIM17_IRQHandler+0x34>)
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d10c      	bne.n	8001aae <TIM1_TRG_COM_TIM17_IRQHandler+0x2a>
		EncoderR.timeNew = -(65535 - EncoderR.timeNew);
 8001a94:	4b09      	ldr	r3, [pc, #36]	; (8001abc <TIM1_TRG_COM_TIM17_IRQHandler+0x38>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8001a9c:	3bff      	subs	r3, #255	; 0xff
 8001a9e:	4a07      	ldr	r2, [pc, #28]	; (8001abc <TIM1_TRG_COM_TIM17_IRQHandler+0x38>)
 8001aa0:	6013      	str	r3, [r2, #0]
		TIM17->SR &= ~(TIM_SR_UIF);
 8001aa2:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <TIM1_TRG_COM_TIM17_IRQHandler+0x34>)
 8001aa4:	691b      	ldr	r3, [r3, #16]
 8001aa6:	4a04      	ldr	r2, [pc, #16]	; (8001ab8 <TIM1_TRG_COM_TIM17_IRQHandler+0x34>)
 8001aa8:	f023 0301 	bic.w	r3, r3, #1
 8001aac:	6113      	str	r3, [r2, #16]
	}

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001aae:	4804      	ldr	r0, [pc, #16]	; (8001ac0 <TIM1_TRG_COM_TIM17_IRQHandler+0x3c>)
 8001ab0:	f002 fec6 	bl	8004840 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001ab4:	bf00      	nop
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40014800 	.word	0x40014800
 8001abc:	200008ec 	.word	0x200008ec
 8001ac0:	200007dc 	.word	0x200007dc

08001ac4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001ac8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001acc:	f001 f914 	bl	8002cf8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001ad0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001ad4:	f001 f910 	bl	8002cf8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ad8:	bf00      	nop
 8001ada:	bd80      	pop	{r7, pc}

08001adc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001ae0:	4802      	ldr	r0, [pc, #8]	; (8001aec <TIM6_DAC_IRQHandler+0x10>)
 8001ae2:	f002 fead 	bl	8004840 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	20000934 	.word	0x20000934

08001af0 <DMA1_Channel1_IRQHandler>:

/* USER CODE BEGIN 1 */
void DMA1_Channel1_IRQHandler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
	__asm__ volatile("NOP");
 8001af4:	bf00      	nop
	DMA1->IFCR |= DMA_IFCR_CGIF1;
 8001af6:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <DMA1_Channel1_IRQHandler+0x20>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	4a05      	ldr	r2, [pc, #20]	; (8001b10 <DMA1_Channel1_IRQHandler+0x20>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	6053      	str	r3, [r2, #4]
	__asm__ volatile("NOP");
 8001b02:	bf00      	nop
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	40020000 	.word	0x40020000

08001b14 <ADC1_IRQHandler>:

void ADC1_IRQHandler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
	__asm__ volatile("NOP");
 8001b18:	bf00      	nop
	ADC1->ISR |= ADC_ISR_AWD1;
 8001b1a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001b24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b28:	6013      	str	r3, [r2, #0]
	__asm__ volatile("NOP");
 8001b2a:	bf00      	nop
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
	...

08001b38 <TIM1_UP_TIM16_IRQHandler>:

void TIM1_UP_TIM16_IRQHandler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
	if((TIM1->SR & TIM_SR_UIF) == TIM_SR_UIF) {
 8001b3c:	4b8c      	ldr	r3, [pc, #560]	; (8001d70 <TIM1_UP_TIM16_IRQHandler+0x238>)
 8001b3e:	691b      	ldr	r3, [r3, #16]
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d108      	bne.n	8001b5a <TIM1_UP_TIM16_IRQHandler+0x22>
		EncoderR.posCntUpdate = 1;
 8001b48:	4b8a      	ldr	r3, [pc, #552]	; (8001d74 <TIM1_UP_TIM16_IRQHandler+0x23c>)
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	741a      	strb	r2, [r3, #16]
		TIM1->SR &= ~(TIM_SR_UIF);
 8001b4e:	4b88      	ldr	r3, [pc, #544]	; (8001d70 <TIM1_UP_TIM16_IRQHandler+0x238>)
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	4a87      	ldr	r2, [pc, #540]	; (8001d70 <TIM1_UP_TIM16_IRQHandler+0x238>)
 8001b54:	f023 0301 	bic.w	r3, r3, #1
 8001b58:	6113      	str	r3, [r2, #16]
	}
	if((TIM16->SR & TIM_SR_UIF) == TIM_SR_UIF) {
 8001b5a:	4b87      	ldr	r3, [pc, #540]	; (8001d78 <TIM1_UP_TIM16_IRQHandler+0x240>)
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	f040 80ff 	bne.w	8001d66 <TIM1_UP_TIM16_IRQHandler+0x22e>
		softCounterValue++;
 8001b68:	4b84      	ldr	r3, [pc, #528]	; (8001d7c <TIM1_UP_TIM16_IRQHandler+0x244>)
 8001b6a:	881b      	ldrh	r3, [r3, #0]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	4b82      	ldr	r3, [pc, #520]	; (8001d7c <TIM1_UP_TIM16_IRQHandler+0x244>)
 8001b72:	801a      	strh	r2, [r3, #0]

		if(softCounterValue >= 100) {
 8001b74:	4b81      	ldr	r3, [pc, #516]	; (8001d7c <TIM1_UP_TIM16_IRQHandler+0x244>)
 8001b76:	881b      	ldrh	r3, [r3, #0]
 8001b78:	2b63      	cmp	r3, #99	; 0x63
 8001b7a:	d902      	bls.n	8001b82 <TIM1_UP_TIM16_IRQHandler+0x4a>
			softCounterValue = 0;
 8001b7c:	4b7f      	ldr	r3, [pc, #508]	; (8001d7c <TIM1_UP_TIM16_IRQHandler+0x244>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	801a      	strh	r2, [r3, #0]
		}

		if(SoftPwmR.pwmValue >= 0) {
 8001b82:	4b7f      	ldr	r3, [pc, #508]	; (8001d80 <TIM1_UP_TIM16_IRQHandler+0x248>)
 8001b84:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	db33      	blt.n	8001bf4 <TIM1_UP_TIM16_IRQHandler+0xbc>
			if(softCounterValue < SoftPwmR.pwmValue) {
 8001b8c:	4b7b      	ldr	r3, [pc, #492]	; (8001d7c <TIM1_UP_TIM16_IRQHandler+0x244>)
 8001b8e:	881b      	ldrh	r3, [r3, #0]
 8001b90:	461a      	mov	r2, r3
 8001b92:	4b7b      	ldr	r3, [pc, #492]	; (8001d80 <TIM1_UP_TIM16_IRQHandler+0x248>)
 8001b94:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	da15      	bge.n	8001bc8 <TIM1_UP_TIM16_IRQHandler+0x90>
				if(SoftPwmR.status != 1) {
 8001b9c:	4b78      	ldr	r3, [pc, #480]	; (8001d80 <TIM1_UP_TIM16_IRQHandler+0x248>)
 8001b9e:	799b      	ldrb	r3, [r3, #6]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d060      	beq.n	8001c66 <TIM1_UP_TIM16_IRQHandler+0x12e>
					GPIOA->ODR &= ~(1<<7); //_3A
 8001ba4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001bae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001bb2:	6153      	str	r3, [r2, #20]
					GPIOB->ODR |= (1<<0); //_4A
 8001bb4:	4b73      	ldr	r3, [pc, #460]	; (8001d84 <TIM1_UP_TIM16_IRQHandler+0x24c>)
 8001bb6:	695b      	ldr	r3, [r3, #20]
 8001bb8:	4a72      	ldr	r2, [pc, #456]	; (8001d84 <TIM1_UP_TIM16_IRQHandler+0x24c>)
 8001bba:	f043 0301 	orr.w	r3, r3, #1
 8001bbe:	6153      	str	r3, [r2, #20]
					SoftPwmR.status = 1;
 8001bc0:	4b6f      	ldr	r3, [pc, #444]	; (8001d80 <TIM1_UP_TIM16_IRQHandler+0x248>)
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	719a      	strb	r2, [r3, #6]
 8001bc6:	e04e      	b.n	8001c66 <TIM1_UP_TIM16_IRQHandler+0x12e>
				}
			} else {
				if(SoftPwmR.status != 0) {
 8001bc8:	4b6d      	ldr	r3, [pc, #436]	; (8001d80 <TIM1_UP_TIM16_IRQHandler+0x248>)
 8001bca:	799b      	ldrb	r3, [r3, #6]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d04a      	beq.n	8001c66 <TIM1_UP_TIM16_IRQHandler+0x12e>
					GPIOA->ODR &= ~(1<<7); //_3A
 8001bd0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001bd4:	695b      	ldr	r3, [r3, #20]
 8001bd6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001bda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001bde:	6153      	str	r3, [r2, #20]
					GPIOB->ODR &= ~(1<<0); //_4A
 8001be0:	4b68      	ldr	r3, [pc, #416]	; (8001d84 <TIM1_UP_TIM16_IRQHandler+0x24c>)
 8001be2:	695b      	ldr	r3, [r3, #20]
 8001be4:	4a67      	ldr	r2, [pc, #412]	; (8001d84 <TIM1_UP_TIM16_IRQHandler+0x24c>)
 8001be6:	f023 0301 	bic.w	r3, r3, #1
 8001bea:	6153      	str	r3, [r2, #20]
					SoftPwmR.status = 0;
 8001bec:	4b64      	ldr	r3, [pc, #400]	; (8001d80 <TIM1_UP_TIM16_IRQHandler+0x248>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	719a      	strb	r2, [r3, #6]
 8001bf2:	e038      	b.n	8001c66 <TIM1_UP_TIM16_IRQHandler+0x12e>
				}
			}
		} else if(SoftPwmR.pwmValue < 0) {
 8001bf4:	4b62      	ldr	r3, [pc, #392]	; (8001d80 <TIM1_UP_TIM16_IRQHandler+0x248>)
 8001bf6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	da33      	bge.n	8001c66 <TIM1_UP_TIM16_IRQHandler+0x12e>
			if(softCounterValue < (-SoftPwmR.pwmValue)) {
 8001bfe:	4b5f      	ldr	r3, [pc, #380]	; (8001d7c <TIM1_UP_TIM16_IRQHandler+0x244>)
 8001c00:	881b      	ldrh	r3, [r3, #0]
 8001c02:	461a      	mov	r2, r3
 8001c04:	4b5e      	ldr	r3, [pc, #376]	; (8001d80 <TIM1_UP_TIM16_IRQHandler+0x248>)
 8001c06:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c0a:	425b      	negs	r3, r3
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	da15      	bge.n	8001c3c <TIM1_UP_TIM16_IRQHandler+0x104>
				if(SoftPwmR.status != 2) {
 8001c10:	4b5b      	ldr	r3, [pc, #364]	; (8001d80 <TIM1_UP_TIM16_IRQHandler+0x248>)
 8001c12:	799b      	ldrb	r3, [r3, #6]
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d026      	beq.n	8001c66 <TIM1_UP_TIM16_IRQHandler+0x12e>
					GPIOA->ODR |= (1<<7); //_3A
 8001c18:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001c1c:	695b      	ldr	r3, [r3, #20]
 8001c1e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001c22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c26:	6153      	str	r3, [r2, #20]
					GPIOB->ODR &= ~(1<<0); //_4A
 8001c28:	4b56      	ldr	r3, [pc, #344]	; (8001d84 <TIM1_UP_TIM16_IRQHandler+0x24c>)
 8001c2a:	695b      	ldr	r3, [r3, #20]
 8001c2c:	4a55      	ldr	r2, [pc, #340]	; (8001d84 <TIM1_UP_TIM16_IRQHandler+0x24c>)
 8001c2e:	f023 0301 	bic.w	r3, r3, #1
 8001c32:	6153      	str	r3, [r2, #20]
					SoftPwmR.status = 2;
 8001c34:	4b52      	ldr	r3, [pc, #328]	; (8001d80 <TIM1_UP_TIM16_IRQHandler+0x248>)
 8001c36:	2202      	movs	r2, #2
 8001c38:	719a      	strb	r2, [r3, #6]
 8001c3a:	e014      	b.n	8001c66 <TIM1_UP_TIM16_IRQHandler+0x12e>
				}
			} else {
				if(SoftPwmR.status != 0) {
 8001c3c:	4b50      	ldr	r3, [pc, #320]	; (8001d80 <TIM1_UP_TIM16_IRQHandler+0x248>)
 8001c3e:	799b      	ldrb	r3, [r3, #6]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d010      	beq.n	8001c66 <TIM1_UP_TIM16_IRQHandler+0x12e>
					GPIOA->ODR &= ~(1<<7); //_3A
 8001c44:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001c4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c52:	6153      	str	r3, [r2, #20]
					GPIOB->ODR &= ~(1<<0); //_4A
 8001c54:	4b4b      	ldr	r3, [pc, #300]	; (8001d84 <TIM1_UP_TIM16_IRQHandler+0x24c>)
 8001c56:	695b      	ldr	r3, [r3, #20]
 8001c58:	4a4a      	ldr	r2, [pc, #296]	; (8001d84 <TIM1_UP_TIM16_IRQHandler+0x24c>)
 8001c5a:	f023 0301 	bic.w	r3, r3, #1
 8001c5e:	6153      	str	r3, [r2, #20]
					SoftPwmR.status = 0;
 8001c60:	4b47      	ldr	r3, [pc, #284]	; (8001d80 <TIM1_UP_TIM16_IRQHandler+0x248>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	719a      	strb	r2, [r3, #6]
				}
			}
		}

		if(SoftPwmL.pwmValue >= 0) {
 8001c66:	4b48      	ldr	r3, [pc, #288]	; (8001d88 <TIM1_UP_TIM16_IRQHandler+0x250>)
 8001c68:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	db37      	blt.n	8001ce0 <TIM1_UP_TIM16_IRQHandler+0x1a8>
			if(softCounterValue < SoftPwmL.pwmValue) {
 8001c70:	4b42      	ldr	r3, [pc, #264]	; (8001d7c <TIM1_UP_TIM16_IRQHandler+0x244>)
 8001c72:	881b      	ldrh	r3, [r3, #0]
 8001c74:	461a      	mov	r2, r3
 8001c76:	4b44      	ldr	r3, [pc, #272]	; (8001d88 <TIM1_UP_TIM16_IRQHandler+0x250>)
 8001c78:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	da17      	bge.n	8001cb0 <TIM1_UP_TIM16_IRQHandler+0x178>
				if(SoftPwmL.status != 1) {
 8001c80:	4b41      	ldr	r3, [pc, #260]	; (8001d88 <TIM1_UP_TIM16_IRQHandler+0x250>)
 8001c82:	799b      	ldrb	r3, [r3, #6]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d068      	beq.n	8001d5a <TIM1_UP_TIM16_IRQHandler+0x222>
					GPIOA->ODR &= ~(1<<4); //_1A
 8001c88:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001c92:	f023 0310 	bic.w	r3, r3, #16
 8001c96:	6153      	str	r3, [r2, #20]
					GPIOA->ODR |= (1<<5); //_2A
 8001c98:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001c9c:	695b      	ldr	r3, [r3, #20]
 8001c9e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001ca2:	f043 0320 	orr.w	r3, r3, #32
 8001ca6:	6153      	str	r3, [r2, #20]
					SoftPwmL.status = 1;
 8001ca8:	4b37      	ldr	r3, [pc, #220]	; (8001d88 <TIM1_UP_TIM16_IRQHandler+0x250>)
 8001caa:	2201      	movs	r2, #1
 8001cac:	719a      	strb	r2, [r3, #6]
 8001cae:	e054      	b.n	8001d5a <TIM1_UP_TIM16_IRQHandler+0x222>
				}
			} else {
				if(SoftPwmL.status != 0) {
 8001cb0:	4b35      	ldr	r3, [pc, #212]	; (8001d88 <TIM1_UP_TIM16_IRQHandler+0x250>)
 8001cb2:	799b      	ldrb	r3, [r3, #6]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d050      	beq.n	8001d5a <TIM1_UP_TIM16_IRQHandler+0x222>
					GPIOA->ODR &= ~(1<<4); //_1A
 8001cb8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001cc2:	f023 0310 	bic.w	r3, r3, #16
 8001cc6:	6153      	str	r3, [r2, #20]
					GPIOA->ODR &= ~(1<<5); //_2A
 8001cc8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001cd2:	f023 0320 	bic.w	r3, r3, #32
 8001cd6:	6153      	str	r3, [r2, #20]
					SoftPwmL.status = 0;
 8001cd8:	4b2b      	ldr	r3, [pc, #172]	; (8001d88 <TIM1_UP_TIM16_IRQHandler+0x250>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	719a      	strb	r2, [r3, #6]
 8001cde:	e03c      	b.n	8001d5a <TIM1_UP_TIM16_IRQHandler+0x222>
				}
			}
		} else if(SoftPwmL.pwmValue < 0) {
 8001ce0:	4b29      	ldr	r3, [pc, #164]	; (8001d88 <TIM1_UP_TIM16_IRQHandler+0x250>)
 8001ce2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	da37      	bge.n	8001d5a <TIM1_UP_TIM16_IRQHandler+0x222>
			if(softCounterValue < (-SoftPwmL.pwmValue)) {
 8001cea:	4b24      	ldr	r3, [pc, #144]	; (8001d7c <TIM1_UP_TIM16_IRQHandler+0x244>)
 8001cec:	881b      	ldrh	r3, [r3, #0]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	4b25      	ldr	r3, [pc, #148]	; (8001d88 <TIM1_UP_TIM16_IRQHandler+0x250>)
 8001cf2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001cf6:	425b      	negs	r3, r3
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	da17      	bge.n	8001d2c <TIM1_UP_TIM16_IRQHandler+0x1f4>
				if(SoftPwmL.status != 2) {
 8001cfc:	4b22      	ldr	r3, [pc, #136]	; (8001d88 <TIM1_UP_TIM16_IRQHandler+0x250>)
 8001cfe:	799b      	ldrb	r3, [r3, #6]
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d02a      	beq.n	8001d5a <TIM1_UP_TIM16_IRQHandler+0x222>
					GPIOA->ODR |= (1<<4); //_1A
 8001d04:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001d08:	695b      	ldr	r3, [r3, #20]
 8001d0a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001d0e:	f043 0310 	orr.w	r3, r3, #16
 8001d12:	6153      	str	r3, [r2, #20]
					GPIOA->ODR &= ~(1<<5); //_2A
 8001d14:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001d1e:	f023 0320 	bic.w	r3, r3, #32
 8001d22:	6153      	str	r3, [r2, #20]
					SoftPwmL.status = 2;
 8001d24:	4b18      	ldr	r3, [pc, #96]	; (8001d88 <TIM1_UP_TIM16_IRQHandler+0x250>)
 8001d26:	2202      	movs	r2, #2
 8001d28:	719a      	strb	r2, [r3, #6]
 8001d2a:	e016      	b.n	8001d5a <TIM1_UP_TIM16_IRQHandler+0x222>
				}
			} else {
				if(SoftPwmL.status != 0) {
 8001d2c:	4b16      	ldr	r3, [pc, #88]	; (8001d88 <TIM1_UP_TIM16_IRQHandler+0x250>)
 8001d2e:	799b      	ldrb	r3, [r3, #6]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d012      	beq.n	8001d5a <TIM1_UP_TIM16_IRQHandler+0x222>
					GPIOA->ODR &= ~(1<<4); //_1A
 8001d34:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001d3e:	f023 0310 	bic.w	r3, r3, #16
 8001d42:	6153      	str	r3, [r2, #20]
					GPIOA->ODR &= ~(1<<5); //_2A
 8001d44:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001d48:	695b      	ldr	r3, [r3, #20]
 8001d4a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001d4e:	f023 0320 	bic.w	r3, r3, #32
 8001d52:	6153      	str	r3, [r2, #20]
					SoftPwmL.status = 0;
 8001d54:	4b0c      	ldr	r3, [pc, #48]	; (8001d88 <TIM1_UP_TIM16_IRQHandler+0x250>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	719a      	strb	r2, [r3, #6]
				}
			}
		}

		TIM16->SR &= ~(TIM_SR_UIF);
 8001d5a:	4b07      	ldr	r3, [pc, #28]	; (8001d78 <TIM1_UP_TIM16_IRQHandler+0x240>)
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	4a06      	ldr	r2, [pc, #24]	; (8001d78 <TIM1_UP_TIM16_IRQHandler+0x240>)
 8001d60:	f023 0301 	bic.w	r3, r3, #1
 8001d64:	6113      	str	r3, [r2, #16]
	}

}
 8001d66:	bf00      	nop
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	40012c00 	.word	0x40012c00
 8001d74:	200008ec 	.word	0x200008ec
 8001d78:	40014400 	.word	0x40014400
 8001d7c:	20000930 	.word	0x20000930
 8001d80:	2000091c 	.word	0x2000091c
 8001d84:	48000400 	.word	0x48000400
 8001d88:	20000924 	.word	0x20000924

08001d8c <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
	__asm__ volatile("NOP");
 8001d90:	bf00      	nop
	EncoderL.posCntUpdate = 1;
 8001d92:	4b08      	ldr	r3, [pc, #32]	; (8001db4 <TIM2_IRQHandler+0x28>)
 8001d94:	2201      	movs	r2, #1
 8001d96:	741a      	strb	r2, [r3, #16]
	TIM2->SR &= ~(TIM_SR_UIF);
 8001d98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001da2:	f023 0301 	bic.w	r3, r3, #1
 8001da6:	6113      	str	r3, [r2, #16]
	__asm__ volatile("NOP");
 8001da8:	bf00      	nop
}
 8001daa:	bf00      	nop
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr
 8001db4:	20000904 	.word	0x20000904

08001db8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dbc:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <SystemInit+0x20>)
 8001dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dc2:	4a05      	ldr	r2, [pc, #20]	; (8001dd8 <SystemInit+0x20>)
 8001dc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dcc:	bf00      	nop
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ddc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e14 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001de0:	f7ff ffea 	bl	8001db8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001de4:	480c      	ldr	r0, [pc, #48]	; (8001e18 <LoopForever+0x6>)
  ldr r1, =_edata
 8001de6:	490d      	ldr	r1, [pc, #52]	; (8001e1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001de8:	4a0d      	ldr	r2, [pc, #52]	; (8001e20 <LoopForever+0xe>)
  movs r3, #0
 8001dea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dec:	e002      	b.n	8001df4 <LoopCopyDataInit>

08001dee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001df0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001df2:	3304      	adds	r3, #4

08001df4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001df4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001df6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001df8:	d3f9      	bcc.n	8001dee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dfa:	4a0a      	ldr	r2, [pc, #40]	; (8001e24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001dfc:	4c0a      	ldr	r4, [pc, #40]	; (8001e28 <LoopForever+0x16>)
  movs r3, #0
 8001dfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e00:	e001      	b.n	8001e06 <LoopFillZerobss>

08001e02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e04:	3204      	adds	r2, #4

08001e06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e08:	d3fb      	bcc.n	8001e02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e0a:	f006 f987 	bl	800811c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e0e:	f7fe faa1 	bl	8000354 <main>

08001e12 <LoopForever>:

LoopForever:
    b LoopForever
 8001e12:	e7fe      	b.n	8001e12 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e14:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001e18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e1c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001e20:	080083bc 	.word	0x080083bc
  ldr r2, =_sbss
 8001e24:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001e28:	20002c34 	.word	0x20002c34

08001e2c <COMP2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e2c:	e7fe      	b.n	8001e2c <COMP2_IRQHandler>
	...

08001e30 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e34:	4b08      	ldr	r3, [pc, #32]	; (8001e58 <HAL_Init+0x28>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a07      	ldr	r2, [pc, #28]	; (8001e58 <HAL_Init+0x28>)
 8001e3a:	f043 0310 	orr.w	r3, r3, #16
 8001e3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e40:	2003      	movs	r0, #3
 8001e42:	f000 fd9a 	bl	800297a <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e46:	2004      	movs	r0, #4
 8001e48:	f7ff fd8c 	bl	8001964 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e4c:	f7ff fc64 	bl	8001718 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40022000 	.word	0x40022000

08001e5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e60:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <HAL_IncTick+0x20>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	461a      	mov	r2, r3
 8001e66:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <HAL_IncTick+0x24>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	4a04      	ldr	r2, [pc, #16]	; (8001e80 <HAL_IncTick+0x24>)
 8001e6e:	6013      	str	r3, [r2, #0]
}
 8001e70:	bf00      	nop
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	20000008 	.word	0x20000008
 8001e80:	20000980 	.word	0x20000980

08001e84 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  return uwTick;  
 8001e88:	4b03      	ldr	r3, [pc, #12]	; (8001e98 <HAL_GetTick+0x14>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	20000980 	.word	0x20000980

08001e9c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ea4:	f7ff ffee 	bl	8001e84 <HAL_GetTick>
 8001ea8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb4:	d005      	beq.n	8001ec2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ee0 <HAL_Delay+0x44>)
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	461a      	mov	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001ec2:	bf00      	nop
 8001ec4:	f7ff ffde 	bl	8001e84 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d8f7      	bhi.n	8001ec4 <HAL_Delay+0x28>
  {
  }
}
 8001ed4:	bf00      	nop
 8001ed6:	bf00      	nop
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	20000008 	.word	0x20000008

08001ee4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b09a      	sub	sp, #104	; 0x68
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001eec:	2300      	movs	r3, #0
 8001eee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d101      	bne.n	8001f04 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e169      	b.n	80021d8 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0e:	f003 0310 	and.w	r3, r3, #16
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d176      	bne.n	8002004 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d152      	bne.n	8001fc4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f7ff fc15 	bl	8001768 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d13b      	bne.n	8001fc4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 fc01 	bl	8002754 <ADC_Disable>
 8001f52:	4603      	mov	r3, r0
 8001f54:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5c:	f003 0310 	and.w	r3, r3, #16
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d12f      	bne.n	8001fc4 <HAL_ADC_Init+0xe0>
 8001f64:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d12b      	bne.n	8001fc4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f70:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f74:	f023 0302 	bic.w	r3, r3, #2
 8001f78:	f043 0202 	orr.w	r2, r3, #2
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	689a      	ldr	r2, [r3, #8]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f8e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	689a      	ldr	r2, [r3, #8]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001f9e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001fa0:	4b8f      	ldr	r3, [pc, #572]	; (80021e0 <HAL_ADC_Init+0x2fc>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a8f      	ldr	r2, [pc, #572]	; (80021e4 <HAL_ADC_Init+0x300>)
 8001fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8001faa:	0c9a      	lsrs	r2, r3, #18
 8001fac:	4613      	mov	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	4413      	add	r3, r2
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001fb6:	e002      	b.n	8001fbe <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d1f9      	bne.n	8001fb8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d007      	beq.n	8001fe2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001fdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001fe0:	d110      	bne.n	8002004 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	f023 0312 	bic.w	r3, r3, #18
 8001fea:	f043 0210 	orr.w	r2, r3, #16
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff6:	f043 0201 	orr.w	r2, r3, #1
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002008:	f003 0310 	and.w	r3, r3, #16
 800200c:	2b00      	cmp	r3, #0
 800200e:	f040 80d6 	bne.w	80021be <HAL_ADC_Init+0x2da>
 8002012:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002016:	2b00      	cmp	r3, #0
 8002018:	f040 80d1 	bne.w	80021be <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002026:	2b00      	cmp	r3, #0
 8002028:	f040 80c9 	bne.w	80021be <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002030:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002034:	f043 0202 	orr.w	r2, r3, #2
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800203c:	4b6a      	ldr	r3, [pc, #424]	; (80021e8 <HAL_ADC_Init+0x304>)
 800203e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002040:	2300      	movs	r3, #0
 8002042:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f003 0303 	and.w	r3, r3, #3
 800204e:	2b01      	cmp	r3, #1
 8002050:	d108      	bne.n	8002064 <HAL_ADC_Init+0x180>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	2b01      	cmp	r3, #1
 800205e:	d101      	bne.n	8002064 <HAL_ADC_Init+0x180>
 8002060:	2301      	movs	r3, #1
 8002062:	e000      	b.n	8002066 <HAL_ADC_Init+0x182>
 8002064:	2300      	movs	r3, #0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d11c      	bne.n	80020a4 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800206a:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800206c:	2b00      	cmp	r3, #0
 800206e:	d010      	beq.n	8002092 <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f003 0303 	and.w	r3, r3, #3
 8002078:	2b01      	cmp	r3, #1
 800207a:	d107      	bne.n	800208c <HAL_ADC_Init+0x1a8>
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	2b01      	cmp	r3, #1
 8002086:	d101      	bne.n	800208c <HAL_ADC_Init+0x1a8>
 8002088:	2301      	movs	r3, #1
 800208a:	e000      	b.n	800208e <HAL_ADC_Init+0x1aa>
 800208c:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800208e:	2b00      	cmp	r3, #0
 8002090:	d108      	bne.n	80020a4 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002092:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	431a      	orrs	r2, r3
 80020a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020a2:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	7e5b      	ldrb	r3, [r3, #25]
 80020a8:	035b      	lsls	r3, r3, #13
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80020ae:	2a01      	cmp	r2, #1
 80020b0:	d002      	beq.n	80020b8 <HAL_ADC_Init+0x1d4>
 80020b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020b6:	e000      	b.n	80020ba <HAL_ADC_Init+0x1d6>
 80020b8:	2200      	movs	r2, #0
 80020ba:	431a      	orrs	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	431a      	orrs	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80020ca:	4313      	orrs	r3, r2
 80020cc:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d11b      	bne.n	8002110 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	7e5b      	ldrb	r3, [r3, #25]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d109      	bne.n	80020f4 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e4:	3b01      	subs	r3, #1
 80020e6:	045a      	lsls	r2, r3, #17
 80020e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020ea:	4313      	orrs	r3, r2
 80020ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020f0:	663b      	str	r3, [r7, #96]	; 0x60
 80020f2:	e00d      	b.n	8002110 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f8:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80020fc:	f043 0220 	orr.w	r2, r3, #32
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002108:	f043 0201 	orr.w	r2, r3, #1
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002114:	2b01      	cmp	r3, #1
 8002116:	d007      	beq.n	8002128 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002120:	4313      	orrs	r3, r2
 8002122:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002124:	4313      	orrs	r3, r2
 8002126:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f003 030c 	and.w	r3, r3, #12
 8002132:	2b00      	cmp	r3, #0
 8002134:	d114      	bne.n	8002160 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	6812      	ldr	r2, [r2, #0]
 8002140:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002144:	f023 0302 	bic.w	r3, r3, #2
 8002148:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	7e1b      	ldrb	r3, [r3, #24]
 800214e:	039a      	lsls	r2, r3, #14
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	4313      	orrs	r3, r2
 800215a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800215c:	4313      	orrs	r3, r2
 800215e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68da      	ldr	r2, [r3, #12]
 8002166:	4b21      	ldr	r3, [pc, #132]	; (80021ec <HAL_ADC_Init+0x308>)
 8002168:	4013      	ands	r3, r2
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	6812      	ldr	r2, [r2, #0]
 800216e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002170:	430b      	orrs	r3, r1
 8002172:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d10c      	bne.n	8002196 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	f023 010f 	bic.w	r1, r3, #15
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	1e5a      	subs	r2, r3, #1
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	430a      	orrs	r2, r1
 8002192:	631a      	str	r2, [r3, #48]	; 0x30
 8002194:	e007      	b.n	80021a6 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f022 020f 	bic.w	r2, r2, #15
 80021a4:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b0:	f023 0303 	bic.w	r3, r3, #3
 80021b4:	f043 0201 	orr.w	r2, r3, #1
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	641a      	str	r2, [r3, #64]	; 0x40
 80021bc:	e00a      	b.n	80021d4 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	f023 0312 	bic.w	r3, r3, #18
 80021c6:	f043 0210 	orr.w	r2, r3, #16
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80021ce:	2301      	movs	r3, #1
 80021d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80021d4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3768      	adds	r7, #104	; 0x68
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	20000000 	.word	0x20000000
 80021e4:	431bde83 	.word	0x431bde83
 80021e8:	50000300 	.word	0x50000300
 80021ec:	fff0c007 	.word	0xfff0c007

080021f0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b09b      	sub	sp, #108	; 0x6c
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021fa:	2300      	movs	r3, #0
 80021fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002200:	2300      	movs	r3, #0
 8002202:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800220a:	2b01      	cmp	r3, #1
 800220c:	d101      	bne.n	8002212 <HAL_ADC_ConfigChannel+0x22>
 800220e:	2302      	movs	r3, #2
 8002210:	e295      	b.n	800273e <HAL_ADC_ConfigChannel+0x54e>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f003 0304 	and.w	r3, r3, #4
 8002224:	2b00      	cmp	r3, #0
 8002226:	f040 8279 	bne.w	800271c <HAL_ADC_ConfigChannel+0x52c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	2b04      	cmp	r3, #4
 8002230:	d81c      	bhi.n	800226c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	4613      	mov	r3, r2
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	4413      	add	r3, r2
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	461a      	mov	r2, r3
 8002246:	231f      	movs	r3, #31
 8002248:	4093      	lsls	r3, r2
 800224a:	43db      	mvns	r3, r3
 800224c:	4019      	ands	r1, r3
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	6818      	ldr	r0, [r3, #0]
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685a      	ldr	r2, [r3, #4]
 8002256:	4613      	mov	r3, r2
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	4413      	add	r3, r2
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	fa00 f203 	lsl.w	r2, r0, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	430a      	orrs	r2, r1
 8002268:	631a      	str	r2, [r3, #48]	; 0x30
 800226a:	e063      	b.n	8002334 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	2b09      	cmp	r3, #9
 8002272:	d81e      	bhi.n	80022b2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685a      	ldr	r2, [r3, #4]
 800227e:	4613      	mov	r3, r2
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	4413      	add	r3, r2
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	3b1e      	subs	r3, #30
 8002288:	221f      	movs	r2, #31
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	43db      	mvns	r3, r3
 8002290:	4019      	ands	r1, r3
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	6818      	ldr	r0, [r3, #0]
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685a      	ldr	r2, [r3, #4]
 800229a:	4613      	mov	r3, r2
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	4413      	add	r3, r2
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	3b1e      	subs	r3, #30
 80022a4:	fa00 f203 	lsl.w	r2, r0, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	430a      	orrs	r2, r1
 80022ae:	635a      	str	r2, [r3, #52]	; 0x34
 80022b0:	e040      	b.n	8002334 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	2b0e      	cmp	r3, #14
 80022b8:	d81e      	bhi.n	80022f8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685a      	ldr	r2, [r3, #4]
 80022c4:	4613      	mov	r3, r2
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	4413      	add	r3, r2
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	3b3c      	subs	r3, #60	; 0x3c
 80022ce:	221f      	movs	r2, #31
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	43db      	mvns	r3, r3
 80022d6:	4019      	ands	r1, r3
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	6818      	ldr	r0, [r3, #0]
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685a      	ldr	r2, [r3, #4]
 80022e0:	4613      	mov	r3, r2
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	4413      	add	r3, r2
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	3b3c      	subs	r3, #60	; 0x3c
 80022ea:	fa00 f203 	lsl.w	r2, r0, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	430a      	orrs	r2, r1
 80022f4:	639a      	str	r2, [r3, #56]	; 0x38
 80022f6:	e01d      	b.n	8002334 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685a      	ldr	r2, [r3, #4]
 8002302:	4613      	mov	r3, r2
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	4413      	add	r3, r2
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	3b5a      	subs	r3, #90	; 0x5a
 800230c:	221f      	movs	r2, #31
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	43db      	mvns	r3, r3
 8002314:	4019      	ands	r1, r3
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	6818      	ldr	r0, [r3, #0]
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	4613      	mov	r3, r2
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	4413      	add	r3, r2
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	3b5a      	subs	r3, #90	; 0x5a
 8002328:	fa00 f203 	lsl.w	r2, r0, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	430a      	orrs	r2, r1
 8002332:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f003 030c 	and.w	r3, r3, #12
 800233e:	2b00      	cmp	r3, #0
 8002340:	f040 80e5 	bne.w	800250e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2b09      	cmp	r3, #9
 800234a:	d91c      	bls.n	8002386 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6999      	ldr	r1, [r3, #24]
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	4613      	mov	r3, r2
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	4413      	add	r3, r2
 800235c:	3b1e      	subs	r3, #30
 800235e:	2207      	movs	r2, #7
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	43db      	mvns	r3, r3
 8002366:	4019      	ands	r1, r3
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	6898      	ldr	r0, [r3, #8]
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	4613      	mov	r3, r2
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	4413      	add	r3, r2
 8002376:	3b1e      	subs	r3, #30
 8002378:	fa00 f203 	lsl.w	r2, r0, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	430a      	orrs	r2, r1
 8002382:	619a      	str	r2, [r3, #24]
 8002384:	e019      	b.n	80023ba <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	6959      	ldr	r1, [r3, #20]
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	4613      	mov	r3, r2
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	4413      	add	r3, r2
 8002396:	2207      	movs	r2, #7
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	43db      	mvns	r3, r3
 800239e:	4019      	ands	r1, r3
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	6898      	ldr	r0, [r3, #8]
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	4613      	mov	r3, r2
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	4413      	add	r3, r2
 80023ae:	fa00 f203 	lsl.w	r2, r0, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	430a      	orrs	r2, r1
 80023b8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	695a      	ldr	r2, [r3, #20]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	08db      	lsrs	r3, r3, #3
 80023c6:	f003 0303 	and.w	r3, r3, #3
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	3b01      	subs	r3, #1
 80023d8:	2b03      	cmp	r3, #3
 80023da:	d84f      	bhi.n	800247c <HAL_ADC_ConfigChannel+0x28c>
 80023dc:	a201      	add	r2, pc, #4	; (adr r2, 80023e4 <HAL_ADC_ConfigChannel+0x1f4>)
 80023de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023e2:	bf00      	nop
 80023e4:	080023f5 	.word	0x080023f5
 80023e8:	08002417 	.word	0x08002417
 80023ec:	08002439 	.word	0x08002439
 80023f0:	0800245b 	.word	0x0800245b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023fa:	4b97      	ldr	r3, [pc, #604]	; (8002658 <HAL_ADC_ConfigChannel+0x468>)
 80023fc:	4013      	ands	r3, r2
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	6812      	ldr	r2, [r2, #0]
 8002402:	0691      	lsls	r1, r2, #26
 8002404:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002406:	430a      	orrs	r2, r1
 8002408:	431a      	orrs	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002412:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002414:	e07b      	b.n	800250e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800241c:	4b8e      	ldr	r3, [pc, #568]	; (8002658 <HAL_ADC_ConfigChannel+0x468>)
 800241e:	4013      	ands	r3, r2
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	6812      	ldr	r2, [r2, #0]
 8002424:	0691      	lsls	r1, r2, #26
 8002426:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002428:	430a      	orrs	r2, r1
 800242a:	431a      	orrs	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002434:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002436:	e06a      	b.n	800250e <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800243e:	4b86      	ldr	r3, [pc, #536]	; (8002658 <HAL_ADC_ConfigChannel+0x468>)
 8002440:	4013      	ands	r3, r2
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	6812      	ldr	r2, [r2, #0]
 8002446:	0691      	lsls	r1, r2, #26
 8002448:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800244a:	430a      	orrs	r2, r1
 800244c:	431a      	orrs	r2, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002456:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002458:	e059      	b.n	800250e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002460:	4b7d      	ldr	r3, [pc, #500]	; (8002658 <HAL_ADC_ConfigChannel+0x468>)
 8002462:	4013      	ands	r3, r2
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	6812      	ldr	r2, [r2, #0]
 8002468:	0691      	lsls	r1, r2, #26
 800246a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800246c:	430a      	orrs	r2, r1
 800246e:	431a      	orrs	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002478:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800247a:	e048      	b.n	800250e <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002482:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	069b      	lsls	r3, r3, #26
 800248c:	429a      	cmp	r2, r3
 800248e:	d107      	bne.n	80024a0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800249e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	069b      	lsls	r3, r3, #26
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d107      	bne.n	80024c4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024c2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	069b      	lsls	r3, r3, #26
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d107      	bne.n	80024e8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024e6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	069b      	lsls	r3, r3, #26
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d107      	bne.n	800250c <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800250a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 800250c:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f003 0303 	and.w	r3, r3, #3
 8002518:	2b01      	cmp	r3, #1
 800251a:	d108      	bne.n	800252e <HAL_ADC_ConfigChannel+0x33e>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b01      	cmp	r3, #1
 8002528:	d101      	bne.n	800252e <HAL_ADC_ConfigChannel+0x33e>
 800252a:	2301      	movs	r3, #1
 800252c:	e000      	b.n	8002530 <HAL_ADC_ConfigChannel+0x340>
 800252e:	2300      	movs	r3, #0
 8002530:	2b00      	cmp	r3, #0
 8002532:	f040 80fe 	bne.w	8002732 <HAL_ADC_ConfigChannel+0x542>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d00f      	beq.n	800255e <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2201      	movs	r2, #1
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	43da      	mvns	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	400a      	ands	r2, r1
 8002558:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800255c:	e049      	b.n	80025f2 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2201      	movs	r2, #1
 800256c:	409a      	lsls	r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	430a      	orrs	r2, r1
 8002574:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2b09      	cmp	r3, #9
 800257e:	d91c      	bls.n	80025ba <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	6999      	ldr	r1, [r3, #24]
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	4613      	mov	r3, r2
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	4413      	add	r3, r2
 8002590:	3b1b      	subs	r3, #27
 8002592:	2207      	movs	r2, #7
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	43db      	mvns	r3, r3
 800259a:	4019      	ands	r1, r3
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	6898      	ldr	r0, [r3, #8]
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	4613      	mov	r3, r2
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	4413      	add	r3, r2
 80025aa:	3b1b      	subs	r3, #27
 80025ac:	fa00 f203 	lsl.w	r2, r0, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	430a      	orrs	r2, r1
 80025b6:	619a      	str	r2, [r3, #24]
 80025b8:	e01b      	b.n	80025f2 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6959      	ldr	r1, [r3, #20]
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	1c5a      	adds	r2, r3, #1
 80025c6:	4613      	mov	r3, r2
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	4413      	add	r3, r2
 80025cc:	2207      	movs	r2, #7
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	43db      	mvns	r3, r3
 80025d4:	4019      	ands	r1, r3
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	6898      	ldr	r0, [r3, #8]
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	1c5a      	adds	r2, r3, #1
 80025e0:	4613      	mov	r3, r2
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	4413      	add	r3, r2
 80025e6:	fa00 f203 	lsl.w	r2, r0, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	430a      	orrs	r2, r1
 80025f0:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025f2:	4b1a      	ldr	r3, [pc, #104]	; (800265c <HAL_ADC_ConfigChannel+0x46c>)
 80025f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2b10      	cmp	r3, #16
 80025fc:	d105      	bne.n	800260a <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80025fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002606:	2b00      	cmp	r3, #0
 8002608:	d014      	beq.n	8002634 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800260e:	2b11      	cmp	r3, #17
 8002610:	d105      	bne.n	800261e <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002612:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00a      	beq.n	8002634 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002622:	2b12      	cmp	r3, #18
 8002624:	f040 8085 	bne.w	8002732 <HAL_ADC_ConfigChannel+0x542>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002628:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002630:	2b00      	cmp	r3, #0
 8002632:	d17e      	bne.n	8002732 <HAL_ADC_ConfigChannel+0x542>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002634:	2300      	movs	r3, #0
 8002636:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f003 0303 	and.w	r3, r3, #3
 8002642:	2b01      	cmp	r3, #1
 8002644:	d10c      	bne.n	8002660 <HAL_ADC_ConfigChannel+0x470>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	2b01      	cmp	r3, #1
 8002652:	d105      	bne.n	8002660 <HAL_ADC_ConfigChannel+0x470>
 8002654:	2301      	movs	r3, #1
 8002656:	e004      	b.n	8002662 <HAL_ADC_ConfigChannel+0x472>
 8002658:	83fff000 	.word	0x83fff000
 800265c:	50000300 	.word	0x50000300
 8002660:	2300      	movs	r3, #0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d150      	bne.n	8002708 <HAL_ADC_ConfigChannel+0x518>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002666:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002668:	2b00      	cmp	r3, #0
 800266a:	d010      	beq.n	800268e <HAL_ADC_ConfigChannel+0x49e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f003 0303 	and.w	r3, r3, #3
 8002674:	2b01      	cmp	r3, #1
 8002676:	d107      	bne.n	8002688 <HAL_ADC_ConfigChannel+0x498>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b01      	cmp	r3, #1
 8002682:	d101      	bne.n	8002688 <HAL_ADC_ConfigChannel+0x498>
 8002684:	2301      	movs	r3, #1
 8002686:	e000      	b.n	800268a <HAL_ADC_ConfigChannel+0x49a>
 8002688:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800268a:	2b00      	cmp	r3, #0
 800268c:	d13c      	bne.n	8002708 <HAL_ADC_ConfigChannel+0x518>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2b10      	cmp	r3, #16
 8002694:	d11d      	bne.n	80026d2 <HAL_ADC_ConfigChannel+0x4e2>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800269e:	d118      	bne.n	80026d2 <HAL_ADC_ConfigChannel+0x4e2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80026a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80026a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026aa:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026ac:	4b27      	ldr	r3, [pc, #156]	; (800274c <HAL_ADC_ConfigChannel+0x55c>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a27      	ldr	r2, [pc, #156]	; (8002750 <HAL_ADC_ConfigChannel+0x560>)
 80026b2:	fba2 2303 	umull	r2, r3, r2, r3
 80026b6:	0c9a      	lsrs	r2, r3, #18
 80026b8:	4613      	mov	r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	4413      	add	r3, r2
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026c2:	e002      	b.n	80026ca <HAL_ADC_ConfigChannel+0x4da>
          {
            wait_loop_index--;
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	3b01      	subs	r3, #1
 80026c8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1f9      	bne.n	80026c4 <HAL_ADC_ConfigChannel+0x4d4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80026d0:	e02e      	b.n	8002730 <HAL_ADC_ConfigChannel+0x540>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2b11      	cmp	r3, #17
 80026d8:	d10b      	bne.n	80026f2 <HAL_ADC_ConfigChannel+0x502>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026e2:	d106      	bne.n	80026f2 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80026e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80026ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026ee:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80026f0:	e01e      	b.n	8002730 <HAL_ADC_ConfigChannel+0x540>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2b12      	cmp	r3, #18
 80026f8:	d11a      	bne.n	8002730 <HAL_ADC_ConfigChannel+0x540>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80026fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002702:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002704:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002706:	e013      	b.n	8002730 <HAL_ADC_ConfigChannel+0x540>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270c:	f043 0220 	orr.w	r2, r3, #32
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800271a:	e00a      	b.n	8002732 <HAL_ADC_ConfigChannel+0x542>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002720:	f043 0220 	orr.w	r2, r3, #32
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800272e:	e000      	b.n	8002732 <HAL_ADC_ConfigChannel+0x542>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002730:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800273a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800273e:	4618      	mov	r0, r3
 8002740:	376c      	adds	r7, #108	; 0x6c
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	20000000 	.word	0x20000000
 8002750:	431bde83 	.word	0x431bde83

08002754 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800275c:	2300      	movs	r3, #0
 800275e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f003 0303 	and.w	r3, r3, #3
 800276a:	2b01      	cmp	r3, #1
 800276c:	d108      	bne.n	8002780 <ADC_Disable+0x2c>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	2b01      	cmp	r3, #1
 800277a:	d101      	bne.n	8002780 <ADC_Disable+0x2c>
 800277c:	2301      	movs	r3, #1
 800277e:	e000      	b.n	8002782 <ADC_Disable+0x2e>
 8002780:	2300      	movs	r3, #0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d047      	beq.n	8002816 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f003 030d 	and.w	r3, r3, #13
 8002790:	2b01      	cmp	r3, #1
 8002792:	d10f      	bne.n	80027b4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689a      	ldr	r2, [r3, #8]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f042 0202 	orr.w	r2, r2, #2
 80027a2:	609a      	str	r2, [r3, #8]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2203      	movs	r2, #3
 80027aa:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80027ac:	f7ff fb6a 	bl	8001e84 <HAL_GetTick>
 80027b0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80027b2:	e029      	b.n	8002808 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b8:	f043 0210 	orr.w	r2, r3, #16
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c4:	f043 0201 	orr.w	r2, r3, #1
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e023      	b.n	8002818 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80027d0:	f7ff fb58 	bl	8001e84 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d914      	bls.n	8002808 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f003 0301 	and.w	r3, r3, #1
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d10d      	bne.n	8002808 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f0:	f043 0210 	orr.w	r2, r3, #16
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fc:	f043 0201 	orr.w	r2, r3, #1
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e007      	b.n	8002818 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b01      	cmp	r3, #1
 8002814:	d0dc      	beq.n	80027d0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <__NVIC_SetPriorityGrouping>:
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f003 0307 	and.w	r3, r3, #7
 800282e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002830:	4b0c      	ldr	r3, [pc, #48]	; (8002864 <__NVIC_SetPriorityGrouping+0x44>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002836:	68ba      	ldr	r2, [r7, #8]
 8002838:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800283c:	4013      	ands	r3, r2
 800283e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002848:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800284c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002852:	4a04      	ldr	r2, [pc, #16]	; (8002864 <__NVIC_SetPriorityGrouping+0x44>)
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	60d3      	str	r3, [r2, #12]
}
 8002858:	bf00      	nop
 800285a:	3714      	adds	r7, #20
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr
 8002864:	e000ed00 	.word	0xe000ed00

08002868 <__NVIC_GetPriorityGrouping>:
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800286c:	4b04      	ldr	r3, [pc, #16]	; (8002880 <__NVIC_GetPriorityGrouping+0x18>)
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	0a1b      	lsrs	r3, r3, #8
 8002872:	f003 0307 	and.w	r3, r3, #7
}
 8002876:	4618      	mov	r0, r3
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr
 8002880:	e000ed00 	.word	0xe000ed00

08002884 <__NVIC_EnableIRQ>:
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	4603      	mov	r3, r0
 800288c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800288e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002892:	2b00      	cmp	r3, #0
 8002894:	db0b      	blt.n	80028ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002896:	79fb      	ldrb	r3, [r7, #7]
 8002898:	f003 021f 	and.w	r2, r3, #31
 800289c:	4907      	ldr	r1, [pc, #28]	; (80028bc <__NVIC_EnableIRQ+0x38>)
 800289e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a2:	095b      	lsrs	r3, r3, #5
 80028a4:	2001      	movs	r0, #1
 80028a6:	fa00 f202 	lsl.w	r2, r0, r2
 80028aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	e000e100 	.word	0xe000e100

080028c0 <__NVIC_SetPriority>:
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	4603      	mov	r3, r0
 80028c8:	6039      	str	r1, [r7, #0]
 80028ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	db0a      	blt.n	80028ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	b2da      	uxtb	r2, r3
 80028d8:	490c      	ldr	r1, [pc, #48]	; (800290c <__NVIC_SetPriority+0x4c>)
 80028da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028de:	0112      	lsls	r2, r2, #4
 80028e0:	b2d2      	uxtb	r2, r2
 80028e2:	440b      	add	r3, r1
 80028e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80028e8:	e00a      	b.n	8002900 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	b2da      	uxtb	r2, r3
 80028ee:	4908      	ldr	r1, [pc, #32]	; (8002910 <__NVIC_SetPriority+0x50>)
 80028f0:	79fb      	ldrb	r3, [r7, #7]
 80028f2:	f003 030f 	and.w	r3, r3, #15
 80028f6:	3b04      	subs	r3, #4
 80028f8:	0112      	lsls	r2, r2, #4
 80028fa:	b2d2      	uxtb	r2, r2
 80028fc:	440b      	add	r3, r1
 80028fe:	761a      	strb	r2, [r3, #24]
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	e000e100 	.word	0xe000e100
 8002910:	e000ed00 	.word	0xe000ed00

08002914 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002914:	b480      	push	{r7}
 8002916:	b089      	sub	sp, #36	; 0x24
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f003 0307 	and.w	r3, r3, #7
 8002926:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	f1c3 0307 	rsb	r3, r3, #7
 800292e:	2b04      	cmp	r3, #4
 8002930:	bf28      	it	cs
 8002932:	2304      	movcs	r3, #4
 8002934:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	3304      	adds	r3, #4
 800293a:	2b06      	cmp	r3, #6
 800293c:	d902      	bls.n	8002944 <NVIC_EncodePriority+0x30>
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	3b03      	subs	r3, #3
 8002942:	e000      	b.n	8002946 <NVIC_EncodePriority+0x32>
 8002944:	2300      	movs	r3, #0
 8002946:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002948:	f04f 32ff 	mov.w	r2, #4294967295
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	fa02 f303 	lsl.w	r3, r2, r3
 8002952:	43da      	mvns	r2, r3
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	401a      	ands	r2, r3
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800295c:	f04f 31ff 	mov.w	r1, #4294967295
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	fa01 f303 	lsl.w	r3, r1, r3
 8002966:	43d9      	mvns	r1, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800296c:	4313      	orrs	r3, r2
         );
}
 800296e:	4618      	mov	r0, r3
 8002970:	3724      	adds	r7, #36	; 0x24
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b082      	sub	sp, #8
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f7ff ff4c 	bl	8002820 <__NVIC_SetPriorityGrouping>
}
 8002988:	bf00      	nop
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
 8002996:	4603      	mov	r3, r0
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	607a      	str	r2, [r7, #4]
 800299c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800299e:	2300      	movs	r3, #0
 80029a0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029a2:	f7ff ff61 	bl	8002868 <__NVIC_GetPriorityGrouping>
 80029a6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	68b9      	ldr	r1, [r7, #8]
 80029ac:	6978      	ldr	r0, [r7, #20]
 80029ae:	f7ff ffb1 	bl	8002914 <NVIC_EncodePriority>
 80029b2:	4602      	mov	r2, r0
 80029b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029b8:	4611      	mov	r1, r2
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff ff80 	bl	80028c0 <__NVIC_SetPriority>
}
 80029c0:	bf00      	nop
 80029c2:	3718      	adds	r7, #24
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	4603      	mov	r3, r0
 80029d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7ff ff54 	bl	8002884 <__NVIC_EnableIRQ>
}
 80029dc:	bf00      	nop
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b087      	sub	sp, #28
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029ee:	2300      	movs	r3, #0
 80029f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029f2:	e14e      	b.n	8002c92 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	2101      	movs	r1, #1
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002a00:	4013      	ands	r3, r2
 8002a02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f000 8140 	beq.w	8002c8c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f003 0303 	and.w	r3, r3, #3
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d005      	beq.n	8002a24 <HAL_GPIO_Init+0x40>
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f003 0303 	and.w	r3, r3, #3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d130      	bne.n	8002a86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	2203      	movs	r2, #3
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	43db      	mvns	r3, r3
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	68da      	ldr	r2, [r3, #12]
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	43db      	mvns	r3, r3
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	4013      	ands	r3, r2
 8002a68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	091b      	lsrs	r3, r3, #4
 8002a70:	f003 0201 	and.w	r2, r3, #1
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f003 0303 	and.w	r3, r3, #3
 8002a8e:	2b03      	cmp	r3, #3
 8002a90:	d017      	beq.n	8002ac2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	2203      	movs	r2, #3
 8002a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa2:	43db      	mvns	r3, r3
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	689a      	ldr	r2, [r3, #8]
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab6:	693a      	ldr	r2, [r7, #16]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f003 0303 	and.w	r3, r3, #3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d123      	bne.n	8002b16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	08da      	lsrs	r2, r3, #3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	3208      	adds	r2, #8
 8002ad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ada:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	f003 0307 	and.w	r3, r3, #7
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	220f      	movs	r2, #15
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	43db      	mvns	r3, r3
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	4013      	ands	r3, r2
 8002af0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	691a      	ldr	r2, [r3, #16]
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	f003 0307 	and.w	r3, r3, #7
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	08da      	lsrs	r2, r3, #3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	3208      	adds	r2, #8
 8002b10:	6939      	ldr	r1, [r7, #16]
 8002b12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	2203      	movs	r2, #3
 8002b22:	fa02 f303 	lsl.w	r3, r2, r3
 8002b26:	43db      	mvns	r3, r3
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f003 0203 	and.w	r2, r3, #3
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f000 809a 	beq.w	8002c8c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b58:	4b55      	ldr	r3, [pc, #340]	; (8002cb0 <HAL_GPIO_Init+0x2cc>)
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	4a54      	ldr	r2, [pc, #336]	; (8002cb0 <HAL_GPIO_Init+0x2cc>)
 8002b5e:	f043 0301 	orr.w	r3, r3, #1
 8002b62:	6193      	str	r3, [r2, #24]
 8002b64:	4b52      	ldr	r3, [pc, #328]	; (8002cb0 <HAL_GPIO_Init+0x2cc>)
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	60bb      	str	r3, [r7, #8]
 8002b6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b70:	4a50      	ldr	r2, [pc, #320]	; (8002cb4 <HAL_GPIO_Init+0x2d0>)
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	089b      	lsrs	r3, r3, #2
 8002b76:	3302      	adds	r3, #2
 8002b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	f003 0303 	and.w	r3, r3, #3
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	220f      	movs	r2, #15
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	4013      	ands	r3, r2
 8002b92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b9a:	d013      	beq.n	8002bc4 <HAL_GPIO_Init+0x1e0>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4a46      	ldr	r2, [pc, #280]	; (8002cb8 <HAL_GPIO_Init+0x2d4>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d00d      	beq.n	8002bc0 <HAL_GPIO_Init+0x1dc>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4a45      	ldr	r2, [pc, #276]	; (8002cbc <HAL_GPIO_Init+0x2d8>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d007      	beq.n	8002bbc <HAL_GPIO_Init+0x1d8>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4a44      	ldr	r2, [pc, #272]	; (8002cc0 <HAL_GPIO_Init+0x2dc>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d101      	bne.n	8002bb8 <HAL_GPIO_Init+0x1d4>
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e006      	b.n	8002bc6 <HAL_GPIO_Init+0x1e2>
 8002bb8:	2305      	movs	r3, #5
 8002bba:	e004      	b.n	8002bc6 <HAL_GPIO_Init+0x1e2>
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	e002      	b.n	8002bc6 <HAL_GPIO_Init+0x1e2>
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e000      	b.n	8002bc6 <HAL_GPIO_Init+0x1e2>
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	697a      	ldr	r2, [r7, #20]
 8002bc8:	f002 0203 	and.w	r2, r2, #3
 8002bcc:	0092      	lsls	r2, r2, #2
 8002bce:	4093      	lsls	r3, r2
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002bd6:	4937      	ldr	r1, [pc, #220]	; (8002cb4 <HAL_GPIO_Init+0x2d0>)
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	089b      	lsrs	r3, r3, #2
 8002bdc:	3302      	adds	r3, #2
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002be4:	4b37      	ldr	r3, [pc, #220]	; (8002cc4 <HAL_GPIO_Init+0x2e0>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	43db      	mvns	r3, r3
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d003      	beq.n	8002c08 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002c00:	693a      	ldr	r2, [r7, #16]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002c08:	4a2e      	ldr	r2, [pc, #184]	; (8002cc4 <HAL_GPIO_Init+0x2e0>)
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c0e:	4b2d      	ldr	r3, [pc, #180]	; (8002cc4 <HAL_GPIO_Init+0x2e0>)
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	43db      	mvns	r3, r3
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d003      	beq.n	8002c32 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002c32:	4a24      	ldr	r2, [pc, #144]	; (8002cc4 <HAL_GPIO_Init+0x2e0>)
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c38:	4b22      	ldr	r3, [pc, #136]	; (8002cc4 <HAL_GPIO_Init+0x2e0>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	43db      	mvns	r3, r3
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	4013      	ands	r3, r2
 8002c46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d003      	beq.n	8002c5c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002c5c:	4a19      	ldr	r2, [pc, #100]	; (8002cc4 <HAL_GPIO_Init+0x2e0>)
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c62:	4b18      	ldr	r3, [pc, #96]	; (8002cc4 <HAL_GPIO_Init+0x2e0>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	43db      	mvns	r3, r3
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002c86:	4a0f      	ldr	r2, [pc, #60]	; (8002cc4 <HAL_GPIO_Init+0x2e0>)
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	3301      	adds	r3, #1
 8002c90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	fa22 f303 	lsr.w	r3, r2, r3
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f47f aea9 	bne.w	80029f4 <HAL_GPIO_Init+0x10>
  }
}
 8002ca2:	bf00      	nop
 8002ca4:	bf00      	nop
 8002ca6:	371c      	adds	r7, #28
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	40010000 	.word	0x40010000
 8002cb8:	48000400 	.word	0x48000400
 8002cbc:	48000800 	.word	0x48000800
 8002cc0:	48000c00 	.word	0x48000c00
 8002cc4:	40010400 	.word	0x40010400

08002cc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	807b      	strh	r3, [r7, #2]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cd8:	787b      	ldrb	r3, [r7, #1]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d003      	beq.n	8002ce6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002cde:	887a      	ldrh	r2, [r7, #2]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ce4:	e002      	b.n	8002cec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ce6:	887a      	ldrh	r2, [r7, #2]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	4603      	mov	r3, r0
 8002d00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002d02:	4b08      	ldr	r3, [pc, #32]	; (8002d24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d04:	695a      	ldr	r2, [r3, #20]
 8002d06:	88fb      	ldrh	r3, [r7, #6]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d006      	beq.n	8002d1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d0e:	4a05      	ldr	r2, [pc, #20]	; (8002d24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d10:	88fb      	ldrh	r3, [r7, #6]
 8002d12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d14:	88fb      	ldrh	r3, [r7, #6]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f000 f806 	bl	8002d28 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d1c:	bf00      	nop
 8002d1e:	3708      	adds	r7, #8
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	40010400 	.word	0x40010400

08002d28 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	4603      	mov	r3, r0
 8002d30:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
	...

08002d40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d4c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d50:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d102      	bne.n	8002d66 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	f001 b823 	b.w	8003dac <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f000 817d 	beq.w	8003076 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002d7c:	4bbc      	ldr	r3, [pc, #752]	; (8003070 <HAL_RCC_OscConfig+0x330>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f003 030c 	and.w	r3, r3, #12
 8002d84:	2b04      	cmp	r3, #4
 8002d86:	d00c      	beq.n	8002da2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d88:	4bb9      	ldr	r3, [pc, #740]	; (8003070 <HAL_RCC_OscConfig+0x330>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f003 030c 	and.w	r3, r3, #12
 8002d90:	2b08      	cmp	r3, #8
 8002d92:	d15c      	bne.n	8002e4e <HAL_RCC_OscConfig+0x10e>
 8002d94:	4bb6      	ldr	r3, [pc, #728]	; (8003070 <HAL_RCC_OscConfig+0x330>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002da0:	d155      	bne.n	8002e4e <HAL_RCC_OscConfig+0x10e>
 8002da2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002da6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002daa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002dae:	fa93 f3a3 	rbit	r3, r3
 8002db2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002db6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dba:	fab3 f383 	clz	r3, r3
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	095b      	lsrs	r3, r3, #5
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	f043 0301 	orr.w	r3, r3, #1
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d102      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x94>
 8002dce:	4ba8      	ldr	r3, [pc, #672]	; (8003070 <HAL_RCC_OscConfig+0x330>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	e015      	b.n	8002e00 <HAL_RCC_OscConfig+0xc0>
 8002dd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dd8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ddc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002de0:	fa93 f3a3 	rbit	r3, r3
 8002de4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002de8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dec:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002df0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002df4:	fa93 f3a3 	rbit	r3, r3
 8002df8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002dfc:	4b9c      	ldr	r3, [pc, #624]	; (8003070 <HAL_RCC_OscConfig+0x330>)
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e00:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e04:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002e08:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002e0c:	fa92 f2a2 	rbit	r2, r2
 8002e10:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002e14:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002e18:	fab2 f282 	clz	r2, r2
 8002e1c:	b2d2      	uxtb	r2, r2
 8002e1e:	f042 0220 	orr.w	r2, r2, #32
 8002e22:	b2d2      	uxtb	r2, r2
 8002e24:	f002 021f 	and.w	r2, r2, #31
 8002e28:	2101      	movs	r1, #1
 8002e2a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e2e:	4013      	ands	r3, r2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f000 811f 	beq.w	8003074 <HAL_RCC_OscConfig+0x334>
 8002e36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	f040 8116 	bne.w	8003074 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	f000 bfaf 	b.w	8003dac <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e5e:	d106      	bne.n	8002e6e <HAL_RCC_OscConfig+0x12e>
 8002e60:	4b83      	ldr	r3, [pc, #524]	; (8003070 <HAL_RCC_OscConfig+0x330>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a82      	ldr	r2, [pc, #520]	; (8003070 <HAL_RCC_OscConfig+0x330>)
 8002e66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e6a:	6013      	str	r3, [r2, #0]
 8002e6c:	e036      	b.n	8002edc <HAL_RCC_OscConfig+0x19c>
 8002e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10c      	bne.n	8002e98 <HAL_RCC_OscConfig+0x158>
 8002e7e:	4b7c      	ldr	r3, [pc, #496]	; (8003070 <HAL_RCC_OscConfig+0x330>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a7b      	ldr	r2, [pc, #492]	; (8003070 <HAL_RCC_OscConfig+0x330>)
 8002e84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e88:	6013      	str	r3, [r2, #0]
 8002e8a:	4b79      	ldr	r3, [pc, #484]	; (8003070 <HAL_RCC_OscConfig+0x330>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a78      	ldr	r2, [pc, #480]	; (8003070 <HAL_RCC_OscConfig+0x330>)
 8002e90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e94:	6013      	str	r3, [r2, #0]
 8002e96:	e021      	b.n	8002edc <HAL_RCC_OscConfig+0x19c>
 8002e98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e9c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ea8:	d10c      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x184>
 8002eaa:	4b71      	ldr	r3, [pc, #452]	; (8003070 <HAL_RCC_OscConfig+0x330>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a70      	ldr	r2, [pc, #448]	; (8003070 <HAL_RCC_OscConfig+0x330>)
 8002eb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002eb4:	6013      	str	r3, [r2, #0]
 8002eb6:	4b6e      	ldr	r3, [pc, #440]	; (8003070 <HAL_RCC_OscConfig+0x330>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a6d      	ldr	r2, [pc, #436]	; (8003070 <HAL_RCC_OscConfig+0x330>)
 8002ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ec0:	6013      	str	r3, [r2, #0]
 8002ec2:	e00b      	b.n	8002edc <HAL_RCC_OscConfig+0x19c>
 8002ec4:	4b6a      	ldr	r3, [pc, #424]	; (8003070 <HAL_RCC_OscConfig+0x330>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a69      	ldr	r2, [pc, #420]	; (8003070 <HAL_RCC_OscConfig+0x330>)
 8002eca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ece:	6013      	str	r3, [r2, #0]
 8002ed0:	4b67      	ldr	r3, [pc, #412]	; (8003070 <HAL_RCC_OscConfig+0x330>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a66      	ldr	r2, [pc, #408]	; (8003070 <HAL_RCC_OscConfig+0x330>)
 8002ed6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eda:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002edc:	4b64      	ldr	r3, [pc, #400]	; (8003070 <HAL_RCC_OscConfig+0x330>)
 8002ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee0:	f023 020f 	bic.w	r2, r3, #15
 8002ee4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	495f      	ldr	r1, [pc, #380]	; (8003070 <HAL_RCC_OscConfig+0x330>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ef6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002efa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d059      	beq.n	8002fba <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f06:	f7fe ffbd 	bl	8001e84 <HAL_GetTick>
 8002f0a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f0e:	e00a      	b.n	8002f26 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f10:	f7fe ffb8 	bl	8001e84 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b64      	cmp	r3, #100	; 0x64
 8002f1e:	d902      	bls.n	8002f26 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	f000 bf43 	b.w	8003dac <HAL_RCC_OscConfig+0x106c>
 8002f26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f2a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002f32:	fa93 f3a3 	rbit	r3, r3
 8002f36:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002f3a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f3e:	fab3 f383 	clz	r3, r3
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	095b      	lsrs	r3, r3, #5
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	f043 0301 	orr.w	r3, r3, #1
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d102      	bne.n	8002f58 <HAL_RCC_OscConfig+0x218>
 8002f52:	4b47      	ldr	r3, [pc, #284]	; (8003070 <HAL_RCC_OscConfig+0x330>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	e015      	b.n	8002f84 <HAL_RCC_OscConfig+0x244>
 8002f58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f5c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f60:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002f64:	fa93 f3a3 	rbit	r3, r3
 8002f68:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002f6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f70:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002f74:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002f78:	fa93 f3a3 	rbit	r3, r3
 8002f7c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002f80:	4b3b      	ldr	r3, [pc, #236]	; (8003070 <HAL_RCC_OscConfig+0x330>)
 8002f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f84:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f88:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002f8c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002f90:	fa92 f2a2 	rbit	r2, r2
 8002f94:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002f98:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002f9c:	fab2 f282 	clz	r2, r2
 8002fa0:	b2d2      	uxtb	r2, r2
 8002fa2:	f042 0220 	orr.w	r2, r2, #32
 8002fa6:	b2d2      	uxtb	r2, r2
 8002fa8:	f002 021f 	and.w	r2, r2, #31
 8002fac:	2101      	movs	r1, #1
 8002fae:	fa01 f202 	lsl.w	r2, r1, r2
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d0ab      	beq.n	8002f10 <HAL_RCC_OscConfig+0x1d0>
 8002fb8:	e05d      	b.n	8003076 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fba:	f7fe ff63 	bl	8001e84 <HAL_GetTick>
 8002fbe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fc2:	e00a      	b.n	8002fda <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fc4:	f7fe ff5e 	bl	8001e84 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b64      	cmp	r3, #100	; 0x64
 8002fd2:	d902      	bls.n	8002fda <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	f000 bee9 	b.w	8003dac <HAL_RCC_OscConfig+0x106c>
 8002fda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fde:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002fe6:	fa93 f3a3 	rbit	r3, r3
 8002fea:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002fee:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ff2:	fab3 f383 	clz	r3, r3
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	095b      	lsrs	r3, r3, #5
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	f043 0301 	orr.w	r3, r3, #1
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b01      	cmp	r3, #1
 8003004:	d102      	bne.n	800300c <HAL_RCC_OscConfig+0x2cc>
 8003006:	4b1a      	ldr	r3, [pc, #104]	; (8003070 <HAL_RCC_OscConfig+0x330>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	e015      	b.n	8003038 <HAL_RCC_OscConfig+0x2f8>
 800300c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003010:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003014:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003018:	fa93 f3a3 	rbit	r3, r3
 800301c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003020:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003024:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003028:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800302c:	fa93 f3a3 	rbit	r3, r3
 8003030:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003034:	4b0e      	ldr	r3, [pc, #56]	; (8003070 <HAL_RCC_OscConfig+0x330>)
 8003036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003038:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800303c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003040:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003044:	fa92 f2a2 	rbit	r2, r2
 8003048:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800304c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003050:	fab2 f282 	clz	r2, r2
 8003054:	b2d2      	uxtb	r2, r2
 8003056:	f042 0220 	orr.w	r2, r2, #32
 800305a:	b2d2      	uxtb	r2, r2
 800305c:	f002 021f 	and.w	r2, r2, #31
 8003060:	2101      	movs	r1, #1
 8003062:	fa01 f202 	lsl.w	r2, r1, r2
 8003066:	4013      	ands	r3, r2
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1ab      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x284>
 800306c:	e003      	b.n	8003076 <HAL_RCC_OscConfig+0x336>
 800306e:	bf00      	nop
 8003070:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003074:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003076:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800307a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	f000 817d 	beq.w	8003386 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800308c:	4ba6      	ldr	r3, [pc, #664]	; (8003328 <HAL_RCC_OscConfig+0x5e8>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f003 030c 	and.w	r3, r3, #12
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00b      	beq.n	80030b0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003098:	4ba3      	ldr	r3, [pc, #652]	; (8003328 <HAL_RCC_OscConfig+0x5e8>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f003 030c 	and.w	r3, r3, #12
 80030a0:	2b08      	cmp	r3, #8
 80030a2:	d172      	bne.n	800318a <HAL_RCC_OscConfig+0x44a>
 80030a4:	4ba0      	ldr	r3, [pc, #640]	; (8003328 <HAL_RCC_OscConfig+0x5e8>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d16c      	bne.n	800318a <HAL_RCC_OscConfig+0x44a>
 80030b0:	2302      	movs	r3, #2
 80030b2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80030ba:	fa93 f3a3 	rbit	r3, r3
 80030be:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80030c2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030c6:	fab3 f383 	clz	r3, r3
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	095b      	lsrs	r3, r3, #5
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	f043 0301 	orr.w	r3, r3, #1
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d102      	bne.n	80030e0 <HAL_RCC_OscConfig+0x3a0>
 80030da:	4b93      	ldr	r3, [pc, #588]	; (8003328 <HAL_RCC_OscConfig+0x5e8>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	e013      	b.n	8003108 <HAL_RCC_OscConfig+0x3c8>
 80030e0:	2302      	movs	r3, #2
 80030e2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80030ea:	fa93 f3a3 	rbit	r3, r3
 80030ee:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80030f2:	2302      	movs	r3, #2
 80030f4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80030f8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80030fc:	fa93 f3a3 	rbit	r3, r3
 8003100:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003104:	4b88      	ldr	r3, [pc, #544]	; (8003328 <HAL_RCC_OscConfig+0x5e8>)
 8003106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003108:	2202      	movs	r2, #2
 800310a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800310e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003112:	fa92 f2a2 	rbit	r2, r2
 8003116:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800311a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800311e:	fab2 f282 	clz	r2, r2
 8003122:	b2d2      	uxtb	r2, r2
 8003124:	f042 0220 	orr.w	r2, r2, #32
 8003128:	b2d2      	uxtb	r2, r2
 800312a:	f002 021f 	and.w	r2, r2, #31
 800312e:	2101      	movs	r1, #1
 8003130:	fa01 f202 	lsl.w	r2, r1, r2
 8003134:	4013      	ands	r3, r2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00a      	beq.n	8003150 <HAL_RCC_OscConfig+0x410>
 800313a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800313e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d002      	beq.n	8003150 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	f000 be2e 	b.w	8003dac <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003150:	4b75      	ldr	r3, [pc, #468]	; (8003328 <HAL_RCC_OscConfig+0x5e8>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003158:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800315c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	695b      	ldr	r3, [r3, #20]
 8003164:	21f8      	movs	r1, #248	; 0xf8
 8003166:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800316e:	fa91 f1a1 	rbit	r1, r1
 8003172:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003176:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800317a:	fab1 f181 	clz	r1, r1
 800317e:	b2c9      	uxtb	r1, r1
 8003180:	408b      	lsls	r3, r1
 8003182:	4969      	ldr	r1, [pc, #420]	; (8003328 <HAL_RCC_OscConfig+0x5e8>)
 8003184:	4313      	orrs	r3, r2
 8003186:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003188:	e0fd      	b.n	8003386 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800318a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800318e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	2b00      	cmp	r3, #0
 8003198:	f000 8088 	beq.w	80032ac <HAL_RCC_OscConfig+0x56c>
 800319c:	2301      	movs	r3, #1
 800319e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80031a6:	fa93 f3a3 	rbit	r3, r3
 80031aa:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80031ae:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031b2:	fab3 f383 	clz	r3, r3
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80031bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	461a      	mov	r2, r3
 80031c4:	2301      	movs	r3, #1
 80031c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c8:	f7fe fe5c 	bl	8001e84 <HAL_GetTick>
 80031cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d0:	e00a      	b.n	80031e8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031d2:	f7fe fe57 	bl	8001e84 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d902      	bls.n	80031e8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	f000 bde2 	b.w	8003dac <HAL_RCC_OscConfig+0x106c>
 80031e8:	2302      	movs	r3, #2
 80031ea:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ee:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80031f2:	fa93 f3a3 	rbit	r3, r3
 80031f6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80031fa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031fe:	fab3 f383 	clz	r3, r3
 8003202:	b2db      	uxtb	r3, r3
 8003204:	095b      	lsrs	r3, r3, #5
 8003206:	b2db      	uxtb	r3, r3
 8003208:	f043 0301 	orr.w	r3, r3, #1
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b01      	cmp	r3, #1
 8003210:	d102      	bne.n	8003218 <HAL_RCC_OscConfig+0x4d8>
 8003212:	4b45      	ldr	r3, [pc, #276]	; (8003328 <HAL_RCC_OscConfig+0x5e8>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	e013      	b.n	8003240 <HAL_RCC_OscConfig+0x500>
 8003218:	2302      	movs	r3, #2
 800321a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800321e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003222:	fa93 f3a3 	rbit	r3, r3
 8003226:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800322a:	2302      	movs	r3, #2
 800322c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003230:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003234:	fa93 f3a3 	rbit	r3, r3
 8003238:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800323c:	4b3a      	ldr	r3, [pc, #232]	; (8003328 <HAL_RCC_OscConfig+0x5e8>)
 800323e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003240:	2202      	movs	r2, #2
 8003242:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003246:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800324a:	fa92 f2a2 	rbit	r2, r2
 800324e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003252:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003256:	fab2 f282 	clz	r2, r2
 800325a:	b2d2      	uxtb	r2, r2
 800325c:	f042 0220 	orr.w	r2, r2, #32
 8003260:	b2d2      	uxtb	r2, r2
 8003262:	f002 021f 	and.w	r2, r2, #31
 8003266:	2101      	movs	r1, #1
 8003268:	fa01 f202 	lsl.w	r2, r1, r2
 800326c:	4013      	ands	r3, r2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d0af      	beq.n	80031d2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003272:	4b2d      	ldr	r3, [pc, #180]	; (8003328 <HAL_RCC_OscConfig+0x5e8>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800327a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800327e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	21f8      	movs	r1, #248	; 0xf8
 8003288:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003290:	fa91 f1a1 	rbit	r1, r1
 8003294:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003298:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800329c:	fab1 f181 	clz	r1, r1
 80032a0:	b2c9      	uxtb	r1, r1
 80032a2:	408b      	lsls	r3, r1
 80032a4:	4920      	ldr	r1, [pc, #128]	; (8003328 <HAL_RCC_OscConfig+0x5e8>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	600b      	str	r3, [r1, #0]
 80032aa:	e06c      	b.n	8003386 <HAL_RCC_OscConfig+0x646>
 80032ac:	2301      	movs	r3, #1
 80032ae:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80032b6:	fa93 f3a3 	rbit	r3, r3
 80032ba:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80032be:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032c2:	fab3 f383 	clz	r3, r3
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80032cc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	461a      	mov	r2, r3
 80032d4:	2300      	movs	r3, #0
 80032d6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d8:	f7fe fdd4 	bl	8001e84 <HAL_GetTick>
 80032dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032e0:	e00a      	b.n	80032f8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032e2:	f7fe fdcf 	bl	8001e84 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d902      	bls.n	80032f8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	f000 bd5a 	b.w	8003dac <HAL_RCC_OscConfig+0x106c>
 80032f8:	2302      	movs	r3, #2
 80032fa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003302:	fa93 f3a3 	rbit	r3, r3
 8003306:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800330a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800330e:	fab3 f383 	clz	r3, r3
 8003312:	b2db      	uxtb	r3, r3
 8003314:	095b      	lsrs	r3, r3, #5
 8003316:	b2db      	uxtb	r3, r3
 8003318:	f043 0301 	orr.w	r3, r3, #1
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b01      	cmp	r3, #1
 8003320:	d104      	bne.n	800332c <HAL_RCC_OscConfig+0x5ec>
 8003322:	4b01      	ldr	r3, [pc, #4]	; (8003328 <HAL_RCC_OscConfig+0x5e8>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	e015      	b.n	8003354 <HAL_RCC_OscConfig+0x614>
 8003328:	40021000 	.word	0x40021000
 800332c:	2302      	movs	r3, #2
 800332e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003332:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003336:	fa93 f3a3 	rbit	r3, r3
 800333a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800333e:	2302      	movs	r3, #2
 8003340:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003344:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003348:	fa93 f3a3 	rbit	r3, r3
 800334c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003350:	4bc8      	ldr	r3, [pc, #800]	; (8003674 <HAL_RCC_OscConfig+0x934>)
 8003352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003354:	2202      	movs	r2, #2
 8003356:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800335a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800335e:	fa92 f2a2 	rbit	r2, r2
 8003362:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003366:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800336a:	fab2 f282 	clz	r2, r2
 800336e:	b2d2      	uxtb	r2, r2
 8003370:	f042 0220 	orr.w	r2, r2, #32
 8003374:	b2d2      	uxtb	r2, r2
 8003376:	f002 021f 	and.w	r2, r2, #31
 800337a:	2101      	movs	r1, #1
 800337c:	fa01 f202 	lsl.w	r2, r1, r2
 8003380:	4013      	ands	r3, r2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1ad      	bne.n	80032e2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003386:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800338a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0308 	and.w	r3, r3, #8
 8003396:	2b00      	cmp	r3, #0
 8003398:	f000 8110 	beq.w	80035bc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800339c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d079      	beq.n	80034a0 <HAL_RCC_OscConfig+0x760>
 80033ac:	2301      	movs	r3, #1
 80033ae:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80033b6:	fa93 f3a3 	rbit	r3, r3
 80033ba:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80033be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033c2:	fab3 f383 	clz	r3, r3
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	461a      	mov	r2, r3
 80033ca:	4bab      	ldr	r3, [pc, #684]	; (8003678 <HAL_RCC_OscConfig+0x938>)
 80033cc:	4413      	add	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	461a      	mov	r2, r3
 80033d2:	2301      	movs	r3, #1
 80033d4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033d6:	f7fe fd55 	bl	8001e84 <HAL_GetTick>
 80033da:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033de:	e00a      	b.n	80033f6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033e0:	f7fe fd50 	bl	8001e84 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d902      	bls.n	80033f6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	f000 bcdb 	b.w	8003dac <HAL_RCC_OscConfig+0x106c>
 80033f6:	2302      	movs	r3, #2
 80033f8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003400:	fa93 f3a3 	rbit	r3, r3
 8003404:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003408:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800340c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003410:	2202      	movs	r2, #2
 8003412:	601a      	str	r2, [r3, #0]
 8003414:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003418:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	fa93 f2a3 	rbit	r2, r3
 8003422:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003426:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800342a:	601a      	str	r2, [r3, #0]
 800342c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003430:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003434:	2202      	movs	r2, #2
 8003436:	601a      	str	r2, [r3, #0]
 8003438:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800343c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	fa93 f2a3 	rbit	r2, r3
 8003446:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800344a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800344e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003450:	4b88      	ldr	r3, [pc, #544]	; (8003674 <HAL_RCC_OscConfig+0x934>)
 8003452:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003454:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003458:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800345c:	2102      	movs	r1, #2
 800345e:	6019      	str	r1, [r3, #0]
 8003460:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003464:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	fa93 f1a3 	rbit	r1, r3
 800346e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003472:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003476:	6019      	str	r1, [r3, #0]
  return result;
 8003478:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800347c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	fab3 f383 	clz	r3, r3
 8003486:	b2db      	uxtb	r3, r3
 8003488:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800348c:	b2db      	uxtb	r3, r3
 800348e:	f003 031f 	and.w	r3, r3, #31
 8003492:	2101      	movs	r1, #1
 8003494:	fa01 f303 	lsl.w	r3, r1, r3
 8003498:	4013      	ands	r3, r2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d0a0      	beq.n	80033e0 <HAL_RCC_OscConfig+0x6a0>
 800349e:	e08d      	b.n	80035bc <HAL_RCC_OscConfig+0x87c>
 80034a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034a4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80034a8:	2201      	movs	r2, #1
 80034aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034b0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	fa93 f2a3 	rbit	r2, r3
 80034ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034be:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80034c2:	601a      	str	r2, [r3, #0]
  return result;
 80034c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034c8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80034cc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034ce:	fab3 f383 	clz	r3, r3
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	461a      	mov	r2, r3
 80034d6:	4b68      	ldr	r3, [pc, #416]	; (8003678 <HAL_RCC_OscConfig+0x938>)
 80034d8:	4413      	add	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	461a      	mov	r2, r3
 80034de:	2300      	movs	r3, #0
 80034e0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034e2:	f7fe fccf 	bl	8001e84 <HAL_GetTick>
 80034e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034ea:	e00a      	b.n	8003502 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034ec:	f7fe fcca 	bl	8001e84 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d902      	bls.n	8003502 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	f000 bc55 	b.w	8003dac <HAL_RCC_OscConfig+0x106c>
 8003502:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003506:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800350a:	2202      	movs	r2, #2
 800350c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003512:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	fa93 f2a3 	rbit	r2, r3
 800351c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003520:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003524:	601a      	str	r2, [r3, #0]
 8003526:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800352a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800352e:	2202      	movs	r2, #2
 8003530:	601a      	str	r2, [r3, #0]
 8003532:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003536:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	fa93 f2a3 	rbit	r2, r3
 8003540:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003544:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003548:	601a      	str	r2, [r3, #0]
 800354a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800354e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003552:	2202      	movs	r2, #2
 8003554:	601a      	str	r2, [r3, #0]
 8003556:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800355a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	fa93 f2a3 	rbit	r2, r3
 8003564:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003568:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800356c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800356e:	4b41      	ldr	r3, [pc, #260]	; (8003674 <HAL_RCC_OscConfig+0x934>)
 8003570:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003572:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003576:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800357a:	2102      	movs	r1, #2
 800357c:	6019      	str	r1, [r3, #0]
 800357e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003582:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	fa93 f1a3 	rbit	r1, r3
 800358c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003590:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003594:	6019      	str	r1, [r3, #0]
  return result;
 8003596:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800359a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	fab3 f383 	clz	r3, r3
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	f003 031f 	and.w	r3, r3, #31
 80035b0:	2101      	movs	r1, #1
 80035b2:	fa01 f303 	lsl.w	r3, r1, r3
 80035b6:	4013      	ands	r3, r2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d197      	bne.n	80034ec <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0304 	and.w	r3, r3, #4
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f000 81a1 	beq.w	8003914 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035d2:	2300      	movs	r3, #0
 80035d4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035d8:	4b26      	ldr	r3, [pc, #152]	; (8003674 <HAL_RCC_OscConfig+0x934>)
 80035da:	69db      	ldr	r3, [r3, #28]
 80035dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d116      	bne.n	8003612 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035e4:	4b23      	ldr	r3, [pc, #140]	; (8003674 <HAL_RCC_OscConfig+0x934>)
 80035e6:	69db      	ldr	r3, [r3, #28]
 80035e8:	4a22      	ldr	r2, [pc, #136]	; (8003674 <HAL_RCC_OscConfig+0x934>)
 80035ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035ee:	61d3      	str	r3, [r2, #28]
 80035f0:	4b20      	ldr	r3, [pc, #128]	; (8003674 <HAL_RCC_OscConfig+0x934>)
 80035f2:	69db      	ldr	r3, [r3, #28]
 80035f4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80035f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035fc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003600:	601a      	str	r2, [r3, #0]
 8003602:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003606:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800360a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800360c:	2301      	movs	r3, #1
 800360e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003612:	4b1a      	ldr	r3, [pc, #104]	; (800367c <HAL_RCC_OscConfig+0x93c>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800361a:	2b00      	cmp	r3, #0
 800361c:	d11a      	bne.n	8003654 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800361e:	4b17      	ldr	r3, [pc, #92]	; (800367c <HAL_RCC_OscConfig+0x93c>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a16      	ldr	r2, [pc, #88]	; (800367c <HAL_RCC_OscConfig+0x93c>)
 8003624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003628:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800362a:	f7fe fc2b 	bl	8001e84 <HAL_GetTick>
 800362e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003632:	e009      	b.n	8003648 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003634:	f7fe fc26 	bl	8001e84 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	2b64      	cmp	r3, #100	; 0x64
 8003642:	d901      	bls.n	8003648 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e3b1      	b.n	8003dac <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003648:	4b0c      	ldr	r3, [pc, #48]	; (800367c <HAL_RCC_OscConfig+0x93c>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003650:	2b00      	cmp	r3, #0
 8003652:	d0ef      	beq.n	8003634 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003654:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003658:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d10d      	bne.n	8003680 <HAL_RCC_OscConfig+0x940>
 8003664:	4b03      	ldr	r3, [pc, #12]	; (8003674 <HAL_RCC_OscConfig+0x934>)
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	4a02      	ldr	r2, [pc, #8]	; (8003674 <HAL_RCC_OscConfig+0x934>)
 800366a:	f043 0301 	orr.w	r3, r3, #1
 800366e:	6213      	str	r3, [r2, #32]
 8003670:	e03c      	b.n	80036ec <HAL_RCC_OscConfig+0x9ac>
 8003672:	bf00      	nop
 8003674:	40021000 	.word	0x40021000
 8003678:	10908120 	.word	0x10908120
 800367c:	40007000 	.word	0x40007000
 8003680:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003684:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d10c      	bne.n	80036aa <HAL_RCC_OscConfig+0x96a>
 8003690:	4bc1      	ldr	r3, [pc, #772]	; (8003998 <HAL_RCC_OscConfig+0xc58>)
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	4ac0      	ldr	r2, [pc, #768]	; (8003998 <HAL_RCC_OscConfig+0xc58>)
 8003696:	f023 0301 	bic.w	r3, r3, #1
 800369a:	6213      	str	r3, [r2, #32]
 800369c:	4bbe      	ldr	r3, [pc, #760]	; (8003998 <HAL_RCC_OscConfig+0xc58>)
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	4abd      	ldr	r2, [pc, #756]	; (8003998 <HAL_RCC_OscConfig+0xc58>)
 80036a2:	f023 0304 	bic.w	r3, r3, #4
 80036a6:	6213      	str	r3, [r2, #32]
 80036a8:	e020      	b.n	80036ec <HAL_RCC_OscConfig+0x9ac>
 80036aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	2b05      	cmp	r3, #5
 80036b8:	d10c      	bne.n	80036d4 <HAL_RCC_OscConfig+0x994>
 80036ba:	4bb7      	ldr	r3, [pc, #732]	; (8003998 <HAL_RCC_OscConfig+0xc58>)
 80036bc:	6a1b      	ldr	r3, [r3, #32]
 80036be:	4ab6      	ldr	r2, [pc, #728]	; (8003998 <HAL_RCC_OscConfig+0xc58>)
 80036c0:	f043 0304 	orr.w	r3, r3, #4
 80036c4:	6213      	str	r3, [r2, #32]
 80036c6:	4bb4      	ldr	r3, [pc, #720]	; (8003998 <HAL_RCC_OscConfig+0xc58>)
 80036c8:	6a1b      	ldr	r3, [r3, #32]
 80036ca:	4ab3      	ldr	r2, [pc, #716]	; (8003998 <HAL_RCC_OscConfig+0xc58>)
 80036cc:	f043 0301 	orr.w	r3, r3, #1
 80036d0:	6213      	str	r3, [r2, #32]
 80036d2:	e00b      	b.n	80036ec <HAL_RCC_OscConfig+0x9ac>
 80036d4:	4bb0      	ldr	r3, [pc, #704]	; (8003998 <HAL_RCC_OscConfig+0xc58>)
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	4aaf      	ldr	r2, [pc, #700]	; (8003998 <HAL_RCC_OscConfig+0xc58>)
 80036da:	f023 0301 	bic.w	r3, r3, #1
 80036de:	6213      	str	r3, [r2, #32]
 80036e0:	4bad      	ldr	r3, [pc, #692]	; (8003998 <HAL_RCC_OscConfig+0xc58>)
 80036e2:	6a1b      	ldr	r3, [r3, #32]
 80036e4:	4aac      	ldr	r2, [pc, #688]	; (8003998 <HAL_RCC_OscConfig+0xc58>)
 80036e6:	f023 0304 	bic.w	r3, r3, #4
 80036ea:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f000 8081 	beq.w	8003800 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036fe:	f7fe fbc1 	bl	8001e84 <HAL_GetTick>
 8003702:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003706:	e00b      	b.n	8003720 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003708:	f7fe fbbc 	bl	8001e84 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	f241 3288 	movw	r2, #5000	; 0x1388
 8003718:	4293      	cmp	r3, r2
 800371a:	d901      	bls.n	8003720 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e345      	b.n	8003dac <HAL_RCC_OscConfig+0x106c>
 8003720:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003724:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003728:	2202      	movs	r2, #2
 800372a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003730:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	fa93 f2a3 	rbit	r2, r3
 800373a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800373e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003742:	601a      	str	r2, [r3, #0]
 8003744:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003748:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800374c:	2202      	movs	r2, #2
 800374e:	601a      	str	r2, [r3, #0]
 8003750:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003754:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	fa93 f2a3 	rbit	r2, r3
 800375e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003762:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003766:	601a      	str	r2, [r3, #0]
  return result;
 8003768:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800376c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003770:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003772:	fab3 f383 	clz	r3, r3
 8003776:	b2db      	uxtb	r3, r3
 8003778:	095b      	lsrs	r3, r3, #5
 800377a:	b2db      	uxtb	r3, r3
 800377c:	f043 0302 	orr.w	r3, r3, #2
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b02      	cmp	r3, #2
 8003784:	d102      	bne.n	800378c <HAL_RCC_OscConfig+0xa4c>
 8003786:	4b84      	ldr	r3, [pc, #528]	; (8003998 <HAL_RCC_OscConfig+0xc58>)
 8003788:	6a1b      	ldr	r3, [r3, #32]
 800378a:	e013      	b.n	80037b4 <HAL_RCC_OscConfig+0xa74>
 800378c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003790:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003794:	2202      	movs	r2, #2
 8003796:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003798:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800379c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	fa93 f2a3 	rbit	r2, r3
 80037a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037aa:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	4b79      	ldr	r3, [pc, #484]	; (8003998 <HAL_RCC_OscConfig+0xc58>)
 80037b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037b8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80037bc:	2102      	movs	r1, #2
 80037be:	6011      	str	r1, [r2, #0]
 80037c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037c4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80037c8:	6812      	ldr	r2, [r2, #0]
 80037ca:	fa92 f1a2 	rbit	r1, r2
 80037ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037d2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80037d6:	6011      	str	r1, [r2, #0]
  return result;
 80037d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037dc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80037e0:	6812      	ldr	r2, [r2, #0]
 80037e2:	fab2 f282 	clz	r2, r2
 80037e6:	b2d2      	uxtb	r2, r2
 80037e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037ec:	b2d2      	uxtb	r2, r2
 80037ee:	f002 021f 	and.w	r2, r2, #31
 80037f2:	2101      	movs	r1, #1
 80037f4:	fa01 f202 	lsl.w	r2, r1, r2
 80037f8:	4013      	ands	r3, r2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d084      	beq.n	8003708 <HAL_RCC_OscConfig+0x9c8>
 80037fe:	e07f      	b.n	8003900 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003800:	f7fe fb40 	bl	8001e84 <HAL_GetTick>
 8003804:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003808:	e00b      	b.n	8003822 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800380a:	f7fe fb3b 	bl	8001e84 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	f241 3288 	movw	r2, #5000	; 0x1388
 800381a:	4293      	cmp	r3, r2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e2c4      	b.n	8003dac <HAL_RCC_OscConfig+0x106c>
 8003822:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003826:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800382a:	2202      	movs	r2, #2
 800382c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800382e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003832:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	fa93 f2a3 	rbit	r2, r3
 800383c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003840:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003844:	601a      	str	r2, [r3, #0]
 8003846:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800384a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800384e:	2202      	movs	r2, #2
 8003850:	601a      	str	r2, [r3, #0]
 8003852:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003856:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	fa93 f2a3 	rbit	r2, r3
 8003860:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003864:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003868:	601a      	str	r2, [r3, #0]
  return result;
 800386a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800386e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003872:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003874:	fab3 f383 	clz	r3, r3
 8003878:	b2db      	uxtb	r3, r3
 800387a:	095b      	lsrs	r3, r3, #5
 800387c:	b2db      	uxtb	r3, r3
 800387e:	f043 0302 	orr.w	r3, r3, #2
 8003882:	b2db      	uxtb	r3, r3
 8003884:	2b02      	cmp	r3, #2
 8003886:	d102      	bne.n	800388e <HAL_RCC_OscConfig+0xb4e>
 8003888:	4b43      	ldr	r3, [pc, #268]	; (8003998 <HAL_RCC_OscConfig+0xc58>)
 800388a:	6a1b      	ldr	r3, [r3, #32]
 800388c:	e013      	b.n	80038b6 <HAL_RCC_OscConfig+0xb76>
 800388e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003892:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003896:	2202      	movs	r2, #2
 8003898:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800389a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800389e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	fa93 f2a3 	rbit	r2, r3
 80038a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ac:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80038b0:	601a      	str	r2, [r3, #0]
 80038b2:	4b39      	ldr	r3, [pc, #228]	; (8003998 <HAL_RCC_OscConfig+0xc58>)
 80038b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80038ba:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80038be:	2102      	movs	r1, #2
 80038c0:	6011      	str	r1, [r2, #0]
 80038c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80038c6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80038ca:	6812      	ldr	r2, [r2, #0]
 80038cc:	fa92 f1a2 	rbit	r1, r2
 80038d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80038d4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80038d8:	6011      	str	r1, [r2, #0]
  return result;
 80038da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80038de:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80038e2:	6812      	ldr	r2, [r2, #0]
 80038e4:	fab2 f282 	clz	r2, r2
 80038e8:	b2d2      	uxtb	r2, r2
 80038ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038ee:	b2d2      	uxtb	r2, r2
 80038f0:	f002 021f 	and.w	r2, r2, #31
 80038f4:	2101      	movs	r1, #1
 80038f6:	fa01 f202 	lsl.w	r2, r1, r2
 80038fa:	4013      	ands	r3, r2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d184      	bne.n	800380a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003900:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003904:	2b01      	cmp	r3, #1
 8003906:	d105      	bne.n	8003914 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003908:	4b23      	ldr	r3, [pc, #140]	; (8003998 <HAL_RCC_OscConfig+0xc58>)
 800390a:	69db      	ldr	r3, [r3, #28]
 800390c:	4a22      	ldr	r2, [pc, #136]	; (8003998 <HAL_RCC_OscConfig+0xc58>)
 800390e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003912:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003914:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003918:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	69db      	ldr	r3, [r3, #28]
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 8242 	beq.w	8003daa <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003926:	4b1c      	ldr	r3, [pc, #112]	; (8003998 <HAL_RCC_OscConfig+0xc58>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f003 030c 	and.w	r3, r3, #12
 800392e:	2b08      	cmp	r3, #8
 8003930:	f000 8213 	beq.w	8003d5a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003934:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003938:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	69db      	ldr	r3, [r3, #28]
 8003940:	2b02      	cmp	r3, #2
 8003942:	f040 8162 	bne.w	8003c0a <HAL_RCC_OscConfig+0xeca>
 8003946:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800394a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800394e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003952:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003954:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003958:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	fa93 f2a3 	rbit	r2, r3
 8003962:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003966:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800396a:	601a      	str	r2, [r3, #0]
  return result;
 800396c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003970:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003974:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003976:	fab3 f383 	clz	r3, r3
 800397a:	b2db      	uxtb	r3, r3
 800397c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003980:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	461a      	mov	r2, r3
 8003988:	2300      	movs	r3, #0
 800398a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800398c:	f7fe fa7a 	bl	8001e84 <HAL_GetTick>
 8003990:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003994:	e00c      	b.n	80039b0 <HAL_RCC_OscConfig+0xc70>
 8003996:	bf00      	nop
 8003998:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800399c:	f7fe fa72 	bl	8001e84 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d901      	bls.n	80039b0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e1fd      	b.n	8003dac <HAL_RCC_OscConfig+0x106c>
 80039b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039b4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80039b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039c2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	fa93 f2a3 	rbit	r2, r3
 80039cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039d0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80039d4:	601a      	str	r2, [r3, #0]
  return result;
 80039d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039da:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80039de:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039e0:	fab3 f383 	clz	r3, r3
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	095b      	lsrs	r3, r3, #5
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	f043 0301 	orr.w	r3, r3, #1
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d102      	bne.n	80039fa <HAL_RCC_OscConfig+0xcba>
 80039f4:	4bb0      	ldr	r3, [pc, #704]	; (8003cb8 <HAL_RCC_OscConfig+0xf78>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	e027      	b.n	8003a4a <HAL_RCC_OscConfig+0xd0a>
 80039fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039fe:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003a02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a0c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	fa93 f2a3 	rbit	r2, r3
 8003a16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a1a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003a1e:	601a      	str	r2, [r3, #0]
 8003a20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a24:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003a28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a2c:	601a      	str	r2, [r3, #0]
 8003a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a32:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	fa93 f2a3 	rbit	r2, r3
 8003a3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a40:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003a44:	601a      	str	r2, [r3, #0]
 8003a46:	4b9c      	ldr	r3, [pc, #624]	; (8003cb8 <HAL_RCC_OscConfig+0xf78>)
 8003a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a4e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003a52:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003a56:	6011      	str	r1, [r2, #0]
 8003a58:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a5c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003a60:	6812      	ldr	r2, [r2, #0]
 8003a62:	fa92 f1a2 	rbit	r1, r2
 8003a66:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a6a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003a6e:	6011      	str	r1, [r2, #0]
  return result;
 8003a70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a74:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003a78:	6812      	ldr	r2, [r2, #0]
 8003a7a:	fab2 f282 	clz	r2, r2
 8003a7e:	b2d2      	uxtb	r2, r2
 8003a80:	f042 0220 	orr.w	r2, r2, #32
 8003a84:	b2d2      	uxtb	r2, r2
 8003a86:	f002 021f 	and.w	r2, r2, #31
 8003a8a:	2101      	movs	r1, #1
 8003a8c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a90:	4013      	ands	r3, r2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d182      	bne.n	800399c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a96:	4b88      	ldr	r3, [pc, #544]	; (8003cb8 <HAL_RCC_OscConfig+0xf78>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003a9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aa2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003aaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	430b      	orrs	r3, r1
 8003ab8:	497f      	ldr	r1, [pc, #508]	; (8003cb8 <HAL_RCC_OscConfig+0xf78>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	604b      	str	r3, [r1, #4]
 8003abe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ac2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003ac6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003aca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003acc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ad0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	fa93 f2a3 	rbit	r2, r3
 8003ada:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ade:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003ae2:	601a      	str	r2, [r3, #0]
  return result;
 8003ae4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ae8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003aec:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003aee:	fab3 f383 	clz	r3, r3
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003af8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	461a      	mov	r2, r3
 8003b00:	2301      	movs	r3, #1
 8003b02:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b04:	f7fe f9be 	bl	8001e84 <HAL_GetTick>
 8003b08:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b0c:	e009      	b.n	8003b22 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b0e:	f7fe f9b9 	bl	8001e84 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e144      	b.n	8003dac <HAL_RCC_OscConfig+0x106c>
 8003b22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b26:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003b2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b34:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	fa93 f2a3 	rbit	r2, r3
 8003b3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b42:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003b46:	601a      	str	r2, [r3, #0]
  return result;
 8003b48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b4c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003b50:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b52:	fab3 f383 	clz	r3, r3
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	095b      	lsrs	r3, r3, #5
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	f043 0301 	orr.w	r3, r3, #1
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d102      	bne.n	8003b6c <HAL_RCC_OscConfig+0xe2c>
 8003b66:	4b54      	ldr	r3, [pc, #336]	; (8003cb8 <HAL_RCC_OscConfig+0xf78>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	e027      	b.n	8003bbc <HAL_RCC_OscConfig+0xe7c>
 8003b6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b70:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003b74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b7e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	fa93 f2a3 	rbit	r2, r3
 8003b88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b8c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003b90:	601a      	str	r2, [r3, #0]
 8003b92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b96:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003b9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b9e:	601a      	str	r2, [r3, #0]
 8003ba0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ba4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	fa93 f2a3 	rbit	r2, r3
 8003bae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bb2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003bb6:	601a      	str	r2, [r3, #0]
 8003bb8:	4b3f      	ldr	r3, [pc, #252]	; (8003cb8 <HAL_RCC_OscConfig+0xf78>)
 8003bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003bc0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003bc4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003bc8:	6011      	str	r1, [r2, #0]
 8003bca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003bce:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003bd2:	6812      	ldr	r2, [r2, #0]
 8003bd4:	fa92 f1a2 	rbit	r1, r2
 8003bd8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003bdc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003be0:	6011      	str	r1, [r2, #0]
  return result;
 8003be2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003be6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003bea:	6812      	ldr	r2, [r2, #0]
 8003bec:	fab2 f282 	clz	r2, r2
 8003bf0:	b2d2      	uxtb	r2, r2
 8003bf2:	f042 0220 	orr.w	r2, r2, #32
 8003bf6:	b2d2      	uxtb	r2, r2
 8003bf8:	f002 021f 	and.w	r2, r2, #31
 8003bfc:	2101      	movs	r1, #1
 8003bfe:	fa01 f202 	lsl.w	r2, r1, r2
 8003c02:	4013      	ands	r3, r2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d082      	beq.n	8003b0e <HAL_RCC_OscConfig+0xdce>
 8003c08:	e0cf      	b.n	8003daa <HAL_RCC_OscConfig+0x106a>
 8003c0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c0e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003c12:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c1c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	fa93 f2a3 	rbit	r2, r3
 8003c26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c2a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003c2e:	601a      	str	r2, [r3, #0]
  return result;
 8003c30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c34:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003c38:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c3a:	fab3 f383 	clz	r3, r3
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003c44:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c50:	f7fe f918 	bl	8001e84 <HAL_GetTick>
 8003c54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c58:	e009      	b.n	8003c6e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c5a:	f7fe f913 	bl	8001e84 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e09e      	b.n	8003dac <HAL_RCC_OscConfig+0x106c>
 8003c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c72:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003c76:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c80:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	fa93 f2a3 	rbit	r2, r3
 8003c8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c8e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003c92:	601a      	str	r2, [r3, #0]
  return result;
 8003c94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c98:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003c9c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c9e:	fab3 f383 	clz	r3, r3
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	095b      	lsrs	r3, r3, #5
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	f043 0301 	orr.w	r3, r3, #1
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d104      	bne.n	8003cbc <HAL_RCC_OscConfig+0xf7c>
 8003cb2:	4b01      	ldr	r3, [pc, #4]	; (8003cb8 <HAL_RCC_OscConfig+0xf78>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	e029      	b.n	8003d0c <HAL_RCC_OscConfig+0xfcc>
 8003cb8:	40021000 	.word	0x40021000
 8003cbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cc0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003cc4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cc8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cce:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	fa93 f2a3 	rbit	r2, r3
 8003cd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cdc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003ce0:	601a      	str	r2, [r3, #0]
 8003ce2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ce6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003cea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cee:	601a      	str	r2, [r3, #0]
 8003cf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cf4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	fa93 f2a3 	rbit	r2, r3
 8003cfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d02:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003d06:	601a      	str	r2, [r3, #0]
 8003d08:	4b2b      	ldr	r3, [pc, #172]	; (8003db8 <HAL_RCC_OscConfig+0x1078>)
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d10:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003d14:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003d18:	6011      	str	r1, [r2, #0]
 8003d1a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d1e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003d22:	6812      	ldr	r2, [r2, #0]
 8003d24:	fa92 f1a2 	rbit	r1, r2
 8003d28:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d2c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003d30:	6011      	str	r1, [r2, #0]
  return result;
 8003d32:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d36:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003d3a:	6812      	ldr	r2, [r2, #0]
 8003d3c:	fab2 f282 	clz	r2, r2
 8003d40:	b2d2      	uxtb	r2, r2
 8003d42:	f042 0220 	orr.w	r2, r2, #32
 8003d46:	b2d2      	uxtb	r2, r2
 8003d48:	f002 021f 	and.w	r2, r2, #31
 8003d4c:	2101      	movs	r1, #1
 8003d4e:	fa01 f202 	lsl.w	r2, r1, r2
 8003d52:	4013      	ands	r3, r2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d180      	bne.n	8003c5a <HAL_RCC_OscConfig+0xf1a>
 8003d58:	e027      	b.n	8003daa <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	69db      	ldr	r3, [r3, #28]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d101      	bne.n	8003d6e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e01e      	b.n	8003dac <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d6e:	4b12      	ldr	r3, [pc, #72]	; (8003db8 <HAL_RCC_OscConfig+0x1078>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003d76:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003d7a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003d7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6a1b      	ldr	r3, [r3, #32]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d10b      	bne.n	8003da6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003d8e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003d92:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003d96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d001      	beq.n	8003daa <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e000      	b.n	8003dac <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	40021000 	.word	0x40021000

08003dbc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b09e      	sub	sp, #120	; 0x78
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d101      	bne.n	8003dd4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e162      	b.n	800409a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003dd4:	4b90      	ldr	r3, [pc, #576]	; (8004018 <HAL_RCC_ClockConfig+0x25c>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0307 	and.w	r3, r3, #7
 8003ddc:	683a      	ldr	r2, [r7, #0]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d910      	bls.n	8003e04 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003de2:	4b8d      	ldr	r3, [pc, #564]	; (8004018 <HAL_RCC_ClockConfig+0x25c>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f023 0207 	bic.w	r2, r3, #7
 8003dea:	498b      	ldr	r1, [pc, #556]	; (8004018 <HAL_RCC_ClockConfig+0x25c>)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003df2:	4b89      	ldr	r3, [pc, #548]	; (8004018 <HAL_RCC_ClockConfig+0x25c>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0307 	and.w	r3, r3, #7
 8003dfa:	683a      	ldr	r2, [r7, #0]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d001      	beq.n	8003e04 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e14a      	b.n	800409a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d008      	beq.n	8003e22 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e10:	4b82      	ldr	r3, [pc, #520]	; (800401c <HAL_RCC_ClockConfig+0x260>)
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	497f      	ldr	r1, [pc, #508]	; (800401c <HAL_RCC_ClockConfig+0x260>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	f000 80dc 	beq.w	8003fe8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d13c      	bne.n	8003eb2 <HAL_RCC_ClockConfig+0xf6>
 8003e38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e3c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e40:	fa93 f3a3 	rbit	r3, r3
 8003e44:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e48:	fab3 f383 	clz	r3, r3
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	095b      	lsrs	r3, r3, #5
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	f043 0301 	orr.w	r3, r3, #1
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d102      	bne.n	8003e62 <HAL_RCC_ClockConfig+0xa6>
 8003e5c:	4b6f      	ldr	r3, [pc, #444]	; (800401c <HAL_RCC_ClockConfig+0x260>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	e00f      	b.n	8003e82 <HAL_RCC_ClockConfig+0xc6>
 8003e62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e66:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e6a:	fa93 f3a3 	rbit	r3, r3
 8003e6e:	667b      	str	r3, [r7, #100]	; 0x64
 8003e70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e74:	663b      	str	r3, [r7, #96]	; 0x60
 8003e76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e78:	fa93 f3a3 	rbit	r3, r3
 8003e7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e7e:	4b67      	ldr	r3, [pc, #412]	; (800401c <HAL_RCC_ClockConfig+0x260>)
 8003e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e82:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003e86:	65ba      	str	r2, [r7, #88]	; 0x58
 8003e88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e8a:	fa92 f2a2 	rbit	r2, r2
 8003e8e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003e90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003e92:	fab2 f282 	clz	r2, r2
 8003e96:	b2d2      	uxtb	r2, r2
 8003e98:	f042 0220 	orr.w	r2, r2, #32
 8003e9c:	b2d2      	uxtb	r2, r2
 8003e9e:	f002 021f 	and.w	r2, r2, #31
 8003ea2:	2101      	movs	r1, #1
 8003ea4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d17b      	bne.n	8003fa6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e0f3      	b.n	800409a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d13c      	bne.n	8003f34 <HAL_RCC_ClockConfig+0x178>
 8003eba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ebe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ec2:	fa93 f3a3 	rbit	r3, r3
 8003ec6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003ec8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eca:	fab3 f383 	clz	r3, r3
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	095b      	lsrs	r3, r3, #5
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	f043 0301 	orr.w	r3, r3, #1
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d102      	bne.n	8003ee4 <HAL_RCC_ClockConfig+0x128>
 8003ede:	4b4f      	ldr	r3, [pc, #316]	; (800401c <HAL_RCC_ClockConfig+0x260>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	e00f      	b.n	8003f04 <HAL_RCC_ClockConfig+0x148>
 8003ee4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ee8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eec:	fa93 f3a3 	rbit	r3, r3
 8003ef0:	647b      	str	r3, [r7, #68]	; 0x44
 8003ef2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ef6:	643b      	str	r3, [r7, #64]	; 0x40
 8003ef8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003efa:	fa93 f3a3 	rbit	r3, r3
 8003efe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f00:	4b46      	ldr	r3, [pc, #280]	; (800401c <HAL_RCC_ClockConfig+0x260>)
 8003f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f08:	63ba      	str	r2, [r7, #56]	; 0x38
 8003f0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f0c:	fa92 f2a2 	rbit	r2, r2
 8003f10:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003f12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f14:	fab2 f282 	clz	r2, r2
 8003f18:	b2d2      	uxtb	r2, r2
 8003f1a:	f042 0220 	orr.w	r2, r2, #32
 8003f1e:	b2d2      	uxtb	r2, r2
 8003f20:	f002 021f 	and.w	r2, r2, #31
 8003f24:	2101      	movs	r1, #1
 8003f26:	fa01 f202 	lsl.w	r2, r1, r2
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d13a      	bne.n	8003fa6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e0b2      	b.n	800409a <HAL_RCC_ClockConfig+0x2de>
 8003f34:	2302      	movs	r3, #2
 8003f36:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3a:	fa93 f3a3 	rbit	r3, r3
 8003f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f42:	fab3 f383 	clz	r3, r3
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	095b      	lsrs	r3, r3, #5
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	f043 0301 	orr.w	r3, r3, #1
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d102      	bne.n	8003f5c <HAL_RCC_ClockConfig+0x1a0>
 8003f56:	4b31      	ldr	r3, [pc, #196]	; (800401c <HAL_RCC_ClockConfig+0x260>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	e00d      	b.n	8003f78 <HAL_RCC_ClockConfig+0x1bc>
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f62:	fa93 f3a3 	rbit	r3, r3
 8003f66:	627b      	str	r3, [r7, #36]	; 0x24
 8003f68:	2302      	movs	r3, #2
 8003f6a:	623b      	str	r3, [r7, #32]
 8003f6c:	6a3b      	ldr	r3, [r7, #32]
 8003f6e:	fa93 f3a3 	rbit	r3, r3
 8003f72:	61fb      	str	r3, [r7, #28]
 8003f74:	4b29      	ldr	r3, [pc, #164]	; (800401c <HAL_RCC_ClockConfig+0x260>)
 8003f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f78:	2202      	movs	r2, #2
 8003f7a:	61ba      	str	r2, [r7, #24]
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	fa92 f2a2 	rbit	r2, r2
 8003f82:	617a      	str	r2, [r7, #20]
  return result;
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	fab2 f282 	clz	r2, r2
 8003f8a:	b2d2      	uxtb	r2, r2
 8003f8c:	f042 0220 	orr.w	r2, r2, #32
 8003f90:	b2d2      	uxtb	r2, r2
 8003f92:	f002 021f 	and.w	r2, r2, #31
 8003f96:	2101      	movs	r1, #1
 8003f98:	fa01 f202 	lsl.w	r2, r1, r2
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e079      	b.n	800409a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fa6:	4b1d      	ldr	r3, [pc, #116]	; (800401c <HAL_RCC_ClockConfig+0x260>)
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f023 0203 	bic.w	r2, r3, #3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	491a      	ldr	r1, [pc, #104]	; (800401c <HAL_RCC_ClockConfig+0x260>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fb8:	f7fd ff64 	bl	8001e84 <HAL_GetTick>
 8003fbc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fbe:	e00a      	b.n	8003fd6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fc0:	f7fd ff60 	bl	8001e84 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d901      	bls.n	8003fd6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e061      	b.n	800409a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fd6:	4b11      	ldr	r3, [pc, #68]	; (800401c <HAL_RCC_ClockConfig+0x260>)
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f003 020c 	and.w	r2, r3, #12
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d1eb      	bne.n	8003fc0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fe8:	4b0b      	ldr	r3, [pc, #44]	; (8004018 <HAL_RCC_ClockConfig+0x25c>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0307 	and.w	r3, r3, #7
 8003ff0:	683a      	ldr	r2, [r7, #0]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d214      	bcs.n	8004020 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ff6:	4b08      	ldr	r3, [pc, #32]	; (8004018 <HAL_RCC_ClockConfig+0x25c>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f023 0207 	bic.w	r2, r3, #7
 8003ffe:	4906      	ldr	r1, [pc, #24]	; (8004018 <HAL_RCC_ClockConfig+0x25c>)
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	4313      	orrs	r3, r2
 8004004:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004006:	4b04      	ldr	r3, [pc, #16]	; (8004018 <HAL_RCC_ClockConfig+0x25c>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0307 	and.w	r3, r3, #7
 800400e:	683a      	ldr	r2, [r7, #0]
 8004010:	429a      	cmp	r2, r3
 8004012:	d005      	beq.n	8004020 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e040      	b.n	800409a <HAL_RCC_ClockConfig+0x2de>
 8004018:	40022000 	.word	0x40022000
 800401c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0304 	and.w	r3, r3, #4
 8004028:	2b00      	cmp	r3, #0
 800402a:	d008      	beq.n	800403e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800402c:	4b1d      	ldr	r3, [pc, #116]	; (80040a4 <HAL_RCC_ClockConfig+0x2e8>)
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	491a      	ldr	r1, [pc, #104]	; (80040a4 <HAL_RCC_ClockConfig+0x2e8>)
 800403a:	4313      	orrs	r3, r2
 800403c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0308 	and.w	r3, r3, #8
 8004046:	2b00      	cmp	r3, #0
 8004048:	d009      	beq.n	800405e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800404a:	4b16      	ldr	r3, [pc, #88]	; (80040a4 <HAL_RCC_ClockConfig+0x2e8>)
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	00db      	lsls	r3, r3, #3
 8004058:	4912      	ldr	r1, [pc, #72]	; (80040a4 <HAL_RCC_ClockConfig+0x2e8>)
 800405a:	4313      	orrs	r3, r2
 800405c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800405e:	f000 f829 	bl	80040b4 <HAL_RCC_GetSysClockFreq>
 8004062:	4601      	mov	r1, r0
 8004064:	4b0f      	ldr	r3, [pc, #60]	; (80040a4 <HAL_RCC_ClockConfig+0x2e8>)
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800406c:	22f0      	movs	r2, #240	; 0xf0
 800406e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	fa92 f2a2 	rbit	r2, r2
 8004076:	60fa      	str	r2, [r7, #12]
  return result;
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	fab2 f282 	clz	r2, r2
 800407e:	b2d2      	uxtb	r2, r2
 8004080:	40d3      	lsrs	r3, r2
 8004082:	4a09      	ldr	r2, [pc, #36]	; (80040a8 <HAL_RCC_ClockConfig+0x2ec>)
 8004084:	5cd3      	ldrb	r3, [r2, r3]
 8004086:	fa21 f303 	lsr.w	r3, r1, r3
 800408a:	4a08      	ldr	r2, [pc, #32]	; (80040ac <HAL_RCC_ClockConfig+0x2f0>)
 800408c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800408e:	4b08      	ldr	r3, [pc, #32]	; (80040b0 <HAL_RCC_ClockConfig+0x2f4>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4618      	mov	r0, r3
 8004094:	f7fd fc66 	bl	8001964 <HAL_InitTick>
  
  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3778      	adds	r7, #120	; 0x78
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	40021000 	.word	0x40021000
 80040a8:	0800837c 	.word	0x0800837c
 80040ac:	20000000 	.word	0x20000000
 80040b0:	20000004 	.word	0x20000004

080040b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b08b      	sub	sp, #44	; 0x2c
 80040b8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80040ba:	2300      	movs	r3, #0
 80040bc:	61fb      	str	r3, [r7, #28]
 80040be:	2300      	movs	r3, #0
 80040c0:	61bb      	str	r3, [r7, #24]
 80040c2:	2300      	movs	r3, #0
 80040c4:	627b      	str	r3, [r7, #36]	; 0x24
 80040c6:	2300      	movs	r3, #0
 80040c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80040ca:	2300      	movs	r3, #0
 80040cc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80040ce:	4b29      	ldr	r3, [pc, #164]	; (8004174 <HAL_RCC_GetSysClockFreq+0xc0>)
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	f003 030c 	and.w	r3, r3, #12
 80040da:	2b04      	cmp	r3, #4
 80040dc:	d002      	beq.n	80040e4 <HAL_RCC_GetSysClockFreq+0x30>
 80040de:	2b08      	cmp	r3, #8
 80040e0:	d003      	beq.n	80040ea <HAL_RCC_GetSysClockFreq+0x36>
 80040e2:	e03c      	b.n	800415e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80040e4:	4b24      	ldr	r3, [pc, #144]	; (8004178 <HAL_RCC_GetSysClockFreq+0xc4>)
 80040e6:	623b      	str	r3, [r7, #32]
      break;
 80040e8:	e03c      	b.n	8004164 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80040f0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80040f4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f6:	68ba      	ldr	r2, [r7, #8]
 80040f8:	fa92 f2a2 	rbit	r2, r2
 80040fc:	607a      	str	r2, [r7, #4]
  return result;
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	fab2 f282 	clz	r2, r2
 8004104:	b2d2      	uxtb	r2, r2
 8004106:	40d3      	lsrs	r3, r2
 8004108:	4a1c      	ldr	r2, [pc, #112]	; (800417c <HAL_RCC_GetSysClockFreq+0xc8>)
 800410a:	5cd3      	ldrb	r3, [r2, r3]
 800410c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800410e:	4b19      	ldr	r3, [pc, #100]	; (8004174 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004112:	f003 030f 	and.w	r3, r3, #15
 8004116:	220f      	movs	r2, #15
 8004118:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	fa92 f2a2 	rbit	r2, r2
 8004120:	60fa      	str	r2, [r7, #12]
  return result;
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	fab2 f282 	clz	r2, r2
 8004128:	b2d2      	uxtb	r2, r2
 800412a:	40d3      	lsrs	r3, r2
 800412c:	4a14      	ldr	r2, [pc, #80]	; (8004180 <HAL_RCC_GetSysClockFreq+0xcc>)
 800412e:	5cd3      	ldrb	r3, [r2, r3]
 8004130:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d008      	beq.n	800414e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800413c:	4a0e      	ldr	r2, [pc, #56]	; (8004178 <HAL_RCC_GetSysClockFreq+0xc4>)
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	fbb2 f2f3 	udiv	r2, r2, r3
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	fb02 f303 	mul.w	r3, r2, r3
 800414a:	627b      	str	r3, [r7, #36]	; 0x24
 800414c:	e004      	b.n	8004158 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	4a0c      	ldr	r2, [pc, #48]	; (8004184 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004152:	fb02 f303 	mul.w	r3, r2, r3
 8004156:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415a:	623b      	str	r3, [r7, #32]
      break;
 800415c:	e002      	b.n	8004164 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800415e:	4b06      	ldr	r3, [pc, #24]	; (8004178 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004160:	623b      	str	r3, [r7, #32]
      break;
 8004162:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004164:	6a3b      	ldr	r3, [r7, #32]
}
 8004166:	4618      	mov	r0, r3
 8004168:	372c      	adds	r7, #44	; 0x2c
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	40021000 	.word	0x40021000
 8004178:	007a1200 	.word	0x007a1200
 800417c:	08008394 	.word	0x08008394
 8004180:	080083a4 	.word	0x080083a4
 8004184:	003d0900 	.word	0x003d0900

08004188 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004188:	b480      	push	{r7}
 800418a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800418c:	4b03      	ldr	r3, [pc, #12]	; (800419c <HAL_RCC_GetHCLKFreq+0x14>)
 800418e:	681b      	ldr	r3, [r3, #0]
}
 8004190:	4618      	mov	r0, r3
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	20000000 	.word	0x20000000

080041a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80041a6:	f7ff ffef 	bl	8004188 <HAL_RCC_GetHCLKFreq>
 80041aa:	4601      	mov	r1, r0
 80041ac:	4b0b      	ldr	r3, [pc, #44]	; (80041dc <HAL_RCC_GetPCLK1Freq+0x3c>)
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041b4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80041b8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	fa92 f2a2 	rbit	r2, r2
 80041c0:	603a      	str	r2, [r7, #0]
  return result;
 80041c2:	683a      	ldr	r2, [r7, #0]
 80041c4:	fab2 f282 	clz	r2, r2
 80041c8:	b2d2      	uxtb	r2, r2
 80041ca:	40d3      	lsrs	r3, r2
 80041cc:	4a04      	ldr	r2, [pc, #16]	; (80041e0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80041ce:	5cd3      	ldrb	r3, [r2, r3]
 80041d0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80041d4:	4618      	mov	r0, r3
 80041d6:	3708      	adds	r7, #8
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	40021000 	.word	0x40021000
 80041e0:	0800838c 	.word	0x0800838c

080041e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80041ea:	f7ff ffcd 	bl	8004188 <HAL_RCC_GetHCLKFreq>
 80041ee:	4601      	mov	r1, r0
 80041f0:	4b0b      	ldr	r3, [pc, #44]	; (8004220 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80041f8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80041fc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	fa92 f2a2 	rbit	r2, r2
 8004204:	603a      	str	r2, [r7, #0]
  return result;
 8004206:	683a      	ldr	r2, [r7, #0]
 8004208:	fab2 f282 	clz	r2, r2
 800420c:	b2d2      	uxtb	r2, r2
 800420e:	40d3      	lsrs	r3, r2
 8004210:	4a04      	ldr	r2, [pc, #16]	; (8004224 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004212:	5cd3      	ldrb	r3, [r2, r3]
 8004214:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004218:	4618      	mov	r0, r3
 800421a:	3708      	adds	r7, #8
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	40021000 	.word	0x40021000
 8004224:	0800838c 	.word	0x0800838c

08004228 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	220f      	movs	r2, #15
 8004236:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004238:	4b12      	ldr	r3, [pc, #72]	; (8004284 <HAL_RCC_GetClockConfig+0x5c>)
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f003 0203 	and.w	r2, r3, #3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8004244:	4b0f      	ldr	r3, [pc, #60]	; (8004284 <HAL_RCC_GetClockConfig+0x5c>)
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8004250:	4b0c      	ldr	r3, [pc, #48]	; (8004284 <HAL_RCC_GetClockConfig+0x5c>)
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800425c:	4b09      	ldr	r3, [pc, #36]	; (8004284 <HAL_RCC_GetClockConfig+0x5c>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	08db      	lsrs	r3, r3, #3
 8004262:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800426a:	4b07      	ldr	r3, [pc, #28]	; (8004288 <HAL_RCC_GetClockConfig+0x60>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0207 	and.w	r2, r3, #7
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	601a      	str	r2, [r3, #0]
}
 8004276:	bf00      	nop
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	40021000 	.word	0x40021000
 8004288:	40022000 	.word	0x40022000

0800428c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b092      	sub	sp, #72	; 0x48
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004294:	2300      	movs	r3, #0
 8004296:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004298:	2300      	movs	r3, #0
 800429a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800429c:	2300      	movs	r3, #0
 800429e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f000 80d4 	beq.w	8004458 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042b0:	4b4e      	ldr	r3, [pc, #312]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042b2:	69db      	ldr	r3, [r3, #28]
 80042b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d10e      	bne.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042bc:	4b4b      	ldr	r3, [pc, #300]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042be:	69db      	ldr	r3, [r3, #28]
 80042c0:	4a4a      	ldr	r2, [pc, #296]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042c6:	61d3      	str	r3, [r2, #28]
 80042c8:	4b48      	ldr	r3, [pc, #288]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042ca:	69db      	ldr	r3, [r3, #28]
 80042cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042d0:	60bb      	str	r3, [r7, #8]
 80042d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042d4:	2301      	movs	r3, #1
 80042d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042da:	4b45      	ldr	r3, [pc, #276]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d118      	bne.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042e6:	4b42      	ldr	r3, [pc, #264]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a41      	ldr	r2, [pc, #260]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042f0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042f2:	f7fd fdc7 	bl	8001e84 <HAL_GetTick>
 80042f6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042f8:	e008      	b.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042fa:	f7fd fdc3 	bl	8001e84 <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	2b64      	cmp	r3, #100	; 0x64
 8004306:	d901      	bls.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e13c      	b.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800430c:	4b38      	ldr	r3, [pc, #224]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004314:	2b00      	cmp	r3, #0
 8004316:	d0f0      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004318:	4b34      	ldr	r3, [pc, #208]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800431a:	6a1b      	ldr	r3, [r3, #32]
 800431c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004320:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004324:	2b00      	cmp	r3, #0
 8004326:	f000 8084 	beq.w	8004432 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004332:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004334:	429a      	cmp	r2, r3
 8004336:	d07c      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004338:	4b2c      	ldr	r3, [pc, #176]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800433a:	6a1b      	ldr	r3, [r3, #32]
 800433c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004340:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004342:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004346:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434a:	fa93 f3a3 	rbit	r3, r3
 800434e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004352:	fab3 f383 	clz	r3, r3
 8004356:	b2db      	uxtb	r3, r3
 8004358:	461a      	mov	r2, r3
 800435a:	4b26      	ldr	r3, [pc, #152]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800435c:	4413      	add	r3, r2
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	461a      	mov	r2, r3
 8004362:	2301      	movs	r3, #1
 8004364:	6013      	str	r3, [r2, #0]
 8004366:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800436a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800436c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800436e:	fa93 f3a3 	rbit	r3, r3
 8004372:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004376:	fab3 f383 	clz	r3, r3
 800437a:	b2db      	uxtb	r3, r3
 800437c:	461a      	mov	r2, r3
 800437e:	4b1d      	ldr	r3, [pc, #116]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004380:	4413      	add	r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	461a      	mov	r2, r3
 8004386:	2300      	movs	r3, #0
 8004388:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800438a:	4a18      	ldr	r2, [pc, #96]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800438c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800438e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	2b00      	cmp	r3, #0
 8004398:	d04b      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800439a:	f7fd fd73 	bl	8001e84 <HAL_GetTick>
 800439e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043a0:	e00a      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043a2:	f7fd fd6f 	bl	8001e84 <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d901      	bls.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e0e6      	b.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 80043b8:	2302      	movs	r3, #2
 80043ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043be:	fa93 f3a3 	rbit	r3, r3
 80043c2:	627b      	str	r3, [r7, #36]	; 0x24
 80043c4:	2302      	movs	r3, #2
 80043c6:	623b      	str	r3, [r7, #32]
 80043c8:	6a3b      	ldr	r3, [r7, #32]
 80043ca:	fa93 f3a3 	rbit	r3, r3
 80043ce:	61fb      	str	r3, [r7, #28]
  return result;
 80043d0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043d2:	fab3 f383 	clz	r3, r3
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	095b      	lsrs	r3, r3, #5
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	f043 0302 	orr.w	r3, r3, #2
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d108      	bne.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80043e6:	4b01      	ldr	r3, [pc, #4]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043e8:	6a1b      	ldr	r3, [r3, #32]
 80043ea:	e00d      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80043ec:	40021000 	.word	0x40021000
 80043f0:	40007000 	.word	0x40007000
 80043f4:	10908100 	.word	0x10908100
 80043f8:	2302      	movs	r3, #2
 80043fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	fa93 f3a3 	rbit	r3, r3
 8004402:	617b      	str	r3, [r7, #20]
 8004404:	4b62      	ldr	r3, [pc, #392]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004408:	2202      	movs	r2, #2
 800440a:	613a      	str	r2, [r7, #16]
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	fa92 f2a2 	rbit	r2, r2
 8004412:	60fa      	str	r2, [r7, #12]
  return result;
 8004414:	68fa      	ldr	r2, [r7, #12]
 8004416:	fab2 f282 	clz	r2, r2
 800441a:	b2d2      	uxtb	r2, r2
 800441c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004420:	b2d2      	uxtb	r2, r2
 8004422:	f002 021f 	and.w	r2, r2, #31
 8004426:	2101      	movs	r1, #1
 8004428:	fa01 f202 	lsl.w	r2, r1, r2
 800442c:	4013      	ands	r3, r2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d0b7      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004432:	4b57      	ldr	r3, [pc, #348]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004434:	6a1b      	ldr	r3, [r3, #32]
 8004436:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	4954      	ldr	r1, [pc, #336]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004440:	4313      	orrs	r3, r2
 8004442:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004444:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004448:	2b01      	cmp	r3, #1
 800444a:	d105      	bne.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800444c:	4b50      	ldr	r3, [pc, #320]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800444e:	69db      	ldr	r3, [r3, #28]
 8004450:	4a4f      	ldr	r2, [pc, #316]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004452:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004456:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0301 	and.w	r3, r3, #1
 8004460:	2b00      	cmp	r3, #0
 8004462:	d008      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004464:	4b4a      	ldr	r3, [pc, #296]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004468:	f023 0203 	bic.w	r2, r3, #3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	4947      	ldr	r1, [pc, #284]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004472:	4313      	orrs	r3, r2
 8004474:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0320 	and.w	r3, r3, #32
 800447e:	2b00      	cmp	r3, #0
 8004480:	d008      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004482:	4b43      	ldr	r3, [pc, #268]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004486:	f023 0210 	bic.w	r2, r3, #16
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	4940      	ldr	r1, [pc, #256]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004490:	4313      	orrs	r3, r2
 8004492:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800449c:	2b00      	cmp	r3, #0
 800449e:	d008      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80044a0:	4b3b      	ldr	r3, [pc, #236]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80044a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a4:	f023 0220 	bic.w	r2, r3, #32
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	691b      	ldr	r3, [r3, #16]
 80044ac:	4938      	ldr	r1, [pc, #224]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d008      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80044be:	4b34      	ldr	r3, [pc, #208]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80044c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	4931      	ldr	r1, [pc, #196]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d008      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80044dc:	4b2c      	ldr	r3, [pc, #176]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	69db      	ldr	r3, [r3, #28]
 80044e8:	4929      	ldr	r1, [pc, #164]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d008      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80044fa:	4b25      	ldr	r3, [pc, #148]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80044fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fe:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	4922      	ldr	r1, [pc, #136]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004508:	4313      	orrs	r3, r2
 800450a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d008      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004518:	4b1d      	ldr	r3, [pc, #116]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800451a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a1b      	ldr	r3, [r3, #32]
 8004524:	491a      	ldr	r1, [pc, #104]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004526:	4313      	orrs	r3, r2
 8004528:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d008      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004536:	4b16      	ldr	r3, [pc, #88]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004542:	4913      	ldr	r1, [pc, #76]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004544:	4313      	orrs	r3, r2
 8004546:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d008      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004554:	4b0e      	ldr	r3, [pc, #56]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004558:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004560:	490b      	ldr	r1, [pc, #44]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004562:	4313      	orrs	r3, r2
 8004564:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d008      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004572:	4b07      	ldr	r3, [pc, #28]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004576:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457e:	4904      	ldr	r1, [pc, #16]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004580:	4313      	orrs	r3, r2
 8004582:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3748      	adds	r7, #72	; 0x48
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	40021000 	.word	0x40021000

08004594 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d101      	bne.n	80045a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e09d      	b.n	80046e2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d108      	bne.n	80045c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045b6:	d009      	beq.n	80045cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	61da      	str	r2, [r3, #28]
 80045be:	e005      	b.n	80045cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d106      	bne.n	80045ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f7fd f8fa 	bl	80017e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2202      	movs	r2, #2
 80045f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004602:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800460c:	d902      	bls.n	8004614 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800460e:	2300      	movs	r3, #0
 8004610:	60fb      	str	r3, [r7, #12]
 8004612:	e002      	b.n	800461a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004614:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004618:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004622:	d007      	beq.n	8004634 <HAL_SPI_Init+0xa0>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800462c:	d002      	beq.n	8004634 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004644:	431a      	orrs	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	431a      	orrs	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	695b      	ldr	r3, [r3, #20]
 8004654:	f003 0301 	and.w	r3, r3, #1
 8004658:	431a      	orrs	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004662:	431a      	orrs	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	69db      	ldr	r3, [r3, #28]
 8004668:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800466c:	431a      	orrs	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004676:	ea42 0103 	orr.w	r1, r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	430a      	orrs	r2, r1
 8004688:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	0c1b      	lsrs	r3, r3, #16
 8004690:	f003 0204 	and.w	r2, r3, #4
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004698:	f003 0310 	and.w	r3, r3, #16
 800469c:	431a      	orrs	r2, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046a2:	f003 0308 	and.w	r3, r3, #8
 80046a6:	431a      	orrs	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80046b0:	ea42 0103 	orr.w	r1, r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	430a      	orrs	r2, r1
 80046c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	69da      	ldr	r2, [r3, #28]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b082      	sub	sp, #8
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d101      	bne.n	80046fc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e049      	b.n	8004790 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004702:	b2db      	uxtb	r3, r3
 8004704:	2b00      	cmp	r3, #0
 8004706:	d106      	bne.n	8004716 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f7fd f8a9 	bl	8001868 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2202      	movs	r2, #2
 800471a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	3304      	adds	r3, #4
 8004726:	4619      	mov	r1, r3
 8004728:	4610      	mov	r0, r2
 800472a:	f000 f9d1 	bl	8004ad0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2201      	movs	r2, #1
 8004732:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2201      	movs	r2, #1
 8004742:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2201      	movs	r2, #1
 800474a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2201      	movs	r2, #1
 8004752:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2201      	movs	r2, #1
 800475a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2201      	movs	r2, #1
 800476a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2201      	movs	r2, #1
 8004772:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2201      	movs	r2, #1
 800477a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2201      	movs	r2, #1
 8004782:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2201      	movs	r2, #1
 800478a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3708      	adds	r7, #8
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004798:	b480      	push	{r7}
 800479a:	b085      	sub	sp, #20
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d001      	beq.n	80047b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e03b      	b.n	8004828 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2202      	movs	r2, #2
 80047b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68da      	ldr	r2, [r3, #12]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f042 0201 	orr.w	r2, r2, #1
 80047c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a19      	ldr	r2, [pc, #100]	; (8004834 <HAL_TIM_Base_Start_IT+0x9c>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d009      	beq.n	80047e6 <HAL_TIM_Base_Start_IT+0x4e>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047da:	d004      	beq.n	80047e6 <HAL_TIM_Base_Start_IT+0x4e>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a15      	ldr	r2, [pc, #84]	; (8004838 <HAL_TIM_Base_Start_IT+0xa0>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d115      	bne.n	8004812 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	689a      	ldr	r2, [r3, #8]
 80047ec:	4b13      	ldr	r3, [pc, #76]	; (800483c <HAL_TIM_Base_Start_IT+0xa4>)
 80047ee:	4013      	ands	r3, r2
 80047f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2b06      	cmp	r3, #6
 80047f6:	d015      	beq.n	8004824 <HAL_TIM_Base_Start_IT+0x8c>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047fe:	d011      	beq.n	8004824 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f042 0201 	orr.w	r2, r2, #1
 800480e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004810:	e008      	b.n	8004824 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f042 0201 	orr.w	r2, r2, #1
 8004820:	601a      	str	r2, [r3, #0]
 8004822:	e000      	b.n	8004826 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004824:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3714      	adds	r7, #20
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr
 8004834:	40012c00 	.word	0x40012c00
 8004838:	40014000 	.word	0x40014000
 800483c:	00010007 	.word	0x00010007

08004840 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	f003 0302 	and.w	r3, r3, #2
 8004852:	2b02      	cmp	r3, #2
 8004854:	d122      	bne.n	800489c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	f003 0302 	and.w	r3, r3, #2
 8004860:	2b02      	cmp	r3, #2
 8004862:	d11b      	bne.n	800489c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f06f 0202 	mvn.w	r2, #2
 800486c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2201      	movs	r2, #1
 8004872:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	f003 0303 	and.w	r3, r3, #3
 800487e:	2b00      	cmp	r3, #0
 8004880:	d003      	beq.n	800488a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f905 	bl	8004a92 <HAL_TIM_IC_CaptureCallback>
 8004888:	e005      	b.n	8004896 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 f8f7 	bl	8004a7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f000 f908 	bl	8004aa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	f003 0304 	and.w	r3, r3, #4
 80048a6:	2b04      	cmp	r3, #4
 80048a8:	d122      	bne.n	80048f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	f003 0304 	and.w	r3, r3, #4
 80048b4:	2b04      	cmp	r3, #4
 80048b6:	d11b      	bne.n	80048f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f06f 0204 	mvn.w	r2, #4
 80048c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2202      	movs	r2, #2
 80048c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d003      	beq.n	80048de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 f8db 	bl	8004a92 <HAL_TIM_IC_CaptureCallback>
 80048dc:	e005      	b.n	80048ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 f8cd 	bl	8004a7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 f8de 	bl	8004aa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	f003 0308 	and.w	r3, r3, #8
 80048fa:	2b08      	cmp	r3, #8
 80048fc:	d122      	bne.n	8004944 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	f003 0308 	and.w	r3, r3, #8
 8004908:	2b08      	cmp	r3, #8
 800490a:	d11b      	bne.n	8004944 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f06f 0208 	mvn.w	r2, #8
 8004914:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2204      	movs	r2, #4
 800491a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	69db      	ldr	r3, [r3, #28]
 8004922:	f003 0303 	and.w	r3, r3, #3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d003      	beq.n	8004932 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 f8b1 	bl	8004a92 <HAL_TIM_IC_CaptureCallback>
 8004930:	e005      	b.n	800493e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 f8a3 	bl	8004a7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 f8b4 	bl	8004aa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	f003 0310 	and.w	r3, r3, #16
 800494e:	2b10      	cmp	r3, #16
 8004950:	d122      	bne.n	8004998 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	f003 0310 	and.w	r3, r3, #16
 800495c:	2b10      	cmp	r3, #16
 800495e:	d11b      	bne.n	8004998 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f06f 0210 	mvn.w	r2, #16
 8004968:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2208      	movs	r2, #8
 800496e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	69db      	ldr	r3, [r3, #28]
 8004976:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800497a:	2b00      	cmp	r3, #0
 800497c:	d003      	beq.n	8004986 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 f887 	bl	8004a92 <HAL_TIM_IC_CaptureCallback>
 8004984:	e005      	b.n	8004992 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 f879 	bl	8004a7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 f88a 	bl	8004aa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d10e      	bne.n	80049c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	f003 0301 	and.w	r3, r3, #1
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d107      	bne.n	80049c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f06f 0201 	mvn.w	r2, #1
 80049bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f7fc fe92 	bl	80016e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ce:	2b80      	cmp	r3, #128	; 0x80
 80049d0:	d10e      	bne.n	80049f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049dc:	2b80      	cmp	r3, #128	; 0x80
 80049de:	d107      	bne.n	80049f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f8e8 	bl	8004bc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049fe:	d10e      	bne.n	8004a1e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a0a:	2b80      	cmp	r3, #128	; 0x80
 8004a0c:	d107      	bne.n	8004a1e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004a16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 f8db 	bl	8004bd4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a28:	2b40      	cmp	r3, #64	; 0x40
 8004a2a:	d10e      	bne.n	8004a4a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a36:	2b40      	cmp	r3, #64	; 0x40
 8004a38:	d107      	bne.n	8004a4a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 f838 	bl	8004aba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	f003 0320 	and.w	r3, r3, #32
 8004a54:	2b20      	cmp	r3, #32
 8004a56:	d10e      	bne.n	8004a76 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	f003 0320 	and.w	r3, r3, #32
 8004a62:	2b20      	cmp	r3, #32
 8004a64:	d107      	bne.n	8004a76 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f06f 0220 	mvn.w	r2, #32
 8004a6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f000 f89b 	bl	8004bac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a76:	bf00      	nop
 8004a78:	3708      	adds	r7, #8
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a7e:	b480      	push	{r7}
 8004a80:	b083      	sub	sp, #12
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a86:	bf00      	nop
 8004a88:	370c      	adds	r7, #12
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr

08004a92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a92:	b480      	push	{r7}
 8004a94:	b083      	sub	sp, #12
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a9a:	bf00      	nop
 8004a9c:	370c      	adds	r7, #12
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr

08004aa6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	b083      	sub	sp, #12
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004aae:	bf00      	nop
 8004ab0:	370c      	adds	r7, #12
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr

08004aba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004aba:	b480      	push	{r7}
 8004abc:	b083      	sub	sp, #12
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ac2:	bf00      	nop
 8004ac4:	370c      	adds	r7, #12
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
	...

08004ad0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b085      	sub	sp, #20
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4a2e      	ldr	r2, [pc, #184]	; (8004b9c <TIM_Base_SetConfig+0xcc>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d003      	beq.n	8004af0 <TIM_Base_SetConfig+0x20>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aee:	d108      	bne.n	8004b02 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004af6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a25      	ldr	r2, [pc, #148]	; (8004b9c <TIM_Base_SetConfig+0xcc>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d00f      	beq.n	8004b2a <TIM_Base_SetConfig+0x5a>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b10:	d00b      	beq.n	8004b2a <TIM_Base_SetConfig+0x5a>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a22      	ldr	r2, [pc, #136]	; (8004ba0 <TIM_Base_SetConfig+0xd0>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d007      	beq.n	8004b2a <TIM_Base_SetConfig+0x5a>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a21      	ldr	r2, [pc, #132]	; (8004ba4 <TIM_Base_SetConfig+0xd4>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d003      	beq.n	8004b2a <TIM_Base_SetConfig+0x5a>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a20      	ldr	r2, [pc, #128]	; (8004ba8 <TIM_Base_SetConfig+0xd8>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d108      	bne.n	8004b3c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	68fa      	ldr	r2, [r7, #12]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	68fa      	ldr	r2, [r7, #12]
 8004b4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	689a      	ldr	r2, [r3, #8]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a0e      	ldr	r2, [pc, #56]	; (8004b9c <TIM_Base_SetConfig+0xcc>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d00b      	beq.n	8004b80 <TIM_Base_SetConfig+0xb0>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a0d      	ldr	r2, [pc, #52]	; (8004ba0 <TIM_Base_SetConfig+0xd0>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d007      	beq.n	8004b80 <TIM_Base_SetConfig+0xb0>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a0c      	ldr	r2, [pc, #48]	; (8004ba4 <TIM_Base_SetConfig+0xd4>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d003      	beq.n	8004b80 <TIM_Base_SetConfig+0xb0>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a0b      	ldr	r2, [pc, #44]	; (8004ba8 <TIM_Base_SetConfig+0xd8>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d103      	bne.n	8004b88 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	691a      	ldr	r2, [r3, #16]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	615a      	str	r2, [r3, #20]
}
 8004b8e:	bf00      	nop
 8004b90:	3714      	adds	r7, #20
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	40012c00 	.word	0x40012c00
 8004ba0:	40014000 	.word	0x40014000
 8004ba4:	40014400 	.word	0x40014400
 8004ba8:	40014800 	.word	0x40014800

08004bac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bb4:	bf00      	nop
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004bdc:	bf00      	nop
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d101      	bne.n	8004bfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e040      	b.n	8004c7c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d106      	bne.n	8004c10 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f7fc fe66 	bl	80018dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2224      	movs	r2, #36	; 0x24
 8004c14:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f022 0201 	bic.w	r2, r2, #1
 8004c24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 f980 	bl	8004f2c <UART_SetConfig>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d101      	bne.n	8004c36 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e022      	b.n	8004c7c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d002      	beq.n	8004c44 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 faaa 	bl	8005198 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	685a      	ldr	r2, [r3, #4]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	689a      	ldr	r2, [r3, #8]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f042 0201 	orr.w	r2, r2, #1
 8004c72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 fb31 	bl	80052dc <UART_CheckIdleState>
 8004c7a:	4603      	mov	r3, r0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3708      	adds	r7, #8
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b08a      	sub	sp, #40	; 0x28
 8004c88:	af02      	add	r7, sp, #8
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	603b      	str	r3, [r7, #0]
 8004c90:	4613      	mov	r3, r2
 8004c92:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c98:	2b20      	cmp	r3, #32
 8004c9a:	d178      	bne.n	8004d8e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d002      	beq.n	8004ca8 <HAL_UART_Transmit+0x24>
 8004ca2:	88fb      	ldrh	r3, [r7, #6]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d101      	bne.n	8004cac <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e071      	b.n	8004d90 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2221      	movs	r2, #33	; 0x21
 8004cb8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004cba:	f7fd f8e3 	bl	8001e84 <HAL_GetTick>
 8004cbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	88fa      	ldrh	r2, [r7, #6]
 8004cc4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	88fa      	ldrh	r2, [r7, #6]
 8004ccc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cd8:	d108      	bne.n	8004cec <HAL_UART_Transmit+0x68>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d104      	bne.n	8004cec <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	61bb      	str	r3, [r7, #24]
 8004cea:	e003      	b.n	8004cf4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004cf4:	e030      	b.n	8004d58 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	9300      	str	r3, [sp, #0]
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	2180      	movs	r1, #128	; 0x80
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f000 fb93 	bl	800542c <UART_WaitOnFlagUntilTimeout>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d004      	beq.n	8004d16 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2220      	movs	r2, #32
 8004d10:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e03c      	b.n	8004d90 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d10b      	bne.n	8004d34 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	881a      	ldrh	r2, [r3, #0]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d28:	b292      	uxth	r2, r2
 8004d2a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	3302      	adds	r3, #2
 8004d30:	61bb      	str	r3, [r7, #24]
 8004d32:	e008      	b.n	8004d46 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	781a      	ldrb	r2, [r3, #0]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	b292      	uxth	r2, r2
 8004d3e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	3301      	adds	r3, #1
 8004d44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	b29a      	uxth	r2, r3
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1c8      	bne.n	8004cf6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	9300      	str	r3, [sp, #0]
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	2140      	movs	r1, #64	; 0x40
 8004d6e:	68f8      	ldr	r0, [r7, #12]
 8004d70:	f000 fb5c 	bl	800542c <UART_WaitOnFlagUntilTimeout>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d004      	beq.n	8004d84 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2220      	movs	r2, #32
 8004d7e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e005      	b.n	8004d90 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2220      	movs	r2, #32
 8004d88:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	e000      	b.n	8004d90 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004d8e:	2302      	movs	r3, #2
  }
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3720      	adds	r7, #32
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b08a      	sub	sp, #40	; 0x28
 8004d9c:	af02      	add	r7, sp, #8
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	603b      	str	r3, [r7, #0]
 8004da4:	4613      	mov	r3, r2
 8004da6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dae:	2b20      	cmp	r3, #32
 8004db0:	f040 80b6 	bne.w	8004f20 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d002      	beq.n	8004dc0 <HAL_UART_Receive+0x28>
 8004dba:	88fb      	ldrh	r3, [r7, #6]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d101      	bne.n	8004dc4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e0ae      	b.n	8004f22 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2222      	movs	r2, #34	; 0x22
 8004dd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004dda:	f7fd f853 	bl	8001e84 <HAL_GetTick>
 8004dde:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	88fa      	ldrh	r2, [r7, #6]
 8004de4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	88fa      	ldrh	r2, [r7, #6]
 8004dec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004df8:	d10e      	bne.n	8004e18 <HAL_UART_Receive+0x80>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d105      	bne.n	8004e0e <HAL_UART_Receive+0x76>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004e08:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e0c:	e02d      	b.n	8004e6a <HAL_UART_Receive+0xd2>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	22ff      	movs	r2, #255	; 0xff
 8004e12:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e16:	e028      	b.n	8004e6a <HAL_UART_Receive+0xd2>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d10d      	bne.n	8004e3c <HAL_UART_Receive+0xa4>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d104      	bne.n	8004e32 <HAL_UART_Receive+0x9a>
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	22ff      	movs	r2, #255	; 0xff
 8004e2c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e30:	e01b      	b.n	8004e6a <HAL_UART_Receive+0xd2>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	227f      	movs	r2, #127	; 0x7f
 8004e36:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e3a:	e016      	b.n	8004e6a <HAL_UART_Receive+0xd2>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e44:	d10d      	bne.n	8004e62 <HAL_UART_Receive+0xca>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d104      	bne.n	8004e58 <HAL_UART_Receive+0xc0>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	227f      	movs	r2, #127	; 0x7f
 8004e52:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e56:	e008      	b.n	8004e6a <HAL_UART_Receive+0xd2>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	223f      	movs	r2, #63	; 0x3f
 8004e5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e60:	e003      	b.n	8004e6a <HAL_UART_Receive+0xd2>
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004e70:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e7a:	d108      	bne.n	8004e8e <HAL_UART_Receive+0xf6>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d104      	bne.n	8004e8e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004e84:	2300      	movs	r3, #0
 8004e86:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	61bb      	str	r3, [r7, #24]
 8004e8c:	e003      	b.n	8004e96 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e92:	2300      	movs	r3, #0
 8004e94:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004e96:	e037      	b.n	8004f08 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	9300      	str	r3, [sp, #0]
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	2120      	movs	r1, #32
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	f000 fac2 	bl	800542c <UART_WaitOnFlagUntilTimeout>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d005      	beq.n	8004eba <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2220      	movs	r2, #32
 8004eb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e033      	b.n	8004f22 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d10c      	bne.n	8004eda <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004ec6:	b29a      	uxth	r2, r3
 8004ec8:	8a7b      	ldrh	r3, [r7, #18]
 8004eca:	4013      	ands	r3, r2
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	3302      	adds	r3, #2
 8004ed6:	61bb      	str	r3, [r7, #24]
 8004ed8:	e00d      	b.n	8004ef6 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	b2da      	uxtb	r2, r3
 8004ee4:	8a7b      	ldrh	r3, [r7, #18]
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	4013      	ands	r3, r2
 8004eea:	b2da      	uxtb	r2, r3
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	3b01      	subs	r3, #1
 8004f00:	b29a      	uxth	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d1c1      	bne.n	8004e98 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2220      	movs	r2, #32
 8004f18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	e000      	b.n	8004f22 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8004f20:	2302      	movs	r3, #2
  }
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3720      	adds	r7, #32
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
	...

08004f2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b088      	sub	sp, #32
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f34:	2300      	movs	r3, #0
 8004f36:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	689a      	ldr	r2, [r3, #8]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	431a      	orrs	r2, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	431a      	orrs	r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	69db      	ldr	r3, [r3, #28]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	4b8a      	ldr	r3, [pc, #552]	; (8005180 <UART_SetConfig+0x254>)
 8004f58:	4013      	ands	r3, r2
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	6812      	ldr	r2, [r2, #0]
 8004f5e:	6979      	ldr	r1, [r7, #20]
 8004f60:	430b      	orrs	r3, r1
 8004f62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	68da      	ldr	r2, [r3, #12]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	430a      	orrs	r2, r1
 8004f78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a1b      	ldr	r3, [r3, #32]
 8004f84:	697a      	ldr	r2, [r7, #20]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	697a      	ldr	r2, [r7, #20]
 8004f9a:	430a      	orrs	r2, r1
 8004f9c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a78      	ldr	r2, [pc, #480]	; (8005184 <UART_SetConfig+0x258>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d120      	bne.n	8004fea <UART_SetConfig+0xbe>
 8004fa8:	4b77      	ldr	r3, [pc, #476]	; (8005188 <UART_SetConfig+0x25c>)
 8004faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fac:	f003 0303 	and.w	r3, r3, #3
 8004fb0:	2b03      	cmp	r3, #3
 8004fb2:	d817      	bhi.n	8004fe4 <UART_SetConfig+0xb8>
 8004fb4:	a201      	add	r2, pc, #4	; (adr r2, 8004fbc <UART_SetConfig+0x90>)
 8004fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fba:	bf00      	nop
 8004fbc:	08004fcd 	.word	0x08004fcd
 8004fc0:	08004fd9 	.word	0x08004fd9
 8004fc4:	08004fdf 	.word	0x08004fdf
 8004fc8:	08004fd3 	.word	0x08004fd3
 8004fcc:	2300      	movs	r3, #0
 8004fce:	77fb      	strb	r3, [r7, #31]
 8004fd0:	e01d      	b.n	800500e <UART_SetConfig+0xe2>
 8004fd2:	2302      	movs	r3, #2
 8004fd4:	77fb      	strb	r3, [r7, #31]
 8004fd6:	e01a      	b.n	800500e <UART_SetConfig+0xe2>
 8004fd8:	2304      	movs	r3, #4
 8004fda:	77fb      	strb	r3, [r7, #31]
 8004fdc:	e017      	b.n	800500e <UART_SetConfig+0xe2>
 8004fde:	2308      	movs	r3, #8
 8004fe0:	77fb      	strb	r3, [r7, #31]
 8004fe2:	e014      	b.n	800500e <UART_SetConfig+0xe2>
 8004fe4:	2310      	movs	r3, #16
 8004fe6:	77fb      	strb	r3, [r7, #31]
 8004fe8:	e011      	b.n	800500e <UART_SetConfig+0xe2>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a67      	ldr	r2, [pc, #412]	; (800518c <UART_SetConfig+0x260>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d102      	bne.n	8004ffa <UART_SetConfig+0xce>
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	77fb      	strb	r3, [r7, #31]
 8004ff8:	e009      	b.n	800500e <UART_SetConfig+0xe2>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a64      	ldr	r2, [pc, #400]	; (8005190 <UART_SetConfig+0x264>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d102      	bne.n	800500a <UART_SetConfig+0xde>
 8005004:	2300      	movs	r3, #0
 8005006:	77fb      	strb	r3, [r7, #31]
 8005008:	e001      	b.n	800500e <UART_SetConfig+0xe2>
 800500a:	2310      	movs	r3, #16
 800500c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	69db      	ldr	r3, [r3, #28]
 8005012:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005016:	d15a      	bne.n	80050ce <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8005018:	7ffb      	ldrb	r3, [r7, #31]
 800501a:	2b08      	cmp	r3, #8
 800501c:	d827      	bhi.n	800506e <UART_SetConfig+0x142>
 800501e:	a201      	add	r2, pc, #4	; (adr r2, 8005024 <UART_SetConfig+0xf8>)
 8005020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005024:	08005049 	.word	0x08005049
 8005028:	08005051 	.word	0x08005051
 800502c:	08005059 	.word	0x08005059
 8005030:	0800506f 	.word	0x0800506f
 8005034:	0800505f 	.word	0x0800505f
 8005038:	0800506f 	.word	0x0800506f
 800503c:	0800506f 	.word	0x0800506f
 8005040:	0800506f 	.word	0x0800506f
 8005044:	08005067 	.word	0x08005067
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005048:	f7ff f8aa 	bl	80041a0 <HAL_RCC_GetPCLK1Freq>
 800504c:	61b8      	str	r0, [r7, #24]
        break;
 800504e:	e013      	b.n	8005078 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005050:	f7ff f8c8 	bl	80041e4 <HAL_RCC_GetPCLK2Freq>
 8005054:	61b8      	str	r0, [r7, #24]
        break;
 8005056:	e00f      	b.n	8005078 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005058:	4b4e      	ldr	r3, [pc, #312]	; (8005194 <UART_SetConfig+0x268>)
 800505a:	61bb      	str	r3, [r7, #24]
        break;
 800505c:	e00c      	b.n	8005078 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800505e:	f7ff f829 	bl	80040b4 <HAL_RCC_GetSysClockFreq>
 8005062:	61b8      	str	r0, [r7, #24]
        break;
 8005064:	e008      	b.n	8005078 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005066:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800506a:	61bb      	str	r3, [r7, #24]
        break;
 800506c:	e004      	b.n	8005078 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800506e:	2300      	movs	r3, #0
 8005070:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	77bb      	strb	r3, [r7, #30]
        break;
 8005076:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d074      	beq.n	8005168 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	005a      	lsls	r2, r3, #1
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	085b      	lsrs	r3, r3, #1
 8005088:	441a      	add	r2, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005092:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	2b0f      	cmp	r3, #15
 8005098:	d916      	bls.n	80050c8 <UART_SetConfig+0x19c>
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050a0:	d212      	bcs.n	80050c8 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	f023 030f 	bic.w	r3, r3, #15
 80050aa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	085b      	lsrs	r3, r3, #1
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	f003 0307 	and.w	r3, r3, #7
 80050b6:	b29a      	uxth	r2, r3
 80050b8:	89fb      	ldrh	r3, [r7, #14]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	89fa      	ldrh	r2, [r7, #14]
 80050c4:	60da      	str	r2, [r3, #12]
 80050c6:	e04f      	b.n	8005168 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	77bb      	strb	r3, [r7, #30]
 80050cc:	e04c      	b.n	8005168 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80050ce:	7ffb      	ldrb	r3, [r7, #31]
 80050d0:	2b08      	cmp	r3, #8
 80050d2:	d828      	bhi.n	8005126 <UART_SetConfig+0x1fa>
 80050d4:	a201      	add	r2, pc, #4	; (adr r2, 80050dc <UART_SetConfig+0x1b0>)
 80050d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050da:	bf00      	nop
 80050dc:	08005101 	.word	0x08005101
 80050e0:	08005109 	.word	0x08005109
 80050e4:	08005111 	.word	0x08005111
 80050e8:	08005127 	.word	0x08005127
 80050ec:	08005117 	.word	0x08005117
 80050f0:	08005127 	.word	0x08005127
 80050f4:	08005127 	.word	0x08005127
 80050f8:	08005127 	.word	0x08005127
 80050fc:	0800511f 	.word	0x0800511f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005100:	f7ff f84e 	bl	80041a0 <HAL_RCC_GetPCLK1Freq>
 8005104:	61b8      	str	r0, [r7, #24]
        break;
 8005106:	e013      	b.n	8005130 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005108:	f7ff f86c 	bl	80041e4 <HAL_RCC_GetPCLK2Freq>
 800510c:	61b8      	str	r0, [r7, #24]
        break;
 800510e:	e00f      	b.n	8005130 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005110:	4b20      	ldr	r3, [pc, #128]	; (8005194 <UART_SetConfig+0x268>)
 8005112:	61bb      	str	r3, [r7, #24]
        break;
 8005114:	e00c      	b.n	8005130 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005116:	f7fe ffcd 	bl	80040b4 <HAL_RCC_GetSysClockFreq>
 800511a:	61b8      	str	r0, [r7, #24]
        break;
 800511c:	e008      	b.n	8005130 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800511e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005122:	61bb      	str	r3, [r7, #24]
        break;
 8005124:	e004      	b.n	8005130 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005126:	2300      	movs	r3, #0
 8005128:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	77bb      	strb	r3, [r7, #30]
        break;
 800512e:	bf00      	nop
    }

    if (pclk != 0U)
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d018      	beq.n	8005168 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	085a      	lsrs	r2, r3, #1
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	441a      	add	r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	fbb2 f3f3 	udiv	r3, r2, r3
 8005148:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	2b0f      	cmp	r3, #15
 800514e:	d909      	bls.n	8005164 <UART_SetConfig+0x238>
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005156:	d205      	bcs.n	8005164 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	b29a      	uxth	r2, r3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	60da      	str	r2, [r3, #12]
 8005162:	e001      	b.n	8005168 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005174:	7fbb      	ldrb	r3, [r7, #30]
}
 8005176:	4618      	mov	r0, r3
 8005178:	3720      	adds	r7, #32
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	efff69f3 	.word	0xefff69f3
 8005184:	40013800 	.word	0x40013800
 8005188:	40021000 	.word	0x40021000
 800518c:	40004400 	.word	0x40004400
 8005190:	40004800 	.word	0x40004800
 8005194:	007a1200 	.word	0x007a1200

08005198 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a4:	f003 0301 	and.w	r3, r3, #1
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00a      	beq.n	80051c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	430a      	orrs	r2, r1
 80051c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c6:	f003 0302 	and.w	r3, r3, #2
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00a      	beq.n	80051e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	430a      	orrs	r2, r1
 80051e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e8:	f003 0304 	and.w	r3, r3, #4
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d00a      	beq.n	8005206 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	430a      	orrs	r2, r1
 8005204:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520a:	f003 0308 	and.w	r3, r3, #8
 800520e:	2b00      	cmp	r3, #0
 8005210:	d00a      	beq.n	8005228 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	430a      	orrs	r2, r1
 8005226:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522c:	f003 0310 	and.w	r3, r3, #16
 8005230:	2b00      	cmp	r3, #0
 8005232:	d00a      	beq.n	800524a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	430a      	orrs	r2, r1
 8005248:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524e:	f003 0320 	and.w	r3, r3, #32
 8005252:	2b00      	cmp	r3, #0
 8005254:	d00a      	beq.n	800526c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	430a      	orrs	r2, r1
 800526a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005274:	2b00      	cmp	r3, #0
 8005276:	d01a      	beq.n	80052ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	430a      	orrs	r2, r1
 800528c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005292:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005296:	d10a      	bne.n	80052ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	430a      	orrs	r2, r1
 80052ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00a      	beq.n	80052d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	430a      	orrs	r2, r1
 80052ce:	605a      	str	r2, [r3, #4]
  }
}
 80052d0:	bf00      	nop
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b098      	sub	sp, #96	; 0x60
 80052e0:	af02      	add	r7, sp, #8
 80052e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052ec:	f7fc fdca 	bl	8001e84 <HAL_GetTick>
 80052f0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0308 	and.w	r3, r3, #8
 80052fc:	2b08      	cmp	r3, #8
 80052fe:	d12e      	bne.n	800535e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005300:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005304:	9300      	str	r3, [sp, #0]
 8005306:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005308:	2200      	movs	r2, #0
 800530a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 f88c 	bl	800542c <UART_WaitOnFlagUntilTimeout>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d021      	beq.n	800535e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005322:	e853 3f00 	ldrex	r3, [r3]
 8005326:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800532a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800532e:	653b      	str	r3, [r7, #80]	; 0x50
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	461a      	mov	r2, r3
 8005336:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005338:	647b      	str	r3, [r7, #68]	; 0x44
 800533a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800533e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005340:	e841 2300 	strex	r3, r2, [r1]
 8005344:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005348:	2b00      	cmp	r3, #0
 800534a:	d1e6      	bne.n	800531a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2220      	movs	r2, #32
 8005350:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e062      	b.n	8005424 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0304 	and.w	r3, r3, #4
 8005368:	2b04      	cmp	r3, #4
 800536a:	d149      	bne.n	8005400 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800536c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005370:	9300      	str	r3, [sp, #0]
 8005372:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005374:	2200      	movs	r2, #0
 8005376:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 f856 	bl	800542c <UART_WaitOnFlagUntilTimeout>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d03c      	beq.n	8005400 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800538c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538e:	e853 3f00 	ldrex	r3, [r3]
 8005392:	623b      	str	r3, [r7, #32]
   return(result);
 8005394:	6a3b      	ldr	r3, [r7, #32]
 8005396:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800539a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	461a      	mov	r2, r3
 80053a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053a4:	633b      	str	r3, [r7, #48]	; 0x30
 80053a6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053ac:	e841 2300 	strex	r3, r2, [r1]
 80053b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80053b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d1e6      	bne.n	8005386 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	3308      	adds	r3, #8
 80053be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	e853 3f00 	ldrex	r3, [r3]
 80053c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f023 0301 	bic.w	r3, r3, #1
 80053ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	3308      	adds	r3, #8
 80053d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053d8:	61fa      	str	r2, [r7, #28]
 80053da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053dc:	69b9      	ldr	r1, [r7, #24]
 80053de:	69fa      	ldr	r2, [r7, #28]
 80053e0:	e841 2300 	strex	r3, r2, [r1]
 80053e4:	617b      	str	r3, [r7, #20]
   return(result);
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d1e5      	bne.n	80053b8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2220      	movs	r2, #32
 80053f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e011      	b.n	8005424 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2220      	movs	r2, #32
 8005404:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2220      	movs	r2, #32
 800540a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	3758      	adds	r7, #88	; 0x58
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	603b      	str	r3, [r7, #0]
 8005438:	4613      	mov	r3, r2
 800543a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800543c:	e049      	b.n	80054d2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005444:	d045      	beq.n	80054d2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005446:	f7fc fd1d 	bl	8001e84 <HAL_GetTick>
 800544a:	4602      	mov	r2, r0
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	69ba      	ldr	r2, [r7, #24]
 8005452:	429a      	cmp	r2, r3
 8005454:	d302      	bcc.n	800545c <UART_WaitOnFlagUntilTimeout+0x30>
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d101      	bne.n	8005460 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	e048      	b.n	80054f2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0304 	and.w	r3, r3, #4
 800546a:	2b00      	cmp	r3, #0
 800546c:	d031      	beq.n	80054d2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	69db      	ldr	r3, [r3, #28]
 8005474:	f003 0308 	and.w	r3, r3, #8
 8005478:	2b08      	cmp	r3, #8
 800547a:	d110      	bne.n	800549e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2208      	movs	r2, #8
 8005482:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005484:	68f8      	ldr	r0, [r7, #12]
 8005486:	f000 f838 	bl	80054fa <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2208      	movs	r2, #8
 800548e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e029      	b.n	80054f2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	69db      	ldr	r3, [r3, #28]
 80054a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054ac:	d111      	bne.n	80054d2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054b8:	68f8      	ldr	r0, [r7, #12]
 80054ba:	f000 f81e 	bl	80054fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2220      	movs	r2, #32
 80054c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80054ce:	2303      	movs	r3, #3
 80054d0:	e00f      	b.n	80054f2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	69da      	ldr	r2, [r3, #28]
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	4013      	ands	r3, r2
 80054dc:	68ba      	ldr	r2, [r7, #8]
 80054de:	429a      	cmp	r2, r3
 80054e0:	bf0c      	ite	eq
 80054e2:	2301      	moveq	r3, #1
 80054e4:	2300      	movne	r3, #0
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	461a      	mov	r2, r3
 80054ea:	79fb      	ldrb	r3, [r7, #7]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d0a6      	beq.n	800543e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3710      	adds	r7, #16
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}

080054fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054fa:	b480      	push	{r7}
 80054fc:	b095      	sub	sp, #84	; 0x54
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800550a:	e853 3f00 	ldrex	r3, [r3]
 800550e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005512:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005516:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	461a      	mov	r2, r3
 800551e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005520:	643b      	str	r3, [r7, #64]	; 0x40
 8005522:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005524:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005526:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005528:	e841 2300 	strex	r3, r2, [r1]
 800552c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800552e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005530:	2b00      	cmp	r3, #0
 8005532:	d1e6      	bne.n	8005502 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	3308      	adds	r3, #8
 800553a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800553c:	6a3b      	ldr	r3, [r7, #32]
 800553e:	e853 3f00 	ldrex	r3, [r3]
 8005542:	61fb      	str	r3, [r7, #28]
   return(result);
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	f023 0301 	bic.w	r3, r3, #1
 800554a:	64bb      	str	r3, [r7, #72]	; 0x48
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	3308      	adds	r3, #8
 8005552:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005554:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005556:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005558:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800555a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800555c:	e841 2300 	strex	r3, r2, [r1]
 8005560:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005564:	2b00      	cmp	r3, #0
 8005566:	d1e5      	bne.n	8005534 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800556c:	2b01      	cmp	r3, #1
 800556e:	d118      	bne.n	80055a2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	e853 3f00 	ldrex	r3, [r3]
 800557c:	60bb      	str	r3, [r7, #8]
   return(result);
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	f023 0310 	bic.w	r3, r3, #16
 8005584:	647b      	str	r3, [r7, #68]	; 0x44
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	461a      	mov	r2, r3
 800558c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800558e:	61bb      	str	r3, [r7, #24]
 8005590:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005592:	6979      	ldr	r1, [r7, #20]
 8005594:	69ba      	ldr	r2, [r7, #24]
 8005596:	e841 2300 	strex	r3, r2, [r1]
 800559a:	613b      	str	r3, [r7, #16]
   return(result);
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1e6      	bne.n	8005570 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2220      	movs	r2, #32
 80055a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80055b6:	bf00      	nop
 80055b8:	3754      	adds	r7, #84	; 0x54
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr

080055c2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80055c2:	b480      	push	{r7}
 80055c4:	b085      	sub	sp, #20
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	4603      	mov	r3, r0
 80055ca:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80055cc:	2300      	movs	r3, #0
 80055ce:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80055d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055d4:	2b84      	cmp	r3, #132	; 0x84
 80055d6:	d005      	beq.n	80055e4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80055d8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	4413      	add	r3, r2
 80055e0:	3303      	adds	r3, #3
 80055e2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80055e4:	68fb      	ldr	r3, [r7, #12]
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3714      	adds	r7, #20
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr

080055f2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80055f2:	b580      	push	{r7, lr}
 80055f4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80055f6:	f001 f895 	bl	8006724 <vTaskStartScheduler>
  
  return osOK;
 80055fa:	2300      	movs	r3, #0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	bd80      	pop	{r7, pc}

08005600 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005602:	b089      	sub	sp, #36	; 0x24
 8005604:	af04      	add	r7, sp, #16
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	695b      	ldr	r3, [r3, #20]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d020      	beq.n	8005654 <osThreadCreate+0x54>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d01c      	beq.n	8005654 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685c      	ldr	r4, [r3, #4]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	691e      	ldr	r6, [r3, #16]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800562c:	4618      	mov	r0, r3
 800562e:	f7ff ffc8 	bl	80055c2 <makeFreeRtosPriority>
 8005632:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	695b      	ldr	r3, [r3, #20]
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800563c:	9202      	str	r2, [sp, #8]
 800563e:	9301      	str	r3, [sp, #4]
 8005640:	9100      	str	r1, [sp, #0]
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	4632      	mov	r2, r6
 8005646:	4629      	mov	r1, r5
 8005648:	4620      	mov	r0, r4
 800564a:	f000 fead 	bl	80063a8 <xTaskCreateStatic>
 800564e:	4603      	mov	r3, r0
 8005650:	60fb      	str	r3, [r7, #12]
 8005652:	e01c      	b.n	800568e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685c      	ldr	r4, [r3, #4]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005660:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005668:	4618      	mov	r0, r3
 800566a:	f7ff ffaa 	bl	80055c2 <makeFreeRtosPriority>
 800566e:	4602      	mov	r2, r0
 8005670:	f107 030c 	add.w	r3, r7, #12
 8005674:	9301      	str	r3, [sp, #4]
 8005676:	9200      	str	r2, [sp, #0]
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	4632      	mov	r2, r6
 800567c:	4629      	mov	r1, r5
 800567e:	4620      	mov	r0, r4
 8005680:	f000 feee 	bl	8006460 <xTaskCreate>
 8005684:	4603      	mov	r3, r0
 8005686:	2b01      	cmp	r3, #1
 8005688:	d001      	beq.n	800568e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800568a:	2300      	movs	r3, #0
 800568c:	e000      	b.n	8005690 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800568e:	68fb      	ldr	r3, [r7, #12]
}
 8005690:	4618      	mov	r0, r3
 8005692:	3714      	adds	r7, #20
 8005694:	46bd      	mov	sp, r7
 8005696:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005698 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d001      	beq.n	80056ae <osDelay+0x16>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	e000      	b.n	80056b0 <osDelay+0x18>
 80056ae:	2301      	movs	r3, #1
 80056b0:	4618      	mov	r0, r3
 80056b2:	f001 f803 	bl	80066bc <vTaskDelay>
  
  return osOK;
 80056b6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3710      	adds	r7, #16
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b082      	sub	sp, #8
 80056c4:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 80056c6:	201c      	movs	r0, #28
 80056c8:	f002 fb46 	bl	8007d58 <pvPortMalloc>
 80056cc:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d00a      	beq.n	80056ea <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	3304      	adds	r3, #4
 80056de:	4618      	mov	r0, r3
 80056e0:	f000 f8cb 	bl	800587a <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 80056ea:	687b      	ldr	r3, [r7, #4]
	}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3708      	adds	r7, #8
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <xEventGroupClearBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b086      	sub	sp, #24
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d10a      	bne.n	800571e <xEventGroupClearBits+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800570c:	f383 8811 	msr	BASEPRI, r3
 8005710:	f3bf 8f6f 	isb	sy
 8005714:	f3bf 8f4f 	dsb	sy
 8005718:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800571a:	bf00      	nop
 800571c:	e7fe      	b.n	800571c <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005724:	2b00      	cmp	r3, #0
 8005726:	d00a      	beq.n	800573e <xEventGroupClearBits+0x4a>
	__asm volatile
 8005728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800572c:	f383 8811 	msr	BASEPRI, r3
 8005730:	f3bf 8f6f 	isb	sy
 8005734:	f3bf 8f4f 	dsb	sy
 8005738:	60bb      	str	r3, [r7, #8]
}
 800573a:	bf00      	nop
 800573c:	e7fe      	b.n	800573c <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 800573e:	f002 f9e9 	bl	8007b14 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	43db      	mvns	r3, r3
 8005750:	401a      	ands	r2, r3
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8005756:	f002 fa0d 	bl	8007b74 <vPortExitCritical>

	return uxReturn;
 800575a:	693b      	ldr	r3, [r7, #16]
}
 800575c:	4618      	mov	r0, r3
 800575e:	3718      	adds	r7, #24
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b08e      	sub	sp, #56	; 0x38
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800576e:	2300      	movs	r3, #0
 8005770:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8005776:	2300      	movs	r3, #0
 8005778:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d10a      	bne.n	8005796 <xEventGroupSetBits+0x32>
	__asm volatile
 8005780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005784:	f383 8811 	msr	BASEPRI, r3
 8005788:	f3bf 8f6f 	isb	sy
 800578c:	f3bf 8f4f 	dsb	sy
 8005790:	613b      	str	r3, [r7, #16]
}
 8005792:	bf00      	nop
 8005794:	e7fe      	b.n	8005794 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00a      	beq.n	80057b6 <xEventGroupSetBits+0x52>
	__asm volatile
 80057a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a4:	f383 8811 	msr	BASEPRI, r3
 80057a8:	f3bf 8f6f 	isb	sy
 80057ac:	f3bf 8f4f 	dsb	sy
 80057b0:	60fb      	str	r3, [r7, #12]
}
 80057b2:	bf00      	nop
 80057b4:	e7fe      	b.n	80057b4 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80057b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b8:	3304      	adds	r3, #4
 80057ba:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057be:	3308      	adds	r3, #8
 80057c0:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80057c2:	f001 f815 	bl	80067f0 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80057c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80057cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	431a      	orrs	r2, r3
 80057d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d6:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80057d8:	e03c      	b.n	8005854 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80057da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80057e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80057e6:	2300      	movs	r3, #0
 80057e8:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80057f0:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80057f8:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005800:	2b00      	cmp	r3, #0
 8005802:	d108      	bne.n	8005816 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8005804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	4013      	ands	r3, r2
 800580c:	2b00      	cmp	r3, #0
 800580e:	d00b      	beq.n	8005828 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8005810:	2301      	movs	r3, #1
 8005812:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005814:	e008      	b.n	8005828 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8005816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	4013      	ands	r3, r2
 800581e:	69ba      	ldr	r2, [r7, #24]
 8005820:	429a      	cmp	r2, r3
 8005822:	d101      	bne.n	8005828 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8005824:	2301      	movs	r3, #1
 8005826:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8005828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800582a:	2b00      	cmp	r3, #0
 800582c:	d010      	beq.n	8005850 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005834:	2b00      	cmp	r3, #0
 8005836:	d003      	beq.n	8005840 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8005838:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	4313      	orrs	r3, r2
 800583e:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8005840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005848:	4619      	mov	r1, r3
 800584a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800584c:	f001 fa56 	bl	8006cfc <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8005854:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005856:	6a3b      	ldr	r3, [r7, #32]
 8005858:	429a      	cmp	r2, r3
 800585a:	d1be      	bne.n	80057da <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800585c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005862:	43db      	mvns	r3, r3
 8005864:	401a      	ands	r2, r3
 8005866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005868:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800586a:	f000 ffcf 	bl	800680c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800586e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005870:	681b      	ldr	r3, [r3, #0]
}
 8005872:	4618      	mov	r0, r3
 8005874:	3738      	adds	r7, #56	; 0x38
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800587a:	b480      	push	{r7}
 800587c:	b083      	sub	sp, #12
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f103 0208 	add.w	r2, r3, #8
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f04f 32ff 	mov.w	r2, #4294967295
 8005892:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f103 0208 	add.w	r2, r3, #8
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f103 0208 	add.w	r2, r3, #8
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80058ae:	bf00      	nop
 80058b0:	370c      	adds	r7, #12
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr

080058ba <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80058ba:	b480      	push	{r7}
 80058bc:	b083      	sub	sp, #12
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80058c8:	bf00      	nop
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	689a      	ldr	r2, [r3, #8]
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	683a      	ldr	r2, [r7, #0]
 80058f8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	683a      	ldr	r2, [r7, #0]
 80058fe:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	1c5a      	adds	r2, r3, #1
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	601a      	str	r2, [r3, #0]
}
 8005910:	bf00      	nop
 8005912:	3714      	adds	r7, #20
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800591c:	b480      	push	{r7}
 800591e:	b085      	sub	sp, #20
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005932:	d103      	bne.n	800593c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	691b      	ldr	r3, [r3, #16]
 8005938:	60fb      	str	r3, [r7, #12]
 800593a:	e00c      	b.n	8005956 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	3308      	adds	r3, #8
 8005940:	60fb      	str	r3, [r7, #12]
 8005942:	e002      	b.n	800594a <vListInsert+0x2e>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	60fb      	str	r3, [r7, #12]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68ba      	ldr	r2, [r7, #8]
 8005952:	429a      	cmp	r2, r3
 8005954:	d2f6      	bcs.n	8005944 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	685a      	ldr	r2, [r3, #4]
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	683a      	ldr	r2, [r7, #0]
 8005964:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	683a      	ldr	r2, [r7, #0]
 8005970:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	1c5a      	adds	r2, r3, #1
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	601a      	str	r2, [r3, #0]
}
 8005982:	bf00      	nop
 8005984:	3714      	adds	r7, #20
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr

0800598e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800598e:	b480      	push	{r7}
 8005990:	b085      	sub	sp, #20
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	6892      	ldr	r2, [r2, #8]
 80059a4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	6852      	ldr	r2, [r2, #4]
 80059ae:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d103      	bne.n	80059c2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	689a      	ldr	r2, [r3, #8]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	1e5a      	subs	r2, r3, #1
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3714      	adds	r7, #20
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
	...

080059e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d10a      	bne.n	8005a0e <xQueueGenericReset+0x2a>
	__asm volatile
 80059f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fc:	f383 8811 	msr	BASEPRI, r3
 8005a00:	f3bf 8f6f 	isb	sy
 8005a04:	f3bf 8f4f 	dsb	sy
 8005a08:	60bb      	str	r3, [r7, #8]
}
 8005a0a:	bf00      	nop
 8005a0c:	e7fe      	b.n	8005a0c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005a0e:	f002 f881 	bl	8007b14 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a1a:	68f9      	ldr	r1, [r7, #12]
 8005a1c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005a1e:	fb01 f303 	mul.w	r3, r1, r3
 8005a22:	441a      	add	r2, r3
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	68f9      	ldr	r1, [r7, #12]
 8005a42:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005a44:	fb01 f303 	mul.w	r3, r1, r3
 8005a48:	441a      	add	r2, r3
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	22ff      	movs	r2, #255	; 0xff
 8005a52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	22ff      	movs	r2, #255	; 0xff
 8005a5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d114      	bne.n	8005a8e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	691b      	ldr	r3, [r3, #16]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d01a      	beq.n	8005aa2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	3310      	adds	r3, #16
 8005a70:	4618      	mov	r0, r3
 8005a72:	f001 f8e1 	bl	8006c38 <xTaskRemoveFromEventList>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d012      	beq.n	8005aa2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005a7c:	4b0c      	ldr	r3, [pc, #48]	; (8005ab0 <xQueueGenericReset+0xcc>)
 8005a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a82:	601a      	str	r2, [r3, #0]
 8005a84:	f3bf 8f4f 	dsb	sy
 8005a88:	f3bf 8f6f 	isb	sy
 8005a8c:	e009      	b.n	8005aa2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	3310      	adds	r3, #16
 8005a92:	4618      	mov	r0, r3
 8005a94:	f7ff fef1 	bl	800587a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	3324      	adds	r3, #36	; 0x24
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f7ff feec 	bl	800587a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005aa2:	f002 f867 	bl	8007b74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005aa6:	2301      	movs	r3, #1
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3710      	adds	r7, #16
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	e000ed04 	.word	0xe000ed04

08005ab4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b08e      	sub	sp, #56	; 0x38
 8005ab8:	af02      	add	r7, sp, #8
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	607a      	str	r2, [r7, #4]
 8005ac0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d10a      	bne.n	8005ade <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005acc:	f383 8811 	msr	BASEPRI, r3
 8005ad0:	f3bf 8f6f 	isb	sy
 8005ad4:	f3bf 8f4f 	dsb	sy
 8005ad8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005ada:	bf00      	nop
 8005adc:	e7fe      	b.n	8005adc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d10a      	bne.n	8005afa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae8:	f383 8811 	msr	BASEPRI, r3
 8005aec:	f3bf 8f6f 	isb	sy
 8005af0:	f3bf 8f4f 	dsb	sy
 8005af4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005af6:	bf00      	nop
 8005af8:	e7fe      	b.n	8005af8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d002      	beq.n	8005b06 <xQueueGenericCreateStatic+0x52>
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d001      	beq.n	8005b0a <xQueueGenericCreateStatic+0x56>
 8005b06:	2301      	movs	r3, #1
 8005b08:	e000      	b.n	8005b0c <xQueueGenericCreateStatic+0x58>
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d10a      	bne.n	8005b26 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b14:	f383 8811 	msr	BASEPRI, r3
 8005b18:	f3bf 8f6f 	isb	sy
 8005b1c:	f3bf 8f4f 	dsb	sy
 8005b20:	623b      	str	r3, [r7, #32]
}
 8005b22:	bf00      	nop
 8005b24:	e7fe      	b.n	8005b24 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d102      	bne.n	8005b32 <xQueueGenericCreateStatic+0x7e>
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d101      	bne.n	8005b36 <xQueueGenericCreateStatic+0x82>
 8005b32:	2301      	movs	r3, #1
 8005b34:	e000      	b.n	8005b38 <xQueueGenericCreateStatic+0x84>
 8005b36:	2300      	movs	r3, #0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d10a      	bne.n	8005b52 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b40:	f383 8811 	msr	BASEPRI, r3
 8005b44:	f3bf 8f6f 	isb	sy
 8005b48:	f3bf 8f4f 	dsb	sy
 8005b4c:	61fb      	str	r3, [r7, #28]
}
 8005b4e:	bf00      	nop
 8005b50:	e7fe      	b.n	8005b50 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005b52:	2348      	movs	r3, #72	; 0x48
 8005b54:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	2b48      	cmp	r3, #72	; 0x48
 8005b5a:	d00a      	beq.n	8005b72 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b60:	f383 8811 	msr	BASEPRI, r3
 8005b64:	f3bf 8f6f 	isb	sy
 8005b68:	f3bf 8f4f 	dsb	sy
 8005b6c:	61bb      	str	r3, [r7, #24]
}
 8005b6e:	bf00      	nop
 8005b70:	e7fe      	b.n	8005b70 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d00d      	beq.n	8005b98 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005b84:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b8a:	9300      	str	r3, [sp, #0]
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	68b9      	ldr	r1, [r7, #8]
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	f000 f805 	bl	8005ba2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3730      	adds	r7, #48	; 0x30
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b084      	sub	sp, #16
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	60f8      	str	r0, [r7, #12]
 8005baa:	60b9      	str	r1, [r7, #8]
 8005bac:	607a      	str	r2, [r7, #4]
 8005bae:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d103      	bne.n	8005bbe <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	69ba      	ldr	r2, [r7, #24]
 8005bba:	601a      	str	r2, [r3, #0]
 8005bbc:	e002      	b.n	8005bc4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	68ba      	ldr	r2, [r7, #8]
 8005bce:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005bd0:	2101      	movs	r1, #1
 8005bd2:	69b8      	ldr	r0, [r7, #24]
 8005bd4:	f7ff ff06 	bl	80059e4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005bd8:	bf00      	nop
 8005bda:	3710      	adds	r7, #16
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b08e      	sub	sp, #56	; 0x38
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	607a      	str	r2, [r7, #4]
 8005bec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d10a      	bne.n	8005c12 <xQueueGenericSend+0x32>
	__asm volatile
 8005bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c00:	f383 8811 	msr	BASEPRI, r3
 8005c04:	f3bf 8f6f 	isb	sy
 8005c08:	f3bf 8f4f 	dsb	sy
 8005c0c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005c0e:	bf00      	nop
 8005c10:	e7fe      	b.n	8005c10 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d103      	bne.n	8005c20 <xQueueGenericSend+0x40>
 8005c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d101      	bne.n	8005c24 <xQueueGenericSend+0x44>
 8005c20:	2301      	movs	r3, #1
 8005c22:	e000      	b.n	8005c26 <xQueueGenericSend+0x46>
 8005c24:	2300      	movs	r3, #0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d10a      	bne.n	8005c40 <xQueueGenericSend+0x60>
	__asm volatile
 8005c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c2e:	f383 8811 	msr	BASEPRI, r3
 8005c32:	f3bf 8f6f 	isb	sy
 8005c36:	f3bf 8f4f 	dsb	sy
 8005c3a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005c3c:	bf00      	nop
 8005c3e:	e7fe      	b.n	8005c3e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	2b02      	cmp	r3, #2
 8005c44:	d103      	bne.n	8005c4e <xQueueGenericSend+0x6e>
 8005c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d101      	bne.n	8005c52 <xQueueGenericSend+0x72>
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e000      	b.n	8005c54 <xQueueGenericSend+0x74>
 8005c52:	2300      	movs	r3, #0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d10a      	bne.n	8005c6e <xQueueGenericSend+0x8e>
	__asm volatile
 8005c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5c:	f383 8811 	msr	BASEPRI, r3
 8005c60:	f3bf 8f6f 	isb	sy
 8005c64:	f3bf 8f4f 	dsb	sy
 8005c68:	623b      	str	r3, [r7, #32]
}
 8005c6a:	bf00      	nop
 8005c6c:	e7fe      	b.n	8005c6c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c6e:	f001 fa07 	bl	8007080 <xTaskGetSchedulerState>
 8005c72:	4603      	mov	r3, r0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d102      	bne.n	8005c7e <xQueueGenericSend+0x9e>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d101      	bne.n	8005c82 <xQueueGenericSend+0xa2>
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e000      	b.n	8005c84 <xQueueGenericSend+0xa4>
 8005c82:	2300      	movs	r3, #0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d10a      	bne.n	8005c9e <xQueueGenericSend+0xbe>
	__asm volatile
 8005c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c8c:	f383 8811 	msr	BASEPRI, r3
 8005c90:	f3bf 8f6f 	isb	sy
 8005c94:	f3bf 8f4f 	dsb	sy
 8005c98:	61fb      	str	r3, [r7, #28]
}
 8005c9a:	bf00      	nop
 8005c9c:	e7fe      	b.n	8005c9c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005c9e:	f001 ff39 	bl	8007b14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d302      	bcc.n	8005cb4 <xQueueGenericSend+0xd4>
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	d129      	bne.n	8005d08 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005cb4:	683a      	ldr	r2, [r7, #0]
 8005cb6:	68b9      	ldr	r1, [r7, #8]
 8005cb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cba:	f000 fa07 	bl	80060cc <prvCopyDataToQueue>
 8005cbe:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d010      	beq.n	8005cea <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cca:	3324      	adds	r3, #36	; 0x24
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f000 ffb3 	bl	8006c38 <xTaskRemoveFromEventList>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d013      	beq.n	8005d00 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005cd8:	4b3f      	ldr	r3, [pc, #252]	; (8005dd8 <xQueueGenericSend+0x1f8>)
 8005cda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cde:	601a      	str	r2, [r3, #0]
 8005ce0:	f3bf 8f4f 	dsb	sy
 8005ce4:	f3bf 8f6f 	isb	sy
 8005ce8:	e00a      	b.n	8005d00 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d007      	beq.n	8005d00 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005cf0:	4b39      	ldr	r3, [pc, #228]	; (8005dd8 <xQueueGenericSend+0x1f8>)
 8005cf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cf6:	601a      	str	r2, [r3, #0]
 8005cf8:	f3bf 8f4f 	dsb	sy
 8005cfc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005d00:	f001 ff38 	bl	8007b74 <vPortExitCritical>
				return pdPASS;
 8005d04:	2301      	movs	r3, #1
 8005d06:	e063      	b.n	8005dd0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d103      	bne.n	8005d16 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d0e:	f001 ff31 	bl	8007b74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005d12:	2300      	movs	r3, #0
 8005d14:	e05c      	b.n	8005dd0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d106      	bne.n	8005d2a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d1c:	f107 0314 	add.w	r3, r7, #20
 8005d20:	4618      	mov	r0, r3
 8005d22:	f001 f84d 	bl	8006dc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d26:	2301      	movs	r3, #1
 8005d28:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d2a:	f001 ff23 	bl	8007b74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d2e:	f000 fd5f 	bl	80067f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d32:	f001 feef 	bl	8007b14 <vPortEnterCritical>
 8005d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d3c:	b25b      	sxtb	r3, r3
 8005d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d42:	d103      	bne.n	8005d4c <xQueueGenericSend+0x16c>
 8005d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d46:	2200      	movs	r2, #0
 8005d48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d52:	b25b      	sxtb	r3, r3
 8005d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d58:	d103      	bne.n	8005d62 <xQueueGenericSend+0x182>
 8005d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d62:	f001 ff07 	bl	8007b74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d66:	1d3a      	adds	r2, r7, #4
 8005d68:	f107 0314 	add.w	r3, r7, #20
 8005d6c:	4611      	mov	r1, r2
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f001 f83c 	bl	8006dec <xTaskCheckForTimeOut>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d124      	bne.n	8005dc4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005d7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d7c:	f000 fa9e 	bl	80062bc <prvIsQueueFull>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d018      	beq.n	8005db8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d88:	3310      	adds	r3, #16
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	4611      	mov	r1, r2
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f000 ff02 	bl	8006b98 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005d94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d96:	f000 fa29 	bl	80061ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005d9a:	f000 fd37 	bl	800680c <xTaskResumeAll>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	f47f af7c 	bne.w	8005c9e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005da6:	4b0c      	ldr	r3, [pc, #48]	; (8005dd8 <xQueueGenericSend+0x1f8>)
 8005da8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dac:	601a      	str	r2, [r3, #0]
 8005dae:	f3bf 8f4f 	dsb	sy
 8005db2:	f3bf 8f6f 	isb	sy
 8005db6:	e772      	b.n	8005c9e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005db8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dba:	f000 fa17 	bl	80061ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005dbe:	f000 fd25 	bl	800680c <xTaskResumeAll>
 8005dc2:	e76c      	b.n	8005c9e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005dc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dc6:	f000 fa11 	bl	80061ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005dca:	f000 fd1f 	bl	800680c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005dce:	2300      	movs	r3, #0
		}
	}
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3738      	adds	r7, #56	; 0x38
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}
 8005dd8:	e000ed04 	.word	0xe000ed04

08005ddc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b08e      	sub	sp, #56	; 0x38
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	607a      	str	r2, [r7, #4]
 8005de8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d10a      	bne.n	8005e0a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df8:	f383 8811 	msr	BASEPRI, r3
 8005dfc:	f3bf 8f6f 	isb	sy
 8005e00:	f3bf 8f4f 	dsb	sy
 8005e04:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005e06:	bf00      	nop
 8005e08:	e7fe      	b.n	8005e08 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d103      	bne.n	8005e18 <xQueueGenericSendFromISR+0x3c>
 8005e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d101      	bne.n	8005e1c <xQueueGenericSendFromISR+0x40>
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e000      	b.n	8005e1e <xQueueGenericSendFromISR+0x42>
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d10a      	bne.n	8005e38 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e26:	f383 8811 	msr	BASEPRI, r3
 8005e2a:	f3bf 8f6f 	isb	sy
 8005e2e:	f3bf 8f4f 	dsb	sy
 8005e32:	623b      	str	r3, [r7, #32]
}
 8005e34:	bf00      	nop
 8005e36:	e7fe      	b.n	8005e36 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	2b02      	cmp	r3, #2
 8005e3c:	d103      	bne.n	8005e46 <xQueueGenericSendFromISR+0x6a>
 8005e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d101      	bne.n	8005e4a <xQueueGenericSendFromISR+0x6e>
 8005e46:	2301      	movs	r3, #1
 8005e48:	e000      	b.n	8005e4c <xQueueGenericSendFromISR+0x70>
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d10a      	bne.n	8005e66 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e54:	f383 8811 	msr	BASEPRI, r3
 8005e58:	f3bf 8f6f 	isb	sy
 8005e5c:	f3bf 8f4f 	dsb	sy
 8005e60:	61fb      	str	r3, [r7, #28]
}
 8005e62:	bf00      	nop
 8005e64:	e7fe      	b.n	8005e64 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005e66:	f001 ff37 	bl	8007cd8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005e6a:	f3ef 8211 	mrs	r2, BASEPRI
 8005e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e72:	f383 8811 	msr	BASEPRI, r3
 8005e76:	f3bf 8f6f 	isb	sy
 8005e7a:	f3bf 8f4f 	dsb	sy
 8005e7e:	61ba      	str	r2, [r7, #24]
 8005e80:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005e82:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005e84:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d302      	bcc.n	8005e98 <xQueueGenericSendFromISR+0xbc>
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	d12c      	bne.n	8005ef2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ea2:	683a      	ldr	r2, [r7, #0]
 8005ea4:	68b9      	ldr	r1, [r7, #8]
 8005ea6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ea8:	f000 f910 	bl	80060cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005eac:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eb4:	d112      	bne.n	8005edc <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d016      	beq.n	8005eec <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec0:	3324      	adds	r3, #36	; 0x24
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f000 feb8 	bl	8006c38 <xTaskRemoveFromEventList>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00e      	beq.n	8005eec <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d00b      	beq.n	8005eec <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	601a      	str	r2, [r3, #0]
 8005eda:	e007      	b.n	8005eec <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005edc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	b25a      	sxtb	r2, r3
 8005ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005eec:	2301      	movs	r3, #1
 8005eee:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005ef0:	e001      	b.n	8005ef6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	637b      	str	r3, [r7, #52]	; 0x34
 8005ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005f00:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3738      	adds	r7, #56	; 0x38
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b08c      	sub	sp, #48	; 0x30
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d10a      	bne.n	8005f3c <xQueueReceive+0x30>
	__asm volatile
 8005f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f2a:	f383 8811 	msr	BASEPRI, r3
 8005f2e:	f3bf 8f6f 	isb	sy
 8005f32:	f3bf 8f4f 	dsb	sy
 8005f36:	623b      	str	r3, [r7, #32]
}
 8005f38:	bf00      	nop
 8005f3a:	e7fe      	b.n	8005f3a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d103      	bne.n	8005f4a <xQueueReceive+0x3e>
 8005f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d101      	bne.n	8005f4e <xQueueReceive+0x42>
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e000      	b.n	8005f50 <xQueueReceive+0x44>
 8005f4e:	2300      	movs	r3, #0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d10a      	bne.n	8005f6a <xQueueReceive+0x5e>
	__asm volatile
 8005f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f58:	f383 8811 	msr	BASEPRI, r3
 8005f5c:	f3bf 8f6f 	isb	sy
 8005f60:	f3bf 8f4f 	dsb	sy
 8005f64:	61fb      	str	r3, [r7, #28]
}
 8005f66:	bf00      	nop
 8005f68:	e7fe      	b.n	8005f68 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f6a:	f001 f889 	bl	8007080 <xTaskGetSchedulerState>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d102      	bne.n	8005f7a <xQueueReceive+0x6e>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d101      	bne.n	8005f7e <xQueueReceive+0x72>
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e000      	b.n	8005f80 <xQueueReceive+0x74>
 8005f7e:	2300      	movs	r3, #0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d10a      	bne.n	8005f9a <xQueueReceive+0x8e>
	__asm volatile
 8005f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f88:	f383 8811 	msr	BASEPRI, r3
 8005f8c:	f3bf 8f6f 	isb	sy
 8005f90:	f3bf 8f4f 	dsb	sy
 8005f94:	61bb      	str	r3, [r7, #24]
}
 8005f96:	bf00      	nop
 8005f98:	e7fe      	b.n	8005f98 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f9a:	f001 fdbb 	bl	8007b14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d01f      	beq.n	8005fea <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005faa:	68b9      	ldr	r1, [r7, #8]
 8005fac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fae:	f000 f8f7 	bl	80061a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb4:	1e5a      	subs	r2, r3, #1
 8005fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fbc:	691b      	ldr	r3, [r3, #16]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d00f      	beq.n	8005fe2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc4:	3310      	adds	r3, #16
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f000 fe36 	bl	8006c38 <xTaskRemoveFromEventList>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d007      	beq.n	8005fe2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005fd2:	4b3d      	ldr	r3, [pc, #244]	; (80060c8 <xQueueReceive+0x1bc>)
 8005fd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fd8:	601a      	str	r2, [r3, #0]
 8005fda:	f3bf 8f4f 	dsb	sy
 8005fde:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005fe2:	f001 fdc7 	bl	8007b74 <vPortExitCritical>
				return pdPASS;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e069      	b.n	80060be <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d103      	bne.n	8005ff8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005ff0:	f001 fdc0 	bl	8007b74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	e062      	b.n	80060be <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d106      	bne.n	800600c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ffe:	f107 0310 	add.w	r3, r7, #16
 8006002:	4618      	mov	r0, r3
 8006004:	f000 fedc 	bl	8006dc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006008:	2301      	movs	r3, #1
 800600a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800600c:	f001 fdb2 	bl	8007b74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006010:	f000 fbee 	bl	80067f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006014:	f001 fd7e 	bl	8007b14 <vPortEnterCritical>
 8006018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800601e:	b25b      	sxtb	r3, r3
 8006020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006024:	d103      	bne.n	800602e <xQueueReceive+0x122>
 8006026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006028:	2200      	movs	r2, #0
 800602a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800602e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006030:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006034:	b25b      	sxtb	r3, r3
 8006036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800603a:	d103      	bne.n	8006044 <xQueueReceive+0x138>
 800603c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800603e:	2200      	movs	r2, #0
 8006040:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006044:	f001 fd96 	bl	8007b74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006048:	1d3a      	adds	r2, r7, #4
 800604a:	f107 0310 	add.w	r3, r7, #16
 800604e:	4611      	mov	r1, r2
 8006050:	4618      	mov	r0, r3
 8006052:	f000 fecb 	bl	8006dec <xTaskCheckForTimeOut>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d123      	bne.n	80060a4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800605c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800605e:	f000 f917 	bl	8006290 <prvIsQueueEmpty>
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d017      	beq.n	8006098 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606a:	3324      	adds	r3, #36	; 0x24
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	4611      	mov	r1, r2
 8006070:	4618      	mov	r0, r3
 8006072:	f000 fd91 	bl	8006b98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006076:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006078:	f000 f8b8 	bl	80061ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800607c:	f000 fbc6 	bl	800680c <xTaskResumeAll>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	d189      	bne.n	8005f9a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006086:	4b10      	ldr	r3, [pc, #64]	; (80060c8 <xQueueReceive+0x1bc>)
 8006088:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800608c:	601a      	str	r2, [r3, #0]
 800608e:	f3bf 8f4f 	dsb	sy
 8006092:	f3bf 8f6f 	isb	sy
 8006096:	e780      	b.n	8005f9a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006098:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800609a:	f000 f8a7 	bl	80061ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800609e:	f000 fbb5 	bl	800680c <xTaskResumeAll>
 80060a2:	e77a      	b.n	8005f9a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80060a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060a6:	f000 f8a1 	bl	80061ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80060aa:	f000 fbaf 	bl	800680c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060b0:	f000 f8ee 	bl	8006290 <prvIsQueueEmpty>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	f43f af6f 	beq.w	8005f9a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80060bc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3730      	adds	r7, #48	; 0x30
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	e000ed04 	.word	0xe000ed04

080060cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b086      	sub	sp, #24
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80060d8:	2300      	movs	r3, #0
 80060da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d10d      	bne.n	8006106 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d14d      	bne.n	800618e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	4618      	mov	r0, r3
 80060f8:	f000 ffe0 	bl	80070bc <xTaskPriorityDisinherit>
 80060fc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2200      	movs	r2, #0
 8006102:	605a      	str	r2, [r3, #4]
 8006104:	e043      	b.n	800618e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d119      	bne.n	8006140 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6898      	ldr	r0, [r3, #8]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006114:	461a      	mov	r2, r3
 8006116:	68b9      	ldr	r1, [r7, #8]
 8006118:	f002 f824 	bl	8008164 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	689a      	ldr	r2, [r3, #8]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006124:	441a      	add	r2, r3
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	689a      	ldr	r2, [r3, #8]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	429a      	cmp	r2, r3
 8006134:	d32b      	bcc.n	800618e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	609a      	str	r2, [r3, #8]
 800613e:	e026      	b.n	800618e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	68d8      	ldr	r0, [r3, #12]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006148:	461a      	mov	r2, r3
 800614a:	68b9      	ldr	r1, [r7, #8]
 800614c:	f002 f80a 	bl	8008164 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	68da      	ldr	r2, [r3, #12]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006158:	425b      	negs	r3, r3
 800615a:	441a      	add	r2, r3
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	68da      	ldr	r2, [r3, #12]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	429a      	cmp	r2, r3
 800616a:	d207      	bcs.n	800617c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	685a      	ldr	r2, [r3, #4]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006174:	425b      	negs	r3, r3
 8006176:	441a      	add	r2, r3
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2b02      	cmp	r3, #2
 8006180:	d105      	bne.n	800618e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d002      	beq.n	800618e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	3b01      	subs	r3, #1
 800618c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	1c5a      	adds	r2, r3, #1
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006196:	697b      	ldr	r3, [r7, #20]
}
 8006198:	4618      	mov	r0, r3
 800619a:	3718      	adds	r7, #24
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b082      	sub	sp, #8
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d018      	beq.n	80061e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	68da      	ldr	r2, [r3, #12]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ba:	441a      	add	r2, r3
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	68da      	ldr	r2, [r3, #12]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d303      	bcc.n	80061d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	68d9      	ldr	r1, [r3, #12]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061dc:	461a      	mov	r2, r3
 80061de:	6838      	ldr	r0, [r7, #0]
 80061e0:	f001 ffc0 	bl	8008164 <memcpy>
	}
}
 80061e4:	bf00      	nop
 80061e6:	3708      	adds	r7, #8
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80061f4:	f001 fc8e 	bl	8007b14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006200:	e011      	b.n	8006226 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006206:	2b00      	cmp	r3, #0
 8006208:	d012      	beq.n	8006230 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	3324      	adds	r3, #36	; 0x24
 800620e:	4618      	mov	r0, r3
 8006210:	f000 fd12 	bl	8006c38 <xTaskRemoveFromEventList>
 8006214:	4603      	mov	r3, r0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d001      	beq.n	800621e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800621a:	f000 fe49 	bl	8006eb0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800621e:	7bfb      	ldrb	r3, [r7, #15]
 8006220:	3b01      	subs	r3, #1
 8006222:	b2db      	uxtb	r3, r3
 8006224:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006226:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800622a:	2b00      	cmp	r3, #0
 800622c:	dce9      	bgt.n	8006202 <prvUnlockQueue+0x16>
 800622e:	e000      	b.n	8006232 <prvUnlockQueue+0x46>
					break;
 8006230:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	22ff      	movs	r2, #255	; 0xff
 8006236:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800623a:	f001 fc9b 	bl	8007b74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800623e:	f001 fc69 	bl	8007b14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006248:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800624a:	e011      	b.n	8006270 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	691b      	ldr	r3, [r3, #16]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d012      	beq.n	800627a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	3310      	adds	r3, #16
 8006258:	4618      	mov	r0, r3
 800625a:	f000 fced 	bl	8006c38 <xTaskRemoveFromEventList>
 800625e:	4603      	mov	r3, r0
 8006260:	2b00      	cmp	r3, #0
 8006262:	d001      	beq.n	8006268 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006264:	f000 fe24 	bl	8006eb0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006268:	7bbb      	ldrb	r3, [r7, #14]
 800626a:	3b01      	subs	r3, #1
 800626c:	b2db      	uxtb	r3, r3
 800626e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006270:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006274:	2b00      	cmp	r3, #0
 8006276:	dce9      	bgt.n	800624c <prvUnlockQueue+0x60>
 8006278:	e000      	b.n	800627c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800627a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	22ff      	movs	r2, #255	; 0xff
 8006280:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006284:	f001 fc76 	bl	8007b74 <vPortExitCritical>
}
 8006288:	bf00      	nop
 800628a:	3710      	adds	r7, #16
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006298:	f001 fc3c 	bl	8007b14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d102      	bne.n	80062aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80062a4:	2301      	movs	r3, #1
 80062a6:	60fb      	str	r3, [r7, #12]
 80062a8:	e001      	b.n	80062ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80062aa:	2300      	movs	r3, #0
 80062ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80062ae:	f001 fc61 	bl	8007b74 <vPortExitCritical>

	return xReturn;
 80062b2:	68fb      	ldr	r3, [r7, #12]
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3710      	adds	r7, #16
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80062c4:	f001 fc26 	bl	8007b14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d102      	bne.n	80062da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80062d4:	2301      	movs	r3, #1
 80062d6:	60fb      	str	r3, [r7, #12]
 80062d8:	e001      	b.n	80062de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80062da:	2300      	movs	r3, #0
 80062dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80062de:	f001 fc49 	bl	8007b74 <vPortExitCritical>

	return xReturn;
 80062e2:	68fb      	ldr	r3, [r7, #12]
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3710      	adds	r7, #16
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80062ec:	b480      	push	{r7}
 80062ee:	b085      	sub	sp, #20
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80062f6:	2300      	movs	r3, #0
 80062f8:	60fb      	str	r3, [r7, #12]
 80062fa:	e014      	b.n	8006326 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80062fc:	4a0f      	ldr	r2, [pc, #60]	; (800633c <vQueueAddToRegistry+0x50>)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d10b      	bne.n	8006320 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006308:	490c      	ldr	r1, [pc, #48]	; (800633c <vQueueAddToRegistry+0x50>)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	683a      	ldr	r2, [r7, #0]
 800630e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006312:	4a0a      	ldr	r2, [pc, #40]	; (800633c <vQueueAddToRegistry+0x50>)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	00db      	lsls	r3, r3, #3
 8006318:	4413      	add	r3, r2
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800631e:	e006      	b.n	800632e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	3301      	adds	r3, #1
 8006324:	60fb      	str	r3, [r7, #12]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2b07      	cmp	r3, #7
 800632a:	d9e7      	bls.n	80062fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800632c:	bf00      	nop
 800632e:	bf00      	nop
 8006330:	3714      	adds	r7, #20
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop
 800633c:	20000984 	.word	0x20000984

08006340 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006340:	b580      	push	{r7, lr}
 8006342:	b086      	sub	sp, #24
 8006344:	af00      	add	r7, sp, #0
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006350:	f001 fbe0 	bl	8007b14 <vPortEnterCritical>
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800635a:	b25b      	sxtb	r3, r3
 800635c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006360:	d103      	bne.n	800636a <vQueueWaitForMessageRestricted+0x2a>
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	2200      	movs	r2, #0
 8006366:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006370:	b25b      	sxtb	r3, r3
 8006372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006376:	d103      	bne.n	8006380 <vQueueWaitForMessageRestricted+0x40>
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	2200      	movs	r2, #0
 800637c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006380:	f001 fbf8 	bl	8007b74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006388:	2b00      	cmp	r3, #0
 800638a:	d106      	bne.n	800639a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	3324      	adds	r3, #36	; 0x24
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	68b9      	ldr	r1, [r7, #8]
 8006394:	4618      	mov	r0, r3
 8006396:	f000 fc23 	bl	8006be0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800639a:	6978      	ldr	r0, [r7, #20]
 800639c:	f7ff ff26 	bl	80061ec <prvUnlockQueue>
	}
 80063a0:	bf00      	nop
 80063a2:	3718      	adds	r7, #24
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b08e      	sub	sp, #56	; 0x38
 80063ac:	af04      	add	r7, sp, #16
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	60b9      	str	r1, [r7, #8]
 80063b2:	607a      	str	r2, [r7, #4]
 80063b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80063b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d10a      	bne.n	80063d2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80063bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c0:	f383 8811 	msr	BASEPRI, r3
 80063c4:	f3bf 8f6f 	isb	sy
 80063c8:	f3bf 8f4f 	dsb	sy
 80063cc:	623b      	str	r3, [r7, #32]
}
 80063ce:	bf00      	nop
 80063d0:	e7fe      	b.n	80063d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80063d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d10a      	bne.n	80063ee <xTaskCreateStatic+0x46>
	__asm volatile
 80063d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063dc:	f383 8811 	msr	BASEPRI, r3
 80063e0:	f3bf 8f6f 	isb	sy
 80063e4:	f3bf 8f4f 	dsb	sy
 80063e8:	61fb      	str	r3, [r7, #28]
}
 80063ea:	bf00      	nop
 80063ec:	e7fe      	b.n	80063ec <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80063ee:	2358      	movs	r3, #88	; 0x58
 80063f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	2b58      	cmp	r3, #88	; 0x58
 80063f6:	d00a      	beq.n	800640e <xTaskCreateStatic+0x66>
	__asm volatile
 80063f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fc:	f383 8811 	msr	BASEPRI, r3
 8006400:	f3bf 8f6f 	isb	sy
 8006404:	f3bf 8f4f 	dsb	sy
 8006408:	61bb      	str	r3, [r7, #24]
}
 800640a:	bf00      	nop
 800640c:	e7fe      	b.n	800640c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800640e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006410:	2b00      	cmp	r3, #0
 8006412:	d01e      	beq.n	8006452 <xTaskCreateStatic+0xaa>
 8006414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006416:	2b00      	cmp	r3, #0
 8006418:	d01b      	beq.n	8006452 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800641a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800641c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800641e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006420:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006422:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006426:	2202      	movs	r2, #2
 8006428:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800642c:	2300      	movs	r3, #0
 800642e:	9303      	str	r3, [sp, #12]
 8006430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006432:	9302      	str	r3, [sp, #8]
 8006434:	f107 0314 	add.w	r3, r7, #20
 8006438:	9301      	str	r3, [sp, #4]
 800643a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643c:	9300      	str	r3, [sp, #0]
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	68b9      	ldr	r1, [r7, #8]
 8006444:	68f8      	ldr	r0, [r7, #12]
 8006446:	f000 f850 	bl	80064ea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800644a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800644c:	f000 f8cc 	bl	80065e8 <prvAddNewTaskToReadyList>
 8006450:	e001      	b.n	8006456 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8006452:	2300      	movs	r3, #0
 8006454:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006456:	697b      	ldr	r3, [r7, #20]
	}
 8006458:	4618      	mov	r0, r3
 800645a:	3728      	adds	r7, #40	; 0x28
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006460:	b580      	push	{r7, lr}
 8006462:	b08c      	sub	sp, #48	; 0x30
 8006464:	af04      	add	r7, sp, #16
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	603b      	str	r3, [r7, #0]
 800646c:	4613      	mov	r3, r2
 800646e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006470:	88fb      	ldrh	r3, [r7, #6]
 8006472:	009b      	lsls	r3, r3, #2
 8006474:	4618      	mov	r0, r3
 8006476:	f001 fc6f 	bl	8007d58 <pvPortMalloc>
 800647a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00e      	beq.n	80064a0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006482:	2058      	movs	r0, #88	; 0x58
 8006484:	f001 fc68 	bl	8007d58 <pvPortMalloc>
 8006488:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d003      	beq.n	8006498 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	697a      	ldr	r2, [r7, #20]
 8006494:	631a      	str	r2, [r3, #48]	; 0x30
 8006496:	e005      	b.n	80064a4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006498:	6978      	ldr	r0, [r7, #20]
 800649a:	f001 fd21 	bl	8007ee0 <vPortFree>
 800649e:	e001      	b.n	80064a4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80064a0:	2300      	movs	r3, #0
 80064a2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d017      	beq.n	80064da <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80064b2:	88fa      	ldrh	r2, [r7, #6]
 80064b4:	2300      	movs	r3, #0
 80064b6:	9303      	str	r3, [sp, #12]
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	9302      	str	r3, [sp, #8]
 80064bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064be:	9301      	str	r3, [sp, #4]
 80064c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c2:	9300      	str	r3, [sp, #0]
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	68b9      	ldr	r1, [r7, #8]
 80064c8:	68f8      	ldr	r0, [r7, #12]
 80064ca:	f000 f80e 	bl	80064ea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80064ce:	69f8      	ldr	r0, [r7, #28]
 80064d0:	f000 f88a 	bl	80065e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80064d4:	2301      	movs	r3, #1
 80064d6:	61bb      	str	r3, [r7, #24]
 80064d8:	e002      	b.n	80064e0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80064da:	f04f 33ff 	mov.w	r3, #4294967295
 80064de:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80064e0:	69bb      	ldr	r3, [r7, #24]
	}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3720      	adds	r7, #32
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}

080064ea <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80064ea:	b580      	push	{r7, lr}
 80064ec:	b088      	sub	sp, #32
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	60f8      	str	r0, [r7, #12]
 80064f2:	60b9      	str	r1, [r7, #8]
 80064f4:	607a      	str	r2, [r7, #4]
 80064f6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80064f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006502:	3b01      	subs	r3, #1
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	4413      	add	r3, r2
 8006508:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	f023 0307 	bic.w	r3, r3, #7
 8006510:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	f003 0307 	and.w	r3, r3, #7
 8006518:	2b00      	cmp	r3, #0
 800651a:	d00a      	beq.n	8006532 <prvInitialiseNewTask+0x48>
	__asm volatile
 800651c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006520:	f383 8811 	msr	BASEPRI, r3
 8006524:	f3bf 8f6f 	isb	sy
 8006528:	f3bf 8f4f 	dsb	sy
 800652c:	617b      	str	r3, [r7, #20]
}
 800652e:	bf00      	nop
 8006530:	e7fe      	b.n	8006530 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006532:	2300      	movs	r3, #0
 8006534:	61fb      	str	r3, [r7, #28]
 8006536:	e012      	b.n	800655e <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006538:	68ba      	ldr	r2, [r7, #8]
 800653a:	69fb      	ldr	r3, [r7, #28]
 800653c:	4413      	add	r3, r2
 800653e:	7819      	ldrb	r1, [r3, #0]
 8006540:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	4413      	add	r3, r2
 8006546:	3334      	adds	r3, #52	; 0x34
 8006548:	460a      	mov	r2, r1
 800654a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800654c:	68ba      	ldr	r2, [r7, #8]
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	4413      	add	r3, r2
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d006      	beq.n	8006566 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	3301      	adds	r3, #1
 800655c:	61fb      	str	r3, [r7, #28]
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	2b11      	cmp	r3, #17
 8006562:	d9e9      	bls.n	8006538 <prvInitialiseNewTask+0x4e>
 8006564:	e000      	b.n	8006568 <prvInitialiseNewTask+0x7e>
		{
			break;
 8006566:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800656a:	2200      	movs	r2, #0
 800656c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006572:	2b06      	cmp	r3, #6
 8006574:	d901      	bls.n	800657a <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006576:	2306      	movs	r3, #6
 8006578:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800657a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800657e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006582:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006584:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8006586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006588:	2200      	movs	r2, #0
 800658a:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800658c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800658e:	3304      	adds	r3, #4
 8006590:	4618      	mov	r0, r3
 8006592:	f7ff f992 	bl	80058ba <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006598:	3318      	adds	r3, #24
 800659a:	4618      	mov	r0, r3
 800659c:	f7ff f98d 	bl	80058ba <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80065a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065a4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a8:	f1c3 0207 	rsb	r2, r3, #7
 80065ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80065b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065b4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80065b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b8:	2200      	movs	r2, #0
 80065ba:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80065bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065be:	2200      	movs	r2, #0
 80065c0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80065c4:	683a      	ldr	r2, [r7, #0]
 80065c6:	68f9      	ldr	r1, [r7, #12]
 80065c8:	69b8      	ldr	r0, [r7, #24]
 80065ca:	f001 f975 	bl	80078b8 <pxPortInitialiseStack>
 80065ce:	4602      	mov	r2, r0
 80065d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80065d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d002      	beq.n	80065e0 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80065da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065de:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80065e0:	bf00      	nop
 80065e2:	3720      	adds	r7, #32
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80065f0:	f001 fa90 	bl	8007b14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80065f4:	4b2a      	ldr	r3, [pc, #168]	; (80066a0 <prvAddNewTaskToReadyList+0xb8>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	3301      	adds	r3, #1
 80065fa:	4a29      	ldr	r2, [pc, #164]	; (80066a0 <prvAddNewTaskToReadyList+0xb8>)
 80065fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80065fe:	4b29      	ldr	r3, [pc, #164]	; (80066a4 <prvAddNewTaskToReadyList+0xbc>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d109      	bne.n	800661a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006606:	4a27      	ldr	r2, [pc, #156]	; (80066a4 <prvAddNewTaskToReadyList+0xbc>)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800660c:	4b24      	ldr	r3, [pc, #144]	; (80066a0 <prvAddNewTaskToReadyList+0xb8>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	2b01      	cmp	r3, #1
 8006612:	d110      	bne.n	8006636 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006614:	f000 fc70 	bl	8006ef8 <prvInitialiseTaskLists>
 8006618:	e00d      	b.n	8006636 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800661a:	4b23      	ldr	r3, [pc, #140]	; (80066a8 <prvAddNewTaskToReadyList+0xc0>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d109      	bne.n	8006636 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006622:	4b20      	ldr	r3, [pc, #128]	; (80066a4 <prvAddNewTaskToReadyList+0xbc>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800662c:	429a      	cmp	r2, r3
 800662e:	d802      	bhi.n	8006636 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006630:	4a1c      	ldr	r2, [pc, #112]	; (80066a4 <prvAddNewTaskToReadyList+0xbc>)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006636:	4b1d      	ldr	r3, [pc, #116]	; (80066ac <prvAddNewTaskToReadyList+0xc4>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	3301      	adds	r3, #1
 800663c:	4a1b      	ldr	r2, [pc, #108]	; (80066ac <prvAddNewTaskToReadyList+0xc4>)
 800663e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006644:	2201      	movs	r2, #1
 8006646:	409a      	lsls	r2, r3
 8006648:	4b19      	ldr	r3, [pc, #100]	; (80066b0 <prvAddNewTaskToReadyList+0xc8>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4313      	orrs	r3, r2
 800664e:	4a18      	ldr	r2, [pc, #96]	; (80066b0 <prvAddNewTaskToReadyList+0xc8>)
 8006650:	6013      	str	r3, [r2, #0]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006656:	4613      	mov	r3, r2
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	4413      	add	r3, r2
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	4a15      	ldr	r2, [pc, #84]	; (80066b4 <prvAddNewTaskToReadyList+0xcc>)
 8006660:	441a      	add	r2, r3
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	3304      	adds	r3, #4
 8006666:	4619      	mov	r1, r3
 8006668:	4610      	mov	r0, r2
 800666a:	f7ff f933 	bl	80058d4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800666e:	f001 fa81 	bl	8007b74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006672:	4b0d      	ldr	r3, [pc, #52]	; (80066a8 <prvAddNewTaskToReadyList+0xc0>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00e      	beq.n	8006698 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800667a:	4b0a      	ldr	r3, [pc, #40]	; (80066a4 <prvAddNewTaskToReadyList+0xbc>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006684:	429a      	cmp	r2, r3
 8006686:	d207      	bcs.n	8006698 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006688:	4b0b      	ldr	r3, [pc, #44]	; (80066b8 <prvAddNewTaskToReadyList+0xd0>)
 800668a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800668e:	601a      	str	r2, [r3, #0]
 8006690:	f3bf 8f4f 	dsb	sy
 8006694:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006698:	bf00      	nop
 800669a:	3708      	adds	r7, #8
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}
 80066a0:	20000ac4 	.word	0x20000ac4
 80066a4:	200009c4 	.word	0x200009c4
 80066a8:	20000ad0 	.word	0x20000ad0
 80066ac:	20000ae0 	.word	0x20000ae0
 80066b0:	20000acc 	.word	0x20000acc
 80066b4:	200009c8 	.word	0x200009c8
 80066b8:	e000ed04 	.word	0xe000ed04

080066bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80066c4:	2300      	movs	r3, #0
 80066c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d017      	beq.n	80066fe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80066ce:	4b13      	ldr	r3, [pc, #76]	; (800671c <vTaskDelay+0x60>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d00a      	beq.n	80066ec <vTaskDelay+0x30>
	__asm volatile
 80066d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066da:	f383 8811 	msr	BASEPRI, r3
 80066de:	f3bf 8f6f 	isb	sy
 80066e2:	f3bf 8f4f 	dsb	sy
 80066e6:	60bb      	str	r3, [r7, #8]
}
 80066e8:	bf00      	nop
 80066ea:	e7fe      	b.n	80066ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80066ec:	f000 f880 	bl	80067f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80066f0:	2100      	movs	r1, #0
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 fd68 	bl	80071c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80066f8:	f000 f888 	bl	800680c <xTaskResumeAll>
 80066fc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d107      	bne.n	8006714 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006704:	4b06      	ldr	r3, [pc, #24]	; (8006720 <vTaskDelay+0x64>)
 8006706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800670a:	601a      	str	r2, [r3, #0]
 800670c:	f3bf 8f4f 	dsb	sy
 8006710:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006714:	bf00      	nop
 8006716:	3710      	adds	r7, #16
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}
 800671c:	20000aec 	.word	0x20000aec
 8006720:	e000ed04 	.word	0xe000ed04

08006724 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b08a      	sub	sp, #40	; 0x28
 8006728:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800672a:	2300      	movs	r3, #0
 800672c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800672e:	2300      	movs	r3, #0
 8006730:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006732:	463a      	mov	r2, r7
 8006734:	1d39      	adds	r1, r7, #4
 8006736:	f107 0308 	add.w	r3, r7, #8
 800673a:	4618      	mov	r0, r3
 800673c:	f7f9 fd8e 	bl	800025c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006740:	6839      	ldr	r1, [r7, #0]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	68ba      	ldr	r2, [r7, #8]
 8006746:	9202      	str	r2, [sp, #8]
 8006748:	9301      	str	r3, [sp, #4]
 800674a:	2300      	movs	r3, #0
 800674c:	9300      	str	r3, [sp, #0]
 800674e:	2300      	movs	r3, #0
 8006750:	460a      	mov	r2, r1
 8006752:	4921      	ldr	r1, [pc, #132]	; (80067d8 <vTaskStartScheduler+0xb4>)
 8006754:	4821      	ldr	r0, [pc, #132]	; (80067dc <vTaskStartScheduler+0xb8>)
 8006756:	f7ff fe27 	bl	80063a8 <xTaskCreateStatic>
 800675a:	4603      	mov	r3, r0
 800675c:	4a20      	ldr	r2, [pc, #128]	; (80067e0 <vTaskStartScheduler+0xbc>)
 800675e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006760:	4b1f      	ldr	r3, [pc, #124]	; (80067e0 <vTaskStartScheduler+0xbc>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d002      	beq.n	800676e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006768:	2301      	movs	r3, #1
 800676a:	617b      	str	r3, [r7, #20]
 800676c:	e001      	b.n	8006772 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800676e:	2300      	movs	r3, #0
 8006770:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	2b01      	cmp	r3, #1
 8006776:	d102      	bne.n	800677e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006778:	f000 fd8c 	bl	8007294 <xTimerCreateTimerTask>
 800677c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	2b01      	cmp	r3, #1
 8006782:	d116      	bne.n	80067b2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006788:	f383 8811 	msr	BASEPRI, r3
 800678c:	f3bf 8f6f 	isb	sy
 8006790:	f3bf 8f4f 	dsb	sy
 8006794:	613b      	str	r3, [r7, #16]
}
 8006796:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006798:	4b12      	ldr	r3, [pc, #72]	; (80067e4 <vTaskStartScheduler+0xc0>)
 800679a:	f04f 32ff 	mov.w	r2, #4294967295
 800679e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80067a0:	4b11      	ldr	r3, [pc, #68]	; (80067e8 <vTaskStartScheduler+0xc4>)
 80067a2:	2201      	movs	r2, #1
 80067a4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80067a6:	4b11      	ldr	r3, [pc, #68]	; (80067ec <vTaskStartScheduler+0xc8>)
 80067a8:	2200      	movs	r2, #0
 80067aa:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80067ac:	f001 f910 	bl	80079d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80067b0:	e00e      	b.n	80067d0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b8:	d10a      	bne.n	80067d0 <vTaskStartScheduler+0xac>
	__asm volatile
 80067ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067be:	f383 8811 	msr	BASEPRI, r3
 80067c2:	f3bf 8f6f 	isb	sy
 80067c6:	f3bf 8f4f 	dsb	sy
 80067ca:	60fb      	str	r3, [r7, #12]
}
 80067cc:	bf00      	nop
 80067ce:	e7fe      	b.n	80067ce <vTaskStartScheduler+0xaa>
}
 80067d0:	bf00      	nop
 80067d2:	3718      	adds	r7, #24
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	08008364 	.word	0x08008364
 80067dc:	08006ec9 	.word	0x08006ec9
 80067e0:	20000ae8 	.word	0x20000ae8
 80067e4:	20000ae4 	.word	0x20000ae4
 80067e8:	20000ad0 	.word	0x20000ad0
 80067ec:	20000ac8 	.word	0x20000ac8

080067f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80067f0:	b480      	push	{r7}
 80067f2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80067f4:	4b04      	ldr	r3, [pc, #16]	; (8006808 <vTaskSuspendAll+0x18>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	3301      	adds	r3, #1
 80067fa:	4a03      	ldr	r2, [pc, #12]	; (8006808 <vTaskSuspendAll+0x18>)
 80067fc:	6013      	str	r3, [r2, #0]
}
 80067fe:	bf00      	nop
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr
 8006808:	20000aec 	.word	0x20000aec

0800680c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006812:	2300      	movs	r3, #0
 8006814:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006816:	2300      	movs	r3, #0
 8006818:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800681a:	4b41      	ldr	r3, [pc, #260]	; (8006920 <xTaskResumeAll+0x114>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d10a      	bne.n	8006838 <xTaskResumeAll+0x2c>
	__asm volatile
 8006822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006826:	f383 8811 	msr	BASEPRI, r3
 800682a:	f3bf 8f6f 	isb	sy
 800682e:	f3bf 8f4f 	dsb	sy
 8006832:	603b      	str	r3, [r7, #0]
}
 8006834:	bf00      	nop
 8006836:	e7fe      	b.n	8006836 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006838:	f001 f96c 	bl	8007b14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800683c:	4b38      	ldr	r3, [pc, #224]	; (8006920 <xTaskResumeAll+0x114>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	3b01      	subs	r3, #1
 8006842:	4a37      	ldr	r2, [pc, #220]	; (8006920 <xTaskResumeAll+0x114>)
 8006844:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006846:	4b36      	ldr	r3, [pc, #216]	; (8006920 <xTaskResumeAll+0x114>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d161      	bne.n	8006912 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800684e:	4b35      	ldr	r3, [pc, #212]	; (8006924 <xTaskResumeAll+0x118>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d05d      	beq.n	8006912 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006856:	e02e      	b.n	80068b6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006858:	4b33      	ldr	r3, [pc, #204]	; (8006928 <xTaskResumeAll+0x11c>)
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	3318      	adds	r3, #24
 8006864:	4618      	mov	r0, r3
 8006866:	f7ff f892 	bl	800598e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	3304      	adds	r3, #4
 800686e:	4618      	mov	r0, r3
 8006870:	f7ff f88d 	bl	800598e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006878:	2201      	movs	r2, #1
 800687a:	409a      	lsls	r2, r3
 800687c:	4b2b      	ldr	r3, [pc, #172]	; (800692c <xTaskResumeAll+0x120>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4313      	orrs	r3, r2
 8006882:	4a2a      	ldr	r2, [pc, #168]	; (800692c <xTaskResumeAll+0x120>)
 8006884:	6013      	str	r3, [r2, #0]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800688a:	4613      	mov	r3, r2
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	4413      	add	r3, r2
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	4a27      	ldr	r2, [pc, #156]	; (8006930 <xTaskResumeAll+0x124>)
 8006894:	441a      	add	r2, r3
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	3304      	adds	r3, #4
 800689a:	4619      	mov	r1, r3
 800689c:	4610      	mov	r0, r2
 800689e:	f7ff f819 	bl	80058d4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068a6:	4b23      	ldr	r3, [pc, #140]	; (8006934 <xTaskResumeAll+0x128>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d302      	bcc.n	80068b6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80068b0:	4b21      	ldr	r3, [pc, #132]	; (8006938 <xTaskResumeAll+0x12c>)
 80068b2:	2201      	movs	r2, #1
 80068b4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80068b6:	4b1c      	ldr	r3, [pc, #112]	; (8006928 <xTaskResumeAll+0x11c>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d1cc      	bne.n	8006858 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d001      	beq.n	80068c8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80068c4:	f000 fbb6 	bl	8007034 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80068c8:	4b1c      	ldr	r3, [pc, #112]	; (800693c <xTaskResumeAll+0x130>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d010      	beq.n	80068f6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80068d4:	f000 f846 	bl	8006964 <xTaskIncrementTick>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d002      	beq.n	80068e4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80068de:	4b16      	ldr	r3, [pc, #88]	; (8006938 <xTaskResumeAll+0x12c>)
 80068e0:	2201      	movs	r2, #1
 80068e2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	3b01      	subs	r3, #1
 80068e8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d1f1      	bne.n	80068d4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80068f0:	4b12      	ldr	r3, [pc, #72]	; (800693c <xTaskResumeAll+0x130>)
 80068f2:	2200      	movs	r2, #0
 80068f4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80068f6:	4b10      	ldr	r3, [pc, #64]	; (8006938 <xTaskResumeAll+0x12c>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d009      	beq.n	8006912 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80068fe:	2301      	movs	r3, #1
 8006900:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006902:	4b0f      	ldr	r3, [pc, #60]	; (8006940 <xTaskResumeAll+0x134>)
 8006904:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006908:	601a      	str	r2, [r3, #0]
 800690a:	f3bf 8f4f 	dsb	sy
 800690e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006912:	f001 f92f 	bl	8007b74 <vPortExitCritical>

	return xAlreadyYielded;
 8006916:	68bb      	ldr	r3, [r7, #8]
}
 8006918:	4618      	mov	r0, r3
 800691a:	3710      	adds	r7, #16
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}
 8006920:	20000aec 	.word	0x20000aec
 8006924:	20000ac4 	.word	0x20000ac4
 8006928:	20000a84 	.word	0x20000a84
 800692c:	20000acc 	.word	0x20000acc
 8006930:	200009c8 	.word	0x200009c8
 8006934:	200009c4 	.word	0x200009c4
 8006938:	20000ad8 	.word	0x20000ad8
 800693c:	20000ad4 	.word	0x20000ad4
 8006940:	e000ed04 	.word	0xe000ed04

08006944 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006944:	b480      	push	{r7}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800694a:	4b05      	ldr	r3, [pc, #20]	; (8006960 <xTaskGetTickCount+0x1c>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006950:	687b      	ldr	r3, [r7, #4]
}
 8006952:	4618      	mov	r0, r3
 8006954:	370c      	adds	r7, #12
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr
 800695e:	bf00      	nop
 8006960:	20000ac8 	.word	0x20000ac8

08006964 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b086      	sub	sp, #24
 8006968:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800696a:	2300      	movs	r3, #0
 800696c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800696e:	4b51      	ldr	r3, [pc, #324]	; (8006ab4 <xTaskIncrementTick+0x150>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2b00      	cmp	r3, #0
 8006974:	f040 808d 	bne.w	8006a92 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006978:	4b4f      	ldr	r3, [pc, #316]	; (8006ab8 <xTaskIncrementTick+0x154>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	3301      	adds	r3, #1
 800697e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006980:	4a4d      	ldr	r2, [pc, #308]	; (8006ab8 <xTaskIncrementTick+0x154>)
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d120      	bne.n	80069ce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800698c:	4b4b      	ldr	r3, [pc, #300]	; (8006abc <xTaskIncrementTick+0x158>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d00a      	beq.n	80069ac <xTaskIncrementTick+0x48>
	__asm volatile
 8006996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800699a:	f383 8811 	msr	BASEPRI, r3
 800699e:	f3bf 8f6f 	isb	sy
 80069a2:	f3bf 8f4f 	dsb	sy
 80069a6:	603b      	str	r3, [r7, #0]
}
 80069a8:	bf00      	nop
 80069aa:	e7fe      	b.n	80069aa <xTaskIncrementTick+0x46>
 80069ac:	4b43      	ldr	r3, [pc, #268]	; (8006abc <xTaskIncrementTick+0x158>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	60fb      	str	r3, [r7, #12]
 80069b2:	4b43      	ldr	r3, [pc, #268]	; (8006ac0 <xTaskIncrementTick+0x15c>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a41      	ldr	r2, [pc, #260]	; (8006abc <xTaskIncrementTick+0x158>)
 80069b8:	6013      	str	r3, [r2, #0]
 80069ba:	4a41      	ldr	r2, [pc, #260]	; (8006ac0 <xTaskIncrementTick+0x15c>)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6013      	str	r3, [r2, #0]
 80069c0:	4b40      	ldr	r3, [pc, #256]	; (8006ac4 <xTaskIncrementTick+0x160>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	3301      	adds	r3, #1
 80069c6:	4a3f      	ldr	r2, [pc, #252]	; (8006ac4 <xTaskIncrementTick+0x160>)
 80069c8:	6013      	str	r3, [r2, #0]
 80069ca:	f000 fb33 	bl	8007034 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80069ce:	4b3e      	ldr	r3, [pc, #248]	; (8006ac8 <xTaskIncrementTick+0x164>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	693a      	ldr	r2, [r7, #16]
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d34d      	bcc.n	8006a74 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069d8:	4b38      	ldr	r3, [pc, #224]	; (8006abc <xTaskIncrementTick+0x158>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d101      	bne.n	80069e6 <xTaskIncrementTick+0x82>
 80069e2:	2301      	movs	r3, #1
 80069e4:	e000      	b.n	80069e8 <xTaskIncrementTick+0x84>
 80069e6:	2300      	movs	r3, #0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d004      	beq.n	80069f6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069ec:	4b36      	ldr	r3, [pc, #216]	; (8006ac8 <xTaskIncrementTick+0x164>)
 80069ee:	f04f 32ff 	mov.w	r2, #4294967295
 80069f2:	601a      	str	r2, [r3, #0]
					break;
 80069f4:	e03e      	b.n	8006a74 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80069f6:	4b31      	ldr	r3, [pc, #196]	; (8006abc <xTaskIncrementTick+0x158>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006a06:	693a      	ldr	r2, [r7, #16]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d203      	bcs.n	8006a16 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006a0e:	4a2e      	ldr	r2, [pc, #184]	; (8006ac8 <xTaskIncrementTick+0x164>)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6013      	str	r3, [r2, #0]
						break;
 8006a14:	e02e      	b.n	8006a74 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	3304      	adds	r3, #4
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f7fe ffb7 	bl	800598e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d004      	beq.n	8006a32 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	3318      	adds	r3, #24
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f7fe ffae 	bl	800598e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a36:	2201      	movs	r2, #1
 8006a38:	409a      	lsls	r2, r3
 8006a3a:	4b24      	ldr	r3, [pc, #144]	; (8006acc <xTaskIncrementTick+0x168>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	4a22      	ldr	r2, [pc, #136]	; (8006acc <xTaskIncrementTick+0x168>)
 8006a42:	6013      	str	r3, [r2, #0]
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a48:	4613      	mov	r3, r2
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	4413      	add	r3, r2
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	4a1f      	ldr	r2, [pc, #124]	; (8006ad0 <xTaskIncrementTick+0x16c>)
 8006a52:	441a      	add	r2, r3
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	3304      	adds	r3, #4
 8006a58:	4619      	mov	r1, r3
 8006a5a:	4610      	mov	r0, r2
 8006a5c:	f7fe ff3a 	bl	80058d4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a64:	4b1b      	ldr	r3, [pc, #108]	; (8006ad4 <xTaskIncrementTick+0x170>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d3b4      	bcc.n	80069d8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a72:	e7b1      	b.n	80069d8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006a74:	4b17      	ldr	r3, [pc, #92]	; (8006ad4 <xTaskIncrementTick+0x170>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a7a:	4915      	ldr	r1, [pc, #84]	; (8006ad0 <xTaskIncrementTick+0x16c>)
 8006a7c:	4613      	mov	r3, r2
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	4413      	add	r3, r2
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	440b      	add	r3, r1
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d907      	bls.n	8006a9c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	617b      	str	r3, [r7, #20]
 8006a90:	e004      	b.n	8006a9c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006a92:	4b11      	ldr	r3, [pc, #68]	; (8006ad8 <xTaskIncrementTick+0x174>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	3301      	adds	r3, #1
 8006a98:	4a0f      	ldr	r2, [pc, #60]	; (8006ad8 <xTaskIncrementTick+0x174>)
 8006a9a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006a9c:	4b0f      	ldr	r3, [pc, #60]	; (8006adc <xTaskIncrementTick+0x178>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d001      	beq.n	8006aa8 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006aa8:	697b      	ldr	r3, [r7, #20]
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3718      	adds	r7, #24
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	bf00      	nop
 8006ab4:	20000aec 	.word	0x20000aec
 8006ab8:	20000ac8 	.word	0x20000ac8
 8006abc:	20000a7c 	.word	0x20000a7c
 8006ac0:	20000a80 	.word	0x20000a80
 8006ac4:	20000adc 	.word	0x20000adc
 8006ac8:	20000ae4 	.word	0x20000ae4
 8006acc:	20000acc 	.word	0x20000acc
 8006ad0:	200009c8 	.word	0x200009c8
 8006ad4:	200009c4 	.word	0x200009c4
 8006ad8:	20000ad4 	.word	0x20000ad4
 8006adc:	20000ad8 	.word	0x20000ad8

08006ae0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b087      	sub	sp, #28
 8006ae4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006ae6:	4b27      	ldr	r3, [pc, #156]	; (8006b84 <vTaskSwitchContext+0xa4>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d003      	beq.n	8006af6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006aee:	4b26      	ldr	r3, [pc, #152]	; (8006b88 <vTaskSwitchContext+0xa8>)
 8006af0:	2201      	movs	r2, #1
 8006af2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006af4:	e03f      	b.n	8006b76 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8006af6:	4b24      	ldr	r3, [pc, #144]	; (8006b88 <vTaskSwitchContext+0xa8>)
 8006af8:	2200      	movs	r2, #0
 8006afa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006afc:	4b23      	ldr	r3, [pc, #140]	; (8006b8c <vTaskSwitchContext+0xac>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	fab3 f383 	clz	r3, r3
 8006b08:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006b0a:	7afb      	ldrb	r3, [r7, #11]
 8006b0c:	f1c3 031f 	rsb	r3, r3, #31
 8006b10:	617b      	str	r3, [r7, #20]
 8006b12:	491f      	ldr	r1, [pc, #124]	; (8006b90 <vTaskSwitchContext+0xb0>)
 8006b14:	697a      	ldr	r2, [r7, #20]
 8006b16:	4613      	mov	r3, r2
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	4413      	add	r3, r2
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	440b      	add	r3, r1
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d10a      	bne.n	8006b3c <vTaskSwitchContext+0x5c>
	__asm volatile
 8006b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2a:	f383 8811 	msr	BASEPRI, r3
 8006b2e:	f3bf 8f6f 	isb	sy
 8006b32:	f3bf 8f4f 	dsb	sy
 8006b36:	607b      	str	r3, [r7, #4]
}
 8006b38:	bf00      	nop
 8006b3a:	e7fe      	b.n	8006b3a <vTaskSwitchContext+0x5a>
 8006b3c:	697a      	ldr	r2, [r7, #20]
 8006b3e:	4613      	mov	r3, r2
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	4413      	add	r3, r2
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	4a12      	ldr	r2, [pc, #72]	; (8006b90 <vTaskSwitchContext+0xb0>)
 8006b48:	4413      	add	r3, r2
 8006b4a:	613b      	str	r3, [r7, #16]
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	685a      	ldr	r2, [r3, #4]
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	605a      	str	r2, [r3, #4]
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	685a      	ldr	r2, [r3, #4]
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	3308      	adds	r3, #8
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d104      	bne.n	8006b6c <vTaskSwitchContext+0x8c>
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	685a      	ldr	r2, [r3, #4]
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	605a      	str	r2, [r3, #4]
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	68db      	ldr	r3, [r3, #12]
 8006b72:	4a08      	ldr	r2, [pc, #32]	; (8006b94 <vTaskSwitchContext+0xb4>)
 8006b74:	6013      	str	r3, [r2, #0]
}
 8006b76:	bf00      	nop
 8006b78:	371c      	adds	r7, #28
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop
 8006b84:	20000aec 	.word	0x20000aec
 8006b88:	20000ad8 	.word	0x20000ad8
 8006b8c:	20000acc 	.word	0x20000acc
 8006b90:	200009c8 	.word	0x200009c8
 8006b94:	200009c4 	.word	0x200009c4

08006b98 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d10a      	bne.n	8006bbe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bac:	f383 8811 	msr	BASEPRI, r3
 8006bb0:	f3bf 8f6f 	isb	sy
 8006bb4:	f3bf 8f4f 	dsb	sy
 8006bb8:	60fb      	str	r3, [r7, #12]
}
 8006bba:	bf00      	nop
 8006bbc:	e7fe      	b.n	8006bbc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006bbe:	4b07      	ldr	r3, [pc, #28]	; (8006bdc <vTaskPlaceOnEventList+0x44>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	3318      	adds	r3, #24
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f7fe fea8 	bl	800591c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006bcc:	2101      	movs	r1, #1
 8006bce:	6838      	ldr	r0, [r7, #0]
 8006bd0:	f000 fafa 	bl	80071c8 <prvAddCurrentTaskToDelayedList>
}
 8006bd4:	bf00      	nop
 8006bd6:	3710      	adds	r7, #16
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	200009c4 	.word	0x200009c4

08006be0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b086      	sub	sp, #24
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d10a      	bne.n	8006c08 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf6:	f383 8811 	msr	BASEPRI, r3
 8006bfa:	f3bf 8f6f 	isb	sy
 8006bfe:	f3bf 8f4f 	dsb	sy
 8006c02:	617b      	str	r3, [r7, #20]
}
 8006c04:	bf00      	nop
 8006c06:	e7fe      	b.n	8006c06 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006c08:	4b0a      	ldr	r3, [pc, #40]	; (8006c34 <vTaskPlaceOnEventListRestricted+0x54>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	3318      	adds	r3, #24
 8006c0e:	4619      	mov	r1, r3
 8006c10:	68f8      	ldr	r0, [r7, #12]
 8006c12:	f7fe fe5f 	bl	80058d4 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d002      	beq.n	8006c22 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8006c20:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006c22:	6879      	ldr	r1, [r7, #4]
 8006c24:	68b8      	ldr	r0, [r7, #8]
 8006c26:	f000 facf 	bl	80071c8 <prvAddCurrentTaskToDelayedList>
	}
 8006c2a:	bf00      	nop
 8006c2c:	3718      	adds	r7, #24
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	200009c4 	.word	0x200009c4

08006c38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b086      	sub	sp, #24
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	68db      	ldr	r3, [r3, #12]
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d10a      	bne.n	8006c64 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c52:	f383 8811 	msr	BASEPRI, r3
 8006c56:	f3bf 8f6f 	isb	sy
 8006c5a:	f3bf 8f4f 	dsb	sy
 8006c5e:	60fb      	str	r3, [r7, #12]
}
 8006c60:	bf00      	nop
 8006c62:	e7fe      	b.n	8006c62 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	3318      	adds	r3, #24
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f7fe fe90 	bl	800598e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c6e:	4b1d      	ldr	r3, [pc, #116]	; (8006ce4 <xTaskRemoveFromEventList+0xac>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d11c      	bne.n	8006cb0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	3304      	adds	r3, #4
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f7fe fe87 	bl	800598e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c84:	2201      	movs	r2, #1
 8006c86:	409a      	lsls	r2, r3
 8006c88:	4b17      	ldr	r3, [pc, #92]	; (8006ce8 <xTaskRemoveFromEventList+0xb0>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	4a16      	ldr	r2, [pc, #88]	; (8006ce8 <xTaskRemoveFromEventList+0xb0>)
 8006c90:	6013      	str	r3, [r2, #0]
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c96:	4613      	mov	r3, r2
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	4413      	add	r3, r2
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	4a13      	ldr	r2, [pc, #76]	; (8006cec <xTaskRemoveFromEventList+0xb4>)
 8006ca0:	441a      	add	r2, r3
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	3304      	adds	r3, #4
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	4610      	mov	r0, r2
 8006caa:	f7fe fe13 	bl	80058d4 <vListInsertEnd>
 8006cae:	e005      	b.n	8006cbc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	3318      	adds	r3, #24
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	480e      	ldr	r0, [pc, #56]	; (8006cf0 <xTaskRemoveFromEventList+0xb8>)
 8006cb8:	f7fe fe0c 	bl	80058d4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cc0:	4b0c      	ldr	r3, [pc, #48]	; (8006cf4 <xTaskRemoveFromEventList+0xbc>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d905      	bls.n	8006cd6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006cce:	4b0a      	ldr	r3, [pc, #40]	; (8006cf8 <xTaskRemoveFromEventList+0xc0>)
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	601a      	str	r2, [r3, #0]
 8006cd4:	e001      	b.n	8006cda <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006cda:	697b      	ldr	r3, [r7, #20]
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3718      	adds	r7, #24
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	20000aec 	.word	0x20000aec
 8006ce8:	20000acc 	.word	0x20000acc
 8006cec:	200009c8 	.word	0x200009c8
 8006cf0:	20000a84 	.word	0x20000a84
 8006cf4:	200009c4 	.word	0x200009c4
 8006cf8:	20000ad8 	.word	0x20000ad8

08006cfc <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b086      	sub	sp, #24
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8006d06:	4b29      	ldr	r3, [pc, #164]	; (8006dac <vTaskRemoveFromUnorderedEventList+0xb0>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d10a      	bne.n	8006d24 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8006d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d12:	f383 8811 	msr	BASEPRI, r3
 8006d16:	f3bf 8f6f 	isb	sy
 8006d1a:	f3bf 8f4f 	dsb	sy
 8006d1e:	613b      	str	r3, [r7, #16]
}
 8006d20:	bf00      	nop
 8006d22:	e7fe      	b.n	8006d22 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d10a      	bne.n	8006d50 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8006d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d3e:	f383 8811 	msr	BASEPRI, r3
 8006d42:	f3bf 8f6f 	isb	sy
 8006d46:	f3bf 8f4f 	dsb	sy
 8006d4a:	60fb      	str	r3, [r7, #12]
}
 8006d4c:	bf00      	nop
 8006d4e:	e7fe      	b.n	8006d4e <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f7fe fe1c 	bl	800598e <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	3304      	adds	r3, #4
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f7fe fe17 	bl	800598e <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d64:	2201      	movs	r2, #1
 8006d66:	409a      	lsls	r2, r3
 8006d68:	4b11      	ldr	r3, [pc, #68]	; (8006db0 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	4a10      	ldr	r2, [pc, #64]	; (8006db0 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006d70:	6013      	str	r3, [r2, #0]
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d76:	4613      	mov	r3, r2
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	4413      	add	r3, r2
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	4a0d      	ldr	r2, [pc, #52]	; (8006db4 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8006d80:	441a      	add	r2, r3
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	3304      	adds	r3, #4
 8006d86:	4619      	mov	r1, r3
 8006d88:	4610      	mov	r0, r2
 8006d8a:	f7fe fda3 	bl	80058d4 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d92:	4b09      	ldr	r3, [pc, #36]	; (8006db8 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d902      	bls.n	8006da2 <vTaskRemoveFromUnorderedEventList+0xa6>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8006d9c:	4b07      	ldr	r3, [pc, #28]	; (8006dbc <vTaskRemoveFromUnorderedEventList+0xc0>)
 8006d9e:	2201      	movs	r2, #1
 8006da0:	601a      	str	r2, [r3, #0]
	}
}
 8006da2:	bf00      	nop
 8006da4:	3718      	adds	r7, #24
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	20000aec 	.word	0x20000aec
 8006db0:	20000acc 	.word	0x20000acc
 8006db4:	200009c8 	.word	0x200009c8
 8006db8:	200009c4 	.word	0x200009c4
 8006dbc:	20000ad8 	.word	0x20000ad8

08006dc0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006dc8:	4b06      	ldr	r3, [pc, #24]	; (8006de4 <vTaskInternalSetTimeOutState+0x24>)
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006dd0:	4b05      	ldr	r3, [pc, #20]	; (8006de8 <vTaskInternalSetTimeOutState+0x28>)
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	605a      	str	r2, [r3, #4]
}
 8006dd8:	bf00      	nop
 8006dda:	370c      	adds	r7, #12
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr
 8006de4:	20000adc 	.word	0x20000adc
 8006de8:	20000ac8 	.word	0x20000ac8

08006dec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b088      	sub	sp, #32
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d10a      	bne.n	8006e12 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e00:	f383 8811 	msr	BASEPRI, r3
 8006e04:	f3bf 8f6f 	isb	sy
 8006e08:	f3bf 8f4f 	dsb	sy
 8006e0c:	613b      	str	r3, [r7, #16]
}
 8006e0e:	bf00      	nop
 8006e10:	e7fe      	b.n	8006e10 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d10a      	bne.n	8006e2e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e1c:	f383 8811 	msr	BASEPRI, r3
 8006e20:	f3bf 8f6f 	isb	sy
 8006e24:	f3bf 8f4f 	dsb	sy
 8006e28:	60fb      	str	r3, [r7, #12]
}
 8006e2a:	bf00      	nop
 8006e2c:	e7fe      	b.n	8006e2c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006e2e:	f000 fe71 	bl	8007b14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006e32:	4b1d      	ldr	r3, [pc, #116]	; (8006ea8 <xTaskCheckForTimeOut+0xbc>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	69ba      	ldr	r2, [r7, #24]
 8006e3e:	1ad3      	subs	r3, r2, r3
 8006e40:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e4a:	d102      	bne.n	8006e52 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	61fb      	str	r3, [r7, #28]
 8006e50:	e023      	b.n	8006e9a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	4b15      	ldr	r3, [pc, #84]	; (8006eac <xTaskCheckForTimeOut+0xc0>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d007      	beq.n	8006e6e <xTaskCheckForTimeOut+0x82>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	69ba      	ldr	r2, [r7, #24]
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d302      	bcc.n	8006e6e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	61fb      	str	r3, [r7, #28]
 8006e6c:	e015      	b.n	8006e9a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	697a      	ldr	r2, [r7, #20]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d20b      	bcs.n	8006e90 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	1ad2      	subs	r2, r2, r3
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f7ff ff9b 	bl	8006dc0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	61fb      	str	r3, [r7, #28]
 8006e8e:	e004      	b.n	8006e9a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	2200      	movs	r2, #0
 8006e94:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006e96:	2301      	movs	r3, #1
 8006e98:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006e9a:	f000 fe6b 	bl	8007b74 <vPortExitCritical>

	return xReturn;
 8006e9e:	69fb      	ldr	r3, [r7, #28]
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3720      	adds	r7, #32
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}
 8006ea8:	20000ac8 	.word	0x20000ac8
 8006eac:	20000adc 	.word	0x20000adc

08006eb0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006eb4:	4b03      	ldr	r3, [pc, #12]	; (8006ec4 <vTaskMissedYield+0x14>)
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	601a      	str	r2, [r3, #0]
}
 8006eba:	bf00      	nop
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr
 8006ec4:	20000ad8 	.word	0x20000ad8

08006ec8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006ed0:	f000 f852 	bl	8006f78 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006ed4:	4b06      	ldr	r3, [pc, #24]	; (8006ef0 <prvIdleTask+0x28>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d9f9      	bls.n	8006ed0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006edc:	4b05      	ldr	r3, [pc, #20]	; (8006ef4 <prvIdleTask+0x2c>)
 8006ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ee2:	601a      	str	r2, [r3, #0]
 8006ee4:	f3bf 8f4f 	dsb	sy
 8006ee8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006eec:	e7f0      	b.n	8006ed0 <prvIdleTask+0x8>
 8006eee:	bf00      	nop
 8006ef0:	200009c8 	.word	0x200009c8
 8006ef4:	e000ed04 	.word	0xe000ed04

08006ef8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b082      	sub	sp, #8
 8006efc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006efe:	2300      	movs	r3, #0
 8006f00:	607b      	str	r3, [r7, #4]
 8006f02:	e00c      	b.n	8006f1e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	4613      	mov	r3, r2
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	4413      	add	r3, r2
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	4a12      	ldr	r2, [pc, #72]	; (8006f58 <prvInitialiseTaskLists+0x60>)
 8006f10:	4413      	add	r3, r2
 8006f12:	4618      	mov	r0, r3
 8006f14:	f7fe fcb1 	bl	800587a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	607b      	str	r3, [r7, #4]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2b06      	cmp	r3, #6
 8006f22:	d9ef      	bls.n	8006f04 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006f24:	480d      	ldr	r0, [pc, #52]	; (8006f5c <prvInitialiseTaskLists+0x64>)
 8006f26:	f7fe fca8 	bl	800587a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006f2a:	480d      	ldr	r0, [pc, #52]	; (8006f60 <prvInitialiseTaskLists+0x68>)
 8006f2c:	f7fe fca5 	bl	800587a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006f30:	480c      	ldr	r0, [pc, #48]	; (8006f64 <prvInitialiseTaskLists+0x6c>)
 8006f32:	f7fe fca2 	bl	800587a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006f36:	480c      	ldr	r0, [pc, #48]	; (8006f68 <prvInitialiseTaskLists+0x70>)
 8006f38:	f7fe fc9f 	bl	800587a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006f3c:	480b      	ldr	r0, [pc, #44]	; (8006f6c <prvInitialiseTaskLists+0x74>)
 8006f3e:	f7fe fc9c 	bl	800587a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006f42:	4b0b      	ldr	r3, [pc, #44]	; (8006f70 <prvInitialiseTaskLists+0x78>)
 8006f44:	4a05      	ldr	r2, [pc, #20]	; (8006f5c <prvInitialiseTaskLists+0x64>)
 8006f46:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006f48:	4b0a      	ldr	r3, [pc, #40]	; (8006f74 <prvInitialiseTaskLists+0x7c>)
 8006f4a:	4a05      	ldr	r2, [pc, #20]	; (8006f60 <prvInitialiseTaskLists+0x68>)
 8006f4c:	601a      	str	r2, [r3, #0]
}
 8006f4e:	bf00      	nop
 8006f50:	3708      	adds	r7, #8
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	bf00      	nop
 8006f58:	200009c8 	.word	0x200009c8
 8006f5c:	20000a54 	.word	0x20000a54
 8006f60:	20000a68 	.word	0x20000a68
 8006f64:	20000a84 	.word	0x20000a84
 8006f68:	20000a98 	.word	0x20000a98
 8006f6c:	20000ab0 	.word	0x20000ab0
 8006f70:	20000a7c 	.word	0x20000a7c
 8006f74:	20000a80 	.word	0x20000a80

08006f78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f7e:	e019      	b.n	8006fb4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006f80:	f000 fdc8 	bl	8007b14 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006f84:	4b10      	ldr	r3, [pc, #64]	; (8006fc8 <prvCheckTasksWaitingTermination+0x50>)
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	68db      	ldr	r3, [r3, #12]
 8006f8a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	3304      	adds	r3, #4
 8006f90:	4618      	mov	r0, r3
 8006f92:	f7fe fcfc 	bl	800598e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006f96:	4b0d      	ldr	r3, [pc, #52]	; (8006fcc <prvCheckTasksWaitingTermination+0x54>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	3b01      	subs	r3, #1
 8006f9c:	4a0b      	ldr	r2, [pc, #44]	; (8006fcc <prvCheckTasksWaitingTermination+0x54>)
 8006f9e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006fa0:	4b0b      	ldr	r3, [pc, #44]	; (8006fd0 <prvCheckTasksWaitingTermination+0x58>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	3b01      	subs	r3, #1
 8006fa6:	4a0a      	ldr	r2, [pc, #40]	; (8006fd0 <prvCheckTasksWaitingTermination+0x58>)
 8006fa8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006faa:	f000 fde3 	bl	8007b74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 f810 	bl	8006fd4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006fb4:	4b06      	ldr	r3, [pc, #24]	; (8006fd0 <prvCheckTasksWaitingTermination+0x58>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d1e1      	bne.n	8006f80 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006fbc:	bf00      	nop
 8006fbe:	bf00      	nop
 8006fc0:	3708      	adds	r7, #8
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	20000a98 	.word	0x20000a98
 8006fcc:	20000ac4 	.word	0x20000ac4
 8006fd0:	20000aac 	.word	0x20000aac

08006fd4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d108      	bne.n	8006ff8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fea:	4618      	mov	r0, r3
 8006fec:	f000 ff78 	bl	8007ee0 <vPortFree>
				vPortFree( pxTCB );
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 ff75 	bl	8007ee0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006ff6:	e018      	b.n	800702a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d103      	bne.n	800700a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 ff6c 	bl	8007ee0 <vPortFree>
	}
 8007008:	e00f      	b.n	800702a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8007010:	2b02      	cmp	r3, #2
 8007012:	d00a      	beq.n	800702a <prvDeleteTCB+0x56>
	__asm volatile
 8007014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007018:	f383 8811 	msr	BASEPRI, r3
 800701c:	f3bf 8f6f 	isb	sy
 8007020:	f3bf 8f4f 	dsb	sy
 8007024:	60fb      	str	r3, [r7, #12]
}
 8007026:	bf00      	nop
 8007028:	e7fe      	b.n	8007028 <prvDeleteTCB+0x54>
	}
 800702a:	bf00      	nop
 800702c:	3710      	adds	r7, #16
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
	...

08007034 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800703a:	4b0f      	ldr	r3, [pc, #60]	; (8007078 <prvResetNextTaskUnblockTime+0x44>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d101      	bne.n	8007048 <prvResetNextTaskUnblockTime+0x14>
 8007044:	2301      	movs	r3, #1
 8007046:	e000      	b.n	800704a <prvResetNextTaskUnblockTime+0x16>
 8007048:	2300      	movs	r3, #0
 800704a:	2b00      	cmp	r3, #0
 800704c:	d004      	beq.n	8007058 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800704e:	4b0b      	ldr	r3, [pc, #44]	; (800707c <prvResetNextTaskUnblockTime+0x48>)
 8007050:	f04f 32ff 	mov.w	r2, #4294967295
 8007054:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007056:	e008      	b.n	800706a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007058:	4b07      	ldr	r3, [pc, #28]	; (8007078 <prvResetNextTaskUnblockTime+0x44>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	68db      	ldr	r3, [r3, #12]
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	4a05      	ldr	r2, [pc, #20]	; (800707c <prvResetNextTaskUnblockTime+0x48>)
 8007068:	6013      	str	r3, [r2, #0]
}
 800706a:	bf00      	nop
 800706c:	370c      	adds	r7, #12
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr
 8007076:	bf00      	nop
 8007078:	20000a7c 	.word	0x20000a7c
 800707c:	20000ae4 	.word	0x20000ae4

08007080 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007080:	b480      	push	{r7}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007086:	4b0b      	ldr	r3, [pc, #44]	; (80070b4 <xTaskGetSchedulerState+0x34>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d102      	bne.n	8007094 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800708e:	2301      	movs	r3, #1
 8007090:	607b      	str	r3, [r7, #4]
 8007092:	e008      	b.n	80070a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007094:	4b08      	ldr	r3, [pc, #32]	; (80070b8 <xTaskGetSchedulerState+0x38>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d102      	bne.n	80070a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800709c:	2302      	movs	r3, #2
 800709e:	607b      	str	r3, [r7, #4]
 80070a0:	e001      	b.n	80070a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80070a2:	2300      	movs	r3, #0
 80070a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80070a6:	687b      	ldr	r3, [r7, #4]
	}
 80070a8:	4618      	mov	r0, r3
 80070aa:	370c      	adds	r7, #12
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr
 80070b4:	20000ad0 	.word	0x20000ad0
 80070b8:	20000aec 	.word	0x20000aec

080070bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b086      	sub	sp, #24
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80070c8:	2300      	movs	r3, #0
 80070ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d06e      	beq.n	80071b0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80070d2:	4b3a      	ldr	r3, [pc, #232]	; (80071bc <xTaskPriorityDisinherit+0x100>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	693a      	ldr	r2, [r7, #16]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d00a      	beq.n	80070f2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80070dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e0:	f383 8811 	msr	BASEPRI, r3
 80070e4:	f3bf 8f6f 	isb	sy
 80070e8:	f3bf 8f4f 	dsb	sy
 80070ec:	60fb      	str	r3, [r7, #12]
}
 80070ee:	bf00      	nop
 80070f0:	e7fe      	b.n	80070f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d10a      	bne.n	8007110 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80070fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070fe:	f383 8811 	msr	BASEPRI, r3
 8007102:	f3bf 8f6f 	isb	sy
 8007106:	f3bf 8f4f 	dsb	sy
 800710a:	60bb      	str	r3, [r7, #8]
}
 800710c:	bf00      	nop
 800710e:	e7fe      	b.n	800710e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007114:	1e5a      	subs	r2, r3, #1
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007122:	429a      	cmp	r2, r3
 8007124:	d044      	beq.n	80071b0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800712a:	2b00      	cmp	r3, #0
 800712c:	d140      	bne.n	80071b0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	3304      	adds	r3, #4
 8007132:	4618      	mov	r0, r3
 8007134:	f7fe fc2b 	bl	800598e <uxListRemove>
 8007138:	4603      	mov	r3, r0
 800713a:	2b00      	cmp	r3, #0
 800713c:	d115      	bne.n	800716a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007142:	491f      	ldr	r1, [pc, #124]	; (80071c0 <xTaskPriorityDisinherit+0x104>)
 8007144:	4613      	mov	r3, r2
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	4413      	add	r3, r2
 800714a:	009b      	lsls	r3, r3, #2
 800714c:	440b      	add	r3, r1
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d10a      	bne.n	800716a <xTaskPriorityDisinherit+0xae>
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007158:	2201      	movs	r2, #1
 800715a:	fa02 f303 	lsl.w	r3, r2, r3
 800715e:	43da      	mvns	r2, r3
 8007160:	4b18      	ldr	r3, [pc, #96]	; (80071c4 <xTaskPriorityDisinherit+0x108>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4013      	ands	r3, r2
 8007166:	4a17      	ldr	r2, [pc, #92]	; (80071c4 <xTaskPriorityDisinherit+0x108>)
 8007168:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007176:	f1c3 0207 	rsb	r2, r3, #7
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007182:	2201      	movs	r2, #1
 8007184:	409a      	lsls	r2, r3
 8007186:	4b0f      	ldr	r3, [pc, #60]	; (80071c4 <xTaskPriorityDisinherit+0x108>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4313      	orrs	r3, r2
 800718c:	4a0d      	ldr	r2, [pc, #52]	; (80071c4 <xTaskPriorityDisinherit+0x108>)
 800718e:	6013      	str	r3, [r2, #0]
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007194:	4613      	mov	r3, r2
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	4413      	add	r3, r2
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	4a08      	ldr	r2, [pc, #32]	; (80071c0 <xTaskPriorityDisinherit+0x104>)
 800719e:	441a      	add	r2, r3
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	3304      	adds	r3, #4
 80071a4:	4619      	mov	r1, r3
 80071a6:	4610      	mov	r0, r2
 80071a8:	f7fe fb94 	bl	80058d4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80071ac:	2301      	movs	r3, #1
 80071ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80071b0:	697b      	ldr	r3, [r7, #20]
	}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3718      	adds	r7, #24
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
 80071ba:	bf00      	nop
 80071bc:	200009c4 	.word	0x200009c4
 80071c0:	200009c8 	.word	0x200009c8
 80071c4:	20000acc 	.word	0x20000acc

080071c8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80071d2:	4b29      	ldr	r3, [pc, #164]	; (8007278 <prvAddCurrentTaskToDelayedList+0xb0>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071d8:	4b28      	ldr	r3, [pc, #160]	; (800727c <prvAddCurrentTaskToDelayedList+0xb4>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	3304      	adds	r3, #4
 80071de:	4618      	mov	r0, r3
 80071e0:	f7fe fbd5 	bl	800598e <uxListRemove>
 80071e4:	4603      	mov	r3, r0
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d10b      	bne.n	8007202 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80071ea:	4b24      	ldr	r3, [pc, #144]	; (800727c <prvAddCurrentTaskToDelayedList+0xb4>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f0:	2201      	movs	r2, #1
 80071f2:	fa02 f303 	lsl.w	r3, r2, r3
 80071f6:	43da      	mvns	r2, r3
 80071f8:	4b21      	ldr	r3, [pc, #132]	; (8007280 <prvAddCurrentTaskToDelayedList+0xb8>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4013      	ands	r3, r2
 80071fe:	4a20      	ldr	r2, [pc, #128]	; (8007280 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007200:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007208:	d10a      	bne.n	8007220 <prvAddCurrentTaskToDelayedList+0x58>
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d007      	beq.n	8007220 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007210:	4b1a      	ldr	r3, [pc, #104]	; (800727c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	3304      	adds	r3, #4
 8007216:	4619      	mov	r1, r3
 8007218:	481a      	ldr	r0, [pc, #104]	; (8007284 <prvAddCurrentTaskToDelayedList+0xbc>)
 800721a:	f7fe fb5b 	bl	80058d4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800721e:	e026      	b.n	800726e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007220:	68fa      	ldr	r2, [r7, #12]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	4413      	add	r3, r2
 8007226:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007228:	4b14      	ldr	r3, [pc, #80]	; (800727c <prvAddCurrentTaskToDelayedList+0xb4>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	68ba      	ldr	r2, [r7, #8]
 800722e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007230:	68ba      	ldr	r2, [r7, #8]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	429a      	cmp	r2, r3
 8007236:	d209      	bcs.n	800724c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007238:	4b13      	ldr	r3, [pc, #76]	; (8007288 <prvAddCurrentTaskToDelayedList+0xc0>)
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	4b0f      	ldr	r3, [pc, #60]	; (800727c <prvAddCurrentTaskToDelayedList+0xb4>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	3304      	adds	r3, #4
 8007242:	4619      	mov	r1, r3
 8007244:	4610      	mov	r0, r2
 8007246:	f7fe fb69 	bl	800591c <vListInsert>
}
 800724a:	e010      	b.n	800726e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800724c:	4b0f      	ldr	r3, [pc, #60]	; (800728c <prvAddCurrentTaskToDelayedList+0xc4>)
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	4b0a      	ldr	r3, [pc, #40]	; (800727c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	3304      	adds	r3, #4
 8007256:	4619      	mov	r1, r3
 8007258:	4610      	mov	r0, r2
 800725a:	f7fe fb5f 	bl	800591c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800725e:	4b0c      	ldr	r3, [pc, #48]	; (8007290 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	68ba      	ldr	r2, [r7, #8]
 8007264:	429a      	cmp	r2, r3
 8007266:	d202      	bcs.n	800726e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007268:	4a09      	ldr	r2, [pc, #36]	; (8007290 <prvAddCurrentTaskToDelayedList+0xc8>)
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	6013      	str	r3, [r2, #0]
}
 800726e:	bf00      	nop
 8007270:	3710      	adds	r7, #16
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	20000ac8 	.word	0x20000ac8
 800727c:	200009c4 	.word	0x200009c4
 8007280:	20000acc 	.word	0x20000acc
 8007284:	20000ab0 	.word	0x20000ab0
 8007288:	20000a80 	.word	0x20000a80
 800728c:	20000a7c 	.word	0x20000a7c
 8007290:	20000ae4 	.word	0x20000ae4

08007294 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b08a      	sub	sp, #40	; 0x28
 8007298:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800729a:	2300      	movs	r3, #0
 800729c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800729e:	f000 facb 	bl	8007838 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80072a2:	4b1c      	ldr	r3, [pc, #112]	; (8007314 <xTimerCreateTimerTask+0x80>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d021      	beq.n	80072ee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80072aa:	2300      	movs	r3, #0
 80072ac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80072ae:	2300      	movs	r3, #0
 80072b0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80072b2:	1d3a      	adds	r2, r7, #4
 80072b4:	f107 0108 	add.w	r1, r7, #8
 80072b8:	f107 030c 	add.w	r3, r7, #12
 80072bc:	4618      	mov	r0, r3
 80072be:	f7f8 ffe7 	bl	8000290 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80072c2:	6879      	ldr	r1, [r7, #4]
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	68fa      	ldr	r2, [r7, #12]
 80072c8:	9202      	str	r2, [sp, #8]
 80072ca:	9301      	str	r3, [sp, #4]
 80072cc:	2302      	movs	r3, #2
 80072ce:	9300      	str	r3, [sp, #0]
 80072d0:	2300      	movs	r3, #0
 80072d2:	460a      	mov	r2, r1
 80072d4:	4910      	ldr	r1, [pc, #64]	; (8007318 <xTimerCreateTimerTask+0x84>)
 80072d6:	4811      	ldr	r0, [pc, #68]	; (800731c <xTimerCreateTimerTask+0x88>)
 80072d8:	f7ff f866 	bl	80063a8 <xTaskCreateStatic>
 80072dc:	4603      	mov	r3, r0
 80072de:	4a10      	ldr	r2, [pc, #64]	; (8007320 <xTimerCreateTimerTask+0x8c>)
 80072e0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80072e2:	4b0f      	ldr	r3, [pc, #60]	; (8007320 <xTimerCreateTimerTask+0x8c>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d001      	beq.n	80072ee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80072ea:	2301      	movs	r3, #1
 80072ec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d10a      	bne.n	800730a <xTimerCreateTimerTask+0x76>
	__asm volatile
 80072f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f8:	f383 8811 	msr	BASEPRI, r3
 80072fc:	f3bf 8f6f 	isb	sy
 8007300:	f3bf 8f4f 	dsb	sy
 8007304:	613b      	str	r3, [r7, #16]
}
 8007306:	bf00      	nop
 8007308:	e7fe      	b.n	8007308 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800730a:	697b      	ldr	r3, [r7, #20]
}
 800730c:	4618      	mov	r0, r3
 800730e:	3718      	adds	r7, #24
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}
 8007314:	20000b20 	.word	0x20000b20
 8007318:	0800836c 	.word	0x0800836c
 800731c:	08007441 	.word	0x08007441
 8007320:	20000b24 	.word	0x20000b24

08007324 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b08a      	sub	sp, #40	; 0x28
 8007328:	af00      	add	r7, sp, #0
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	60b9      	str	r1, [r7, #8]
 800732e:	607a      	str	r2, [r7, #4]
 8007330:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007332:	2300      	movs	r3, #0
 8007334:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d10a      	bne.n	8007352 <xTimerGenericCommand+0x2e>
	__asm volatile
 800733c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007340:	f383 8811 	msr	BASEPRI, r3
 8007344:	f3bf 8f6f 	isb	sy
 8007348:	f3bf 8f4f 	dsb	sy
 800734c:	623b      	str	r3, [r7, #32]
}
 800734e:	bf00      	nop
 8007350:	e7fe      	b.n	8007350 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007352:	4b1a      	ldr	r3, [pc, #104]	; (80073bc <xTimerGenericCommand+0x98>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d02a      	beq.n	80073b0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	2b05      	cmp	r3, #5
 800736a:	dc18      	bgt.n	800739e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800736c:	f7ff fe88 	bl	8007080 <xTaskGetSchedulerState>
 8007370:	4603      	mov	r3, r0
 8007372:	2b02      	cmp	r3, #2
 8007374:	d109      	bne.n	800738a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007376:	4b11      	ldr	r3, [pc, #68]	; (80073bc <xTimerGenericCommand+0x98>)
 8007378:	6818      	ldr	r0, [r3, #0]
 800737a:	f107 0110 	add.w	r1, r7, #16
 800737e:	2300      	movs	r3, #0
 8007380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007382:	f7fe fc2d 	bl	8005be0 <xQueueGenericSend>
 8007386:	6278      	str	r0, [r7, #36]	; 0x24
 8007388:	e012      	b.n	80073b0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800738a:	4b0c      	ldr	r3, [pc, #48]	; (80073bc <xTimerGenericCommand+0x98>)
 800738c:	6818      	ldr	r0, [r3, #0]
 800738e:	f107 0110 	add.w	r1, r7, #16
 8007392:	2300      	movs	r3, #0
 8007394:	2200      	movs	r2, #0
 8007396:	f7fe fc23 	bl	8005be0 <xQueueGenericSend>
 800739a:	6278      	str	r0, [r7, #36]	; 0x24
 800739c:	e008      	b.n	80073b0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800739e:	4b07      	ldr	r3, [pc, #28]	; (80073bc <xTimerGenericCommand+0x98>)
 80073a0:	6818      	ldr	r0, [r3, #0]
 80073a2:	f107 0110 	add.w	r1, r7, #16
 80073a6:	2300      	movs	r3, #0
 80073a8:	683a      	ldr	r2, [r7, #0]
 80073aa:	f7fe fd17 	bl	8005ddc <xQueueGenericSendFromISR>
 80073ae:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80073b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3728      	adds	r7, #40	; 0x28
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop
 80073bc:	20000b20 	.word	0x20000b20

080073c0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b088      	sub	sp, #32
 80073c4:	af02      	add	r7, sp, #8
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80073ca:	4b1c      	ldr	r3, [pc, #112]	; (800743c <prvProcessExpiredTimer+0x7c>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	68db      	ldr	r3, [r3, #12]
 80073d0:	68db      	ldr	r3, [r3, #12]
 80073d2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	3304      	adds	r3, #4
 80073d8:	4618      	mov	r0, r3
 80073da:	f7fe fad8 	bl	800598e <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	69db      	ldr	r3, [r3, #28]
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	d122      	bne.n	800742c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	699a      	ldr	r2, [r3, #24]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	18d1      	adds	r1, r2, r3
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	683a      	ldr	r2, [r7, #0]
 80073f2:	6978      	ldr	r0, [r7, #20]
 80073f4:	f000 f8c8 	bl	8007588 <prvInsertTimerInActiveList>
 80073f8:	4603      	mov	r3, r0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d016      	beq.n	800742c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80073fe:	2300      	movs	r3, #0
 8007400:	9300      	str	r3, [sp, #0]
 8007402:	2300      	movs	r3, #0
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	2100      	movs	r1, #0
 8007408:	6978      	ldr	r0, [r7, #20]
 800740a:	f7ff ff8b 	bl	8007324 <xTimerGenericCommand>
 800740e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d10a      	bne.n	800742c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8007416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800741a:	f383 8811 	msr	BASEPRI, r3
 800741e:	f3bf 8f6f 	isb	sy
 8007422:	f3bf 8f4f 	dsb	sy
 8007426:	60fb      	str	r3, [r7, #12]
}
 8007428:	bf00      	nop
 800742a:	e7fe      	b.n	800742a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007430:	6978      	ldr	r0, [r7, #20]
 8007432:	4798      	blx	r3
}
 8007434:	bf00      	nop
 8007436:	3718      	adds	r7, #24
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}
 800743c:	20000b18 	.word	0x20000b18

08007440 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b084      	sub	sp, #16
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007448:	f107 0308 	add.w	r3, r7, #8
 800744c:	4618      	mov	r0, r3
 800744e:	f000 f857 	bl	8007500 <prvGetNextExpireTime>
 8007452:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	4619      	mov	r1, r3
 8007458:	68f8      	ldr	r0, [r7, #12]
 800745a:	f000 f803 	bl	8007464 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800745e:	f000 f8d5 	bl	800760c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007462:	e7f1      	b.n	8007448 <prvTimerTask+0x8>

08007464 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b084      	sub	sp, #16
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800746e:	f7ff f9bf 	bl	80067f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007472:	f107 0308 	add.w	r3, r7, #8
 8007476:	4618      	mov	r0, r3
 8007478:	f000 f866 	bl	8007548 <prvSampleTimeNow>
 800747c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d130      	bne.n	80074e6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d10a      	bne.n	80074a0 <prvProcessTimerOrBlockTask+0x3c>
 800748a:	687a      	ldr	r2, [r7, #4]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	429a      	cmp	r2, r3
 8007490:	d806      	bhi.n	80074a0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007492:	f7ff f9bb 	bl	800680c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007496:	68f9      	ldr	r1, [r7, #12]
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f7ff ff91 	bl	80073c0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800749e:	e024      	b.n	80074ea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d008      	beq.n	80074b8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80074a6:	4b13      	ldr	r3, [pc, #76]	; (80074f4 <prvProcessTimerOrBlockTask+0x90>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	bf0c      	ite	eq
 80074b0:	2301      	moveq	r3, #1
 80074b2:	2300      	movne	r3, #0
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80074b8:	4b0f      	ldr	r3, [pc, #60]	; (80074f8 <prvProcessTimerOrBlockTask+0x94>)
 80074ba:	6818      	ldr	r0, [r3, #0]
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	1ad3      	subs	r3, r2, r3
 80074c2:	683a      	ldr	r2, [r7, #0]
 80074c4:	4619      	mov	r1, r3
 80074c6:	f7fe ff3b 	bl	8006340 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80074ca:	f7ff f99f 	bl	800680c <xTaskResumeAll>
 80074ce:	4603      	mov	r3, r0
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d10a      	bne.n	80074ea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80074d4:	4b09      	ldr	r3, [pc, #36]	; (80074fc <prvProcessTimerOrBlockTask+0x98>)
 80074d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074da:	601a      	str	r2, [r3, #0]
 80074dc:	f3bf 8f4f 	dsb	sy
 80074e0:	f3bf 8f6f 	isb	sy
}
 80074e4:	e001      	b.n	80074ea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80074e6:	f7ff f991 	bl	800680c <xTaskResumeAll>
}
 80074ea:	bf00      	nop
 80074ec:	3710      	adds	r7, #16
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop
 80074f4:	20000b1c 	.word	0x20000b1c
 80074f8:	20000b20 	.word	0x20000b20
 80074fc:	e000ed04 	.word	0xe000ed04

08007500 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007500:	b480      	push	{r7}
 8007502:	b085      	sub	sp, #20
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007508:	4b0e      	ldr	r3, [pc, #56]	; (8007544 <prvGetNextExpireTime+0x44>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	2b00      	cmp	r3, #0
 8007510:	bf0c      	ite	eq
 8007512:	2301      	moveq	r3, #1
 8007514:	2300      	movne	r3, #0
 8007516:	b2db      	uxtb	r3, r3
 8007518:	461a      	mov	r2, r3
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d105      	bne.n	8007532 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007526:	4b07      	ldr	r3, [pc, #28]	; (8007544 <prvGetNextExpireTime+0x44>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	60fb      	str	r3, [r7, #12]
 8007530:	e001      	b.n	8007536 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007532:	2300      	movs	r3, #0
 8007534:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007536:	68fb      	ldr	r3, [r7, #12]
}
 8007538:	4618      	mov	r0, r3
 800753a:	3714      	adds	r7, #20
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr
 8007544:	20000b18 	.word	0x20000b18

08007548 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007550:	f7ff f9f8 	bl	8006944 <xTaskGetTickCount>
 8007554:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007556:	4b0b      	ldr	r3, [pc, #44]	; (8007584 <prvSampleTimeNow+0x3c>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	68fa      	ldr	r2, [r7, #12]
 800755c:	429a      	cmp	r2, r3
 800755e:	d205      	bcs.n	800756c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007560:	f000 f908 	bl	8007774 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2201      	movs	r2, #1
 8007568:	601a      	str	r2, [r3, #0]
 800756a:	e002      	b.n	8007572 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007572:	4a04      	ldr	r2, [pc, #16]	; (8007584 <prvSampleTimeNow+0x3c>)
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007578:	68fb      	ldr	r3, [r7, #12]
}
 800757a:	4618      	mov	r0, r3
 800757c:	3710      	adds	r7, #16
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
 8007582:	bf00      	nop
 8007584:	20000b28 	.word	0x20000b28

08007588 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b086      	sub	sp, #24
 800758c:	af00      	add	r7, sp, #0
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	60b9      	str	r1, [r7, #8]
 8007592:	607a      	str	r2, [r7, #4]
 8007594:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007596:	2300      	movs	r3, #0
 8007598:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	68ba      	ldr	r2, [r7, #8]
 800759e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	68fa      	ldr	r2, [r7, #12]
 80075a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80075a6:	68ba      	ldr	r2, [r7, #8]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d812      	bhi.n	80075d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	1ad2      	subs	r2, r2, r3
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	699b      	ldr	r3, [r3, #24]
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d302      	bcc.n	80075c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80075bc:	2301      	movs	r3, #1
 80075be:	617b      	str	r3, [r7, #20]
 80075c0:	e01b      	b.n	80075fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80075c2:	4b10      	ldr	r3, [pc, #64]	; (8007604 <prvInsertTimerInActiveList+0x7c>)
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	3304      	adds	r3, #4
 80075ca:	4619      	mov	r1, r3
 80075cc:	4610      	mov	r0, r2
 80075ce:	f7fe f9a5 	bl	800591c <vListInsert>
 80075d2:	e012      	b.n	80075fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	429a      	cmp	r2, r3
 80075da:	d206      	bcs.n	80075ea <prvInsertTimerInActiveList+0x62>
 80075dc:	68ba      	ldr	r2, [r7, #8]
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d302      	bcc.n	80075ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80075e4:	2301      	movs	r3, #1
 80075e6:	617b      	str	r3, [r7, #20]
 80075e8:	e007      	b.n	80075fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80075ea:	4b07      	ldr	r3, [pc, #28]	; (8007608 <prvInsertTimerInActiveList+0x80>)
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	3304      	adds	r3, #4
 80075f2:	4619      	mov	r1, r3
 80075f4:	4610      	mov	r0, r2
 80075f6:	f7fe f991 	bl	800591c <vListInsert>
		}
	}

	return xProcessTimerNow;
 80075fa:	697b      	ldr	r3, [r7, #20]
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3718      	adds	r7, #24
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}
 8007604:	20000b1c 	.word	0x20000b1c
 8007608:	20000b18 	.word	0x20000b18

0800760c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b08e      	sub	sp, #56	; 0x38
 8007610:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007612:	e09d      	b.n	8007750 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2b00      	cmp	r3, #0
 8007618:	da18      	bge.n	800764c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800761a:	1d3b      	adds	r3, r7, #4
 800761c:	3304      	adds	r3, #4
 800761e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007622:	2b00      	cmp	r3, #0
 8007624:	d10a      	bne.n	800763c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800762a:	f383 8811 	msr	BASEPRI, r3
 800762e:	f3bf 8f6f 	isb	sy
 8007632:	f3bf 8f4f 	dsb	sy
 8007636:	61fb      	str	r3, [r7, #28]
}
 8007638:	bf00      	nop
 800763a:	e7fe      	b.n	800763a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800763c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007642:	6850      	ldr	r0, [r2, #4]
 8007644:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007646:	6892      	ldr	r2, [r2, #8]
 8007648:	4611      	mov	r1, r2
 800764a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2b00      	cmp	r3, #0
 8007650:	db7e      	blt.n	8007750 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007658:	695b      	ldr	r3, [r3, #20]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d004      	beq.n	8007668 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800765e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007660:	3304      	adds	r3, #4
 8007662:	4618      	mov	r0, r3
 8007664:	f7fe f993 	bl	800598e <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007668:	463b      	mov	r3, r7
 800766a:	4618      	mov	r0, r3
 800766c:	f7ff ff6c 	bl	8007548 <prvSampleTimeNow>
 8007670:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2b09      	cmp	r3, #9
 8007676:	d86a      	bhi.n	800774e <prvProcessReceivedCommands+0x142>
 8007678:	a201      	add	r2, pc, #4	; (adr r2, 8007680 <prvProcessReceivedCommands+0x74>)
 800767a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800767e:	bf00      	nop
 8007680:	080076a9 	.word	0x080076a9
 8007684:	080076a9 	.word	0x080076a9
 8007688:	080076a9 	.word	0x080076a9
 800768c:	08007751 	.word	0x08007751
 8007690:	08007705 	.word	0x08007705
 8007694:	0800773d 	.word	0x0800773d
 8007698:	080076a9 	.word	0x080076a9
 800769c:	080076a9 	.word	0x080076a9
 80076a0:	08007751 	.word	0x08007751
 80076a4:	08007705 	.word	0x08007705
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80076a8:	68ba      	ldr	r2, [r7, #8]
 80076aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ac:	699b      	ldr	r3, [r3, #24]
 80076ae:	18d1      	adds	r1, r2, r3
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076b6:	f7ff ff67 	bl	8007588 <prvInsertTimerInActiveList>
 80076ba:	4603      	mov	r3, r0
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d047      	beq.n	8007750 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80076c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076c6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80076c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ca:	69db      	ldr	r3, [r3, #28]
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d13f      	bne.n	8007750 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80076d0:	68ba      	ldr	r2, [r7, #8]
 80076d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076d4:	699b      	ldr	r3, [r3, #24]
 80076d6:	441a      	add	r2, r3
 80076d8:	2300      	movs	r3, #0
 80076da:	9300      	str	r3, [sp, #0]
 80076dc:	2300      	movs	r3, #0
 80076de:	2100      	movs	r1, #0
 80076e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076e2:	f7ff fe1f 	bl	8007324 <xTimerGenericCommand>
 80076e6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80076e8:	6a3b      	ldr	r3, [r7, #32]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d130      	bne.n	8007750 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80076ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f2:	f383 8811 	msr	BASEPRI, r3
 80076f6:	f3bf 8f6f 	isb	sy
 80076fa:	f3bf 8f4f 	dsb	sy
 80076fe:	61bb      	str	r3, [r7, #24]
}
 8007700:	bf00      	nop
 8007702:	e7fe      	b.n	8007702 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007704:	68ba      	ldr	r2, [r7, #8]
 8007706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007708:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800770a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800770c:	699b      	ldr	r3, [r3, #24]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d10a      	bne.n	8007728 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8007712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007716:	f383 8811 	msr	BASEPRI, r3
 800771a:	f3bf 8f6f 	isb	sy
 800771e:	f3bf 8f4f 	dsb	sy
 8007722:	617b      	str	r3, [r7, #20]
}
 8007724:	bf00      	nop
 8007726:	e7fe      	b.n	8007726 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800772a:	699a      	ldr	r2, [r3, #24]
 800772c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772e:	18d1      	adds	r1, r2, r3
 8007730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007734:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007736:	f7ff ff27 	bl	8007588 <prvInsertTimerInActiveList>
					break;
 800773a:	e009      	b.n	8007750 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800773c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800773e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007742:	2b00      	cmp	r3, #0
 8007744:	d104      	bne.n	8007750 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8007746:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007748:	f000 fbca 	bl	8007ee0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800774c:	e000      	b.n	8007750 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 800774e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007750:	4b07      	ldr	r3, [pc, #28]	; (8007770 <prvProcessReceivedCommands+0x164>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	1d39      	adds	r1, r7, #4
 8007756:	2200      	movs	r2, #0
 8007758:	4618      	mov	r0, r3
 800775a:	f7fe fbd7 	bl	8005f0c <xQueueReceive>
 800775e:	4603      	mov	r3, r0
 8007760:	2b00      	cmp	r3, #0
 8007762:	f47f af57 	bne.w	8007614 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007766:	bf00      	nop
 8007768:	bf00      	nop
 800776a:	3730      	adds	r7, #48	; 0x30
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}
 8007770:	20000b20 	.word	0x20000b20

08007774 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b088      	sub	sp, #32
 8007778:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800777a:	e045      	b.n	8007808 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800777c:	4b2c      	ldr	r3, [pc, #176]	; (8007830 <prvSwitchTimerLists+0xbc>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	68db      	ldr	r3, [r3, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007786:	4b2a      	ldr	r3, [pc, #168]	; (8007830 <prvSwitchTimerLists+0xbc>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	68db      	ldr	r3, [r3, #12]
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	3304      	adds	r3, #4
 8007794:	4618      	mov	r0, r3
 8007796:	f7fe f8fa 	bl	800598e <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800779e:	68f8      	ldr	r0, [r7, #12]
 80077a0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	69db      	ldr	r3, [r3, #28]
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d12e      	bne.n	8007808 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	699b      	ldr	r3, [r3, #24]
 80077ae:	693a      	ldr	r2, [r7, #16]
 80077b0:	4413      	add	r3, r2
 80077b2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80077b4:	68ba      	ldr	r2, [r7, #8]
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d90e      	bls.n	80077da <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	68ba      	ldr	r2, [r7, #8]
 80077c0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	68fa      	ldr	r2, [r7, #12]
 80077c6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80077c8:	4b19      	ldr	r3, [pc, #100]	; (8007830 <prvSwitchTimerLists+0xbc>)
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	3304      	adds	r3, #4
 80077d0:	4619      	mov	r1, r3
 80077d2:	4610      	mov	r0, r2
 80077d4:	f7fe f8a2 	bl	800591c <vListInsert>
 80077d8:	e016      	b.n	8007808 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80077da:	2300      	movs	r3, #0
 80077dc:	9300      	str	r3, [sp, #0]
 80077de:	2300      	movs	r3, #0
 80077e0:	693a      	ldr	r2, [r7, #16]
 80077e2:	2100      	movs	r1, #0
 80077e4:	68f8      	ldr	r0, [r7, #12]
 80077e6:	f7ff fd9d 	bl	8007324 <xTimerGenericCommand>
 80077ea:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d10a      	bne.n	8007808 <prvSwitchTimerLists+0x94>
	__asm volatile
 80077f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f6:	f383 8811 	msr	BASEPRI, r3
 80077fa:	f3bf 8f6f 	isb	sy
 80077fe:	f3bf 8f4f 	dsb	sy
 8007802:	603b      	str	r3, [r7, #0]
}
 8007804:	bf00      	nop
 8007806:	e7fe      	b.n	8007806 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007808:	4b09      	ldr	r3, [pc, #36]	; (8007830 <prvSwitchTimerLists+0xbc>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d1b4      	bne.n	800777c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007812:	4b07      	ldr	r3, [pc, #28]	; (8007830 <prvSwitchTimerLists+0xbc>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007818:	4b06      	ldr	r3, [pc, #24]	; (8007834 <prvSwitchTimerLists+0xc0>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a04      	ldr	r2, [pc, #16]	; (8007830 <prvSwitchTimerLists+0xbc>)
 800781e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007820:	4a04      	ldr	r2, [pc, #16]	; (8007834 <prvSwitchTimerLists+0xc0>)
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	6013      	str	r3, [r2, #0]
}
 8007826:	bf00      	nop
 8007828:	3718      	adds	r7, #24
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
 800782e:	bf00      	nop
 8007830:	20000b18 	.word	0x20000b18
 8007834:	20000b1c 	.word	0x20000b1c

08007838 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b082      	sub	sp, #8
 800783c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800783e:	f000 f969 	bl	8007b14 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007842:	4b15      	ldr	r3, [pc, #84]	; (8007898 <prvCheckForValidListAndQueue+0x60>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d120      	bne.n	800788c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800784a:	4814      	ldr	r0, [pc, #80]	; (800789c <prvCheckForValidListAndQueue+0x64>)
 800784c:	f7fe f815 	bl	800587a <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007850:	4813      	ldr	r0, [pc, #76]	; (80078a0 <prvCheckForValidListAndQueue+0x68>)
 8007852:	f7fe f812 	bl	800587a <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007856:	4b13      	ldr	r3, [pc, #76]	; (80078a4 <prvCheckForValidListAndQueue+0x6c>)
 8007858:	4a10      	ldr	r2, [pc, #64]	; (800789c <prvCheckForValidListAndQueue+0x64>)
 800785a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800785c:	4b12      	ldr	r3, [pc, #72]	; (80078a8 <prvCheckForValidListAndQueue+0x70>)
 800785e:	4a10      	ldr	r2, [pc, #64]	; (80078a0 <prvCheckForValidListAndQueue+0x68>)
 8007860:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007862:	2300      	movs	r3, #0
 8007864:	9300      	str	r3, [sp, #0]
 8007866:	4b11      	ldr	r3, [pc, #68]	; (80078ac <prvCheckForValidListAndQueue+0x74>)
 8007868:	4a11      	ldr	r2, [pc, #68]	; (80078b0 <prvCheckForValidListAndQueue+0x78>)
 800786a:	2110      	movs	r1, #16
 800786c:	200a      	movs	r0, #10
 800786e:	f7fe f921 	bl	8005ab4 <xQueueGenericCreateStatic>
 8007872:	4603      	mov	r3, r0
 8007874:	4a08      	ldr	r2, [pc, #32]	; (8007898 <prvCheckForValidListAndQueue+0x60>)
 8007876:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007878:	4b07      	ldr	r3, [pc, #28]	; (8007898 <prvCheckForValidListAndQueue+0x60>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d005      	beq.n	800788c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007880:	4b05      	ldr	r3, [pc, #20]	; (8007898 <prvCheckForValidListAndQueue+0x60>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	490b      	ldr	r1, [pc, #44]	; (80078b4 <prvCheckForValidListAndQueue+0x7c>)
 8007886:	4618      	mov	r0, r3
 8007888:	f7fe fd30 	bl	80062ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800788c:	f000 f972 	bl	8007b74 <vPortExitCritical>
}
 8007890:	bf00      	nop
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}
 8007896:	bf00      	nop
 8007898:	20000b20 	.word	0x20000b20
 800789c:	20000af0 	.word	0x20000af0
 80078a0:	20000b04 	.word	0x20000b04
 80078a4:	20000b18 	.word	0x20000b18
 80078a8:	20000b1c 	.word	0x20000b1c
 80078ac:	20000bcc 	.word	0x20000bcc
 80078b0:	20000b2c 	.word	0x20000b2c
 80078b4:	08008374 	.word	0x08008374

080078b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80078b8:	b480      	push	{r7}
 80078ba:	b085      	sub	sp, #20
 80078bc:	af00      	add	r7, sp, #0
 80078be:	60f8      	str	r0, [r7, #12]
 80078c0:	60b9      	str	r1, [r7, #8]
 80078c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	3b04      	subs	r3, #4
 80078c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80078d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	3b04      	subs	r3, #4
 80078d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	f023 0201 	bic.w	r2, r3, #1
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	3b04      	subs	r3, #4
 80078e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80078e8:	4a0c      	ldr	r2, [pc, #48]	; (800791c <pxPortInitialiseStack+0x64>)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	3b14      	subs	r3, #20
 80078f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	3b04      	subs	r3, #4
 80078fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f06f 0202 	mvn.w	r2, #2
 8007906:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	3b20      	subs	r3, #32
 800790c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800790e:	68fb      	ldr	r3, [r7, #12]
}
 8007910:	4618      	mov	r0, r3
 8007912:	3714      	adds	r7, #20
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr
 800791c:	08007921 	.word	0x08007921

08007920 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007920:	b480      	push	{r7}
 8007922:	b085      	sub	sp, #20
 8007924:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007926:	2300      	movs	r3, #0
 8007928:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800792a:	4b12      	ldr	r3, [pc, #72]	; (8007974 <prvTaskExitError+0x54>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007932:	d00a      	beq.n	800794a <prvTaskExitError+0x2a>
	__asm volatile
 8007934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007938:	f383 8811 	msr	BASEPRI, r3
 800793c:	f3bf 8f6f 	isb	sy
 8007940:	f3bf 8f4f 	dsb	sy
 8007944:	60fb      	str	r3, [r7, #12]
}
 8007946:	bf00      	nop
 8007948:	e7fe      	b.n	8007948 <prvTaskExitError+0x28>
	__asm volatile
 800794a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800794e:	f383 8811 	msr	BASEPRI, r3
 8007952:	f3bf 8f6f 	isb	sy
 8007956:	f3bf 8f4f 	dsb	sy
 800795a:	60bb      	str	r3, [r7, #8]
}
 800795c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800795e:	bf00      	nop
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d0fc      	beq.n	8007960 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007966:	bf00      	nop
 8007968:	bf00      	nop
 800796a:	3714      	adds	r7, #20
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr
 8007974:	2000000c 	.word	0x2000000c
	...

08007980 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007980:	4b07      	ldr	r3, [pc, #28]	; (80079a0 <pxCurrentTCBConst2>)
 8007982:	6819      	ldr	r1, [r3, #0]
 8007984:	6808      	ldr	r0, [r1, #0]
 8007986:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800798a:	f380 8809 	msr	PSP, r0
 800798e:	f3bf 8f6f 	isb	sy
 8007992:	f04f 0000 	mov.w	r0, #0
 8007996:	f380 8811 	msr	BASEPRI, r0
 800799a:	4770      	bx	lr
 800799c:	f3af 8000 	nop.w

080079a0 <pxCurrentTCBConst2>:
 80079a0:	200009c4 	.word	0x200009c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80079a4:	bf00      	nop
 80079a6:	bf00      	nop

080079a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80079a8:	4808      	ldr	r0, [pc, #32]	; (80079cc <prvPortStartFirstTask+0x24>)
 80079aa:	6800      	ldr	r0, [r0, #0]
 80079ac:	6800      	ldr	r0, [r0, #0]
 80079ae:	f380 8808 	msr	MSP, r0
 80079b2:	f04f 0000 	mov.w	r0, #0
 80079b6:	f380 8814 	msr	CONTROL, r0
 80079ba:	b662      	cpsie	i
 80079bc:	b661      	cpsie	f
 80079be:	f3bf 8f4f 	dsb	sy
 80079c2:	f3bf 8f6f 	isb	sy
 80079c6:	df00      	svc	0
 80079c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80079ca:	bf00      	nop
 80079cc:	e000ed08 	.word	0xe000ed08

080079d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b086      	sub	sp, #24
 80079d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80079d6:	4b46      	ldr	r3, [pc, #280]	; (8007af0 <xPortStartScheduler+0x120>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a46      	ldr	r2, [pc, #280]	; (8007af4 <xPortStartScheduler+0x124>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d10a      	bne.n	80079f6 <xPortStartScheduler+0x26>
	__asm volatile
 80079e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e4:	f383 8811 	msr	BASEPRI, r3
 80079e8:	f3bf 8f6f 	isb	sy
 80079ec:	f3bf 8f4f 	dsb	sy
 80079f0:	613b      	str	r3, [r7, #16]
}
 80079f2:	bf00      	nop
 80079f4:	e7fe      	b.n	80079f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80079f6:	4b3e      	ldr	r3, [pc, #248]	; (8007af0 <xPortStartScheduler+0x120>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a3f      	ldr	r2, [pc, #252]	; (8007af8 <xPortStartScheduler+0x128>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d10a      	bne.n	8007a16 <xPortStartScheduler+0x46>
	__asm volatile
 8007a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a04:	f383 8811 	msr	BASEPRI, r3
 8007a08:	f3bf 8f6f 	isb	sy
 8007a0c:	f3bf 8f4f 	dsb	sy
 8007a10:	60fb      	str	r3, [r7, #12]
}
 8007a12:	bf00      	nop
 8007a14:	e7fe      	b.n	8007a14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007a16:	4b39      	ldr	r3, [pc, #228]	; (8007afc <xPortStartScheduler+0x12c>)
 8007a18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	22ff      	movs	r2, #255	; 0xff
 8007a26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	b2db      	uxtb	r3, r3
 8007a2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007a30:	78fb      	ldrb	r3, [r7, #3]
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007a38:	b2da      	uxtb	r2, r3
 8007a3a:	4b31      	ldr	r3, [pc, #196]	; (8007b00 <xPortStartScheduler+0x130>)
 8007a3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007a3e:	4b31      	ldr	r3, [pc, #196]	; (8007b04 <xPortStartScheduler+0x134>)
 8007a40:	2207      	movs	r2, #7
 8007a42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a44:	e009      	b.n	8007a5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007a46:	4b2f      	ldr	r3, [pc, #188]	; (8007b04 <xPortStartScheduler+0x134>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	3b01      	subs	r3, #1
 8007a4c:	4a2d      	ldr	r2, [pc, #180]	; (8007b04 <xPortStartScheduler+0x134>)
 8007a4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007a50:	78fb      	ldrb	r3, [r7, #3]
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	005b      	lsls	r3, r3, #1
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a5a:	78fb      	ldrb	r3, [r7, #3]
 8007a5c:	b2db      	uxtb	r3, r3
 8007a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a62:	2b80      	cmp	r3, #128	; 0x80
 8007a64:	d0ef      	beq.n	8007a46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007a66:	4b27      	ldr	r3, [pc, #156]	; (8007b04 <xPortStartScheduler+0x134>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f1c3 0307 	rsb	r3, r3, #7
 8007a6e:	2b04      	cmp	r3, #4
 8007a70:	d00a      	beq.n	8007a88 <xPortStartScheduler+0xb8>
	__asm volatile
 8007a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a76:	f383 8811 	msr	BASEPRI, r3
 8007a7a:	f3bf 8f6f 	isb	sy
 8007a7e:	f3bf 8f4f 	dsb	sy
 8007a82:	60bb      	str	r3, [r7, #8]
}
 8007a84:	bf00      	nop
 8007a86:	e7fe      	b.n	8007a86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007a88:	4b1e      	ldr	r3, [pc, #120]	; (8007b04 <xPortStartScheduler+0x134>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	021b      	lsls	r3, r3, #8
 8007a8e:	4a1d      	ldr	r2, [pc, #116]	; (8007b04 <xPortStartScheduler+0x134>)
 8007a90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007a92:	4b1c      	ldr	r3, [pc, #112]	; (8007b04 <xPortStartScheduler+0x134>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007a9a:	4a1a      	ldr	r2, [pc, #104]	; (8007b04 <xPortStartScheduler+0x134>)
 8007a9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	b2da      	uxtb	r2, r3
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007aa6:	4b18      	ldr	r3, [pc, #96]	; (8007b08 <xPortStartScheduler+0x138>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a17      	ldr	r2, [pc, #92]	; (8007b08 <xPortStartScheduler+0x138>)
 8007aac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007ab0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007ab2:	4b15      	ldr	r3, [pc, #84]	; (8007b08 <xPortStartScheduler+0x138>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a14      	ldr	r2, [pc, #80]	; (8007b08 <xPortStartScheduler+0x138>)
 8007ab8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007abc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007abe:	f000 f8dd 	bl	8007c7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007ac2:	4b12      	ldr	r3, [pc, #72]	; (8007b0c <xPortStartScheduler+0x13c>)
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007ac8:	f000 f8fc 	bl	8007cc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007acc:	4b10      	ldr	r3, [pc, #64]	; (8007b10 <xPortStartScheduler+0x140>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a0f      	ldr	r2, [pc, #60]	; (8007b10 <xPortStartScheduler+0x140>)
 8007ad2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007ad6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007ad8:	f7ff ff66 	bl	80079a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007adc:	f7ff f800 	bl	8006ae0 <vTaskSwitchContext>
	prvTaskExitError();
 8007ae0:	f7ff ff1e 	bl	8007920 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007ae4:	2300      	movs	r3, #0
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3718      	adds	r7, #24
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
 8007aee:	bf00      	nop
 8007af0:	e000ed00 	.word	0xe000ed00
 8007af4:	410fc271 	.word	0x410fc271
 8007af8:	410fc270 	.word	0x410fc270
 8007afc:	e000e400 	.word	0xe000e400
 8007b00:	20000c14 	.word	0x20000c14
 8007b04:	20000c18 	.word	0x20000c18
 8007b08:	e000ed20 	.word	0xe000ed20
 8007b0c:	2000000c 	.word	0x2000000c
 8007b10:	e000ef34 	.word	0xe000ef34

08007b14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
	__asm volatile
 8007b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b1e:	f383 8811 	msr	BASEPRI, r3
 8007b22:	f3bf 8f6f 	isb	sy
 8007b26:	f3bf 8f4f 	dsb	sy
 8007b2a:	607b      	str	r3, [r7, #4]
}
 8007b2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007b2e:	4b0f      	ldr	r3, [pc, #60]	; (8007b6c <vPortEnterCritical+0x58>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	3301      	adds	r3, #1
 8007b34:	4a0d      	ldr	r2, [pc, #52]	; (8007b6c <vPortEnterCritical+0x58>)
 8007b36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007b38:	4b0c      	ldr	r3, [pc, #48]	; (8007b6c <vPortEnterCritical+0x58>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d10f      	bne.n	8007b60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007b40:	4b0b      	ldr	r3, [pc, #44]	; (8007b70 <vPortEnterCritical+0x5c>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	b2db      	uxtb	r3, r3
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d00a      	beq.n	8007b60 <vPortEnterCritical+0x4c>
	__asm volatile
 8007b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b4e:	f383 8811 	msr	BASEPRI, r3
 8007b52:	f3bf 8f6f 	isb	sy
 8007b56:	f3bf 8f4f 	dsb	sy
 8007b5a:	603b      	str	r3, [r7, #0]
}
 8007b5c:	bf00      	nop
 8007b5e:	e7fe      	b.n	8007b5e <vPortEnterCritical+0x4a>
	}
}
 8007b60:	bf00      	nop
 8007b62:	370c      	adds	r7, #12
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr
 8007b6c:	2000000c 	.word	0x2000000c
 8007b70:	e000ed04 	.word	0xe000ed04

08007b74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007b7a:	4b12      	ldr	r3, [pc, #72]	; (8007bc4 <vPortExitCritical+0x50>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d10a      	bne.n	8007b98 <vPortExitCritical+0x24>
	__asm volatile
 8007b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b86:	f383 8811 	msr	BASEPRI, r3
 8007b8a:	f3bf 8f6f 	isb	sy
 8007b8e:	f3bf 8f4f 	dsb	sy
 8007b92:	607b      	str	r3, [r7, #4]
}
 8007b94:	bf00      	nop
 8007b96:	e7fe      	b.n	8007b96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007b98:	4b0a      	ldr	r3, [pc, #40]	; (8007bc4 <vPortExitCritical+0x50>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	3b01      	subs	r3, #1
 8007b9e:	4a09      	ldr	r2, [pc, #36]	; (8007bc4 <vPortExitCritical+0x50>)
 8007ba0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007ba2:	4b08      	ldr	r3, [pc, #32]	; (8007bc4 <vPortExitCritical+0x50>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d105      	bne.n	8007bb6 <vPortExitCritical+0x42>
 8007baa:	2300      	movs	r3, #0
 8007bac:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	f383 8811 	msr	BASEPRI, r3
}
 8007bb4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007bb6:	bf00      	nop
 8007bb8:	370c      	adds	r7, #12
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr
 8007bc2:	bf00      	nop
 8007bc4:	2000000c 	.word	0x2000000c
	...

08007bd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007bd0:	f3ef 8009 	mrs	r0, PSP
 8007bd4:	f3bf 8f6f 	isb	sy
 8007bd8:	4b15      	ldr	r3, [pc, #84]	; (8007c30 <pxCurrentTCBConst>)
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	f01e 0f10 	tst.w	lr, #16
 8007be0:	bf08      	it	eq
 8007be2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007be6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bea:	6010      	str	r0, [r2, #0]
 8007bec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007bf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007bf4:	f380 8811 	msr	BASEPRI, r0
 8007bf8:	f3bf 8f4f 	dsb	sy
 8007bfc:	f3bf 8f6f 	isb	sy
 8007c00:	f7fe ff6e 	bl	8006ae0 <vTaskSwitchContext>
 8007c04:	f04f 0000 	mov.w	r0, #0
 8007c08:	f380 8811 	msr	BASEPRI, r0
 8007c0c:	bc09      	pop	{r0, r3}
 8007c0e:	6819      	ldr	r1, [r3, #0]
 8007c10:	6808      	ldr	r0, [r1, #0]
 8007c12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c16:	f01e 0f10 	tst.w	lr, #16
 8007c1a:	bf08      	it	eq
 8007c1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007c20:	f380 8809 	msr	PSP, r0
 8007c24:	f3bf 8f6f 	isb	sy
 8007c28:	4770      	bx	lr
 8007c2a:	bf00      	nop
 8007c2c:	f3af 8000 	nop.w

08007c30 <pxCurrentTCBConst>:
 8007c30:	200009c4 	.word	0x200009c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007c34:	bf00      	nop
 8007c36:	bf00      	nop

08007c38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b082      	sub	sp, #8
 8007c3c:	af00      	add	r7, sp, #0
	__asm volatile
 8007c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c42:	f383 8811 	msr	BASEPRI, r3
 8007c46:	f3bf 8f6f 	isb	sy
 8007c4a:	f3bf 8f4f 	dsb	sy
 8007c4e:	607b      	str	r3, [r7, #4]
}
 8007c50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007c52:	f7fe fe87 	bl	8006964 <xTaskIncrementTick>
 8007c56:	4603      	mov	r3, r0
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d003      	beq.n	8007c64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007c5c:	4b06      	ldr	r3, [pc, #24]	; (8007c78 <SysTick_Handler+0x40>)
 8007c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c62:	601a      	str	r2, [r3, #0]
 8007c64:	2300      	movs	r3, #0
 8007c66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	f383 8811 	msr	BASEPRI, r3
}
 8007c6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007c70:	bf00      	nop
 8007c72:	3708      	adds	r7, #8
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}
 8007c78:	e000ed04 	.word	0xe000ed04

08007c7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007c80:	4b0b      	ldr	r3, [pc, #44]	; (8007cb0 <vPortSetupTimerInterrupt+0x34>)
 8007c82:	2200      	movs	r2, #0
 8007c84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007c86:	4b0b      	ldr	r3, [pc, #44]	; (8007cb4 <vPortSetupTimerInterrupt+0x38>)
 8007c88:	2200      	movs	r2, #0
 8007c8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007c8c:	4b0a      	ldr	r3, [pc, #40]	; (8007cb8 <vPortSetupTimerInterrupt+0x3c>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a0a      	ldr	r2, [pc, #40]	; (8007cbc <vPortSetupTimerInterrupt+0x40>)
 8007c92:	fba2 2303 	umull	r2, r3, r2, r3
 8007c96:	099b      	lsrs	r3, r3, #6
 8007c98:	4a09      	ldr	r2, [pc, #36]	; (8007cc0 <vPortSetupTimerInterrupt+0x44>)
 8007c9a:	3b01      	subs	r3, #1
 8007c9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007c9e:	4b04      	ldr	r3, [pc, #16]	; (8007cb0 <vPortSetupTimerInterrupt+0x34>)
 8007ca0:	2207      	movs	r2, #7
 8007ca2:	601a      	str	r2, [r3, #0]
}
 8007ca4:	bf00      	nop
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cac:	4770      	bx	lr
 8007cae:	bf00      	nop
 8007cb0:	e000e010 	.word	0xe000e010
 8007cb4:	e000e018 	.word	0xe000e018
 8007cb8:	20000000 	.word	0x20000000
 8007cbc:	10624dd3 	.word	0x10624dd3
 8007cc0:	e000e014 	.word	0xe000e014

08007cc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007cc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007cd4 <vPortEnableVFP+0x10>
 8007cc8:	6801      	ldr	r1, [r0, #0]
 8007cca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007cce:	6001      	str	r1, [r0, #0]
 8007cd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007cd2:	bf00      	nop
 8007cd4:	e000ed88 	.word	0xe000ed88

08007cd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007cd8:	b480      	push	{r7}
 8007cda:	b085      	sub	sp, #20
 8007cdc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007cde:	f3ef 8305 	mrs	r3, IPSR
 8007ce2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2b0f      	cmp	r3, #15
 8007ce8:	d914      	bls.n	8007d14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007cea:	4a17      	ldr	r2, [pc, #92]	; (8007d48 <vPortValidateInterruptPriority+0x70>)
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	4413      	add	r3, r2
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007cf4:	4b15      	ldr	r3, [pc, #84]	; (8007d4c <vPortValidateInterruptPriority+0x74>)
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	7afa      	ldrb	r2, [r7, #11]
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d20a      	bcs.n	8007d14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d02:	f383 8811 	msr	BASEPRI, r3
 8007d06:	f3bf 8f6f 	isb	sy
 8007d0a:	f3bf 8f4f 	dsb	sy
 8007d0e:	607b      	str	r3, [r7, #4]
}
 8007d10:	bf00      	nop
 8007d12:	e7fe      	b.n	8007d12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007d14:	4b0e      	ldr	r3, [pc, #56]	; (8007d50 <vPortValidateInterruptPriority+0x78>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007d1c:	4b0d      	ldr	r3, [pc, #52]	; (8007d54 <vPortValidateInterruptPriority+0x7c>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d90a      	bls.n	8007d3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d28:	f383 8811 	msr	BASEPRI, r3
 8007d2c:	f3bf 8f6f 	isb	sy
 8007d30:	f3bf 8f4f 	dsb	sy
 8007d34:	603b      	str	r3, [r7, #0]
}
 8007d36:	bf00      	nop
 8007d38:	e7fe      	b.n	8007d38 <vPortValidateInterruptPriority+0x60>
	}
 8007d3a:	bf00      	nop
 8007d3c:	3714      	adds	r7, #20
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d44:	4770      	bx	lr
 8007d46:	bf00      	nop
 8007d48:	e000e3f0 	.word	0xe000e3f0
 8007d4c:	20000c14 	.word	0x20000c14
 8007d50:	e000ed0c 	.word	0xe000ed0c
 8007d54:	20000c18 	.word	0x20000c18

08007d58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b08a      	sub	sp, #40	; 0x28
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007d60:	2300      	movs	r3, #0
 8007d62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007d64:	f7fe fd44 	bl	80067f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007d68:	4b58      	ldr	r3, [pc, #352]	; (8007ecc <pvPortMalloc+0x174>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d101      	bne.n	8007d74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007d70:	f000 f910 	bl	8007f94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007d74:	4b56      	ldr	r3, [pc, #344]	; (8007ed0 <pvPortMalloc+0x178>)
 8007d76:	681a      	ldr	r2, [r3, #0]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	4013      	ands	r3, r2
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	f040 808e 	bne.w	8007e9e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d01d      	beq.n	8007dc4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007d88:	2208      	movs	r2, #8
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4413      	add	r3, r2
 8007d8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f003 0307 	and.w	r3, r3, #7
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d014      	beq.n	8007dc4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f023 0307 	bic.w	r3, r3, #7
 8007da0:	3308      	adds	r3, #8
 8007da2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f003 0307 	and.w	r3, r3, #7
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d00a      	beq.n	8007dc4 <pvPortMalloc+0x6c>
	__asm volatile
 8007dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db2:	f383 8811 	msr	BASEPRI, r3
 8007db6:	f3bf 8f6f 	isb	sy
 8007dba:	f3bf 8f4f 	dsb	sy
 8007dbe:	617b      	str	r3, [r7, #20]
}
 8007dc0:	bf00      	nop
 8007dc2:	e7fe      	b.n	8007dc2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d069      	beq.n	8007e9e <pvPortMalloc+0x146>
 8007dca:	4b42      	ldr	r3, [pc, #264]	; (8007ed4 <pvPortMalloc+0x17c>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	687a      	ldr	r2, [r7, #4]
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d864      	bhi.n	8007e9e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007dd4:	4b40      	ldr	r3, [pc, #256]	; (8007ed8 <pvPortMalloc+0x180>)
 8007dd6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007dd8:	4b3f      	ldr	r3, [pc, #252]	; (8007ed8 <pvPortMalloc+0x180>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007dde:	e004      	b.n	8007dea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	429a      	cmp	r2, r3
 8007df2:	d903      	bls.n	8007dfc <pvPortMalloc+0xa4>
 8007df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d1f1      	bne.n	8007de0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007dfc:	4b33      	ldr	r3, [pc, #204]	; (8007ecc <pvPortMalloc+0x174>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d04b      	beq.n	8007e9e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007e06:	6a3b      	ldr	r3, [r7, #32]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	2208      	movs	r2, #8
 8007e0c:	4413      	add	r3, r2
 8007e0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e12:	681a      	ldr	r2, [r3, #0]
 8007e14:	6a3b      	ldr	r3, [r7, #32]
 8007e16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1a:	685a      	ldr	r2, [r3, #4]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	1ad2      	subs	r2, r2, r3
 8007e20:	2308      	movs	r3, #8
 8007e22:	005b      	lsls	r3, r3, #1
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d91f      	bls.n	8007e68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e30:	69bb      	ldr	r3, [r7, #24]
 8007e32:	f003 0307 	and.w	r3, r3, #7
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d00a      	beq.n	8007e50 <pvPortMalloc+0xf8>
	__asm volatile
 8007e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e3e:	f383 8811 	msr	BASEPRI, r3
 8007e42:	f3bf 8f6f 	isb	sy
 8007e46:	f3bf 8f4f 	dsb	sy
 8007e4a:	613b      	str	r3, [r7, #16]
}
 8007e4c:	bf00      	nop
 8007e4e:	e7fe      	b.n	8007e4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e52:	685a      	ldr	r2, [r3, #4]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	1ad2      	subs	r2, r2, r3
 8007e58:	69bb      	ldr	r3, [r7, #24]
 8007e5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007e62:	69b8      	ldr	r0, [r7, #24]
 8007e64:	f000 f8f8 	bl	8008058 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007e68:	4b1a      	ldr	r3, [pc, #104]	; (8007ed4 <pvPortMalloc+0x17c>)
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	1ad3      	subs	r3, r2, r3
 8007e72:	4a18      	ldr	r2, [pc, #96]	; (8007ed4 <pvPortMalloc+0x17c>)
 8007e74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007e76:	4b17      	ldr	r3, [pc, #92]	; (8007ed4 <pvPortMalloc+0x17c>)
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	4b18      	ldr	r3, [pc, #96]	; (8007edc <pvPortMalloc+0x184>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d203      	bcs.n	8007e8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007e82:	4b14      	ldr	r3, [pc, #80]	; (8007ed4 <pvPortMalloc+0x17c>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a15      	ldr	r2, [pc, #84]	; (8007edc <pvPortMalloc+0x184>)
 8007e88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8c:	685a      	ldr	r2, [r3, #4]
 8007e8e:	4b10      	ldr	r3, [pc, #64]	; (8007ed0 <pvPortMalloc+0x178>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	431a      	orrs	r2, r3
 8007e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007e9e:	f7fe fcb5 	bl	800680c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ea2:	69fb      	ldr	r3, [r7, #28]
 8007ea4:	f003 0307 	and.w	r3, r3, #7
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d00a      	beq.n	8007ec2 <pvPortMalloc+0x16a>
	__asm volatile
 8007eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb0:	f383 8811 	msr	BASEPRI, r3
 8007eb4:	f3bf 8f6f 	isb	sy
 8007eb8:	f3bf 8f4f 	dsb	sy
 8007ebc:	60fb      	str	r3, [r7, #12]
}
 8007ebe:	bf00      	nop
 8007ec0:	e7fe      	b.n	8007ec0 <pvPortMalloc+0x168>
	return pvReturn;
 8007ec2:	69fb      	ldr	r3, [r7, #28]
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3728      	adds	r7, #40	; 0x28
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}
 8007ecc:	20002c24 	.word	0x20002c24
 8007ed0:	20002c30 	.word	0x20002c30
 8007ed4:	20002c28 	.word	0x20002c28
 8007ed8:	20002c1c 	.word	0x20002c1c
 8007edc:	20002c2c 	.word	0x20002c2c

08007ee0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b086      	sub	sp, #24
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d048      	beq.n	8007f84 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007ef2:	2308      	movs	r3, #8
 8007ef4:	425b      	negs	r3, r3
 8007ef6:	697a      	ldr	r2, [r7, #20]
 8007ef8:	4413      	add	r3, r2
 8007efa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	685a      	ldr	r2, [r3, #4]
 8007f04:	4b21      	ldr	r3, [pc, #132]	; (8007f8c <vPortFree+0xac>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4013      	ands	r3, r2
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d10a      	bne.n	8007f24 <vPortFree+0x44>
	__asm volatile
 8007f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f12:	f383 8811 	msr	BASEPRI, r3
 8007f16:	f3bf 8f6f 	isb	sy
 8007f1a:	f3bf 8f4f 	dsb	sy
 8007f1e:	60fb      	str	r3, [r7, #12]
}
 8007f20:	bf00      	nop
 8007f22:	e7fe      	b.n	8007f22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d00a      	beq.n	8007f42 <vPortFree+0x62>
	__asm volatile
 8007f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f30:	f383 8811 	msr	BASEPRI, r3
 8007f34:	f3bf 8f6f 	isb	sy
 8007f38:	f3bf 8f4f 	dsb	sy
 8007f3c:	60bb      	str	r3, [r7, #8]
}
 8007f3e:	bf00      	nop
 8007f40:	e7fe      	b.n	8007f40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	685a      	ldr	r2, [r3, #4]
 8007f46:	4b11      	ldr	r3, [pc, #68]	; (8007f8c <vPortFree+0xac>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4013      	ands	r3, r2
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d019      	beq.n	8007f84 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d115      	bne.n	8007f84 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	685a      	ldr	r2, [r3, #4]
 8007f5c:	4b0b      	ldr	r3, [pc, #44]	; (8007f8c <vPortFree+0xac>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	43db      	mvns	r3, r3
 8007f62:	401a      	ands	r2, r3
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007f68:	f7fe fc42 	bl	80067f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	685a      	ldr	r2, [r3, #4]
 8007f70:	4b07      	ldr	r3, [pc, #28]	; (8007f90 <vPortFree+0xb0>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4413      	add	r3, r2
 8007f76:	4a06      	ldr	r2, [pc, #24]	; (8007f90 <vPortFree+0xb0>)
 8007f78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007f7a:	6938      	ldr	r0, [r7, #16]
 8007f7c:	f000 f86c 	bl	8008058 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007f80:	f7fe fc44 	bl	800680c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007f84:	bf00      	nop
 8007f86:	3718      	adds	r7, #24
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}
 8007f8c:	20002c30 	.word	0x20002c30
 8007f90:	20002c28 	.word	0x20002c28

08007f94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007f94:	b480      	push	{r7}
 8007f96:	b085      	sub	sp, #20
 8007f98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007f9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007f9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007fa0:	4b27      	ldr	r3, [pc, #156]	; (8008040 <prvHeapInit+0xac>)
 8007fa2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f003 0307 	and.w	r3, r3, #7
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d00c      	beq.n	8007fc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	3307      	adds	r3, #7
 8007fb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f023 0307 	bic.w	r3, r3, #7
 8007fba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007fbc:	68ba      	ldr	r2, [r7, #8]
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	1ad3      	subs	r3, r2, r3
 8007fc2:	4a1f      	ldr	r2, [pc, #124]	; (8008040 <prvHeapInit+0xac>)
 8007fc4:	4413      	add	r3, r2
 8007fc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007fcc:	4a1d      	ldr	r2, [pc, #116]	; (8008044 <prvHeapInit+0xb0>)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007fd2:	4b1c      	ldr	r3, [pc, #112]	; (8008044 <prvHeapInit+0xb0>)
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	68ba      	ldr	r2, [r7, #8]
 8007fdc:	4413      	add	r3, r2
 8007fde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007fe0:	2208      	movs	r2, #8
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	1a9b      	subs	r3, r3, r2
 8007fe6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f023 0307 	bic.w	r3, r3, #7
 8007fee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	4a15      	ldr	r2, [pc, #84]	; (8008048 <prvHeapInit+0xb4>)
 8007ff4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007ff6:	4b14      	ldr	r3, [pc, #80]	; (8008048 <prvHeapInit+0xb4>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007ffe:	4b12      	ldr	r3, [pc, #72]	; (8008048 <prvHeapInit+0xb4>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	2200      	movs	r2, #0
 8008004:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	68fa      	ldr	r2, [r7, #12]
 800800e:	1ad2      	subs	r2, r2, r3
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008014:	4b0c      	ldr	r3, [pc, #48]	; (8008048 <prvHeapInit+0xb4>)
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	4a0a      	ldr	r2, [pc, #40]	; (800804c <prvHeapInit+0xb8>)
 8008022:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	4a09      	ldr	r2, [pc, #36]	; (8008050 <prvHeapInit+0xbc>)
 800802a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800802c:	4b09      	ldr	r3, [pc, #36]	; (8008054 <prvHeapInit+0xc0>)
 800802e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008032:	601a      	str	r2, [r3, #0]
}
 8008034:	bf00      	nop
 8008036:	3714      	adds	r7, #20
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr
 8008040:	20000c1c 	.word	0x20000c1c
 8008044:	20002c1c 	.word	0x20002c1c
 8008048:	20002c24 	.word	0x20002c24
 800804c:	20002c2c 	.word	0x20002c2c
 8008050:	20002c28 	.word	0x20002c28
 8008054:	20002c30 	.word	0x20002c30

08008058 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008058:	b480      	push	{r7}
 800805a:	b085      	sub	sp, #20
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008060:	4b28      	ldr	r3, [pc, #160]	; (8008104 <prvInsertBlockIntoFreeList+0xac>)
 8008062:	60fb      	str	r3, [r7, #12]
 8008064:	e002      	b.n	800806c <prvInsertBlockIntoFreeList+0x14>
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	60fb      	str	r3, [r7, #12]
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	687a      	ldr	r2, [r7, #4]
 8008072:	429a      	cmp	r2, r3
 8008074:	d8f7      	bhi.n	8008066 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	68ba      	ldr	r2, [r7, #8]
 8008080:	4413      	add	r3, r2
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	429a      	cmp	r2, r3
 8008086:	d108      	bne.n	800809a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	685a      	ldr	r2, [r3, #4]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	441a      	add	r2, r3
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	68ba      	ldr	r2, [r7, #8]
 80080a4:	441a      	add	r2, r3
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d118      	bne.n	80080e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681a      	ldr	r2, [r3, #0]
 80080b2:	4b15      	ldr	r3, [pc, #84]	; (8008108 <prvInsertBlockIntoFreeList+0xb0>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d00d      	beq.n	80080d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	685a      	ldr	r2, [r3, #4]
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	441a      	add	r2, r3
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	601a      	str	r2, [r3, #0]
 80080d4:	e008      	b.n	80080e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80080d6:	4b0c      	ldr	r3, [pc, #48]	; (8008108 <prvInsertBlockIntoFreeList+0xb0>)
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	601a      	str	r2, [r3, #0]
 80080de:	e003      	b.n	80080e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681a      	ldr	r2, [r3, #0]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80080e8:	68fa      	ldr	r2, [r7, #12]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d002      	beq.n	80080f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	687a      	ldr	r2, [r7, #4]
 80080f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80080f6:	bf00      	nop
 80080f8:	3714      	adds	r7, #20
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr
 8008102:	bf00      	nop
 8008104:	20002c1c 	.word	0x20002c1c
 8008108:	20002c24 	.word	0x20002c24

0800810c <memset>:
 800810c:	4402      	add	r2, r0
 800810e:	4603      	mov	r3, r0
 8008110:	4293      	cmp	r3, r2
 8008112:	d100      	bne.n	8008116 <memset+0xa>
 8008114:	4770      	bx	lr
 8008116:	f803 1b01 	strb.w	r1, [r3], #1
 800811a:	e7f9      	b.n	8008110 <memset+0x4>

0800811c <__libc_init_array>:
 800811c:	b570      	push	{r4, r5, r6, lr}
 800811e:	4d0d      	ldr	r5, [pc, #52]	; (8008154 <__libc_init_array+0x38>)
 8008120:	4c0d      	ldr	r4, [pc, #52]	; (8008158 <__libc_init_array+0x3c>)
 8008122:	1b64      	subs	r4, r4, r5
 8008124:	10a4      	asrs	r4, r4, #2
 8008126:	2600      	movs	r6, #0
 8008128:	42a6      	cmp	r6, r4
 800812a:	d109      	bne.n	8008140 <__libc_init_array+0x24>
 800812c:	4d0b      	ldr	r5, [pc, #44]	; (800815c <__libc_init_array+0x40>)
 800812e:	4c0c      	ldr	r4, [pc, #48]	; (8008160 <__libc_init_array+0x44>)
 8008130:	f000 f826 	bl	8008180 <_init>
 8008134:	1b64      	subs	r4, r4, r5
 8008136:	10a4      	asrs	r4, r4, #2
 8008138:	2600      	movs	r6, #0
 800813a:	42a6      	cmp	r6, r4
 800813c:	d105      	bne.n	800814a <__libc_init_array+0x2e>
 800813e:	bd70      	pop	{r4, r5, r6, pc}
 8008140:	f855 3b04 	ldr.w	r3, [r5], #4
 8008144:	4798      	blx	r3
 8008146:	3601      	adds	r6, #1
 8008148:	e7ee      	b.n	8008128 <__libc_init_array+0xc>
 800814a:	f855 3b04 	ldr.w	r3, [r5], #4
 800814e:	4798      	blx	r3
 8008150:	3601      	adds	r6, #1
 8008152:	e7f2      	b.n	800813a <__libc_init_array+0x1e>
 8008154:	080083b4 	.word	0x080083b4
 8008158:	080083b4 	.word	0x080083b4
 800815c:	080083b4 	.word	0x080083b4
 8008160:	080083b8 	.word	0x080083b8

08008164 <memcpy>:
 8008164:	440a      	add	r2, r1
 8008166:	4291      	cmp	r1, r2
 8008168:	f100 33ff 	add.w	r3, r0, #4294967295
 800816c:	d100      	bne.n	8008170 <memcpy+0xc>
 800816e:	4770      	bx	lr
 8008170:	b510      	push	{r4, lr}
 8008172:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008176:	f803 4f01 	strb.w	r4, [r3, #1]!
 800817a:	4291      	cmp	r1, r2
 800817c:	d1f9      	bne.n	8008172 <memcpy+0xe>
 800817e:	bd10      	pop	{r4, pc}

08008180 <_init>:
 8008180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008182:	bf00      	nop
 8008184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008186:	bc08      	pop	{r3}
 8008188:	469e      	mov	lr, r3
 800818a:	4770      	bx	lr

0800818c <_fini>:
 800818c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800818e:	bf00      	nop
 8008190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008192:	bc08      	pop	{r3}
 8008194:	469e      	mov	lr, r3
 8008196:	4770      	bx	lr
