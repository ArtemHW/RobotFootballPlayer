
F301Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a08  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08007b98  08007b98  00017b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d0c  08007d0c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08007d0c  08007d0c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007d0c  08007d0c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d0c  08007d0c  00017d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d10  08007d10  00017d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007d14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000023cc  20000010  08007d24  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200023dc  08007d24  000223dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a781  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003beb  00000000  00000000  0003a804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016a0  00000000  00000000  0003e3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011a9  00000000  00000000  0003fa90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018ea4  00000000  00000000  00040c39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bb4c  00000000  00000000  00059add  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00099b80  00000000  00000000  00075629  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005ec8  00000000  00000000  0010f1ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  00115074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007b80 	.word	0x08007b80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08007b80 	.word	0x08007b80

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <sendATCommand>:

#include <espATcommands.h>


void sendATCommand(UART_HandleTypeDef *huart, const char* atcom, int sizeOfAT, char* response, int sizeOfResp, int delayms)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b086      	sub	sp, #24
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	60f8      	str	r0, [r7, #12]
 80001ec:	60b9      	str	r1, [r7, #8]
 80001ee:	607a      	str	r2, [r7, #4]
 80001f0:	603b      	str	r3, [r7, #0]
//	if(atcom[sizeOfAT-1] == '\0') {
//		sizeOfAT -= 1;
//	}
	for(uint8_t i = 0; i < sizeOfAT; i++) {
 80001f2:	2300      	movs	r3, #0
 80001f4:	75fb      	strb	r3, [r7, #23]
 80001f6:	e00b      	b.n	8000210 <sendATCommand+0x2c>
		if(atcom[i] == '\0') {
 80001f8:	7dfb      	ldrb	r3, [r7, #23]
 80001fa:	68ba      	ldr	r2, [r7, #8]
 80001fc:	4413      	add	r3, r2
 80001fe:	781b      	ldrb	r3, [r3, #0]
 8000200:	2b00      	cmp	r3, #0
 8000202:	d102      	bne.n	800020a <sendATCommand+0x26>
			sizeOfAT = i + 1;
 8000204:	7dfb      	ldrb	r3, [r7, #23]
 8000206:	3301      	adds	r3, #1
 8000208:	607b      	str	r3, [r7, #4]
	for(uint8_t i = 0; i < sizeOfAT; i++) {
 800020a:	7dfb      	ldrb	r3, [r7, #23]
 800020c:	3301      	adds	r3, #1
 800020e:	75fb      	strb	r3, [r7, #23]
 8000210:	7dfb      	ldrb	r3, [r7, #23]
 8000212:	687a      	ldr	r2, [r7, #4]
 8000214:	429a      	cmp	r2, r3
 8000216:	dcef      	bgt.n	80001f8 <sendATCommand+0x14>
		}
	}
	for(uint8_t i = 0; i < sizeOfResp; i++) {
 8000218:	2300      	movs	r3, #0
 800021a:	75bb      	strb	r3, [r7, #22]
 800021c:	e007      	b.n	800022e <sendATCommand+0x4a>
		response[i] = 0;
 800021e:	7dbb      	ldrb	r3, [r7, #22]
 8000220:	683a      	ldr	r2, [r7, #0]
 8000222:	4413      	add	r3, r2
 8000224:	2200      	movs	r2, #0
 8000226:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < sizeOfResp; i++) {
 8000228:	7dbb      	ldrb	r3, [r7, #22]
 800022a:	3301      	adds	r3, #1
 800022c:	75bb      	strb	r3, [r7, #22]
 800022e:	7dbb      	ldrb	r3, [r7, #22]
 8000230:	6a3a      	ldr	r2, [r7, #32]
 8000232:	429a      	cmp	r2, r3
 8000234:	dcf3      	bgt.n	800021e <sendATCommand+0x3a>
	}
	HAL_UART_Transmit(huart, atcom, sizeOfAT, delayms);
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	b29a      	uxth	r2, r3
 800023a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800023c:	68b9      	ldr	r1, [r7, #8]
 800023e:	68f8      	ldr	r0, [r7, #12]
 8000240:	f004 fa24 	bl	800468c <HAL_UART_Transmit>
	HAL_UART_Receive(huart, response, sizeOfResp, delayms);
 8000244:	6a3b      	ldr	r3, [r7, #32]
 8000246:	b29a      	uxth	r2, r3
 8000248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800024a:	6839      	ldr	r1, [r7, #0]
 800024c:	68f8      	ldr	r0, [r7, #12]
 800024e:	f004 faa7 	bl	80047a0 <HAL_UART_Receive>
}
 8000252:	bf00      	nop
 8000254:	3718      	adds	r7, #24
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
	...

0800025c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800025c:	b480      	push	{r7}
 800025e:	b085      	sub	sp, #20
 8000260:	af00      	add	r7, sp, #0
 8000262:	60f8      	str	r0, [r7, #12]
 8000264:	60b9      	str	r1, [r7, #8]
 8000266:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	4a07      	ldr	r2, [pc, #28]	; (8000288 <vApplicationGetIdleTaskMemory+0x2c>)
 800026c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800026e:	68bb      	ldr	r3, [r7, #8]
 8000270:	4a06      	ldr	r2, [pc, #24]	; (800028c <vApplicationGetIdleTaskMemory+0x30>)
 8000272:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	2280      	movs	r2, #128	; 0x80
 8000278:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800027a:	bf00      	nop
 800027c:	3714      	adds	r7, #20
 800027e:	46bd      	mov	sp, r7
 8000280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000284:	4770      	bx	lr
 8000286:	bf00      	nop
 8000288:	2000002c 	.word	0x2000002c
 800028c:	20000084 	.word	0x20000084

08000290 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000290:	b480      	push	{r7}
 8000292:	b085      	sub	sp, #20
 8000294:	af00      	add	r7, sp, #0
 8000296:	60f8      	str	r0, [r7, #12]
 8000298:	60b9      	str	r1, [r7, #8]
 800029a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	4a07      	ldr	r2, [pc, #28]	; (80002bc <vApplicationGetTimerTaskMemory+0x2c>)
 80002a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80002a2:	68bb      	ldr	r3, [r7, #8]
 80002a4:	4a06      	ldr	r2, [pc, #24]	; (80002c0 <vApplicationGetTimerTaskMemory+0x30>)
 80002a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002ae:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80002b0:	bf00      	nop
 80002b2:	3714      	adds	r7, #20
 80002b4:	46bd      	mov	sp, r7
 80002b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ba:	4770      	bx	lr
 80002bc:	20000284 	.word	0x20000284
 80002c0:	200002dc 	.word	0x200002dc

080002c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002c4:	b5b0      	push	{r4, r5, r7, lr}
 80002c6:	b09c      	sub	sp, #112	; 0x70
 80002c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002ca:	f001 f847 	bl	800135c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ce:	f000 f879 	bl	80003c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002d2:	f000 fa61 	bl	8000798 <MX_GPIO_Init>
  MX_TIM1_Init();
 80002d6:	f000 f969 	bl	80005ac <MX_TIM1_Init>
  MX_TIM2_Init();
 80002da:	f000 f9cd 	bl	8000678 <MX_TIM2_Init>
  MX_ADC1_Init();
 80002de:	f000 f8cb 	bl	8000478 <MX_ADC1_Init>
  MX_SPI2_Init();
 80002e2:	f000 f925 	bl	8000530 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 80002e6:	f000 fa27 	bl	8000738 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  ADC1_configuration();
 80002ea:	f000 fb01 	bl	80008f0 <ADC1_configuration>


  pc13EventGroup = xEventGroupCreate();
 80002ee:	f004 feeb 	bl	80050c8 <xEventGroupCreate>
 80002f2:	4603      	mov	r3, r0
 80002f4:	4a29      	ldr	r2, [pc, #164]	; (800039c <main+0xd8>)
 80002f6:	6013      	str	r3, [r2, #0]
  pc14EventGroup = xEventGroupCreate();
 80002f8:	f004 fee6 	bl	80050c8 <xEventGroupCreate>
 80002fc:	4603      	mov	r3, r0
 80002fe:	4a28      	ldr	r2, [pc, #160]	; (80003a0 <main+0xdc>)
 8000300:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of PS_Measure */
  osThreadDef(PS_Measure, psMeasure, osPriorityNormal, 0, 128);
 8000302:	4b28      	ldr	r3, [pc, #160]	; (80003a4 <main+0xe0>)
 8000304:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000308:	461d      	mov	r5, r3
 800030a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800030c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800030e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000312:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PS_MeasureHandle = osThreadCreate(osThread(PS_Measure), NULL);
 8000316:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800031a:	2100      	movs	r1, #0
 800031c:	4618      	mov	r0, r3
 800031e:	f004 fe73 	bl	8005008 <osThreadCreate>
 8000322:	4603      	mov	r3, r0
 8000324:	4a20      	ldr	r2, [pc, #128]	; (80003a8 <main+0xe4>)
 8000326:	6013      	str	r3, [r2, #0]

  /* definition and creation of PC_13_LED */
  osThreadDef(PC_13_LED, pc13LedCntrl, osPriorityNormal, 0, 128);
 8000328:	4b20      	ldr	r3, [pc, #128]	; (80003ac <main+0xe8>)
 800032a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800032e:	461d      	mov	r5, r3
 8000330:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000332:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000334:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000338:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PC_13_LEDHandle = osThreadCreate(osThread(PC_13_LED), NULL);
 800033c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000340:	2100      	movs	r1, #0
 8000342:	4618      	mov	r0, r3
 8000344:	f004 fe60 	bl	8005008 <osThreadCreate>
 8000348:	4603      	mov	r3, r0
 800034a:	4a19      	ldr	r2, [pc, #100]	; (80003b0 <main+0xec>)
 800034c:	6013      	str	r3, [r2, #0]

  /* definition and creation of PC_14_LED */
  osThreadDef(PC_14_LED, pc14LedCntrl, osPriorityNormal, 0, 128);
 800034e:	4b19      	ldr	r3, [pc, #100]	; (80003b4 <main+0xf0>)
 8000350:	f107 041c 	add.w	r4, r7, #28
 8000354:	461d      	mov	r5, r3
 8000356:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000358:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800035a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800035e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PC_14_LEDHandle = osThreadCreate(osThread(PC_14_LED), NULL);
 8000362:	f107 031c 	add.w	r3, r7, #28
 8000366:	2100      	movs	r1, #0
 8000368:	4618      	mov	r0, r3
 800036a:	f004 fe4d 	bl	8005008 <osThreadCreate>
 800036e:	4603      	mov	r3, r0
 8000370:	4a11      	ldr	r2, [pc, #68]	; (80003b8 <main+0xf4>)
 8000372:	6013      	str	r3, [r2, #0]

  /* definition and creation of EspCommunication */
  osThreadDef(EspCommunication, espCommunication, osPriorityNormal, 0, 256);
 8000374:	4b11      	ldr	r3, [pc, #68]	; (80003bc <main+0xf8>)
 8000376:	463c      	mov	r4, r7
 8000378:	461d      	mov	r5, r3
 800037a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800037c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800037e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000382:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EspCommunicationHandle = osThreadCreate(osThread(EspCommunication), NULL);
 8000386:	463b      	mov	r3, r7
 8000388:	2100      	movs	r1, #0
 800038a:	4618      	mov	r0, r3
 800038c:	f004 fe3c 	bl	8005008 <osThreadCreate>
 8000390:	4603      	mov	r3, r0
 8000392:	4a0b      	ldr	r2, [pc, #44]	; (80003c0 <main+0xfc>)
 8000394:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000396:	f004 fe30 	bl	8004ffa <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800039a:	e7fe      	b.n	800039a <main+0xd6>
 800039c:	200008d4 	.word	0x200008d4
 80003a0:	200008d8 	.word	0x200008d8
 80003a4:	08007ba4 	.word	0x08007ba4
 80003a8:	200008b0 	.word	0x200008b0
 80003ac:	08007bcc 	.word	0x08007bcc
 80003b0:	200008b4 	.word	0x200008b4
 80003b4:	08007bf4 	.word	0x08007bf4
 80003b8:	200008b8 	.word	0x200008b8
 80003bc:	08007c24 	.word	0x08007c24
 80003c0:	200008bc 	.word	0x200008bc

080003c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b09c      	sub	sp, #112	; 0x70
 80003c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80003ce:	2228      	movs	r2, #40	; 0x28
 80003d0:	2100      	movs	r1, #0
 80003d2:	4618      	mov	r0, r3
 80003d4:	f007 fb9a 	bl	8007b0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80003dc:	2200      	movs	r2, #0
 80003de:	601a      	str	r2, [r3, #0]
 80003e0:	605a      	str	r2, [r3, #4]
 80003e2:	609a      	str	r2, [r3, #8]
 80003e4:	60da      	str	r2, [r3, #12]
 80003e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003e8:	1d3b      	adds	r3, r7, #4
 80003ea:	2230      	movs	r2, #48	; 0x30
 80003ec:	2100      	movs	r1, #0
 80003ee:	4618      	mov	r0, r3
 80003f0:	f007 fb8c 	bl	8007b0c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003f4:	2302      	movs	r3, #2
 80003f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003f8:	2301      	movs	r3, #1
 80003fa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003fc:	2310      	movs	r3, #16
 80003fe:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000400:	2302      	movs	r3, #2
 8000402:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000404:	2300      	movs	r3, #0
 8000406:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000408:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800040c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800040e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000412:	4618      	mov	r0, r3
 8000414:	f001 ff2a 	bl	800226c <HAL_RCC_OscConfig>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800041e:	f000 fd21 	bl	8000e64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000422:	230f      	movs	r3, #15
 8000424:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000426:	2302      	movs	r3, #2
 8000428:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800042a:	2300      	movs	r3, #0
 800042c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800042e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000432:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000434:	2300      	movs	r3, #0
 8000436:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000438:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800043c:	2102      	movs	r1, #2
 800043e:	4618      	mov	r0, r3
 8000440:	f002 ff52 	bl	80032e8 <HAL_RCC_ClockConfig>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800044a:	f000 fd0b 	bl	8000e64 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC1;
 800044e:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 8000452:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000454:	2300      	movs	r3, #0
 8000456:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV2;
 8000458:	f44f 7388 	mov.w	r3, #272	; 0x110
 800045c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800045e:	1d3b      	adds	r3, r7, #4
 8000460:	4618      	mov	r0, r3
 8000462:	f003 f9a9 	bl	80037b8 <HAL_RCCEx_PeriphCLKConfig>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800046c:	f000 fcfa 	bl	8000e64 <Error_Handler>
  }
}
 8000470:	bf00      	nop
 8000472:	3770      	adds	r7, #112	; 0x70
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}

08000478 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b086      	sub	sp, #24
 800047c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800047e:	463b      	mov	r3, r7
 8000480:	2200      	movs	r2, #0
 8000482:	601a      	str	r2, [r3, #0]
 8000484:	605a      	str	r2, [r3, #4]
 8000486:	609a      	str	r2, [r3, #8]
 8000488:	60da      	str	r2, [r3, #12]
 800048a:	611a      	str	r2, [r3, #16]
 800048c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800048e:	4b27      	ldr	r3, [pc, #156]	; (800052c <MX_ADC1_Init+0xb4>)
 8000490:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000494:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000496:	4b25      	ldr	r3, [pc, #148]	; (800052c <MX_ADC1_Init+0xb4>)
 8000498:	2200      	movs	r2, #0
 800049a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800049c:	4b23      	ldr	r3, [pc, #140]	; (800052c <MX_ADC1_Init+0xb4>)
 800049e:	2200      	movs	r2, #0
 80004a0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004a2:	4b22      	ldr	r3, [pc, #136]	; (800052c <MX_ADC1_Init+0xb4>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80004a8:	4b20      	ldr	r3, [pc, #128]	; (800052c <MX_ADC1_Init+0xb4>)
 80004aa:	2201      	movs	r2, #1
 80004ac:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004ae:	4b1f      	ldr	r3, [pc, #124]	; (800052c <MX_ADC1_Init+0xb4>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004b6:	4b1d      	ldr	r3, [pc, #116]	; (800052c <MX_ADC1_Init+0xb4>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004bc:	4b1b      	ldr	r3, [pc, #108]	; (800052c <MX_ADC1_Init+0xb4>)
 80004be:	2201      	movs	r2, #1
 80004c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004c2:	4b1a      	ldr	r3, [pc, #104]	; (800052c <MX_ADC1_Init+0xb4>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80004c8:	4b18      	ldr	r3, [pc, #96]	; (800052c <MX_ADC1_Init+0xb4>)
 80004ca:	2201      	movs	r2, #1
 80004cc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80004ce:	4b17      	ldr	r3, [pc, #92]	; (800052c <MX_ADC1_Init+0xb4>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004d6:	4b15      	ldr	r3, [pc, #84]	; (800052c <MX_ADC1_Init+0xb4>)
 80004d8:	2204      	movs	r2, #4
 80004da:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80004dc:	4b13      	ldr	r3, [pc, #76]	; (800052c <MX_ADC1_Init+0xb4>)
 80004de:	2200      	movs	r2, #0
 80004e0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80004e2:	4b12      	ldr	r3, [pc, #72]	; (800052c <MX_ADC1_Init+0xb4>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004e8:	4810      	ldr	r0, [pc, #64]	; (800052c <MX_ADC1_Init+0xb4>)
 80004ea:	f000 ff91 	bl	8001410 <HAL_ADC_Init>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d001      	beq.n	80004f8 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 80004f4:	f000 fcb6 	bl	8000e64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80004f8:	2303      	movs	r3, #3
 80004fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004fc:	2301      	movs	r3, #1
 80004fe:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000500:	2300      	movs	r3, #0
 8000502:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000504:	2300      	movs	r3, #0
 8000506:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000508:	2300      	movs	r3, #0
 800050a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800050c:	2300      	movs	r3, #0
 800050e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000510:	463b      	mov	r3, r7
 8000512:	4619      	mov	r1, r3
 8000514:	4805      	ldr	r0, [pc, #20]	; (800052c <MX_ADC1_Init+0xb4>)
 8000516:	f001 f901 	bl	800171c <HAL_ADC_ConfigChannel>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000520:	f000 fca0 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000524:	bf00      	nop
 8000526:	3718      	adds	r7, #24
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	200006dc 	.word	0x200006dc

08000530 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000534:	4b1b      	ldr	r3, [pc, #108]	; (80005a4 <MX_SPI2_Init+0x74>)
 8000536:	4a1c      	ldr	r2, [pc, #112]	; (80005a8 <MX_SPI2_Init+0x78>)
 8000538:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800053a:	4b1a      	ldr	r3, [pc, #104]	; (80005a4 <MX_SPI2_Init+0x74>)
 800053c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000540:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000542:	4b18      	ldr	r3, [pc, #96]	; (80005a4 <MX_SPI2_Init+0x74>)
 8000544:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000548:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800054a:	4b16      	ldr	r3, [pc, #88]	; (80005a4 <MX_SPI2_Init+0x74>)
 800054c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000550:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000552:	4b14      	ldr	r3, [pc, #80]	; (80005a4 <MX_SPI2_Init+0x74>)
 8000554:	2202      	movs	r2, #2
 8000556:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000558:	4b12      	ldr	r3, [pc, #72]	; (80005a4 <MX_SPI2_Init+0x74>)
 800055a:	2201      	movs	r2, #1
 800055c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800055e:	4b11      	ldr	r3, [pc, #68]	; (80005a4 <MX_SPI2_Init+0x74>)
 8000560:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000564:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000566:	4b0f      	ldr	r3, [pc, #60]	; (80005a4 <MX_SPI2_Init+0x74>)
 8000568:	2220      	movs	r2, #32
 800056a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800056c:	4b0d      	ldr	r3, [pc, #52]	; (80005a4 <MX_SPI2_Init+0x74>)
 800056e:	2200      	movs	r2, #0
 8000570:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000572:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <MX_SPI2_Init+0x74>)
 8000574:	2200      	movs	r2, #0
 8000576:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000578:	4b0a      	ldr	r3, [pc, #40]	; (80005a4 <MX_SPI2_Init+0x74>)
 800057a:	2200      	movs	r2, #0
 800057c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800057e:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <MX_SPI2_Init+0x74>)
 8000580:	2207      	movs	r2, #7
 8000582:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000584:	4b07      	ldr	r3, [pc, #28]	; (80005a4 <MX_SPI2_Init+0x74>)
 8000586:	2200      	movs	r2, #0
 8000588:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800058a:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <MX_SPI2_Init+0x74>)
 800058c:	2200      	movs	r2, #0
 800058e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000590:	4804      	ldr	r0, [pc, #16]	; (80005a4 <MX_SPI2_Init+0x74>)
 8000592:	f003 fa95 	bl	8003ac0 <HAL_SPI_Init>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 800059c:	f000 fc62 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80005a0:	bf00      	nop
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	2000072c 	.word	0x2000072c
 80005a8:	40003800 	.word	0x40003800

080005ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b088      	sub	sp, #32
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005b2:	f107 0314 	add.w	r3, r7, #20
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005ca:	4b29      	ldr	r3, [pc, #164]	; (8000670 <MX_TIM1_Init+0xc4>)
 80005cc:	4a29      	ldr	r2, [pc, #164]	; (8000674 <MX_TIM1_Init+0xc8>)
 80005ce:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1024;
 80005d0:	4b27      	ldr	r3, [pc, #156]	; (8000670 <MX_TIM1_Init+0xc4>)
 80005d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005d8:	4b25      	ldr	r3, [pc, #148]	; (8000670 <MX_TIM1_Init+0xc4>)
 80005da:	2200      	movs	r2, #0
 80005dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80005de:	4b24      	ldr	r3, [pc, #144]	; (8000670 <MX_TIM1_Init+0xc4>)
 80005e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005e4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005e6:	4b22      	ldr	r3, [pc, #136]	; (8000670 <MX_TIM1_Init+0xc4>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005ec:	4b20      	ldr	r3, [pc, #128]	; (8000670 <MX_TIM1_Init+0xc4>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005f2:	4b1f      	ldr	r3, [pc, #124]	; (8000670 <MX_TIM1_Init+0xc4>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80005f8:	481d      	ldr	r0, [pc, #116]	; (8000670 <MX_TIM1_Init+0xc4>)
 80005fa:	f003 fbc1 	bl	8003d80 <HAL_TIM_IC_Init>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000604:	f000 fc2e 	bl	8000e64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000608:	2300      	movs	r3, #0
 800060a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800060c:	2300      	movs	r3, #0
 800060e:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000610:	2300      	movs	r3, #0
 8000612:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000614:	f107 0314 	add.w	r3, r7, #20
 8000618:	4619      	mov	r1, r3
 800061a:	4815      	ldr	r0, [pc, #84]	; (8000670 <MX_TIM1_Init+0xc4>)
 800061c:	f003 ff64 	bl	80044e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000626:	f000 fc1d 	bl	8000e64 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800062a:	2300      	movs	r3, #0
 800062c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800062e:	2301      	movs	r3, #1
 8000630:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000636:	2300      	movs	r3, #0
 8000638:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	2200      	movs	r2, #0
 800063e:	4619      	mov	r1, r3
 8000640:	480b      	ldr	r0, [pc, #44]	; (8000670 <MX_TIM1_Init+0xc4>)
 8000642:	f003 fd13 	bl	800406c <HAL_TIM_IC_ConfigChannel>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800064c:	f000 fc0a 	bl	8000e64 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	2204      	movs	r2, #4
 8000654:	4619      	mov	r1, r3
 8000656:	4806      	ldr	r0, [pc, #24]	; (8000670 <MX_TIM1_Init+0xc4>)
 8000658:	f003 fd08 	bl	800406c <HAL_TIM_IC_ConfigChannel>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 8000662:	f000 fbff 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000666:	bf00      	nop
 8000668:	3720      	adds	r7, #32
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20000790 	.word	0x20000790
 8000674:	40012c00 	.word	0x40012c00

08000678 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000696:	4b27      	ldr	r3, [pc, #156]	; (8000734 <MX_TIM2_Init+0xbc>)
 8000698:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800069c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1024;
 800069e:	4b25      	ldr	r3, [pc, #148]	; (8000734 <MX_TIM2_Init+0xbc>)
 80006a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a6:	4b23      	ldr	r3, [pc, #140]	; (8000734 <MX_TIM2_Init+0xbc>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80006ac:	4b21      	ldr	r3, [pc, #132]	; (8000734 <MX_TIM2_Init+0xbc>)
 80006ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006b4:	4b1f      	ldr	r3, [pc, #124]	; (8000734 <MX_TIM2_Init+0xbc>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ba:	4b1e      	ldr	r3, [pc, #120]	; (8000734 <MX_TIM2_Init+0xbc>)
 80006bc:	2200      	movs	r2, #0
 80006be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80006c0:	481c      	ldr	r0, [pc, #112]	; (8000734 <MX_TIM2_Init+0xbc>)
 80006c2:	f003 fb5d 	bl	8003d80 <HAL_TIM_IC_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80006cc:	f000 fbca 	bl	8000e64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006d8:	f107 0314 	add.w	r3, r7, #20
 80006dc:	4619      	mov	r1, r3
 80006de:	4815      	ldr	r0, [pc, #84]	; (8000734 <MX_TIM2_Init+0xbc>)
 80006e0:	f003 ff02 	bl	80044e8 <HAL_TIMEx_MasterConfigSynchronization>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80006ea:	f000 fbbb 	bl	8000e64 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80006ee:	2300      	movs	r3, #0
 80006f0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80006f2:	2301      	movs	r3, #1
 80006f4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	2200      	movs	r2, #0
 8000702:	4619      	mov	r1, r3
 8000704:	480b      	ldr	r0, [pc, #44]	; (8000734 <MX_TIM2_Init+0xbc>)
 8000706:	f003 fcb1 	bl	800406c <HAL_TIM_IC_ConfigChannel>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000710:	f000 fba8 	bl	8000e64 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	2204      	movs	r2, #4
 8000718:	4619      	mov	r1, r3
 800071a:	4806      	ldr	r0, [pc, #24]	; (8000734 <MX_TIM2_Init+0xbc>)
 800071c:	f003 fca6 	bl	800406c <HAL_TIM_IC_ConfigChannel>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000726:	f000 fb9d 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800072a:	bf00      	nop
 800072c:	3720      	adds	r7, #32
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	200007dc 	.word	0x200007dc

08000738 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800073c:	4b14      	ldr	r3, [pc, #80]	; (8000790 <MX_USART3_UART_Init+0x58>)
 800073e:	4a15      	ldr	r2, [pc, #84]	; (8000794 <MX_USART3_UART_Init+0x5c>)
 8000740:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000742:	4b13      	ldr	r3, [pc, #76]	; (8000790 <MX_USART3_UART_Init+0x58>)
 8000744:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000748:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800074a:	4b11      	ldr	r3, [pc, #68]	; (8000790 <MX_USART3_UART_Init+0x58>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <MX_USART3_UART_Init+0x58>)
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <MX_USART3_UART_Init+0x58>)
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800075c:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <MX_USART3_UART_Init+0x58>)
 800075e:	220c      	movs	r2, #12
 8000760:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000762:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <MX_USART3_UART_Init+0x58>)
 8000764:	2200      	movs	r2, #0
 8000766:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000768:	4b09      	ldr	r3, [pc, #36]	; (8000790 <MX_USART3_UART_Init+0x58>)
 800076a:	2200      	movs	r2, #0
 800076c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <MX_USART3_UART_Init+0x58>)
 8000770:	2200      	movs	r2, #0
 8000772:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <MX_USART3_UART_Init+0x58>)
 8000776:	2200      	movs	r2, #0
 8000778:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800077a:	4805      	ldr	r0, [pc, #20]	; (8000790 <MX_USART3_UART_Init+0x58>)
 800077c:	f003 ff38 	bl	80045f0 <HAL_UART_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000786:	f000 fb6d 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000828 	.word	0x20000828
 8000794:	40004800 	.word	0x40004800

08000798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b088      	sub	sp, #32
 800079c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079e:	f107 030c 	add.w	r3, r7, #12
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
 80007ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ae:	4b4d      	ldr	r3, [pc, #308]	; (80008e4 <MX_GPIO_Init+0x14c>)
 80007b0:	695b      	ldr	r3, [r3, #20]
 80007b2:	4a4c      	ldr	r2, [pc, #304]	; (80008e4 <MX_GPIO_Init+0x14c>)
 80007b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80007b8:	6153      	str	r3, [r2, #20]
 80007ba:	4b4a      	ldr	r3, [pc, #296]	; (80008e4 <MX_GPIO_Init+0x14c>)
 80007bc:	695b      	ldr	r3, [r3, #20]
 80007be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	4b47      	ldr	r3, [pc, #284]	; (80008e4 <MX_GPIO_Init+0x14c>)
 80007c8:	695b      	ldr	r3, [r3, #20]
 80007ca:	4a46      	ldr	r2, [pc, #280]	; (80008e4 <MX_GPIO_Init+0x14c>)
 80007cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007d0:	6153      	str	r3, [r2, #20]
 80007d2:	4b44      	ldr	r3, [pc, #272]	; (80008e4 <MX_GPIO_Init+0x14c>)
 80007d4:	695b      	ldr	r3, [r3, #20]
 80007d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007de:	4b41      	ldr	r3, [pc, #260]	; (80008e4 <MX_GPIO_Init+0x14c>)
 80007e0:	695b      	ldr	r3, [r3, #20]
 80007e2:	4a40      	ldr	r2, [pc, #256]	; (80008e4 <MX_GPIO_Init+0x14c>)
 80007e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007e8:	6153      	str	r3, [r2, #20]
 80007ea:	4b3e      	ldr	r3, [pc, #248]	; (80008e4 <MX_GPIO_Init+0x14c>)
 80007ec:	695b      	ldr	r3, [r3, #20]
 80007ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80007fc:	483a      	ldr	r0, [pc, #232]	; (80008e8 <MX_GPIO_Init+0x150>)
 80007fe:	f001 fcf9 	bl	80021f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN12_Pin|_1A_Pin|_2A_Pin|EN34_Pin
 8000802:	2200      	movs	r2, #0
 8000804:	21f8      	movs	r1, #248	; 0xf8
 8000806:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800080a:	f001 fcf3 	bl	80021f4 <HAL_GPIO_WritePin>
                          |_3A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, _4A_Pin|RST_ESP_Pin|EN_ESP_Pin|SPI2_CS_L_Pin
 800080e:	2200      	movs	r2, #0
 8000810:	f245 0107 	movw	r1, #20487	; 0x5007
 8000814:	4835      	ldr	r0, [pc, #212]	; (80008ec <MX_GPIO_Init+0x154>)
 8000816:	f001 fced 	bl	80021f4 <HAL_GPIO_WritePin>
                          |SPI2_CS_R_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800081a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800081e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000820:	2301      	movs	r3, #1
 8000822:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000828:	2300      	movs	r3, #0
 800082a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800082c:	f107 030c 	add.w	r3, r7, #12
 8000830:	4619      	mov	r1, r3
 8000832:	482d      	ldr	r0, [pc, #180]	; (80008e8 <MX_GPIO_Init+0x150>)
 8000834:	f001 fb6c 	bl	8001f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN12_Pin EN34_Pin */
  GPIO_InitStruct.Pin = EN12_Pin|EN34_Pin;
 8000838:	2348      	movs	r3, #72	; 0x48
 800083a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083c:	2301      	movs	r3, #1
 800083e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000844:	2300      	movs	r3, #0
 8000846:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000848:	f107 030c 	add.w	r3, r7, #12
 800084c:	4619      	mov	r1, r3
 800084e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000852:	f001 fb5d 	bl	8001f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : _1A_Pin _2A_Pin _3A_Pin */
  GPIO_InitStruct.Pin = _1A_Pin|_2A_Pin|_3A_Pin;
 8000856:	23b0      	movs	r3, #176	; 0xb0
 8000858:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085a:	2301      	movs	r3, #1
 800085c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000862:	2301      	movs	r3, #1
 8000864:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000866:	f107 030c 	add.w	r3, r7, #12
 800086a:	4619      	mov	r1, r3
 800086c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000870:	f001 fb4e 	bl	8001f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : _4A_Pin SPI2_CS_L_Pin SPI2_CS_R_Pin */
  GPIO_InitStruct.Pin = _4A_Pin|SPI2_CS_L_Pin|SPI2_CS_R_Pin;
 8000874:	f245 0301 	movw	r3, #20481	; 0x5001
 8000878:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087a:	2301      	movs	r3, #1
 800087c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000882:	2301      	movs	r3, #1
 8000884:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000886:	f107 030c 	add.w	r3, r7, #12
 800088a:	4619      	mov	r1, r3
 800088c:	4817      	ldr	r0, [pc, #92]	; (80008ec <MX_GPIO_Init+0x154>)
 800088e:	f001 fb3f 	bl	8001f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : RST_ESP_Pin EN_ESP_Pin */
  GPIO_InitStruct.Pin = RST_ESP_Pin|EN_ESP_Pin;
 8000892:	2306      	movs	r3, #6
 8000894:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000896:	2301      	movs	r3, #1
 8000898:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089e:	2300      	movs	r3, #0
 80008a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a2:	f107 030c 	add.w	r3, r7, #12
 80008a6:	4619      	mov	r1, r3
 80008a8:	4810      	ldr	r0, [pc, #64]	; (80008ec <MX_GPIO_Init+0x154>)
 80008aa:	f001 fb31 	bl	8001f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80008ae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80008b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008b4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008be:	f107 030c 	add.w	r3, r7, #12
 80008c2:	4619      	mov	r1, r3
 80008c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c8:	f001 fb22 	bl	8001f10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80008cc:	2200      	movs	r2, #0
 80008ce:	2105      	movs	r1, #5
 80008d0:	2028      	movs	r0, #40	; 0x28
 80008d2:	f001 faf3 	bl	8001ebc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008d6:	2028      	movs	r0, #40	; 0x28
 80008d8:	f001 fb0c 	bl	8001ef4 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008dc:	bf00      	nop
 80008de:	3720      	adds	r7, #32
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40021000 	.word	0x40021000
 80008e8:	48000800 	.word	0x48000800
 80008ec:	48000400 	.word	0x48000400

080008f0 <ADC1_configuration>:

/* USER CODE BEGIN 4 */
void ADC1_configuration(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
	//NVIC configuration
	NVIC->IP[11] |= 0x70; //Priority 7
 80008f4:	4b68      	ldr	r3, [pc, #416]	; (8000a98 <ADC1_configuration+0x1a8>)
 80008f6:	f893 330b 	ldrb.w	r3, [r3, #779]	; 0x30b
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	4a66      	ldr	r2, [pc, #408]	; (8000a98 <ADC1_configuration+0x1a8>)
 80008fe:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000902:	b2db      	uxtb	r3, r3
 8000904:	f882 330b 	strb.w	r3, [r2, #779]	; 0x30b
	NVIC->ISER[0] |= (1<<11); //Enable DMA1 channel 1 interrupt
 8000908:	4b63      	ldr	r3, [pc, #396]	; (8000a98 <ADC1_configuration+0x1a8>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a62      	ldr	r2, [pc, #392]	; (8000a98 <ADC1_configuration+0x1a8>)
 800090e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000912:	6013      	str	r3, [r2, #0]
	NVIC->IP[18] |= 0x70; //Priority 7
 8000914:	4b60      	ldr	r3, [pc, #384]	; (8000a98 <ADC1_configuration+0x1a8>)
 8000916:	f893 3312 	ldrb.w	r3, [r3, #786]	; 0x312
 800091a:	b2db      	uxtb	r3, r3
 800091c:	4a5e      	ldr	r2, [pc, #376]	; (8000a98 <ADC1_configuration+0x1a8>)
 800091e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000922:	b2db      	uxtb	r3, r3
 8000924:	f882 3312 	strb.w	r3, [r2, #786]	; 0x312
	NVIC->ISER[0] |= (1<<18); //Enable ADC1 global interrupt
 8000928:	4b5b      	ldr	r3, [pc, #364]	; (8000a98 <ADC1_configuration+0x1a8>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a5a      	ldr	r2, [pc, #360]	; (8000a98 <ADC1_configuration+0x1a8>)
 800092e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000932:	6013      	str	r3, [r2, #0]
	//DMA configuration for ADC1
	RCC->AHBENR |= RCC_AHBENR_DMA1EN; // Enable the DMA1 clock
 8000934:	4b59      	ldr	r3, [pc, #356]	; (8000a9c <ADC1_configuration+0x1ac>)
 8000936:	695b      	ldr	r3, [r3, #20]
 8000938:	4a58      	ldr	r2, [pc, #352]	; (8000a9c <ADC1_configuration+0x1ac>)
 800093a:	f043 0301 	orr.w	r3, r3, #1
 800093e:	6153      	str	r3, [r2, #20]
	DMA1_Channel1->CCR &= ~DMA_CCR_EN;
 8000940:	4b57      	ldr	r3, [pc, #348]	; (8000aa0 <ADC1_configuration+0x1b0>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a56      	ldr	r2, [pc, #344]	; (8000aa0 <ADC1_configuration+0x1b0>)
 8000946:	f023 0301 	bic.w	r3, r3, #1
 800094a:	6013      	str	r3, [r2, #0]

	DMA1_Channel1->CCR |= (1<<10); // Bits 11:10 MSIZE[1:0]: Memory size  01: 16-bits
 800094c:	4b54      	ldr	r3, [pc, #336]	; (8000aa0 <ADC1_configuration+0x1b0>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a53      	ldr	r2, [pc, #332]	; (8000aa0 <ADC1_configuration+0x1b0>)
 8000952:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000956:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= (1<<8); // Bits 9:8 PSIZE[1:0]: Peripheral size  01: 16-bits
 8000958:	4b51      	ldr	r3, [pc, #324]	; (8000aa0 <ADC1_configuration+0x1b0>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a50      	ldr	r2, [pc, #320]	; (8000aa0 <ADC1_configuration+0x1b0>)
 800095e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000962:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= DMA_CCR_MINC;
 8000964:	4b4e      	ldr	r3, [pc, #312]	; (8000aa0 <ADC1_configuration+0x1b0>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a4d      	ldr	r2, [pc, #308]	; (8000aa0 <ADC1_configuration+0x1b0>)
 800096a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800096e:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= DMA_CCR_CIRC;
 8000970:	4b4b      	ldr	r3, [pc, #300]	; (8000aa0 <ADC1_configuration+0x1b0>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a4a      	ldr	r2, [pc, #296]	; (8000aa0 <ADC1_configuration+0x1b0>)
 8000976:	f043 0320 	orr.w	r3, r3, #32
 800097a:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= DMA_CCR_TCIE;
 800097c:	4b48      	ldr	r3, [pc, #288]	; (8000aa0 <ADC1_configuration+0x1b0>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a47      	ldr	r2, [pc, #284]	; (8000aa0 <ADC1_configuration+0x1b0>)
 8000982:	f043 0302 	orr.w	r3, r3, #2
 8000986:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR &= ~DMA_CCR_HTIE;
 8000988:	4b45      	ldr	r3, [pc, #276]	; (8000aa0 <ADC1_configuration+0x1b0>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a44      	ldr	r2, [pc, #272]	; (8000aa0 <ADC1_configuration+0x1b0>)
 800098e:	f023 0304 	bic.w	r3, r3, #4
 8000992:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR &= ~DMA_CCR_TEIE;
 8000994:	4b42      	ldr	r3, [pc, #264]	; (8000aa0 <ADC1_configuration+0x1b0>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a41      	ldr	r2, [pc, #260]	; (8000aa0 <ADC1_configuration+0x1b0>)
 800099a:	f023 0308 	bic.w	r3, r3, #8
 800099e:	6013      	str	r3, [r2, #0]

	DMA1_Channel1->CNDTR = 10;
 80009a0:	4b3f      	ldr	r3, [pc, #252]	; (8000aa0 <ADC1_configuration+0x1b0>)
 80009a2:	220a      	movs	r2, #10
 80009a4:	605a      	str	r2, [r3, #4]
	DMA1_Channel1->CPAR = &(ADC1->DR);
 80009a6:	4b3e      	ldr	r3, [pc, #248]	; (8000aa0 <ADC1_configuration+0x1b0>)
 80009a8:	4a3e      	ldr	r2, [pc, #248]	; (8000aa4 <ADC1_configuration+0x1b4>)
 80009aa:	609a      	str	r2, [r3, #8]
	DMA1_Channel1->CMAR = &batteryVoltage[0];
 80009ac:	4b3c      	ldr	r3, [pc, #240]	; (8000aa0 <ADC1_configuration+0x1b0>)
 80009ae:	4a3e      	ldr	r2, [pc, #248]	; (8000aa8 <ADC1_configuration+0x1b8>)
 80009b0:	60da      	str	r2, [r3, #12]
//	ADC1->CR |= ADC_CR_ADEN;
//	while((ADC1->ISR & ADC_ISR_ADRDY) != ADC_ISR_ADRDY) __asm__ volatile("NOP");
//	ADC1->CR |= ADC_CR_ADSTART;
//	HAL_Delay(20);
//	DMA1_Channel1->CCR |= DMA_CCR_EN;
	__asm__ volatile("NOP");
 80009b2:	bf00      	nop
	if(batteryVoltage[0] == 0) {
 80009b4:	4b3c      	ldr	r3, [pc, #240]	; (8000aa8 <ADC1_configuration+0x1b8>)
 80009b6:	881b      	ldrh	r3, [r3, #0]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d16a      	bne.n	8000a92 <ADC1_configuration+0x1a2>
		if((ADC1->CR & ADC_CR_ADEN) == ADC_CR_ADEN) {
 80009bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80009c0:	689b      	ldr	r3, [r3, #8]
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d12d      	bne.n	8000a26 <ADC1_configuration+0x136>
			DMA1_Channel1->CCR &= ~DMA_CCR_EN;
 80009ca:	4b35      	ldr	r3, [pc, #212]	; (8000aa0 <ADC1_configuration+0x1b0>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a34      	ldr	r2, [pc, #208]	; (8000aa0 <ADC1_configuration+0x1b0>)
 80009d0:	f023 0301 	bic.w	r3, r3, #1
 80009d4:	6013      	str	r3, [r2, #0]
			ADC1->CR |= ADC_CR_ADSTP;
 80009d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80009da:	689b      	ldr	r3, [r3, #8]
 80009dc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009e0:	f043 0310 	orr.w	r3, r3, #16
 80009e4:	6093      	str	r3, [r2, #8]
			while((ADC1->CR & ADC_CR_ADSTP) == ADC_CR_ADSTP) __asm__ volatile("NOP");
 80009e6:	e000      	b.n	80009ea <ADC1_configuration+0xfa>
 80009e8:	bf00      	nop
 80009ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80009ee:	689b      	ldr	r3, [r3, #8]
 80009f0:	f003 0310 	and.w	r3, r3, #16
 80009f4:	2b10      	cmp	r3, #16
 80009f6:	d0f7      	beq.n	80009e8 <ADC1_configuration+0xf8>
			HAL_Delay(5);
 80009f8:	2005      	movs	r0, #5
 80009fa:	f000 fce5 	bl	80013c8 <HAL_Delay>
			ADC1->CR |= ADC_CR_ADDIS;
 80009fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000a02:	689b      	ldr	r3, [r3, #8]
 8000a04:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a08:	f043 0302 	orr.w	r3, r3, #2
 8000a0c:	6093      	str	r3, [r2, #8]
			while((ADC1->CR & ADC_CR_ADDIS) == ADC_CR_ADDIS) __asm__ volatile("NOP");
 8000a0e:	e000      	b.n	8000a12 <ADC1_configuration+0x122>
 8000a10:	bf00      	nop
 8000a12:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000a16:	689b      	ldr	r3, [r3, #8]
 8000a18:	f003 0302 	and.w	r3, r3, #2
 8000a1c:	2b02      	cmp	r3, #2
 8000a1e:	d0f7      	beq.n	8000a10 <ADC1_configuration+0x120>
			HAL_Delay(20);
 8000a20:	2014      	movs	r0, #20
 8000a22:	f000 fcd1 	bl	80013c8 <HAL_Delay>
		}
		MX_ADC1_Init();
 8000a26:	f7ff fd27 	bl	8000478 <MX_ADC1_Init>
		ADC1->CFGR |= ADC_CFGR_DMACFG;
 8000a2a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a34:	f043 0302 	orr.w	r3, r3, #2
 8000a38:	60d3      	str	r3, [r2, #12]
		ADC1->CFGR |= ADC_CFGR_DMAEN;
 8000a3a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	60d3      	str	r3, [r2, #12]
		ADC1->CR |= ADC_CR_ADEN;
 8000a4a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000a4e:	689b      	ldr	r3, [r3, #8]
 8000a50:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6093      	str	r3, [r2, #8]
		while((ADC1->ISR & ADC_ISR_ADRDY) != ADC_ISR_ADRDY) __asm__ volatile("NOP");
 8000a5a:	e000      	b.n	8000a5e <ADC1_configuration+0x16e>
 8000a5c:	bf00      	nop
 8000a5e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f003 0301 	and.w	r3, r3, #1
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d1f7      	bne.n	8000a5c <ADC1_configuration+0x16c>
		ADC1->CR |= ADC_CR_ADSTART;
 8000a6c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000a70:	689b      	ldr	r3, [r3, #8]
 8000a72:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a76:	f043 0304 	orr.w	r3, r3, #4
 8000a7a:	6093      	str	r3, [r2, #8]
		HAL_Delay(20);
 8000a7c:	2014      	movs	r0, #20
 8000a7e:	f000 fca3 	bl	80013c8 <HAL_Delay>
		DMA1_Channel1->CCR |= DMA_CCR_EN;
 8000a82:	4b07      	ldr	r3, [pc, #28]	; (8000aa0 <ADC1_configuration+0x1b0>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4a06      	ldr	r2, [pc, #24]	; (8000aa0 <ADC1_configuration+0x1b0>)
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	6013      	str	r3, [r2, #0]
		__asm__ volatile("NOP");
 8000a8e:	bf00      	nop
	}
	return;
 8000a90:	bf00      	nop
 8000a92:	bf00      	nop
}
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	e000e100 	.word	0xe000e100
 8000a9c:	40021000 	.word	0x40021000
 8000aa0:	40020008 	.word	0x40020008
 8000aa4:	50000040 	.word	0x50000040
 8000aa8:	200008c0 	.word	0x200008c0

08000aac <psMeasure>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_psMeasure */
void psMeasure(void const * argument)
{
 8000aac:	b590      	push	{r4, r7, lr}
 8000aae:	b08d      	sub	sp, #52	; 0x34
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	char measureResult[30];
	memset(measureResult, ' ', sizeof(measureResult));
 8000ab4:	f107 030c 	add.w	r3, r7, #12
 8000ab8:	221e      	movs	r2, #30
 8000aba:	2120      	movs	r1, #32
 8000abc:	4618      	mov	r0, r3
 8000abe:	f007 f825 	bl	8007b0c <memset>
  /* Infinite loop */
  for(;;)
  {
    osDelay(8);
 8000ac2:	2008      	movs	r0, #8
 8000ac4:	f004 faec 	bl	80050a0 <osDelay>
    uint16_t avrBatVoltage = 0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	85fb      	strh	r3, [r7, #46]	; 0x2e
    for(uint8_t i = 0; i < (sizeof(batteryVoltage)/sizeof(batteryVoltage[0])); i++) {
 8000acc:	2300      	movs	r3, #0
 8000ace:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8000ad2:	e00c      	b.n	8000aee <psMeasure+0x42>
    	avrBatVoltage += batteryVoltage[i];
 8000ad4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000ad8:	4a45      	ldr	r2, [pc, #276]	; (8000bf0 <psMeasure+0x144>)
 8000ada:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000ade:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000ae0:	4413      	add	r3, r2
 8000ae2:	85fb      	strh	r3, [r7, #46]	; 0x2e
    for(uint8_t i = 0; i < (sizeof(batteryVoltage)/sizeof(batteryVoltage[0])); i++) {
 8000ae4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000ae8:	3301      	adds	r3, #1
 8000aea:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8000aee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000af2:	2b09      	cmp	r3, #9
 8000af4:	d9ee      	bls.n	8000ad4 <psMeasure+0x28>
    }
    avrBatVoltage = avrBatVoltage / (sizeof(batteryVoltage)/sizeof(batteryVoltage[0]));
 8000af6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000af8:	4a3e      	ldr	r2, [pc, #248]	; (8000bf4 <psMeasure+0x148>)
 8000afa:	fba2 2303 	umull	r2, r3, r2, r3
 8000afe:	08db      	lsrs	r3, r3, #3
 8000b00:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if(avrBatVoltage > BATMAXV) {
 8000b02:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000b04:	f640 0298 	movw	r2, #2200	; 0x898
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d92a      	bls.n	8000b62 <psMeasure+0xb6>
    	memset(measureResult, ' ', sizeof(measureResult));
 8000b0c:	f107 030c 	add.w	r3, r7, #12
 8000b10:	221e      	movs	r2, #30
 8000b12:	2120      	movs	r1, #32
 8000b14:	4618      	mov	r0, r3
 8000b16:	f006 fff9 	bl	8007b0c <memset>
    	strcpy(measureResult, "Voltage > MAX");
 8000b1a:	f107 030c 	add.w	r3, r7, #12
 8000b1e:	4a36      	ldr	r2, [pc, #216]	; (8000bf8 <psMeasure+0x14c>)
 8000b20:	461c      	mov	r4, r3
 8000b22:	4613      	mov	r3, r2
 8000b24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b26:	c407      	stmia	r4!, {r0, r1, r2}
 8000b28:	8023      	strh	r3, [r4, #0]
    	xEventGroupClearBits(pc13EventGroup, 0xFFFFFF);
 8000b2a:	4b34      	ldr	r3, [pc, #208]	; (8000bfc <psMeasure+0x150>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8000b32:	4618      	mov	r0, r3
 8000b34:	f004 fae2 	bl	80050fc <xEventGroupClearBits>
    	xEventGroupSetBits(pc13EventGroup, 0x1);
 8000b38:	4b30      	ldr	r3, [pc, #192]	; (8000bfc <psMeasure+0x150>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f004 fb14 	bl	800516c <xEventGroupSetBits>
    	xEventGroupClearBits(pc14EventGroup, 0xFFFFFF);
 8000b44:	4b2e      	ldr	r3, [pc, #184]	; (8000c00 <psMeasure+0x154>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f004 fad5 	bl	80050fc <xEventGroupClearBits>
    	xEventGroupSetBits(pc14EventGroup, 0x1);
 8000b52:	4b2b      	ldr	r3, [pc, #172]	; (8000c00 <psMeasure+0x154>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	2101      	movs	r1, #1
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f004 fb07 	bl	800516c <xEventGroupSetBits>
    	__asm__ volatile("NOP");
 8000b5e:	bf00      	nop
 8000b60:	e7af      	b.n	8000ac2 <psMeasure+0x16>
    } else if(avrBatVoltage < BATMINV) {
 8000b62:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000b64:	f640 023d 	movw	r2, #2109	; 0x83d
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d82a      	bhi.n	8000bc2 <psMeasure+0x116>
    	memset(measureResult, ' ', sizeof(measureResult));
 8000b6c:	f107 030c 	add.w	r3, r7, #12
 8000b70:	221e      	movs	r2, #30
 8000b72:	2120      	movs	r1, #32
 8000b74:	4618      	mov	r0, r3
 8000b76:	f006 ffc9 	bl	8007b0c <memset>
    	strcpy(measureResult, "Voltage < MIN");
 8000b7a:	f107 030c 	add.w	r3, r7, #12
 8000b7e:	4a21      	ldr	r2, [pc, #132]	; (8000c04 <psMeasure+0x158>)
 8000b80:	461c      	mov	r4, r3
 8000b82:	4613      	mov	r3, r2
 8000b84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b86:	c407      	stmia	r4!, {r0, r1, r2}
 8000b88:	8023      	strh	r3, [r4, #0]
    	xEventGroupClearBits(pc13EventGroup, 0xFFFFFF);
 8000b8a:	4b1c      	ldr	r3, [pc, #112]	; (8000bfc <psMeasure+0x150>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8000b92:	4618      	mov	r0, r3
 8000b94:	f004 fab2 	bl	80050fc <xEventGroupClearBits>
    	xEventGroupSetBits(pc13EventGroup, 0x2);
 8000b98:	4b18      	ldr	r3, [pc, #96]	; (8000bfc <psMeasure+0x150>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2102      	movs	r1, #2
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f004 fae4 	bl	800516c <xEventGroupSetBits>
    	xEventGroupClearBits(pc14EventGroup, 0xFFFFFF);
 8000ba4:	4b16      	ldr	r3, [pc, #88]	; (8000c00 <psMeasure+0x154>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8000bac:	4618      	mov	r0, r3
 8000bae:	f004 faa5 	bl	80050fc <xEventGroupClearBits>
    	xEventGroupSetBits(pc14EventGroup, 0x2);
 8000bb2:	4b13      	ldr	r3, [pc, #76]	; (8000c00 <psMeasure+0x154>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	2102      	movs	r1, #2
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f004 fad7 	bl	800516c <xEventGroupSetBits>
    	__asm__ volatile("NOP");
 8000bbe:	bf00      	nop
 8000bc0:	e77f      	b.n	8000ac2 <psMeasure+0x16>
    } else {
    	memset(measureResult, ' ', sizeof(measureResult));
 8000bc2:	f107 030c 	add.w	r3, r7, #12
 8000bc6:	221e      	movs	r2, #30
 8000bc8:	2120      	movs	r1, #32
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f006 ff9e 	bl	8007b0c <memset>
    	xEventGroupClearBits(pc13EventGroup, 0xFFFFFF);
 8000bd0:	4b0a      	ldr	r3, [pc, #40]	; (8000bfc <psMeasure+0x150>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f004 fa8f 	bl	80050fc <xEventGroupClearBits>
    	xEventGroupClearBits(pc14EventGroup, 0xFFFFFF);
 8000bde:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <psMeasure+0x154>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8000be6:	4618      	mov	r0, r3
 8000be8:	f004 fa88 	bl	80050fc <xEventGroupClearBits>
    	__asm__ volatile("NOP");
 8000bec:	bf00      	nop
  {
 8000bee:	e768      	b.n	8000ac2 <psMeasure+0x16>
 8000bf0:	200008c0 	.word	0x200008c0
 8000bf4:	cccccccd 	.word	0xcccccccd
 8000bf8:	08007c40 	.word	0x08007c40
 8000bfc:	200008d4 	.word	0x200008d4
 8000c00:	200008d8 	.word	0x200008d8
 8000c04:	08007c50 	.word	0x08007c50

08000c08 <pc13LedCntrl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pc13LedCntrl */
void pc13LedCntrl(void const * argument)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN pc13LedCntrl */
	EventBits_t eventBits;
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c10:	2001      	movs	r0, #1
 8000c12:	f004 fa45 	bl	80050a0 <osDelay>
    eventBits = xEventGroupGetBits(pc13EventGroup);
 8000c16:	4b18      	ldr	r3, [pc, #96]	; (8000c78 <pc13LedCntrl+0x70>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f004 fa6d 	bl	80050fc <xEventGroupClearBits>
 8000c22:	60f8      	str	r0, [r7, #12]
    switch (eventBits) {
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d003      	beq.n	8000c32 <pc13LedCntrl+0x2a>
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	2b02      	cmp	r3, #2
 8000c2e:	d00b      	beq.n	8000c48 <pc13LedCntrl+0x40>
 8000c30:	e015      	b.n	8000c5e <pc13LedCntrl+0x56>
		case 0x1:
			osDelay(100);
 8000c32:	2064      	movs	r0, #100	; 0x64
 8000c34:	f004 fa34 	bl	80050a0 <osDelay>
			GPIOC->ODR ^= GPIO_ODR_13;
 8000c38:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <pc13LedCntrl+0x74>)
 8000c3a:	695b      	ldr	r3, [r3, #20]
 8000c3c:	4a0f      	ldr	r2, [pc, #60]	; (8000c7c <pc13LedCntrl+0x74>)
 8000c3e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000c42:	6153      	str	r3, [r2, #20]
			__asm__ volatile("NOP");
 8000c44:	bf00      	nop
			break;
 8000c46:	e015      	b.n	8000c74 <pc13LedCntrl+0x6c>
		case 0x2:
			osDelay(200);
 8000c48:	20c8      	movs	r0, #200	; 0xc8
 8000c4a:	f004 fa29 	bl	80050a0 <osDelay>
			GPIOC->ODR ^= GPIO_ODR_13;
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <pc13LedCntrl+0x74>)
 8000c50:	695b      	ldr	r3, [r3, #20]
 8000c52:	4a0a      	ldr	r2, [pc, #40]	; (8000c7c <pc13LedCntrl+0x74>)
 8000c54:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000c58:	6153      	str	r3, [r2, #20]
			__asm__ volatile("NOP");
 8000c5a:	bf00      	nop
			break;
 8000c5c:	e00a      	b.n	8000c74 <pc13LedCntrl+0x6c>
		default:
			GPIOC->ODR &= ~GPIO_ODR_13;
 8000c5e:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <pc13LedCntrl+0x74>)
 8000c60:	695b      	ldr	r3, [r3, #20]
 8000c62:	4a06      	ldr	r2, [pc, #24]	; (8000c7c <pc13LedCntrl+0x74>)
 8000c64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000c68:	6153      	str	r3, [r2, #20]
			osDelay(5);
 8000c6a:	2005      	movs	r0, #5
 8000c6c:	f004 fa18 	bl	80050a0 <osDelay>
			__asm__ volatile("NOP");
 8000c70:	bf00      	nop
			break;
 8000c72:	bf00      	nop
    osDelay(1);
 8000c74:	e7cc      	b.n	8000c10 <pc13LedCntrl+0x8>
 8000c76:	bf00      	nop
 8000c78:	200008d4 	.word	0x200008d4
 8000c7c:	48000800 	.word	0x48000800

08000c80 <pc14LedCntrl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pc14LedCntrl */
void pc14LedCntrl(void const * argument)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN pc14LedCntrl */
	EventBits_t eventBits;
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c88:	2001      	movs	r0, #1
 8000c8a:	f004 fa09 	bl	80050a0 <osDelay>
    eventBits = xEventGroupGetBits(pc14EventGroup);
 8000c8e:	4b18      	ldr	r3, [pc, #96]	; (8000cf0 <pc14LedCntrl+0x70>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	2100      	movs	r1, #0
 8000c94:	4618      	mov	r0, r3
 8000c96:	f004 fa31 	bl	80050fc <xEventGroupClearBits>
 8000c9a:	60f8      	str	r0, [r7, #12]
    switch (eventBits) {
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d003      	beq.n	8000caa <pc14LedCntrl+0x2a>
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	2b02      	cmp	r3, #2
 8000ca6:	d00b      	beq.n	8000cc0 <pc14LedCntrl+0x40>
 8000ca8:	e015      	b.n	8000cd6 <pc14LedCntrl+0x56>
		case 0x1:
			osDelay(100);
 8000caa:	2064      	movs	r0, #100	; 0x64
 8000cac:	f004 f9f8 	bl	80050a0 <osDelay>
			GPIOC->ODR ^= GPIO_ODR_14;
 8000cb0:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <pc14LedCntrl+0x74>)
 8000cb2:	695b      	ldr	r3, [r3, #20]
 8000cb4:	4a0f      	ldr	r2, [pc, #60]	; (8000cf4 <pc14LedCntrl+0x74>)
 8000cb6:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 8000cba:	6153      	str	r3, [r2, #20]
			__asm__ volatile("NOP");
 8000cbc:	bf00      	nop
			break;
 8000cbe:	e015      	b.n	8000cec <pc14LedCntrl+0x6c>
		case 0x2:
			osDelay(200);
 8000cc0:	20c8      	movs	r0, #200	; 0xc8
 8000cc2:	f004 f9ed 	bl	80050a0 <osDelay>
			GPIOC->ODR ^= GPIO_ODR_14;
 8000cc6:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <pc14LedCntrl+0x74>)
 8000cc8:	695b      	ldr	r3, [r3, #20]
 8000cca:	4a0a      	ldr	r2, [pc, #40]	; (8000cf4 <pc14LedCntrl+0x74>)
 8000ccc:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 8000cd0:	6153      	str	r3, [r2, #20]
			__asm__ volatile("NOP");
 8000cd2:	bf00      	nop
			break;
 8000cd4:	e00a      	b.n	8000cec <pc14LedCntrl+0x6c>
		default:
			GPIOC->ODR &= ~GPIO_ODR_14;
 8000cd6:	4b07      	ldr	r3, [pc, #28]	; (8000cf4 <pc14LedCntrl+0x74>)
 8000cd8:	695b      	ldr	r3, [r3, #20]
 8000cda:	4a06      	ldr	r2, [pc, #24]	; (8000cf4 <pc14LedCntrl+0x74>)
 8000cdc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000ce0:	6153      	str	r3, [r2, #20]
			osDelay(5);
 8000ce2:	2005      	movs	r0, #5
 8000ce4:	f004 f9dc 	bl	80050a0 <osDelay>
			__asm__ volatile("NOP");
 8000ce8:	bf00      	nop
			break;
 8000cea:	bf00      	nop
    osDelay(1);
 8000cec:	e7cc      	b.n	8000c88 <pc14LedCntrl+0x8>
 8000cee:	bf00      	nop
 8000cf0:	200008d8 	.word	0x200008d8
 8000cf4:	48000800 	.word	0x48000800

08000cf8 <espCommunication>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_espCommunication */
void espCommunication(void const * argument)
{
 8000cf8:	b5b0      	push	{r4, r5, r7, lr}
 8000cfa:	b0b0      	sub	sp, #192	; 0xc0
 8000cfc:	af02      	add	r7, sp, #8
 8000cfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN espCommunication */
	vTaskDelay( pdMS_TO_TICKS( 100 ) );
 8000d00:	2064      	movs	r0, #100	; 0x64
 8000d02:	f005 f9df 	bl	80060c4 <vTaskDelay>
	  GPIOB->ODR |= (1<<1);
 8000d06:	4b47      	ldr	r3, [pc, #284]	; (8000e24 <espCommunication+0x12c>)
 8000d08:	695b      	ldr	r3, [r3, #20]
 8000d0a:	4a46      	ldr	r2, [pc, #280]	; (8000e24 <espCommunication+0x12c>)
 8000d0c:	f043 0302 	orr.w	r3, r3, #2
 8000d10:	6153      	str	r3, [r2, #20]
	  GPIOB->ODR |= (1<<2);
 8000d12:	4b44      	ldr	r3, [pc, #272]	; (8000e24 <espCommunication+0x12c>)
 8000d14:	695b      	ldr	r3, [r3, #20]
 8000d16:	4a43      	ldr	r2, [pc, #268]	; (8000e24 <espCommunication+0x12c>)
 8000d18:	f043 0304 	orr.w	r3, r3, #4
 8000d1c:	6153      	str	r3, [r2, #20]
	  char txBuffer[80] = {'A', 'T', '\r', '\n'};
 8000d1e:	4a42      	ldr	r2, [pc, #264]	; (8000e28 <espCommunication+0x130>)
 8000d20:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d24:	6810      	ldr	r0, [r2, #0]
 8000d26:	6018      	str	r0, [r3, #0]
 8000d28:	7912      	ldrb	r2, [r2, #4]
 8000d2a:	711a      	strb	r2, [r3, #4]
 8000d2c:	f107 0369 	add.w	r3, r7, #105	; 0x69
 8000d30:	224b      	movs	r2, #75	; 0x4b
 8000d32:	2100      	movs	r1, #0
 8000d34:	4618      	mov	r0, r3
 8000d36:	f006 fee9 	bl	8007b0c <memset>
	  char rxBuffer[80];
	  char controlAnsw[] = "AT\r\r\n\r\nOK\r\n";
 8000d3a:	4a3c      	ldr	r2, [pc, #240]	; (8000e2c <espCommunication+0x134>)
 8000d3c:	f107 0308 	add.w	r3, r7, #8
 8000d40:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d42:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	  while(strcmp(rxBuffer, controlAnsw) != 0) {
 8000d46:	e022      	b.n	8000d8e <espCommunication+0x96>
		  for(uint8_t i = 0; i < sizeof(rxBuffer); i++) {
 8000d48:	2300      	movs	r3, #0
 8000d4a:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 8000d4e:	e00b      	b.n	8000d68 <espCommunication+0x70>
			  rxBuffer[i] = 0;
 8000d50:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8000d54:	33b8      	adds	r3, #184	; 0xb8
 8000d56:	443b      	add	r3, r7
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f803 2ca4 	strb.w	r2, [r3, #-164]
		  for(uint8_t i = 0; i < sizeof(rxBuffer); i++) {
 8000d5e:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8000d62:	3301      	adds	r3, #1
 8000d64:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 8000d68:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8000d6c:	2b4f      	cmp	r3, #79	; 0x4f
 8000d6e:	d9ef      	bls.n	8000d50 <espCommunication+0x58>
		  }
		  HAL_UART_Transmit(&huart3, txBuffer, sizeof(txBuffer), 250);
 8000d70:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8000d74:	23fa      	movs	r3, #250	; 0xfa
 8000d76:	2250      	movs	r2, #80	; 0x50
 8000d78:	482d      	ldr	r0, [pc, #180]	; (8000e30 <espCommunication+0x138>)
 8000d7a:	f003 fc87 	bl	800468c <HAL_UART_Transmit>
		  HAL_UART_Receive(&huart3, rxBuffer, sizeof(rxBuffer), 250);
 8000d7e:	f107 0114 	add.w	r1, r7, #20
 8000d82:	23fa      	movs	r3, #250	; 0xfa
 8000d84:	2250      	movs	r2, #80	; 0x50
 8000d86:	482a      	ldr	r0, [pc, #168]	; (8000e30 <espCommunication+0x138>)
 8000d88:	f003 fd0a 	bl	80047a0 <HAL_UART_Receive>
		  __asm__ volatile("NOP");
 8000d8c:	bf00      	nop
	  while(strcmp(rxBuffer, controlAnsw) != 0) {
 8000d8e:	f107 0208 	add.w	r2, r7, #8
 8000d92:	f107 0314 	add.w	r3, r7, #20
 8000d96:	4611      	mov	r1, r2
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fa19 	bl	80001d0 <strcmp>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d1d1      	bne.n	8000d48 <espCommunication+0x50>
	  }
	  sendATCommand(&huart3, "ATE0\r\n", 6 , rxBuffer, sizeof(rxBuffer), 250);
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	22fa      	movs	r2, #250	; 0xfa
 8000daa:	9201      	str	r2, [sp, #4]
 8000dac:	2250      	movs	r2, #80	; 0x50
 8000dae:	9200      	str	r2, [sp, #0]
 8000db0:	2206      	movs	r2, #6
 8000db2:	4920      	ldr	r1, [pc, #128]	; (8000e34 <espCommunication+0x13c>)
 8000db4:	481e      	ldr	r0, [pc, #120]	; (8000e30 <espCommunication+0x138>)
 8000db6:	f7ff fa15 	bl	80001e4 <sendATCommand>
	  sendATCommand(&huart3, "AT+CWMODE=1\r\n", 13 , rxBuffer, sizeof(rxBuffer), 250);
 8000dba:	f107 0314 	add.w	r3, r7, #20
 8000dbe:	22fa      	movs	r2, #250	; 0xfa
 8000dc0:	9201      	str	r2, [sp, #4]
 8000dc2:	2250      	movs	r2, #80	; 0x50
 8000dc4:	9200      	str	r2, [sp, #0]
 8000dc6:	220d      	movs	r2, #13
 8000dc8:	491b      	ldr	r1, [pc, #108]	; (8000e38 <espCommunication+0x140>)
 8000dca:	4819      	ldr	r0, [pc, #100]	; (8000e30 <espCommunication+0x138>)
 8000dcc:	f7ff fa0a 	bl	80001e4 <sendATCommand>
	  memset(txBuffer, '\0', sizeof(txBuffer));
 8000dd0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000dd4:	2250      	movs	r2, #80	; 0x50
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f006 fe97 	bl	8007b0c <memset>
	  strcpy(txBuffer, "AT+CWJAP_CUR=\"RedmiGiGidra\",\"DimaDimaDimon\"\r\n");
 8000dde:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000de2:	4a16      	ldr	r2, [pc, #88]	; (8000e3c <espCommunication+0x144>)
 8000de4:	461c      	mov	r4, r3
 8000de6:	4615      	mov	r5, r2
 8000de8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000df0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000df4:	c407      	stmia	r4!, {r0, r1, r2}
 8000df6:	8023      	strh	r3, [r4, #0]
	  sendATCommand(&huart3, txBuffer, sizeof(txBuffer) , rxBuffer, sizeof(rxBuffer), 10000);
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8000e00:	f242 7210 	movw	r2, #10000	; 0x2710
 8000e04:	9201      	str	r2, [sp, #4]
 8000e06:	2250      	movs	r2, #80	; 0x50
 8000e08:	9200      	str	r2, [sp, #0]
 8000e0a:	2250      	movs	r2, #80	; 0x50
 8000e0c:	4808      	ldr	r0, [pc, #32]	; (8000e30 <espCommunication+0x138>)
 8000e0e:	f7ff f9e9 	bl	80001e4 <sendATCommand>
	  vTaskDelay( pdMS_TO_TICKS( 2000 ) );
 8000e12:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e16:	f005 f955 	bl	80060c4 <vTaskDelay>
	  __asm__ volatile("NOP");
 8000e1a:	bf00      	nop

  /* Infinite loop */
  for(;;)
  {
	  vTaskDelay( pdMS_TO_TICKS( 100 ) );
 8000e1c:	2064      	movs	r0, #100	; 0x64
 8000e1e:	f005 f951 	bl	80060c4 <vTaskDelay>
 8000e22:	e7fb      	b.n	8000e1c <espCommunication+0x124>
 8000e24:	48000400 	.word	0x48000400
 8000e28:	08007ca8 	.word	0x08007ca8
 8000e2c:	08007cb0 	.word	0x08007cb0
 8000e30:	20000828 	.word	0x20000828
 8000e34:	08007c60 	.word	0x08007c60
 8000e38:	08007c68 	.word	0x08007c68
 8000e3c:	08007c78 	.word	0x08007c78

08000e40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a04      	ldr	r2, [pc, #16]	; (8000e60 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d101      	bne.n	8000e56 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e52:	f000 fa99 	bl	8001388 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40001000 	.word	0x40001000

08000e64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e68:	b672      	cpsid	i
}
 8000e6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e6c:	e7fe      	b.n	8000e6c <Error_Handler+0x8>
	...

08000e70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e76:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <HAL_MspInit+0x4c>)
 8000e78:	699b      	ldr	r3, [r3, #24]
 8000e7a:	4a10      	ldr	r2, [pc, #64]	; (8000ebc <HAL_MspInit+0x4c>)
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	6193      	str	r3, [r2, #24]
 8000e82:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <HAL_MspInit+0x4c>)
 8000e84:	699b      	ldr	r3, [r3, #24]
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	607b      	str	r3, [r7, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e8e:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <HAL_MspInit+0x4c>)
 8000e90:	69db      	ldr	r3, [r3, #28]
 8000e92:	4a0a      	ldr	r2, [pc, #40]	; (8000ebc <HAL_MspInit+0x4c>)
 8000e94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e98:	61d3      	str	r3, [r2, #28]
 8000e9a:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <HAL_MspInit+0x4c>)
 8000e9c:	69db      	ldr	r3, [r3, #28]
 8000e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea2:	603b      	str	r3, [r7, #0]
 8000ea4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	210f      	movs	r1, #15
 8000eaa:	f06f 0001 	mvn.w	r0, #1
 8000eae:	f001 f805 	bl	8001ebc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40021000 	.word	0x40021000

08000ec0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08a      	sub	sp, #40	; 0x28
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ee0:	d124      	bne.n	8000f2c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ee2:	4b14      	ldr	r3, [pc, #80]	; (8000f34 <HAL_ADC_MspInit+0x74>)
 8000ee4:	695b      	ldr	r3, [r3, #20]
 8000ee6:	4a13      	ldr	r2, [pc, #76]	; (8000f34 <HAL_ADC_MspInit+0x74>)
 8000ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eec:	6153      	str	r3, [r2, #20]
 8000eee:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <HAL_ADC_MspInit+0x74>)
 8000ef0:	695b      	ldr	r3, [r3, #20]
 8000ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef6:	613b      	str	r3, [r7, #16]
 8000ef8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efa:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <HAL_ADC_MspInit+0x74>)
 8000efc:	695b      	ldr	r3, [r3, #20]
 8000efe:	4a0d      	ldr	r2, [pc, #52]	; (8000f34 <HAL_ADC_MspInit+0x74>)
 8000f00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f04:	6153      	str	r3, [r2, #20]
 8000f06:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <HAL_ADC_MspInit+0x74>)
 8000f08:	695b      	ldr	r3, [r3, #20]
 8000f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f12:	2304      	movs	r3, #4
 8000f14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f16:	2303      	movs	r3, #3
 8000f18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1e:	f107 0314 	add.w	r3, r7, #20
 8000f22:	4619      	mov	r1, r3
 8000f24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f28:	f000 fff2 	bl	8001f10 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f2c:	bf00      	nop
 8000f2e:	3728      	adds	r7, #40	; 0x28
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40021000 	.word	0x40021000

08000f38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08a      	sub	sp, #40	; 0x28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a17      	ldr	r2, [pc, #92]	; (8000fb4 <HAL_SPI_MspInit+0x7c>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d128      	bne.n	8000fac <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f5a:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <HAL_SPI_MspInit+0x80>)
 8000f5c:	69db      	ldr	r3, [r3, #28]
 8000f5e:	4a16      	ldr	r2, [pc, #88]	; (8000fb8 <HAL_SPI_MspInit+0x80>)
 8000f60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f64:	61d3      	str	r3, [r2, #28]
 8000f66:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <HAL_SPI_MspInit+0x80>)
 8000f68:	69db      	ldr	r3, [r3, #28]
 8000f6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f6e:	613b      	str	r3, [r7, #16]
 8000f70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <HAL_SPI_MspInit+0x80>)
 8000f74:	695b      	ldr	r3, [r3, #20]
 8000f76:	4a10      	ldr	r2, [pc, #64]	; (8000fb8 <HAL_SPI_MspInit+0x80>)
 8000f78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f7c:	6153      	str	r3, [r2, #20]
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <HAL_SPI_MspInit+0x80>)
 8000f80:	695b      	ldr	r3, [r3, #20]
 8000f82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000f8a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000f8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f90:	2302      	movs	r3, #2
 8000f92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f9c:	2305      	movs	r3, #5
 8000f9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4805      	ldr	r0, [pc, #20]	; (8000fbc <HAL_SPI_MspInit+0x84>)
 8000fa8:	f000 ffb2 	bl	8001f10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000fac:	bf00      	nop
 8000fae:	3728      	adds	r7, #40	; 0x28
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40003800 	.word	0x40003800
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	48000400 	.word	0x48000400

08000fc0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08c      	sub	sp, #48	; 0x30
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 031c 	add.w	r3, r7, #28
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a33      	ldr	r2, [pc, #204]	; (80010ac <HAL_TIM_IC_MspInit+0xec>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d132      	bne.n	8001048 <HAL_TIM_IC_MspInit+0x88>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fe2:	4b33      	ldr	r3, [pc, #204]	; (80010b0 <HAL_TIM_IC_MspInit+0xf0>)
 8000fe4:	699b      	ldr	r3, [r3, #24]
 8000fe6:	4a32      	ldr	r2, [pc, #200]	; (80010b0 <HAL_TIM_IC_MspInit+0xf0>)
 8000fe8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000fec:	6193      	str	r3, [r2, #24]
 8000fee:	4b30      	ldr	r3, [pc, #192]	; (80010b0 <HAL_TIM_IC_MspInit+0xf0>)
 8000ff0:	699b      	ldr	r3, [r3, #24]
 8000ff2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ff6:	61bb      	str	r3, [r7, #24]
 8000ff8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffa:	4b2d      	ldr	r3, [pc, #180]	; (80010b0 <HAL_TIM_IC_MspInit+0xf0>)
 8000ffc:	695b      	ldr	r3, [r3, #20]
 8000ffe:	4a2c      	ldr	r2, [pc, #176]	; (80010b0 <HAL_TIM_IC_MspInit+0xf0>)
 8001000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001004:	6153      	str	r3, [r2, #20]
 8001006:	4b2a      	ldr	r3, [pc, #168]	; (80010b0 <HAL_TIM_IC_MspInit+0xf0>)
 8001008:	695b      	ldr	r3, [r3, #20]
 800100a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800100e:	617b      	str	r3, [r7, #20]
 8001010:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001012:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001016:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001018:	2302      	movs	r3, #2
 800101a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001020:	2300      	movs	r3, #0
 8001022:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001024:	2306      	movs	r3, #6
 8001026:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001028:	f107 031c 	add.w	r3, r7, #28
 800102c:	4619      	mov	r1, r3
 800102e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001032:	f000 ff6d 	bl	8001f10 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 5, 0);
 8001036:	2200      	movs	r2, #0
 8001038:	2105      	movs	r1, #5
 800103a:	201a      	movs	r0, #26
 800103c:	f000 ff3e 	bl	8001ebc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001040:	201a      	movs	r0, #26
 8001042:	f000 ff57 	bl	8001ef4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001046:	e02d      	b.n	80010a4 <HAL_TIM_IC_MspInit+0xe4>
  else if(htim_ic->Instance==TIM2)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001050:	d128      	bne.n	80010a4 <HAL_TIM_IC_MspInit+0xe4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001052:	4b17      	ldr	r3, [pc, #92]	; (80010b0 <HAL_TIM_IC_MspInit+0xf0>)
 8001054:	69db      	ldr	r3, [r3, #28]
 8001056:	4a16      	ldr	r2, [pc, #88]	; (80010b0 <HAL_TIM_IC_MspInit+0xf0>)
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	61d3      	str	r3, [r2, #28]
 800105e:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <HAL_TIM_IC_MspInit+0xf0>)
 8001060:	69db      	ldr	r3, [r3, #28]
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800106a:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <HAL_TIM_IC_MspInit+0xf0>)
 800106c:	695b      	ldr	r3, [r3, #20]
 800106e:	4a10      	ldr	r2, [pc, #64]	; (80010b0 <HAL_TIM_IC_MspInit+0xf0>)
 8001070:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001074:	6153      	str	r3, [r2, #20]
 8001076:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <HAL_TIM_IC_MspInit+0xf0>)
 8001078:	695b      	ldr	r3, [r3, #20]
 800107a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001082:	2303      	movs	r3, #3
 8001084:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001086:	2302      	movs	r3, #2
 8001088:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108e:	2300      	movs	r3, #0
 8001090:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001092:	2301      	movs	r3, #1
 8001094:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001096:	f107 031c 	add.w	r3, r7, #28
 800109a:	4619      	mov	r1, r3
 800109c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a0:	f000 ff36 	bl	8001f10 <HAL_GPIO_Init>
}
 80010a4:	bf00      	nop
 80010a6:	3730      	adds	r7, #48	; 0x30
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40012c00 	.word	0x40012c00
 80010b0:	40021000 	.word	0x40021000

080010b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08a      	sub	sp, #40	; 0x28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a17      	ldr	r2, [pc, #92]	; (8001130 <HAL_UART_MspInit+0x7c>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d128      	bne.n	8001128 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010d6:	4b17      	ldr	r3, [pc, #92]	; (8001134 <HAL_UART_MspInit+0x80>)
 80010d8:	69db      	ldr	r3, [r3, #28]
 80010da:	4a16      	ldr	r2, [pc, #88]	; (8001134 <HAL_UART_MspInit+0x80>)
 80010dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010e0:	61d3      	str	r3, [r2, #28]
 80010e2:	4b14      	ldr	r3, [pc, #80]	; (8001134 <HAL_UART_MspInit+0x80>)
 80010e4:	69db      	ldr	r3, [r3, #28]
 80010e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010ea:	613b      	str	r3, [r7, #16]
 80010ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ee:	4b11      	ldr	r3, [pc, #68]	; (8001134 <HAL_UART_MspInit+0x80>)
 80010f0:	695b      	ldr	r3, [r3, #20]
 80010f2:	4a10      	ldr	r2, [pc, #64]	; (8001134 <HAL_UART_MspInit+0x80>)
 80010f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010f8:	6153      	str	r3, [r2, #20]
 80010fa:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <HAL_UART_MspInit+0x80>)
 80010fc:	695b      	ldr	r3, [r3, #20]
 80010fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001106:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800110a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110c:	2302      	movs	r3, #2
 800110e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001114:	2303      	movs	r3, #3
 8001116:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001118:	2307      	movs	r3, #7
 800111a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	4619      	mov	r1, r3
 8001122:	4805      	ldr	r0, [pc, #20]	; (8001138 <HAL_UART_MspInit+0x84>)
 8001124:	f000 fef4 	bl	8001f10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001128:	bf00      	nop
 800112a:	3728      	adds	r7, #40	; 0x28
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40004800 	.word	0x40004800
 8001134:	40021000 	.word	0x40021000
 8001138:	48000400 	.word	0x48000400

0800113c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08e      	sub	sp, #56	; 0x38
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001144:	2300      	movs	r3, #0
 8001146:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001148:	2300      	movs	r3, #0
 800114a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800114c:	4b33      	ldr	r3, [pc, #204]	; (800121c <HAL_InitTick+0xe0>)
 800114e:	69db      	ldr	r3, [r3, #28]
 8001150:	4a32      	ldr	r2, [pc, #200]	; (800121c <HAL_InitTick+0xe0>)
 8001152:	f043 0310 	orr.w	r3, r3, #16
 8001156:	61d3      	str	r3, [r2, #28]
 8001158:	4b30      	ldr	r3, [pc, #192]	; (800121c <HAL_InitTick+0xe0>)
 800115a:	69db      	ldr	r3, [r3, #28]
 800115c:	f003 0310 	and.w	r3, r3, #16
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001164:	f107 0210 	add.w	r2, r7, #16
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	4611      	mov	r1, r2
 800116e:	4618      	mov	r0, r3
 8001170:	f002 faf0 	bl	8003754 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001174:	6a3b      	ldr	r3, [r7, #32]
 8001176:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800117a:	2b00      	cmp	r3, #0
 800117c:	d103      	bne.n	8001186 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800117e:	f002 faa5 	bl	80036cc <HAL_RCC_GetPCLK1Freq>
 8001182:	6378      	str	r0, [r7, #52]	; 0x34
 8001184:	e004      	b.n	8001190 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001186:	f002 faa1 	bl	80036cc <HAL_RCC_GetPCLK1Freq>
 800118a:	4603      	mov	r3, r0
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001192:	4a23      	ldr	r2, [pc, #140]	; (8001220 <HAL_InitTick+0xe4>)
 8001194:	fba2 2303 	umull	r2, r3, r2, r3
 8001198:	0c9b      	lsrs	r3, r3, #18
 800119a:	3b01      	subs	r3, #1
 800119c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800119e:	4b21      	ldr	r3, [pc, #132]	; (8001224 <HAL_InitTick+0xe8>)
 80011a0:	4a21      	ldr	r2, [pc, #132]	; (8001228 <HAL_InitTick+0xec>)
 80011a2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80011a4:	4b1f      	ldr	r3, [pc, #124]	; (8001224 <HAL_InitTick+0xe8>)
 80011a6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011aa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80011ac:	4a1d      	ldr	r2, [pc, #116]	; (8001224 <HAL_InitTick+0xe8>)
 80011ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011b0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80011b2:	4b1c      	ldr	r3, [pc, #112]	; (8001224 <HAL_InitTick+0xe8>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b8:	4b1a      	ldr	r3, [pc, #104]	; (8001224 <HAL_InitTick+0xe8>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011be:	4b19      	ldr	r3, [pc, #100]	; (8001224 <HAL_InitTick+0xe8>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80011c4:	4817      	ldr	r0, [pc, #92]	; (8001224 <HAL_InitTick+0xe8>)
 80011c6:	f002 fd26 	bl	8003c16 <HAL_TIM_Base_Init>
 80011ca:	4603      	mov	r3, r0
 80011cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80011d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d11b      	bne.n	8001210 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80011d8:	4812      	ldr	r0, [pc, #72]	; (8001224 <HAL_InitTick+0xe8>)
 80011da:	f002 fd7d 	bl	8003cd8 <HAL_TIM_Base_Start_IT>
 80011de:	4603      	mov	r3, r0
 80011e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80011e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d111      	bne.n	8001210 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80011ec:	2036      	movs	r0, #54	; 0x36
 80011ee:	f000 fe81 	bl	8001ef4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2b0f      	cmp	r3, #15
 80011f6:	d808      	bhi.n	800120a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80011f8:	2200      	movs	r2, #0
 80011fa:	6879      	ldr	r1, [r7, #4]
 80011fc:	2036      	movs	r0, #54	; 0x36
 80011fe:	f000 fe5d 	bl	8001ebc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001202:	4a0a      	ldr	r2, [pc, #40]	; (800122c <HAL_InitTick+0xf0>)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6013      	str	r3, [r2, #0]
 8001208:	e002      	b.n	8001210 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001210:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001214:	4618      	mov	r0, r3
 8001216:	3738      	adds	r7, #56	; 0x38
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40021000 	.word	0x40021000
 8001220:	431bde83 	.word	0x431bde83
 8001224:	200008dc 	.word	0x200008dc
 8001228:	40001000 	.word	0x40001000
 800122c:	20000004 	.word	0x20000004

08001230 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001234:	e7fe      	b.n	8001234 <NMI_Handler+0x4>

08001236 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800123a:	e7fe      	b.n	800123a <HardFault_Handler+0x4>

0800123c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001240:	e7fe      	b.n	8001240 <MemManage_Handler+0x4>

08001242 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001246:	e7fe      	b.n	8001246 <BusFault_Handler+0x4>

08001248 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800124c:	e7fe      	b.n	800124c <UsageFault_Handler+0x4>

0800124e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001260:	4802      	ldr	r0, [pc, #8]	; (800126c <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001262:	f002 fde4 	bl	8003e2e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000790 	.word	0x20000790

08001270 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001274:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001278:	f000 ffd4 	bl	8002224 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800127c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001280:	f000 ffd0 	bl	8002224 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001284:	bf00      	nop
 8001286:	bd80      	pop	{r7, pc}

08001288 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800128c:	4802      	ldr	r0, [pc, #8]	; (8001298 <TIM6_DAC_IRQHandler+0x10>)
 800128e:	f002 fdce 	bl	8003e2e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	200008dc 	.word	0x200008dc

0800129c <DMA1_Channel1_IRQHandler>:

/* USER CODE BEGIN 1 */
void DMA1_Channel1_IRQHandler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
	__asm__ volatile("NOP");
 80012a0:	bf00      	nop
	DMA1->IFCR |= DMA_IFCR_CGIF1;
 80012a2:	4b06      	ldr	r3, [pc, #24]	; (80012bc <DMA1_Channel1_IRQHandler+0x20>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	4a05      	ldr	r2, [pc, #20]	; (80012bc <DMA1_Channel1_IRQHandler+0x20>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	6053      	str	r3, [r2, #4]
	__asm__ volatile("NOP");
 80012ae:	bf00      	nop
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	40020000 	.word	0x40020000

080012c0 <ADC1_IRQHandler>:

void ADC1_IRQHandler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
	__asm__ volatile("NOP");
 80012c4:	bf00      	nop
	ADC1->ISR |= ADC_ISR_AWD1;
 80012c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80012d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012d4:	6013      	str	r3, [r2, #0]
	__asm__ volatile("NOP");
 80012d6:	bf00      	nop
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
	...

080012e4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <SystemInit+0x20>)
 80012ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ee:	4a05      	ldr	r2, [pc, #20]	; (8001304 <SystemInit+0x20>)
 80012f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001308:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001340 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800130c:	f7ff ffea 	bl	80012e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001310:	480c      	ldr	r0, [pc, #48]	; (8001344 <LoopForever+0x6>)
  ldr r1, =_edata
 8001312:	490d      	ldr	r1, [pc, #52]	; (8001348 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001314:	4a0d      	ldr	r2, [pc, #52]	; (800134c <LoopForever+0xe>)
  movs r3, #0
 8001316:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001318:	e002      	b.n	8001320 <LoopCopyDataInit>

0800131a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800131a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800131c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800131e:	3304      	adds	r3, #4

08001320 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001320:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001322:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001324:	d3f9      	bcc.n	800131a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001326:	4a0a      	ldr	r2, [pc, #40]	; (8001350 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001328:	4c0a      	ldr	r4, [pc, #40]	; (8001354 <LoopForever+0x16>)
  movs r3, #0
 800132a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800132c:	e001      	b.n	8001332 <LoopFillZerobss>

0800132e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800132e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001330:	3204      	adds	r2, #4

08001332 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001332:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001334:	d3fb      	bcc.n	800132e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001336:	f006 fbf1 	bl	8007b1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800133a:	f7fe ffc3 	bl	80002c4 <main>

0800133e <LoopForever>:

LoopForever:
    b LoopForever
 800133e:	e7fe      	b.n	800133e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001340:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001344:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001348:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800134c:	08007d14 	.word	0x08007d14
  ldr r2, =_sbss
 8001350:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001354:	200023dc 	.word	0x200023dc

08001358 <COMP2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001358:	e7fe      	b.n	8001358 <COMP2_IRQHandler>
	...

0800135c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001360:	4b08      	ldr	r3, [pc, #32]	; (8001384 <HAL_Init+0x28>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a07      	ldr	r2, [pc, #28]	; (8001384 <HAL_Init+0x28>)
 8001366:	f043 0310 	orr.w	r3, r3, #16
 800136a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800136c:	2003      	movs	r0, #3
 800136e:	f000 fd9a 	bl	8001ea6 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001372:	2004      	movs	r0, #4
 8001374:	f7ff fee2 	bl	800113c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001378:	f7ff fd7a 	bl	8000e70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40022000 	.word	0x40022000

08001388 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800138c:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <HAL_IncTick+0x20>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	461a      	mov	r2, r3
 8001392:	4b06      	ldr	r3, [pc, #24]	; (80013ac <HAL_IncTick+0x24>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4413      	add	r3, r2
 8001398:	4a04      	ldr	r2, [pc, #16]	; (80013ac <HAL_IncTick+0x24>)
 800139a:	6013      	str	r3, [r2, #0]
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	20000008 	.word	0x20000008
 80013ac:	20000928 	.word	0x20000928

080013b0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  return uwTick;  
 80013b4:	4b03      	ldr	r3, [pc, #12]	; (80013c4 <HAL_GetTick+0x14>)
 80013b6:	681b      	ldr	r3, [r3, #0]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	20000928 	.word	0x20000928

080013c8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013d0:	f7ff ffee 	bl	80013b0 <HAL_GetTick>
 80013d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013e0:	d005      	beq.n	80013ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013e2:	4b0a      	ldr	r3, [pc, #40]	; (800140c <HAL_Delay+0x44>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	461a      	mov	r2, r3
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	4413      	add	r3, r2
 80013ec:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80013ee:	bf00      	nop
 80013f0:	f7ff ffde 	bl	80013b0 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	68fa      	ldr	r2, [r7, #12]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d8f7      	bhi.n	80013f0 <HAL_Delay+0x28>
  {
  }
}
 8001400:	bf00      	nop
 8001402:	bf00      	nop
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000008 	.word	0x20000008

08001410 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b09a      	sub	sp, #104	; 0x68
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001418:	2300      	movs	r3, #0
 800141a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800141e:	2300      	movs	r3, #0
 8001420:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001422:	2300      	movs	r3, #0
 8001424:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d101      	bne.n	8001430 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e169      	b.n	8001704 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	691b      	ldr	r3, [r3, #16]
 8001434:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143a:	f003 0310 	and.w	r3, r3, #16
 800143e:	2b00      	cmp	r3, #0
 8001440:	d176      	bne.n	8001530 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	2b00      	cmp	r3, #0
 8001448:	d152      	bne.n	80014f0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2200      	movs	r2, #0
 8001460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f7ff fd2b 	bl	8000ec0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d13b      	bne.n	80014f0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f000 fc01 	bl	8001c80 <ADC_Disable>
 800147e:	4603      	mov	r3, r0
 8001480:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001488:	f003 0310 	and.w	r3, r3, #16
 800148c:	2b00      	cmp	r3, #0
 800148e:	d12f      	bne.n	80014f0 <HAL_ADC_Init+0xe0>
 8001490:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001494:	2b00      	cmp	r3, #0
 8001496:	d12b      	bne.n	80014f0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80014a0:	f023 0302 	bic.w	r3, r3, #2
 80014a4:	f043 0202 	orr.w	r2, r3, #2
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	689a      	ldr	r2, [r3, #8]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80014ba:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	689a      	ldr	r2, [r3, #8]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014ca:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80014cc:	4b8f      	ldr	r3, [pc, #572]	; (800170c <HAL_ADC_Init+0x2fc>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a8f      	ldr	r2, [pc, #572]	; (8001710 <HAL_ADC_Init+0x300>)
 80014d2:	fba2 2303 	umull	r2, r3, r2, r3
 80014d6:	0c9a      	lsrs	r2, r3, #18
 80014d8:	4613      	mov	r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	4413      	add	r3, r2
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014e2:	e002      	b.n	80014ea <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	3b01      	subs	r3, #1
 80014e8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d1f9      	bne.n	80014e4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d007      	beq.n	800150e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001508:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800150c:	d110      	bne.n	8001530 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	f023 0312 	bic.w	r3, r3, #18
 8001516:	f043 0210 	orr.w	r2, r3, #16
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001522:	f043 0201 	orr.w	r2, r3, #1
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001534:	f003 0310 	and.w	r3, r3, #16
 8001538:	2b00      	cmp	r3, #0
 800153a:	f040 80d6 	bne.w	80016ea <HAL_ADC_Init+0x2da>
 800153e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001542:	2b00      	cmp	r3, #0
 8001544:	f040 80d1 	bne.w	80016ea <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001552:	2b00      	cmp	r3, #0
 8001554:	f040 80c9 	bne.w	80016ea <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001560:	f043 0202 	orr.w	r2, r3, #2
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001568:	4b6a      	ldr	r3, [pc, #424]	; (8001714 <HAL_ADC_Init+0x304>)
 800156a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800156c:	2300      	movs	r3, #0
 800156e:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	f003 0303 	and.w	r3, r3, #3
 800157a:	2b01      	cmp	r3, #1
 800157c:	d108      	bne.n	8001590 <HAL_ADC_Init+0x180>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0301 	and.w	r3, r3, #1
 8001588:	2b01      	cmp	r3, #1
 800158a:	d101      	bne.n	8001590 <HAL_ADC_Init+0x180>
 800158c:	2301      	movs	r3, #1
 800158e:	e000      	b.n	8001592 <HAL_ADC_Init+0x182>
 8001590:	2300      	movs	r3, #0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d11c      	bne.n	80015d0 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001596:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001598:	2b00      	cmp	r3, #0
 800159a:	d010      	beq.n	80015be <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f003 0303 	and.w	r3, r3, #3
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d107      	bne.n	80015b8 <HAL_ADC_Init+0x1a8>
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d101      	bne.n	80015b8 <HAL_ADC_Init+0x1a8>
 80015b4:	2301      	movs	r3, #1
 80015b6:	e000      	b.n	80015ba <HAL_ADC_Init+0x1aa>
 80015b8:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d108      	bne.n	80015d0 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80015be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	431a      	orrs	r2, r3
 80015cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015ce:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	7e5b      	ldrb	r3, [r3, #25]
 80015d4:	035b      	lsls	r3, r3, #13
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80015da:	2a01      	cmp	r2, #1
 80015dc:	d002      	beq.n	80015e4 <HAL_ADC_Init+0x1d4>
 80015de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015e2:	e000      	b.n	80015e6 <HAL_ADC_Init+0x1d6>
 80015e4:	2200      	movs	r2, #0
 80015e6:	431a      	orrs	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	431a      	orrs	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80015f6:	4313      	orrs	r3, r2
 80015f8:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d11b      	bne.n	800163c <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	7e5b      	ldrb	r3, [r3, #25]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d109      	bne.n	8001620 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001610:	3b01      	subs	r3, #1
 8001612:	045a      	lsls	r2, r3, #17
 8001614:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001616:	4313      	orrs	r3, r2
 8001618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800161c:	663b      	str	r3, [r7, #96]	; 0x60
 800161e:	e00d      	b.n	800163c <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001624:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001628:	f043 0220 	orr.w	r2, r3, #32
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001634:	f043 0201 	orr.w	r2, r3, #1
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001640:	2b01      	cmp	r3, #1
 8001642:	d007      	beq.n	8001654 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800164c:	4313      	orrs	r3, r2
 800164e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001650:	4313      	orrs	r3, r2
 8001652:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f003 030c 	and.w	r3, r3, #12
 800165e:	2b00      	cmp	r3, #0
 8001660:	d114      	bne.n	800168c <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	6812      	ldr	r2, [r2, #0]
 800166c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001670:	f023 0302 	bic.w	r3, r3, #2
 8001674:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	7e1b      	ldrb	r3, [r3, #24]
 800167a:	039a      	lsls	r2, r3, #14
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	4313      	orrs	r3, r2
 8001686:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001688:	4313      	orrs	r3, r2
 800168a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	68da      	ldr	r2, [r3, #12]
 8001692:	4b21      	ldr	r3, [pc, #132]	; (8001718 <HAL_ADC_Init+0x308>)
 8001694:	4013      	ands	r3, r2
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	6812      	ldr	r2, [r2, #0]
 800169a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800169c:	430b      	orrs	r3, r1
 800169e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	691b      	ldr	r3, [r3, #16]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d10c      	bne.n	80016c2 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	f023 010f 	bic.w	r1, r3, #15
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	1e5a      	subs	r2, r3, #1
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	430a      	orrs	r2, r1
 80016be:	631a      	str	r2, [r3, #48]	; 0x30
 80016c0:	e007      	b.n	80016d2 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f022 020f 	bic.w	r2, r2, #15
 80016d0:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016dc:	f023 0303 	bic.w	r3, r3, #3
 80016e0:	f043 0201 	orr.w	r2, r3, #1
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	641a      	str	r2, [r3, #64]	; 0x40
 80016e8:	e00a      	b.n	8001700 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	f023 0312 	bic.w	r3, r3, #18
 80016f2:	f043 0210 	orr.w	r2, r3, #16
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80016fa:	2301      	movs	r3, #1
 80016fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001700:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001704:	4618      	mov	r0, r3
 8001706:	3768      	adds	r7, #104	; 0x68
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	20000000 	.word	0x20000000
 8001710:	431bde83 	.word	0x431bde83
 8001714:	50000300 	.word	0x50000300
 8001718:	fff0c007 	.word	0xfff0c007

0800171c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800171c:	b480      	push	{r7}
 800171e:	b09b      	sub	sp, #108	; 0x6c
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001726:	2300      	movs	r3, #0
 8001728:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800172c:	2300      	movs	r3, #0
 800172e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001736:	2b01      	cmp	r3, #1
 8001738:	d101      	bne.n	800173e <HAL_ADC_ConfigChannel+0x22>
 800173a:	2302      	movs	r3, #2
 800173c:	e295      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x54e>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2201      	movs	r2, #1
 8001742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f003 0304 	and.w	r3, r3, #4
 8001750:	2b00      	cmp	r3, #0
 8001752:	f040 8279 	bne.w	8001c48 <HAL_ADC_ConfigChannel+0x52c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2b04      	cmp	r3, #4
 800175c:	d81c      	bhi.n	8001798 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685a      	ldr	r2, [r3, #4]
 8001768:	4613      	mov	r3, r2
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	4413      	add	r3, r2
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	461a      	mov	r2, r3
 8001772:	231f      	movs	r3, #31
 8001774:	4093      	lsls	r3, r2
 8001776:	43db      	mvns	r3, r3
 8001778:	4019      	ands	r1, r3
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	6818      	ldr	r0, [r3, #0]
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685a      	ldr	r2, [r3, #4]
 8001782:	4613      	mov	r3, r2
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	4413      	add	r3, r2
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	fa00 f203 	lsl.w	r2, r0, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	430a      	orrs	r2, r1
 8001794:	631a      	str	r2, [r3, #48]	; 0x30
 8001796:	e063      	b.n	8001860 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	2b09      	cmp	r3, #9
 800179e:	d81e      	bhi.n	80017de <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685a      	ldr	r2, [r3, #4]
 80017aa:	4613      	mov	r3, r2
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	4413      	add	r3, r2
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	3b1e      	subs	r3, #30
 80017b4:	221f      	movs	r2, #31
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	43db      	mvns	r3, r3
 80017bc:	4019      	ands	r1, r3
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	6818      	ldr	r0, [r3, #0]
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685a      	ldr	r2, [r3, #4]
 80017c6:	4613      	mov	r3, r2
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	4413      	add	r3, r2
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	3b1e      	subs	r3, #30
 80017d0:	fa00 f203 	lsl.w	r2, r0, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	430a      	orrs	r2, r1
 80017da:	635a      	str	r2, [r3, #52]	; 0x34
 80017dc:	e040      	b.n	8001860 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2b0e      	cmp	r3, #14
 80017e4:	d81e      	bhi.n	8001824 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685a      	ldr	r2, [r3, #4]
 80017f0:	4613      	mov	r3, r2
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	4413      	add	r3, r2
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	3b3c      	subs	r3, #60	; 0x3c
 80017fa:	221f      	movs	r2, #31
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	43db      	mvns	r3, r3
 8001802:	4019      	ands	r1, r3
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	6818      	ldr	r0, [r3, #0]
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685a      	ldr	r2, [r3, #4]
 800180c:	4613      	mov	r3, r2
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	4413      	add	r3, r2
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	3b3c      	subs	r3, #60	; 0x3c
 8001816:	fa00 f203 	lsl.w	r2, r0, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	430a      	orrs	r2, r1
 8001820:	639a      	str	r2, [r3, #56]	; 0x38
 8001822:	e01d      	b.n	8001860 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685a      	ldr	r2, [r3, #4]
 800182e:	4613      	mov	r3, r2
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	4413      	add	r3, r2
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	3b5a      	subs	r3, #90	; 0x5a
 8001838:	221f      	movs	r2, #31
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43db      	mvns	r3, r3
 8001840:	4019      	ands	r1, r3
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	6818      	ldr	r0, [r3, #0]
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685a      	ldr	r2, [r3, #4]
 800184a:	4613      	mov	r3, r2
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	4413      	add	r3, r2
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	3b5a      	subs	r3, #90	; 0x5a
 8001854:	fa00 f203 	lsl.w	r2, r0, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	430a      	orrs	r2, r1
 800185e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f003 030c 	and.w	r3, r3, #12
 800186a:	2b00      	cmp	r3, #0
 800186c:	f040 80e5 	bne.w	8001a3a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2b09      	cmp	r3, #9
 8001876:	d91c      	bls.n	80018b2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	6999      	ldr	r1, [r3, #24]
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	4613      	mov	r3, r2
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	4413      	add	r3, r2
 8001888:	3b1e      	subs	r3, #30
 800188a:	2207      	movs	r2, #7
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	43db      	mvns	r3, r3
 8001892:	4019      	ands	r1, r3
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	6898      	ldr	r0, [r3, #8]
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	4613      	mov	r3, r2
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	4413      	add	r3, r2
 80018a2:	3b1e      	subs	r3, #30
 80018a4:	fa00 f203 	lsl.w	r2, r0, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	430a      	orrs	r2, r1
 80018ae:	619a      	str	r2, [r3, #24]
 80018b0:	e019      	b.n	80018e6 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	6959      	ldr	r1, [r3, #20]
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	4613      	mov	r3, r2
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	4413      	add	r3, r2
 80018c2:	2207      	movs	r2, #7
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	43db      	mvns	r3, r3
 80018ca:	4019      	ands	r1, r3
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	6898      	ldr	r0, [r3, #8]
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	4613      	mov	r3, r2
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	4413      	add	r3, r2
 80018da:	fa00 f203 	lsl.w	r2, r0, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	430a      	orrs	r2, r1
 80018e4:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	695a      	ldr	r2, [r3, #20]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	08db      	lsrs	r3, r3, #3
 80018f2:	f003 0303 	and.w	r3, r3, #3
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	691b      	ldr	r3, [r3, #16]
 8001902:	3b01      	subs	r3, #1
 8001904:	2b03      	cmp	r3, #3
 8001906:	d84f      	bhi.n	80019a8 <HAL_ADC_ConfigChannel+0x28c>
 8001908:	a201      	add	r2, pc, #4	; (adr r2, 8001910 <HAL_ADC_ConfigChannel+0x1f4>)
 800190a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800190e:	bf00      	nop
 8001910:	08001921 	.word	0x08001921
 8001914:	08001943 	.word	0x08001943
 8001918:	08001965 	.word	0x08001965
 800191c:	08001987 	.word	0x08001987
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001926:	4b97      	ldr	r3, [pc, #604]	; (8001b84 <HAL_ADC_ConfigChannel+0x468>)
 8001928:	4013      	ands	r3, r2
 800192a:	683a      	ldr	r2, [r7, #0]
 800192c:	6812      	ldr	r2, [r2, #0]
 800192e:	0691      	lsls	r1, r2, #26
 8001930:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001932:	430a      	orrs	r2, r1
 8001934:	431a      	orrs	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800193e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001940:	e07b      	b.n	8001a3a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001948:	4b8e      	ldr	r3, [pc, #568]	; (8001b84 <HAL_ADC_ConfigChannel+0x468>)
 800194a:	4013      	ands	r3, r2
 800194c:	683a      	ldr	r2, [r7, #0]
 800194e:	6812      	ldr	r2, [r2, #0]
 8001950:	0691      	lsls	r1, r2, #26
 8001952:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001954:	430a      	orrs	r2, r1
 8001956:	431a      	orrs	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001960:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001962:	e06a      	b.n	8001a3a <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800196a:	4b86      	ldr	r3, [pc, #536]	; (8001b84 <HAL_ADC_ConfigChannel+0x468>)
 800196c:	4013      	ands	r3, r2
 800196e:	683a      	ldr	r2, [r7, #0]
 8001970:	6812      	ldr	r2, [r2, #0]
 8001972:	0691      	lsls	r1, r2, #26
 8001974:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001976:	430a      	orrs	r2, r1
 8001978:	431a      	orrs	r2, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001982:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001984:	e059      	b.n	8001a3a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800198c:	4b7d      	ldr	r3, [pc, #500]	; (8001b84 <HAL_ADC_ConfigChannel+0x468>)
 800198e:	4013      	ands	r3, r2
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	6812      	ldr	r2, [r2, #0]
 8001994:	0691      	lsls	r1, r2, #26
 8001996:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001998:	430a      	orrs	r2, r1
 800199a:	431a      	orrs	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80019a4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80019a6:	e048      	b.n	8001a3a <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	069b      	lsls	r3, r3, #26
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d107      	bne.n	80019cc <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80019ca:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80019d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	069b      	lsls	r3, r3, #26
 80019dc:	429a      	cmp	r2, r3
 80019de:	d107      	bne.n	80019f0 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80019ee:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80019f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	069b      	lsls	r3, r3, #26
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d107      	bne.n	8001a14 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a12:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a1a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	069b      	lsls	r3, r3, #26
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d107      	bne.n	8001a38 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a36:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001a38:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f003 0303 	and.w	r3, r3, #3
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d108      	bne.n	8001a5a <HAL_ADC_ConfigChannel+0x33e>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d101      	bne.n	8001a5a <HAL_ADC_ConfigChannel+0x33e>
 8001a56:	2301      	movs	r3, #1
 8001a58:	e000      	b.n	8001a5c <HAL_ADC_ConfigChannel+0x340>
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	f040 80fe 	bne.w	8001c5e <HAL_ADC_ConfigChannel+0x542>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d00f      	beq.n	8001a8a <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2201      	movs	r2, #1
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	43da      	mvns	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	400a      	ands	r2, r1
 8001a84:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001a88:	e049      	b.n	8001b1e <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2201      	movs	r2, #1
 8001a98:	409a      	lsls	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2b09      	cmp	r3, #9
 8001aaa:	d91c      	bls.n	8001ae6 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	6999      	ldr	r1, [r3, #24]
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	4413      	add	r3, r2
 8001abc:	3b1b      	subs	r3, #27
 8001abe:	2207      	movs	r2, #7
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	4019      	ands	r1, r3
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	6898      	ldr	r0, [r3, #8]
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	4413      	add	r3, r2
 8001ad6:	3b1b      	subs	r3, #27
 8001ad8:	fa00 f203 	lsl.w	r2, r0, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	619a      	str	r2, [r3, #24]
 8001ae4:	e01b      	b.n	8001b1e <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	6959      	ldr	r1, [r3, #20]
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	1c5a      	adds	r2, r3, #1
 8001af2:	4613      	mov	r3, r2
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	4413      	add	r3, r2
 8001af8:	2207      	movs	r2, #7
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	43db      	mvns	r3, r3
 8001b00:	4019      	ands	r1, r3
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	6898      	ldr	r0, [r3, #8]
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	1c5a      	adds	r2, r3, #1
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	4413      	add	r3, r2
 8001b12:	fa00 f203 	lsl.w	r2, r0, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b1e:	4b1a      	ldr	r3, [pc, #104]	; (8001b88 <HAL_ADC_ConfigChannel+0x46c>)
 8001b20:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2b10      	cmp	r3, #16
 8001b28:	d105      	bne.n	8001b36 <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001b2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d014      	beq.n	8001b60 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001b3a:	2b11      	cmp	r3, #17
 8001b3c:	d105      	bne.n	8001b4a <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001b3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d00a      	beq.n	8001b60 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001b4e:	2b12      	cmp	r3, #18
 8001b50:	f040 8085 	bne.w	8001c5e <HAL_ADC_ConfigChannel+0x542>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001b54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d17e      	bne.n	8001c5e <HAL_ADC_ConfigChannel+0x542>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001b60:	2300      	movs	r3, #0
 8001b62:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 0303 	and.w	r3, r3, #3
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d10c      	bne.n	8001b8c <HAL_ADC_ConfigChannel+0x470>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0301 	and.w	r3, r3, #1
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d105      	bne.n	8001b8c <HAL_ADC_ConfigChannel+0x470>
 8001b80:	2301      	movs	r3, #1
 8001b82:	e004      	b.n	8001b8e <HAL_ADC_ConfigChannel+0x472>
 8001b84:	83fff000 	.word	0x83fff000
 8001b88:	50000300 	.word	0x50000300
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d150      	bne.n	8001c34 <HAL_ADC_ConfigChannel+0x518>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001b92:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d010      	beq.n	8001bba <HAL_ADC_ConfigChannel+0x49e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 0303 	and.w	r3, r3, #3
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d107      	bne.n	8001bb4 <HAL_ADC_ConfigChannel+0x498>
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d101      	bne.n	8001bb4 <HAL_ADC_ConfigChannel+0x498>
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e000      	b.n	8001bb6 <HAL_ADC_ConfigChannel+0x49a>
 8001bb4:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d13c      	bne.n	8001c34 <HAL_ADC_ConfigChannel+0x518>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2b10      	cmp	r3, #16
 8001bc0:	d11d      	bne.n	8001bfe <HAL_ADC_ConfigChannel+0x4e2>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bca:	d118      	bne.n	8001bfe <HAL_ADC_ConfigChannel+0x4e2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001bcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001bd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bd6:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bd8:	4b27      	ldr	r3, [pc, #156]	; (8001c78 <HAL_ADC_ConfigChannel+0x55c>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a27      	ldr	r2, [pc, #156]	; (8001c7c <HAL_ADC_ConfigChannel+0x560>)
 8001bde:	fba2 2303 	umull	r2, r3, r2, r3
 8001be2:	0c9a      	lsrs	r2, r3, #18
 8001be4:	4613      	mov	r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	4413      	add	r3, r2
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001bee:	e002      	b.n	8001bf6 <HAL_ADC_ConfigChannel+0x4da>
          {
            wait_loop_index--;
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d1f9      	bne.n	8001bf0 <HAL_ADC_ConfigChannel+0x4d4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001bfc:	e02e      	b.n	8001c5c <HAL_ADC_ConfigChannel+0x540>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2b11      	cmp	r3, #17
 8001c04:	d10b      	bne.n	8001c1e <HAL_ADC_ConfigChannel+0x502>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c0e:	d106      	bne.n	8001c1e <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001c10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001c18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c1a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c1c:	e01e      	b.n	8001c5c <HAL_ADC_ConfigChannel+0x540>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2b12      	cmp	r3, #18
 8001c24:	d11a      	bne.n	8001c5c <HAL_ADC_ConfigChannel+0x540>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001c26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c30:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c32:	e013      	b.n	8001c5c <HAL_ADC_ConfigChannel+0x540>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c38:	f043 0220 	orr.w	r2, r3, #32
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001c46:	e00a      	b.n	8001c5e <HAL_ADC_ConfigChannel+0x542>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4c:	f043 0220 	orr.w	r2, r3, #32
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001c5a:	e000      	b.n	8001c5e <HAL_ADC_ConfigChannel+0x542>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c5c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001c66:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	376c      	adds	r7, #108	; 0x6c
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	20000000 	.word	0x20000000
 8001c7c:	431bde83 	.word	0x431bde83

08001c80 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f003 0303 	and.w	r3, r3, #3
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d108      	bne.n	8001cac <ADC_Disable+0x2c>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0301 	and.w	r3, r3, #1
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d101      	bne.n	8001cac <ADC_Disable+0x2c>
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e000      	b.n	8001cae <ADC_Disable+0x2e>
 8001cac:	2300      	movs	r3, #0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d047      	beq.n	8001d42 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f003 030d 	and.w	r3, r3, #13
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d10f      	bne.n	8001ce0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	689a      	ldr	r2, [r3, #8]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f042 0202 	orr.w	r2, r2, #2
 8001cce:	609a      	str	r2, [r3, #8]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2203      	movs	r2, #3
 8001cd6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001cd8:	f7ff fb6a 	bl	80013b0 <HAL_GetTick>
 8001cdc:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001cde:	e029      	b.n	8001d34 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce4:	f043 0210 	orr.w	r2, r3, #16
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf0:	f043 0201 	orr.w	r2, r3, #1
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e023      	b.n	8001d44 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001cfc:	f7ff fb58 	bl	80013b0 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d914      	bls.n	8001d34 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d10d      	bne.n	8001d34 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1c:	f043 0210 	orr.w	r2, r3, #16
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d28:	f043 0201 	orr.w	r2, r3, #1
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e007      	b.n	8001d44 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d0dc      	beq.n	8001cfc <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3710      	adds	r7, #16
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d5c:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <__NVIC_SetPriorityGrouping+0x44>)
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d62:	68ba      	ldr	r2, [r7, #8]
 8001d64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d68:	4013      	ands	r3, r2
 8001d6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d7e:	4a04      	ldr	r2, [pc, #16]	; (8001d90 <__NVIC_SetPriorityGrouping+0x44>)
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	60d3      	str	r3, [r2, #12]
}
 8001d84:	bf00      	nop
 8001d86:	3714      	adds	r7, #20
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	e000ed00 	.word	0xe000ed00

08001d94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d98:	4b04      	ldr	r3, [pc, #16]	; (8001dac <__NVIC_GetPriorityGrouping+0x18>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	0a1b      	lsrs	r3, r3, #8
 8001d9e:	f003 0307 	and.w	r3, r3, #7
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	e000ed00 	.word	0xe000ed00

08001db0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	db0b      	blt.n	8001dda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dc2:	79fb      	ldrb	r3, [r7, #7]
 8001dc4:	f003 021f 	and.w	r2, r3, #31
 8001dc8:	4907      	ldr	r1, [pc, #28]	; (8001de8 <__NVIC_EnableIRQ+0x38>)
 8001dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dce:	095b      	lsrs	r3, r3, #5
 8001dd0:	2001      	movs	r0, #1
 8001dd2:	fa00 f202 	lsl.w	r2, r0, r2
 8001dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dda:	bf00      	nop
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	e000e100 	.word	0xe000e100

08001dec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	6039      	str	r1, [r7, #0]
 8001df6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	db0a      	blt.n	8001e16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	b2da      	uxtb	r2, r3
 8001e04:	490c      	ldr	r1, [pc, #48]	; (8001e38 <__NVIC_SetPriority+0x4c>)
 8001e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0a:	0112      	lsls	r2, r2, #4
 8001e0c:	b2d2      	uxtb	r2, r2
 8001e0e:	440b      	add	r3, r1
 8001e10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e14:	e00a      	b.n	8001e2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	4908      	ldr	r1, [pc, #32]	; (8001e3c <__NVIC_SetPriority+0x50>)
 8001e1c:	79fb      	ldrb	r3, [r7, #7]
 8001e1e:	f003 030f 	and.w	r3, r3, #15
 8001e22:	3b04      	subs	r3, #4
 8001e24:	0112      	lsls	r2, r2, #4
 8001e26:	b2d2      	uxtb	r2, r2
 8001e28:	440b      	add	r3, r1
 8001e2a:	761a      	strb	r2, [r3, #24]
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	e000e100 	.word	0xe000e100
 8001e3c:	e000ed00 	.word	0xe000ed00

08001e40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b089      	sub	sp, #36	; 0x24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	f1c3 0307 	rsb	r3, r3, #7
 8001e5a:	2b04      	cmp	r3, #4
 8001e5c:	bf28      	it	cs
 8001e5e:	2304      	movcs	r3, #4
 8001e60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	3304      	adds	r3, #4
 8001e66:	2b06      	cmp	r3, #6
 8001e68:	d902      	bls.n	8001e70 <NVIC_EncodePriority+0x30>
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	3b03      	subs	r3, #3
 8001e6e:	e000      	b.n	8001e72 <NVIC_EncodePriority+0x32>
 8001e70:	2300      	movs	r3, #0
 8001e72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e74:	f04f 32ff 	mov.w	r2, #4294967295
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	43da      	mvns	r2, r3
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	401a      	ands	r2, r3
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e88:	f04f 31ff 	mov.w	r1, #4294967295
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e92:	43d9      	mvns	r1, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e98:	4313      	orrs	r3, r2
         );
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3724      	adds	r7, #36	; 0x24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr

08001ea6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b082      	sub	sp, #8
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7ff ff4c 	bl	8001d4c <__NVIC_SetPriorityGrouping>
}
 8001eb4:	bf00      	nop
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
 8001ec8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ece:	f7ff ff61 	bl	8001d94 <__NVIC_GetPriorityGrouping>
 8001ed2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	68b9      	ldr	r1, [r7, #8]
 8001ed8:	6978      	ldr	r0, [r7, #20]
 8001eda:	f7ff ffb1 	bl	8001e40 <NVIC_EncodePriority>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ee4:	4611      	mov	r1, r2
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff ff80 	bl	8001dec <__NVIC_SetPriority>
}
 8001eec:	bf00      	nop
 8001eee:	3718      	adds	r7, #24
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff ff54 	bl	8001db0 <__NVIC_EnableIRQ>
}
 8001f08:	bf00      	nop
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b087      	sub	sp, #28
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f1e:	e14e      	b.n	80021be <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	2101      	movs	r1, #1
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f000 8140 	beq.w	80021b8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f003 0303 	and.w	r3, r3, #3
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d005      	beq.n	8001f50 <HAL_GPIO_Init+0x40>
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f003 0303 	and.w	r3, r3, #3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d130      	bne.n	8001fb2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	2203      	movs	r2, #3
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	43db      	mvns	r3, r3
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	4013      	ands	r3, r2
 8001f66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	68da      	ldr	r2, [r3, #12]
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f86:	2201      	movs	r2, #1
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	4013      	ands	r3, r2
 8001f94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	091b      	lsrs	r3, r3, #4
 8001f9c:	f003 0201 	and.w	r2, r3, #1
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f003 0303 	and.w	r3, r3, #3
 8001fba:	2b03      	cmp	r3, #3
 8001fbc:	d017      	beq.n	8001fee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	2203      	movs	r2, #3
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	43db      	mvns	r3, r3
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	689a      	ldr	r2, [r3, #8]
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f003 0303 	and.w	r3, r3, #3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d123      	bne.n	8002042 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	08da      	lsrs	r2, r3, #3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	3208      	adds	r2, #8
 8002002:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002006:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	220f      	movs	r2, #15
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	43db      	mvns	r3, r3
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	4013      	ands	r3, r2
 800201c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	691a      	ldr	r2, [r3, #16]
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	f003 0307 	and.w	r3, r3, #7
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	4313      	orrs	r3, r2
 8002032:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	08da      	lsrs	r2, r3, #3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	3208      	adds	r2, #8
 800203c:	6939      	ldr	r1, [r7, #16]
 800203e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	2203      	movs	r2, #3
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	43db      	mvns	r3, r3
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	4013      	ands	r3, r2
 8002058:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f003 0203 	and.w	r2, r3, #3
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	4313      	orrs	r3, r2
 800206e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800207e:	2b00      	cmp	r3, #0
 8002080:	f000 809a 	beq.w	80021b8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002084:	4b55      	ldr	r3, [pc, #340]	; (80021dc <HAL_GPIO_Init+0x2cc>)
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	4a54      	ldr	r2, [pc, #336]	; (80021dc <HAL_GPIO_Init+0x2cc>)
 800208a:	f043 0301 	orr.w	r3, r3, #1
 800208e:	6193      	str	r3, [r2, #24]
 8002090:	4b52      	ldr	r3, [pc, #328]	; (80021dc <HAL_GPIO_Init+0x2cc>)
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	60bb      	str	r3, [r7, #8]
 800209a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800209c:	4a50      	ldr	r2, [pc, #320]	; (80021e0 <HAL_GPIO_Init+0x2d0>)
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	089b      	lsrs	r3, r3, #2
 80020a2:	3302      	adds	r3, #2
 80020a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	f003 0303 	and.w	r3, r3, #3
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	220f      	movs	r2, #15
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	43db      	mvns	r3, r3
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	4013      	ands	r3, r2
 80020be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80020c6:	d013      	beq.n	80020f0 <HAL_GPIO_Init+0x1e0>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a46      	ldr	r2, [pc, #280]	; (80021e4 <HAL_GPIO_Init+0x2d4>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d00d      	beq.n	80020ec <HAL_GPIO_Init+0x1dc>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a45      	ldr	r2, [pc, #276]	; (80021e8 <HAL_GPIO_Init+0x2d8>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d007      	beq.n	80020e8 <HAL_GPIO_Init+0x1d8>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a44      	ldr	r2, [pc, #272]	; (80021ec <HAL_GPIO_Init+0x2dc>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d101      	bne.n	80020e4 <HAL_GPIO_Init+0x1d4>
 80020e0:	2303      	movs	r3, #3
 80020e2:	e006      	b.n	80020f2 <HAL_GPIO_Init+0x1e2>
 80020e4:	2305      	movs	r3, #5
 80020e6:	e004      	b.n	80020f2 <HAL_GPIO_Init+0x1e2>
 80020e8:	2302      	movs	r3, #2
 80020ea:	e002      	b.n	80020f2 <HAL_GPIO_Init+0x1e2>
 80020ec:	2301      	movs	r3, #1
 80020ee:	e000      	b.n	80020f2 <HAL_GPIO_Init+0x1e2>
 80020f0:	2300      	movs	r3, #0
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	f002 0203 	and.w	r2, r2, #3
 80020f8:	0092      	lsls	r2, r2, #2
 80020fa:	4093      	lsls	r3, r2
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	4313      	orrs	r3, r2
 8002100:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002102:	4937      	ldr	r1, [pc, #220]	; (80021e0 <HAL_GPIO_Init+0x2d0>)
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	089b      	lsrs	r3, r3, #2
 8002108:	3302      	adds	r3, #2
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002110:	4b37      	ldr	r3, [pc, #220]	; (80021f0 <HAL_GPIO_Init+0x2e0>)
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	43db      	mvns	r3, r3
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	4013      	ands	r3, r2
 800211e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d003      	beq.n	8002134 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	4313      	orrs	r3, r2
 8002132:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002134:	4a2e      	ldr	r2, [pc, #184]	; (80021f0 <HAL_GPIO_Init+0x2e0>)
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800213a:	4b2d      	ldr	r3, [pc, #180]	; (80021f0 <HAL_GPIO_Init+0x2e0>)
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	43db      	mvns	r3, r3
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	4013      	ands	r3, r2
 8002148:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	4313      	orrs	r3, r2
 800215c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800215e:	4a24      	ldr	r2, [pc, #144]	; (80021f0 <HAL_GPIO_Init+0x2e0>)
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002164:	4b22      	ldr	r3, [pc, #136]	; (80021f0 <HAL_GPIO_Init+0x2e0>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	43db      	mvns	r3, r3
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	4013      	ands	r3, r2
 8002172:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d003      	beq.n	8002188 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	4313      	orrs	r3, r2
 8002186:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002188:	4a19      	ldr	r2, [pc, #100]	; (80021f0 <HAL_GPIO_Init+0x2e0>)
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800218e:	4b18      	ldr	r3, [pc, #96]	; (80021f0 <HAL_GPIO_Init+0x2e0>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	43db      	mvns	r3, r3
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	4013      	ands	r3, r2
 800219c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d003      	beq.n	80021b2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80021b2:	4a0f      	ldr	r2, [pc, #60]	; (80021f0 <HAL_GPIO_Init+0x2e0>)
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	3301      	adds	r3, #1
 80021bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	fa22 f303 	lsr.w	r3, r2, r3
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f47f aea9 	bne.w	8001f20 <HAL_GPIO_Init+0x10>
  }
}
 80021ce:	bf00      	nop
 80021d0:	bf00      	nop
 80021d2:	371c      	adds	r7, #28
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	40021000 	.word	0x40021000
 80021e0:	40010000 	.word	0x40010000
 80021e4:	48000400 	.word	0x48000400
 80021e8:	48000800 	.word	0x48000800
 80021ec:	48000c00 	.word	0x48000c00
 80021f0:	40010400 	.word	0x40010400

080021f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	460b      	mov	r3, r1
 80021fe:	807b      	strh	r3, [r7, #2]
 8002200:	4613      	mov	r3, r2
 8002202:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002204:	787b      	ldrb	r3, [r7, #1]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d003      	beq.n	8002212 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800220a:	887a      	ldrh	r2, [r7, #2]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002210:	e002      	b.n	8002218 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002212:	887a      	ldrh	r2, [r7, #2]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	4603      	mov	r3, r0
 800222c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800222e:	4b08      	ldr	r3, [pc, #32]	; (8002250 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002230:	695a      	ldr	r2, [r3, #20]
 8002232:	88fb      	ldrh	r3, [r7, #6]
 8002234:	4013      	ands	r3, r2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d006      	beq.n	8002248 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800223a:	4a05      	ldr	r2, [pc, #20]	; (8002250 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800223c:	88fb      	ldrh	r3, [r7, #6]
 800223e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002240:	88fb      	ldrh	r3, [r7, #6]
 8002242:	4618      	mov	r0, r3
 8002244:	f000 f806 	bl	8002254 <HAL_GPIO_EXTI_Callback>
  }
}
 8002248:	bf00      	nop
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40010400 	.word	0x40010400

08002254 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	4603      	mov	r3, r0
 800225c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800225e:	bf00      	nop
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
	...

0800226c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002272:	af00      	add	r7, sp, #0
 8002274:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002278:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800227c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800227e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002282:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d102      	bne.n	8002292 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	f001 b823 	b.w	80032d8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002292:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002296:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f000 817d 	beq.w	80025a2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80022a8:	4bbc      	ldr	r3, [pc, #752]	; (800259c <HAL_RCC_OscConfig+0x330>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f003 030c 	and.w	r3, r3, #12
 80022b0:	2b04      	cmp	r3, #4
 80022b2:	d00c      	beq.n	80022ce <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022b4:	4bb9      	ldr	r3, [pc, #740]	; (800259c <HAL_RCC_OscConfig+0x330>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f003 030c 	and.w	r3, r3, #12
 80022bc:	2b08      	cmp	r3, #8
 80022be:	d15c      	bne.n	800237a <HAL_RCC_OscConfig+0x10e>
 80022c0:	4bb6      	ldr	r3, [pc, #728]	; (800259c <HAL_RCC_OscConfig+0x330>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022cc:	d155      	bne.n	800237a <HAL_RCC_OscConfig+0x10e>
 80022ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022d2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80022da:	fa93 f3a3 	rbit	r3, r3
 80022de:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022e2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e6:	fab3 f383 	clz	r3, r3
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	095b      	lsrs	r3, r3, #5
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	f043 0301 	orr.w	r3, r3, #1
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d102      	bne.n	8002300 <HAL_RCC_OscConfig+0x94>
 80022fa:	4ba8      	ldr	r3, [pc, #672]	; (800259c <HAL_RCC_OscConfig+0x330>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	e015      	b.n	800232c <HAL_RCC_OscConfig+0xc0>
 8002300:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002304:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002308:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800230c:	fa93 f3a3 	rbit	r3, r3
 8002310:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002314:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002318:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800231c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002320:	fa93 f3a3 	rbit	r3, r3
 8002324:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002328:	4b9c      	ldr	r3, [pc, #624]	; (800259c <HAL_RCC_OscConfig+0x330>)
 800232a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002330:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002334:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002338:	fa92 f2a2 	rbit	r2, r2
 800233c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002340:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002344:	fab2 f282 	clz	r2, r2
 8002348:	b2d2      	uxtb	r2, r2
 800234a:	f042 0220 	orr.w	r2, r2, #32
 800234e:	b2d2      	uxtb	r2, r2
 8002350:	f002 021f 	and.w	r2, r2, #31
 8002354:	2101      	movs	r1, #1
 8002356:	fa01 f202 	lsl.w	r2, r1, r2
 800235a:	4013      	ands	r3, r2
 800235c:	2b00      	cmp	r3, #0
 800235e:	f000 811f 	beq.w	80025a0 <HAL_RCC_OscConfig+0x334>
 8002362:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002366:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	f040 8116 	bne.w	80025a0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	f000 bfaf 	b.w	80032d8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800237a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800237e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800238a:	d106      	bne.n	800239a <HAL_RCC_OscConfig+0x12e>
 800238c:	4b83      	ldr	r3, [pc, #524]	; (800259c <HAL_RCC_OscConfig+0x330>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a82      	ldr	r2, [pc, #520]	; (800259c <HAL_RCC_OscConfig+0x330>)
 8002392:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002396:	6013      	str	r3, [r2, #0]
 8002398:	e036      	b.n	8002408 <HAL_RCC_OscConfig+0x19c>
 800239a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800239e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d10c      	bne.n	80023c4 <HAL_RCC_OscConfig+0x158>
 80023aa:	4b7c      	ldr	r3, [pc, #496]	; (800259c <HAL_RCC_OscConfig+0x330>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a7b      	ldr	r2, [pc, #492]	; (800259c <HAL_RCC_OscConfig+0x330>)
 80023b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023b4:	6013      	str	r3, [r2, #0]
 80023b6:	4b79      	ldr	r3, [pc, #484]	; (800259c <HAL_RCC_OscConfig+0x330>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a78      	ldr	r2, [pc, #480]	; (800259c <HAL_RCC_OscConfig+0x330>)
 80023bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023c0:	6013      	str	r3, [r2, #0]
 80023c2:	e021      	b.n	8002408 <HAL_RCC_OscConfig+0x19c>
 80023c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023d4:	d10c      	bne.n	80023f0 <HAL_RCC_OscConfig+0x184>
 80023d6:	4b71      	ldr	r3, [pc, #452]	; (800259c <HAL_RCC_OscConfig+0x330>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a70      	ldr	r2, [pc, #448]	; (800259c <HAL_RCC_OscConfig+0x330>)
 80023dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023e0:	6013      	str	r3, [r2, #0]
 80023e2:	4b6e      	ldr	r3, [pc, #440]	; (800259c <HAL_RCC_OscConfig+0x330>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a6d      	ldr	r2, [pc, #436]	; (800259c <HAL_RCC_OscConfig+0x330>)
 80023e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ec:	6013      	str	r3, [r2, #0]
 80023ee:	e00b      	b.n	8002408 <HAL_RCC_OscConfig+0x19c>
 80023f0:	4b6a      	ldr	r3, [pc, #424]	; (800259c <HAL_RCC_OscConfig+0x330>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a69      	ldr	r2, [pc, #420]	; (800259c <HAL_RCC_OscConfig+0x330>)
 80023f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023fa:	6013      	str	r3, [r2, #0]
 80023fc:	4b67      	ldr	r3, [pc, #412]	; (800259c <HAL_RCC_OscConfig+0x330>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a66      	ldr	r2, [pc, #408]	; (800259c <HAL_RCC_OscConfig+0x330>)
 8002402:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002406:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002408:	4b64      	ldr	r3, [pc, #400]	; (800259c <HAL_RCC_OscConfig+0x330>)
 800240a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240c:	f023 020f 	bic.w	r2, r3, #15
 8002410:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002414:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	495f      	ldr	r1, [pc, #380]	; (800259c <HAL_RCC_OscConfig+0x330>)
 800241e:	4313      	orrs	r3, r2
 8002420:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002422:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002426:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d059      	beq.n	80024e6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002432:	f7fe ffbd 	bl	80013b0 <HAL_GetTick>
 8002436:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800243a:	e00a      	b.n	8002452 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800243c:	f7fe ffb8 	bl	80013b0 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	2b64      	cmp	r3, #100	; 0x64
 800244a:	d902      	bls.n	8002452 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	f000 bf43 	b.w	80032d8 <HAL_RCC_OscConfig+0x106c>
 8002452:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002456:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800245e:	fa93 f3a3 	rbit	r3, r3
 8002462:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002466:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800246a:	fab3 f383 	clz	r3, r3
 800246e:	b2db      	uxtb	r3, r3
 8002470:	095b      	lsrs	r3, r3, #5
 8002472:	b2db      	uxtb	r3, r3
 8002474:	f043 0301 	orr.w	r3, r3, #1
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b01      	cmp	r3, #1
 800247c:	d102      	bne.n	8002484 <HAL_RCC_OscConfig+0x218>
 800247e:	4b47      	ldr	r3, [pc, #284]	; (800259c <HAL_RCC_OscConfig+0x330>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	e015      	b.n	80024b0 <HAL_RCC_OscConfig+0x244>
 8002484:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002488:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002490:	fa93 f3a3 	rbit	r3, r3
 8002494:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002498:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800249c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80024a0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80024a4:	fa93 f3a3 	rbit	r3, r3
 80024a8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80024ac:	4b3b      	ldr	r3, [pc, #236]	; (800259c <HAL_RCC_OscConfig+0x330>)
 80024ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024b4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80024b8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80024bc:	fa92 f2a2 	rbit	r2, r2
 80024c0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80024c4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80024c8:	fab2 f282 	clz	r2, r2
 80024cc:	b2d2      	uxtb	r2, r2
 80024ce:	f042 0220 	orr.w	r2, r2, #32
 80024d2:	b2d2      	uxtb	r2, r2
 80024d4:	f002 021f 	and.w	r2, r2, #31
 80024d8:	2101      	movs	r1, #1
 80024da:	fa01 f202 	lsl.w	r2, r1, r2
 80024de:	4013      	ands	r3, r2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d0ab      	beq.n	800243c <HAL_RCC_OscConfig+0x1d0>
 80024e4:	e05d      	b.n	80025a2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e6:	f7fe ff63 	bl	80013b0 <HAL_GetTick>
 80024ea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ee:	e00a      	b.n	8002506 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024f0:	f7fe ff5e 	bl	80013b0 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b64      	cmp	r3, #100	; 0x64
 80024fe:	d902      	bls.n	8002506 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	f000 bee9 	b.w	80032d8 <HAL_RCC_OscConfig+0x106c>
 8002506:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800250a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002512:	fa93 f3a3 	rbit	r3, r3
 8002516:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800251a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800251e:	fab3 f383 	clz	r3, r3
 8002522:	b2db      	uxtb	r3, r3
 8002524:	095b      	lsrs	r3, r3, #5
 8002526:	b2db      	uxtb	r3, r3
 8002528:	f043 0301 	orr.w	r3, r3, #1
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b01      	cmp	r3, #1
 8002530:	d102      	bne.n	8002538 <HAL_RCC_OscConfig+0x2cc>
 8002532:	4b1a      	ldr	r3, [pc, #104]	; (800259c <HAL_RCC_OscConfig+0x330>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	e015      	b.n	8002564 <HAL_RCC_OscConfig+0x2f8>
 8002538:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800253c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002540:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002544:	fa93 f3a3 	rbit	r3, r3
 8002548:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800254c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002550:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002554:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002558:	fa93 f3a3 	rbit	r3, r3
 800255c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002560:	4b0e      	ldr	r3, [pc, #56]	; (800259c <HAL_RCC_OscConfig+0x330>)
 8002562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002564:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002568:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800256c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002570:	fa92 f2a2 	rbit	r2, r2
 8002574:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002578:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800257c:	fab2 f282 	clz	r2, r2
 8002580:	b2d2      	uxtb	r2, r2
 8002582:	f042 0220 	orr.w	r2, r2, #32
 8002586:	b2d2      	uxtb	r2, r2
 8002588:	f002 021f 	and.w	r2, r2, #31
 800258c:	2101      	movs	r1, #1
 800258e:	fa01 f202 	lsl.w	r2, r1, r2
 8002592:	4013      	ands	r3, r2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1ab      	bne.n	80024f0 <HAL_RCC_OscConfig+0x284>
 8002598:	e003      	b.n	80025a2 <HAL_RCC_OscConfig+0x336>
 800259a:	bf00      	nop
 800259c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f000 817d 	beq.w	80028b2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80025b8:	4ba6      	ldr	r3, [pc, #664]	; (8002854 <HAL_RCC_OscConfig+0x5e8>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f003 030c 	and.w	r3, r3, #12
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d00b      	beq.n	80025dc <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80025c4:	4ba3      	ldr	r3, [pc, #652]	; (8002854 <HAL_RCC_OscConfig+0x5e8>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f003 030c 	and.w	r3, r3, #12
 80025cc:	2b08      	cmp	r3, #8
 80025ce:	d172      	bne.n	80026b6 <HAL_RCC_OscConfig+0x44a>
 80025d0:	4ba0      	ldr	r3, [pc, #640]	; (8002854 <HAL_RCC_OscConfig+0x5e8>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d16c      	bne.n	80026b6 <HAL_RCC_OscConfig+0x44a>
 80025dc:	2302      	movs	r3, #2
 80025de:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80025e6:	fa93 f3a3 	rbit	r3, r3
 80025ea:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80025ee:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025f2:	fab3 f383 	clz	r3, r3
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	095b      	lsrs	r3, r3, #5
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	f043 0301 	orr.w	r3, r3, #1
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b01      	cmp	r3, #1
 8002604:	d102      	bne.n	800260c <HAL_RCC_OscConfig+0x3a0>
 8002606:	4b93      	ldr	r3, [pc, #588]	; (8002854 <HAL_RCC_OscConfig+0x5e8>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	e013      	b.n	8002634 <HAL_RCC_OscConfig+0x3c8>
 800260c:	2302      	movs	r3, #2
 800260e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002612:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002616:	fa93 f3a3 	rbit	r3, r3
 800261a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800261e:	2302      	movs	r3, #2
 8002620:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002624:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002628:	fa93 f3a3 	rbit	r3, r3
 800262c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002630:	4b88      	ldr	r3, [pc, #544]	; (8002854 <HAL_RCC_OscConfig+0x5e8>)
 8002632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002634:	2202      	movs	r2, #2
 8002636:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800263a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800263e:	fa92 f2a2 	rbit	r2, r2
 8002642:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002646:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800264a:	fab2 f282 	clz	r2, r2
 800264e:	b2d2      	uxtb	r2, r2
 8002650:	f042 0220 	orr.w	r2, r2, #32
 8002654:	b2d2      	uxtb	r2, r2
 8002656:	f002 021f 	and.w	r2, r2, #31
 800265a:	2101      	movs	r1, #1
 800265c:	fa01 f202 	lsl.w	r2, r1, r2
 8002660:	4013      	ands	r3, r2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00a      	beq.n	800267c <HAL_RCC_OscConfig+0x410>
 8002666:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800266a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d002      	beq.n	800267c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	f000 be2e 	b.w	80032d8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800267c:	4b75      	ldr	r3, [pc, #468]	; (8002854 <HAL_RCC_OscConfig+0x5e8>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002684:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002688:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	695b      	ldr	r3, [r3, #20]
 8002690:	21f8      	movs	r1, #248	; 0xf8
 8002692:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002696:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800269a:	fa91 f1a1 	rbit	r1, r1
 800269e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80026a2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80026a6:	fab1 f181 	clz	r1, r1
 80026aa:	b2c9      	uxtb	r1, r1
 80026ac:	408b      	lsls	r3, r1
 80026ae:	4969      	ldr	r1, [pc, #420]	; (8002854 <HAL_RCC_OscConfig+0x5e8>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026b4:	e0fd      	b.n	80028b2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f000 8088 	beq.w	80027d8 <HAL_RCC_OscConfig+0x56c>
 80026c8:	2301      	movs	r3, #1
 80026ca:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ce:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80026d2:	fa93 f3a3 	rbit	r3, r3
 80026d6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80026da:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026de:	fab3 f383 	clz	r3, r3
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	461a      	mov	r2, r3
 80026f0:	2301      	movs	r3, #1
 80026f2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f4:	f7fe fe5c 	bl	80013b0 <HAL_GetTick>
 80026f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026fc:	e00a      	b.n	8002714 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026fe:	f7fe fe57 	bl	80013b0 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d902      	bls.n	8002714 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	f000 bde2 	b.w	80032d8 <HAL_RCC_OscConfig+0x106c>
 8002714:	2302      	movs	r3, #2
 8002716:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800271e:	fa93 f3a3 	rbit	r3, r3
 8002722:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002726:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800272a:	fab3 f383 	clz	r3, r3
 800272e:	b2db      	uxtb	r3, r3
 8002730:	095b      	lsrs	r3, r3, #5
 8002732:	b2db      	uxtb	r3, r3
 8002734:	f043 0301 	orr.w	r3, r3, #1
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b01      	cmp	r3, #1
 800273c:	d102      	bne.n	8002744 <HAL_RCC_OscConfig+0x4d8>
 800273e:	4b45      	ldr	r3, [pc, #276]	; (8002854 <HAL_RCC_OscConfig+0x5e8>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	e013      	b.n	800276c <HAL_RCC_OscConfig+0x500>
 8002744:	2302      	movs	r3, #2
 8002746:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800274e:	fa93 f3a3 	rbit	r3, r3
 8002752:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002756:	2302      	movs	r3, #2
 8002758:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800275c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002760:	fa93 f3a3 	rbit	r3, r3
 8002764:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002768:	4b3a      	ldr	r3, [pc, #232]	; (8002854 <HAL_RCC_OscConfig+0x5e8>)
 800276a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276c:	2202      	movs	r2, #2
 800276e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002772:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002776:	fa92 f2a2 	rbit	r2, r2
 800277a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800277e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002782:	fab2 f282 	clz	r2, r2
 8002786:	b2d2      	uxtb	r2, r2
 8002788:	f042 0220 	orr.w	r2, r2, #32
 800278c:	b2d2      	uxtb	r2, r2
 800278e:	f002 021f 	and.w	r2, r2, #31
 8002792:	2101      	movs	r1, #1
 8002794:	fa01 f202 	lsl.w	r2, r1, r2
 8002798:	4013      	ands	r3, r2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d0af      	beq.n	80026fe <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800279e:	4b2d      	ldr	r3, [pc, #180]	; (8002854 <HAL_RCC_OscConfig+0x5e8>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	21f8      	movs	r1, #248	; 0xf8
 80027b4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80027bc:	fa91 f1a1 	rbit	r1, r1
 80027c0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80027c4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80027c8:	fab1 f181 	clz	r1, r1
 80027cc:	b2c9      	uxtb	r1, r1
 80027ce:	408b      	lsls	r3, r1
 80027d0:	4920      	ldr	r1, [pc, #128]	; (8002854 <HAL_RCC_OscConfig+0x5e8>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	600b      	str	r3, [r1, #0]
 80027d6:	e06c      	b.n	80028b2 <HAL_RCC_OscConfig+0x646>
 80027d8:	2301      	movs	r3, #1
 80027da:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027de:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80027e2:	fa93 f3a3 	rbit	r3, r3
 80027e6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80027ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ee:	fab3 f383 	clz	r3, r3
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	461a      	mov	r2, r3
 8002800:	2300      	movs	r3, #0
 8002802:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002804:	f7fe fdd4 	bl	80013b0 <HAL_GetTick>
 8002808:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800280c:	e00a      	b.n	8002824 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800280e:	f7fe fdcf 	bl	80013b0 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d902      	bls.n	8002824 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	f000 bd5a 	b.w	80032d8 <HAL_RCC_OscConfig+0x106c>
 8002824:	2302      	movs	r3, #2
 8002826:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800282e:	fa93 f3a3 	rbit	r3, r3
 8002832:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002836:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800283a:	fab3 f383 	clz	r3, r3
 800283e:	b2db      	uxtb	r3, r3
 8002840:	095b      	lsrs	r3, r3, #5
 8002842:	b2db      	uxtb	r3, r3
 8002844:	f043 0301 	orr.w	r3, r3, #1
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b01      	cmp	r3, #1
 800284c:	d104      	bne.n	8002858 <HAL_RCC_OscConfig+0x5ec>
 800284e:	4b01      	ldr	r3, [pc, #4]	; (8002854 <HAL_RCC_OscConfig+0x5e8>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	e015      	b.n	8002880 <HAL_RCC_OscConfig+0x614>
 8002854:	40021000 	.word	0x40021000
 8002858:	2302      	movs	r3, #2
 800285a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002862:	fa93 f3a3 	rbit	r3, r3
 8002866:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800286a:	2302      	movs	r3, #2
 800286c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002870:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002874:	fa93 f3a3 	rbit	r3, r3
 8002878:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800287c:	4bc8      	ldr	r3, [pc, #800]	; (8002ba0 <HAL_RCC_OscConfig+0x934>)
 800287e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002880:	2202      	movs	r2, #2
 8002882:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002886:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800288a:	fa92 f2a2 	rbit	r2, r2
 800288e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002892:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002896:	fab2 f282 	clz	r2, r2
 800289a:	b2d2      	uxtb	r2, r2
 800289c:	f042 0220 	orr.w	r2, r2, #32
 80028a0:	b2d2      	uxtb	r2, r2
 80028a2:	f002 021f 	and.w	r2, r2, #31
 80028a6:	2101      	movs	r1, #1
 80028a8:	fa01 f202 	lsl.w	r2, r1, r2
 80028ac:	4013      	ands	r3, r2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1ad      	bne.n	800280e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0308 	and.w	r3, r3, #8
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f000 8110 	beq.w	8002ae8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d079      	beq.n	80029cc <HAL_RCC_OscConfig+0x760>
 80028d8:	2301      	movs	r3, #1
 80028da:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028de:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80028e2:	fa93 f3a3 	rbit	r3, r3
 80028e6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80028ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028ee:	fab3 f383 	clz	r3, r3
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	461a      	mov	r2, r3
 80028f6:	4bab      	ldr	r3, [pc, #684]	; (8002ba4 <HAL_RCC_OscConfig+0x938>)
 80028f8:	4413      	add	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	461a      	mov	r2, r3
 80028fe:	2301      	movs	r3, #1
 8002900:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002902:	f7fe fd55 	bl	80013b0 <HAL_GetTick>
 8002906:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800290a:	e00a      	b.n	8002922 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800290c:	f7fe fd50 	bl	80013b0 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d902      	bls.n	8002922 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	f000 bcdb 	b.w	80032d8 <HAL_RCC_OscConfig+0x106c>
 8002922:	2302      	movs	r3, #2
 8002924:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002928:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800292c:	fa93 f3a3 	rbit	r3, r3
 8002930:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002934:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002938:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800293c:	2202      	movs	r2, #2
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002944:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	fa93 f2a3 	rbit	r2, r3
 800294e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002952:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800295c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002960:	2202      	movs	r2, #2
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002968:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	fa93 f2a3 	rbit	r2, r3
 8002972:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002976:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800297a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800297c:	4b88      	ldr	r3, [pc, #544]	; (8002ba0 <HAL_RCC_OscConfig+0x934>)
 800297e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002980:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002984:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002988:	2102      	movs	r1, #2
 800298a:	6019      	str	r1, [r3, #0]
 800298c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002990:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	fa93 f1a3 	rbit	r1, r3
 800299a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800299e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80029a2:	6019      	str	r1, [r3, #0]
  return result;
 80029a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	fab3 f383 	clz	r3, r3
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	f003 031f 	and.w	r3, r3, #31
 80029be:	2101      	movs	r1, #1
 80029c0:	fa01 f303 	lsl.w	r3, r1, r3
 80029c4:	4013      	ands	r3, r2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d0a0      	beq.n	800290c <HAL_RCC_OscConfig+0x6a0>
 80029ca:	e08d      	b.n	8002ae8 <HAL_RCC_OscConfig+0x87c>
 80029cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80029d4:	2201      	movs	r2, #1
 80029d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029dc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	fa93 f2a3 	rbit	r2, r3
 80029e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ea:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80029ee:	601a      	str	r2, [r3, #0]
  return result;
 80029f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80029f8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029fa:	fab3 f383 	clz	r3, r3
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	461a      	mov	r2, r3
 8002a02:	4b68      	ldr	r3, [pc, #416]	; (8002ba4 <HAL_RCC_OscConfig+0x938>)
 8002a04:	4413      	add	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	461a      	mov	r2, r3
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a0e:	f7fe fccf 	bl	80013b0 <HAL_GetTick>
 8002a12:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a16:	e00a      	b.n	8002a2e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a18:	f7fe fcca 	bl	80013b0 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d902      	bls.n	8002a2e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	f000 bc55 	b.w	80032d8 <HAL_RCC_OscConfig+0x106c>
 8002a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a32:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002a36:	2202      	movs	r2, #2
 8002a38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a3e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	fa93 f2a3 	rbit	r2, r3
 8002a48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a4c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002a50:	601a      	str	r2, [r3, #0]
 8002a52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a56:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	601a      	str	r2, [r3, #0]
 8002a5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a62:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	fa93 f2a3 	rbit	r2, r3
 8002a6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002a74:	601a      	str	r2, [r3, #0]
 8002a76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002a7e:	2202      	movs	r2, #2
 8002a80:	601a      	str	r2, [r3, #0]
 8002a82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	fa93 f2a3 	rbit	r2, r3
 8002a90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a94:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002a98:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a9a:	4b41      	ldr	r3, [pc, #260]	; (8002ba0 <HAL_RCC_OscConfig+0x934>)
 8002a9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002aa6:	2102      	movs	r1, #2
 8002aa8:	6019      	str	r1, [r3, #0]
 8002aaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aae:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	fa93 f1a3 	rbit	r1, r3
 8002ab8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002abc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002ac0:	6019      	str	r1, [r3, #0]
  return result;
 8002ac2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	fab3 f383 	clz	r3, r3
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	f003 031f 	and.w	r3, r3, #31
 8002adc:	2101      	movs	r1, #1
 8002ade:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d197      	bne.n	8002a18 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ae8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0304 	and.w	r3, r3, #4
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f000 81a1 	beq.w	8002e40 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002afe:	2300      	movs	r3, #0
 8002b00:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b04:	4b26      	ldr	r3, [pc, #152]	; (8002ba0 <HAL_RCC_OscConfig+0x934>)
 8002b06:	69db      	ldr	r3, [r3, #28]
 8002b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d116      	bne.n	8002b3e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b10:	4b23      	ldr	r3, [pc, #140]	; (8002ba0 <HAL_RCC_OscConfig+0x934>)
 8002b12:	69db      	ldr	r3, [r3, #28]
 8002b14:	4a22      	ldr	r2, [pc, #136]	; (8002ba0 <HAL_RCC_OscConfig+0x934>)
 8002b16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b1a:	61d3      	str	r3, [r2, #28]
 8002b1c:	4b20      	ldr	r3, [pc, #128]	; (8002ba0 <HAL_RCC_OscConfig+0x934>)
 8002b1e:	69db      	ldr	r3, [r3, #28]
 8002b20:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002b24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b28:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002b2c:	601a      	str	r2, [r3, #0]
 8002b2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b32:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002b36:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b3e:	4b1a      	ldr	r3, [pc, #104]	; (8002ba8 <HAL_RCC_OscConfig+0x93c>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d11a      	bne.n	8002b80 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b4a:	4b17      	ldr	r3, [pc, #92]	; (8002ba8 <HAL_RCC_OscConfig+0x93c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a16      	ldr	r2, [pc, #88]	; (8002ba8 <HAL_RCC_OscConfig+0x93c>)
 8002b50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b54:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b56:	f7fe fc2b 	bl	80013b0 <HAL_GetTick>
 8002b5a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b5e:	e009      	b.n	8002b74 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b60:	f7fe fc26 	bl	80013b0 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b64      	cmp	r3, #100	; 0x64
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e3b1      	b.n	80032d8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b74:	4b0c      	ldr	r3, [pc, #48]	; (8002ba8 <HAL_RCC_OscConfig+0x93c>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d0ef      	beq.n	8002b60 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b84:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d10d      	bne.n	8002bac <HAL_RCC_OscConfig+0x940>
 8002b90:	4b03      	ldr	r3, [pc, #12]	; (8002ba0 <HAL_RCC_OscConfig+0x934>)
 8002b92:	6a1b      	ldr	r3, [r3, #32]
 8002b94:	4a02      	ldr	r2, [pc, #8]	; (8002ba0 <HAL_RCC_OscConfig+0x934>)
 8002b96:	f043 0301 	orr.w	r3, r3, #1
 8002b9a:	6213      	str	r3, [r2, #32]
 8002b9c:	e03c      	b.n	8002c18 <HAL_RCC_OscConfig+0x9ac>
 8002b9e:	bf00      	nop
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	10908120 	.word	0x10908120
 8002ba8:	40007000 	.word	0x40007000
 8002bac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d10c      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x96a>
 8002bbc:	4bc1      	ldr	r3, [pc, #772]	; (8002ec4 <HAL_RCC_OscConfig+0xc58>)
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
 8002bc0:	4ac0      	ldr	r2, [pc, #768]	; (8002ec4 <HAL_RCC_OscConfig+0xc58>)
 8002bc2:	f023 0301 	bic.w	r3, r3, #1
 8002bc6:	6213      	str	r3, [r2, #32]
 8002bc8:	4bbe      	ldr	r3, [pc, #760]	; (8002ec4 <HAL_RCC_OscConfig+0xc58>)
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	4abd      	ldr	r2, [pc, #756]	; (8002ec4 <HAL_RCC_OscConfig+0xc58>)
 8002bce:	f023 0304 	bic.w	r3, r3, #4
 8002bd2:	6213      	str	r3, [r2, #32]
 8002bd4:	e020      	b.n	8002c18 <HAL_RCC_OscConfig+0x9ac>
 8002bd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	2b05      	cmp	r3, #5
 8002be4:	d10c      	bne.n	8002c00 <HAL_RCC_OscConfig+0x994>
 8002be6:	4bb7      	ldr	r3, [pc, #732]	; (8002ec4 <HAL_RCC_OscConfig+0xc58>)
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	4ab6      	ldr	r2, [pc, #728]	; (8002ec4 <HAL_RCC_OscConfig+0xc58>)
 8002bec:	f043 0304 	orr.w	r3, r3, #4
 8002bf0:	6213      	str	r3, [r2, #32]
 8002bf2:	4bb4      	ldr	r3, [pc, #720]	; (8002ec4 <HAL_RCC_OscConfig+0xc58>)
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
 8002bf6:	4ab3      	ldr	r2, [pc, #716]	; (8002ec4 <HAL_RCC_OscConfig+0xc58>)
 8002bf8:	f043 0301 	orr.w	r3, r3, #1
 8002bfc:	6213      	str	r3, [r2, #32]
 8002bfe:	e00b      	b.n	8002c18 <HAL_RCC_OscConfig+0x9ac>
 8002c00:	4bb0      	ldr	r3, [pc, #704]	; (8002ec4 <HAL_RCC_OscConfig+0xc58>)
 8002c02:	6a1b      	ldr	r3, [r3, #32]
 8002c04:	4aaf      	ldr	r2, [pc, #700]	; (8002ec4 <HAL_RCC_OscConfig+0xc58>)
 8002c06:	f023 0301 	bic.w	r3, r3, #1
 8002c0a:	6213      	str	r3, [r2, #32]
 8002c0c:	4bad      	ldr	r3, [pc, #692]	; (8002ec4 <HAL_RCC_OscConfig+0xc58>)
 8002c0e:	6a1b      	ldr	r3, [r3, #32]
 8002c10:	4aac      	ldr	r2, [pc, #688]	; (8002ec4 <HAL_RCC_OscConfig+0xc58>)
 8002c12:	f023 0304 	bic.w	r3, r3, #4
 8002c16:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c1c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f000 8081 	beq.w	8002d2c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c2a:	f7fe fbc1 	bl	80013b0 <HAL_GetTick>
 8002c2e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c32:	e00b      	b.n	8002c4c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c34:	f7fe fbbc 	bl	80013b0 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d901      	bls.n	8002c4c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e345      	b.n	80032d8 <HAL_RCC_OscConfig+0x106c>
 8002c4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c50:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002c54:	2202      	movs	r2, #2
 8002c56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c5c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	fa93 f2a3 	rbit	r2, r3
 8002c66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c6a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c74:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002c78:	2202      	movs	r2, #2
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c80:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	fa93 f2a3 	rbit	r2, r3
 8002c8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c8e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002c92:	601a      	str	r2, [r3, #0]
  return result;
 8002c94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c98:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002c9c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c9e:	fab3 f383 	clz	r3, r3
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	095b      	lsrs	r3, r3, #5
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	f043 0302 	orr.w	r3, r3, #2
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d102      	bne.n	8002cb8 <HAL_RCC_OscConfig+0xa4c>
 8002cb2:	4b84      	ldr	r3, [pc, #528]	; (8002ec4 <HAL_RCC_OscConfig+0xc58>)
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
 8002cb6:	e013      	b.n	8002ce0 <HAL_RCC_OscConfig+0xa74>
 8002cb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cbc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002cc0:	2202      	movs	r2, #2
 8002cc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	fa93 f2a3 	rbit	r2, r3
 8002cd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cd6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002cda:	601a      	str	r2, [r3, #0]
 8002cdc:	4b79      	ldr	r3, [pc, #484]	; (8002ec4 <HAL_RCC_OscConfig+0xc58>)
 8002cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ce4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002ce8:	2102      	movs	r1, #2
 8002cea:	6011      	str	r1, [r2, #0]
 8002cec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cf0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002cf4:	6812      	ldr	r2, [r2, #0]
 8002cf6:	fa92 f1a2 	rbit	r1, r2
 8002cfa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cfe:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002d02:	6011      	str	r1, [r2, #0]
  return result;
 8002d04:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d08:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002d0c:	6812      	ldr	r2, [r2, #0]
 8002d0e:	fab2 f282 	clz	r2, r2
 8002d12:	b2d2      	uxtb	r2, r2
 8002d14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d18:	b2d2      	uxtb	r2, r2
 8002d1a:	f002 021f 	and.w	r2, r2, #31
 8002d1e:	2101      	movs	r1, #1
 8002d20:	fa01 f202 	lsl.w	r2, r1, r2
 8002d24:	4013      	ands	r3, r2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d084      	beq.n	8002c34 <HAL_RCC_OscConfig+0x9c8>
 8002d2a:	e07f      	b.n	8002e2c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d2c:	f7fe fb40 	bl	80013b0 <HAL_GetTick>
 8002d30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d34:	e00b      	b.n	8002d4e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d36:	f7fe fb3b 	bl	80013b0 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e2c4      	b.n	80032d8 <HAL_RCC_OscConfig+0x106c>
 8002d4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d52:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002d56:	2202      	movs	r2, #2
 8002d58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d5e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	fa93 f2a3 	rbit	r2, r3
 8002d68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d6c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002d70:	601a      	str	r2, [r3, #0]
 8002d72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d76:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	601a      	str	r2, [r3, #0]
 8002d7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d82:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	fa93 f2a3 	rbit	r2, r3
 8002d8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d90:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002d94:	601a      	str	r2, [r3, #0]
  return result;
 8002d96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d9a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002d9e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002da0:	fab3 f383 	clz	r3, r3
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	095b      	lsrs	r3, r3, #5
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	f043 0302 	orr.w	r3, r3, #2
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d102      	bne.n	8002dba <HAL_RCC_OscConfig+0xb4e>
 8002db4:	4b43      	ldr	r3, [pc, #268]	; (8002ec4 <HAL_RCC_OscConfig+0xc58>)
 8002db6:	6a1b      	ldr	r3, [r3, #32]
 8002db8:	e013      	b.n	8002de2 <HAL_RCC_OscConfig+0xb76>
 8002dba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dbe:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dca:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	fa93 f2a3 	rbit	r2, r3
 8002dd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dd8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002ddc:	601a      	str	r2, [r3, #0]
 8002dde:	4b39      	ldr	r3, [pc, #228]	; (8002ec4 <HAL_RCC_OscConfig+0xc58>)
 8002de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002de6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002dea:	2102      	movs	r1, #2
 8002dec:	6011      	str	r1, [r2, #0]
 8002dee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002df2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002df6:	6812      	ldr	r2, [r2, #0]
 8002df8:	fa92 f1a2 	rbit	r1, r2
 8002dfc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e00:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002e04:	6011      	str	r1, [r2, #0]
  return result;
 8002e06:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e0a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002e0e:	6812      	ldr	r2, [r2, #0]
 8002e10:	fab2 f282 	clz	r2, r2
 8002e14:	b2d2      	uxtb	r2, r2
 8002e16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e1a:	b2d2      	uxtb	r2, r2
 8002e1c:	f002 021f 	and.w	r2, r2, #31
 8002e20:	2101      	movs	r1, #1
 8002e22:	fa01 f202 	lsl.w	r2, r1, r2
 8002e26:	4013      	ands	r3, r2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d184      	bne.n	8002d36 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e2c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d105      	bne.n	8002e40 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e34:	4b23      	ldr	r3, [pc, #140]	; (8002ec4 <HAL_RCC_OscConfig+0xc58>)
 8002e36:	69db      	ldr	r3, [r3, #28]
 8002e38:	4a22      	ldr	r2, [pc, #136]	; (8002ec4 <HAL_RCC_OscConfig+0xc58>)
 8002e3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e3e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	69db      	ldr	r3, [r3, #28]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f000 8242 	beq.w	80032d6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e52:	4b1c      	ldr	r3, [pc, #112]	; (8002ec4 <HAL_RCC_OscConfig+0xc58>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f003 030c 	and.w	r3, r3, #12
 8002e5a:	2b08      	cmp	r3, #8
 8002e5c:	f000 8213 	beq.w	8003286 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e64:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	69db      	ldr	r3, [r3, #28]
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	f040 8162 	bne.w	8003136 <HAL_RCC_OscConfig+0xeca>
 8002e72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e76:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002e7a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e84:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	fa93 f2a3 	rbit	r2, r3
 8002e8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e92:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002e96:	601a      	str	r2, [r3, #0]
  return result;
 8002e98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e9c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002ea0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ea2:	fab3 f383 	clz	r3, r3
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002eac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb8:	f7fe fa7a 	bl	80013b0 <HAL_GetTick>
 8002ebc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ec0:	e00c      	b.n	8002edc <HAL_RCC_OscConfig+0xc70>
 8002ec2:	bf00      	nop
 8002ec4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ec8:	f7fe fa72 	bl	80013b0 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d901      	bls.n	8002edc <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e1fd      	b.n	80032d8 <HAL_RCC_OscConfig+0x106c>
 8002edc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002ee4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ee8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eee:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	fa93 f2a3 	rbit	r2, r3
 8002ef8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002efc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002f00:	601a      	str	r2, [r3, #0]
  return result;
 8002f02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f06:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002f0a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f0c:	fab3 f383 	clz	r3, r3
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	095b      	lsrs	r3, r3, #5
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	f043 0301 	orr.w	r3, r3, #1
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d102      	bne.n	8002f26 <HAL_RCC_OscConfig+0xcba>
 8002f20:	4bb0      	ldr	r3, [pc, #704]	; (80031e4 <HAL_RCC_OscConfig+0xf78>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	e027      	b.n	8002f76 <HAL_RCC_OscConfig+0xd0a>
 8002f26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f2a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002f2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f38:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	fa93 f2a3 	rbit	r2, r3
 8002f42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f46:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002f4a:	601a      	str	r2, [r3, #0]
 8002f4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f50:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002f54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f5e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	fa93 f2a3 	rbit	r2, r3
 8002f68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f6c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	4b9c      	ldr	r3, [pc, #624]	; (80031e4 <HAL_RCC_OscConfig+0xf78>)
 8002f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f76:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f7a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002f7e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002f82:	6011      	str	r1, [r2, #0]
 8002f84:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f88:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002f8c:	6812      	ldr	r2, [r2, #0]
 8002f8e:	fa92 f1a2 	rbit	r1, r2
 8002f92:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f96:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002f9a:	6011      	str	r1, [r2, #0]
  return result;
 8002f9c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fa0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002fa4:	6812      	ldr	r2, [r2, #0]
 8002fa6:	fab2 f282 	clz	r2, r2
 8002faa:	b2d2      	uxtb	r2, r2
 8002fac:	f042 0220 	orr.w	r2, r2, #32
 8002fb0:	b2d2      	uxtb	r2, r2
 8002fb2:	f002 021f 	and.w	r2, r2, #31
 8002fb6:	2101      	movs	r1, #1
 8002fb8:	fa01 f202 	lsl.w	r2, r1, r2
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d182      	bne.n	8002ec8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fc2:	4b88      	ldr	r3, [pc, #544]	; (80031e4 <HAL_RCC_OscConfig+0xf78>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002fca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002fd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	430b      	orrs	r3, r1
 8002fe4:	497f      	ldr	r1, [pc, #508]	; (80031e4 <HAL_RCC_OscConfig+0xf78>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	604b      	str	r3, [r1, #4]
 8002fea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fee:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002ff2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ff6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ffc:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	fa93 f2a3 	rbit	r2, r3
 8003006:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800300a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800300e:	601a      	str	r2, [r3, #0]
  return result;
 8003010:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003014:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003018:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800301a:	fab3 f383 	clz	r3, r3
 800301e:	b2db      	uxtb	r3, r3
 8003020:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003024:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	461a      	mov	r2, r3
 800302c:	2301      	movs	r3, #1
 800302e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003030:	f7fe f9be 	bl	80013b0 <HAL_GetTick>
 8003034:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003038:	e009      	b.n	800304e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800303a:	f7fe f9b9 	bl	80013b0 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e144      	b.n	80032d8 <HAL_RCC_OscConfig+0x106c>
 800304e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003052:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003056:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800305a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003060:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	fa93 f2a3 	rbit	r2, r3
 800306a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800306e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003072:	601a      	str	r2, [r3, #0]
  return result;
 8003074:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003078:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800307c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800307e:	fab3 f383 	clz	r3, r3
 8003082:	b2db      	uxtb	r3, r3
 8003084:	095b      	lsrs	r3, r3, #5
 8003086:	b2db      	uxtb	r3, r3
 8003088:	f043 0301 	orr.w	r3, r3, #1
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b01      	cmp	r3, #1
 8003090:	d102      	bne.n	8003098 <HAL_RCC_OscConfig+0xe2c>
 8003092:	4b54      	ldr	r3, [pc, #336]	; (80031e4 <HAL_RCC_OscConfig+0xf78>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	e027      	b.n	80030e8 <HAL_RCC_OscConfig+0xe7c>
 8003098:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800309c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80030a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030aa:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	fa93 f2a3 	rbit	r2, r3
 80030b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030b8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80030bc:	601a      	str	r2, [r3, #0]
 80030be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030c2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80030c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030ca:	601a      	str	r2, [r3, #0]
 80030cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	fa93 f2a3 	rbit	r2, r3
 80030da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030de:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80030e2:	601a      	str	r2, [r3, #0]
 80030e4:	4b3f      	ldr	r3, [pc, #252]	; (80031e4 <HAL_RCC_OscConfig+0xf78>)
 80030e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030ec:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80030f0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80030f4:	6011      	str	r1, [r2, #0]
 80030f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030fa:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80030fe:	6812      	ldr	r2, [r2, #0]
 8003100:	fa92 f1a2 	rbit	r1, r2
 8003104:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003108:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800310c:	6011      	str	r1, [r2, #0]
  return result;
 800310e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003112:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003116:	6812      	ldr	r2, [r2, #0]
 8003118:	fab2 f282 	clz	r2, r2
 800311c:	b2d2      	uxtb	r2, r2
 800311e:	f042 0220 	orr.w	r2, r2, #32
 8003122:	b2d2      	uxtb	r2, r2
 8003124:	f002 021f 	and.w	r2, r2, #31
 8003128:	2101      	movs	r1, #1
 800312a:	fa01 f202 	lsl.w	r2, r1, r2
 800312e:	4013      	ands	r3, r2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d082      	beq.n	800303a <HAL_RCC_OscConfig+0xdce>
 8003134:	e0cf      	b.n	80032d6 <HAL_RCC_OscConfig+0x106a>
 8003136:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800313a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800313e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003142:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003144:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003148:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	fa93 f2a3 	rbit	r2, r3
 8003152:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003156:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800315a:	601a      	str	r2, [r3, #0]
  return result;
 800315c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003160:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003164:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003166:	fab3 f383 	clz	r3, r3
 800316a:	b2db      	uxtb	r3, r3
 800316c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003170:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	461a      	mov	r2, r3
 8003178:	2300      	movs	r3, #0
 800317a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317c:	f7fe f918 	bl	80013b0 <HAL_GetTick>
 8003180:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003184:	e009      	b.n	800319a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003186:	f7fe f913 	bl	80013b0 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b02      	cmp	r3, #2
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e09e      	b.n	80032d8 <HAL_RCC_OscConfig+0x106c>
 800319a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800319e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80031a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ac:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	fa93 f2a3 	rbit	r2, r3
 80031b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ba:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80031be:	601a      	str	r2, [r3, #0]
  return result;
 80031c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031c4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80031c8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031ca:	fab3 f383 	clz	r3, r3
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	095b      	lsrs	r3, r3, #5
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	f043 0301 	orr.w	r3, r3, #1
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d104      	bne.n	80031e8 <HAL_RCC_OscConfig+0xf7c>
 80031de:	4b01      	ldr	r3, [pc, #4]	; (80031e4 <HAL_RCC_OscConfig+0xf78>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	e029      	b.n	8003238 <HAL_RCC_OscConfig+0xfcc>
 80031e4:	40021000 	.word	0x40021000
 80031e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ec:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80031f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031fa:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	fa93 f2a3 	rbit	r2, r3
 8003204:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003208:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800320c:	601a      	str	r2, [r3, #0]
 800320e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003212:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003216:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003220:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	fa93 f2a3 	rbit	r2, r3
 800322a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800322e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003232:	601a      	str	r2, [r3, #0]
 8003234:	4b2b      	ldr	r3, [pc, #172]	; (80032e4 <HAL_RCC_OscConfig+0x1078>)
 8003236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003238:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800323c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003240:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003244:	6011      	str	r1, [r2, #0]
 8003246:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800324a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800324e:	6812      	ldr	r2, [r2, #0]
 8003250:	fa92 f1a2 	rbit	r1, r2
 8003254:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003258:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800325c:	6011      	str	r1, [r2, #0]
  return result;
 800325e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003262:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003266:	6812      	ldr	r2, [r2, #0]
 8003268:	fab2 f282 	clz	r2, r2
 800326c:	b2d2      	uxtb	r2, r2
 800326e:	f042 0220 	orr.w	r2, r2, #32
 8003272:	b2d2      	uxtb	r2, r2
 8003274:	f002 021f 	and.w	r2, r2, #31
 8003278:	2101      	movs	r1, #1
 800327a:	fa01 f202 	lsl.w	r2, r1, r2
 800327e:	4013      	ands	r3, r2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d180      	bne.n	8003186 <HAL_RCC_OscConfig+0xf1a>
 8003284:	e027      	b.n	80032d6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003286:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800328a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	69db      	ldr	r3, [r3, #28]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d101      	bne.n	800329a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e01e      	b.n	80032d8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800329a:	4b12      	ldr	r3, [pc, #72]	; (80032e4 <HAL_RCC_OscConfig+0x1078>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80032a2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80032a6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80032aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d10b      	bne.n	80032d2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80032ba:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80032be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80032c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d001      	beq.n	80032d6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e000      	b.n	80032d8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	40021000 	.word	0x40021000

080032e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b09e      	sub	sp, #120	; 0x78
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80032f2:	2300      	movs	r3, #0
 80032f4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d101      	bne.n	8003300 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e162      	b.n	80035c6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003300:	4b90      	ldr	r3, [pc, #576]	; (8003544 <HAL_RCC_ClockConfig+0x25c>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	683a      	ldr	r2, [r7, #0]
 800330a:	429a      	cmp	r2, r3
 800330c:	d910      	bls.n	8003330 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800330e:	4b8d      	ldr	r3, [pc, #564]	; (8003544 <HAL_RCC_ClockConfig+0x25c>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f023 0207 	bic.w	r2, r3, #7
 8003316:	498b      	ldr	r1, [pc, #556]	; (8003544 <HAL_RCC_ClockConfig+0x25c>)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	4313      	orrs	r3, r2
 800331c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800331e:	4b89      	ldr	r3, [pc, #548]	; (8003544 <HAL_RCC_ClockConfig+0x25c>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0307 	and.w	r3, r3, #7
 8003326:	683a      	ldr	r2, [r7, #0]
 8003328:	429a      	cmp	r2, r3
 800332a:	d001      	beq.n	8003330 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e14a      	b.n	80035c6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d008      	beq.n	800334e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800333c:	4b82      	ldr	r3, [pc, #520]	; (8003548 <HAL_RCC_ClockConfig+0x260>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	497f      	ldr	r1, [pc, #508]	; (8003548 <HAL_RCC_ClockConfig+0x260>)
 800334a:	4313      	orrs	r3, r2
 800334c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	2b00      	cmp	r3, #0
 8003358:	f000 80dc 	beq.w	8003514 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d13c      	bne.n	80033de <HAL_RCC_ClockConfig+0xf6>
 8003364:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003368:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800336c:	fa93 f3a3 	rbit	r3, r3
 8003370:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003372:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003374:	fab3 f383 	clz	r3, r3
 8003378:	b2db      	uxtb	r3, r3
 800337a:	095b      	lsrs	r3, r3, #5
 800337c:	b2db      	uxtb	r3, r3
 800337e:	f043 0301 	orr.w	r3, r3, #1
 8003382:	b2db      	uxtb	r3, r3
 8003384:	2b01      	cmp	r3, #1
 8003386:	d102      	bne.n	800338e <HAL_RCC_ClockConfig+0xa6>
 8003388:	4b6f      	ldr	r3, [pc, #444]	; (8003548 <HAL_RCC_ClockConfig+0x260>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	e00f      	b.n	80033ae <HAL_RCC_ClockConfig+0xc6>
 800338e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003392:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003394:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003396:	fa93 f3a3 	rbit	r3, r3
 800339a:	667b      	str	r3, [r7, #100]	; 0x64
 800339c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033a0:	663b      	str	r3, [r7, #96]	; 0x60
 80033a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033a4:	fa93 f3a3 	rbit	r3, r3
 80033a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033aa:	4b67      	ldr	r3, [pc, #412]	; (8003548 <HAL_RCC_ClockConfig+0x260>)
 80033ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80033b2:	65ba      	str	r2, [r7, #88]	; 0x58
 80033b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033b6:	fa92 f2a2 	rbit	r2, r2
 80033ba:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80033bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80033be:	fab2 f282 	clz	r2, r2
 80033c2:	b2d2      	uxtb	r2, r2
 80033c4:	f042 0220 	orr.w	r2, r2, #32
 80033c8:	b2d2      	uxtb	r2, r2
 80033ca:	f002 021f 	and.w	r2, r2, #31
 80033ce:	2101      	movs	r1, #1
 80033d0:	fa01 f202 	lsl.w	r2, r1, r2
 80033d4:	4013      	ands	r3, r2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d17b      	bne.n	80034d2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e0f3      	b.n	80035c6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d13c      	bne.n	8003460 <HAL_RCC_ClockConfig+0x178>
 80033e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033ea:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033ee:	fa93 f3a3 	rbit	r3, r3
 80033f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80033f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033f6:	fab3 f383 	clz	r3, r3
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	095b      	lsrs	r3, r3, #5
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	f043 0301 	orr.w	r3, r3, #1
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b01      	cmp	r3, #1
 8003408:	d102      	bne.n	8003410 <HAL_RCC_ClockConfig+0x128>
 800340a:	4b4f      	ldr	r3, [pc, #316]	; (8003548 <HAL_RCC_ClockConfig+0x260>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	e00f      	b.n	8003430 <HAL_RCC_ClockConfig+0x148>
 8003410:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003414:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003416:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003418:	fa93 f3a3 	rbit	r3, r3
 800341c:	647b      	str	r3, [r7, #68]	; 0x44
 800341e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003422:	643b      	str	r3, [r7, #64]	; 0x40
 8003424:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003426:	fa93 f3a3 	rbit	r3, r3
 800342a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800342c:	4b46      	ldr	r3, [pc, #280]	; (8003548 <HAL_RCC_ClockConfig+0x260>)
 800342e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003430:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003434:	63ba      	str	r2, [r7, #56]	; 0x38
 8003436:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003438:	fa92 f2a2 	rbit	r2, r2
 800343c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800343e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003440:	fab2 f282 	clz	r2, r2
 8003444:	b2d2      	uxtb	r2, r2
 8003446:	f042 0220 	orr.w	r2, r2, #32
 800344a:	b2d2      	uxtb	r2, r2
 800344c:	f002 021f 	and.w	r2, r2, #31
 8003450:	2101      	movs	r1, #1
 8003452:	fa01 f202 	lsl.w	r2, r1, r2
 8003456:	4013      	ands	r3, r2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d13a      	bne.n	80034d2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e0b2      	b.n	80035c6 <HAL_RCC_ClockConfig+0x2de>
 8003460:	2302      	movs	r3, #2
 8003462:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003466:	fa93 f3a3 	rbit	r3, r3
 800346a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800346c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800346e:	fab3 f383 	clz	r3, r3
 8003472:	b2db      	uxtb	r3, r3
 8003474:	095b      	lsrs	r3, r3, #5
 8003476:	b2db      	uxtb	r3, r3
 8003478:	f043 0301 	orr.w	r3, r3, #1
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b01      	cmp	r3, #1
 8003480:	d102      	bne.n	8003488 <HAL_RCC_ClockConfig+0x1a0>
 8003482:	4b31      	ldr	r3, [pc, #196]	; (8003548 <HAL_RCC_ClockConfig+0x260>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	e00d      	b.n	80034a4 <HAL_RCC_ClockConfig+0x1bc>
 8003488:	2302      	movs	r3, #2
 800348a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800348e:	fa93 f3a3 	rbit	r3, r3
 8003492:	627b      	str	r3, [r7, #36]	; 0x24
 8003494:	2302      	movs	r3, #2
 8003496:	623b      	str	r3, [r7, #32]
 8003498:	6a3b      	ldr	r3, [r7, #32]
 800349a:	fa93 f3a3 	rbit	r3, r3
 800349e:	61fb      	str	r3, [r7, #28]
 80034a0:	4b29      	ldr	r3, [pc, #164]	; (8003548 <HAL_RCC_ClockConfig+0x260>)
 80034a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a4:	2202      	movs	r2, #2
 80034a6:	61ba      	str	r2, [r7, #24]
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	fa92 f2a2 	rbit	r2, r2
 80034ae:	617a      	str	r2, [r7, #20]
  return result;
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	fab2 f282 	clz	r2, r2
 80034b6:	b2d2      	uxtb	r2, r2
 80034b8:	f042 0220 	orr.w	r2, r2, #32
 80034bc:	b2d2      	uxtb	r2, r2
 80034be:	f002 021f 	and.w	r2, r2, #31
 80034c2:	2101      	movs	r1, #1
 80034c4:	fa01 f202 	lsl.w	r2, r1, r2
 80034c8:	4013      	ands	r3, r2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e079      	b.n	80035c6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034d2:	4b1d      	ldr	r3, [pc, #116]	; (8003548 <HAL_RCC_ClockConfig+0x260>)
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f023 0203 	bic.w	r2, r3, #3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	491a      	ldr	r1, [pc, #104]	; (8003548 <HAL_RCC_ClockConfig+0x260>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034e4:	f7fd ff64 	bl	80013b0 <HAL_GetTick>
 80034e8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ea:	e00a      	b.n	8003502 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034ec:	f7fd ff60 	bl	80013b0 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e061      	b.n	80035c6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003502:	4b11      	ldr	r3, [pc, #68]	; (8003548 <HAL_RCC_ClockConfig+0x260>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f003 020c 	and.w	r2, r3, #12
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	429a      	cmp	r2, r3
 8003512:	d1eb      	bne.n	80034ec <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003514:	4b0b      	ldr	r3, [pc, #44]	; (8003544 <HAL_RCC_ClockConfig+0x25c>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0307 	and.w	r3, r3, #7
 800351c:	683a      	ldr	r2, [r7, #0]
 800351e:	429a      	cmp	r2, r3
 8003520:	d214      	bcs.n	800354c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003522:	4b08      	ldr	r3, [pc, #32]	; (8003544 <HAL_RCC_ClockConfig+0x25c>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f023 0207 	bic.w	r2, r3, #7
 800352a:	4906      	ldr	r1, [pc, #24]	; (8003544 <HAL_RCC_ClockConfig+0x25c>)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	4313      	orrs	r3, r2
 8003530:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003532:	4b04      	ldr	r3, [pc, #16]	; (8003544 <HAL_RCC_ClockConfig+0x25c>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0307 	and.w	r3, r3, #7
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	429a      	cmp	r2, r3
 800353e:	d005      	beq.n	800354c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e040      	b.n	80035c6 <HAL_RCC_ClockConfig+0x2de>
 8003544:	40022000 	.word	0x40022000
 8003548:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0304 	and.w	r3, r3, #4
 8003554:	2b00      	cmp	r3, #0
 8003556:	d008      	beq.n	800356a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003558:	4b1d      	ldr	r3, [pc, #116]	; (80035d0 <HAL_RCC_ClockConfig+0x2e8>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	491a      	ldr	r1, [pc, #104]	; (80035d0 <HAL_RCC_ClockConfig+0x2e8>)
 8003566:	4313      	orrs	r3, r2
 8003568:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0308 	and.w	r3, r3, #8
 8003572:	2b00      	cmp	r3, #0
 8003574:	d009      	beq.n	800358a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003576:	4b16      	ldr	r3, [pc, #88]	; (80035d0 <HAL_RCC_ClockConfig+0x2e8>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	4912      	ldr	r1, [pc, #72]	; (80035d0 <HAL_RCC_ClockConfig+0x2e8>)
 8003586:	4313      	orrs	r3, r2
 8003588:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800358a:	f000 f829 	bl	80035e0 <HAL_RCC_GetSysClockFreq>
 800358e:	4601      	mov	r1, r0
 8003590:	4b0f      	ldr	r3, [pc, #60]	; (80035d0 <HAL_RCC_ClockConfig+0x2e8>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003598:	22f0      	movs	r2, #240	; 0xf0
 800359a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	fa92 f2a2 	rbit	r2, r2
 80035a2:	60fa      	str	r2, [r7, #12]
  return result;
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	fab2 f282 	clz	r2, r2
 80035aa:	b2d2      	uxtb	r2, r2
 80035ac:	40d3      	lsrs	r3, r2
 80035ae:	4a09      	ldr	r2, [pc, #36]	; (80035d4 <HAL_RCC_ClockConfig+0x2ec>)
 80035b0:	5cd3      	ldrb	r3, [r2, r3]
 80035b2:	fa21 f303 	lsr.w	r3, r1, r3
 80035b6:	4a08      	ldr	r2, [pc, #32]	; (80035d8 <HAL_RCC_ClockConfig+0x2f0>)
 80035b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80035ba:	4b08      	ldr	r3, [pc, #32]	; (80035dc <HAL_RCC_ClockConfig+0x2f4>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4618      	mov	r0, r3
 80035c0:	f7fd fdbc 	bl	800113c <HAL_InitTick>
  
  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3778      	adds	r7, #120	; 0x78
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	40021000 	.word	0x40021000
 80035d4:	08007cd4 	.word	0x08007cd4
 80035d8:	20000000 	.word	0x20000000
 80035dc:	20000004 	.word	0x20000004

080035e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b08b      	sub	sp, #44	; 0x2c
 80035e4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035e6:	2300      	movs	r3, #0
 80035e8:	61fb      	str	r3, [r7, #28]
 80035ea:	2300      	movs	r3, #0
 80035ec:	61bb      	str	r3, [r7, #24]
 80035ee:	2300      	movs	r3, #0
 80035f0:	627b      	str	r3, [r7, #36]	; 0x24
 80035f2:	2300      	movs	r3, #0
 80035f4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80035f6:	2300      	movs	r3, #0
 80035f8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80035fa:	4b29      	ldr	r3, [pc, #164]	; (80036a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	f003 030c 	and.w	r3, r3, #12
 8003606:	2b04      	cmp	r3, #4
 8003608:	d002      	beq.n	8003610 <HAL_RCC_GetSysClockFreq+0x30>
 800360a:	2b08      	cmp	r3, #8
 800360c:	d003      	beq.n	8003616 <HAL_RCC_GetSysClockFreq+0x36>
 800360e:	e03c      	b.n	800368a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003610:	4b24      	ldr	r3, [pc, #144]	; (80036a4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003612:	623b      	str	r3, [r7, #32]
      break;
 8003614:	e03c      	b.n	8003690 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800361c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003620:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003622:	68ba      	ldr	r2, [r7, #8]
 8003624:	fa92 f2a2 	rbit	r2, r2
 8003628:	607a      	str	r2, [r7, #4]
  return result;
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	fab2 f282 	clz	r2, r2
 8003630:	b2d2      	uxtb	r2, r2
 8003632:	40d3      	lsrs	r3, r2
 8003634:	4a1c      	ldr	r2, [pc, #112]	; (80036a8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003636:	5cd3      	ldrb	r3, [r2, r3]
 8003638:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800363a:	4b19      	ldr	r3, [pc, #100]	; (80036a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800363c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363e:	f003 030f 	and.w	r3, r3, #15
 8003642:	220f      	movs	r2, #15
 8003644:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	fa92 f2a2 	rbit	r2, r2
 800364c:	60fa      	str	r2, [r7, #12]
  return result;
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	fab2 f282 	clz	r2, r2
 8003654:	b2d2      	uxtb	r2, r2
 8003656:	40d3      	lsrs	r3, r2
 8003658:	4a14      	ldr	r2, [pc, #80]	; (80036ac <HAL_RCC_GetSysClockFreq+0xcc>)
 800365a:	5cd3      	ldrb	r3, [r2, r3]
 800365c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d008      	beq.n	800367a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003668:	4a0e      	ldr	r2, [pc, #56]	; (80036a4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	fb02 f303 	mul.w	r3, r2, r3
 8003676:	627b      	str	r3, [r7, #36]	; 0x24
 8003678:	e004      	b.n	8003684 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	4a0c      	ldr	r2, [pc, #48]	; (80036b0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800367e:	fb02 f303 	mul.w	r3, r2, r3
 8003682:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003686:	623b      	str	r3, [r7, #32]
      break;
 8003688:	e002      	b.n	8003690 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800368a:	4b06      	ldr	r3, [pc, #24]	; (80036a4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800368c:	623b      	str	r3, [r7, #32]
      break;
 800368e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003690:	6a3b      	ldr	r3, [r7, #32]
}
 8003692:	4618      	mov	r0, r3
 8003694:	372c      	adds	r7, #44	; 0x2c
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	40021000 	.word	0x40021000
 80036a4:	007a1200 	.word	0x007a1200
 80036a8:	08007cec 	.word	0x08007cec
 80036ac:	08007cfc 	.word	0x08007cfc
 80036b0:	003d0900 	.word	0x003d0900

080036b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036b4:	b480      	push	{r7}
 80036b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036b8:	4b03      	ldr	r3, [pc, #12]	; (80036c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80036ba:	681b      	ldr	r3, [r3, #0]
}
 80036bc:	4618      	mov	r0, r3
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	20000000 	.word	0x20000000

080036cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80036d2:	f7ff ffef 	bl	80036b4 <HAL_RCC_GetHCLKFreq>
 80036d6:	4601      	mov	r1, r0
 80036d8:	4b0b      	ldr	r3, [pc, #44]	; (8003708 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80036e0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80036e4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	fa92 f2a2 	rbit	r2, r2
 80036ec:	603a      	str	r2, [r7, #0]
  return result;
 80036ee:	683a      	ldr	r2, [r7, #0]
 80036f0:	fab2 f282 	clz	r2, r2
 80036f4:	b2d2      	uxtb	r2, r2
 80036f6:	40d3      	lsrs	r3, r2
 80036f8:	4a04      	ldr	r2, [pc, #16]	; (800370c <HAL_RCC_GetPCLK1Freq+0x40>)
 80036fa:	5cd3      	ldrb	r3, [r2, r3]
 80036fc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003700:	4618      	mov	r0, r3
 8003702:	3708      	adds	r7, #8
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	40021000 	.word	0x40021000
 800370c:	08007ce4 	.word	0x08007ce4

08003710 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003716:	f7ff ffcd 	bl	80036b4 <HAL_RCC_GetHCLKFreq>
 800371a:	4601      	mov	r1, r0
 800371c:	4b0b      	ldr	r3, [pc, #44]	; (800374c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003724:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003728:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	fa92 f2a2 	rbit	r2, r2
 8003730:	603a      	str	r2, [r7, #0]
  return result;
 8003732:	683a      	ldr	r2, [r7, #0]
 8003734:	fab2 f282 	clz	r2, r2
 8003738:	b2d2      	uxtb	r2, r2
 800373a:	40d3      	lsrs	r3, r2
 800373c:	4a04      	ldr	r2, [pc, #16]	; (8003750 <HAL_RCC_GetPCLK2Freq+0x40>)
 800373e:	5cd3      	ldrb	r3, [r2, r3]
 8003740:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003744:	4618      	mov	r0, r3
 8003746:	3708      	adds	r7, #8
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	40021000 	.word	0x40021000
 8003750:	08007ce4 	.word	0x08007ce4

08003754 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	220f      	movs	r2, #15
 8003762:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003764:	4b12      	ldr	r3, [pc, #72]	; (80037b0 <HAL_RCC_GetClockConfig+0x5c>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f003 0203 	and.w	r2, r3, #3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003770:	4b0f      	ldr	r3, [pc, #60]	; (80037b0 <HAL_RCC_GetClockConfig+0x5c>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800377c:	4b0c      	ldr	r3, [pc, #48]	; (80037b0 <HAL_RCC_GetClockConfig+0x5c>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003788:	4b09      	ldr	r3, [pc, #36]	; (80037b0 <HAL_RCC_GetClockConfig+0x5c>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	08db      	lsrs	r3, r3, #3
 800378e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8003796:	4b07      	ldr	r3, [pc, #28]	; (80037b4 <HAL_RCC_GetClockConfig+0x60>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0207 	and.w	r2, r3, #7
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	601a      	str	r2, [r3, #0]
}
 80037a2:	bf00      	nop
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	40021000 	.word	0x40021000
 80037b4:	40022000 	.word	0x40022000

080037b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b092      	sub	sp, #72	; 0x48
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037c0:	2300      	movs	r3, #0
 80037c2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80037c4:	2300      	movs	r3, #0
 80037c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80037c8:	2300      	movs	r3, #0
 80037ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	f000 80d4 	beq.w	8003984 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037dc:	4b4e      	ldr	r3, [pc, #312]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037de:	69db      	ldr	r3, [r3, #28]
 80037e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d10e      	bne.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037e8:	4b4b      	ldr	r3, [pc, #300]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ea:	69db      	ldr	r3, [r3, #28]
 80037ec:	4a4a      	ldr	r2, [pc, #296]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037f2:	61d3      	str	r3, [r2, #28]
 80037f4:	4b48      	ldr	r3, [pc, #288]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037f6:	69db      	ldr	r3, [r3, #28]
 80037f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037fc:	60bb      	str	r3, [r7, #8]
 80037fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003800:	2301      	movs	r3, #1
 8003802:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003806:	4b45      	ldr	r3, [pc, #276]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800380e:	2b00      	cmp	r3, #0
 8003810:	d118      	bne.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003812:	4b42      	ldr	r3, [pc, #264]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a41      	ldr	r2, [pc, #260]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800381c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800381e:	f7fd fdc7 	bl	80013b0 <HAL_GetTick>
 8003822:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003824:	e008      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003826:	f7fd fdc3 	bl	80013b0 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b64      	cmp	r3, #100	; 0x64
 8003832:	d901      	bls.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e13c      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003838:	4b38      	ldr	r3, [pc, #224]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003840:	2b00      	cmp	r3, #0
 8003842:	d0f0      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003844:	4b34      	ldr	r3, [pc, #208]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003846:	6a1b      	ldr	r3, [r3, #32]
 8003848:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800384c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800384e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003850:	2b00      	cmp	r3, #0
 8003852:	f000 8084 	beq.w	800395e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800385e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003860:	429a      	cmp	r2, r3
 8003862:	d07c      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003864:	4b2c      	ldr	r3, [pc, #176]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800386c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800386e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003872:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003876:	fa93 f3a3 	rbit	r3, r3
 800387a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800387c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800387e:	fab3 f383 	clz	r3, r3
 8003882:	b2db      	uxtb	r3, r3
 8003884:	461a      	mov	r2, r3
 8003886:	4b26      	ldr	r3, [pc, #152]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003888:	4413      	add	r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	461a      	mov	r2, r3
 800388e:	2301      	movs	r3, #1
 8003890:	6013      	str	r3, [r2, #0]
 8003892:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003896:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800389a:	fa93 f3a3 	rbit	r3, r3
 800389e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80038a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80038a2:	fab3 f383 	clz	r3, r3
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	461a      	mov	r2, r3
 80038aa:	4b1d      	ldr	r3, [pc, #116]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80038ac:	4413      	add	r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	461a      	mov	r2, r3
 80038b2:	2300      	movs	r3, #0
 80038b4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80038b6:	4a18      	ldr	r2, [pc, #96]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ba:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80038bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d04b      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c6:	f7fd fd73 	bl	80013b0 <HAL_GetTick>
 80038ca:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038cc:	e00a      	b.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ce:	f7fd fd6f 	bl	80013b0 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038dc:	4293      	cmp	r3, r2
 80038de:	d901      	bls.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e0e6      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 80038e4:	2302      	movs	r3, #2
 80038e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ea:	fa93 f3a3 	rbit	r3, r3
 80038ee:	627b      	str	r3, [r7, #36]	; 0x24
 80038f0:	2302      	movs	r3, #2
 80038f2:	623b      	str	r3, [r7, #32]
 80038f4:	6a3b      	ldr	r3, [r7, #32]
 80038f6:	fa93 f3a3 	rbit	r3, r3
 80038fa:	61fb      	str	r3, [r7, #28]
  return result;
 80038fc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038fe:	fab3 f383 	clz	r3, r3
 8003902:	b2db      	uxtb	r3, r3
 8003904:	095b      	lsrs	r3, r3, #5
 8003906:	b2db      	uxtb	r3, r3
 8003908:	f043 0302 	orr.w	r3, r3, #2
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d108      	bne.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003912:	4b01      	ldr	r3, [pc, #4]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	e00d      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003918:	40021000 	.word	0x40021000
 800391c:	40007000 	.word	0x40007000
 8003920:	10908100 	.word	0x10908100
 8003924:	2302      	movs	r3, #2
 8003926:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	fa93 f3a3 	rbit	r3, r3
 800392e:	617b      	str	r3, [r7, #20]
 8003930:	4b62      	ldr	r3, [pc, #392]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003934:	2202      	movs	r2, #2
 8003936:	613a      	str	r2, [r7, #16]
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	fa92 f2a2 	rbit	r2, r2
 800393e:	60fa      	str	r2, [r7, #12]
  return result;
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	fab2 f282 	clz	r2, r2
 8003946:	b2d2      	uxtb	r2, r2
 8003948:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800394c:	b2d2      	uxtb	r2, r2
 800394e:	f002 021f 	and.w	r2, r2, #31
 8003952:	2101      	movs	r1, #1
 8003954:	fa01 f202 	lsl.w	r2, r1, r2
 8003958:	4013      	ands	r3, r2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d0b7      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800395e:	4b57      	ldr	r3, [pc, #348]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003960:	6a1b      	ldr	r3, [r3, #32]
 8003962:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	4954      	ldr	r1, [pc, #336]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800396c:	4313      	orrs	r3, r2
 800396e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003970:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003974:	2b01      	cmp	r3, #1
 8003976:	d105      	bne.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003978:	4b50      	ldr	r3, [pc, #320]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800397a:	69db      	ldr	r3, [r3, #28]
 800397c:	4a4f      	ldr	r2, [pc, #316]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800397e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003982:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0301 	and.w	r3, r3, #1
 800398c:	2b00      	cmp	r3, #0
 800398e:	d008      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003990:	4b4a      	ldr	r3, [pc, #296]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003994:	f023 0203 	bic.w	r2, r3, #3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	4947      	ldr	r1, [pc, #284]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0320 	and.w	r3, r3, #32
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d008      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039ae:	4b43      	ldr	r3, [pc, #268]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80039b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b2:	f023 0210 	bic.w	r2, r3, #16
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	4940      	ldr	r1, [pc, #256]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d008      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039cc:	4b3b      	ldr	r3, [pc, #236]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80039ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d0:	f023 0220 	bic.w	r2, r3, #32
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	4938      	ldr	r1, [pc, #224]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d008      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039ea:	4b34      	ldr	r3, [pc, #208]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80039ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ee:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	4931      	ldr	r1, [pc, #196]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d008      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a08:	4b2c      	ldr	r3, [pc, #176]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	69db      	ldr	r3, [r3, #28]
 8003a14:	4929      	ldr	r1, [pc, #164]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d008      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003a26:	4b25      	ldr	r3, [pc, #148]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	4922      	ldr	r1, [pc, #136]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d008      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003a44:	4b1d      	ldr	r3, [pc, #116]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a1b      	ldr	r3, [r3, #32]
 8003a50:	491a      	ldr	r1, [pc, #104]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d008      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003a62:	4b16      	ldr	r3, [pc, #88]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a66:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6e:	4913      	ldr	r1, [pc, #76]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d008      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003a80:	4b0e      	ldr	r3, [pc, #56]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a84:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8c:	490b      	ldr	r1, [pc, #44]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d008      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003a9e:	4b07      	ldr	r3, [pc, #28]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aaa:	4904      	ldr	r1, [pc, #16]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3748      	adds	r7, #72	; 0x48
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	40021000 	.word	0x40021000

08003ac0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e09d      	b.n	8003c0e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d108      	bne.n	8003aec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ae2:	d009      	beq.n	8003af8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	61da      	str	r2, [r3, #28]
 8003aea:	e005      	b.n	8003af8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d106      	bne.n	8003b18 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f7fd fa10 	bl	8000f38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2202      	movs	r2, #2
 8003b1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b2e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b38:	d902      	bls.n	8003b40 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	60fb      	str	r3, [r7, #12]
 8003b3e:	e002      	b.n	8003b46 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003b40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b44:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003b4e:	d007      	beq.n	8003b60 <HAL_SPI_Init+0xa0>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b58:	d002      	beq.n	8003b60 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b70:	431a      	orrs	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	695b      	ldr	r3, [r3, #20]
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	431a      	orrs	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	69db      	ldr	r3, [r3, #28]
 8003b94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b98:	431a      	orrs	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba2:	ea42 0103 	orr.w	r1, r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003baa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	0c1b      	lsrs	r3, r3, #16
 8003bbc:	f003 0204 	and.w	r2, r3, #4
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc4:	f003 0310 	and.w	r3, r3, #16
 8003bc8:	431a      	orrs	r2, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bce:	f003 0308 	and.w	r3, r3, #8
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003bdc:	ea42 0103 	orr.w	r1, r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	430a      	orrs	r2, r1
 8003bec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	69da      	ldr	r2, [r3, #28]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bfc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b082      	sub	sp, #8
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d101      	bne.n	8003c28 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e049      	b.n	8003cbc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d106      	bne.n	8003c42 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f000 f841 	bl	8003cc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2202      	movs	r2, #2
 8003c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	3304      	adds	r3, #4
 8003c52:	4619      	mov	r1, r3
 8003c54:	4610      	mov	r0, r2
 8003c56:	f000 facd 	bl	80041f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3708      	adds	r7, #8
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d001      	beq.n	8003cf0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e03b      	b.n	8003d68 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2202      	movs	r2, #2
 8003cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68da      	ldr	r2, [r3, #12]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f042 0201 	orr.w	r2, r2, #1
 8003d06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a19      	ldr	r2, [pc, #100]	; (8003d74 <HAL_TIM_Base_Start_IT+0x9c>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d009      	beq.n	8003d26 <HAL_TIM_Base_Start_IT+0x4e>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d1a:	d004      	beq.n	8003d26 <HAL_TIM_Base_Start_IT+0x4e>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a15      	ldr	r2, [pc, #84]	; (8003d78 <HAL_TIM_Base_Start_IT+0xa0>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d115      	bne.n	8003d52 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	689a      	ldr	r2, [r3, #8]
 8003d2c:	4b13      	ldr	r3, [pc, #76]	; (8003d7c <HAL_TIM_Base_Start_IT+0xa4>)
 8003d2e:	4013      	ands	r3, r2
 8003d30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2b06      	cmp	r3, #6
 8003d36:	d015      	beq.n	8003d64 <HAL_TIM_Base_Start_IT+0x8c>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d3e:	d011      	beq.n	8003d64 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f042 0201 	orr.w	r2, r2, #1
 8003d4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d50:	e008      	b.n	8003d64 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f042 0201 	orr.w	r2, r2, #1
 8003d60:	601a      	str	r2, [r3, #0]
 8003d62:	e000      	b.n	8003d66 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d64:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3714      	adds	r7, #20
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr
 8003d74:	40012c00 	.word	0x40012c00
 8003d78:	40014000 	.word	0x40014000
 8003d7c:	00010007 	.word	0x00010007

08003d80 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d101      	bne.n	8003d92 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e049      	b.n	8003e26 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d106      	bne.n	8003dac <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f7fd f90a 	bl	8000fc0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2202      	movs	r2, #2
 8003db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	3304      	adds	r3, #4
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	4610      	mov	r0, r2
 8003dc0:	f000 fa18 	bl	80041f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3708      	adds	r7, #8
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b082      	sub	sp, #8
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d122      	bne.n	8003e8a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d11b      	bne.n	8003e8a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f06f 0202 	mvn.w	r2, #2
 8003e5a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	f003 0303 	and.w	r3, r3, #3
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d003      	beq.n	8003e78 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 f9a1 	bl	80041b8 <HAL_TIM_IC_CaptureCallback>
 8003e76:	e005      	b.n	8003e84 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 f993 	bl	80041a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 f9a4 	bl	80041cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	f003 0304 	and.w	r3, r3, #4
 8003e94:	2b04      	cmp	r3, #4
 8003e96:	d122      	bne.n	8003ede <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	f003 0304 	and.w	r3, r3, #4
 8003ea2:	2b04      	cmp	r3, #4
 8003ea4:	d11b      	bne.n	8003ede <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f06f 0204 	mvn.w	r2, #4
 8003eae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d003      	beq.n	8003ecc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f000 f977 	bl	80041b8 <HAL_TIM_IC_CaptureCallback>
 8003eca:	e005      	b.n	8003ed8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 f969 	bl	80041a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 f97a 	bl	80041cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	f003 0308 	and.w	r3, r3, #8
 8003ee8:	2b08      	cmp	r3, #8
 8003eea:	d122      	bne.n	8003f32 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	f003 0308 	and.w	r3, r3, #8
 8003ef6:	2b08      	cmp	r3, #8
 8003ef8:	d11b      	bne.n	8003f32 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f06f 0208 	mvn.w	r2, #8
 8003f02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2204      	movs	r2, #4
 8003f08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	69db      	ldr	r3, [r3, #28]
 8003f10:	f003 0303 	and.w	r3, r3, #3
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d003      	beq.n	8003f20 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f000 f94d 	bl	80041b8 <HAL_TIM_IC_CaptureCallback>
 8003f1e:	e005      	b.n	8003f2c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 f93f 	bl	80041a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 f950 	bl	80041cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	f003 0310 	and.w	r3, r3, #16
 8003f3c:	2b10      	cmp	r3, #16
 8003f3e:	d122      	bne.n	8003f86 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	f003 0310 	and.w	r3, r3, #16
 8003f4a:	2b10      	cmp	r3, #16
 8003f4c:	d11b      	bne.n	8003f86 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f06f 0210 	mvn.w	r2, #16
 8003f56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2208      	movs	r2, #8
 8003f5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	69db      	ldr	r3, [r3, #28]
 8003f64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d003      	beq.n	8003f74 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 f923 	bl	80041b8 <HAL_TIM_IC_CaptureCallback>
 8003f72:	e005      	b.n	8003f80 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 f915 	bl	80041a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f926 	bl	80041cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	f003 0301 	and.w	r3, r3, #1
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d10e      	bne.n	8003fb2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	f003 0301 	and.w	r3, r3, #1
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d107      	bne.n	8003fb2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f06f 0201 	mvn.w	r2, #1
 8003faa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f7fc ff47 	bl	8000e40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	691b      	ldr	r3, [r3, #16]
 8003fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fbc:	2b80      	cmp	r3, #128	; 0x80
 8003fbe:	d10e      	bne.n	8003fde <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fca:	2b80      	cmp	r3, #128	; 0x80
 8003fcc:	d107      	bne.n	8003fde <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003fd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 faf5 	bl	80045c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fec:	d10e      	bne.n	800400c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff8:	2b80      	cmp	r3, #128	; 0x80
 8003ffa:	d107      	bne.n	800400c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 fae8 	bl	80045dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004016:	2b40      	cmp	r3, #64	; 0x40
 8004018:	d10e      	bne.n	8004038 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004024:	2b40      	cmp	r3, #64	; 0x40
 8004026:	d107      	bne.n	8004038 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 f8d4 	bl	80041e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	f003 0320 	and.w	r3, r3, #32
 8004042:	2b20      	cmp	r3, #32
 8004044:	d10e      	bne.n	8004064 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	f003 0320 	and.w	r3, r3, #32
 8004050:	2b20      	cmp	r3, #32
 8004052:	d107      	bne.n	8004064 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f06f 0220 	mvn.w	r2, #32
 800405c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 faa8 	bl	80045b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004064:	bf00      	nop
 8004066:	3708      	adds	r7, #8
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b086      	sub	sp, #24
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004078:	2300      	movs	r3, #0
 800407a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004082:	2b01      	cmp	r3, #1
 8004084:	d101      	bne.n	800408a <HAL_TIM_IC_ConfigChannel+0x1e>
 8004086:	2302      	movs	r3, #2
 8004088:	e088      	b.n	800419c <HAL_TIM_IC_ConfigChannel+0x130>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2201      	movs	r2, #1
 800408e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d11b      	bne.n	80040d0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80040a8:	f000 f912 	bl	80042d0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	699a      	ldr	r2, [r3, #24]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f022 020c 	bic.w	r2, r2, #12
 80040ba:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	6999      	ldr	r1, [r3, #24]
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	689a      	ldr	r2, [r3, #8]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	430a      	orrs	r2, r1
 80040cc:	619a      	str	r2, [r3, #24]
 80040ce:	e060      	b.n	8004192 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2b04      	cmp	r3, #4
 80040d4:	d11c      	bne.n	8004110 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80040e6:	f000 f949 	bl	800437c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	699a      	ldr	r2, [r3, #24]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80040f8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	6999      	ldr	r1, [r3, #24]
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	021a      	lsls	r2, r3, #8
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	430a      	orrs	r2, r1
 800410c:	619a      	str	r2, [r3, #24]
 800410e:	e040      	b.n	8004192 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2b08      	cmp	r3, #8
 8004114:	d11b      	bne.n	800414e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004126:	f000 f966 	bl	80043f6 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	69da      	ldr	r2, [r3, #28]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f022 020c 	bic.w	r2, r2, #12
 8004138:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	69d9      	ldr	r1, [r3, #28]
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	689a      	ldr	r2, [r3, #8]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	430a      	orrs	r2, r1
 800414a:	61da      	str	r2, [r3, #28]
 800414c:	e021      	b.n	8004192 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2b0c      	cmp	r3, #12
 8004152:	d11c      	bne.n	800418e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004164:	f000 f983 	bl	800446e <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	69da      	ldr	r2, [r3, #28]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004176:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	69d9      	ldr	r1, [r3, #28]
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	021a      	lsls	r2, r3, #8
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	430a      	orrs	r2, r1
 800418a:	61da      	str	r2, [r3, #28]
 800418c:	e001      	b.n	8004192 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800419a:	7dfb      	ldrb	r3, [r7, #23]
}
 800419c:	4618      	mov	r0, r3
 800419e:	3718      	adds	r7, #24
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041ac:	bf00      	nop
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a2e      	ldr	r2, [pc, #184]	; (80042c0 <TIM_Base_SetConfig+0xcc>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d003      	beq.n	8004214 <TIM_Base_SetConfig+0x20>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004212:	d108      	bne.n	8004226 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800421a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	4313      	orrs	r3, r2
 8004224:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a25      	ldr	r2, [pc, #148]	; (80042c0 <TIM_Base_SetConfig+0xcc>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d00f      	beq.n	800424e <TIM_Base_SetConfig+0x5a>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004234:	d00b      	beq.n	800424e <TIM_Base_SetConfig+0x5a>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a22      	ldr	r2, [pc, #136]	; (80042c4 <TIM_Base_SetConfig+0xd0>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d007      	beq.n	800424e <TIM_Base_SetConfig+0x5a>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a21      	ldr	r2, [pc, #132]	; (80042c8 <TIM_Base_SetConfig+0xd4>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d003      	beq.n	800424e <TIM_Base_SetConfig+0x5a>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a20      	ldr	r2, [pc, #128]	; (80042cc <TIM_Base_SetConfig+0xd8>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d108      	bne.n	8004260 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004254:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	4313      	orrs	r3, r2
 800425e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	4313      	orrs	r3, r2
 800426c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	68fa      	ldr	r2, [r7, #12]
 8004272:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	689a      	ldr	r2, [r3, #8]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4a0e      	ldr	r2, [pc, #56]	; (80042c0 <TIM_Base_SetConfig+0xcc>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d00b      	beq.n	80042a4 <TIM_Base_SetConfig+0xb0>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a0d      	ldr	r2, [pc, #52]	; (80042c4 <TIM_Base_SetConfig+0xd0>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d007      	beq.n	80042a4 <TIM_Base_SetConfig+0xb0>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a0c      	ldr	r2, [pc, #48]	; (80042c8 <TIM_Base_SetConfig+0xd4>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d003      	beq.n	80042a4 <TIM_Base_SetConfig+0xb0>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a0b      	ldr	r2, [pc, #44]	; (80042cc <TIM_Base_SetConfig+0xd8>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d103      	bne.n	80042ac <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	691a      	ldr	r2, [r3, #16]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	615a      	str	r2, [r3, #20]
}
 80042b2:	bf00      	nop
 80042b4:	3714      	adds	r7, #20
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	40012c00 	.word	0x40012c00
 80042c4:	40014000 	.word	0x40014000
 80042c8:	40014400 	.word	0x40014400
 80042cc:	40014800 	.word	0x40014800

080042d0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b087      	sub	sp, #28
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	607a      	str	r2, [r7, #4]
 80042dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	f023 0201 	bic.w	r2, r3, #1
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	699b      	ldr	r3, [r3, #24]
 80042ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6a1b      	ldr	r3, [r3, #32]
 80042f4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	4a1e      	ldr	r2, [pc, #120]	; (8004374 <TIM_TI1_SetConfig+0xa4>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d007      	beq.n	800430e <TIM_TI1_SetConfig+0x3e>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004304:	d003      	beq.n	800430e <TIM_TI1_SetConfig+0x3e>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	4a1b      	ldr	r2, [pc, #108]	; (8004378 <TIM_TI1_SetConfig+0xa8>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d101      	bne.n	8004312 <TIM_TI1_SetConfig+0x42>
 800430e:	2301      	movs	r3, #1
 8004310:	e000      	b.n	8004314 <TIM_TI1_SetConfig+0x44>
 8004312:	2300      	movs	r3, #0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d008      	beq.n	800432a <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	f023 0303 	bic.w	r3, r3, #3
 800431e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004320:	697a      	ldr	r2, [r7, #20]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4313      	orrs	r3, r2
 8004326:	617b      	str	r3, [r7, #20]
 8004328:	e003      	b.n	8004332 <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	f043 0301 	orr.w	r3, r3, #1
 8004330:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004338:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	011b      	lsls	r3, r3, #4
 800433e:	b2db      	uxtb	r3, r3
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	4313      	orrs	r3, r2
 8004344:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	f023 030a 	bic.w	r3, r3, #10
 800434c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	f003 030a 	and.w	r3, r3, #10
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	4313      	orrs	r3, r2
 8004358:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	621a      	str	r2, [r3, #32]
}
 8004366:	bf00      	nop
 8004368:	371c      	adds	r7, #28
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	40012c00 	.word	0x40012c00
 8004378:	40014000 	.word	0x40014000

0800437c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800437c:	b480      	push	{r7}
 800437e:	b087      	sub	sp, #28
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
 8004388:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	f023 0210 	bic.w	r2, r3, #16
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6a1b      	ldr	r3, [r3, #32]
 80043a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	021b      	lsls	r3, r3, #8
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043ba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	031b      	lsls	r3, r3, #12
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	697a      	ldr	r2, [r7, #20]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043ce:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	011b      	lsls	r3, r3, #4
 80043d4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	4313      	orrs	r3, r2
 80043dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	621a      	str	r2, [r3, #32]
}
 80043ea:	bf00      	nop
 80043ec:	371c      	adds	r7, #28
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr

080043f6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80043f6:	b480      	push	{r7}
 80043f8:	b087      	sub	sp, #28
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	60f8      	str	r0, [r7, #12]
 80043fe:	60b9      	str	r1, [r7, #8]
 8004400:	607a      	str	r2, [r7, #4]
 8004402:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6a1b      	ldr	r3, [r3, #32]
 8004408:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	69db      	ldr	r3, [r3, #28]
 8004414:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	f023 0303 	bic.w	r3, r3, #3
 8004422:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004424:	697a      	ldr	r2, [r7, #20]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4313      	orrs	r3, r2
 800442a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004432:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	011b      	lsls	r3, r3, #4
 8004438:	b2db      	uxtb	r3, r3
 800443a:	697a      	ldr	r2, [r7, #20]
 800443c:	4313      	orrs	r3, r2
 800443e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004446:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	021b      	lsls	r3, r3, #8
 800444c:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	4313      	orrs	r3, r2
 8004454:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	697a      	ldr	r2, [r7, #20]
 800445a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	621a      	str	r2, [r3, #32]
}
 8004462:	bf00      	nop
 8004464:	371c      	adds	r7, #28
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr

0800446e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800446e:	b480      	push	{r7}
 8004470:	b087      	sub	sp, #28
 8004472:	af00      	add	r7, sp, #0
 8004474:	60f8      	str	r0, [r7, #12]
 8004476:	60b9      	str	r1, [r7, #8]
 8004478:	607a      	str	r2, [r7, #4]
 800447a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6a1b      	ldr	r3, [r3, #32]
 8004480:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	69db      	ldr	r3, [r3, #28]
 800448c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800449a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	021b      	lsls	r3, r3, #8
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044ac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	031b      	lsls	r3, r3, #12
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	697a      	ldr	r2, [r7, #20]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80044c0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	031b      	lsls	r3, r3, #12
 80044c6:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	621a      	str	r2, [r3, #32]
}
 80044dc:	bf00      	nop
 80044de:	371c      	adds	r7, #28
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d101      	bne.n	8004500 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044fc:	2302      	movs	r3, #2
 80044fe:	e04f      	b.n	80045a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2202      	movs	r2, #2
 800450c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a21      	ldr	r2, [pc, #132]	; (80045ac <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d108      	bne.n	800453c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004530:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	4313      	orrs	r3, r2
 800453a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004542:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	4313      	orrs	r3, r2
 800454c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a14      	ldr	r2, [pc, #80]	; (80045ac <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d009      	beq.n	8004574 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004568:	d004      	beq.n	8004574 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a10      	ldr	r2, [pc, #64]	; (80045b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d10c      	bne.n	800458e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800457a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	68ba      	ldr	r2, [r7, #8]
 8004582:	4313      	orrs	r3, r2
 8004584:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	68ba      	ldr	r2, [r7, #8]
 800458c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3714      	adds	r7, #20
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr
 80045ac:	40012c00 	.word	0x40012c00
 80045b0:	40014000 	.word	0x40014000

080045b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045bc:	bf00      	nop
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e040      	b.n	8004684 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004606:	2b00      	cmp	r3, #0
 8004608:	d106      	bne.n	8004618 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f7fc fd4e 	bl	80010b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2224      	movs	r2, #36	; 0x24
 800461c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f022 0201 	bic.w	r2, r2, #1
 800462c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 f980 	bl	8004934 <UART_SetConfig>
 8004634:	4603      	mov	r3, r0
 8004636:	2b01      	cmp	r3, #1
 8004638:	d101      	bne.n	800463e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e022      	b.n	8004684 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004642:	2b00      	cmp	r3, #0
 8004644:	d002      	beq.n	800464c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 faaa 	bl	8004ba0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	685a      	ldr	r2, [r3, #4]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800465a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	689a      	ldr	r2, [r3, #8]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800466a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f042 0201 	orr.w	r2, r2, #1
 800467a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f000 fb31 	bl	8004ce4 <UART_CheckIdleState>
 8004682:	4603      	mov	r3, r0
}
 8004684:	4618      	mov	r0, r3
 8004686:	3708      	adds	r7, #8
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b08a      	sub	sp, #40	; 0x28
 8004690:	af02      	add	r7, sp, #8
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	603b      	str	r3, [r7, #0]
 8004698:	4613      	mov	r3, r2
 800469a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046a0:	2b20      	cmp	r3, #32
 80046a2:	d178      	bne.n	8004796 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d002      	beq.n	80046b0 <HAL_UART_Transmit+0x24>
 80046aa:	88fb      	ldrh	r3, [r7, #6]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d101      	bne.n	80046b4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e071      	b.n	8004798 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2221      	movs	r2, #33	; 0x21
 80046c0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046c2:	f7fc fe75 	bl	80013b0 <HAL_GetTick>
 80046c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	88fa      	ldrh	r2, [r7, #6]
 80046cc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	88fa      	ldrh	r2, [r7, #6]
 80046d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046e0:	d108      	bne.n	80046f4 <HAL_UART_Transmit+0x68>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d104      	bne.n	80046f4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80046ea:	2300      	movs	r3, #0
 80046ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	61bb      	str	r3, [r7, #24]
 80046f2:	e003      	b.n	80046fc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046f8:	2300      	movs	r3, #0
 80046fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80046fc:	e030      	b.n	8004760 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	9300      	str	r3, [sp, #0]
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	2200      	movs	r2, #0
 8004706:	2180      	movs	r1, #128	; 0x80
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	f000 fb93 	bl	8004e34 <UART_WaitOnFlagUntilTimeout>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d004      	beq.n	800471e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2220      	movs	r2, #32
 8004718:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e03c      	b.n	8004798 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d10b      	bne.n	800473c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	881a      	ldrh	r2, [r3, #0]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004730:	b292      	uxth	r2, r2
 8004732:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	3302      	adds	r3, #2
 8004738:	61bb      	str	r3, [r7, #24]
 800473a:	e008      	b.n	800474e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	781a      	ldrb	r2, [r3, #0]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	b292      	uxth	r2, r2
 8004746:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	3301      	adds	r3, #1
 800474c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004754:	b29b      	uxth	r3, r3
 8004756:	3b01      	subs	r3, #1
 8004758:	b29a      	uxth	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004766:	b29b      	uxth	r3, r3
 8004768:	2b00      	cmp	r3, #0
 800476a:	d1c8      	bne.n	80046fe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	9300      	str	r3, [sp, #0]
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	2200      	movs	r2, #0
 8004774:	2140      	movs	r1, #64	; 0x40
 8004776:	68f8      	ldr	r0, [r7, #12]
 8004778:	f000 fb5c 	bl	8004e34 <UART_WaitOnFlagUntilTimeout>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d004      	beq.n	800478c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2220      	movs	r2, #32
 8004786:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e005      	b.n	8004798 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2220      	movs	r2, #32
 8004790:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004792:	2300      	movs	r3, #0
 8004794:	e000      	b.n	8004798 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004796:	2302      	movs	r3, #2
  }
}
 8004798:	4618      	mov	r0, r3
 800479a:	3720      	adds	r7, #32
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b08a      	sub	sp, #40	; 0x28
 80047a4:	af02      	add	r7, sp, #8
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	603b      	str	r3, [r7, #0]
 80047ac:	4613      	mov	r3, r2
 80047ae:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047b6:	2b20      	cmp	r3, #32
 80047b8:	f040 80b6 	bne.w	8004928 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d002      	beq.n	80047c8 <HAL_UART_Receive+0x28>
 80047c2:	88fb      	ldrh	r3, [r7, #6]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d101      	bne.n	80047cc <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e0ae      	b.n	800492a <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2222      	movs	r2, #34	; 0x22
 80047d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047e2:	f7fc fde5 	bl	80013b0 <HAL_GetTick>
 80047e6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	88fa      	ldrh	r2, [r7, #6]
 80047ec:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	88fa      	ldrh	r2, [r7, #6]
 80047f4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004800:	d10e      	bne.n	8004820 <HAL_UART_Receive+0x80>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d105      	bne.n	8004816 <HAL_UART_Receive+0x76>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004810:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004814:	e02d      	b.n	8004872 <HAL_UART_Receive+0xd2>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	22ff      	movs	r2, #255	; 0xff
 800481a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800481e:	e028      	b.n	8004872 <HAL_UART_Receive+0xd2>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d10d      	bne.n	8004844 <HAL_UART_Receive+0xa4>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d104      	bne.n	800483a <HAL_UART_Receive+0x9a>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	22ff      	movs	r2, #255	; 0xff
 8004834:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004838:	e01b      	b.n	8004872 <HAL_UART_Receive+0xd2>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	227f      	movs	r2, #127	; 0x7f
 800483e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004842:	e016      	b.n	8004872 <HAL_UART_Receive+0xd2>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800484c:	d10d      	bne.n	800486a <HAL_UART_Receive+0xca>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d104      	bne.n	8004860 <HAL_UART_Receive+0xc0>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	227f      	movs	r2, #127	; 0x7f
 800485a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800485e:	e008      	b.n	8004872 <HAL_UART_Receive+0xd2>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	223f      	movs	r2, #63	; 0x3f
 8004864:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004868:	e003      	b.n	8004872 <HAL_UART_Receive+0xd2>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004878:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004882:	d108      	bne.n	8004896 <HAL_UART_Receive+0xf6>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	691b      	ldr	r3, [r3, #16]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d104      	bne.n	8004896 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800488c:	2300      	movs	r3, #0
 800488e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	61bb      	str	r3, [r7, #24]
 8004894:	e003      	b.n	800489e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800489a:	2300      	movs	r3, #0
 800489c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800489e:	e037      	b.n	8004910 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	9300      	str	r3, [sp, #0]
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	2200      	movs	r2, #0
 80048a8:	2120      	movs	r1, #32
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f000 fac2 	bl	8004e34 <UART_WaitOnFlagUntilTimeout>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d005      	beq.n	80048c2 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2220      	movs	r2, #32
 80048ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e033      	b.n	800492a <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10c      	bne.n	80048e2 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	8a7b      	ldrh	r3, [r7, #18]
 80048d2:	4013      	ands	r3, r2
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	3302      	adds	r3, #2
 80048de:	61bb      	str	r3, [r7, #24]
 80048e0:	e00d      	b.n	80048fe <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	b2da      	uxtb	r2, r3
 80048ec:	8a7b      	ldrh	r3, [r7, #18]
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	4013      	ands	r3, r2
 80048f2:	b2da      	uxtb	r2, r3
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	3301      	adds	r3, #1
 80048fc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004904:	b29b      	uxth	r3, r3
 8004906:	3b01      	subs	r3, #1
 8004908:	b29a      	uxth	r2, r3
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004916:	b29b      	uxth	r3, r3
 8004918:	2b00      	cmp	r3, #0
 800491a:	d1c1      	bne.n	80048a0 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2220      	movs	r2, #32
 8004920:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8004924:	2300      	movs	r3, #0
 8004926:	e000      	b.n	800492a <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8004928:	2302      	movs	r3, #2
  }
}
 800492a:	4618      	mov	r0, r3
 800492c:	3720      	adds	r7, #32
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
	...

08004934 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b088      	sub	sp, #32
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800493c:	2300      	movs	r3, #0
 800493e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	689a      	ldr	r2, [r3, #8]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	431a      	orrs	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	431a      	orrs	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	69db      	ldr	r3, [r3, #28]
 8004954:	4313      	orrs	r3, r2
 8004956:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	4b8a      	ldr	r3, [pc, #552]	; (8004b88 <UART_SetConfig+0x254>)
 8004960:	4013      	ands	r3, r2
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	6812      	ldr	r2, [r2, #0]
 8004966:	6979      	ldr	r1, [r7, #20]
 8004968:	430b      	orrs	r3, r1
 800496a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	68da      	ldr	r2, [r3, #12]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	430a      	orrs	r2, r1
 8004980:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a1b      	ldr	r3, [r3, #32]
 800498c:	697a      	ldr	r2, [r7, #20]
 800498e:	4313      	orrs	r3, r2
 8004990:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	697a      	ldr	r2, [r7, #20]
 80049a2:	430a      	orrs	r2, r1
 80049a4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a78      	ldr	r2, [pc, #480]	; (8004b8c <UART_SetConfig+0x258>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d120      	bne.n	80049f2 <UART_SetConfig+0xbe>
 80049b0:	4b77      	ldr	r3, [pc, #476]	; (8004b90 <UART_SetConfig+0x25c>)
 80049b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b4:	f003 0303 	and.w	r3, r3, #3
 80049b8:	2b03      	cmp	r3, #3
 80049ba:	d817      	bhi.n	80049ec <UART_SetConfig+0xb8>
 80049bc:	a201      	add	r2, pc, #4	; (adr r2, 80049c4 <UART_SetConfig+0x90>)
 80049be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049c2:	bf00      	nop
 80049c4:	080049d5 	.word	0x080049d5
 80049c8:	080049e1 	.word	0x080049e1
 80049cc:	080049e7 	.word	0x080049e7
 80049d0:	080049db 	.word	0x080049db
 80049d4:	2300      	movs	r3, #0
 80049d6:	77fb      	strb	r3, [r7, #31]
 80049d8:	e01d      	b.n	8004a16 <UART_SetConfig+0xe2>
 80049da:	2302      	movs	r3, #2
 80049dc:	77fb      	strb	r3, [r7, #31]
 80049de:	e01a      	b.n	8004a16 <UART_SetConfig+0xe2>
 80049e0:	2304      	movs	r3, #4
 80049e2:	77fb      	strb	r3, [r7, #31]
 80049e4:	e017      	b.n	8004a16 <UART_SetConfig+0xe2>
 80049e6:	2308      	movs	r3, #8
 80049e8:	77fb      	strb	r3, [r7, #31]
 80049ea:	e014      	b.n	8004a16 <UART_SetConfig+0xe2>
 80049ec:	2310      	movs	r3, #16
 80049ee:	77fb      	strb	r3, [r7, #31]
 80049f0:	e011      	b.n	8004a16 <UART_SetConfig+0xe2>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a67      	ldr	r2, [pc, #412]	; (8004b94 <UART_SetConfig+0x260>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d102      	bne.n	8004a02 <UART_SetConfig+0xce>
 80049fc:	2300      	movs	r3, #0
 80049fe:	77fb      	strb	r3, [r7, #31]
 8004a00:	e009      	b.n	8004a16 <UART_SetConfig+0xe2>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a64      	ldr	r2, [pc, #400]	; (8004b98 <UART_SetConfig+0x264>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d102      	bne.n	8004a12 <UART_SetConfig+0xde>
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	77fb      	strb	r3, [r7, #31]
 8004a10:	e001      	b.n	8004a16 <UART_SetConfig+0xe2>
 8004a12:	2310      	movs	r3, #16
 8004a14:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	69db      	ldr	r3, [r3, #28]
 8004a1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a1e:	d15a      	bne.n	8004ad6 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004a20:	7ffb      	ldrb	r3, [r7, #31]
 8004a22:	2b08      	cmp	r3, #8
 8004a24:	d827      	bhi.n	8004a76 <UART_SetConfig+0x142>
 8004a26:	a201      	add	r2, pc, #4	; (adr r2, 8004a2c <UART_SetConfig+0xf8>)
 8004a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a2c:	08004a51 	.word	0x08004a51
 8004a30:	08004a59 	.word	0x08004a59
 8004a34:	08004a61 	.word	0x08004a61
 8004a38:	08004a77 	.word	0x08004a77
 8004a3c:	08004a67 	.word	0x08004a67
 8004a40:	08004a77 	.word	0x08004a77
 8004a44:	08004a77 	.word	0x08004a77
 8004a48:	08004a77 	.word	0x08004a77
 8004a4c:	08004a6f 	.word	0x08004a6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a50:	f7fe fe3c 	bl	80036cc <HAL_RCC_GetPCLK1Freq>
 8004a54:	61b8      	str	r0, [r7, #24]
        break;
 8004a56:	e013      	b.n	8004a80 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a58:	f7fe fe5a 	bl	8003710 <HAL_RCC_GetPCLK2Freq>
 8004a5c:	61b8      	str	r0, [r7, #24]
        break;
 8004a5e:	e00f      	b.n	8004a80 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a60:	4b4e      	ldr	r3, [pc, #312]	; (8004b9c <UART_SetConfig+0x268>)
 8004a62:	61bb      	str	r3, [r7, #24]
        break;
 8004a64:	e00c      	b.n	8004a80 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a66:	f7fe fdbb 	bl	80035e0 <HAL_RCC_GetSysClockFreq>
 8004a6a:	61b8      	str	r0, [r7, #24]
        break;
 8004a6c:	e008      	b.n	8004a80 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a72:	61bb      	str	r3, [r7, #24]
        break;
 8004a74:	e004      	b.n	8004a80 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004a76:	2300      	movs	r3, #0
 8004a78:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	77bb      	strb	r3, [r7, #30]
        break;
 8004a7e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d074      	beq.n	8004b70 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	005a      	lsls	r2, r3, #1
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	085b      	lsrs	r3, r3, #1
 8004a90:	441a      	add	r2, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a9a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	2b0f      	cmp	r3, #15
 8004aa0:	d916      	bls.n	8004ad0 <UART_SetConfig+0x19c>
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aa8:	d212      	bcs.n	8004ad0 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	f023 030f 	bic.w	r3, r3, #15
 8004ab2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	085b      	lsrs	r3, r3, #1
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	f003 0307 	and.w	r3, r3, #7
 8004abe:	b29a      	uxth	r2, r3
 8004ac0:	89fb      	ldrh	r3, [r7, #14]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	89fa      	ldrh	r2, [r7, #14]
 8004acc:	60da      	str	r2, [r3, #12]
 8004ace:	e04f      	b.n	8004b70 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	77bb      	strb	r3, [r7, #30]
 8004ad4:	e04c      	b.n	8004b70 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ad6:	7ffb      	ldrb	r3, [r7, #31]
 8004ad8:	2b08      	cmp	r3, #8
 8004ada:	d828      	bhi.n	8004b2e <UART_SetConfig+0x1fa>
 8004adc:	a201      	add	r2, pc, #4	; (adr r2, 8004ae4 <UART_SetConfig+0x1b0>)
 8004ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae2:	bf00      	nop
 8004ae4:	08004b09 	.word	0x08004b09
 8004ae8:	08004b11 	.word	0x08004b11
 8004aec:	08004b19 	.word	0x08004b19
 8004af0:	08004b2f 	.word	0x08004b2f
 8004af4:	08004b1f 	.word	0x08004b1f
 8004af8:	08004b2f 	.word	0x08004b2f
 8004afc:	08004b2f 	.word	0x08004b2f
 8004b00:	08004b2f 	.word	0x08004b2f
 8004b04:	08004b27 	.word	0x08004b27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b08:	f7fe fde0 	bl	80036cc <HAL_RCC_GetPCLK1Freq>
 8004b0c:	61b8      	str	r0, [r7, #24]
        break;
 8004b0e:	e013      	b.n	8004b38 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b10:	f7fe fdfe 	bl	8003710 <HAL_RCC_GetPCLK2Freq>
 8004b14:	61b8      	str	r0, [r7, #24]
        break;
 8004b16:	e00f      	b.n	8004b38 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b18:	4b20      	ldr	r3, [pc, #128]	; (8004b9c <UART_SetConfig+0x268>)
 8004b1a:	61bb      	str	r3, [r7, #24]
        break;
 8004b1c:	e00c      	b.n	8004b38 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b1e:	f7fe fd5f 	bl	80035e0 <HAL_RCC_GetSysClockFreq>
 8004b22:	61b8      	str	r0, [r7, #24]
        break;
 8004b24:	e008      	b.n	8004b38 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b2a:	61bb      	str	r3, [r7, #24]
        break;
 8004b2c:	e004      	b.n	8004b38 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	77bb      	strb	r3, [r7, #30]
        break;
 8004b36:	bf00      	nop
    }

    if (pclk != 0U)
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d018      	beq.n	8004b70 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	085a      	lsrs	r2, r3, #1
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	441a      	add	r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b50:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	2b0f      	cmp	r3, #15
 8004b56:	d909      	bls.n	8004b6c <UART_SetConfig+0x238>
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b5e:	d205      	bcs.n	8004b6c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	b29a      	uxth	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	60da      	str	r2, [r3, #12]
 8004b6a:	e001      	b.n	8004b70 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004b7c:	7fbb      	ldrb	r3, [r7, #30]
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3720      	adds	r7, #32
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	efff69f3 	.word	0xefff69f3
 8004b8c:	40013800 	.word	0x40013800
 8004b90:	40021000 	.word	0x40021000
 8004b94:	40004400 	.word	0x40004400
 8004b98:	40004800 	.word	0x40004800
 8004b9c:	007a1200 	.word	0x007a1200

08004ba0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bac:	f003 0301 	and.w	r3, r3, #1
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00a      	beq.n	8004bca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00a      	beq.n	8004bec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	430a      	orrs	r2, r1
 8004bea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf0:	f003 0304 	and.w	r3, r3, #4
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d00a      	beq.n	8004c0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	430a      	orrs	r2, r1
 8004c0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c12:	f003 0308 	and.w	r3, r3, #8
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00a      	beq.n	8004c30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	430a      	orrs	r2, r1
 8004c2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c34:	f003 0310 	and.w	r3, r3, #16
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d00a      	beq.n	8004c52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	430a      	orrs	r2, r1
 8004c50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c56:	f003 0320 	and.w	r3, r3, #32
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00a      	beq.n	8004c74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	430a      	orrs	r2, r1
 8004c72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d01a      	beq.n	8004cb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	430a      	orrs	r2, r1
 8004c94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c9e:	d10a      	bne.n	8004cb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	430a      	orrs	r2, r1
 8004cb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00a      	beq.n	8004cd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	430a      	orrs	r2, r1
 8004cd6:	605a      	str	r2, [r3, #4]
  }
}
 8004cd8:	bf00      	nop
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b098      	sub	sp, #96	; 0x60
 8004ce8:	af02      	add	r7, sp, #8
 8004cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004cf4:	f7fc fb5c 	bl	80013b0 <HAL_GetTick>
 8004cf8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0308 	and.w	r3, r3, #8
 8004d04:	2b08      	cmp	r3, #8
 8004d06:	d12e      	bne.n	8004d66 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d0c:	9300      	str	r3, [sp, #0]
 8004d0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d10:	2200      	movs	r2, #0
 8004d12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 f88c 	bl	8004e34 <UART_WaitOnFlagUntilTimeout>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d021      	beq.n	8004d66 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d2a:	e853 3f00 	ldrex	r3, [r3]
 8004d2e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d36:	653b      	str	r3, [r7, #80]	; 0x50
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d40:	647b      	str	r3, [r7, #68]	; 0x44
 8004d42:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d44:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d48:	e841 2300 	strex	r3, r2, [r1]
 8004d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1e6      	bne.n	8004d22 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2220      	movs	r2, #32
 8004d58:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e062      	b.n	8004e2c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0304 	and.w	r3, r3, #4
 8004d70:	2b04      	cmp	r3, #4
 8004d72:	d149      	bne.n	8004e08 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d78:	9300      	str	r3, [sp, #0]
 8004d7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 f856 	bl	8004e34 <UART_WaitOnFlagUntilTimeout>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d03c      	beq.n	8004e08 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d96:	e853 3f00 	ldrex	r3, [r3]
 8004d9a:	623b      	str	r3, [r7, #32]
   return(result);
 8004d9c:	6a3b      	ldr	r3, [r7, #32]
 8004d9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004da2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	461a      	mov	r2, r3
 8004daa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dac:	633b      	str	r3, [r7, #48]	; 0x30
 8004dae:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004db2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004db4:	e841 2300 	strex	r3, r2, [r1]
 8004db8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1e6      	bne.n	8004d8e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	3308      	adds	r3, #8
 8004dc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	e853 3f00 	ldrex	r3, [r3]
 8004dce:	60fb      	str	r3, [r7, #12]
   return(result);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f023 0301 	bic.w	r3, r3, #1
 8004dd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	3308      	adds	r3, #8
 8004dde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004de0:	61fa      	str	r2, [r7, #28]
 8004de2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de4:	69b9      	ldr	r1, [r7, #24]
 8004de6:	69fa      	ldr	r2, [r7, #28]
 8004de8:	e841 2300 	strex	r3, r2, [r1]
 8004dec:	617b      	str	r3, [r7, #20]
   return(result);
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d1e5      	bne.n	8004dc0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2220      	movs	r2, #32
 8004df8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e011      	b.n	8004e2c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2220      	movs	r2, #32
 8004e0c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2220      	movs	r2, #32
 8004e12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3758      	adds	r7, #88	; 0x58
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	603b      	str	r3, [r7, #0]
 8004e40:	4613      	mov	r3, r2
 8004e42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e44:	e049      	b.n	8004eda <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e4c:	d045      	beq.n	8004eda <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e4e:	f7fc faaf 	bl	80013b0 <HAL_GetTick>
 8004e52:	4602      	mov	r2, r0
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	69ba      	ldr	r2, [r7, #24]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d302      	bcc.n	8004e64 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d101      	bne.n	8004e68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e048      	b.n	8004efa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0304 	and.w	r3, r3, #4
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d031      	beq.n	8004eda <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	69db      	ldr	r3, [r3, #28]
 8004e7c:	f003 0308 	and.w	r3, r3, #8
 8004e80:	2b08      	cmp	r3, #8
 8004e82:	d110      	bne.n	8004ea6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2208      	movs	r2, #8
 8004e8a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004e8c:	68f8      	ldr	r0, [r7, #12]
 8004e8e:	f000 f838 	bl	8004f02 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2208      	movs	r2, #8
 8004e96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e029      	b.n	8004efa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	69db      	ldr	r3, [r3, #28]
 8004eac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004eb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eb4:	d111      	bne.n	8004eda <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ebe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ec0:	68f8      	ldr	r0, [r7, #12]
 8004ec2:	f000 f81e 	bl	8004f02 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2220      	movs	r2, #32
 8004eca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e00f      	b.n	8004efa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	69da      	ldr	r2, [r3, #28]
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	68ba      	ldr	r2, [r7, #8]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	bf0c      	ite	eq
 8004eea:	2301      	moveq	r3, #1
 8004eec:	2300      	movne	r3, #0
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	79fb      	ldrb	r3, [r7, #7]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d0a6      	beq.n	8004e46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3710      	adds	r7, #16
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}

08004f02 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f02:	b480      	push	{r7}
 8004f04:	b095      	sub	sp, #84	; 0x54
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f12:	e853 3f00 	ldrex	r3, [r3]
 8004f16:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	461a      	mov	r2, r3
 8004f26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f28:	643b      	str	r3, [r7, #64]	; 0x40
 8004f2a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f30:	e841 2300 	strex	r3, r2, [r1]
 8004f34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d1e6      	bne.n	8004f0a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	3308      	adds	r3, #8
 8004f42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f44:	6a3b      	ldr	r3, [r7, #32]
 8004f46:	e853 3f00 	ldrex	r3, [r3]
 8004f4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	f023 0301 	bic.w	r3, r3, #1
 8004f52:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	3308      	adds	r3, #8
 8004f5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f5c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f64:	e841 2300 	strex	r3, r2, [r1]
 8004f68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d1e5      	bne.n	8004f3c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d118      	bne.n	8004faa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	e853 3f00 	ldrex	r3, [r3]
 8004f84:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	f023 0310 	bic.w	r3, r3, #16
 8004f8c:	647b      	str	r3, [r7, #68]	; 0x44
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	461a      	mov	r2, r3
 8004f94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f96:	61bb      	str	r3, [r7, #24]
 8004f98:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f9a:	6979      	ldr	r1, [r7, #20]
 8004f9c:	69ba      	ldr	r2, [r7, #24]
 8004f9e:	e841 2300 	strex	r3, r2, [r1]
 8004fa2:	613b      	str	r3, [r7, #16]
   return(result);
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d1e6      	bne.n	8004f78 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2220      	movs	r2, #32
 8004fae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004fbe:	bf00      	nop
 8004fc0:	3754      	adds	r7, #84	; 0x54
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr

08004fca <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004fca:	b480      	push	{r7}
 8004fcc:	b085      	sub	sp, #20
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004fd8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fdc:	2b84      	cmp	r3, #132	; 0x84
 8004fde:	d005      	beq.n	8004fec <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004fe0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	4413      	add	r3, r2
 8004fe8:	3303      	adds	r3, #3
 8004fea:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004fec:	68fb      	ldr	r3, [r7, #12]
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3714      	adds	r7, #20
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr

08004ffa <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004ffa:	b580      	push	{r7, lr}
 8004ffc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004ffe:	f001 f895 	bl	800612c <vTaskStartScheduler>
  
  return osOK;
 8005002:	2300      	movs	r3, #0
}
 8005004:	4618      	mov	r0, r3
 8005006:	bd80      	pop	{r7, pc}

08005008 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800500a:	b089      	sub	sp, #36	; 0x24
 800500c:	af04      	add	r7, sp, #16
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d020      	beq.n	800505c <osThreadCreate+0x54>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d01c      	beq.n	800505c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685c      	ldr	r4, [r3, #4]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	691e      	ldr	r6, [r3, #16]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005034:	4618      	mov	r0, r3
 8005036:	f7ff ffc8 	bl	8004fca <makeFreeRtosPriority>
 800503a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	695b      	ldr	r3, [r3, #20]
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005044:	9202      	str	r2, [sp, #8]
 8005046:	9301      	str	r3, [sp, #4]
 8005048:	9100      	str	r1, [sp, #0]
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	4632      	mov	r2, r6
 800504e:	4629      	mov	r1, r5
 8005050:	4620      	mov	r0, r4
 8005052:	f000 fead 	bl	8005db0 <xTaskCreateStatic>
 8005056:	4603      	mov	r3, r0
 8005058:	60fb      	str	r3, [r7, #12]
 800505a:	e01c      	b.n	8005096 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685c      	ldr	r4, [r3, #4]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005068:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005070:	4618      	mov	r0, r3
 8005072:	f7ff ffaa 	bl	8004fca <makeFreeRtosPriority>
 8005076:	4602      	mov	r2, r0
 8005078:	f107 030c 	add.w	r3, r7, #12
 800507c:	9301      	str	r3, [sp, #4]
 800507e:	9200      	str	r2, [sp, #0]
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	4632      	mov	r2, r6
 8005084:	4629      	mov	r1, r5
 8005086:	4620      	mov	r0, r4
 8005088:	f000 feee 	bl	8005e68 <xTaskCreate>
 800508c:	4603      	mov	r3, r0
 800508e:	2b01      	cmp	r3, #1
 8005090:	d001      	beq.n	8005096 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005092:	2300      	movs	r3, #0
 8005094:	e000      	b.n	8005098 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005096:	68fb      	ldr	r3, [r7, #12]
}
 8005098:	4618      	mov	r0, r3
 800509a:	3714      	adds	r7, #20
 800509c:	46bd      	mov	sp, r7
 800509e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080050a0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d001      	beq.n	80050b6 <osDelay+0x16>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	e000      	b.n	80050b8 <osDelay+0x18>
 80050b6:	2301      	movs	r3, #1
 80050b8:	4618      	mov	r0, r3
 80050ba:	f001 f803 	bl	80060c4 <vTaskDelay>
  
  return osOK;
 80050be:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3710      	adds	r7, #16
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 80050ce:	201c      	movs	r0, #28
 80050d0:	f002 fb42 	bl	8007758 <pvPortMalloc>
 80050d4:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00a      	beq.n	80050f2 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	3304      	adds	r3, #4
 80050e6:	4618      	mov	r0, r3
 80050e8:	f000 f8cb 	bl	8005282 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 80050f2:	687b      	ldr	r3, [r7, #4]
	}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3708      	adds	r7, #8
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <xEventGroupClearBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b086      	sub	sp, #24
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d10a      	bne.n	8005126 <xEventGroupClearBits+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005114:	f383 8811 	msr	BASEPRI, r3
 8005118:	f3bf 8f6f 	isb	sy
 800511c:	f3bf 8f4f 	dsb	sy
 8005120:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005122:	bf00      	nop
 8005124:	e7fe      	b.n	8005124 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00a      	beq.n	8005146 <xEventGroupClearBits+0x4a>
	__asm volatile
 8005130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005134:	f383 8811 	msr	BASEPRI, r3
 8005138:	f3bf 8f6f 	isb	sy
 800513c:	f3bf 8f4f 	dsb	sy
 8005140:	60bb      	str	r3, [r7, #8]
}
 8005142:	bf00      	nop
 8005144:	e7fe      	b.n	8005144 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8005146:	f002 f9e5 	bl	8007514 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	43db      	mvns	r3, r3
 8005158:	401a      	ands	r2, r3
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 800515e:	f002 fa09 	bl	8007574 <vPortExitCritical>

	return uxReturn;
 8005162:	693b      	ldr	r3, [r7, #16]
}
 8005164:	4618      	mov	r0, r3
 8005166:	3718      	adds	r7, #24
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b08e      	sub	sp, #56	; 0x38
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8005176:	2300      	movs	r3, #0
 8005178:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800517e:	2300      	movs	r3, #0
 8005180:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d10a      	bne.n	800519e <xEventGroupSetBits+0x32>
	__asm volatile
 8005188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800518c:	f383 8811 	msr	BASEPRI, r3
 8005190:	f3bf 8f6f 	isb	sy
 8005194:	f3bf 8f4f 	dsb	sy
 8005198:	613b      	str	r3, [r7, #16]
}
 800519a:	bf00      	nop
 800519c:	e7fe      	b.n	800519c <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d00a      	beq.n	80051be <xEventGroupSetBits+0x52>
	__asm volatile
 80051a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ac:	f383 8811 	msr	BASEPRI, r3
 80051b0:	f3bf 8f6f 	isb	sy
 80051b4:	f3bf 8f4f 	dsb	sy
 80051b8:	60fb      	str	r3, [r7, #12]
}
 80051ba:	bf00      	nop
 80051bc:	e7fe      	b.n	80051bc <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80051be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c0:	3304      	adds	r3, #4
 80051c2:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c6:	3308      	adds	r3, #8
 80051c8:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80051ca:	f001 f815 	bl	80061f8 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80051ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80051d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	431a      	orrs	r2, r3
 80051dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051de:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80051e0:	e03c      	b.n	800525c <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80051e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80051e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80051ee:	2300      	movs	r3, #0
 80051f0:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80051f8:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005200:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d108      	bne.n	800521e <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800520c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	4013      	ands	r3, r2
 8005214:	2b00      	cmp	r3, #0
 8005216:	d00b      	beq.n	8005230 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8005218:	2301      	movs	r3, #1
 800521a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800521c:	e008      	b.n	8005230 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800521e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	4013      	ands	r3, r2
 8005226:	69ba      	ldr	r2, [r7, #24]
 8005228:	429a      	cmp	r2, r3
 800522a:	d101      	bne.n	8005230 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800522c:	2301      	movs	r3, #1
 800522e:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8005230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005232:	2b00      	cmp	r3, #0
 8005234:	d010      	beq.n	8005258 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d003      	beq.n	8005248 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8005240:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	4313      	orrs	r3, r2
 8005246:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8005248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005250:	4619      	mov	r1, r3
 8005252:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005254:	f001 fa56 	bl	8006704 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800525c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800525e:	6a3b      	ldr	r3, [r7, #32]
 8005260:	429a      	cmp	r2, r3
 8005262:	d1be      	bne.n	80051e2 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8005264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526a:	43db      	mvns	r3, r3
 800526c:	401a      	ands	r2, r3
 800526e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005270:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8005272:	f000 ffcf 	bl	8006214 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8005276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005278:	681b      	ldr	r3, [r3, #0]
}
 800527a:	4618      	mov	r0, r3
 800527c:	3738      	adds	r7, #56	; 0x38
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005282:	b480      	push	{r7}
 8005284:	b083      	sub	sp, #12
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f103 0208 	add.w	r2, r3, #8
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f04f 32ff 	mov.w	r2, #4294967295
 800529a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f103 0208 	add.w	r2, r3, #8
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f103 0208 	add.w	r2, r3, #8
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80052b6:	bf00      	nop
 80052b8:	370c      	adds	r7, #12
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr

080052c2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80052c2:	b480      	push	{r7}
 80052c4:	b083      	sub	sp, #12
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80052d0:	bf00      	nop
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80052dc:	b480      	push	{r7}
 80052de:	b085      	sub	sp, #20
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	689a      	ldr	r2, [r3, #8]
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	683a      	ldr	r2, [r7, #0]
 8005300:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	683a      	ldr	r2, [r7, #0]
 8005306:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	1c5a      	adds	r2, r3, #1
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	601a      	str	r2, [r3, #0]
}
 8005318:	bf00      	nop
 800531a:	3714      	adds	r7, #20
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005324:	b480      	push	{r7}
 8005326:	b085      	sub	sp, #20
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800533a:	d103      	bne.n	8005344 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	60fb      	str	r3, [r7, #12]
 8005342:	e00c      	b.n	800535e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	3308      	adds	r3, #8
 8005348:	60fb      	str	r3, [r7, #12]
 800534a:	e002      	b.n	8005352 <vListInsert+0x2e>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	60fb      	str	r3, [r7, #12]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	429a      	cmp	r2, r3
 800535c:	d2f6      	bcs.n	800534c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	685a      	ldr	r2, [r3, #4]
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	683a      	ldr	r2, [r7, #0]
 800536c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	683a      	ldr	r2, [r7, #0]
 8005378:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	1c5a      	adds	r2, r3, #1
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	601a      	str	r2, [r3, #0]
}
 800538a:	bf00      	nop
 800538c:	3714      	adds	r7, #20
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr

08005396 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005396:	b480      	push	{r7}
 8005398:	b085      	sub	sp, #20
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	6892      	ldr	r2, [r2, #8]
 80053ac:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	6852      	ldr	r2, [r2, #4]
 80053b6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d103      	bne.n	80053ca <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	689a      	ldr	r2, [r3, #8]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	1e5a      	subs	r2, r3, #1
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3714      	adds	r7, #20
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
	...

080053ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d10a      	bne.n	8005416 <xQueueGenericReset+0x2a>
	__asm volatile
 8005400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005404:	f383 8811 	msr	BASEPRI, r3
 8005408:	f3bf 8f6f 	isb	sy
 800540c:	f3bf 8f4f 	dsb	sy
 8005410:	60bb      	str	r3, [r7, #8]
}
 8005412:	bf00      	nop
 8005414:	e7fe      	b.n	8005414 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005416:	f002 f87d 	bl	8007514 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005422:	68f9      	ldr	r1, [r7, #12]
 8005424:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005426:	fb01 f303 	mul.w	r3, r1, r3
 800542a:	441a      	add	r2, r3
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005446:	3b01      	subs	r3, #1
 8005448:	68f9      	ldr	r1, [r7, #12]
 800544a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800544c:	fb01 f303 	mul.w	r3, r1, r3
 8005450:	441a      	add	r2, r3
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	22ff      	movs	r2, #255	; 0xff
 800545a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	22ff      	movs	r2, #255	; 0xff
 8005462:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d114      	bne.n	8005496 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d01a      	beq.n	80054aa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	3310      	adds	r3, #16
 8005478:	4618      	mov	r0, r3
 800547a:	f001 f8e1 	bl	8006640 <xTaskRemoveFromEventList>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d012      	beq.n	80054aa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005484:	4b0c      	ldr	r3, [pc, #48]	; (80054b8 <xQueueGenericReset+0xcc>)
 8005486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800548a:	601a      	str	r2, [r3, #0]
 800548c:	f3bf 8f4f 	dsb	sy
 8005490:	f3bf 8f6f 	isb	sy
 8005494:	e009      	b.n	80054aa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	3310      	adds	r3, #16
 800549a:	4618      	mov	r0, r3
 800549c:	f7ff fef1 	bl	8005282 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	3324      	adds	r3, #36	; 0x24
 80054a4:	4618      	mov	r0, r3
 80054a6:	f7ff feec 	bl	8005282 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80054aa:	f002 f863 	bl	8007574 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80054ae:	2301      	movs	r3, #1
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3710      	adds	r7, #16
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	e000ed04 	.word	0xe000ed04

080054bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b08e      	sub	sp, #56	; 0x38
 80054c0:	af02      	add	r7, sp, #8
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	607a      	str	r2, [r7, #4]
 80054c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d10a      	bne.n	80054e6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80054d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d4:	f383 8811 	msr	BASEPRI, r3
 80054d8:	f3bf 8f6f 	isb	sy
 80054dc:	f3bf 8f4f 	dsb	sy
 80054e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80054e2:	bf00      	nop
 80054e4:	e7fe      	b.n	80054e4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d10a      	bne.n	8005502 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80054ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f0:	f383 8811 	msr	BASEPRI, r3
 80054f4:	f3bf 8f6f 	isb	sy
 80054f8:	f3bf 8f4f 	dsb	sy
 80054fc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80054fe:	bf00      	nop
 8005500:	e7fe      	b.n	8005500 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d002      	beq.n	800550e <xQueueGenericCreateStatic+0x52>
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d001      	beq.n	8005512 <xQueueGenericCreateStatic+0x56>
 800550e:	2301      	movs	r3, #1
 8005510:	e000      	b.n	8005514 <xQueueGenericCreateStatic+0x58>
 8005512:	2300      	movs	r3, #0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d10a      	bne.n	800552e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800551c:	f383 8811 	msr	BASEPRI, r3
 8005520:	f3bf 8f6f 	isb	sy
 8005524:	f3bf 8f4f 	dsb	sy
 8005528:	623b      	str	r3, [r7, #32]
}
 800552a:	bf00      	nop
 800552c:	e7fe      	b.n	800552c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d102      	bne.n	800553a <xQueueGenericCreateStatic+0x7e>
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d101      	bne.n	800553e <xQueueGenericCreateStatic+0x82>
 800553a:	2301      	movs	r3, #1
 800553c:	e000      	b.n	8005540 <xQueueGenericCreateStatic+0x84>
 800553e:	2300      	movs	r3, #0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d10a      	bne.n	800555a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005548:	f383 8811 	msr	BASEPRI, r3
 800554c:	f3bf 8f6f 	isb	sy
 8005550:	f3bf 8f4f 	dsb	sy
 8005554:	61fb      	str	r3, [r7, #28]
}
 8005556:	bf00      	nop
 8005558:	e7fe      	b.n	8005558 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800555a:	2348      	movs	r3, #72	; 0x48
 800555c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	2b48      	cmp	r3, #72	; 0x48
 8005562:	d00a      	beq.n	800557a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005568:	f383 8811 	msr	BASEPRI, r3
 800556c:	f3bf 8f6f 	isb	sy
 8005570:	f3bf 8f4f 	dsb	sy
 8005574:	61bb      	str	r3, [r7, #24]
}
 8005576:	bf00      	nop
 8005578:	e7fe      	b.n	8005578 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800557e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005580:	2b00      	cmp	r3, #0
 8005582:	d00d      	beq.n	80055a0 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005586:	2201      	movs	r2, #1
 8005588:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800558c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005592:	9300      	str	r3, [sp, #0]
 8005594:	4613      	mov	r3, r2
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	68b9      	ldr	r1, [r7, #8]
 800559a:	68f8      	ldr	r0, [r7, #12]
 800559c:	f000 f805 	bl	80055aa <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80055a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3730      	adds	r7, #48	; 0x30
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}

080055aa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b084      	sub	sp, #16
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	60f8      	str	r0, [r7, #12]
 80055b2:	60b9      	str	r1, [r7, #8]
 80055b4:	607a      	str	r2, [r7, #4]
 80055b6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d103      	bne.n	80055c6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	69ba      	ldr	r2, [r7, #24]
 80055c2:	601a      	str	r2, [r3, #0]
 80055c4:	e002      	b.n	80055cc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80055d2:	69bb      	ldr	r3, [r7, #24]
 80055d4:	68ba      	ldr	r2, [r7, #8]
 80055d6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80055d8:	2101      	movs	r1, #1
 80055da:	69b8      	ldr	r0, [r7, #24]
 80055dc:	f7ff ff06 	bl	80053ec <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80055e0:	bf00      	nop
 80055e2:	3710      	adds	r7, #16
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b08e      	sub	sp, #56	; 0x38
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	607a      	str	r2, [r7, #4]
 80055f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80055f6:	2300      	movs	r3, #0
 80055f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80055fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005600:	2b00      	cmp	r3, #0
 8005602:	d10a      	bne.n	800561a <xQueueGenericSend+0x32>
	__asm volatile
 8005604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005608:	f383 8811 	msr	BASEPRI, r3
 800560c:	f3bf 8f6f 	isb	sy
 8005610:	f3bf 8f4f 	dsb	sy
 8005614:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005616:	bf00      	nop
 8005618:	e7fe      	b.n	8005618 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d103      	bne.n	8005628 <xQueueGenericSend+0x40>
 8005620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005624:	2b00      	cmp	r3, #0
 8005626:	d101      	bne.n	800562c <xQueueGenericSend+0x44>
 8005628:	2301      	movs	r3, #1
 800562a:	e000      	b.n	800562e <xQueueGenericSend+0x46>
 800562c:	2300      	movs	r3, #0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d10a      	bne.n	8005648 <xQueueGenericSend+0x60>
	__asm volatile
 8005632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005636:	f383 8811 	msr	BASEPRI, r3
 800563a:	f3bf 8f6f 	isb	sy
 800563e:	f3bf 8f4f 	dsb	sy
 8005642:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005644:	bf00      	nop
 8005646:	e7fe      	b.n	8005646 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	2b02      	cmp	r3, #2
 800564c:	d103      	bne.n	8005656 <xQueueGenericSend+0x6e>
 800564e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005652:	2b01      	cmp	r3, #1
 8005654:	d101      	bne.n	800565a <xQueueGenericSend+0x72>
 8005656:	2301      	movs	r3, #1
 8005658:	e000      	b.n	800565c <xQueueGenericSend+0x74>
 800565a:	2300      	movs	r3, #0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d10a      	bne.n	8005676 <xQueueGenericSend+0x8e>
	__asm volatile
 8005660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005664:	f383 8811 	msr	BASEPRI, r3
 8005668:	f3bf 8f6f 	isb	sy
 800566c:	f3bf 8f4f 	dsb	sy
 8005670:	623b      	str	r3, [r7, #32]
}
 8005672:	bf00      	nop
 8005674:	e7fe      	b.n	8005674 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005676:	f001 fa07 	bl	8006a88 <xTaskGetSchedulerState>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d102      	bne.n	8005686 <xQueueGenericSend+0x9e>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d101      	bne.n	800568a <xQueueGenericSend+0xa2>
 8005686:	2301      	movs	r3, #1
 8005688:	e000      	b.n	800568c <xQueueGenericSend+0xa4>
 800568a:	2300      	movs	r3, #0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d10a      	bne.n	80056a6 <xQueueGenericSend+0xbe>
	__asm volatile
 8005690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005694:	f383 8811 	msr	BASEPRI, r3
 8005698:	f3bf 8f6f 	isb	sy
 800569c:	f3bf 8f4f 	dsb	sy
 80056a0:	61fb      	str	r3, [r7, #28]
}
 80056a2:	bf00      	nop
 80056a4:	e7fe      	b.n	80056a4 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80056a6:	f001 ff35 	bl	8007514 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80056aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d302      	bcc.n	80056bc <xQueueGenericSend+0xd4>
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d129      	bne.n	8005710 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80056bc:	683a      	ldr	r2, [r7, #0]
 80056be:	68b9      	ldr	r1, [r7, #8]
 80056c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056c2:	f000 fa07 	bl	8005ad4 <prvCopyDataToQueue>
 80056c6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d010      	beq.n	80056f2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d2:	3324      	adds	r3, #36	; 0x24
 80056d4:	4618      	mov	r0, r3
 80056d6:	f000 ffb3 	bl	8006640 <xTaskRemoveFromEventList>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d013      	beq.n	8005708 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80056e0:	4b3f      	ldr	r3, [pc, #252]	; (80057e0 <xQueueGenericSend+0x1f8>)
 80056e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056e6:	601a      	str	r2, [r3, #0]
 80056e8:	f3bf 8f4f 	dsb	sy
 80056ec:	f3bf 8f6f 	isb	sy
 80056f0:	e00a      	b.n	8005708 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80056f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d007      	beq.n	8005708 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80056f8:	4b39      	ldr	r3, [pc, #228]	; (80057e0 <xQueueGenericSend+0x1f8>)
 80056fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056fe:	601a      	str	r2, [r3, #0]
 8005700:	f3bf 8f4f 	dsb	sy
 8005704:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005708:	f001 ff34 	bl	8007574 <vPortExitCritical>
				return pdPASS;
 800570c:	2301      	movs	r3, #1
 800570e:	e063      	b.n	80057d8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d103      	bne.n	800571e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005716:	f001 ff2d 	bl	8007574 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800571a:	2300      	movs	r3, #0
 800571c:	e05c      	b.n	80057d8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800571e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005720:	2b00      	cmp	r3, #0
 8005722:	d106      	bne.n	8005732 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005724:	f107 0314 	add.w	r3, r7, #20
 8005728:	4618      	mov	r0, r3
 800572a:	f001 f84d 	bl	80067c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800572e:	2301      	movs	r3, #1
 8005730:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005732:	f001 ff1f 	bl	8007574 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005736:	f000 fd5f 	bl	80061f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800573a:	f001 feeb 	bl	8007514 <vPortEnterCritical>
 800573e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005740:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005744:	b25b      	sxtb	r3, r3
 8005746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800574a:	d103      	bne.n	8005754 <xQueueGenericSend+0x16c>
 800574c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574e:	2200      	movs	r2, #0
 8005750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005756:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800575a:	b25b      	sxtb	r3, r3
 800575c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005760:	d103      	bne.n	800576a <xQueueGenericSend+0x182>
 8005762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005764:	2200      	movs	r2, #0
 8005766:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800576a:	f001 ff03 	bl	8007574 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800576e:	1d3a      	adds	r2, r7, #4
 8005770:	f107 0314 	add.w	r3, r7, #20
 8005774:	4611      	mov	r1, r2
 8005776:	4618      	mov	r0, r3
 8005778:	f001 f83c 	bl	80067f4 <xTaskCheckForTimeOut>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d124      	bne.n	80057cc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005782:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005784:	f000 fa9e 	bl	8005cc4 <prvIsQueueFull>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d018      	beq.n	80057c0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800578e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005790:	3310      	adds	r3, #16
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	4611      	mov	r1, r2
 8005796:	4618      	mov	r0, r3
 8005798:	f000 ff02 	bl	80065a0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800579c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800579e:	f000 fa29 	bl	8005bf4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80057a2:	f000 fd37 	bl	8006214 <xTaskResumeAll>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	f47f af7c 	bne.w	80056a6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80057ae:	4b0c      	ldr	r3, [pc, #48]	; (80057e0 <xQueueGenericSend+0x1f8>)
 80057b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057b4:	601a      	str	r2, [r3, #0]
 80057b6:	f3bf 8f4f 	dsb	sy
 80057ba:	f3bf 8f6f 	isb	sy
 80057be:	e772      	b.n	80056a6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80057c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057c2:	f000 fa17 	bl	8005bf4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80057c6:	f000 fd25 	bl	8006214 <xTaskResumeAll>
 80057ca:	e76c      	b.n	80056a6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80057cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057ce:	f000 fa11 	bl	8005bf4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80057d2:	f000 fd1f 	bl	8006214 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80057d6:	2300      	movs	r3, #0
		}
	}
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3738      	adds	r7, #56	; 0x38
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	e000ed04 	.word	0xe000ed04

080057e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b08e      	sub	sp, #56	; 0x38
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	607a      	str	r2, [r7, #4]
 80057f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80057f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d10a      	bne.n	8005812 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80057fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005800:	f383 8811 	msr	BASEPRI, r3
 8005804:	f3bf 8f6f 	isb	sy
 8005808:	f3bf 8f4f 	dsb	sy
 800580c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800580e:	bf00      	nop
 8005810:	e7fe      	b.n	8005810 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d103      	bne.n	8005820 <xQueueGenericSendFromISR+0x3c>
 8005818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581c:	2b00      	cmp	r3, #0
 800581e:	d101      	bne.n	8005824 <xQueueGenericSendFromISR+0x40>
 8005820:	2301      	movs	r3, #1
 8005822:	e000      	b.n	8005826 <xQueueGenericSendFromISR+0x42>
 8005824:	2300      	movs	r3, #0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d10a      	bne.n	8005840 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800582a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800582e:	f383 8811 	msr	BASEPRI, r3
 8005832:	f3bf 8f6f 	isb	sy
 8005836:	f3bf 8f4f 	dsb	sy
 800583a:	623b      	str	r3, [r7, #32]
}
 800583c:	bf00      	nop
 800583e:	e7fe      	b.n	800583e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	2b02      	cmp	r3, #2
 8005844:	d103      	bne.n	800584e <xQueueGenericSendFromISR+0x6a>
 8005846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800584a:	2b01      	cmp	r3, #1
 800584c:	d101      	bne.n	8005852 <xQueueGenericSendFromISR+0x6e>
 800584e:	2301      	movs	r3, #1
 8005850:	e000      	b.n	8005854 <xQueueGenericSendFromISR+0x70>
 8005852:	2300      	movs	r3, #0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d10a      	bne.n	800586e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800585c:	f383 8811 	msr	BASEPRI, r3
 8005860:	f3bf 8f6f 	isb	sy
 8005864:	f3bf 8f4f 	dsb	sy
 8005868:	61fb      	str	r3, [r7, #28]
}
 800586a:	bf00      	nop
 800586c:	e7fe      	b.n	800586c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800586e:	f001 ff33 	bl	80076d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005872:	f3ef 8211 	mrs	r2, BASEPRI
 8005876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800587a:	f383 8811 	msr	BASEPRI, r3
 800587e:	f3bf 8f6f 	isb	sy
 8005882:	f3bf 8f4f 	dsb	sy
 8005886:	61ba      	str	r2, [r7, #24]
 8005888:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800588a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800588c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800588e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005890:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005896:	429a      	cmp	r2, r3
 8005898:	d302      	bcc.n	80058a0 <xQueueGenericSendFromISR+0xbc>
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	2b02      	cmp	r3, #2
 800589e:	d12c      	bne.n	80058fa <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80058a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80058aa:	683a      	ldr	r2, [r7, #0]
 80058ac:	68b9      	ldr	r1, [r7, #8]
 80058ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058b0:	f000 f910 	bl	8005ad4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80058b4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80058b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058bc:	d112      	bne.n	80058e4 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d016      	beq.n	80058f4 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c8:	3324      	adds	r3, #36	; 0x24
 80058ca:	4618      	mov	r0, r3
 80058cc:	f000 feb8 	bl	8006640 <xTaskRemoveFromEventList>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d00e      	beq.n	80058f4 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00b      	beq.n	80058f4 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	601a      	str	r2, [r3, #0]
 80058e2:	e007      	b.n	80058f4 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80058e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80058e8:	3301      	adds	r3, #1
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	b25a      	sxtb	r2, r3
 80058ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80058f4:	2301      	movs	r3, #1
 80058f6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80058f8:	e001      	b.n	80058fe <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80058fa:	2300      	movs	r3, #0
 80058fc:	637b      	str	r3, [r7, #52]	; 0x34
 80058fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005900:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005908:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800590a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800590c:	4618      	mov	r0, r3
 800590e:	3738      	adds	r7, #56	; 0x38
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b08c      	sub	sp, #48	; 0x30
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005920:	2300      	movs	r3, #0
 8005922:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800592a:	2b00      	cmp	r3, #0
 800592c:	d10a      	bne.n	8005944 <xQueueReceive+0x30>
	__asm volatile
 800592e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005932:	f383 8811 	msr	BASEPRI, r3
 8005936:	f3bf 8f6f 	isb	sy
 800593a:	f3bf 8f4f 	dsb	sy
 800593e:	623b      	str	r3, [r7, #32]
}
 8005940:	bf00      	nop
 8005942:	e7fe      	b.n	8005942 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d103      	bne.n	8005952 <xQueueReceive+0x3e>
 800594a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800594c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594e:	2b00      	cmp	r3, #0
 8005950:	d101      	bne.n	8005956 <xQueueReceive+0x42>
 8005952:	2301      	movs	r3, #1
 8005954:	e000      	b.n	8005958 <xQueueReceive+0x44>
 8005956:	2300      	movs	r3, #0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d10a      	bne.n	8005972 <xQueueReceive+0x5e>
	__asm volatile
 800595c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005960:	f383 8811 	msr	BASEPRI, r3
 8005964:	f3bf 8f6f 	isb	sy
 8005968:	f3bf 8f4f 	dsb	sy
 800596c:	61fb      	str	r3, [r7, #28]
}
 800596e:	bf00      	nop
 8005970:	e7fe      	b.n	8005970 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005972:	f001 f889 	bl	8006a88 <xTaskGetSchedulerState>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d102      	bne.n	8005982 <xQueueReceive+0x6e>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d101      	bne.n	8005986 <xQueueReceive+0x72>
 8005982:	2301      	movs	r3, #1
 8005984:	e000      	b.n	8005988 <xQueueReceive+0x74>
 8005986:	2300      	movs	r3, #0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d10a      	bne.n	80059a2 <xQueueReceive+0x8e>
	__asm volatile
 800598c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005990:	f383 8811 	msr	BASEPRI, r3
 8005994:	f3bf 8f6f 	isb	sy
 8005998:	f3bf 8f4f 	dsb	sy
 800599c:	61bb      	str	r3, [r7, #24]
}
 800599e:	bf00      	nop
 80059a0:	e7fe      	b.n	80059a0 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80059a2:	f001 fdb7 	bl	8007514 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059aa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80059ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d01f      	beq.n	80059f2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80059b2:	68b9      	ldr	r1, [r7, #8]
 80059b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059b6:	f000 f8f7 	bl	8005ba8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80059ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059bc:	1e5a      	subs	r2, r3, #1
 80059be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00f      	beq.n	80059ea <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059cc:	3310      	adds	r3, #16
 80059ce:	4618      	mov	r0, r3
 80059d0:	f000 fe36 	bl	8006640 <xTaskRemoveFromEventList>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d007      	beq.n	80059ea <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80059da:	4b3d      	ldr	r3, [pc, #244]	; (8005ad0 <xQueueReceive+0x1bc>)
 80059dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059e0:	601a      	str	r2, [r3, #0]
 80059e2:	f3bf 8f4f 	dsb	sy
 80059e6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80059ea:	f001 fdc3 	bl	8007574 <vPortExitCritical>
				return pdPASS;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e069      	b.n	8005ac6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d103      	bne.n	8005a00 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80059f8:	f001 fdbc 	bl	8007574 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80059fc:	2300      	movs	r3, #0
 80059fe:	e062      	b.n	8005ac6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d106      	bne.n	8005a14 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a06:	f107 0310 	add.w	r3, r7, #16
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f000 fedc 	bl	80067c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a10:	2301      	movs	r3, #1
 8005a12:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a14:	f001 fdae 	bl	8007574 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a18:	f000 fbee 	bl	80061f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a1c:	f001 fd7a 	bl	8007514 <vPortEnterCritical>
 8005a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a26:	b25b      	sxtb	r3, r3
 8005a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a2c:	d103      	bne.n	8005a36 <xQueueReceive+0x122>
 8005a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a3c:	b25b      	sxtb	r3, r3
 8005a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a42:	d103      	bne.n	8005a4c <xQueueReceive+0x138>
 8005a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a4c:	f001 fd92 	bl	8007574 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a50:	1d3a      	adds	r2, r7, #4
 8005a52:	f107 0310 	add.w	r3, r7, #16
 8005a56:	4611      	mov	r1, r2
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f000 fecb 	bl	80067f4 <xTaskCheckForTimeOut>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d123      	bne.n	8005aac <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a66:	f000 f917 	bl	8005c98 <prvIsQueueEmpty>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d017      	beq.n	8005aa0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a72:	3324      	adds	r3, #36	; 0x24
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	4611      	mov	r1, r2
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f000 fd91 	bl	80065a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005a7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a80:	f000 f8b8 	bl	8005bf4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005a84:	f000 fbc6 	bl	8006214 <xTaskResumeAll>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d189      	bne.n	80059a2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005a8e:	4b10      	ldr	r3, [pc, #64]	; (8005ad0 <xQueueReceive+0x1bc>)
 8005a90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a94:	601a      	str	r2, [r3, #0]
 8005a96:	f3bf 8f4f 	dsb	sy
 8005a9a:	f3bf 8f6f 	isb	sy
 8005a9e:	e780      	b.n	80059a2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005aa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005aa2:	f000 f8a7 	bl	8005bf4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005aa6:	f000 fbb5 	bl	8006214 <xTaskResumeAll>
 8005aaa:	e77a      	b.n	80059a2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005aac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005aae:	f000 f8a1 	bl	8005bf4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ab2:	f000 fbaf 	bl	8006214 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ab6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ab8:	f000 f8ee 	bl	8005c98 <prvIsQueueEmpty>
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	f43f af6f 	beq.w	80059a2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005ac4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3730      	adds	r7, #48	; 0x30
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	e000ed04 	.word	0xe000ed04

08005ad4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b086      	sub	sp, #24
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d10d      	bne.n	8005b0e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d14d      	bne.n	8005b96 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	4618      	mov	r0, r3
 8005b00:	f000 ffe0 	bl	8006ac4 <xTaskPriorityDisinherit>
 8005b04:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	605a      	str	r2, [r3, #4]
 8005b0c:	e043      	b.n	8005b96 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d119      	bne.n	8005b48 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6898      	ldr	r0, [r3, #8]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	68b9      	ldr	r1, [r7, #8]
 8005b20:	f002 f820 	bl	8007b64 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	689a      	ldr	r2, [r3, #8]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2c:	441a      	add	r2, r3
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	689a      	ldr	r2, [r3, #8]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d32b      	bcc.n	8005b96 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	609a      	str	r2, [r3, #8]
 8005b46:	e026      	b.n	8005b96 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	68d8      	ldr	r0, [r3, #12]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b50:	461a      	mov	r2, r3
 8005b52:	68b9      	ldr	r1, [r7, #8]
 8005b54:	f002 f806 	bl	8007b64 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	68da      	ldr	r2, [r3, #12]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b60:	425b      	negs	r3, r3
 8005b62:	441a      	add	r2, r3
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	68da      	ldr	r2, [r3, #12]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d207      	bcs.n	8005b84 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	685a      	ldr	r2, [r3, #4]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7c:	425b      	negs	r3, r3
 8005b7e:	441a      	add	r2, r3
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d105      	bne.n	8005b96 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d002      	beq.n	8005b96 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	3b01      	subs	r3, #1
 8005b94:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	1c5a      	adds	r2, r3, #1
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005b9e:	697b      	ldr	r3, [r7, #20]
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3718      	adds	r7, #24
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d018      	beq.n	8005bec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	68da      	ldr	r2, [r3, #12]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc2:	441a      	add	r2, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	68da      	ldr	r2, [r3, #12]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d303      	bcc.n	8005bdc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	68d9      	ldr	r1, [r3, #12]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be4:	461a      	mov	r2, r3
 8005be6:	6838      	ldr	r0, [r7, #0]
 8005be8:	f001 ffbc 	bl	8007b64 <memcpy>
	}
}
 8005bec:	bf00      	nop
 8005bee:	3708      	adds	r7, #8
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005bfc:	f001 fc8a 	bl	8007514 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c06:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c08:	e011      	b.n	8005c2e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d012      	beq.n	8005c38 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	3324      	adds	r3, #36	; 0x24
 8005c16:	4618      	mov	r0, r3
 8005c18:	f000 fd12 	bl	8006640 <xTaskRemoveFromEventList>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d001      	beq.n	8005c26 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005c22:	f000 fe49 	bl	80068b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005c26:	7bfb      	ldrb	r3, [r7, #15]
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	dce9      	bgt.n	8005c0a <prvUnlockQueue+0x16>
 8005c36:	e000      	b.n	8005c3a <prvUnlockQueue+0x46>
					break;
 8005c38:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	22ff      	movs	r2, #255	; 0xff
 8005c3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005c42:	f001 fc97 	bl	8007574 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005c46:	f001 fc65 	bl	8007514 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c50:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c52:	e011      	b.n	8005c78 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d012      	beq.n	8005c82 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	3310      	adds	r3, #16
 8005c60:	4618      	mov	r0, r3
 8005c62:	f000 fced 	bl	8006640 <xTaskRemoveFromEventList>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d001      	beq.n	8005c70 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005c6c:	f000 fe24 	bl	80068b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005c70:	7bbb      	ldrb	r3, [r7, #14]
 8005c72:	3b01      	subs	r3, #1
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	dce9      	bgt.n	8005c54 <prvUnlockQueue+0x60>
 8005c80:	e000      	b.n	8005c84 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005c82:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	22ff      	movs	r2, #255	; 0xff
 8005c88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005c8c:	f001 fc72 	bl	8007574 <vPortExitCritical>
}
 8005c90:	bf00      	nop
 8005c92:	3710      	adds	r7, #16
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005ca0:	f001 fc38 	bl	8007514 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d102      	bne.n	8005cb2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005cac:	2301      	movs	r3, #1
 8005cae:	60fb      	str	r3, [r7, #12]
 8005cb0:	e001      	b.n	8005cb6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005cb6:	f001 fc5d 	bl	8007574 <vPortExitCritical>

	return xReturn;
 8005cba:	68fb      	ldr	r3, [r7, #12]
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3710      	adds	r7, #16
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005ccc:	f001 fc22 	bl	8007514 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d102      	bne.n	8005ce2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	60fb      	str	r3, [r7, #12]
 8005ce0:	e001      	b.n	8005ce6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005ce6:	f001 fc45 	bl	8007574 <vPortExitCritical>

	return xReturn;
 8005cea:	68fb      	ldr	r3, [r7, #12]
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3710      	adds	r7, #16
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b085      	sub	sp, #20
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005cfe:	2300      	movs	r3, #0
 8005d00:	60fb      	str	r3, [r7, #12]
 8005d02:	e014      	b.n	8005d2e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005d04:	4a0f      	ldr	r2, [pc, #60]	; (8005d44 <vQueueAddToRegistry+0x50>)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d10b      	bne.n	8005d28 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005d10:	490c      	ldr	r1, [pc, #48]	; (8005d44 <vQueueAddToRegistry+0x50>)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	683a      	ldr	r2, [r7, #0]
 8005d16:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005d1a:	4a0a      	ldr	r2, [pc, #40]	; (8005d44 <vQueueAddToRegistry+0x50>)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	00db      	lsls	r3, r3, #3
 8005d20:	4413      	add	r3, r2
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005d26:	e006      	b.n	8005d36 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	60fb      	str	r3, [r7, #12]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2b07      	cmp	r3, #7
 8005d32:	d9e7      	bls.n	8005d04 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005d34:	bf00      	nop
 8005d36:	bf00      	nop
 8005d38:	3714      	adds	r7, #20
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	2000092c 	.word	0x2000092c

08005d48 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b086      	sub	sp, #24
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005d58:	f001 fbdc 	bl	8007514 <vPortEnterCritical>
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d62:	b25b      	sxtb	r3, r3
 8005d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d68:	d103      	bne.n	8005d72 <vQueueWaitForMessageRestricted+0x2a>
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d78:	b25b      	sxtb	r3, r3
 8005d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d7e:	d103      	bne.n	8005d88 <vQueueWaitForMessageRestricted+0x40>
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d88:	f001 fbf4 	bl	8007574 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d106      	bne.n	8005da2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	3324      	adds	r3, #36	; 0x24
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	68b9      	ldr	r1, [r7, #8]
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f000 fc23 	bl	80065e8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005da2:	6978      	ldr	r0, [r7, #20]
 8005da4:	f7ff ff26 	bl	8005bf4 <prvUnlockQueue>
	}
 8005da8:	bf00      	nop
 8005daa:	3718      	adds	r7, #24
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b08e      	sub	sp, #56	; 0x38
 8005db4:	af04      	add	r7, sp, #16
 8005db6:	60f8      	str	r0, [r7, #12]
 8005db8:	60b9      	str	r1, [r7, #8]
 8005dba:	607a      	str	r2, [r7, #4]
 8005dbc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d10a      	bne.n	8005dda <xTaskCreateStatic+0x2a>
	__asm volatile
 8005dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc8:	f383 8811 	msr	BASEPRI, r3
 8005dcc:	f3bf 8f6f 	isb	sy
 8005dd0:	f3bf 8f4f 	dsb	sy
 8005dd4:	623b      	str	r3, [r7, #32]
}
 8005dd6:	bf00      	nop
 8005dd8:	e7fe      	b.n	8005dd8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d10a      	bne.n	8005df6 <xTaskCreateStatic+0x46>
	__asm volatile
 8005de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de4:	f383 8811 	msr	BASEPRI, r3
 8005de8:	f3bf 8f6f 	isb	sy
 8005dec:	f3bf 8f4f 	dsb	sy
 8005df0:	61fb      	str	r3, [r7, #28]
}
 8005df2:	bf00      	nop
 8005df4:	e7fe      	b.n	8005df4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005df6:	2358      	movs	r3, #88	; 0x58
 8005df8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	2b58      	cmp	r3, #88	; 0x58
 8005dfe:	d00a      	beq.n	8005e16 <xTaskCreateStatic+0x66>
	__asm volatile
 8005e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e04:	f383 8811 	msr	BASEPRI, r3
 8005e08:	f3bf 8f6f 	isb	sy
 8005e0c:	f3bf 8f4f 	dsb	sy
 8005e10:	61bb      	str	r3, [r7, #24]
}
 8005e12:	bf00      	nop
 8005e14:	e7fe      	b.n	8005e14 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d01e      	beq.n	8005e5a <xTaskCreateStatic+0xaa>
 8005e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d01b      	beq.n	8005e5a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e24:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e2a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2e:	2202      	movs	r2, #2
 8005e30:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005e34:	2300      	movs	r3, #0
 8005e36:	9303      	str	r3, [sp, #12]
 8005e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3a:	9302      	str	r3, [sp, #8]
 8005e3c:	f107 0314 	add.w	r3, r7, #20
 8005e40:	9301      	str	r3, [sp, #4]
 8005e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e44:	9300      	str	r3, [sp, #0]
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	68b9      	ldr	r1, [r7, #8]
 8005e4c:	68f8      	ldr	r0, [r7, #12]
 8005e4e:	f000 f850 	bl	8005ef2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e54:	f000 f8cc 	bl	8005ff0 <prvAddNewTaskToReadyList>
 8005e58:	e001      	b.n	8005e5e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005e5e:	697b      	ldr	r3, [r7, #20]
	}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3728      	adds	r7, #40	; 0x28
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b08c      	sub	sp, #48	; 0x30
 8005e6c:	af04      	add	r7, sp, #16
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	603b      	str	r3, [r7, #0]
 8005e74:	4613      	mov	r3, r2
 8005e76:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e78:	88fb      	ldrh	r3, [r7, #6]
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f001 fc6b 	bl	8007758 <pvPortMalloc>
 8005e82:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d00e      	beq.n	8005ea8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005e8a:	2058      	movs	r0, #88	; 0x58
 8005e8c:	f001 fc64 	bl	8007758 <pvPortMalloc>
 8005e90:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d003      	beq.n	8005ea0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	697a      	ldr	r2, [r7, #20]
 8005e9c:	631a      	str	r2, [r3, #48]	; 0x30
 8005e9e:	e005      	b.n	8005eac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005ea0:	6978      	ldr	r0, [r7, #20]
 8005ea2:	f001 fd1d 	bl	80078e0 <vPortFree>
 8005ea6:	e001      	b.n	8005eac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d017      	beq.n	8005ee2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005eba:	88fa      	ldrh	r2, [r7, #6]
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	9303      	str	r3, [sp, #12]
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	9302      	str	r3, [sp, #8]
 8005ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec6:	9301      	str	r3, [sp, #4]
 8005ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eca:	9300      	str	r3, [sp, #0]
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	68b9      	ldr	r1, [r7, #8]
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	f000 f80e 	bl	8005ef2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ed6:	69f8      	ldr	r0, [r7, #28]
 8005ed8:	f000 f88a 	bl	8005ff0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005edc:	2301      	movs	r3, #1
 8005ede:	61bb      	str	r3, [r7, #24]
 8005ee0:	e002      	b.n	8005ee8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ee6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005ee8:	69bb      	ldr	r3, [r7, #24]
	}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3720      	adds	r7, #32
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}

08005ef2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005ef2:	b580      	push	{r7, lr}
 8005ef4:	b088      	sub	sp, #32
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	60f8      	str	r0, [r7, #12]
 8005efa:	60b9      	str	r1, [r7, #8]
 8005efc:	607a      	str	r2, [r7, #4]
 8005efe:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	4413      	add	r3, r2
 8005f10:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	f023 0307 	bic.w	r3, r3, #7
 8005f18:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	f003 0307 	and.w	r3, r3, #7
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d00a      	beq.n	8005f3a <prvInitialiseNewTask+0x48>
	__asm volatile
 8005f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f28:	f383 8811 	msr	BASEPRI, r3
 8005f2c:	f3bf 8f6f 	isb	sy
 8005f30:	f3bf 8f4f 	dsb	sy
 8005f34:	617b      	str	r3, [r7, #20]
}
 8005f36:	bf00      	nop
 8005f38:	e7fe      	b.n	8005f38 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	61fb      	str	r3, [r7, #28]
 8005f3e:	e012      	b.n	8005f66 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005f40:	68ba      	ldr	r2, [r7, #8]
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	4413      	add	r3, r2
 8005f46:	7819      	ldrb	r1, [r3, #0]
 8005f48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	3334      	adds	r3, #52	; 0x34
 8005f50:	460a      	mov	r2, r1
 8005f52:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005f54:	68ba      	ldr	r2, [r7, #8]
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	4413      	add	r3, r2
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d006      	beq.n	8005f6e <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	3301      	adds	r3, #1
 8005f64:	61fb      	str	r3, [r7, #28]
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	2b11      	cmp	r3, #17
 8005f6a:	d9e9      	bls.n	8005f40 <prvInitialiseNewTask+0x4e>
 8005f6c:	e000      	b.n	8005f70 <prvInitialiseNewTask+0x7e>
		{
			break;
 8005f6e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f72:	2200      	movs	r2, #0
 8005f74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f7a:	2b06      	cmp	r3, #6
 8005f7c:	d901      	bls.n	8005f82 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005f7e:	2306      	movs	r3, #6
 8005f80:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f86:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f8c:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8005f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f90:	2200      	movs	r2, #0
 8005f92:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f96:	3304      	adds	r3, #4
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f7ff f992 	bl	80052c2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa0:	3318      	adds	r3, #24
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f7ff f98d 	bl	80052c2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005faa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fac:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb0:	f1c3 0207 	rsb	r2, r3, #7
 8005fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fbc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005fcc:	683a      	ldr	r2, [r7, #0]
 8005fce:	68f9      	ldr	r1, [r7, #12]
 8005fd0:	69b8      	ldr	r0, [r7, #24]
 8005fd2:	f001 f975 	bl	80072c0 <pxPortInitialiseStack>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fda:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d002      	beq.n	8005fe8 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fe6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005fe8:	bf00      	nop
 8005fea:	3720      	adds	r7, #32
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005ff8:	f001 fa8c 	bl	8007514 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005ffc:	4b2a      	ldr	r3, [pc, #168]	; (80060a8 <prvAddNewTaskToReadyList+0xb8>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	3301      	adds	r3, #1
 8006002:	4a29      	ldr	r2, [pc, #164]	; (80060a8 <prvAddNewTaskToReadyList+0xb8>)
 8006004:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006006:	4b29      	ldr	r3, [pc, #164]	; (80060ac <prvAddNewTaskToReadyList+0xbc>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d109      	bne.n	8006022 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800600e:	4a27      	ldr	r2, [pc, #156]	; (80060ac <prvAddNewTaskToReadyList+0xbc>)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006014:	4b24      	ldr	r3, [pc, #144]	; (80060a8 <prvAddNewTaskToReadyList+0xb8>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d110      	bne.n	800603e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800601c:	f000 fc70 	bl	8006900 <prvInitialiseTaskLists>
 8006020:	e00d      	b.n	800603e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006022:	4b23      	ldr	r3, [pc, #140]	; (80060b0 <prvAddNewTaskToReadyList+0xc0>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d109      	bne.n	800603e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800602a:	4b20      	ldr	r3, [pc, #128]	; (80060ac <prvAddNewTaskToReadyList+0xbc>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006034:	429a      	cmp	r2, r3
 8006036:	d802      	bhi.n	800603e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006038:	4a1c      	ldr	r2, [pc, #112]	; (80060ac <prvAddNewTaskToReadyList+0xbc>)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800603e:	4b1d      	ldr	r3, [pc, #116]	; (80060b4 <prvAddNewTaskToReadyList+0xc4>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	3301      	adds	r3, #1
 8006044:	4a1b      	ldr	r2, [pc, #108]	; (80060b4 <prvAddNewTaskToReadyList+0xc4>)
 8006046:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800604c:	2201      	movs	r2, #1
 800604e:	409a      	lsls	r2, r3
 8006050:	4b19      	ldr	r3, [pc, #100]	; (80060b8 <prvAddNewTaskToReadyList+0xc8>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4313      	orrs	r3, r2
 8006056:	4a18      	ldr	r2, [pc, #96]	; (80060b8 <prvAddNewTaskToReadyList+0xc8>)
 8006058:	6013      	str	r3, [r2, #0]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800605e:	4613      	mov	r3, r2
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	4413      	add	r3, r2
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	4a15      	ldr	r2, [pc, #84]	; (80060bc <prvAddNewTaskToReadyList+0xcc>)
 8006068:	441a      	add	r2, r3
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	3304      	adds	r3, #4
 800606e:	4619      	mov	r1, r3
 8006070:	4610      	mov	r0, r2
 8006072:	f7ff f933 	bl	80052dc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006076:	f001 fa7d 	bl	8007574 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800607a:	4b0d      	ldr	r3, [pc, #52]	; (80060b0 <prvAddNewTaskToReadyList+0xc0>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d00e      	beq.n	80060a0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006082:	4b0a      	ldr	r3, [pc, #40]	; (80060ac <prvAddNewTaskToReadyList+0xbc>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800608c:	429a      	cmp	r2, r3
 800608e:	d207      	bcs.n	80060a0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006090:	4b0b      	ldr	r3, [pc, #44]	; (80060c0 <prvAddNewTaskToReadyList+0xd0>)
 8006092:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006096:	601a      	str	r2, [r3, #0]
 8006098:	f3bf 8f4f 	dsb	sy
 800609c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060a0:	bf00      	nop
 80060a2:	3708      	adds	r7, #8
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	20000a6c 	.word	0x20000a6c
 80060ac:	2000096c 	.word	0x2000096c
 80060b0:	20000a78 	.word	0x20000a78
 80060b4:	20000a88 	.word	0x20000a88
 80060b8:	20000a74 	.word	0x20000a74
 80060bc:	20000970 	.word	0x20000970
 80060c0:	e000ed04 	.word	0xe000ed04

080060c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80060cc:	2300      	movs	r3, #0
 80060ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d017      	beq.n	8006106 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80060d6:	4b13      	ldr	r3, [pc, #76]	; (8006124 <vTaskDelay+0x60>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d00a      	beq.n	80060f4 <vTaskDelay+0x30>
	__asm volatile
 80060de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e2:	f383 8811 	msr	BASEPRI, r3
 80060e6:	f3bf 8f6f 	isb	sy
 80060ea:	f3bf 8f4f 	dsb	sy
 80060ee:	60bb      	str	r3, [r7, #8]
}
 80060f0:	bf00      	nop
 80060f2:	e7fe      	b.n	80060f2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80060f4:	f000 f880 	bl	80061f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80060f8:	2100      	movs	r1, #0
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 fd68 	bl	8006bd0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006100:	f000 f888 	bl	8006214 <xTaskResumeAll>
 8006104:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d107      	bne.n	800611c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800610c:	4b06      	ldr	r3, [pc, #24]	; (8006128 <vTaskDelay+0x64>)
 800610e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006112:	601a      	str	r2, [r3, #0]
 8006114:	f3bf 8f4f 	dsb	sy
 8006118:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800611c:	bf00      	nop
 800611e:	3710      	adds	r7, #16
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}
 8006124:	20000a94 	.word	0x20000a94
 8006128:	e000ed04 	.word	0xe000ed04

0800612c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b08a      	sub	sp, #40	; 0x28
 8006130:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006132:	2300      	movs	r3, #0
 8006134:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006136:	2300      	movs	r3, #0
 8006138:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800613a:	463a      	mov	r2, r7
 800613c:	1d39      	adds	r1, r7, #4
 800613e:	f107 0308 	add.w	r3, r7, #8
 8006142:	4618      	mov	r0, r3
 8006144:	f7fa f88a 	bl	800025c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006148:	6839      	ldr	r1, [r7, #0]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	68ba      	ldr	r2, [r7, #8]
 800614e:	9202      	str	r2, [sp, #8]
 8006150:	9301      	str	r3, [sp, #4]
 8006152:	2300      	movs	r3, #0
 8006154:	9300      	str	r3, [sp, #0]
 8006156:	2300      	movs	r3, #0
 8006158:	460a      	mov	r2, r1
 800615a:	4921      	ldr	r1, [pc, #132]	; (80061e0 <vTaskStartScheduler+0xb4>)
 800615c:	4821      	ldr	r0, [pc, #132]	; (80061e4 <vTaskStartScheduler+0xb8>)
 800615e:	f7ff fe27 	bl	8005db0 <xTaskCreateStatic>
 8006162:	4603      	mov	r3, r0
 8006164:	4a20      	ldr	r2, [pc, #128]	; (80061e8 <vTaskStartScheduler+0xbc>)
 8006166:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006168:	4b1f      	ldr	r3, [pc, #124]	; (80061e8 <vTaskStartScheduler+0xbc>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d002      	beq.n	8006176 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006170:	2301      	movs	r3, #1
 8006172:	617b      	str	r3, [r7, #20]
 8006174:	e001      	b.n	800617a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006176:	2300      	movs	r3, #0
 8006178:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	2b01      	cmp	r3, #1
 800617e:	d102      	bne.n	8006186 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006180:	f000 fd8c 	bl	8006c9c <xTimerCreateTimerTask>
 8006184:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	2b01      	cmp	r3, #1
 800618a:	d116      	bne.n	80061ba <vTaskStartScheduler+0x8e>
	__asm volatile
 800618c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006190:	f383 8811 	msr	BASEPRI, r3
 8006194:	f3bf 8f6f 	isb	sy
 8006198:	f3bf 8f4f 	dsb	sy
 800619c:	613b      	str	r3, [r7, #16]
}
 800619e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80061a0:	4b12      	ldr	r3, [pc, #72]	; (80061ec <vTaskStartScheduler+0xc0>)
 80061a2:	f04f 32ff 	mov.w	r2, #4294967295
 80061a6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80061a8:	4b11      	ldr	r3, [pc, #68]	; (80061f0 <vTaskStartScheduler+0xc4>)
 80061aa:	2201      	movs	r2, #1
 80061ac:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80061ae:	4b11      	ldr	r3, [pc, #68]	; (80061f4 <vTaskStartScheduler+0xc8>)
 80061b0:	2200      	movs	r2, #0
 80061b2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80061b4:	f001 f90c 	bl	80073d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80061b8:	e00e      	b.n	80061d8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c0:	d10a      	bne.n	80061d8 <vTaskStartScheduler+0xac>
	__asm volatile
 80061c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c6:	f383 8811 	msr	BASEPRI, r3
 80061ca:	f3bf 8f6f 	isb	sy
 80061ce:	f3bf 8f4f 	dsb	sy
 80061d2:	60fb      	str	r3, [r7, #12]
}
 80061d4:	bf00      	nop
 80061d6:	e7fe      	b.n	80061d6 <vTaskStartScheduler+0xaa>
}
 80061d8:	bf00      	nop
 80061da:	3718      	adds	r7, #24
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	08007cbc 	.word	0x08007cbc
 80061e4:	080068d1 	.word	0x080068d1
 80061e8:	20000a90 	.word	0x20000a90
 80061ec:	20000a8c 	.word	0x20000a8c
 80061f0:	20000a78 	.word	0x20000a78
 80061f4:	20000a70 	.word	0x20000a70

080061f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80061f8:	b480      	push	{r7}
 80061fa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80061fc:	4b04      	ldr	r3, [pc, #16]	; (8006210 <vTaskSuspendAll+0x18>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	3301      	adds	r3, #1
 8006202:	4a03      	ldr	r2, [pc, #12]	; (8006210 <vTaskSuspendAll+0x18>)
 8006204:	6013      	str	r3, [r2, #0]
}
 8006206:	bf00      	nop
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr
 8006210:	20000a94 	.word	0x20000a94

08006214 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800621a:	2300      	movs	r3, #0
 800621c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800621e:	2300      	movs	r3, #0
 8006220:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006222:	4b41      	ldr	r3, [pc, #260]	; (8006328 <xTaskResumeAll+0x114>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d10a      	bne.n	8006240 <xTaskResumeAll+0x2c>
	__asm volatile
 800622a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800622e:	f383 8811 	msr	BASEPRI, r3
 8006232:	f3bf 8f6f 	isb	sy
 8006236:	f3bf 8f4f 	dsb	sy
 800623a:	603b      	str	r3, [r7, #0]
}
 800623c:	bf00      	nop
 800623e:	e7fe      	b.n	800623e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006240:	f001 f968 	bl	8007514 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006244:	4b38      	ldr	r3, [pc, #224]	; (8006328 <xTaskResumeAll+0x114>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	3b01      	subs	r3, #1
 800624a:	4a37      	ldr	r2, [pc, #220]	; (8006328 <xTaskResumeAll+0x114>)
 800624c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800624e:	4b36      	ldr	r3, [pc, #216]	; (8006328 <xTaskResumeAll+0x114>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d161      	bne.n	800631a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006256:	4b35      	ldr	r3, [pc, #212]	; (800632c <xTaskResumeAll+0x118>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d05d      	beq.n	800631a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800625e:	e02e      	b.n	80062be <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006260:	4b33      	ldr	r3, [pc, #204]	; (8006330 <xTaskResumeAll+0x11c>)
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	3318      	adds	r3, #24
 800626c:	4618      	mov	r0, r3
 800626e:	f7ff f892 	bl	8005396 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	3304      	adds	r3, #4
 8006276:	4618      	mov	r0, r3
 8006278:	f7ff f88d 	bl	8005396 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006280:	2201      	movs	r2, #1
 8006282:	409a      	lsls	r2, r3
 8006284:	4b2b      	ldr	r3, [pc, #172]	; (8006334 <xTaskResumeAll+0x120>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4313      	orrs	r3, r2
 800628a:	4a2a      	ldr	r2, [pc, #168]	; (8006334 <xTaskResumeAll+0x120>)
 800628c:	6013      	str	r3, [r2, #0]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006292:	4613      	mov	r3, r2
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	4413      	add	r3, r2
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	4a27      	ldr	r2, [pc, #156]	; (8006338 <xTaskResumeAll+0x124>)
 800629c:	441a      	add	r2, r3
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	3304      	adds	r3, #4
 80062a2:	4619      	mov	r1, r3
 80062a4:	4610      	mov	r0, r2
 80062a6:	f7ff f819 	bl	80052dc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062ae:	4b23      	ldr	r3, [pc, #140]	; (800633c <xTaskResumeAll+0x128>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d302      	bcc.n	80062be <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80062b8:	4b21      	ldr	r3, [pc, #132]	; (8006340 <xTaskResumeAll+0x12c>)
 80062ba:	2201      	movs	r2, #1
 80062bc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80062be:	4b1c      	ldr	r3, [pc, #112]	; (8006330 <xTaskResumeAll+0x11c>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d1cc      	bne.n	8006260 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d001      	beq.n	80062d0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80062cc:	f000 fbb6 	bl	8006a3c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80062d0:	4b1c      	ldr	r3, [pc, #112]	; (8006344 <xTaskResumeAll+0x130>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d010      	beq.n	80062fe <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80062dc:	f000 f846 	bl	800636c <xTaskIncrementTick>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d002      	beq.n	80062ec <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80062e6:	4b16      	ldr	r3, [pc, #88]	; (8006340 <xTaskResumeAll+0x12c>)
 80062e8:	2201      	movs	r2, #1
 80062ea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	3b01      	subs	r3, #1
 80062f0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d1f1      	bne.n	80062dc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80062f8:	4b12      	ldr	r3, [pc, #72]	; (8006344 <xTaskResumeAll+0x130>)
 80062fa:	2200      	movs	r2, #0
 80062fc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80062fe:	4b10      	ldr	r3, [pc, #64]	; (8006340 <xTaskResumeAll+0x12c>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d009      	beq.n	800631a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006306:	2301      	movs	r3, #1
 8006308:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800630a:	4b0f      	ldr	r3, [pc, #60]	; (8006348 <xTaskResumeAll+0x134>)
 800630c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006310:	601a      	str	r2, [r3, #0]
 8006312:	f3bf 8f4f 	dsb	sy
 8006316:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800631a:	f001 f92b 	bl	8007574 <vPortExitCritical>

	return xAlreadyYielded;
 800631e:	68bb      	ldr	r3, [r7, #8]
}
 8006320:	4618      	mov	r0, r3
 8006322:	3710      	adds	r7, #16
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}
 8006328:	20000a94 	.word	0x20000a94
 800632c:	20000a6c 	.word	0x20000a6c
 8006330:	20000a2c 	.word	0x20000a2c
 8006334:	20000a74 	.word	0x20000a74
 8006338:	20000970 	.word	0x20000970
 800633c:	2000096c 	.word	0x2000096c
 8006340:	20000a80 	.word	0x20000a80
 8006344:	20000a7c 	.word	0x20000a7c
 8006348:	e000ed04 	.word	0xe000ed04

0800634c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006352:	4b05      	ldr	r3, [pc, #20]	; (8006368 <xTaskGetTickCount+0x1c>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006358:	687b      	ldr	r3, [r7, #4]
}
 800635a:	4618      	mov	r0, r3
 800635c:	370c      	adds	r7, #12
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop
 8006368:	20000a70 	.word	0x20000a70

0800636c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b086      	sub	sp, #24
 8006370:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006372:	2300      	movs	r3, #0
 8006374:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006376:	4b51      	ldr	r3, [pc, #324]	; (80064bc <xTaskIncrementTick+0x150>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2b00      	cmp	r3, #0
 800637c:	f040 808d 	bne.w	800649a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006380:	4b4f      	ldr	r3, [pc, #316]	; (80064c0 <xTaskIncrementTick+0x154>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	3301      	adds	r3, #1
 8006386:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006388:	4a4d      	ldr	r2, [pc, #308]	; (80064c0 <xTaskIncrementTick+0x154>)
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d120      	bne.n	80063d6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006394:	4b4b      	ldr	r3, [pc, #300]	; (80064c4 <xTaskIncrementTick+0x158>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00a      	beq.n	80063b4 <xTaskIncrementTick+0x48>
	__asm volatile
 800639e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a2:	f383 8811 	msr	BASEPRI, r3
 80063a6:	f3bf 8f6f 	isb	sy
 80063aa:	f3bf 8f4f 	dsb	sy
 80063ae:	603b      	str	r3, [r7, #0]
}
 80063b0:	bf00      	nop
 80063b2:	e7fe      	b.n	80063b2 <xTaskIncrementTick+0x46>
 80063b4:	4b43      	ldr	r3, [pc, #268]	; (80064c4 <xTaskIncrementTick+0x158>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	60fb      	str	r3, [r7, #12]
 80063ba:	4b43      	ldr	r3, [pc, #268]	; (80064c8 <xTaskIncrementTick+0x15c>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a41      	ldr	r2, [pc, #260]	; (80064c4 <xTaskIncrementTick+0x158>)
 80063c0:	6013      	str	r3, [r2, #0]
 80063c2:	4a41      	ldr	r2, [pc, #260]	; (80064c8 <xTaskIncrementTick+0x15c>)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6013      	str	r3, [r2, #0]
 80063c8:	4b40      	ldr	r3, [pc, #256]	; (80064cc <xTaskIncrementTick+0x160>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	3301      	adds	r3, #1
 80063ce:	4a3f      	ldr	r2, [pc, #252]	; (80064cc <xTaskIncrementTick+0x160>)
 80063d0:	6013      	str	r3, [r2, #0]
 80063d2:	f000 fb33 	bl	8006a3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80063d6:	4b3e      	ldr	r3, [pc, #248]	; (80064d0 <xTaskIncrementTick+0x164>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	693a      	ldr	r2, [r7, #16]
 80063dc:	429a      	cmp	r2, r3
 80063de:	d34d      	bcc.n	800647c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063e0:	4b38      	ldr	r3, [pc, #224]	; (80064c4 <xTaskIncrementTick+0x158>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d101      	bne.n	80063ee <xTaskIncrementTick+0x82>
 80063ea:	2301      	movs	r3, #1
 80063ec:	e000      	b.n	80063f0 <xTaskIncrementTick+0x84>
 80063ee:	2300      	movs	r3, #0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d004      	beq.n	80063fe <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063f4:	4b36      	ldr	r3, [pc, #216]	; (80064d0 <xTaskIncrementTick+0x164>)
 80063f6:	f04f 32ff 	mov.w	r2, #4294967295
 80063fa:	601a      	str	r2, [r3, #0]
					break;
 80063fc:	e03e      	b.n	800647c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80063fe:	4b31      	ldr	r3, [pc, #196]	; (80064c4 <xTaskIncrementTick+0x158>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800640e:	693a      	ldr	r2, [r7, #16]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	429a      	cmp	r2, r3
 8006414:	d203      	bcs.n	800641e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006416:	4a2e      	ldr	r2, [pc, #184]	; (80064d0 <xTaskIncrementTick+0x164>)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6013      	str	r3, [r2, #0]
						break;
 800641c:	e02e      	b.n	800647c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	3304      	adds	r3, #4
 8006422:	4618      	mov	r0, r3
 8006424:	f7fe ffb7 	bl	8005396 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800642c:	2b00      	cmp	r3, #0
 800642e:	d004      	beq.n	800643a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	3318      	adds	r3, #24
 8006434:	4618      	mov	r0, r3
 8006436:	f7fe ffae 	bl	8005396 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800643e:	2201      	movs	r2, #1
 8006440:	409a      	lsls	r2, r3
 8006442:	4b24      	ldr	r3, [pc, #144]	; (80064d4 <xTaskIncrementTick+0x168>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4313      	orrs	r3, r2
 8006448:	4a22      	ldr	r2, [pc, #136]	; (80064d4 <xTaskIncrementTick+0x168>)
 800644a:	6013      	str	r3, [r2, #0]
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006450:	4613      	mov	r3, r2
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	4413      	add	r3, r2
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	4a1f      	ldr	r2, [pc, #124]	; (80064d8 <xTaskIncrementTick+0x16c>)
 800645a:	441a      	add	r2, r3
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	3304      	adds	r3, #4
 8006460:	4619      	mov	r1, r3
 8006462:	4610      	mov	r0, r2
 8006464:	f7fe ff3a 	bl	80052dc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800646c:	4b1b      	ldr	r3, [pc, #108]	; (80064dc <xTaskIncrementTick+0x170>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006472:	429a      	cmp	r2, r3
 8006474:	d3b4      	bcc.n	80063e0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006476:	2301      	movs	r3, #1
 8006478:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800647a:	e7b1      	b.n	80063e0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800647c:	4b17      	ldr	r3, [pc, #92]	; (80064dc <xTaskIncrementTick+0x170>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006482:	4915      	ldr	r1, [pc, #84]	; (80064d8 <xTaskIncrementTick+0x16c>)
 8006484:	4613      	mov	r3, r2
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	4413      	add	r3, r2
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	440b      	add	r3, r1
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	2b01      	cmp	r3, #1
 8006492:	d907      	bls.n	80064a4 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8006494:	2301      	movs	r3, #1
 8006496:	617b      	str	r3, [r7, #20]
 8006498:	e004      	b.n	80064a4 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800649a:	4b11      	ldr	r3, [pc, #68]	; (80064e0 <xTaskIncrementTick+0x174>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	3301      	adds	r3, #1
 80064a0:	4a0f      	ldr	r2, [pc, #60]	; (80064e0 <xTaskIncrementTick+0x174>)
 80064a2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80064a4:	4b0f      	ldr	r3, [pc, #60]	; (80064e4 <xTaskIncrementTick+0x178>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d001      	beq.n	80064b0 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80064ac:	2301      	movs	r3, #1
 80064ae:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80064b0:	697b      	ldr	r3, [r7, #20]
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3718      	adds	r7, #24
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	bf00      	nop
 80064bc:	20000a94 	.word	0x20000a94
 80064c0:	20000a70 	.word	0x20000a70
 80064c4:	20000a24 	.word	0x20000a24
 80064c8:	20000a28 	.word	0x20000a28
 80064cc:	20000a84 	.word	0x20000a84
 80064d0:	20000a8c 	.word	0x20000a8c
 80064d4:	20000a74 	.word	0x20000a74
 80064d8:	20000970 	.word	0x20000970
 80064dc:	2000096c 	.word	0x2000096c
 80064e0:	20000a7c 	.word	0x20000a7c
 80064e4:	20000a80 	.word	0x20000a80

080064e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80064e8:	b480      	push	{r7}
 80064ea:	b087      	sub	sp, #28
 80064ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80064ee:	4b27      	ldr	r3, [pc, #156]	; (800658c <vTaskSwitchContext+0xa4>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d003      	beq.n	80064fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80064f6:	4b26      	ldr	r3, [pc, #152]	; (8006590 <vTaskSwitchContext+0xa8>)
 80064f8:	2201      	movs	r2, #1
 80064fa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80064fc:	e03f      	b.n	800657e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80064fe:	4b24      	ldr	r3, [pc, #144]	; (8006590 <vTaskSwitchContext+0xa8>)
 8006500:	2200      	movs	r2, #0
 8006502:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006504:	4b23      	ldr	r3, [pc, #140]	; (8006594 <vTaskSwitchContext+0xac>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	fab3 f383 	clz	r3, r3
 8006510:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006512:	7afb      	ldrb	r3, [r7, #11]
 8006514:	f1c3 031f 	rsb	r3, r3, #31
 8006518:	617b      	str	r3, [r7, #20]
 800651a:	491f      	ldr	r1, [pc, #124]	; (8006598 <vTaskSwitchContext+0xb0>)
 800651c:	697a      	ldr	r2, [r7, #20]
 800651e:	4613      	mov	r3, r2
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	4413      	add	r3, r2
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	440b      	add	r3, r1
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d10a      	bne.n	8006544 <vTaskSwitchContext+0x5c>
	__asm volatile
 800652e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006532:	f383 8811 	msr	BASEPRI, r3
 8006536:	f3bf 8f6f 	isb	sy
 800653a:	f3bf 8f4f 	dsb	sy
 800653e:	607b      	str	r3, [r7, #4]
}
 8006540:	bf00      	nop
 8006542:	e7fe      	b.n	8006542 <vTaskSwitchContext+0x5a>
 8006544:	697a      	ldr	r2, [r7, #20]
 8006546:	4613      	mov	r3, r2
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	4413      	add	r3, r2
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	4a12      	ldr	r2, [pc, #72]	; (8006598 <vTaskSwitchContext+0xb0>)
 8006550:	4413      	add	r3, r2
 8006552:	613b      	str	r3, [r7, #16]
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	685a      	ldr	r2, [r3, #4]
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	605a      	str	r2, [r3, #4]
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	685a      	ldr	r2, [r3, #4]
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	3308      	adds	r3, #8
 8006566:	429a      	cmp	r2, r3
 8006568:	d104      	bne.n	8006574 <vTaskSwitchContext+0x8c>
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	685a      	ldr	r2, [r3, #4]
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	605a      	str	r2, [r3, #4]
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	4a08      	ldr	r2, [pc, #32]	; (800659c <vTaskSwitchContext+0xb4>)
 800657c:	6013      	str	r3, [r2, #0]
}
 800657e:	bf00      	nop
 8006580:	371c      	adds	r7, #28
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr
 800658a:	bf00      	nop
 800658c:	20000a94 	.word	0x20000a94
 8006590:	20000a80 	.word	0x20000a80
 8006594:	20000a74 	.word	0x20000a74
 8006598:	20000970 	.word	0x20000970
 800659c:	2000096c 	.word	0x2000096c

080065a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d10a      	bne.n	80065c6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80065b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b4:	f383 8811 	msr	BASEPRI, r3
 80065b8:	f3bf 8f6f 	isb	sy
 80065bc:	f3bf 8f4f 	dsb	sy
 80065c0:	60fb      	str	r3, [r7, #12]
}
 80065c2:	bf00      	nop
 80065c4:	e7fe      	b.n	80065c4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80065c6:	4b07      	ldr	r3, [pc, #28]	; (80065e4 <vTaskPlaceOnEventList+0x44>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	3318      	adds	r3, #24
 80065cc:	4619      	mov	r1, r3
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f7fe fea8 	bl	8005324 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80065d4:	2101      	movs	r1, #1
 80065d6:	6838      	ldr	r0, [r7, #0]
 80065d8:	f000 fafa 	bl	8006bd0 <prvAddCurrentTaskToDelayedList>
}
 80065dc:	bf00      	nop
 80065de:	3710      	adds	r7, #16
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	2000096c 	.word	0x2000096c

080065e8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b086      	sub	sp, #24
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	60b9      	str	r1, [r7, #8]
 80065f2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d10a      	bne.n	8006610 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80065fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065fe:	f383 8811 	msr	BASEPRI, r3
 8006602:	f3bf 8f6f 	isb	sy
 8006606:	f3bf 8f4f 	dsb	sy
 800660a:	617b      	str	r3, [r7, #20]
}
 800660c:	bf00      	nop
 800660e:	e7fe      	b.n	800660e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006610:	4b0a      	ldr	r3, [pc, #40]	; (800663c <vTaskPlaceOnEventListRestricted+0x54>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	3318      	adds	r3, #24
 8006616:	4619      	mov	r1, r3
 8006618:	68f8      	ldr	r0, [r7, #12]
 800661a:	f7fe fe5f 	bl	80052dc <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d002      	beq.n	800662a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006624:	f04f 33ff 	mov.w	r3, #4294967295
 8006628:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800662a:	6879      	ldr	r1, [r7, #4]
 800662c:	68b8      	ldr	r0, [r7, #8]
 800662e:	f000 facf 	bl	8006bd0 <prvAddCurrentTaskToDelayedList>
	}
 8006632:	bf00      	nop
 8006634:	3718      	adds	r7, #24
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop
 800663c:	2000096c 	.word	0x2000096c

08006640 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b086      	sub	sp, #24
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d10a      	bne.n	800666c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800665a:	f383 8811 	msr	BASEPRI, r3
 800665e:	f3bf 8f6f 	isb	sy
 8006662:	f3bf 8f4f 	dsb	sy
 8006666:	60fb      	str	r3, [r7, #12]
}
 8006668:	bf00      	nop
 800666a:	e7fe      	b.n	800666a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	3318      	adds	r3, #24
 8006670:	4618      	mov	r0, r3
 8006672:	f7fe fe90 	bl	8005396 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006676:	4b1d      	ldr	r3, [pc, #116]	; (80066ec <xTaskRemoveFromEventList+0xac>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d11c      	bne.n	80066b8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	3304      	adds	r3, #4
 8006682:	4618      	mov	r0, r3
 8006684:	f7fe fe87 	bl	8005396 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800668c:	2201      	movs	r2, #1
 800668e:	409a      	lsls	r2, r3
 8006690:	4b17      	ldr	r3, [pc, #92]	; (80066f0 <xTaskRemoveFromEventList+0xb0>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4313      	orrs	r3, r2
 8006696:	4a16      	ldr	r2, [pc, #88]	; (80066f0 <xTaskRemoveFromEventList+0xb0>)
 8006698:	6013      	str	r3, [r2, #0]
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800669e:	4613      	mov	r3, r2
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	4413      	add	r3, r2
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	4a13      	ldr	r2, [pc, #76]	; (80066f4 <xTaskRemoveFromEventList+0xb4>)
 80066a8:	441a      	add	r2, r3
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	3304      	adds	r3, #4
 80066ae:	4619      	mov	r1, r3
 80066b0:	4610      	mov	r0, r2
 80066b2:	f7fe fe13 	bl	80052dc <vListInsertEnd>
 80066b6:	e005      	b.n	80066c4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	3318      	adds	r3, #24
 80066bc:	4619      	mov	r1, r3
 80066be:	480e      	ldr	r0, [pc, #56]	; (80066f8 <xTaskRemoveFromEventList+0xb8>)
 80066c0:	f7fe fe0c 	bl	80052dc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066c8:	4b0c      	ldr	r3, [pc, #48]	; (80066fc <xTaskRemoveFromEventList+0xbc>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d905      	bls.n	80066de <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80066d2:	2301      	movs	r3, #1
 80066d4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80066d6:	4b0a      	ldr	r3, [pc, #40]	; (8006700 <xTaskRemoveFromEventList+0xc0>)
 80066d8:	2201      	movs	r2, #1
 80066da:	601a      	str	r2, [r3, #0]
 80066dc:	e001      	b.n	80066e2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80066de:	2300      	movs	r3, #0
 80066e0:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80066e2:	697b      	ldr	r3, [r7, #20]
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3718      	adds	r7, #24
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	20000a94 	.word	0x20000a94
 80066f0:	20000a74 	.word	0x20000a74
 80066f4:	20000970 	.word	0x20000970
 80066f8:	20000a2c 	.word	0x20000a2c
 80066fc:	2000096c 	.word	0x2000096c
 8006700:	20000a80 	.word	0x20000a80

08006704 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b086      	sub	sp, #24
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800670e:	4b29      	ldr	r3, [pc, #164]	; (80067b4 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d10a      	bne.n	800672c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8006716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800671a:	f383 8811 	msr	BASEPRI, r3
 800671e:	f3bf 8f6f 	isb	sy
 8006722:	f3bf 8f4f 	dsb	sy
 8006726:	613b      	str	r3, [r7, #16]
}
 8006728:	bf00      	nop
 800672a:	e7fe      	b.n	800672a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d10a      	bne.n	8006758 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8006742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006746:	f383 8811 	msr	BASEPRI, r3
 800674a:	f3bf 8f6f 	isb	sy
 800674e:	f3bf 8f4f 	dsb	sy
 8006752:	60fb      	str	r3, [r7, #12]
}
 8006754:	bf00      	nop
 8006756:	e7fe      	b.n	8006756 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f7fe fe1c 	bl	8005396 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	3304      	adds	r3, #4
 8006762:	4618      	mov	r0, r3
 8006764:	f7fe fe17 	bl	8005396 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676c:	2201      	movs	r2, #1
 800676e:	409a      	lsls	r2, r3
 8006770:	4b11      	ldr	r3, [pc, #68]	; (80067b8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4313      	orrs	r3, r2
 8006776:	4a10      	ldr	r2, [pc, #64]	; (80067b8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006778:	6013      	str	r3, [r2, #0]
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800677e:	4613      	mov	r3, r2
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	4413      	add	r3, r2
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	4a0d      	ldr	r2, [pc, #52]	; (80067bc <vTaskRemoveFromUnorderedEventList+0xb8>)
 8006788:	441a      	add	r2, r3
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	3304      	adds	r3, #4
 800678e:	4619      	mov	r1, r3
 8006790:	4610      	mov	r0, r2
 8006792:	f7fe fda3 	bl	80052dc <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800679a:	4b09      	ldr	r3, [pc, #36]	; (80067c0 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d902      	bls.n	80067aa <vTaskRemoveFromUnorderedEventList+0xa6>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80067a4:	4b07      	ldr	r3, [pc, #28]	; (80067c4 <vTaskRemoveFromUnorderedEventList+0xc0>)
 80067a6:	2201      	movs	r2, #1
 80067a8:	601a      	str	r2, [r3, #0]
	}
}
 80067aa:	bf00      	nop
 80067ac:	3718      	adds	r7, #24
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	20000a94 	.word	0x20000a94
 80067b8:	20000a74 	.word	0x20000a74
 80067bc:	20000970 	.word	0x20000970
 80067c0:	2000096c 	.word	0x2000096c
 80067c4:	20000a80 	.word	0x20000a80

080067c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80067d0:	4b06      	ldr	r3, [pc, #24]	; (80067ec <vTaskInternalSetTimeOutState+0x24>)
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80067d8:	4b05      	ldr	r3, [pc, #20]	; (80067f0 <vTaskInternalSetTimeOutState+0x28>)
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	605a      	str	r2, [r3, #4]
}
 80067e0:	bf00      	nop
 80067e2:	370c      	adds	r7, #12
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr
 80067ec:	20000a84 	.word	0x20000a84
 80067f0:	20000a70 	.word	0x20000a70

080067f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b088      	sub	sp, #32
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d10a      	bne.n	800681a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006808:	f383 8811 	msr	BASEPRI, r3
 800680c:	f3bf 8f6f 	isb	sy
 8006810:	f3bf 8f4f 	dsb	sy
 8006814:	613b      	str	r3, [r7, #16]
}
 8006816:	bf00      	nop
 8006818:	e7fe      	b.n	8006818 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d10a      	bne.n	8006836 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006824:	f383 8811 	msr	BASEPRI, r3
 8006828:	f3bf 8f6f 	isb	sy
 800682c:	f3bf 8f4f 	dsb	sy
 8006830:	60fb      	str	r3, [r7, #12]
}
 8006832:	bf00      	nop
 8006834:	e7fe      	b.n	8006834 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006836:	f000 fe6d 	bl	8007514 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800683a:	4b1d      	ldr	r3, [pc, #116]	; (80068b0 <xTaskCheckForTimeOut+0xbc>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	69ba      	ldr	r2, [r7, #24]
 8006846:	1ad3      	subs	r3, r2, r3
 8006848:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006852:	d102      	bne.n	800685a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006854:	2300      	movs	r3, #0
 8006856:	61fb      	str	r3, [r7, #28]
 8006858:	e023      	b.n	80068a2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	4b15      	ldr	r3, [pc, #84]	; (80068b4 <xTaskCheckForTimeOut+0xc0>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	429a      	cmp	r2, r3
 8006864:	d007      	beq.n	8006876 <xTaskCheckForTimeOut+0x82>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	69ba      	ldr	r2, [r7, #24]
 800686c:	429a      	cmp	r2, r3
 800686e:	d302      	bcc.n	8006876 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006870:	2301      	movs	r3, #1
 8006872:	61fb      	str	r3, [r7, #28]
 8006874:	e015      	b.n	80068a2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	697a      	ldr	r2, [r7, #20]
 800687c:	429a      	cmp	r2, r3
 800687e:	d20b      	bcs.n	8006898 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	1ad2      	subs	r2, r2, r3
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f7ff ff9b 	bl	80067c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006892:	2300      	movs	r3, #0
 8006894:	61fb      	str	r3, [r7, #28]
 8006896:	e004      	b.n	80068a2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	2200      	movs	r2, #0
 800689c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800689e:	2301      	movs	r3, #1
 80068a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80068a2:	f000 fe67 	bl	8007574 <vPortExitCritical>

	return xReturn;
 80068a6:	69fb      	ldr	r3, [r7, #28]
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3720      	adds	r7, #32
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	20000a70 	.word	0x20000a70
 80068b4:	20000a84 	.word	0x20000a84

080068b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80068b8:	b480      	push	{r7}
 80068ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80068bc:	4b03      	ldr	r3, [pc, #12]	; (80068cc <vTaskMissedYield+0x14>)
 80068be:	2201      	movs	r2, #1
 80068c0:	601a      	str	r2, [r3, #0]
}
 80068c2:	bf00      	nop
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr
 80068cc:	20000a80 	.word	0x20000a80

080068d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80068d8:	f000 f852 	bl	8006980 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80068dc:	4b06      	ldr	r3, [pc, #24]	; (80068f8 <prvIdleTask+0x28>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d9f9      	bls.n	80068d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80068e4:	4b05      	ldr	r3, [pc, #20]	; (80068fc <prvIdleTask+0x2c>)
 80068e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068ea:	601a      	str	r2, [r3, #0]
 80068ec:	f3bf 8f4f 	dsb	sy
 80068f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80068f4:	e7f0      	b.n	80068d8 <prvIdleTask+0x8>
 80068f6:	bf00      	nop
 80068f8:	20000970 	.word	0x20000970
 80068fc:	e000ed04 	.word	0xe000ed04

08006900 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b082      	sub	sp, #8
 8006904:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006906:	2300      	movs	r3, #0
 8006908:	607b      	str	r3, [r7, #4]
 800690a:	e00c      	b.n	8006926 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	4613      	mov	r3, r2
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	4413      	add	r3, r2
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	4a12      	ldr	r2, [pc, #72]	; (8006960 <prvInitialiseTaskLists+0x60>)
 8006918:	4413      	add	r3, r2
 800691a:	4618      	mov	r0, r3
 800691c:	f7fe fcb1 	bl	8005282 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	3301      	adds	r3, #1
 8006924:	607b      	str	r3, [r7, #4]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2b06      	cmp	r3, #6
 800692a:	d9ef      	bls.n	800690c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800692c:	480d      	ldr	r0, [pc, #52]	; (8006964 <prvInitialiseTaskLists+0x64>)
 800692e:	f7fe fca8 	bl	8005282 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006932:	480d      	ldr	r0, [pc, #52]	; (8006968 <prvInitialiseTaskLists+0x68>)
 8006934:	f7fe fca5 	bl	8005282 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006938:	480c      	ldr	r0, [pc, #48]	; (800696c <prvInitialiseTaskLists+0x6c>)
 800693a:	f7fe fca2 	bl	8005282 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800693e:	480c      	ldr	r0, [pc, #48]	; (8006970 <prvInitialiseTaskLists+0x70>)
 8006940:	f7fe fc9f 	bl	8005282 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006944:	480b      	ldr	r0, [pc, #44]	; (8006974 <prvInitialiseTaskLists+0x74>)
 8006946:	f7fe fc9c 	bl	8005282 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800694a:	4b0b      	ldr	r3, [pc, #44]	; (8006978 <prvInitialiseTaskLists+0x78>)
 800694c:	4a05      	ldr	r2, [pc, #20]	; (8006964 <prvInitialiseTaskLists+0x64>)
 800694e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006950:	4b0a      	ldr	r3, [pc, #40]	; (800697c <prvInitialiseTaskLists+0x7c>)
 8006952:	4a05      	ldr	r2, [pc, #20]	; (8006968 <prvInitialiseTaskLists+0x68>)
 8006954:	601a      	str	r2, [r3, #0]
}
 8006956:	bf00      	nop
 8006958:	3708      	adds	r7, #8
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	20000970 	.word	0x20000970
 8006964:	200009fc 	.word	0x200009fc
 8006968:	20000a10 	.word	0x20000a10
 800696c:	20000a2c 	.word	0x20000a2c
 8006970:	20000a40 	.word	0x20000a40
 8006974:	20000a58 	.word	0x20000a58
 8006978:	20000a24 	.word	0x20000a24
 800697c:	20000a28 	.word	0x20000a28

08006980 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b082      	sub	sp, #8
 8006984:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006986:	e019      	b.n	80069bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006988:	f000 fdc4 	bl	8007514 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800698c:	4b10      	ldr	r3, [pc, #64]	; (80069d0 <prvCheckTasksWaitingTermination+0x50>)
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	3304      	adds	r3, #4
 8006998:	4618      	mov	r0, r3
 800699a:	f7fe fcfc 	bl	8005396 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800699e:	4b0d      	ldr	r3, [pc, #52]	; (80069d4 <prvCheckTasksWaitingTermination+0x54>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	3b01      	subs	r3, #1
 80069a4:	4a0b      	ldr	r2, [pc, #44]	; (80069d4 <prvCheckTasksWaitingTermination+0x54>)
 80069a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80069a8:	4b0b      	ldr	r3, [pc, #44]	; (80069d8 <prvCheckTasksWaitingTermination+0x58>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	3b01      	subs	r3, #1
 80069ae:	4a0a      	ldr	r2, [pc, #40]	; (80069d8 <prvCheckTasksWaitingTermination+0x58>)
 80069b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80069b2:	f000 fddf 	bl	8007574 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 f810 	bl	80069dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80069bc:	4b06      	ldr	r3, [pc, #24]	; (80069d8 <prvCheckTasksWaitingTermination+0x58>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d1e1      	bne.n	8006988 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80069c4:	bf00      	nop
 80069c6:	bf00      	nop
 80069c8:	3708      	adds	r7, #8
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
 80069ce:	bf00      	nop
 80069d0:	20000a40 	.word	0x20000a40
 80069d4:	20000a6c 	.word	0x20000a6c
 80069d8:	20000a54 	.word	0x20000a54

080069dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d108      	bne.n	8006a00 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069f2:	4618      	mov	r0, r3
 80069f4:	f000 ff74 	bl	80078e0 <vPortFree>
				vPortFree( pxTCB );
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 ff71 	bl	80078e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80069fe:	e018      	b.n	8006a32 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d103      	bne.n	8006a12 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 ff68 	bl	80078e0 <vPortFree>
	}
 8006a10:	e00f      	b.n	8006a32 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8006a18:	2b02      	cmp	r3, #2
 8006a1a:	d00a      	beq.n	8006a32 <prvDeleteTCB+0x56>
	__asm volatile
 8006a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a20:	f383 8811 	msr	BASEPRI, r3
 8006a24:	f3bf 8f6f 	isb	sy
 8006a28:	f3bf 8f4f 	dsb	sy
 8006a2c:	60fb      	str	r3, [r7, #12]
}
 8006a2e:	bf00      	nop
 8006a30:	e7fe      	b.n	8006a30 <prvDeleteTCB+0x54>
	}
 8006a32:	bf00      	nop
 8006a34:	3710      	adds	r7, #16
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
	...

08006a3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a42:	4b0f      	ldr	r3, [pc, #60]	; (8006a80 <prvResetNextTaskUnblockTime+0x44>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d101      	bne.n	8006a50 <prvResetNextTaskUnblockTime+0x14>
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e000      	b.n	8006a52 <prvResetNextTaskUnblockTime+0x16>
 8006a50:	2300      	movs	r3, #0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d004      	beq.n	8006a60 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006a56:	4b0b      	ldr	r3, [pc, #44]	; (8006a84 <prvResetNextTaskUnblockTime+0x48>)
 8006a58:	f04f 32ff 	mov.w	r2, #4294967295
 8006a5c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006a5e:	e008      	b.n	8006a72 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006a60:	4b07      	ldr	r3, [pc, #28]	; (8006a80 <prvResetNextTaskUnblockTime+0x44>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	4a05      	ldr	r2, [pc, #20]	; (8006a84 <prvResetNextTaskUnblockTime+0x48>)
 8006a70:	6013      	str	r3, [r2, #0]
}
 8006a72:	bf00      	nop
 8006a74:	370c      	adds	r7, #12
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr
 8006a7e:	bf00      	nop
 8006a80:	20000a24 	.word	0x20000a24
 8006a84:	20000a8c 	.word	0x20000a8c

08006a88 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006a88:	b480      	push	{r7}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006a8e:	4b0b      	ldr	r3, [pc, #44]	; (8006abc <xTaskGetSchedulerState+0x34>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d102      	bne.n	8006a9c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006a96:	2301      	movs	r3, #1
 8006a98:	607b      	str	r3, [r7, #4]
 8006a9a:	e008      	b.n	8006aae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a9c:	4b08      	ldr	r3, [pc, #32]	; (8006ac0 <xTaskGetSchedulerState+0x38>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d102      	bne.n	8006aaa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006aa4:	2302      	movs	r3, #2
 8006aa6:	607b      	str	r3, [r7, #4]
 8006aa8:	e001      	b.n	8006aae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006aae:	687b      	ldr	r3, [r7, #4]
	}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr
 8006abc:	20000a78 	.word	0x20000a78
 8006ac0:	20000a94 	.word	0x20000a94

08006ac4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b086      	sub	sp, #24
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d06e      	beq.n	8006bb8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006ada:	4b3a      	ldr	r3, [pc, #232]	; (8006bc4 <xTaskPriorityDisinherit+0x100>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	693a      	ldr	r2, [r7, #16]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d00a      	beq.n	8006afa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae8:	f383 8811 	msr	BASEPRI, r3
 8006aec:	f3bf 8f6f 	isb	sy
 8006af0:	f3bf 8f4f 	dsb	sy
 8006af4:	60fb      	str	r3, [r7, #12]
}
 8006af6:	bf00      	nop
 8006af8:	e7fe      	b.n	8006af8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d10a      	bne.n	8006b18 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b06:	f383 8811 	msr	BASEPRI, r3
 8006b0a:	f3bf 8f6f 	isb	sy
 8006b0e:	f3bf 8f4f 	dsb	sy
 8006b12:	60bb      	str	r3, [r7, #8]
}
 8006b14:	bf00      	nop
 8006b16:	e7fe      	b.n	8006b16 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b1c:	1e5a      	subs	r2, r3, #1
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d044      	beq.n	8006bb8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d140      	bne.n	8006bb8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	3304      	adds	r3, #4
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f7fe fc2b 	bl	8005396 <uxListRemove>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d115      	bne.n	8006b72 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b4a:	491f      	ldr	r1, [pc, #124]	; (8006bc8 <xTaskPriorityDisinherit+0x104>)
 8006b4c:	4613      	mov	r3, r2
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	4413      	add	r3, r2
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	440b      	add	r3, r1
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d10a      	bne.n	8006b72 <xTaskPriorityDisinherit+0xae>
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b60:	2201      	movs	r2, #1
 8006b62:	fa02 f303 	lsl.w	r3, r2, r3
 8006b66:	43da      	mvns	r2, r3
 8006b68:	4b18      	ldr	r3, [pc, #96]	; (8006bcc <xTaskPriorityDisinherit+0x108>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4013      	ands	r3, r2
 8006b6e:	4a17      	ldr	r2, [pc, #92]	; (8006bcc <xTaskPriorityDisinherit+0x108>)
 8006b70:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b7e:	f1c3 0207 	rsb	r2, r3, #7
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	409a      	lsls	r2, r3
 8006b8e:	4b0f      	ldr	r3, [pc, #60]	; (8006bcc <xTaskPriorityDisinherit+0x108>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4313      	orrs	r3, r2
 8006b94:	4a0d      	ldr	r2, [pc, #52]	; (8006bcc <xTaskPriorityDisinherit+0x108>)
 8006b96:	6013      	str	r3, [r2, #0]
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b9c:	4613      	mov	r3, r2
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	4413      	add	r3, r2
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	4a08      	ldr	r2, [pc, #32]	; (8006bc8 <xTaskPriorityDisinherit+0x104>)
 8006ba6:	441a      	add	r2, r3
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	3304      	adds	r3, #4
 8006bac:	4619      	mov	r1, r3
 8006bae:	4610      	mov	r0, r2
 8006bb0:	f7fe fb94 	bl	80052dc <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006bb8:	697b      	ldr	r3, [r7, #20]
	}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3718      	adds	r7, #24
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
 8006bc2:	bf00      	nop
 8006bc4:	2000096c 	.word	0x2000096c
 8006bc8:	20000970 	.word	0x20000970
 8006bcc:	20000a74 	.word	0x20000a74

08006bd0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b084      	sub	sp, #16
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006bda:	4b29      	ldr	r3, [pc, #164]	; (8006c80 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006be0:	4b28      	ldr	r3, [pc, #160]	; (8006c84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	3304      	adds	r3, #4
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7fe fbd5 	bl	8005396 <uxListRemove>
 8006bec:	4603      	mov	r3, r0
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d10b      	bne.n	8006c0a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006bf2:	4b24      	ldr	r3, [pc, #144]	; (8006c84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8006bfe:	43da      	mvns	r2, r3
 8006c00:	4b21      	ldr	r3, [pc, #132]	; (8006c88 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4013      	ands	r3, r2
 8006c06:	4a20      	ldr	r2, [pc, #128]	; (8006c88 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006c08:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c10:	d10a      	bne.n	8006c28 <prvAddCurrentTaskToDelayedList+0x58>
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d007      	beq.n	8006c28 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c18:	4b1a      	ldr	r3, [pc, #104]	; (8006c84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	3304      	adds	r3, #4
 8006c1e:	4619      	mov	r1, r3
 8006c20:	481a      	ldr	r0, [pc, #104]	; (8006c8c <prvAddCurrentTaskToDelayedList+0xbc>)
 8006c22:	f7fe fb5b 	bl	80052dc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006c26:	e026      	b.n	8006c76 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006c28:	68fa      	ldr	r2, [r7, #12]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4413      	add	r3, r2
 8006c2e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006c30:	4b14      	ldr	r3, [pc, #80]	; (8006c84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	68ba      	ldr	r2, [r7, #8]
 8006c36:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006c38:	68ba      	ldr	r2, [r7, #8]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d209      	bcs.n	8006c54 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c40:	4b13      	ldr	r3, [pc, #76]	; (8006c90 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	4b0f      	ldr	r3, [pc, #60]	; (8006c84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	3304      	adds	r3, #4
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	4610      	mov	r0, r2
 8006c4e:	f7fe fb69 	bl	8005324 <vListInsert>
}
 8006c52:	e010      	b.n	8006c76 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c54:	4b0f      	ldr	r3, [pc, #60]	; (8006c94 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	4b0a      	ldr	r3, [pc, #40]	; (8006c84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	3304      	adds	r3, #4
 8006c5e:	4619      	mov	r1, r3
 8006c60:	4610      	mov	r0, r2
 8006c62:	f7fe fb5f 	bl	8005324 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006c66:	4b0c      	ldr	r3, [pc, #48]	; (8006c98 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	68ba      	ldr	r2, [r7, #8]
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d202      	bcs.n	8006c76 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006c70:	4a09      	ldr	r2, [pc, #36]	; (8006c98 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	6013      	str	r3, [r2, #0]
}
 8006c76:	bf00      	nop
 8006c78:	3710      	adds	r7, #16
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	20000a70 	.word	0x20000a70
 8006c84:	2000096c 	.word	0x2000096c
 8006c88:	20000a74 	.word	0x20000a74
 8006c8c:	20000a58 	.word	0x20000a58
 8006c90:	20000a28 	.word	0x20000a28
 8006c94:	20000a24 	.word	0x20000a24
 8006c98:	20000a8c 	.word	0x20000a8c

08006c9c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b08a      	sub	sp, #40	; 0x28
 8006ca0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006ca6:	f000 facb 	bl	8007240 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006caa:	4b1c      	ldr	r3, [pc, #112]	; (8006d1c <xTimerCreateTimerTask+0x80>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d021      	beq.n	8006cf6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006cba:	1d3a      	adds	r2, r7, #4
 8006cbc:	f107 0108 	add.w	r1, r7, #8
 8006cc0:	f107 030c 	add.w	r3, r7, #12
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f7f9 fae3 	bl	8000290 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006cca:	6879      	ldr	r1, [r7, #4]
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	68fa      	ldr	r2, [r7, #12]
 8006cd0:	9202      	str	r2, [sp, #8]
 8006cd2:	9301      	str	r3, [sp, #4]
 8006cd4:	2302      	movs	r3, #2
 8006cd6:	9300      	str	r3, [sp, #0]
 8006cd8:	2300      	movs	r3, #0
 8006cda:	460a      	mov	r2, r1
 8006cdc:	4910      	ldr	r1, [pc, #64]	; (8006d20 <xTimerCreateTimerTask+0x84>)
 8006cde:	4811      	ldr	r0, [pc, #68]	; (8006d24 <xTimerCreateTimerTask+0x88>)
 8006ce0:	f7ff f866 	bl	8005db0 <xTaskCreateStatic>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	4a10      	ldr	r2, [pc, #64]	; (8006d28 <xTimerCreateTimerTask+0x8c>)
 8006ce8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006cea:	4b0f      	ldr	r3, [pc, #60]	; (8006d28 <xTimerCreateTimerTask+0x8c>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d001      	beq.n	8006cf6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d10a      	bne.n	8006d12 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d00:	f383 8811 	msr	BASEPRI, r3
 8006d04:	f3bf 8f6f 	isb	sy
 8006d08:	f3bf 8f4f 	dsb	sy
 8006d0c:	613b      	str	r3, [r7, #16]
}
 8006d0e:	bf00      	nop
 8006d10:	e7fe      	b.n	8006d10 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006d12:	697b      	ldr	r3, [r7, #20]
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3718      	adds	r7, #24
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}
 8006d1c:	20000ac8 	.word	0x20000ac8
 8006d20:	08007cc4 	.word	0x08007cc4
 8006d24:	08006e49 	.word	0x08006e49
 8006d28:	20000acc 	.word	0x20000acc

08006d2c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b08a      	sub	sp, #40	; 0x28
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	607a      	str	r2, [r7, #4]
 8006d38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d10a      	bne.n	8006d5a <xTimerGenericCommand+0x2e>
	__asm volatile
 8006d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d48:	f383 8811 	msr	BASEPRI, r3
 8006d4c:	f3bf 8f6f 	isb	sy
 8006d50:	f3bf 8f4f 	dsb	sy
 8006d54:	623b      	str	r3, [r7, #32]
}
 8006d56:	bf00      	nop
 8006d58:	e7fe      	b.n	8006d58 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006d5a:	4b1a      	ldr	r3, [pc, #104]	; (8006dc4 <xTimerGenericCommand+0x98>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d02a      	beq.n	8006db8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	2b05      	cmp	r3, #5
 8006d72:	dc18      	bgt.n	8006da6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006d74:	f7ff fe88 	bl	8006a88 <xTaskGetSchedulerState>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	2b02      	cmp	r3, #2
 8006d7c:	d109      	bne.n	8006d92 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006d7e:	4b11      	ldr	r3, [pc, #68]	; (8006dc4 <xTimerGenericCommand+0x98>)
 8006d80:	6818      	ldr	r0, [r3, #0]
 8006d82:	f107 0110 	add.w	r1, r7, #16
 8006d86:	2300      	movs	r3, #0
 8006d88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d8a:	f7fe fc2d 	bl	80055e8 <xQueueGenericSend>
 8006d8e:	6278      	str	r0, [r7, #36]	; 0x24
 8006d90:	e012      	b.n	8006db8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006d92:	4b0c      	ldr	r3, [pc, #48]	; (8006dc4 <xTimerGenericCommand+0x98>)
 8006d94:	6818      	ldr	r0, [r3, #0]
 8006d96:	f107 0110 	add.w	r1, r7, #16
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f7fe fc23 	bl	80055e8 <xQueueGenericSend>
 8006da2:	6278      	str	r0, [r7, #36]	; 0x24
 8006da4:	e008      	b.n	8006db8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006da6:	4b07      	ldr	r3, [pc, #28]	; (8006dc4 <xTimerGenericCommand+0x98>)
 8006da8:	6818      	ldr	r0, [r3, #0]
 8006daa:	f107 0110 	add.w	r1, r7, #16
 8006dae:	2300      	movs	r3, #0
 8006db0:	683a      	ldr	r2, [r7, #0]
 8006db2:	f7fe fd17 	bl	80057e4 <xQueueGenericSendFromISR>
 8006db6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3728      	adds	r7, #40	; 0x28
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop
 8006dc4:	20000ac8 	.word	0x20000ac8

08006dc8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b088      	sub	sp, #32
 8006dcc:	af02      	add	r7, sp, #8
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006dd2:	4b1c      	ldr	r3, [pc, #112]	; (8006e44 <prvProcessExpiredTimer+0x7c>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	68db      	ldr	r3, [r3, #12]
 8006dda:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	3304      	adds	r3, #4
 8006de0:	4618      	mov	r0, r3
 8006de2:	f7fe fad8 	bl	8005396 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	69db      	ldr	r3, [r3, #28]
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d122      	bne.n	8006e34 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	699a      	ldr	r2, [r3, #24]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	18d1      	adds	r1, r2, r3
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	683a      	ldr	r2, [r7, #0]
 8006dfa:	6978      	ldr	r0, [r7, #20]
 8006dfc:	f000 f8c8 	bl	8006f90 <prvInsertTimerInActiveList>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d016      	beq.n	8006e34 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e06:	2300      	movs	r3, #0
 8006e08:	9300      	str	r3, [sp, #0]
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	2100      	movs	r1, #0
 8006e10:	6978      	ldr	r0, [r7, #20]
 8006e12:	f7ff ff8b 	bl	8006d2c <xTimerGenericCommand>
 8006e16:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d10a      	bne.n	8006e34 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8006e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e22:	f383 8811 	msr	BASEPRI, r3
 8006e26:	f3bf 8f6f 	isb	sy
 8006e2a:	f3bf 8f4f 	dsb	sy
 8006e2e:	60fb      	str	r3, [r7, #12]
}
 8006e30:	bf00      	nop
 8006e32:	e7fe      	b.n	8006e32 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e38:	6978      	ldr	r0, [r7, #20]
 8006e3a:	4798      	blx	r3
}
 8006e3c:	bf00      	nop
 8006e3e:	3718      	adds	r7, #24
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	20000ac0 	.word	0x20000ac0

08006e48 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e50:	f107 0308 	add.w	r3, r7, #8
 8006e54:	4618      	mov	r0, r3
 8006e56:	f000 f857 	bl	8006f08 <prvGetNextExpireTime>
 8006e5a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	4619      	mov	r1, r3
 8006e60:	68f8      	ldr	r0, [r7, #12]
 8006e62:	f000 f803 	bl	8006e6c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006e66:	f000 f8d5 	bl	8007014 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e6a:	e7f1      	b.n	8006e50 <prvTimerTask+0x8>

08006e6c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006e76:	f7ff f9bf 	bl	80061f8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e7a:	f107 0308 	add.w	r3, r7, #8
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f000 f866 	bl	8006f50 <prvSampleTimeNow>
 8006e84:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d130      	bne.n	8006eee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d10a      	bne.n	8006ea8 <prvProcessTimerOrBlockTask+0x3c>
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d806      	bhi.n	8006ea8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006e9a:	f7ff f9bb 	bl	8006214 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006e9e:	68f9      	ldr	r1, [r7, #12]
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f7ff ff91 	bl	8006dc8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006ea6:	e024      	b.n	8006ef2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d008      	beq.n	8006ec0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006eae:	4b13      	ldr	r3, [pc, #76]	; (8006efc <prvProcessTimerOrBlockTask+0x90>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	bf0c      	ite	eq
 8006eb8:	2301      	moveq	r3, #1
 8006eba:	2300      	movne	r3, #0
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006ec0:	4b0f      	ldr	r3, [pc, #60]	; (8006f00 <prvProcessTimerOrBlockTask+0x94>)
 8006ec2:	6818      	ldr	r0, [r3, #0]
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	683a      	ldr	r2, [r7, #0]
 8006ecc:	4619      	mov	r1, r3
 8006ece:	f7fe ff3b 	bl	8005d48 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006ed2:	f7ff f99f 	bl	8006214 <xTaskResumeAll>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d10a      	bne.n	8006ef2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006edc:	4b09      	ldr	r3, [pc, #36]	; (8006f04 <prvProcessTimerOrBlockTask+0x98>)
 8006ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ee2:	601a      	str	r2, [r3, #0]
 8006ee4:	f3bf 8f4f 	dsb	sy
 8006ee8:	f3bf 8f6f 	isb	sy
}
 8006eec:	e001      	b.n	8006ef2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006eee:	f7ff f991 	bl	8006214 <xTaskResumeAll>
}
 8006ef2:	bf00      	nop
 8006ef4:	3710      	adds	r7, #16
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
 8006efa:	bf00      	nop
 8006efc:	20000ac4 	.word	0x20000ac4
 8006f00:	20000ac8 	.word	0x20000ac8
 8006f04:	e000ed04 	.word	0xe000ed04

08006f08 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b085      	sub	sp, #20
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006f10:	4b0e      	ldr	r3, [pc, #56]	; (8006f4c <prvGetNextExpireTime+0x44>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	bf0c      	ite	eq
 8006f1a:	2301      	moveq	r3, #1
 8006f1c:	2300      	movne	r3, #0
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	461a      	mov	r2, r3
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d105      	bne.n	8006f3a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f2e:	4b07      	ldr	r3, [pc, #28]	; (8006f4c <prvGetNextExpireTime+0x44>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	60fb      	str	r3, [r7, #12]
 8006f38:	e001      	b.n	8006f3e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3714      	adds	r7, #20
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr
 8006f4c:	20000ac0 	.word	0x20000ac0

08006f50 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006f58:	f7ff f9f8 	bl	800634c <xTaskGetTickCount>
 8006f5c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006f5e:	4b0b      	ldr	r3, [pc, #44]	; (8006f8c <prvSampleTimeNow+0x3c>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	68fa      	ldr	r2, [r7, #12]
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d205      	bcs.n	8006f74 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006f68:	f000 f908 	bl	800717c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	601a      	str	r2, [r3, #0]
 8006f72:	e002      	b.n	8006f7a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006f7a:	4a04      	ldr	r2, [pc, #16]	; (8006f8c <prvSampleTimeNow+0x3c>)
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006f80:	68fb      	ldr	r3, [r7, #12]
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3710      	adds	r7, #16
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
 8006f8a:	bf00      	nop
 8006f8c:	20000ad0 	.word	0x20000ad0

08006f90 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b086      	sub	sp, #24
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	60b9      	str	r1, [r7, #8]
 8006f9a:	607a      	str	r2, [r7, #4]
 8006f9c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	68ba      	ldr	r2, [r7, #8]
 8006fa6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	68fa      	ldr	r2, [r7, #12]
 8006fac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006fae:	68ba      	ldr	r2, [r7, #8]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d812      	bhi.n	8006fdc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	1ad2      	subs	r2, r2, r3
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	699b      	ldr	r3, [r3, #24]
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d302      	bcc.n	8006fca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	617b      	str	r3, [r7, #20]
 8006fc8:	e01b      	b.n	8007002 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006fca:	4b10      	ldr	r3, [pc, #64]	; (800700c <prvInsertTimerInActiveList+0x7c>)
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	3304      	adds	r3, #4
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	4610      	mov	r0, r2
 8006fd6:	f7fe f9a5 	bl	8005324 <vListInsert>
 8006fda:	e012      	b.n	8007002 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d206      	bcs.n	8006ff2 <prvInsertTimerInActiveList+0x62>
 8006fe4:	68ba      	ldr	r2, [r7, #8]
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d302      	bcc.n	8006ff2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006fec:	2301      	movs	r3, #1
 8006fee:	617b      	str	r3, [r7, #20]
 8006ff0:	e007      	b.n	8007002 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006ff2:	4b07      	ldr	r3, [pc, #28]	; (8007010 <prvInsertTimerInActiveList+0x80>)
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	3304      	adds	r3, #4
 8006ffa:	4619      	mov	r1, r3
 8006ffc:	4610      	mov	r0, r2
 8006ffe:	f7fe f991 	bl	8005324 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007002:	697b      	ldr	r3, [r7, #20]
}
 8007004:	4618      	mov	r0, r3
 8007006:	3718      	adds	r7, #24
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}
 800700c:	20000ac4 	.word	0x20000ac4
 8007010:	20000ac0 	.word	0x20000ac0

08007014 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b08e      	sub	sp, #56	; 0x38
 8007018:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800701a:	e09d      	b.n	8007158 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2b00      	cmp	r3, #0
 8007020:	da18      	bge.n	8007054 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007022:	1d3b      	adds	r3, r7, #4
 8007024:	3304      	adds	r3, #4
 8007026:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800702a:	2b00      	cmp	r3, #0
 800702c:	d10a      	bne.n	8007044 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800702e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007032:	f383 8811 	msr	BASEPRI, r3
 8007036:	f3bf 8f6f 	isb	sy
 800703a:	f3bf 8f4f 	dsb	sy
 800703e:	61fb      	str	r3, [r7, #28]
}
 8007040:	bf00      	nop
 8007042:	e7fe      	b.n	8007042 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800704a:	6850      	ldr	r0, [r2, #4]
 800704c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800704e:	6892      	ldr	r2, [r2, #8]
 8007050:	4611      	mov	r1, r2
 8007052:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2b00      	cmp	r3, #0
 8007058:	db7e      	blt.n	8007158 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800705e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007060:	695b      	ldr	r3, [r3, #20]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d004      	beq.n	8007070 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007068:	3304      	adds	r3, #4
 800706a:	4618      	mov	r0, r3
 800706c:	f7fe f993 	bl	8005396 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007070:	463b      	mov	r3, r7
 8007072:	4618      	mov	r0, r3
 8007074:	f7ff ff6c 	bl	8006f50 <prvSampleTimeNow>
 8007078:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2b09      	cmp	r3, #9
 800707e:	d86a      	bhi.n	8007156 <prvProcessReceivedCommands+0x142>
 8007080:	a201      	add	r2, pc, #4	; (adr r2, 8007088 <prvProcessReceivedCommands+0x74>)
 8007082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007086:	bf00      	nop
 8007088:	080070b1 	.word	0x080070b1
 800708c:	080070b1 	.word	0x080070b1
 8007090:	080070b1 	.word	0x080070b1
 8007094:	08007159 	.word	0x08007159
 8007098:	0800710d 	.word	0x0800710d
 800709c:	08007145 	.word	0x08007145
 80070a0:	080070b1 	.word	0x080070b1
 80070a4:	080070b1 	.word	0x080070b1
 80070a8:	08007159 	.word	0x08007159
 80070ac:	0800710d 	.word	0x0800710d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80070b0:	68ba      	ldr	r2, [r7, #8]
 80070b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b4:	699b      	ldr	r3, [r3, #24]
 80070b6:	18d1      	adds	r1, r2, r3
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070be:	f7ff ff67 	bl	8006f90 <prvInsertTimerInActiveList>
 80070c2:	4603      	mov	r3, r0
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d047      	beq.n	8007158 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80070c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070ce:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80070d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d2:	69db      	ldr	r3, [r3, #28]
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d13f      	bne.n	8007158 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80070d8:	68ba      	ldr	r2, [r7, #8]
 80070da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070dc:	699b      	ldr	r3, [r3, #24]
 80070de:	441a      	add	r2, r3
 80070e0:	2300      	movs	r3, #0
 80070e2:	9300      	str	r3, [sp, #0]
 80070e4:	2300      	movs	r3, #0
 80070e6:	2100      	movs	r1, #0
 80070e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070ea:	f7ff fe1f 	bl	8006d2c <xTimerGenericCommand>
 80070ee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80070f0:	6a3b      	ldr	r3, [r7, #32]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d130      	bne.n	8007158 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80070f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070fa:	f383 8811 	msr	BASEPRI, r3
 80070fe:	f3bf 8f6f 	isb	sy
 8007102:	f3bf 8f4f 	dsb	sy
 8007106:	61bb      	str	r3, [r7, #24]
}
 8007108:	bf00      	nop
 800710a:	e7fe      	b.n	800710a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800710c:	68ba      	ldr	r2, [r7, #8]
 800710e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007110:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007114:	699b      	ldr	r3, [r3, #24]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d10a      	bne.n	8007130 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800711a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711e:	f383 8811 	msr	BASEPRI, r3
 8007122:	f3bf 8f6f 	isb	sy
 8007126:	f3bf 8f4f 	dsb	sy
 800712a:	617b      	str	r3, [r7, #20]
}
 800712c:	bf00      	nop
 800712e:	e7fe      	b.n	800712e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007132:	699a      	ldr	r2, [r3, #24]
 8007134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007136:	18d1      	adds	r1, r2, r3
 8007138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800713c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800713e:	f7ff ff27 	bl	8006f90 <prvInsertTimerInActiveList>
					break;
 8007142:	e009      	b.n	8007158 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007146:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800714a:	2b00      	cmp	r3, #0
 800714c:	d104      	bne.n	8007158 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800714e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007150:	f000 fbc6 	bl	80078e0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007154:	e000      	b.n	8007158 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8007156:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007158:	4b07      	ldr	r3, [pc, #28]	; (8007178 <prvProcessReceivedCommands+0x164>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	1d39      	adds	r1, r7, #4
 800715e:	2200      	movs	r2, #0
 8007160:	4618      	mov	r0, r3
 8007162:	f7fe fbd7 	bl	8005914 <xQueueReceive>
 8007166:	4603      	mov	r3, r0
 8007168:	2b00      	cmp	r3, #0
 800716a:	f47f af57 	bne.w	800701c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800716e:	bf00      	nop
 8007170:	bf00      	nop
 8007172:	3730      	adds	r7, #48	; 0x30
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}
 8007178:	20000ac8 	.word	0x20000ac8

0800717c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b088      	sub	sp, #32
 8007180:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007182:	e045      	b.n	8007210 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007184:	4b2c      	ldr	r3, [pc, #176]	; (8007238 <prvSwitchTimerLists+0xbc>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800718e:	4b2a      	ldr	r3, [pc, #168]	; (8007238 <prvSwitchTimerLists+0xbc>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	68db      	ldr	r3, [r3, #12]
 8007194:	68db      	ldr	r3, [r3, #12]
 8007196:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	3304      	adds	r3, #4
 800719c:	4618      	mov	r0, r3
 800719e:	f7fe f8fa 	bl	8005396 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a6:	68f8      	ldr	r0, [r7, #12]
 80071a8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	69db      	ldr	r3, [r3, #28]
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d12e      	bne.n	8007210 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	699b      	ldr	r3, [r3, #24]
 80071b6:	693a      	ldr	r2, [r7, #16]
 80071b8:	4413      	add	r3, r2
 80071ba:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80071bc:	68ba      	ldr	r2, [r7, #8]
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d90e      	bls.n	80071e2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	68ba      	ldr	r2, [r7, #8]
 80071c8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	68fa      	ldr	r2, [r7, #12]
 80071ce:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80071d0:	4b19      	ldr	r3, [pc, #100]	; (8007238 <prvSwitchTimerLists+0xbc>)
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	3304      	adds	r3, #4
 80071d8:	4619      	mov	r1, r3
 80071da:	4610      	mov	r0, r2
 80071dc:	f7fe f8a2 	bl	8005324 <vListInsert>
 80071e0:	e016      	b.n	8007210 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80071e2:	2300      	movs	r3, #0
 80071e4:	9300      	str	r3, [sp, #0]
 80071e6:	2300      	movs	r3, #0
 80071e8:	693a      	ldr	r2, [r7, #16]
 80071ea:	2100      	movs	r1, #0
 80071ec:	68f8      	ldr	r0, [r7, #12]
 80071ee:	f7ff fd9d 	bl	8006d2c <xTimerGenericCommand>
 80071f2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d10a      	bne.n	8007210 <prvSwitchTimerLists+0x94>
	__asm volatile
 80071fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071fe:	f383 8811 	msr	BASEPRI, r3
 8007202:	f3bf 8f6f 	isb	sy
 8007206:	f3bf 8f4f 	dsb	sy
 800720a:	603b      	str	r3, [r7, #0]
}
 800720c:	bf00      	nop
 800720e:	e7fe      	b.n	800720e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007210:	4b09      	ldr	r3, [pc, #36]	; (8007238 <prvSwitchTimerLists+0xbc>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d1b4      	bne.n	8007184 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800721a:	4b07      	ldr	r3, [pc, #28]	; (8007238 <prvSwitchTimerLists+0xbc>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007220:	4b06      	ldr	r3, [pc, #24]	; (800723c <prvSwitchTimerLists+0xc0>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a04      	ldr	r2, [pc, #16]	; (8007238 <prvSwitchTimerLists+0xbc>)
 8007226:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007228:	4a04      	ldr	r2, [pc, #16]	; (800723c <prvSwitchTimerLists+0xc0>)
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	6013      	str	r3, [r2, #0]
}
 800722e:	bf00      	nop
 8007230:	3718      	adds	r7, #24
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
 8007236:	bf00      	nop
 8007238:	20000ac0 	.word	0x20000ac0
 800723c:	20000ac4 	.word	0x20000ac4

08007240 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b082      	sub	sp, #8
 8007244:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007246:	f000 f965 	bl	8007514 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800724a:	4b15      	ldr	r3, [pc, #84]	; (80072a0 <prvCheckForValidListAndQueue+0x60>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d120      	bne.n	8007294 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007252:	4814      	ldr	r0, [pc, #80]	; (80072a4 <prvCheckForValidListAndQueue+0x64>)
 8007254:	f7fe f815 	bl	8005282 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007258:	4813      	ldr	r0, [pc, #76]	; (80072a8 <prvCheckForValidListAndQueue+0x68>)
 800725a:	f7fe f812 	bl	8005282 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800725e:	4b13      	ldr	r3, [pc, #76]	; (80072ac <prvCheckForValidListAndQueue+0x6c>)
 8007260:	4a10      	ldr	r2, [pc, #64]	; (80072a4 <prvCheckForValidListAndQueue+0x64>)
 8007262:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007264:	4b12      	ldr	r3, [pc, #72]	; (80072b0 <prvCheckForValidListAndQueue+0x70>)
 8007266:	4a10      	ldr	r2, [pc, #64]	; (80072a8 <prvCheckForValidListAndQueue+0x68>)
 8007268:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800726a:	2300      	movs	r3, #0
 800726c:	9300      	str	r3, [sp, #0]
 800726e:	4b11      	ldr	r3, [pc, #68]	; (80072b4 <prvCheckForValidListAndQueue+0x74>)
 8007270:	4a11      	ldr	r2, [pc, #68]	; (80072b8 <prvCheckForValidListAndQueue+0x78>)
 8007272:	2110      	movs	r1, #16
 8007274:	200a      	movs	r0, #10
 8007276:	f7fe f921 	bl	80054bc <xQueueGenericCreateStatic>
 800727a:	4603      	mov	r3, r0
 800727c:	4a08      	ldr	r2, [pc, #32]	; (80072a0 <prvCheckForValidListAndQueue+0x60>)
 800727e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007280:	4b07      	ldr	r3, [pc, #28]	; (80072a0 <prvCheckForValidListAndQueue+0x60>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d005      	beq.n	8007294 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007288:	4b05      	ldr	r3, [pc, #20]	; (80072a0 <prvCheckForValidListAndQueue+0x60>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	490b      	ldr	r1, [pc, #44]	; (80072bc <prvCheckForValidListAndQueue+0x7c>)
 800728e:	4618      	mov	r0, r3
 8007290:	f7fe fd30 	bl	8005cf4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007294:	f000 f96e 	bl	8007574 <vPortExitCritical>
}
 8007298:	bf00      	nop
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	20000ac8 	.word	0x20000ac8
 80072a4:	20000a98 	.word	0x20000a98
 80072a8:	20000aac 	.word	0x20000aac
 80072ac:	20000ac0 	.word	0x20000ac0
 80072b0:	20000ac4 	.word	0x20000ac4
 80072b4:	20000b74 	.word	0x20000b74
 80072b8:	20000ad4 	.word	0x20000ad4
 80072bc:	08007ccc 	.word	0x08007ccc

080072c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80072c0:	b480      	push	{r7}
 80072c2:	b085      	sub	sp, #20
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	3b04      	subs	r3, #4
 80072d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80072d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	3b04      	subs	r3, #4
 80072de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	f023 0201 	bic.w	r2, r3, #1
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	3b04      	subs	r3, #4
 80072ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80072f0:	4a0c      	ldr	r2, [pc, #48]	; (8007324 <pxPortInitialiseStack+0x64>)
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	3b14      	subs	r3, #20
 80072fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	3b04      	subs	r3, #4
 8007306:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f06f 0202 	mvn.w	r2, #2
 800730e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	3b20      	subs	r3, #32
 8007314:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007316:	68fb      	ldr	r3, [r7, #12]
}
 8007318:	4618      	mov	r0, r3
 800731a:	3714      	adds	r7, #20
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr
 8007324:	08007329 	.word	0x08007329

08007328 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007328:	b480      	push	{r7}
 800732a:	b085      	sub	sp, #20
 800732c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800732e:	2300      	movs	r3, #0
 8007330:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007332:	4b12      	ldr	r3, [pc, #72]	; (800737c <prvTaskExitError+0x54>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800733a:	d00a      	beq.n	8007352 <prvTaskExitError+0x2a>
	__asm volatile
 800733c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007340:	f383 8811 	msr	BASEPRI, r3
 8007344:	f3bf 8f6f 	isb	sy
 8007348:	f3bf 8f4f 	dsb	sy
 800734c:	60fb      	str	r3, [r7, #12]
}
 800734e:	bf00      	nop
 8007350:	e7fe      	b.n	8007350 <prvTaskExitError+0x28>
	__asm volatile
 8007352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007356:	f383 8811 	msr	BASEPRI, r3
 800735a:	f3bf 8f6f 	isb	sy
 800735e:	f3bf 8f4f 	dsb	sy
 8007362:	60bb      	str	r3, [r7, #8]
}
 8007364:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007366:	bf00      	nop
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d0fc      	beq.n	8007368 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800736e:	bf00      	nop
 8007370:	bf00      	nop
 8007372:	3714      	adds	r7, #20
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr
 800737c:	2000000c 	.word	0x2000000c

08007380 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007380:	4b07      	ldr	r3, [pc, #28]	; (80073a0 <pxCurrentTCBConst2>)
 8007382:	6819      	ldr	r1, [r3, #0]
 8007384:	6808      	ldr	r0, [r1, #0]
 8007386:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800738a:	f380 8809 	msr	PSP, r0
 800738e:	f3bf 8f6f 	isb	sy
 8007392:	f04f 0000 	mov.w	r0, #0
 8007396:	f380 8811 	msr	BASEPRI, r0
 800739a:	4770      	bx	lr
 800739c:	f3af 8000 	nop.w

080073a0 <pxCurrentTCBConst2>:
 80073a0:	2000096c 	.word	0x2000096c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80073a4:	bf00      	nop
 80073a6:	bf00      	nop

080073a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80073a8:	4808      	ldr	r0, [pc, #32]	; (80073cc <prvPortStartFirstTask+0x24>)
 80073aa:	6800      	ldr	r0, [r0, #0]
 80073ac:	6800      	ldr	r0, [r0, #0]
 80073ae:	f380 8808 	msr	MSP, r0
 80073b2:	f04f 0000 	mov.w	r0, #0
 80073b6:	f380 8814 	msr	CONTROL, r0
 80073ba:	b662      	cpsie	i
 80073bc:	b661      	cpsie	f
 80073be:	f3bf 8f4f 	dsb	sy
 80073c2:	f3bf 8f6f 	isb	sy
 80073c6:	df00      	svc	0
 80073c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80073ca:	bf00      	nop
 80073cc:	e000ed08 	.word	0xe000ed08

080073d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b086      	sub	sp, #24
 80073d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80073d6:	4b46      	ldr	r3, [pc, #280]	; (80074f0 <xPortStartScheduler+0x120>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a46      	ldr	r2, [pc, #280]	; (80074f4 <xPortStartScheduler+0x124>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d10a      	bne.n	80073f6 <xPortStartScheduler+0x26>
	__asm volatile
 80073e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e4:	f383 8811 	msr	BASEPRI, r3
 80073e8:	f3bf 8f6f 	isb	sy
 80073ec:	f3bf 8f4f 	dsb	sy
 80073f0:	613b      	str	r3, [r7, #16]
}
 80073f2:	bf00      	nop
 80073f4:	e7fe      	b.n	80073f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80073f6:	4b3e      	ldr	r3, [pc, #248]	; (80074f0 <xPortStartScheduler+0x120>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a3f      	ldr	r2, [pc, #252]	; (80074f8 <xPortStartScheduler+0x128>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d10a      	bne.n	8007416 <xPortStartScheduler+0x46>
	__asm volatile
 8007400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007404:	f383 8811 	msr	BASEPRI, r3
 8007408:	f3bf 8f6f 	isb	sy
 800740c:	f3bf 8f4f 	dsb	sy
 8007410:	60fb      	str	r3, [r7, #12]
}
 8007412:	bf00      	nop
 8007414:	e7fe      	b.n	8007414 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007416:	4b39      	ldr	r3, [pc, #228]	; (80074fc <xPortStartScheduler+0x12c>)
 8007418:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	b2db      	uxtb	r3, r3
 8007420:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	22ff      	movs	r2, #255	; 0xff
 8007426:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	b2db      	uxtb	r3, r3
 800742e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007430:	78fb      	ldrb	r3, [r7, #3]
 8007432:	b2db      	uxtb	r3, r3
 8007434:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007438:	b2da      	uxtb	r2, r3
 800743a:	4b31      	ldr	r3, [pc, #196]	; (8007500 <xPortStartScheduler+0x130>)
 800743c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800743e:	4b31      	ldr	r3, [pc, #196]	; (8007504 <xPortStartScheduler+0x134>)
 8007440:	2207      	movs	r2, #7
 8007442:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007444:	e009      	b.n	800745a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007446:	4b2f      	ldr	r3, [pc, #188]	; (8007504 <xPortStartScheduler+0x134>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	3b01      	subs	r3, #1
 800744c:	4a2d      	ldr	r2, [pc, #180]	; (8007504 <xPortStartScheduler+0x134>)
 800744e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007450:	78fb      	ldrb	r3, [r7, #3]
 8007452:	b2db      	uxtb	r3, r3
 8007454:	005b      	lsls	r3, r3, #1
 8007456:	b2db      	uxtb	r3, r3
 8007458:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800745a:	78fb      	ldrb	r3, [r7, #3]
 800745c:	b2db      	uxtb	r3, r3
 800745e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007462:	2b80      	cmp	r3, #128	; 0x80
 8007464:	d0ef      	beq.n	8007446 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007466:	4b27      	ldr	r3, [pc, #156]	; (8007504 <xPortStartScheduler+0x134>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f1c3 0307 	rsb	r3, r3, #7
 800746e:	2b04      	cmp	r3, #4
 8007470:	d00a      	beq.n	8007488 <xPortStartScheduler+0xb8>
	__asm volatile
 8007472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007476:	f383 8811 	msr	BASEPRI, r3
 800747a:	f3bf 8f6f 	isb	sy
 800747e:	f3bf 8f4f 	dsb	sy
 8007482:	60bb      	str	r3, [r7, #8]
}
 8007484:	bf00      	nop
 8007486:	e7fe      	b.n	8007486 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007488:	4b1e      	ldr	r3, [pc, #120]	; (8007504 <xPortStartScheduler+0x134>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	021b      	lsls	r3, r3, #8
 800748e:	4a1d      	ldr	r2, [pc, #116]	; (8007504 <xPortStartScheduler+0x134>)
 8007490:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007492:	4b1c      	ldr	r3, [pc, #112]	; (8007504 <xPortStartScheduler+0x134>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800749a:	4a1a      	ldr	r2, [pc, #104]	; (8007504 <xPortStartScheduler+0x134>)
 800749c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	b2da      	uxtb	r2, r3
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80074a6:	4b18      	ldr	r3, [pc, #96]	; (8007508 <xPortStartScheduler+0x138>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a17      	ldr	r2, [pc, #92]	; (8007508 <xPortStartScheduler+0x138>)
 80074ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80074b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80074b2:	4b15      	ldr	r3, [pc, #84]	; (8007508 <xPortStartScheduler+0x138>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a14      	ldr	r2, [pc, #80]	; (8007508 <xPortStartScheduler+0x138>)
 80074b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80074bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80074be:	f000 f8dd 	bl	800767c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80074c2:	4b12      	ldr	r3, [pc, #72]	; (800750c <xPortStartScheduler+0x13c>)
 80074c4:	2200      	movs	r2, #0
 80074c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80074c8:	f000 f8fc 	bl	80076c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80074cc:	4b10      	ldr	r3, [pc, #64]	; (8007510 <xPortStartScheduler+0x140>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a0f      	ldr	r2, [pc, #60]	; (8007510 <xPortStartScheduler+0x140>)
 80074d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80074d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80074d8:	f7ff ff66 	bl	80073a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80074dc:	f7ff f804 	bl	80064e8 <vTaskSwitchContext>
	prvTaskExitError();
 80074e0:	f7ff ff22 	bl	8007328 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80074e4:	2300      	movs	r3, #0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3718      	adds	r7, #24
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	e000ed00 	.word	0xe000ed00
 80074f4:	410fc271 	.word	0x410fc271
 80074f8:	410fc270 	.word	0x410fc270
 80074fc:	e000e400 	.word	0xe000e400
 8007500:	20000bbc 	.word	0x20000bbc
 8007504:	20000bc0 	.word	0x20000bc0
 8007508:	e000ed20 	.word	0xe000ed20
 800750c:	2000000c 	.word	0x2000000c
 8007510:	e000ef34 	.word	0xe000ef34

08007514 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007514:	b480      	push	{r7}
 8007516:	b083      	sub	sp, #12
 8007518:	af00      	add	r7, sp, #0
	__asm volatile
 800751a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800751e:	f383 8811 	msr	BASEPRI, r3
 8007522:	f3bf 8f6f 	isb	sy
 8007526:	f3bf 8f4f 	dsb	sy
 800752a:	607b      	str	r3, [r7, #4]
}
 800752c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800752e:	4b0f      	ldr	r3, [pc, #60]	; (800756c <vPortEnterCritical+0x58>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	3301      	adds	r3, #1
 8007534:	4a0d      	ldr	r2, [pc, #52]	; (800756c <vPortEnterCritical+0x58>)
 8007536:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007538:	4b0c      	ldr	r3, [pc, #48]	; (800756c <vPortEnterCritical+0x58>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	2b01      	cmp	r3, #1
 800753e:	d10f      	bne.n	8007560 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007540:	4b0b      	ldr	r3, [pc, #44]	; (8007570 <vPortEnterCritical+0x5c>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	b2db      	uxtb	r3, r3
 8007546:	2b00      	cmp	r3, #0
 8007548:	d00a      	beq.n	8007560 <vPortEnterCritical+0x4c>
	__asm volatile
 800754a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800754e:	f383 8811 	msr	BASEPRI, r3
 8007552:	f3bf 8f6f 	isb	sy
 8007556:	f3bf 8f4f 	dsb	sy
 800755a:	603b      	str	r3, [r7, #0]
}
 800755c:	bf00      	nop
 800755e:	e7fe      	b.n	800755e <vPortEnterCritical+0x4a>
	}
}
 8007560:	bf00      	nop
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr
 800756c:	2000000c 	.word	0x2000000c
 8007570:	e000ed04 	.word	0xe000ed04

08007574 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800757a:	4b12      	ldr	r3, [pc, #72]	; (80075c4 <vPortExitCritical+0x50>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d10a      	bne.n	8007598 <vPortExitCritical+0x24>
	__asm volatile
 8007582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007586:	f383 8811 	msr	BASEPRI, r3
 800758a:	f3bf 8f6f 	isb	sy
 800758e:	f3bf 8f4f 	dsb	sy
 8007592:	607b      	str	r3, [r7, #4]
}
 8007594:	bf00      	nop
 8007596:	e7fe      	b.n	8007596 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007598:	4b0a      	ldr	r3, [pc, #40]	; (80075c4 <vPortExitCritical+0x50>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	3b01      	subs	r3, #1
 800759e:	4a09      	ldr	r2, [pc, #36]	; (80075c4 <vPortExitCritical+0x50>)
 80075a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80075a2:	4b08      	ldr	r3, [pc, #32]	; (80075c4 <vPortExitCritical+0x50>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d105      	bne.n	80075b6 <vPortExitCritical+0x42>
 80075aa:	2300      	movs	r3, #0
 80075ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	f383 8811 	msr	BASEPRI, r3
}
 80075b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80075b6:	bf00      	nop
 80075b8:	370c      	adds	r7, #12
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr
 80075c2:	bf00      	nop
 80075c4:	2000000c 	.word	0x2000000c
	...

080075d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80075d0:	f3ef 8009 	mrs	r0, PSP
 80075d4:	f3bf 8f6f 	isb	sy
 80075d8:	4b15      	ldr	r3, [pc, #84]	; (8007630 <pxCurrentTCBConst>)
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	f01e 0f10 	tst.w	lr, #16
 80075e0:	bf08      	it	eq
 80075e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80075e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ea:	6010      	str	r0, [r2, #0]
 80075ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80075f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80075f4:	f380 8811 	msr	BASEPRI, r0
 80075f8:	f3bf 8f4f 	dsb	sy
 80075fc:	f3bf 8f6f 	isb	sy
 8007600:	f7fe ff72 	bl	80064e8 <vTaskSwitchContext>
 8007604:	f04f 0000 	mov.w	r0, #0
 8007608:	f380 8811 	msr	BASEPRI, r0
 800760c:	bc09      	pop	{r0, r3}
 800760e:	6819      	ldr	r1, [r3, #0]
 8007610:	6808      	ldr	r0, [r1, #0]
 8007612:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007616:	f01e 0f10 	tst.w	lr, #16
 800761a:	bf08      	it	eq
 800761c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007620:	f380 8809 	msr	PSP, r0
 8007624:	f3bf 8f6f 	isb	sy
 8007628:	4770      	bx	lr
 800762a:	bf00      	nop
 800762c:	f3af 8000 	nop.w

08007630 <pxCurrentTCBConst>:
 8007630:	2000096c 	.word	0x2000096c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007634:	bf00      	nop
 8007636:	bf00      	nop

08007638 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
	__asm volatile
 800763e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007642:	f383 8811 	msr	BASEPRI, r3
 8007646:	f3bf 8f6f 	isb	sy
 800764a:	f3bf 8f4f 	dsb	sy
 800764e:	607b      	str	r3, [r7, #4]
}
 8007650:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007652:	f7fe fe8b 	bl	800636c <xTaskIncrementTick>
 8007656:	4603      	mov	r3, r0
 8007658:	2b00      	cmp	r3, #0
 800765a:	d003      	beq.n	8007664 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800765c:	4b06      	ldr	r3, [pc, #24]	; (8007678 <SysTick_Handler+0x40>)
 800765e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007662:	601a      	str	r2, [r3, #0]
 8007664:	2300      	movs	r3, #0
 8007666:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	f383 8811 	msr	BASEPRI, r3
}
 800766e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007670:	bf00      	nop
 8007672:	3708      	adds	r7, #8
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}
 8007678:	e000ed04 	.word	0xe000ed04

0800767c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800767c:	b480      	push	{r7}
 800767e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007680:	4b0b      	ldr	r3, [pc, #44]	; (80076b0 <vPortSetupTimerInterrupt+0x34>)
 8007682:	2200      	movs	r2, #0
 8007684:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007686:	4b0b      	ldr	r3, [pc, #44]	; (80076b4 <vPortSetupTimerInterrupt+0x38>)
 8007688:	2200      	movs	r2, #0
 800768a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800768c:	4b0a      	ldr	r3, [pc, #40]	; (80076b8 <vPortSetupTimerInterrupt+0x3c>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a0a      	ldr	r2, [pc, #40]	; (80076bc <vPortSetupTimerInterrupt+0x40>)
 8007692:	fba2 2303 	umull	r2, r3, r2, r3
 8007696:	099b      	lsrs	r3, r3, #6
 8007698:	4a09      	ldr	r2, [pc, #36]	; (80076c0 <vPortSetupTimerInterrupt+0x44>)
 800769a:	3b01      	subs	r3, #1
 800769c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800769e:	4b04      	ldr	r3, [pc, #16]	; (80076b0 <vPortSetupTimerInterrupt+0x34>)
 80076a0:	2207      	movs	r2, #7
 80076a2:	601a      	str	r2, [r3, #0]
}
 80076a4:	bf00      	nop
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr
 80076ae:	bf00      	nop
 80076b0:	e000e010 	.word	0xe000e010
 80076b4:	e000e018 	.word	0xe000e018
 80076b8:	20000000 	.word	0x20000000
 80076bc:	10624dd3 	.word	0x10624dd3
 80076c0:	e000e014 	.word	0xe000e014

080076c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80076c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80076d4 <vPortEnableVFP+0x10>
 80076c8:	6801      	ldr	r1, [r0, #0]
 80076ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80076ce:	6001      	str	r1, [r0, #0]
 80076d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80076d2:	bf00      	nop
 80076d4:	e000ed88 	.word	0xe000ed88

080076d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80076d8:	b480      	push	{r7}
 80076da:	b085      	sub	sp, #20
 80076dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80076de:	f3ef 8305 	mrs	r3, IPSR
 80076e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2b0f      	cmp	r3, #15
 80076e8:	d914      	bls.n	8007714 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80076ea:	4a17      	ldr	r2, [pc, #92]	; (8007748 <vPortValidateInterruptPriority+0x70>)
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	4413      	add	r3, r2
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80076f4:	4b15      	ldr	r3, [pc, #84]	; (800774c <vPortValidateInterruptPriority+0x74>)
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	7afa      	ldrb	r2, [r7, #11]
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d20a      	bcs.n	8007714 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80076fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007702:	f383 8811 	msr	BASEPRI, r3
 8007706:	f3bf 8f6f 	isb	sy
 800770a:	f3bf 8f4f 	dsb	sy
 800770e:	607b      	str	r3, [r7, #4]
}
 8007710:	bf00      	nop
 8007712:	e7fe      	b.n	8007712 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007714:	4b0e      	ldr	r3, [pc, #56]	; (8007750 <vPortValidateInterruptPriority+0x78>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800771c:	4b0d      	ldr	r3, [pc, #52]	; (8007754 <vPortValidateInterruptPriority+0x7c>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	429a      	cmp	r2, r3
 8007722:	d90a      	bls.n	800773a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007728:	f383 8811 	msr	BASEPRI, r3
 800772c:	f3bf 8f6f 	isb	sy
 8007730:	f3bf 8f4f 	dsb	sy
 8007734:	603b      	str	r3, [r7, #0]
}
 8007736:	bf00      	nop
 8007738:	e7fe      	b.n	8007738 <vPortValidateInterruptPriority+0x60>
	}
 800773a:	bf00      	nop
 800773c:	3714      	adds	r7, #20
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr
 8007746:	bf00      	nop
 8007748:	e000e3f0 	.word	0xe000e3f0
 800774c:	20000bbc 	.word	0x20000bbc
 8007750:	e000ed0c 	.word	0xe000ed0c
 8007754:	20000bc0 	.word	0x20000bc0

08007758 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b08a      	sub	sp, #40	; 0x28
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007760:	2300      	movs	r3, #0
 8007762:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007764:	f7fe fd48 	bl	80061f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007768:	4b58      	ldr	r3, [pc, #352]	; (80078cc <pvPortMalloc+0x174>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d101      	bne.n	8007774 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007770:	f000 f910 	bl	8007994 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007774:	4b56      	ldr	r3, [pc, #344]	; (80078d0 <pvPortMalloc+0x178>)
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	4013      	ands	r3, r2
 800777c:	2b00      	cmp	r3, #0
 800777e:	f040 808e 	bne.w	800789e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d01d      	beq.n	80077c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007788:	2208      	movs	r2, #8
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	4413      	add	r3, r2
 800778e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f003 0307 	and.w	r3, r3, #7
 8007796:	2b00      	cmp	r3, #0
 8007798:	d014      	beq.n	80077c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f023 0307 	bic.w	r3, r3, #7
 80077a0:	3308      	adds	r3, #8
 80077a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f003 0307 	and.w	r3, r3, #7
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d00a      	beq.n	80077c4 <pvPortMalloc+0x6c>
	__asm volatile
 80077ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b2:	f383 8811 	msr	BASEPRI, r3
 80077b6:	f3bf 8f6f 	isb	sy
 80077ba:	f3bf 8f4f 	dsb	sy
 80077be:	617b      	str	r3, [r7, #20]
}
 80077c0:	bf00      	nop
 80077c2:	e7fe      	b.n	80077c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d069      	beq.n	800789e <pvPortMalloc+0x146>
 80077ca:	4b42      	ldr	r3, [pc, #264]	; (80078d4 <pvPortMalloc+0x17c>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d864      	bhi.n	800789e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80077d4:	4b40      	ldr	r3, [pc, #256]	; (80078d8 <pvPortMalloc+0x180>)
 80077d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80077d8:	4b3f      	ldr	r3, [pc, #252]	; (80078d8 <pvPortMalloc+0x180>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80077de:	e004      	b.n	80077ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80077e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80077e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80077ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d903      	bls.n	80077fc <pvPortMalloc+0xa4>
 80077f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d1f1      	bne.n	80077e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80077fc:	4b33      	ldr	r3, [pc, #204]	; (80078cc <pvPortMalloc+0x174>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007802:	429a      	cmp	r2, r3
 8007804:	d04b      	beq.n	800789e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007806:	6a3b      	ldr	r3, [r7, #32]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	2208      	movs	r2, #8
 800780c:	4413      	add	r3, r2
 800780e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	6a3b      	ldr	r3, [r7, #32]
 8007816:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781a:	685a      	ldr	r2, [r3, #4]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	1ad2      	subs	r2, r2, r3
 8007820:	2308      	movs	r3, #8
 8007822:	005b      	lsls	r3, r3, #1
 8007824:	429a      	cmp	r2, r3
 8007826:	d91f      	bls.n	8007868 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4413      	add	r3, r2
 800782e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007830:	69bb      	ldr	r3, [r7, #24]
 8007832:	f003 0307 	and.w	r3, r3, #7
 8007836:	2b00      	cmp	r3, #0
 8007838:	d00a      	beq.n	8007850 <pvPortMalloc+0xf8>
	__asm volatile
 800783a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800783e:	f383 8811 	msr	BASEPRI, r3
 8007842:	f3bf 8f6f 	isb	sy
 8007846:	f3bf 8f4f 	dsb	sy
 800784a:	613b      	str	r3, [r7, #16]
}
 800784c:	bf00      	nop
 800784e:	e7fe      	b.n	800784e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007852:	685a      	ldr	r2, [r3, #4]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	1ad2      	subs	r2, r2, r3
 8007858:	69bb      	ldr	r3, [r7, #24]
 800785a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800785c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007862:	69b8      	ldr	r0, [r7, #24]
 8007864:	f000 f8f8 	bl	8007a58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007868:	4b1a      	ldr	r3, [pc, #104]	; (80078d4 <pvPortMalloc+0x17c>)
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	1ad3      	subs	r3, r2, r3
 8007872:	4a18      	ldr	r2, [pc, #96]	; (80078d4 <pvPortMalloc+0x17c>)
 8007874:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007876:	4b17      	ldr	r3, [pc, #92]	; (80078d4 <pvPortMalloc+0x17c>)
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	4b18      	ldr	r3, [pc, #96]	; (80078dc <pvPortMalloc+0x184>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	429a      	cmp	r2, r3
 8007880:	d203      	bcs.n	800788a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007882:	4b14      	ldr	r3, [pc, #80]	; (80078d4 <pvPortMalloc+0x17c>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a15      	ldr	r2, [pc, #84]	; (80078dc <pvPortMalloc+0x184>)
 8007888:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800788a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788c:	685a      	ldr	r2, [r3, #4]
 800788e:	4b10      	ldr	r3, [pc, #64]	; (80078d0 <pvPortMalloc+0x178>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	431a      	orrs	r2, r3
 8007894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007896:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789a:	2200      	movs	r2, #0
 800789c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800789e:	f7fe fcb9 	bl	8006214 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80078a2:	69fb      	ldr	r3, [r7, #28]
 80078a4:	f003 0307 	and.w	r3, r3, #7
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d00a      	beq.n	80078c2 <pvPortMalloc+0x16a>
	__asm volatile
 80078ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b0:	f383 8811 	msr	BASEPRI, r3
 80078b4:	f3bf 8f6f 	isb	sy
 80078b8:	f3bf 8f4f 	dsb	sy
 80078bc:	60fb      	str	r3, [r7, #12]
}
 80078be:	bf00      	nop
 80078c0:	e7fe      	b.n	80078c0 <pvPortMalloc+0x168>
	return pvReturn;
 80078c2:	69fb      	ldr	r3, [r7, #28]
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3728      	adds	r7, #40	; 0x28
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}
 80078cc:	200023cc 	.word	0x200023cc
 80078d0:	200023d8 	.word	0x200023d8
 80078d4:	200023d0 	.word	0x200023d0
 80078d8:	200023c4 	.word	0x200023c4
 80078dc:	200023d4 	.word	0x200023d4

080078e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b086      	sub	sp, #24
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d048      	beq.n	8007984 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80078f2:	2308      	movs	r3, #8
 80078f4:	425b      	negs	r3, r3
 80078f6:	697a      	ldr	r2, [r7, #20]
 80078f8:	4413      	add	r3, r2
 80078fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	685a      	ldr	r2, [r3, #4]
 8007904:	4b21      	ldr	r3, [pc, #132]	; (800798c <vPortFree+0xac>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4013      	ands	r3, r2
 800790a:	2b00      	cmp	r3, #0
 800790c:	d10a      	bne.n	8007924 <vPortFree+0x44>
	__asm volatile
 800790e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007912:	f383 8811 	msr	BASEPRI, r3
 8007916:	f3bf 8f6f 	isb	sy
 800791a:	f3bf 8f4f 	dsb	sy
 800791e:	60fb      	str	r3, [r7, #12]
}
 8007920:	bf00      	nop
 8007922:	e7fe      	b.n	8007922 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d00a      	beq.n	8007942 <vPortFree+0x62>
	__asm volatile
 800792c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007930:	f383 8811 	msr	BASEPRI, r3
 8007934:	f3bf 8f6f 	isb	sy
 8007938:	f3bf 8f4f 	dsb	sy
 800793c:	60bb      	str	r3, [r7, #8]
}
 800793e:	bf00      	nop
 8007940:	e7fe      	b.n	8007940 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	685a      	ldr	r2, [r3, #4]
 8007946:	4b11      	ldr	r3, [pc, #68]	; (800798c <vPortFree+0xac>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4013      	ands	r3, r2
 800794c:	2b00      	cmp	r3, #0
 800794e:	d019      	beq.n	8007984 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d115      	bne.n	8007984 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	685a      	ldr	r2, [r3, #4]
 800795c:	4b0b      	ldr	r3, [pc, #44]	; (800798c <vPortFree+0xac>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	43db      	mvns	r3, r3
 8007962:	401a      	ands	r2, r3
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007968:	f7fe fc46 	bl	80061f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	685a      	ldr	r2, [r3, #4]
 8007970:	4b07      	ldr	r3, [pc, #28]	; (8007990 <vPortFree+0xb0>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4413      	add	r3, r2
 8007976:	4a06      	ldr	r2, [pc, #24]	; (8007990 <vPortFree+0xb0>)
 8007978:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800797a:	6938      	ldr	r0, [r7, #16]
 800797c:	f000 f86c 	bl	8007a58 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007980:	f7fe fc48 	bl	8006214 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007984:	bf00      	nop
 8007986:	3718      	adds	r7, #24
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}
 800798c:	200023d8 	.word	0x200023d8
 8007990:	200023d0 	.word	0x200023d0

08007994 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007994:	b480      	push	{r7}
 8007996:	b085      	sub	sp, #20
 8007998:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800799a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800799e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80079a0:	4b27      	ldr	r3, [pc, #156]	; (8007a40 <prvHeapInit+0xac>)
 80079a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f003 0307 	and.w	r3, r3, #7
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d00c      	beq.n	80079c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	3307      	adds	r3, #7
 80079b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f023 0307 	bic.w	r3, r3, #7
 80079ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80079bc:	68ba      	ldr	r2, [r7, #8]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	1ad3      	subs	r3, r2, r3
 80079c2:	4a1f      	ldr	r2, [pc, #124]	; (8007a40 <prvHeapInit+0xac>)
 80079c4:	4413      	add	r3, r2
 80079c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80079cc:	4a1d      	ldr	r2, [pc, #116]	; (8007a44 <prvHeapInit+0xb0>)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80079d2:	4b1c      	ldr	r3, [pc, #112]	; (8007a44 <prvHeapInit+0xb0>)
 80079d4:	2200      	movs	r2, #0
 80079d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	68ba      	ldr	r2, [r7, #8]
 80079dc:	4413      	add	r3, r2
 80079de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80079e0:	2208      	movs	r2, #8
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	1a9b      	subs	r3, r3, r2
 80079e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f023 0307 	bic.w	r3, r3, #7
 80079ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	4a15      	ldr	r2, [pc, #84]	; (8007a48 <prvHeapInit+0xb4>)
 80079f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80079f6:	4b14      	ldr	r3, [pc, #80]	; (8007a48 <prvHeapInit+0xb4>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	2200      	movs	r2, #0
 80079fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80079fe:	4b12      	ldr	r3, [pc, #72]	; (8007a48 <prvHeapInit+0xb4>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	2200      	movs	r2, #0
 8007a04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	68fa      	ldr	r2, [r7, #12]
 8007a0e:	1ad2      	subs	r2, r2, r3
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007a14:	4b0c      	ldr	r3, [pc, #48]	; (8007a48 <prvHeapInit+0xb4>)
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	4a0a      	ldr	r2, [pc, #40]	; (8007a4c <prvHeapInit+0xb8>)
 8007a22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	4a09      	ldr	r2, [pc, #36]	; (8007a50 <prvHeapInit+0xbc>)
 8007a2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007a2c:	4b09      	ldr	r3, [pc, #36]	; (8007a54 <prvHeapInit+0xc0>)
 8007a2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007a32:	601a      	str	r2, [r3, #0]
}
 8007a34:	bf00      	nop
 8007a36:	3714      	adds	r7, #20
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr
 8007a40:	20000bc4 	.word	0x20000bc4
 8007a44:	200023c4 	.word	0x200023c4
 8007a48:	200023cc 	.word	0x200023cc
 8007a4c:	200023d4 	.word	0x200023d4
 8007a50:	200023d0 	.word	0x200023d0
 8007a54:	200023d8 	.word	0x200023d8

08007a58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b085      	sub	sp, #20
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007a60:	4b28      	ldr	r3, [pc, #160]	; (8007b04 <prvInsertBlockIntoFreeList+0xac>)
 8007a62:	60fb      	str	r3, [r7, #12]
 8007a64:	e002      	b.n	8007a6c <prvInsertBlockIntoFreeList+0x14>
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	60fb      	str	r3, [r7, #12]
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	687a      	ldr	r2, [r7, #4]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d8f7      	bhi.n	8007a66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	68ba      	ldr	r2, [r7, #8]
 8007a80:	4413      	add	r3, r2
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d108      	bne.n	8007a9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	685a      	ldr	r2, [r3, #4]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	441a      	add	r2, r3
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	68ba      	ldr	r2, [r7, #8]
 8007aa4:	441a      	add	r2, r3
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d118      	bne.n	8007ae0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	4b15      	ldr	r3, [pc, #84]	; (8007b08 <prvInsertBlockIntoFreeList+0xb0>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d00d      	beq.n	8007ad6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	685a      	ldr	r2, [r3, #4]
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	441a      	add	r2, r3
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	601a      	str	r2, [r3, #0]
 8007ad4:	e008      	b.n	8007ae8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007ad6:	4b0c      	ldr	r3, [pc, #48]	; (8007b08 <prvInsertBlockIntoFreeList+0xb0>)
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	601a      	str	r2, [r3, #0]
 8007ade:	e003      	b.n	8007ae8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007ae8:	68fa      	ldr	r2, [r7, #12]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d002      	beq.n	8007af6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	687a      	ldr	r2, [r7, #4]
 8007af4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007af6:	bf00      	nop
 8007af8:	3714      	adds	r7, #20
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr
 8007b02:	bf00      	nop
 8007b04:	200023c4 	.word	0x200023c4
 8007b08:	200023cc 	.word	0x200023cc

08007b0c <memset>:
 8007b0c:	4402      	add	r2, r0
 8007b0e:	4603      	mov	r3, r0
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d100      	bne.n	8007b16 <memset+0xa>
 8007b14:	4770      	bx	lr
 8007b16:	f803 1b01 	strb.w	r1, [r3], #1
 8007b1a:	e7f9      	b.n	8007b10 <memset+0x4>

08007b1c <__libc_init_array>:
 8007b1c:	b570      	push	{r4, r5, r6, lr}
 8007b1e:	4d0d      	ldr	r5, [pc, #52]	; (8007b54 <__libc_init_array+0x38>)
 8007b20:	4c0d      	ldr	r4, [pc, #52]	; (8007b58 <__libc_init_array+0x3c>)
 8007b22:	1b64      	subs	r4, r4, r5
 8007b24:	10a4      	asrs	r4, r4, #2
 8007b26:	2600      	movs	r6, #0
 8007b28:	42a6      	cmp	r6, r4
 8007b2a:	d109      	bne.n	8007b40 <__libc_init_array+0x24>
 8007b2c:	4d0b      	ldr	r5, [pc, #44]	; (8007b5c <__libc_init_array+0x40>)
 8007b2e:	4c0c      	ldr	r4, [pc, #48]	; (8007b60 <__libc_init_array+0x44>)
 8007b30:	f000 f826 	bl	8007b80 <_init>
 8007b34:	1b64      	subs	r4, r4, r5
 8007b36:	10a4      	asrs	r4, r4, #2
 8007b38:	2600      	movs	r6, #0
 8007b3a:	42a6      	cmp	r6, r4
 8007b3c:	d105      	bne.n	8007b4a <__libc_init_array+0x2e>
 8007b3e:	bd70      	pop	{r4, r5, r6, pc}
 8007b40:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b44:	4798      	blx	r3
 8007b46:	3601      	adds	r6, #1
 8007b48:	e7ee      	b.n	8007b28 <__libc_init_array+0xc>
 8007b4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b4e:	4798      	blx	r3
 8007b50:	3601      	adds	r6, #1
 8007b52:	e7f2      	b.n	8007b3a <__libc_init_array+0x1e>
 8007b54:	08007d0c 	.word	0x08007d0c
 8007b58:	08007d0c 	.word	0x08007d0c
 8007b5c:	08007d0c 	.word	0x08007d0c
 8007b60:	08007d10 	.word	0x08007d10

08007b64 <memcpy>:
 8007b64:	440a      	add	r2, r1
 8007b66:	4291      	cmp	r1, r2
 8007b68:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b6c:	d100      	bne.n	8007b70 <memcpy+0xc>
 8007b6e:	4770      	bx	lr
 8007b70:	b510      	push	{r4, lr}
 8007b72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b7a:	4291      	cmp	r1, r2
 8007b7c:	d1f9      	bne.n	8007b72 <memcpy+0xe>
 8007b7e:	bd10      	pop	{r4, pc}

08007b80 <_init>:
 8007b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b82:	bf00      	nop
 8007b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b86:	bc08      	pop	{r3}
 8007b88:	469e      	mov	lr, r3
 8007b8a:	4770      	bx	lr

08007b8c <_fini>:
 8007b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b8e:	bf00      	nop
 8007b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b92:	bc08      	pop	{r3}
 8007b94:	469e      	mov	lr, r3
 8007b96:	4770      	bx	lr
